%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: icon02.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Hari Lal. Yadav
%%CreationDate: 9/17/10
%%BoundingBox: 0 0 75 31
%%HiResBoundingBox: 0 0 74.5899 30.8604
%%CropBox: 0 0 74.5899 30.8604
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 56 8%%BeginData: 12070 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD23FF2827F8277DFFFF7D7DA8272727A8FFFF282727277DA852AF%27FD04FF527DFF7E2784FFFF7D27FFFFFF7D7DFD04FF52FF5252527DA859%527D52527D7D7EFFFFFF52FFFFFF7D7DFF7D525252A8FFA8525952AFFFA8%52FFFF7D7DFD14FFA8A87DA87DA87DA87EA8A8FD04FFA8F8277DA8522752%FF527D7D277D52F8FFFF2752A87DFF5352A827A8FFFFFFF87DFFFF5227FF%A8F87DFFFFFF7D277DFFFFA852A8527DA87EFFA8A8527DA8AF7D7DFFFF7D%277DFFFF527D7D52A8A87D27A8A852A87D52FF7D52FF7D27FD12FFA8A87D%A87DA87DA87DA87DA87DA87DA8A8FF2727FD04FF7D27A87DA87D27FFA827%7EFF27A8FFFFFF7D27A827FD04FF277DFFFFFF27522752FD04FF7D5252A8%FFFF52A852FD06FF7D7DFFFFFF52FFFF59527DFFA852A852FD04FF7D52A8%52FFA852FFA852A852A8FD0FFFA8A8FD057DA87D7E7DA87D7E7DA87D7E7D%847D2753FD05FFF87DA8FF7D27535227FFFF27527D52A87D52A827A8FFFF%FF277DFFFFFFA8F827FD05FF7D52A827FFA852A852527D7DFFFFFF527DFF%FFFF527DA852FF2EFFFD047DFD04FFA8527D527D5252FFA85227A8FD0FFF%A8A87DA87DA87DA87DA87DA87EA87DA87DA87DA87E84F87DA8FD04FF277D%FFFF7DF827F87DFFFFFD04277D7E27FF27FD04FF277DFD04FF5252FD05FF%7D7DFF7D52FF52A8527D527DFFFFFF7D7DFFFFFFFD047DFF7D7D7DA8A859%FD05FF52A8525227FFFFA852527DFD0EFF7D847D847DA87D847DA87D7D52%7E7DA87DA87D847DA87D2727A87DFFFFA8F8A8FFFF7D27FF53F8FFFF277D%FFFFFF5352A827A8FFFFFF277DFD04FF277DFD05FF7D52FFFF525252A852%A8FD05FF527DFD04FF2852A8FF7D5252FF7D52FD04FF7D527D59FF7D52FF%A852A8527DFD0CFF7DA87DA87DA87DA87DA87D7D272727527DA87DA87DA8%7DA8522752A87DA82052FFFFFF7D27FFFF2752FF27A8FFFFFF7D2EA827FD%04FF277DFD04FF2752FD05FF7D7DFFFFA8522EA952A8A8FD04FF7D7DFD04%FF7D52FFFFFF287DFFFF527DFFFF8452A8A852FFFF527EA852FFA8527DFD%09FFA87D847D7E7DA87D7E7DA87D27F827F827F8527D7E7DA87D7E7DA852%27F827F827A8FFFFFF5227FFFF7D277D27F827F87D5252A827F827F87DFD%0527FF2752FD05FF7D52FFFFFF7D52A8FD0452FFFFFF5284FD04FF7D7DFF%FFFF7D7DFFFFA8FD04527DFF7E52A8FF7D527D52FFFF7D52A8FD08FF7DA8%7DA87DA87DA87DA87EA8F827F827F827277E7DA87DA87DA87DA87D7D527D%7DFD05FFA8FFFFFFFD04A87D7EA8FFA8FF7DA87D7EA8A87DA87DA8FFA9A8%FD05FFA9FD05FFA8FFA8A8A8FD0FFFA8FD05FFA8A8A8FFFFFFA8FFFFFFA8%FFA8FFFFFFA8FD08FF7D7E7DA87D847DA87D847DA87D52F827F827F82752%A87DA87D847DA87DA87DA87DA87DFD5CFF7DA87DA87DA87DA87DA87DA87D%A85327F827F82727A87D7D7DA87DA8FD047D537D7D7D53A8A8A87EA8A8A8%7EA8A8A87EA8A8A87EA8A8A87EA8A8A87EA8A8A87EA8A8A87EA8A8A87EA8%A8A87EA8A8A87EA8A8A87EA8A8A87EA8A8A87EA8A8A87EA8A8A87EA8A8A8%7EA8A8A87EA8A8A87EA8A8A87EA8A8A87DA8FD05FF7E7D7DA87D7E7DA87D%7E7DA87D7E7D52F827F827277D5227F82752A87D7E7D7E7D7E7DA87D7D7D%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FD05FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD04FFA8A87DA87D%A87DA87DA87DA87DA884A82027F82727A82727F827F82752A87DA87E7D52%7D537D7DA8A8FD0FFFA8FFA8FD15FFA8FFA8FFA8FD2BFFA87D847DA87D84%7DA87D847DA87DA82727F827F87D7D27F827F827F8277DA87D5227522752%275252A8FD0DFFA85252285252FD14FF532752277DFF7D277DFD27FF7DA8%7DA87DA87DA87DA87DA87D7D2727F827F82759A82727F827F827F87DA87D%2752525227FD0452FD0DFF7D5228522753FD14FFFD0552FF275252FD26FF%7D7D7DA87D7E7DA87D7E7DA87DA82727F827F827F87D7D27F827F827F852%7D7E275227525252275227527DFFFFFFA8A87DA8A8FFFFFFA85227522784%A8FFFFFFA8A87DA8A8FD05FFA8FFA8FFFFA8FFA87DA87DA8FF7D277DFD25%FFA8A87DA87DA87DA87DA87DA87DA87D27F827F827F82752A82727F827F8%52A8A87DFD04527E7DFD0452A8A8FFFD065259FFFF7DFD05527DFFFF53FD%0652FFFFFF52535252A87D52FF597D52527DFD29FFA87D847DA87D847DA8%7D847DA87D52F827F827F827F8537D27F827F8277DA87D7D275227527D7D%275227527DA8525227522752275252FF52522E52275227FF525227522752%275252FFA852275227522752A85227522759FD29FF7DA87DA87DA87DA87D%A87DA87DA82727F827F827F8275252F827F82753A87DA87D525252277D7D%7D537D7DA8FD05527D52522E52A87DFD05527DA8522E52527DFD04527DFF%FD0752FFFD045253FD28FFA87D7DA87D7E7DA87D7E7DA87DA85227F827F8%27F827F827F827F827F87D7DA87D7D2752275227527DA87DA87D52275227%7DA852275227A8FF522752277DFF7D2752277DFF522752277DA852275227%522752A8532752277DFD29FF7DA87DA87DA87DA87DA87DA87D52F827F827%F827F827F827F827F82753A87DA87D7DFD06527DA87DA8FD04527DFFFD04%527DFFFD04527DFF7D522E5259FFFD04527DFFFD0752FFFD045259FD28FF%A87D7DA87D847DA87D847DA87D7DF827F827F827F827F827F827F827F852%7DA87DA87D5227522752275252A87D7D2752527EA8522852277EFF522752%277DFFA82852527DA8522752277DA852275227527DA8A8592752277DFD28%FFA87DA87DA87DA87DA87DA87DA85227F827F827F827F827F827F827F827%52A87DA87DA87D7DFD0752A87DA8A9A87D52285252527DFFFD04527DFD04%FFA87DFD05527DFFFD04527DFFFFFFFD0552FD28FF7D847D7E7DA87D7E7D%A87D7E7D52F827F827F827F827F827F827F827F8527D7E7DA87DA87D7D27%52275227527DA87D7D275227522752277DFF522752277DFFFFA87D525227%522752277DA852275227A8FFFFFF522752277DFD28FFA87DA87DA87DA87D%A87DA87DA82727F827F827F827F827F827F827F82752A87DA87D7D527D7D%7DFD0552A87D522752527DFD04527DFFFD04527DFFA8522752287DFD0452%7DFFFD04527DFFFFFFFD0552FD28FF7DA87D847DA87D847DA87DA87D27F8%27F827F827F827F827F827F827F87D7D847D7D275227527D7D275228527D%7D2752277DA8522752277DFF532752277DFF7D27522752A8522752277DA8%52275227A8FFFFFF522752277DFD28FFA87DA87DA87DA87DA87DA8A87DF8%27F827F827F827F827F827F827F8277DA87DA87D525252287D7D522E5252%7DFD04527DFFFD04527DFFFD04527DFF7D5252527DFFFD04527DFF52522E%527EFFFFFFFD045253FD28FF7D7D7DA87D7E7DA87D7E7DA85227F827F827%F827F827F827F827F827277D7DA87D7D275227527D7D275227527D592752%277DA8522752277DFF522752277DFF7D2752277DFF522752277DA8522752%27A8FFFFA8522752277DFD28FFA87DA87DA87DA87DA87DA8A852F827F827%F827F827F827F827F827F8527DA87DA87DFD04527DFD0552A8FD0552A8FD%04527DFFFD04527DFF7DFD0452A8FD04527DFFFD045284FFFFFFFD045259%FD28FFA87D7DA87D847DA87D847DA85227F827F827F827F827F827F827F8%2727A87DA87D84525228522752285227527D7D27522E5227522852277EFF%522752277DFFA82752275227522752277DA852275227A8FFFFFF53275227%7DFD29FF7DA87DA87DA87DA87DA87D7DF827F827F827F827F827F827F827%F852A8A87DA87E7DFD0452275252527DA87D52275227522E5252527DFF52%5227527DFFA85227522752525227527DFF285252527DFFFFFFFD0552FD28%FFA8A87D7E7DA87D7E7DA87D7E7D2EF827F827F827F827F827F827F82752%A87D7E7DA87D7DFD05527D7DA87DA87D7D527DA8A87DA87DA8FFA87DA87D%A8FFFFA87D527DA8A87DA87DA8A8A87DA87DA8FFFFFFA87DA87DA8FD29FF%A8A87DA87DA87DA87DA87DA82727F827F827F827F827F827F827F87DA8A8%7DA87DA87DA884A87DA8A8A87DA87EFD53FFA87D847DA87D847DA87DA852%27F827F827F827F827F827F827F8277DA87D847DA87D7D7DA87D7E7DA87D%A87DA8FD1AFFA8FD13FFA8FD17FFA8FD07FFA8FD04FFA8A87DA87DA87DA8%7DA8A852F827F827F827F827F827F827F82727847DA87DA87D7DFD07527D%7DA8A8FD17FF525952527DFD10FFA85253527DFD12FF525352527DFFFFA8%527D5252A8FD04FF7D7E7D7E7DA87D7E7D7DF827F827F827F827F827F827%F827F8277D847DA87D7E285227522752275227527DFD17FFA8522752277D%FD10FF7D28275227FD12FF522752277DFFA82752275227A8FD05FF7DA87D%A87DA87DA85227F827F827F827F827F827F827F82727A87DA87DA87D59FD%085227A8FD18FFFD04527DFD10FFA827525252FD12FFFD04527DFF7DFD04%52A8A8FD05FFA87D847DA87D847D52F827F827F827F827F827F827F827F8%277DA87DA87D7E52522852527D525227527DFFFFFF7DFD04527DA8FD04FF%A8FD0552A8FFFFAF522752277DA8FD047DFFFFA8FD0552A8FFFF7D522852%52A8525252A8FD04FF7DFD045284FFFFFF522752277DA8522752277D7DFD%06FFA8A87DA87DA87DA82727F827F827F827F827F827F827F82727A87DA8%7DA87D522852527D7D535252277DFFFF52522E5227522752A8FFFF842752%525227522E7DFFFFFD04527EA82752277DFF8427522752525227A8FF7E27%FD075227A8FFFF52522E522752277DFFFFFD04527D7E275252522752A8FD%06FFA87E7D7E7DA87D52F827F8272727F827F827F827F827F82E7DA87D7E%7DA85252275252845252275259FF522E275228522752277DFFA827522752%5252275227A8FF52275227A87D522752A8FF275227522752275228FF7D52%275227522752275252FF522E27522E52275227A8FF522752277D7D522752%275227A8FD07FFA8A87DA87DA87D27F827F87D2727F827F827F827F82752%A87DA87DA87DFD04527D7D53525227A8FFFD0452A87DFD0452FF7DFD0452%FFFD04527DFFFD04527D7D2E5252FF7DFD0452A8FD0452A8A8275252527D%7D5252277DA8FD0452A87DFD0452FFFD04527DFF7DFD0452FD0AFF7D7D7D%A87DA85227F8277D52F827F827F827F827F8527DA87D847DA85252275252%5227525252A8A827522752A8A827522852A87D2752277DFF7D27522759A8%522752277D5252277DFF7D2752277DFF52275227A87D52275252FF525228%5252A827522752A8A827522752A87D2752277DFF7D27522752FD0BFFA8A8%7DA87DA82727F87D5227F827F8272727F82752A87DA87DA87DFD0752287D%A8FF7D52525228FFA8522E5252A853FD0452FF53FD0452FFFD08527DFF7D%FD04527E7DA87D7DFFA827522852FF7D2752527DA852525228A87D522E52%52FFFD04527DFF7DFD0452FD0CFF7D7D7DA87D7DF827527DF827F8275952%F827F8527D7E7DA87D7E52522752275227522752A8A827522752A8A82752%2752A87D2752277DFF7D27522753A85227522752275227A8FFA827522752%277DA8FFFFFF7D52275228FF5252275252A827522752275227522752A852%2752277DFF7D27522752A8FD0CFFA8A87DA8A853F8277D52F82752FF5927%F82752A87DA87DA87D595252287DA8525252277DA8FD0452FFA8FD0452A8%7DFD0452FF59FD0452FFFD0852A8FFFF7D2752525227527DFFFFA8275252%53FF7D2752527DA8FD07522E5252FFFD04527DFF7DFD0452FD0EFFA8A87D%52F82727A82E27F8527E7DF827F8527E847DA87D7E5252285252FF525227%5252A827522852A8A827522752A87D2752277DFF7D2752277DA852275228%522752277DFFFFFF7D27522852275252FF7D52285252FF5252275253A827%5228527DA884A87DA8FF522752277DFF7D27522752FD0EFFA85327F82759%A87E27F827277E7D27F82752A87DA87DA87D5228522E7DFF7D5252277D7D%522E5252A8A85252522EA87D52525253FFFD0552FFFD0952FD04FFA8FD04%522852A8A827525252FF7D2E52277DA8522E5252FFA8FD047DFFFD04527D%FF7DFD0452FD0DFF7DF827F87DA8A87D7DF827F8277D7EF827F8527D7E7D%7E7DFF5252275252FF5252275252A827522752A8A827522752A87D275227%7DFF7D27522752A8522752275252522752A87D5259527D7D52275227A87D%52275252FF5252275252A827522752A8A827522752A8532752277DFF7D27%522752A8FD0CFF7D537DA8FFFFFFA82727F8527DA87D52F82752A8A8A9A8%FFFF7D2852527DFF7D5252287DA8FD0452FFA8FD0452A87D52525259FF53%FD0452FFFD04527D53525252A87D5252527DFFFD0452A8A827525252FF7D%5252277DA8FD0452FFA8FD0452FFFD04527DFF7DFD0452FD14FF522727A8%A8FFA8A85227F852FD06FF52522752527D2752285252A8285227527D7D27%522752A87D27522752A8522752277DFF522752277D525227527D7D275227%53A852275227A87D52275252FF5252285252FF28522752A8A827522752FF%592752277DFF7D27522752A8FD10FFA852F82727FD07FF272752FD06FF7D%FD04522E525252277DFF7D27FD0852FFA8525252285252522852A8FFFD04%527D842752277D7DFD05522E525252FFA827522852FF7D2752527DFF7D27%522853FD04527DFFFD04527DFF7DFD0452FFA8A8A8FD0DFFA8285252A8FD%07FF28F827527D7DA9FFFF52522752275227522752A8FFA8522752275227%2E27A8FFFF535227522752272E52FFA8522752277E7D52275227FF522827%52275227527DFF7D27275227FF5227275252FFA85227522752272852FFFF%522752277DFF7D27522752FF522727FD18FF7DF8527D53527D7DA9FF7D52%7D527D537D7DA8FD04FFA87DFD04527DFD05FF7D7D5252527D7DFFFFFF53%7D537DA8FF527D527DA9FF53535252527D7DFFFFA8527D527DFF7E527D52%7DFFFFA87DFD04527DFFFFFF7D7D537D7DFF7D7D527D7DFF7D7D52FD18FF%272727FD17FFA8FD0BFFA8FD13FFA8FFA8FD15FFA8FD2DFFA852A8FDE4FF%FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-09-17T07:36:15+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-09-17T07:36:16+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-09-17T07:36:16+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>108</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAbAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqk2q+bdH08mN&#xA;pPXnHWKKjUPuegxpWNXf5h6g5ItbeOFexert/wAaj8MNItAP518xsai6C+wjj/ipw0rcXnfzEhq0&#xA;6yezRp/xqFxpU0svzEmBAvbVWXu8JIP/AALVr9+CltgnmvXtc/Mr8xk/L/QtVn0Ty7YWq3nmC7ty&#xA;I7qYvxIgRuo+F126dSQaAYEorVf+cbtK0ywkv/Iur6lo/ma3VpLW5N0WSeQAkJNsuz/ZJG3iD0xV&#xA;R8u6xrf5neVvJ2rvFKmr6dqTwaw0Sqluv1d42lkerChZApVQPtEjCrAZdM8g3/m/8zbzzX5hl0a+&#xA;03UZjo3pXnoSkkykmKHdpaMq7KMVZVLrvmfVP+cTbzUtcllbUGgCxXchImlhS9RYpGJ3JK7cv2hv&#xA;3wKifI3kb8ikufL+oW/mmOXX1ezuIbP9MROzXgKOsXoc+TEy/Dw69sVYd52u7pfJ/wCbzLM4aPzN&#xA;brGQxBUev0G+2FX1XgV47/zjXGuoflvq1ve/6TDPq19DKkhLBo2SNWU17EHFWMXvmTzX+SGoX/lu&#xA;O1n1/QdZ5y+S2cmR4ryRgv1WU15MoLA8RueooWair0n8ofy+1Hy1plxqvmK5a+836431nV7l25CM&#xA;ueQgjp8IVK/Fx2r02AxVj/5j3fma0/NG0vfL9ZLmw0dbuW0qeM8KXEolj4jrVTXx223phCE28/8A&#xA;mew8wfk3qGsaZIRHMLbktaPG4uog8bU6EYpYtdWPk/UPzC12PzTqTWUMVvp5tP8ASDAGZrSPn8+2&#xA;KGcx/lx5J1vQtLjtrm4uNNs1mFlPDcE8hLKXergfF8dRjaWI/lh+XWgazp9zqN7JdG4s9Smhh4Ts&#xA;q8ISpSo79d8SUMk8nXieW/NHmry7ey8LKEnWrB3NQLaUVmArvxjIA+/FLF/y+1nWrbzpa63qbldO&#xA;87/WRboxNI5IZT6K96bfCvzxQ35k80ap/iDX/MOmnlLFPD5Y0Fj8SLcSEvPKBupZeLcT/lDFWRw/&#xA;kd5eksxJqN7e3OuOOUureu3qeqdyyg1FK+NT742lh/mLXNZfyPq/l3Wrlp7/AMv6pa2z3xJVpbeU&#xA;v6bOetaIdyelK774oTvyr+iNN/NC103ydqEl9os9pLJq8Sztc28bqG9Ng/xLXlxHXv8ARiqBHnK+&#xA;0fzR5w03S42u/MGrahFb6Tb9VQ8XDStXYKnIH9e1cVeleSPKSeW9JMMs7Xmp3TevqV67Fmlmbc0L&#xA;b8RU0+/qcCWQ4qp3NzBawPcXDiOGMVdz2xV575g843d+zQWhNvZ9Ntncf5R7D2w0hjmFUv1/XLDQ&#xA;tIudVvywtbVQZOA5MSzBFCjbcswGKvKL/wD5yElF+P0fpKtp6nf6w5WZx/sOSp/w2C009D8i+d7L&#xA;zbpkt5bwNbSQSmKaB2DEfCGVgQBsa/hhQyTFXnnmJdX8p+eG842drLe6VfQpBqsdsCZomjACTADs&#xA;Ai7/AD6bYFZWn/OTtpJpEtjodpc615glT09PURMgSRtg1wW2KrWu3Wm/82KXo35J+Rr3yZ5AtNM1&#xA;Fw+qXEj3uocW5BZp6HgD0PBVVSRsTWmBXl/lL8tfKvnnzZ+a9nrVqr3C6qUsr8D99bM5m+OM1H7Q&#xA;BKnY03xVAav5v1ZPyf8AOv5d+a5P+dp8sxQxxSNWt3Yi4h9KZSftcVZd/wCUqetcVTTyX53/AOca&#xA;Vm0GG3022TzCrWiRTrp8gcXoKBXEnDY+rvyxVivnj/lDvzh/8Ce3/wCT+FXsekf85G/lVq2rWWlW&#xA;Oozve6hPFa2qG1mUNLM4jQFitBVmG5wK8y/JD86fy/8AJnla/wBI1+9lgvm1S6uAiQSyj03CKp5I&#xA;pHVDirKPzQ13T/NN3+U+u6KZLjTbrzFbyRSmNlPBLiNCWUiq7qeuKvcsVYFco/8Ayu+0fieH6BI5&#xA;U2r9Zk2rhVhf5teVNU8u2up3Ghpy8u+YDGNSsVBKwXMcqyrLGo+yHKU8N6fy0QhdLqvlLSvzD16T&#xA;zPpgvoZrfTxac7VboKy2kfOnMHj2xV6v5S1PRNS0KC50S3+q6bV0ht/SEAXixDUjFAPiqcCWM/kz&#xA;G6eXdTDqVJ1a7IBFNvg8cJUJX+dPlnU72bSNQ0klLu5c6PdFf2obzZeX+Sp5V/1sQhNPzJ8sel+X&#xA;8Q0kGO68tCG7091A5KLUAMf+Aq3uRilK7j8vNT/5VRp1jY1/T9nLHrCqx3e73dkYn9oLIVHuBihF&#xA;Q/nj5ejsxHqNle22uIOMuk+g3qeqNiqk0FK+ND7Y0liHmDQNb/wVq2v6zbNBqHmLVbWdrEgloreM&#xA;sIlcdQaOdj2pXfbFDJ9c0mL8vvM1n5j0aAxeXtQZbPXLGEEpHX+7nVBWlP7P2sVSq08kweZ/MHnS&#xA;SKQ2mqW19DPo+poSCknFyCGXqjUFafMYqzTyD5xvtSM+h6/AbTzLpnwXSkAJOo29aMjY12JptvUb&#xA;HZSzEkAEk0A3JOBXmnmvzE+qXRhhYixhJEY/nPTmf4ZIISHFXYqx78wV0xvJerjUwTZ/VyWp15gg&#xA;xU6b+pxpir5WyLJ6/wDl7caf+X+n3OoeZLz0LrU443t9HjBecRryKu6D7Jau3Kn34Qgs/wDK35n+&#xA;VPMlyLSzmkgvWqUtblQjuAKniVLoflyrhtFMmuGvFC/Voo5D+16kjR08KcUkriqh6usf8stv/wBJ&#xA;D/8AVDFWY+TvNXmEFNKltbWSu1s8l3KtP8iot3/2P3YCrMfrPmn/AKt9j/0mzf8AZJgS76z5p/6t&#xA;9j/0mzf9kmKu+s+af+rfY/8ASbN/2SYq76z5p/6t9j/0mzf9kmKu+s+af+rfY/8ASbN/2SYq76z5&#xA;p/6t9j/0mzf9kmKu+s+af+rfY/8ASbN/2SYq76z5p/6t9j/0mzf9kmKu+s+af+rfY/8ASbN/2SYq&#xA;76z5p/6t9j/0mzf9kmKu+s+af+rfY/8ASbN/2SYq76z5p/6t9j/0mzf9kmKu+s+af+rfY/8ASbN/&#xA;2SYq76z5p/6t9j/0mzf9kmKu+s+af+rfY/8ASbN/2SYq76z5p/6t9j/0mzf9kmKu+s+af+rfY/8A&#xA;SbN/2SYq76z5p/6t9j/0mzf9kmKu+s+af+rfY/8ASbN/2SYq76z5p/6t9j/0mzf9kmKq1pNrjzAX&#xA;lpaww0NXhuZJWr2+FoIh/wANiqUeedWNppwtIjSa7qrEdRGPtff0+/CEF53hV2KtdMVfO/5m/mdd&#xA;+YpZtItFWLRoJqq4JLzGOoDMQePAncD5YCUgMf8Ay+tbe6866NBcIJIWuULIRUHj8QqPCowBJTX8&#xA;5VkH5h6kXNVZbcxivRfQQf8AEgcSgMa8v6drOoavbW+jI76lzD2/pniysnxc+RIC8aVqTil9G+cd&#xA;c1DS9NtLWOWl7Ov7+dO3AAMV8OTHJMWC29nqWotNJEr3DQoZZmLVIUdT8R3xVGeX/MupaRfQyxTv&#xA;6CuDJEWJWleoHYjsRir6u0vX7OfQ01O7njt40Wl1LKyoiMuzEsxAAPXIpSl/zV/L1JfTOuW5bfde&#xA;bLt/lBSv440qf6VrWkatbm40y8hvYQaM8Dq4B8G4nY+xxV4P+cX5karP5iOm6HqrR6XbRKGksZqL&#xA;LI45PykiO/GoXjXahwhCr+TR8w3PmjT7681tJrSRZwLCXUFkuGIjcA/Vi7PsRXdem/TEq9n1nzj5&#xA;W0SQRarqlvazEV9F3Bkoeh4CrU+jAlBaf+ZPkS/lWK21u2Mj/YWRjESelP3gTfGlT2+1Cw0+2a6v&#xA;7mK0tlIDTzusSAk0ALOQNziqBtfN/lO7uI7a11qwuLiU8YoYrqF3Y+CqrEk4qkfnbWLLVvKuvWGi&#xA;6tbx6hZrCs84uFhSBnlFA89QqE8GHX2wq8a0zSvN41K0L+bLJ0E0ZZBrUbFhyFQF9TevhhQzDz6n&#xA;5qf8rHMmktqB03gg0mO1Mv1QuYRxaf0/3G11y9b6wf7r7AJwJez4FdirsVdirsVdirsVdirsVeY+&#xA;cr03WvTitUgpCg/1ftf8MTkghJMVdirC/wA2/Mp0PyfcCF+N5qH+iW5HUBwfUYfJK0PjTEqHzTkW&#xA;Sa+VdTt9L8yabqNzyMFpcJNKEFWKoakAeOKr/NvmGXzF5hvNXkjEX1lhwiG/FEUIgr48VFffFXtP&#xA;5GaJp9v5V/SqKrX19JIs0poWVI24rGD1A+HlT3+WEMSjfzKgf1rKen7sq8ZPYEEH8a4VSLy1rMOm&#xA;XMwnUm3uozDKy7soPRgO+Ksgs/IWj3sAntdSeaJujKq/cfA/PFVP8xtXvWng0kSsLGNfrBhBorSv&#xA;VeRHeiqKfTiqV2XlT6z5J1HzN9Y4mxuorb6tx+0JAKtyr4uvbxxVHflTrl3pPnrSvQkKxXs6WdzG&#xA;CeLpOwQBh7MQw98VQHnry3J5c8z3elSTi5aPjIZVUoD6qiSlCT05UxVlX5S+X7iGC+89R3ChfL0d&#xA;231NkJMjCzcg8qin2/DArATJd6rqge5maW7vZh6k8hLEvI1CzH6cKpj528tjy15ovtEE/wBZW0Mf&#xA;GYrwLCSJZRVanoHpirOY9dvNU/Ia/gu5Glk029htonY1Po8o3QV/yeRUewGBXl1tc3FrMs9vIYpl&#xA;rxkU0YVBBofkcKs48k/+S48+/wDGPTv+T8mBWH6N/wAdix/5iIv+JjCr7OyKXYq7FXYq7FXYq7FX&#xA;Yq7FXYq8dv5TLfXEpNTJK7E/6zE5JChirsVeB/n7qQn8z2dirVWztQzCuweZiTt/qquApDzHAl2K&#xA;uxV9C/kTX/BD1B/3slpUEfsp0whiWaa3BpN1aG01KWONJN05uqMCP2lr3GFXmuseX5LBmkt54720&#xA;XrNCwYqCaD1FBPH59MVUtC1q60m+SeJj6RIE8VdnTvt4+BxVneur5HS9ivtfE8/qRfu4LVqOygEo&#xA;d6ADkepxVi+oeZml0W70XQ7FrHQnmW6ukZzcSFhxRDJKVUKtaUAA37nFUN5G/wCU28v/APbSs/8A&#xA;k+mKsh/PD/yY+o/8Y7f/AJMJgCs6/Ii0s73yL5gs71uNnczSQ3LcuFIpLcK55Hp8JO+JSwXzBf8A&#xA;5WaZdAeXLG71C5gcNHdzzmO3DoaghOPNxt/k4UMV8x6tq2r61c6nq1RfXfCWQFeA4lF9Piv8vp8e&#xA;PtirL9F/8kp5h/7aVv8A8y8VYn5U0yDVfM2labcEi3u7qGGbjseDuA1D8sVfQP5ieWdA0P8ALXXk&#xA;0iwhshLFAspiWhcRzLx5nq1OR3OBL510b/jsWP8AzERf8TGFD7OyKXYq7FXYq7FXYq7FXYq7FXYq&#xA;8bu0Md1Mh6pIyn6CRkkKWKuxV8sfmLqD3/njWZmYsEupIEqa/DAfSFPb4MiWQY5irsVdir6Z/KO1&#xA;+r/l9pQI+KQSyt/s5nI/4WmSDEoT8ywfXsD24yb/AEriqWeUbiyij1VLp0VJLRgFcgcvYV6nFWO4&#xA;qyDzqGGo2qtsVtIQR4dcVTbRrzS4/wAqfMNs0sSalNfWpWIkCV4lIK8Qd2AIfp0xVJPI3/KbeX/+&#xA;2lZ/8n0xVkP54f8Akx9R/wCMdv8A8mEwBWU/lUSPyl85kGhEV2QR/wAweJV5DYGAX1sbin1cSp61&#xA;dxw5DlX6MKso/Nu7sbv8wdVnsZY57RhbiKWFlaMhbWJSFK7bEUxVMtF/8kp5h/7aVv8A8y8VY/8A&#xA;l5/ynWgf8x0H/JwYq+iPzf8A/Jca1/xji/5Px4Al8xaN/wAdix/5iIv+JjCh9nZFLsVdirsVdirs&#xA;VdirsVdirsVeWearQ22vXa0+GR/VU+Ik+L9ZIyQQlOKuxV8x/mvpltp3nrUo7eQOs7C5dQKcHmHN&#xA;kNPnX6ciUhiOKXYq7FX1l5OsfqPlTR7QrweKzgEigk/GYwX6/wCUTkmK/wAxaBb6zZiF29OaMloZ&#xA;QK0JG4I8DirC5Py71xWISSB17NyYfgVxVMtG/LySK5SfUpkdEIYQRVIYjejMwG30YqyXU/yx1Hzc&#xA;Xu9MmiiurRVR1nLKkiksQAyhqMN+33Yqpaf/AM46+Y5beZr7UbW2noPq8cfOUE8hXm1Ep8NaUrgt&#xA;Uz8v/kHrWl6/pupyapbSR2N1BcvGqSAsIZFcgV7njjapn+YH5Mar5n80XOs2+owW8U6xKIpFcsPT&#xA;jVDuNv2cbSyH8vPy5l8t+XdT0bUriO8i1J39QxBlHpvEI2X4sVeZ33/OPHmtL9o7K8tJrIt+7nlZ&#xA;43C/5aBH3+RONoRkv/OOGrgr6OsW5HFeZeNx8dPipSu1emNqyKw/JvVbbyFqflptQga4vrqK5ScK&#xA;/BRHxqCOtfhxtKW+WfyG1nSPMOnapLqdtLHZXEc7xqjhmEbBqCuNoenedvL8/mHyvf6NBKsEt2qK&#xA;srglRxkV9wN/2cCXktj/AM4865bX1vcNq1qywypIVCSVIVgafhhtD3XAl2KuxV2KuxV2KuxV2Kux&#xA;V2KsQ/MHSzJBDqMa1MP7qan8hNVP0Nt9OEILBcKobUtQttO0+5v7luNvaxPNKf8AJQFjT32xV8l6&#xA;1qtzq2rXep3P99dytK47DkdlHso2GRZILFXYqqQR+pPHH/OwXrTqadaH9WKvsVVCqFHQCg79MkxY&#xA;t571bUdOiszZTGEyM4cgA1oFp1B8cVYiPN3mU9L1zTc/Cn/NOKq9p558wwSq0k4uIwfijdVFR/rK&#xA;AwxV9NeRLeJPLNldIN9QjS7J78ZlDIPoWmApTa51XTLWT07m8ggk68JJEQ0+TEYFREckciB42Do3&#xA;2WUgg/IjFV2KoWbV9Kgl9Ge9gilHWN5UVvuJriqKVlZQykFSKgjcEHFXz9+af5iedNI8+anp2m6p&#xA;JbWUHoelCqxkLzt43bdlJ3ZicIQ9B/JPzFrWveVbq81e6a7uY76SFJHCghBDEwX4Qo6ucSl6BgVT&#xA;uLq2to/VuJUhjrTnIwRa/M0xVZa6hYXdfqtzFccftek6vT58ScVYN+dnmLWtB8q2t5pF01pcyX0c&#xA;LyIFJKGGVivxBh1QYQrz78rPzE86av580zTtS1SS5sp/X9WFljAbhbyOu6qDsyg4lD3pNQsHuWtU&#xA;uYmuVrygDqZBTrVQa4Eq+KoW51XTLWT07m8ggk68JJEQ0+TEYqiUdHUMjBlYVDA1BGKvBPzY/MLz&#xA;lo3ni90/TNTktrOJITHCqxkAtErN9pSdycIQyn8qvPGs3fkrXdb1y5a+fTHkkUsFU8IoBJwHEDqc&#xA;Sl5rP+b/AOZmragsNletHJO/G3s7SCMnkxoFWqtI30k40h7n+WknmqTywjeaBKNU9aSvrqqv6e3D&#xA;ZQBiUsnuIIriCSCZecUilXU9wdsCvKtd0afSb5rd/iiPxQSfzJ/Ud8khjPmrR31ny5qOlxuI5LuB&#xA;o43PQPSq19qjfFXydPBNbzyQTKUmiZkkQ9VZTQg/I5Fkmnmry5P5e1RbCZxIzQQz8x4yxhmH+xeo&#xA;xVJ8VTDy9B9Y1/TbenL1rqCPieh5SKKYq+uskxYT+Zf9zYf60n6lxVJPI0kUevK0rKkYik5MxAFK&#xA;dycVSGXj6j8fs8jSnhXFXtPnbznq/ln8uvK+i6fK1tqF/YRPcXC1WSKJY1+BT1ViWpXtTAry7QfL&#xA;GteZH1CSy4yvY273l00rkFlXqATWrHthVEeSvPGs+VdViurOZzZlx9bsuX7uVK/EOJ2DU6N1GKvT&#xA;Pzx/MO/hktdB0e5aGC4t1ubyeIlXdZa+nHyG4HEcjTrUYArynTfKur6nomp63bKhs9K4G6LtRz6h&#xA;/YFN6dTvhVkH5XeftW8veYLO0a4eTR7uVYbm0diUUSMF9RAfsspNduo2xVb+dP8A5MzWf+jb/qFi&#xA;wBUMuuva/ldFpULlJbzWZ55CpIPpwW0Aoadi0g+7CrJ/yRSSCbXfNF2zy22iWLsqMx3dlZzSvcJE&#xA;w/2WAqwDWdc1zzNrH1nUJ2ubu4fjEjGiJzNFSME0RcKt6lp+ueVNfks5ZGs9VsWUmSCTdS6B1Kuh&#xA;7qwxV6P568zXXmP8l9F1C83vV1NYLlwKc3ihnHP5stCffArzfyvZ69ea5b2mglxqs4kSAxuI2o0T&#xA;CSjkgL+75d8Kpesl1aXQkR3huoHqHUlXV1PUEbgg4q9q8+fmjrEPkHy+tlM0Gq61bepeXSfC6rGA&#xA;jlCPsmR60I6AYKV5RovlvWPMK6ncWhWRtOt3vbtpXIZkX7XGteTdThVN/wAuPP2p+Vtbt6Ts2kTS&#xA;Kl9aMSU4MaNIq9nXrUfLFUb+eH/kx9R/4x2//JhMAVfoejX+p/lFqzWbKosNUF5c8mK1hjtGVgKA&#xA;1NXG2FWAq7IwZCVYdCDQ4q+rfyx8tav5c8rrpuquj3YmkkLRuZF4vSnxEDwwFLLMCoPVtJtNUtGt&#xA;rlduqOPtI3iMVeZ6zoV9pM/C4WsTf3c6/Yb+h9skh8+/nt5Y0u0vINctpo4ru9b07qzqA8hANJ1X&#xA;6OLnxp3rgKQkP5hW8+paD5b81CMrFdWa2N0aUpcWxZQ3/PQKSvsMBUO8h/l5D5h8u63q00vF7SN4&#xA;7KMGn79EEnJ6b8abdO/thAUlj3koRnzjoYkHJDf2wIHvMtPxwJfWGSYsJ/Mv+5sP9aT9S4qxny15&#xA;a1TzHqY0zTFRrto3kVZG4AhBUip2r88VUtH1NtI1OK6a0guzA4LW11GJI2KnoRirN/zp1u31y98v&#xA;6rbApDeaYkqxk14EyyBl/wBiwpgCoj8kP+mp/wC2XJ/HFXmGFWZ/mx/yklr/ANs2x/5MDFU88h/+&#xA;Sl86/wDPL9QwK82s/wDeyD/jIn/EhhVmH50/+TM1n/o2/wCoWLAFYUXcoEJPBSWC9gWoCf8AhRhV&#xA;9AfkzpdnqX5Wapp8LcJr+S7trqQ9nlhVF+gIynAUvC9U0vVNE1SWxvontb61ejKdiCDUMp7g9QRh&#xA;QzDRPOPk7VdTM/n3R/r1zPwWXWIJbiOQ8EEamWGORENFUVKAH2JwKzT83tK8uab+V+lxeXUVNKm1&#xA;KOeApI8qt6lvMeQaRnbf54pYJ+S3/kzNG/6Of+oWXEoYrrP/AB2L7/mIl/4mcKsn89/8o35M/wC2&#xA;a/8AyfbFUn8s675g0tdQi0eMyfpC3a2u1ERlPpPUGlPs9euKoD9Dax/yw3H/ACKf+mKsw/PD/wAm&#xA;PqP/ABjt/wDkwmAKyH8uv/JO+cv+ev8AyYXFXkWFX21kUuxV2KvJvzcs/wA9tT1VNP8AJAtLXQGg&#xA;C3FzKbdpHlYnlyE6uUCgDjwWvevSirGvKn/OMJgj/S/mrUE1rzJKebxTc5LWPwHJvikPuy08BtUq&#xA;vI/zi1HUNd82w+StFtJbqfSpnt2trdC7SXK/CyxqoJ4xqpHTx7YSoZt+Vn5b+ZfK9herrNVF+ELW&#xA;Cqx9NgCCWfb4iGoQv34hBeI+XrZtJ8/6da3aEvY6nFFMvQho5wpO/gRXAyfYtl5M165I5Qi3Q/tz&#xA;Hj/woq34ZK2LC/zv8tx6NYaKfWM00zz+oacVHFY6UG57+OBUi/JO9s7Lz1DcXk8dtbpbz85ZWCIP&#xA;g7sxAwlWD3LK9zK6mqs7EH2JxVk3m+J18u+UZCKK+nSqPmt5MT/xIYqyL8lJoY/8U+o6p/uJlb4i&#xA;Bstan6K4FeZ4VZr+bccieZbQOpUnTbLYinSEA/iMVTfyLNCv5UedkZwH/cniTQ/Fsv3kYFed6dG8&#xA;uoW0aCrvKiqPElgBhVl350/+TM1n/o2/6hYsAVi0umumiW2p/sT3NxbfIwRwv/zPwq9E/J3zZc6N&#xA;ovmtIAjz21n+kbWOWpTlDVH5BSpIPNOhwFUBqH5oXfm67stP8waTpb28s0cRu1jnjmhR3AZkl9f4&#xA;aA13+HxGKsa88eXYvLnmrUNGhmM8Vq6+nK1ORWSNZAGp3UPQ4VZJeXM035GWMcjFlt9dMcQP7Km3&#xA;kkoP9k5OBUJ+S3/kzNG/6Of+oWXEqxXWf+Oxff8AMRL/AMTOFWUeewf8NeTDTY6a4B7VEzYqnH5L&#xA;XMtrF5suIZDFNDpMskUg2KsgJDD5HArG1/Mz8wWYKuuXZYmgAbqT9GFU0/PD/wAmPqP/ABjt/wDk&#xA;wmAKyH8uv/JO+cv+ev8AyYXFXkWFX21kUuxV2KuxV57+a35UXnn9bWIeZLvSLS1G1nAivC8hapkc&#xA;Bo2ZuPwirUH31VX/AJWfkz5Y/L23mayLX2rXNRcapOoEhTY+mgFQiVFSK1J6npRVn+KvjbW47n8y&#xA;f+cgbqXylBaWlzZyevbPeKfQuH06h9WZVU1EzIO32aVxV9H6T5h/N1AI9Y8o2Mjrs1zY6kqo23VY&#xA;po+Q+l8VSr84fJ3mfzZp+i/oyyBntzM91C8sa+mZFSg5EgN9k9MIV5h/yo/8x/8Aq3R/9JEH/NeN&#xA;oTDSPyB86XVyi6g1vp9tX97IZBK4Ff2VjqCfmwxtXqXnX8qdP1zypYaPYSC1udHQJp08m4I4hWWS&#xA;m9H4gkgdd/bG0vE7z8ofzEtJzEdIeYE8VkgeN0aveobYf61MKGU+RvyJ1yfUYLzzNGtnp8LLI1nz&#xA;V5ZqbhDwLKqn9rev8Bas+/Nf8sG83QwXthIkOsWaGNPUqEliry4MQCVIYkqfc18QhLxaf8pPzFgm&#xA;MB0aViTTlG8boab/AGlYj78KGfflp+Seq2Wr22teZBHCLRxLb6erCRjIu6tIykoAp3ABNT1p3Fqh&#xA;fzM/KvzrrvnfUtV02zSWyuPR9KQzRITwt442+FmBHxKcVcn5R+bH/LVtJktEXWYtWa8gi9WIgwPb&#xA;pE3x8uI+Jele2NqoeRPym87aZ5gVtUsFXSbuCez1ApPCW9G4iZCQAxOzEHpjapDr35JeetNupFtL&#xA;QalaAn0riB0qV6isbFXB+g/PG1UdN/Jv8xNSuFEunm1RyOdzdyIoFe5ALSH6Fw2r0rzh+VmpL+W2&#xA;l+WdAQXl1a3i3NzIzLFzJjlEj/GQPtSAAV6YLSkH5Z/lX510Lzvpuq6lZpFZW/rerIJonI528ka/&#xA;CrEn4mGKEg1L8lfzDn1G6mj0+MxyzSOh+sQiqsxI6vjavRr/APKifW/y40fR7wrZ69pUZ9CQkOgZ&#xA;iecblOXwtQbjoR9GNpeVT/lP+ZmnTSRRabMyzD0nktpUZJEY9G4tXiabhhhQyz8uvyQ1tdXttU8y&#xA;RraWtq6zR2XNXkldTyTlwLKq1oTvU9KYLVW/NH8rvOev+c7zU9Ms0ms5khEchmiQkpEqt8LMD1GK&#xA;pv5N/L/zTpn5ceZNEvLZY9R1H1PqkQljYNyiVRVgxUbjucUvPP8AlR/5j/8AVuj/AOkiD/mvG0PV&#xA;vzAsfznfVrqXyVqSRWTWsbW8FzHZtGJ/SuhMi8kEtSy27IXYryJr8FQAl6RirsVdirsVdirsVYh5&#xA;W/5Vh/iXU/8ADf6P/wARcX/Sf1fj9Z4esefP9rj6nhtTj244qy/FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:D12F568CC0C3DF118AB6A409325D0A48</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:D22F568CC0C3DF118AB6A409325D0A48</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:D02F568CC0C3DF118AB6A409325D0A48</stRef:instanceID>
            <stRef:documentID>uuid:CF2F568CC0C3DF118AB6A409325D0A48</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>True</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -30.8604 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 30.8604 li
74.5898 30.8604 li
74.5898 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 0 mo
74.5898 0 li
74.5898 30.8604 li
0 30.8604 li
0 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
0.12207 14.2236 mo
0.12207 6.70508 6.2168 0.610352 13.7358 0.610352 cv
21.2539 0.610352 27.3486 6.70508 27.3486 14.2236 cv
27.3486 21.7412 21.2539 27.835 13.7358 27.835 cv
6.2168 27.835 0.12207 21.7412 0.12207 14.2236 cv
0 0 0 0.3 cmyk
f
8.56494 25.0166 mo
8.56494 25.0166 8.56494 25.0176 8.56494 25.0186 cv
8.56592 25.0371 8.5708 25.0576 8.56494 25.0752 cv
8.55664 25.0986 8.54297 25.1152 8.53174 25.1357 cv
8.51563 25.167 8.51563 25.2021 8.49707 25.2324 cv
8.45898 25.291 8.40674 25.3262 8.354 25.3691 cv
8.30664 25.4063 8.26367 25.4443 8.22266 25.4873 cv
8.20996 25.502 8.18799 25.4941 8.17188 25.501 cv
8.15771 25.5107 8.14502 25.5225 8.13184 25.5322 cv
8.11963 25.5352 8.10889 25.5381 8.09766 25.541 cv
8.03174 25.5703 7.96289 25.5977 7.89795 25.6299 cv
7.84961 25.6553 7.81689 25.6963 7.77295 25.7295 cv
7.75391 25.7354 7.73486 25.7412 7.71582 25.748 cv
7.68262 25.7754 7.65576 25.8096 7.61865 25.8301 cv
7.60303 25.832 7.58691 25.834 7.5708 25.8359 cv
7.54492 25.8477 7.51807 25.8594 7.4917 25.8701 cv
7.47461 25.8818 7.45898 25.8945 7.44189 25.9063 cv
7.42969 25.9111 7.41699 25.916 7.40381 25.9209 cv
7.38574 25.9326 7.36768 25.9424 7.34961 25.9531 cv
7.32471 25.9648 7.30078 25.9688 7.27588 25.9805 cv
7.24268 25.9932 7.20996 26.0137 7.17676 26.0283 cv
7.15576 26.041 7.13574 26.0537 7.11572 26.0674 cv
7.08398 26.0811 7.04785 26.0859 7.0166 26.1016 cv
6.98877 26.1143 6.96289 26.1318 6.93506 26.1465 cv
6.89307 26.165 6.85303 26.1807 6.81006 26.1973 cv
6.80078 26.2041 6.79102 26.2109 6.78174 26.2178 cv
6.75488 26.2314 6.71777 26.2363 6.68506 26.2363 cv
6.65674 26.2305 6.6416 26.2529 6.61768 26.2549 cv
6.60107 26.2559 6.59375 26.2471 6.58008 26.2461 cv
6.54395 26.2422 6.50195 26.252 6.46973 26.2607 cv
6.44385 26.2676 6.43164 26.2793 6.40967 26.291 cv
6.38477 26.2949 6.36084 26.2998 6.33691 26.3057 cv
6.32568 26.3096 6.31494 26.3135 6.30371 26.3174 cv
6.25684 26.3213 6.18701 26.3154 6.14502 26.3037 cv
6.12988 26.3008 6.12402 26.2891 6.10596 26.2891 cv
6.10596 26.2939 6.10596 26.2998 6.10596 26.3066 cv
6.09961 26.3066 6.09277 26.3066 6.08594 26.3066 cv
6.07178 26.3066 6.05664 26.3066 6.04297 26.3066 cv
6.04297 26.3018 6.04297 26.2979 6.04297 26.2939 cv
6.04102 26.2939 6.03906 26.2939 6.03662 26.2939 cv
6.02881 26.3066 6.01563 26.3076 6.00195 26.3096 cv
5.95703 26.3154 5.87207 26.3701 5.84766 26.4092 cv
5.83008 26.4385 5.79785 26.5 5.77393 26.5225 cv
5.75879 26.5352 5.73193 26.5283 5.71387 26.5361 cv
5.67578 26.5518 5.65186 26.5938 5.62793 26.626 cv
5.625 26.6309 5.61475 26.6582 5.61475 26.6582 cv
5.60791 26.6709 5.5791 26.7275 5.56299 26.7275 cv
5.55908 26.7607 5.50586 26.8066 5.49072 26.8389 cv
5.47705 26.873 5.46289 26.9072 5.44971 26.9404 cv
5.44482 26.9648 5.44092 26.9902 5.43604 27.0146 cv
5.42969 27.0371 5.42188 27.0576 5.4209 27.082 cv
5.4248 27.1201 5.42871 27.1572 5.43164 27.1953 cv
5.43604 27.1953 5.43994 27.1953 5.44385 27.1953 cv
5.4668 27.1377 5.47363 27.041 5.54297 27.0166 cv
5.54688 27.0146 5.56299 27.0146 5.56299 27.0088 cv
5.56396 27.0088 5.56494 27.0088 5.56592 27.0088 cv
5.57568 26.9648 5.63867 26.9482 5.68164 26.9492 cv
5.70801 26.9492 5.72363 26.9609 5.7207 26.9893 cv
5.7168 27.0195 5.68604 27.0342 5.67285 27.0605 cv
5.65381 27.0977 5.63965 27.1377 5.62891 27.1777 cv
5.62109 27.2129 5.63184 27.2441 5.63672 27.2773 cv
5.63867 27.2988 5.64063 27.3213 5.64404 27.3428 cv
5.64795 27.3564 5.65186 27.3682 5.65576 27.3809 cv
5.65674 27.3809 5.65771 27.3809 5.65869 27.3809 cv
5.65869 27.3799 5.65869 27.3789 5.65869 27.3779 cv
5.65967 27.3779 5.66064 27.3779 5.66162 27.3779 cv
5.67969 27.3506 5.67969 27.3135 5.69385 27.2822 cv
5.72266 27.2148 5.78467 27.1572 5.85986 27.1475 cv
5.8916 27.1484 5.92383 27.1484 5.95508 27.1494 cv
5.97705 27.1455 6.02881 27.124 6.04395 27.1514 cv
6.07568 27.21 6.01074 27.3018 6.01074 27.3701 cv
6.01904 27.3721 6.02783 27.374 6.03662 27.375 cv
6.06201 27.2891 6.22168 27.2148 6.31006 27.2158 cv
6.31787 27.2158 6.35303 27.2227 6.35303 27.2178 cv
6.35889 27.21 6.36377 27.2012 6.375 27.1982 cv
6.3916 27.1943 6.40576 27.2021 6.42285 27.2002 cv
6.45801 27.1963 6.49902 27.1973 6.53662 27.1943 cv
6.55566 27.1914 6.57471 27.1885 6.59473 27.1846 cv
6.62109 27.1846 6.63867 27.1943 6.66406 27.1953 cv
6.7041 27.1953 6.74365 27.1768 6.78076 27.1729 cv
6.84277 27.166 6.90674 27.1709 6.96875 27.1621 cv
6.99707 27.1533 7.02393 27.1455 7.05078 27.1357 cv
7.10596 27.127 7.15576 27.123 7.20166 27.0996 cv
7.21484 27.0889 7.22803 27.0791 7.24072 27.0703 cv
7.27002 27.0557 7.30176 27.0469 7.3291 27.0293 cv
7.34863 27.0166 7.35205 26.9902 7.37207 26.9795 cv
7.45605 26.9307 7.54199 26.876 7.62207 26.8223 cv
7.64697 26.8008 7.67188 26.7813 7.69678 26.7598 cv
7.74463 26.7266 7.79297 26.6924 7.8418 26.6582 cv
7.86475 26.6348 7.8877 26.6123 7.91162 26.5889 cv
7.96777 26.5371 8.02588 26.4883 8.08691 26.4443 cv
8.14404 26.4023 8.20801 26.3662 8.2666 26.3281 cv
8.33691 26.2822 8.40186 26.2354 8.47461 26.1963 cv
8.56689 26.1475 8.66406 26.1084 8.75586 26.0615 cv
8.81494 26.0273 8.87402 25.9932 8.93164 25.959 cv
8.95605 25.9502 8.979 25.9404 9.00293 25.9307 cv
9.04297 25.9082 9.08398 25.8857 9.125 25.8643 cv
9.21289 25.8154 9.2998 25.7666 9.3877 25.7178 cv
9.40674 25.7109 9.42578 25.7041 9.44385 25.6973 cv
9.49805 25.6689 9.55176 25.6426 9.60498 25.6143 cv
9.64893 25.5898 9.68408 25.5557 9.72607 25.5273 cv
9.75586 25.5059 9.78809 25.4941 9.81592 25.4678 cv
9.83594 25.4414 9.85596 25.415 9.87598 25.3887 cv
9.88086 25.3818 9.91162 25.3594 9.90674 25.3594 cv
9.89307 25.3281 9.90186 25.2842 9.89697 25.249 cv
9.88574 25.168 9.86572 25.0898 9.83984 25.0176 cv
8.56494 25.0166 li
cp
10.6138 25.0166 mo
10.6147 25.0166 10.6147 25.0176 10.6157 25.0186 cv
10.6367 25.0518 10.647 25.0938 10.667 25.1279 cv
10.6748 25.1426 10.687 25.165 10.6978 25.1748 cv
10.708 25.1846 10.7207 25.1855 10.728 25.1973 cv
10.7358 25.2168 10.7446 25.2373 10.7529 25.2568 cv
10.7656 25.2725 10.7788 25.2871 10.792 25.3018 cv
10.7998 25.3145 10.8066 25.3262 10.8149 25.3369 cv
10.8267 25.3516 10.8447 25.3613 10.8486 25.3799 cv
10.8608 25.4346 10.8276 25.4873 10.811 25.5303 cv
10.8037 25.5498 10.8066 25.5693 10.8037 25.5908 cv
10.7998 25.6104 10.792 25.6309 10.7847 25.6514 cv
10.7627 25.7002 10.7397 25.749 10.7178 25.7979 cv
10.7051 25.8379 10.7109 25.8857 10.7026 25.9277 cv
10.6909 25.9648 10.6787 26.002 10.668 26.0391 cv
10.665 26.0615 10.6748 26.084 10.668 26.1045 cv
10.6558 26.123 10.645 26.1436 10.6328 26.1621 cv
10.6167 26.1924 10.606 26.2236 10.5928 26.2549 cv
10.5718 26.2891 10.5508 26.3242 10.5298 26.3584 cv
10.502 26.4219 10.4746 26.4854 10.4478 26.5479 cv
10.438 26.5645 10.4268 26.5791 10.417 26.5938 cv
10.4077 26.6133 10.3989 26.6318 10.3896 26.6504 cv
10.377 26.6787 10.374 26.7119 10.3608 26.7402 cv
10.3496 26.7646 10.3101 26.792 10.292 26.8184 cv
10.2798 26.834 10.2856 26.8555 10.2778 26.873 cv
10.271 26.8799 10.2627 26.8857 10.2559 26.8926 cv
10.2437 26.9082 10.2319 26.9248 10.2197 26.9414 cv
10.2109 26.9648 10.2017 26.9893 10.1919 27.0137 cv
10.1807 27.0234 10.1699 27.0332 10.1587 27.0439 cv
10.147 27.0664 10.147 27.083 10.1289 27.1035 cv
10.1138 27.1211 10.0928 27.1299 10.0747 27.1436 cv
10.0391 27.1699 10.0029 27.1982 9.9668 27.2266 cv
9.91895 27.2646 9.86865 27.3125 9.83398 27.3623 cv
9.82178 27.3818 9.81006 27.4033 9.79785 27.4229 cv
9.77686 27.4541 9.75684 27.4775 9.74365 27.5127 cv
9.73682 27.5332 9.73779 27.5576 9.73389 27.5811 cv
9.72607 27.6348 9.71875 27.6865 9.71777 27.7441 cv
9.71777 27.751 9.71289 27.7734 9.71582 27.7734 cv
9.72168 27.7852 9.729 27.7969 9.73486 27.8096 cv
9.75586 27.8311 9.77881 27.8271 9.77197 27.8691 cv
9.77002 27.8799 9.76172 27.8887 9.75293 27.8955 cv
9.72998 27.9141 9.70264 27.9238 9.67773 27.9395 cv
9.64697 27.959 9.62109 27.9883 9.58691 28.002 cv
9.56592 28.0059 9.54492 28.0098 9.52393 28.0156 cv
9.45264 28.0342 9.38184 28.0527 9.31201 28.0723 cv
9.28564 28.0732 9.26074 28.0752 9.23584 28.0771 cv
9.21777 28.0811 9.19873 28.0859 9.18066 28.0898 cv
9.18066 28.0889 9.18066 28.0879 9.18066 28.0869 cv
9.18262 28.0859 9.18506 28.085 9.18701 28.084 cv
9.18701 28.083 9.18701 28.083 9.18701 28.082 cv
9.18066 28.0801 9.16406 28.0801 9.16406 28.0732 cv
9.16309 28.0732 9.16162 28.0732 9.16064 28.0732 cv
9.12305 28.0947 9.01807 28.084 8.96582 28.084 cv
8.94482 28.0801 8.89893 28.1025 8.8667 28.1025 cv
8.83887 28.0918 8.80078 28.1025 8.771 28.1025 cv
8.73486 28.0898 8.69092 28.1152 8.65771 28.1201 cv
8.63672 28.1221 8.61865 28.1182 8.60107 28.127 cv
8.54395 28.1553 8.52197 28.2109 8.47363 28.248 cv
8.45898 28.2549 8.44385 28.2627 8.42871 28.2686 cv
8.4209 28.2773 8.41309 28.2852 8.40479 28.293 cv
8.39697 28.2969 8.38965 28.3008 8.38184 28.3057 cv
8.36084 28.3232 8.33984 28.3408 8.31982 28.3584 cv
8.28809 28.3818 8.25293 28.4014 8.22461 28.4307 cv
8.18604 28.4678 8.18262 28.5137 8.13086 28.5449 cv
8.12695 28.5469 8.1167 28.5469 8.1167 28.5518 cv
8.11572 28.5518 8.11475 28.5518 8.11475 28.5518 cv
8.10693 28.584 8.06982 28.6045 8.0459 28.623 cv
7.9917 28.666 7.89307 28.7598 7.90576 28.834 cv
7.90771 28.8438 7.91406 28.8662 7.92871 28.8662 cv
7.9458 28.8418 7.96387 28.8447 7.98779 28.833 cv
8.0166 28.8184 8.06494 28.7715 8.104 28.791 cv
8.11279 28.7959 8.11475 28.8076 8.12207 28.8145 cv
8.16797 28.8643 8.13086 28.8916 8.10889 28.9385 cv
8.104 28.9492 8.0791 29.001 8.08984 29.0088 cv
8.10303 29.0039 8.12402 29.0127 8.13965 29.0039 cv
8.20508 28.9717 8.25781 28.9111 8.32666 28.8848 cv
8.36084 28.8721 8.39307 28.8809 8.42773 28.8818 cv
8.46582 28.8828 8.49463 28.8691 8.53271 28.8721 cv
8.58594 28.876 8.62695 28.9053 8.67285 28.9229 cv
8.70605 28.9355 8.75391 28.9268 8.73975 28.9814 cv
8.73291 29.0059 8.66504 29.1201 8.7168 29.1328 cv
8.71875 29.1338 8.71973 29.1338 8.72168 29.1338 cv
8.74902 29.1309 8.76465 29.0908 8.78662 29.0781 cv
8.80566 29.0674 8.83496 29.0762 8.85498 29.0693 cv
8.87402 29.0586 8.89307 29.0469 8.91162 29.0361 cv
8.9209 29.0293 8.92383 29.0186 8.93506 29.0146 cv
8.95508 29.0078 8.98975 29 9.01172 29.0049 cv
9.0249 29.0078 9.03662 29.0127 9.0498 29.0166 cv
9.10107 29.0176 9.15088 29.0186 9.20068 29.0195 cv
9.25879 29.0107 9.31592 29.0029 9.37305 28.9951 cv
9.41162 28.9902 9.45703 28.9971 9.49463 28.9912 cv
9.55078 28.9814 9.59961 28.9531 9.65771 28.9512 cv
9.69287 28.9492 9.7168 28.9619 9.74805 28.9639 cv
9.75098 28.9648 9.75293 28.9668 9.75293 28.9619 cv
9.75391 28.9619 9.75488 28.9619 9.75586 28.9619 cv
9.76367 28.9189 9.79297 28.9385 9.8208 28.918 cv
9.83594 28.9004 9.85107 28.8818 9.8667 28.8633 cv
9.87793 28.8545 9.89063 28.8545 9.90381 28.8477 cv
9.91992 28.8369 9.93604 28.8262 9.95166 28.8154 cv
9.96973 28.8115 9.98779 28.8076 10.0059 28.8027 cv
10.0068 28.8018 10.0078 28.7998 10.0088 28.7988 cv
10.0098 28.7988 10.0107 28.7988 10.0117 28.7988 cv
10.0117 28.7959 10.0127 28.7939 10.0127 28.791 cv
10.0146 28.7764 10.022 28.7715 10.0288 28.7588 cv
10.0356 28.749 10.042 28.7393 10.0488 28.7295 cv
10.0669 28.7178 10.084 28.707 10.1021 28.6953 cv
10.1118 28.6836 10.1157 28.6631 10.1309 28.6553 cv
10.1587 28.6406 10.1948 28.6387 10.2178 28.6133 cv
10.2349 28.5947 10.2368 28.5664 10.25 28.5459 cv
10.2588 28.5391 10.2666 28.5322 10.2759 28.5264 cv
10.2827 28.5107 10.29 28.4971 10.2969 28.4834 cv
10.3188 28.4551 10.3511 28.4316 10.373 28.4053 cv
10.3931 28.3828 10.397 28.3574 10.4238 28.3369 cv
10.4409 28.3232 10.4678 28.335 10.4888 28.335 cv
10.4937 28.334 10.5059 28.3359 10.5059 28.3311 cv
10.5229 28.3037 10.5229 28.2568 10.5449 28.2344 cv
10.5747 28.2031 10.5957 28.248 10.5957 28.2734 cv
10.5977 28.2734 10.5996 28.2734 10.6021 28.2734 cv
10.6147 28.1895 10.6338 28.0469 10.7471 28.0469 cv
10.751 28.0215 10.7578 27.9932 10.7881 27.9893 cv
10.792 27.9893 10.7969 27.9902 10.7969 27.9863 cv
10.814 27.9609 10.8579 27.9453 10.8579 27.9912 cv
10.8589 27.9912 10.8599 27.9912 10.8608 27.9912 cv
10.8608 27.9902 10.8608 27.9902 10.8608 27.9893 cv
10.8687 27.9658 10.8779 27.9443 10.8867 27.9209 cv
10.9077 27.8965 10.9551 27.9033 10.978 27.8789 cv
10.9897 27.8613 11.0029 27.8418 11.0156 27.8242 cv
11.0259 27.8135 11.041 27.8145 11.0508 27.8008 cv
11.0669 27.7803 11.0728 27.751 11.0938 27.7334 cv
11.1167 27.7139 11.1567 27.7383 11.1787 27.7246 cv
11.1987 27.708 11.2188 27.6924 11.2388 27.6758 cv
11.2578 27.6533 11.272 27.624 11.2979 27.6084 cv
11.3208 27.5996 11.3438 27.5898 11.3667 27.5811 cv
11.377 27.5723 11.3867 27.5635 11.397 27.5537 cv
11.4097 27.5508 11.4219 27.5479 11.4351 27.5449 cv
11.4429 27.5371 11.4517 27.5303 11.46 27.5225 cv
11.4697 27.5195 11.481 27.5166 11.4907 27.5137 cv
11.5039 27.5039 11.5098 27.4854 11.5249 27.4785 cv
11.5366 27.4775 11.5479 27.4766 11.5601 27.4756 cv
11.5728 27.4668 11.5859 27.46 11.5977 27.4521 cv
11.6167 27.4395 11.6147 27.4141 11.6309 27.3994 cv
11.6519 27.3799 11.6777 27.3848 11.7007 27.3721 cv
11.7109 27.3633 11.7207 27.3545 11.731 27.3447 cv
11.752 27.3271 11.7759 27.3105 11.8008 27.2988 cv
11.8057 27.2969 11.8311 27.2949 11.8311 27.291 cv
11.8521 27.2598 11.8809 27.252 11.9087 27.2295 cv
11.9697 27.1777 12.04 27.1328 12.1108 27.1016 cv
12.1538 27.084 12.1968 27.0664 12.2397 27.0479 cv
12.2817 27.0244 12.3237 27 12.3667 26.9766 cv
12.4399 26.9453 12.5181 26.9199 12.5859 26.8809 cv
12.6108 26.8652 12.6357 26.8496 12.6597 26.834 cv
12.6958 26.8145 12.731 26.7949 12.7656 26.7754 cv
12.7866 26.7588 12.8066 26.7432 12.8257 26.7227 cv
12.8379 26.708 12.8477 26.6865 12.8667 26.6777 cv
12.8711 26.6768 12.876 26.6758 12.8799 26.6748 cv
12.8838 26.624 12.9077 26.5889 12.916 26.5381 cv
12.9297 26.4492 12.853 26.3252 12.8057 26.2588 cv
12.7998 26.251 12.7637 26.1875 12.7637 26.1963 cv
12.7617 26.1943 12.7607 26.1934 12.7637 26.1934 cv
12.7637 26.1924 12.7637 26.1914 12.7637 26.1904 cv
12.7246 26.1465 12.6938 26.0381 12.6729 25.9814 cv
12.6479 25.9072 12.6221 25.833 12.5967 25.7598 cv
12.5898 25.7285 12.584 25.6963 12.5776 25.665 cv
12.561 25.6123 12.5391 25.5557 12.5298 25.498 cv
12.5049 25.3477 12.5239 25.1885 12.5239 25.0361 cv
12.5239 25.0303 12.5249 25.0234 12.5269 25.0176 cv
10.6138 25.0166 li
cp
13.918 25.0166 mo
13.916 25.0625 13.9131 25.1084 13.9077 25.1523 cv
13.9048 25.1689 13.9019 25.1855 13.8989 25.2021 cv
13.9009 25.2158 13.9028 25.2314 13.9048 25.2461 cv
13.9087 25.29 13.9087 25.3379 13.9087 25.3818 cv
13.9058 25.4219 13.9038 25.4609 13.9009 25.501 cv
13.9067 25.5225 13.9116 25.542 13.917 25.5625 cv
13.9199 25.6465 13.9229 25.7295 13.9258 25.8125 cv
13.9409 25.8135 13.9541 25.8164 13.958 25.8301 cv
13.9688 25.8662 13.9497 25.9092 13.9448 25.9434 cv
13.936 26.0137 13.9351 26.0889 13.9351 26.1611 cv
13.937 26.1611 13.939 26.1611 13.9409 26.1611 cv
13.9487 26.1455 13.9648 26.1396 13.9829 26.1445 cv
14.002 26.1494 14.0049 26.1689 14.0068 26.1875 cv
14.0059 26.2119 14.0059 26.2373 14.0049 26.2627 cv
14.0059 26.2998 14.0127 26.3408 14.0146 26.376 cv
14.0229 26.4971 14.0107 26.627 14.0107 26.748 cv
14.0117 26.748 14.0127 26.748 14.0137 26.748 cv
14.0137 26.7461 14.0137 26.7441 14.0137 26.7422 cv
14.0269 26.709 14.0327 26.5322 14.0527 26.5254 cv
14.0801 26.5166 14.0898 26.5361 14.0918 26.5596 cv
14.0947 26.6006 14.0977 26.6426 14.1021 26.6846 cv
14.105 26.6982 14.1079 26.7129 14.1108 26.7275 cv
14.1079 26.7793 14.105 26.8301 14.1011 26.8809 cv
14.1021 26.9063 14.1167 26.918 14.1167 26.9424 cv
14.1147 27.001 14.1118 27.0596 14.1089 27.1172 cv
14.1099 27.1172 14.1108 27.1172 14.1118 27.1172 cv
14.1177 27.0889 14.1431 27.0625 14.1709 27.0869 cv
14.1719 27.0879 14.1729 27.0889 14.1738 27.0898 cv
14.1909 27.1104 14.1826 27.166 14.186 27.1924 cv
14.1909 27.2256 14.1958 27.2578 14.2007 27.291 cv
14.2051 27.3018 14.209 27.3125 14.2119 27.3232 cv
14.2197 27.373 14.2188 27.4199 14.2261 27.4678 cv
14.231 27.5029 14.2339 27.541 14.2388 27.5791 cv
14.2407 27.5879 14.2437 27.5986 14.2461 27.6084 cv
14.2598 27.6084 14.2739 27.6084 14.2827 27.6182 cv
14.3101 27.6465 14.3008 27.7568 14.312 27.7988 cv
14.3179 27.8193 14.3398 27.8203 14.3477 27.8389 cv
14.3599 27.8701 14.3599 27.9063 14.3711 27.9365 cv
14.373 27.9395 14.373 27.9424 14.377 27.9424 cv
14.377 27.9434 14.377 27.9443 14.377 27.9453 cv
14.3779 27.9453 14.3789 27.9453 14.3799 27.9453 cv
14.3799 27.9434 14.3799 27.9414 14.3799 27.9395 cv
14.3916 27.9209 14.415 27.9072 14.4341 27.9277 cv
14.436 27.9307 14.438 27.9326 14.439 27.9346 cv
14.4697 27.9766 14.4761 28.0137 14.4971 28.0586 cv
14.5117 28.0762 14.5259 28.0938 14.54 28.1123 cv
14.5449 28.1221 14.5488 28.1328 14.5527 28.1445 cv
14.5659 28.1621 14.5776 28.1816 14.5898 28.1992 cv
14.606 28.2148 14.6211 28.2305 14.6367 28.2451 cv
14.666 28.2813 14.687 28.3203 14.7197 28.3545 cv
14.7368 28.3701 14.7617 28.3857 14.769 28.4082 cv
14.77 28.4111 14.77 28.4131 14.771 28.416 cv
14.771 28.4199 14.772 28.4229 14.772 28.4268 cv
14.8198 28.4355 14.8428 28.5127 14.8369 28.5586 cv
14.8311 28.5752 14.8237 28.5928 14.8169 28.6113 cv
14.8101 28.6465 14.811 28.6816 14.8047 28.7168 cv
14.7979 28.7354 14.791 28.7529 14.7847 28.7705 cv
14.7837 28.7881 14.7827 28.8057 14.7817 28.8223 cv
14.772 28.8789 14.7549 28.9395 14.728 28.9883 cv
14.709 29.0234 14.6699 29.0527 14.645 29.085 cv
14.6157 29.125 14.5879 29.165 14.5591 29.2051 cv
14.502 29.2813 14.4399 29.3535 14.3877 29.4326 cv
14.3237 29.5313 14.291 29.6631 14.2471 29.7734 cv
14.2271 29.8232 14.1929 29.8672 14.1748 29.9189 cv
14.1699 29.9658 14.165 30.0137 14.1597 30.0605 cv
14.1538 30.0781 14.147 30.0947 14.1406 30.1133 cv
14.123 30.1924 14.106 30.2764 14.1147 30.3623 cv
14.1157 30.3711 14.1187 30.4209 14.1211 30.4209 cv
14.1211 30.4219 14.1211 30.4229 14.1211 30.4238 cv
14.1221 30.4238 14.123 30.4238 14.124 30.4238 cv
14.125 30.4043 14.126 30.3652 14.1528 30.3652 cv
14.1768 30.3096 14.2017 30.248 14.2559 30.2109 cv
14.2856 30.1904 14.3027 30.2256 14.3301 30.2227 cv
14.3687 30.2188 14.4067 30.1816 14.438 30.1592 cv
14.4448 30.1543 14.4541 30.1523 14.4639 30.1533 cv
14.4717 30.1543 14.479 30.1572 14.4819 30.1641 cv
14.4839 30.1689 14.4849 30.1738 14.4858 30.1787 cv
14.4849 30.1914 14.4839 30.2021 14.4839 30.2129 cv
14.4878 30.2314 14.5039 30.2354 14.499 30.2598 cv
14.4946 30.2852 14.4761 30.2998 14.4639 30.3223 cv
14.46 30.333 14.4561 30.3438 14.4526 30.3555 cv
14.4438 30.3633 14.436 30.3721 14.4268 30.3799 cv
14.4229 30.3926 14.4189 30.4033 14.4141 30.415 cv
14.4058 30.4268 14.3896 30.4365 14.3857 30.4502 cv
14.3818 30.4629 14.397 30.4951 14.397 30.5176 cv
14.396 30.5664 14.3779 30.6094 14.3779 30.6621 cv
14.3779 30.7119 14.397 30.7559 14.397 30.8105 cv
14.3979 30.8105 14.3989 30.8105 14.3999 30.8105 cv
14.3999 30.8096 14.3999 30.8086 14.3999 30.8076 cv
14.4009 30.8076 14.4019 30.8076 14.4028 30.8076 cv
14.4219 30.7842 14.4526 30.7471 14.479 30.7334 cv
14.4927 30.7266 14.5107 30.7324 14.5229 30.7217 cv
14.5659 30.6729 14.6089 30.625 14.6519 30.5771 cv
14.668 30.5713 14.6841 30.5654 14.6997 30.5596 cv
14.71 30.5518 14.7188 30.5449 14.729 30.5381 cv
14.7539 30.5254 14.7788 30.5127 14.8037 30.5 cv
14.8149 30.4922 14.8257 30.4844 14.8369 30.4766 cv
14.854 30.4766 14.8721 30.4756 14.8887 30.4756 cv
14.915 30.4629 14.936 30.4014 14.9707 30.4229 cv
14.98 30.4277 14.9819 30.4375 14.9839 30.4473 cv
14.9868 30.4736 14.9868 30.5029 14.9927 30.5303 cv
14.9961 30.541 15 30.5518 15.0029 30.5635 cv
15.0078 30.626 15.0078 30.6865 15.0181 30.7461 cv
15.021 30.7637 15.0249 30.7803 15.0288 30.7979 cv
15.0347 30.8076 15.042 30.8164 15.0479 30.8252 cv
15.0498 30.8252 15.0518 30.8252 15.0537 30.8252 cv
15.0537 30.8252 15.0537 30.8232 15.0537 30.8223 cv
15.0547 30.8223 15.0557 30.8223 15.0566 30.8223 cv
15.0591 30.751 15.1011 30.7246 15.1367 30.6729 cv
15.1538 30.6504 15.1606 30.623 15.1758 30.6016 cv
15.187 30.5869 15.1968 30.5742 15.208 30.5605 cv
15.2148 30.5469 15.2217 30.5332 15.229 30.5205 cv
15.2446 30.502 15.271 30.4961 15.2891 30.4785 cv
15.311 30.457 15.3198 30.4248 15.3389 30.4043 cv
15.3521 30.3945 15.3647 30.3848 15.377 30.375 cv
15.4189 30.3369 15.4517 30.2969 15.479 30.251 cv
15.5181 30.1836 15.5557 30.1025 15.5688 30.0225 cv
15.5688 30.0049 15.5688 29.9883 15.5698 29.9697 cv
15.5737 29.9551 15.5791 29.9395 15.583 29.9238 cv
15.5801 29.9023 15.5767 29.8789 15.5747 29.8574 cv
15.5718 29.8037 15.5708 29.7539 15.5718 29.7031 cv
15.5718 29.6631 15.583 29.625 15.5869 29.5889 cv
15.5879 29.5488 15.5879 29.5078 15.5889 29.4678 cv
15.5776 29.4619 15.5708 29.4551 15.5698 29.4414 cv
15.5679 29.4189 15.6167 29.2227 15.627 29.207 cv
15.6377 29.1924 15.6548 29.1826 15.6729 29.1826 cv
15.7051 29.1826 15.7407 29.2236 15.7666 29.2393 cv
15.793 29.251 15.8179 29.2646 15.8438 29.2764 cv
15.8579 29.2871 15.873 29.2969 15.8867 29.3076 cv
15.9087 29.3203 15.9326 29.3232 15.957 29.332 cv
15.9829 29.3447 16.0078 29.3584 16.0337 29.3711 cv
16.0889 29.3848 16.144 29.3994 16.1987 29.4131 cv
16.2178 29.4189 16.2329 29.4346 16.252 29.4395 cv
16.2778 29.4434 16.3037 29.4482 16.3301 29.4521 cv
16.3457 29.4512 16.3569 29.4414 16.376 29.4443 cv
16.3989 29.4541 16.4229 29.4639 16.4468 29.4746 cv
16.4668 29.4795 16.4868 29.4844 16.5078 29.4883 cv
16.5308 29.4941 16.5557 29.4893 16.5801 29.4893 cv
16.5977 29.4922 16.6167 29.4951 16.6348 29.498 cv
16.6489 29.4971 16.6641 29.4961 16.6777 29.4951 cv
16.7061 29.5 16.7339 29.5049 16.7617 29.5098 cv
16.7778 29.5098 16.793 29.5098 16.8091 29.5098 cv
16.8291 29.5176 16.8496 29.5234 16.8696 29.5293 cv
16.8999 29.5313 16.9229 29.5195 16.9487 29.5186 cv
16.9897 29.5234 17.0317 29.5293 17.0737 29.5342 cv
17.083 29.5322 17.0928 29.5293 17.103 29.5273 cv
17.1187 29.5283 17.1348 29.5293 17.1519 29.5293 cv
17.1807 29.5273 17.21 29.5176 17.2417 29.5186 cv
17.2729 29.5205 17.3037 29.5234 17.335 29.5254 cv
17.394 29.5273 17.4526 29.5283 17.5117 29.5303 cv
17.5356 29.5322 17.5518 29.5449 17.5767 29.5469 cv
17.625 29.5508 17.6597 29.5225 17.7041 29.5205 cv
17.7729 29.5176 17.8408 29.5176 17.9077 29.5205 cv
17.9517 29.5234 17.9961 29.5264 18.041 29.5293 cv
18.085 29.5293 18.1299 29.5283 18.1748 29.5283 cv
18.2007 29.5254 18.2271 29.5234 18.2529 29.5205 cv
18.2837 29.5234 18.3149 29.5264 18.3457 29.5293 cv
18.394 29.5273 18.4409 29.5254 18.4888 29.5234 cv
18.5156 29.5254 18.543 29.5273 18.5698 29.5283 cv
18.6299 29.5225 18.6899 29.5156 18.75 29.5088 cv
18.8188 29.501 18.8877 29.5068 18.9429 29.4727 cv
18.9619 29.46 18.9849 29.4521 18.9927 29.4287 cv
18.9937 29.4248 19 29.415 18.9937 29.415 cv
18.9937 29.416 18.9937 29.417 18.9937 29.418 cv
18.9829 29.418 18.9707 29.418 18.96 29.418 cv
18.9458 29.416 18.9316 29.4141 18.9189 29.4121 cv
18.9009 29.4014 18.8779 29.4014 18.855 29.4014 cv
18.8369 29.3896 18.8208 29.3828 18.7969 29.3828 cv
18.7837 29.3809 18.772 29.3789 18.7588 29.377 cv
18.7446 29.3721 18.7261 29.3721 18.71 29.3721 cv
18.6807 29.3574 18.6479 29.3604 18.6138 29.3604 cv
18.5967 29.3525 18.5728 29.3545 18.5527 29.3545 cv
18.498 29.3311 18.416 29.334 18.3521 29.334 cv
18.335 29.3262 18.312 29.3223 18.291 29.3223 cv
18.2656 29.3105 18.2329 29.3145 18.2007 29.3145 cv
18.1841 29.3066 18.1641 29.3057 18.1431 29.3057 cv
18.1367 29.3037 18.1309 29.3027 18.126 29.3018 cv
18.1187 29.3008 18.1118 29.2998 18.105 29.2988 cv
18.0859 29.29 18.061 29.2842 18.0381 29.2842 cv
18.0278 29.2832 18.0166 29.2832 18.0059 29.2822 cv
17.9961 29.2813 17.9849 29.2803 17.9736 29.2793 cv
17.9658 29.2783 17.957 29.2773 17.9478 29.2764 cv
17.939 29.2744 17.9287 29.2725 17.9189 29.2705 cv
17.9106 29.2695 17.9038 29.2686 17.896 29.2676 cv
17.8848 29.2666 17.875 29.2656 17.8638 29.2646 cv
17.8511 29.2627 17.8389 29.2598 17.8257 29.2578 cv
17.8047 29.248 17.7759 29.2441 17.751 29.2441 cv
17.7246 29.2383 17.6987 29.2334 17.6729 29.2285 cv
17.6377 29.2217 17.606 29.209 17.5679 29.209 cv
17.5557 29.2031 17.5391 29.2002 17.5239 29.2002 cv
17.5166 29.1992 17.5098 29.1982 17.5039 29.1973 cv
17.4829 29.1855 17.4541 29.1807 17.4277 29.1807 cv
17.4219 29.1787 17.416 29.1777 17.4106 29.1768 cv
17.396 29.1738 17.3818 29.1709 17.3667 29.168 cv
17.356 29.166 17.3457 29.1641 17.335 29.1621 cv
17.3218 29.1611 17.3076 29.1611 17.2939 29.1602 cv
17.2778 29.1514 17.25 29.1455 17.231 29.1455 cv
17.2197 29.1436 17.209 29.1416 17.1987 29.1396 cv
17.189 29.1377 17.1787 29.1348 17.1689 29.1328 cv
17.1587 29.1318 17.1479 29.1309 17.1367 29.1299 cv
17.127 29.1289 17.1157 29.127 17.106 29.125 cv
17.0947 29.123 17.084 29.1211 17.0737 29.1191 cv
17.0469 29.1074 17.0146 29.1045 16.9829 29.1045 cv
16.9707 29.1035 16.958 29.1025 16.9458 29.1016 cv
16.9238 29.0918 16.8989 29.084 16.873 29.084 cv
16.8428 29.0713 16.8091 29.0596 16.7749 29.0557 cv
16.7568 29.0527 16.7417 29.0625 16.7227 29.0576 cv
16.709 29.0527 16.7017 29.041 16.689 29.0332 cv
16.6729 29.0234 16.6406 29.0146 16.6196 29.0146 cv
16.605 29.0098 16.5908 29.0059 16.5757 29.002 cv
16.5288 28.9824 16.479 28.959 16.4229 28.959 cv
16.4028 28.9473 16.3818 28.9316 16.3608 28.9219 cv
16.3389 28.9131 16.3159 28.9053 16.293 28.8975 cv
16.2461 28.8721 15.9639 28.6768 15.957 28.6396 cv
15.9458 28.5752 16 28.4971 16.0078 28.4336 cv
16.0117 28.3916 15.9849 28.2568 16.0259 28.2422 cv
16.0449 28.2363 16.064 28.2441 16.083 28.2441 cv
16.084 28.2217 16.0996 28.2061 16.0996 28.1865 cv
16.0566 28.1709 16.0181 28.0586 16.062 28.0586 cv
16.0537 28.0303 16.0547 27.9941 16.0938 28 cv
16.1021 28.0039 16.1099 28.0078 16.1177 28.0127 cv
16.1177 28.0137 16.1177 28.0146 16.1177 28.0156 cv
16.1187 28.0156 16.1187 28.0156 16.1196 28.0156 cv
16.124 27.9941 16.1338 27.9775 16.1577 27.9775 cv
16.1577 27.9766 16.1577 27.9756 16.1577 27.9746 cv
16.1567 27.9746 16.1558 27.9746 16.1548 27.9746 cv
16.1548 27.9736 16.1548 27.9727 16.1548 27.9717 cv
16.1499 27.9629 16.146 27.9551 16.1406 27.9473 cv
16.1416 27.9365 16.1431 27.9238 16.144 27.9131 cv
16.1309 27.8955 16.0708 27.8086 16.1318 27.8086 cv
16.1318 27.8076 16.1318 27.8066 16.1318 27.8057 cv
16.1309 27.8057 16.1299 27.8057 16.1289 27.8057 cv
16.1289 27.8037 16.1289 27.8037 16.1289 27.8027 cv
16.1011 27.7793 15.9868 27.6436 16.0859 27.6436 cv
16.0859 27.6426 16.0859 27.6416 16.0859 27.6406 cv
16.085 27.6396 16.084 27.6387 16.083 27.6377 cv
16.0718 27.6289 16.061 27.6201 16.0508 27.6123 cv
16.0259 27.5762 16.0518 27.5352 16.0908 27.5352 cv
16.0908 27.5342 16.0908 27.5332 16.0908 27.5322 cv
16.0898 27.5322 16.0889 27.5322 16.0879 27.5322 cv
16.064 27.5078 15.9927 27.4473 16.0146 27.4092 cv
16.019 27.4023 16.0259 27.3965 16.0327 27.3965 cv
16.0327 27.3955 16.0327 27.3945 16.0327 27.3936 cv
16.0317 27.3936 16.0308 27.3936 16.0298 27.3936 cv
16.0298 27.3926 16.0298 27.3916 16.0298 27.3906 cv
15.9961 27.3643 15.9351 27.3086 16.0146 27.292 cv
16.02 27.291 16.0327 27.2803 16.0269 27.2803 cv
16.0137 27.2646 15.9946 27.25 15.9878 27.2314 cv
15.978 27.2031 15.998 27.1523 16.0298 27.1523 cv
16.0298 27.1514 16.0298 27.1504 16.0298 27.1494 cv
16.0288 27.1494 16.0278 27.1494 16.0269 27.1494 cv
16.0269 27.1484 16.0269 27.1475 16.0269 27.1465 cv
16.0078 27.126 15.958 27.0498 16.022 27.0498 cv
16.022 27.0469 16.022 27.0439 16.022 27.041 cv
15.9927 27.0166 15.9619 27.0029 15.978 26.957 cv
15.979 26.9541 15.9829 26.9482 15.978 26.9482 cv
15.9727 26.9326 15.9678 26.9014 15.9771 26.8857 cv
15.9819 26.8799 15.9868 26.875 15.9927 26.8701 cv
15.9668 26.8555 15.9268 26.8252 15.917 26.7959 cv
15.916 26.793 15.916 26.791 15.915 26.7881 cv
15.9028 26.7266 15.9468 26.7383 15.9448 26.6904 cv
15.9419 26.6416 15.9229 26.6504 15.9106 26.6191 cv
15.8989 26.583 15.8896 26.4551 15.896 26.4141 cv
15.8989 26.3975 15.9141 26.3848 15.9238 26.3721 cv
15.936 26.3555 15.9517 26.3174 15.9517 26.2939 cv
15.9351 26.2705 15.9526 26.1865 15.9639 26.1611 cv
15.9658 26.1582 15.9717 26.1523 15.9658 26.1523 cv
15.9487 26.1377 15.916 26.1055 15.9458 26.0801 cv
15.958 26.0703 15.9707 26.0703 15.98 26.0557 cv
15.981 26.0527 15.981 26.0527 15.978 26.0527 cv
15.9639 26.04 15.9497 26.0283 15.936 26.0156 cv
15.9131 25.9785 15.9429 25.9209 15.9551 25.8896 cv
15.959 25.8809 15.9629 25.873 15.9658 25.8643 cv
15.9287 25.8369 15.9438 25.792 15.9927 25.792 cv
15.9839 25.748 15.9736 25.7041 15.9648 25.6611 cv
15.9688 25.6348 15.9727 25.6094 15.9771 25.583 cv
15.9717 25.5586 15.9658 25.5342 15.9609 25.5098 cv
15.958 25.4414 15.9771 25.3789 15.98 25.3154 cv
15.9829 25.2549 15.979 25.1895 15.9917 25.1318 cv
15.9946 25.1201 16.0098 25.0801 16.0269 25.0801 cv
16.0166 25.0703 16.0068 25.0605 15.9971 25.0498 cv
15.9917 25.04 15.9907 25.0293 15.9927 25.0176 cv
13.918 25.0166 li
true sop
0 0 0 1 nzopmsc
f
9.83984 25.0166 mo
9.83984 25.0166 9.83984 25.0156 9.83887 25.0146 cv
9.75 24.7656 9.63867 24.5244 9.55469 24.2734 cv
9.50879 24.1318 9.47998 23.9932 9.45166 23.8428 cv
9.44092 23.7852 9.42871 23.7285 9.41797 23.6699 cv
9.40869 23.5791 9.3999 23.4893 9.3916 23.3984 cv
9.37988 23.29 9.36768 23.1826 9.35596 23.0752 cv
9.35303 22.9375 9.35205 22.7891 9.37891 22.6621 cv
9.38574 22.6299 9.43994 22.6162 9.43994 22.584 cv
9.40674 22.54 9.44385 22.5137 9.46484 22.4795 cv
9.47168 22.4658 9.47705 22.4443 9.49072 22.4375 cv
9.50684 22.4307 9.52002 22.4395 9.53467 22.4395 cv
9.53467 22.4385 9.53467 22.4375 9.53467 22.4365 cv
9.55566 22.3955 9.50879 22.3604 9.52783 22.3145 cv
9.53467 22.3027 9.54102 22.292 9.54688 22.2813 cv
9.55469 22.2607 9.55078 22.2305 9.56689 22.2148 cv
9.5918 22.1904 9.64697 22.2188 9.66895 22.1914 cv
9.68506 22.1689 9.66162 22.1455 9.66602 22.1191 cv
9.67188 22.0869 9.71289 22.085 9.71875 22.0654 cv
9.72607 22.043 9.69092 22.0303 9.68896 22.0078 cv
9.68604 21.9561 9.77197 21.9746 9.80273 21.9746 cv
9.80176 21.9736 9.80078 21.9727 9.7998 21.9717 cv
9.79297 21.9609 9.78467 21.9521 9.77783 21.9434 cv
9.77002 21.9199 9.79395 21.8799 9.81592 21.873 cv
9.8418 21.8643 9.89404 21.8789 9.90479 21.9023 cv
9.9209 21.9346 9.90869 21.9912 9.91064 22.0293 cv
9.91406 22.0879 9.9209 22.1455 9.92871 22.2031 cv
9.93359 22.2383 9.96777 22.252 9.97461 22.2852 cv
9.97461 22.3037 9.97461 22.3232 9.97461 22.3428 cv
9.97705 22.3926 9.979 22.4414 9.98193 22.4902 cv
9.98779 22.5254 10.0181 22.5508 10.0327 22.582 cv
10.0488 22.6123 10.0537 22.6475 10.0649 22.6787 cv
10.0737 22.708 10.0669 22.7402 10.0601 22.7676 cv
10.0586 22.7705 10.0566 22.7734 10.061 22.7734 cv
10.064 22.7744 10.0669 22.7764 10.0688 22.7773 cv
10.0688 22.7773 10.147 22.9629 10.1479 22.9697 cv
10.1528 23.0234 10.125 23.0684 10.1211 23.1182 cv
10.1089 23.2432 10.1147 23.374 10.123 23.499 cv
10.125 23.5264 10.1406 23.54 10.144 23.5635 cv
10.1519 23.6152 10.1597 23.667 10.168 23.7197 cv
10.1719 23.7383 10.1826 23.75 10.187 23.7676 cv
10.188 23.7871 10.1899 23.8076 10.1909 23.8271 cv
10.1987 23.8564 10.2061 23.8857 10.2139 23.915 cv
10.2139 23.9336 10.2129 23.9521 10.2129 23.9697 cv
10.2217 23.9727 10.23 23.9756 10.2349 23.9844 cv
10.2617 24.0293 10.2471 24.0869 10.2549 24.1416 cv
10.2578 24.166 10.271 24.1836 10.2769 24.2061 cv
10.2798 24.2305 10.2827 24.2539 10.2856 24.2783 cv
10.2939 24.3125 10.3169 24.3135 10.3228 24.334 cv
10.3267 24.3662 10.332 24.3994 10.3359 24.4316 cv
10.3467 24.4648 10.3579 24.499 10.3687 24.5322 cv
10.377 24.543 10.3848 24.5527 10.3931 24.5645 cv
10.396 24.5791 10.3989 24.5938 10.4019 24.6094 cv
10.4058 24.623 10.418 24.6299 10.4238 24.6436 cv
10.4287 24.666 10.4326 24.6904 10.438 24.7129 cv
10.4448 24.7344 10.4609 24.7598 10.478 24.7764 cv
10.4878 24.7842 10.499 24.7861 10.5049 24.7979 cv
10.5181 24.8213 10.5181 24.8477 10.5259 24.8721 cv
10.5337 24.8818 10.542 24.8916 10.5498 24.9014 cv
10.562 24.9268 10.5659 24.9561 10.5767 24.9834 cv
10.585 25.002 10.603 25.001 10.6138 25.0156 cv
12.5269 25.0166 li
12.5356 24.9912 12.561 24.9688 12.5889 24.9756 cv
12.5928 24.9766 12.5977 24.9805 12.5977 24.9756 cv
12.604 24.9736 12.625 24.9697 12.625 24.9668 cv
12.626 24.9668 12.626 24.9668 12.627 24.9668 cv
12.627 24.9658 12.627 24.9648 12.627 24.9639 cv
12.626 24.9639 12.625 24.9639 12.625 24.9639 cv
12.6128 24.9326 12.623 24.8848 12.6431 24.8604 cv
12.645 24.8584 12.6499 24.8535 12.645 24.8535 cv
12.624 24.8203 12.6099 24.668 12.625 24.625 cv
12.6309 24.6113 12.644 24.6104 12.6538 24.6006 cv
12.6606 24.5898 12.6689 24.5801 12.6768 24.5693 cv
12.686 24.5576 12.686 24.54 12.6997 24.5322 cv
12.7339 24.5283 12.7681 24.5244 12.8027 24.5205 cv
12.8188 24.5029 12.835 24.4863 12.8511 24.4697 cv
12.855 24.4658 12.9097 24.3936 12.9097 24.3916 cv
12.9268 24.3252 12.8687 24.2979 12.9761 24.2979 cv
12.9761 24.2969 12.9761 24.2959 12.9761 24.2949 cv
12.9746 24.2949 12.9736 24.2949 12.9727 24.2949 cv
12.9736 24.2822 12.9727 24.2686 12.981 24.2588 cv
12.9937 24.2422 13.021 24.2461 13.0391 24.2383 cv
13.0586 24.2295 13.0688 24.2139 13.0918 24.2109 cv
13.0957 24.2109 13.0977 24.2129 13.0977 24.208 cv
13.0986 24.208 13.0996 24.208 13.1011 24.208 cv
13.103 24.1904 13.1118 24.1787 13.1138 24.1641 cv
13.1211 24.126 13.1099 24.1064 13.1587 24.1064 cv
13.1597 24.0908 13.1606 24.0752 13.1616 24.0605 cv
13.147 24.041 13.1499 24.0029 13.1768 23.9961 cv
13.1899 23.9932 13.1997 23.999 13.2119 23.999 cv
13.2207 23.9502 13.2617 23.9326 13.2979 23.9063 cv
13.3247 23.8857 13.394 23.833 13.4287 23.8418 cv
13.438 23.8447 13.498 23.9336 13.5039 23.9473 cv
13.5068 23.9658 13.5098 23.9854 13.5127 24.0029 cv
13.5181 24.0107 13.5229 24.0195 13.5269 24.0273 cv
13.5298 24.0381 13.5327 24.0488 13.5356 24.0596 cv
13.541 24.0684 13.5459 24.0762 13.5508 24.084 cv
13.5586 24.1123 13.5527 24.1436 13.562 24.1689 cv
13.5737 24.2021 13.603 24.2314 13.6147 24.2627 cv
13.6221 24.2803 13.6157 24.3018 13.626 24.3193 cv
13.6289 24.3311 13.6318 24.3418 13.6357 24.3535 cv
13.6357 24.3545 13.6357 24.3555 13.6357 24.3564 cv
13.6479 24.3604 13.6558 24.3652 13.6616 24.377 cv
13.6807 24.4209 13.6807 24.4746 13.6997 24.5186 cv
13.7119 24.5459 13.7397 24.5664 13.751 24.5947 cv
13.77 24.6406 13.7759 24.6914 13.7979 24.7354 cv
13.8066 24.7451 13.8159 24.7549 13.8247 24.7656 cv
13.8359 24.7842 13.8711 24.8779 13.8711 24.9004 cv
13.8916 24.9043 13.9209 24.9385 13.9209 24.9609 cv
13.9199 24.9756 13.9189 24.9902 13.918 25.0039 cv
13.918 25.0078 13.918 25.0127 13.918 25.0166 cv
15.9927 25.0166 li
15.9946 24.9961 16.0049 24.9736 16.0059 24.9551 cv
16.0039 24.9209 16.002 24.8877 16 24.8535 cv
15.9839 24.7881 15.9688 24.7236 15.9536 24.6582 cv
15.9478 24.5977 15.9419 24.5371 15.936 24.4766 cv
15.9189 24.3818 15.9028 24.2881 15.8867 24.1934 cv
15.8799 24.1484 15.9028 24.1445 15.9399 24.1445 cv
15.9399 24.1016 15.9077 23.9473 15.9658 23.9473 cv
15.9658 23.9463 15.9658 23.9453 15.9658 23.9443 cv
15.9619 23.9336 15.96 23.8975 15.978 23.8975 cv
15.9717 23.8594 15.9868 23.834 16.0068 23.8086 cv
16.0098 23.8057 16.0107 23.8037 16.0068 23.8037 cv
16 23.79 15.9897 23.7773 15.9878 23.7598 cv
15.9839 23.7188 16.002 23.6865 16.0039 23.6475 cv
16.0059 23.6064 15.9878 23.5596 16.002 23.5215 cv
16.0029 23.5195 16.0039 23.5186 16.0039 23.5166 cv
16.0146 23.501 16.0356 23.4834 16.0557 23.4844 cv
16.063 23.4863 16.0698 23.4883 16.0767 23.4902 cv
16.0767 23.4912 16.0767 23.4922 16.0767 23.4932 cv
16.0776 23.4932 16.0786 23.4932 16.0801 23.4932 cv
16.0811 23.4883 16.0859 23.4736 16.083 23.4736 cv
16.0347 23.4053 16.0391 23.3613 16.0288 23.2764 cv
16.0249 23.2471 16.021 23.2188 16.0166 23.1914 cv
16.0166 23.1709 16.0181 23.1514 16.019 23.1309 cv
16.0146 23.0898 16.0107 23.0488 16.0068 23.0078 cv
15.9727 22.9854 15.9829 22.9414 15.9878 22.9063 cv
15.9946 22.8525 15.9819 22.7871 16.0537 22.7871 cv
16.0566 22.7646 16.0601 22.7412 16.063 22.7188 cv
16.0708 22.6953 16.0908 22.6689 16.0918 22.6426 cv
16.0859 22.5625 16.0786 22.4814 16.0728 22.4014 cv
16.0757 22.3691 16.1177 22.374 16.1187 22.3311 cv
16.1211 22.2725 16.0938 22.2314 16.084 22.1807 cv
16.0728 22.124 16.0747 22.0557 16.0767 21.9971 cv
16.0786 21.9414 16.1299 21.957 16.1299 21.9131 cv
16.1309 21.8506 16.0967 21.7842 16.082 21.7275 cv
16.0776 21.7119 16.0669 21.7031 16.0669 21.6865 cv
16.0679 21.623 16.145 21.7021 16.145 21.6543 cv
16.1387 21.6152 16.1328 21.5762 16.127 21.5381 cv
16.126 21.5088 16.1367 21.4824 16.1318 21.4521 cv
16.126 21.417 16.0859 21.3477 16.1011 21.3135 cv
16.124 21.2637 16.1616 21.3232 16.1807 21.3232 cv
16.1807 21.3223 16.1807 21.3213 16.1807 21.3203 cv
16.1729 21.2881 16.124 21.1377 16.1787 21.1377 cv
16.1787 21.0615 16.1729 20.9902 16.1787 20.916 cv
16.1807 20.9023 16.1826 20.8887 16.1851 20.874 cv
16.1909 20.8672 16.1958 20.8613 16.2017 20.8555 cv
16.2007 20.8525 16.2007 20.8496 16.1997 20.8467 cv
16.1958 20.8174 16.1899 20.7842 16.1948 20.7529 cv
16.1997 20.7363 16.2051 20.7188 16.21 20.7012 cv
16.2158 20.6396 16.2061 20.5664 16.2026 20.5059 cv
16.2007 20.4736 16.2061 20.4414 16.2061 20.4102 cv
16.2061 20.3643 16.2007 20.3164 16.1987 20.2686 cv
16.1968 20.2031 16.1758 20.1465 16.1689 20.082 cv
16.167 20.0664 16.1606 20.0498 16.1631 20.0332 cv
16.1641 20.0293 16.165 20.0264 16.167 20.0234 cv
16.1909 19.9844 16.229 20.041 16.2446 20.0566 cv
16.2539 20.0664 16.2627 20.0752 16.272 20.085 cv
16.2729 20.084 16.2729 20.083 16.2739 20.082 cv
16.2749 20.082 16.2759 20.082 16.2769 20.082 cv
16.2769 20.0664 16.2759 20.0488 16.2749 20.0332 cv
16.2778 20.0186 16.2808 20.0029 16.2837 19.9893 cv
16.2866 19.957 16.2749 19.918 16.2656 19.8906 cv
16.25 19.8447 16.2227 19.7998 16.2178 19.751 cv
16.2148 19.7256 16.229 19.709 16.23 19.6875 cv
16.2339 19.6299 16.2339 19.5713 16.2368 19.5156 cv
16.2368 19.5 16.2388 19.4658 16.2598 19.4658 cv
16.2559 19.4326 16.2329 19.3477 16.2471 19.3174 cv
16.2529 19.3037 16.272 19.3027 16.2856 19.3027 cv
16.2808 19.2441 16.2471 19.1592 16.2627 19.1016 cv
16.2798 19.0371 16.353 19.0938 16.353 19.1172 cv
16.354 19.1172 16.355 19.1172 16.356 19.1172 cv
16.3447 19.0488 16.334 18.9805 16.3228 18.9111 cv
16.3159 18.8779 16.2969 18.8486 16.2959 18.8125 cv
16.2998 18.792 16.3037 18.7715 16.3076 18.751 cv
16.311 18.7129 16.3027 18.6768 16.313 18.6416 cv
16.3179 18.627 16.3276 18.624 16.3359 18.6133 cv
16.3438 18.6035 16.3447 18.584 16.3457 18.5713 cv
16.3496 18.5283 16.334 18.458 16.3906 18.458 cv
16.3896 18.4063 16.3887 18.3555 16.3877 18.3037 cv
16.3887 18.2813 16.3999 18.2627 16.3989 18.2373 cv
16.397 18.1943 16.397 18.1504 16.396 18.1064 cv
16.395 18.085 16.3896 18.0576 16.397 18.0381 cv
16.4038 18.0215 16.4229 18.0254 16.4351 18.0166 cv
16.4609 17.9941 16.4277 17.9668 16.4868 17.9668 cv
16.4858 17.9346 16.46 17.8223 16.502 17.8154 cv
16.52 17.8125 16.5259 17.8271 16.5391 17.8271 cv
16.5391 17.8281 16.5391 17.8291 16.5391 17.8301 cv
16.54 17.8301 16.541 17.8301 16.542 17.8301 cv
16.542 17.7881 16.5107 17.7168 16.5737 17.7168 cv
16.5698 17.6738 16.5669 17.6318 16.564 17.5889 cv
16.5557 17.5352 16.5298 17.4775 16.5308 17.4199 cv
16.5317 17.3857 16.5728 17.3838 16.5757 17.3564 cv
16.5728 17.3398 16.5708 17.3232 16.5679 17.3076 cv
16.563 17.2422 16.5566 17.1758 16.5601 17.1064 cv
16.5679 17.0654 16.5767 17.0244 16.5859 16.9834 cv
16.5918 16.9639 16.606 16.9541 16.606 16.9326 cv
16.6069 16.9121 16.5928 16.9023 16.5879 16.8848 cv
16.583 16.8662 16.5928 16.8506 16.5918 16.833 cv
16.5908 16.8203 16.5908 16.8066 16.5898 16.793 cv
16.5918 16.7852 16.5938 16.7793 16.6011 16.7754 cv
16.6519 16.7441 16.6548 16.8447 16.6699 16.8447 cv
16.6699 16.8467 16.6699 16.8477 16.6699 16.8486 cv
16.6709 16.8486 16.6719 16.8486 16.6729 16.8486 cv
16.6738 16.835 16.6748 16.8232 16.6758 16.8115 cv
16.6719 16.7637 16.6416 16.6787 16.7188 16.6787 cv
16.7188 16.6777 16.7188 16.6768 16.7188 16.6758 cv
16.7178 16.6758 16.7168 16.6758 16.7158 16.6758 cv
16.7178 16.6641 16.7188 16.6523 16.7207 16.6406 cv
16.7271 16.6338 16.7329 16.627 16.7388 16.6211 cv
16.7378 16.6211 16.7368 16.6211 16.7358 16.6211 cv
16.73 16.5918 16.7236 16.5645 16.7168 16.5352 cv
16.7061 16.5029 16.6489 16.3926 16.7246 16.3926 cv
16.7246 16.3906 16.7246 16.3887 16.7246 16.3857 cv
16.71 16.3447 16.6709 16.3115 16.666 16.2666 cv
16.6631 16.2393 16.6738 16.2168 16.6748 16.1914 cv
16.6768 16.167 16.6787 16.1455 16.707 16.1455 cv
16.7061 16.1064 16.6899 16.0205 16.7397 16.0156 cv
16.7437 16.0146 16.7539 16.0166 16.7539 16.0107 cv
16.7549 16.0107 16.7559 16.0107 16.7568 16.0107 cv
16.7529 15.9854 16.7139 15.8848 16.7446 15.8711 cv
16.7568 15.8652 16.7681 15.8721 16.7798 15.8721 cv
16.7817 15.8467 16.7837 15.8203 16.7856 15.7939 cv
16.7939 15.7705 16.8076 15.7559 16.811 15.7266 cv
16.8149 15.6826 16.7979 15.6445 16.8018 15.6016 cv
16.8037 15.5859 16.8237 15.5742 16.8237 15.5723 cv
16.8228 15.5723 16.8218 15.5723 16.8208 15.5723 cv
16.8188 15.5352 16.8169 15.499 16.8159 15.4619 cv
16.8169 15.4473 16.8179 15.4336 16.8188 15.418 cv
16.8169 15.377 16.772 15.2529 16.7969 15.2236 cv
16.8188 15.1973 16.853 15.2168 16.853 15.2471 cv
16.854 15.2471 16.855 15.2471 16.856 15.2471 cv
16.856 15.1846 16.835 15.1406 16.8359 15.0781 cv
16.8369 15.0566 16.8477 15.042 16.8486 15.0205 cv
16.8477 14.9727 16.8467 14.9229 16.8457 14.875 cv
16.8418 14.8154 16.8159 14.7021 16.8389 14.6475 cv
16.8477 14.625 16.8789 14.6162 16.9019 14.6162 cv
16.9028 14.5977 16.9038 14.5781 16.9038 14.5596 cv
16.9077 14.54 16.918 14.5283 16.9189 14.5059 cv
16.9209 14.457 16.9048 14.416 16.9058 14.3691 cv
16.9106 14.3359 16.916 14.3027 16.9209 14.2705 cv
16.9229 14.2197 16.9248 14.1699 16.9268 14.1191 cv
16.9429 14.0537 16.959 13.9883 16.9746 13.9219 cv
16.9771 13.8887 16.979 13.8555 16.981 13.8223 cv
16.9937 13.7852 17.0229 13.7539 17.0459 13.7236 cv
17.085 13.6719 17.1177 13.6094 17.1299 13.5439 cv
17.1396 13.4912 17.124 13.4414 17.1147 13.3936 cv
17.1118 13.3701 17.1079 13.3467 17.105 13.3232 cv
17.0996 13.3008 17.0947 13.2793 17.0889 13.2559 cv
17.0869 13.2188 17.1128 13.1992 17.1128 13.1631 cv
17.1128 13.1201 17.082 13.0801 17.0869 13.0361 cv
17.0889 13.0234 17.1079 13.0146 17.1079 13.0059 cv
17.084 12.9492 17.0967 12.8818 17.0889 12.8184 cv
17.085 12.7842 17.0698 12.749 17.0718 12.7129 cv
17.0728 12.6895 17.0938 12.6836 17.0938 12.6611 cv
17.0938 12.6416 17.084 12.626 17.082 12.6084 cv
17.0786 12.5859 17.0908 12.5732 17.0898 12.5498 cv
17.0869 12.5078 17.0708 12.4658 17.0747 12.4199 cv
17.0767 12.3936 17.0908 12.3887 17.1167 12.3887 cv
17.1118 12.3711 17.1069 12.3545 17.1021 12.3379 cv
17.0967 12.3115 17.0977 12.2852 17.0918 12.2598 cv
17.082 12.2217 17.0566 12.168 17.064 12.123 cv
17.0659 12.1152 17.0747 12.0977 17.085 12.0977 cv
17.0776 12.0664 17.0767 12.0322 17.0718 11.999 cv
17.0669 11.9727 17.0278 11.8652 17.082 11.8652 cv
17.082 11.8623 17.082 11.8594 17.082 11.8564 cv
17.0801 11.8545 17.0776 11.8535 17.0757 11.8516 cv
17.0728 11.8486 17.0688 11.8447 17.0659 11.8428 cv
17.064 11.8398 17.062 11.8379 17.0601 11.835 cv
17.0366 11.8076 17.043 11.75 17.0366 11.7139 cv
17.0298 11.6787 17.0259 11.6318 17.0166 11.5977 cv
17.0029 11.5527 16.9888 11.5078 16.9736 11.4629 cv
16.9727 11.4385 16.9707 11.4141 16.9697 11.3896 cv
16.9619 11.3584 16.9429 11.3408 16.9287 11.3145 cv
16.9141 11.2705 16.8989 11.2275 16.8838 11.1846 cv
16.876 11.1504 16.8818 11.1104 16.8857 11.0742 cv
16.8887 11.0635 16.8916 11.0508 16.895 11.0391 cv
16.894 11.0195 16.8677 11.0088 16.8657 10.9873 cv
16.8647 10.9697 16.873 10.9453 16.8838 10.9346 cv
16.8896 10.9287 16.9141 10.9258 16.9141 10.9199 cv
16.915 10.917 16.916 10.9141 16.917 10.9111 cv
16.9077 10.9023 16.894 10.8564 16.9199 10.8564 cv
16.9199 10.8535 16.9199 10.8506 16.9199 10.8486 cv
16.894 10.8164 16.9067 10.6641 16.9517 10.6641 cv
16.9517 10.6514 16.9517 10.6387 16.9517 10.625 cv
16.9551 10.6172 16.957 10.6094 16.96 10.6016 cv
16.9336 10.584 16.916 10.5371 16.9629 10.5371 cv
16.9619 10.5195 16.9629 10.4971 16.9609 10.4795 cv
16.959 10.46 16.9429 10.4502 16.9478 10.4268 cv
16.9507 10.4131 16.978 10.4063 16.978 10.4004 cv
16.979 10.4004 16.98 10.4004 16.981 10.4004 cv
16.9697 10.3672 16.979 10.3096 16.9937 10.2803 cv
17.001 10.2754 17.0078 10.2695 17.0146 10.2637 cv
17.0156 10.2637 17.0166 10.2637 17.0181 10.2637 cv
17.0229 10.2109 17.0439 10.1348 17.1079 10.1357 cv
17.1138 10.1357 17.1289 10.1406 17.1289 10.1357 cv
17.1299 10.1357 17.1309 10.1357 17.1318 10.1357 cv
17.1318 10.1348 17.1318 10.1338 17.1318 10.1328 cv
17.1309 10.1318 17.1299 10.1309 17.1289 10.1299 cv
17.0986 10.123 17.0889 10.082 17.1157 10.0635 cv
17.1499 10.04 17.2007 10.0781 17.2007 10.0078 cv
17.1899 9.98926 17.1929 9.95313 17.2109 9.94043 cv
17.2207 9.93359 17.2329 9.93457 17.2388 9.92188 cv
17.248 9.90625 17.2329 9.88184 17.251 9.86914 cv
17.2627 9.86035 17.2817 9.86523 17.2969 9.86523 cv
17.2969 9.83301 17.3008 9.76758 17.3208 9.74707 cv
17.335 9.73438 17.3657 9.72266 17.376 9.70605 cv
17.3896 9.68066 17.373 9.64551 17.4248 9.64551 cv
17.4248 9.64453 17.4248 9.64355 17.4248 9.64258 cv
17.4238 9.64258 17.4229 9.64258 17.4219 9.64258 cv
17.4219 9.6416 17.4219 9.64063 17.4219 9.63965 cv
17.3877 9.58301 17.4658 9.58984 17.4897 9.5752 cv
17.52 9.55566 17.4927 9.5293 17.5557 9.53223 cv
17.561 9.53223 17.5757 9.53613 17.5757 9.53125 cv
17.5767 9.53125 17.5776 9.53125 17.5786 9.53125 cv
17.5786 9.53027 17.5786 9.5293 17.5786 9.52832 cv
17.5776 9.52832 17.5767 9.52832 17.5757 9.52832 cv
17.562 9.48535 17.5869 9.47754 17.626 9.47949 cv
17.6289 9.47949 17.6309 9.48145 17.6309 9.47656 cv
17.6318 9.47656 17.6328 9.47656 17.6338 9.47656 cv
17.6377 9.43457 17.6519 9.42383 17.6948 9.42383 cv
17.6948 9.42188 17.6948 9.41992 17.6948 9.41797 cv
17.6758 9.35547 17.709 9.34277 17.7368 9.29883 cv
17.7437 9.28809 17.7417 9.27441 17.752 9.26563 cv
17.7617 9.25977 17.772 9.25391 17.7817 9.24902 cv
17.791 9.24023 17.791 9.22852 17.8018 9.21973 cv
17.8247 9.20313 17.853 9.19824 17.876 9.17871 cv
17.8867 9.16992 17.8887 9.12988 17.9097 9.12988 cv
17.9097 9.12695 17.9097 9.12402 17.9097 9.12109 cv
17.8779 9.06934 17.939 9.06934 17.9736 9.06934 cv
17.98 9.03906 17.9727 9.01465 18.0117 9.01465 cv
18.0146 8.97656 18.022 8.96973 18.0586 8.96973 cv
18.0649 8.95801 18.0747 8.9502 18.0908 8.9502 cv
18.0908 8.94922 18.0908 8.94824 18.0908 8.94727 cv
18.0898 8.94727 18.0889 8.94727 18.0879 8.94727 cv
18.0879 8.94629 18.0879 8.94531 18.0879 8.94434 cv
18.0479 8.90723 18.0708 8.90332 18.0898 8.87207 cv
18.0947 8.86328 18.0967 8.85254 18.1079 8.84766 cv
18.1221 8.84473 18.1357 8.8418 18.1509 8.83984 cv
18.1606 8.83594 18.1709 8.83203 18.1807 8.82813 cv
18.1807 8.82715 18.1807 8.82617 18.1807 8.8252 cv
18.1797 8.8252 18.1787 8.8252 18.1777 8.8252 cv
18.1777 8.82422 18.1777 8.82324 18.1777 8.82227 cv
18.165 8.80176 18.1738 8.78613 18.1851 8.76953 cv
18.188 8.7627 18.1909 8.75488 18.1938 8.74805 cv
18.2119 8.72363 18.2461 8.74219 18.2627 8.75391 cv
18.2666 8.75586 18.2798 8.76074 18.2798 8.76758 cv
18.2808 8.76758 18.2827 8.76758 18.2847 8.76758 cv
18.2866 8.75391 18.2866 8.74219 18.2979 8.73438 cv
18.313 8.73145 18.3276 8.72754 18.3428 8.72363 cv
18.377 8.71094 18.4097 8.69922 18.4429 8.68652 cv
18.4717 8.6709 18.499 8.62793 18.5259 8.61719 cv
18.5391 8.6123 18.5527 8.61621 18.5669 8.61621 cv
18.5708 8.55371 18.6167 8.50977 18.6416 8.45898 cv
18.647 8.44336 18.6509 8.42871 18.6558 8.41406 cv
18.6631 8.40527 18.6719 8.40137 18.6826 8.40137 cv
18.6826 8.40039 18.6826 8.39941 18.6826 8.39844 cv
18.666 8.36035 18.6978 8.29785 18.7119 8.2666 cv
18.7168 8.25684 18.7217 8.24902 18.728 8.24023 cv
18.7358 8.2041 18.7271 8.16602 18.7378 8.13086 cv
18.7397 8.12598 18.75 8.10742 18.7471 8.10742 cv
18.7329 8.07422 18.748 8.0459 18.749 8.01465 cv
18.748 8 18.7471 7.98535 18.7446 7.97168 cv
18.7461 7.92578 18.7471 7.87793 18.7397 7.83398 cv
18.7368 7.81152 18.7246 7.79297 18.7168 7.77344 cv
18.6978 7.72461 18.686 7.68164 18.686 7.625 cv
18.6758 7.61426 18.666 7.60352 18.6558 7.5918 cv
18.6479 7.57715 18.6479 7.56152 18.6357 7.54688 cv
18.6221 7.53516 18.6079 7.52344 18.5947 7.51074 cv
18.5747 7.48828 18.5547 7.46484 18.5356 7.44238 cv
18.5107 7.41895 18.4829 7.40332 18.4609 7.37695 cv
18.4458 7.3584 18.4316 7.33984 18.417 7.32129 cv
18.4141 7.3125 18.4106 7.30176 18.4067 7.29297 cv
18.3916 7.27051 18.3608 7.25684 18.3486 7.23242 cv
18.3447 7.22363 18.3486 7.18945 18.3486 7.18945 cv
18.3486 7.18848 18.3169 7.13086 18.3169 7.14648 cv
18.2988 7.0791 18.2446 7.0127 18.1899 6.96484 cv
18.1719 6.95215 18.1538 6.93945 18.1357 6.92578 cv
18.1211 6.91113 18.1221 6.88574 18.1069 6.87402 cv
18.0908 6.86914 18.0747 6.86523 18.0586 6.86035 cv
18.0327 6.8418 18.0068 6.8252 17.981 6.80762 cv
17.9629 6.79297 17.9678 6.77734 17.9561 6.7627 cv
17.9478 6.75781 17.939 6.75391 17.9307 6.75 cv
17.9067 6.7334 17.834 6.6709 17.8276 6.64551 cv
17.8257 6.63965 17.8247 6.63184 17.8228 6.625 cv
17.7778 6.62207 17.7598 6.59375 17.7227 6.5752 cv
17.6997 6.56543 17.6758 6.55664 17.6528 6.5459 cv
17.646 6.54102 17.6338 6.51855 17.6309 6.51855 cv
17.6309 6.51953 17.6309 6.52051 17.6309 6.52148 cv
17.5747 6.53027 17.5029 6.49121 17.4849 6.44043 cv
17.4839 6.43945 17.4829 6.43848 17.4829 6.44043 cv
17.437 6.43848 17.4131 6.44043 17.3857 6.40918 cv
17.3818 6.4043 17.377 6.39844 17.373 6.39355 cv
17.3721 6.39355 17.3711 6.39355 17.3696 6.39355 cv
17.3696 6.39453 17.3696 6.39551 17.3696 6.39648 cv
17.3218 6.41211 17.3208 6.36523 17.2881 6.34863 cv
17.2739 6.34375 17.2588 6.34082 17.2446 6.33691 cv
17.2378 6.33203 17.2339 6.3125 17.228 6.3125 cv
17.1826 6.29395 17.1079 6.30078 17.0986 6.24414 cv
17.0977 6.24023 17.0986 6.23047 17.0938 6.23047 cv
17.0928 6.25879 17.0757 6.28613 17.0439 6.26758 cv
17.0366 6.25977 17.0308 6.25195 17.0239 6.24512 cv
16.9937 6.24414 16.9736 6.23633 16.9478 6.23242 cv
16.9209 6.22754 16.8931 6.22949 16.8677 6.22266 cv
16.835 6.21191 16.8057 6.19531 16.7681 6.19531 cv
16.7378 6.18066 16.6948 6.19043 16.6577 6.19043 cv
16.604 6.17578 16.5469 6.18164 16.4888 6.18164 cv
16.4688 6.17188 16.4399 6.18262 16.417 6.18066 cv
16.4077 6.17676 16.3989 6.1748 16.3906 6.17188 cv
16.3906 6.1709 16.3906 6.16992 16.3906 6.16895 cv
16.3589 6.20117 16.293 6.20801 16.2446 6.20508 cv
16.2368 6.20313 16.228 6.20117 16.2188 6.19824 cv
16.2188 6.19727 16.2188 6.19629 16.2188 6.19531 cv
16.1929 6.24414 16.1118 6.24805 16.063 6.26758 cv
16.0518 6.27539 16.041 6.28223 16.0298 6.29004 cv
15.998 6.30859 15.9678 6.31543 15.9287 6.31543 cv
15.9277 6.32813 15.9268 6.34375 15.915 6.35156 cv
15.876 6.37109 15.8276 6.37207 15.7866 6.38477 cv
15.7617 6.39648 15.7368 6.40723 15.7129 6.41699 cv
15.646 6.44141 15.5786 6.45996 15.5127 6.48633 cv
15.46 6.51465 15.4067 6.54102 15.354 6.56934 cv
15.3169 6.5918 15.2817 6.61816 15.2417 6.63477 cv
15.21 6.64941 15.1758 6.65332 15.1416 6.66211 cv
15.1147 6.6709 15.0869 6.68066 15.0601 6.68945 cv
15.0288 6.69922 14.9946 6.70215 14.9668 6.7168 cv
14.959 6.72656 14.9507 6.73535 14.9429 6.74414 cv
14.9229 6.7627 14.894 6.77539 14.8711 6.79199 cv
14.8618 6.80078 14.853 6.80957 14.8438 6.81836 cv
14.834 6.82227 14.8247 6.8252 14.8159 6.8291 cv
14.8159 6.83008 14.8159 6.83105 14.8159 6.83203 cv
14.8169 6.83691 14.8179 6.8418 14.8188 6.84668 cv
14.8188 6.84863 14.8188 6.85059 14.8188 6.85254 cv
14.8179 6.87305 14.8008 6.87598 14.793 6.8916 cv
14.79 6.90527 14.7866 6.91895 14.7847 6.93262 cv
14.772 6.95508 14.7598 6.97852 14.7471 7.00098 cv
14.7388 7.02246 14.75 7.0459 14.7427 7.06934 cv
14.7339 7.10059 14.7036 7.13477 14.6899 7.16699 cv
14.6807 7.18945 14.686 7.21973 14.6709 7.23926 cv
14.6709 7.24023 14.6699 7.24023 14.6699 7.24121 cv
14.6689 7.24219 14.668 7.24316 14.667 7.24414 cv
14.666 7.24512 14.6641 7.24609 14.6631 7.24707 cv
14.6616 7.24805 14.6606 7.24902 14.6597 7.24902 cv
14.6548 7.25098 14.6509 7.25195 14.647 7.25293 cv
14.647 7.25391 14.647 7.25488 14.647 7.25586 cv
14.647 7.26465 14.647 7.27148 14.6479 7.2793 cv
14.644 7.28809 14.6387 7.29688 14.6348 7.30762 cv
14.6221 7.33984 14.6069 7.38867 14.605 7.4248 cv
14.604 7.47168 14.6328 7.50781 14.6338 7.55176 cv
14.6348 7.56055 14.6348 7.58691 14.627 7.58691 cv
14.6377 7.62793 14.6118 7.63086 14.6118 7.64258 cv
14.6187 7.66699 14.606 7.68945 14.605 7.71191 cv
14.6069 7.72559 14.6099 7.7373 14.6118 7.75 cv
14.6021 7.75 14.5908 7.75 14.5801 7.75 cv
14.583 7.76855 14.5908 7.78418 14.5869 7.80566 cv
14.582 7.81836 14.5776 7.83203 14.5728 7.84668 cv
14.5757 7.85547 14.5786 7.86523 14.582 7.875 cv
14.5786 7.8916 14.5767 7.90625 14.5747 7.9209 cv
14.5747 7.94824 14.5859 7.98145 14.5859 8.00586 cv
14.5801 8.00586 14.5737 8.00586 14.5688 8.00586 cv
14.5688 8.00684 14.5688 8.00781 14.5688 8.00879 cv
14.5698 8.00879 14.5708 8.00879 14.5718 8.00879 cv
14.585 8.04199 14.5786 8.08496 14.584 8.12109 cv
14.5869 8.13281 14.5898 8.14551 14.5928 8.15723 cv
14.5918 8.16992 14.5908 8.18457 14.5898 8.19727 cv
14.5947 8.2168 14.6011 8.2373 14.6069 8.25586 cv
14.6118 8.26465 14.6177 8.27246 14.623 8.28027 cv
14.6289 8.30176 14.6128 8.31543 14.6147 8.33691 cv
14.623 8.35645 14.6299 8.37598 14.6377 8.39648 cv
14.644 8.41602 14.6377 8.43945 14.6377 8.45898 cv
14.6387 8.45898 14.6396 8.45898 14.6406 8.45898 cv
14.6406 8.45996 14.6406 8.46094 14.6406 8.46191 cv
14.7378 8.46484 14.6631 8.56152 14.6558 8.56152 cv
14.6558 8.5625 14.6558 8.56348 14.6558 8.56445 cv
14.665 8.5791 14.6709 8.65137 14.6958 8.65137 cv
14.6948 8.65234 14.6938 8.65332 14.6938 8.6543 cv
14.6938 8.65527 14.6938 8.65625 14.6938 8.65723 cv
14.687 8.65723 14.6797 8.65723 14.6729 8.65723 cv
14.6719 8.66211 14.6689 8.68066 14.6616 8.68066 cv
14.6616 8.68262 14.6616 8.68457 14.6616 8.68652 cv
14.6899 8.6875 14.7236 8.69434 14.7129 8.73145 cv
14.7119 8.73535 14.668 8.7793 14.667 8.7793 cv
14.6768 8.7998 14.6899 8.90137 14.6499 8.90137 cv
14.6499 8.90234 14.6499 8.90332 14.6499 8.9043 cv
14.6826 8.91211 14.7017 8.99707 14.6851 8.99707 cv
14.6851 8.99805 14.6851 8.99805 14.6851 8.99902 cv
14.7158 9.00586 14.708 9.02344 14.708 9.04883 cv
14.7188 9.05078 14.752 9.07422 14.752 9.08398 cv
14.7559 9.10449 14.7778 9.16797 14.7339 9.16797 cv
14.7339 9.16895 14.7339 9.16992 14.7339 9.1709 cv
14.7358 9.17578 14.7378 9.18164 14.7397 9.18555 cv
14.751 9.19141 14.7598 9.19824 14.7607 9.21191 cv
14.7627 9.24316 14.7358 9.24023 14.7148 9.24902 cv
14.708 9.25293 14.7007 9.25684 14.6938 9.26074 cv
14.6948 9.2627 14.6948 9.26367 14.6958 9.26465 cv
14.7378 9.29199 14.7207 9.33789 14.7236 9.38477 cv
14.7227 9.3877 14.7227 9.38867 14.7227 9.38965 cv
14.7188 9.38867 14.708 9.38281 14.708 9.38965 cv
14.707 9.38965 14.7061 9.38965 14.7051 9.38965 cv
14.6987 9.43457 14.6689 9.4541 14.6328 9.47754 cv
14.6309 9.47852 14.624 9.48242 14.6299 9.48242 cv
14.6489 9.50586 14.6836 9.51563 14.6729 9.55664 cv
14.668 9.56641 14.6641 9.57617 14.6587 9.58594 cv
14.6577 9.59277 14.6558 9.61328 14.647 9.61328 cv
14.647 9.61426 14.647 9.61523 14.647 9.61523 cv
14.6479 9.61523 14.6489 9.61523 14.6499 9.61523 cv
14.6499 9.61621 14.6499 9.61719 14.6499 9.61816 cv
14.7407 9.62988 14.6528 9.75781 14.6328 9.75781 cv
14.6328 9.75879 14.6328 9.75977 14.6328 9.76074 cv
14.644 9.77441 14.6548 9.78711 14.666 9.7998 cv
14.6719 9.81641 14.665 9.82813 14.6631 9.8418 cv
14.6606 9.86719 14.665 9.8916 14.6328 9.8916 cv
14.6309 9.95117 14.5996 9.92285 14.5898 9.94824 cv
14.584 9.96191 14.605 9.9873 14.5869 10.0176 cv
14.5757 10.0352 14.5156 10.084 14.5156 10.0947 cv
14.5239 10.1045 14.54 10.1709 14.5347 10.1826 cv
14.5347 10.1836 14.5337 10.1836 14.5337 10.1836 cv
14.5327 10.1855 14.5308 10.1875 14.5288 10.1895 cv
14.5137 10.2031 14.4868 10.1963 14.4707 10.2119 cv
14.459 10.2236 14.4609 10.2402 14.4526 10.2529 cv
14.4419 10.2607 14.4307 10.2695 14.4209 10.2783 cv
14.417 10.2861 14.4141 10.2949 14.4097 10.3027 cv
14.4019 10.3164 14.3579 10.3623 14.3418 10.3623 cv
14.3418 10.3633 14.3418 10.3643 14.3418 10.3652 cv
14.3428 10.3652 14.3438 10.3652 14.3447 10.3652 cv
14.3447 10.3662 14.3447 10.3672 14.3447 10.3682 cv
14.3779 10.4043 14.3286 10.4209 14.3086 10.4375 cv
14.3037 10.4473 14.2988 10.4561 14.2939 10.4658 cv
14.2881 10.4727 14.23 10.4961 14.2197 10.4961 cv
14.2197 10.4971 14.2197 10.498 14.2197 10.499 cv
14.2358 10.5098 14.2417 10.5361 14.231 10.5527 cv
14.1851 10.6201 14.0947 10.666 14.0347 10.7178 cv
14.0029 10.7471 13.9771 10.7813 13.9478 10.8105 cv
13.936 10.8184 13.9238 10.8252 13.9116 10.833 cv
13.8916 10.8525 13.8906 10.8721 13.8618 10.8789 cv
13.8579 10.8799 13.8447 10.8799 13.8447 10.8848 cv
13.8438 10.8848 13.8428 10.8848 13.8418 10.8848 cv
13.8418 10.8857 13.8418 10.8877 13.8408 10.8887 cv
13.8408 10.8906 13.8398 10.8916 13.8398 10.8936 cv
13.8389 10.8955 13.8389 10.8965 13.8379 10.8975 cv
13.8301 10.9141 13.8047 10.915 13.791 10.9268 cv
13.769 10.9482 13.7417 10.9697 13.7217 10.9922 cv
13.708 11.0098 13.6938 11.0283 13.6797 11.0459 cv
13.6616 11.0645 13.6118 11.1123 13.5889 11.0752 cv
13.5776 11.0586 13.6069 10.9063 13.6089 10.876 cv
13.6089 10.8496 13.6079 10.8223 13.6079 10.7949 cv
13.6079 10.7129 13.5688 10.6436 13.564 10.5635 cv
13.5679 10.5156 13.5718 10.4678 13.5757 10.4199 cv
13.5728 10.4023 13.5698 10.3828 13.5669 10.3652 cv
13.5679 10.3428 13.5688 10.3213 13.5698 10.2988 cv
13.563 10.2295 13.5449 10.1572 13.5439 10.083 cv
13.5459 10.0479 13.5488 10.0137 13.5508 9.97949 cv
13.5518 9.93652 13.5469 9.89746 13.5488 9.85449 cv
13.5527 9.83691 13.5566 9.82129 13.561 9.80371 cv
13.561 9.77539 13.541 9.75586 13.541 9.72656 cv
13.54 9.68262 13.585 9.65137 13.582 9.60742 cv
13.5811 9.58203 13.562 9.58789 13.5527 9.57031 cv
13.5449 9.55273 13.5537 9.53516 13.5537 9.52051 cv
13.521 9.50781 13.498 9.43848 13.5518 9.43848 cv
13.5527 9.41602 13.5688 9.39648 13.5688 9.37695 cv
13.5229 9.36133 13.5449 9.33691 13.5249 9.30762 cv
13.5107 9.28613 13.4668 9.27051 13.4868 9.23633 cv
13.4927 9.22754 13.5029 9.22363 13.5137 9.22363 cv
13.5137 9.22266 13.5137 9.22168 13.5137 9.21973 cv
13.5127 9.21973 13.5117 9.21973 13.5107 9.21973 cv
13.5107 9.21875 13.5107 9.21777 13.5107 9.2168 cv
13.481 9.18848 13.4536 9.11328 13.52 9.11035 cv
13.521 9.10938 13.521 9.1084 13.522 9.10742 cv
13.4849 9.08789 13.4937 9.02637 13.54 9.02637 cv
13.54 9.02539 13.54 9.02441 13.54 9.02344 cv
13.5391 9.02344 13.5381 9.02344 13.5366 9.02344 cv
13.5366 9.02246 13.5366 9.02148 13.5366 9.02051 cv
13.5288 9 13.5347 8.97363 13.5601 8.97363 cv
13.5518 8.92871 13.46 8.90723 13.458 8.85742 cv
13.4561 8.82422 13.48 8.82324 13.5078 8.82227 cv
13.5117 8.82227 13.5137 8.82422 13.5137 8.81934 cv
13.4937 8.81348 13.4316 8.7666 13.4761 8.74609 cv
13.4907 8.73828 13.5068 8.74707 13.522 8.74707 cv
13.522 8.74609 13.522 8.74512 13.522 8.74414 cv
13.502 8.73535 13.4717 8.71777 13.4629 8.69531 cv
13.4536 8.67188 13.4717 8.65137 13.4717 8.62793 cv
13.4727 8.58008 13.4351 8.44434 13.5078 8.44434 cv
13.5078 8.44336 13.5078 8.44336 13.5078 8.44238 cv
13.5068 8.44238 13.5059 8.44238 13.5049 8.44238 cv
13.5049 8.44141 13.5049 8.44043 13.5049 8.43945 cv
13.4917 8.4248 13.4761 8.37207 13.5107 8.37207 cv
13.5107 8.37109 13.5107 8.37012 13.5107 8.36914 cv
13.5098 8.36914 13.5088 8.36914 13.5078 8.36914 cv
13.5078 8.36816 13.5078 8.36719 13.5078 8.36621 cv
13.4907 8.35449 13.436 8.30176 13.4829 8.28613 cv
13.4946 8.28223 13.5059 8.28809 13.5166 8.28809 cv
13.5117 8.28223 13.5068 8.2793 13.499 8.2793 cv
13.4868 8.27051 13.4727 8.26367 13.4688 8.24609 cv
13.4551 8.18848 13.4697 8.11719 13.4771 8.06445 cv
13.479 8.04102 13.48 8.01953 13.481 7.99707 cv
13.4858 7.97852 13.4907 7.95801 13.4961 7.93945 cv
13.498 7.90918 13.5068 7.77832 13.52 7.7627 cv
13.5229 7.75977 13.5249 7.75781 13.5278 7.75586 cv
13.52 7.70605 13.5518 7.60059 13.5698 7.55762 cv
13.5767 7.54004 13.5928 7.53223 13.5977 7.51465 cv
13.6089 7.47754 13.6021 7.42285 13.6211 7.39258 cv
13.6367 7.36719 13.665 7.34863 13.6851 7.32813 cv
13.6938 7.31641 13.7026 7.30371 13.7109 7.29102 cv
13.7637 7.23438 13.7788 7.21777 13.7979 7.14063 cv
13.8037 7.11133 13.853 7.08496 13.8511 7.08496 cv
13.835 7.04395 13.8286 7.0293 13.873 7.00977 cv
13.8818 7.00586 13.8906 7.00195 13.8999 6.99707 cv
13.8999 6.99609 13.8999 6.99512 13.8999 6.99414 cv
13.8989 6.99316 13.8979 6.99316 13.897 6.99219 cv
13.8906 6.97656 13.8906 6.9541 13.9009 6.94043 cv
13.917 6.91504 13.9409 6.90723 13.96 6.88867 cv
13.98 6.86719 14.002 6.84277 14.022 6.82031 cv
14.0356 6.80176 14.0488 6.7832 14.062 6.76465 cv
14.0786 6.74707 14.105 6.7373 14.1211 6.71582 cv
14.186 6.63379 14.2397 6.53516 14.3159 6.46191 cv
14.3257 6.45215 14.3276 6.43555 14.3398 6.42285 cv
14.354 6.41504 14.3677 6.40723 14.3818 6.39844 cv
14.3999 6.38574 14.4141 6.36914 14.4316 6.35938 cv
14.4448 6.35254 14.4648 6.35449 14.4761 6.34277 cv
14.4849 6.33008 14.4937 6.31641 14.5039 6.30176 cv
14.5229 6.28809 14.542 6.27539 14.562 6.26074 cv
14.5996 6.22754 14.6279 6.18652 14.666 6.15039 cv
14.6777 6.14258 14.6899 6.13379 14.7017 6.125 cv
14.7227 6.10352 14.7437 6.08008 14.7646 6.05859 cv
14.7729 6.04688 14.7739 6.03418 14.7837 6.02539 cv
14.8169 5.99609 14.8618 5.99609 14.897 5.97461 cv
14.9517 5.93848 15.002 5.85645 15.0337 5.80176 cv
15.0439 5.79004 15.0537 5.77734 15.0649 5.76563 cv
15.0737 5.74805 15.0801 5.73633 15.103 5.73633 cv
15.106 5.7002 15.1396 5.59766 15.1816 5.59766 cv
15.1816 5.59668 15.1816 5.59473 15.1816 5.59375 cv
15.1807 5.59375 15.1797 5.59375 15.1787 5.59375 cv
15.1787 5.59277 15.1787 5.5918 15.1787 5.59082 cv
15.1689 5.57129 15.1968 5.47559 15.2168 5.47559 cv
15.2168 5.47461 15.2168 5.47363 15.2168 5.47266 cv
15.2158 5.47266 15.2148 5.47266 15.2139 5.47266 cv
15.2061 5.4502 15.209 5.33203 15.2368 5.33203 cv
15.2368 5.33105 15.2368 5.33008 15.2368 5.33008 cv
15.2261 5.30762 15.2246 5.27148 15.2388 5.25 cv
15.2397 5.24902 15.2417 5.24707 15.2427 5.24512 cv
15.2417 5.24512 15.2407 5.24512 15.2397 5.24512 cv
15.228 5.22168 15.2119 5.10645 15.2197 5.07813 cv
15.2207 5.07422 15.228 5.06543 15.2217 5.06543 cv
15.2148 5.04883 15.2148 5.03027 15.208 5.01465 cv
15.2017 5.00488 15.1958 4.99707 15.1909 4.98828 cv
15.1738 4.95508 15.1616 4.92285 15.1377 4.89453 cv
15.1377 4.89355 15.1377 4.89258 15.1377 4.8916 cv
15.1289 4.88965 15.1196 4.8877 15.1118 4.88477 cv
15.0967 4.875 15.0566 4.79883 15.0518 4.78125 cv
15.0488 4.76074 15.0459 4.74219 15.043 4.72363 cv
15.0308 4.70117 15.019 4.67773 15.0068 4.65625 cv
15.0059 4.65332 14.999 4.64355 14.999 4.64941 cv
14.9849 4.62402 14.9717 4.59961 14.958 4.57324 cv
14.9561 4.55078 14.9536 4.5293 14.9507 4.50684 cv
14.9448 4.48047 14.939 4.45313 14.9326 4.4248 cv
14.9297 4.38965 14.9277 4.35254 14.9248 4.31641 cv
14.9189 4.27832 14.895 4.24512 14.8848 4.20996 cv
14.8828 4.19629 14.8809 4.18164 14.8799 4.16699 cv
14.8711 4.14746 14.8628 4.12598 14.855 4.10645 cv
14.855 4.08398 14.854 4.0625 14.854 4.04004 cv
14.8496 4.02637 14.835 4.02441 14.8286 4.01074 cv
14.813 3.98047 14.8086 3.94336 14.7949 3.91211 cv
14.7847 3.88965 14.772 3.87793 14.7769 3.84863 cv
14.7778 3.84473 14.7788 3.84473 14.7749 3.84473 cv
14.7617 3.8291 14.75 3.81348 14.7368 3.79688 cv
14.7026 3.77441 14.6211 3.75098 14.6128 3.71094 cv
14.6118 3.70605 14.6118 3.69629 14.606 3.69629 cv
14.5811 3.68652 14.5601 3.69238 14.5547 3.65918 cv
14.5537 3.65527 14.5557 3.65332 14.5508 3.65332 cv
14.5508 3.6543 14.5508 3.65527 14.5508 3.65625 cv
14.5337 3.66211 14.5137 3.66211 14.4927 3.66211 cv
14.4707 3.65039 14.439 3.62988 14.4116 3.62988 cv
14.4009 3.625 14.374 3.62402 14.374 3.60645 cv
14.373 3.60645 14.3721 3.60645 14.3711 3.60645 cv
14.3711 3.60742 14.3711 3.6084 14.3711 3.60938 cv
14.3696 3.60938 14.3687 3.60938 14.3677 3.60938 cv
14.3496 3.62207 14.3076 3.61914 14.291 3.60547 cv
14.2866 3.59961 14.2817 3.5918 14.2778 3.58594 cv
14.2646 3.63184 14.1738 3.61523 14.1299 3.61523 cv
14.0928 3.61719 14.0557 3.61914 14.019 3.62109 cv
13.998 3.61426 13.9771 3.60742 13.9551 3.60156 cv
13.939 3.59375 13.9219 3.58691 13.9048 3.58105 cv
13.8599 3.54883 13.835 3.51367 13.772 3.51367 cv
13.7617 3.50684 13.751 3.50488 13.7427 3.49414 cv
13.7368 3.48535 13.7388 3.46875 13.729 3.46289 cv
13.7129 3.45898 13.6958 3.4541 13.6807 3.4502 cv
13.6689 3.44336 13.6567 3.43652 13.645 3.42773 cv
13.6021 3.40723 13.5337 3.38574 13.4819 3.38574 cv
13.4429 3.36523 13.3999 3.35645 13.3511 3.35645 cv
13.3398 3.35547 13.3301 3.35352 13.3188 3.35156 cv
13.3057 3.35059 13.292 3.34961 13.2778 3.34863 cv
13.271 3.34766 13.2627 3.34668 13.2549 3.34473 cv
13.2236 3.33398 13.1797 3.34473 13.1479 3.34473 cv
13.1479 3.34375 13.1479 3.34277 13.1479 3.3418 cv
13.147 3.34277 13.146 3.34375 13.145 3.34473 cv
13.1167 3.35742 13.0107 3.37402 12.98 3.36133 cv
12.9648 3.35547 12.9536 3.33984 12.9438 3.32715 cv
12.9399 3.33887 12.939 3.35254 12.9268 3.3584 cv
12.9048 3.37109 12.8721 3.36816 12.8457 3.37305 cv
12.7998 3.38086 12.7607 3.40625 12.709 3.41016 cv
12.689 3.41211 12.6768 3.40039 12.6616 3.40039 cv
12.6616 3.39941 12.6616 3.39844 12.6616 3.39746 cv
12.647 3.43945 12.6348 3.42871 12.5996 3.44727 cv
12.5718 3.46484 12.5439 3.4834 12.5146 3.50098 cv
12.4819 3.51465 12.4478 3.52637 12.4141 3.53906 cv
12.3828 3.55664 12.3589 3.58301 12.3267 3.59961 cv
12.2979 3.6123 12.2646 3.61523 12.2368 3.62891 cv
12.2168 3.63965 12.2051 3.6582 12.187 3.6709 cv
12.1108 3.72656 12.0107 3.80762 11.9097 3.80762 cv
11.894 3.80371 11.8789 3.80078 11.8628 3.79785 cv
11.8359 3.78516 11.7246 3.80078 11.6826 3.80078 cv
11.6499 3.79395 11.6167 3.82031 11.5918 3.83301 cv
11.5688 3.84082 11.5469 3.84863 11.5249 3.85547 cv
11.4878 3.875 11.458 3.90527 11.4209 3.92383 cv
11.395 3.94043 11.3677 3.95605 11.3418 3.97168 cv
11.3276 3.98535 11.3149 3.99805 11.3008 4.01074 cv
11.2808 4.02539 11.2607 4.03906 11.2417 4.05371 cv
11.21 4.08887 11.188 4.13965 11.1641 4.17871 cv
11.1548 4.19238 11.145 4.20508 11.1357 4.2168 cv
11.1309 4.23828 11.126 4.25879 11.1211 4.28027 cv
11.1118 4.31445 11.0977 4.34668 11.0918 4.38184 cv
11.0767 4.4668 11.084 4.56543 11.084 4.6582 cv
11.084 4.69531 11.083 4.73242 11.082 4.76953 cv
11.085 4.79395 11.0869 4.81934 11.0898 4.84375 cv
11.0908 4.87012 11.085 4.89063 11.0918 4.91309 cv
11.1089 4.9668 11.147 5.01855 11.1777 5.06543 cv
11.207 5.1084 11.2471 5.14355 11.2471 5.20215 cv
11.312 5.2041 11.311 5.22949 11.3477 5.26758 cv
11.3657 5.28516 11.3931 5.28906 11.4106 5.31055 cv
11.4429 5.34668 11.4209 5.35547 11.4277 5.39063 cv
11.4316 5.40527 11.4551 5.41504 11.4639 5.42871 cv
11.4761 5.44531 11.4839 5.48242 11.48 5.50293 cv
11.4771 5.51074 11.4736 5.51953 11.4707 5.52734 cv
11.5029 5.55371 11.498 5.58496 11.5029 5.62598 cv
11.5078 5.63965 11.5117 5.65332 11.5166 5.66699 cv
11.522 5.70898 11.52 5.75195 11.5249 5.79492 cv
11.5288 5.81445 11.5327 5.83301 11.5356 5.85352 cv
11.5356 5.87305 11.5249 5.8877 11.522 5.90527 cv
11.5166 5.93652 11.5166 5.96973 11.5117 5.99902 cv
11.5088 6.0166 11.5181 6.03516 11.5088 6.05176 cv
11.501 6.06836 11.48 6.06836 11.4619 6.06836 cv
11.46 6.08691 11.4448 6.10645 11.4448 6.12305 cv
11.4458 6.12305 11.4468 6.12305 11.4478 6.12305 cv
11.4619 6.13965 11.457 6.21094 11.4429 6.22656 cv
11.417 6.23438 11.3896 6.24316 11.3628 6.25098 cv
11.3628 6.26465 11.3628 6.27832 11.3628 6.29102 cv
11.3667 6.29199 11.3721 6.29199 11.3721 6.29688 cv
11.3618 6.31543 11.3628 6.33105 11.3628 6.35254 cv
11.356 6.35254 11.3477 6.35254 11.3398 6.35254 cv
11.3398 6.36621 11.3486 6.37793 11.3486 6.38086 cv
11.3311 6.40234 11.3311 6.42188 11.3311 6.45117 cv
11.3149 6.45117 11.2979 6.45117 11.2817 6.45117 cv
11.2817 6.45605 11.2798 6.47168 11.2847 6.47168 cv
11.291 6.47363 11.2969 6.47559 11.3018 6.47754 cv
11.3018 6.47852 11.3018 6.47949 11.3018 6.48047 cv
11.3008 6.48047 11.2998 6.48047 11.2988 6.48047 cv
11.2988 6.48145 11.2988 6.48242 11.2988 6.4834 cv
11.2627 6.52051 11.269 6.71582 11.2236 6.71582 cv
11.2236 6.7168 11.2236 6.71777 11.2236 6.71777 cv
11.2246 6.71777 11.2261 6.71777 11.2271 6.71777 cv
11.2271 6.71875 11.2271 6.71973 11.2271 6.72168 cv
11.2568 6.76367 11.189 6.80664 11.1538 6.80664 cv
11.1538 6.80762 11.1538 6.80859 11.1538 6.80957 cv
11.1548 6.80957 11.1558 6.80957 11.1567 6.80957 cv
11.165 6.81641 11.1738 6.82129 11.1768 6.83203 cv
11.1826 6.85645 11.1631 6.93945 11.1338 6.93945 cv
11.1338 6.94043 11.1338 6.94141 11.1338 6.94238 cv
11.1719 6.94336 11.1641 6.96289 11.1538 6.98828 cv
11.1499 6.99805 11.1377 7.04395 11.125 7.04395 cv
11.1279 7.07324 11.123 7.11719 11.0869 7.11719 cv
11.083 7.18164 11.0601 7.16602 11.022 7.19434 cv
11.0068 7.20508 11.002 7.22168 10.98 7.22168 cv
10.98 7.22266 10.98 7.22363 10.98 7.22461 cv
10.981 7.22461 10.9819 7.22461 10.9829 7.22461 cv
10.9849 7.23633 10.9858 7.24707 10.9888 7.25879 cv
10.9937 7.25879 11.0059 7.25879 11.0059 7.26563 cv
11.0068 7.26563 11.0078 7.26563 11.0088 7.26563 cv
11.0078 7.2666 11.0068 7.26758 11.0059 7.26855 cv
10.999 7.2793 10.9907 7.29102 10.9839 7.30273 cv
10.9688 7.33594 10.9697 7.35547 10.9248 7.35547 cv
10.9248 7.35645 10.9248 7.35742 10.9248 7.3584 cv
10.9727 7.37012 10.9458 7.4209 10.9141 7.43555 cv
10.896 7.44238 10.874 7.43652 10.855 7.43652 cv
10.8608 7.46387 10.8428 7.48242 10.8428 7.50586 cv
10.8438 7.50586 10.8447 7.50586 10.8457 7.50586 cv
10.8916 7.53711 10.8657 7.60547 10.811 7.60547 cv
10.811 7.60645 10.811 7.60742 10.811 7.6084 cv
10.8257 7.64453 10.8179 7.67285 10.7739 7.66992 cv
10.769 7.66992 10.7617 7.6709 10.7617 7.66602 cv
10.7598 7.66602 10.7578 7.66602 10.7559 7.66602 cv
10.7598 7.67578 10.7617 7.69238 10.7568 7.70215 cv
10.7471 7.71973 10.7246 7.72852 10.71 7.73926 cv
10.6948 7.75488 10.6797 7.77051 10.6641 7.78613 cv
10.6406 7.79785 10.6187 7.81152 10.5957 7.82422 cv
10.5801 7.82715 10.564 7.83105 10.5479 7.83398 cv
10.5298 7.8418 10.5137 7.86035 10.4917 7.86035 cv
10.4868 7.9082 10.4326 7.91211 10.3931 7.9209 cv
10.377 7.92383 10.3677 7.93457 10.3486 7.93555 cv
10.3438 7.93555 10.3286 7.93457 10.3286 7.93945 cv
10.3276 7.93945 10.3267 7.93945 10.3257 7.93945 cv
10.3198 7.9873 10.2856 8.00195 10.2388 8.00391 cv
10.2339 8.00488 10.2148 8.00586 10.2148 8 cv
10.2139 8 10.2119 8 10.21 8 cv
10.2036 8.03711 10.1836 8.01953 10.1587 8.03516 cv
10.1328 8.05078 10.147 8.07031 10.1021 8.07031 cv
10.0986 8.06934 10.0957 8.06836 10.0928 8.06738 cv
10.0928 8.06836 10.0928 8.06934 10.0928 8.07031 cv
10.0728 8.10156 10.0347 8.10156 10.0059 8.12207 cv
9.97607 8.14453 9.95703 8.17383 9.92871 8.20117 cv
9.90771 8.21484 9.88574 8.22949 9.86475 8.24316 cv
9.85596 8.25 9.8457 8.25586 9.83594 8.26367 cv
9.80859 8.27344 9.79102 8.25586 9.76807 8.25586 cv
9.76807 8.25684 9.76807 8.25781 9.76807 8.25781 cv
9.76904 8.25879 9.77002 8.25977 9.771 8.26074 cv
9.78174 8.28027 9.79199 8.30273 9.78906 8.32813 cv
9.78271 8.37305 9.74072 8.41309 9.72168 8.45313 cv
9.71289 8.47461 9.71289 8.49902 9.70264 8.51953 cv
9.69873 8.52832 9.69189 8.53613 9.68164 8.54004 cv
9.68164 8.54004 9.68066 8.54004 9.67969 8.54102 cv
9.625 8.55957 9.62793 8.50293 9.57861 8.50293 cv
9.57568 8.50195 9.57275 8.50098 9.56982 8.5 cv
9.56982 8.50586 9.56982 8.5293 9.56201 8.5293 cv
9.56201 8.53027 9.56201 8.53125 9.56201 8.53223 cv
9.62988 8.53809 9.60693 8.61621 9.54688 8.61621 cv
9.54688 8.61719 9.54688 8.61816 9.54688 8.61914 cv
9.57568 8.66211 9.5957 8.72754 9.57178 8.7793 cv
9.56201 8.79395 9.55176 8.80859 9.54199 8.82227 cv
9.53174 8.8418 9.52002 8.86426 9.5127 8.88379 cv
9.50977 8.89551 9.50781 8.90527 9.50586 8.91602 cv
9.49463 8.92871 9.48486 8.94336 9.47461 8.95605 cv
9.4668 8.97168 9.47168 8.99219 9.46289 9.00586 cv
9.44971 9.02637 9.43066 9.03613 9.4209 9.05859 cv
9.41699 9.0752 9.41162 9.0918 9.40771 9.10938 cv
9.40088 9.11816 9.39404 9.12793 9.3877 9.13867 cv
9.38379 9.14941 9.38086 9.16113 9.37793 9.17188 cv
9.36963 9.18359 9.36279 9.19531 9.35498 9.20605 cv
9.3457 9.22949 9.35498 9.25879 9.3457 9.28223 cv
9.33203 9.31543 9.29297 9.33691 9.28174 9.37207 cv
9.27783 9.38477 9.27393 9.41797 9.25391 9.41797 cv
9.25293 9.41895 9.25195 9.41992 9.25098 9.4209 cv
9.2666 9.46387 9.22803 9.48828 9.21094 9.52051 cv
9.20703 9.53418 9.20361 9.54688 9.19971 9.56152 cv
9.19385 9.56934 9.18701 9.57813 9.18066 9.58594 cv
9.16895 9.60938 9.15771 9.63086 9.14697 9.6543 cv
9.13281 9.67383 9.05566 9.72656 9.03271 9.72656 cv
9.03271 9.72754 9.03271 9.72852 9.03271 9.72949 cv
9.03369 9.72949 9.03467 9.72949 9.03564 9.72949 cv
9.06201 9.74805 9.10596 9.73145 9.12305 9.7627 cv
9.12402 9.77148 9.125 9.78027 9.12598 9.78906 cv
9.12598 9.79102 9.125 9.79297 9.125 9.79395 cv
9.1167 9.80371 9.10791 9.81543 9.09961 9.8252 cv
9.08398 9.84277 9.07568 9.86426 9.06201 9.88379 cv
9.05664 9.88965 9.05078 9.89453 9.0459 9.90039 cv
9.03369 9.91992 9.0166 9.94629 9.00879 9.96777 cv
9.00781 9.97949 9.00781 9.99023 9.00684 10.001 cv
8.99707 10.0195 8.98682 10.0361 8.97705 10.0537 cv
8.94092 10.1055 8.86084 10.1309 8.86084 10.2002 cv
8.89893 10.207 8.91064 10.2754 8.86377 10.2754 cv
8.86377 10.2969 8.83203 10.3887 8.82568 10.3887 cv
8.85889 10.4688 8.72461 10.5 8.72461 10.5391 cv
8.73682 10.5693 8.76563 10.6006 8.75684 10.6377 cv
8.74268 10.6953 8.68506 10.7314 8.65771 10.7822 cv
8.65771 10.8027 8.65674 10.8242 8.65576 10.8438 cv
8.65186 10.8711 8.62402 10.8994 8.60889 10.9199 cv
8.60498 10.9258 8.59766 10.9434 8.59082 10.9434 cv
8.60889 10.9863 8.57764 10.9951 8.55273 11.0166 cv
8.54102 11.0264 8.48682 11.0742 8.48682 11.0879 cv
8.48682 11.1113 8.50977 11.125 8.49902 11.1533 cv
8.48096 11.1982 8.41895 11.2266 8.40186 11.2705 cv
8.39063 11.2969 8.42578 11.3096 8.41992 11.3379 cv
8.40771 11.3594 8.39502 11.3789 8.38281 11.4004 cv
8.37402 11.4229 8.38281 11.4482 8.37598 11.4717 cv
8.36963 11.4902 8.34473 11.5029 8.33301 11.5195 cv
8.32471 11.5303 8.33105 11.5479 8.32568 11.5615 cv
8.30762 11.5879 8.29004 11.6143 8.27197 11.6416 cv
8.25977 11.6553 8.21484 11.6885 8.21289 11.7021 cv
8.21289 11.7061 8.21094 11.7129 8.21582 11.7129 cv
8.30664 11.7461 8.18799 11.8145 8.16162 11.8506 cv
8.1377 11.9316 li
8.15967 11.9375 8.18164 11.9824 8.15283 11.9961 cv
8.13574 12.0039 8.10889 11.9961 8.09082 11.9941 cv
8.08691 11.9941 8.08008 11.9902 8.08008 11.9951 cv
8.07764 11.9951 8.07568 11.9951 8.07373 11.9951 cv
8.08691 12.0234 8.07568 12.0459 8.08008 12.0762 cv
8.08203 12.0889 8.0957 12.0947 8.09961 12.1074 cv
8.11279 12.1357 8.10498 12.1777 8.06494 12.1777 cv
8.05664 12.209 8.05078 12.2637 8.00977 12.2637 cv
8.00977 12.2646 8.00977 12.2656 8.00977 12.2666 cv
8.03369 12.293 8.02588 12.3252 8.04004 12.3564 cv
8.05078 12.3789 8.06689 12.3975 8.07373 12.4229 cv
8.09375 12.5 7.98682 12.5098 7.98682 12.5762 cv
8.00684 12.5859 8.00391 12.6025 8.00391 12.623 cv
8.02393 12.6318 8.03564 12.6934 8.00391 12.6934 cv
8.00391 12.6943 8.00391 12.6953 8.00391 12.6963 cv
8.00488 12.6963 8.00586 12.6963 8.00684 12.6963 cv
8.06494 12.8027 7.95068 12.7764 7.92871 12.8418 cv
7.91992 12.8701 7.95166 12.8955 7.95166 12.9248 cv
7.9917 12.9316 7.98096 12.9609 7.97168 12.9902 cv
7.96777 12.999 7.96484 13.0088 7.96094 13.0195 cv
7.95166 13.0303 7.91406 13.0391 7.91406 13.0596 cv
7.97998 13.0762 7.90967 13.124 7.896 13.1455 cv
7.8916 13.1582 7.88672 13.1709 7.88184 13.1855 cv
7.86768 13.2061 7.84766 13.2197 7.83594 13.2422 cv
7.83496 13.2422 7.83398 13.2422 7.83301 13.2422 cv
7.83301 13.2432 7.83301 13.2441 7.83301 13.2451 cv
7.95898 13.2451 7.86182 13.3281 7.83203 13.3711 cv
7.81982 13.3887 7.81885 13.4102 7.80664 13.4258 cv
7.79883 13.4395 7.77979 13.4492 7.77979 13.4658 cv
7.80371 13.4688 7.81201 13.4814 7.81201 13.5059 cv
7.85205 13.5146 7.83887 13.5703 7.81787 13.5703 cv
7.8208 13.5791 7.82861 13.6221 7.81201 13.6221 cv
7.81201 13.623 7.81201 13.624 7.81201 13.625 cv
7.81299 13.625 7.81396 13.625 7.81494 13.625 cv
7.81494 13.626 7.81494 13.627 7.81494 13.6279 cv
7.88379 13.6396 7.81299 13.7266 7.78809 13.749 cv
7.76807 13.7637 7.74805 13.7773 7.72803 13.791 cv
7.72461 13.7949 7.72168 13.7988 7.71875 13.8027 cv
7.78564 13.8262 7.6958 13.874 7.6958 13.8965 cv
7.69482 13.8965 7.69385 13.8965 7.69287 13.8965 cv
7.69287 13.8975 7.69287 13.8984 7.69287 13.8994 cv
7.75781 13.9072 7.72461 13.9844 7.72461 14.0264 cv
7.72607 14.0264 7.72705 14.0264 7.72803 14.0264 cv
7.73682 14.0244 7.74463 14.0234 7.75391 14.0215 cv
7.73779 14.0791 7.72363 14.1299 7.69678 14.1836 cv
7.69385 14.1934 7.69092 14.2031 7.68701 14.2129 cv
7.67871 14.2197 7.66992 14.2275 7.66064 14.2354 cv
7.65967 14.2373 7.65869 14.2393 7.65771 14.2412 cv
7.7168 14.2529 7.65381 14.3203 7.63965 14.3438 cv
7.63086 14.3584 7.63477 14.374 7.62305 14.3877 cv
7.60791 14.3984 7.59277 14.4092 7.57764 14.4199 cv
7.57275 14.4258 7.56787 14.4336 7.56201 14.4395 cv
7.56201 14.4404 7.56201 14.4414 7.56201 14.4424 cv
7.62305 14.4482 7.5957 14.5205 7.5708 14.5205 cv
7.5708 14.5215 7.5708 14.5225 7.5708 14.5234 cv
7.58496 14.5752 7.53271 14.5791 7.53271 14.6084 cv
7.52783 14.6074 7.52393 14.6064 7.51904 14.6055 cv
7.51904 14.6064 7.51904 14.6074 7.51904 14.6084 cv
7.51807 14.6084 7.5166 14.6084 7.51563 14.6084 cv
7.51074 14.6406 7.47803 14.6572 7.47803 14.6953 cv
7.53467 14.7002 7.50098 14.7373 7.49902 14.7676 cv
7.49805 14.7891 7.50098 14.8174 7.49365 14.8359 cv
7.48682 14.8506 7.479 14.8643 7.47168 14.8779 cv
7.52979 14.9063 7.45801 14.9434 7.45801 14.9619 cv
7.45996 14.9736 7.48096 15.0234 7.48096 15.0264 cv
7.47705 15.043 7.47168 15.0605 7.46777 15.0771 cv
7.45508 15.1143 7.43799 15.1475 7.42285 15.1826 cv
7.41602 15.2031 7.40869 15.2246 7.40186 15.2451 cv
7.39697 15.249 7.39307 15.2539 7.3877 15.2578 cv
7.38867 15.2588 7.38965 15.2598 7.39063 15.2607 cv
7.40283 15.291 7.36182 15.374 7.35205 15.4072 cv
7.35303 15.4219 7.35498 15.4385 7.35596 15.4531 cv
7.42676 15.46 7.35986 15.5273 7.35107 15.5566 cv
7.3457 15.5742 7.36475 15.6113 7.35986 15.6387 cv
7.34961 15.6826 7.30371 15.708 7.30371 15.7578 cv
7.39893 15.7676 7.30078 15.8545 7.30078 15.8828 cv
7.2998 15.8838 7.29883 15.8848 7.29785 15.8857 cv
7.37207 15.9004 7.28564 15.9775 7.28564 15.9961 cv
7.34668 16 7.3208 16.0557 7.30664 16.0908 cv
7.30371 16.1006 7.30078 16.1104 7.29785 16.1201 cv
7.29004 16.1328 7.25977 16.1523 7.25977 16.168 cv
7.28271 16.1758 7.28906 16.1992 7.28906 16.2236 cv
7.36377 16.2305 7.30566 16.2891 7.29883 16.3203 cv
7.29492 16.3379 7.30664 16.3564 7.30469 16.377 cv
7.30273 16.3994 7.29297 16.4238 7.28662 16.4463 cv
7.28369 16.4521 7.28076 16.458 7.27783 16.4639 cv
7.27686 16.4639 7.27588 16.4639 7.2749 16.4639 cv
7.2749 16.4648 7.2749 16.4658 7.2749 16.4668 cv
7.37207 16.4668 7.36475 16.4766 7.36475 16.5723 cv
7.40381 16.582 7.39404 16.6572 7.38574 16.6904 cv
7.38477 16.6943 7.37988 16.7002 7.38477 16.7002 cv
7.40283 16.7256 7.39404 16.7451 7.39795 16.7783 cv
7.40576 16.8467 7.41406 16.9131 7.4209 16.9814 cv
7.4248 17.0068 7.42871 17.0332 7.43262 17.0605 cv
7.43604 17.0674 7.43799 17.0752 7.43994 17.083 cv
7.44092 17.083 7.44189 17.083 7.44287 17.083 cv
7.44385 17.0781 7.44287 17.0635 7.44873 17.0635 cv
7.44873 17.0625 7.44873 17.0615 7.44873 17.0605 cv
7.44971 17.0605 7.45068 17.0605 7.45166 17.0605 cv
7.45264 17.0674 7.45361 17.0732 7.45508 17.0801 cv
7.45605 17.083 7.45703 17.0859 7.45801 17.0889 cv
7.47363 17.1396 7.49902 17.1875 7.5127 17.2373 cv
7.5127 17.2734 7.5127 17.3096 7.5127 17.3447 cv
7.51465 17.3691 7.5249 17.3877 7.52588 17.4092 cv
7.52686 17.415 7.52588 17.4521 7.52979 17.4521 cv
7.52979 17.4531 7.52979 17.4541 7.52979 17.4551 cv
7.53174 17.4551 7.53369 17.4551 7.53564 17.4551 cv
7.54004 17.4482 7.54395 17.4424 7.54785 17.4355 cv
7.54883 17.4365 7.5498 17.4375 7.55078 17.4385 cv
7.58496 17.4775 7.61475 17.5098 7.67285 17.5127 cv
7.68896 17.5107 7.70605 17.5088 7.72168 17.5068 cv
7.72998 17.5361 7.74365 17.5615 7.7666 17.582 cv
7.78174 17.5938 7.81982 17.6045 7.82373 17.624 cv
7.83496 17.6807 7.81982 17.749 7.81396 17.8037 cv
7.81006 17.8467 7.80566 17.8877 7.80273 17.9287 cv
7.79785 17.9521 7.79297 17.9766 7.78809 17.999 cv
7.78809 18.0107 7.78906 18.0244 7.79004 18.0361 cv
7.78174 18.0654 7.77295 18.0947 7.76465 18.124 cv
7.75977 18.1504 7.75488 18.1748 7.75 18.2012 cv
7.7417 18.2246 7.71777 18.2324 7.70996 18.2549 cv
7.70068 18.3145 7.69092 18.374 7.68066 18.4336 cv
7.6709 18.4482 7.66064 18.4629 7.6499 18.4785 cv
7.64307 18.4834 7.63574 18.4873 7.62891 18.4922 cv
7.625 18.5029 7.62109 18.5146 7.6167 18.5254 cv
7.60986 18.5361 7.60303 18.5469 7.5957 18.5576 cv
7.57178 18.6191 7.56006 18.6846 7.53662 18.7461 cv
7.52002 18.7822 7.50195 18.8174 7.48486 18.8535 cv
7.47363 18.8828 7.46289 18.9121 7.45166 18.9414 cv
7.43994 18.9814 7.42871 19.0215 7.41797 19.0615 cv
7.40576 19.0859 7.39404 19.1123 7.38281 19.1387 cv
7.37891 19.1504 7.37598 19.1621 7.37207 19.1748 cv
7.34473 19.2256 7.31787 19.2744 7.29102 19.3242 cv
7.27295 19.3633 7.2627 19.4043 7.24609 19.4434 cv
7.2417 19.46 7.23779 19.4775 7.23389 19.4941 cv
7.22266 19.5176 7.21289 19.54 7.20166 19.5635 cv
7.19971 19.5762 7.19678 19.5898 7.19482 19.6035 cv
7.18701 19.6133 7.17871 19.623 7.17188 19.6318 cv
7.16309 19.6523 7.15381 19.6719 7.146 19.6924 cv
7.13379 19.708 7.12305 19.7246 7.11084 19.7402 cv
7.09961 19.7715 7.08887 19.8008 7.07764 19.8311 cv
7.06592 19.8545 7.05371 19.876 7.04199 19.8984 cv
7.03174 19.9209 7.02295 19.9443 7.0127 19.9668 cv
7.00781 19.9844 7.00879 20.0078 6.99805 20.0234 cv
6.9917 20.0273 6.98682 20.0313 6.98096 20.0352 cv
6.97998 20.0625 6.97705 20.1035 6.96484 20.124 cv
6.95801 20.1377 6.9458 20.1455 6.94092 20.1592 cv
6.92383 20.2041 6.92188 20.2539 6.90283 20.2969 cv
6.88965 20.3184 6.87793 20.3398 6.86475 20.3613 cv
6.85693 20.3789 6.84863 20.3984 6.8418 20.416 cv
6.82373 20.4492 6.79883 20.4785 6.78369 20.5127 cv
6.76172 20.5615 6.73877 20.6094 6.72168 20.6611 cv
6.70801 20.7129 6.69385 20.7656 6.67969 20.8164 cv
6.66797 20.8535 6.66064 20.8936 6.64697 20.9307 cv
6.63672 20.957 6.61963 20.9727 6.61182 21.0029 cv
6.58887 21.0938 6.58691 21.1807 6.57861 21.2793 cv
6.56982 21.3955 6.56006 21.5225 6.57568 21.6396 cv
6.58691 21.7227 6.61377 21.8008 6.63086 21.8809 cv
6.6377 21.917 6.64502 21.9531 6.65186 21.9883 cv
6.66309 22.0127 6.67773 22.0469 6.69678 22.0654 cv
6.70898 22.0762 6.72168 22.0859 6.73389 22.0967 cv
6.74902 22.1152 6.7627 22.1426 6.77588 22.1641 cv
6.80176 22.2168 6.82764 22.2715 6.85498 22.3242 cv
6.88965 22.3838 6.92578 22.4443 6.96191 22.5029 cv
7.00977 22.5918 7.05176 22.6816 7.08984 22.7754 cv
7.11377 22.832 7.18799 22.8994 7.18799 22.9619 cv
7.25781 22.9736 7.20166 23.0293 7.20166 23.0605 cv
7.21973 23.0615 7.23389 23.0625 7.24463 23.0762 cv
7.25391 23.0869 7.26367 23.1172 7.26367 23.1328 cv
7.26465 23.1455 7.25781 23.1582 7.2627 23.1689 cv
7.27002 23.1855 7.29199 23.1895 7.30176 23.2041 cv
7.31396 23.2236 7.30566 23.2539 7.31982 23.2725 cv
7.33398 23.2783 7.34668 23.2832 7.36084 23.2891 cv
7.38574 23.3037 7.39697 23.3682 7.39697 23.3975 cv
7.44678 23.3994 7.43506 23.4141 7.45996 23.4424 cv
7.46777 23.4512 7.47998 23.4541 7.48584 23.4658 cv
7.49072 23.4785 7.49707 23.4902 7.50195 23.502 cv
7.51172 23.5059 7.521 23.5107 7.53076 23.5166 cv
7.55273 23.5342 7.56787 23.5654 7.57861 23.5889 cv
7.58984 23.6191 7.59961 23.6484 7.61084 23.6777 cv
7.625 23.6963 7.65771 23.6982 7.6709 23.7217 cv
7.67383 23.7256 7.67383 23.7432 7.67871 23.7432 cv
7.68701 23.751 7.6958 23.7578 7.70361 23.7656 cv
7.71387 23.7715 7.72266 23.7715 7.73096 23.7803 cv
7.74365 23.7949 7.74805 23.8145 7.76074 23.8291 cv
7.77197 23.8408 7.78467 23.8389 7.79688 23.8496 cv
7.83594 23.8809 7.82666 23.9268 7.82666 23.9766 cv
7.85205 23.9785 7.86963 23.9932 7.86084 24.0225 cv
7.85986 24.0254 7.85693 24.0283 7.86182 24.0283 cv
7.8667 24.0322 7.87305 24.0361 7.87891 24.04 cv
7.89502 23.9668 7.97705 24.0498 7.9668 24.1035 cv
7.96582 24.1084 7.96289 24.1182 7.95801 24.1182 cv
7.95898 24.1191 7.95898 24.1201 7.95996 24.1211 cv
7.96582 24.1328 7.96875 24.1445 7.96875 24.1592 cv
8.0127 24.1602 8.00977 24.1787 8.00977 24.2168 cv
8.07471 24.2217 8.0459 24.2461 8.07861 24.2764 cv
8.08887 24.2852 8.10596 24.2842 8.11279 24.2979 cv
8.11865 24.3115 8.11475 24.3301 8.11475 24.3447 cv
8.15283 24.3447 8.20703 24.3525 8.1958 24.4023 cv
8.19482 24.4072 8.19092 24.4199 8.18359 24.4199 cv
8.18359 24.4209 8.18359 24.4219 8.18359 24.4229 cv
8.18506 24.4229 8.18604 24.4229 8.18701 24.4229 cv
8.20996 24.4395 8.21094 24.459 8.22705 24.4805 cv
8.23682 24.4912 8.24805 24.5029 8.25781 24.5146 cv
8.26172 24.5264 8.26563 24.5381 8.27002 24.5488 cv
8.28271 24.5654 8.30273 24.5713 8.31299 24.5869 cv
8.31689 24.6016 8.3208 24.6152 8.32471 24.6289 cv
8.33398 24.6416 8.34863 24.6396 8.36084 24.6475 cv
8.375 24.6621 8.3877 24.6758 8.40186 24.6914 cv
8.40479 24.6973 8.40771 24.7041 8.41064 24.7109 cv
8.41162 24.7109 8.41309 24.7109 8.41406 24.7109 cv
8.4668 24.6963 8.47168 24.7656 8.48193 24.7979 cv
8.48779 24.8154 8.49463 24.833 8.50098 24.8506 cv
8.54199 24.8623 8.53662 24.9014 8.55273 24.9355 cv
8.56006 24.9512 8.5708 24.9658 8.56982 24.9873 cv
8.56787 24.9961 8.56689 25.0059 8.56494 25.0156 cv
9.83984 25.0166 li
f
19.2759 2.35645 mo
19.2759 3.57031 20.2017 4.6543 21.666 4.6543 cv
23.1816 4.6543 24.0889 3.56445 24.0889 2.35645 cv
24.0889 1.1084 23.1558 0.0585938 21.6787 0.0585938 cv
20.228 0.0585938 19.2759 1.11523 19.2759 2.35645 cv
cp
19.939 2.35645 mo
19.939 1.37109 20.6807 0.649414 21.6787 0.649414 cv
22.6826 0.649414 23.4248 1.37109 23.4248 2.35645 cv
23.4248 3.33398 22.6826 4.06348 21.6787 4.06348 cv
20.6807 4.06348 19.939 3.33398 19.939 2.35645 cv
ef
24.562 1.89648 mo
25.1719 1.79785 25.356 1.4834 25.356 0.898438 cv
25.356 0.117188 li
24.562 0.117188 li
24.562 0.969727 li
24.9819 0.969727 li
25.001 1.37109 24.8438 1.55566 24.562 1.59375 cv
24.562 1.89648 li
false sop
0 0 0 0.7 cmyk
f
26.0298 0.117188 mo
26.0298 4.59473 li
26.6738 4.59473 li
26.6738 2.65137 li
26.9429 2.65137 li
27.271 2.65137 27.54 2.75586 28.1309 3.6748 cv
28.7217 4.59473 li
29.4897 4.59473 li
29.1816 4.16797 29.0698 4.01758 28.8799 3.70801 cv
28.5381 3.15039 28.2891 2.7373 27.8818 2.4668 cv
28.3608 2.27734 28.6299 1.89063 28.6299 1.37109 cv
28.6299 0.59668 28.0659 0.117188 27.1587 0.117188 cv
26.0298 0.117188 li
cp
26.6738 0.667969 mo
27.0869 0.667969 li
27.7109 0.667969 27.96 0.923828 27.9668 1.34473 cv
27.9736 1.71875 27.7769 2.07324 27.0869 2.07324 cv
26.6738 2.07324 li
26.6738 0.667969 li
true sop
0 0 0 1 nzopmsc
ef
32.335 0.117188 mo
29.7939 0.117188 li
29.7939 4.59473 li
32.394 4.59473 li
32.394 4.01758 li
30.437 4.01758 li
30.437 2.625 li
32.269 2.625 li
32.269 2.04688 li
30.437 2.04688 li
30.437 0.695313 li
32.335 0.695313 li
32.335 0.117188 li
f
33.0068 4.59473 mo
33.6509 4.59473 li
33.6509 0.117188 li
33.0068 0.117188 li
33.0068 4.59473 li
cp
f
34.9517 0.117188 mo
34.3086 0.117188 li
34.3086 4.59473 li
36.9736 4.59473 li
36.9736 4.01758 li
34.9517 4.01758 li
34.9517 0.117188 li
f
38.041 0.117188 mo
37.397 0.117188 li
37.397 4.59473 li
40.063 4.59473 li
40.063 4.01758 li
38.041 4.01758 li
38.041 0.117188 li
f
41.312 1.62988 mo
40.1099 0.0869141 li
39.3359 0.0869141 li
40.9971 2.19434 li
40.9971 4.56445 li
41.6396 4.56445 li
41.6396 2.20117 li
43.3018 0.0869141 li
42.5269 0.0869141 li
41.312 1.62988 li
f
0.181 lw
0 lc
0 lj
3.864 ml
[] 0 dsh
true sadj
19.9009 5.92285 mo
73.8237 5.92285 li
@
48.9497 0.0810547 mo
48.4077 0.0810547 li
48.4077 3.56641 li
45.6826 0.0810547 li
45.2227 0.0810547 li
45.2227 4.58203 li
45.7646 4.58203 li
45.7646 1.11719 li
48.4551 4.58203 li
48.9497 4.58203 li
48.9497 0.0810547 li
0 0 0 0.7 nzopmsc
f
51.8447 0.0810547 mo
49.562 0.0810547 li
49.562 4.58203 li
51.8979 4.58203 li
51.8979 4.00098 li
50.1396 4.00098 li
50.1396 2.60254 li
51.7856 2.60254 li
51.7856 2.02148 li
50.1396 2.02148 li
50.1396 0.661133 li
51.8447 0.661133 li
51.8447 0.0810547 li
f
55.749 0.0810547 mo
52.3877 0.0810547 li
52.3877 0.661133 li
53.7788 0.661133 li
53.7788 4.58203 li
54.3569 4.58203 li
54.3569 0.661133 li
55.749 0.661133 li
55.749 0.0810547 li
f
62.187 0.0810547 mo
61.6147 0.0810547 li
60.5181 3.18359 li
59.3979 0.0810547 li
58.8486 0.0810547 li
57.7349 3.18359 li
56.626 0.0810547 li
56.0479 0.0810547 li
57.6758 4.62207 li
57.7881 4.62207 li
59.1211 0.939453 li
60.4419 4.62207 li
60.5537 4.62207 li
62.187 0.0810547 li
f
62.0786 2.33105 mo
62.0786 3.55273 62.9106 4.64258 64.2261 4.64258 cv
65.5879 4.64258 66.4019 3.5459 66.4019 2.33105 cv
66.4019 1.07715 65.564 0.0214844 64.2368 0.0214844 cv
62.9336 0.0214844 62.0786 1.08398 62.0786 2.33105 cv
cp
62.6748 2.33105 mo
62.6748 1.34082 63.3408 0.615234 64.2368 0.615234 cv
65.1396 0.615234 65.8057 1.34082 65.8057 2.33105 cv
65.8057 3.31543 65.1396 4.04785 64.2368 4.04785 cv
63.3408 4.04785 62.6748 3.31543 62.6748 2.33105 cv
ef
66.9409 0.0810547 mo
66.9409 4.58203 li
67.519 4.58203 li
67.519 2.62891 li
67.7598 2.62891 li
68.0547 2.62891 68.2969 2.73438 68.8276 3.6582 cv
69.3589 4.58203 li
70.0488 4.58203 li
69.771 4.15332 69.6709 4.00098 69.5 3.69141 cv
69.1929 3.12988 68.9688 2.71387 68.604 2.44434 cv
69.0337 2.25195 69.2759 1.86328 69.2759 1.34082 cv
69.2759 0.5625 68.769 0.0810547 67.9551 0.0810547 cv
66.9409 0.0810547 li
cp
67.519 0.634766 mo
67.8896 0.634766 li
68.4497 0.634766 68.6738 0.893555 68.6797 1.31543 cv
68.686 1.69141 68.5088 2.04785 67.8896 2.04785 cv
67.519 2.04785 li
67.519 0.634766 li
ef
71.6377 2.21289 mo
73.3887 0.0810547 li
72.6699 0.0810547 li
70.9771 2.14063 li
70.9771 0.0810547 li
70.3989 0.0810547 li
70.3989 4.58203 li
70.9771 4.58203 li
70.9771 2.3584 li
73.0239 4.58203 li
73.8198 4.58203 li
71.6377 2.21289 li
f
22.52 20.873 mo
22.8101 20.873 li
23.188 20.873 23.4336 21.1338 23.4336 21.5107 cv
23.4336 22.6152 li
23.4336 22.9922 23.188 23.2539 22.8101 23.2539 cv
22.52 23.2539 li
22.52 20.873 li
cp
22.52 24.8213 mo
22.7808 24.8213 li
23.188 24.8213 23.4336 25.0254 23.4336 25.4756 cv
23.4336 27.1885 li
23.4336 27.6387 23.188 27.8408 22.7808 27.8408 cv
22.52 27.8408 li
22.52 24.8213 li
cp
19.9351 29.583 mo
23.5508 29.583 li
25.2349 29.583 26.106 28.959 26.106 27.3037 cv
26.106 25.8525 li
26.106 24.6045 25.3359 23.9072 24.1597 23.8633 cv
24.189 23.834 li
25.2778 23.791 25.9316 23.4717 25.9316 22.2813 cv
25.9316 21.1338 li
25.9316 19.6533 25.1187 19.2178 23.71 19.2178 cv
19.9351 19.2178 li
19.9351 29.583 li
ef
26.6567 26.9854 mo
26.6567 29.1914 28.2827 29.8008 29.7061 29.8008 cv
31.1279 29.8008 32.7549 29.1914 32.7549 26.9854 cv
32.7549 23.6748 li
32.7549 21.4678 31.1279 20.8584 29.7061 20.8584 cv
28.2827 20.8584 26.6567 21.4678 26.6567 23.6748 cv
26.6567 26.9854 li
cp
29.2407 22.9922 mo
29.2407 22.7021 29.3857 22.4258 29.7061 22.4258 cv
30.0249 22.4258 30.1699 22.7021 30.1699 22.9922 cv
30.1699 27.4932 li
30.1699 27.7832 30.0249 28.0596 29.7061 28.0596 cv
29.3857 28.0596 29.2407 27.7832 29.2407 27.4932 cv
29.2407 22.9922 li
ef
33.3916 26.9854 mo
33.3916 29.1914 35.0181 29.8008 36.4409 29.8008 cv
37.8638 29.8008 39.4897 29.1914 39.4897 26.9854 cv
39.4897 23.6748 li
39.4897 21.4678 37.8638 20.8584 36.4409 20.8584 cv
35.0181 20.8584 33.3916 21.4678 33.3916 23.6748 cv
33.3916 26.9854 li
cp
35.9761 22.9922 mo
35.9761 22.7021 36.1221 22.4258 36.4409 22.4258 cv
36.7598 22.4258 36.9058 22.7021 36.9058 22.9922 cv
36.9058 27.4932 li
36.9058 27.7832 36.7598 28.0596 36.4409 28.0596 cv
36.1221 28.0596 35.9761 27.7832 35.9761 27.4932 cv
35.9761 22.9922 li
ef
40.2178 29.583 mo
42.8027 29.583 li
42.8027 25.9971 li
42.832 25.9971 li
43.645 29.583 li
46.1416 29.583 li
44.8789 24.4736 li
45.9097 21.0762 li
43.645 21.0762 li
42.832 24.0674 li
42.8027 24.0674 li
42.8027 19.2178 li
40.2178 19.2178 li
40.2178 29.583 li
f
46.2837 27.4492 mo
46.2837 29.2646 47.3438 29.8008 49 29.8008 cv
50.8438 29.8008 52.063 29.2197 52.063 27.333 cv
52.063 26.1719 51.918 25.4893 50.7417 24.8076 cv
49.624 24.168 48.7529 23.8779 48.7529 23.3555 cv
48.7529 23.0215 li
48.7529 22.6289 48.9268 22.5127 49.1738 22.5127 cv
49.4209 22.5127 49.5659 22.6582 49.5659 23.0215 cv
49.5659 23.8203 li
51.9609 23.8203 li
51.9609 23.0215 li
51.9609 21.2793 50.3208 20.8584 49.2319 20.8584 cv
46.6177 20.8584 46.3569 22.3818 46.3569 23.5156 cv
46.3569 26.1719 49.5659 25.9102 49.5659 27.2168 cv
49.5659 27.6533 li
49.5659 28.001 49.333 28.1465 49.1011 28.1465 cv
48.8247 28.1465 48.6797 27.9277 48.6797 27.6826 cv
48.6797 26.5205 li
46.2837 26.5205 li
46.2837 27.4492 li
f
52.7461 29.583 mo
55.3311 29.583 li
55.3311 23.2256 li
55.3311 22.9629 55.3447 22.6006 55.6938 22.6006 cv
56.0278 22.6006 56.0996 22.9492 56.0996 23.21 cv
56.0996 29.583 li
58.6851 29.583 li
58.6851 23.123 li
58.6851 21.5693 58.0166 20.8584 56.9277 20.8584 cv
56.376 20.8584 55.5918 21.1768 55.3599 21.7295 cv
55.3311 21.7295 li
55.3311 19.2178 li
52.7461 19.2178 li
52.7461 29.583 li
f
59.3037 26.9854 mo
59.3037 29.1914 60.9297 29.8008 62.353 29.8008 cv
63.7178 29.8008 65.228 29.1914 65.228 26.9854 cv
65.228 26.1143 li
62.731 26.1143 li
62.731 27.6387 li
62.731 27.957 62.644 28.2334 62.2808 28.2334 cv
61.9609 28.2334 61.8887 28.0156 61.8887 27.6826 cv
61.8887 25.46 li
65.228 25.46 li
65.228 23.6748 li
65.228 21.54 63.6021 20.8584 62.353 20.8584 cv
60.9297 20.8584 59.3037 21.4678 59.3037 23.6748 cv
59.3037 26.9854 li
cp
61.8887 22.9785 mo
61.8887 22.6445 61.9609 22.4258 62.2808 22.4258 cv
62.644 22.4258 62.731 22.7021 62.731 23.0215 cv
62.731 24.0674 li
61.8887 24.0674 li
61.8887 22.9785 li
ef
65.9307 29.583 mo
68.5146 29.583 li
68.5146 19.2168 li
65.9307 19.2168 li
65.9307 29.583 li
cp
f
69.0859 22.4697 mo
69.624 22.4697 li
69.624 29.583 li
72.208 29.583 li
72.208 22.4697 li
72.978 22.4697 li
72.978 21.0762 li
71.7139 21.0762 li
71.772 20.6113 72.106 20.5244 72.5269 20.5244 cv
72.9189 20.5244 li
72.9189 19.2178 li
71.772 19.2178 li
70.1748 19.2178 69.6816 19.5664 69.624 21.0762 cv
69.0859 21.0762 li
69.0859 22.4697 li
f
19.7427 15.124 mo
19.7427 16.6055 20.106 17.8242 22.647 17.8242 cv
24.5049 17.8242 25.7681 17.2725 25.7681 15.167 cv
25.7681 14.3545 li
25.7681 11.3066 22.2261 11.3203 22.2261 9.81055 cv
22.2261 9.36035 li
22.2261 8.83691 22.4141 8.67773 22.6758 8.67773 cv
22.9077 8.67773 23.1978 8.76563 23.1978 9.41797 cv
23.1978 10.2754 li
25.5938 10.2754 li
25.5938 9.30176 li
25.5938 8.18457 25.144 7.02344 22.647 7.02344 cv
20.875 7.02344 19.728 7.70508 19.728 9.5918 cv
19.728 10.1729 li
19.728 13.1348 23.1836 12.8887 23.1836 14.79 cv
23.1836 15.2256 li
23.1836 15.6318 23.1689 16.1689 22.6899 16.1689 cv
22.313 16.1689 22.2397 15.835 22.2397 15.501 cv
22.2397 13.832 li
19.7427 13.832 li
19.7427 15.124 li
f
32.2778 11.3936 mo
32.2778 9.41797 31.146 8.88086 29.3169 8.88086 cv
27.3711 8.88086 26.4707 9.60742 26.4707 11.4805 cv
26.4707 12.3799 li
28.8657 12.3799 li
28.8657 10.6963 li
28.8657 10.4346 28.9678 10.1885 29.2578 10.1885 cv
29.5488 10.1885 29.6938 10.4492 29.6938 10.6963 cv
29.6938 11.7705 li
29.6938 12.2646 29.563 12.4092 28.1118 12.9609 cv
26.5288 13.541 26.4707 13.8906 26.4707 14.8623 cv
26.4707 16.0088 li
26.4707 17.084 27.0518 17.8242 28.1548 17.8242 cv
28.8076 17.8242 29.4038 17.5195 29.7808 17.127 cv
29.7808 17.6064 li
32.2778 17.6064 li
32.2778 11.3936 li
cp
28.8657 14.8486 mo
28.8657 14.2529 29.1567 13.8906 29.6938 13.5566 cv
29.6938 15.7773 li
29.6938 15.9658 29.563 16.2129 29.2437 16.2129 cv
29.0117 16.2129 28.8657 15.9805 28.8657 15.7344 cv
28.8657 14.8486 li
ef
32.7598 10.4922 mo
33.2969 10.4922 li
33.2969 17.6064 li
35.8809 17.6064 li
35.8809 10.4922 li
36.6509 10.4922 li
36.6509 9.09961 li
35.3867 9.09961 li
35.4458 8.63379 35.7788 8.54688 36.2007 8.54688 cv
36.5928 8.54688 li
36.5928 7.24023 li
35.4458 7.24023 li
33.8477 7.24023 33.355 7.58887 33.2969 9.09961 cv
32.7598 9.09961 li
32.7598 10.4922 li
f
42.8477 11.3936 mo
42.8477 9.41797 41.7158 8.88086 39.8857 8.88086 cv
37.9409 8.88086 37.041 9.60742 37.041 11.4805 cv
37.041 12.3799 li
39.436 12.3799 li
39.436 10.6963 li
39.436 10.4346 39.5381 10.1885 39.8276 10.1885 cv
40.1187 10.1885 40.2637 10.4492 40.2637 10.6963 cv
40.2637 11.7705 li
40.2637 12.2646 40.1328 12.4092 38.6807 12.9609 cv
37.0986 13.541 37.041 13.8906 37.041 14.8623 cv
37.041 16.0088 li
37.041 17.084 37.6206 17.8242 38.7246 17.8242 cv
39.3779 17.8242 39.9727 17.5195 40.3511 17.127 cv
40.3511 17.6064 li
42.8477 17.6064 li
42.8477 11.3936 li
cp
39.436 14.8486 mo
39.436 14.2529 39.7271 13.8906 40.2637 13.5566 cv
40.2637 15.7773 li
40.2637 15.9658 40.1328 16.2129 39.814 16.2129 cv
39.5811 16.2129 39.436 15.9805 39.436 15.7344 cv
39.436 14.8486 li
ef
43.6489 17.6064 mo
46.2329 17.6064 li
46.2329 13.0625 li
46.2329 12.3945 46.6396 11.9443 47.3369 11.9443 cv
47.4819 11.9443 47.627 11.959 47.772 11.9736 cv
47.772 8.88086 li
47.1909 8.93945 46.4219 9.375 46.1748 10.1885 cv
46.146 10.1885 li
46.146 9.09961 li
43.6489 9.09961 li
43.6489 17.6064 li
f
48.5117 17.6064 mo
51.0957 17.6064 li
51.0957 9.09863 li
48.5117 9.09863 li
48.5117 17.6064 li
cp
48.5117 8.54688 mo
51.0957 8.54688 li
51.0957 7.24023 li
48.5117 7.24023 li
48.5117 8.54688 li
cp
ef
52.3589 8.58398 mo
52.5347 8.58398 li
52.5347 8.22949 li
52.5811 8.22949 li
52.6826 8.22949 52.7358 8.27539 52.8228 8.44531 cv
52.895 8.58398 li
53.1118 8.58398 li
52.9927 8.37988 li
52.9336 8.2793 52.8989 8.23242 52.8267 8.20801 cv
52.8267 8.20313 li
52.9707 8.18652 53.0601 8.0918 53.0601 7.96387 cv
53.0601 7.83105 52.9746 7.71973 52.7681 7.71973 cv
52.3589 7.71973 li
52.3589 8.58398 li
cp
52.5347 8.0918 mo
52.5347 7.85742 li
52.6938 7.85742 li
52.8159 7.85742 52.875 7.89648 52.875 7.97363 cv
52.875 8.04199 52.8179 8.0918 52.7271 8.0918 cv
52.5347 8.0918 li
cp
51.9131 8.14941 mo
51.9131 8.59961 52.2759 8.96289 52.7271 8.96289 cv
53.1777 8.96289 53.541 8.59961 53.541 8.14941 cv
53.541 7.69824 53.1777 7.33496 52.7271 7.33496 cv
52.2759 7.33496 51.9131 7.69824 51.9131 8.14941 cv
cp
52.0718 8.14941 mo
52.0718 7.78809 52.3657 7.49414 52.7271 7.49414 cv
53.0879 7.49414 53.3818 7.78809 53.3818 8.14941 cv
53.3818 8.50977 53.0879 8.80371 52.7271 8.80371 cv
52.3657 8.80371 52.0718 8.50977 52.0718 8.14941 cv
0 0 0 1 nzopmsc
ef
73.1377 29.5908 mo
73.3628 29.5908 li
73.3628 28.7715 li
73.5889 28.7715 li
73.5889 28.6006 li
72.9106 28.6006 li
72.9106 28.7715 li
73.1377 28.7715 li
73.1377 29.5908 li
f
73.7129 29.5908 mo
73.9248 29.5908 li
73.9248 28.957 li
73.9277 28.957 li
74.1221 29.332 li
74.166 29.332 li
74.3599 28.957 li
74.3628 28.957 li
74.3628 29.5908 li
74.5747 29.5908 li
74.5747 28.6006 li
74.3721 28.6006 li
74.144 29.0068 li
73.916 28.6006 li
73.7129 28.6006 li
73.7129 29.5908 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Hari Lal. Yadav) ()%%Title: (icon02.eps)%%CreationDate: 9/17/10 7:36 AM%AI9_DataStream%Gb!R&kuo%Lc7&VHJFC;c*+lhGJV4m[#W%,_O:VL(&-`g&XM*6_j';I1Q)*]]h<d,o3d\VKnc6,07[9d4<)Qes[*j>K\UA_5>A=(`%Y,FEWdIaN7@Hg3R[gT%\`ku5[*A:@"FNo>fA^0g0.W(H!>;J[4[H>`gF5s+'heM")g?mGQ;mY#G/$;"bD]T:_j\>WPp@-S12-\E"%:=1_1!7Qq.Q+)OHgYK@%lUGZmBP@s,bpuro\6ZjbbSB5P"E2$04MBQ/p-kI1gWaC$\.&u(/,B">dHQJGMGA:KT%0D'XmfEqPl=H`%*&d4+g7;9Xo?_m\5)F-+D*5QseN44#>>oUcG1#r!p`4aZP%#Jg'2ORsB_tiXFY.tV@%m,B6fVNp`LZkM_b6o\^;i8$5MRA:Q<ToT%L]7t8F*+2@q?B7shjtagj-PO]R"PV<=Das]gNXp(XBU%O_aHBX?WY!b/F^((\ncE+&iQB=@#f:s:Xefq5kT=!mm[\i"<HjB2I=*U%:ZQ2%`Su3(BbkPU/*jcX(6,W]phis<$r8_>'FdQUjqKD"HI]nr6Y"IWpYh!pfGA>0f6XrRGaT4&E5C+0&%BB$\OOua?ZIW-0D+;r%%us[a][LT-d-(W6XmQ>ZBNf]E#Wqg-050XIrZJGBMkSm#d1\lM&I\WE<q"N=Wju;QU[dg4b2454,>J(l:&+*8nD!]rpZa4q9b[Mp%-9O.[G\W]BZrVh5=Nb]WPiKP<a+7-K"/R!8<oZ)d+3O@BPju^WW9sIYb4hSDI"L6PC3:7`Xfb"8eQ$k"\dE"`20`<*3=aQAe_k_T%L37IR3*mR8p4uM<-9jH664&*..@:eHL/K]QSgcjU)8U5>"#GPd0Q4r6eqH-#DtjMmK&=ofiX&hD)8U6Y2uEh-bR+,6Ch!E@$K_N,%ThMQm0O>h<3T:m\Lff8d=;,>-UW9Y"fW]Q:3Nj$]^jf/fjp/Yp-!Wa+2*SnmK>14ik/T!2=M_R&5PP]F@!9'Zn/Fk-&GQ^2@".Sa%<tVD7nV[94O%]X0Ei'pb1E7KG*D.L3(b[ji*'K6#a+aJ$bIh.`K)\+SQlT*PbRSCJXRRa`%t6kpUi2VBiWSSaD^Y^o/!QF,R<K3`%fE5#1dkK5X;]CZ8.0XF:q1@34nW'A3XCK#$2]+QY#gWt#%]-[ZC`Vj%F8Ue<8'XM;`\g9A?jejf&*Z%2G-"Uj0t.@W`HV`'+/tao%5+k-=*RG@=HEbPNj^9*:7#X^9*FON?b2_T4Z!FH1l^I_VIo.]\oZo5\8amPr=VcGsro1[ZagMcor5F/gMr00%ps8R$]B=1k*rT;L%`[AT0r3rt`hh/]=Y>AD,6V-\_s&H,p4nss82"_C@3NO8!`c]8hr!i[`q&.b`A_5KAJOdU6gm\"XfAN(/k,p:oDt&80",K8#!,`b!%U:)JbVHL<qD*T,NC:KjhFiBO_\&)_7#QDpC54n6FiHOh,MWLOrW`R+$U+anYoP+3L078N.62S4sY[n>K<^0T7@,KtIa5]'_gAm\Z%IK:p%_YLah'D-(0n;6<[rcs;5W!uj]p(2gs`Qo/I*mP;Y"9%8hAXX-o#-;f[!/3J\/+eQJa:Ztt2rIdsG^e"`A<ro2(bMg"c5Bj)%B/"(f:S@pO$Kd%R\-A!%0`aMo'!;7C%7Uf%'Mk6fRME"FX:IQ5'1%%Q0aUk+jndJGDW6k>UNNWnIg[RKK$i:!Pf"5e=We.)"ilV9%iGY;:N'*IJ;?OAFjao5GWpm+J'@.W^8$iE+.V?\bNN::QN8J3mEc/*j.;MtDIi$mmo2=n*I>a[BDpl/6;g8NE#,OYe8":n\DaWC_%+7[M48Ae]PD.6)tHfS">L%0aSAfQY?<@ACD!^A@DrX4,SXTc&k-R_]V?YUXb%oT?.>N/#AG;glRZ_UATc]4h0N)+IBNEqf>HE6Qc%a]aQc`K/=s6#FW,.'X-KU_Ui$+O((/^cBRUKG[l8eH.dknR31.:rmK(3_NdP?7X]PFkK9q_)&mtJ2P=NbW(\?;M\IXLTq$Ta7K`3%7Gg:V_psWc+mog7,C(R**,ls`i-@'%TT%sp/5LldZ>U\]3LF`823JXh6Yo,/8hfiTF,?VA=Vgb-@+DeVeXhOHM^oS+b[@l"c`8Cp%5I:a)EPuV$&A9<#E8P.$_&\BuM^Q6'WE@a_g43(PA7YJ@a6a+]@GW.Uc%sCYk=XCiJiP!@6q`2_C27uBjmu5XRpd9[:=T3;7'TI>%fd=uEE?K7-NC*L;9/?12/`c,BNU[LgN:K7WfALRt;q*'0\,;bG(cT*:=[0R=h*3?r6^3f-PGdk?WtDH`8b;F&OD_o29C9V)irF$j%])g;GKXPGVH?Adp`_%A-n1Sir5c6nD.#5^)c.($B$qM_n,1j1ZhSBU2pIW^PJW?ETmXQ^65oQRjLQM.0Zh:*"Y:6P]hi]`kK#oag%n_l*/iYZ&<EEBqq)%Q,ma]_PcIrQ>XCKDA]3!T9e1nd0U<-sNS"#pgaW`4Z"per<_'^fe5[<,\3^1Oksn9<4oYr52E.Y"1t$LJM.%!RcrQk%LqSj^-pL3sB:/JQ?XbCibD0qJeRVohLg?!iKXTg]8EL<dDA]-OAb&el?H67[7ES4[uF0Q!d<QIJ.[AaV$V%2Q0XTCiVP5%$64?,To;hi/$4KLZN:tZ<_>kge"g#s0N\R4W$@:N=^&[g7n4LpF;2Vi?&N-"N=0k>rlk;aT*'=7*b^Ne*(YVp$jSre.)ij2`Z<('%`/t^l3kuTtCVaZ3=4RYhIMa!@XcL!2ohOB0fj[ML60Ss$,ZAE-Fk.1&<e9o\:b#XpL8Ska"RM<M/$+R=DJ:Ij_f%dVaZh0o_NGc+%6W2())0tRc#[rm<j=i_en6An4=CSdE'.05N]4F>gL;UBYpgdP9kVu2hE@OBp97.SV*N+,4[0$h]j#9UlFO@9(N1/iH@k=:>W!!Ai%WNdoJ/Sf"Y3JiK9QUmDP@4<@$.3aPPJ(DrXZ%cSVDCH0`[(%(IMeClsJHN5Kc9"Qf&ei8^^(S`'n/IW.>r5;<N0GpE^`j(qEgf`8%k.>07L-%iuXquIT5"FiK_ffpc%(06QaG]Fl'"R.YGE.bIYXpLD^L2P8A!qJ#p_og71Q]ea$V#?R-r">I2OJ^HZNFuKl%nW._KIdF%LNO)"#P@^YV0\$K0S;MFCY-bd:B9RZZ(]0u(h(+aCR;")F:7CTBVj[YK/Fm(8#1DuH3B[KP2FWbB$7_MSu\F#7P%%U@*EX%aj`RF%7nZ9dE%0?>!7U2(_//q+X[hakc\hC!(&#8-Uu*@2jHE8g2A*nZmj5hk=XG*5Uq\P8Nr1iP1QNako5(_6$1@u/a.kae>=;!Kg#nns%f>tBVl+7Pks1F[&V[am-=Z&f-l*MMQQ4Rr6L)9#0lJIRn0TZbu7R<<XSNOo&^/[@QY5Pu!L(m/j8X[;WCW\00HXVm>Z,Z]r,DsZ.%[`@&"MpbQX9o*uq``HPrZXsmE89<\$54$H]5G%(%Z=C,rRf+@6MD[X=\N30R'otuU,l*61#F8mZrV"[2)#MON_/-s)@Z-/GduZ0&%A+qO=9Zf,l#(D'O`rgY(Z@TBI<d7VBWoOt^o[06Sm?*H[H_XkCc9'5f@8Bta]G1[V4iZNVS]jO'#0%83dGf6iRWl]9$[*(DkDJdL%q03#=4)/h8T@Ka'8`t,Hg49A7YC%IBP;!RAVhT>Q@*P#QhZ_=.C6UpK/fbIG0Ku[rC*>:>@"4Hm]+O1_BJ82qN;1*1\fd'(j[q:(%o01I2%-*]KDre02-.QWheP+>urNM"sbTL%U$sOc@d2l1Y6D&.1T.ojO>h`Ws`>&hE\7%FZ>+<H3CA/6\G<VLi;^diL+++,#4g0Iu%;"AJN%Ta&-`T%F*8,t"G<"\:BX1B4snCMU`_4Cl.-1>?kF.BbLWZ.SR?GIj9fJV]\/#<%rIhRgmPaj*"%4E\tHf^I)U_T./^DcfF%_HC>5a6<?ZrB%T^W';,*#gXY8$;QeH>1B#;d5;BY0r'&1Yd]K)1S_!CPXPG?\<b\'g`L/Q^$Ja&].1!6Hk,e2OE\;PGRbEg]f]O4%g'bTmAJ*.M,rhNo7f*>5$Y'Z_ZGZhs2;&lVB$BF1?r=`mUo_ll9B"MAi`N43:!>fGJ03>,<Wd[f<eUG>iigZU_RS_jo!"q/Ze>tF%WpHohRL$#?T#F0IraGagXCo]NQO$+@.8uT]P5->J-.1V5jO4D'o+DEp8"g&@2N[*IqM]bu!e2]C,4I&e2@rL2^aA-m7*cmGjKce$%f$d:S8[X_S=dUa=K2o_#2dA+?U\MF+k)n.l14RHQ,6PIhG6=WsS7,.3a93=g\40p`@aPE_9D1c-3@9h@_0UmuDUL_*T=N;;$;/Wq%+'lcl"kfb>r^3dn@ifA!!Q6s1Rm(Kh,pT%kfubP_OViWSS@."b!pA._p;@NEWLYs#CD/a)&,E7tbD"Vo]L.R!pQ_o:[J.VcAAh5B%<SFhuIKF#?=FSeN^Z7G%EDJ:6-<.kDeVj-8;!^YN,)>5,eO:Dfj9tPZcVC%M)NiJi9DQMk?OX=Jjr'K_^gdC8F#;:Mj?D_6E23h2%)o8\qIBtRPl46?YRH'Rbn'%DD7d)"Zo4.g;9#U`@5#5K@<$YXaX_M:/8>0"_^>)$T4apRO5!ubGRmZN9>Ks).*BmDojccH/kNs"*%"Q]<Xh52V!n,eaLKjFMm]@qa\'9C^Kc*u<LQXA"S`:@d:\l%7dGOCA>:Q:^qp10:nppGo8"EaP"Y6MkdonV/@bkAcZ+=Z?R\9In`%ERPMb#nVJFH@+j4H8fqf"3ChNi_&O=I:)p+Cd+ig73AL;&m.Jor-q3Yqm+)^h@!f(]-f'>mqK>_q60*QPYU[54T',8IC9(HoPiE^%^YV31,^#4<>kNcrqWP$S<,XXGqXQ0:bs@YF5@6@A*nnp@2237NoiC87k,E@mGIu=KmbQT#j&`S[*($-J<aYi@4>gJ5K2ds/bAHdV%hKmF])OBX>_oo1?&BW6!)Oo'VOP<eu]!&k,jD[3T2-KJu#8obV?g=bfKW?Fcr!<-6ngl8R&>gARYCp9lMn[ltCmjMI'?CsTr;G,Y%(FiWBc%!FJ0?#q+UmItBWj5iYDA6^jQ(s,t=+PL?WYP9HcWu)X`3eOWhr;fqn_pqWrMsTHGD[3o[Gn<=SfPsoB=ER%cJqis=:sjC%rl4fI&CC:.;s/LgNq*.EpiKWr7('/PK@*U%,EX1S(ndZP?MEb]%3\m8+SMuHBmG4_UirF^4)k4sYeQnniO8Sc[;F;r(i<Q"O9OK.%*kI)eOS>E9s,XsiTboJ[E>g>T0&k`:<T3CU2<!<-%:GsfqA[2Am;25LD]=ND58>RFrVZ:3*mY1=hKl\\lSQPo4Te->>HRc%RjNm:%I]1c@rPR*$X7:dQN+-?s?q*;5?_+qtP/,P'O"]n$^Zqrp-c$lpU33/D7#LtDIsU.\!,nd"HP*oE`FpOaaLD2GfF\1cOTR=6c'ubn%D'$o?adN1q]WN>eZF$35DLsj$3kQsjd<g?$dR.4;!AU9\@NsG%+6qHRNBDmOF&i7XN.1BLmPLR9.9?K+,fSpFauqa5R\,iE3BE[G%f0O8)4\r:a??5taq*L&%^M#%qJ)JcKYCHKen&GB92J><<h#))W`NE4LiM@fb_aaSRIB*<n\F&)7=^W`ST9[7X<@^4EolluFrV[h1%NE5`mc0@0Sqo6P0I3/3^9)`J$V-],0@p]2\-!1*+ZRJpURa$e*>W4`2hq;oFlJO0uo$",Gc@<[m0;[N&o<!/aO=rZkO73'WO8;W_%iOR@8h[3q.cuJg_NoS#/GouTR=/`@)I'M/1I<^)k#-U5m8(I.Q_i:V:XY"JVH;XJtjP`Lh?7jZ?(&(plG,%tECp#`.RLZ\$C]0Q8%:Q8N?\__doEDubBfnkuo5<TRc]?HGIY7G1If`\j"5./m.QT'iGDk1M1Yhne)=qCY^Lpab*knd^mY@@FsLZc,ol+`,("dGsp3nMW&%laD$?0:(m<6J%+0'HW]]SYq707^:G;GC907-/4tko9%^.:FU\_o^F?A#M&_/`E)"oN3c$6='1R8?]AOdY=@gmr)[,he(!.s2-LVa%Z[XiM3mC^q])GZY\`lSN+9JF3ie&A?HDaWQL/T@C)C.DK2-t%5hG0hoY80B43(.DIbs/p!D]T(NMKe8D`[rpnptf6<<><Mlh?^5p%VcA4\^X`SGh>AkYICL"BcXc"e[V;YBHVkUNI*5adY16q2[LIHp=DCt`e83I*rA<8<(JiAnWfh[=+nh=W^'\=%<c9'@p$7C2LX+dl%eX2<,"N,E]jmK7"f-p&G?[:m"_8>"b>ITUHD@'1Alo$qfa&/S0mN98S99/hJGY8PX5o,:jH`.OO.)Z.qE>7Or/Zi"!;t%QFJQ.5L%\am@X>o"7]%Z*jKGd1>$.RBGGNTdb/`S-@`YLe@X+"&j+D)DG3g'nm)=;8mmKp.'@c"f;0.Dh=\n;-[38#'F=Ba->hq!]KH;R?>;%ZV9%H6JI=_,%Ks&>-q:kI]Fam%`?`@[::FO8PhE5+gr"!@M-/(V:SrEgBXBT3#k:O'pBXMH%VBjJMQ0A&h6K(Lf`l$!i4D;35EDq%8E_[q8EF8b@BnV/_W(N'$Z#E)<tF/Vkgi2^'`Sfc>8L)j4LN>XU:0&"*+>X6laGSbh3IGMPkci:O!^3.hpe8:gfDaAJ#.3B(4(D?%q)`)0ZHUQd]9D&G7u2'>U6Ea4hE=)hgMjUPUQ!jm)n.uQgpENRksPICdOF';7@#4(9`+4GB4WF_e1Nrl;>6;0Q?N*#!U)#>a@kPg%-k:`<c+>PQq+F5L_do!WdQnZ"4'g&A/(_M=$dfsBq%?>OB(jYda14-6lJJf,Ln9ocCf(DDa7Oq@!mT>dArd#\N2au%[r;4I'=$g'%""1M6\nqaq]Y3)ojq.m)FT(<Tm>'b>=-g^uL^`-d%LJ/Pj76'XGhTYC;HW;M\&HOIUXQpTbK8aN7eVX+1U!qCY6SYk,Io>0T/I_l%UF[*8OO^ed0H*i:mUcgBG3>iPM_3)BRoP(^aFn;-5$4RBF^AteF&1JP3BX7lgY@eKZDebRQcMIrXmuS,jB)\E?_)Qj4"Ret%E4_]%>Ce$D[>jOYkfh0&=eP,rR_O<Z)kC<SmUO3K28Is9qr-t>*jMp^$d,<Z->-*"JftcP/6?as5BNL_));GS@[U9+/XX&!$i)<;c47>f%156,^Q#_0[0@J/&'Up[NBR1d.$N:Y^oY0#TT;](>?:sM!iO2Xk#Vj2oqJ1"dK?@b=#]dCk]YM?^55rCc=Y`gXRX+1S-0m[8eG>L@%4-Ag%W*j=95=6e"WC$p6k<Tq04c6X6!Cjb%%kqb%l`G=7EW\HoE)T:kj=%)t7#nPr+d&OA=A1]R`LlIua*)RS3=;fak9q8fFcOm)%iKg5(]s`AI?a:MMC08e)%GKK./@;<E-`S)Q>)H5+M@157eKgEmb9Ma,P<p_Jl1.(bQUBY:&&fm4]nslSl9Af1[bL%0918rR2E/s3%B?@l\@'aq3BOr;kloDc/,Uc%7373_W\g<)aK'T>#$6N5A#Xq9TPM>*iho3!hd*l2^Um7l#d3mC$gk^2IgMRrB*puKC'Tu51,YuT=%(C^+CH<@d[6739sO&,/'+KDo;N1j&snOLK63+#N,eU3&qa'RFF>P6U0#HDFSU3P%p<d#)n+^F'9n^:IP81/B\_o7,5)LpVZlcYHa%=,$Lo?'_c00)EqTE*JBHT/o;3dJGD1oMsW3X0b<#7Q5f2=9#FYO!rI,#9;=,/1>@dq3I"74[8?!;;09l83KAQ8bQ5]A3[H%GL<R_%\8?t9oL6B<S9E^0[&`Af?+h?6ebc(H]eA*iqk@@ZKm%Zn2YdtGN(p@FT7$=GaOeL/^.+?7Z\d*9O`-C9/5ibqnhn#"=78Gh7XsK7%`6#K$q:sJ8oL$;]?drl`7D2/te8%IO[hf&`0`k>(Ibo<qCAt7]Yo>j]j$?6m5Ok1>ilrfA1ISknq@/bWLNq&\n`j[E)tdfmZtmZq%fBON*c2>Lqp-ZK)?c6aR7D*5i0O7!=8It)AHg08?*LZ`ehMfiFX4EanO$uUe$0fs3](P80m4"L%"&32&%\,uXZU+iR@0l)Zb=AV&%S"@=E!)iu'SR/OM]$lQbf+kDC]e_OZGi(77P@8l'Qo!9F"8,5Lpgc"+mB!Dfo%+sB4rhl"f7%Gs$gO]G4b)\NO%bu]o-:T,n\[\-%A:!5)o>p"\2h,B#r]r[Cq5ZV5rAJjV1:)&12DV?#(g:MMHpW!pO/u(t=DahH,6kXNBJ&ZN>VK5AdrW5`cegq4riA!5;cC:;Sn]3G%NR^@peQS?T?ClGurN`fl[hl]:c_ol.o:'l#D-_V>f"T\[^XhP6kAU!lAbUn)0ujd$=(eE@7=X&eg2q=$ATQTJ',^$b[,#W-5./._%:1cDlMKOU$#Y*D=C7Q$u8+Z8GG5G.'4mrR![_?PEc_>:FD0fW=jJ/6T>aMk=Ei&0*>MbuJ^W"gt-W0bg/_]H#lheuh6#rmhmLOY^%o1(gGdiW)3gP&P,gRqL.@;EQ@h!+!aM,mh6[?<W-f.X7'@r<d[Zqq+@D3*$0bbfJshbVbBc`>0Y>3BO%9q0j.lu]UXlP)s$mc!5E%dTj36f@.-l:7VolrM/K9Zqc*clQ<h]#G$a_KXtH]>oMV5/tXF6q!rXbThb@&a(+<j5BWQ8AZ(+qYH-&.4Vs@\h>"8`h+i-sCAG`8%hcZKcSQa8j;YopoQJ/>:Zo?\F3XmJT]</PkHn:haFBZ:r?H+!AZ.&F;G;HAM%=teH`Ha7bY+J33g>hVA<`5it\"@t\EanRuHW$bF%c*&`&SVgaJX#bEGde]3`WHJ2GX*rkb9Ut?\Xo56k=?/B6lEjC9en<i_;s*@m(iS1]mA8$KUsa"mmZ0Z3;dJTMW(ekT9-ZNm;tm[r%MU-G">refXcY"V7SN99qO!iRop%#@'RH_1,D>U&B-ZrT@[7<1T[,&b5#EJ./hW`<blQN[bV8oXejciLn-FKVZ7U($C1_rIJf'MML%D.BH,f]gf6iht:$G:tnhX<_oqP2EiQeP=-1]L2m`DLZmm]">]L&j&80esiY0*j8YrT4FjR;Sl\J[$+R4.AbM4acdgE5F3$F4^G^l%9'TBsAE`aPC:SDSK&B9pqnDfI1:bli]t<07CS.L;48n"b+372cJ*EQjoD\C&Za<JCg==$3ccMaG/PWZ+QJ8IF:.6hAgZn61-O%?C%`lRDI[Z-j/7m$$6VHI`KSR,FFl#[`jm!\Xcq;^l<8oWnZa8&b`Y!8foa/IHWIk%nUI+3=_D:tmC^+cf(mBkY`hgP;#S^%G1MI&h=%CmRXE5<(OJku,,d'OE\Glu[6A3YOmLaDu-9*'=,URJRU_n)X$2ViCL*U)23oV-=WTla-$Qa5<W?g0;5=f#-JmFZO_CNm;b,Gbt'&%Zg?1H4Pnq\SO+thf+/[7qtabD3n:eQ]^(%e4mO)(MGB-`l.fIVIQ<uPR@f\8Y'<8[T-%uYIS"qd<Zh.=D-ft];P&n%kk4ZKLSUhW%"_oh<V3S;CGa]md2QgC,[l1,$o.I<dh7.srXXr`$9?Z/g^1#'RWn$"jF?G!1S"!Z0oAdp?hJ)X*j_<o,f&i;0mGt0Lg@mpJH[=Cp%96or1m4L!'NMenpqR&QNT$/NFole+7]TX6i#oMFJ`me2;G!C+5*nN'F$Rnk9:RnM85$a%/<>aIsR5u@(4fkI/hO(iWFhV0/5M]JF%rLTW<-^11j*f;!6GPeC$Sau^FpTrPU(b&7Qs"n@1)d`*aoC)S%@=8pW-=H3;e:jXbmb1`l:08Pa4KY4no:n*Z/Ic3LZe\etFK^g3%qj7$TIf/s&B]@Lhl+uc/`5q@UdaM64rp$.Q17&It-K'0[qmiu;\Tb:K$r=Kg:i#ml\NTM3HnFmQgX!EeWRBslTCQ\4`l.KEaf2,c%WHqBfiH=__X0VM,V3"mM2o^;>l(r7pgg='YR@@`UKe84FWNAtmaNWAsl,_)j%q/OGh0pB4\<qYr:]"OLY)^_D>mXg#m*Wde$hMV5%0q+j`fjE*IA]K-8(Zsr7Rl#;aQ1XCKlLmU,@K(RNBR$:P@I@*hEjIW<N6gt=P-Hgo$u`ri+&!7G?_5Zt\K3h[%.F)PDQV%(oM.nl%5A!hUeS6V[?:q-@#@SplR%LO5DBk^Ds2aDGIDenLFFCiFXu\F+]*NQFD1)-=]NoQUlVC@\Ih-a<*K>d#Ha%T/lLaf1`t(J6U6eYO%a1FXH0a%Td]d@r<SY)g(3a0/E,$Z#Q<n\$4SI0.1fFHMIS^p_$"`8WmRnK<Qe4<J!"b#Gk%D=P`Vl3lhkIUID[]91_co#A.ne3Un%mb;T]EdJlH1#>\T3P%.6P+u:JmHUqjOqo`a,qXUq=cBVgW')pk^!^`c,5$jiX.]K09#NDq(!!NH*=<eTbg<O^/`aX.rZSKrXdR'\%5OEq7ic4m*Q,[)o>S.(/CG*7pgjY60NC<LkQ2AR)$%@;!*DFH->ib8aj1/:@VcJ8uTTG")"Cc:XTiqg%&s=ur\&jaI._PfO%i:r(%.c5psZM)6iQ/jS@L5;Nh,MQ-Q=IWX,2E*r.%,lX5G[Gjs#WpYmPjD3:9DY=8YsH?`<-e6m2^<eq51*^^>7!hh'Ge.0eFN<;DktQ`%LLHZ7@=F.2eooL>$Dm5#jfeO6>1*`^lXqiAI,4%pIPX&R045:kNHNQDN:t_"2R;nWhtk`YQqLf-b%U,eS_+=H*98.`9D^UGk:A8t%"a$Rp(8e11?6:-DkR6urGcq774>>p$gY$g)A0EHMHHp/0ihE>s\b[645g;JBH4$L?X7;sb=225r<>/t"!nXnFP#@UeQ.='k:?Hes%CnH8c(La4W([e;26#S'+m<#M$9V%V4p1\<SYGjs70gt]rLYf!/Lcgn[&?SgE3Y#a:VQn4D-9oXU-&^1BRFgX\d:5Kl&uKuc<fT]f%`J+scf,FPJO&91G]M&_!Q[^8aPX"tlM"rnenL\UE5#=X'';FRPN5eoA(HEC,DG"kR`!<nnD)C:#=!-8tPCr>0\P?%C]qu.5XQ<,u%#(P$(kqC.hEG^^_/LP4(d0552,R("X4+T<TUH<cOD,fqme+9ha8P5TOP;4oRO0S9#s,oLdR?`U3/M+U]OgCj;8+/=D,bk!P.oY$]%'g:lUO6r"[;DtCY3b*gYDqCa^27+qM8q!l2U\E?Sp6<eu@dqtofuSd@<I,.s+3iFgKCS#!ksU$q+4>nN7(f.9"]JD^'!bSWj-_rX%A-I=ZFSXOlV7%k;.=%#pDTD(nlu<b4GoQ'\G@Z[`E[ECX9;D=^-Q-T?6blf'dLM)<W'oqjA)u;e68MZfc=`o,lNXRc[=@R'(p!<#%_g"3M4X<NgThUh_G8mOHFeR<]?mk7I)f\Mu!3Wuh0YY<(D"V3bj(WE*8p1tC!H,skmiOXebs$[tdOi)8ZbHI0f8YkIQ\BT*'[lb&%a"h4oGd2gmVNa')?;_ol5iTB:]5Z2Vm<Kgj,7@4\13&4U3P2TnZcV`.;n9C_0dK!Hj<=>-fX3lIf'0Aj'W8qtT(&oW+[/d@7$qDX%WC&/"qARjF"b<>P&Bk%/*0L:5oD@1D]q7@#`OUVlCm5`V,(6R,kR+lu)%fS,m-?IA\*s"K&=$YEo8pQbpQo]'B:;QoHW0g<O.PO-%cU.(8>jLH^nPliMX<^&s4TMco_]n.(Hmcql+NO+-D`OoehVP(^E<]51OC\/"KUt;l4do@K]urcPNm3-MTU/NG_^51+d,17Sqfe6[%-78;p2aHp]DaIgB[cM_C2kIctNV;CHTp4Q#a?-(KD`N2eKcXP]F3OYoj[Dim>%B9fXaYX?C&T$%SMYgjP`eCS1ZE,)WmVHIX@6.R%Xgfi$7=Lqp6^af/Qok*4:>E*<L>tiiPNntN7r\46(#9)=W%HTP7Q>TG"Ff$]mt'r#o=9Jcq%V.*hs67[(QV4$NX6H+.=E_Tl+K^i%]P`R4@f,!Y&<lK4/9GfQ.Cq'<a6dde;S"FEA'qDrEah'J^EI33G*L6qfj#>iA0HU25+_i<qeU)o?)OEBrDh3H,nIa5NFhukTeUC\%RCk$2f[AN)Zmo-/A'57Nnb$cIC.S%QRc$kE[PKTBb#U.T55UF8m\cU>pUu[%T?p^4KWqXS1ibc.GN>Nc\4I"2@@]*nF6(u.o5;SV%N&C"L-iJuW9o1k,RM1r0os7IeZHne(RnAcUa8JZ<1_5H$N?Lj"p1+$-3kklkcrg.<&+>cD:QV5(@rP.V<L=%^UP&.:EKW_:#O`c/%0@>r1(UBUJ-/.m.c<b'D=/e]&93S*3>`n)G8G-fd72G6RQ>/]UNXh7q'W#$^:r\1i]J('.lH1(@O<`oQlm1,Cc@7)mQ8;+R.M$oV%@TG>:O-#X>T.4I!?i,n5LbnY+nNU'J1pDQ5+U?Kl,YZO-ieguJUChS+Fp8G-OKBdCK&%gC4kiQkS5bb9nMENieu.+QCG22$haMWG%4<6i)NtCR;+1W0tB(:G+eRJ\[Eif"Q-lU9=5,Rb%&^*Kt2R(M=<NK#,D"(`s[""ECi\#C8LjgF[L%`B7G-TLArB@3G6E+TZ\TYmW%]oXO6I<<LHA2fJ7Kb+k\'C:G&93:K']>B\<p1HsD@B`gfK;X;TN)X(JN9a!63>t2[jN;;""W.V11s-f,0$@eQ=>#?PU$7H3ls="P%9N`=RfLm[^8tr[d[><+Knp/gNWF,o!O0p'*;l"g0E4Yh+P*m"53<soM2PtN3[WJ+P/Z&<-;`CT>G(u-F'"O<Gn"7X1l-iIsK=QX]%^2iq7D&_RGH!;"XrJ>GETloVcoEH6"j<ilX(sCr8:-0>LXs?ha,lBR,YnRp_[9UfZ^(h=_&ZS54PoPG!EXQM6QeISD#8AQp(_iRg%?hiG.'8L)caNXVO,KPhu*gu\5YEC[)$Dl_Bct-k:F_(up1P[SEK+>$8_/nhG1[)-M"oHE8bKcc=Adc=;LFtZ@Y#$$3%UF5^>qB4L%h)TT1)0CS\E,t0J1[&@k`t3:TZHLAVV]k-JAS9AD]l8Vbct-k:OZq>XLFsL,S=X0_R\Xe5`k\Kb!\OB8CIi02hYiM;?@gl&f+U18%V*\ACJ<@8:++$D/k4eKT4RMkV9:gUP[m-H*C"=)l]!H4a,L**+-A,%UE2#bHpbEbW)0gU.KC,3iQ[aJG?Mos*l*8-rhEso]I-fer%b8=-$arGXrqb3I%-Yq"?6>R[!mHH9TWfKsfjScGnO<<$3SBYL/BOW_oIoFNih,Vs!cXaLu,\2Cb6/GrQob_bU>Oo$nge-k"m.RSY%OJoN#LrhX.%@a4Xbn+P\AM`8Yhe-HH&1h7rY"qP`Chb\o4<a;NVp)0%Sn3[:KT+bSj;it\$X-1t1@6U2Pk+V?VD._Pm;#:+fcbbp%mQ0\$31TD[PME;g,nRcY`9P`C:[Cm"!gBkrWHhkfSSWGCT00jS<u9qXZb'L=NA(j_>Qmm'o[L7%cJk1T+_@V#8KN+2W:UpO[</t1%cQDHf"5cTihb3[T#!V[Aa4E*p-Cktt3P<kodE?JW.ld>qcV3T$Z08>G+N?$\==nr0/H$ummn&[1HS<C5NaK9G($O.MBZKbMG8_$:%)a+iOM:GQ'Q5TL=EG:Qd5Tk#D1EXBspo=XDG8A5>(bp_,`a5!I2oF9@Gt3OmE^'>>O<u(Z/(&)<>Hbk8Vr/hj.eh4'l96(W[s?D#%gj8R@Dfhcs0uh9u'cE_>.eH%tQKGK8rQ5fH[Zc)bV")-H?&n34S%Z+:0k2Uff7u/1?M\YGFI>b&.:jjI,tOU!N2WNeGaCT@L/c=]%[SZg&.\8[7H.b&:c#12@@o.I@'L0QnOoT.IjW]7^R;o2nMWH'M3a5r4R>`;WrU"&s)0Yg<1;0F2F!S_9$n;2DN^`n>46DY[a8FO1%2I.AbbbDg/3d?nCQQ.%aFiN%NCj>q7Ldre<f7:Rm55<V?4>K3E8,b?Pr]N"Cfn03qpBCnYf;^>GomQX]rHMjNr;;)4?BOqAPB-kE%S6V;K01o^<XXheHmU2i7gislOq/pHi3Ji[7H?R4l*^^%CE*L5"lH#qN7F"AHj?.-io99+Xai3t?f<&;O$U)tZ@\F0Dfn-p.lM?EM%9T2g(ar@ONSQ?WoELE63]`UZ5EaAN7Wkt!j02ta>r*_]'[Otr$fb%Asd1puAhfBY1E#9,7__"&k52:MA5Lt<J>]LPNYk-fXMGVQg%&(`$mF\)=I;C2puJ\CX5'&Nt`)B\b2I(4DX'Hd>a2]j[2]q`s,ORqFO]Hpqkq/E$M$&A-^3?Kli(/$[=!Dgjb&*RKu@^U"RarM-5%Hc9s8DODk!Z7AQ,ICt%lG^;LYTq%7,4kn)9%*j:<$gklkkC,mqoJ,%ETK2_u9"3WH*!>)&U)dl-`8^=4`;>s=QuJ8p.;[[o3"[K:%\,R^dH4;/FC9LPQ>bU?#:=;-M7?44M@J03h*U0@SD-Z"G#]+bb3g@)SbBC2D0VA"fgDPMN_lX1k*:R5mfM;9gHLfgt;T#T0Z03]M%HG'b>gf2n[)I\BL0cq1HHE,Cr#'D==olM#gWL&*hR#rj:)dZ#!je!],V!=`K0JZPlUH:9bXlRYr($uDT2adCM\_\gaF#8a9;nj3L%q-O4E2MmXXqBU](]JR%R+<u-+cJ6?3(E:XooN6osIP"0G99j!S9n`[tXCjpsFHZ)`KhGX:iMOI$jL<@($J1nUq;,)\fK4nl>5q,C%>bY;.kc&N8rir!eRFjaqLk=:VP;<iDU&bo*]b*H2O.?gKKkc]g`pVmRG7WhT+@BYd(Qf6$_d'[G0,a3HE$:[0^07]#3l8uE?%=K@%/g"B/QQ4,lYp&5)Llcg;@='+-ciMuAQUoE'qT0+#h-Uu5gpM(.PG=sHB4\^/qD!IWs)m^+09fL=.UPs&4uBtnXY!9iI@Y<US9DiK%omK\XI'n-@=h?Q2(Im"Q-^=&UO?`Od+k^^V0q=.*#s7]'Od"TbS=K&'h,f^QY_BX<Mt=;d\$OSc1UriKccE>Sf4q4*l?n+T[D/Uc%]Cj7LHSs86Kkn(p4,$>8n'Z6]-DMH%Z"1=lgB_p?9`^GZ9rh%La_l&`k#5H<SMcgt@5hAjQW#urC0R>);`]X0pe'-*g<[-:\#ZT@%[kT8De+J>(hh"V8mc,hb4m^\I3^(\Pn*\auC8XCY<NF0Jkc0[%$Oc_Ch.HC>2.+I*c<Sn/jcEj/-+0@DF3?RIS=XM>Wkm78k'V'c%("'fh)Gf!^=0lB(H\U=q2->E1HSTn:[$DrP.:6i9I-dsRK3\8<r@7??R&fjFXnIPuc&VBlf'C\#P"WAV0(GJ^"5P6SV\cN%V.]8B%L27Vt>*&E68)sG$09PQ4f/KKujAP0-Epm5X=P]Q9l?UuHDPZG$V2W&[mJZe"jl_tBYP7-+KtHKZJ?G6:\,U9Up\J=pbGIq<!s1.2%Yd3MVEp8bE%l6a7?'7u;JR8W*VG#(.)^+aWO(7P+8GdUDe&BZHc`J6d2I03Z4l6h!G;``i;4hbsmO+JVl's*-<t6[K/h*,>Ftth+%Cq:lV9D#o:_oS]Jo!J_Rl`d\Z1>[(0`,*#\>e4V8kV0=,Ou@0fqErN)9,^_+c,PBKdj;,'U"#ETRNn:SC&J[>Ta&Z:lY``cS\jj:%VG#MmLRClg(WP=&:"S28]M!+oflZ]%=F]"G8JY?8kh1&L%ER>iTk;b"2,G-92I4aF8QQ>u^tEg$\TDiWFms4YV"CqUaiH0Al&p)O%iqppWflTg,Ltn:RP\doNR9W,#VG#(.bIEUOE!('!@]^pc^tATpG<JoaS-`XL0t\mhc&j[L.CZZLm:+`BeKkYR;nI;+I<Ct376Wj,%]\,20U^Bcb4RpZ9MFB]A=R-(r$E71Sab/k";D(h.lZThQkUC4:(u;Hb,G..QSrs.(Z6W*JSf2mb2j28t[>5I@StEbc[tKDglO;*E%BGX=VkcTu:[H),kU@5Y8Vipe(c!@o6q3'cc3:A_K)4=b*''XGM'0J??R4c&iE'dpg"NCX?DTQnC>oo'dQi=2c8bFKD>]c;[=(sPX%RQJfClR*0%eLP/_*`%8VRWDj)\U*'M>+W^mgd/+(fA7ZC@VTrt"6]6fDWQbp&G2r28!=VNH<aOuRm+;0Spq$&F?O,`$b8#$dt9XN%Au,N;S=p(JD5FiCifotrL+Oi!]CUmQT2R\[jEEtfSbGC\>590T.`A*UNeS>ZFYq<UW2#m1:d"lLpRh%4?]WFOaaoL>A1OX_"##o8%CZg+M?GoI!m0q-gZB^gD:<O@>*SD_Xl^_.IE<CPMYu\Q435dhd+6TtSl25H'KZ7%SI;*rj3^5H5jGF?Vm9Q]ir8!`tTeaZ:Y8Kq8%BPWh%#\jBu?ddHA&l4L\542'dcaYEBBK$dF?9,BOc')aS,""T-hgWdld89;Ua%oWdWY;GhD^g.eBshcT^O4=kH`Xeb;>f9R`U?Cb%o-0bCK4H>boQe:]]%9n_,/a2JSs_#ffl3T'mXkAZj?)ed`J.YWgqEaEl@*W\bL"8j*I#EBHsE-^dS5!MfI-DfGsf\H9"X,dmo^sN%g:Jjg.F1GHIG]"qj1a-5DBDpJ)t*:2eJs0?L6C1Xi>Ut3C];9+qWLq?>hDCB`7k(OFe[&%LCkHHHlPI^mH't9m.PncF+s#Rlci%J%7tbPg#`5t9$3rV'gL@kN8UiBu34(%):<:pAVUN9MgClRC20pbKF)j0i%F57PCPD2)97O3?6k.5"`,sOefild/XCiGM=%6:UZTYZJ%WJ:<'^qj+rXusnhVTtCDFOc9%mdIV8+ji)a&sKn*\6EnYN1QgQk.VNsbXa>K9k2>B(p90;@u;H%Z<H\$QfM*ScVkQG)0aJHNpFj@%IHm:?'&QiQDeMqk#jYn7jZTk7N5b7!I&@&aRS%Zs^.3tCMVmWC\<)!Fi8E3M?FT$^QRhC4[mW=(I)Ao7lT$K92;hfC;S/AllAsE<%)QU!kU0b\N]s!@^H(hV=X`j\dm9@!+[(P@FrNa"4^0+`IWGFj;kKteu4Jet>nAr3U]8,eKp$!YL+0JFljKsi(Ms_);p;<[?abQAb%FL.="KP01<Ps16c__O6@Ya(gWf,h'M<`2$0C0t$POub1Zn/f#WQ<:fKT39e$c2+,/UKM'.p=saOjL^4TFD%0#DgtC$r>V:u9hfE:%rR;LEn-$`VJj4a2%c',]9>c\DXr!Yn798R.ZOu`D`cM0K?b`I]qJj,eJ",#',H4VUpW_GU3(l]E<o(Gk:[-B`Lg47'n+8kg)VU<<%8CjR;aA8%R3S1\8alP^_QD7Ptme_#d=,YYj5*hs\Ena/^3gju'DbjY_5@s\JQ]cO(XK]f\I(NYM(:0(H]^]K7Hh53[oN]5Ri?:cg%8c"Wp8=0F?0rVfQ@F>dX5`Q:&[-D*P26\RqK?`@Hg)lB2T]K:eUmkL>f(ocVb")Mj^NoDK=_YPn1arnm(HjWc`;/9BT!a#62L>l^%8t$(aOrNZ]UU6g]3@bguh+ufR^LY8s/`Crc@q2:nWncr%]KVqoh3XP"ad#Y,rM\jA^<H)_b4imbjfNN&=T'CS,Q4PNiKQi+m;d1G%fT5;/hV0I04R'quchCVXe$C$T*N]h3-+&a9QoABRVptj.V+57]nW1Y@7]q__4DVAh\t)"I]FsA\GT2s.SAQA;dhuC`NL@]5KKRl<%7?Fp@rj&RMQ^u&sf!R:(bn-!;K([u=?&7ekWL!>HHH,+"?Qtoil$[2:mR4?&nb4"+X4qiY<A3Gcif3%CFm$MucSnbZF-&a.%hGWi%:2,5X^o4nA9]_5Hk:/V0E1ll^jB7GfT?Ie)(f&5YI=Ip0.QPK`c*#<)XQS][rEu_irBC$)BabYbjtJN%V)Hni0&3QL#5n%`/ASnY%JFSH`G9i"+0Ko66)JMq<9KUOb!skt-r[bk[qPE9RL*BUSOTh,C_pNTZp<G5)(oa<7R,)bdBe)$]NI$DcpLXFqQ6[[[YUdaD'chq^%W#)b%hiS)05,>-\,^*LNj6<"49RH(%;SKk_A:+'II*p]Sri&QdP.V.>^QbqrNGQMBPRhWln_rCTohmu!P1\Y$Gji/,0?FS\r(Hi@%mmeGQV0mRWY8lIu^5,hk#.8;RV@75.3*0j6b,p-1GW->llSk&%Y+`NJC9W'`U/Qst2SC?h2Xt+gCp-Z%Nn(c0onu[YlrLmq^)JPN%Y@"_>.+Jt!o3T1r'r"q2dbYG`n%F1\.!a`trN[Y86Ct6/me+bcaYe`ur@jEcc(1p/QN?RJbFVo3rKZi`f.[#%^N\K6P&RU3p4SSR%<;XG^06*DcheN.NHi:5pc;NL&*Q:e1oV9psUQF%cd(On])kB+Q)8a(9fsghNq$*kKHi:6Eh39>O^@1_fMOFlioc*Zi^*2RMkJ,V%%]+qmQ6b(`$q`lGAd65jiIbBRa#oT`2]%8V25_X.LMqu\JmX+oD_r/D@qJi%R]@0^B?GC;b<f$-Kn%I=+nXN(J&83@!I]m+%^i_IY%p&4X]7Imq!DY<=Acdb,GouffIhoI_>]mcB^FpsTtN-kN/:P\hWO)KQXGXV#\)a*R4q,Y90ZT43;oufNC:62jNmp<bF9ceB4#J\kD%qc:JjA>SsVcR>$4F0AsEH#l**i4\m]A`)c3^jUTY"DME&a#EM2FO[FA6b/8]V_+J"m1%nGqXnnE?VJ<FG->7SZ:3hT5F!r[i4XSs%]Fo/UHV[[Gs(Y:YNV.S#?^@.%q+'*76b1fe(jW<un+FkjpH%NOI]A['GGDqA?GHJKXqL0qH[df`]%&HS5B?NuWUH@TXBYWYhK%3!%]m_DNN7<B\?0n-VqIKmmFnq9YH*:RYHCWLnA,12;jsKY=jhUWeok.@?pKkUji9Io(Dij2!n@a;('N)s9jR%)n?aaFB:(dfEf.T3/%2V=,s]@S_5<keccls9A^ALTpD_[PR3^UuVO@/'Ld=#,6*?Y4Iu+8>VCD[nq93-4!CQb>D@V?BDSjf[uZgWC?gmL.h_+0kQ4R:H5+%"o%tWCKI*:VQt8di-dG!0darBRD\7Qc,U+E:HXD<?;`JX$UJ<l!2i)-@:sdHJd=-K7OB`7haV3.j#^gngE5HBg[/%bBJ5E?h6d_B%Z_b3nk37o>Ccg,5qoqb)XZjJHnGK9)Mm72q,Fb7GOlb;*Ab>nU1H0K!qI-Mupi<`)hRJ'+/X2d#m6=\?j6cQrdc8[0qlRl#n*aS#%r&Hdc?akJ)h&eaA*NrOfhG16)-RZ("<i7<pTA.-TT(f-IrHb%6[a]#VN[DbM/TY`=[+T+n9%qqrVo`l32^d)RoZkClT<[Qri;M*I%>-#%j[m)Y@I=5bH=P8%ircDX%Bf0aI6*#DsX_I)CR_.;MhX5fmorpF1HFmN$Di`62?Gj]O.+<4q:N_!?gV&+`)3JWO>4ohIC:3NE%HiU>)CEs64=r3T6]$TlHIB+r<fB/F_Dh9J^nK,O:Ps:&GaEl::U\j(+TdR=8?C]i6e(q.jUq,JYhgUm3VEU<kp;agA:Fi:?U\-;#%5E@_c/cXjk1Tcg-`A1_"BAMs9^BIb6f@m"-c.S61_fnDgOMH,i[[+U-Pb2!om.7RU'_/;W3^NbrQ!e@CmM!UXU,uZmK[VcZlKQH`%PGLlaC2M\6Xt)#&@q/*GG.oO+3rZ_&]]&eDSbDIH`L9#7Ge<hNbD-Ne;e+p:\r(;U:K81]:FG)L`:VbWl)ckKZ+6i8J'<<nPZAmk%'ce(QV0_b.a4DeRO0cjV`pJ^cWW/B?4ame`,%dOWfJ)KXO65HlBN[7:ZMh\N1krApD,&0V!b4ktnTA_QI[+hg3rC3&9<t+.d:-TT%IPSr-J,WT_R_7;$If3B[>Pb]idLtTs$4h5JHhjW^9SFRiQEJa?L`?mf3nA6"UN6.Gh>Ar!5RT`B*S\6i#J61?VY^/_BO/HOA`5r^%Mm*./hl'&OTm#!ok;7]hBM5RR2+Uhqei0+9"25]+p@XK0CAVBWMd4$^n<T)eg!K^R-AZ47mY<eNA"aiS("t[pjD3fKRuKT,Q(#D^%G+hPb7B;s1VCO_uO/@0uF[ePP-Cm/NQEOlf7@P:g1umi!<1WP,Ik6#r:<(-ram#1+@E,D#R+3XSXi),0%&[5[e?!!Pd/H.Ur2Jd/%**^%ume>HB[)H()a_sZo7*4U.`q"1l]=kk"HMTE?1h6+Dp5tJV3YO'8Z*l@t3oMO9\ZtjF;b%$o]@jOP-UGji:WEZ*h_'@K[Pt4M%orG5Y&9bKYf'N<M.3nm-IjPI%aE\RGTM#:;en=O;o9Z:GqfPb.J[Mu`ra)<!Lu"[r[.r`#9bS\E-h5,i9ZXIlP&$u+d)dBGc80$6%K*h)@Z40S[e('Yg%7'#$75WcqKY1nqhM<Vp\l6]Ip!G!W[LC`HONFjJK(ii^2<Yb3`6Nh[68EEE]:VrFr]6X_89Bjta`'gNU40o\%I:iDk!dm*JjaFlG52WJV2<=48:n(pQ$`d2)9F/9,G`a9/_Ic6CYI>9E*\=fK)ll1FQZ%TGpprd\f&nAgEH\.C[-\4eGXr\JqXK4d%f(X&8G,gk(J=t<lplpam@40"d"fb1j*E4SU`1H;.T`Xf4DMIV6Q*AZdj\\nBYQKST,2(l+^nbdsFdS4G&(Obqe#Qu:BEH;6S;djT%g^Nml#oamj=Bm5m@D4`:<j2`*MS6<MDGg5L"+*CNN7sP!'5(tTbGpDSM$T!iT5_-"'!6KUC"E4Wks?2E\2FG@(U[EQ'2%qSOCJRp%hS(`kJnn@r`tP)J3WXRN+5f3gN4X_`"iUCRn?rVT$V00lGr0SkS34L[k(ok_WB.d:@34LucAT:$(oY\_O2!]+jIKPB[uipq)R8!4%+'E6F4Hm6.q]BK6:WL(U,spH%.5A7d\YW8jNUPuVhoAVf!TaN/OSrech913)*Sr5-rHYMnUl]O57`*p!SjGd1*>m6K'O8#hlej,V%&.2IQh>WKa&9:I)-]A1r$^$F%WNd!A(0CMm_r6^JVA*"iA>f'#%:54S8<DC.G&"U8O+[Sp:!]\hd#M?;GiNV9=fESX=tAbP!>6`^%`ssb$k[8ETKZ2C&Oe2Xt8K,e$`+3Tr3?#]^KW.8+#S,E`q17*CM^.H9J-1a=2StaJC8.5NXUCuLBiG9WK,0c=mis;F03-/Re>+F'%-MufjDVgrkO]8%H^*X&N0JbL6:#oT>RFt[EoR<0VVGYXD)WoJa_uqqo?egRQYA\#LU70Jm)NYfZh1V@%Pt@JXkV+ds2rT,ifW.0H%^9nmDW\P<RK9tiha5-rpaoqpR;(1DK8%=gg@ZFSkip5>`NE++'/l!_,\cIfPDF3Z]?"5]laXo?t`aC'O6"2AuWu1eTI*b,D@n(qU%RP9Kgjik=])gSfB(rs[?A0[4FF&7Os22,&9,[UNU\(k=C-TQZ#<YDolrXn<(A>D]M5Q?Q2#>PmVm[o!Iq,8]\gctgpo*8q[ir8aD%S3M^*bl*aOq1Gm>4,fWbn*p&CBW$W4-g'1bJ+>h^hMF7:.'bAih@\n"aK1_o.QUPkcR7'c:q^,"gc!+sE:cak"A=TTkMZ*=-F?BX%U+B$g6A`t;NH*#cr<(YKJ5G$gP\Ub;7e3VTFl"Y_9.c-N-dGk[p@,dMJ)<G.<Z]OIAW4]VR$jG0P//.8<;f]C-(R`!M^Q,@m"_9A%nDKZb[0:bPiV:$H/$@h%L&#F(n.nn;0O.cO>1=((2d]_bo!t`V3np*DZKP_G=o%*Ns$Z@rPa^JTMQjmodel<;"kWA4U1\gjZ#]X5%e7e6W*pt(UMDKr^L!&t`XrkF62J]Eaj(m]4S[IV)gN2DO;k,@=QB,'*2a)MiERVR;']f]Lm%;*D:=2'7*U];/V`pa2@^)-*?iKo^%`eVJ-qV!UiHm'2p-nWS5F(67dKFSBdOm.S?cQeXchu&V)qZlZTkHFHto\80KaNVr_g;pA(@n<Uk4VKPO4O\Ac3R?SHci1"'h,@7a%SaLY80$IZUcb/[p=k`H$$f8nddrMSdbrVi40#),k"eG3<7BTqjl//qAHH:dRReg?;'6BSPs*Zd\F7Q(U#(LqW1,2uTL&$.J?_9f"%Qd'q5l]48"-6Jfp7V6!;/k;dWb!&qWV)Z(D3_Q'OgD+/qLcEuOA'^L_aQ)mT`0Mod=)u?K-0_+NP/LfKb/(VC+l?'$JHqiEDG3V'%KjYh'$9$u19>G9[.!DAe.Y\q5@Gfso2%aeXFuqE5`t.=06ECdQ9c'*`0>SlCHuXLa+4\N-#N+Ef/Fe@0/U.hJ4\CG7pUn3s/IRJC%!.3\=f5%\n=p4tg"V7eT=%E=nmqL^bSMnOdkDo=`Ce-jgD:CX226ahV%7OlbfCq4:Q'qlSm`6mTgLXMYFE#eH?Oo$8?.['!>PNN!%bmJoF.HC8!Ng1u;?eU_p.=,.I5>e?AHY)J2dep#_O3(b0pJ,RDjiRDXKh,)o/Y'(S@r[&8*"&;[<g)/ePht<WYnl?Aj8$79jl;Do%I]hP>>Hc4WQX<K62]4+^;e"LSNTfNk61)+X,-RWtotB4R;%$D@MH'CS^^d1PS:NVM:#`)Ik_W91!9H`!cOMVM>5;cJJ@%M,U-F*'%*Y!!!Fi;uhgX"thHcboqqhjcp0Ui(,p''O054JQkaNW`)f*&N(lYDh<jOkmchBh8<A?UE%i*B5!EkV1gJTj\"0QccI=XVStD6.hJ%-h>rC(;0d.%gg7U5AYJ>E0,%90H33?\FI#eLCti&M7./,5Loi$@b0%Tg"KPW:-DNh[6Dq)"=@1DTnN#GUpMnc`XU^NN&:UKXAhM\%kd@a>4ZJTLk(=ZlN317?_D*$^lo0J\(*n;`m,S\pc<HQh]pItKqh3I(5qEVE(M6Aop6":0aaqW"_r38F'7.9e&P0/5Ki5kD/Vtsr%jUW_\rHl.DTi?SAn9lnjrDfQL7i2F#$q?mTY5[Lk0G7j`m!eS5)$rsuFQDiF58aW*,sVKijtZL7Q'J[sIU.(W&f0XO?Pj)JV<FmK%fY*A\Q`%Dqk;t\aIa[IgEGiN)*;gLCdsW>:5j$"0m,0/dfE>L:OX>N9-MhJOWr[JphB7S4FJ2bp7qD3Y34tN^&I+U,`_gq=&ECpW%-KOh5rD"R\>]5^<*7%V_:D9Q<Vfre=QF&pf,f,<nIQoOmGCtN]1:mSONm)=Vmn=0KL=O^/#L^S[aLN5cbkC[&N\SW*:E.9X520j1%lCW9Q#0_uQh$Z12_aT^q*4UDm6YJ9$WA8Q\(hquP<U5LaX=\@6Cf?Z0Zq&_,<W[""HiW@!T28+Q=A;]8g2B,&=0d#$IYQ$_O%qEA%jh=6P`=5\l=;G?g5[bcR>JILV!ucO<iiKo?jUiA=)N-PZ0t(%!BGqhr22u>:SP]e7cF0<g$q+Uq;-a,L%E@qiYBjkB6T]>f->piY%fthiBrFU5e4:oQj33.%Bc+,(B+=CBc0NQKl9j'49kag(u+'lAXj89/:^cO3l9"GWP;tdH"hk&3SAbXJ1`J,hrO"<Z14O0Sk$#-H%%XVD1,K/bN2IYIr#=3`E@<c,7g'l+Oq8;9n?`'/:>NWpi*d:CC"^D/p8&/#om!T`NaKoZ7f+Dn&<Q10FXe_lf>B&\BVC,[-h\pcc8%c8TpAiN5E`-qF8S=kX1tRMm*rK#`D=GBL8R2\lq_lTr&JlaplHliA!$JemP%ie*nN4@^%F"Z13qTsKNn9gIG621'C`/=V?o:d0Aj%:*$hMVaN/0=UU&JCBuN3jPnT8kt2+0l"fI$jf*Vd[Ch"\CO9o6F6"ac$seji/'$K_Z=6LFe35DGCqMoF,PU$R_=i97m^5.R@u^0M%hn6S_UURL`lF5Mr38aP3#Lk9-4][TUo,f<Cf2jJMp9<b\';O#Z3e01l"n?P8@Br*4D-qbtKBlKL^Z;B<LM09u4#Q,4Q2"a.BPA.B%=8>BQF'*GFKd_DR0ni8p>Xsr`jM;n)LDh3"SQ>(;\H68,H:K@0[3G6dkrfKGW>/o[p0q2\Rc:2I8NDsc+M$f3Sb2CTm"4n>Y=h^\%jfg[$8H1]C,[J^FQ0q_Xho[\"X.6.qrGd0-#7S7)MbJqU(;YL:d@K42+KTY.IsbFF)L\U(chtT26a@N?I@96,^,-i;em,k+s.>!s%TO'Tq\>m9uL6!5[V36?K2*,ZZ:r'eKC"tkaCtJ])ZjM*ks(gUYr-&%5DKnUf[`'%%T\J(P$!F^8:DUEH$DjfGEiZP?E79)G^=6A:%(Ztd?[^1Cp\Q54N@bE8/p/>rtN(1DlV8]3$38_4Y,J5L>`F\R\p+PrO:CQ0aT[<`Bn8IjYMtldGJGrQUMEAe8moo6^'K\B-k`/TM%FNl4;\lJH@n_q#d=F0IZ>CJFm@=NO9-bcT!$MK_2b')`F!W1KkB(6H;LRm+q+c9u;feja>F;BIRA](eWk$4\J(p7\u1e%;QVj2DJ%#llmfh/gc"6fZ*O^0,VrcO7,o5c?V=O("p\?ta"\\04ducun)>]d\K173`/^n=Wc;>r,\:e-],m!m,6;B9.#*$VWh_VVsh%Ib?YS%M$+-+$jlMff.A2b,`&9A(//!F'0of0I(7"=\j\;K2lRKlEuctE$.+(dcF#c7M]em.;'ckV]#T5=]:(tqf)jG.R,_jL0ac;;1CCB-%cVjFPCs+_!/nIV)jnT>#!Ek_,W*0\^Z4)F!*SV?f9`5n_eh[>B<6s&"VO:E0`5rmO`W-p=D?eX-)M2if<6DI>Js_3*a$\YIL8L'l%HJ"PG&LqXi!!7-GYjo?f./[:i[66eVNfA`D)^1fjlc9XbJa1I"6SO27`=51R,11_F*2I7RZY4B^N<!7Z!ViNe7;Tu#V&Kil&-J59%;qj-$96UsJ*5]*'"IU<t+b4J*O]EGtN$;HIYr+qEAJdC;8+RU-GnOSu())O9d\nbPe>\[eod'Q*+GOJ^67bJ7_'8i3+K!ar:Vj-8%;GJ%H;o;!S$"6G9ZD]_ED*\^90GKjW^4r\*JXc^r9m*CQS"?+`k"m(L5+94I;]X-%iL$',&Db-JL1@91\rDM&8-mq\7f_#WA[I:2%$puVS.\s\F?];?:=Tfm/p80j%fsr/`5dO.aB/hkg%HM1:!Y_5QL7Ff=p-DFr`/js0:k28M$-uSA)%$pK,Q-B]WZX%Y#/"X(-5C"S%CjS3#iro$;.cc[FZop4rNb8qhA)ZWbg^nCI[VoRJY%Q--I0Wu"D1r<scS\8=3uW!@Nc-&X34ahR3OY*NN_\eW/<<I"fT9Ukg`1rC%'_&K&:.2/M\iLSs#U8=\6;/;ojV_fV(6-bJLl*/[;.++FJmokTOQl&SAjQh9N)Ail-I,&92k$o:+EgK;+fa_P0MU[[Ym]eNLi6*-%PEFiC)NJ'>)6Q^:&1RdVaYelL"G'dW*f`fNM>F&F(#K$rpmig)f6*r'(GuND,Q?WibR%1S8r2,j\;j)OVs1RB"VBT%KXc=.iHbjn%FHs0135kAf4YHq*L`_EI?+'T4?i8`<IYTpk%=nW"O(OIti#+qT!Zq[ZU6:BN]NKKF_s$T,.`DM@8]Z/m%p2n"c>t:W3+^tnJa.Nd%,q%?$IEb3:Qn[.`EOQK5(PtGB`p^?'!#3BR@OfpP\"tJe0[TP*6I"`L%SD-s]]o9qK@T$,8;JXm83e.*L/!_Gj;)%FODC4AZn!8t%cO#Eq]*PY]m)de0H7hqKEBG=9q)!@%.9K)<#)MZq#R/Fm&VMD\!&!5#TYi+4Nt'dL<==mY.'cR>WW`s#+Z_tWob:(,)LrYa?QlA[%+JqU#%)d[u9C\su`eK,Q5kgBPbJdX30=?g%["NEB@:(.mFqM9>_:=3>a41Te$:teZ:dYF=>1q7S>Xm,:)PfhFG_Q3u-5MX(k#4-g%;mc\@8MJ1-bkX(Wh;TaMBi/uiobB(c:R\=_l]-r)'J';nb$E4,[&L*@\4$[jiSZDdoE'j3':q&8`d44do?q?-,^:9=>*?2[8V$+]%_""[uCY:9;I8i:FVG"b&2K^Bj6BZi4MbVsAn0EL&WGGD284Fa\mBY^@[Um&V&_5C6@5?'"%8\kBGKo/bgW&]Z*piP<g;Ucr-C!oO%BGE$p@QSV=QB3l9d^'o$5qZl>[d@NkSo%C`>GGr1_m73=9l+)&.&c;g=O2!/3[*V+&n=iqaMnr+0UKuc@=r"S2N(fZK`scP56^Yi%9"A4=a&;R=,Ci3P*eIK`G<J9aD:,e&Rl!>p5%;f:hg#YNS=F)Oo&o3t:<mDshJjM<QtgN!Dc7gK1bNL08-nNZY!jrQf2*fOlOr>b%0OH,/l8/JRb\A44&7p36dej1Qc-/PedR"klIE<[`>&YY^]i[/<V]kS2ko8-=cnDqu:G&i"k5!N=9@sJI7"DGK;_DS/7]fk!@c,!9%i&WJbSNR1k:7`Y2VeWq8,BeI2mYXe"08GpJG$li)r"pB5Tubl-M;'$+2$f%D:#h'j"qe:^.K.,lLh7VnU.*T8)^0c'-:<Td->*sj%frRja4qXR/%2hjXVTikOV_bXsX>Kc!!Gn;A9:sBUV$Yn]4CTg:,Cs6RrXadNL/MS>RYWZ'=gK@$1G(0_1#PDeZP,%$c;j1>UPV?3%5NpE$_%>VH+hH61:ViDg6P-p='$O,^JIl5-!G5CZ&iI8\6qP8Ba?-&^aO$4I(KNGZ1.Wqfd:30Q8D<q(B7Ma0r/dX"?nQ<HRZ>ol%h!P;q(Q%nkF=plG=6Ws*Y9`?4_Y0XGfWNiRS48lYO_3`a.8.!]0/o;bFG"]uh'&qcIKe4%W1).RFH[i?`3MR:1D,dV@Zo*F*/7Qh%Q(UfL22C='Tn4j=T"tuh_gE)l&q]dM_iA\ec5nb!3"PmB4cR!F@8e;)p_&MfKTK$;EAIh*aT,aZW+mrE^i>5DJ489u9G<`[F"K\n%-6_0bj].=[[4%>9F<YfV<n8gbjJH@*253$bF@FCBLaq*2.UXS:]]\5&/<eXQG=Xa'B]4V=cPWo<P-;eO!b*+mQ)7%_.RF?)J2dmd%?\sjHJE_8X;'7f(7`au3W">$0E,!CRh$%db&8n!d=^W=k7U@?J5TAlt>9p^)qdDY=Xpj4.W=#?Ea<qWgW"6gOQH/'!UY-l"Nf!'T%FqlLg@W.:p0ph`AbqX%/#HhY'9JnF'Qm3':]/qq07'%*Jc!f:;fbP(Gn[Y6lF$8.5;SJ"\>ZSV\l>p,."!*7K3NS9u]aP:J;@Ze"%LlnM<MtPSSkNF`]TjuHhD)9+/gUkf)I&:H++kH40_*,u\&[:EU)_TH2JLhFF$36;=!SE2]$tZU%&\\"SX]$+0oQE-)I,@?:?=QtK%?lHj4QeQ]1.T'6/?tZhl2"8J(IlbH"6"s7H1eMlIiG)=[b/RO@1-n6Z;VQln]@`;2kb]7FNlf^kWu(k>"p;s#@<\3dScXFfAn6j$%J0asH#,_kST0T9D]`H3kQDO.&+XRZF[E*&o+Sm>l9bIJH#]$Rf\]0^8PQG5M>ph^2("1L_BB.+%KXeB3dLD!)j;'A-650_1CrH\L%C`K9[PPlk',-'dMCeIA85X7Fu57t2OpbZ?5<=+<(Z#',e#`-Iu8V&5h%[i;S2Gc9'8#an/:tUE^W[!f\b9RAJ#QdIg8N^\mG."Pk%Bab']d6&mg\m.sEaH<;4V?Ij[\rF4A*.oEqFqZQjM86sI?(EZ^CPZ3#It2DRPHIX"]L<)<$`F<;,U&bs&=_:2e3p7thu]Qp%5dA.%TKSe6Dn.ddhihqT!,77+cR/_X+%Fp2`*2N*&0QlZag.m!P!2]7_bhrXQOp*.U;mu66/-"e!Mk>ULh/;oF=RBuH"qU!,Tn]k)bG&N%n_?r6=ARNh/g\n^K%#I!>KT0o4_as?dn.>;0)u#<Ys\T>adWpCAsahYV=brS2N&2ik6QmE+:9Qp:-KKbVO2Ic$4Y*71&4o`+QPd$%0I<$pEQd@Pi/tX%Gfin$eLVJnkb^:9?&R2F2A?l\$m$[>1Mf2#P7Y,uWZGY3R%*JY?I0BO*.qnI=E85kCN>HU(cQh1J`7Y,?0TEs%#bC%EE9q=-q]jQ81iRIjgO[L]_LC];Yi7`L80^`(S!VVkTUI1F29At*(dJoRS@rodEYfL[Q#<#+<3VssVM@\RMNf+`:^f[dRd'#J%HEpXQ[dbnJ6>Sfn$5W&$Tqqh8-&`L13Sl"]/((&Vbm'.B\F3Dk;V&kml1ek,OKP#l%l+]9_'%c2#ECiNO,h$I]atc`4l<JRj7I1G%.Vd*"U9arm,eQ`9[EoUj9(PV>*0sqISO3_6Jlr7Q70S4TULLR7,fI'(6!Wtn$'8r,ACduRl.\hol]S'"8;5:J>(Xs8An0;#"ki)H%M3_T58-EOIPqoro#1ld8Wf78$2B.6VLo]cGokZ#0SZ-dA;f3)<J,*?/r$+*'U=a:*g?:VT66&&iTbXeV06C_eKn/Zs*>d*+_']S?%[</9;gQ=Z_RiV-o*9[NFGi*^>Sst`eK[!gS)hM+L(k`']KFi:2fTShL&n:J!4BcgN?rb#6H$8aH&*oAMn3%sUGq:3a:)H;[TR!U^%8aj"D'Z4@8@j'*kKgH?PVaRIn=N%4E#d$QHnE_YY+aCk\jW*n`=b/WpQo%J_4sU9sffl[N.$!t:=$bn]MT$/-"JL.-dMj2VAPmZ;%9*!FL#_bWK_4Dt&AXo@:ZU5P-`DI<Ld4HXr\LEKOP/\ZqF)]d[U1=8S+prB2SA1:b&V0;rGEuK+Ggl2@V<!5\NX'Sc8r0MN-!8:q%,2jR+a"GIqJb#1[DK,Z?NN4EMVT5Nhg(^;CDQr@B]TA^SV0%Uq3pfoc':WVg4q+(5"0n-?(?a@Uas)YbFp(n_<6nuXHaL-a2rrG^%Oc.H'!">m)';s90KQQAg^`e4q,"Ft5,<!*$:<:pfrHED<^6EJGk_t_@,VqP&,TR>HiMNBMak!$dOI!^TZ>7"L[E@tW$*j$48VBg-%LP[C0#b``ZcfQ?mUoQOK?1V0c;fJJQLEQZfYqLBSXrp])Qqnc,8-$gFf/4C3o\d;-X1k1&8i`gm]0%`/6o!X,p#[-N&(b6c@/u<*%-jJ,:M.h/eqpnJ$(ZJ=VQ-pQ)$DK7U(aj-Y\\<h[T#3WP"m_Qr77.WdAe;\q,Y;G+;d)ug#f8tSU\n6ej\e-JcLt3d)mLY?;hVZ>%9:NudkoQ,L]u/;*R7\TZ`A"hD]+2d)7\t]8@FH@DhVg4J0*2<_!K;h484tR(aAd>9BBm,8QAsY#B,P6/(rT(=AWtfa<%&o#[]iXQ%KE.9X8=5S#b#BjEa.>XPM,<>Z2Bg%MF&sDZ8_],Z=$jtTZY?c<>dCJrj[Of;@.)]q`,>,)kmgG5-cXZh8>3gU!AR/Yo6c0\WQssb%H9*KB55MR=TuqK9l\lLC0KtsaRS>p,Rl7]"N3j.LWq#65ZWYFCXD_6TnbXA!*8aYs';*k(GK?=Cr^?kXFnA;1k<K*i:I'I`RV%X_%Jc\_)h*VF'9@4XrS7Ig6_nsJ#%HC1ln2sPkbG&Uq[MBG/:i6q/Jp-Vp8%O'.;5F@V#5W1McZ?mJ[b3$=A$D'ZZ:B^[7EB>]4sGe_%ES1;"EQF:#17SSe_@@D<fU##m8?Trb)N,i#UfAlfY!in]4<e<L42H)M0P<DYD]"*'HjVm>/3O2W9L];umN!(@#+oF&oG!>$LrE:1%HrT%^VL]9cEq.h(@r#>(:SeI0)\k&b>Xp]%2oooL:oKUs\r?Y#bd$3)ln4+UW-VbUQ3QlklX>0.GV0cX`?jE80EOQPWY`HE-XOs\%Jga]gm5Q7+6L6=\Pu(8mS?>aXX!*:snEFUW/Nt6,J[^f;kg7LhE"%Y_HqF!I%edfXE$GXheM&mLq)r"o9r^\qS=4;'23.@)"(\1N%Q#oZ]=9(,9A^!-LZ=?$p%$cDCM"#W;f=NL90W1sN2^BM=4OJ10G1rTf8;KU/ocTNl+O$knk'!$\\fcGucR'Jur%"oTLs?Q8&!P?8%,dK.@dko.d9P0'<R23lW*3RK4O"?i,.3c#*[:AGP@W_:60VT[bXFqPic2u<mhZGNXpq%=m:ZBa_6PP/Y*%q(,;1r'TZ'9VmI"O\e%?OY7U:b^:m78_#:6Ic.)eQ'c[Jcn__kogm1ZoH"r]B]VS\#YbF"UR^eUI]-F2C^0';GlF)`Yg:eX`eO(Up+PN?QPUE=c*Dp4qN7L%8YOr)i5X3DEEAq,#LfSY@2WB>ql!$Tojjp:Qj4l[^02>ASk>-&_!%:4"S#t5RH^I2"X!qmEIceLM*ZI#%#Or`&.f0T7Lp^H%+[RI%Tq5u2fi(SYKQ(9*7OM=^LslOte[dK[q^0EOEWnd9"c7>TCjB4+$fEh"2E$gWUt-!U+b4@MhE2:mL>M"N6M:X9LhN$Q3D-GP,_po\%RMh9L!3hG:o6M769%@/rj:fk--KUA_]jl$0Qj7Lced*`'%U^p6,_5XuTnFs7FA);&qWW"`OAtqX2ZkXUK@7Ls4EY(lOJ\m#2BJuF%*4TC\HUAKUe&GeM_F#mg+9ikoH[NJAYg:3ScVpp:D=c.$7^%*RJKl'g?JmClJg<3XTb8CE?J.%B0*VI5R-P?UUpgP$d5nfJM+^g<%6TJlcq2[Y;^`uQMdu(\g&rO/N`3s&rC"/`nUUIFr$mMK^%[!a7#f,:F8M#C"CloOd?NAOm7LE#pKNUQ,G]#KH?Y;R=,XDr:I3R;R%Bp+\^.U]F)F2=)/b*RXH87W*a',V]!-%'G;QZB'olfoWm6IMShW$SpB05O"=-Dlc*R_%lTpl-DT&hHFbEsDLG"iOk!iF2ka&RK;=%bg`$\4_gJ'(R7hdOka*,:^X/Cp'&d\;VtJ(W=kFFDc<3+X1$-rY*RfYZu%6U7IfM-a=rN@+7$HISP*0(o]MuVKE\H2U\'e*Uf10i%,f3q.nAA3s^0*[n6-QM(0n:6JVK%C#!?Qfd/kaY!@ZY?(<mHJQ][[)%01OEP[gTTqm^hcb&!E,&bR20q&;),a6Vn'oQpiI:SrA^4%LeS2fQoP6[QQZP;YlW'9K(5Xo$NQfrNHkU-U2-8,mFi=Udrg]fa2WE\0e5eLQ4PZ9?:ibFHuI)\2K;E4^>`)2.R4tB$)ZttNuNK;%;Zh]/)IlJE5Ve%HOS^,-9P-1`P*)[U@USX=Hg,&,'id#gOOus?,)/fB+Ph5IiRDY#A-Nko(W/OL6S9.;$)cDr-&hH+ZQ'VjJL0uM%n0k-+N0Fp[/2fF\aUc_TPV,9fO\_p@@A&QM"'Yg=0%Y`C74,oCLdA)dOcHTfJOCWa$u4PD=mfGBP"oQ6a^^KS87MH-*KK2MRu$]+%+]2-DX,ua1';`kig7IIC"#BPjeJGC.N^\Jl/ae`C;t9oI,jd]1F5:dooMfb!rJK!&!'r!37q#:Jg"(2="n;`g*"Fn@0K<*p&;PEe%7rg)h.VS:5+\>Xm1VGO#6U3bpZE9s=7RCohgOq9>mO6sYW$Ir[B8>O34VYgI_YTR4@h>4^1Z52G'UKB-gdqINJ@M]981b)4;66Js%KPb3JO&Qu*BEneZdCGE7%I)=!!/R>RE[OrD_=JNN0bmS+Nt<T>FsI2h7p*BfAI.5*\uNaVcVe`dLeA+EK]u<:M?i_!iG(9INC1L4%"B_`*bEI,$@@t;i.@!lWTF>$KB8;[Y>[2O\d9+'e%iElm&/^bH]<9%#9s4*g9)q_IX9kn=;mrVPo*urUWKk%ii9cW?FK/uX2'ngf%!7;40&=P/r@Z/E<XB67k*3R>Y0Z;\aK-o1nN?8e,9s-niL2:>1i1[!X@$WT6/Fis`\eMqR[_*V)6A&3h1%PJiKJsB.(EhPO&R^D6%!#u&2IieYMIG#gZ,etr\7-N2RZ?]0:3)uk]BrTHV,u1a8`<dZWLlLBSY/A]9`E*[K4bdB5[=k4#07thghuj&JNCXB(";*oBU!)@c%3C_/:[PZ"<mdU*PBW6+m+UVt>UDuONl=thj+^/jp`P@$1-!mKTQs>3$7A<u1AE<&ehP+(K5UZmk83I0E:$2S&\c<::R`1q0fB0SJ%7ibM.N72k<0EWHaFiX(`J=,CnB3jB%3T(95XWn5D5m8/:!&3&(mLhh>/8uk.(6Spj#f'W(7B+?rNAa:\$BQM&Dt>u^K;YgO+msR(%Rg>`B]rRCF"Yi_Ocg]qrP@%YYJg,lSWp('G$?NgOF[J9dCRe:h#)I%4W=YDs\Y]s)V'#ak#11#--'Kk$lqH"@ST*MiDj(>;R2XfW%U%+3Nma,C:J/Bnam3Mn9)<>VSdmO3"RNJZ/ZCsY9O9K>M,lgpbfSjgs)BTnhK*5thN,VHd#7)Di^knljkhMSW:*:@If_DNR+t4eU%UnhIf@gN^mU\&)`hOFX$LG47e'L6Is4Mus^!160O14k.YR5>We+p!Kc9-Q.t!MC+[A8X&#dti'"aP4+)RrBe@7RF$oo&[KL3\-F<%hXI(rgbc0#3T[>%6!,:m"76pTps>^b0n>W,TC;U2'>;i3_<?<#&0"b!9oLeY@m-f[kq\4[7B]9SK#k#=Wb9s-(db;8jDQTGF(RM^%2WSB,GBn9?heeO*dYW]qPPlqR7N!i;6Jr;)OY1-R!2<El3^n>).[3oJA.#5MZ!5AeG:C'P'F4_=Mb[2n<JJe,FW#00!2&#r'g7Xm%9fnes\0SJ)f>G/P3q]Z)lV]!o33D&GbUD?;A4`p1a_dS8b$7Ol`IZcmA2,t+M3m&Ge9#!HiXoj%CfpI]/3G<S&[aNFe^_f_<&C2'%b4/<tRQL\k^A4#MEgW"0cGP_kHUtZ&,#,eD5uKd3*8??j#TeOi:8>3dB9Qk/_S>63<V&aNC,-\?KSDsl,ujpOYmAku\KCq8o=;ML%O[rpc^ls)rVC2U-hcDl^"kWop/_k.k%2):$,U5>4_KSP;#+-8<<.MtoI]J#kP$Bpo"G9$N,Y/*c37PGFc;>-OpAtWNZT7.MX^cT)%!QV4m51T6Rc:Yf)J@5cTU*i(mRGl0%Yp(f;*#ta=GoGu]L1bL^$)o&cV`#P<!6!g*&Dc@69TFruDj#cU6t"f3`Pb/Q+96I"-I:CN%4%KgB8,B``;YZ,Cr5*cEjqt+2=Uk\)OO@W!o\F'NMG@)eG"=nmXWALY$N9VsDdVtAF'5YVk<2,F6f%B/"%r'1\<Kp,^i12IA.-bT%Z*C^m2Or<7FLS``hqfkmN"P,UlS##p5csK&3B9Z+*eJC18PA6.G3q3\$LGWoc`]Zo8:bF&KO_SK'?`_q9=g.djR%<0`3.m$*Pdju%LR`9CP<R2RZ$GG'h;,Z#45;(rQ`TR;;Cil6F-k(1($DsN.Z@kGQ;[Weon0?0YN<7A7t1d(,M0#c4*'F38bt62a."8<*Gn#mL"ad@%K2BgUEsE1m6VG4NA(oAt\g_d#M-IGVZBg3=!uF*&%SF6j1enaqi+]jM(sp'/2L,bSFg::8@2_pVd%VP#^[GhKnP,h@P?l?J5`89Q%O_\=J8P(!LJ*&honXOumY44f$M1"8fL?JB0m2Qq^nQjj!YN&kMY45a`&`&P:n\C_2K\M(kLT[N9j0a[&]1DUnZqBS6P^H`Q.Hpkq%CH=ORiJSe<elPrBAZilJXK+WP&:t?31`fnJ_Odhd7b?RA\ou4+#5oQBM*.`1Bm["[:Ok6XocW@&@rhBeI0:>p@?C6f3-32Y:W*)d%E!>Y41Pl]+^5Y+=:Z_._56Lb"\uWNT>`A!S)amQgVR7=3#u9+rYQup\\LX$9H-"o4gL;4#Obbb0>/64rVO0=l%#N:g^QO^>7Lob*%#<aXI.b-c)k/=ZgSm)^3k2O)`g&[BYcJfQ/+@@?5.GI'BOSqp2,k$-7#N@(DdY"#$Y,2l!a[%>(*c0&%KCdZ%8G.tWFemZs:cs@%%+dq2_3Q]&<FT8G)Vaq0"."%pIXIQd@11HM(["I9DiU,eu#*JH1s6n;*1/hq0mQ8P3nMdAd^a>D>iK0**"r%#91_oa%]P2C1]`kn,%B"h"$Nhi_=O<O0/nKK[=RP"b22X1"P+fp5IN@iuBK]5pJE<j?@DUM7sFFT)Wg"Va3is[jl`X:V5e:I%^@c*t6JWV6]?g4R;Kf^s=%$;(i\N(%pqiFB.:VKu^`c^&_sWLR=h)jqC_b/9qs2I,VUrB!)JV%-fH;5O7)>L)8>cuhRCW.XDFo5ZIhrYiALH0pPn"h/#!65;Am%KQ&&>V)Tg:=GL_Aqq8g,dKO-Yd&#*BXW=`BBol>Ddqd-VV/AJ@8kKc)UoB!GQ*KXg%5E!P@\S)3hoV^IZ,Su#SG5OaJ0$Wu(6u?C%@iA-[n\T<>i=Df5F(ngI1>k'd!To^++;D?',gM3Vi]T^g$Cj3=ZKk%[Tfb*tIRGr2*Sm#6j!K1-)6$MC_b@O5?^"sq`+&n7CRc,%%%L+_Q7U:(,-oSt&b#t'W>"(>1nh\]Y#e*%\!LI+U@Du_E2[=]'-0Y`OmMEBo=kXK`R\.e-;f9@^E8Q[s*C$m;(,.T+rcOlM\f$@Z%P\&8lOKD/6]AB;*ghfZCd*ph#8SXfWDUTQNMpZ=sdWE7bT#85-Z84L]Nd'>oQ_d)&(beJ2]Y_n75PcsQicW1"gS?eoQlNS]f.Pah%#I\No(XBS8L'-k\ma;BER[:3l%P"e"3b'tcgIY.d)fm$i)HUO?;T5(NZ7RMA\]2@ITc:s?U0JCY(ob0M`6>a!'J4RrE$Dt?3FA5f%#PVG&5It^4)c`Y*kI^<8LA'3q4'NeU0"f`7[&;&o,Ftn6enrN\XV+/;nU8V+hh^tjCjr0`+(RmUarYLb7LT8G3>K1Y,W"aW=LRQj%2r)"`JFIAB=Q^r,did+T*3]?7acf*#Ta^\iiFGfb_/9!%q"LRfKBjdEC"1t<]A]OH:&#3r%`U8G:IZg+`5fRbf^h[$8Fg/XO/l7?%i!$.nB_+b"k<n"D_BueFCFZB,E#ssYa,@U=d=5`-Tk[Pae_&eq^Ls>5F[JNR8+'W-L9:=7%>%176HpsTjYUu73,:WJK9ULO?canY%*]F+hC;V[?Vk28./:><qfS5l48fjg[imnerYaj3"l\RsZ;9Pfl6:#7X@Meqo\YPd5!]M8lW"c&s",7$#*D^;86A_\s3oB&!d[\^s%d2lgcb<;Z6)mb-K,R'\PcY@3"?WSB"L;I9aKgP1F3`hd$bpGXr)eWJ)deD^u&M>*t3JBE6GW*7\)JR^J9?^DUDkY[99PI/o:OPm\%Q;,t[7LD#7'Hb.nY55rIq5\C5\'umBN)B=@@G.Z@GT62m-\\,P<pWSWpa5[k(Sf^,Q2mnUiKda3hFK:S$#Se)CeIC8X411/1fSNN%C.0+6Wn]UP.Q8<7lsDa72Bqf-IrXVOFOO%U>a<?L,8gXD!h2A^oPCI)O`p=r34K\o@TGKXV.M0^Fm1$bg<YS@oX0sfLb-'KRUL3H%FH]to3c=2^\*@F6SSaD?=%XpNqKH(&S/6$4%7I]6C;Ci^>TBa(=3kmnj'X*0g^3YeWr:k6\\b>.6k(-m86.`<2?MWL@tV$;gk2SW%_F5L-F46'l'n[aO84c1;=mfMK8='srqeS/gVF]<88W&-S2VTi1DCaMpd)+"C7=7q]'k<f*0R_T?UT;?cC=0T2!c%4VZ1)pZ_=l\N%;_?h^a@P/chVJT]1H,Oc\'65KWSj;^5SMPaBedro/.-GaO`qPh(&.<*316N73:`%`\K>"R'/08"/kqm-?-WU?aJO1!<Gn2ZL"9Ij%8MLNm"bT58625JU2"%-VoT9PMRWfrmJ*(O?M\iA4GUocdqO-fVe_X3s;Vqdlr^HC7li!bFocU9NQ*7o'ZUA_Pn3eOh+Z5mrFhPAD%c9<%-_]."+]Z57LNFTW]AtXO<W<:pa]g,mDno6Q@nq46XZ5/Y;.oF==0d/_Y`5C$_XN#VUnm1r$'ai%EgJ05WV<KM'"/R<WeY8hE%SI^Y9Q5?k]f#b`AK`aYr89$E<9a[=uCp6k/nl[PC%(^,ABHV:e;r!1CmM9@Yj%B5=33-LASaFi:\Qja.>TN*4>\C?q\J+PEHt"PC%eQpa8344[g+a)`r1.s91*lXZ9HUUH7/'UuUR,?FZ99r=OZMgg*c;6reAhMLqZ;KouL*,89<SE>EaCT3tkIDta^2V*H?9Rp,d4Mu8%Fto*X6,mQO7C`QU^VJt<SV4hNFr&H'V'>frQ!]+.<YWIA(rDN!Wto"M:>Bc^B_?5^B:KZtL/(G@H_=%643`Ah\>s0K[R;;+ckjPI%-12Edq:L[EC$pKq$!5qk[O*k*>\4`H'UWM>8@$G[M-'%4k=1XUeTH;\o6]X=aPH'50."<d\/<<b+KWs8T,;*F&!B.J3ViBfSBUUk%nn5\5I!_oh[a\<fHK'$0jep.SJDp]3N\)a4l[(/>b@Q%A8Qud.@%]Jjq/lcGeRd;k_d6s'-V5j-':r=1qX>/ddd4FXOMfuS8RcCr%n1N9MOhTfW3!Qig1HDn1IHkg8S]Ya8$ss,.C]fD+=JLj"erRkcj6e33Z8'bbHj:1\&#'N/Z2K'\3NEF?nm#IAS*Ch6D^_M4EZ75g%BU5-G8S:*hA.CY?X=J=n5Ht`BUA"(s\TJm,IRnL:DTSc/)&9GCOKK&jq7'j(;pT[2>)00%CJM&'.2W_B4aPEfni#6Z-](Tr[`3EE%U52lo(<C7FaW3Jq`o]"=W3V0;AV-,g6-+%LcP9.[0#HMiU^*?06CP4.W(2bpoqZb^_e6s[1/J_V$cW\L7'?)D3O;;bGsUq!iRS<N%<CKIm?90HuCj8M;d_Eia6^=u70&@=<M]h[e3^thZ_I@I05>-bX/J[n+F^*gGgK9eFX:uon=!?II\QBurPZFNh-<hpe^s4:WO/;0?%p0EEZ,pXOC.SLl4fUH+]0$3FJFHKUK7<Z4tCeuD7_CaSqIfTeDmia'c0"R1YCLc<j95KsKk1%D\KZrJHF9Z&>Q5rnUPH^2V8ZW6N%QjY7uY!p@N,F#+lUX:F=Cl']IQe@]Gg^DW5MG.5ng(,!S.idKWRM>mZ,([rOI0\u);OR*J,i-qPZbrZ:8_5se%&^\rYoEjCf.0o^%b_EDL`c4dhY0ek!Xld]R7!kb.a)*:#-L=*Zd*B#^9]+qlO90bW:J""[UVJ$;6Q=uH/`2X_hQ>PRU$rC4oaMRl*I_NdVo]'le4edH%I)lRfNJ4*,q:e(?9JS/A"X]@(eHfJ8=@CXih4V'-W#HGE9fn#4j+KX>Jo$[5ClD5e,+r79:$`SgO/Ri=_0rbB:)1lK.i$/*68JKl%K/UjDhuB$]al;"1aXNgq84,h+IHYHJrE$G49nPO\nW#crX3+0sE2&[<88)1o.\b2c4%XbZ5-hI-I2KKNh%i$rZncXJfpT9!SYqU@%Fd(1Gq<hdi)?Y/V.,(kIL*tZB5,=/`50dHf+Q#T?E6`.3>n4A#rL=hsTs8YEhE,orgWktP.PSd/!^.-o+51,U-).pE_lNraJM\3^%RujXJ^\*+eQ@P$9dfia!HFl`2]R/HSbg;J?-mE.tfB>>SmNTJokCIalK\]J>9d6T<DYFt,,iNUL8#m20[_qZ+Wq&GjjR^XA0(cSm%##:k5;m-4baSG")'RY'BEA<=_S1Qc3N<[B`\t$pOoQGj]5e1:c6EghUT:DS,"Gf2UG"A3\l@!BP_gVJr2A\b">?%iF3FWflF9]YY%)6%%EjjU0%+`f6)`#WrfJ[(>b.H>5H=d!.L5R00A:;#F%oG;/9`H6q-VD2:ONhr'SpI&R+K?)[Yi=+i&+_O0AP/sF"T?::kM>BER%(_4N;k9#1;:"gHM>G7D$cHKBb;H:-Tc\O-u0\&5kX%qQi(kP)h9soskZ:b`bgIM^167>XuMD18c[9-!8jROr+gA27^6?k`BAr[%#%r=.eC9n=ke23)W8%X%0hM,]]T&&]@&E":.F5Z50TKK=SfBSmfm(&B;u2&R>ET,G-]_MsJu*atSL=X/12FsU)t;el+:3YL.gh10lI%Eum5qK5Tb/,ZYOI*B%!E=DQk@dTGQ#fCW?h&T*^RAYu)%0:TZ9;&;NQ#Rr->#YTjH>YsL_YNOApL+V:Ice*`_Lj!G-<-,?5P#bER%5A2H=G(#il9?PC$)/3,O]D32;/OYG-]tQDZl8=>*Ft8Gi#r6S$BR!&A)C;Iu>Wi;#e[AM]A*?"1.L$N;+Sm!,"lH:Z\#-B!?H?,'%Cgdca,jA`d1U-K,9=W+:24hsr,B9sueSG@\2A0'V:mp&RHV59jRFOJ:g*TKO:d^p6;!'=j45uf?\r#;p?46l@A"(J.e)k4^)rq@H%#"E:4\eAXf75ir(95;']:$)*E3_1c;a9Nd+F0oc2NG+),bZ<C^CWBh2j'c3'Um>iOYYEqn(o$lH/8NVLQgIPgVL&*0WKTVG<K]1m%#47:kin;LSFpi&ABI?OZ$?CQ,B'[[lAC</;HdtZb(-5n])@7pCW#cl*@YQtID)(M4-W#a[ZFU5qS-Ku@7g<kLBr'4^=KUmQCREAC%3QB4+rr^iXb0\seX:6.2GA^0>N9CHcfK.D\!R;I>e9Q/B0aM$HaFX6'Z!I(chL<"-XH=BHk6TsYN5G\u,mR\d>nP(AO7*9SnAZTO%]a:k+#=9ZM5Zi#o?$+&TKM_t"&k4q4eMhQWf^eCN5s^^:E@JA1HbnVV)]C9O[rlWrD]VeBTG?9MmAAjXF)0sOhV]2HUH/dKl:\+4%Qh62%Qo7-?X2($*N_Ma0F%[Blj!t(#Y'cWb<UPIIY+[a#PW)L:0:&W,APoAm.l-^/^0p=Q<W=2:IQh]"pKG8OhiOl-_l%+"V;b"2%L.^nYCEF"j:?DS@>hP2PB(FlpcSSmNW25'M\Y9&Cdq2b4&4A,K47#jKe-oA$6.rnuE3f.]I]RBV:UsH^(s^H3HhN+h'Ms5tS-NSU%\$\Fqo'gT1Y,Ro,+0QPu_[V9kP-["Bpsnoi]X=e8&b3f,&.I5MXTXWBMLo5Rj\on$(!3.K)A^lr"FPOX^q@`dUVP3Ic1KG$e6L3j%C\&Rb[iLo9*isgdC*07DI$,17]+g:GStrI6HqHi(aHO^*#0]f6DSGt$;C4_ofG^0>%Ik;V2"Wa[gO0sal>^\d'9n9CE8mFR+&D&Z%<J9@'IC<N+PNC<i:0K*/Dd<c^^QYaF?hlIl6_6n/%'C#Sc-E3d(>i:(WOHoOa^DVLL#9#<(qmWsjr1<6D-T$u/f:"(f]8nYmO>Vg%a@Y!qRsp0QBRk;TF'Io6>8ooNM@=;Iasb?-BgJ-2moMGoQFjDLk-E+2E+k>MWcXd`jC[TugNcE#2+18D#45WqHBnU/VXX1n1oY0R%K^P(q9l;lbRDS+%pQ5p0^GQ1>$Se,OCg+Jhg/g;n)"j`P2kT8I<J=)X(\ZS>+]R7:EbX@L\@'=;LDs#;)d]esgWTl<8NI><2H5F%%iNTd/?cKReC(tLr>UI=89>cuKW)F+A`MnS=LO\b)g)Kc04t5jC<;Zl=:[)SJp9n[*5#1t`E0G5KDBLB4@mQZ$eW]\%T'CI0ru4jY%DYG!;-h34DVhg2$oV"ZlTYqs;`Y@>o8:s"nF=f8*D.`*Gd6<t<TOB&59,M/4_g'FM^g1eIJP)Z%V3A`T/"=3@q6"Xn>YsuMQ5J_P%65SCdG!*N=p65rDR84%i`H[,,^Mc))I3T)*R!A#3g!EJD?NgYV6$sI^Z/TIQ]]F]-agKXt^@b]:'^8i\a\$nQKdZrihA:ZhHh5[A%4m;9+Eq^nfP5X)]3Z-WfpM_FH\ZlH2U!V`gh,h/I&6ugqH1U[ZPrI$gF,>Ki^=Fn0>W<Ee>TY%'o"qC9547[P^Sqa\HMj9'o>*SG%r9='%aQLGNd$LUA0g.B+d)C#V6`J7%.d)1,WhW[[ceV9_IDh.b:HmA]q`sg;9m[,cQ)_GpNX=JI`=aV)n1IH+-boktS%;ik5#BMc%Z*,:F*06aFhDims0^n2bVB.3%:.B`V2Su^\\j,4]"qOWu;[p%c7(VlI+_&lhh!U;i(!ep1?\Vr`O$b_6K^qu`7DtCjTN9Xc<lo*&%/)9<j2\JIcG4!:Qpa5GTK2GDVMg@0-2=jO*D^^9ndU`:t,0CRp^F*HkdL4!OXa(JnH366opImZ8\(YY).^bWQ[Y/qtngMhnk_a;q%c"a-Qcp`X0]>6PEF5`"o7>Hb";H\Pg]jLPL\ug4]B3YumiIehJ!q-!IXj_5BH&lKP19Qb@CPQjLCs4h%iOIM-e\^:KK[/;V`RJW2%@I;2L<bFi/%N2U:5@7hp>[Ardp6$PR^YR!=pfF12-gL%#h9b,@gB#:O.DdC;IpE0B0hr)$(*F<W7mKCT?MWDYAk3E`8N/CbQQVfT%M=bjKB',]!./954Z1sT9T!p0/NX/ol*M<r*UlfIf95EbRj0[p*.iO`!)p+'fkPSUM!eP5!=en:p",5h2"q'd1Uiq)K\4T8bhFS@a%PmAcLj9fqFClBJiKlkYLhS>-tTJsTObJ>2ur+8&"Gk-.]faBk$]p$M17';(kV5C1^S[V?A0QZ;a*6f<WPt#R__+'C5=R2Y;^YR7i%WN_qp&`O_3p'@&O6MipnqB-CCTeF'.XR,KPE8;#iFqJ:!F0E2W60`eBBFk/,lIZg1^$%MNd?gXBn$Igb;rlt=!Fk?q%0#CY5qC1#%D@mX6lY2eWK"tdF$eh)Gp37J_cZ5o/UM>]qm-[L4pRX5tZ(Rg&:N5B+6rPk"Ji5q010_T$,5;O!4IZ!;7bC,3"7u5$Z+<?;E2A"S%Md.H`-PGO"Wi%.dRsb1.6,4\[LDO>$7]&@;2r78TkKYEBhLuSrG2d/MqkK8n,MBK1$u+:9<Dno,LdgbFgWp]_>G9,nHU[VJEO.B)%/'b0%@nST4m-_#'quRgGli=P'n@.^<.,BL$)/%NY9Tf%r.`:;eM1LV00L'X'[lQ9C/AP-NBh9;q)dR:uE$\:)MC4#FbMHn]#,Rf<%)q/'<Z9&QWBHgg(/5kk!%I*1hVo6M8THFts/,=_iotJ?,L-C4WW"__M@_[&q#&o1;3HLj:_S3SU[Ia7W##hj[3=+=Id]?,14fRLr%$:1cYYH]aT<u[0GAul\7Yhf7Ojh(lc@7KA3PY)mDNhcqL>BGKfU)lk(6A1,Pdc\pM(qlXb(0qc#g4q5Y7pE"=87%)$#eT8#]gMke%mK5q-cfBQCm9(?XIWOaa0YRfG)<n_oq&iELOp`!!;;/1r1'j6mf;[&e,RSetUU;[l=AF620^b&\h1ttN\=#]6<[g?;:3V5s#D0Z<%+,[(P+2FsVKHE9o6B?mOD\H0O,$8E`P!!qLkp1>@HlJn@73,f@%d]RA\C,j<k1e)bdq^=h7'U0nr4,=bl.r<U8[q<X:/50pGoO\+%%/Jff``VC*EejeXn9T82B\?N9)iP=B22C/=?.(q6/iW.QElk\eJa\+n4?/b^,><rQiMQ:*o*<U.7M\(6m<J]<q,QUR6BIPoD8I\+%7UY1hjMW79o%_/k"W>P(TUIjg9dr+c&U.LsaWDcPOmJYl#*M3,.XC1jdk5S!!,#VtfH_0YOtbbpR@HC<3B%fa^e#cE1AI#X_`f7*%.&<.n*Ig(5^=RHF-'JcZ9]/afM(5`3[+cP!P"[`R;C^0fgLZGJCqj3%+Fu9#L+aiPH6CV*9s;RV^.,D#Ehtl\MV6ni`X"Ku1[_t?%cmhZ)c)erp<MIaR`?Yl4`GFu:f2u<Pj`f?H["HAR[)*XGiXsEQKAW8*316a4.pVTo(p"mqVnE*T1KOG;<sFsF(ipGtd\Xa919KER%YDf^e<0CSC6WmTeUu8XR:JN9^m:#Z4<V[atRW.AHJWt@T5BA\?%teJ@8.fd1WSae!>ph0V$XRQZ[m/aWMIGIlU"$V>&+7Q^8#k;"%8SaH,?B!qcN'GUaLtS\B`:L"9@GL1%WAHO'Fu;'d2k9FW;7PiF=H^jgRBOknOh?>:R>X42'u(WPQ<OAaY.&8G,r<RWDUuK+2TfIh%`Cfka,'p_+q`WJ+cQ.&#4r;djS<;"B2X99eRB2Um[HBfCr'&rG`')rgl0'%(+hXjR>ZgX`ie6\>!Qk:]%eA1#\G\:Z070&1I(3%b%Jt0qNbSf:Jr^iX0nP18T]Xr(n!Z:B6IV.SIU8Y<5BRF_JV0IF$#H6+FC_LKeA11i%7=qs]h>V"JoU_A=:@*DkP)N>d5*K?nY'e,[%/+QO\GuOIeUOu@>Eo.HuYiFLm]4*t5+>Pi7$?>TJ2D\VBYtF]-0Lm65@mbrO&X@E&`2t]FFH_:::\'X-\Jb]8>h0b]lZae0KFWb*%<".5j"L$B"/3*lXqA4VAR[Q9V/D>3riD#!.or(L/.`/W7aUcMMkIW`"<HWN%nRbEt?DU9c+<uBu'6@q^,E;M"g*0382rKTl94s`d%$+qj+C(PnH'']W`;GBW506XhU;M#F%OOq)(KU/YE>42aj?g9$a7A(f&>l4#!c3fmtNrnNuD/!&YqMe/qK6G\R;OM(=_(>BgW+k1'%ios:911F=d:2o!fR/3@E``7$GlYLX(\/rBs(K#dg3TQ7Db=["8GdDNJn0U8=?Y+R49K`n>2eu<c%c@qZ*"4r(L)e2oEku+DJ\bDR%Zl10t=*uT5-dmEsL;#Gq0Wq,<A90MMFXJCh#$hu/:<rXEAkF6W2Reui(h]Y70?=#'4.?VWr78[i_`F7P+og@rb]b,"^fe^IGe4of%OKh,bh+<Z_R?!FTG;`nQ00FYr^?q?]))37>,Kc.<\N40P6i0GZV&\h=-#Q^tN#,h9Tcorur!(`rViG/D"Bf`GFu"]SBXs>=C&h!.%qqY_H4JZ8jCrQf%8,0^lQX-P9)^Ui,F*;l3I+M?OO9`M5rHC^X.3:Q$A;GnAEDZkUEXl6WPQkXagT/c1n8i(YQ#JkOcWd>JXAX4i%k$[cUri7J%Ai+=$Zu:F+JCOc@C(odJMJF\S4l-:o@[H5kH@t"jOV2DN&0F\"T*j347YZre<tE8Nc8GKhnCt:e\GtF;X0JI'\0^Z<%8LL\0C1OVU=,HJ"jri\#&e2'%f>_KCU*a<6-l0N8agH6Z0d7o)Ii;N6<gr1"8r\fEhZMg,C))20T4E!Q\O\lY3/OoN=mJ]!@4,>+%[QbbQoc2K8']>n/<i]Y8H<Sqo]np65Z;Ls!kp2,(.dDI5S@O3.:S\^O_:7RAj0#&CYAVi>%XE5&2F&,dIBbfCH7lOCfK(R0B/:0-%KjOj@=n=0a"UnG!:(m-6=g4%1.Wr]OY#qBgBjb?1WXPW_b8VrS.nj;2)d6uibNfbHN6K/FY^9f$6;J?1R:+?;/m)C0aaj7B!pI_6%iZRBg7ie_*Ve)$n>,I=3'EZc%CC*^,.qs$[_$c><5&SgQV6`Y"\E:CX<(fr#7.GF0E^A7)f.(jCW7;jSA:ubk+_M"[fW$g-gg=9L%`[H+jf@_9$2ff?ApSRK#NL!K!HRU&2/PRq,k98Ws#._Yo;0oAp4V-$b`!.9F,7*lEgY<kR6"G`U.Ilf9B,bKK40:4DZo`7r/Wc>C%.V>e0iVM)p<,[DE_Z5`nTh0Ck9%5(eAeLP:YLqJbqXTY"aC7Bm(H\U_ZXFm]20>r%I'!c6Ur`O$G'"]^K4L>iq#2)Oq'-uqr8s@9%O+Q<iDoE3liL3E'&W7Qk-\fW9)N.>N.R5+$k-38eG0P+>_RI/K@F*Z+7dj8m"'M%iII<h5\;0U>S=cN3-^B)m#I6_"I-iLebO;*O%jsb3`$8C=&X?EK>V)8+ppH5i6l"i3-,+I;2nhgYJMs^\s$10`SKpKEWX^dW'k'JSK`e&kA<eW;]Zb]r?CKD"Mq0W]YgJSQ3FiLGb%10poD'fVd.?">\73U!uT^,(cCP>>CipBp$CSDsHm'9(u-]rcp[fBgu9De'K3?N6bk<[Wf`qW,Q;3Tn`>akTqC#hFkCa6$.$SomH!%ANm0sFsjtgWo@Tj"EM]3O9EXJ:k)9YQ9??k7_>N)"AmuAq91+khUCgMOCP'DpP$ls)q!5L!,eadhFo\ibAY3:D15DF'sp^d*+s^P%j<P3GDRV"S?q$NMhoX;o[B[h"".:6AI??28ISU]d4=$PHo4$#a*7@(C@HZ;]D.:o5Z4l#HET%/];T#=qR$0u>h80OjCV,#8U.kbe%5J[9B`Vr=TH6WORF:Zj4ChM**5d#`eTt,]#Dg28>r>I:_S3b*@&;f%q4"kR$n-LV"KV;`"Z;a[W_Pt>Y:n3K]Jn1%ki-F4J>ML-"%8d/WpK.,B.r:6qDj0^[*mJM/-1e+ckd8Jh'D.HB:#/;c$LqT68`?!N6bdIb_/N+S-_4C,*=+aL[&ELH*/ao[Y#N8^h_-)c(jTF?t%<;W4;2Rn>Q)T2QLA(uuBr4jcWBGgP2OH99n:8;#<Q(>]bGJg'`_L.Q2nqI36dtnoqi8h)5jtB>.mbd.)\)+#)i._&ep&ODAb<bea%9m[+.13K<lq%g&h#=^`hdHs>cfSb=R5R%UI,%K*ikX<g&%!N&urbuN0+:B7k7"YSS@qM3EOg0cr9*JI7^TB?b_=hF44]-P2;9-'T%!a,=/bl*YQd!/>B5<s>[lth]ZQX:3;/a9s#9!VpkFjCe1'/ag<679!e14k,=L#5]U847Nh#!^C(Kdhm@RK5u3ZVC-EmuJAd\FBFP%hau4GGQ"aR+Q\6_opIJ)`sFGUWi=rR(rFNoWI28#e]646n@Irf^QXKY@(nLd&,Z8/cfRt`\mTY=P4Z=)$kf+*k&Ti`,Hh\SiZa]I%k=+HPD&K"'YK"oa+R&hg=WLd]+:*`98FJWL0c=[H1YtZ8FW,]*3FbY[ANJe*eKGLf0F;i!Gs(N)pN6[UO7"J"!/ot*Z4:<O_tJF,%pWN(P3V(G2dMMN:`:!hphaTG?j*DW+F<,X/^Vq&#7OA8a7Tf2[GI'qi#OX_$P>!<C`u1J%:CkV]7f.=/P\MK)F$CU=qRhXTEC__>%rcT[o)VCEk)9(3a<hh_ke3C.RH1B[0cg6<;Xdo4-4=/j@HrFd=nL?>(0B&1I+@GS,UN=j2.o;Ud^5>ZE0q')nGMm1HX>^c$Pcju8%K]C$e#YZZm`jhPcXO(q[cX;3WP2m&fl^\s#2+C8Ee-1#m0qXl9'n$j"b9hhKkaN7'"^+4A4)t!1r\\m2QannZ8]^(l0KrG%MW]+6%V@.F6H0fEcMA\YjHo<t]1dZUFT"LVYV=e=aIQ-LZa%9`(XXFQTYo+/AN?si"M((c444p'Z>cGVsK't[/X%Y)f-^@uur9`5Xj&U9%%lBF$Y,fQ97flV1gl`1\gS9D)1EWLJSf?0!uJ./o4S@"SU7?,>#mP#Ej$gg=ZQ?Y,nbLr:7>2ZT]/!tI<4L@[a$p8tsI#N8mp5(<T%Or.s<M.2NUL1h(,US+,n6*S\klpMTa(".T6PK=9,b7pMg*5+q^B7>$7a5Q0+SH[OiQ:Cf'5b%FtHu<6Wg[NdU0,D*M-$:5*5sp/[%B:2t8ShcTa(E1ddS7j*[mTpE;n\?t>'6Tl1C13QU4#]?I"QdW_YZ[1pSKJ.U:'#MIFZ*3OO[U6GQRkFF>$]1MrC2hmmXh@$-O:I!%XW_Zon@1tkECXm#-MuV[ltUAG>I_.a^eAa)ElaNJc171#e8eGQ>/D'?QWT&X<$Q:5(=qV@::0FnF2&b)#/Uo8OL`t5^;D?p\k)]@%<D>JhB$I/V3n4@tYIS.0"68/F\3UMTORR.)'&LuSDHRROfS+ePE^lp"du6.(kaH`q4\f2\($8rM3jfoOnl`Gj!(XYj%7mA=O(mac%1jM;<`CZ;PT9B)<ECoNV#<2q,;3Y$9ILkPn\/&<^1`/e6M6H4Tcr%t-QbF$M03NS=NLqC8SQgejer%g\=m$.;*>!ic0>J>cjn%15%Jkf6#jRn%Anssl/GI[o`&EM%"]I?,oKKG,SBY`Xe"@4s?S)l1XWr$<e2"b4&m6`FoWSNJ,>5Km'%<1"4MAGQ$>Ipu=.`eo*,u2a,%FqIKp?8hBq7\f07<r*s7=O$>TZl4,40`]ltksKCr1NJJp-BKZ^%""9"HOr$q0p"H[,>nC^a1<tTH[HRn67bU_?F5K:%-N4jRBoI2%G?4g`B0];(<4L$dZR(%7/^(\V55Hc+n%(-'I"#IE-<gc@=iDXbFE+nYGckdZR^T$E;9ff3kS1'?LoHT5*D`p_-UT9J'6e5'^C05\%>4lp@aAMOX92<-A*LPfN`sH7(0.IWDR<,&qet+U^b7*tmXLh("V?T!pTX1dcbRZqDN@p=gDAa4efL-uaZYKk;39`lhfM:Y>g0!=F%b3_`cNm?)77[DK@Jmo>_Bq`Re5/VEu6,V`".ehg]F(a=(.PQDeD4.]8Fn@rHPb+kG[j7<^\tl3CJWZZ1duSdq<k*l/Gf%Udat?.R%1t)18TmE!Mrf"9Mq<YbuYKYG#A41!@4"TL&<:E<J+K(Ojm[S'(.PqI@[J>0+I4btoDj89e%57Ho0P=qU*nmAh)9?'`&;@uWB!OfX%Ef9?lSO%F]caT0Y*m8NolpN0O=X*SH-TFj*ccLP1[ORoUoOaIdA%5/g]:-i@&.D7'n1A"`+_I8U-i:?hCj+G6Y81[nguN(G^\]13%^3CG7]>S+cKL]\?K4Z)sE,:HQ?&WLG+8e<*jqbh<FkJDJ+0?4:4MsBYnh[Nk]t6Ou8/8*O+-31enhZd]Jn4M_LIV]gI"UTZKKF@O%A*bE'ENl9cdY!PUSuR:%p6fi=Sid,[T(to'`mpG^Vt?\7CHNfYDkRiXM@P14a=\kCaKW'm3<>?N1ZDLr.5AYZ:Lf],Ml@U?6e'i4%3rMa*[UV3qTe6hu6\_UD=TKnm7nF7<T;FtLJPP'?+N6;&iEfen[('/HE>dh-)In(RpU[&b@h!+-D'e.b0)P1C387W6RlTGh-V0&b%q8ek0UZQU#`Q:d+j?SZ*V%`9\P`$(DWS.Z]Au@73'$LBIBVnJ7S=NQ\:0P@ZKaUu0TiljmEd,#g"prcsdLg+@qWri'$W'%"#@4MR%+t_be-ScB8pD]Ot,?phphU7X4^e7ZXq%3JL+5epg<)AA:(nu`$Z8]T)0I46BFH!@Bd$<#7's3ecf#pM$4,.4-n2Ss6F:?i3n-9'E%X=Qs'O=<_TnKDGm)SMQh\0i>(R[n`%n7mT9Fu#<TS4I->l\9jZ(7=&^f1G(I,Sa?/cG<RbLmR:s3.>Z59p1[[=ZpB-+iB's<RqC,%')*(p(Qs@9GLFt:aELa4:UN%J*"ioU8GFXTc0*6%P2q!C7OgbV4k]a(2*OQlI(J?j/+Bkd%r!0?C-N292,bm^hCe+\:OD.)H>G,6%[J)NN"2q?oQO?6AVYe[Al?aT/;#'JVg+SDk'BbfZnlY(1Cs3rrIukLN=W^[qZ#k`G-gp1Z?`^Jpq(uO8GA>=H?-JE'DeroSoQIlS%UI1-D!i`HFd^Y-'820bj7E,Rh?Aj.b>#<t&0N6X)b+9J*>_4A2Yk!qAPJiet=4E8!p8FDUDmU@l8]iWj;0.b4cM8lq/9^1WoZ$/)%:Kqd4QRV^sZ8L!PR,HgEG=JZZJFj&kI#RC)/l>Akl<U]cXSXXq/U%0BlpIG`'t\rE`FKAekgGuH7*:#5&]`qbLSb%E:tiH`Pm2n2%'%M_[ePO/1.2mD("^Q"!DD21t61<-6XtpWOIkuJ/Oh"9J=4E;l+\Us8N+^4ij:@FMqrg#=oX91lp.eAs4>-mo5"P^tQh7p11PZ[m%i3"20\n*1"j%r=j=u`@@"t++im.adXNCqb<j8/(:Wck(o\rQ@7'XLN#S#eRZFZOQd#QtOK`O"8/.6$rk7@c7O3h]#Bd0muI&(WsC%FhaH)o1>iq\a/&QN-)jF@dDo]gN#Q-#;OjmLDsM@A_tUP>tgggEM3:Cb3s&m)`SoF[iV)[F&ne>]6l?Qfp#g7mU`KCJfrY0/sdrj%2sB4BHc=sNe'm':NEbmNa\+UUW->p64"!nqNHVXA^\dMo$qlYtEJRdCf:KAnp>4gHd6%Vg")5R"#M;b2-g"^2(Z+@VHGaj+8`lNS%m``e?n[QJY-Bc?#PJ8i;:R2I]/k?U(HsROYnoa?&e=8f;S_PTQK?g7:=t3$@ZhX[##!;:QPO@5\G82n@$4a=k\Wj#6"er:?BiIg)%K`R0J@>'a(a*YoFLA*>mfCFp;"H6k0j+RH6jRHRs<BA4pLbpfER!?/5P7n2BFjPA/dm(XiZNC6XGL6%RVEjN39mm6bZubIHj=:&W%/U6mV-pFsC_u2SoKbB17A@K.$-NFBbGW\X1rA./AHH(+MCbV&]5'J4hK_Z+Y+0!Bfaa1YZ972r_<K_aA8JU$DE.kaG*3rFsYJH7@%8Rg-l@a@[9ZKm26:KN_X*M_W*j6oF+,D=T),)`$o$gO4'GM-Ag5h$,c&'0G<6A@O_Dk/.0[W"['+J<q1]8B!JF[OeBA1JS+Lk',+%j5LH@NCK(!]?,=f63u1ensN4NosZbHJG#%Mm=dSAYP[1X*K`qk*lh>Eld@5@3M6_`EI&&RdPtgd;N>)L5q%)QVKP=?,36q2(/U15%:jG0^rfZp./0M:sdW7K]p4F?FfK?kJ'`O<AEY\.YAE+!>$lB^EJ@;@'?34t"'l7tbKOma]),3Rd76=DEPh#.QiX$1DQYDWZ<R[MX%9c.O)Ajm;)2Fi$U!?='>7/4:ZNj&@j6m1/7q+sH2>nAW:ZIsDul*9LOR:[ki`139aqqJGb'QDS6NbhK71(s(%Z7/^;QeaYW-Y'RN%0[CXni`SMkg2p#H;Je&`URs4W:)&"s_mb9e.4ianZI'N2rQ%Jh*ELM/`FB?pGp^F=@8is\P=:Em_EZ[P!0Jn>>C@.[ST.,o*689F%Q2n*e4Q;#@.[A/Ac<-A;H&Rh++DN7:93"+IB^r8#D3dcu-i"dQGY#Hh#cMG_C%o\FZWDc@H#$/G`F>?ZhX'*Ll@=blibYU9<UCCS%;FPh?i:0rl`#FXcZmJLI-A.(^"4a[917,)8TW6tu@/,+cTY0?s%aiaWW@8?\n"`F7.,I7RJ`I?)p1M*I$6!tVq&g9MCi(3^#CC1p%)3=QDb$1(IcqV:4qV:grDaXV?A14b/d"HRD=85d2?p5('JaZJ)jR#Tjj2`V4+(Rc'BU)5:1E!jnNK!Ou0A)`^WEu@\YDV-<e/;bT%)ub:1c0_K&bqh6^-1e?)pQ6;UYKBV5'[c#LCq;oTnB;_^CGT%PTt0eW`c'hBYbmpfGD\DRVDIRk0f0l8DMOt7DmO#OUbbG9-kBAg%Yp)Q8m6$f8k'L'dYi'o7p5uA)O9h*4r]H5Udjl^VWCHiT'Rir^jp^cGD`WqqRTG.:boQC-$6pc4S\$Ot0g5Y^T0DHq+aP8j\3C0R%7NgI1&\rVrrA0YaH;F//ErX-3ie[).d76\nmH2V,,``gT:gN6M<r*s7o[1AihtE7]AeQY48a>(!p-/2],*K(J(W.P[IkiiBn3oV<%BJ2'ZZ__XfmB8Cu+`AIRa[N6<(S?&bZsV1&GH<LY>&lHq+KtG-b1<!DZW`"!m**mVFr+.'=@O&Vp+'q#JjQ0e@`jLgA6]+(#g]'8%!MJ@j2_C!aSB.?IT1r=[\p8\A=f)f,Z'*>XaZf%d<*[sU]dJMB:3]:QHb[0@fCZVNeVSg>:6<YO6>AU*lX0KD9=ha*ZsZXb+:=<f%&-+#B9V^Ke0$QH\<!c/R:3t!2r+<haV#h?c9k`TKfcm`Gdn+*liCD2CPG&f`"I18]8SjqF4:3Z>=$#qM"U@,>Km7%1/;Wn:ajbM'%&:-=Cnn(+hKKYc8&09rd8NmcW<*m#^m=19TQAIsGo5,XWM";`P)-5<ZQ6h1OEup:WKT#I51*U)Z@QM!%G;'1q:bu)X2Qo'm6P#rL%Q1W=b4MRt=Sp_&Y'"tBr$*OFj/TV^sV?qfHTGKN6D`##$DdNi:)HD9n!pRgm,7hF)r?a+LdpXkC4bhUBY2#>-7+*diGoacPD1,?4%P3ugSQpVV:7To#@?<g_`RtRh8ac^\W;";aDG##(7QOl'05%ReW:+8PS[U\Obb??O7"$0CM.K,p<E@Fj_dO&SBZrNhp<^;h=V&F'$%E.(tNcS?<='LneGC.f@*^0:7l#CY;@$5ce.\q?`ah:]2'OVP@:mCMGS5WgmC1[[W(6!^=0`bN(l$VBlfS%Fid+VU?%ISf#jogNDA%P)jb-C-t%2Hp>3ob;d^,g%f:ho)3akm73JY_5<YthCQaWo#MU3PPi"Qg1LD7VA:YmlY1H0Zk[=0ldOO-X(5Y].amAnQP?e-fS\%q%TO^eEF\QPa^/'^+(L'R5Ul.b#BNn>D1.&\Z6,!irXo4g"L@i[!jbGY0[Ohc+*EGC&oa`f]j@^;1ZM"N+q]k!,o-;f^+?T/QDK.1C%7n1-/,AluUE4D#U!O<`qhp[O.0RI=K#6FI@cos5DdWBtOMTkqFPU08+T7D1g;<p/kIIOa"*0oUqGaurR*HE?p8%R2)^U36i]uBP0%'g2EI)C^T?9;g`@eWhVtP>h1s#7H5;T8$M"mTV<?ZR#C6+5AE65s&$_U*+d.2o>+J7"'_@@9ep&A7"_ab]:S+2^8<eZUQh$OjM^R%k<VIamdr>LdG:Lem%Ljo]=YR6K]LQQ&&k<%ENi_ZIZV(<K`<E0\ps0[o6JajE#Xe,NaP'"!CZ&S&/,OFmVF1OD&=.+a$`A'Ur2Z\%cCAS8TBYAiVdm0-BtTZRQ?V8VY+4RH5/YCg^lD"/N';c:O7)]N7d/If6'?QKm"-7oBh:dq9d`*G4CBmJ.'^ZLdua354Sl#h3qAD5%JWY+l%m$<5&>:H"IacB8DMcP&NEfZ%*cp2+\d_+Z7Q*-Tgfn_m=ML9+Y].A)`%'86n+bgGS]jZ`&);'o*-Ek@.OT=T$M,5@G1\uh%$a%Pd^.bDuBmk`jCF:_!Gh<j*ePO:4A\9/RC5hsLRtMrq13`@N.2#,4N]sB$khVP>%_/VnE36F3D3I9q.@8^IWF;J%gObsAQNPD4%,?$W^CH;_sL/`uOMW*r1^B6YNJk]dE#T5-q7LQY$)l_Q<1d8!rE[T.8`^3bD\&(U$Mr"WE3Q!3KG?G)\j!]3U%05U1Mf:?5;YhBl%>n_pGSn`:!37qu40!9+mEg@nZU0fN#6R;%dPV6/=8C]oFWMXU,N%J@X6=BR2WEb*<j:u6Gn%\@oAnes2aNj)_mGjI&S,_"Ga`o30%%eqIV"">=F^%o_cXF-hd+!cjU0Zb%3=W_1WO*k7/$6.;#6_2`.lhmiQ2dN&mc\o'RlTuGQ3T1!XVue1r2#UD4/2NElQoS*C.Ck@(%ro?p0EJ-]1.3XT;UOl`Ind5,SBKh68Gl@%SWOlm'-e-7!(\/IZSL;U\SfFg3r5NB<Sl(MuYI>gX]6![$P;^NR1qu#4N.c'!Uh^JM%7jleVJQ5V1@`s.h/Ed<kdCdTB@Kgd`RtS-*"N=S4:tAB<7W^mM!pl4Z,Xb@jbsBr<[Z;8M<6q'^;J.f"[MhY(`R3ObTr@Dqk@#1m%YsB'*`E5V>47AtaMDh\a*A[p*UEVT6lQcr16!sLSG[3!`L1Kae.!$6u:&1<K1`70["o]\a_6R0e`9/@AT+MeJGP"?o-g5k2?cJX^%K^T_n.7gG.\AI,Zho/'3:Gk@-8>!N['0]?Snm53I+3uJ&?+]>UiYs!fP;S,K..d4fI.b/`\:Mf0LbchCHc-)Ba(e,5N):3p+8.ui%C/cU^^Z,D)fmhE1.eu1.>Bl;[3H>Ne?Jn1N(h46]@JC@T_E;Oj<*i$ZjZN.elst.iOQYC(lfgQt$&NWsOjm#X].h\*C:]@VXMqq>%=JsA3AI8CHrR-@N#ttYS!C1o7AeN0qk;o4Tb_M1f:6H4EG:ncPN6iaA>d!YU';#*gQj^q!4p.7k'*Io6&""k]T(]e1Fj9n#:EQ+I%C4VD.+jQm&;.:YhPa7;!p!%cp:nQM[h[;?XF.H/9pZlnJH_C_N_<0A&^s`k&`5tKl(4G&M(Hp']ZoDPRpgLb?_,<N$fq<ZW7@B7k%Ld!a#$8S?8+go#GK[t\tpP:OI.g@[NQ@Z%V0#JF=fMXUInr*u0M6ONJ;RtL,]&GQ4f\Sg]N,[Z>4]a!nG0$MFTrLMp-5e8d^q62p%UnR+fJY/./kBrcFHt/&DCIf\@B2O_I_L-6imKX2n4!n8#AJ`%'ONE-0*+VeT#0=]BDeb8R*MQ`Xo=>FCTp[UnMqJYZOs_6Sq.\(G%T-kXN3MBlJ0qQ,8#JPi/G2d6k&ba$OK1c_Be-.p'H@SR3S'QjGSXYkGJT=S"#CENk-[@0\CR"(Zcl%1fj)WRQhagIh?2RAN:-.,o%iO8D/"fcq$Rjk5H+j,bP?474,$XYl\l$`(-ENHWXHEa6j5o3[!TOrA0);/UN6A%Y0A-nmVjB.ufP0mipO8+_bG\@Te-n%Q-hpP7,%`L;G%SAs@/^cl$s*TX>6EC+Ti8O(lHAPG>%93e]=?9&jj&1mX_^hcYa`2%4=_T'F;k5FR7"?U1)1V"#R&B^g-4)%H(C>7`T1m4hO%[-?Am8>=n`pX.;DV8_dIOg)Pl?<(p8&"O-).25&BPX_&`@Q$<AE'(\NGYEHRW/p/$P&l%je7[\2ipEO?:;;QJJ]$9(_-K#GBm5hi%ra\2mSXOmk(A0u>$a28N6E?2nloS!3Ij]+BE$ndM-AJ(:KBN(R<u9b)QA_urFj[\r&E@9.o1#RZ-ReMi_UTY=_1!bQIq4HEW6<fN%r<YUYa/<A_82WS`E5LWO`qC9f>r1_LS`*Ep-G@=PjRtkdkNYG2Ptt^p3epYDbkd4HHCb@@[E_5"/tB[JVk4B-6geNiZ]0h)5sB=O%XMtCU0't9dHB>D,L5kVDW$H^'pTK"/(/#CnCEa!t4ar10R$6]"g`"PQm%QuP:W&+$G3p'.*^;Z3_q4nI*K=tQ<&@=dSh/4^<9]s4%IIa4mJ\:qVT:#b#2Eg!kL&VnVYF^K83@DHIp=j=0PrFZ5^OEKbOfC6&*_bDI/8:/>h=3VK]SK/jQ9S:;P<>X/YDbbKLPms9hf;6>%3(qA)UP%2r&XE)Iq&Q7]dln29Iupp"nkFFJJg$M"(K`XrSgVa!SFHO%?USdH[^&X(m=Fk#,P"#43^boZ$JU2,NIoHD)\V>5NMekQ%SFpWK)0\N069h8Zhb!P^:gu.WWK4A'7aDrP7M_n]?DSfDn(eq6[WqB)i\H!.P8[)5W,&3W[uQ5RB0PTS`SQt`g/E=8;[O`paEFia%Oc!ND7J_gfq-kK.K@DRFFWeHnFoX1t\A<8Pm3CMkoApTbP[Y$h[n^93?FsQ=iWrq?JGkm/M5h2fQnmM>Pp95%H4mX\N6q6tY@Ml4%Wb9^ac-Xu3h$:P*3_>3g.&'QO0O(3UhU5pDFaE;E;R/."^\!:c\?o=_\ojP^(7jZ,M!C]Jel52ZN>&IT7$(3YBA;DN6,TICB&uDD%_SfTj(eFNHr?G[7ZX(Lrnd<IQEFZnO6L?R#_k2l^GEHQ#\mM!:e`*P.b2bBFob;25Ue9aj6/W0)$@m*!p)kkDhVf<PkQB/\2S?j#%j'7f6f-soOjub>>9,t=Uj]8H9iL.7k0%IMROUqCr)+tfTn:a*)XIpnM+rep7R\_5jjXaq/-K@KXMVoE-87KnV*p^gc*9:/n"t#fY%hUILgMr]!7:mE8CpRPolE8Ei6+X9n,PUk]/K6$AO3%Fp>Z+&[R_FW[^/71V_aLgbk8B/cI"t0Nt)3N\9Ub?Q*:6`so?17S!i<hN>%!B7Cr%Z9hKUjnNq2qPifqrVTVE#=uEHBWD@f>PbWgVHPKTN6btdL"VHkXccp*?$q@G<e=gMkp95/Q8d#j("sMS4h[_R*8!53j\L6%2hUE)"7jb+9$U0e^&0E!.h0%B*=R9MWH&N4(J,2f/+Sri:),(3SEDVsV%'JZhPFB?9rL(d$J":prsc#h3G9g!SrGN93-s*pmR!/k%1-P0Og6%3M(5E#A6dZFbpDJUZ%!najFX&9)fu@WZ6^B3eF6:Y^9Fkgq,glKejJ-A@j*g16C3raqD=u8/3jd%V^^cJPU?>D>dF\pL%HO^0[]Rr\gDfZ+8k+,>"g)7N&6ae]0E+(G\T+T%1n@]e4d8(6OdVdtde.#rglau54\Is6"Tqn3_QEYb.B#^UDjnN)D_Q,p<h2&]O%q)7<;86+aqBdZl;R\'[;VEF`qiY>@h/n7Xd5!="UEXpl#JFMr.VaE-uSDUK5A%sBU6mp1lbk8T>A:5*(INp7W,!#D7!Njfp1ST:[%8:=-.hL>&?j_>"`.a4St8tf$CNGPEQk=\Z=gQ0l#:K^u']9g3rq$g4OXBf+0ZiOh+:?6+?N=i?@.iHu=4$gi2GL45Y`P&Q2QV:Io%8_0l-4EN@DOQj=Wg2:X>)*Vq/%(_Cg]!'+E!?W?Q;J2rWnIH*%\m.LBBKA5SZmM#0Yd$Mb/+0+O!?\a2Ru!Z.=X(2O,kgV'FL:/$%'ON*eh6"o/`#)5>gu1$pb*d%?N`,tcj?e09q,d$,eDWf=R%;Jd#Am(GMh[am7`([ZY>h%WXu'YPh;#iR,D`_<Hr#M(CHp2Z_Z[#i%QU;a:8H_;F4W^<5ag_Y`%9^odUY!UQC`l<&mG50+l3_FYFVs=?!::3n@76e9_]H>Rm\#']LVf$:8+7*<8J)6m7*ZZ;,VDhM\9E$.%jcW1pihYOB9K`flS*<,%=Le7\1a6QsncrfdDJ0AXiD)6H=^X=**!B]6rEu-Z/s8FiRZXeV_a)o\l0BRd/@V<oDACJ)Aa.U4N)Vgs%O]`E9WaTt_-<&$;cepqA'tVbW@$FHgF-S`\4P7Z;N9H#53-`*hmIKnqQoRq&eq^NHm.E9W.r8LM-k9b2QdGrfI+`%T%s:2d$?59M%'T@.J8s5XYeI>(pT-8,7_nsYNBnCUH.e,Xts4C7u-,?4;iHn'9O:<Ks"QALpc0><d?\Zae\7b37))>hl>RBIYB5'=56taukaa=,/%\u\?gGpXKF9_oG@\urYJkD*1o2)Vrp1K*<L@`1*-(ebjj:G]j32=)W\,fePhTD!HBE7_F<db'R>kuu#j(aASbh/pcmAMi#a(I5`C%me_^k%Vf6nTLe2D2$O)07DpcnBCO+L4Y-h<Oh*X;Qgj)[2];S(T0doS,Df/L@O5(1?3eVb,us/Nk1PbF&K%q#Lk8ZIDe7UjHpq!d%`JmApKR/(EQL<(Qgs45<ams!%R[,bhZrmYKW/Z*]+-%*8rX>$I+(+gtf#E\QR1&_/<<K:)9O'[hJZPCf']_IPQk)90MO>M30jK*u%)'uh2Mue@WN=)B!>j;8`PYg\FGkQ,)d^8;S(b.qG9iW-JISNYFh)A\E8qlYMe('Jt""DHLDl0,fX\m?lfMF%WafX'[SE<JFTU$Yh%(\u'Y2aL*gLnE>#R:T+p]WB%=2ee[OfT#MAdqD?@TILFNO_4A#9sNu,\'_qL7GLE3&'ma#\j[$Q<VmTb@,iSY-YTec.^(!YdC0D(%<hN+YB,9UHUd0[n,k$r<JIe4_<h?Whr_<[WD-J\YhnON!>klsoq:N4N4@n9Mq;Q+-+`Z[t",H2f$RULd$IRd&VSJqAf,Vk$6/aT:%S:_QRno3dK,TRVeDU1$^g+!E$LF'66I"EW.6t>hC0cYlB%dP49po.LDAgK(3"aV=e4N_105#f_N7L<)CX%r25\&me"SKfLC5t7U*%;IiLo3*+Wt#@nXLV[G9%:cH3[o0qB'Daa?c9sK0TQ)OXeg#8cC#Ul;Y4Y@R9n;FXa;Kq3f#6Bd-0L%=,#]RIm$Hl:S)=@WZV@jph%-iL1cUL$f]=_5u`oHprEZ0*E^R/YL.]mYpGcmg!Z$X4_u)C,_?PHfjnF9$MimQea]8XC15Zlq5W991X#[>V,Wic2L!b5N8>J@!)9%+Nq+UVBj'M3O:"qDJg_/Pik_iO%td0c>j@[DOb]5FOET#V/I!\A\[PD2H\B0!OR&Ib=AEpo0!P\^l-.\`RlbQW&,,1G`QJf+F^QS%djbXsKT0D3>\hr@@bpN-1`@G)";6U#(=R/bE0pfjdm>^eMK(J;_Wi7aqL_<u@A19OC0*ctTK5)@E:oEU^FOZ59Z/)B(BuY?\0"`t%dXA@qOc#q!+u$$?VWV[2<D*-24b)T%eim!^%hbA2ZItVp"M8DF[!0^_&t'p376ZTJZd]VV_QM=lZ]cj_"eVYDIti+`8/>WXdM6fB%/B*"HaiF`M4W@Zbe"ZdAkYcm[4?X9AHO'4"P>HO#PLgb0:JHIG906LEG#qI;@U7/R*(ae(c@EJ:ZH>[$59n8UceCVjk>IKej%42b%("p%%V6N]!eqmi!d>CKT;D,@J"4B5r@:Ykk<d$A]_0=cG)HmGji9<pO%$Zt:.':T+Y\EUH^6Fap&n<s^=X$FjY9I[s@uT53hr((1%eK0EO2rc)-(gHK<CaK:FFjNs*f>(iTLBN[pbQbUH@^sJ3j<H""`tl&IR$Nc1`%(;'_Be>5M*)u>K>OPN>46'"G^0iM]\N2@Aqs:N%,X&*K!$LM3ibl-[dnGfnCBtsbPHVk6)W-1Ri_:]3YOoo"FT5\/,<=0*c3T`WFRJN<XF-i']mZ/X-5jm,n"d.J8n$+eY:jSZ[9+&`%-#OiL?r^Ofgs`8&cMRh'&]I:M,o)<n),&+>mA,-t4TfEN9K>%k':crR@siQe=?$Ij<T<cVb?-Xs`k0'`W21E6!$r%!YB4`Ac,Z4r%WjBfEkU1[(7JRFmC.m/^G*[M7cWV2h9/X3'S<FhO1X0H#<A3rIb!Fgefgr4Tj=/iFXddTilb&%1G+:f,WOeJ5J[RAb]UEB:bY$Ru%^CeDfRMFEW+I)"+A)W[#=(o="UrJQ1M(U'U$E,t-JZA%5)W69Hc!r\(FSHiW&p6Jj/d\&`4_BDRWfafNXRNt1QLm$3/f^0pRV,$K%oo7X%_q?$Re-I2lM.3Kf9e)*"NR?-eKjL)Z%u,@nI+lsMF?5%L<Q-M,,f'fA9u`.ccQn.F+%a&Z,%sio`Kj4P"09e!W7tRoE+Bt5%M*f2(#,Z"6ftlCEZ\hG^kgeb,mU@<Mo-+Q[0Ma8:,[&?'1*("Qi`064A&JW3P;&qjf=[2>Xra`cmA/o(+?-(HQ)l:kid*30"@LYd%A@2Yj7lfjJ!ee1qRt,[S's"bVq-L1*[@KT!>&eQDU^YdX-)J35m4-cQ3``7t%^3.)@L[`FA'KW+`]N+*4E:Vc@(Jo++LOAQf9-G:%Ho\(h>fW''0ii?^"+m`4MOR3_>&ugGZie>!Fk4Jj:JUlfmHsA'\S!Y*gZ(;N,@mX)f?3a$n(IL*$lbTAHUB$WC9F[&s%c$Ae*PP7%)I(,@`_JL+\VSCYY6W;%HlenV\@JL:am7iA@)*95`S"A-(eFHFoeTf^d3V$+GgIlEXRqZ'lj'"%WR_;7n(.6PYh5fF:@`%eN+aTH%af$Jb!*2g_N@:9b10S'ZO]LoSImTs0Kj08keApC'&VQA;NDdTnp]mqG',af#D?>t!9k;%E@7FphhE3:sH(5<1W9OA==aAU*!dgu3%6o0MbG6G'#&CAYiM8fdW?%VBQ"9W'O?)4ZbHp+1ZZuGf?!\dbMjpKAfqAgZ)W7fnd%Y(PL7oG3aqr5jIK87S%&:Dc[`0oa/cp<YT%ZPuPiD4]657no1,c-P;j<@=Qsp^L+eWPQ9;&]As9.DR&D.o,l//I>bnO::sR`p81R.oVZEnr(MS6NFKWX/(-b6&^KGFCT-8:0\7E%cAa(UPY:.`9X<)^mMW!AdljP;#V4Dt1IoPLSFe&t#So"Kj`[/XGer)tE.@auO[5=90%T%R6E$Mh6^?5:PDhZ?^r@%`"&)>;gguJ/%(?aW$Vf>YZ:]X<H03)9Cf8.I_A\QAX)7miXA%n(H'])ODa&O/OPtK*Ba[C!b8Xti_$R'-J'fDn+Hp^:\&=r^aB"f>'J_HMdpM]JK%a,.`\DSPT">^!B?@P"FYa!Y1WqJ"VR\:Uj0qJoUoDbZONJ9sI1%(pJf\?=3A16sdlk(5OKA"ObY%"u0$bfU%"?mcVk7ci]53sJAc%[,uW!G/bOcbA_\QY>@,7Z?4b:X+%gL$LAP>!a/L;,'@jq"4fq=*0h95VG7o-aaI(-5h-pfiGhecPNckSkn%uS'Jm%Sk^e:<V))G=%O]bKj6KAug4$k=+26X5Z2\lXnd3_GT"BkoS-/f53eu;Xj<^oC.<5>SS6>**cm=MAg3R`^H%>'^13^AU.Y.Nbro%i)FLQfU*X"PgA%9+C-4D.?"i"e00G9HG82Xb`0)eKSlUj\2R0<s`oAj"iSmVDY/CC#`d(+]R:AciJMD<8<Qra]mHPjG8U*Sib8?i\=8hk[CHGE2GMd%>11-p<VCo7m-TQ+7>&!/o6HZZ8R!^pF.=B.7"sqM-RAtR?Vc7CZu"?F%e:8%fr]r\HGt;pU"C;ba?^_-Tc0=>5dPaT''Urga(%S"%%Qm4`"$UNj9:B=jPK(iTqQ(^j"fB%XXC3WlBfW5YKXk]qPK`Q!E(jud?]6EA9VgZ2l\kChOsoLp*\PNb1eat$o>Y"(lM!@5Rg,Q$%r`l"-?W(nC0NPTTG(3(Y)GcCKQS`pe@D9s/Um=>iq6Y^c33fuR[$)E6.M'@+/8b(mf-s0@Emjd_YAp7N\ps.Z.tUnc.:0Tf"[&q5%TC$GDTT#pr"<^&>S"P@0F%.K73!C5R7`+o30de!.W^Y**KesPo3n!eWN?6*F98OQe4?l$Ye;trt,e5,CWjA^,le]6)dE*LJEEZ&'%Iu<X>q6]5e'mfNF/f>ej/tug(E5kJ4]j&b`P^Q"Z?&'?9Ui/A4nS"@Grti6s2W@7+Joul:11qk!UhCjG'+Z%NaU0;0j]ZNri=rV=%D>`0M$L4(0>g_%l.+2&=`u*U5q0^3i'UX'XqUC#W)=>i!7tjgbI6gs`3_=E[P&G(%nGPg?_HO*5R82:NEZHl?Zidc)oe2q_D"P_`%+bauC@7PrU4(`&u&!0SqWKK*IWRd82;(glHNq9X1qe5/H3HbNOP9e8Q1@qp;m9*O_R^%U#.pjLWMViJiq=P\OYftouB-de\LcLki%]!!9Uan2o(6bk63=#XMt1Z,!f9pR'sk]g7^VKDqpHp5q=6@>A=mpG$W!^PH:n9A6$=2\QeVA\#4oM3E>+jD_>cmbM[9@JoYGWef@%ii*2F#nl6.=$LemFbbZ_Ug'@hWQr1so=TXHPo#Phqhtrc$>e?l^N,R(\G+<>`Po"]6$W+=@3cosH=MqjMFdiIFc`in!mmX/bls`2%]Ntfh"a&n2Qh,,[=.s0mQ5[4/:XW@_4SCe@WMm<@a1a2KS[pr:nF!HDq%ap+:8f'nW&i&MPd5L"P#-CCr=WUS85Z4(i-S/2M^4gK%R1K$-8MNG'0k<)*NqP[-mFHQ_.Ea!qfpA1e`#sC?l6QIqaZl-a?.ZCMKEa\f1H:.0LUFJ)orbX?pYaWHglG(fCSF-g)tE(B+@(<X%p":P:YbZ"%#/E?RO'`gC(Qjjp53N,tfXGL)BcG<N=/GHE7?2Bt2nar.#o=RBd<^ro,+R8D5R+[t%7_Eddb\g81_Za+k$q7u8=,FK%@/3-36O,b28U=6"Ps`5$4rs_9*^m;".!PqOi2.Yek^oYAQZ!+GC4P5%Q0?>q_=+jc8kk&#4m-tfI^??;;rQa'6&m/Jk-tcS@?5R$%7V6ql2[TdTBK3P_XV&)?1fB_p]UX52>9N2.G)j>!H457o$:$Bb;V.=Y8,Qc^,ZA]@.r9f5<9Ds%bUW,sYAb,foc#=peTQGCa>`ds%f1+l9WC.H?\JhgW\Ir^^FVE8kSTG@3:dLO"30hjL?L.^HkV_2L-J?<r?N)8k>**T4f"`:=J1+Ws%buXm0SQuJBDH!ZS:E6?b""Wj%0!Rb569OLOdbsQ@8\ard;(7sM1g'-*a]+LIblK&l'S(SCZRk!b4)#ZOYP]qcYVX0L^%#402M,W^Y\g99?>N9(f,)=X.M%Y`X?EM[%PK&Z&gGPc?$R#<+)f1F(?H^F9Du]=on,M9`q7$D#T>/&tm;aaM?/OOX<p<(q9tA#Un0jp\U1TP/X*SR)[:?"Qm=MqmJYQ?f8.K$'%0o=LLk@#gBLJF*YeMo`j=jm2jrHQ#%rp;q_Ed,9mI(ZkK1_J>IVuq5hkamqR6aqlEqG<N><'IF#']cN5".Y\f<4Ude0lH$7RtB*q%/KAb7"qCH).b,I3J0-H<j4jV(mI1(u\+G"2o\4kArU^''cen`jfDjS*fEu,P/+i::9u1,B+aB.=XoH1mJ>Dt%#1:hZD\$I#P+Qs_%?Qd>lrolH%bXUrc1H.icK1C8`,LnXQm]ubbj2Vrh']WK&T3j74d;Pq#GI$&_-MM^So^GC`<G;m%-"[8\U2m"fMN'cY4]T\*93'ct%Dl(&p(QV8Y*C&q^LB7=_WW_naZ][O1M!aj#\jgMkhf"_jHKNNQ"Y'eQ#ZTWt1smsHFQlJ2"L1$q"S$G*hF.+L`MC`O#+aJDpB/[e%po`4%BCY(W[&VdndL3&]IU0OBZ5`Eh>a@o^XcRqB&8nh;Xp)85o)/Vf)VA0:%/Gb38iCfa+!Q'e^SORTdMUKS"_lTH[^L^E%"]Rn%*V/h$pjB_+G`0.[N)peh(D>qH^dYm#5@E>UaLg1(,?CJ=N4a,Mp'8fQ88ic<)(kf952Y]WL0&^2>gnR>8/$K6hnKn)N#Ri04m4_[%nq$`8/BM)-,fQ40(+ubpH?I``)dSN+qHCXGCsD8P?a94"`GI/IGuTK,M7Y6gY/f6:?2\7KO,YN7`U9bIhlG"cVI]V:(YG-lYUU[Q%S-POjNd^T8/$(m9_?spl;6fjg<r?RZd&%Jnq[q"o%,RTPX=r_Kru;^Is7FS0Er!3ErgV``[GUsrlrrUNecQ8m?EkeI`In-ep:jr"%!1#o$`!RpG/:.!^g*uSm6C+=?f[$$uN"0@ZCjdL5`^SJ1/E&RH]QpqM@T<NL9;+H08/>5)MT'(4,9SZ9q79q9?]26?)!i_l0c&dk%0Xmi92Ae+791I)VjFnbn+#(G_IEVN0.!tabI(-<3Bn]G-aaUSup&,r6E&!V[(o?gSFP<RYcMl%;^ojb?9tk(<S\qT,WH24h3k=Q]%#.:^WL=q*^%Sa9"\rNQ=K:,-/5I9't`-BI/>R01=V^k+ZYgeQY[K9$WFnl#UE0Z+q06jD0dLCoT\_)6:gaAIe/FELu'^fQ+pC$ef%E;Rnqj?dCTi_gHglSh:3H#:mQ\3c>[/XB>V+afGa$c\9K=$[mDVd9lYq"(sn+/Of4X-iXjd`KHH"-Gn<pC1a3kh/*\r!IZSYW5O<%W_d$De[_fbHTr..mu$)Ob_YD3a"%6X0u=<dgq`\dHFGNo?G&IXEhYt"c;^J6Ho%@"?9N-eW7O^<'*RWqr7Yr#hRkc%('XTsChWrm%<bd[9[,3V?Cj'^h]-(`-3]6NGeI$o'C#Af4=2s8kIb`HtqtWZ\[:ct`^hq$_2'7#(N)RSpX?`*CdpEl.$,t6k%FM,qN49P[bi*:i%>:P7C=ckrHr=QX#HJjUhG)h#3K)[LY[%"%kOgO\e&m.^X%JIX^"YqtK,%\9LP6(I<ZoZ_<P&eJ+0daLe(b=@.YW9Z1ido_!NSM=a%;a/Ef9:i&ZJS-dH]!Vf2*0L0oU2So_n"hXAfD:N)@ZsYJN"k\_Z#3`Jh/"Rb;F+:F#J8Cn.-lB-Y0Mm:?a53h($Yk$kUW3BN1N&e%h^mpBs):Vg9`2@\*97"c_@Pj$MW*?.V>u26<!:VAlA26Z&I-Ctfnmqk5HdiZFYO\N\gW7kNdaX\kKa;2"V,?25Q]<+DOI20a]^9%%mqgLI2Vucs+86qt"M:/2,-)!eqs.jbIelcF!kEYj"E+qk(+Ottq/J9bfZu2heXAY3KPF)./\r,7c(1Pg:\K_;Vj.d6JXUB!>4;67%cV<2OplB>0Rtt)ElcIrEjHRA*YIC59,!W6AMZ*IIrq8'PZltq>hMN5IA<42D4*=It4G_mRhJZtr<;Y^PltX8<l^d$EqUC&VIODCm%?e#'fXAC5sn//?TbjRJ?mdMI5\t1_rh"K*:&Mo\6A<IBJb5=rp5(ucu!V!<8h[Xu*JUK#_T#`.98',P^o_ps["Hj;Fnta]l6pVWn%L].!qs!+A?E9C_F4TNdr2s[tuJ/G275[3AMX[f%W9c)\gWXX++;ih!Op>]AM9c;Kb$^p.IJ$:EUFd)C-]7pH/,i7!<._WqQ.EEeJ%HZ+P/c`N0eXB;6&KBGSbEs(hZ/quf7G9f3+K?(n:<*5/[VPM`9<DWZ)SqCMA4HT73.9XRJ4T>h];p.6;?6flh!!^ciqk(]7`e\n'%#>[&I\VX[^*IVC!>ZH]uA!.GuU33<,<:VLf8.;-.cM4pe]D[tsTlG3N%%pPJ1P#*UB)i+G#1.]YHu)O4YNicdinn%q!knK;\m0%p%?8GaU:-1!_Gi>4FFqpQ"+"SKS!0:65FRHi[kN^_A`>oXg[9Ii2\@HDL-&Zp;]^8ee?;$2p*4_r7B&rD>lL:>8g*=L,oGJR8]#OIE%b4M9SV-4GQq#E2IqMR$_e"=B\Cr)C592>mJqqS<6PtdHnUaU%+lYr2&Xsm`[EiW1]Q.mCe3.;G5=9%=8KDAsAf?JCaaOGHX,s'Ku%1t#Gei6S!S->-DS%DCc\-\i*!Bg9<pR"oUT`+\9tAl7#beB,(@^n%pJXB4qeQ04KFkCGD?SZ4sA!_pP^DIT&5%?2o^3_,IESS5Wb%:T/Ek0DK"j#Q/_N_1PSPn4Vo-@B'u8SF]1r`l5.Fmo3,T[7a7&*;Udqq27:q0uhA^HY@oJn-.aVfPh.B:DY=p!S.-o#BRSmAj4*R%bbKDBJRLiqK0Yc7V09YH+[+9)9PLHY?JOZ!"Yp.ErqLZh>q%fMr0!JZA+<jc`@<tfRV9jW8=i[V.Y9A2A#U/F;adYV4])H/cJ%d-%o/C@[-6MiW<QH5`GG_?Qq6/F6FWCe?_Y"kt:%P1%LTDV1Je<Gj>5?@)p$UKTQs?W"HPc2re;!#_i.1Db+*Qf.;h_ClWu?SN='ra>%qlJipe,!8q,/Bg"[Odm/?P@ER[&/^[2</0DP]XuLaU_VFHLUNPZS*3B6,.:qTS.c_EX`jsT*?,-o=*1#G:Kt^Q"75J7F'M5(u5Ps%]^,S$]65QW<NKZ\@NK^f)UW<OHeb[p:Fc$6luNYnh8s<eIL8gWbR*_%`l)Y1Oa;Gp_>N>lrc(>4Z!Uk&kEgZF/_XI!R]-nsm\1@I%U1?JAG!FYRm+3>`47>(+M*GIS\Z(L%W$&i?()JQHn6gq/%@`Vf/@T;19CN$pQ[L1VH*];\SDqX5XKuTfJc*K2(f&WSgXSEbk`<=j%ceH)kXFJf:^uMK-$o&Ebhf#q?(M4,i-/sooILf+7+omJcO7ndU<V0uZmCM9nfa&]2i=$`7RD>^nA41$uobDd0$k5\nqhpi=!dnM7%bem6V\sXQB4i4a=!1Qo5pZT+Fmls45&emVT,1T40:dI0r%_s7#+J\8[TDh#'eN[NO%pBT<OUZA81*DhHMRDRFA(:!6TLMp^J#""R%Fu<\=I$"of$4*uZ9XS@+L&>@kL!Uc-/bCog7L57>C1eg*2q:(#p)";E?]IUQ&,HHF"W'V(FHJe7T2A6:;HYP^5H7kV9@H_PM+:ZU%s#587F%_UeB.SPO@a%'Dl.l,rm[cNBnaB6XY?7[s1?bQrl6dgHU:GmnaE+S:g9A!\FeM556*i/.M\Hu]64-'j*c_<o=uEN5\5IU;%]He$ZGK@c5_2g6Uk+'R1*Se8d,MmG]TD.d4h?5=!*tL3`h<:)c,@pgbq^Lj-.ofH&eP=^pLK%sMimT82GGGN`,#R7$=MrhZf9:?<%s5PH$r:!r,lKpR^!GKL/+)05=1qC5IqkHn6\m&K^\btb[o%L*=oP0jnkACQb/GGZap=GRb5S#hp]mgHa+Oicl>06Zp]F=_Lfu1Rn%/"mDu$c),`&;0JDTKC"9T/<,,<$jumg3[\%><"oUbch%q`^'>$`GkZQS(`b5ebfIe66Ls#"Siqr.bH"#Kl.^`d)fp@/QXh+Jlprh%,R'gNkr.GP05$(BCPjJA6Dpmb1SuX5?t=tO8Zj<#Ke$b49;)GUk0Z,;?=c4njVgd6;<l*W<^G^"SEI6bC\Zq-[s4*t[X=T%4Ko((%+`dR.0V?*RcpA8"*.0AbR<@=!=KlQF],7G"f0X6FbY?'o]sN15?mY@&kXsCe^kOYt7:HJuI%<6VQqXL*`tW\Oc=+[ZB9"c.H0#aq%M,TcJrYPn`;H9`)BaVIC9OS`ql0>;<="L5Q#P0CgS#C$a[ctp">3BB*K?i(PcW'6kb[M*uC$]:`O'R\XRCZ;fQrSuoP@>^dmcU.4%>C@j1RNVl6OI4.A>r10Q30P)%qEM;c;+QU$PIZk2>5:cH&@jNmZJo(:'o]-Y_.#%UJGG*$iFE-akWLFn,2)7&V@rLVe=)JY"Z&`O%Sbc(Ie`=L$0$R[ffk*DN_QgLA^/HmKQ#]sip2(\hE,&`feGA4[`Ak;UH!)A+]UL7/eS6h?M8u933O($:BU&Igk]g@moB4BD7'"o7%MI!@U]ULOV<KaOWollbR7[Q21["i@i4ZPCKI[&qa9@685Z*[$)`=o?PGs%]bp?RY-Si8u+;;J(h$@Cm+%Y)6]h5S%Ja>MN_O42@s%>c(I<HBQ!"N&:g%N'n#Ha`7OZ0Otf:%nEO^!A?^iUPA[J>nr5rf8Hl+pK%_S-Pqlro)@(RWXTC^Y305WT?ABR77^8R^3J(`</f!4%"^U28D))WtqV,#3M=sN8M4NS<;5Zr!eQ+^!mq-l@M/U'P;P>,<I_XQhMCHMuW?(WS;(3_3k!URY[tD33^_`$?4Ns=:TVSUuO5=/%%rdEAIDtj&;L`UKn'3usS8F5^+P>+YBNG\B@1V=M<CW3qI%?%M6LqUZ*@0Br$U"=5#$MEr1c$f6e]r!lUmcuHr#ZWa3JDWS-L$bT*%-9Q=Q<m=G/DiAbZL>3ZEEqTO/94,p_AA^Fe`>F(>,q3X]DOS!Z*@*kP`[CWYfcQi\\IFHl(OVWP:$OR[Ej;5q)mH(Ag\VMD9DKm:%9'[#@Q'F6&MFC8=_=a/=*TgYh#(st.`YWZPXUpE&(pC#&`-l0;HnZ605BB:MIDr@HCc;FpP+>'V]]XWO]i.tr*Zk+mAUL:@PC.qa%VYg0RI/CO*s$-5WrBL;1J,B&>^]!8$rnY?dp32#\^\m=<s73r'bFed;?[qm<Du]U9J,8J<If%SYrR4"2gRnK40E9Aa0>IJG^\m2#%s6ZHYjY+CIli6e,s4taHMj"+rhu1UqoFKjY5EA?dFo~>%AI9_PrivateDataEnd