%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: semilog.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 307 194
%%HiResBoundingBox: 0 0 306.3701 193.6274
%%CropBox: 0 0 306.3701 193.6274
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 5440 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FFA8A87D7DA87DA8FD6BFF7D7DFD0CFF5253525227527DFF52%FD137D52FD297D53FD137D53FD137D527DFFFF2752FD0CFFA8A8FD047DA8%A87DFD04FFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFA8A8FFFFFFA9FFFFFFA9%FFFFFFA9FFFFFFA9FFFFFF7EFFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFF%FFA8A8FFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FD04FFA8A8FFA9FFFFFFA9FF%FFFFA9FFFFFFA9FD04FFA87DFFFF7DA8FD13FFA87DFD65FFA87DFD17FFA8%7DFD66FF7DFD18FF7DFD65FF7D7DFD17FFA87DFD62FFA8A87D7D7DFD17FF%A852FD62FFA87DFFA87DFD17FFA8A8FD62FF7DFFFFA87DFD17FFA859FD60%FFA87DFFA8FFA87DFD17FFA8A8FD60FF7DA8AFFFFFFF7DFD18FF53FD51FF%7DA8FD0CFFA8A8A8FFFFFFA87DFD17FFA8A8FD51FFA8A8FD0BFF7DA8FD06%FF7DFD18FF7DFD51FF7DFD09FF7D7D7DA8FD06FFA87EFD17FFA87DFD4DFF%A8A8FFFFA8A8FD07FF7DA8FD0AFF7DFD17FFA853FD4DFF532727FF84FD07%FF7DA8FD0AFFA87DFD17FFA8A8FD4DFF7D527DFFA8A8FFFFFF7E7D7DA8FD%0CFF7DFD17FFA87DFD4DFFA8FFFFFF84FFFFFF7D7DA8FD0DFFA87DFD17FF%A884FD51FFA8FFFFA8A8FD10FF7DFD12FF59FD047DFF7DFD51FF7DA8FF7D%A8FD0FFFA87EFFFF7DA8FD0EFF592E52277DFF7DA8FD50FF84A8A8A8FD10%FFA87DFFFF527DFD0EFFA87D7D7DA8FF52FD51FFA8FF7DA8FD10FFA87DFF%FF52A8FD13FFA87DFD4CFFA8A87D7EA8FFA8FD13FF7DFD17FFA853FD4BFF%7D7D7DA87D7D7E7DA8FD11FFA87DFD17FFA87DFD4AFFA8A8FD05FF7DA8FD%13FF7DFD17FFA87DFD42FFA87D7DA8FFFFFFA8A8A8FD19FFA87DFD17FFA8%7DFD40FFA87D7DA8A884A8FFFFFF7DFD1BFF7DFD17FFA97DFD40FFA8A8FF%FFFFA87D7DA87DFD1BFFA87DFD17FFA87DFD3EFF7DA8A8FFFFFFA8FFFFA8%7DA8FD1CFF7DFD0CFFFD057DA87DFD05FF7DFD3DFFA87D7D84FD24FFA87E%FD04FF287D7DFD05A8525252F85252277DFFFFFFA87DFD40FFA8FD25FF7D%FFFFFFA8525252F8272752527DFD0652A8FFFFFFA87DFD3CFFA87DFFA8FD%25FFA87DFFFFFFA87DA85252527D52A8FD0BFFA8A8FD3CFFA8A8FD28FF7D%FD05FFA87DFFFFA8A8FD0CFFA87DFD3BFF7DA8FD28FFA87DFD04FF7D5227%FF525252A8FD0BFFA87DFD38FFA8A87D84FD2AFF7DFD04FFA8527DFFA853%7DFD0CFFA97DFD38FFA87DA8FD2AFFA87DFD17FFA8A8FD37FFA8A8FD2DFF%7DFD18FF7DFD35FFA8FF84A8FD2CFFA87EFD13FFA8FFA8FFA8A8FD32FFA8%FD33FF7DFD13FF7D52527DFF52FD31FFA8FD04FFA87DFD2DFF7D7DFFFF52%A8FD0FFFA87D52A8FF7DFD35FFA87DFD2EFFA87DFFFFA8A8FD13FFA852FD%2DFFA8A8A8FFA8FD047DFD2FFFA87DFD17FFA87DFD2AFFA8A8FD067DA8FF%A8FD31FF7DFD17FFAF7DFD25FFA8FFA8A8527D7DA8A8FD37FFA87DFD17FF%A87DFD23FF7E7D7D7D7E7DFD3DFF7DFD18FF7DFD21FF7D7DA8FD41FFA87E%FD17FFA87DFD20FFA87DA8FFFFFFA8FD3FFF7DFD17FFA852FD1FFF7D7DFF%FFA8FFA8FD3FFFA87DFD17FFA8A8FD1EFFA8A8FFFFA8FD43FF7DFD17FFA8%59FD1EFFA8FFFF7DFD43FFA87DFD17FFA87DFD1BFFAFA8847DFFA8A8FD44%FF7DFD17FFA97DFD19FFA8847D7D7DFFFFFF7DFD43FFA87DFD17FFA87EFD%19FFA8A8FD05FFA8A8FD44FF7DFD18FF7DFD17FFA87D7DFD07FF7DFF7D52%52A8FD3EFFA87EFD17FFA8A8FD16FFA87DA8FD07FFA8A8FFA827277DFD3F%FF7DFD17FFA87DFD16FFA8A8FD09FF7DFFA87E7DA8FD3EFFA87DFD17FFA8%A8FD0FFFA87D7D7D7EA8A8A8FD0AFFA8FD44FF7DFD15FFA8FFA87DFD0FFF%7DA8A8FF7E7D7DA8FD0AFFA8FD43FFA87DFFFFA8FD12FF52A8AF7DFD12FF%A8FFA8FD0BFFA8A8FD43FFA87DFFA8527DFD11FF7DA8FF52A9FD0DFFA8A8%FFA8FD0FFFA8FD43FF7D7DFFFF527DFD13FFA87DFD0DFFA87DFD57FF7DFD%18FF59FD04FFA87DFD05FFA87D7DFD57FFA87EFD17FFA87DFD04FF7DA87D%A8FD057DFD59FF7DFD17FFA859FFFFFFA8FFFFA8A8A87DA8FD5AFFA87DFD%17FFA87DFD66FF7DFD17FFA87DFFFFFF7DFFA8A8A8FD5DFFA87DFD17FFA8%7DFFFFFFA8A8FD61FF7DFD18FF52A8A87DA8FD61FFA87DFD17FFA87D7DA8%A8FD63FF7DFD18FF52FF7DFD63FFA87EFD17FFA87DFD66FF7DFD17FFA87D%FD65FFA87DFD17FFA87DFD66FF7DFD17FFA87DFD65FFA87DFD17FFA884FD%66FF7DFD17FFAF7DFD65FFA87DFD17FFA8A8FD66FF7DFD12FF7D7DFF7DA8%FF52FD13A87DFD14A87D7EFD13A87DFD13A87DFD13A87D7DFFFF7DA8FD0E%FF7D27AF7DA8FFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8A8A8%7DA87DA87DA87DA87DA87DA87DA87DA87DA884A87DA87DA87DA87DA87DA8%7DA87DA87DA87DA8A8A884A87DA87DA87DA87DA87DA87DA87DA87DA884A8%7EA87DA87DA87DA87DA87DA87DA87DA87DA884A8A8FFA8A853FD0EFFA87D%A8FFA8FFA8FD13FFA8FFA8FD13FFA8FD13FFA8FD13FFA8FFA8FD12FFA9FD%04A8FD13FFA8527DFD11FFA852527DFD11FF7D27527DFD11FF275252FD11%FF7D27527DFD10FFA8FD0452A8FD15FF527DFD11FFA8275952FD11FF7D52%527DFD10FFA8525252A8FD10FF7D275252FD11FF525352537DFD7EFFA8FD%89FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:54:48+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T14:26:07+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T14:26:07+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>164</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8s1b8vvzHklRdP1x&#xA;zbI96Y1k1TUIXSOa5mliRmRZDKWgkSHk5rDx5R8jiqZ+Q/KHnzSNce713Vfrtkbd41i+vXd1QsLf&#xA;0o/SnRE/celL+/r6kvP4wKYqu8nQef8AWfLGm6vd+ZRDPqFvHctAthFxj9RQ3EF+DEb9afKo3wqn&#xA;P6B85/8AU0f9OEH9cVd+gfOf/U0f9OEH9cVd+gfOf/U0f9OEH9cVd+gfOf8A1NH/AE4Qf1xVRtdE&#xA;8+PExufMgikEkgVVsoGBjWRhG1eXVkAY+GKq36B85/8AU0f9OEH9cVd+gfOf/U0f9OEH9cVd+gfO&#xA;f/U0f9OEH9cVd+gfOf8A1NH/AE4Qf1xVRi0Xz6bmdZPMgWBePoSCygJeo+Ko5bUOKq36B85/9TR/&#xA;04Qf1xV36B85/wDU0f8AThB/XFXfoHzn/wBTR/04Qf1xV36B85/9TR/04Qf1xVRbRPPgu4kXzIDb&#xA;NHIZZfqUFVkDII1A5bhgXP0YqrfoHzn/ANTR/wBOEH9cVd+gfOf/AFNH/ThB/XFXfoHzn/1NH/Th&#xA;B/XFXfoHzn/1NH/ThB/XFVGfRPPiy24h8yB43kIuGNlACkfpuQwHLc8wq/Tiqt+gfOf/AFNH/ThB&#xA;/XFXfoHzn/1NH/ThB/XFXfoHzn/1NH/ThB/XFXfoHzn/ANTR/wBOEH9cVSzX184aHBaanN5mSSzj&#xA;v7CC7gks4IleG6vYbeSstapRJTvgVG+dfL/mjVtT8vS6PftY2mn30d1qPC6mtjLHHLGxieOOORbi&#xA;N4xIpjZk3IPKlVKrK8VdirsVdirsVY3+Wqhfy+8ugf8AVvtz9h4+sYP2XJb6eh6jbFWSYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqp3FxFbwvNKwWNBUkkD2A3puTsMV&#xA;YP5j1LzPqFnprz6MNM01tT0mSU3FyjXI/wBNtCqNDEsiD967DaX9ivemKs8xV2KuxV2KuxV2Ksd/&#xA;LkqfIPl3iXYfo613lDBq+ktdmANP5fbFWRYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYqhrvUrS0ntYJy4kvZDFbhI5JAXCl6FkVgvwqTViNgfDFUTirsVdirF2j1XW9SkNxHbTaFbyn&#xA;6palPVWaSJo3huJZGpxMUsblERWB+FiwIxVU832qrpVvLK3qzfpTSaO3Ra6nbVCD9kfj4k4qyTFX&#xA;Yq7FXYq7FXYqkH5fOz+Q/LrMjRn9G2g4txrQQKAfhLDfqMVT/FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYqxzzr54sfKVlFeXlldXkLk+r9UEBMMYKq00vrSw0jUyLyYV49TQb4qoab5ks&#xA;PM1h5X13T0kSyvryV7cTBQ5RbW7QMQjOAH48gK1odwDUBVlWKpRrXmK2snWxtm+s6zcClrZRKZnX&#xA;kSqzTIpDJAr7O5IA6VriqXQ+Try8USa9q95dNIwln0+CX0bL1OUbFVCKkzRVjIEbyMvFiG5H4sVZ&#xA;FZWVpY2cFlZxLb2ltGsNvBGOKJGgCqqgdAAKYqlHnP8A449v/wBtPSf+6nbYqnuKuxV2KuxVJvMX&#xA;nDy/5dNuNYuHthd+oLdlgnmV2jXkYw0SOPUYfYT7T/sg0xVQ0Hz75V16+NjpV289ysbSlGt7iEUT&#xA;0/UXnLGi+pH68fOOvNOQ5AYqv8hf8oN5d/7Zll/1Dpiqe4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FUBq/l/Qdaiii1nTbXUooW9SGO8gjnVHpTkokVgDTuMVQOoWun6bPoUNrBHa2y6h&#xA;M4hhQIvOW0upHIRAPid2LGgqSfHFUPq1u/mHUBo0yXVrpkCC4vZI24JcrIJIvqcjKdgVPN068SnS&#xA;uKpppPlzQNHB/Ren29mzAh3ijVXapqeTgcmqRU1OKpjirsVSLzn/AMce3/7aek/91O2xVFax5k0b&#xA;R5rKHUZ2hfUZltrXjFLIDI7rGvMxq4jUvIq8notSBXfFUzxV2KuxVKvMPlbQvMMEMGsW31mO3cyw&#xA;UkkiZJCjR81aJkYMFc8TWoO43AOKoTQfIXlXQb432lWjwXLRtEXa4uJhR/T9RuEsjr6knoR85Kc3&#xA;4jkTiqE/Kyzgt/y/0Fo4kjeaygkmZYhCXYxihYBY6mlByI361PXFWV4q7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq4kAVOwHU4qxWXzfrGoRs/lfRZNRt6N6epXEiWts7oHqqK59ZvjThXgF3&#xA;rUgYqoXGsRwOq63oYOvxFn0VJJoJkurgmT04rO4kEXCUpCHcemgQGu4BOKsk0fTYtPszGi8ZJ5JL&#xA;m5qxas87GSUipNBzY0A2A2GKo3FXYq7FWOeebO0m06xnlgjknt9U0s28rqrPHz1K2DcGIqtQN6Yq&#xA;jNa8p6HrV/pmoajFLJdaPKZ9PeO4uIQkhpVmSGSNJPs0o4IpUdCcVTfFXYq7FXYq7FWN/lqIh+X/&#xA;AJdETRMn6Pt94FCpX0xyFAW+IH7W/wBqvTFWSYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqk+&#xA;rN5hnv4rLSZre0hWNZru8mRppAfVXhEkIMakSIkoZy/w7bHFUrEHmrSmWS11GXzLckKL6wnW3t15&#xA;Ujj9SGWNY1gC0ZzG3MtXalMVUn802mrr+j9NuGGvXFBbw3tndRQxUpIzmORYqlYwWUs3WlPDCrL4&#xA;oo4okijHGONQqL4BRQDArmjjdkZlDNGeUZIBKtQrUeBoxGKrsVdirsVdiqRec/8Ajj2//bT0n/up&#xA;22Kp7irsVdirwPWNF/5yLt4riz0l7mePk9jDcm9tGMtlAqW8E8hndZYZ3HqTl4n5MSofdd1WS6FN&#xA;+fUnmXS49TtxDoqSIuozySaeFZY7eJZ2McKzSusswkaDg0ZUn94ONFCr1fFUg/L71f8AAfl31ePP&#xA;9G2n2a0p6C8evelK4qn+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVj/AJhXS9S1C00TUrI3VsAL&#xA;88lV42khkAhj415c+Z9TpSiGu2Kquh+WbHS4JYbOOSztZmRjbetJMaJEsSqWkZ+AEcarwjNNupri&#xA;qdIiIoVFCqOigUH4Yq3irsVdirsVdirsVdiqRec/+OPb/wDbT0n/ALqdtiqc3Aka3lEdfUKMEoaH&#xA;lTbfFXhMmj/n15csdPs9O1lrq9v0tZhHeT20im6W3ke9sueoz3dw8rfV42Qwt6VDM3FaLRVMtMh/&#xA;5yTmkih1KZLZXji+sXcLaawQPdqsixRGFiZo4KtyZjGV/ZL0xV7RirsVdiqQfl8jJ5D8uqztIf0b&#xA;aHk3GtDApA+EKNugxVP8VdirsVdirsVdirsVdirsVdirsVdirTuiKXdgqLuzE0AHuTirHr3UvMt9&#xA;ePbaBFax2kfFLnUbt5PUjkavNUtgnxMi8Wo7rXp74qj9A0QaVauJbh7y+uSst9eSFyZJQioSiu0n&#xA;px/D8MYNF+84qmeKuxV2KuxV2KuxV2KuxV2KpF5z/wCOPb/9tPSf+6nbYqnuKvP7T8poIPzBHnB7&#xA;2OSWO6muo4hahZ2E8EsLJNcGRjJ6fqj0vgXgo471qFWtI/KS30vzZaa7b3kKwWk1zNHaraBJEW4l&#xA;vJBDDMJKRxf7kP3i+meZjQ/DSmKvQcVUNQmuYLG4mto0muYoneGGVzEjuqkqrSKkpUE9SEangcVY&#xA;b5O/M4eZNfTShp6WofT4tQr9Z9SdPUt7SekkHpJwjb69wjk5nmY3+EUxVM/y1vPrXkTQWELxJHp9&#xA;rGrs0TB+ECqWX0nk2qKUah8RirJsVdirsVdirsVdirsVdirsVdirsVQ7XTSOY7ZebAlXlP8AdoQa&#xA;Gv8AMR4L9JGKoXUrm0062a9vK3E6g/V7deIeWVVLLDbRuwUyvxPEVqfHFV+h2UNrYBktltZrxmu7&#xA;yNVVCbic85C/Hq1TSpJO3XFUfirsVdirsVdirsVdirsVdirsVY555nlTTrGNbeSVJdU0vnMhjCR0&#xA;1K2I5hnV/i7cVPvTFUZreuXGm6jolstss8GrXbWUsxlKNCwt5bhWCcGDg+gVPxLSo64qm+KuxV2K&#xA;uxV2Ksb/AC1BH5f+XQWZv9x9vuyyKf7sbUlLNt23p/LQUxVkmKuxV2KuxV2KuxV2KuxVji/mJ5Qk&#xA;kCWt699UAh7G3uLtCG9M19S3jkT/AHenfv7HFUNP5z1K9kW38vaPPcTEcpJNRSfT40BrxoJYub14&#xA;sNhQGlTuMKrrjRPPt8hM/mC1siVYC3tLH1I60kVS7TSlnHxIxX4RVabg4FVW8o6jcxG11LzBeXOn&#xA;urRzWUUdtao8TeqpjMkEaTKOEqD4HU/BWu5xVF2Pk3y3ZXn1yG0LXAYurzyyzhZC7OZEWZ5FRy0j&#xA;fEoB3pWmKp1irsVdirsVdirsVdirsVdirsVdiqRec/8Ajj2//bT0n/up22Kp7irsVdirsVdirsVY&#xA;7+XSOnkHy6rih/R1qac2k2MSkfE4B6Hp0HQbDFWRYq7FXYq7FXYq7FVs0scMTzSHjHGpd23NFUVJ&#xA;2xVi0kUnmRReXzalo+lJwFraeoLZ7xX9KfnLGlZ03Uxei3Fqcgy/FsqyNBcSoAo+rRU+GlPUpTb4&#xA;SCq/j9GKqsUMUQIjULyPJj3LHapPUnbviq/FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkXnP/jj&#xA;2/8A209J/wC6nbYqnuKuxV2KuxV2KuxVj35eLGvkLy6I2Lr+jbU1LF9zCpYVJJ2O1O3TFWQ4q7FX&#xA;Yq7FXYql2saubIRQ28LXV9cNwhgQr8AO3rzVIZYEanN1BIr0JxVJIovPOqtHFeT2VjYqUNw1kkkr&#xA;TFDGzKGuFUelLSRWVU+yVKyVqMVR8lkqeatNd5ppXFneOeUjhCwkt1B9NSI9hIw+ziqe4q7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi85/8ce3/wC2npP/AHU7bFU9xV2KuxV2KuxV2KpD5ARU&#xA;8i+XQoCj9GWZoBQVMCE/jiqfYq7FXYqxyX8wfKqSSww3Et5PCXV4bO2uLlvUjMymP9zG458rWQca&#xA;129xVVu9826Xc6bKum3qxXtxM2nWjyr6RjvmqiqyThSWRhyKcSxUE8SMVVtH8q29m73V9O2qalLX&#xA;1by4Cl+LEOY12+GISDksf2VPQYqnmKpXc/8AKU6f/wAwN7/yetMVYFF+SXp+fP8AFg1S3H+ntqBs&#xA;lsTR3aTkfUdrh158KDkiIC6RyFeSnkq9RxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvOf8A&#xA;xx7f/tp6T/3U7bFU9xV2KuxV2KuxVKLbStQh81X+pm5dtNu7S2ijs2mldUuIXmMkixMTHGHjeMfB&#xA;1K7+OKpd+WEl5L5C0GS5eNwbG2WERoycUSJVAYs78m26inyxVlGKuxVKfMPmGLSYo444Jb3U7wSj&#xA;TrCBeTzSRRmQryPGONaDdnZR71xVE2trOLWKBmMUKIqlQQJWNKMWZSQK/wCTvX9rFWk0HR01Eakl&#xA;nEt6I1hWYLuqKWYBR0BrI24Fd8VR2KuxVBTWE8ms2uoLMqxW8M0DQFCWb1mjYkPyAFDCv7J74qjc&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirHPPK3Z06xMUkaQLqml/WI3jZnb/clbceDh1CU&#xA;PWqtX2xVQ83aB5n1LWdDutJvvq1nZS87+P61cW9R9Yt5C3pQqyXNYYpYvTlIX95y6jFWVYq7FXYq&#xA;7FXYqxv8tVC/l95dA/6t9ufsPH1jB+y5LfT0PUbYqtbQNP1B5tcXULq0uZZWe2vYbljHFEvCI+lF&#xA;KZLbjMkAJPp/tVG++KqA8v8Am+4ag81Xkdsdi/1Wyjl29jAevjRfkcKpzovlvTtJlnnge4nu7kKt&#xA;xdXc8txIyo7ui1kZgoUytQKBt8hgVNMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVSLzn/xx7f/ALaek/8AdTtsVT3FXYq7FXYq7FXYq818i+Y9Zm8n6NpVnAJLueythplxKZY0&#xA;NrBHDHdvLIIeKSQuzLGoDcvgP8xBVnen6NZWNvDBFEixWwC20EaiOGJV2AiiHwrTffr70wKj8Vdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSLzn/xx7f8A7aek/wDdTtsV&#xA;T3FXYq7FXYq7FWmXkpWpFRSoNDv4HFWPflwoT8v/AC2gR4wumWihZCGbaFRWoLfa69fuxVkWKuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvOf/ABx7f/tp6T/3U7bF&#xA;U9xV2KuxV2KoPVNZ0jSbdbnVb630+3d1iSa6lSFDI1eKBpCo5GmwxVUi1LTpr2ewiuoZL61VHurR&#xA;JFaWJZamNpIweSh6HjUb4qlPkBg3kTy2y7q2l2RB9jbpiqfYq7FXYq7FVK2uoLmMyQNzRXkiJoR8&#xA;cLtG43p0dCMVVcVdirsVdiqlHd28txNbo9Zrfj6y0IpzFV3IoajwxVVxV2KuxV2KqTXUC3UdqzUn&#xA;lR5Y0od0iKK5r02Mq/fiqrirsVdirsVUprqCGSCOVuL3LmKAUJ5OEaQjbp8EbHfFVXFXYq7FXYqk&#xA;PnVgujW5Ow/SmkD6TqlsBiqbXmpadZNbre3UNs13KtvaiaRYzLM4JWKPkRzchTRRviqIxV2KuxVI&#xA;vN/lCx806fHZXdzcWqxPIwltTGHKzW8trLGfVjmXi8Nw6n4ajqCDiqJstBgs9RfVDPPc3r2VvYSy&#xA;Sen8aWryyK5WNI15s07cqAL0oBirC/y4tfIXmzRpr+Pyjo1ksMyxcLeG3uYzzt4p6FxBDSSP1vTl&#xA;Tj8Lqy1NMVZX/gLyN/1Lumf9IVv/AM0Yq7/AXkb/AKl3TP8ApCt/+aMVd/gLyN/1Lumf9IVv/wA0&#xA;Yqh9S8n+RLHTrq9by5pRW1hkmYNa20akRqW3dk4qNup2GKvOfInmvyH5q1qy0xPJeiQreJM4ltzb&#xA;3DUj5sJliNrCxt2CcfUbiwkPApUYVenf4C8jf9S7pn/SFb/80YFd/gLyN/1Lumf9IVv/AM0Yq7/A&#xA;Xkb/AKl3TP8ApCt/+aMVd/gLyN/1Lumf9IVv/wA0Yq8ybzb5CPmg6IvkKxtyNRGniW/tUs5ZlL2s&#xA;ayW8Ulr+9c/XDII+YPpIZCRUDFXpv+AvI3/Uu6Z/0hW//NGKu/wF5G/6l3TP+kK3/wCaMVd/gLyN&#xA;/wBS7pn/AEhW/wDzRirv8BeRv+pd0z/pCt/+aMVeT+b/ADv5I8vebtQ0A+Q9FkSwUlby4e0tzIVt&#xA;UumUQi2mdefMRQltpZfhHRuKr1dfIfkYqD/hzTBUVobK3r/xDFW/8BeRv+pd0z/pCt/+aMVd/gLy&#xA;N/1Lumf9IVv/AM0Yq7/AXkb/AKl3TP8ApCt/+aMVec/mF5g8j+UvMtpoqeR9IvhPbG6mupBaW3o8&#xA;hNwYxmCSRoh9Xb1ZVHGMddyAVWX+UtC8jeYfLtlrH+FtKt/ras3ppbW8qfC7Jyjl9JPUjfjyR+I5&#xA;KQaYqm/+AvI3/Uu6Z/0hW/8AzRirv8BeRv8AqXdM/wCkK3/5oxV3+AvI3/Uu6Z/0hW//ADRirEPO&#xA;snlHyjqdhJH5R0VuUf1m11KYQ2i208V5awB5JBbS+jGn1tZDKCSvE/D3xVD+UPN2n/mFq01vPYz2&#xA;DIthqhVb+S4aN7KaOaJJrV0EVt6rNVSm8yDkaUFFXqmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:5A6F944851D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:4C9257A855D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -193.627 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 193.627 li
306.37 193.627 li
306.37 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
29.2549 182.724 mo
32.4048 182.724 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 46 /period putdup 48 /zero putdup 49 /one putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/space <1C60D8A8C9B854D00D> |-/period <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369E6> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWFU+Helvetica /Helvetica findfont ct_VMDictPut/DVPWFU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one 206{/.notdef}rp]DVPWFU+Helvetica nfDVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf13.375 185.06 mo( 0.1)[1.9458 3.89209 1.94629 0 ]xsh29.2549 137.974 mo
32.4048 137.974 li
29.2549 140.023 mo
30.8047 140.023 li
29.2549 142.324 mo
30.8047 142.324 li
29.2549 144.875 mo
30.8047 144.875 li
29.2549 147.875 mo
30.8047 147.875 li
29.2549 151.423 mo
30.8047 151.423 li
29.2549 155.773 mo
30.8047 155.773 li
29.2549 161.375 mo
30.8047 161.375 li
29.2549 169.273 mo
30.8047 169.273 li
@
DVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf19.2109 140.31 mo( )sh21.1641 140.31 mo(1)sh29.2549 93.1738 mo
32.4048 93.1738 li
29.2549 95.2236 mo
30.8047 95.2236 li
29.2549 97.5234 mo
30.8047 97.5234 li
29.2549 100.125 mo
30.8047 100.125 li
29.2549 103.125 mo
30.8047 103.125 li
29.2549 106.673 mo
30.8047 106.673 li
29.2549 111.023 mo
30.8047 111.023 li
29.2549 116.625 mo
30.8047 116.625 li
29.2549 124.474 mo
30.8047 124.474 li
@
DVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf15.3203 95.5054 mo( 10)[1.9458 3.89209 0 ]xsh29.2549 48.4238 mo
32.4048 48.4238 li
29.2549 50.4736 mo
30.8047 50.4736 li
29.2549 52.7734 mo
30.8047 52.7734 li
29.2549 55.3735 mo
30.8047 55.3735 li
29.2549 58.3735 mo
30.8047 58.3735 li
29.2549 61.9238 mo
30.8047 61.9238 li
29.2549 66.2734 mo
30.8047 66.2734 li
29.2549 71.8237 mo
30.8047 71.8237 li
29.2549 79.7236 mo
30.8047 79.7236 li
@
DVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf11.4297 50.7554 mo( 100)[1.9458 3.89209 3.89209 0 ]xsh29.2549 3.67383 mo
32.4048 3.67383 li
29.2549 5.72363 mo
30.8047 5.72363 li
29.2549 8.02344 mo
30.8047 8.02344 li
29.2549 10.6235 mo
30.8047 10.6235 li
29.2549 13.6235 mo
30.8047 13.6235 li
29.2549 17.1235 mo
30.8047 17.1235 li
29.2549 21.4736 mo
30.8047 21.4736 li
29.2549 27.0737 mo
30.8047 27.0737 li
29.2549 34.9736 mo
30.8047 34.9736 li
@
DVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf7.53906 6.01318 mo( 1000)[1.9458 3.89209 3.89209 3.89209 0 ]xsh29.2549 3.67383 mo
29.2549 6.82373 li
29.2549 182.724 mo
29.2549 179.574 li
@
DVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf26.3359 192.052 mo( )sh28.2734 192.052 mo(0)sh78.6548 3.67383 mo
78.6548 6.82373 li
78.6548 182.724 mo
78.6548 179.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFU+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/DVPWFU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 205{/.notdef}rp]DVPWFU+Helvetica nfDVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf73.7891 192.052 mo( 20)[1.9458 3.89209 0 ]xsh128.055 3.67383 mo
128.055 6.82373 li
128.055 182.724 mo
128.055 179.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFU+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/DVPWFU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 203{/.notdef}rp]DVPWFU+Helvetica nfDVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf123.188 192.052 mo( 40)[1.9458 3.89209 0 ]xsh177.404 3.67383 mo
177.404 6.82373 li
177.404 182.724 mo
177.404 179.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFU+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/DVPWFU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six 201{/.notdef}rp]DVPWFU+Helvetica nfDVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf172.539 192.052 mo( 60)[1.94629 3.8916 0 ]xsh226.805 3.67383 mo
226.805 6.82373 li
226.805 182.724 mo
226.805 179.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFU+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/DVPWFU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWFU+Helvetica nfDVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf221.938 192.052 mo( 80)[1.94629 3.8916 0 ]xsh276.205 3.67383 mo
276.205 6.82373 li
276.205 182.724 mo
276.205 179.574 li
@
DVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf269.391 192.052 mo( 100)[1.94629 3.8916 3.89258 0 ]xsh276.205 182.724 mo
273.055 182.724 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A75CA669> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFU+Helvetica /Encoding getdup 45 /hyphen putpop%ADOEndSubsetFont
/DVPWFU+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWFU+Helvetica nfDVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf280.398 185.06 mo(-1)[2.33105 0 ]xsh276.205 137.974 mo
273.055 137.974 li
@
DVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf280.398 140.31 mo( )sh282.344 140.31 mo(0)sh276.205 93.1738 mo
273.055 93.1738 li
@
DVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf280.398 95.5054 mo( )sh282.344 95.5054 mo(1)sh276.205 48.4238 mo
273.055 48.4238 li
@
DVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf280.398 50.7554 mo( )sh282.344 50.7554 mo(2)sh276.205 3.67383 mo
273.055 3.67383 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319EB739C72B00D2CC4607F53D8DAA36825DF613C6C839053BC26A7859D8AA158786D28D1E4DE04046CE941E5159199A77FA8129F02A3ECB8D9E54C278D22D0348DFB3C3C73F55886BF824DB1B2BE764C084A332EAF6E03DAE2729DE4723D54D14DE5E36772632D9593B8015D82D91A7513CF83AED18BF899FB582C1516AE5C3CE963C7A9224066B2CB5D769E52069DB2172C52452A135E45CF579C1E7FB12BEA387FFB8E1E9EB90D4F6BF80D4DDA346E7141D8646431020D523BDB64> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFU+Helvetica /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/DVPWFU+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWFU+Helvetica nfDVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf280.398 6.01318 mo( )sh282.344 6.01318 mo(3)sh29.2549 3.67383 mo
29.2549 182.724 li
276.205 182.724 li
276.205 3.67383 li
29.2549 3.67383 li
29.2549 3.67383 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/V <1C60D8A8C9B64EDF884A7D8E901D2F4533C16A14B652E2E01CB0C4A82BD4AE8D918B8A9135C63318FE8084BF228A8B1FD8F9> |-/a <1C60D8A8C9B7EF32A0B922DB529D708010F72F0E62F6CA36E98277AFD8C536E6814BFC8F2509E1B2B1B62A6BDA8D1A6ED67728D80620B28FE439D2F57DCEC5483105FEA93379701773DF23A415938C688874994BCC9880105CE27AC2270A13FA38E952045C5E8C52BEF83397E5FBEEFAB993BE33E385A5E36620F7427AB5E4423C6A4ED6DE24A89F54E52C8FAD8A45FAD4B8F6CFD50EB7D35BF120B079B932E0EE2F7685462C7EC6E9B818F0F9E1F7814D04F2B9AAFA6704B8B745452B73181F38CB34F1645F> |-/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C2021D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495ACA0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCDBE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553A431EECECF30F5581F5F0240E470E520EB9771> |-/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C0EAF> |-/u <1C60D8A8C9B7EF325758E576B7BAA1EFA82EFF7976BE67CE506354F22E3D1B078EDAE7715C61BE16B3CD4B647E2C68818E308CF0BE659E73BA193580128E99771A6AFDBFEB4E9486BE6CBE5D0A068E2F3382B692BCB6E47C62554398C9E56946239346863C679F19> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFU+Helvetica /Encoding getdup 86 /V putdup 97 /a putdup 101 /e putdup 108 /l putdup 117 /u putpop%ADOEndSubsetFont
/DVPWFU+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /.notdef /six /.notdef /eight 29{/.notdef}rp /V 10{/.notdef}rp /a 3{/.notdef}rp /e 6{/.notdef}rp /l 8{/.notdef}rp /u 138{/.notdef}rp]DVPWFU+Helvetica nfDVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf0 74.5601 mo(Value)[4.18018 3.89209 1.55371 3.89209 0 ]xsh17.9019 74.5586 mo
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/P <1C60D8A8C9B64EDFA3F30AE4AB14FCCB57D446AF805F45D1BE197D47C6C20943FECBF4EB404456C629F1F5342EEA681381C7461EF00E178F4482E2C7F7B39C94B8CCFF41619BA5DC67957F7F81> |-/f <1C60D8A8C9B854D0A3953AFC308C88F2CB7B77611DE17001C91B65CE86C8891C39A4DBCDDE1373931B89EF13785E617F99570B386BE99D1A576D0D1701D2F253DF8B3192240780F3E221EB68A6> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/r <1C60D8A8C9B81F2C150546EE4CBAAF688B47B2BE559294D5CB0899F2E804995909AC00E005B47DD0AC10879B5BC7D5032F4A9752992A333ADEB05A77287D04AF74FB420D308AD8> |-/w <1C60D8A8C9B6079F1E21163FAB6AE6913AD177FF61D1DF5A13833424AA1FD61EC74DDA2BECFBF8B60BC9DF7FD3935FFD35FC8515ADAC1E367194875F1B70589701BB841A4601541FD2E8173953> |-/x <1C60D8A8C9B7A73DEE9439F61CF83FD6F0AADDB8373458EFEDE4BF6C46155F8370F02E9CE5FFD24DBE7D153354FABD4F844978ABB054761731A2B93E507FE62552012BB1EB5E1E3EE678332D9E> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFU+Helvetica /Encoding getdup 80 /P putdup 102 /f putdup 111 /o putdup 114 /r putdup 119 /w putdup 120 /x putpop%ADOEndSubsetFont
/DVPWFU+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /.notdef /six /.notdef /eight 23{/.notdef}rp /P 5{/.notdef}rp /V 10{/.notdef}rp /a 3{/.notdef}rp /e /f 5{/.notdef}rp /l 2{/.notdef}rp /o 2{/.notdef}rp /r 2{/.notdef}rp /u /.notdef /w /x 135{/.notdef}rp]DVPWFU+Helvetica nfDVPWFU+Helvetica*1 [7 0 0 -7 0 0 ]msf286.531 74.5601 mo(Powe)[4.32031 3.78809 4.98535 0 ]xsh304.039 74.5601 mo(r)sh288.672 81.5601 mo(of 10)[3.8916 1.94629 1.94629 3.8916 0 ]xsh115.703 128.857 mo(3x)[3.89209 0 ]xsh215.703 39.3569 mo(3x)[3.8916 0 ]xsh225.555 48.4238 mo
226.805 48.4238 li
228.055 48.4238 li
225.555 27.0737 mo
226.805 27.0737 li
228.055 27.0737 li
226.805 48.4238 mo
226.805 27.0737 li
225.555 48.4238 mo
226.805 48.4238 li
228.055 48.4238 li
225.555 27.0737 mo
226.805 27.0737 li
228.055 27.0737 li
109.505 137.974 mo
110.755 137.974 li
112.005 137.974 li
109.505 116.625 mo
110.755 116.625 li
112.005 116.625 li
110.755 137.974 mo
110.755 116.625 li
109.505 137.974 mo
110.755 137.974 li
112.005 137.974 li
109.505 116.625 mo
110.755 116.625 li
112.005 116.625 li
@
0.25 lw
29.2549 164.923 mo
31.7046 158.375 li
34.2046 161.375 li
36.6548 158.375 li
39.1548 153.474 li
41.6045 145.324 li
44.0547 145.023 li
46.5547 146.474 li
49.0049 146.923 li
51.5049 147.074 li
53.9546 146.923 li
56.4048 146.474 li
58.9048 145.724 li
61.3545 145.023 li
63.8047 141.923 li
66.3047 140.574 li
68.7549 133.074 li
71.2549 132.773 li
73.7046 132.625 li
76.1548 131.974 li
78.6548 132.875 li
81.1045 135.224 li
83.6045 133.625 li
86.0547 127.875 li
88.5049 126.673 li
91.0049 124.724 li
93.4546 121.773 li
95.9546 119.724 li
98.4048 119.974 li
100.854 119.324 li
103.354 118.074 li
105.805 112.875 li
108.255 111.574 li
110.755 108.125 li
113.205 107.375 li
115.705 104.724 li
118.155 104.173 li
120.604 103.923 li
123.104 103.724 li
125.555 103.474 li
128.055 103.324 li
130.505 101.625 li
132.955 100.773 li
135.455 100.273 li
137.905 99.5737 li
140.405 99.2729 li
142.854 99.3745 li
145.305 99.2729 li
147.805 99.1245 li
150.255 98.7241 li
152.755 97.2236 li
155.205 97.0234 li
157.654 97.2236 li
160.154 95.7734 li
162.604 93.1738 li
165.055 86.4736 li
167.555 81.9736 li
170.005 81.6738 li
172.505 80.4736 li
174.955 78.5234 li
177.404 73.9238 li
179.904 67.9736 li
182.354 68.2236 li
184.854 68.6235 li
187.305 62.6738 li
189.755 61.3735 li
192.255 60.9238 li
194.705 60.2734 li
197.205 61.3237 li
199.654 63.4238 li
202.104 65.2236 li
204.604 65.7236 li
207.055 65.7236 li
209.505 61.8735 li
212.005 56.1738 li
214.455 54.3735 li
216.955 53.8735 li
219.404 53.8237 li
221.854 53.5234 li
224.354 54.7734 li
226.805 56.9736 li
229.305 54.1235 li
231.755 49.1738 li
234.205 45.3735 li
236.705 40.7734 li
239.154 39.3237 li
241.654 38.9736 li
244.104 38.1235 li
246.555 36.1738 li
249.055 33.1738 li
251.505 31.1738 li
253.955 31.3735 li
256.455 30.7734 li
258.904 29.5234 li
261.404 24.3237 li
263.854 22.9736 li
266.305 19.5737 li
268.805 16.1235 li
271.255 15.3735 li
273.755 15.1235 li
276.205 9.02344 li
@
30.022 164.884 mo
30.022 164.449 29.6694 164.095 29.2349 164.095 cv
28.7998 164.095 28.4473 164.449 28.4473 164.884 cv
28.4473 165.318 28.7998 165.671 29.2349 165.671 cv
29.6694 165.671 30.022 165.318 30.022 164.884 cv
f
32.542 158.404 mo
32.542 157.968 32.1895 157.617 31.7549 157.617 cv
31.3198 157.617 30.9673 157.968 30.9673 158.404 cv
30.9673 158.837 31.3198 159.191 31.7549 159.191 cv
32.1895 159.191 32.542 158.837 32.542 158.404 cv
f
34.9424 161.404 mo
34.9424 160.968 34.5894 160.617 34.1548 160.617 cv
33.7197 160.617 33.3672 160.968 33.3672 161.404 cv
33.3672 161.837 33.7197 162.191 34.1548 162.191 cv
34.5894 162.191 34.9424 161.837 34.9424 161.404 cv
f
37.4624 158.404 mo
37.4624 157.968 37.1094 157.617 36.6748 157.617 cv
36.2397 157.617 35.8872 157.968 35.8872 158.404 cv
35.8872 158.837 36.2397 159.191 36.6748 159.191 cv
37.1094 159.191 37.4624 158.837 37.4624 158.404 cv
f
39.9824 153.484 mo
39.9824 153.048 39.6294 152.697 39.1948 152.697 cv
38.7598 152.697 38.4072 153.048 38.4072 153.484 cv
38.4072 153.917 38.7598 154.271 39.1948 154.271 cv
39.6294 154.271 39.9824 153.917 39.9824 153.484 cv
f
42.3823 145.324 mo
42.3823 144.888 42.0293 144.537 41.5947 144.537 cv
41.1602 144.537 40.8071 144.888 40.8071 145.324 cv
40.8071 145.759 41.1602 146.111 41.5947 146.111 cv
42.0293 146.111 42.3823 145.759 42.3823 145.324 cv
f
44.9023 144.964 mo
44.9023 144.529 44.5493 144.175 44.1147 144.175 cv
43.6802 144.175 43.3271 144.529 43.3271 144.964 cv
43.3271 145.398 43.6802 145.751 44.1147 145.751 cv
44.5493 145.751 44.9023 145.398 44.9023 144.964 cv
f
47.3022 146.523 mo
47.3022 146.089 46.9492 145.736 46.5146 145.736 cv
46.0801 145.736 45.7271 146.089 45.7271 146.523 cv
45.7271 146.958 46.0801 147.312 46.5146 147.312 cv
46.9492 147.312 47.3022 146.958 47.3022 146.523 cv
f
49.8223 146.884 mo
49.8223 146.449 49.4692 146.095 49.0347 146.095 cv
48.6001 146.095 48.2471 146.449 48.2471 146.884 cv
48.2471 147.318 48.6001 147.671 49.0347 147.671 cv
49.4692 147.671 49.8223 147.318 49.8223 146.884 cv
f
52.3423 147.125 mo
52.3423 146.689 51.9893 146.335 51.5547 146.335 cv
51.1201 146.335 50.7671 146.689 50.7671 147.125 cv
50.7671 147.558 51.1201 147.912 51.5547 147.912 cv
51.9893 147.912 52.3423 147.558 52.3423 147.125 cv
f
54.7422 146.884 mo
54.7422 146.449 54.3892 146.095 53.9546 146.095 cv
53.52 146.095 53.167 146.449 53.167 146.884 cv
53.167 147.318 53.52 147.671 53.9546 147.671 cv
54.3892 147.671 54.7422 147.318 54.7422 146.884 cv
f
57.1421 146.523 mo
57.1421 146.089 56.7896 145.736 56.3545 145.736 cv
55.9199 145.736 55.5674 146.089 55.5674 146.523 cv
55.5674 146.958 55.9199 147.312 56.3545 147.312 cv
56.7896 147.312 57.1421 146.958 57.1421 146.523 cv
f
59.6621 145.683 mo
59.6621 145.25 59.3096 144.896 58.8745 144.896 cv
58.4399 144.896 58.0874 145.25 58.0874 145.683 cv
58.0874 146.119 58.4399 146.47 58.8745 146.47 cv
59.3096 146.47 59.6621 146.119 59.6621 145.683 cv
f
62.1821 144.964 mo
62.1821 144.529 61.8296 144.175 61.3945 144.175 cv
60.96 144.175 60.6074 144.529 60.6074 144.964 cv
60.6074 145.398 60.96 145.751 61.3945 145.751 cv
61.8296 145.751 62.1821 145.398 62.1821 144.964 cv
f
64.582 141.964 mo
64.582 141.529 64.2295 141.175 63.7949 141.175 cv
63.3599 141.175 63.0073 141.529 63.0073 141.964 cv
63.0073 142.398 63.3599 142.751 63.7949 142.751 cv
64.2295 142.751 64.582 142.398 64.582 141.964 cv
f
67.1021 140.523 mo
67.1021 140.089 66.7495 139.736 66.3145 139.736 cv
65.8799 139.736 65.5273 140.089 65.5273 140.523 cv
65.5273 140.958 65.8799 141.312 66.3145 141.312 cv
66.7495 141.312 67.1021 140.958 67.1021 140.523 cv
f
69.502 133.083 mo
69.502 132.648 69.1494 132.296 68.7148 132.296 cv
68.2798 132.296 67.9272 132.648 67.9272 133.083 cv
67.9272 133.519 68.2798 133.871 68.7148 133.871 cv
69.1494 133.871 69.502 133.519 69.502 133.083 cv
f
72.022 132.724 mo
72.022 132.289 71.6694 131.937 71.2349 131.937 cv
70.7998 131.937 70.4473 132.289 70.4473 132.724 cv
70.4473 133.158 70.7998 133.511 71.2349 133.511 cv
71.6694 133.511 72.022 133.158 72.022 132.724 cv
f
74.542 132.603 mo
74.542 132.169 74.1895 131.816 73.7549 131.816 cv
73.3198 131.816 72.9673 132.169 72.9673 132.603 cv
72.9673 133.039 73.3198 133.392 73.7549 133.392 cv
74.1895 133.392 74.542 133.039 74.542 132.603 cv
f
76.9424 132.003 mo
76.9424 131.57 76.5894 131.216 76.1548 131.216 cv
75.7197 131.216 75.3672 131.57 75.3672 132.003 cv
75.3672 132.439 75.7197 132.791 76.1548 132.791 cv
76.5894 132.791 76.9424 132.439 76.9424 132.003 cv
f
79.4624 132.843 mo
79.4624 132.41 79.1094 132.056 78.6748 132.056 cv
78.2397 132.056 77.8872 132.41 77.8872 132.843 cv
77.8872 133.279 78.2397 133.63 78.6748 133.63 cv
79.1094 133.63 79.4624 133.279 79.4624 132.843 cv
f
81.8623 135.244 mo
81.8623 134.808 81.5093 134.457 81.0747 134.457 cv
80.6401 134.457 80.2871 134.808 80.2871 135.244 cv
80.2871 135.679 80.6401 136.031 81.0747 136.031 cv
81.5093 136.031 81.8623 135.679 81.8623 135.244 cv
f
84.3823 133.683 mo
84.3823 133.25 84.0293 132.896 83.5947 132.896 cv
83.1602 132.896 82.8071 133.25 82.8071 133.683 cv
82.8071 134.119 83.1602 134.47 83.5947 134.47 cv
84.0293 134.47 84.3823 134.119 84.3823 133.683 cv
f
86.9023 127.923 mo
86.9023 127.49 86.5493 127.136 86.1147 127.136 cv
85.6802 127.136 85.3271 127.49 85.3271 127.923 cv
85.3271 128.359 85.6802 128.71 86.1147 128.71 cv
86.5493 128.71 86.9023 128.359 86.9023 127.923 cv
f
89.3022 126.724 mo
89.3022 126.289 88.9492 125.937 88.5146 125.937 cv
88.0801 125.937 87.7271 126.289 87.7271 126.724 cv
87.7271 127.158 88.0801 127.511 88.5146 127.511 cv
88.9492 127.511 89.3022 127.158 89.3022 126.724 cv
f
91.8223 124.683 mo
91.8223 124.25 91.4692 123.896 91.0347 123.896 cv
90.6001 123.896 90.2471 124.25 90.2471 124.683 cv
90.2471 125.119 90.6001 125.47 91.0347 125.47 cv
91.4692 125.47 91.8223 125.119 91.8223 124.683 cv
f
94.2222 121.804 mo
94.2222 121.369 93.8691 121.017 93.4346 121.017 cv
93 121.017 92.647 121.369 92.647 121.804 cv
92.647 122.238 93 122.591 93.4346 122.591 cv
93.8691 122.591 94.2222 122.238 94.2222 121.804 cv
f
96.7422 119.763 mo
96.7422 119.33 96.3892 118.976 95.9546 118.976 cv
95.52 118.976 95.167 119.33 95.167 119.763 cv
95.167 120.199 95.52 120.55 95.9546 120.55 cv
96.3892 120.55 96.7422 120.199 96.7422 119.763 cv
f
99.1421 120.003 mo
99.1421 119.57 98.7896 119.216 98.3545 119.216 cv
97.9199 119.216 97.5674 119.57 97.5674 120.003 cv
97.5674 120.439 97.9199 120.791 98.3545 120.791 cv
98.7896 120.791 99.1421 120.439 99.1421 120.003 cv
f
101.662 119.283 mo
101.662 118.849 101.31 118.496 100.875 118.496 cv
100.44 118.496 100.087 118.849 100.087 119.283 cv
100.087 119.718 100.44 120.072 100.875 120.072 cv
101.31 120.072 101.662 119.718 101.662 119.283 cv
f
104.182 118.083 mo
104.182 117.648 103.83 117.296 103.395 117.296 cv
102.96 117.296 102.607 117.648 102.607 118.083 cv
102.607 118.519 102.96 118.871 103.395 118.871 cv
103.83 118.871 104.182 118.519 104.182 118.083 cv
f
106.582 112.923 mo
106.582 112.49 106.229 112.136 105.795 112.136 cv
105.36 112.136 105.007 112.49 105.007 112.923 cv
105.007 113.359 105.36 113.71 105.795 113.71 cv
106.229 113.71 106.582 113.359 106.582 112.923 cv
f
108.982 111.603 mo
108.982 111.169 108.629 110.816 108.195 110.816 cv
107.76 110.816 107.407 111.169 107.407 111.603 cv
107.407 112.039 107.76 112.392 108.195 112.392 cv
108.629 112.392 108.982 112.039 108.982 111.603 cv
f
111.502 108.125 mo
111.502 107.689 111.149 107.335 110.715 107.335 cv
110.28 107.335 109.927 107.689 109.927 108.125 cv
109.927 108.558 110.28 108.912 110.715 108.912 cv
111.149 108.912 111.502 108.558 111.502 108.125 cv
f
114.022 107.404 mo
114.022 106.968 113.669 106.617 113.235 106.617 cv
112.8 106.617 112.447 106.968 112.447 107.404 cv
112.447 107.837 112.8 108.191 113.235 108.191 cv
113.669 108.191 114.022 107.837 114.022 107.404 cv
f
116.542 104.763 mo
116.542 104.33 116.189 103.976 115.755 103.976 cv
115.32 103.976 114.967 104.33 114.967 104.763 cv
114.967 105.199 115.32 105.55 115.755 105.55 cv
116.189 105.55 116.542 105.199 116.542 104.763 cv
f
118.942 104.164 mo
118.942 103.728 118.589 103.376 118.155 103.376 cv
117.72 103.376 117.367 103.728 117.367 104.164 cv
117.367 104.599 117.72 104.951 118.155 104.951 cv
118.589 104.951 118.942 104.599 118.942 104.164 cv
f
121.342 103.923 mo
121.342 103.49 120.989 103.136 120.555 103.136 cv
120.12 103.136 119.767 103.49 119.767 103.923 cv
119.767 104.359 120.12 104.71 120.555 104.71 cv
120.989 104.71 121.342 104.359 121.342 103.923 cv
f
123.862 103.683 mo
123.862 103.25 123.509 102.896 123.075 102.896 cv
122.64 102.896 122.287 103.25 122.287 103.683 cv
122.287 104.119 122.64 104.47 123.075 104.47 cv
123.509 104.47 123.862 104.119 123.862 103.683 cv
f
126.382 103.443 mo
126.382 103.009 126.029 102.656 125.595 102.656 cv
125.16 102.656 124.807 103.009 124.807 103.443 cv
124.807 103.878 125.16 104.232 125.595 104.232 cv
126.029 104.232 126.382 103.878 126.382 103.443 cv
f
128.902 103.324 mo
128.902 102.888 128.549 102.537 128.115 102.537 cv
127.68 102.537 127.327 102.888 127.327 103.324 cv
127.327 103.759 127.68 104.111 128.115 104.111 cv
128.549 104.111 128.902 103.759 128.902 103.324 cv
f
131.302 101.644 mo
131.302 101.208 130.949 100.857 130.515 100.857 cv
130.08 100.857 129.727 101.208 129.727 101.644 cv
129.727 102.078 130.08 102.431 130.515 102.431 cv
130.949 102.431 131.302 102.078 131.302 101.644 cv
f
133.702 100.804 mo
133.702 100.369 133.35 100.017 132.915 100.017 cv
132.48 100.017 132.127 100.369 132.127 100.804 cv
132.127 101.238 132.48 101.591 132.915 101.591 cv
133.35 101.591 133.702 101.238 133.702 100.804 cv
f
136.222 100.324 mo
136.222 99.8882 135.869 99.5366 135.435 99.5366 cv
135 99.5366 134.647 99.8882 134.647 100.324 cv
134.647 100.759 135 101.111 135.435 101.111 cv
135.869 101.111 136.222 100.759 136.222 100.324 cv
f
138.742 99.603 mo
138.742 99.1694 138.389 98.8159 137.955 98.8159 cv
137.52 98.8159 137.167 99.1694 137.167 99.603 cv
137.167 100.039 137.52 100.392 137.955 100.392 cv
138.389 100.392 138.742 100.039 138.742 99.603 cv
f
141.142 99.2437 mo
141.142 98.8081 140.79 98.4565 140.354 98.4565 cv
139.92 98.4565 139.567 98.8081 139.567 99.2437 cv
139.567 99.6792 139.92 100.031 140.354 100.031 cv
140.79 100.031 141.142 99.6792 141.142 99.2437 cv
f
143.662 99.3628 mo
143.662 98.9292 143.31 98.5757 142.875 98.5757 cv
142.44 98.5757 142.087 98.9292 142.087 99.3628 cv
142.087 99.7983 142.44 100.152 142.875 100.152 cv
143.31 100.152 143.662 99.7983 143.662 99.3628 cv
f
146.062 99.2437 mo
146.062 98.8081 145.709 98.4565 145.275 98.4565 cv
144.84 98.4565 144.487 98.8081 144.487 99.2437 cv
144.487 99.6792 144.84 100.031 145.275 100.031 cv
145.709 100.031 146.062 99.6792 146.062 99.2437 cv
f
148.582 99.1245 mo
148.582 98.689 148.229 98.3354 147.795 98.3354 cv
147.36 98.3354 147.007 98.689 147.007 99.1245 cv
147.007 99.5581 147.36 99.9116 147.795 99.9116 cv
148.229 99.9116 148.582 99.5581 148.582 99.1245 cv
f
150.982 98.7632 mo
150.982 98.3296 150.629 97.9766 150.195 97.9766 cv
149.76 97.9766 149.407 98.3296 149.407 98.7632 cv
149.407 99.1987 149.76 99.5503 150.195 99.5503 cv
150.629 99.5503 150.982 99.1987 150.982 98.7632 cv
f
153.502 97.2036 mo
153.502 96.769 153.149 96.416 152.715 96.416 cv
152.28 96.416 151.927 96.769 151.927 97.2036 cv
151.927 97.6387 152.28 97.9912 152.715 97.9912 cv
153.149 97.9912 153.502 97.6387 153.502 97.2036 cv
f
156.021 96.9639 mo
156.021 96.5288 155.67 96.1763 155.234 96.1763 cv
154.8 96.1763 154.447 96.5288 154.447 96.9639 cv
154.447 97.3984 154.8 97.751 155.234 97.751 cv
155.67 97.751 156.021 97.3984 156.021 96.9639 cv
f
158.422 97.2036 mo
158.422 96.769 158.069 96.416 157.635 96.416 cv
157.2 96.416 156.848 96.769 156.848 97.2036 cv
156.848 97.6387 157.2 97.9912 157.635 97.9912 cv
158.069 97.9912 158.422 97.6387 158.422 97.2036 cv
f
160.942 95.7637 mo
160.942 95.3291 160.59 94.9761 160.154 94.9761 cv
159.72 94.9761 159.367 95.3291 159.367 95.7637 cv
159.367 96.1982 159.72 96.5513 160.154 96.5513 cv
160.59 96.5513 160.942 96.1982 160.942 95.7637 cv
f
163.342 93.1235 mo
163.342 92.689 162.989 92.3359 162.555 92.3359 cv
162.12 92.3359 161.768 92.689 161.768 93.1235 cv
161.768 93.5581 162.12 93.9111 162.555 93.9111 cv
162.989 93.9111 163.342 93.5581 163.342 93.1235 cv
f
165.862 86.5234 mo
165.862 86.0889 165.51 85.7363 165.074 85.7363 cv
164.64 85.7363 164.287 86.0889 164.287 86.5234 cv
164.287 86.9585 164.64 87.311 165.074 87.311 cv
165.51 87.311 165.862 86.9585 165.862 86.5234 cv
f
168.382 81.9639 mo
168.382 81.5288 168.029 81.1763 167.595 81.1763 cv
167.16 81.1763 166.808 81.5288 166.808 81.9639 cv
166.808 82.3984 167.16 82.751 167.595 82.751 cv
168.029 82.751 168.382 82.3984 168.382 81.9639 cv
f
170.782 81.7236 mo
170.782 81.2891 170.43 80.936 169.995 80.936 cv
169.56 80.936 169.207 81.2891 169.207 81.7236 cv
169.207 82.1582 169.56 82.5112 169.995 82.5112 cv
170.43 82.5112 170.782 82.1582 170.782 81.7236 cv
f
173.302 80.5234 mo
173.302 80.0889 172.949 79.7363 172.515 79.7363 cv
172.08 79.7363 171.728 80.0889 171.728 80.5234 cv
171.728 80.9585 172.08 81.311 172.515 81.311 cv
172.949 81.311 173.302 80.9585 173.302 80.5234 cv
f
175.702 78.4834 mo
175.702 78.0488 175.35 77.6963 174.915 77.6963 cv
174.48 77.6963 174.127 78.0488 174.127 78.4834 cv
174.127 78.9185 174.48 79.271 174.915 79.271 cv
175.35 79.271 175.702 78.9185 175.702 78.4834 cv
f
178.223 73.9238 mo
178.223 73.4888 177.869 73.1362 177.435 73.1362 cv
177 73.1362 176.647 73.4888 176.647 73.9238 cv
176.647 74.3584 177 74.7109 177.435 74.7109 cv
177.869 74.7109 178.223 74.3584 178.223 73.9238 cv
f
180.742 67.9238 mo
180.742 67.4888 180.39 67.1362 179.955 67.1362 cv
179.52 67.1362 179.167 67.4888 179.167 67.9238 cv
179.167 68.3584 179.52 68.7109 179.955 68.7109 cv
180.39 68.7109 180.742 68.3584 180.742 67.9238 cv
f
183.143 68.1636 mo
183.143 67.729 182.789 67.376 182.354 67.376 cv
181.92 67.376 181.567 67.729 181.567 68.1636 cv
181.567 68.5981 181.92 68.9512 182.354 68.9512 cv
182.789 68.9512 183.143 68.5981 183.143 68.1636 cv
f
185.662 68.6436 mo
185.662 68.209 185.31 67.856 184.875 67.856 cv
184.44 67.856 184.087 68.209 184.087 68.6436 cv
184.087 69.0781 184.44 69.4312 184.875 69.4312 cv
185.31 69.4312 185.662 69.0781 185.662 68.6436 cv
f
188.063 62.6436 mo
188.063 62.209 187.709 61.856 187.274 61.856 cv
186.84 61.856 186.487 62.209 186.487 62.6436 cv
186.487 63.0781 186.84 63.4312 187.274 63.4312 cv
187.709 63.4312 188.063 63.0781 188.063 62.6436 cv
f
190.582 61.3237 mo
190.582 60.8887 190.229 60.5361 189.795 60.5361 cv
189.36 60.5361 189.007 60.8887 189.007 61.3237 cv
189.007 61.7583 189.36 62.1113 189.795 62.1113 cv
190.229 62.1113 190.582 61.7583 190.582 61.3237 cv
f
192.982 60.9639 mo
192.982 60.5288 192.629 60.1763 192.194 60.1763 cv
191.76 60.1763 191.407 60.5288 191.407 60.9639 cv
191.407 61.3984 191.76 61.751 192.194 61.751 cv
192.629 61.751 192.982 61.3984 192.982 60.9639 cv
f
195.502 60.2437 mo
195.502 59.8091 195.149 59.4561 194.715 59.4561 cv
194.28 59.4561 193.927 59.8091 193.927 60.2437 cv
193.927 60.6782 194.28 61.0313 194.715 61.0313 cv
195.149 61.0313 195.502 60.6782 195.502 60.2437 cv
f
198.022 61.3237 mo
198.022 60.8887 197.669 60.5361 197.234 60.5361 cv
196.8 60.5361 196.447 60.8887 196.447 61.3237 cv
196.447 61.7583 196.8 62.1113 197.234 62.1113 cv
197.669 62.1113 198.022 61.7583 198.022 61.3237 cv
f
200.422 63.3638 mo
200.422 62.9287 200.069 62.5762 199.635 62.5762 cv
199.2 62.5762 198.848 62.9287 198.848 63.3638 cv
198.848 63.7983 199.2 64.1514 199.635 64.1514 cv
200.069 64.1514 200.422 63.7983 200.422 63.3638 cv
f
202.942 65.2837 mo
202.942 64.8491 202.59 64.4961 202.154 64.4961 cv
201.72 64.4961 201.367 64.8491 201.367 65.2837 cv
201.367 65.7183 201.72 66.0713 202.154 66.0713 cv
202.59 66.0713 202.942 65.7183 202.942 65.2837 cv
f
205.342 65.7637 mo
205.342 65.3291 204.989 64.9761 204.555 64.9761 cv
204.12 64.9761 203.768 65.3291 203.768 65.7637 cv
203.768 66.1982 204.12 66.5513 204.555 66.5513 cv
204.989 66.5513 205.342 66.1982 205.342 65.7637 cv
f
207.862 65.7637 mo
207.862 65.3291 207.51 64.9761 207.074 64.9761 cv
206.64 64.9761 206.287 65.3291 206.287 65.7637 cv
206.287 66.1982 206.64 66.5513 207.074 66.5513 cv
207.51 66.5513 207.862 66.1982 207.862 65.7637 cv
f
210.262 61.9238 mo
210.262 61.4888 209.909 61.1362 209.475 61.1362 cv
209.04 61.1362 208.688 61.4888 208.688 61.9238 cv
208.688 62.3584 209.04 62.7109 209.475 62.7109 cv
209.909 62.7109 210.262 62.3584 210.262 61.9238 cv
f
212.782 56.1636 mo
212.782 55.729 212.43 55.376 211.995 55.376 cv
211.56 55.376 211.207 55.729 211.207 56.1636 cv
211.207 56.5981 211.56 56.9512 211.995 56.9512 cv
212.43 56.9512 212.782 56.5981 212.782 56.1636 cv
f
215.302 54.3638 mo
215.302 53.9287 214.949 53.5762 214.515 53.5762 cv
214.08 53.5762 213.728 53.9287 213.728 54.3638 cv
213.728 54.7983 214.08 55.1514 214.515 55.1514 cv
214.949 55.1514 215.302 54.7983 215.302 54.3638 cv
f
217.702 53.8838 mo
217.702 53.4487 217.35 53.0962 216.915 53.0962 cv
216.48 53.0962 216.127 53.4487 216.127 53.8838 cv
216.127 54.3184 216.48 54.6709 216.915 54.6709 cv
217.35 54.6709 217.702 54.3184 217.702 53.8838 cv
f
220.223 53.7637 mo
220.223 53.3291 219.869 52.9761 219.435 52.9761 cv
219 52.9761 218.647 53.3291 218.647 53.7637 cv
218.647 54.1982 219 54.5513 219.435 54.5513 cv
219.869 54.5513 220.223 54.1982 220.223 53.7637 cv
f
222.622 53.5234 mo
222.622 53.0889 222.27 52.7363 221.835 52.7363 cv
221.4 52.7363 221.047 53.0889 221.047 53.5234 cv
221.047 53.9585 221.4 54.311 221.835 54.311 cv
222.27 54.311 222.622 53.9585 222.622 53.5234 cv
f
225.143 54.7236 mo
225.143 54.2891 224.789 53.936 224.354 53.936 cv
223.92 53.936 223.567 54.2891 223.567 54.7236 cv
223.567 55.1582 223.92 55.5112 224.354 55.5112 cv
224.789 55.5112 225.143 55.1582 225.143 54.7236 cv
f
227.542 57.0034 mo
227.542 56.5688 227.189 56.2163 226.755 56.2163 cv
226.32 56.2163 225.967 56.5688 225.967 57.0034 cv
225.967 57.4385 226.32 57.791 226.755 57.791 cv
227.189 57.791 227.542 57.4385 227.542 57.0034 cv
f
230.063 54.1235 mo
230.063 53.689 229.709 53.3359 229.274 53.3359 cv
228.84 53.3359 228.487 53.689 228.487 54.1235 cv
228.487 54.5581 228.84 54.9111 229.274 54.9111 cv
229.709 54.9111 230.063 54.5581 230.063 54.1235 cv
f
232.582 49.2036 mo
232.582 48.769 232.229 48.416 231.795 48.416 cv
231.36 48.416 231.007 48.769 231.007 49.2036 cv
231.007 49.6382 231.36 49.9912 231.795 49.9912 cv
232.229 49.9912 232.582 49.6382 232.582 49.2036 cv
f
234.982 45.3638 mo
234.982 44.9287 234.629 44.5762 234.194 44.5762 cv
233.76 44.5762 233.407 44.9287 233.407 45.3638 cv
233.407 45.7983 233.76 46.1514 234.194 46.1514 cv
234.629 46.1514 234.982 45.7983 234.982 45.3638 cv
f
237.502 40.8037 mo
237.502 40.3691 237.149 40.0161 236.715 40.0161 cv
236.28 40.0161 235.927 40.3691 235.927 40.8037 cv
235.927 41.2383 236.28 41.5913 236.715 41.5913 cv
237.149 41.5913 237.502 41.2383 237.502 40.8037 cv
f
239.902 39.3638 mo
239.902 38.9287 239.55 38.5762 239.114 38.5762 cv
238.68 38.5762 238.327 38.9287 238.327 39.3638 cv
238.327 39.7983 238.68 40.1514 239.114 40.1514 cv
239.55 40.1514 239.902 39.7983 239.902 39.3638 cv
f
242.422 39.0034 mo
242.422 38.5688 242.069 38.2163 241.635 38.2163 cv
241.2 38.2163 240.848 38.5688 240.848 39.0034 cv
240.848 39.4385 241.2 39.791 241.635 39.791 cv
242.069 39.791 242.422 39.4385 242.422 39.0034 cv
f
244.942 38.1636 mo
244.942 37.729 244.59 37.376 244.154 37.376 cv
243.72 37.376 243.367 37.729 243.367 38.1636 cv
243.367 38.5981 243.72 38.9512 244.154 38.9512 cv
244.59 38.9512 244.942 38.5981 244.942 38.1636 cv
f
247.342 36.1235 mo
247.342 35.689 246.989 35.3359 246.555 35.3359 cv
246.12 35.3359 245.768 35.689 245.768 36.1235 cv
245.768 36.5581 246.12 36.9111 246.555 36.9111 cv
246.989 36.9111 247.342 36.5581 247.342 36.1235 cv
f
249.862 33.1235 mo
249.862 32.689 249.51 32.3359 249.074 32.3359 cv
248.64 32.3359 248.287 32.689 248.287 33.1235 cv
248.287 33.5581 248.64 33.9111 249.074 33.9111 cv
249.51 33.9111 249.862 33.5581 249.862 33.1235 cv
f
252.262 31.2036 mo
252.262 30.769 251.909 30.416 251.475 30.416 cv
251.04 30.416 250.688 30.769 250.688 31.2036 cv
250.688 31.6382 251.04 31.9912 251.475 31.9912 cv
251.909 31.9912 252.262 31.6382 252.262 31.2036 cv
f
254.782 31.3237 mo
254.782 30.8887 254.43 30.5361 253.995 30.5361 cv
253.56 30.5361 253.207 30.8887 253.207 31.3237 cv
253.207 31.7583 253.56 32.1113 253.995 32.1113 cv
254.43 32.1113 254.782 31.7583 254.782 31.3237 cv
f
257.302 30.7236 mo
257.302 30.2891 256.949 29.936 256.515 29.936 cv
256.08 29.936 255.728 30.2891 255.728 30.7236 cv
255.728 31.1582 256.08 31.5112 256.515 31.5112 cv
256.949 31.5112 257.302 31.1582 257.302 30.7236 cv
f
259.702 29.5234 mo
259.702 29.0889 259.35 28.7363 258.915 28.7363 cv
258.48 28.7363 258.127 29.0889 258.127 29.5234 cv
258.127 29.9585 258.48 30.311 258.915 30.311 cv
259.35 30.311 259.702 29.9585 259.702 29.5234 cv
f
262.223 24.3638 mo
262.223 23.9287 261.869 23.5762 261.435 23.5762 cv
261 23.5762 260.647 23.9287 260.647 24.3638 cv
260.647 24.7983 261 25.1514 261.435 25.1514 cv
261.869 25.1514 262.223 24.7983 262.223 24.3638 cv
f
264.622 22.9238 mo
264.622 22.4888 264.27 22.1362 263.835 22.1362 cv
263.4 22.1362 263.047 22.4888 263.047 22.9238 cv
263.047 23.3584 263.4 23.7109 263.835 23.7109 cv
264.27 23.7109 264.622 23.3584 264.622 22.9238 cv
f
267.143 19.5635 mo
267.143 19.1289 266.789 18.7764 266.354 18.7764 cv
265.92 18.7764 265.567 19.1289 265.567 19.5635 cv
265.567 19.9985 265.92 20.3511 266.354 20.3511 cv
266.789 20.3511 267.143 19.9985 267.143 19.5635 cv
f
269.542 16.0835 mo
269.542 15.6489 269.189 15.2959 268.755 15.2959 cv
268.32 15.2959 267.967 15.6489 267.967 16.0835 cv
267.967 16.5186 268.32 16.8711 268.755 16.8711 cv
269.189 16.8711 269.542 16.5186 269.542 16.0835 cv
f
272.063 15.3638 mo
272.063 14.9287 271.709 14.5762 271.274 14.5762 cv
270.84 14.5762 270.487 14.9287 270.487 15.3638 cv
270.487 15.7983 270.84 16.1514 271.274 16.1514 cv
271.709 16.1514 272.063 15.7983 272.063 15.3638 cv
f
274.582 15.1235 mo
274.582 14.689 274.229 14.3359 273.795 14.3359 cv
273.36 14.3359 273.007 14.689 273.007 15.1235 cv
273.007 15.5581 273.36 15.9111 273.795 15.9111 cv
274.229 15.9111 274.582 15.5581 274.582 15.1235 cv
f
276.982 9.00342 mo
276.982 8.56885 276.629 8.21631 276.194 8.21631 cv
275.76 8.21631 275.407 8.56885 275.407 9.00342 cv
275.407 9.43848 275.76 9.79102 276.194 9.79102 cv
276.629 9.79102 276.982 9.43848 276.982 9.00342 cv
f
0.125 lw
[0.5 1 ] 0 dsh
260.654 27.7734 mo
260.854 27.6235 li
261.104 27.4736 li
261.354 27.3237 li
261.604 27.1738 li
261.854 27.0234 li
262.104 26.9238 li
262.354 26.7734 li
262.604 26.6235 li
262.854 26.4736 li
263.104 26.3237 li
263.354 26.1738 li
263.604 26.0234 li
263.854 25.8735 li
264.104 25.7236 li
264.354 25.6235 li
264.604 25.4736 li
264.854 25.3237 li
265.104 25.1738 li
265.305 25.0234 li
265.555 24.8735 li
265.805 24.7236 li
266.055 24.5737 li
266.305 24.4238 li
266.555 24.3237 li
266.805 24.1738 li
267.055 24.0234 li
267.305 23.8735 li
267.555 23.7236 li
267.805 23.5737 li
268.055 23.4238 li
268.305 23.2734 li
268.555 23.1235 li
268.805 23.0234 li
269.055 22.8735 li
269.305 22.7236 li
269.555 22.5737 li
269.755 22.4238 li
270.005 22.2734 li
270.255 22.1235 li
270.505 21.9736 li
270.755 21.8237 li
271.005 21.6738 li
271.255 21.5737 li
271.505 21.4238 li
271.755 21.2734 li
272.005 21.1235 li
272.255 20.9736 li
272.505 20.8237 li
272.755 20.6738 li
273.005 20.5234 li
273.255 20.3735 li
273.505 20.2734 li
273.755 20.1235 li
274.005 19.9736 li
274.205 19.8237 li
274.455 19.6738 li
274.705 19.5234 li
274.955 19.3735 li
275.205 19.2236 li
275.455 19.0737 li
275.705 18.9736 li
275.955 18.8237 li
276.205 18.6738 li
234.904 42.8237 mo
235.154 42.6738 li
235.404 42.5234 li
235.654 42.3735 li
235.904 42.2236 li
236.154 42.0737 li
236.404 41.9238 li
236.654 41.7734 li
236.904 41.6235 li
237.154 41.5234 li
237.404 41.3735 li
237.654 41.2236 li
237.904 41.0737 li
238.154 40.9238 li
238.404 40.7734 li
238.654 40.6235 li
238.854 40.4736 li
239.104 40.3237 li
239.354 40.2236 li
239.604 40.0737 li
239.854 39.9238 li
240.104 39.7734 li
240.354 39.6235 li
240.604 39.4736 li
240.854 39.3237 li
241.104 39.1738 li
241.354 39.0234 li
241.604 38.8735 li
241.854 38.7734 li
242.104 38.6235 li
242.354 38.4736 li
242.604 38.3237 li
242.854 38.1738 li
243.104 38.0234 li
243.305 37.8735 li
243.555 37.7236 li
243.805 37.5737 li
244.055 37.4736 li
244.305 37.3237 li
244.555 37.1738 li
244.805 37.0234 li
245.055 36.8735 li
245.305 36.7236 li
245.555 36.5737 li
245.805 36.4238 li
246.055 36.2734 li
246.305 36.1738 li
246.555 36.0234 li
246.805 35.8735 li
247.055 35.7236 li
247.305 35.5737 li
247.555 35.4238 li
247.755 35.2734 li
248.005 35.1235 li
248.255 34.9736 li
248.505 34.8735 li
248.755 34.7236 li
249.005 34.5737 li
249.255 34.4238 li
249.505 34.2734 li
249.755 34.1235 li
250.005 33.9736 li
250.255 33.8237 li
250.505 33.6738 li
250.755 33.5737 li
251.005 33.4238 li
251.255 33.2734 li
251.505 33.1235 li
251.755 32.9736 li
251.955 32.8237 li
252.205 32.6738 li
252.455 32.5234 li
252.705 32.3735 li
252.955 32.2734 li
253.205 32.1235 li
253.455 31.9736 li
253.705 31.8237 li
253.955 31.6733 li
254.205 31.5234 li
254.455 31.3735 li
254.705 31.2236 li
254.955 31.0737 li
255.205 30.9736 li
255.455 30.8237 li
255.705 30.6733 li
255.955 30.5234 li
256.205 30.3735 li
256.404 30.2236 li
256.654 30.0737 li
256.904 29.9233 li
257.154 29.7734 li
257.404 29.6235 li
257.654 29.5234 li
257.904 29.3735 li
258.154 29.2236 li
258.404 29.0737 li
258.654 28.9233 li
258.904 28.7734 li
259.154 28.6235 li
259.404 28.4736 li
259.654 28.3237 li
259.904 28.2236 li
260.154 28.0737 li
260.404 27.9233 li
260.654 27.7734 li
209.205 57.8237 mo
209.455 57.6738 li
209.705 57.5234 li
209.955 57.4238 li
210.205 57.2734 li
210.455 57.1235 li
210.705 56.9736 li
210.955 56.8237 li
211.205 56.6738 li
211.455 56.5234 li
211.705 56.3735 li
211.955 56.2236 li
212.205 56.0737 li
212.404 55.9736 li
212.654 55.8237 li
212.904 55.6738 li
213.154 55.5234 li
213.404 55.3735 li
213.654 55.2236 li
213.904 55.0737 li
214.154 54.9238 li
214.404 54.7734 li
214.654 54.6738 li
214.904 54.5234 li
215.154 54.3735 li
215.404 54.2236 li
215.654 54.0737 li
215.904 53.9238 li
216.154 53.7734 li
216.404 53.6235 li
216.654 53.4736 li
216.854 53.3735 li
217.104 53.2236 li
217.354 53.0737 li
217.604 52.9238 li
217.854 52.7734 li
218.104 52.6235 li
218.354 52.4736 li
218.604 52.3237 li
218.854 52.1738 li
219.104 52.0737 li
219.354 51.9238 li
219.604 51.7734 li
219.854 51.6235 li
220.104 51.4736 li
220.354 51.3237 li
220.604 51.1738 li
220.854 51.0234 li
221.104 50.8735 li
221.305 50.7734 li
221.555 50.6235 li
221.805 50.4736 li
222.055 50.3237 li
222.305 50.1738 li
222.555 50.0234 li
222.805 49.8735 li
223.055 49.7236 li
223.305 49.5737 li
223.555 49.4736 li
223.805 49.3237 li
224.055 49.1738 li
224.305 49.0234 li
224.555 48.8735 li
224.805 48.7236 li
225.055 48.5737 li
225.305 48.4238 li
225.505 48.2734 li
225.755 48.1738 li
226.005 48.0234 li
226.255 47.8735 li
226.505 47.7236 li
226.755 47.5737 li
227.005 47.4238 li
227.255 47.2734 li
227.505 47.1235 li
227.755 46.9736 li
228.005 46.8237 li
228.255 46.7236 li
228.505 46.5737 li
228.755 46.4233 li
229.005 46.2734 li
229.255 46.1235 li
229.505 45.9736 li
229.755 45.8237 li
229.955 45.6733 li
230.205 45.5234 li
230.455 45.4233 li
230.705 45.2734 li
230.955 45.1235 li
231.205 44.9736 li
231.455 44.8237 li
231.705 44.6733 li
231.955 44.5234 li
232.205 44.3735 li
232.455 44.2236 li
232.705 44.1235 li
232.955 43.9736 li
233.205 43.8237 li
233.455 43.6733 li
233.705 43.5234 li
233.955 43.3735 li
234.205 43.2236 li
234.404 43.0737 li
234.654 42.9233 li
234.904 42.8237 li
183.505 72.8735 mo
183.755 72.7236 li
184.005 72.5737 li
184.255 72.4238 li
184.505 72.2734 li
184.755 72.1235 li
185.005 71.9736 li
185.255 71.8735 li
185.505 71.7236 li
185.755 71.5737 li
185.955 71.4238 li
186.205 71.2734 li
186.455 71.1235 li
186.705 70.9736 li
186.955 70.8237 li
187.205 70.6738 li
187.455 70.5737 li
187.705 70.4238 li
187.955 70.2734 li
188.205 70.1235 li
188.455 69.9736 li
188.705 69.8237 li
188.955 69.6738 li
189.205 69.5234 li
189.455 69.3735 li
189.705 69.2734 li
189.955 69.1235 li
190.205 68.9736 li
190.404 68.8237 li
190.654 68.6738 li
190.904 68.5234 li
191.154 68.3735 li
191.404 68.2236 li
191.654 68.0737 li
191.904 67.9736 li
192.154 67.8237 li
192.404 67.6738 li
192.654 67.5234 li
192.904 67.3735 li
193.154 67.2236 li
193.404 67.0737 li
193.654 66.9238 li
193.904 66.7734 li
194.154 66.6738 li
194.404 66.5234 li
194.604 66.3735 li
194.854 66.2236 li
195.104 66.0737 li
195.354 65.9238 li
195.604 65.7734 li
195.854 65.6235 li
196.104 65.4736 li
196.354 65.3735 li
196.604 65.2236 li
196.854 65.0737 li
197.104 64.9238 li
197.354 64.7734 li
197.604 64.6235 li
197.854 64.4736 li
198.104 64.3237 li
198.354 64.1738 li
198.604 64.0234 li
198.854 63.9238 li
199.055 63.7734 li
199.305 63.6235 li
199.555 63.4736 li
199.805 63.3237 li
200.055 63.1738 li
200.305 63.0234 li
200.555 62.8735 li
200.805 62.7236 li
201.055 62.6235 li
201.305 62.4736 li
201.555 62.3237 li
201.805 62.1738 li
202.055 62.0234 li
202.305 61.8735 li
202.555 61.7236 li
202.805 61.5737 li
203.055 61.4238 li
203.305 61.3237 li
203.505 61.1738 li
203.755 61.0234 li
204.005 60.8735 li
204.255 60.7236 li
204.505 60.5737 li
204.755 60.4238 li
205.005 60.2734 li
205.255 60.1235 li
205.505 60.0234 li
205.755 59.8735 li
206.005 59.7236 li
206.255 59.5737 li
206.505 59.4238 li
206.755 59.2734 li
207.005 59.1235 li
207.255 58.9736 li
207.505 58.8237 li
207.755 58.7236 li
207.955 58.5737 li
208.205 58.4233 li
208.455 58.2734 li
208.705 58.1235 li
208.955 57.9736 li
209.205 57.8237 li
157.805 87.8735 mo
158.055 87.7734 li
158.305 87.6235 li
158.555 87.4736 li
158.805 87.3237 li
159.055 87.1738 li
159.305 87.0234 li
159.505 86.8735 li
159.755 86.7236 li
160.005 86.5737 li
160.255 86.4736 li
160.505 86.3237 li
160.755 86.1738 li
161.005 86.0234 li
161.255 85.8735 li
161.505 85.7236 li
161.755 85.5737 li
162.005 85.4238 li
162.255 85.2734 li
162.505 85.1738 li
162.755 85.0234 li
163.005 84.8735 li
163.255 84.7236 li
163.505 84.5737 li
163.755 84.4238 li
163.955 84.2734 li
164.205 84.1235 li
164.455 83.9736 li
164.705 83.8735 li
164.955 83.7236 li
165.205 83.5737 li
165.455 83.4238 li
165.705 83.2734 li
165.955 83.1235 li
166.205 82.9736 li
166.455 82.8237 li
166.705 82.6738 li
166.955 82.5737 li
167.205 82.4238 li
167.455 82.2734 li
167.705 82.1235 li
167.955 81.9736 li
168.154 81.8237 li
168.404 81.6738 li
168.654 81.5234 li
168.904 81.3735 li
169.154 81.2236 li
169.404 81.1235 li
169.654 80.9736 li
169.904 80.8237 li
170.154 80.6738 li
170.404 80.5234 li
170.654 80.3735 li
170.904 80.2236 li
171.154 80.0737 li
171.404 79.9238 li
171.654 79.8237 li
171.904 79.6738 li
172.154 79.5234 li
172.404 79.3735 li
172.604 79.2236 li
172.854 79.0737 li
173.104 78.9238 li
173.354 78.7734 li
173.604 78.6235 li
173.854 78.5234 li
174.104 78.3735 li
174.354 78.2236 li
174.604 78.0737 li
174.854 77.9238 li
175.104 77.7734 li
175.354 77.6235 li
175.604 77.4736 li
175.854 77.3237 li
176.104 77.2236 li
176.354 77.0737 li
176.604 76.9238 li
176.854 76.7734 li
177.055 76.6235 li
177.305 76.4736 li
177.555 76.3237 li
177.805 76.1738 li
178.055 76.0234 li
178.305 75.9238 li
178.555 75.7734 li
178.805 75.6235 li
179.055 75.4736 li
179.305 75.3237 li
179.555 75.1738 li
179.805 75.0234 li
180.055 74.8735 li
180.305 74.7236 li
180.555 74.6235 li
180.805 74.4736 li
181.055 74.3237 li
181.305 74.1733 li
181.505 74.0234 li
181.755 73.8735 li
182.005 73.7236 li
182.255 73.5737 li
182.505 73.4233 li
182.755 73.3237 li
183.005 73.1733 li
183.255 73.0234 li
183.505 72.8735 li
132.104 102.923 mo
132.354 102.773 li
132.604 102.625 li
132.854 102.474 li
133.055 102.375 li
133.305 102.224 li
133.555 102.074 li
133.805 101.923 li
134.055 101.773 li
134.305 101.625 li
134.555 101.474 li
134.805 101.324 li
135.055 101.173 li
135.305 101.074 li
135.555 100.923 li
135.805 100.773 li
136.055 100.625 li
136.305 100.474 li
136.555 100.324 li
136.805 100.173 li
137.055 100.023 li
137.305 99.8745 li
137.505 99.7729 li
137.755 99.6245 li
138.005 99.4741 li
138.255 99.3237 li
138.505 99.1733 li
138.755 99.0229 li
139.005 98.8745 li
139.255 98.7241 li
139.505 98.5737 li
139.754 98.4741 li
140.004 98.3237 li
140.254 98.1733 li
140.504 98.0229 li
140.754 97.874 li
141.004 97.7236 li
141.254 97.5732 li
141.504 97.4238 li
141.705 97.2734 li
141.955 97.1235 li
142.205 97.0234 li
142.455 96.8735 li
142.705 96.7236 li
142.955 96.5737 li
143.205 96.4238 li
143.455 96.2734 li
143.705 96.1235 li
143.955 95.9736 li
144.205 95.8237 li
144.455 95.7236 li
144.705 95.5737 li
144.955 95.4238 li
145.205 95.2734 li
145.455 95.1235 li
145.705 94.9736 li
145.955 94.8237 li
146.155 94.6738 li
146.405 94.5234 li
146.654 94.4238 li
146.904 94.2734 li
147.154 94.1235 li
147.404 93.9736 li
147.654 93.8237 li
147.904 93.6738 li
148.154 93.5234 li
148.404 93.3735 li
148.654 93.2236 li
148.904 93.1235 li
149.154 92.9736 li
149.404 92.8237 li
149.654 92.6738 li
149.904 92.5234 li
150.154 92.3735 li
150.404 92.2236 li
150.604 92.0737 li
150.854 91.9238 li
151.104 91.8237 li
151.354 91.6738 li
151.604 91.5234 li
151.854 91.3735 li
152.104 91.2236 li
152.354 91.0737 li
152.604 90.9238 li
152.854 90.7734 li
153.104 90.6235 li
153.354 90.5234 li
153.604 90.3735 li
153.854 90.2236 li
154.104 90.0737 li
154.354 89.9238 li
154.604 89.7734 li
154.854 89.6235 li
155.055 89.4736 li
155.305 89.3237 li
155.555 89.1738 li
155.805 89.0737 li
156.055 88.9238 li
156.305 88.7734 li
156.555 88.6235 li
156.805 88.4736 li
157.055 88.3237 li
157.305 88.1738 li
157.555 88.0234 li
157.805 87.8735 li
106.405 117.974 mo
106.604 117.824 li
106.854 117.673 li
107.104 117.523 li
107.354 117.375 li
107.604 117.224 li
107.854 117.074 li
108.104 116.974 li
108.354 116.824 li
108.604 116.673 li
108.854 116.523 li
109.104 116.375 li
109.354 116.224 li
109.604 116.074 li
109.854 115.923 li
110.104 115.773 li
110.354 115.673 li
110.605 115.523 li
110.855 115.375 li
111.055 115.224 li
111.305 115.074 li
111.555 114.923 li
111.805 114.773 li
112.055 114.625 li
112.305 114.474 li
112.555 114.324 li
112.805 114.224 li
113.055 114.074 li
113.305 113.923 li
113.555 113.773 li
113.805 113.625 li
114.055 113.474 li
114.305 113.324 li
114.555 113.173 li
114.805 113.023 li
115.055 112.923 li
115.255 112.773 li
115.505 112.625 li
115.755 112.474 li
116.005 112.324 li
116.255 112.173 li
116.505 112.023 li
116.755 111.875 li
117.005 111.724 li
117.255 111.625 li
117.505 111.474 li
117.755 111.324 li
118.005 111.173 li
118.255 111.023 li
118.505 110.875 li
118.755 110.724 li
119.005 110.574 li
119.255 110.423 li
119.505 110.324 li
119.705 110.173 li
119.955 110.023 li
120.205 109.875 li
120.455 109.724 li
120.705 109.574 li
120.955 109.423 li
121.205 109.273 li
121.455 109.125 li
121.705 109.023 li
121.955 108.875 li
122.205 108.724 li
122.455 108.574 li
122.705 108.423 li
122.955 108.273 li
123.205 108.125 li
123.455 107.974 li
123.705 107.824 li
123.955 107.724 li
124.155 107.574 li
124.405 107.423 li
124.655 107.273 li
124.905 107.125 li
125.155 106.974 li
125.405 106.824 li
125.655 106.673 li
125.905 106.523 li
126.155 106.375 li
126.405 106.273 li
126.655 106.125 li
126.905 105.974 li
127.155 105.824 li
127.405 105.673 li
127.655 105.523 li
127.905 105.375 li
128.155 105.224 li
128.405 105.074 li
128.605 104.974 li
128.855 104.824 li
129.105 104.673 li
129.355 104.523 li
129.605 104.375 li
129.855 104.224 li
130.105 104.074 li
130.355 103.923 li
130.605 103.773 li
130.855 103.673 li
131.105 103.523 li
131.355 103.375 li
131.605 103.224 li
131.855 103.074 li
132.105 102.923 li
80.6548 132.974 mo
80.9048 132.875 li
81.1548 132.724 li
81.4048 132.574 li
81.6548 132.423 li
81.9048 132.273 li
82.1548 132.125 li
82.4048 131.974 li
82.6548 131.824 li
82.9048 131.673 li
83.1548 131.523 li
83.4048 131.423 li
83.6548 131.273 li
83.9048 131.125 li
84.1548 130.974 li
84.355 130.824 li
84.605 130.673 li
84.855 130.523 li
85.105 130.375 li
85.355 130.224 li
85.605 130.125 li
85.855 129.974 li
86.105 129.824 li
86.355 129.673 li
86.605 129.523 li
86.855 129.375 li
87.105 129.224 li
87.355 129.074 li
87.605 128.923 li
87.855 128.824 li
88.105 128.673 li
88.355 128.523 li
88.605 128.375 li
88.8047 128.224 li
89.0547 128.074 li
89.3047 127.923 li
89.5547 127.773 li
89.8047 127.625 li
90.0547 127.523 li
90.3047 127.375 li
90.5547 127.224 li
90.8047 127.074 li
91.0547 126.923 li
91.3047 126.773 li
91.5547 126.625 li
91.8047 126.474 li
92.0547 126.324 li
92.3047 126.224 li
92.5547 126.074 li
92.8047 125.923 li
93.0547 125.773 li
93.2549 125.625 li
93.5049 125.474 li
93.7549 125.324 li
94.0049 125.173 li
94.2549 125.023 li
94.5049 124.923 li
94.7549 124.773 li
95.0049 124.625 li
95.2549 124.474 li
95.5049 124.324 li
95.7549 124.173 li
96.0049 124.023 li
96.2549 123.875 li
96.5049 123.724 li
96.7549 123.625 li
97.0049 123.474 li
97.2549 123.324 li
97.5049 123.173 li
97.7051 123.023 li
97.9551 122.875 li
98.2051 122.724 li
98.4551 122.574 li
98.7051 122.423 li
98.9551 122.273 li
99.2051 122.173 li
99.4551 122.023 li
99.7051 121.875 li
99.9551 121.724 li
100.205 121.574 li
100.455 121.423 li
100.705 121.273 li
100.955 121.125 li
101.205 120.974 li
101.455 120.875 li
101.705 120.724 li
101.955 120.574 li
102.155 120.423 li
102.405 120.273 li
102.655 120.125 li
102.905 119.974 li
103.155 119.824 li
103.405 119.673 li
103.655 119.574 li
103.905 119.423 li
104.155 119.273 li
104.405 119.125 li
104.655 118.974 li
104.905 118.824 li
105.155 118.673 li
105.405 118.523 li
105.655 118.375 li
105.905 118.273 li
106.155 118.125 li
106.405 117.974 li
54.9546 148.023 mo
55.2046 147.875 li
55.4546 147.724 li
55.7046 147.574 li
55.9546 147.423 li
56.2046 147.324 li
56.4546 147.173 li
56.7046 147.023 li
56.9546 146.875 li
57.2046 146.724 li
57.4546 146.574 li
57.7046 146.423 li
57.9048 146.273 li
58.1548 146.125 li
58.4048 146.023 li
58.6548 145.875 li
58.9048 145.724 li
59.1548 145.574 li
59.4048 145.423 li
59.6548 145.273 li
59.9048 145.125 li
60.1548 144.974 li
60.4048 144.824 li
60.6548 144.724 li
60.9048 144.574 li
61.1548 144.423 li
61.4048 144.273 li
61.6548 144.125 li
61.9048 143.974 li
62.1548 143.824 li
62.355 143.673 li
62.605 143.523 li
62.855 143.423 li
63.105 143.273 li
63.355 143.125 li
63.605 142.974 li
63.855 142.824 li
64.105 142.673 li
64.355 142.523 li
64.605 142.375 li
64.855 142.224 li
65.105 142.125 li
65.355 141.974 li
65.605 141.824 li
65.855 141.673 li
66.105 141.523 li
66.355 141.375 li
66.605 141.224 li
66.8047 141.074 li
67.0547 140.923 li
67.3047 140.824 li
67.5547 140.673 li
67.8047 140.523 li
68.0547 140.375 li
68.3047 140.224 li
68.5547 140.074 li
68.8047 139.923 li
69.0547 139.773 li
69.3047 139.625 li
69.5552 139.474 li
69.8052 139.375 li
70.0552 139.224 li
70.3052 139.074 li
70.5552 138.923 li
70.8052 138.773 li
71.0552 138.625 li
71.2549 138.474 li
71.5049 138.324 li
71.7549 138.173 li
72.0049 138.074 li
72.2549 137.923 li
72.5049 137.773 li
72.7549 137.625 li
73.0049 137.474 li
73.2549 137.324 li
73.5049 137.173 li
73.7549 137.023 li
74.0049 136.875 li
74.2549 136.773 li
74.5049 136.625 li
74.7549 136.474 li
75.0049 136.324 li
75.2549 136.173 li
75.5049 136.023 li
75.7051 135.875 li
75.9551 135.724 li
76.2051 135.574 li
76.4551 135.474 li
76.7051 135.324 li
76.9551 135.173 li
77.2051 135.023 li
77.4551 134.875 li
77.7051 134.724 li
77.9551 134.574 li
78.2051 134.423 li
78.4551 134.273 li
78.7051 134.173 li
78.9551 134.023 li
79.2051 133.875 li
79.4551 133.724 li
79.7051 133.574 li
79.9551 133.423 li
80.1553 133.273 li
80.4053 133.125 li
80.6553 132.974 li
29.2549 163.074 mo
29.5049 162.923 li
29.7549 162.773 li
30.0049 162.625 li
30.2549 162.474 li
30.5049 162.324 li
30.7549 162.173 li
31.0049 162.023 li
31.2549 161.923 li
31.4546 161.773 li
31.7046 161.625 li
31.9546 161.474 li
32.2046 161.324 li
32.4546 161.173 li
32.7046 161.023 li
32.9546 160.875 li
33.2046 160.724 li
33.4546 160.625 li
33.7046 160.474 li
33.9546 160.324 li
34.2046 160.173 li
34.4546 160.023 li
34.7046 159.875 li
34.9546 159.724 li
35.2046 159.574 li
35.4546 159.423 li
35.7046 159.324 li
35.9048 159.173 li
36.1548 159.023 li
36.4048 158.875 li
36.6548 158.724 li
36.9048 158.574 li
37.1548 158.423 li
37.4048 158.273 li
37.6548 158.125 li
37.9048 158.023 li
38.1548 157.875 li
38.4048 157.724 li
38.6548 157.574 li
38.9048 157.423 li
39.1548 157.273 li
39.4048 157.125 li
39.6548 156.974 li
39.9048 156.824 li
40.1548 156.673 li
40.355 156.574 li
40.605 156.423 li
40.855 156.273 li
41.105 156.125 li
41.355 155.974 li
41.605 155.824 li
41.855 155.673 li
42.105 155.523 li
42.355 155.375 li
42.605 155.273 li
42.855 155.125 li
43.105 154.974 li
43.355 154.824 li
43.605 154.673 li
43.855 154.523 li
44.105 154.375 li
44.355 154.224 li
44.605 154.074 li
44.8052 153.974 li
45.0552 153.824 li
45.3052 153.673 li
45.5552 153.523 li
45.8052 153.375 li
46.0552 153.224 li
46.3052 153.074 li
46.5552 152.923 li
46.8052 152.773 li
47.0552 152.673 li
47.3052 152.523 li
47.5552 152.375 li
47.8052 152.224 li
48.0552 152.074 li
48.3052 151.923 li
48.5552 151.773 li
48.8052 151.625 li
49.0552 151.474 li
49.2549 151.375 li
49.5049 151.224 li
49.7549 151.074 li
50.0049 150.923 li
50.2549 150.773 li
50.5049 150.625 li
50.7549 150.474 li
51.0049 150.324 li
51.2549 150.173 li
51.5049 150.074 li
51.7549 149.923 li
52.0049 149.773 li
52.2549 149.625 li
52.5049 149.474 li
52.7549 149.324 li
53.0049 149.173 li
53.2549 149.023 li
53.5049 148.875 li
53.7051 148.724 li
53.9551 148.625 li
54.2051 148.474 li
54.4551 148.324 li
54.7051 148.173 li
54.9551 148.023 li
@
0.5 lw
[] 0 dsh
29.2549 3.67383 mo
29.2549 182.724 li
276.205 182.724 li
276.205 3.67383 li
29.2549 3.67383 li
29.2549 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWFU+Helvetica*1 uf/DVPWFU+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (semilog.eps)%%CreationDate: 10/4/10 2:26 PM%AI9_DataStream%Gb!j.G@)iCdO>$B!PSZ7.!ZG."j*F)F-\L08s6F)=jJ2aZeqqR#sH0o^h93ZhmIqQTr4eUF][q00#,.\RLd$DiC@n[n#VjKn6S;B%n\u7+s,>n+qs1p'EGAH#-DYkr<D9/@/GbOgA!p";JR0dd3qIn^S=NAD*H=+lNV]El2!Zae>Ff]tEHO+.U#NZ9s$rUP3\BXEja92Y%pVcK/PsQ_c>4)"%l=_qdc+KG]$Y:=X>+G?`h37Z-/P`V.31GS1i>)*84`,V'=YKbLMAsH.J)1pdd"oVX@t5UriBc`DJ%l\11Gi7a%0o*bJ3kdhQB9MqnYuEj'o&t!IQ&Z4lrk^#1C%N^hEg\39%6RsQ+2-oTd[Khu_ri0,p.?<`qlQ9B_'lP0=McS!'(DlLQYN6D&n%Wb%AA!amgm^pTaYO[Ei]fTr?Wli;X4&$57ak-gh6UFC^o9#U?2"7&brj,<hGf4WV&/a;34U+(!3is]6XDhqFiD'oK\rp*>6"a@s2QR\%*3!o-RXBoIZo:JQ3Qs5D9sZBrKN=f"qBJ`@!25%oYrKB7h;H[MGm'a=.YSf$3$F9q$=5oQRnp9F<'ol+UH=,&iGH-Y'O$hZZr3fc%hFDLO7;n:LX%dnGFnJYF2bcL*k[S>ls,?k?)'GC6CaKXg!Mf$]3`b!Dg">g@l/:h?mBC$"LB,<`Bl?'#9r"Brd97((X][1?9uPG"%e]!#bMgo?CWEAdg&E#@4K[3<r5"d34<"Ruk+M^oAJ>[uaSlVo]2L-g@KNcJCr(8<0<\auhP0%H=DDRK-3ggE+6&:nZ[keo#Q,u9C%p]d?eX&O[SV%UFD.`%<H$0kKjn?c@n-K4?,'qSL-j;g!b10u^WdNa#EDp$B06oX$;C;HFu'5G@RjI)0D0I-@G3\VfRKR(b&+Rd1;%i"LRUN8P@Q,&e_X_i3Lejpcg6']oOH&nmI-Tbbi[5+t`Z$>&f)^rQh@#o!]1i01fFAkkfk`_ONCHA@X+CF%LSs.C.O%mH[5Z@ZW<%j;D)Tp^=K;Ie!gZW/u43IddZY@!6)ZiKK3?9&L@t_>N5TX<Q=D"KnPMkY^1=0QMI=aD48b8"^@"#i&t#OI;<[_oTs08ACs3H+c`X%q&e+;fuZ;hAd<7<=d,a;5PTn8A:MMp#Y`=On-O5FFrnE2ZXqo8O<ZoMh(A)(H*><$%7X*9$J>eB?H?nSi(ca3TMG>0E.a:r.jE<!%N#cZT]p%$hqrBd57n-6-PO)nejodT<Ke!'lp90A@j;j:g``<h\A2pQ8TBpH@hlHVbhH'B4N9TUWb>;6k!Ce>%'&HZ_+cfVEYM:dF%Qb:F[/H,m($!$&^IlpMuW.2oR6qHi4oe6.(nL"sF7/]dXV,HB`qNq+QVoeCL>4+I(r@8T''D4$S="KNll<j,.j"H`jM>ES:X&R/Y%oe6-].fTc;LUDb1ZEE8tr/:JAoAel-GbSARj4.lf>tCm9WA8i:da`BD=KTGYoFsSQ_']BX5L65?4=W_5dE7\6+]V;,eM<a_Ig,)G%r"mtc<oFM9#4qnD62QJ[V/b8:F,#Xopb.(h<t;jZk`&Q\W[7Ho]IgU-;,`%'p*o6QYo];bJK6+/-08Z(rl1emS&^R_P>DpXV9*)C%7:8i)iA+_F'DVr"%A6:a6'$-BGh%&o@TE:NJOZ&<ah5`"#&geXoS':J95/dXSd>o'-?GAP;HX`?4&B!^l(SRs&<aFWL0Aj#1M#Wg%4ks@tL-rUIjt3\OBfW#s>`dYco+XaoKYXL1<0E8/?.-2e><cGm0CMqa<iLs=-A5#<\ds'[E_Y&=">?_bc)SS#@2&hol3oXQC(m^N%,"&SdL.hWc$/S.tWY/9qrP_gq/\V;]8D_7GB43XFg7TM:o`ff_d&rHCBrk=e9Cg0"S]f1E^tT0%]:7h,APZ@J*[4C&.o7M'7A_D.%>AB_X_B66i:f]FsO2Br/[YjD@o%;K`-d=JXKO]"&XUf3?X=VjO;QXT]g/(;VDhSsigA4YS'a\*/Z&ha!9/pY3^tsX1a_d/#UA)iO%+0[hO6:!(d;h:D,Bo2C-!8lbMC77t+ZC2+o=L&-YK'X9KRJ[P&!IVe%-1P_JD[RkK*h^"<KXtO32n:6M%iM,KbQW]lo?pA[F-GLJ%<j\[pV9f9MTfk).BUMYY]a"M9^#6BJnp\JQP&Qu=>8^oa!a0Hs=%7U2lHK=h"m$\1-9G5(91"63-/L:d^80+#6)L)C.m-sQoM+2C%!h#+n+jgsT>:PED4lWlO&fs[(2h<\@$=(??LFF)I[#S1gXO:RG\"\(g<#M%%=I(3L7/@ZY$5;nf5,$77Ag6V_$#2;&_mKZ9<Y?r2%4.CsQc`+9+cDg]2)B5`YQ]+RKTrOe9BXV/GL)cn&C-DOlEYXJH6a%D3Ju"us>XtXrEFBGg)!e4f3>Bb8#+8:`3=,;/>4T7nZrt4e%/ONGu\Q(6"j>#RuSKdtOFpH*(Gg7$UQc*r?WdC>&9@5+`!5'd]c,e#:P0-l^U_d^0ZlrDUUY"p5ZJ%)4-!Z_(LU)R%%'$W"J9SK>%=-^7*3(^0)3?euSLs-r\hc29,;;[Nb!Tksh=2Rq(Zte$,OiB$B#+@'Br(Z;/#m,<QZ*_`KQ!+K:I1e!r>,ZNP^.V9qi0kP.Nm9&"%?/]<,(KW"#l<BMXPIf;.pR/l%'4q-"WK\CGGFZ7f0RRFlIt8ujni;"Cd-jN2Wj"HmrTF6roocN;//Dt$SL=+7/QL6N_kWE2na_R#%OV?Hl#u^^]O]SIoc/03]\$Hg$-%)^8m3Mf[-i]CDk+lTMDHspN[OesKBbA$aEE6#3mXco#.QCI/H&Umtri^pSJ87\FNmkX4`^_4;%W7WP5O8'NR9]3MkF6OPmo.io69IP/.&W2mqOS;_SW4o0%&OaK:HVnle!G\M<rC8).90/c]1@0U(Q$b*A#%77uau7kXaf%H#+O?;@%prT?lRu]^n*[/H!bXXI/g)GM57;jNpHq[`DLg[o-$Jh:55u4@O@=fOVV2j3qp%p><dd#%h,',O*ot)Dh.Tc3qf?,$a;Pf(O@p5G[%Uba+*pVhV</[Z(6^P*WqaGl,Q9b/J3=%2CS;0fQ>RdZA"4fV7QWADK;H^GDE4!Jf;<8E[7G=70@-WT?*l<LIV@HL2<DX6=MS1n5*%5Z)&Q#i<dI-;OCkMlG>0@mAG6p\Ws/)7LpmJak+?hAEVSh0'l+BnDC0:hs@61E-:]oKGHOb\Y_mMM'L@Riu9<\r."fZ`a)K'Iq>k%[,7=$HBb.DIm+nFL3'bcr:c73A-R+'Z"Kc%r-(!^^5JqhhGAmoK@[Ccn&#[H649&O^&Q<q.87$/qU^f@s4uqK#5B_&?+j"6O'YZ>%HLHpAi[t`$@ucjY*/nKXnU7;6,*3B5rSAB'4rq*n,#]VB;33]*oV]Qb@#k`.BLn(A^jkiC7Nf^1b!/Fdpm5/Z$G4!$HE][LTIDS0%=2)@D>%C&Po>q9!'P!"UDYsl$k@*4oBYr3k5Wpo5eBb'$)[*@PMJ)>-<)a'XJ"WgJcd@,t[YT\f:g::nI4p\Q;,IO!+eWP2ncld5%)bQq2WH:`^SPnjso0+HXY"=Ug\s[@)W!b+5Sb<ocD6a_*<bDL2I3OhhXU[f+K$jds4j<):psGPS#Q<5$L@B.='Yg&2$bb`6Wo*u\%`8U%4F?U8Bh@oOC*91H_<>fsLE3Pf(^++o.e8aXrUD>Y#"`cqQofsE^ZqkSZ>Nh+$imj[+k]u6PS:ndd/gW1W(?3ZQeOMie9Q0]d%E+/Hq_D%?AY(-eRfRail+!*&Z!MU`*TClCdDX[Op5nb-o@ngPt)0P*_6j@t9`>K4De9j<pS.<JuQIj#c&e)X'5T2;B8MR>%HK!c0%-o,M6/G<^.0@.V6SVf,fJ&L<$kiLhU<:6Npqg/'NclVje)=giiN?hFu&/`,*R%BuTJ^Z[+aV^VF?dJRioVaYcc,Yh&qoBGdOR\pM%AtRph+5ta,k`s<3:G6tqPr=!hLnlTQlA^F^m9NHEm.J8CgAXF'&\T_1W8B5j]pWQkct*Fl+=H%*A3Tta?B%F&AUN3%atTZ$>RL0(%1\s)K0+:X3"O`2k8JUk\'dg9e\6`!Ko,c8rs5_a(/];3SC[Q>(3\Yf]oL,:]kcEKV9gnZ&r)<U\?s@*amS*rODPTnMJF[gYioM7-%;@Mnr.uWkkaaaF30!,Q^&c8=X2+XPHYpAdTCGN>5)O:\,bV$aDN6`sj7tWPk`cs.$>@S6UGP51Y2(otdj*kdrRWrh_dNjnr[!rZN%duktSVDO_A\keO(B[iIt\pbeiSq%X!ljmP9*p.-lj<4B<RmhB8NmQFGPL`"k7Qen+Dh'7Er06lGUAmG?ZKDMZ^&*G2*25)nW9@UF%\G+YQprn&rW:]KZf=ODU!L`_ca,@IF48Na>V`2p"SSn8<e#i+`\rH`\DA.MtgZ78V2YD:*:&gc%1Ol7U`8B7iM8-B\'7XXB-iVCd%:AgZRSG50-3Q_8kDZ:3]:&Z/^S,>AG2YhQq<:]KSWT;s1;TZ[@V3:lE<9b'\[c[PAZVAL$^Mi`R2/Vg5IcPaDSB3aq?@`e&<NE?(%:!Qpj&S^i]ZtF5'_pj%j_e>s>"eY_!Np!LBoIkFK7OMrFk%J-U9Fk3,7eu%Gnqa6]d*2M;'r-M*KdMdPA!Oq8a=57^,QC5[!.OUF%q6r6W6[mo52bunKdI?+t2t69%Iu#.9>I3"Yf:L=,Bb5,5<4+EJ[/P9<=@;sbXj1R_hjoQj;MY!%%0RR1.=BA=J79$b"5C`XlT_Mn%F;JB9jU>t@g8b1[qK'2"PYY$=%1u'mC=5YMRU?)kcp<mkF9%^-W:MTaSNoZI)>Uo9CA2]6'B`b@BQIF9ZP,G-qt\XIf<kH+6@uOs%KVSA;>4'&fAE2FIl@0JABE)t1l;7.,mqA(pB0MlG#(Mu&rSB`^:0Sk-!7+"\k&`]a3aSJar!*\mrrjsE^AmL`QlH':1mmu`Sc<k:%%&'pc^mMYD>CH+Rri=YAI6(M>WT)e]_-BHc-2CNqDH<AR\6_._Q<a#7cRZid:$LPqd-tsL6j[hAREZg$Zha4%B7m'Y*/uMHd2pPo%1scroB-a;,afH98q%)E]R,hP5k*(g]0.ltbX<00q^HI7$3,<Z!,dchr1+SApZR_FbSEql.14K&h=R>bD"0[%2!8+`_LV41D;f8_a%i&IoLi4qOL?7E6gS9W@,i`)Fn<J??rd/q'1GNeFf*a1AIgBK#Jm*%gf)_2SS66kMR(8me]M\c(JpAP;$Pc19Y2ZGp.HL5B0o6udB%J&:;(NM"L/@oU:Uq.(Zm,bu`;QWfSUHdnL+]cFW._98PBbFn$tC9pKI3$#KTWcnB7+nWA&C%$O>LJ<@^RFHY:O7R)W\ieNVD,iO>%:1TQ=m9l3JS7Wr62OOCeHEY8:cb,N\Dq8[tqRtQ(A_!S'(\^h62>iiN5"+kmBIkg-Sra=OGpUM5DHF:\#-I.!DG8OLBVqi\lLuQe%R?CXS47:'5!(eJMQ4jF+$4Uo^4rYq4AoWH9]]7Q[+i1NER.jhM0&fPJ-p;2lJ?[mS"e-jKX6;cWB83)8DY75ONWEJ6YFnT#::K't%!kbk.e(J:(/b9LuUiNBj)l"R/_Y7t%3$4392K+Q9/MR#kS;b:!WlY*Om5h"6=6qOlY*V-dbqtJA)SX+Og75W2`$60pZ+#eu"f"U)%mmYE56*BG)i4:5%GY+A!"[2C?MAW-=fbhpB=fim]=rP7IC=g7<'=L%`7hJ@k,<kh-iOkG^9<7;jBHHEI$#:$bDpU.,:OTu]</)I<%JZr8N<8(B>oX:K&7B/?P(9)0^/aZNZ>P<-GfmK5U*ZZJ9<8!0qaP8.\qjOX?VbG^3cMFduBbBfB;5+$klfR.`WP6NjS\-cH%aa88%d.*dK?,qp<l^%)GQ^5H`<ud8KYo[0F'E`Q'B/O<HM<r-F9U7O`W]l_H[3FYB7$L_CiaUFJeG\"_rI$0@m&GL!W\)$YCXbg-Sb>7%%/WHuD=:m3'>8!cL.urJ5IF1?of!O8&%9d9-WhdpN;63s"h<@^ES^A"2h\ko^MkNI3KhSu78hu=9PAY1n!S"OY'NBHMFQdd&q&_2T%f%7bYJSrY=&YW8__L?8?qfGs/+7las56g"",[2L-ef"JF(C1)AX6J[cZt-N"9NhB4T.o'n:_fZ\&7Wct@lj6:6BL'nI:Q8n6CmMt%<5m9[]/?![!#J^)+;;?mRje-kTX$m.*7Ug@KS.u8R7NcILENXsG17!O/#.8aQQ!8ag,e6%YU8hV=fg@":YnT//&WH(@j"WC+ATst%M5N'rrBSpQU8eq-?)[SfEGV?s/ssBmebjAQL/:$i$E55P&Q_os&HULr`CY8/eRC1E"E@[@Q>`["o:A$rQn8/Y#(N^fT3?4kqikXm%P9tjC96B/SFrBo.MJXW%+W\/[I0s69St8(K^&RR[@L@3JnIOKd.hFO`6OW;d/<E[]o-$IA8ZIl\0k\Y&.2nJoR+A"VY5oo8+l_)G%[f:TqPMSM(4A4[jhB108#rDRaTpB<G?dt1%71_d3C]eWEfRXKI`b*:geb(la<0Ii>DMIHS6`HWr[AKKq?^0<NX_5Hf8YpFAo>b<]%j#Waie-`"McE,W!/4HFpB*p7W2K^^Y[preZR91C;RF"mWOr2c<cJ.ok"CjLH(]P*EQB\i6"7=%4b#&"$9_fd2GlqVJZK'<C:7hXb%hi`b2]^S2b5?hEL%CI=F@mV_H;OK;'f+=4uQo3)93>26@=i+k-Z&i:2KrN&@EJ<i9N?)!m\hsO&hD$*q*"`<Y]/:SN7OqL%?`6Cl%iEaFt#1eog>gj'1m\2.$X0#_\n5?ZOc@3*-+u.UBD%pdG.:M$9aeFT5ITUClW&FVBNKIs1Zs^(6%:Y2B;\;'^=P!Zj^,6R`5^>>(%6V*UO+>ki,KHmJ$BElof7<RG93Y]G-Lnc+M00f%^:em>WTF7*_7O+HPMm0abeSm/2Q3ueng'l/XO$hn(k=gDEI!kBF.jtqRQ#HH6%Y)pDe(!H'6g37u:@_YolBCBoa;a.jDOo4hT*^a/GaRS*"a6sC[@V<C\?S2)j#CAY#ftS'UXqJHHn2rnrVoNHnjmRHnoIVF)dm?+k%O;pCL7Gk,?e?-N0eYd6^<@gik\^n"9^\MU\hi?"jKuf@&p@rk'geGAmfpu3eV>AXs(Fl58;?t(i1,IQ#?iBaDT3l^X^Y]iQm678T%TP7[-!qg71$LVCj1ZJl+p;_W](Gr2J34Ln:6TuJ\6Z-0DV/L:-Gs%E11JRe?DjTL<.VO8Ps"n"%?L`Tjr>+/Dk3t3&eWERtVB9O%%F*\nQeU6+$!)^)eRW,mNq2TpTqWQc4Z97[>F>DO?5"qPlcV@UiIMkDO&#3.:7IP7mn[m+Z`3@_RO(-qPdj4t4pl%9,pn?I9jFmot%ibfPn4XgRoYK-U=;5_mfQXnLFdsCFE28$brHMe.lN<eph]:ID\_bN.j06,H9fkU'@^o11m+*F(.g_rq>qo/VrhnQDGpQJ81:2@SW%D=6odb-9>uS\N%4!`goTR"*1_^#;`6`bnkbX*QjQRcg-dBlJ&d"8BZBT*qAgj!1s1e-fF0-7]2nChH8iBd,9V*Lh3J3dL]E?C>n]%cq:18>9$rc\m*VI9E+=qXOI$3&D2CdmW?eL4PfoL06EbZ?:_QgV-r_(CX=p'1q_Shk"Ig1DJoHt+&^+L`pY#&lI"H+lG[G>)q@6o%+$V3H)g0;(8%h:=::H9[`L<r.kXFc;A8C@t&&nT5\Rk`sbfqI!1c<i/btdY+O?1(9#'?C_I_IHg0]bg\<h@%+R^kWCfOc?Q5c:<0%RF]-&;Xn3[DU^,i*5%3@:2qpb\*;qq9A?Ps(\Y4cH>21!dE]X,$u%&CSR*?F.>3suF)BLf7ra_f+62]fj"b;rl$R[-X?EH1:-F'+%gDb=e1[Xg,4CLFu3c2)[00;2S:7IXlO8gQb438Geoeq-&D;+5k+gARmenL1nM!VmTSYEYkh4?IA04-(@0^SGB]l@lBl$'SNF(j"d%;]b>eQ^:%oGcmt'NH#6_Ug^0>_HjsaduF6k&>OCU>`:!@^<*0sp'mRI(QddD56u2'pH#8%m#R_bc+2emeEM0(V!HOjs*7<J-Fd9/%-Pr^s3R(\d4.90Be&W`1?8;H.hXLd7oO+\kC#rmL8tF8u@C.Xj;Wqc&?4#'Lca2u3Q7AH3Q-+4a3fWAbS]p!h^)\qi\jr;lkIOE>%nh\ZtdVYR;MX!7Y\2q:6^mti.lXl@KPb/D5Hth/_:>(>hh?ZnaGNHLLlL`Hdn`p3<R8h$Y=$7MdT)/4Uj5'X4ctPn-Sk<5r$"0OB%l._$dDGNruZB`+@7"0Hm^m:Gpoga_Qe8?$-I.Q@_e`(<;X^hA&f[p."T.WBf4cXI"bhkUTIt*kN]t=@N]#CQ[`7W8Z9%!S(X,GB)%l-ma*_TPWTG/&R@2qP#N'k0sb6t:.!8osU%[p*KL(/L,i!VP\$`,=n5Ab3AQ&s$JmVpF7O;kp6G`*NN847fpg5$gY+Vhi%LEop0X%2pmop`45cuqmH7K@O<-TIsR7k7MZQq:4KR]VJg+Va.l_bVnVP;.3Up(SLd%M[rn5<QCkYZ[*Qe!jal[Fn/gI<><L`TW2^CRcc<Cb%)38/KnNp+M[Pb)<n^(/kX7'D\^U[7)3P>%[bF@MMAN:jH]Lk\BgN3"hG':[FG"U;sVeR#fK8hX8&N-i(A"YSq1;3X0&8cuX$K;9c%$Otp^D"'O`B2JtEe'4BZ1MX)'9jn8WP!n-JQ6,Kp@a,mjLHA%n^7/VD#6Ek5c_sd\%C2Lamn;J/1+F5(2X(o)4/n.rZUq(h:I^n$%r+)rLeZiL==%V6$I(2*%FJmNHIE7u1qK/W^^*)iCiVW/g/K2E;$(gFh]=knWFunGND6)Djcub`O$jQ9`I9i`nNCs8#VWXuHFJIQI%R<FI1#EqoHS"MdSWI/&7fD,<F7AmPqUj8l23TrNCd^ZZL5U'p1Fa@KQC&6oS`k5637l1naFh7h',KdKo,]&2.)+X@Q&o1GWk+\is%^4iir#;'CN9r/V5MMdTV((ka\dZSX=qUQJ>rOGVhY/Keif`hFGcl:)IO\1<'-q-KL7Fda+:oN_I`?k`;"N$LEEATg%UHm_ZT`/#3%cT9L-]"^Er5IWr9SVQ89L]FP5F.Is51R>(H*_<l09(poTK\rt^jMlc=PpC:kL+K_f)X,!JWM6Ymi;ja_:U08A%jWMQcj:Rmps9Ej%b?SguVlg#]L3tUTnOjsdj,rSf5i3rAW_P,N[E1k?\HmRFde4Sn>c/:Wo7>&H%ce8@BV=CHem2G/ac5F1D!`9$mH+WqYW19%@_..Q%)sRd!XrlTb/ZjaZc4AZoc3=bZd)#R`ig4n"Zp-^&1LO?C2Z:@4[Fkk?1"u%?Y4=]WXg5:oIC1$cpt#Un//jqnh;`\aq=deRd62(1%p^N'UjXD"oP+IQ&oI.%i5^HC(*8l5eR:lT!$s?5L`3\)S&]tkt<rl%.Tc8t,.pqI$LpeBq'\F:p/"k$<(&iJb4>J8<-<Nj@H&EX/%5.\#qeFM;a@u7s&JGLk-NH*$M+H`p\@HOo5\::k;XhMVpY<8)F.o-HFE^-FF\q5YT$F:0`(T,Bo^2k7fVI8rhSH?fg9,@]YVV+1G%jG=P&ORZ'eo>QL/iKB2bZ*(K3$Y-9%/W/b=FVVQa8(6V`\s66*IX*N5hI\Zt59q_7cPd5#7;Lq+_gXW9LLO%+B'b6-;-fiHFCPQW%34ic<`mkiV-@ES9EQjni=QXZ=hHuMa/=(t1M$bCOnlX.3$?Jme\hu*>r2T&7'"7BnP8U@mrD(\?foci&b$!0PqP(g@bh"%%eY!^1%V-X:*Lh=<^6P;?%L4gti1*.fq1(rj4+e;pf33-CN7CpjITUeX:Gl9B3IrViI<ku;'>&OV+X2\VOG*^jHp)I4MN*3G@K;R:D6B#+r%`;"IA9NVI-&mLY[>"#+_)TDBEc?=D8Q'J1U^3J8+kQ[_jk,O(h*mF1=a5XKE<drQ+4FVRWSE76Hp=OtkN)+L(Tel:EX'$JKd+NRG%*@'40\VRB>CPU&aTjW]=nnNft*[a<pUZ*.$`8cWHfV#C2J`pW;m6DB=dLIT^R&\aH>8so;b+L/^YDu?/DKPHRcGWG^]R6A75m[Hl%U*V,bH297:dt*oaj/ZUa=t;@e&c"+JOQYkh.??D-P!gm]#.5cZJ0Y<5,CSGU!I11>[b^3Fk!0aR2cn&F.CM@77K2j?rNsCOrN8#?%j;[kZ:mN\7h,Nb<cHi%=Aaj@J*tt1bmJ`MHZ_D(1BIsO@'jhoaBEYg)PmbCUTf@6U<Da`s7bGkBk;p;6U+gKOH@nR:MOR^=A4qNp%Dm]CqX__Cg;JC6Q<#fBCh1:9uJOt$(W0Q95;tK3#B/6l>?kr8;[Z1h-ok`<ph$<>"\Q5Q&-KO\9Xd8L11-^Ai)Js?cU%[+^4rRbT%mXr=GSddeagA:G"&<0/_KoUl#As!cm0,e&I<g[J7c[a#*>#F"N""['6i(O&1]X]6Q`^_Kt,jV`q*iFrNHbSNJ7sLOX68Z+:lM*+u%ddfXBWamjr5A*#-O5G8].mlKu3M60TWB2!b*?EU5JcK?-I9LM9R)ri]J4Ve(DOi=Oa^\N<BOt=VkW"`:iM_WYgKr7MNCr$eS^GB,%"G_+<h\%j9&mD0B2<?(<N``Hcq&M;XFT=[9D`&.h.%1R(mE\h/.sI?TOM[S9>MJ.GeQfFCKj*cqd41;P*19&B$NA.Fhm2WOSQ)Pi%Gl2aP/93rKHquf^eXmDaC.rCYLL]1k:>Q,S_Nu+G-5oWRB[@H/e<HcB]$e3`Z&lquO3&93M%B]ZTT29/Mk>_<9u]e5*fC^AQ*#b7%_7E=T=$FSR/\"bnk_<WYE[\ak@njXWidda@neZ!+bdT&j]2gB7._(O?booN^`dMN5Fc$Bp_lLrpGVn_GHc>Ac.@TD_j]jsf0p2]R%+*b)%<^njhd@mhaD+p_I>;0l()o'!ff)]^TI]TQsB%"2kA-U4k8/[DCXN,6HAl3(#a/)OfXA"gTA'6?]'J`a]Sda-jEq\c4SSo:6%R[arnr>rRR7C:[R69@FD$$Nk&S1E*dekt4_L$Okl8?QY69,DBM<Q"_MGp.F1Y=ZGuFGs@.j!u9>EbEY4b^#o%%p!Gh\NbeE=V7*;%Dea-nbA=Oi,Pg1Z(IMuKZ:R\mrAAO]1`B"nk`guk43lo6UK/('*4N7:2q0LJ[6<2+2iK@-\*i[+]T>;lFit5$-Pf0_g3"l3Gn-=h%rsfH[Fd",F6)c'(q<;)iFka?j-lkslW2\*;-^<KpG,*'kX_m80^=F&2F+WCPb,)\5?RLm'h!4MG:a'F]\lQM<Cu+?_gWKpq(QaQV%M^;kJ:DXmIHg6J?!O"=k9Vn,e.FO(9RTA<a:Q<SK7d+Eu<USK&D2T=]H!a](cZE^2EF[d$F$1;%p=,3f=VWY,]b$HoA;m$sc-F7%%6k&Q40UMDh4+\N:nS&%GPf"MMjf9jS"d,"<.:^Uh'/,\uIsb%W+0%8d#L':%X@uso?e#uSlNfPEA*\rEZ]:]rGB^,3L<c_r21eT.%p8f)uB,s8c8#3:+6`9Di_[&<R6F'c'STP(+)D/I&%%VMDSOp2]lPR4;AH\PB/\"smST[a#EGY3j/ZZn<=\$h9&U#\Dcl!+V--Po&%V./Yi,NuAUDs<@"*XT2<[T@d_54I]s5kiZpM&tT&8/P]+enY/\L;9:6#>S",>SOq:LTpo,9<T)#Cb3824h"dEkq4o2r03_gBr#>4%#(C1),EK`MYfi_%3,+kVoU#-#d;&LQl(%XXnLsGAS^$WF3_YbVP',jGp;kgqcd@iE=KX45j=k,idSJ!DL93Qq9LE?(cXE:C._@Jj%>?;A)K"[6A<]1o?;nLYN^'q^)Co6@O'kG,o&q\rVCC!V`T\bit?3k^qEGT,#pNdo!>KH`f%NGI"qD\jQMMPDF2Hm9(Dr$f3"Y6r.%7'rt;3k7VH>W#E+>q*IeNngYG$8T!p0l?MH3]u!AA9YUJ!g^f.2Jje74]SQlL[dh1rHEQs.SdK9YsPe.1I(GO)?m"Vn_&b)cK"[.%4H-]E^@O<<S+mfP\,g_CVPcQ4Rb$(f_^=2n(1oHVI,NPoEu#^k[9spJ^cN#Ye6=UIY+K\RT3Y-LMp6cj6.#-"Po?t9OWcpXc5X+[%Wcn\&bEs06j2qQIecmkPWt=V@VDJ.qE^)Td-baj"@O!d_jiW.)4j2*@,.j9!dPbFW\d<&cjsC\uQ"P:\rij6,in]YUG$?&2kYFY5%cBUP&;64Y'*qWKK]-_?t7Ssm'8p\q(N7`p.fre.hC)JD%eTm,$!^b]/E8M3D\u7I+8t<L13SLZ4bM^Si(RU<WPp\WS8nT*pb)ln+%SR2i<W*$0jBtBKI0$QK'_W)%LL:$6GBgbp3F)CL#o?;+deEYt2PK75CQf]=[0Y?h7d?#ae,):+ecQ&<rFBcQ-En,,EOg,7*",i+-%YB79-(PcOVbW7@g0dq5]),p!GI9<"$3,'s"_H,fgdGNc"B]mY'bT\9JAN(#\G$K<l%1\`3a=R2',L"hIO$s7INS@UhK4o5fe077:%$e$dd)dc*^Mp.mU#J5^E1g>lsa&.6@WYQJ5*rqLD+.csD*TQ&trD%MOC7[SXl/PV3f7%dJ)Wes@HXRd`F.5g?#)^8;X_cLL/!#a5%-633C\3m#$RTdMke6jYnKqUMKg9V82U\l`FM5t^W$LG$YX'>DVYji>#^b>/[VZOl,==_e,[RO)D:23Ae-*jAm<A.a!P'XYGUXS!,%VF8A)4!%.8kBH8kk:.Ouk5MVC`PV`EYDR`$nSh5d<*,!5;uQRVLq&^^AUo8'716\eLGM"0=`6DBM1*iC`2u*B:1o2b>/IV+LXY)m%5k2"b`kuMmep:E@jl557:OPst`=>q^PlQDsA3%LX?HfrUjL#)^8<476VEU-oNdN$fEW9XXEd0_YTs-m[8DA;]YI/=u_FrU&F-VUX%BG;V=q+*,Oa$O^q\7BpPd1CoqbRJ%Ti<0Dm[5YH;fkV0/;422V1plt@*-a>#MMO#"kER!aSYP/'/(\<jKN9g./"iRCD2a.K8`RV(%,=Z@FCW5^"@,-ch1gJC68NSGt+`>7mQZdi0%;s3`FSMS<^IVdPA*1h7[Vk/0X7Qn9&m1b0!.qkP2O@&r3dn"krN%:hQ.n"el#7Z*%b&'*F,'=Z`b&,'u<a?9D7Dkc;G7gg`CPkZr>t[TNm@#4sDq>\cHL(JIBKMDYal?a@#$U&k@.1@r6UTZecr)Nqo\,ab3CH5m:cReN%jXs_LM,6/?0k4Uo0bb*bm*ieA<\&m@3OE"n(^aoU=0=CpcA_4q2\_:d4kj+up+i=\*iFIt-/CGq(8P@.7X,#q>`,Y,,J82_<4(Sh%?F3[AQ9Kj<)90ZH&>Ic-0/@Vo_j"WRRO8nQnhoRn2D$H2"c,CM@!U7^n2MGQ_]<10*+TGiMSG61c>Yj<COd(/:-X-RiVBN-Eq<3!%716tj07'"bplGPUJoCCF:](P`%NqbG+lj:i?^0IN&oqTmPQfmo%9`P)M*%2#3WFcP=\XQII"TaWBFe*;#h[/*<No[Y9(*QjVr9f<%j4pS3.6BG`eUB=_G'gG#G5JS&Y^8UFe=?)C6bjhHG/p]5Y#R#RnWN0:M8`B`nU69E;:LAO6)nX1VYX]0Hdb_%Gk\<am+?'-4Yc1X%\[ci;i*X][h/";%VK&BA9#5D-[i<dk+d_Pn=Y+"*1;^3JgbJ2<1;2!/9KVnf4@cS3CFWpA4$W_I/jur9clM=b)V08'%u.OcE44Yj%b2'%6c,?Nemj-Hj5t=]SSKKCdB`\AW4,(4EkN5p1*4Xd=-!5d5U;sS=:6fDNBKu[#R[BZ01CH]E^[1N5R1)[UF&gd!_+TQ@<UF[<%?7D).O`edPN_FI'X`.iu+)6RMg'noK>ipK`9-fWUZbhDioh,*,EmEha[CZ\#nbd3E%6,GoA'\'/OE=M,qttHZLIBgIN&+*F]":"^%VR*Q"XsogbJK8>3d<%j_FBTd]F[X[r:!M^*G;S.85g!MJkETqZl'@?W>ko3UhqYNgBK@BB^g,G09kSZ;aEjTFS8dQ>UZp8OWHtnI%eU"3.3[6]onUk+[1n@JpSWRj:C=.,mJtXML@4flK7^7&ipF<6Y9kQjt<=6(8BKDn3@K*R`BK?MmBoUM^7`$U__lP_ac=m1C1JG?=%VDDu0r<]Z51n@KB(@dY_7ambjCsC@LCP/"V?t^"SF[X[r*MXJ,"2A;%SP^r/6&sG0UZm_Hl&>)t=s]V4Mq]MCc6g8GM.erF#0d%0%Q]7lk5ie3Xfot#&9kPa"R,\+nd<$:78-c%fDP:2kj.$GbK,Y;%N2AE)mXRSLQ9[g>!m!T%gG,f3fME;J"Y5oKU`9.MCdX8cgO>f)%MsRfm@;*p%1jQ5!lKmjklcE4@'T6OC.Z+G<ZSJ%A6md^)%dBA*(AN!5n($Bi*0Yun+mH>V3C[Yn+_`2%qch>si8b`CXmbP.5rI[u%Y">Kk+53>=B)dFT.QdYT-^HbRc/$h):p/7%8NYU!,X6D>O(_-olk8-VSE>jS?YL<I\&+]oZKJH'U:Z]>gauDs]*Q;cdbO(<MT1M@%('*AQc(3rkG3&Y`,gG/NpVIs8A)iodk6aeX2PrsA$FPu1:@1#t'm1X@+'CZ*4,`2d;[]a;74"io7n`\"l2p3DK8LAVdU@a=ja;Pl%?3r?.:*O(_isQZn%W-6^RL.?&]['#/d:.hZXo&P`Eb?PeW:ao3)0Ch_gu%\N(#G@u:p&+a$8o7UDlC"YP2&eSq.Sg@ln%]^W"8<%%YUVVK-ff#!`mIR5c?-FR=[a<UG1j@b,WD,9cRrnT-K*1tF)A#OKmO13(HLC/eJ`?07#e<;_NW!9+_K"T9pgO<]?Qi.aYD!5C)P0u%GSr;*iao6Qp[joaW=S[HB]Y$_P%DXFf$5KuVr*6IA%<#&dr.a%\nl=m^%lo,d",t4QrkfXd'_=f#4'`Qgs4'O"PdFd_WogSnS$-F%CE:23EtQOprY2H5rk65VmuDs3"[q@8X9%P7!jB^c[mFI=2.pE[#fgWB0Z0HV][\NF\5OUoNH<mcN-mIEl.p!p>:,r_-r]!fBW06r%[n<M[k8E]hD<&.22.X3qo=Z(*\6Ctt<fMR>E,[spD.&]qR,dJg;+N(DPaGs&mjL$$H=6-hO6Yc4;WM?;6"$hN4]f.aQ*"3!'t!h<%dpErOV5'6pEB?qUgPnm1>+6."Qa^FO4+.YL@8VQ.\mA4t>0mi*l>^E2a)&V[(-n8s3-"SRmnU?Q#[>8nE<0P7]%S,]V5iq+fIaKB%9<Lpk6u.).6qK6F@`%gnS3>7s(mDi\l$!8I<ELHb[<Qm;eHps<Xr0^<2E?\8D,6_"HZ[,emoN9Y8BYLVRbu\2On3[UHCkX&MkZs`%fAbW1JM#T<%!01(\js^M(.(/cO)]l$FCm("+8'Flj,/TP-J]mNQ(ah5.^F\RD0'I=T-X8!R$'+E[*.D>4UCAcoL3)u=2*$]+UR&O%E,;/emu&7#-<TEu4!h/'rR!Pe4P@<ANL^EDa2=b"(m]p>lXU*EW%*)F[RObqeS4TY"km/she$Tj/2PSb7()_C>o6m&H"tcAEcZ"E%m(SnliP"G9,rAcH_raUZG?V%AmZgQ?6$Sk`an_-'B\Kf5D\;kjIR*'.e:siSGPg!(6$S74d(sR4XEKK`U7&'-llQ;u#A`$B>CEZD%Kc<?XRfAkfBq**@[4FA@Z!#ON-e"-o9smo_pPf[#HeM/"RfPKX2:KRRDG:-hUUYX`N?4@;0]u`jRWQ6l:!lPGNRN<Jf$823F#&7D%p/>c?k.DgYb(tu4N<F@)'<=p+\XuVM$uU0k8j[L*4j]`(WOC:+Z^?`S>s&NH,j+V]#EH-<)%B0J)=21of#ulP[$?aXZ<V"-ZY^ZU%;Oofa<o5H)-WE'HidtdSF?:FWMb:>JfQJ'r(3Tj/[Ah-8>c=pKRc^MmBfYf,[$Y4E_2tT8gfB%_:B9is8CD4([@PqrS//fFe.\n3%CZA)%3c]?b)=#>/]oC]RcBS3^H!n!h)f0)&d7>o*,PB[HL-l1Qn9oDre^P"'Gq*U>M=s+g<pa'`gW(F#c&(:nF0B^t*L:8m!CR9H%AN!"jJ8lP^Aui=)A"'&7GF/4U(.BNa(2f&Zas#<#o,YmdVR:DVH7=n**P#oq$oY[+fYOOG"PfFBbUjY5jL_'ZX=@6!bOD'klkHOc%Q8-&95gZXdhR_W9*eCkLVp4i*\d]p3S/KEnFNtT`Tn%;f0=ZhCEg9bF@S!j'TrHqZ]ell4P(qiZ!s(P;,g,T"erl_s$^),@r6RJ:%O,N[838\)B0q5hqS(.CHp5Ra:d4oK1+-0Z2i$p6OdQWu;7:S5'QgPu.QVYX:`'csB@2LV5/fe\9!%%WMA/(]c(dR,.85,IS3hr8j%odpm^kVNK_=aRHdN-^5aV;ishV_N][=j1]V!1g9S@B?Ef-pSG8YRgnM).d:s"_b[<9l;h4'a<eX#10'(Ci]Aa*<R^L7e,fVd)f&j%,hA3EcR^<qHB[n[[DK&3PgAB6,0d6YPY[L*mFRNl=e?tB.k)RSj3BI`hR\m@l2<5`-RkZb[]K-LjYOtb\O'1Xh2l_;[qMUN1*2q3%?sR)'3<EtJG=.e\olD"m[ALR0Zs!?.],OAelaMb\Xn02SQ;Mi9F4o4/oiq60-qAR]D"!*^93sjKXF;4*V,te)BC3"'GhfEgf?[W.%f6@k/OOm:mcS2Dl51fD3H2XiCR;i)I)Y3`-BD#KVDQ2^iZ_!Ff"q[\XrN%B"HW`^B5O5D"NoMX,o(lL9SEXMr=1L<F4KBP=0sjhb%5<>NL0rs2p;/$D`rN,Aoju6,IbNidi8!WT/Y9C*Aoi[0AI!i!8]W[dUO(uXajXlg[cYZu_UR70To(lJt$)t0&eC%K+5O5D"(6O['%UVsl7Rgd=Y(K"XBH2XhNqAHEY13ri"*3LFmo4$Lm13rhW0OAlb=Z%\Rftf@b^;!QP5O3qSMXms8f2%+/Oo2pe5!Gla%i1J3-1gsN%[^(WM<h^qET62Ybd2\m=]RC@'D:am$:P4B0=oBUkCe\SVG.Y'GW3iE!1CPL_QH8B)5-BU/oThd1.BhWDd^[c=I^W,"CWYmTS^l%t%5/&=cBoN8-R+KYi.R&8Z\f5cmcg.Ki_UW8k1Q6]d,-TnpFNdHc5AN!/ghs]L?9`"+L0=K1h:cD2f?[aXl`tg7XL%c*P)mr"C2KN&%DtRL_P1@lgH5>Hlk/fZbT;0$I*TZn"cK]%QJR9b-T641!6S>f8?9dbWIQ$q*3KJHkbj%^S$b'#?5DOF*(%_9iY2nTeP=rhVaa*j9%i]UtEf?[VS"?NuO]RJF`+a(f6;I7*A:hm<4/Y%bNRFfd]`'tPK]6%@DCO]_tFR@M%r<sg7Z@LSjH2XhT\]6fX2WlEjTCn;q.*gB6%qWXE#p'P9>QfmUgWEJbA+KjNHVEoCQZ/P*_)g9INL9)Ea[:+tnSOokMgT]Q4I9iFg&D@g?@R?G.+9X./j:Z)M'qRH\'Ootbl)8NI%?F_ZEqG>l,=H0Qu99[I]?d)e?hZnQ.@4L^"ag+oRBQSOfj0P)miSAsk(s_ME%`6gfT0$lNA1Xt89]^f,5!RZP>%E)u2H.Rb[e]^F%@?3e)(jig*P@-%No,q7DJ$loTc-GgB]kMLOm*5<EMnRBEbO"ibpC[9bMqtYANTcIP$XNP\\%S-dA9&==R7n"7aiSY3h3cEmZcD=m%\G.*YRd%?sg%d?`b9_@[a4EaETCVaZXW?qJoB,!][l'[0eSRMLHF!-cR8%U)*Hn19X6SA5mX.f(L6YTNS\"SqM5H`r?YE$J<=!r0%qBimg`dc](^;/aBTr"*90+IXO).0lq5M)]]KRAsQi-fig0:Fa$('Xu3mParc*&uQpeDo0*28%\#UUSp(NicXD<nZ3hk\N"Khf`ub%W=g1s(#ESt3#CZ\M+OdJ^6m%7Bs\7ZRgV.o'.d"WX5*]AP+@Fh+k^(h)>[#r.jpM1Gco=82s),PT,BZ'^%2E%XUU=5JnttV@i(;C%T)#,)p'ZC&#MD#-+I-OCL8Rr"*?raaZ\()@X288oS/.-&DdUBCLjr_?e/JjmIh&'MYJJ7(K[KN#,/\3tKg?(?gLcZuT=Mnh'RheM%&Pgi"P]$TDi7A3<&1#f*LIfoJin"e;)3KB6@PRWq;tU#VSI&A8mclKt-R!sq/s^f8L1?WV4J3,TRI(1[=nt?AUd!]d0A/Ma_*LJ;%JCn'^LEF;Qb>i'%UZ_HrJc&9,<?KTDf<R]0BoqbnFq@\_8,$8h7Ql4n&XK@mBp0^1JZ53GE#W%afZFV7kiXf6D2/[.R:W0@c:VND%&j[V=+o9lJb-Y\S6C1MO1PU=)&eUYR"r1CI5dNKCd=n3:Ufejj22m[j$Z<q8==IdKqZ^@ue4YYQPrcTCNT"2s@Tl=kMD)g?dV#kC%A=-gj]pYb+U_8\Z)UiH)3is&QHbgOVX(rD>$bC*HRT5hO?LMN"L$S-^\'epSBO&%s$u[k,n\rPq$e`Y<c<\cV5M0iL->9/[$-G_a%UK>%_<4>R0+_bbCat@-'X9\t$"Ne.(`_@.s6bpGFO`/2DTajVCO!NB@q-HG7"1:f5]n9?g-3.3C"9@D0nDkaC0Ra6=J9_pNgXgk9%@/e<!!9j%;8pbRX5(NA3RT^kbpPY!IQXfjhKk^L9/)i]i!m]d+QC.mVCL:`)$@eS3clRS'`@hf)53bG>P4(Ispa>pJ+(5-nL%E+S%N)p+#5D&Q($n@@'mUe2J;YMBg0IEA^oW&rM)+W&*SK*btU3sb/CXbuaiE@iKUkf)gU"k+Lj-POK6mrU[#;DL>(e+<G+8\b-E,W[(%HGCl]8&4/G33#TQple+(o5TX/S:m.&"`]i,X]<2*"AsjgJ7hmpThb6g[622U#lZG\@h7>EYco]YcC*Pf*KlY?_Wt8RX@-YFc)P"!%@u^\_r<'3DOO#]&l.H(Z4@l=YX[8IOj'92&3E#\D75U%9bqtg6pJgZa3`U&T8)<atkb'%4DJsaNh5Nm/e'8[cOY-.?a(.Nh%TOE<%kUmmsR_R$@&]C1?=?n[5*eM+ui&\tGM5rN&MKl2C\T/2c+;ga"p3CIU7j$+$Kl@1%4j:Z@Y)]bMh*<,^ND0\@^/&s,,1AUW?aqq>%=:=R(gQRC+dnW(&DO9SZ-ucZ9^R^lO@&?M(qmLaf7=KV![8Y<D/`sWDV_:(0[@90R4,'%69t+p,<,>q)TpJZX"9?^ac#l1?;H<t2%1k/cibE&>a`2m_O)EZKAM,SKW,([@rZB\IZ.GDlR!R*uMHmPqeMDj;:eDjnV<Ol;t%UmIcjUAElG/CghD6E'`[h9kgXdlV$W>sss%bJ2jS*HSV1[OM#Xr6##hFc(LENP#))p;uq%mi`/4del'i"QK@oY'We>8uMM6)r4a46=Ffq!)\3R[S!HPfbq/f;DV$"fdYqXbHIpU%:?,K"/($.1m?HB6pFH,"Ts?W!fD;t<7[bdOr&%,.i2Wi"8uuufQ+&F?\P?t=#,I@@.so7(8g%1&e1d0nc1UoFaUd.>$Tun'4,'6l%!5PdBAZg*ZGDLqgpRNo].A</QF0,.b>nHSYfaRnhQ`4)2\dh<r4o;b0^2mY(b\<.YEI*->1B(9F#mn/uIAPCP=8R6q#F_aYG,7sa%dicOi<TJc$:il71(-[1n5hRBk';I$'9&m4:;IK[@FtnWl2k"O38-;/*bF-dHUfYr$&M@q^M)R/ti:;HC]qF*CE7r6#/s"B'5:fSW%qkF^>aaOstduA+m03PDsF]R9g0Y/V!m`l/3'>8q9W/NQQUcAX83a-g_N=+FPNuV>_EeLL,`/'ls0#JCc-:UV"Vlp.[^r[M^lV(el%f\@YAgZ(ND'as01C:juDG#"*$k#C-OVGn:RKNIRi'>c]>[A6I3hY)6ei-:&""9\J?B/It[%6Zsk1i;6mbDFh^mXn8_A-LuAa).-A%^A9s@kk:#R:)@i6PHW?L&1[sG'Vf^I3O\I#NU=iddo[;gjd"6cFa&D0FWj!u:G4SLr$amu5Fs>i\C9<P(T'Ie3"ak"#dPERK$m$\%"lD;!JUka-!s'qb<^8p@L:/KAj@_]^>$DE"-NjS!WJ(/uP1TkfKSn_`L",@r"9O%tRI11EXakH[/$b"[,GmeX0IbjCW^)(R'q\1n%J`OdG7d]+)^#91Bl>*klAJ7A)-6+k8`pa1"9/`J#&2qK4]Ij[J+rFHo$q).pXu_Q02-Qd*\"*`0l53Wl=t[:`3!Tn;r)QN[JkiT*%"LfUd91]\!Y)1[X9I+)qK[\J-:g;*&?Z$c:#HK!fS-K,*!PnY7r`%XjWgbKTl5IH!ZF_GC#GBRTL+Zh2KU80!DQ;nXh5D?Z2"d5t%=q>M*4d3&Q*Uqd/@;:ipS54_gAr."0`C*ea@n^^X`F0V.*a>WNeePc*rh?$>';Anq#$s4mFcSOO(#C[bWt":d)"2]8c,O/$S?=h,%mmJX%0j_hCPp>mHKQXjNnF7#eH4TMie4%W]MWB[=iCc-D&,\,Pa6TroISrAmGB+YaYkI'[""0*NI.AT\T.o#_E))G3Nec&^fr5gO%cc"r*^E@6GSESJr6QGA:-iIl[6ra1#eEm0f55o9pUs4pL'MC*8C?-'>oE;mQ+0JG'IQfFe7W@rd%OB[lN5:.!'00HB=#&,I)r+&l%*4%Z]$X`?tZ6-uTlfqd[nl?DIEG'[4%>TmD^9)Ejmb8$hT$XCLptfo5nZ;GKj':.+&@;O^j`!"ACO@7m8#3KC4*FO(!prIQnX#&%%0&VubP*uE$[W)iPM21VkjlLkW>#:BCJGt^fm/UP&*?:i:UEq[M]C4rmM`5?PTj,,*[o!V3.)M[imSW2H!)="i^)VRVj.^uGKgrBj%JMX#E+&$:A"G#.Nlm*3>Zf8&d=5;2c"taAA3=m8Z9DCg`cCY?FL[$35!+$LZ,"g?udc0CdJ3?$La4V)79WrV@K;PqJ06^9)&&3jC%@H+0f*h:ZDoW=*_!?bahasC:(nA'0!64GO[B^R)n7abP$].8JeKGCqDaU6Ki>h%H%;CW,fnH5rmnWG,7^M"QMW,RMO4pgdM#kHS9%0%(.Un4='j.p_>s8mjs;%W)q`n[l/(c:lXb*E5)W58aUCG`[XsFt$92VC9rO5JP2kN,2G;"3M?Sj/'^/*)I#W-bH)hm\pAp-PmNt%814&H4gdQ@igO0j;N'oIrm6m5.(<iYcjSiVVkk1^WC>(@m9,$I&8KVKNpIURIiFr-9,uV"]l6b!^i&D&?C4Uu!aYtD+\/=\dYk>+%Ge;3mKPTn3"ibnES^;N?JIg>PANol;1k7[o66YEjaQ,WH6r^(k&$%pc`OSP(j++?.1)2Bld"4=37%fS'$$eM#I?h>9bIE/M)$*B,%^&#6P6lnI>#6\L)o$G,?pjY`&d#eS//i?/Y`7!]Ikh%PE'0>^BnOj#E4OR>0S8^_74FT?nJ_`,K+qNUC(NA?4Z7:,"Rf!QQKT80F%$tDpQ9ZY+M<7meT)3K[eG!CYPO4"=f6K6Ps?Ts9(#SKY:V?d$g:T+:.&W.sq=Z"5Q%o<CTEF"gtB)nDZVD+&m<?u%4Nts0<ZHi(d%>QOM<PiYeh$H".!JE!C@eBHj0Gk:IADQusLlKp#&iQ,VK4joaPD`cg38k0Oec5R"i>'?h$OYdHQ,\\gL#%`+#2Nm8-g8h$,Yoh\&%M-r"9-K@HqF6[`96cY)L#T%WpiHsE1,@FgT:io.Khbtm$O0U;*lV&3:!]c0%9.NeI&PG`@.g6I4kF$Fo=u\/uQB)ru9@W<WI58q3%\'+U:j]+;_kWWt3=*m^]>3bQL3tV-1`JdXP7;>M*1Ej^n81TMbG_o'\DY#)*<-iolhnt5'j!Y6;Z'"CR#tJ;9.\)X5dkAaPf(+F\%$Mg_??k,.^_O1QJS.8bIl`S$i#=[:V_$gBB303)\jFt)`"*%2u/9^RZrp8F-EYst(166sW%2/g4*]O=^Y"*"(OA?^e0\0SbYCQd<%Mukuu=@\g+o/]9VARm1jGemH]1](pS34>![oEeu<mi,u7n2\dF=6J6?@k:$t`#3Op#Ps*:4[EI(UGj60I/0Iek&TKL>/G'R`]qcN%8\U^5jb6%i\Of%8SlJF2\XQ/':\uO(@!m-djkoc,:=8dI8,>V"=lLquZ&*0(;I(3QLiU/H^s*D;RerF4f1D:"_q8I)EBH`a_F0W&%`,Y]2bXGF!1A:8@rI?esd,?2-9KYFG.sp*..T%Vg?2T:JTh6$7`R\Xq0NC-/\bq=Y+\<BYGtm>RZ`8l!<9;KI,G3="Z(+L=H3rgE%']<hDlk:iPM1As@Ss:*FDGIPEH#?#OhuO[SlX>i@#7gIs#pC)YJI3Bc@<+\Tbbj_2\lmj%Y[eqrfD(E&^$8(VqV%q3PYfp?9!3FM%<0>DNFdm^!ALAS"8I&$Nc(0T"+DSIS@iG];]:aTU5r`8qW%=-3X:l':L^PSmM"+>M`HJRY66-g,"9nAm!Ko7qYJ4fd[:kW3"HMBk%]Y.pn!^Bf"Vq4JDfFF5ls*<$]oY3f*83X*t?-Mlu'r?i`cO/+>GC$?S0$ra./;).#$1*'U]\(Co@5"8NYEUXnGb%JDM!sr=ok>"H%D10`.`*a^,/ZuQtd]hJ$F7&*_N=QNEpCt2Ya9V%]1r=[GI?<UVrgbOL"%An'>kn0taUe@^d$f=q8M2Z=@Cs"6Q`Z]0"j%ML5*\R2%$JR8BC-jSgBXX#(R^C*/HQn2R+8[Xr"f;mi%J?c6$ZI)T;4`m(njZU6i,n]4R8+32HPsgCKTk9en`n:*ekBcGK9a/>Pk2%n/Ol6W%cc*#V,\Li%lU`VA00((*7U^hF]l>%3mmn6-2uEjD,!9rt?&3,&*$?>sajJr=%7%2%d6NjpKZC2%7/qcJHt5@a,@r%I!.BGhHH?ja%qA<2I&s3e(h5p`[Hg*;M#,2KMn^"*J7-2!k/5r2bJO/m;$C9!63?g8Y4m[))\9FTuXJ17sA2GFcMO!!RSjITJr0gFnis7tf[p4_4%`::1\c7s.B'LIm<#O_qOhNNRU@p>R6>bpcl.NAq)m]#ccQG(>G_936-UC9*rbTH1$S%+iQSSa4kkD/bt')-_H]a4aBMki:l]QP?D%gT?Mf-4h\k#O/nLRQq\i+mOqI+MLVbM!WVW`0>W>TLp"9"Cbs5J0cL'!o]#!^l`42E_$C6o&0%2"9OetElm)F+fV7S>TX7+DpMhd%Xb61a;;sW@W?d)T=-5/f#?<3TW-?Zt&)5>kTeI%b.[_j6RMGg]J(\,'0Wu!o#@R?e1nZO(Cc?<Q:Z?$+l1^4X/=['H6BI3-fUn$>%\;+R3Lt(c?;E9Ufg(<7tb)1&+_Sm5"Y=6=:_gt2_d-q@TBPeaK@-Xt$jWoZ:+h)^GRN!uK?W^LR]>ob^X\Y2c*6:!*`mu=d&gb.%%*9iCe#<Va-K*3c!6/\3qGU;3oGd,BJCuJt\5u%"+89oKZhHtsmn_FZRAb<[<Ne%Hc?mV`=kJ,AJ-]Cd.FnL8?K],Mp:R\F;Uf8/=%ZDAclrh\7!X#%h?+7f/`njUa`>[qC_Zl><c,2DY#*=>)GCcobgPKbX&%r;C\i"4YsAWCSOcj<2^Mj38SLnnSHpN*k0X:V.p?PWrh%5QJlb#=1]u01Fr"HGI4[r`g#b7>7HeH"pr@&`&)/N=F05o",2%.G^R2+pO.B+K<mG*nd;dl[Z$a%.MXm=F^'dI'=1a5DLYIH#J2^%ObeAb^(\U,f7%uoO:/?>*@&W4L!WRddP8,97[u=kr*-"H$J*V3Nn1-i#3IS!Hm_tB0u0D'Bc0IZ(>.M++'%u+=70,B+'4>Sj:1d/%mT-iCO'cDA9Q0^746`MOcUTEGPK&oF]fM]E:untGYpF7TK^U]8CM#8OGZUgN63NhFePF$GVaaGTQ9-072c9LI]+lnHkoD0+J=W<n%%L)iSI_k>4Xg"E4(YSTmiE2\lM0_jq&*'P;L*4ng\ip8>:EcL5%C4DI%S7c<i'=6)^b(8kJ.Ds[2YfE*3Qgb7bp+4[e!a9RR<%G!%K1?]cbgm$fb)D0%;eSP\Y8i]t[L:WIq($&NO5>u_b)FI*'3B)^ba;$#^.L'0F@[;YW6,@%89JF5^bJ,Y_*VOl9\^[/)@71(QtH>`%CD/8'=@(cjrB#T7-:a4PS3t,%893I#"H+Z$LqBh2`_3FA+UANR0+)YR;Jtlj#Sn#4Ir0k!N<BVAP!.&4RPU%DYqQb@rmuP#(c3%X%rd>acA]H<1]D+h26:8eBfC92>(R/=4K&`,a@"H9(KJ/?J1G=N\`u]DZ*pDG!gDd4H!a4*?WMa6A103UL#-_CsN>:7$Q*CC)"Ne6s%+Xr(ce_3r_?Xp?s,a!73W%"I.#2*@-b,kBoa;H/5A?c^:a%S/75]f&3RTAejORr#,4q8b3a6`\=ZFNG_KsAsh6]8q%r?:G*MKBI+%09Ik^?<3.?^,)H_V2N\mdR@h8]%@+S^(fn<pKoRZK\]6:\_7-`O=kni8C5?nfe3'_l"=JQd`Lu`]@e\*+l?-d7lTqN4^SAqP=jCP%,&BY-FHECPSI$pcQ*R]2S2&jhpfF./:?dKQrT"d*cmkV%eg//>,gcn.+rNZAfATk@9esN<UF-sMcOPbc1!.3kqA)X,n4Mk3,HMLe%=!WDdeqY&u7L#h;pQ&m%V?bY`-J\`X0ZUl';nCf74je4;1<@"n&^^kf'9*0Y1$_8j*q7]6Ou&nm3BBCnKfdJ*4%S?Z4ViU1`4>A]%C7d/'UK@LVA9s+!Y1Cen),2*,Mgku(I&)>1W.AQ-Ha"FERM88d%5_;*J>(rCXpc0IERI;F^I5Z34)saJP:ko5NYS@Ja@alL`/[ZY%\p<ut4$H[O`IF.p&TBC/*&1\Gh_;E[C;gL1%t&b)\U'3/lJfIPCXd7JC\Zg%iP%4u9,8n^T[&!$fd!X-J8$6&-Et64'IKA$+<NR&%VZr#Q`)I13^&3UE+l,"%T:$Vop@&G8A]6H(l1E6meC4bPgn0ueGXL^j:"OGuMY:04.6KCL275P&eRiX%3&=R0CDT`?!OHs9N?gs]%7d0F[M75?Lb2cSg]K$'9(I]lURlY;qEmqs-"c]:SClboBe9'fL.=9m4?0'd<1Q?AIbLg9tO8mkU*9*?JehMLcn0\uJS1E^:J`=`N%`LdQVSkNj-bnu6m]uIWj#-=TrBX@AY?[4';RW/H9s0WGFeb_u4kVg&hI6HFgMg%MeLA)G"9#^hQ_Y`W$[?C8!D,XW`qe??J:Te-n%=0[!V.=5(u&NK2'FL+$jW4di=o!m3-<7G?h3E"c=VoPX*28u%h8"4l'p@79K4Wt)kgSY3(i+!9OqQ*m%,Seu+Qg'(*I<'J)$2@mN%b(^+CZ&(`Z?bo#P8DCYt,/S_VNc,jO$C,:a%mFTcgg<Q[E@U6'hV@tS6]Mi[h<QJfaHU&ENl'g`>AREqkM)SpO,XW4jBd<03XUg!%ib\F#%rpaip1WAndf%SZFQ(f)LLL-mr@Zm:6P%j;eW#Wem%K8dV,K3W)d>fl&k7Z7f[ot>(ICHL,WKO8>Z!<f<@L<TLRLL9bB7.D%mQI*+i_]Z@h/]Qd3cX)L\YPsnA1i&fT"1Yk614)[m%1b`U4N)'X_OY[f'\r!.N6`0XUa,Bg%XfKDJ>^nGam)MK^"jK-lT4^FhG8m%U1*+u]hCh][A'AMGG0p#F/`guR9mL:Fu0P/s3.R0g;m&V5+:hHD*O!#8+MK3*;T?i3,p0Y,oq.91jO#CN(Do5K<ObdqnEb)C@'>b%B!&^JnlUN44o^PM;DXYHZW=*78pjh0eloUE3cX.n7;)R'ZaGrP3n>GQQ4C!]S:S(G_qDO8g:d;2fp]K^%9_^qd9;q]FNWrP"38(S%P-n3<A<cl3qcd)L*5;c;ek4"KW`(`&UQ%1;HuH4*oP0GCn'<)"<<NOu8Y^$6j:D@6+h<5gXCu]s>j%i1N"lf)e(?.C-#$@"-lO"0%Cs<QdWhKN[X'`Pn!\52-dec*<U8lj34M-(&&dhGljEp>0qq-3J[aHTC<:2-q@]Q![rN";W7X7s`M_/O=q/<p&iYQ)n29-;J"'#X>%d^RBL"lOKgOH77b'YA=j>kn3SJ8:4DK#Utc8Ki)In<Ru8Zp)7Cek3FiX2J(e-bBq8;e13:;A%p-?;aS6@]d"q($1=Pn&3B"b5WR'%MVb`RIlCCbTHkJ"&d9UTj0H'J[!4[0NjFEL'UdssBlJhOoDaEM;WWs;m+ZigPm`r9&^>o4Itq!%hcupi:hH2M*lZ+)K/*M_LS1BO%N8TSf+\Nt$O6LP^^hsa@dfpU+QSSDa.[F!ibks&`-lOl`UnB=:U5,.XCR&BQe+^%*872d7ED+P[<";=:W6DJF)X(+>.*6FPhalU_%56]gfcjiYsZK3@CdTrCd7g!ARUXIJ#>`rNWPWb4A`Wh^JRSGB8bDWEuIa7>E>h3kP-9Q$[Q1j<0V'qT[]D-?9QQJ%$.TuJrmRKQl%E6>05Y9hVSA3I=/U,^];CS_<%8"8eSeqa@k#pHN9L%.@bT;Q%;o\b=2m5&?)>YL>;HefRGkrZJIST)X4I-IY*)=B*$:5HcW2tncI%/qrVe573bKX^:+_HNp1T=.G`+Ra,Vrs!#N`i$tnt<5+kuFl[)c[o)rrQ1B2,DYLnWj;iQ)g29--FF;9RS+@Djo*E&:jI>"%a6KZM%]_W+[hoN)UIJ@)bIPIr$qP#i8/PF`@.Br:&XU8-V)&t6mdYC8!LuV]GpN<M3&q+,bqaOi%o[Vfn>l3Q$cWIRQT$:^:qpu_D;b53&%-apG7*q4R8j/!%4!Z!Mk]`qqHWBDg/ZA5c%`/II:O24)QJh%6Zl6Ylh[0I?6Z0*fk^\!YDWu*?ho]:]A^'\5]?m,Pl*n>)a*NX96%Ds,_bI4h.?4tA!rM)feU+*dXjL79%s:Z!92Vb2UkIb*3k4Q40d==,)r;HBY'3$17Z7QDR'CiPC#aPZ"P$t0AI)[@U(1mTt<M4l7+%U?(M/<5c^t8(cPMH]o)\^DqXBo][bhk@\F_Dp!\DrLi4iis-FqO!=4kCTa_NUJ(=[Xup*k#LTZnVu5J+0OrbF/Yt#"iVU$LQpOMC%U@a(X(9$h]_W+Eo9K=6F&T6GcVe=BU#QlL$V<miFX]/?+.R]:ejQNERh$:RK3CDNbj;UA=cT16\o4pl*G`FsGpGObH!Y&>U<YCA2%6$g&87Yl1*,Q;0:JT:ORFKX*^c&?t\WQ+j^YTmJ>)r5q7[%6[S3/(N*oGIJ/S!%`3hhipG[7*^gmF/#pV'a:am;#2FU$XoWM9V#&%qY&!%S$W(1k;!JfmE9ZG^u&C&&F(tCmHiC$b!0+bbj1<Uk$j5oXM5GG[P$<n;=#74&CJHKTr#@.piIA/4C/c2Z8$b(*5B,1=*=g?%NNi[][dC7C559)ZeT.8r=&8XR5h$A1@&a6>I#q]S/CVBTGiciM^dYP7Ht8I0j!g7H6LQD;*X:cNLW#.&<GqE+1T.)gO5GMnAn=mM%`_&=&NI+S5/WEh=?Tik+#bR)e6?5)@fHO'R4bdo'9IaM=A5\3);J+\.*JoB`JNa"cg1ZG%o`9M6[l9t3;G:\F<CYBDBf6UWq0Z3;%99=UaR45f0-qlj=L-$(cUNoGl,pb&00_C!;8`c3Wc$bI6+efiQA_2LA_Q"e`0(olYf]3?j:3GEKlY0H&l?]fEXQ;k02!l*o15#0P%@7KW=#Q3[GWiYG#-DPf<k:qg',tjWsYrK]Of;YD%T=i+X*Y=0o<3Bu'3PPEG:9Pk)!A9d?7^uj/p\5cb)XZOU'f:Y\<i=k!8I;A@%Dl(e0dC=-q(u>l0=*tFi&4n>'\a(\S'ND1C8]'M^bcI6FMMi&oL@tf-L;Yu;,c(e#GrLDY.H4e>;bO29+?aYHTflY"GQ"=bS!JWM%:pCD=^H!d>]A+=RA0rH66IA0bb(7pr.8h:o#O=sKJKH"jXi4mcD)%9]R(9RAhEs3aQ`@njC#pkk7snJFV?G?B1r,im/VKoAqaq^%%@'"54j\NZG=MYegkdatHqGBSrnoXu:Mk8h.*jTYFX'c\nJP`[%a)*oLC!Oeb8bH"cf1g<UV@<=Pg!su/gV86#BuKO<+U,&A/fR23%_Kg%EL"5cek'M_74X?'tB(YV)lSTf5RskIQ#B*RX*TT+&`+hPdK"F2B),kp/'6Qd09kaBfM[(XD@Q+k>aq(d$b(N<R4*(W=b"fI1%Ds$NkOC3.[)"i]j:$%h.Tp"gb#o5obVL#BcKIJu+eT7i2V6sC3afc:pXu.)"8i^HKbRG5i0kUaV$skZr6tKBBfgE'+8GSb>mC1QK%"k%)]S>,`&:)S*L*2:2l5?k)ERTL`pAfh21=bS<d96*jEW`IV.CJPZ2DeX<=H0$pMe/&:JJMfL3:?J_>-\^&k2^"`M"s5IGZ=`dN%X(,*dEBZANIOg`$#]2o0n&'Uc-#s\FmGNeN<UQA(j;ZjrrG,^hSNjh"i`ZYs??MhqMtVGZ(EV#=$D?\Q/Xqq)]c5LIe:G6p*rFgl%BLpVcOc"$bNPR\;O#ldr>DH"Foc<@ENR-CX%U98ir7c)g^d."5.g8g"q@3Oc#7[2(bKuG59e=IV5'IVPMlJqk_7lIKhiG7h6D9Pn%Bi;k-OIbMds4Z:modYh.Ic\)bj'E2PeX;-'&G+.HE^s;[cq(\NXaFeGYA367cL4a$1=E`rCY-0p/)O?tetln3qpg3<@^UAo:.d0b%6k4E`DPtLT#4r&""*uXq[Ld[""+#P*KJ2,`Y[+6++PO5\2LG#qY0_GP'mHp:A6fKe9uUC,;K<GtK6NH!EVGY!c`R?n@?_oFd.KYJ%<@T)L^?fj1M`i'7a7HJD?PsaiJY[Y:oQ#p2m&Um;ahHiG8Dpb'VUhc/m%k5Nn:k/oC5mWQLj13>[._&ak73>$7TB@A`u\er#>PR/%gml,SB00TiZ/Bcbb+$C"Tcha7N_.3QKS"FY0C)>B8LRIdTceI$NAo*;KL/Hd"8qaAHaok`%-Pl4%AAS'n]&NhGHc3W6B1d\`HJ@T%`KGm@p9so/buc8+7Ss7'Ur!S7GZ"hOOiM^_h\kU2_W1ac-j#e<OU<N;0^tIi?QXtO-5F\RLImq2K\/WpmD&bJ36+HoOA&OKg`j!h%>]&7Jj33\38]?jGK$%=LT9NF?IC*GYY`Y@&aN2Il5!F#<g7f919^@UD,1[S'hBo;uRX"a*]hMPt2,S_*o/9ajf*#a/,Mjb5m+Je(%qIllk68-N^Nt9Vne(WPWCn>!KN3\Hr@Z06SIt:)[bmYNNYiNMeU\9L40dBVM?TRQVLrnh./"H;JeHI2<iE?nXa3ocs&.S#o(nc:"%XL`F$jqO+,i^n(im.Puop;`UHL!.!%,6O\=aS9igKtS-&CjQHN+udq!]6KXq,=De\hkN"4jb#[?3I$^g!QkZ0;N[MGL7BUS:*@F7%n3J,dZZOKDck*fAkV/)m[#[I-3F]n:e4mXKp0HnIN&F(YdHMr]E9**-?@%8B(]I4UP=h_dhK0s4nhM$Q^,S-DoKIRgDoB!J@1!I(%],l,ceVP\\M>s048"KH@*6u3"02oA32&b^I=mV*YU,PEaPZ%sVmn1HS?m`i(RA9\OWI<AW0D8W3GP44u[nI![qS"W*llb[+4<+%Q%Njp=<='ibi.[V]6PRt6A*/A`fBX96bMXsI8\9WuA4M&GA7)*%'.6gcT5-[p[AGtV;q"(ccG/@U`NXkUloWo2WRo8cgUnnq"W%R(o%\a9dmS]"qT2qU8,kMo;n^.@bO!(mcMiU`$B?apb2JHpI-ZljI=OlO'b0D)S2=nI&_`07!EFq2%1.Qe#VB>#@J7QcO50!<:udYK7_%X04#aa<c'DU!HKDdOIB$j'RLq39<_"13_O5P!$kHGOL1DSgT'u;sT'fBfZO]W`nN.o?/!<!Oqe/*BSq84Mh!;chQ!,m1m2VTtOrc%2GB<spkmDN@=,9-3W!Zi-(QQo?=T->Gd]a8,s@tc[:&KT%+\7>A+_8DJ\m31BX(A%8/rW3F$]UG^a^S^0K!&7dfXlJ"Lk3<r#cd\%YO).RmYCtkPcMH=+/N(g30jf\F%#5Pr[;+7LKg28I^-XBXQhsi$kAfsR0I8jqYT^#d[jJ``A-JPmJDd]XNk#=()RTO97("h.*Zi/%`dmHpW(OVij"fVs+2=1/oc$m/I8ATc&2tai&F!2:%>7AYq+@$!H=42$#;Z%*C&l(])]Q>8NU?RtjiM%_'VZHl=?/:><BkAQjJESL%&r`uE]=YBNB`Me9klimk#.;1P6XbZu:V0J4HhWXiKVT$SY;&"'5A"jP>4\4#.=7Z#$<V\>2];g*aDdIj#Or5splBKlU#!s@PBcR7%R/[A9YhM0$#!COg#PT.h8^n%Nru!l-%CHa2CfDbQ[s]=X&:WR-#6XclOM9^3oSAE>,`2"e?C/3`8/uj`imYqb@(\\eoF;pY8u(WX%T2:GuZdR#..gD'=,_:OB*8C8"7W8]9;5^ZIk1t8E0Uf]_GrX%Z9->WY0,5$\d3+f@Smi6r04[0Z&Af+m*[a9Y#""VSJIj@qFC/Pi%`1e.]J/kZlJ\71\+G@0O+QQ0[,<AFC:nEbs-Zr$H+>&Ef#V`HHJ:N(+8>ef>oNM@u5Na$S"%M,!GJ4Yf+X!-dmiO]A'aTBaf#<ip%5/;G"A17<KHuDJYag;(hcY[Wd-<TMUD2ST(mTVU^G(:0*p^e]+s%:ar3bZ=h[qm7sl80?8=tVfEeoXjT)SgWk%%H1F2IY$!K\B<F%s&.Ji$+V5jLr(]$YptHa7!&mrZ[PuV&W+(@KB1dj1_Ff5)T'=9+<WPhb+EDf@#R!%L7%"8YY-1,H@?Ib9H`:.2^5oi5]TdlY3AFC%W2,%_'2iU`%>EUoWFg:gC[7r=7,iP+A2-GVQkb@CDG\Oil`4kFVLtuI4iS>AYB9qnLp=!U_iSD:l,"ms@/)%gT^FO`<K-+cQ]pRQ%Q;-QZe3-=ac/f">(sgs0Ws)"Z]`#8LVF3'D'qPc>/[T[?+S)mVGUoLu\f84#pfO;_\Y2l^&8N%*,Y@%^#ndT7Ka88`l'd3W9LFK?%Ib-JD679EmQYS"-8U1Pia5rcY?hu:89^i4umRb(WU)L%XVeN6_Wh12>e=ofej@n5mM`./Fep_NYs*?fbXSq"3'i)/?P;@%<kP>J/%_GUMC4J51%.CKkB]sA]m;=dH!f$bbHZr"bA&h+?IG2R_5Yc3:ujKf-c.qa0PZ^;HT'?Pt`[D9U8A.6Tc\c(FnHQL@C("*>Ih3IUk%S`LU@a)_&cH,rKRbSrmdQi[1@*e4!)Do?+W;<8oe([>CI'>S4AO>Sm\H1ZT,Sm@C!NYl(Q__-AMi:6\Aae^tdO.eo"[4$LrL<\9k%ET5rij?FFY#G7uSQfHP$5*8)p&l@:uHNL^[QOA,/M"&,6KupFOlca[M@;GGSRt[TKj5tKZm*0iJh,dR"f,HuM@:)lKoI'uX)R!h-%Y9)8!5l]a?b;8mGk31P'qS20$V,<m5J'a6Do]=9>`Y.-XGraH&m!X7n]j5mO_S`4\(nZUs]E6-npf&I**MB]_/C)8aC0BG8l/>O>%(n6>ZkaIj0co!hA!?e)pZX*i2ADgu&%2/\U%E-8j/,l%9^7:00J)oM!*X&j"H/mak%j#Q=POo'2hRd":A<_(46XWit9Um=p:oD):%YnWg(i[OB%1^c2&ZG*35^r;Ia6;p`2da_"0G^YKjRC6^tM^;7m?;jcTe(%.13*kE>Ofi#:Z!Q.W?@n._;i.lYU0ORrai?.ch/).-%?-Pcrj`R%Y0%4\B[AM-l^cC6[cJ.CrgN:!2&3,i@KoM?k`tC-eAAH;u>/6tt0d3B!1oX#M%t.S_$Fri3'>;]W2O7UFX-ng@FaZnO%g3OWcTq55ZX-\X];b9_g;(C&F9Z9o/6q1BZ.aup9"6'tCc,PpiZl;Z?l#L8?CSNXu$LnOodVae!-NNtk9NEUk9K(1;0i!Ll8suho%&uZMBXXTNLCEbOQVBc/a2<?T!br?n\8SpmoUoThcXHt]@(MA<eBu_Wgl"]d>)HmEgA\+=M6m8tm5q19!#HFZEm1<XVG(;%2nV-@l%8-8nB:0'!r:,\MrAU*$SONY!g;qrPsjYC,d"@?A\i^lSMH5T,(FS/1e[N9apY9t(LlG\<TBfCZLVQ6+g6l3C-<tc$67iR[Jm:K11%]%d^N[;?+9JhmeA5pJcHAO7r^\A\#MQ*R1dD%KfX8T?9V$QM(4/;HYEb,'?M%]bJ)]R](-">+<tkV<Ka8gsp'Wf."LqYnon9<Yiu%GTdYlE9X09Z>"JJJ>UKQai^IPACWG]ZHE&;:H#QEA-)).F@&&lJ^4<#$hRu/12=*e.5b8.N1-jErmI"l<`MEg`'X9qIVFL8>*=31%frAWUCunQ@[V?[C>NPhFBBrgB2OSDcLaA7!*S/7+FGsiG*'IN+N1-kH9$NYOULpR@^\hmWUjlIPN?bfA3?dKp[L!s(j#IDC_Obs5%LK0&[\<+_)RmobGVk@d?l4dpF:7]8mHC],.b=/01N8$'Lpc-tG)U2"\LoP$b!29&t'd-08,M[5,@;]4;X9+(+DH*E2j_P)C)Mq]"%aRTs(kFB;uB[hQn\H@XW^,Moo#p!7$!b?#EP]tE<>Vp1\r*9Bbrtb?G/[lbPQ+p`,L]&F$S'LQ(HWBg(9bK,sdT?fi#YblbC;lhj%)+eP+J)<+:@uf:/S-5ni+U1/ESGA-_F02k5XBF/a548$Gs5Vu%&IL`3RGWJUJU[J6^<^:Rb2^-&5i7.'e\6t%$R6-grg[Wls-k31%?Q[jaA/&F#f[[/3W-/,1'AlPf5OT9\b6.dj+T4t^^6*j3rJ*<nQ2eT]jM/@KqHW?gJ&nJTT2S@0_RY^<j4Z0#oI^5BrT@qlb@C&)%\j>&]4HZ0L^$P]#Xa_["s1Eg5Y3E-d,7D+N[\&LCPk:YTDki?'k7?SmM#;E`ottpc60Fjqcgu).,N'Z9]nB055MPaYU;F5%o[_:g%QF!(*6'i3aeN"2Y^LiMd?S`YlYKmXQWTE<trm+Rn&Tn?4kF^)rPPO1S*(KJURgp;o%F"^)Bi#.MHDsW>Ps-IG(<4DDg)o]^GD0-(%VBs[UhV6bOO*[]]c(S#sr\e-*?gkueRnUr97'KI^`oG^N`A5?#h=M<AK5YCuA_97_audn6k5&=U:(7j^.JS)10:4Td)CJ1r[nh$u%Q<Z+^E+,apn%ODZYR@*%IbaXqp8<qS3<h.FR8*A8;Ec@SH;-oZc)g^SD$t/ACYJsYQqZ5))1PCEjpQ2]r]L&ds7^$)qWpZY^%*Q[%.q.$^J"@U3i;G($5.cgM]?U5>B[:bLGU?Y-:J$4LnoQQ'K#\bDn6(0/,&_tt]:7&011l/1-cY7DF(<[i*SDO`mRuIamSK@&`S^MF%8MGN?0s\)>3&\*-d/B7,A!bRRI82<5Z^\k)kJd_1jknmOqDb[;)3C5]bcCU3PTPm1]0#<Ofpu^_dk&J1;n4[G==P<FJ*)f529a'2%Aa$Nt_g$%/Q@*l;bq<RQTLB4l+65)Sq?(;g<"apRYDs4[P*Um#PV<_VEjdVs0^mYZ>j[+1mUlB6hRu\MIT4NKEBGX$9Q`lC>)MDW%D<s6X?XDR,n=t)PU4V&`[`#%P'-1.FWQ?2]eaTGJ4'qat8WHhq.']p?adAYKFa;S>rmX+H#oi_/l^!Prgo>dK294KSg"i2//-B,U%6k9^j:teGe&"0VYL[Kk<O7_E,3.O9CTBGq%s)S.bm;WKoK(n`c*n/-ufHhUY2WGI,%'s0WA)BLYJ"G-P*b=?Q*p4"m&>pC6MbM>J%acFu!<]O?f'N2$=j6G^W?s&ChG7(Uqfd^/o#*E5f[ot)1(q,6G#-%L)#1i]4FaO2^6;P+H\nVO^/*R5`8NP#f4SQ1*`DmP,5._i&%>]E16W?["FPRK_te(oq>r)!]jPC2Bm&?MV!.\(^nSq"6Ls%RSgA^9DkAWPpGPT$E]!O[*qVfVob?W@^29tLPI]*+#(p7L_G\(3[D%G!=Q]S4j0^c.Uu7[_8*.57aV3g%%gLH]G`[LT7S1n0#;&pNlb>c8;ns[854O9IC^b,=P1uI/aiBC5S7D7CdoOJ\8?'Zm46dXn%7t%`>:95im#.XDcl9b4V+FgCUdt@gN2HK3)kSHI;u!NF6<"QQohlncR`<2/48Y3cZ9u`hK8D?14A"$>$Bsng<TGT:SpAiI6K?O)GCs[%M=rRu*3'LLnA^margDA":3B!d(EHVjT,lmn<R5k;^X5+"ht6n"("F4'qfas=gG]eenYQi@[0BRB_eAL`e"J7m%W@m%m[ng=KB&DX%m_"^O:=YrgC+2@Nkume*(N=R,L*C>G^XnUM@S,I"c-o:2Gj8'Y*Jh.:Ii$`pc,b]ar#^3mUH'I##=Y1a+l%nAhO2\i?:nZ)nF=HX%[kI2_8S2(Zlj("k;KoM0l_YAABe>MEPtrouPof1#$H1\_^H8[UZ-L[JBa=))'qFYOnp2:U_WpX1RI:'BfDDV`gr$0pkWZ8B=G1Pk%I]@b.T3PDB-21RT;6daYe%Kq*rLmlug6iF=gU"Y9Cb*+CjH<*aca,V6?B7GeD-V82gmp6fV-fPUOnpKP)n(nnY+:(-EXBDf79\.!%c]OP0PLmIqBsi:nk"IHLLpe[\G@4KHc\"bn+73mi&SoZ\L".@%M!j,VcVi]HSF$FK%/kop@MP^4j\J1*Y85-s5;l<bq:aBZFf!Q%%f3$S:EM`j.Uj6@m1@)d+/GU@S25KG'eR@R^KB_frH+cH<l?9TQm=9A`1L9AsFoIj/gZcBu7:Lp8OdD(4V!LjgeaAlMGL;f[Z0(,n%%]INDfg2u4rZ(6?c4Oj;7>9:NM_j2%1RE=I;#U(-M`rhE4^7K)J'l<X7_IrnbGBEPeAk-J+C6grGV`)-mk,M>hJgOBX,n;`GK7q`%S`4BJITmoO1&V9u&C$U.puMhqK/*@0c8(fuIm0d\Y1Rr!4dceuIpI!FV-c\'q60F(/q2!!W3A=9)q!J'of5U12-\9RWU#r5M$]GH%^R(,PFL+?l;hh+1:^N/pFI6eZ@dDibIr:N6a+%l/p/d8GZFSQXi0!#HJ$qj_Nk?EgVQ^EX_0#Fr4I.U85*Eq+G>(qn%'\"C5&:#B%+h-PsH]lNC]$7.4N8CKl_/g`j2%IiO9CQ'S3LW9d3qU37,R;HI0lpEBX4[[\i@Q2h\Z=L:^%doOaR0?f*@"7"<lW53HFLI<W>`j"%+Q73G(R,-Qjj$88=#_1g?j"rqEq@N1Q#<Ta"<$_$hscKU05jq"UFLQZ?`2DaW?-jdOMY"/L=Q9GAp#De%KsQ*'@WQpM3@m"fj'El%0L^]G+l%nAhPnh(#$S<lk9fj=LlC+IGuh5*[n9/6,@_Mp:E9U65&@:@91Oa.=9g/^XuoIV5eOMVisi"eP#i2P)8M[+BF`,L5uG"`%-Vj=%R^lY)K^N*/G!I:o:HoZ!`+>TF"snDF>O-DS+s;54:TNiI5FE!LS$Tjc9ZC^[RSP]<nl_"HJ@lq&74T0LU765dEOQQa?Gc!]%of/UI/pX)F/+N#M0%K'SqZ';40-/NNWh*8A.t9;pLc5!R&<dpXosoTe,9"hZ*g#!+WbCM28T]%!4J#kDbOkVYl,s0m_=q6>$=]:q%7`I"Tq)1O4LhIW3e^J8Xj\Ma=]KQ/(^fo?n0pq[h;=2c$!O'P;M)O=Me(gKmQV6o/=lrRb0=kE\^c(NX5%K?*Er&eZI\8Ir10fGU%0:e<3P!5u<o!1KI:.3hMn\FkQ)-I#e0Zg[r?g257aQl,l["<<Rh>K.5G@'U`n!'fGVDIrO[ND\(J.eY`b7GOi'juMc,66,qZYGc>%E7j4^H&d!p"QGEoT*88==8@+Qm>bABo5)[6fAhs7=G89NFEc#8mTquu_t#G3M+Qd[Om6Mm60h4d!aVqXJ\6)"c0BRX<Nl57F8Ru.%>f<L`P_)CHST^m)2'B(-2:3mQ#LhKfo6>TGg`*,+hm!&%jnVWS_)F,r.>h6$%Ra8)YNBOV]](<fJS9E(GE,[K^&<41ebog<7iUhU%np2:U%P(U%9R$Ndl^GJ2mQD35M-5;,QWN-oGRfls:p&9!]Q@K0.f-A!bDZ@-3Y>mP@a,PpR@<:][au^%;,p_PnmK'+B3lB-T)4JM%qo%Qrh#D4[G[LI+arIUNl9Ia)p4Al:fo(=K*<2#%S(R4KP!$Xs>IHHLl_^Psb#J\qh)Fq-HE-NUL5[65%GW>^MuKi+Y5@f&6jF-C%%_MKU[N_H?SHeY5NK]!F2C*bPB_PSS)Gak)dE^Q*5+6FYRt-U)$F)m;GKChq?8]n/Ha+!%@_6P',,a&M6b5%9HT3bKa@doHgW`2\%IF8\R[d7o@P(?=F1'!/Qa&YACEocmQjFgN(%\C:Bl>B7$0Q0&F6&69E3UCe).dr@!n"O)i92M>n;O:JT@C6[toRhukN]tO@=m(?0%g%lM$/u&qD9s?W_0q(n.1RF#$bT\k9W@eFalcXJ=GI8$`]nagc(ZE\HT`]T)1(1/C:FiL=aV9Q?B7C_"SuFg_VC[G@388N8of,p)%e_uKDh>K.5],/bupqmFe6I"hff":u)c"eP,1SRl1&.qc(]\?C=ouRk<7K%<p<q_'@H<nIdC/dtC'NTu2c?&U$gmqJ)bAn1j`Wp#l%Zq[a<2e#oj\hI<^"*s,<)6;dn/$&?bF<JZDJW8b/1mg11=Z4t9np4+IX^!iBDU,6%dL4Vd)O^9m!p[_*mb*Cjp<;m2O`[XG8dL5d%=?^^=<`70+geohs#V%63QPVhr]"Bq1HWO0C<-;<RE\Mq$T6X_DG4p&M*tP1C+S,f=!geU53Y3mDRC#]oo$S7J<mB)CH,WRV5UqMh%:WNa.8Q:*\Ra'A"Y,8/%U*i_.m[C]@X`C!BF/su*9o-s//1\MK[n0M(W`?9;h544aIARbN[&RI%P:;TJWQmFr-U\KBC6PMbHPKJ[%LT7SQ02?V1c9.\!3U6gNV;hZ`1qE]<^h#ZsAm/>oL<]J6`dN(d:TNme5FDua)4B.H<(a%Hl'C^r8BOmH<Y-<?2s8]NEI$Xs/*;^h%Mo9.K>h\)p\@_s2F`=t)FtC!V5SPb&j^HW)=8P9N`#H$I$`mZt_FQLJ>ZL()F'5+ZYK%gNYR4HjknE7(jl-q0=:k8t*O@.E3DZPt%jS/k;`00Ai(_H4`@l@U\X5m2OA3(:?CLYc1/=EA*@^\3??;jj+L%8W_qe'4oYFHtUj:da6s(G_i03#]lk$76E`>X#$YNBP!^#B:C%n_^8hLnV*`Sr)_k>+;UU6doc2We9R(Rs@-0EgAZ3CuG0.ero"S0tdeKhNV4)I1<C0J\6)EW7CLHl<a(Gks2U=q7?`%3Me*kACXm+%rFc__lTnOX3g;_Th*:R9;V:*0YEL(UDbO1j#\#[$/E;g,&;"#\%Ra8IYNNeqc3r"a2jaY4HhMZ7l08I.krYBpBFi2M5ujg_G[jF>%ph*nLYFK0$DJP]1:Me*J7@%Iu$,3]ee[m#+Vuq>0qHb]8BpH?l&#'0Qf&Y-YgB)G"c\"cC.;(f5F2XMg;.13NKB_fpq(,h2lpABX%4u'*WV*@hD\S+F9ma\HFo$S8s\d%u78U6g_"AgKOPe>!>8b+?u%Ag"g.4;2`Eq%j)1O#`ud%UggG$kIqp@)6jQ<;ms4hP5/+tCTH%d&l4R#Cme$oE"c#BTDsk)GMK+b98.4%L8NbmZKU\$`U-fKtd5:=cZYdO]LGAHEUHQOf^UHdC7]7m-ci9n-@2=TO/^9p<G?_I$4/9%-qC2(EaV>Xi;(;GF16DM/1]J']UDsqJS&%RY6F^$2AWt,/(,FL%ET"RYXr0eP9uA(j4,MhUWb"+4qc,kEf='u;HOsB37H\DF1HSD%/1[05mmgXnD"l>4rb_8tHQtVE$\.gn*QUnJ$<Sa,>$8C3VEhdWqn'Xe^EYrRVYjk'.JMMe,Ho.].]a+uSE]I6Gs,`3p&.#UMYA?b%3`\=KTr`^Hlg6RuS6D^U*&`5c*U,AD-BR7F+.0g5+GpsPXW=T*,_ZsREMAq8ii\dnTQRSZcM2W,eOhq)XSUe0Q%<^rN=P$GgH;R#%5HV$@#Le5<'T4>L2'.U3Q[rtUTNF<E3Hf_C7!I8,>u)KPo>GCA2bZjc6*0cdZ<ngq@MLp8Oc[59VcE:kT1fLLjii8jX*G2P@V*s7%?:"+'W&h"bGqe(Q1U!:5c*Cnmkr2=-p9<gdDI.b7P/pp`4EX/Sf'#A*\kC'nH!1rdp;n#)2^a*!@&9pP@$5(FZ^gDCnp2:U_MZ&e%dEO]C=F-jDWN+eMn*9Ipl)GKO?Y$?3IUfp!7<TPRM26oS`B:96(]7f)&8fbmc8!uRQdYJ5C9k:ESaAH.H5rs%.[11eh*:R9Q;C.S%m!R4!n:"p4<F=j8LV&aRmVc9P$MbLt<msD"nYQCKhXlBp$OWbULX@1#1f_BWoZ!7^n^"kn?9_(f/@IG/`;8+d[NIX2/K8VMW8lMf%2DH=P;Y$iZ<llkA1*)1ZB7K*3PZ"JC%jq)\,S%(B7p_6DeR@R^KB_frGqE=OjC]+j3G8HD*Vh7.VeUpq+FWE47;U]jOI'jMe"ZiG%.TXk99TGc+q6L1/L^PCmXuS#%$cJL?d/dDk^,XTd4*,[L!A3(#r4'd+Co'e3%i`opQ`e-JMX8&`-6aXW=*[$ie#HX:IkVn![V((+%Qn6KCLh$[dr*%dD,Ho-2lECWS7WeB"IEp8NQ$8Zp"L8]In<5LU`!*CW-/0?)Deh``P>u-ke/q_s6VcKZ0V&IN)6qB&&",$\;/G]Y%5XnbXU2hr9ih(KJS^qULrCFX]CaAg"b&T&$6'Emg=-jJ`GF*R=L.k**`U5]EGsS?nX@tX1#\\#I<sDqclWp(ec"/]k7q3@tcOWTU%'s`JVm[Ug=4]ZtB3BljEZVOKM@nGt;@m'FjQ$oW0^'=/V]rG8b+',ZhGB\WKV?=ZTI:E%IOsp-=bN;]Mg_:K(LN"KLHY5MQ/"pPS%CeO3fJZYdkpTS+3p*oEiKQn`Vcplri>B+fNlchs-s+?)W2J.FBkaM?.##2@^5A[B.GL.K]N"461FE^G"Q;ppf)dG?AoaP\.Ke=mu%"ju:4h,IYOWQ1\"`_HUR<n0,F,R:&<ae&\om;*7WO[3/2-]Y;gU9-ZgXJcp\T6Oq]Auh\LdkcA70U&J_pZ,Ih?e2!AV<rr)=T"r+%l-a>8<`8o=6j2Fc5SZV<VS\a7XG4o_'NQA=R-r7fbK\&d`6P80%W(n%L8<6qV'7i'GJH/UpOYIN.Z.7#LK1SkJ:f;4MOB)UXBs",%mQ"423Jd6RgO$*ElZ&j1X2>lh])-,H&$)IJf=GOl',jN?%P,UhI&bW8OKIH9&U<R>pKFcsDKP:7mj'q*cVK4ib#"ct<,B(-XVHe/%*g4AgA-^N,2g&5g;TW)nh32aeT9/AD;NTW[G]Q=9QZcFp&<SZK[Qgjjec,m%J\Y\ZGsNg6A.QHNK'%Tr*hb$A6?WprI5?Yb<mku$%^rHQ2S_>?;F'3u="h>[0etqO\`tU'hP<b7s*aQ"^o(Ci(])"OW!_F5II)G;E3&4bpEgb8I*-j[W<FJ='SET+*H!IJ3f(0UFNXs>p%9<ngr<aZ2B*NCT!4*k-tNc%oM<o"iu`C9h;V?9,nMcfPq&t+o,W7YF6DAQ:n<j"QPmf&X+6VD,V0Z(iD#aO5mAU@Lc+r=ck1U]A8%lh3SMHM0au=#mDD!1Z5KVEcm@Uu&?3_6OMmcBMjIX.8Q;np2:U_MZ&edEO]E\4IK:5BhS1`8Z\[G.-W)eLmoWhnJJlebro6D$8d)%$KUuj&'R8[@#D-Gg,m%9:^*oK)a?scm[ncqXcA^>rU(85C(@>d$6%;A$aQQP(M$$(gYAQHHQXt)4[c@J_s4N>J:e.6g3Z!>0HH3#%;jJS[R?$uk]H1$@X2>lh])-,H=0&+h9U"Q+3j<<kdfe'U>`a+D6gTmF+JPT4FamL.)Z_pc!qH!NmfLt7Ba<,TBP)[Nd@MSda._e&%$?)I!m[nbfHr(r,FQCAV9LBT%:OfB&ma8TV'P*5aaKdQA.%jT3JH@SI#Y%=?@8);I)#%Eb*$(`QYR9L.FSF+o?=$<t?6>PMou.Gs%5Kdj:e*H655-:[m!g)Y3_X#!(CG:H,dGEi)W&h"bGqe(Q;m0c'Q-;rD="h3pel.n-=kBsl@\%5d%Psp@&*0Rbpg!L!\SQ?@_/ga_%EYH'tV[T0?qpK<HMB4\kKiP&]T"Aq'EV3L=qKLfV-8rN//.8hl.bEE!,THF9[6"ps;7sb1X`P,)6i_Q*[h$P@ae\1XO_/)d]%`G`%<ei3NFEc#8*aVI^\OdjTM(K7KZ9h3"E]G@9_t$9uEX20`1RP8XVcE=3!&=^5,C#iJKj6AB&'Jd-7.@(RYWBF:VRq??p%!E4c@JUU%omu@6E^?c^QU='A@Oq/[HjB/h;l6Y95E0b%J33tA1&EJRVX,VTc\#iPIe/#qjhU2%#R[=<*CP,'e6uLsSQu=AfSNbd)9L'Cl*kGE%Oor%tL^3L66aTU@b6J&=EZbWo`28<[@@Abl74UX1("YdQcl46SYKU)4Z2,-Lf[ku5Lm>'dlI)#cX'BaG9+D"R#Op0J_/r]5S'b64%3[E+(@-HppFMoYboKCI=ec<?(PXM96[di.$1QR;mdUgDukD@m%jQKp6$^hK1nsH`u".Z-3I8?p+@fU%#&.EOk)a6#KVW";:Ci@6/%-WPk#-kE2eJ*-FP[@M>a]l0tp["D\IXKhk4+tAE:R#kh5r4'A!I2.@uV"S4SG/mr?LL:Ib@B79bep;W`6umIG^;4L.Ok8V)'ioFq%G]'[`^Tt;jMWosX)FDV[<b+eQAT,mA?fZkp)^nfC73`3-D4i#Q/dr*j;'6NN1acfI.jUQIq829+9[SNj0KM=9U76)`E4&kQ$<<^J%%&j#ui<HA/QSVrj@SmUP>I\1bV]TJ)R?mTFPmmbU.?G1kO!hC5($0]p'q\T=HR5O2W@G"5M\Fp:1QT-adW-=[B4GE"F/UY6dZRjM%4jC<R^mGo*5X\!2nt&n,LB,C0aG=Y[@[9C'e32-`]cPjoWXc*!`gQ8oRFfVsl)%,21cHFO0:+9-[ZXn@9UNfM2d>5NjRo_l_XdT!%eaO^^1*)0/-[ur"Y/g,;j2U.qp5\iUA`'12X<9W]DU,6%ZIhbbFQuGYrgnsHIljr,X3,L%e_d$i/scDl8A++34/o(F8#sh!U)m!Z%P^(M%AoEGug#!q,bOM1'lECV6SE]I6H!S+FDC$JbZ0Hm@(27JShPpfj>u=TLOk7M%?0QD>.pncg0Ek>uA=o6D=qVP\`b_eGaJPo?%3h.q!]6EDD+5s,1Fa?VF$q'Kp.RKaVL?DXY=eHbQ?[f6;@HE7T*__-(&HB\M(*F9FkLgm]nYtfX$?)I!m[nd<]Sp_KWJ]'l$mR-T%Bg(=-B-EjU3[.Y-l*W[VL=cH9$D\nJSWKZb&p6u;kFnlr<>60KLG-qpo1iPVdoNT*DHK1jW;F.26*(pl^,A:gC"8B[`sN/Z32)$h%XY):+aTSDJ8])LC6:o[SD$6>DZ%@S%:93m'R;UlLbLMMa3>04BoRUSsX)d:&Q/b#3mM3ZtFs&G$Qr^LBD6fN-j9[(TA%lB?<eDc&%hEBRbaNfR8YW=mdT"Aq'EVCB_`rPRZq66qQ\^5*(qp;GdZ+Kor>p%u>bUWM=8rJ03!Jo^c'=,5B8E8a=7q49bHUnLE_\Hgq4(g0!%0;*IBS\O4fdu$C#%(9'H(TSGWZ%=";990grZCY+797J];M"gQQ/6PD\0I<b<NqO*#MaLKHL%8W_qkmcD@LfN7ES0g%G>(Xo4j[F!%EB2Q8b!S<;=c.A&YD979\D"QW(B<G=i'lH.8`=ltA?-0m<(6n6kR""OZglfk1O#l9dQL'N%a;t2A:]>tjP@k#o_`>Rgj=t]ksM:5%p;3FIJ]*)_)l=V],OnX%UQl\n3OFIiiId?L]eWs,QdBb:[GUb$@QGJXLt1M&2^Re#f&Zm<HIT?&or!oerZjN9+)*"OQ]4LuW@o3s%N91,Q*n3S&kU+^547d`C!A3=C7?c1,c#MDt%BIEY*$Q2'V.'$X&/!kK#p*,rf\jSf+>u1W#$mSoQ1N)?Q`S*U*-j[W9jr2.2PQ[Z%lEI@nOu,,/n&6XuHc/@KS/\>*plNHP`U?jE=lYCPoTXBskeg$<.FY"UR##kA+9)Q0f1@$OWt7eRRNo#VTdd),M"/,>B$OF1Sjub>%#NiFcX?t8`I!@ZMVlaa65,)_l3I=%fX6`8>M#rMXmL?KE+.9b]4PG^fOeT_VnAU7PhO2]5C`e[ks*,[8]1CW$rY*5];:uHc%-45i%bZdA_>$96KVEb>H>:3re,SCRT7^9K9SLo^+.sg2Cn#i(jdgP=VV:1!@_'=c$i7!T.SNbOiI7EIs'7*j-dqX-L:SpCOR!HTFi]2h-%-p!fTdch<c=G8P#FSAOXI_-1aDGIGuTq;90pHte?s14eO33VgS]OMir.$Y1,T*XSWcH"0dHAFcOlr"LJ1<a]o:Y^Am8!_gS4u8DJ%mp&GjO:E*(9O*BP&u?;W,c)bYM-Ga581D:3X<^E;a%\s`;Fq[&.d98,mV@s8"+H.?/sn(*(T.O>@0S$f_5CfnBk.StSTLR$P:i)A%n<Hhu6!(!qJ1g8K89)J)/-Nf\*2Erk__7RCZdU$#VsK[8.C^ct%\NdnC8[.K6!#LHJZ_nn,2L&8?0%LS5Sr\E$7K`b0=]!B:7HG5%8f"R$g)-&*h!?;]a0(*);705p]2'Gg,qFPLj'j5rMZ.WIiR4_7]!tQcl1RAH65N7)+/D1G7'9*:.!3PD:+[7/).HQt.Z..6MC;4W%W1c9&Y_,UY!Z,b:W^.@4C/@2_F/DM8c']n)1oHe,d%"iK64Y\>kWq)q-@8Q@4?f0oQX-LEo`>_GacL#+6KU*F$Q3uKP@L:rO:OZ)%ksEK;>tCAY<uFBWFLoU3.[r%u(K-RjD(MJ6nj1DB*No.J0%.]BB,BcV+dm/dCQ@BEWTsUmgejn,i&Gi6X(ENci\n8n+^rH\^Cb&[%At]>6ULkuA`i-NSlU&Ui3KtXpe4_0BFLZ#M.\ssn?G,q_;[RD>OU24__1dCY$Rlg<-)=Me'hYI$$Rq'W+f1;2(WP^"3Q2Os"k(SR%oHG_H:qpR40IZI,OTZ";IZK\q4+rbl\kpgHk=Y*D<r3[rc/&E]URm6Y\YR4cE>MMED:FA@;Brd<am$$F]O*>U6KBD!Ln*Oaa#/.B%4esXUF\5f0l]e\?f-pm6Udfm"PKka`=%$.R%NT/$diWUe/9f;lqt-%:Ulp^'8O=nhAWXDI0TduP,k=5-;Fuj=/""dSW7BqQ@2Dfs%kU*,?nqE;p^5u76#:TguMc)%g(8Z7JW=a#hnsiT&g'T[m.Wfo5WJ`N8E']3@'O=u.,!;c>-o?0DBbrXO;J?q)o\f;mQ?l@N[-c!T%<0/f(M>&a%iCo(@L/TBjQqinp@0RMnbb,:LPF"reUnrclfbn)Eil.*)_lq]+/9KfN5b)M*(K:U2/!2"qArr0/dOj<ml#_le3J!4<%2(.l^FOc@VP&_J9lc(J3[CFpemKA2G.*8(EA-*'01?^3QAC+=+.H$-J)OGG%7b<SudMQ7G;FtA?c#L3D0=&em-*:#OEf&")5mhXh%*&m(ZO@i]OPX`6GdRY0P)X.gDG(o:1&OWCtD@VA`%_B/iG=)IETk'6:PRPuoP!QZUiYNl`_GM^!Ss^L,B\X!P(dkXeYpWXERA:3>%PC+NbOY<L]nBI'#5fX]kKegjp7>bR,+a1s/CtKnUaY"4Y6&JXRY_*XhCs?k:AZc>]]R@.4cn.j]TOSh(MR><+ef%F3AN8gL9M//>%lOc_'FOUgZa*#N.H0"q0ff4U)qN+2C7=Bl3Ts'P1oMtHJ?No8*m;3"Ij/c46YX<r)WXs=ZE)HbS/u1>pKp5%j8AU"%4]@69PKm!/%4IpR`g>_q(1XHo`-U$I*)*nuRpPtnu##?V;GNor>-ZXAT,^;B7Kb?M?fF15n#[EIqJgr%ITL)>9_T8)9,,B(sW+p"EQZH0`-@@gT%%1Q4g\5eT*Lb4VY)BpZZ87uJ880a[f<@Sd>C)g:g-h'Q8PtD0k+XE6]8i#'d8L@Xi.A5^4dS`)1NeJ,$&(Mo18sKB4KX9J:%m#A"%l2JRQUf>crPR>,j.1LZW;NOCZV6<NX)X33^26O2lA?ABISWU='dNP,\jH2VT"c9&$oBPPL@N&.+8)tdb8/\32.>)^cAWe[A9^kJ]%Q%&2`:g@g"5o8-`9-4s^Tk'9;PUt7:'',17KbEI/&M^X9N=<hRL,:Y&6Q=Ip?jplgkn(@.+s3Vf6p=.Ua<P`N\4]++)2V6Hk]lL'%oG:pP;DRK'8g^1N03nn6m-O&J'YJrKLQV_I9I0jY]MDi-kqlVo*(m4Y\\\0MV<8%E.$91VcuD3o"!(lcCS5/kQ/3>D6:rJ08Eo1C%.@kjJdQpq`V1XdO<Oti-$Rl1"%'%_dJt9q;l12V@PYBLkaTPgXDr?cZJqcQur/2S$D>/D#/a:VAEPm-u`oWPc&&qhaU]P_d\4DAt%-QNqh+iro-)q@tuj)O`OM*8jcp%W.O6&Kb8?jA./MguhNN)-7%'Ns>pZ]L>8a*9+?J]fbN\W0VI`h4"fpDnlYI,&q)&;&[m#)+2/%a@^1Q6#IR![N3J$0\U[qQP%WR,I\(NgKmI,(tU;&6:rJ.887!dPg[@V.&DJJ_Q>([R"^c"\rb?3LD\W)kn)md?T&urOrJ#lHX;qg%j>*p#&k=<VP_.[G01qY.$Rq9]+U,u!7_%hV/sG8&,Iu#8O6t"?PN/pR?Nk%<,&8!&#:5O3?jA!@5KkasmC5F%E'"]r(iBS5JLAA&%8>HVBa=WSXZ3/3[AkG@0R3eXO\'./fa=WV7Fs+7fL>,QrLEJM_q)l`X6Fp!Fj>(4-<gIK*%Y^&Q[Rqh\FHoHJks@rd+-\V/7C^SE%_n_I%F^Q&2EnGN-)OVRgQ(W:\(/h^[2mZ@RpYoenO>9)ATK80=-A1SKDOCp5"3G+0W"()>)*rC=dY3iU3[gD()cX,Y2Q1/;N\OOC%"RJIs,+gBJ,DBQ\:aZ&r@"qK9]fMQ$Fd8SE1C->.([Y8M0p>Tu1Zl.L!Z+h3TF)8kW'Z-_(f!QLl'Z$:QqksIPG>8/B+-.X>A"6p%BIH.])G3h[#+mVT&Oq3&5l[N!s70#A567#MG#lq[.fugM$=JUm2N^a8%)ktPPJsfZM/9IWiAH`l(+6aAd`LL%f0hZ&&RZula^Tdk%STK[&F-$l/9tidCKp2U%NlgS>qD]9.;C;0J`_/K=R"^br\r\[=(K)%5&Cr1_Jl`*-M0-$_,Wh,`<Xd)&A<XtUfnF7J38q7tdQu!d%8-^FKl"!55?-"@N!HoWU/-ab'Z\iq!Ak:<P76`I?;KPseY`PTcMM?hL$pL661+`ZWbndZ)Q=3j=Dp#<h]-]$3%C6qLV%GUGjsM60%?'"W[Sthc`[YC8[*K&'iB:(\`V\1OJ=e+)I=GJ(>%\TV[/sJ3`5mc,9/<-mb"P07t7bEE;.!jTafF?JePYSrS1<:80#5KAFPD=J:%UGmbG_o3J)YRX+ah6T%kP%79kQ"sLBJW_0fg:c*iKp9Q/-Qtq1U%k%3OKq-lM640N[ie,b\P9;L.=q_1f68`Acjb>pJd%\oOgA_<%>KM"RM4Ic7Qn&cM__.0!UD#2CAF`#X-=&%A(8M-*==0D)C"iaK9b\!3Jq]HKb>>B1.0Y*U;@<4BV33I,<76Jb$G&n['m(?pXbd6G%$*2mU!jb_O8-^H#Cn[Yg/X0X5Xt3%mOq,&i,oq@ZP^!ZMW8Z9Q%M>f&Gn->V.Ugksn/S0,0d(%ZY>WLG?_nJ'g6!cK;C:TWV(C&K%PXW0FZ:MIo5Ss3aa0I?_"mn-ODki$!FJ4ZuH0IX//``adCljtrko_W*dQq41bT],,9V.gdgDoeZ-7?K50_>&d=GC*PaeT:nR=$0S%O>!CDn;WN-5W:*fJ8S1U"^Qdb_1HR_JQD>qPY/ZOd_Ie/8d!nFPQn]j.1LB_;S5g</>W&m'u<#J-"!i"qa_:VP-7q!$q`S5(6o<4%/LhX6$RLFITk'5q8plXr2MQktT4?C<,^?^\a!_ea>OjdDh.?^;MgQ[ZOY<L]nj1D">m`%6o86q;P!-#4`YFi'4gEW_ZIVG;`1fbR%g&oTVF9lhGOj95&jHYt/"F2;).R@B4R7`QC&jpN]jF`Uh\kl9qL\R/CkSS&U!F;C`!kpuM35d6\8u^m(']bNY-j=lB1"9grQ,HLg%O]W5`D+7u+&Sa*79<(t>8I$Q4Cn[Yg/X.B]UdcX4FH!5?81Nu!A:T\;2%S+YPf]A9fS,P]\r\\`f-t9_Y>Yc@Mla[5.EF#r;)KT%%,Y$=C'Ts;5b=+IFZ@X'jLHgQbo8Si0O@3U[O%CeA+_cUoP"5g,-'9gU,gqC2%).Ot-%h4T[:IY/:m/XQWMGV-PSDPkXeX(O2+XW:%--.5YU1ut$8W9YQ.3pXJ(8R$+M[FQ_2XEb&,@<uUj9mEX+VN;O5Ic>h>-#&n0C&.#8&7Na:HAi;:g6!F&8FicT*Mk]5fZ]*#3\rI%W<'Fq,m.t?8s!+b*>=Y[Z/e;!81ZbfD*_LM%(-7a,r=$djH[qc>EDp,VNaN`OKuq4.J4mW9;r`k8k>otkSS(#"ZhClRR"ni>8-fp%^stia:m+?S,oLNa8s!+pV%Vi(3>iT)OB=8*D+.pU&Sc))*TC9TUdKO1a=Feu8fS>n-j=lb1'47Nn23h;jF`[d\rb?2(K)18(i!gg%*CF\_T`gNR+Jj^o;[P:<U_oGM`0*3Y+L1!&.7c"XTsc/OA;8fqb`X4#<[=!T:g5=3TOa3;PYAB:Op/Eg,n"gY8f%1GeCFdaL>$g5%%e1!p4R6^Jr]Jq(3lJLNJT$7,L;]6V881UGOoS3K6XIlm;NOs86Z(#B$RqKc+U*_!+Oga/FG3T"+gL6;Y3o,;=XY_0$RLLKTqmi(%PZ7-@<,K/EU+iUU$9CZ,ej.9Sg)B3B$;u]JjU+(65UoV<Ees/Fl4-t@0:>_"640K&6OG9$Wbmh-Z)eE*Gq<``FJ/gt7/(_if`YNQ%OpSQ`,nkBS8g`dhaW_gk/C6,O[KS]]e[@_E.0V/RHb"7ChrP^O#9>hCp2VJ"#4,Se7g^](WZ<Oa6r^Rj#G;"=8&Zqp&EGmX94>L#%M(R\3oh<(2RE5\r)0DDn1[&:;bYFdP/>O!,1#DUj5*'`tO:G-j=4/87F_$go-jA:XS%Woh*:-!!dYhu:8ra&sUbpMRPX`6GK'ZAP%E'(?u@DM7NI$7Ghpa2gGnj1D@>t>j/$Rl1"%(L_;NWHUbn3t.['6FYm*U0E=G\oro.3,PYa=c9CV(9C3Y$P(ZoO8cS<67COW=a(S%Z:ecE*>drOji0_M7(JFN#:UmKNrug8JM0km!ac9`)0C^51?h+t-='0aUdLLg(alHuE!Ofaj`p/XHDrW*4-3`aj-M2\G2^Fo>mCPF%:f9k$8s!@o"PeRp;AjEYZ:ecE*=[*1YT8^F+f1AUUic0]'V)G0)o&sO:<.lH0MYjjE!OC>A`Y:G/^d:'^`>s!PlnGsq5&,IFs+QL%(/g6#C82K=([gb?V*2$j.>r9kAWb<Vl9KZp%'/t$*Q.0T5f^^oH%D!.Zh#@_da1\KK+r-Jf9>o%$MM-U_0R7.A&=L>FWu[l=D=EY%AM2"7b9iAX2g>We?l)]rq&fi4UeXNJ'&a$J?.f:kOFf#])-1ArT*M]*8V^\3/*W_&JrO9HZ[lsj8H[eCOp3sBK?ZkL.-[N8--.6p%@<EcLZrhOFLETua75s1(oV3I'R./_K5SL,nEHZ..[K;#4F<PUd/d*B)1^;]keC#1Mk6,,pgUTSi&_jie#:5:ETk'8p8eqVg)^iZA%#)X@PmD;,.MdX/Y=W2q[6=sp?[L8M"EQE;HZZ%"RY)Y1t%bWJ1QH%T4glu#Ib`48cQH!=E1?h+t+WVc^.\oFb>F9tX&Sr71+<*ge%(M4doN7]aV5W2AtX\-#u;FqZs)X0Qp;G2pM]9$/6A*lTpBoKG-RAFoEG'25ePYSrSd`E;'OBPg]KIp`#``Ti,"5+N,(M4doX?"Xa%He9LWX\$6gEh"'c;D8:-@NoVsTX\tcCgj-,)o9\689*ZXfKs=e&SlLrrGp++S0%K=AeAe^ZW,:*@]M<F0QSO$$P"so;R&0p[[7<#%fGn8QUln,0.)BG(>?$3r`YPhf@W/ne*m,rja&h[2X4SD!gS0p!^5u76#:UK<mMD]BZ1NrPOBD?J.EF&'U8hT'G246R-!_p5Uk9:*%QCb#XM1n%*.e^k`meEg7*++&eP"n1hl(f8C[@MCIcP)M%4];\7)nG''-XL3t;D9NS1Sme95mgL\c]j"qdPI^BL%O#'X#$TsZ&ApF%*7>F!"mRcL-&ZlJ,[Fr5P&ufq8eP#-pOC_H\],[f[3eR*G!slL0\=r%Wn*D*kFnuS7(SJC8Jb8Y.*Oh^2.9=ka$eRHT0Y[kB!JtW%&;\9Q)[.FjoL=C&/3RIE*j,`0%ra:<kBo!rX4)[FZ$9;?/\QoRA<u($V3*C+1t%)B7_4\53QR4_>8*kVHc0*YT7\#G@%b"?.d:IO%-%g<5"IZ(s.R@\2&Si$m94t>#81^=:2Bf>I`nE7@(K)UU6HUKZ83pkP/#4;moL13rK'\H(fI8HjUgU79@#/dS.PI/Z3:)m54bdc'%G08Ef+kqm6no_m4Xj/W:/<h9^N/L;i=U&AQ7V3MMCGQUH@'%UD/;(2c,I*20F&9,A^2djg`E)dq&u?<5Kp51n8AQ#$@'%=BH,2fS%VBAC+'MLe&``d2Df0^,JJMtr1P"%J\_*IN=<.`'*SRFRGdMrW@a=MtK2C#PeLp_Mi%KS0mdNQD7VgKMM;NP"j1TY&dHlXpTp>t>L%r51lsIJ`X-TAGWWX4)D-+-32T;X?RUZHltL\)2Xhn+51mO+2D%n^"uHoaa:cocIO*rUKdR^A?gGT)WXpqhOtEeaL9PlJ(JTIf8$o%r9_NhIK.2\cej-MYM]<;a62pkps$SOoZQEI'g([5rqi"2s8AS60%Kge>Q+!Us6XpCO<1+nn!D@-IJM>&J,J`(k:_;URpWp:s8)9[%huE>6-o=:o-i5!mqj[&(qW[m<B):EZru^S&MdJ[Jk<D.ZpRB2>^]&*IkJ-i\&&8#,hnK*KYQ!hW`>AR7X)G`Oq]EQKj0rCqnG).d%YPul"c`b([:7D(V:]"Ljhu*!:O$A'm_q33Vs5j,B$aTd8k$NN+2h1S2O8fU=rNK?~>%AI9_PrivateDataEnd