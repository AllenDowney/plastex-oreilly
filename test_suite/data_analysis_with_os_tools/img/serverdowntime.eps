%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: serverdowntime.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 273 196
%%HiResBoundingBox: 0 0 272.7012 195.7368
%%CropBox: 0 0 272.7012 195.7368
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 7142 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD08FFA8A87DFD7DFF285952A8FFFD047D7E7D7D7D7E7D7D7D7E7D%7D7D7E7D7D7D7E7D7D7D847D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7EFD077D%7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7EFD077D7E7D7D7D7E7D7D7D7E7D%7D7D7E7D7D7D847D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7EFD047D%FD0AFF7D5252FFFF52FFA8FFA8FFA8A8A8A9A8FFA8FFA8FFA8FFA8FFA8FF%7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA884A8FFA8FFA8FFA8FFA8FFA8FFA8FF%FFFFA8FFA8FFA8FF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%52FD0CFFA8FFA87DFD06FFA8FFA8FD23FFA8FD15FFA8FD0DFFA87D7DA8FF%FFFFA87DFF53A8A8FFFFA8A8FD0EFF7DA8FD0EFF7DFD05FFA8FD4AFFA927%7D27595252287D7DA87D7D525227A8FFFFA8FFA8FFFFFFA8FFA8FFFFFF7D%FD0EFFA87DFD06FFA8FFA8FD47FFA87DA852525227527DA8527D52522852%7EFD05FFAFFFA8FD06FF7DA8FD0EFF7DFD05FFA8A9FD44FF7D7DA8FFA8FF%A8FFA8A8A8FFFD04A8FFFFA8FFA8FD0FFF7DFD0EFFA87DFD06FFA8FD43FF%A82859FD05522852277D28527D7DA8A82E5252527DFFA8FD07FFA8FD04FF%7DA8FD0EFF7DFD09FFA8FD41FF527D527D52522752527D525228A87D7D7D%FD0452A8FD04FFA8FFA8FFA8FD05FF7DFD0EFFA87EFD06FF84FD45FFA8FF%7E7DFFA8A8FD05FFA8FF7DFD14FF7EA8FD0EFF7DFD51FFA852527D528452%FF7D7D7D84A87D52FD0FFF7DFD0EFFA87DFD06FF7EFD4BFF525227522727%A87D7D5227522752A8FFA8A8A8AFA8A8A8AFA8AFFFFFFF7DA8FD0EFF7DFD%07FFA8FD4AFFA87DA8847D7DFFA97D7DA87D7D7DFD0FFF7DFD0EFFA87DFD%06FFA8A8FD2CFFA87D7DA87DFFA8A8FF7D7DFFA8FF7DFFFFA8A8A87DFFFF%FFA8FFFFA87DFD04FFA8A8A8FD04FFA8FD12FF7DA8FD0EFF7DFD07FFA8FF%A9FD2BFF527D275252527D7E7DA852522752A8FF52525227527D52527D52%2752277D52A87D525252277D525252277DFD05FFA8FFFFFFA8FD05FF7DFD%0AFFA8FFFFFFA87DFD06FFA8A8FFFFA8FD2AFF7DFD0452277EA8FD055227%7DA8FD0452272E7D7D7D272752527D2752FF277DF8FD055227FFFFFFA8FF%FFFFA8FFFFFFA8FD04FF7DA8FD0AFFA87DFFFF7DFD07FFA8FD35FFA8FFFF%FFA8FFA8FD2BFF7DFD0BFF7D27AFA87DA8FD05FFA8FFFFFFA8FD63FFA87D%A8FD0AFF7D52FFFF7DFD07FFA8FD67FF7DFD0CFFA8FFA87DFD07FFA8A8FF%A8FD64FF7DA8FD0EFF7DFD07FFA8FD66FFA87DFD0EFFA87DFD07FFA8A8FF%A8FD61FFA8A8A87DA8FD0EFF7DFD07FFA8FD63FF7DA8FFFF7DFD0EFFA87D%FD07FFA8A8FFA8FD5DFFA87DA8FD04FF7DA8FD0EFF7DFD67FF7DA8FD06FF%7DFD0EFFA87EFD07FFA8A8FD5BFFA8A87DFD08FF7EA8FD0EFF7DFD0BFFA8%FD57FFA8A8A8FD09FF7DFD0EFFA87DFD08FF7EFFFFFFA8FD54FFA87DA8FD%0BFF7DA8FD0EFF7DFD5FFFA8A8A8FD0DFF7DFD0EFFA87DFD08FFA8FFFFFF%A8FD50FFA87DA8A8FD0EFF7DA8FD0EFF7DFD08FFA8A8FD51FFA8A87DFD11%FF7DFD0AFFA8FFFFFFA87DFD08FFA8A8FFFFA8FD4DFF7EA8A8FD12FF7DA8%FD0AFFA884FFFF7DFD09FFA8FD4EFFA87DFD15FF7DFD0BFF7D27FFA87DA8%FD07FFAFA8FFFFA8FD49FF7EA8A8FD15FFA87DA8FD0AFF7D52FFFF7DFD09%FFA8FD4AFFA9A8A8FD18FF7DFD0CFFA8FFA87DFD08FFA8A8A8FFA8FD45FF%A8A87DFD1AFF7DA8FD0EFF7DFD09FFA8FD47FF7DA8FD1CFF7DFD0EFFA87D%FD08FFA8A9A8FD44FFA87DFD1EFF7DA8FF7D527EFD0AFF7DFD09FFA8FFFF%FFA8FD3FFFA8A8A8FD1FFF7DFFFF522752FD09FFA87DFD09FFA8A8FFFFFF%A8FD3CFFA87DA8FD21FF7DA8FFA852A8FD0AFF7DFD49FFA8A8A8FD23FF7D%FFFF7D527DFD09FFA87EFD0AFFA8FFFFFFA8FD39FF7DA8A8FD24FF7EA8FF%7D527DFD0AFF7DFD0BFFA8FD3AFFA8A8FD27FF7DFFFF52A852FD09FFA87D%FD0AFFA8A8FD38FF7DA8A8FD28FF7DA8FF8453FD0BFF7DFD0BFFA8FFFFFF%A8FD32FFA87EA9FD2AFF7DFD0EFFA87DFD0BFFA8A8FD33FFA8A8A8FD2CFF%7DA8FD0EFF7DFD0BFFA8FD33FF7DA8FD2EFF7DFD0EFFA87DFD0AFFA8FFA8%FFFFFFA8FD2BFFA8A87DFD30FF7DA8FD0BFFA8FFFF7DFD3BFFA8A8A8FD31%FF7DFD0BFFA8F8FFA87DA8FD09FFA9FFA8FFFFFFA8FD28FFA87DFD33FFA8%7DA8FD0AFF7D52A8FF7DFD37FFA8A8A8FD35FF7DFD0EFFA87DFD0CFFA8FD%28FFA87DA8FD30FFA8FFA8FFA8FFFF7DA8FD0EFF7DFD0DFFA8FD25FFA8A8%A8FD31FFA8FD07FF7DFD0EFFA87DFD0BFFA8FFFFA8FFFFFFA8FD1FFFA8A8%A8FD2BFFA8FFA8FFA8FD0AFF7DA8FD0EFF7DFD30FFA87DFD2BFFA8FD11FF%7DFD0EFFA87DFD0CFFA8FFA8FFFFFFA8FD1BFF7DA8A8FD29FFA8FFA8FFA8%FD10FF7DA8FD0EFF7DFD0FFFA8FFFFFFA8FD18FFA87DFD2BFFA8FD15FF7D%FD0EFFA87EFD0CFFA8FFFFAFFD04FFA8FD15FFA8A8A8FD25FFA8FFA8FFA8%FD18FF7EA8FD0EFF7DFD0FFFA8FD19FF7EA8FD24FFA9FFA8FD1DFF7DFD0E%FFA87DFD10FFA8FFFFFFA8FD11FFA87D7DFD23FFA8FFA8FFA8FD1EFF7DA8%FD0EFF7DFD0DFFA9FFFFFFA8FFFFFFA9FD0FFF7DA8FD48FF7DFD0EFFA87D%FD12FFA8FFFFFFA8FD0BFFA8A884FD1FFFA8FFA8FFA8FD26FF7DA8FD0EFF%7DFD13FFA8FFFFFFAFFD07FFAFA87DA8A8FD1DFFA8FD2DFF7DFD0AFFA8FF%FFFFA87DFD14FFA8A8A8FFA8FFA8FFFD06A8FD1CFFA8FFA8FFA8FD2CFF7D%A8FD0AFFA87DFFFF7DFD15FFA8FFA8A8A8FFA8FFA8A8FD1CFFA8FD33FF7D%FD0BFFA852FFA87DA8FD0DFFA8FD0BFFA8FFA8FFA8FD17FFA8FFA8FFA9FD%33FFA87DA8FD0AFF7D52FFFF7DFD0FFFA8FD0BFFA8FD17FFA8FD3BFF7DFD%0CFFA8FFA87DFD0FFFAFA8FD07FFA8A8A8FFA8FFA8FFA8FD0BFFA8FFA8FF%A8FD3EFF7DA8FD0EFF7DFD17FFA8FD07FFA8FD4FFF7DFD0EFFA87DFD10FF%A8FFFFFFA8A8A8FD0DFFA9FFFFFFA8FD46FF7DA8FD0EFF7DFD11FFA8FFA8%FFA9FD59FF7DFD0EFFA87DFD10FFA8FFA8FD5CFF7DA8FD0EFF7DFD10FFA8%FD5EFF7DFD0EFFA87EFD0DFFA8A8FD60FF7EA8FD0EFF7DFD0BFFA8FFA8FD%05FFA8FD5BFF7DFD0EFFA87DFD0AFFA8A8A8FD07FFA8FD5AFF7DA8FD0EFF%7DFD09FFA8FD0BFFA8FD59FF7DFD0EFFA87DFD06FFA8A8A8FD0DFFA8A8FD%57FF7DA8FD0EFF7DFD05FFA8FD13FFA8FD55FF7DFD0AFFA8FFFFFFA87DFF%FFA8FFA8FD15FFA8A8FD53FF7DA8FD0AFFA87DFFFF7DFD15FFA8FD43FFA8%FD15FF7DFD0BFF7D28A8A852527D7D847D7D7D7E7D7D7D7E7D7D7D7E7D7D%7D7E7D7D7D847D7D7D847D7EFD097D7EFD047D52FD067D7EFD0B7D7E7D7E%52FD0C7D7EFD077D7E7D7D7D7EFD0B7D7E7D7D7D7E7D7D7D52A8FD0AFF7D%52A8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0CFFA8%FFFF7DA8FD14FFA87DFD15FF7DFD15FFA87DFD14FFA87DA8FD13FFA8A87D%7DFD0CFFA8527DFD14FF8452A8FD13FFA827A8FD14FF7D27FD15FF277DFD%13FFA82E7D52FD0CFFA8527DFD14FF5252FD14FFA827A8FD14FF7D52A8FD%13FFA8527DFD13FFA87D527DFD23FFA8FD43FFA8FD17FFA8FDC0FF7DA8FD%05FFA8FD77FFAF277D525227535252275227FD75FF525252277D53522752%5352AFFD74FFA8FFA8FD07FFA8FD34FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:54:43+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T14:26:32+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T14:26:32+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>184</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q47jrT3xV5Z5Z8vfm&#xA;dZ+aNJfU7q9utOt5bn6zcz3cbI1ubjVCBPBHIqvLKs1g0ZWKiKhX4KcWVZZFd+cNQ1rWobK90+zs&#xA;dNu47SGOeymuJX5Wdvcs7SLdwL9q4K04dBiqIltPPqxOY9V0t5ApKIdNuACabCv1/bFVC2/xzNb2&#xA;kx1XTF+tIrADTbg0Zk50r9f8K4qifqfnn/q76Z/3DLj/ALL8Vd9T88/9XfTP+4Zcf9l+KqF/D+YE&#xA;FjcT2+o6ZcTxRO8UA024BkdVJVAfr5+0dsVV/qfnn/q76Z/3DLj/ALL8Vd9T88/9XfTP+4Zcf9l+&#xA;Ku+p+ef+rvpn/cMuP+y/FXfU/PP/AFd9M/7hlx/2X4q76n55/wCrvpn/AHDLj/svxVQeH8wBfRQL&#xA;qOmNA8UjyT/o24oro0YRKfX/ANsOx/2OKq/1Pzz/ANXfTP8AuGXH/Zfirvqfnn/q76Z/3DLj/svx&#xA;V31Pzz/1d9M/7hlx/wBl+Ku+p+ef+rvpn/cMuP8AsvxV31Pzz/1d9M/7hlx/2X4qoWcP5gTQs82o&#xA;6ZA4llQIdNuDVI5WRH/3v/bRQ304qr/U/PP/AFd9M/7hlx/2X4q76n55/wCrvpn/AHDLj/svxVC6&#xA;ndeZdJsnvtU8x6LYWUZAkurqxlhiUsQq8nfUFUVJoN8Va0y88x6rbm50vzJol/bghTNa2MsyVKq4&#xA;HJNQYVKOrfIg4qt1GfzpaNDCusaQ93MymO2NhMrmESxpPKqm/qVhWUM30eOKtaRqOu6zA9xo/mjQ&#xA;tSgicxSS2llJOiuACUZo9RYBqHpiqJUeb2untF13SDdxxrLJbjT5vUWOQsqOU/SHIKzRsAe9D4Yq&#xA;q/U/PP8A1d9M/wC4Zcf9l+Ku+p+ef+rvpn/cMuP+y/FXfU/PP/V30z/uGXH/AGX4qs0K+8xf4g1L&#xA;SdYntLpbW0s7u3ntLaS1/wB6ZLmN0dZLi6rx+rKQQR1xVkGKuxV2KpF5d/47Hmj/ALacf/dMssVT&#xA;qeGOaGSGQVjlUo46bMKHFUv0xmbStLcqyFFjWVOhRhGY2Vx/kvsR2OKpnirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVYTqP5u+VNN8z6hoF/wCpbyaWUF7ePJa+mgkhjnDiATm9aNVmXnItuUTc&#xA;swVWYKpV5z87fl55h0xdJn1e6teFxY359Gz1FZ5Ft5ba9MUBijjl9X05Y+fpHnEHDECmKvNfMOh+&#xA;Q9V80309j5ruYkv4Zp4rn9F3N7GsdpBFp7LJczuzXxaQemhAfkWmiJLy4VVvK2keSNKuNaUa/ca0&#xA;sHlvVZtTuLfSzY3CQehZpNAkzyRqhgRVMNsI/wB0XbkwqMCp1570bQo1s4PM/my3s9Qhhikie30W&#xA;T04oDEy27x+i8xS9H1WVoHaVqUf046VwqmX5J+X/ACjpHmC+Gja9Dq90+nW/qQR6fParDBK31uEx&#xA;yzPKfjS6UyIzs9aFqHbAr1v6jB8fxS/vPtfvpdt6/D8Xw/Rirm0+Bo0QtNxStCJ5gd/Fg9T9OKqq&#xA;QojuwLEyGrcmZh/sQSQv0Yqktn/ynOr/APbM0z/qIv8AFU9xV2KuxVIvLv8Ax2PNH/bTj/7plliq&#xA;e4qlGmBW0ZRy9YR3MnKSSoJ9K7bkzV6EcamvfFU3xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2Ksa1T8ufKWqX15eXtvcSPqLxyahbrfXsdrcNFGkS+taRzLbyfBEikNGQQN64qx26/IvyRdQ6mN&#xA;Rsf0uLh1bTbW5uruJLdIrW3t0hEiyyMC5s1MkwXmwoG5cRirzKDVvy0a3urHUPIrxsL4+X4ba01S&#xA;4mtC0t8Ip7dDIbUw/HW5RViEZNDzSQ7Kpx5N1T8npdP85TaF5VurPTtF0F/0jFJcSVubW8iZ5Y44&#xA;4554h6sNpETOH5ttWnGuKorVbj8vLG/m0zzfoN2+paekSXUtnrN1qscMcyP9UMks09tdeqTcSpEP&#xA;R5R8iQVR+RVT38npfIlzrF/L5Y8v3Wkrb2FvSe7umnYpNc3Ebxej69ykRE1mzOQeTNUvv9pV6K82&#xA;lqGiNq5XmXZRaylS9ftbR0J98Vc1zpjNIzW0haYATE2k1XAFAG/d7/TiqKtZoJE4wo8aRgKFaJ4g&#xA;B2Ch1X8MVSiz/wCU51f/ALZmmf8AURf4qnuKuxV2KpF5d/47Hmj/ALacf/dMssVT3FUrsY5mh1SC&#xA;qMfrEyxKu6gSIr0Ne/JyW964qmUciSRrIhqjgMp8Qdxiq7FXYq7FXYq7FXYq7FXYq7FWOfmJrGta&#xA;J5N1XWtHe2W80y3lu/Tu4ZJ45EhjZzHSOW3ZS1B8VTT+U4q81uvz81rTdcu9MvtOsJo9Ltr1ry6W&#xA;eW3MtxbXn1SNPTKXH1VmCNM0bPIfRZZOQFQVU403839Q1byoddiFjplvPqdpZC/uuU1pYwXOm296&#xA;8l0wkg5lJpmgqGjHIrWm+KpTqn/ORE+kxSJLpVrqMkCAtdw3clnFIBHBIJ/SuIGeKCcXVIGLNzZH&#xA;ANByKrJ9K/NQ3X5eal5jkS3n1e0kuYoNKszJJI7m+mstPRoSonU3EkQUfBVjWgH2QqwyX/nI3VbT&#xA;UoBeabax2EekpcapHN9Ztp4NRF8bGeM/BPII4mVpCnoGT0wWoSOJVT2w/PO+vb61VPLyR6fP9TMs&#xA;8l5ILhBdfo1WpALUqzI2sxgD1Ry4tuNsVYzpv/OTuo3+pesuiW8ei280KXwSeSe59A291dXNxERH&#xA;GGEEMCMyGOoPwn7YKqp5p3mPR9f17VtCtPJWmWvmuHRTqCi6gWf99MsF4sE/7i3DRvcXf2llqXR2&#xA;Kr8LMqx7Tfzj0DR7uG00PyNYWyeaZYU02GJP0e01vLK1pyuilrKjKlxFLzJpRXQKjfGwVXwfmH5P&#xA;eaxS38k6DaWEdis4trj0IpIG1FdOV5XYW/G2s+OpOsk3BvU9N/hXiQVXo/5QatpnmDyymv2Plm08&#xA;twSGS0tLe34er6FvM/wyBIYBGBM0jBByG5PUnFWa+vLWn1eTrStY+nj9vpirvXl2/wBHk3r3j2p/&#xA;s++Kr45Hf7UTR7A/Fx712+EtiqS2f/Kc6v8A9szTP+oi/wAVT3FXYqwPV9K88yfmzo+o2ck48qRW&#xA;yreqs/GDmIr0SB4fXXkzSSWxH+jufh2kj4kOqnHl5L7/ABH5ncSxCz/SMYaExsZS/wCjLPcS+pxp&#xA;7cPpxVkmKpfp49LUdRtxFwjLx3CtWvIyrRj7fFGcVRVkW+qRB680UI9djyT4W/EYqrYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYqsEECzvcLGonkVY5JQo5siFiilupCl2IHap8cVX4q7FXYq7FXYq7FXY&#xA;q7FXYq7FWN6Ol+nnbWReTRTSHTdNKNDE0IC+vf0BDSTVPvX6MVZJirsVdiqReXf+Ox5o/wC2nH/3&#xA;TLLFU9xVLoikWv3EdXZ7m3SXepVfSYoQD78wafPFUXa8gJUavwSNRj3Dn1BT2HPj9GKq2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVD3+o2On2zXN7MsEKkDk5pVjsqqOrM&#xA;x2VRuT0xVAG41rUXZLaNtMsabXsoU3Lmv+6oGDLGKdGl+Kuxj74qgND0+Gx846vDG8krHTdNaSaZ&#xA;2kkdzcX9WZm/UNgNgANsVZNirsVdiqReXf8AjseaP+2nH/3TLLFU9xVL5yY9btXeQFJYpIIoaDkH&#xA;qJGev8vGMA+9PHFUVHQXUygAAqkh33LGq1I+SDFVbFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYqsnngt4XnnkWKCJS8sshCoqqKlmY7ADFUq/S2oagE/QsK/V3+1qV0rrFQEbxRfB&#xA;JNyB+FgVQjcMemKq9noVnBc/XZme8v8Ael3cnm6BqgiJaBIhxNCI1Xl+1U74qmOKpFZ/8pzq/wD2&#xA;zNM/6iL/ABVPcVdirsVSLy7/AMdjzR/204/+6ZZYqnuKpfqYKXVjclFMcMtHf9sGakKqvsWkq3yx&#xA;VEvRb2JvhUSI6EkbswKsor7DkaYqr4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;k82vSXMjW+iW/wBemWoe6cmOzjI8ZuLeoeo4xBqEUbj1xVUg0MNcpealO1/dRkNErDhbxMP2ooAS&#xA;obwdyzjpypiqaYq7FXYqkVn/AMpzq/8A2zNM/wCoi/xVPcVdirCdT07zu/5p6ZfW7SHypFahLhVm&#xA;KRLJwuhJ6kXrrzZne341gfps8dCJFUy8vJff4j8zuJYhZ/pGMNCY2Mpf9GWe4l9TjT24fTirJMVS&#xA;7XkQ2aylGdrZ/rMZXorQq0g5f5J48fpxVF3RK+lICQEkWqj9rn+7oflzr9GKq2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2Kpbda5BHefULSN72//AG4oh8EVQSrTy/ZjBp0PxH9lTiqgdDn1&#xA;JK6/ItwhbkunQF1tVFQQslaNcU78wEP++xiqcqoUBVACgUAHQDFXYq7FXYq7FWN6Ol+nnbWReTRT&#xA;SHTdNKNDE0IC+vf0BDSTVPvX6MVSfyd+bVl5m8zT+Xl0e9029tY7mS4e7NuYq2twLcpG8Eswdqmp&#xA;8BuOSkHFWeYq7FUi8u/8djzR/wBtOP8A7plliqe4qhtRWFrKUTuUgoDMygn92CC4NN6MtQfbFVK1&#xA;eW50WJ+RaeS3FSDxb1OG+/7LBvuOKoyN1kjV1+y4DD5EVxVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVQOoazaWbiDi9zeuAY7K3X1JmDEgMRsEQsKc5CqA9WGKoN9O1bVCf0jcGzsHApp9qxSUggG&#xA;k9yp5de0PHwLMMVTW1tbW0t0t7WFLe3jFI4YlCIo60VVAAxVVxV2KuxV2KuxV2KpFZ/8pzq//bM0&#xA;z/qIv8VYD+W0moy+eTqs1na29h5msL3V9PmhSw9WSGS7gMfqfVreKeOQRSRmX1J5ldiPiBWmKvW8&#xA;VdiqReXf+Ox5o/7acf8A3TLLFU9xVZOJGhkEXH1SpCc915U2r7VxVDaWyenPGpDBJ5DzXdSJj64I&#xA;/wBjKMVVrSqxGMqV9JmQAmvwg1Sh/wBUjFVbFXYq7FXYq7FXYq7FXYq7FXYq7FXYqhNQ1Ww05Ea7&#xA;l4GU8YYlDSSyNSvGOJA0kjU3oqnbFUEBrmp8GPLSLI7vEeD3jjwLKZIoR/q82IPVDiqO0/S7DTom&#xA;js4REJGLyvUtJI56vJIxLux/mYk4qisVdirsVdirsVdirsVdiqRWf/Kc6v8A9szTP+oi/wAVRel+&#xA;WPLWk3NxdaVpNnYXV3vdT2tvFDJLvy/eNGqltzXfFUyxV2KpF5d/47Hmj/tpx/8AdMssVT3FXYql&#xA;thH9XvpYfSFvFJGvowggg+gzRF6jxj9LY/wOKoxQEu3FKCZA+3dk+FiR8iuKq2KuxV2KuxV2KuxV&#xA;2KuxV2KuxVRu72zsoDPdzx28AIBllYItWNAKtTcnYYqlv1zWdSEiWMTabbV4rfXSfvm3IYxWzUK/&#xA;5LS9/wBhl6qouw0exs5PXVTNesgjlv5qPcSKN6M9NlrvxWijsBiqNxV2KuxV2KuxV2KuxV2KuxV2&#xA;KpFZ/wDKc6v/ANszTP8AqIv8VT3FXYqw3zDY+f5vzB8tXemyRDylaGb9LQLcNFK7y28yBpo+BEkc&#xA;ben6YVvtk1FKMqqO8vJff4j8zuJYhZ/pGMNCY2Mpf9GWe4l9TjT24fTirJMVdiqWzqsN1DNHzURX&#xA;Bjm5d0uVGyV6qZih9iD22xVF3dEEc/aFqsf8hvhap8BXl9GKq+KuxV2KuxV2KuxV2KuxVbLLFFE8&#xA;srrHFGpaSRiFVVUVJJOwAGKpSdYvr8AaHAkkDg/7lLgkWw3pWJFpJP4inFGHSTFVaz0OCKaK7vJH&#xA;1DUYuXp3lwF5R8xxb0UUKkQK7HgKkfaJxVMsVdirsVdirsVdirsVdirsVdiqyWeGID1HC1oACdyT&#xA;sAB1JPbFVn1hn/uYmb4uLFwYwKdT8Q5EeFAa/jirHtCXVF856z+kZYJJjp2mlfq8bxqqevf0B5vI&#xA;WPvt8u+KsnxV2KuxVIvLv/HY80f9tOP/ALplliqe4q7FUJeQev61sZ+BuISIVABKMhNZVJ7guv3Y&#xA;qqWc4urOOR1HJ14zR9QHHwum/wDKwIxVu0MnohJf7yMlGPXlx6N/slo3t0xVWxV2KuxV2KuxV2Kp&#xA;Q+v/AFoMmhwrqcit6bziQR2sbChIeajkmnaJXIOzceuKrk0FZpjPqs51F6gx27qFtYyDUFINwW2H&#xA;xSF2H7JA2xVNcVdirsVdirsVdirsVdiriQBU7AdTiqgL62fj6LevyFV9L4x/wQ+EdO5xVwe7cjjG&#xA;sSEbmQ8mB/1V2/4fFXfVXcUmmdqoVZUPprU9SvH4x7fF+O+KqkVvBDX0o1TluxUAEnxPjiq/FUis&#xA;/wDlOdX/AO2Zpn/URf4qnuKuxV2KpF5d/wCOx5o/7acf/dMssVT3FXYqpzcw8TLwADcZC/XiwIop&#xA;8S/HFULGRa6i0NAsN6TJEen75R+8TsPiUcx3NHOKq0gMNysoA9OYhJt6UbojU6b/AGT3+z4YqiMV&#xA;dirsVdiqU3HmK1NzJY6ch1HUIwTJDCRwjO9BNMfgjqR0+1/knFVh0S51FEbXJhKtatptuWW061Cy&#xA;E0eenQ86I3++8VTeOOOONY41CRoAqIoAAAFAAB0AxVdirsVdirsVdirsVWS3EMVPUcKTUqCdzTrQ&#xA;dTiqn9ZkdawQsx2oZKxLuK78hz6f5P8AGirjHduTWVY1J2CLVgKfzNUdd/s/1xV31K3NfUUy1Iak&#xA;pMgBApUBiQPoxVXxV2KuxV2KuxVIrP8A5TnV/wDtmaZ/1EX+Kp7irsVdiqReXf8AjseaP+2nH/3T&#xA;LLFU9xV2KrZI45Y2jkUMjChBxVQmthe2Sx3CmF3COQpBaKRaMpVqEVRhsaUxVDR31D9Q1ULHNJ+7&#xA;SXdYbjlsPTJOzN/vsnl1pyA5Yqi4JGRhbzNWQD4HNKyKO+3cbctsVXz3Nvbx+rcSpDGDQvIwVan3&#xA;NMVSy78wqir9StZrySTaEhWjjY9RRmBYqR+2qlfEgb4qo/obUtUjf9NXDRwM3w2NoxjQxiu0zCrt&#xA;yBoyh+OFU6hhihiSKJAkaKFRRsAFFAPoAwKvxV2KuxV2KtMyopZiFVRVmOwAHc4qom8iJKxBpmBo&#xA;RGKitK0LGiA08Tirle8eh4LCtWrzPNttl+FaDfr9r+xVwtWahlmdzQghT6a1bw4UO3QVJ+/fFVSK&#xA;3ghBEMaxg9Qihf1YqvxV2KuxV2KuxV2KuxV2KpFZ/wDKc6v/ANszTP8AqIv8VT3FXYqwzVbDzNL+&#xA;ZukXdumoLoMFuTd3EdzF9SaThcL6L2hmiepMiO0pjlNVRV4DmxVR/l5L7/EfmdxLELP9IxhoTGxl&#xA;L/oyz3Evqcae3D6cVZJirsVdiqhAEjmlgRZKbTFmqUrKzVVWPgVJI7VHbFVWSOOWNo5FDxuKMjAE&#xA;EHsQcVS280zRoLfkyvbRqwKLbPLHRzsCkcJFXPstTiqGtrU280cxtIbeDhverF/pDc1p8fQwlf2m&#xA;bkD344VTaytrSCEragcGPJ35F2ZiB8TOxZmNANycCq+KuxVa8kaAF2CgmgLECp8N8VUhe27KGiLT&#xA;KwqjRKzqfk4HH8cVd6t032IAvwk/vHAPLsKJz28d8VbMM7giSYgEAERgIPfc8mFfY/jvirltLYMX&#xA;KBnNDyclyONKULVIpSvz3xVWxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksb0dL9PO2si8mimkOm6aUaG&#xA;JoQF9e/oCGkmqfev0YqyTFXYq7FUi8u/8djzR/204/8AumWWKp7irsVdiqhdmRRHJHVikigoGChl&#xA;c8DWu23LkB3Ipiqgbi7vIW+pq1r8XET3EZBK0NWSIlWrXYcwPHcdVVa1sYbd3kBaWeT+8nkPJyOt&#xA;B2Vf8lQB7YqiMVUntbZ2Z2jX1GFDIBR6f6w3xVo2sR/ak7f7skHT/ZYq42cBNW5OKk8Wd2U18VJK&#xA;/hiq+O3gi3jjVDv9lQOvXpiq/FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkVn/AMpzq/8A&#xA;2zNM/wCoi/xVPcVdirsVSLy7/wAdjzR/204/+6ZZYqnuKuZgoLMQFAqSegGKoGPUfriSDTh6lB+7&#xA;u3B+rliafCQQZKdfh27cgcVVE0+JnhnuqXF1CCEmYUCkmpKJuF8K9adScVXRAWzCBY+Fqqj05C9a&#xA;MzEenRtwNxxpt22oKqojFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkV&#xA;n/ynOr/9szTP+oi/xVPcVdirsVSLy7/x2PNH/bTj/wC6ZZYqmct/UcbNBdyhzG4R1CRstOXqtvxp&#xA;XoAW9sVa+oGV5TeyC5ic/BbMiiJVDBl+E8izbDdj16BcVReKuxVbLDFNG0UyLJG2zI4DKfmDiqiz&#xA;XMHqOwNxGWHpxxqA6KftciWAYDrsK08TiqrHcQSSSRRyI8kJAlRWBZCRUBgOlR44qvxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpFZ/8pzq//bM0z/qIv8VT3FXYqwvVNN84yfmX&#xA;pl9avP8A4djiiFwVnC2yhYr4XCS23qqZJJJZbNkf0zxCNuu4dVr9Han/AIt1mHS/M2mhrt0vbzQZ&#xA;7T6zPGGtIbQNJwu4X9NhAGWqAb98VTaLTvOkUaxRappUcaAKiLpc6qAOgAF/tiq76n55/wCrvpn/&#xA;AHDLj/svxV31Pzz/ANXfTP8AuGXH/Zfirvqfnn/q76Z/3DLj/svxVC6tYecJNKvEute0u1tnglWe&#xA;5/R86elGUIaTm1/ReI3qemKrtPl806lZxX2neYdGvbKYEw3VvYTSxOASCVdNQKncU2OKqk+l+cri&#xA;P059S0mWOoPB9LnYVHQ0N/irTaX54JlZNb0+OSUU5jTrluNBQFVe/ZB/wOKtjTvPodG/TunEKvFk&#xA;/RktGP8AM3+m1r8iBiraWHn1UVTrWmOR1dtLnqfnxv1FfoxVC3Vn5ui1GzuJ/MOkwTSCS0tIX0+Z&#xA;RLJKFmKqp1AF3CW7EAfs8sVRn1Pz3X/jsaXT/tmXHX/uIYq76n572/3MaX7/AO4y4/7yGKu+pefK&#xA;H/cxpde3+4y4/wC8hirvqfnvf/cvpdO3+4y4/wC8hirvqfnvb/cxpfv/ALjLj/vIYql2jjzK7Xlj&#xA;Y+Z9GvLizuJDexJYyySQPPI03pyKuoVSnIhQ3YYqmP1Pz3v/ALmNL9v9xlx/3kMVd9T891/47Gl0&#xA;7/7jLj/vIYq76l57oP8Acxpde/8AuMuP+8hirvqXnvf/AHMaX7f7jLj/ALyGKoDXYvNFtpr3Op+Z&#xA;dI06wt5IZpbuWwlhjT0pkdQ8j6gFCsyhTXxpiqNig87TRRyxa3pMkUih0kTTbgqysKgqRqFKEYqu&#xA;+pee/wDq8aXX/tmXHT/uIYq76n573/3MaX7f7jLj/vIYq76n572/3MaX7/7jLj/vIYq76l57oP8A&#xA;cxpde/8AuMuOn/cQxVL9Png0jXr7UPMfmTS3vL4WWlRQRILEJLCZp44is11cs80q3lQooeNNjXFW&#xA;XYq7FXYqxbT/ACObTz1e+aPr3qRXSzenY+mQySXMVjDKzTeoQ68dLj4LwFCW3Pw8VWU4q7FXYq7F&#xA;Us8z6Veav5fv9Ls7mG0nvYWgFxcWyXsSq+z87eRkSQFKjixp4gjbFVLyloU2haDBptxPHdXCPNLc&#xA;XUUckQllnmeaSQrLNcvydpCW/eHfpQUAVTjFXYq7FXYqxTzJ5CXWvNvl7zJ+lbm1m0CVnjskWJ7e&#xA;RZEdJBRk5q8nNQzcvsigAajBVleKuxV2KuxV2KsT8meRG8tatrl9+kXvI9YnaaKB1kHoh7m5umXk&#xA;8soPx3jD92qLtUrzLMyrLMVdirsVdiqQ+ePK3+KPLc+jC5+qNLLbTpOVdgGtbiO4UERSW8tGMXEl&#xA;JUYV2YHFUd5c0g6N5f0zSDMbk6daQWn1gqI/U9CNY+fBdl5ca07YqmGKuxV2KuxV5zr35PQ6lqep&#xA;3trqKWKavcTPdwLbcgILu2tYLlYyssfGd2shIs9DxLN8J64q9GxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxVzV4mnWm3+e+KvCbLT/wDnIbSrOGLTbWe4kaeL6zJe39vI7MqAO7/WptSHoFq8/QML&#xA;NsUii3DKo26i/wCck7bSohDJ+kLk28E1xxfS4Ln6xcKnrQRs0TW4Fq8DEMyNzSWlSygqqmvlFfzz&#xA;XzLpDeZWLaVK14+rxxfo4W8QJmW2jRkH1pwAkLLQV+I8224hV6pirsVdirsVdirsVdirsVdirsVd&#xA;irsVdir/AP/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:4743933F51D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:549257A855D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -195.737 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 195.737 li
272.701 195.737 li
272.701 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
267.838 174.324 mo
264.688 174.324 li
28.188 174.324 mo
31.3384 174.324 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B854D00D> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWGE+Helvetica /Helvetica findfont ct_VMDictPut/DVPWGE+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]DVPWGE+Helvetica nfDVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf18.146 176.662 mo( )sh20.0913 176.662 mo(0)sh267.838 140.173 mo
264.688 140.173 li
28.188 140.173 mo
31.3384 140.173 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGE+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGE+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/DVPWGE+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two 205{/.notdef}rp]DVPWGE+Helvetica nfDVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf18.146 142.513 mo( )sh20.0913 142.513 mo(2)sh267.838 106.074 mo
264.688 106.074 li
28.188 106.074 mo
31.3384 106.074 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGE+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGE+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/DVPWGE+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four 203{/.notdef}rp]DVPWGE+Helvetica nfDVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf18.146 108.412 mo( )sh20.0913 108.412 mo(4)sh267.838 71.9238 mo
264.688 71.9238 li
28.188 71.9238 mo
31.3384 71.9238 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGE+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGE+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/DVPWGE+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]DVPWGE+Helvetica nfDVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf18.146 74.2554 mo( )sh20.0913 74.2554 mo(6)sh267.838 37.8237 mo
264.688 37.8237 li
28.188 37.8237 mo
31.3384 37.8237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGE+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGE+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/DVPWGE+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWGE+Helvetica nfDVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf18.146 40.1616 mo( )sh20.0913 40.1616 mo(8)sh267.838 3.67383 mo
264.688 3.67383 li
28.188 3.67383 mo
31.3384 3.67383 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGE+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGE+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/DVPWGE+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWGE+Helvetica nfDVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf14.2554 6.01318 mo( 10)[1.9458 3.89209 0 ]xsh28.188 3.67383 mo
28.188 6.82373 li
28.188 174.324 mo
28.188 171.173 li
@
DVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf25.271 183.654 mo( )sh27.2085 183.654 mo(0)sh76.1382 3.67383 mo
76.1382 6.82373 li
76.1382 174.324 mo
76.1382 171.173 li
@
DVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf73.2163 183.654 mo( )sh75.1616 183.654 mo(2)sh124.038 3.67383 mo
124.038 6.82373 li
124.038 174.324 mo
124.038 171.173 li
@
DVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf121.123 183.654 mo( )sh123.06 183.654 mo(4)sh171.988 3.67383 mo
171.988 6.82373 li
171.988 174.324 mo
171.988 171.173 li
@
DVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf169.068 183.654 mo( )sh171.005 183.654 mo(6)sh219.889 3.67383 mo
219.889 6.82373 li
219.889 174.324 mo
219.889 171.173 li
@
DVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf216.966 183.654 mo( )sh218.912 183.654 mo(8)sh267.838 3.67383 mo
267.838 6.82373 li
267.838 174.324 mo
267.838 171.173 li
@
DVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf262.966 183.654 mo( 10)[1.94629 3.8916 0 ]xsh28.188 3.67383 mo
28.188 174.324 li
267.838 174.324 li
267.838 3.67383 li
28.188 3.67383 li
28.188 3.67383 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGE+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B6079F22E07CDD698967474547499A046CA6108DBC03A99D050F43EC0939593DCBE2D36ADBBAFB7F4B6F674E545889C28BDF2C528A201492F729C5289E096795ACB3E8B74F794BD95CD345203B50927FB3BCDBBCBA8BBFF702C4> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/s <1C60D8A8C9B7A73DF2FC7D734CFF3CEE44DEE08B4814311F759A12C668E2414B1F185B71CDFB81A4EFE4B67531A5BC3DCC468E7336CC99F93A0F8C9CAAC21479B9DF30E1F20CC55E079066616501132E6501EACD2121153832E7EB63F4284AC03D21E5D5BD534A816A07833E9E45AAF0AF784FB128B27EB090C038A83361862615D53FB49FC431C156AA9A7FD4E2EF50395549EA0CB64112DC> |-/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B5837088353D9095E679DCF29A> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGE+Helvetica /Encoding getdup 67 /C putdup 111 /o putdup 115 /s putdup 116 /t putpop%ADOEndSubsetFont
/DVPWGE+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 10{/.notdef}rp /C 43{/.notdef}rp /o 3{/.notdef}rp /s /t 139{/.notdef}rp]DVPWGE+Helvetica nfDVPWGE+Helvetica*1 [0 -7 -7 0 0 0 ]msf6.01318 96.2163 mo(Cost)[-5.05371 -3.89209 -3.5 0 ]ysh3.68799 89.0234 mo
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGE+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B7D8BE41A64DA557BA3801C50A6D0B90DD03689D1958230FDD078C54AD8D0DA7DD6F0C9EC4C6354485AE4B93FC66781C> |-/S <1C60D8A8C9B64EDF7B9A268599F9CD8C4143A0D599CA838C6F6EFB82E6187B34759773BB4D8C1A41E190DEFABB354DFB531C99308891FC3B7E87957393F9CD35CA8C07371CAABAAF32C24CDAE22C826F234EC2B15BA06DFB54FFCB46EDDF1D277ED530855C8BB0880980568C5F76DE693CEE6004D84A502F3C6B0F55A55095F8FAF71FCF3869AA0D55975A515D287103786F2BEFCA3E30833F771676F4E4B0C078830B99B254F2B4> |-/d <1C60D8A8C9B7EF3272B02106CA005D490B9AADA17924914F2C970DE0CC49CEA15AE0636239F8F8972696F7F5932B166AF2D78F67482CC14B1A6381CFD7128F8DE76CDFCE15FA9EB575CCF12B456F3EB76367E9886C5281DF7AB34F68E50A05C60D95A0109B0EE1AC212C660640ECA54376F807195B77C533845305049FE68DE5BA8B1CD6F2147B0BF4B5B691FCBB3989ADBCB5DBED> |-/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C2021D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495ACA0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCDBE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553A431EECECF30F5581F5F0240E470E520EB9771> |-/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D72A7354004D800853CB28271AB7834CF7A2CB132BAFF26EF4E9D89B> |-/r <1C60D8A8C9B81F2C150546EE4CBAAF688B47B2BE559294D5CB0899F2E804995909AC00E005B47DD0AC10879B5BC7D5032F4A9752992A333ADEB05A77287D04AF74FB420D308AD8> |-/v <1C60D8A8C9B7A73DC53FF2C839B947F31C11DB63CB8CC0B0E0518E01B2A8090086BA063BC631F5BCB6255A1F02FF856D> |-/x <1C60D8A8C9B7A73DEE9439F61CF83FD6F0AADDB8373458EFEDE4BF6C46155F8370F02E9CE5FFD24DBE7D153354FABD4F844978ABB054761731A2B93E507FE62552012BB1EB5E1E3EE678332D9E> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGE+Helvetica /Encoding getdup 70 /F putdup 83 /S putdup 100 /d putdup 101 /e putdup 105 /i putdup 114 /r putdup 118 /v putdup 120 /x putpop%ADOEndSubsetFont
/DVPWGE+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 10{/.notdef}rp /C 2{/.notdef}rp /F 12{/.notdef}rp /S 16{/.notdef}rp /d /e 3{/.notdef}rp /i 5{/.notdef}rp /o 2{/.notdef}rp /r /s /t /.notdef /v /.notdef /x 135{/.notdef}rp]DVPWGE+Helvetica nfDVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf135.927 194.162 mo(Servers)[4.66895 3.8916 2.54004 3.3252 3.89258 2.33105 0 ]xsh201.841 12.6616 mo(Fixed Cost)[4.27734 1.55371 3.29102 3.89258 3.8916 1.94629 5.05371 3.8916 3.5 0 ]xsh0.25 lw
[4 2 ] 0 dsh
252.238 51.5737 mo
252.488 51.4736 li
252.738 51.3237 li
252.988 51.2236 li
253.188 51.0737 li
253.438 50.9238 li
253.688 50.8237 li
253.938 50.6738 li
254.188 50.5234 li
254.389 50.4238 li
254.639 50.2734 li
254.889 50.1738 li
255.139 50.0234 li
255.389 49.8735 li
255.588 49.7734 li
255.838 49.6235 li
256.088 49.4736 li
256.338 49.3735 li
256.588 49.2236 li
256.789 49.1235 li
257.039 48.9736 li
257.289 48.8237 li
257.539 48.7236 li
257.738 48.5737 li
257.988 48.4238 li
258.238 48.3237 li
258.488 48.1738 li
258.738 48.0234 li
258.938 47.9233 li
259.188 47.7734 li
259.438 47.6733 li
259.688 47.5234 li
259.938 47.3735 li
260.139 47.2734 li
260.389 47.1235 li
260.639 46.9736 li
260.889 46.8735 li
261.139 46.7236 li
261.338 46.6235 li
261.588 46.4736 li
261.838 46.3237 li
262.088 46.2236 li
262.338 46.0737 li
262.539 45.9233 li
262.789 45.8237 li
263.039 45.6733 li
263.289 45.5737 li
263.539 45.4233 li
263.738 45.2734 li
263.988 45.1733 li
264.238 45.0234 li
264.488 44.8735 li
264.738 44.7734 li
264.938 44.6235 li
265.188 44.5234 li
265.438 44.3735 li
265.688 44.2236 li
265.938 44.1235 li
266.139 43.9736 li
266.389 43.8232 li
266.639 43.7236 li
266.889 43.5732 li
267.139 43.4233 li
267.338 43.3232 li
267.588 43.1733 li
267.838 43.0732 li
227.289 65.2734 mo
227.539 65.1235 li
227.789 64.9736 li
228.039 64.8735 li
228.238 64.7236 li
228.488 64.6235 li
228.738 64.4736 li
228.988 64.3237 li
229.238 64.2236 li
229.438 64.0737 li
229.688 63.9238 li
229.938 63.8237 li
230.188 63.6738 li
230.438 63.5737 li
230.639 63.4238 li
230.889 63.2734 li
231.139 63.1738 li
231.389 63.0234 li
231.639 62.8735 li
231.838 62.7734 li
232.088 62.6235 li
232.338 62.5234 li
232.588 62.3735 li
232.838 62.2236 li
233.039 62.1235 li
233.289 61.9736 li
233.539 61.8237 li
233.789 61.7236 li
234.039 61.5737 li
234.238 61.4736 li
234.488 61.3237 li
234.738 61.1733 li
234.988 61.0737 li
235.188 60.9233 li
235.438 60.7734 li
235.688 60.6733 li
235.938 60.5234 li
236.188 60.4233 li
236.389 60.2734 li
236.639 60.1235 li
236.889 60.0234 li
237.139 59.8735 li
237.389 59.7236 li
237.588 59.6235 li
237.838 59.4736 li
238.088 59.3237 li
238.338 59.2236 li
238.588 59.0737 li
238.789 58.9736 li
239.039 58.8237 li
239.289 58.6733 li
239.539 58.5737 li
239.789 58.4233 li
239.988 58.2734 li
240.238 58.1733 li
240.488 58.0234 li
240.738 57.9233 li
240.988 57.7734 li
241.188 57.6235 li
241.438 57.5234 li
241.688 57.3735 li
241.938 57.2236 li
242.188 57.1235 li
242.389 56.9736 li
242.639 56.8735 li
242.889 56.7236 li
243.139 56.5732 li
243.389 56.4736 li
243.588 56.3232 li
243.838 56.1733 li
244.088 56.0732 li
244.338 55.9233 li
244.588 55.8232 li
244.789 55.6733 li
245.039 55.5234 li
245.289 55.4233 li
245.539 55.2734 li
245.789 55.1235 li
245.988 55.0234 li
246.238 54.8735 li
246.488 54.7734 li
246.738 54.6235 li
246.988 54.4736 li
247.188 54.3735 li
247.438 54.2236 li
247.688 54.0732 li
247.938 53.9736 li
248.188 53.8232 li
248.389 53.6733 li
248.639 53.5732 li
248.889 53.4233 li
249.139 53.3232 li
249.389 53.1733 li
249.588 53.0234 li
249.838 52.9233 li
250.088 52.7734 li
250.338 52.6235 li
250.588 52.5234 li
250.789 52.3735 li
251.039 52.2734 li
251.289 52.1235 li
251.539 51.9736 li
251.789 51.8735 li
251.988 51.7236 li
252.238 51.5732 li
202.338 78.9238 mo
202.588 78.7734 li
202.838 78.6738 li
203.088 78.5234 li
203.289 78.4238 li
203.539 78.2734 li
203.789 78.1235 li
204.039 78.0234 li
204.289 77.8735 li
204.488 77.7236 li
204.738 77.6235 li
204.988 77.4736 li
205.238 77.3735 li
205.488 77.2236 li
205.688 77.0737 li
205.938 76.9736 li
206.188 76.8237 li
206.438 76.6738 li
206.688 76.5737 li
206.889 76.4238 li
207.139 76.3237 li
207.389 76.1738 li
207.639 76.0234 li
207.889 75.9238 li
208.088 75.7734 li
208.338 75.6235 li
208.588 75.5234 li
208.838 75.3735 li
209.088 75.2236 li
209.289 75.1235 li
209.539 74.9736 li
209.789 74.8735 li
210.039 74.7236 li
210.289 74.5737 li
210.488 74.4736 li
210.738 74.3237 li
210.988 74.1733 li
211.238 74.0737 li
211.488 73.9233 li
211.688 73.8237 li
211.938 73.6733 li
212.188 73.5234 li
212.438 73.4233 li
212.688 73.2734 li
212.889 73.1235 li
213.139 73.0234 li
213.389 72.8735 li
213.639 72.7734 li
213.838 72.6235 li
214.088 72.4736 li
214.338 72.3735 li
214.588 72.2236 li
214.838 72.0737 li
215.039 71.9736 li
215.289 71.8232 li
215.539 71.7236 li
215.789 71.5732 li
216.039 71.4233 li
216.238 71.3232 li
216.488 71.1733 li
216.738 71.0234 li
216.988 70.9233 li
217.238 70.7734 li
217.438 70.6235 li
217.688 70.5234 li
217.938 70.3735 li
218.188 70.2734 li
218.438 70.1235 li
218.639 69.9736 li
218.889 69.8735 li
219.139 69.7236 li
219.389 69.5732 li
219.639 69.4736 li
219.838 69.3232 li
220.088 69.2236 li
220.338 69.0732 li
220.588 68.9233 li
220.838 68.8232 li
221.039 68.6733 li
221.289 68.5234 li
221.539 68.4233 li
221.789 68.2734 li
222.039 68.1733 li
222.238 68.0234 li
222.488 67.8735 li
222.738 67.7734 li
222.988 67.6235 li
223.238 67.4736 li
223.438 67.3735 li
223.688 67.2236 li
223.938 67.1235 li
224.188 66.9736 li
224.438 66.8232 li
224.639 66.7236 li
224.889 66.5732 li
225.139 66.4233 li
225.389 66.3232 li
225.639 66.1733 li
225.838 66.0732 li
226.088 65.9233 li
226.338 65.7734 li
226.588 65.6733 li
226.838 65.5234 li
227.039 65.3735 li
227.289 65.2734 li
177.389 92.5737 mo
177.639 92.4736 li
177.889 92.3237 li
178.139 92.1738 li
178.338 92.0737 li
178.588 91.9238 li
178.838 91.8237 li
179.088 91.6738 li
179.338 91.5234 li
179.539 91.4238 li
179.789 91.2734 li
180.039 91.1235 li
180.289 91.0234 li
180.539 90.8735 li
180.738 90.7734 li
180.988 90.6235 li
181.238 90.4736 li
181.488 90.3735 li
181.738 90.2236 li
181.938 90.0737 li
182.188 89.9736 li
182.438 89.8237 li
182.688 89.7236 li
182.938 89.5737 li
183.139 89.4238 li
183.389 89.3237 li
183.639 89.1733 li
183.889 89.0234 li
184.139 88.9233 li
184.338 88.7734 li
184.588 88.6733 li
184.838 88.5234 li
185.088 88.3735 li
185.338 88.2734 li
185.539 88.1235 li
185.789 87.9736 li
186.039 87.8735 li
186.289 87.7236 li
186.539 87.6235 li
186.738 87.4736 li
186.988 87.3237 li
187.238 87.2236 li
187.488 87.0737 li
187.738 86.9233 li
187.938 86.8237 li
188.188 86.6733 li
188.438 86.5234 li
188.688 86.4233 li
188.938 86.2734 li
189.139 86.1733 li
189.389 86.0234 li
189.639 85.8735 li
189.889 85.7734 li
190.139 85.6235 li
190.338 85.4736 li
190.588 85.3735 li
190.838 85.2236 li
191.088 85.1235 li
191.338 84.9736 li
191.539 84.8232 li
191.789 84.7236 li
192.039 84.5732 li
192.289 84.4233 li
192.488 84.3232 li
192.738 84.1733 li
192.988 84.0732 li
193.238 83.9233 li
193.488 83.7734 li
193.688 83.6733 li
193.938 83.5234 li
194.188 83.3735 li
194.438 83.2734 li
194.688 83.1235 li
194.889 83.0234 li
195.139 82.8735 li
195.389 82.7236 li
195.639 82.6235 li
195.889 82.4736 li
196.088 82.3232 li
196.338 82.2236 li
196.588 82.0732 li
196.838 81.9736 li
197.088 81.8232 li
197.289 81.6733 li
197.539 81.5732 li
197.789 81.4233 li
198.039 81.2734 li
198.289 81.1733 li
198.488 81.0234 li
198.738 80.8735 li
198.988 80.7734 li
199.238 80.6235 li
199.488 80.5234 li
199.688 80.3735 li
199.938 80.2236 li
200.188 80.1235 li
200.438 79.9736 li
200.688 79.8232 li
200.889 79.7236 li
201.139 79.5732 li
201.389 79.4736 li
201.639 79.3232 li
201.889 79.1733 li
202.088 79.0732 li
202.338 78.9233 li
152.438 106.273 mo
152.688 106.125 li
152.938 105.974 li
153.188 105.875 li
153.389 105.724 li
153.639 105.625 li
153.889 105.474 li
154.139 105.324 li
154.389 105.224 li
154.588 105.074 li
154.838 104.923 li
155.088 104.824 li
155.338 104.673 li
155.588 104.574 li
155.789 104.423 li
156.039 104.273 li
156.289 104.173 li
156.539 104.023 li
156.789 103.875 li
156.988 103.773 li
157.238 103.625 li
157.488 103.523 li
157.738 103.375 li
157.988 103.224 li
158.188 103.125 li
158.438 102.974 li
158.688 102.824 li
158.938 102.724 li
159.188 102.574 li
159.389 102.423 li
159.639 102.324 li
159.889 102.173 li
160.139 102.074 li
160.389 101.923 li
160.588 101.773 li
160.838 101.673 li
161.088 101.523 li
161.338 101.375 li
161.588 101.273 li
161.789 101.125 li
162.039 101.023 li
162.289 100.875 li
162.539 100.724 li
162.789 100.625 li
162.988 100.474 li
163.238 100.324 li
163.488 100.224 li
163.738 100.074 li
163.988 99.9741 li
164.188 99.8237 li
164.438 99.6733 li
164.688 99.5737 li
164.938 99.4233 li
165.188 99.2729 li
165.389 99.1733 li
165.639 99.0229 li
165.889 98.9238 li
166.139 98.7734 li
166.389 98.624 li
166.588 98.5234 li
166.838 98.374 li
167.088 98.2236 li
167.338 98.124 li
167.588 97.9736 li
167.789 97.8242 li
168.039 97.7236 li
168.289 97.5742 li
168.539 97.4736 li
168.789 97.3242 li
168.988 97.1738 li
169.238 97.0737 li
169.488 96.9238 li
169.738 96.7739 li
169.938 96.6738 li
170.188 96.5239 li
170.438 96.4238 li
170.688 96.2739 li
170.938 96.124 li
171.139 96.0239 li
171.389 95.874 li
171.639 95.7236 li
171.889 95.624 li
172.139 95.4736 li
172.338 95.374 li
172.588 95.2236 li
172.838 95.0737 li
173.088 94.9736 li
173.338 94.8237 li
173.537 94.6738 li
173.787 94.5737 li
174.037 94.4238 li
174.287 94.3237 li
174.537 94.1738 li
174.738 94.0239 li
174.988 93.9238 li
175.238 93.7739 li
175.488 93.624 li
175.738 93.5239 li
175.938 93.374 li
176.188 93.2739 li
176.438 93.124 li
176.688 92.9736 li
176.938 92.874 li
177.139 92.7236 li
177.389 92.5737 li
127.488 119.923 mo
127.738 119.773 li
127.988 119.673 li
128.238 119.523 li
128.438 119.375 li
128.688 119.273 li
128.938 119.125 li
129.188 119.023 li
129.438 118.875 li
129.638 118.724 li
129.888 118.625 li
130.138 118.474 li
130.388 118.324 li
130.638 118.224 li
130.838 118.074 li
131.088 117.974 li
131.338 117.824 li
131.588 117.673 li
131.838 117.574 li
132.038 117.423 li
132.288 117.273 li
132.538 117.173 li
132.788 117.023 li
133.038 116.923 li
133.238 116.773 li
133.488 116.625 li
133.738 116.523 li
133.988 116.375 li
134.238 116.224 li
134.438 116.125 li
134.688 115.974 li
134.938 115.875 li
135.188 115.724 li
135.438 115.574 li
135.638 115.474 li
135.888 115.324 li
136.138 115.173 li
136.388 115.074 li
136.638 114.923 li
136.838 114.824 li
137.088 114.673 li
137.338 114.523 li
137.588 114.423 li
137.838 114.273 li
138.038 114.125 li
138.288 114.023 li
138.538 113.875 li
138.788 113.724 li
139.039 113.625 li
139.238 113.474 li
139.488 113.375 li
139.738 113.224 li
139.988 113.074 li
140.238 112.974 li
140.438 112.824 li
140.688 112.673 li
140.938 112.574 li
141.188 112.423 li
141.438 112.324 li
141.639 112.173 li
141.889 112.023 li
142.139 111.923 li
142.389 111.773 li
142.639 111.625 li
142.838 111.523 li
143.088 111.375 li
143.338 111.273 li
143.588 111.125 li
143.838 110.974 li
144.039 110.875 li
144.289 110.724 li
144.539 110.574 li
144.789 110.474 li
145.039 110.324 li
145.238 110.224 li
145.488 110.074 li
145.738 109.923 li
145.988 109.824 li
146.238 109.673 li
146.438 109.523 li
146.688 109.423 li
146.938 109.273 li
147.188 109.173 li
147.438 109.023 li
147.639 108.875 li
147.889 108.775 li
148.139 108.625 li
148.389 108.474 li
148.588 108.375 li
148.838 108.224 li
149.088 108.074 li
149.338 107.974 li
149.588 107.824 li
149.787 107.724 li
150.037 107.574 li
150.287 107.423 li
150.537 107.324 li
150.787 107.173 li
150.988 107.025 li
151.238 106.923 li
151.488 106.775 li
151.738 106.673 li
151.988 106.525 li
152.188 106.375 li
152.438 106.275 li
102.538 133.574 mo
102.788 133.474 li
103.038 133.324 li
103.288 133.173 li
103.538 133.074 li
103.738 132.923 li
103.988 132.824 li
104.238 132.673 li
104.488 132.523 li
104.688 132.423 li
104.938 132.273 li
105.188 132.125 li
105.438 132.023 li
105.688 131.875 li
105.888 131.773 li
106.138 131.625 li
106.388 131.474 li
106.638 131.375 li
106.888 131.224 li
107.088 131.074 li
107.338 130.974 li
107.588 130.824 li
107.838 130.673 li
108.088 130.574 li
108.288 130.423 li
108.538 130.324 li
108.788 130.173 li
109.038 130.023 li
109.288 129.923 li
109.488 129.773 li
109.738 129.625 li
109.988 129.523 li
110.238 129.375 li
110.488 129.273 li
110.688 129.125 li
110.938 128.974 li
111.188 128.875 li
111.438 128.724 li
111.688 128.574 li
111.888 128.474 li
112.138 128.324 li
112.388 128.224 li
112.638 128.074 li
112.888 127.923 li
113.088 127.824 li
113.338 127.673 li
113.588 127.523 li
113.838 127.423 li
114.088 127.273 li
114.289 127.173 li
114.539 127.023 li
114.789 126.875 li
115.039 126.773 li
115.289 126.625 li
115.488 126.474 li
115.738 126.375 li
115.988 126.224 li
116.238 126.125 li
116.488 125.974 li
116.688 125.824 li
116.938 125.724 li
117.188 125.574 li
117.438 125.423 li
117.688 125.324 li
117.888 125.173 li
118.138 125.023 li
118.388 124.923 li
118.638 124.773 li
118.888 124.673 li
119.088 124.523 li
119.338 124.375 li
119.588 124.273 li
119.838 124.125 li
120.088 123.974 li
120.289 123.875 li
120.539 123.724 li
120.789 123.625 li
121.039 123.474 li
121.289 123.324 li
121.488 123.224 li
121.738 123.074 li
121.988 122.923 li
122.238 122.824 li
122.488 122.673 li
122.688 122.574 li
122.938 122.423 li
123.188 122.275 li
123.438 122.173 li
123.688 122.025 li
123.888 121.875 li
124.139 121.775 li
124.389 121.625 li
124.639 121.525 li
124.889 121.375 li
125.088 121.224 li
125.338 121.125 li
125.588 120.974 li
125.838 120.824 li
126.088 120.724 li
126.289 120.574 li
126.539 120.474 li
126.789 120.324 li
127.039 120.173 li
127.238 120.074 li
127.488 119.923 li
77.5884 147.273 mo
77.8384 147.125 li
78.0884 146.974 li
78.3384 146.875 li
78.5884 146.724 li
78.7881 146.574 li
79.0381 146.474 li
79.2881 146.324 li
79.5381 146.224 li
79.7881 146.074 li
79.9883 145.923 li
80.2383 145.824 li
80.4883 145.673 li
80.7383 145.523 li
80.9883 145.423 li
81.188 145.273 li
81.438 145.173 li
81.6885 145.023 li
81.9385 144.875 li
82.1885 144.773 li
82.3882 144.625 li
82.6382 144.474 li
82.8882 144.375 li
83.1382 144.224 li
83.3384 144.125 li
83.5884 143.974 li
83.8384 143.824 li
84.0884 143.724 li
84.3384 143.574 li
84.5381 143.423 li
84.7881 143.324 li
85.0381 143.173 li
85.2881 143.074 li
85.5381 142.923 li
85.7383 142.773 li
85.9883 142.673 li
86.2383 142.523 li
86.4883 142.375 li
86.7383 142.273 li
86.9385 142.125 li
87.1885 142.023 li
87.4385 141.875 li
87.6885 141.724 li
87.9385 141.625 li
88.1382 141.474 li
88.3882 141.324 li
88.6382 141.224 li
88.8882 141.074 li
89.1382 140.923 li
89.3384 140.824 li
89.5884 140.673 li
89.8384 140.574 li
90.0884 140.423 li
90.3384 140.273 li
90.5386 140.173 li
90.7886 140.023 li
91.0386 139.875 li
91.2886 139.773 li
91.5386 139.625 li
91.7383 139.523 li
91.9883 139.375 li
92.2383 139.224 li
92.4883 139.125 li
92.7383 138.974 li
92.9385 138.824 li
93.1885 138.724 li
93.4385 138.574 li
93.6885 138.474 li
93.9385 138.324 li
94.1382 138.173 li
94.3882 138.074 li
94.6382 137.923 li
94.8882 137.773 li
95.1382 137.673 li
95.3384 137.523 li
95.5884 137.423 li
95.8384 137.273 li
96.0884 137.125 li
96.3384 137.023 li
96.5386 136.875 li
96.7886 136.724 li
97.0386 136.625 li
97.2886 136.474 li
97.5386 136.375 li
97.7383 136.224 li
97.9883 136.074 li
98.2383 135.974 li
98.4883 135.824 li
98.7383 135.673 li
98.9385 135.574 li
99.1885 135.423 li
99.4385 135.275 li
99.6885 135.173 li
99.9385 135.025 li
100.139 134.923 li
100.389 134.775 li
100.639 134.625 li
100.889 134.525 li
101.139 134.375 li
101.338 134.224 li
101.588 134.125 li
101.838 133.974 li
102.088 133.875 li
102.338 133.724 li
102.539 133.574 li
52.6382 160.923 mo
52.8882 160.773 li
53.1382 160.673 li
53.3882 160.523 li
53.6382 160.375 li
53.8384 160.273 li
54.0884 160.125 li
54.3384 160.023 li
54.5884 159.875 li
54.8384 159.724 li
55.0381 159.625 li
55.2881 159.474 li
55.5381 159.324 li
55.7881 159.224 li
56.0381 159.074 li
56.2383 158.974 li
56.4883 158.824 li
56.7383 158.673 li
56.9883 158.574 li
57.2383 158.423 li
57.438 158.273 li
57.688 158.173 li
57.9385 158.023 li
58.1885 157.875 li
58.4385 157.773 li
58.6382 157.625 li
58.8882 157.523 li
59.1382 157.375 li
59.3882 157.224 li
59.6382 157.125 li
59.8384 156.974 li
60.0884 156.824 li
60.3384 156.724 li
60.5884 156.574 li
60.8384 156.474 li
61.0381 156.324 li
61.2881 156.173 li
61.5381 156.074 li
61.7881 155.923 li
61.9883 155.773 li
62.2383 155.673 li
62.4883 155.523 li
62.7383 155.423 li
62.9883 155.273 li
63.1885 155.125 li
63.4385 155.023 li
63.6885 154.875 li
63.9385 154.724 li
64.1885 154.625 li
64.3882 154.474 li
64.6382 154.375 li
64.8882 154.224 li
65.1382 154.074 li
65.3882 153.974 li
65.5884 153.824 li
65.8384 153.673 li
66.0884 153.574 li
66.3384 153.423 li
66.5884 153.324 li
66.7886 153.173 li
67.0386 153.023 li
67.2886 152.923 li
67.5386 152.773 li
67.7886 152.625 li
67.9883 152.523 li
68.2383 152.375 li
68.4883 152.224 li
68.7383 152.125 li
68.9883 151.974 li
69.1885 151.875 li
69.4385 151.724 li
69.6885 151.574 li
69.9385 151.474 li
70.1885 151.324 li
70.3882 151.173 li
70.6382 151.074 li
70.8882 150.923 li
71.1382 150.824 li
71.3882 150.673 li
71.5884 150.523 li
71.8384 150.423 li
72.0884 150.273 li
72.3384 150.125 li
72.5884 150.025 li
72.7886 149.875 li
73.0386 149.775 li
73.2886 149.625 li
73.5386 149.474 li
73.7886 149.375 li
73.9883 149.224 li
74.2383 149.074 li
74.4883 148.974 li
74.7383 148.824 li
74.9883 148.724 li
75.1885 148.574 li
75.4385 148.423 li
75.6885 148.324 li
75.9385 148.173 li
76.1885 148.025 li
76.3887 147.923 li
76.6387 147.775 li
76.8887 147.673 li
77.1387 147.525 li
77.3887 147.375 li
77.5884 147.275 li
28.188 174.324 mo
28.438 174.173 li
28.688 174.074 li
28.8882 173.923 li
29.1382 173.773 li
29.3882 173.673 li
29.6382 173.523 li
29.8882 173.423 li
30.0884 173.273 li
30.3384 173.125 li
30.5884 173.023 li
30.8384 172.875 li
31.0884 172.724 li
31.2881 172.625 li
31.5381 172.474 li
31.7881 172.375 li
32.0381 172.224 li
32.2881 172.074 li
32.4883 171.974 li
32.7383 171.824 li
32.9883 171.673 li
33.2383 171.574 li
33.4883 171.423 li
33.688 171.324 li
33.9385 171.173 li
34.1885 171.023 li
34.4385 170.923 li
34.6885 170.773 li
34.8882 170.625 li
35.1382 170.523 li
35.3882 170.375 li
35.6382 170.273 li
35.8882 170.125 li
36.0884 169.974 li
36.3384 169.875 li
36.5884 169.724 li
36.8384 169.574 li
37.0884 169.474 li
37.2881 169.324 li
37.5381 169.224 li
37.7881 169.074 li
38.0381 168.923 li
38.2881 168.824 li
38.4883 168.673 li
38.7383 168.523 li
38.9883 168.423 li
39.2383 168.273 li
39.4385 168.125 li
39.6885 168.023 li
39.9385 167.875 li
40.1885 167.773 li
40.4385 167.625 li
40.6382 167.474 li
40.8882 167.375 li
41.1382 167.224 li
41.3882 167.074 li
41.6382 166.974 li
41.8384 166.824 li
42.0884 166.724 li
42.3384 166.574 li
42.5884 166.423 li
42.8384 166.324 li
43.0386 166.173 li
43.2886 166.023 li
43.5386 165.923 li
43.7886 165.773 li
44.0386 165.673 li
44.2383 165.523 li
44.4883 165.375 li
44.7383 165.273 li
44.9883 165.125 li
45.2383 164.974 li
45.4385 164.875 li
45.6885 164.724 li
45.9385 164.625 li
46.1885 164.474 li
46.4385 164.324 li
46.6382 164.224 li
46.8882 164.074 li
47.1382 163.923 li
47.3882 163.824 li
47.6382 163.673 li
47.8384 163.574 li
48.0884 163.423 li
48.3384 163.273 li
48.5884 163.173 li
48.8384 163.023 li
49.0386 162.875 li
49.2886 162.775 li
49.5386 162.625 li
49.7886 162.474 li
50.0386 162.375 li
50.2383 162.224 li
50.4883 162.125 li
50.7383 161.974 li
50.9883 161.824 li
51.2383 161.724 li
51.4385 161.574 li
51.6885 161.423 li
51.9385 161.324 li
52.1885 161.173 li
52.4385 161.074 li
52.6387 160.923 li
239.488 10.3237 mo
259.438 10.3237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGE+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/E <1C60D8A8C9B64EDF885E9C70E86F4D6078E7D1BF0D69911FD55CAA5C46B6C6C433175B8381217040BB42F142B1A0E1EA4F6BED24146D2DB65AFCA0> |-/L <1C60D8A8C9B7EF3257710D8E45FDED8109BBDA794C5EEC6C4DCFCB68A628CD21FC17F8D9EBEE> |-/c <1C60D8A8C9B7A73DE7D498F17521D6359F9ADD96B62202C43AB7E2B6A506D4DE60506EB0B21A851A7E637BA285607D05D1170907CD76EA31977E70CEDA0DED90924EF61C48FC884B70C05F0A56FF474D664DA9646860BA> |-/p <1C60D8A8C9B7EF321971A47DFE20E88A554AF6C7BF26D7DE21E7159091488A77474EFAE16E717C524A15C920EA73AA47F3FA5326288E9152C7B3C170946831BD532AD7339284A44181A5422DAA5A3944CCAFE4499DA2E6E45119A891F62D3E7DB19C997B84C7105E8154EEFB4DEC8858FC770AEE75D22C6FDC3AA98F517994> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGE+Helvetica /Encoding getdup 69 /E putdup 76 /L putdup 99 /c putdup 112 /p putpop%ADOEndSubsetFont
/DVPWGE+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 10{/.notdef}rp /C /.notdef /E /F 5{/.notdef}rp /L 6{/.notdef}rp /S 15{/.notdef}rp /c /d /e 3{/.notdef}rp /i 5{/.notdef}rp /o /p /.notdef /r /s /t /.notdef /v /.notdef /x 135{/.notdef}rp]DVPWGE+Helvetica nfDVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf189.388 19.6616 mo(Expected Loss)[4.66895 3.5 3.8916 3.89258 3.5 1.94629 3.8916 3.8916 1.94629 3.8916 3.89258 3.5 0 ]xsh[2 3 ] 0 dsh
265.938 174.324 mo
266.139 174.324 li
266.389 174.324 li
266.639 174.324 li
266.889 174.324 li
267.139 174.324 li
267.338 174.324 li
267.588 174.324 li
267.838 174.324 li
240.988 174.324 mo
241.188 174.324 li
241.438 174.324 li
241.688 174.324 li
241.938 174.324 li
242.188 174.324 li
242.389 174.324 li
242.639 174.324 li
242.889 174.324 li
243.139 174.324 li
243.389 174.324 li
243.588 174.324 li
243.838 174.324 li
244.088 174.324 li
244.338 174.324 li
244.588 174.324 li
244.789 174.324 li
245.039 174.324 li
245.289 174.324 li
245.539 174.324 li
245.789 174.324 li
245.988 174.324 li
246.238 174.324 li
246.488 174.324 li
246.738 174.324 li
246.988 174.324 li
247.188 174.324 li
247.438 174.324 li
247.688 174.324 li
247.938 174.324 li
248.188 174.324 li
248.389 174.324 li
248.639 174.324 li
248.889 174.324 li
249.139 174.324 li
249.389 174.324 li
249.588 174.324 li
249.838 174.324 li
250.088 174.324 li
250.338 174.324 li
250.588 174.324 li
250.789 174.324 li
251.039 174.324 li
251.289 174.324 li
251.539 174.324 li
251.789 174.324 li
251.988 174.324 li
252.238 174.324 li
252.488 174.324 li
252.738 174.324 li
252.988 174.324 li
253.188 174.324 li
253.438 174.324 li
253.688 174.324 li
253.938 174.324 li
254.188 174.324 li
254.389 174.324 li
254.639 174.324 li
254.889 174.324 li
255.139 174.324 li
255.389 174.324 li
255.588 174.324 li
255.838 174.324 li
256.088 174.324 li
256.338 174.324 li
256.588 174.324 li
256.789 174.324 li
257.039 174.324 li
257.289 174.324 li
257.539 174.324 li
257.738 174.324 li
257.988 174.324 li
258.238 174.324 li
258.488 174.324 li
258.738 174.324 li
258.938 174.324 li
259.188 174.324 li
259.438 174.324 li
259.688 174.324 li
259.938 174.324 li
260.139 174.324 li
260.389 174.324 li
260.639 174.324 li
260.889 174.324 li
261.139 174.324 li
261.338 174.324 li
261.588 174.324 li
261.838 174.324 li
262.088 174.324 li
262.338 174.324 li
262.539 174.324 li
262.789 174.324 li
263.039 174.324 li
263.289 174.324 li
263.539 174.324 li
263.738 174.324 li
263.988 174.324 li
264.238 174.324 li
264.488 174.324 li
264.738 174.324 li
264.938 174.324 li
265.188 174.324 li
265.438 174.324 li
265.688 174.324 li
265.938 174.324 li
216.039 174.324 mo
216.238 174.324 li
216.488 174.324 li
216.738 174.324 li
216.988 174.324 li
217.238 174.324 li
217.438 174.324 li
217.688 174.324 li
217.938 174.324 li
218.188 174.324 li
218.438 174.324 li
218.639 174.324 li
218.889 174.324 li
219.139 174.324 li
219.389 174.324 li
219.639 174.324 li
219.838 174.324 li
220.088 174.324 li
220.338 174.324 li
220.588 174.324 li
220.838 174.324 li
221.039 174.324 li
221.289 174.324 li
221.539 174.324 li
221.789 174.324 li
222.039 174.324 li
222.238 174.324 li
222.488 174.324 li
222.738 174.324 li
222.988 174.324 li
223.238 174.324 li
223.438 174.324 li
223.688 174.324 li
223.938 174.324 li
224.188 174.324 li
224.438 174.324 li
224.639 174.324 li
224.889 174.324 li
225.139 174.324 li
225.389 174.324 li
225.639 174.324 li
225.838 174.324 li
226.088 174.324 li
226.338 174.324 li
226.588 174.324 li
226.838 174.324 li
227.039 174.324 li
227.289 174.324 li
227.539 174.324 li
227.789 174.324 li
228.039 174.324 li
228.238 174.324 li
228.488 174.324 li
228.738 174.324 li
228.988 174.324 li
229.238 174.324 li
229.438 174.324 li
229.688 174.324 li
229.938 174.324 li
230.188 174.324 li
230.438 174.324 li
230.639 174.324 li
230.889 174.324 li
231.139 174.324 li
231.389 174.324 li
231.639 174.324 li
231.838 174.324 li
232.088 174.324 li
232.338 174.324 li
232.588 174.324 li
232.838 174.324 li
233.039 174.324 li
233.289 174.324 li
233.539 174.324 li
233.789 174.324 li
234.039 174.324 li
234.238 174.324 li
234.488 174.324 li
234.738 174.324 li
234.988 174.324 li
235.188 174.324 li
235.438 174.324 li
235.688 174.324 li
235.938 174.324 li
236.188 174.324 li
236.389 174.324 li
236.639 174.324 li
236.889 174.324 li
237.139 174.324 li
237.389 174.324 li
237.588 174.324 li
237.838 174.324 li
238.088 174.324 li
238.338 174.324 li
238.588 174.324 li
238.789 174.324 li
239.039 174.324 li
239.289 174.324 li
239.539 174.324 li
239.789 174.324 li
239.988 174.324 li
240.238 174.324 li
240.488 174.324 li
240.738 174.324 li
240.988 174.324 li
191.088 174.324 mo
191.338 174.324 li
191.539 174.324 li
191.789 174.324 li
192.039 174.324 li
192.289 174.324 li
192.488 174.324 li
192.738 174.324 li
192.988 174.324 li
193.238 174.324 li
193.488 174.324 li
193.688 174.324 li
193.938 174.324 li
194.188 174.324 li
194.438 174.324 li
194.688 174.324 li
194.889 174.324 li
195.139 174.324 li
195.389 174.324 li
195.639 174.324 li
195.889 174.324 li
196.088 174.324 li
196.338 174.324 li
196.588 174.324 li
196.838 174.324 li
197.088 174.324 li
197.289 174.324 li
197.539 174.324 li
197.789 174.324 li
198.039 174.324 li
198.289 174.324 li
198.488 174.324 li
198.738 174.324 li
198.988 174.324 li
199.238 174.324 li
199.488 174.324 li
199.688 174.324 li
199.938 174.324 li
200.188 174.324 li
200.438 174.324 li
200.688 174.324 li
200.889 174.324 li
201.139 174.324 li
201.389 174.324 li
201.639 174.324 li
201.889 174.324 li
202.088 174.324 li
202.338 174.324 li
202.588 174.324 li
202.838 174.324 li
203.088 174.324 li
203.289 174.324 li
203.539 174.324 li
203.789 174.324 li
204.039 174.324 li
204.289 174.324 li
204.488 174.324 li
204.738 174.324 li
204.988 174.324 li
205.238 174.324 li
205.488 174.324 li
205.688 174.324 li
205.938 174.324 li
206.188 174.324 li
206.438 174.324 li
206.688 174.324 li
206.889 174.324 li
207.139 174.324 li
207.389 174.324 li
207.639 174.324 li
207.889 174.324 li
208.088 174.324 li
208.338 174.324 li
208.588 174.324 li
208.838 174.324 li
209.088 174.324 li
209.289 174.324 li
209.539 174.324 li
209.789 174.324 li
210.039 174.324 li
210.289 174.324 li
210.488 174.324 li
210.738 174.324 li
210.988 174.324 li
211.238 174.324 li
211.488 174.324 li
211.688 174.324 li
211.938 174.324 li
212.188 174.324 li
212.438 174.324 li
212.688 174.324 li
212.889 174.324 li
213.139 174.324 li
213.389 174.324 li
213.639 174.324 li
213.838 174.324 li
214.088 174.324 li
214.338 174.324 li
214.588 174.324 li
214.838 174.324 li
215.039 174.324 li
215.289 174.324 li
215.539 174.324 li
215.789 174.324 li
216.039 174.324 li
166.139 174.324 mo
166.389 174.324 li
166.588 174.324 li
166.838 174.324 li
167.088 174.324 li
167.338 174.324 li
167.588 174.324 li
167.789 174.324 li
168.039 174.324 li
168.289 174.324 li
168.539 174.324 li
168.789 174.324 li
168.988 174.324 li
169.238 174.324 li
169.488 174.324 li
169.738 174.324 li
169.938 174.324 li
170.188 174.324 li
170.438 174.324 li
170.688 174.324 li
170.938 174.324 li
171.139 174.324 li
171.389 174.324 li
171.639 174.324 li
171.889 174.324 li
172.139 174.324 li
172.338 174.324 li
172.588 174.324 li
172.838 174.324 li
173.088 174.324 li
173.338 174.324 li
173.539 174.324 li
173.789 174.324 li
174.039 174.324 li
174.289 174.324 li
174.539 174.324 li
174.738 174.324 li
174.988 174.324 li
175.238 174.324 li
175.488 174.324 li
175.738 174.324 li
175.938 174.324 li
176.188 174.324 li
176.438 174.324 li
176.688 174.324 li
176.938 174.324 li
177.139 174.324 li
177.389 174.324 li
177.639 174.324 li
177.889 174.324 li
178.139 174.324 li
178.338 174.324 li
178.588 174.324 li
178.838 174.324 li
179.088 174.324 li
179.338 174.324 li
179.539 174.324 li
179.789 174.324 li
180.039 174.324 li
180.289 174.324 li
180.539 174.324 li
180.738 174.324 li
180.988 174.324 li
181.238 174.324 li
181.488 174.324 li
181.738 174.324 li
181.938 174.324 li
182.188 174.324 li
182.438 174.324 li
182.688 174.324 li
182.938 174.324 li
183.139 174.324 li
183.389 174.324 li
183.639 174.324 li
183.889 174.324 li
184.139 174.324 li
184.338 174.324 li
184.588 174.324 li
184.838 174.324 li
185.088 174.324 li
185.338 174.324 li
185.539 174.324 li
185.789 174.324 li
186.039 174.324 li
186.287 174.324 li
186.537 174.324 li
186.738 174.324 li
186.988 174.324 li
187.238 174.324 li
187.488 174.324 li
187.738 174.324 li
187.938 174.324 li
188.188 174.324 li
188.438 174.324 li
188.688 174.324 li
188.938 174.324 li
189.139 174.324 li
189.389 174.324 li
189.639 174.324 li
189.889 174.324 li
190.139 174.324 li
190.338 174.324 li
190.588 174.324 li
190.838 174.324 li
191.088 174.324 li
141.188 174.273 mo
141.438 174.273 li
141.639 174.273 li
141.889 174.273 li
142.139 174.273 li
142.389 174.273 li
142.639 174.273 li
142.838 174.273 li
143.088 174.273 li
143.338 174.273 li
143.588 174.273 li
143.838 174.273 li
144.039 174.273 li
144.289 174.273 li
144.539 174.273 li
144.789 174.273 li
145.039 174.273 li
145.238 174.273 li
145.488 174.273 li
145.738 174.273 li
145.988 174.273 li
146.238 174.273 li
146.438 174.273 li
146.688 174.273 li
146.938 174.273 li
147.188 174.273 li
147.438 174.273 li
147.639 174.273 li
147.889 174.273 li
148.139 174.273 li
148.389 174.273 li
148.588 174.273 li
148.838 174.273 li
149.088 174.273 li
149.338 174.273 li
149.588 174.273 li
149.789 174.273 li
150.039 174.273 li
150.289 174.273 li
150.539 174.273 li
150.789 174.273 li
150.988 174.273 li
151.238 174.273 li
151.488 174.273 li
151.738 174.273 li
151.988 174.273 li
152.188 174.273 li
152.438 174.273 li
152.688 174.273 li
152.938 174.273 li
153.188 174.273 li
153.389 174.273 li
153.639 174.324 li
153.889 174.324 li
154.139 174.324 li
154.389 174.324 li
154.588 174.324 li
154.838 174.324 li
155.088 174.324 li
155.338 174.324 li
155.588 174.324 li
155.789 174.324 li
156.039 174.324 li
156.289 174.324 li
156.539 174.324 li
156.789 174.324 li
156.988 174.324 li
157.238 174.324 li
157.488 174.324 li
157.738 174.324 li
157.988 174.324 li
158.188 174.324 li
158.438 174.324 li
158.688 174.324 li
158.938 174.324 li
159.188 174.324 li
159.389 174.324 li
159.639 174.324 li
159.889 174.324 li
160.139 174.324 li
160.389 174.324 li
160.588 174.324 li
160.838 174.324 li
161.088 174.324 li
161.338 174.324 li
161.588 174.324 li
161.789 174.324 li
162.037 174.324 li
162.287 174.324 li
162.537 174.324 li
162.787 174.324 li
162.988 174.324 li
163.238 174.324 li
163.488 174.324 li
163.738 174.324 li
163.988 174.324 li
164.188 174.324 li
164.438 174.324 li
164.688 174.324 li
164.938 174.324 li
165.188 174.324 li
165.389 174.324 li
165.639 174.324 li
165.889 174.324 li
166.139 174.324 li
116.238 173.824 mo
116.488 173.875 li
116.688 173.875 li
116.938 173.875 li
117.188 173.875 li
117.438 173.875 li
117.688 173.875 li
117.888 173.923 li
118.138 173.923 li
118.388 173.923 li
118.638 173.923 li
118.888 173.923 li
119.088 173.923 li
119.338 173.923 li
119.588 173.974 li
119.838 173.974 li
120.088 173.974 li
120.288 173.974 li
120.538 173.974 li
120.788 173.974 li
121.038 173.974 li
121.288 174.023 li
121.488 174.023 li
121.738 174.023 li
121.988 174.023 li
122.238 174.023 li
122.488 174.023 li
122.688 174.023 li
122.938 174.023 li
123.188 174.023 li
123.438 174.074 li
123.688 174.074 li
123.888 174.074 li
124.138 174.074 li
124.388 174.074 li
124.638 174.074 li
124.888 174.074 li
125.088 174.074 li
125.338 174.074 li
125.588 174.074 li
125.838 174.074 li
126.088 174.125 li
126.288 174.125 li
126.538 174.125 li
126.788 174.125 li
127.038 174.125 li
127.238 174.125 li
127.488 174.125 li
127.738 174.125 li
127.988 174.125 li
128.238 174.125 li
128.438 174.125 li
128.688 174.125 li
128.938 174.125 li
129.188 174.173 li
129.438 174.173 li
129.638 174.173 li
129.888 174.173 li
130.138 174.173 li
130.388 174.173 li
130.638 174.173 li
130.838 174.173 li
131.088 174.173 li
131.338 174.173 li
131.588 174.173 li
131.838 174.173 li
132.038 174.173 li
132.288 174.173 li
132.538 174.173 li
132.788 174.173 li
133.038 174.173 li
133.238 174.224 li
133.488 174.224 li
133.738 174.224 li
133.988 174.224 li
134.238 174.224 li
134.438 174.224 li
134.688 174.224 li
134.938 174.224 li
135.188 174.224 li
135.438 174.224 li
135.638 174.224 li
135.888 174.224 li
136.138 174.224 li
136.388 174.224 li
136.638 174.224 li
136.838 174.224 li
137.088 174.224 li
137.338 174.224 li
137.588 174.224 li
137.838 174.224 li
138.038 174.224 li
138.288 174.224 li
138.538 174.224 li
138.788 174.224 li
139.039 174.224 li
139.238 174.224 li
139.488 174.224 li
139.738 174.273 li
139.988 174.273 li
140.238 174.273 li
140.438 174.273 li
140.688 174.273 li
140.938 174.273 li
141.188 174.273 li
91.2881 170.875 mo
91.5381 170.923 li
91.7383 170.974 li
91.9883 171.023 li
92.2383 171.125 li
92.4883 171.173 li
92.7383 171.224 li
92.938 171.273 li
93.188 171.324 li
93.438 171.423 li
93.688 171.474 li
93.938 171.523 li
94.1382 171.574 li
94.3882 171.625 li
94.6382 171.673 li
94.8882 171.724 li
95.1382 171.773 li
95.3384 171.824 li
95.5884 171.875 li
95.8384 171.923 li
96.0884 171.974 li
96.3384 171.974 li
96.5381 172.023 li
96.7881 172.074 li
97.0381 172.125 li
97.2881 172.173 li
97.5381 172.224 li
97.7383 172.224 li
97.9883 172.273 li
98.2383 172.324 li
98.4883 172.375 li
98.7383 172.375 li
98.9385 172.423 li
99.1885 172.474 li
99.4385 172.523 li
99.6885 172.523 li
99.9385 172.574 li
100.138 172.625 li
100.388 172.625 li
100.638 172.673 li
100.888 172.724 li
101.138 172.724 li
101.338 172.773 li
101.588 172.773 li
101.838 172.824 li
102.088 172.824 li
102.338 172.875 li
102.539 172.923 li
102.789 172.923 li
103.039 172.974 li
103.289 172.974 li
103.539 173.025 li
103.738 173.025 li
103.988 173.074 li
104.238 173.074 li
104.488 173.125 li
104.688 173.125 li
104.938 173.125 li
105.188 173.173 li
105.438 173.173 li
105.688 173.224 li
105.888 173.224 li
106.138 173.275 li
106.388 173.275 li
106.638 173.275 li
106.888 173.324 li
107.088 173.324 li
107.338 173.375 li
107.588 173.375 li
107.838 173.375 li
108.088 173.423 li
108.289 173.423 li
108.539 173.423 li
108.789 173.474 li
109.039 173.474 li
109.289 173.474 li
109.488 173.525 li
109.738 173.525 li
109.988 173.525 li
110.238 173.574 li
110.488 173.574 li
110.688 173.574 li
110.938 173.574 li
111.188 173.625 li
111.438 173.625 li
111.688 173.625 li
111.888 173.625 li
112.138 173.673 li
112.388 173.673 li
112.638 173.673 li
112.888 173.673 li
113.088 173.724 li
113.338 173.724 li
113.588 173.724 li
113.838 173.724 li
114.088 173.775 li
114.289 173.775 li
114.539 173.775 li
114.789 173.775 li
115.039 173.775 li
115.289 173.824 li
115.488 173.824 li
115.738 173.824 li
115.988 173.824 li
116.238 173.824 li
66.3384 149.324 mo
66.5884 149.773 li
66.7881 150.273 li
67.0381 150.724 li
67.2881 151.173 li
67.5381 151.574 li
67.7881 152.023 li
67.9883 152.423 li
68.2383 152.875 li
68.4883 153.273 li
68.7383 153.673 li
68.9883 154.023 li
69.188 154.423 li
69.438 154.773 li
69.688 155.173 li
69.938 155.523 li
70.188 155.875 li
70.3882 156.224 li
70.6382 156.574 li
70.8882 156.875 li
71.1382 157.224 li
71.3882 157.523 li
71.5884 157.875 li
71.8384 158.173 li
72.0884 158.474 li
72.3384 158.773 li
72.5884 159.074 li
72.7881 159.375 li
73.0381 159.625 li
73.2881 159.923 li
73.5381 160.173 li
73.7881 160.423 li
73.9883 160.724 li
74.2383 160.974 li
74.4883 161.224 li
74.7383 161.474 li
74.9883 161.724 li
75.1885 161.923 li
75.4385 162.173 li
75.6885 162.423 li
75.9385 162.625 li
76.1885 162.824 li
76.3882 163.074 li
76.6382 163.273 li
76.8882 163.474 li
77.1382 163.673 li
77.3882 163.875 li
77.5884 164.074 li
77.8384 164.273 li
78.0884 164.474 li
78.3384 164.673 li
78.5884 164.824 li
78.7886 165.023 li
79.0386 165.173 li
79.2886 165.375 li
79.5386 165.523 li
79.7886 165.673 li
79.9883 165.875 li
80.2383 166.023 li
80.4883 166.173 li
80.7383 166.324 li
80.9883 166.474 li
81.1885 166.625 li
81.4385 166.773 li
81.6885 166.923 li
81.9385 167.074 li
82.1885 167.173 li
82.3882 167.324 li
82.6382 167.474 li
82.8882 167.574 li
83.1382 167.724 li
83.3384 167.824 li
83.5884 167.974 li
83.8384 168.074 li
84.0884 168.173 li
84.3384 168.324 li
84.5386 168.423 li
84.7886 168.523 li
85.0386 168.625 li
85.2886 168.724 li
85.5386 168.875 li
85.7383 168.974 li
85.9883 169.074 li
86.2383 169.173 li
86.4883 169.273 li
86.7383 169.324 li
86.9385 169.423 li
87.1885 169.523 li
87.4385 169.625 li
87.6885 169.724 li
87.9385 169.773 li
88.1382 169.873 li
88.3882 169.974 li
88.6387 170.074 li
88.8887 170.123 li
89.1387 170.224 li
89.3384 170.273 li
89.5884 170.373 li
89.8384 170.423 li
90.0884 170.523 li
90.3384 170.574 li
90.5386 170.673 li
90.7886 170.724 li
91.0386 170.773 li
91.2886 170.873 li
42.0884 3.67383 mo
42.0884 4.17383 li
42.3384 7.37354 li
42.5884 10.4736 li
42.8384 13.5737 li
43.0381 16.6235 li
43.2881 19.5737 li
43.5381 22.4736 li
43.7881 25.3237 li
44.0381 28.1235 li
44.2383 30.8735 li
44.4883 33.5737 li
44.7383 36.2236 li
44.9883 38.8237 li
45.2383 41.3735 li
45.438 43.8735 li
45.688 46.3237 li
45.938 48.7236 li
46.188 51.1235 li
46.438 53.4238 li
46.6382 55.6738 li
46.8882 57.9238 li
47.1382 60.1235 li
47.3882 62.2734 li
47.6382 64.3735 li
47.8384 66.4238 li
48.0884 68.4736 li
48.3384 70.4736 li
48.5884 72.4238 li
48.8384 74.3237 li
49.0381 76.2236 li
49.2881 78.0737 li
49.5381 79.8735 li
49.7881 81.6235 li
50.0381 83.3735 li
50.2383 85.1235 li
50.4883 86.7734 li
50.7383 88.4238 li
50.9883 90.0234 li
51.2383 91.6235 li
51.4385 93.1738 li
51.6885 94.7236 li
51.9385 96.2236 li
52.1885 97.6738 li
52.4385 99.1245 li
52.6382 100.523 li
52.8882 101.923 li
53.1382 103.273 li
53.3882 104.625 li
53.6382 105.923 li
53.8384 107.224 li
54.0884 108.474 li
54.3384 109.724 li
54.5884 110.923 li
54.8384 112.125 li
55.0386 113.273 li
55.2886 114.423 li
55.5386 115.574 li
55.7886 116.673 li
56.0386 117.773 li
56.2383 118.824 li
56.4883 119.875 li
56.7383 120.875 li
56.9883 121.875 li
57.2383 122.875 li
57.4385 123.875 li
57.6885 124.824 li
57.9385 125.724 li
58.1885 126.625 li
58.4385 127.523 li
58.6382 128.423 li
58.8882 129.273 li
59.1382 130.125 li
59.3882 130.974 li
59.6382 131.773 li
59.8384 132.574 li
60.0884 133.375 li
60.3384 134.125 li
60.5884 134.875 li
60.8384 135.625 li
61.0386 136.375 li
61.2886 137.074 li
61.5386 137.773 li
61.7886 138.474 li
61.9883 139.125 li
62.2383 139.824 li
62.4883 140.474 li
62.7383 141.074 li
62.9883 141.724 li
63.1885 142.324 li
63.4385 142.923 li
63.6885 143.523 li
63.9385 144.074 li
64.1885 144.673 li
64.3887 145.224 li
64.6387 145.773 li
64.8887 146.324 li
65.1387 146.824 li
65.3887 147.375 li
65.5884 147.875 li
65.8384 148.375 li
66.0884 148.824 li
66.3384 149.324 li
239.488 17.3237 mo
259.438 17.3237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGE+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67BA95C799E46FC7C8D88E9FFD990A> |-/a <1C60D8A8C9B7EF32A0B922DB529D708010F72F0E62F6CA36E98277AFD8C536E6814BFC8F2509E1B2B1B62A6BDA8D1A6ED67728D80620B28FE439D2F57DCEC5483105FEA93379701773DF23A415938C688874994BCC9880105CE27AC2270A13FA38E952045C5E8C52BEF83397E5FBEEFAB993BE33E385A5E36620F7427AB5E4423C6A4ED6DE24A89F54E52C8FAD8A45FAD4B8F6CFD50EB7D35BF120B079B932E0EE2F7685462C7EC6E9B818F0F9E1F7814D04F2B9AAFA6704B8B745452B73181F38CB34F1645F> |-/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C0EAF> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGE+Helvetica /Encoding getdup 84 /T putdup 97 /a putdup 108 /l putpop%ADOEndSubsetFont
/DVPWGE+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 10{/.notdef}rp /C /.notdef /E /F 5{/.notdef}rp /L 6{/.notdef}rp /S /T 12{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l 2{/.notdef}rp /o /p /.notdef /r /s /t /.notdef /v /.notdef /x 135{/.notdef}rp]DVPWGE+Helvetica nfDVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf203.396 26.6616 mo(Total Cost)[3.4375 3.89258 1.94531 3.89258 1.55371 1.94629 5.05371 3.8916 3.5 0 ]xsh[] 0 dsh
266.639 43.7236 mo
266.889 43.5737 li
267.139 43.4238 li
267.338 43.3237 li
267.588 43.1738 li
267.838 43.0737 li
241.688 57.3735 mo
241.938 57.2236 li
242.188 57.1235 li
242.389 56.9736 li
242.639 56.8735 li
242.889 56.7236 li
243.139 56.5737 li
243.389 56.4736 li
243.588 56.3237 li
243.838 56.1738 li
244.088 56.0737 li
244.338 55.9238 li
244.588 55.8237 li
244.789 55.6738 li
245.039 55.5234 li
245.289 55.4238 li
245.539 55.2734 li
245.789 55.1235 li
245.988 55.0234 li
246.238 54.8735 li
246.488 54.7734 li
246.738 54.6235 li
246.988 54.4736 li
247.188 54.3735 li
247.438 54.2236 li
247.688 54.0737 li
247.938 53.9736 li
248.188 53.8237 li
248.389 53.6733 li
248.639 53.5737 li
248.889 53.4233 li
249.139 53.3237 li
249.389 53.1733 li
249.588 53.0234 li
249.838 52.9233 li
250.088 52.7734 li
250.338 52.6235 li
250.588 52.5234 li
250.789 52.3735 li
251.039 52.2734 li
251.289 52.1235 li
251.539 51.9736 li
251.789 51.8735 li
251.988 51.7236 li
252.238 51.5737 li
252.488 51.4736 li
252.738 51.3237 li
252.988 51.2236 li
253.188 51.0737 li
253.438 50.9233 li
253.688 50.8232 li
253.938 50.6733 li
254.188 50.5234 li
254.389 50.4233 li
254.639 50.2734 li
254.889 50.1733 li
255.139 50.0234 li
255.389 49.8735 li
255.588 49.7734 li
255.838 49.6235 li
256.088 49.4736 li
256.338 49.3735 li
256.588 49.2236 li
256.789 49.1235 li
257.039 48.9736 li
257.289 48.8232 li
257.539 48.7236 li
257.738 48.5732 li
257.988 48.4233 li
258.238 48.3232 li
258.488 48.1733 li
258.738 48.0234 li
258.938 47.9233 li
259.188 47.7734 li
259.438 47.6733 li
259.688 47.5234 li
259.938 47.3735 li
260.139 47.2734 li
260.389 47.1235 li
260.639 46.9736 li
260.889 46.8735 li
261.139 46.7236 li
261.338 46.6235 li
261.588 46.4736 li
261.838 46.3232 li
262.088 46.2236 li
262.338 46.0732 li
262.539 45.9233 li
262.789 45.8232 li
263.039 45.6733 li
263.289 45.5732 li
263.539 45.4233 li
263.738 45.2734 li
263.988 45.1733 li
264.238 45.0234 li
264.488 44.8735 li
264.738 44.7734 li
264.938 44.6235 li
265.188 44.5234 li
265.438 44.3735 li
265.688 44.2236 li
265.938 44.1235 li
266.139 43.9736 li
266.389 43.8232 li
266.639 43.7236 li
216.738 71.0234 mo
216.988 70.9238 li
217.238 70.7734 li
217.438 70.6235 li
217.688 70.5234 li
217.938 70.3735 li
218.188 70.2734 li
218.438 70.1235 li
218.639 69.9736 li
218.889 69.8735 li
219.139 69.7236 li
219.389 69.5737 li
219.639 69.4736 li
219.838 69.3237 li
220.088 69.2236 li
220.338 69.0737 li
220.588 68.9238 li
220.838 68.8237 li
221.039 68.6738 li
221.289 68.5234 li
221.539 68.4238 li
221.789 68.2734 li
222.039 68.1733 li
222.238 68.0234 li
222.488 67.8735 li
222.738 67.7734 li
222.988 67.6235 li
223.238 67.4736 li
223.438 67.3735 li
223.688 67.2236 li
223.938 67.1235 li
224.188 66.9736 li
224.438 66.8237 li
224.639 66.7236 li
224.889 66.5737 li
225.139 66.4233 li
225.389 66.3237 li
225.639 66.1733 li
225.838 66.0737 li
226.088 65.9233 li
226.338 65.7734 li
226.588 65.6733 li
226.838 65.5234 li
227.039 65.3735 li
227.289 65.2734 li
227.539 65.1235 li
227.789 64.9736 li
228.039 64.8735 li
228.238 64.7236 li
228.488 64.6235 li
228.738 64.4736 li
228.988 64.3232 li
229.238 64.2236 li
229.438 64.0732 li
229.688 63.9233 li
229.938 63.8232 li
230.188 63.6733 li
230.438 63.5732 li
230.639 63.4233 li
230.889 63.2734 li
231.139 63.1733 li
231.389 63.0234 li
231.639 62.8735 li
231.838 62.7734 li
232.088 62.6235 li
232.338 62.5234 li
232.588 62.3735 li
232.838 62.2236 li
233.039 62.1235 li
233.289 61.9736 li
233.539 61.8232 li
233.789 61.7236 li
234.039 61.5732 li
234.238 61.4736 li
234.488 61.3232 li
234.738 61.1733 li
234.988 61.0732 li
235.188 60.9233 li
235.438 60.7734 li
235.688 60.6733 li
235.938 60.5234 li
236.188 60.4233 li
236.389 60.2734 li
236.639 60.1235 li
236.889 60.0234 li
237.139 59.8735 li
237.389 59.7236 li
237.588 59.6235 li
237.838 59.4736 li
238.088 59.3232 li
238.338 59.2236 li
238.588 59.0732 li
238.789 58.9736 li
239.039 58.8232 li
239.289 58.6733 li
239.539 58.5732 li
239.789 58.4233 li
239.988 58.2734 li
240.238 58.1733 li
240.488 58.0234 li
240.738 57.9233 li
240.988 57.7734 li
241.188 57.6235 li
241.438 57.5234 li
241.688 57.3735 li
191.789 84.7236 mo
192.039 84.5737 li
192.289 84.4238 li
192.488 84.3237 li
192.738 84.1738 li
192.988 84.0737 li
193.238 83.9238 li
193.488 83.7734 li
193.688 83.6738 li
193.938 83.5234 li
194.188 83.3735 li
194.438 83.2734 li
194.688 83.1235 li
194.889 83.0234 li
195.139 82.8735 li
195.389 82.7236 li
195.639 82.6235 li
195.889 82.4736 li
196.088 82.3237 li
196.338 82.2236 li
196.588 82.0737 li
196.838 81.9238 li
197.088 81.8237 li
197.289 81.6738 li
197.539 81.5737 li
197.789 81.4238 li
198.039 81.2734 li
198.289 81.1738 li
198.488 81.0234 li
198.738 80.8735 li
198.988 80.7734 li
199.238 80.6235 li
199.488 80.5234 li
199.688 80.3735 li
199.938 80.2236 li
200.188 80.1235 li
200.438 79.9736 li
200.688 79.8237 li
200.889 79.7236 li
201.139 79.5737 li
201.389 79.4736 li
201.639 79.3237 li
201.889 79.1733 li
202.088 79.0737 li
202.338 78.9233 li
202.588 78.7734 li
202.838 78.6733 li
203.088 78.5234 li
203.289 78.4233 li
203.539 78.2734 li
203.789 78.1235 li
204.039 78.0234 li
204.289 77.8735 li
204.488 77.7236 li
204.738 77.6235 li
204.988 77.4736 li
205.238 77.3735 li
205.488 77.2236 li
205.688 77.0732 li
205.938 76.9736 li
206.188 76.8232 li
206.438 76.6733 li
206.688 76.5732 li
206.889 76.4233 li
207.139 76.2734 li
207.389 76.1733 li
207.639 76.0234 li
207.889 75.9233 li
208.088 75.7734 li
208.338 75.6235 li
208.588 75.5234 li
208.838 75.3735 li
209.088 75.2236 li
209.289 75.1235 li
209.539 74.9736 li
209.789 74.8735 li
210.039 74.7236 li
210.289 74.5732 li
210.488 74.4736 li
210.738 74.3232 li
210.988 74.1733 li
211.238 74.0732 li
211.488 73.9233 li
211.688 73.8232 li
211.938 73.6733 li
212.188 73.5234 li
212.438 73.4233 li
212.688 73.2734 li
212.889 73.1235 li
213.139 73.0234 li
213.389 72.8735 li
213.639 72.7734 li
213.838 72.6235 li
214.088 72.4736 li
214.338 72.3735 li
214.588 72.2236 li
214.838 72.0732 li
215.039 71.9736 li
215.289 71.8232 li
215.539 71.7236 li
215.789 71.5732 li
216.039 71.4233 li
216.238 71.3232 li
216.488 71.1733 li
216.738 71.0234 li
166.838 98.374 mo
167.088 98.2236 li
167.338 98.124 li
167.588 97.9736 li
167.789 97.8232 li
168.039 97.7236 li
168.289 97.5732 li
168.539 97.4238 li
168.789 97.3232 li
168.988 97.1738 li
169.238 97.0737 li
169.488 96.9238 li
169.738 96.7734 li
169.938 96.6738 li
170.188 96.5234 li
170.438 96.3735 li
170.688 96.2734 li
170.938 96.1235 li
171.139 96.0234 li
171.389 95.8735 li
171.639 95.7236 li
171.889 95.6235 li
172.139 95.4736 li
172.338 95.3237 li
172.588 95.2236 li
172.838 95.0737 li
173.088 94.9736 li
173.338 94.8237 li
173.539 94.6738 li
173.789 94.5737 li
174.039 94.4238 li
174.289 94.2734 li
174.539 94.1738 li
174.738 94.0234 li
174.988 93.9238 li
175.238 93.7734 li
175.488 93.6235 li
175.738 93.5234 li
175.938 93.3735 li
176.188 93.2236 li
176.438 93.1235 li
176.688 92.9736 li
176.938 92.8735 li
177.139 92.7236 li
177.389 92.5737 li
177.639 92.4736 li
177.889 92.3237 li
178.139 92.1738 li
178.338 92.0737 li
178.588 91.9238 li
178.838 91.8237 li
179.088 91.6738 li
179.338 91.5234 li
179.539 91.4238 li
179.789 91.2734 li
180.039 91.1235 li
180.289 91.0234 li
180.539 90.8735 li
180.738 90.7734 li
180.988 90.6235 li
181.238 90.4736 li
181.488 90.3735 li
181.738 90.2236 li
181.938 90.0737 li
182.188 89.9736 li
182.438 89.8237 li
182.688 89.7236 li
182.938 89.5737 li
183.139 89.4238 li
183.389 89.3237 li
183.639 89.1733 li
183.889 89.0234 li
184.139 88.9233 li
184.338 88.7734 li
184.588 88.6235 li
184.838 88.5234 li
185.088 88.3735 li
185.338 88.2734 li
185.539 88.1235 li
185.789 87.9736 li
186.039 87.8735 li
186.289 87.7236 li
186.539 87.5737 li
186.738 87.4736 li
186.988 87.3237 li
187.238 87.2236 li
187.488 87.0737 li
187.738 86.9233 li
187.938 86.8237 li
188.188 86.6733 li
188.438 86.5234 li
188.688 86.4233 li
188.938 86.2734 li
189.139 86.1733 li
189.389 86.0234 li
189.639 85.8735 li
189.889 85.7734 li
190.139 85.6235 li
190.338 85.4736 li
190.588 85.3735 li
190.838 85.2236 li
191.088 85.1235 li
191.338 84.9736 li
191.537 84.8232 li
191.789 84.7236 li
141.889 111.974 mo
142.139 111.824 li
142.389 111.724 li
142.639 111.574 li
142.838 111.474 li
143.088 111.324 li
143.338 111.173 li
143.588 111.074 li
143.838 110.923 li
144.039 110.824 li
144.289 110.673 li
144.539 110.523 li
144.789 110.423 li
145.039 110.273 li
145.238 110.173 li
145.488 110.023 li
145.738 109.875 li
145.988 109.773 li
146.238 109.625 li
146.438 109.523 li
146.688 109.375 li
146.938 109.224 li
147.188 109.125 li
147.438 108.974 li
147.639 108.824 li
147.889 108.724 li
148.139 108.574 li
148.389 108.474 li
148.588 108.324 li
148.838 108.173 li
149.088 108.074 li
149.338 107.923 li
149.588 107.824 li
149.789 107.673 li
150.039 107.523 li
150.289 107.423 li
150.539 107.273 li
150.789 107.125 li
150.988 107.023 li
151.238 106.875 li
151.488 106.773 li
151.738 106.625 li
151.988 106.474 li
152.188 106.375 li
152.438 106.224 li
152.688 106.125 li
152.938 105.974 li
153.188 105.824 li
153.389 105.724 li
153.639 105.574 li
153.889 105.423 li
154.139 105.324 li
154.389 105.173 li
154.588 105.074 li
154.838 104.923 li
155.088 104.773 li
155.338 104.673 li
155.588 104.523 li
155.789 104.375 li
156.039 104.273 li
156.289 104.125 li
156.539 104.023 li
156.789 103.875 li
156.988 103.724 li
157.238 103.625 li
157.488 103.474 li
157.738 103.375 li
157.988 103.224 li
158.188 103.074 li
158.438 102.974 li
158.688 102.824 li
158.938 102.673 li
159.188 102.574 li
159.389 102.423 li
159.639 102.324 li
159.889 102.173 li
160.139 102.023 li
160.389 101.923 li
160.588 101.773 li
160.838 101.625 li
161.088 101.525 li
161.338 101.375 li
161.588 101.275 li
161.787 101.125 li
162.037 100.974 li
162.287 100.875 li
162.537 100.724 li
162.787 100.574 li
162.988 100.474 li
163.238 100.324 li
163.488 100.224 li
163.738 100.074 li
163.988 99.9233 li
164.188 99.8237 li
164.438 99.6733 li
164.688 99.5249 li
164.938 99.4233 li
165.188 99.2749 li
165.389 99.1733 li
165.639 99.0249 li
165.889 98.874 li
166.139 98.7744 li
166.389 98.624 li
166.588 98.4736 li
166.838 98.374 li
116.938 125.273 mo
117.188 125.125 li
117.438 125.023 li
117.688 124.875 li
117.888 124.773 li
118.138 124.625 li
118.388 124.523 li
118.638 124.375 li
118.888 124.273 li
119.088 124.125 li
119.338 124.023 li
119.588 123.875 li
119.838 123.773 li
120.088 123.625 li
120.288 123.523 li
120.538 123.375 li
120.788 123.273 li
121.038 123.125 li
121.288 123.023 li
121.488 122.875 li
121.738 122.773 li
121.988 122.625 li
122.238 122.523 li
122.488 122.375 li
122.688 122.273 li
122.938 122.125 li
123.188 122.023 li
123.438 121.875 li
123.688 121.773 li
123.888 121.625 li
124.138 121.523 li
124.388 121.375 li
124.638 121.273 li
124.888 121.125 li
125.088 121.023 li
125.338 120.875 li
125.588 120.724 li
125.838 120.625 li
126.088 120.474 li
126.288 120.375 li
126.538 120.224 li
126.788 120.125 li
127.038 119.974 li
127.238 119.875 li
127.488 119.724 li
127.738 119.625 li
127.988 119.474 li
128.238 119.324 li
128.438 119.224 li
128.688 119.074 li
128.938 118.974 li
129.188 118.824 li
129.438 118.724 li
129.638 118.574 li
129.888 118.423 li
130.138 118.324 li
130.388 118.173 li
130.638 118.074 li
130.838 117.923 li
131.088 117.824 li
131.338 117.673 li
131.588 117.523 li
131.838 117.423 li
132.038 117.273 li
132.288 117.173 li
132.538 117.023 li
132.788 116.923 li
133.038 116.773 li
133.238 116.625 li
133.488 116.523 li
133.738 116.375 li
133.988 116.275 li
134.238 116.125 li
134.438 116.025 li
134.688 115.875 li
134.938 115.724 li
135.188 115.625 li
135.438 115.474 li
135.638 115.375 li
135.888 115.224 li
136.138 115.074 li
136.388 114.974 li
136.638 114.824 li
136.838 114.724 li
137.088 114.574 li
137.338 114.423 li
137.588 114.324 li
137.838 114.173 li
138.038 114.074 li
138.288 113.923 li
138.538 113.775 li
138.788 113.673 li
139.039 113.525 li
139.238 113.423 li
139.488 113.275 li
139.738 113.125 li
139.988 113.025 li
140.238 112.875 li
140.438 112.775 li
140.688 112.625 li
140.938 112.474 li
141.188 112.375 li
141.438 112.224 li
141.639 112.125 li
141.889 111.974 li
91.9883 136.074 mo
92.2383 136.023 li
92.4883 135.974 li
92.7383 135.875 li
92.938 135.824 li
93.188 135.724 li
93.438 135.673 li
93.688 135.574 li
93.938 135.523 li
94.1382 135.423 li
94.3882 135.324 li
94.6382 135.273 li
94.8882 135.173 li
95.1382 135.125 li
95.3384 135.023 li
95.5884 134.923 li
95.8384 134.875 li
96.0884 134.773 li
96.3384 134.673 li
96.5381 134.574 li
96.7881 134.523 li
97.0381 134.423 li
97.2881 134.324 li
97.5381 134.224 li
97.7383 134.125 li
97.9883 134.023 li
98.2383 133.974 li
98.4883 133.875 li
98.7383 133.773 li
98.9385 133.673 li
99.1885 133.574 li
99.4385 133.474 li
99.6885 133.375 li
99.9385 133.273 li
100.138 133.173 li
100.388 133.074 li
100.638 132.974 li
100.888 132.875 li
101.138 132.773 li
101.338 132.673 li
101.588 132.574 li
101.838 132.474 li
102.088 132.375 li
102.338 132.273 li
102.539 132.173 li
102.789 132.074 li
103.039 131.974 li
103.289 131.875 li
103.539 131.724 li
103.738 131.625 li
103.988 131.523 li
104.238 131.423 li
104.488 131.324 li
104.688 131.224 li
104.938 131.125 li
105.188 130.974 li
105.438 130.875 li
105.688 130.775 li
105.888 130.673 li
106.138 130.574 li
106.388 130.423 li
106.638 130.324 li
106.888 130.224 li
107.088 130.125 li
107.338 129.974 li
107.588 129.875 li
107.838 129.775 li
108.088 129.673 li
108.289 129.525 li
108.539 129.423 li
108.789 129.324 li
109.039 129.173 li
109.289 129.074 li
109.488 128.974 li
109.738 128.824 li
109.988 128.724 li
110.238 128.625 li
110.488 128.474 li
110.688 128.375 li
110.938 128.275 li
111.188 128.125 li
111.438 128.025 li
111.688 127.923 li
111.888 127.775 li
112.138 127.673 li
112.388 127.574 li
112.638 127.423 li
112.888 127.324 li
113.088 127.173 li
113.338 127.074 li
113.588 126.974 li
113.838 126.824 li
114.088 126.724 li
114.289 126.574 li
114.539 126.474 li
114.789 126.324 li
115.039 126.224 li
115.289 126.125 li
115.488 125.974 li
115.738 125.875 li
115.988 125.724 li
116.238 125.625 li
116.488 125.474 li
116.688 125.375 li
116.938 125.275 li
67.0381 129.423 mo
67.2881 129.724 li
67.5381 130.023 li
67.7881 130.324 li
67.9883 130.625 li
68.2383 130.923 li
68.4883 131.173 li
68.7383 131.423 li
68.9883 131.724 li
69.188 131.974 li
69.438 132.173 li
69.688 132.423 li
69.938 132.673 li
70.188 132.875 li
70.3882 133.074 li
70.6382 133.324 li
70.8882 133.523 li
71.1382 133.724 li
71.3882 133.875 li
71.5884 134.074 li
71.8384 134.273 li
72.0884 134.423 li
72.3384 134.574 li
72.5884 134.773 li
72.7881 134.923 li
73.0381 135.074 li
73.2881 135.224 li
73.5381 135.324 li
73.7881 135.474 li
73.9883 135.625 li
74.2383 135.724 li
74.4883 135.875 li
74.7383 135.974 li
74.9883 136.074 li
75.1885 136.173 li
75.4385 136.273 li
75.6885 136.375 li
75.9385 136.474 li
76.1885 136.574 li
76.3882 136.673 li
76.6382 136.724 li
76.8882 136.824 li
77.1382 136.875 li
77.3882 136.974 li
77.5884 137.023 li
77.8384 137.074 li
78.0884 137.125 li
78.3384 137.173 li
78.5884 137.224 li
78.7881 137.273 li
79.0386 137.324 li
79.2886 137.375 li
79.5386 137.423 li
79.7886 137.423 li
79.9883 137.474 li
80.2383 137.523 li
80.4883 137.523 li
80.7383 137.523 li
80.9883 137.574 li
81.1885 137.574 li
81.4385 137.574 li
81.6885 137.625 li
81.9385 137.625 li
82.1885 137.625 li
82.3882 137.625 li
82.6382 137.625 li
82.8882 137.625 li
83.1382 137.625 li
83.3384 137.625 li
83.5884 137.625 li
83.8384 137.574 li
84.0884 137.574 li
84.3384 137.574 li
84.5386 137.523 li
84.7886 137.523 li
85.0386 137.474 li
85.2886 137.474 li
85.5386 137.423 li
85.7383 137.423 li
85.9883 137.375 li
86.2383 137.375 li
86.4883 137.324 li
86.7383 137.273 li
86.9385 137.224 li
87.1885 137.224 li
87.4385 137.173 li
87.6885 137.125 li
87.9385 137.074 li
88.1382 137.023 li
88.3882 136.974 li
88.6382 136.923 li
88.8882 136.873 li
89.1387 136.824 li
89.3384 136.773 li
89.5884 136.724 li
89.8384 136.673 li
90.0884 136.623 li
90.3384 136.523 li
90.5386 136.474 li
90.7886 136.423 li
91.0386 136.373 li
91.2886 136.273 li
91.5386 136.224 li
91.7383 136.173 li
91.9883 136.074 li
42.688 3.67383 mo
42.8384 5.57373 li
43.0381 8.47363 li
43.2881 11.2734 li
43.5381 14.0737 li
43.7881 16.7734 li
44.0381 19.4736 li
44.2383 22.0737 li
44.4883 24.6738 li
44.7383 27.1738 li
44.9883 29.6235 li
45.2383 32.0737 li
45.438 34.4238 li
45.688 36.7236 li
45.938 39.0234 li
46.188 41.2734 li
46.438 43.4238 li
46.6382 45.5737 li
46.8882 47.6738 li
47.1382 49.7236 li
47.3882 51.7734 li
47.6382 53.7236 li
47.8384 55.6738 li
48.0884 57.5737 li
48.3384 59.4238 li
48.5884 61.2236 li
48.8384 63.0234 li
49.0381 64.7734 li
49.2881 66.4736 li
49.5381 68.1738 li
49.7881 69.8237 li
50.0381 71.4238 li
50.2383 73.0234 li
50.4883 74.5737 li
50.7383 76.0737 li
50.9883 77.5737 li
51.2383 79.0234 li
51.4385 80.4238 li
51.6885 81.8237 li
51.9385 83.2236 li
52.1885 84.5234 li
52.4385 85.8237 li
52.6382 87.1235 li
52.8882 88.3735 li
53.1382 89.6235 li
53.3882 90.8237 li
53.6382 92.0234 li
53.8384 93.1738 li
54.0884 94.2734 li
54.3384 95.3735 li
54.5884 96.4736 li
54.8384 97.5234 li
55.0381 98.5732 li
55.2886 99.5737 li
55.5386 100.574 li
55.7886 101.574 li
56.0386 102.523 li
56.2383 103.474 li
56.4883 104.375 li
56.7383 105.273 li
56.9883 106.125 li
57.2383 106.974 li
57.4385 107.824 li
57.6885 108.625 li
57.9385 109.423 li
58.1885 110.224 li
58.4385 110.974 li
58.6382 111.724 li
58.8882 112.474 li
59.1382 113.173 li
59.3882 113.875 li
59.6382 114.574 li
59.8384 115.224 li
60.0884 115.875 li
60.3384 116.523 li
60.5884 117.173 li
60.8384 117.773 li
61.0386 118.375 li
61.2886 118.923 li
61.5386 119.523 li
61.7886 120.074 li
61.9883 120.625 li
62.2383 121.125 li
62.4883 121.673 li
62.7383 122.173 li
62.9883 122.673 li
63.1885 123.125 li
63.4385 123.625 li
63.6885 124.074 li
63.9385 124.523 li
64.1885 124.974 li
64.3882 125.375 li
64.6387 125.824 li
64.8887 126.224 li
65.1387 126.625 li
65.3887 126.974 li
65.5884 127.375 li
65.8384 127.724 li
66.0884 128.074 li
66.3384 128.423 li
66.5884 128.773 li
66.7886 129.125 li
67.0386 129.423 li
239.488 24.3237 mo
259.438 24.3237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGE+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/comma <1C60D8A8C9B854D0F84ABF2F32EEB7FA8EED76E620A4479EE0E29CEBD5D7E6591884C779204CBCAA7D477065F5> |-/A <1C60D8A8C9B64EDF9ABAB3D6B19B5B82CC49C93A7CA17E50CDDB377C52588B81292225BD4FB078DBAFD3981F1169229379F45CD94A50BD016A1B4BBDB2608F6EEE5C> |-/V <1C60D8A8C9B64EDF884A7D8E901D2F4533C16A14B652E2E01CB0C4A82BD4AE8D918B8A9135C63318FE8084BF228A8B1FD8F9> |-/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA563254EC441C4BC3817B6ABCAA45C3FADDF2A0C1F1BCD1456474D7370B95E3791CB0774B8A788FAD31DAB8E43BE1DDCC8C2722C438CA874C21003F548D691EAB87ADC2BE2D98ABE47C6EE8D76> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGE+Helvetica /Encoding getdup 44 /comma putdup 65 /A putdup 86 /V putdup 110 /n putpop%ADOEndSubsetFont
/DVPWGE+Helvetica*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A /.notdef /C /.notdef /E /F 5{/.notdef}rp /L 6{/.notdef}rp /S /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t /.notdef /v /.notdef /x 135{/.notdef}rp]DVPWGE+Helvetica nfDVPWGE+Helvetica*1 [7 0 0 -7 0 0 ]msf141.935 33.6538 mo(Total Cost, Alternative Vendor)[3.4375 3.89258 1.94531 3.89258 1.55371 1.94629 5.05371 3.8916 3.5 1.94629 1.94629 1.94531 4.66895 1.55469 1.94531 3.89258 2.50488 3.89258 3.8916 1.94629 1.55371 3.3252 3.89258 1.59668 4.11035 3.89258 3.8916 3.8916 3.89258 0 ]xsh0.125 lw
[0.5 1 ] 0 dsh
246.738 112.074 mo
246.988 112.023 li
247.188 111.923 li
247.438 111.875 li
247.688 111.824 li
247.938 111.724 li
248.188 111.673 li
248.389 111.574 li
248.639 111.523 li
248.889 111.474 li
249.139 111.375 li
249.389 111.324 li
249.588 111.273 li
249.838 111.173 li
250.088 111.125 li
250.338 111.074 li
250.588 110.974 li
250.789 110.923 li
251.039 110.824 li
251.289 110.773 li
251.539 110.724 li
251.789 110.625 li
251.988 110.574 li
252.238 110.523 li
252.488 110.423 li
252.738 110.375 li
252.988 110.324 li
253.188 110.224 li
253.438 110.173 li
253.688 110.074 li
253.938 110.023 li
254.188 109.974 li
254.389 109.873 li
254.639 109.824 li
254.889 109.773 li
255.139 109.673 li
255.389 109.623 li
255.588 109.523 li
255.838 109.474 li
256.088 109.423 li
256.338 109.324 li
256.588 109.273 li
256.789 109.224 li
257.039 109.123 li
257.289 109.074 li
257.539 109.023 li
257.738 108.923 li
257.988 108.873 li
258.238 108.773 li
258.488 108.724 li
258.738 108.673 li
258.938 108.574 li
259.188 108.523 li
259.438 108.474 li
259.688 108.373 li
259.938 108.324 li
260.139 108.273 li
260.389 108.173 li
260.639 108.123 li
260.889 108.023 li
261.139 107.974 li
261.338 107.923 li
261.588 107.824 li
261.838 107.773 li
262.088 107.724 li
262.338 107.623 li
262.539 107.574 li
262.789 107.474 li
263.039 107.423 li
263.289 107.373 li
263.539 107.273 li
263.738 107.224 li
263.988 107.173 li
264.238 107.074 li
264.488 107.023 li
264.738 106.974 li
264.938 106.873 li
265.188 106.824 li
265.438 106.724 li
265.688 106.673 li
265.938 106.623 li
266.139 106.523 li
266.389 106.474 li
266.639 106.423 li
266.889 106.324 li
267.139 106.273 li
267.338 106.224 li
267.588 106.123 li
267.838 106.074 li
221.789 119.173 mo
222.039 119.125 li
222.238 119.023 li
222.488 118.974 li
222.738 118.923 li
222.988 118.824 li
223.238 118.773 li
223.438 118.673 li
223.688 118.625 li
223.938 118.574 li
224.188 118.474 li
224.438 118.423 li
224.639 118.375 li
224.889 118.273 li
225.139 118.224 li
225.389 118.173 li
225.639 118.074 li
225.838 118.023 li
226.088 117.923 li
226.338 117.875 li
226.588 117.824 li
226.838 117.724 li
227.039 117.673 li
227.289 117.625 li
227.539 117.523 li
227.789 117.474 li
228.039 117.423 li
228.238 117.324 li
228.488 117.273 li
228.738 117.173 li
228.988 117.125 li
229.238 117.074 li
229.438 116.974 li
229.688 116.923 li
229.938 116.873 li
230.188 116.773 li
230.438 116.724 li
230.639 116.673 li
230.889 116.574 li
231.139 116.523 li
231.389 116.423 li
231.639 116.373 li
231.838 116.324 li
232.088 116.224 li
232.338 116.173 li
232.588 116.123 li
232.838 116.023 li
233.039 115.974 li
233.289 115.923 li
233.539 115.824 li
233.789 115.773 li
234.039 115.673 li
234.238 115.623 li
234.488 115.574 li
234.738 115.474 li
234.988 115.423 li
235.188 115.373 li
235.438 115.273 li
235.688 115.224 li
235.938 115.123 li
236.188 115.074 li
236.389 115.023 li
236.639 114.923 li
236.889 114.873 li
237.139 114.824 li
237.389 114.724 li
237.588 114.673 li
237.838 114.623 li
238.088 114.523 li
238.338 114.474 li
238.588 114.373 li
238.789 114.324 li
239.039 114.273 li
239.289 114.173 li
239.539 114.123 li
239.789 114.074 li
239.988 113.974 li
240.238 113.923 li
240.488 113.873 li
240.738 113.773 li
240.988 113.724 li
241.188 113.623 li
241.438 113.574 li
241.688 113.523 li
241.938 113.423 li
242.188 113.373 li
242.389 113.324 li
242.639 113.224 li
242.889 113.173 li
243.139 113.123 li
243.389 113.023 li
243.588 112.974 li
243.838 112.873 li
244.088 112.824 li
244.338 112.773 li
244.588 112.673 li
244.789 112.623 li
245.039 112.574 li
245.289 112.474 li
245.539 112.423 li
245.789 112.324 li
245.988 112.273 li
246.238 112.224 li
246.488 112.123 li
246.738 112.074 li
196.838 126.273 mo
197.088 126.173 li
197.289 126.125 li
197.539 126.074 li
197.789 125.974 li
198.039 125.923 li
198.289 125.875 li
198.488 125.773 li
198.738 125.724 li
198.988 125.625 li
199.238 125.574 li
199.488 125.523 li
199.688 125.423 li
199.938 125.375 li
200.188 125.324 li
200.438 125.224 li
200.688 125.173 li
200.889 125.125 li
201.139 125.023 li
201.389 124.974 li
201.639 124.923 li
201.889 124.824 li
202.088 124.773 li
202.338 124.673 li
202.588 124.625 li
202.838 124.574 li
203.088 124.474 li
203.289 124.423 li
203.539 124.375 li
203.789 124.273 li
204.039 124.224 li
204.289 124.173 li
204.488 124.074 li
204.738 124.023 li
204.988 123.923 li
205.238 123.875 li
205.488 123.824 li
205.688 123.724 li
205.938 123.673 li
206.188 123.623 li
206.438 123.523 li
206.688 123.474 li
206.889 123.423 li
207.139 123.324 li
207.389 123.273 li
207.639 123.173 li
207.889 123.123 li
208.088 123.074 li
208.338 122.974 li
208.588 122.923 li
208.838 122.873 li
209.088 122.773 li
209.289 122.724 li
209.539 122.673 li
209.789 122.574 li
210.039 122.523 li
210.289 122.474 li
210.488 122.373 li
210.738 122.324 li
210.988 122.224 li
211.238 122.173 li
211.488 122.123 li
211.688 122.023 li
211.938 121.974 li
212.188 121.923 li
212.438 121.824 li
212.688 121.773 li
212.889 121.724 li
213.139 121.623 li
213.389 121.574 li
213.639 121.474 li
213.838 121.423 li
214.088 121.373 li
214.338 121.273 li
214.588 121.224 li
214.838 121.173 li
215.039 121.074 li
215.289 121.023 li
215.539 120.974 li
215.789 120.873 li
216.039 120.824 li
216.238 120.724 li
216.488 120.673 li
216.738 120.623 li
216.988 120.523 li
217.238 120.474 li
217.438 120.423 li
217.688 120.324 li
217.938 120.273 li
218.188 120.224 li
218.438 120.123 li
218.639 120.074 li
218.889 119.974 li
219.139 119.923 li
219.389 119.873 li
219.639 119.773 li
219.838 119.724 li
220.088 119.673 li
220.338 119.574 li
220.588 119.523 li
220.838 119.423 li
221.039 119.373 li
221.289 119.324 li
221.539 119.224 li
221.789 119.173 li
171.889 133.273 mo
172.139 133.224 li
172.338 133.125 li
172.588 133.074 li
172.838 133.023 li
173.088 132.923 li
173.338 132.875 li
173.539 132.824 li
173.789 132.724 li
174.039 132.673 li
174.289 132.625 li
174.539 132.523 li
174.738 132.474 li
174.988 132.423 li
175.238 132.324 li
175.488 132.273 li
175.738 132.224 li
175.938 132.125 li
176.188 132.074 li
176.438 132.023 li
176.688 131.923 li
176.938 131.875 li
177.139 131.824 li
177.389 131.724 li
177.639 131.673 li
177.889 131.574 li
178.139 131.523 li
178.338 131.474 li
178.588 131.375 li
178.838 131.324 li
179.088 131.273 li
179.338 131.173 li
179.539 131.123 li
179.789 131.074 li
180.039 130.974 li
180.289 130.923 li
180.539 130.873 li
180.738 130.773 li
180.988 130.724 li
181.238 130.673 li
181.488 130.574 li
181.738 130.523 li
181.938 130.474 li
182.188 130.373 li
182.438 130.324 li
182.688 130.273 li
182.938 130.173 li
183.139 130.123 li
183.389 130.074 li
183.639 129.974 li
183.889 129.923 li
184.139 129.824 li
184.338 129.773 li
184.588 129.724 li
184.838 129.623 li
185.088 129.574 li
185.338 129.523 li
185.539 129.423 li
185.789 129.373 li
186.039 129.324 li
186.289 129.224 li
186.539 129.173 li
186.738 129.123 li
186.988 129.023 li
187.238 128.974 li
187.488 128.923 li
187.738 128.824 li
187.938 128.773 li
188.188 128.724 li
188.438 128.623 li
188.688 128.574 li
188.938 128.474 li
189.139 128.423 li
189.389 128.373 li
189.639 128.273 li
189.889 128.224 li
190.139 128.173 li
190.338 128.074 li
190.588 128.023 li
190.838 127.974 li
191.088 127.873 li
191.338 127.824 li
191.539 127.773 li
191.789 127.673 li
192.039 127.623 li
192.289 127.523 li
192.488 127.474 li
192.738 127.423 li
192.988 127.324 li
193.238 127.273 li
193.488 127.224 li
193.688 127.123 li
193.938 127.074 li
194.188 127.023 li
194.438 126.923 li
194.688 126.873 li
194.889 126.824 li
195.139 126.724 li
195.389 126.673 li
195.639 126.623 li
195.889 126.523 li
196.088 126.474 li
196.338 126.373 li
196.588 126.324 li
196.838 126.273 li
146.938 139.974 mo
147.188 139.923 li
147.438 139.824 li
147.639 139.773 li
147.889 139.724 li
148.139 139.673 li
148.389 139.625 li
148.588 139.523 li
148.838 139.474 li
149.088 139.423 li
149.338 139.375 li
149.588 139.273 li
149.789 139.224 li
150.039 139.173 li
150.289 139.123 li
150.539 139.023 li
150.789 138.974 li
150.988 138.923 li
151.238 138.873 li
151.488 138.773 li
151.738 138.724 li
151.988 138.673 li
152.188 138.623 li
152.438 138.523 li
152.688 138.474 li
152.938 138.423 li
153.188 138.373 li
153.389 138.273 li
153.639 138.224 li
153.889 138.173 li
154.139 138.123 li
154.389 138.023 li
154.588 137.974 li
154.838 137.923 li
155.088 137.824 li
155.338 137.773 li
155.588 137.724 li
155.789 137.673 li
156.039 137.574 li
156.289 137.523 li
156.539 137.474 li
156.789 137.373 li
156.988 137.324 li
157.238 137.273 li
157.488 137.224 li
157.738 137.123 li
157.988 137.074 li
158.188 137.023 li
158.438 136.923 li
158.688 136.873 li
158.938 136.824 li
159.188 136.773 li
159.389 136.673 li
159.639 136.623 li
159.889 136.574 li
160.139 136.474 li
160.389 136.423 li
160.588 136.373 li
160.838 136.324 li
161.088 136.224 li
161.338 136.173 li
161.588 136.123 li
161.789 136.023 li
162.039 135.974 li
162.289 135.923 li
162.539 135.824 li
162.789 135.773 li
162.988 135.724 li
163.238 135.623 li
163.488 135.574 li
163.738 135.523 li
163.988 135.474 li
164.188 135.373 li
164.438 135.324 li
164.688 135.273 li
164.938 135.173 li
165.188 135.123 li
165.389 135.074 li
165.639 134.974 li
165.889 134.923 li
166.139 134.873 li
166.389 134.773 li
166.588 134.724 li
166.838 134.673 li
167.088 134.574 li
167.338 134.523 li
167.588 134.474 li
167.787 134.373 li
168.037 134.324 li
168.287 134.273 li
168.537 134.224 li
168.787 134.123 li
168.988 134.074 li
169.238 134.023 li
169.488 133.923 li
169.738 133.873 li
169.938 133.824 li
170.188 133.724 li
170.438 133.673 li
170.688 133.623 li
170.938 133.523 li
171.139 133.474 li
171.389 133.423 li
171.639 133.324 li
171.889 133.273 li
121.988 145.375 mo
122.238 145.324 li
122.488 145.273 li
122.688 145.224 li
122.938 145.224 li
123.188 145.173 li
123.438 145.125 li
123.688 145.074 li
123.888 145.023 li
124.138 145.023 li
124.388 144.974 li
124.638 144.923 li
124.888 144.873 li
125.088 144.824 li
125.338 144.773 li
125.588 144.773 li
125.838 144.724 li
126.088 144.673 li
126.288 144.623 li
126.538 144.574 li
126.788 144.523 li
127.038 144.474 li
127.238 144.423 li
127.488 144.373 li
127.738 144.373 li
127.988 144.324 li
128.238 144.273 li
128.438 144.224 li
128.688 144.173 li
128.938 144.123 li
129.188 144.074 li
129.438 144.023 li
129.638 143.974 li
129.888 143.923 li
130.138 143.873 li
130.388 143.824 li
130.638 143.773 li
130.838 143.724 li
131.088 143.673 li
131.338 143.623 li
131.588 143.574 li
131.838 143.523 li
132.038 143.474 li
132.288 143.423 li
132.538 143.373 li
132.788 143.324 li
133.038 143.273 li
133.238 143.224 li
133.488 143.173 li
133.738 143.123 li
133.988 143.074 li
134.238 143.023 li
134.438 142.972 li
134.688 142.923 li
134.938 142.873 li
135.188 142.824 li
135.438 142.722 li
135.638 142.673 li
135.888 142.623 li
136.138 142.574 li
136.388 142.523 li
136.638 142.472 li
136.838 142.423 li
137.088 142.373 li
137.338 142.324 li
137.588 142.273 li
137.838 142.173 li
138.038 142.123 li
138.288 142.074 li
138.538 142.023 li
138.788 141.972 li
139.039 141.923 li
139.238 141.873 li
139.488 141.824 li
139.738 141.722 li
139.988 141.673 li
140.238 141.623 li
140.438 141.574 li
140.688 141.523 li
140.938 141.472 li
141.188 141.373 li
141.438 141.324 li
141.639 141.273 li
141.889 141.222 li
142.139 141.173 li
142.389 141.123 li
142.639 141.023 li
142.838 140.972 li
143.088 140.923 li
143.338 140.873 li
143.588 140.824 li
143.838 140.773 li
144.039 140.673 li
144.289 140.623 li
144.539 140.574 li
144.789 140.523 li
145.039 140.472 li
145.238 140.373 li
145.488 140.324 li
145.738 140.273 li
145.988 140.222 li
146.238 140.173 li
146.438 140.074 li
146.688 140.023 li
146.938 139.972 li
97.0381 145.173 mo
97.2881 145.224 li
97.5381 145.273 li
97.7383 145.375 li
97.9883 145.423 li
98.2383 145.474 li
98.4883 145.523 li
98.7383 145.574 li
98.938 145.625 li
99.188 145.673 li
99.438 145.724 li
99.688 145.773 li
99.938 145.824 li
100.138 145.875 li
100.388 145.923 li
100.638 145.923 li
100.888 145.974 li
101.138 146.023 li
101.338 146.074 li
101.588 146.074 li
101.838 146.125 li
102.088 146.173 li
102.338 146.173 li
102.538 146.224 li
102.788 146.224 li
103.038 146.273 li
103.288 146.273 li
103.538 146.324 li
103.738 146.324 li
103.988 146.375 li
104.238 146.375 li
104.488 146.375 li
104.688 146.423 li
104.938 146.423 li
105.188 146.423 li
105.438 146.474 li
105.688 146.474 li
105.888 146.474 li
106.138 146.474 li
106.388 146.474 li
106.638 146.523 li
106.888 146.523 li
107.088 146.523 li
107.338 146.523 li
107.588 146.523 li
107.838 146.523 li
108.088 146.523 li
108.289 146.523 li
108.539 146.523 li
108.789 146.523 li
109.039 146.523 li
109.289 146.523 li
109.488 146.523 li
109.738 146.523 li
109.988 146.523 li
110.238 146.523 li
110.488 146.523 li
110.688 146.474 li
110.938 146.474 li
111.188 146.474 li
111.438 146.474 li
111.688 146.474 li
111.888 146.423 li
112.138 146.423 li
112.388 146.423 li
112.638 146.423 li
112.888 146.375 li
113.088 146.375 li
113.338 146.375 li
113.588 146.324 li
113.838 146.324 li
114.088 146.324 li
114.289 146.273 li
114.539 146.273 li
114.789 146.224 li
115.039 146.224 li
115.289 146.173 li
115.488 146.173 li
115.738 146.173 li
115.988 146.125 li
116.238 146.125 li
116.488 146.074 li
116.688 146.074 li
116.938 146.023 li
117.188 146.023 li
117.438 145.974 li
117.688 145.923 li
117.888 145.923 li
118.138 145.875 li
118.388 145.875 li
118.638 145.824 li
118.888 145.773 li
119.088 145.773 li
119.338 145.724 li
119.588 145.724 li
119.838 145.673 li
120.088 145.625 li
120.289 145.625 li
120.539 145.574 li
120.789 145.523 li
121.039 145.523 li
121.289 145.474 li
121.488 145.423 li
121.738 145.375 li
121.988 145.375 li
72.0884 121.423 mo
72.3384 121.923 li
72.5884 122.375 li
72.7881 122.875 li
73.0381 123.324 li
73.2881 123.773 li
73.5381 124.224 li
73.7881 124.673 li
73.9883 125.125 li
74.2383 125.574 li
74.4883 125.974 li
74.7383 126.375 li
74.9883 126.824 li
75.188 127.224 li
75.438 127.574 li
75.688 127.974 li
75.938 128.375 li
76.188 128.773 li
76.3882 129.125 li
76.6382 129.474 li
76.8882 129.824 li
77.1382 130.224 li
77.3882 130.523 li
77.5884 130.875 li
77.8384 131.224 li
78.0884 131.574 li
78.3384 131.875 li
78.5884 132.224 li
78.7881 132.523 li
79.0381 132.824 li
79.2881 133.125 li
79.5381 133.423 li
79.7881 133.724 li
79.9883 134.023 li
80.2383 134.273 li
80.4883 134.574 li
80.7383 134.824 li
80.9883 135.125 li
81.1885 135.375 li
81.4385 135.625 li
81.6885 135.875 li
81.9385 136.125 li
82.1885 136.375 li
82.3882 136.625 li
82.6382 136.875 li
82.8882 137.125 li
83.1382 137.324 li
83.3384 137.574 li
83.5884 137.773 li
83.8384 138.023 li
84.0884 138.224 li
84.3384 138.423 li
84.5386 138.625 li
84.7886 138.824 li
85.0386 139.023 li
85.2886 139.224 li
85.5386 139.423 li
85.7383 139.625 li
85.9883 139.773 li
86.2383 139.974 li
86.4883 140.173 li
86.7383 140.324 li
86.9385 140.474 li
87.1885 140.673 li
87.4385 140.824 li
87.6885 140.974 li
87.9385 141.125 li
88.1382 141.273 li
88.3882 141.474 li
88.6382 141.574 li
88.8882 141.724 li
89.1382 141.875 li
89.3384 142.023 li
89.5884 142.173 li
89.8384 142.273 li
90.0884 142.423 li
90.3384 142.574 li
90.5386 142.673 li
90.7886 142.824 li
91.0386 142.923 li
91.2886 143.023 li
91.5386 143.173 li
91.7383 143.273 li
91.9883 143.375 li
92.2383 143.474 li
92.4883 143.574 li
92.7383 143.673 li
92.9385 143.773 li
93.1885 143.875 li
93.4385 143.974 li
93.6885 144.074 li
93.9385 144.173 li
94.1382 144.273 li
94.3887 144.373 li
94.6387 144.423 li
94.8887 144.523 li
95.1387 144.623 li
95.3384 144.673 li
95.5884 144.773 li
95.8384 144.824 li
96.0884 144.923 li
96.3384 144.974 li
96.5386 145.023 li
96.7886 145.123 li
97.0386 145.173 li
47.7383 3.67383 mo
47.8384 4.62354 li
48.0884 6.82373 li
48.3384 9.02344 li
48.5884 11.1235 li
48.8384 13.2236 li
49.0381 15.3237 li
49.2881 17.3237 li
49.5381 19.3735 li
49.7881 21.3237 li
50.0381 23.2734 li
50.2383 25.2236 li
50.4883 27.1235 li
50.7383 28.9736 li
50.9883 30.8237 li
51.2383 32.6738 li
51.438 34.4736 li
51.688 36.2236 li
51.9385 37.9736 li
52.1885 39.6738 li
52.4385 41.3735 li
52.6382 43.0234 li
52.8882 44.6738 li
53.1382 46.3237 li
53.3882 47.9238 li
53.6382 49.4736 li
53.8384 51.0234 li
54.0884 52.5737 li
54.3384 54.0737 li
54.5884 55.5737 li
54.8384 57.0234 li
55.0381 58.4736 li
55.2881 59.8735 li
55.5381 61.2734 li
55.7881 62.6738 li
56.0381 64.0234 li
56.2383 65.3735 li
56.4883 66.7236 li
56.7383 68.0234 li
56.9883 69.2734 li
57.2383 70.5737 li
57.4385 71.8237 li
57.6885 73.0234 li
57.9385 74.2236 li
58.1885 75.4238 li
58.4385 76.6235 li
58.6382 77.7734 li
58.8882 78.9238 li
59.1382 80.0234 li
59.3882 81.1738 li
59.6382 82.2236 li
59.8384 83.3237 li
60.0884 84.3735 li
60.3384 85.4238 li
60.5884 86.4736 li
60.8384 87.4736 li
61.0386 88.4736 li
61.2886 89.4736 li
61.5386 90.4238 li
61.7886 91.3735 li
61.9883 92.3237 li
62.2383 93.2734 li
62.4883 94.1738 li
62.7383 95.0737 li
62.9883 95.9736 li
63.1885 96.8237 li
63.4385 97.7236 li
63.6885 98.5732 li
63.9385 99.3745 li
64.1885 100.224 li
64.3882 101.023 li
64.6382 101.824 li
64.8882 102.625 li
65.1382 103.375 li
65.3882 104.173 li
65.5884 104.923 li
65.8384 105.625 li
66.0884 106.375 li
66.3384 107.074 li
66.5884 107.824 li
66.7886 108.523 li
67.0386 109.173 li
67.2886 109.875 li
67.5386 110.523 li
67.7886 111.173 li
67.9883 111.824 li
68.2383 112.474 li
68.4883 113.125 li
68.7383 113.724 li
68.9883 114.324 li
69.1885 114.923 li
69.4385 115.523 li
69.6885 116.074 li
69.9385 116.673 li
70.1885 117.224 li
70.3887 117.773 li
70.6387 118.324 li
70.8887 118.875 li
71.1387 119.375 li
71.3887 119.923 li
71.5884 120.423 li
71.8384 120.923 li
72.0884 121.423 li
239.488 31.3237 mo
259.438 31.3237 li
@
0.5 lw
[] 0 dsh
28.188 3.67383 mo
28.188 174.324 li
267.838 174.324 li
267.838 3.67383 li
28.188 3.67383 li
28.188 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWGE+Helvetica*1 uf/DVPWGE+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (serverdowntime.eps)%%CreationDate: 10/4/10 2:26 PM%AI9_DataStream%Gb",KkB\ViP3@;ph>qG&P<4nDK?4T_kA3K>`[7+XcWTl"55S>O*RqWnnZ4P@S$g"jTqtd<WM6Cl_-hOF+*N"KO7MMlGs@X(rHp6`%:F66p17.V:KDW=iEGAN%_5I);WlQPC/B=O>66_c>V9gaC;.i'(LU4>/W$>'8Pu3#fRHFJ0I]N'7("Ysn)1&qKpAY_;]hXJ8\t"i%%rLVY!<[f&b?L,;==<C6AXdMD?@,W!D^R"&rIeRA:BT&(e5KTe]Z1*YJ^7Mbs`4R1A-]\dmSc68PStQaQh1G_XSjGa*'n<t4B/;AI%e1l`u<&qZWU1]Y`Z\_@2a7AG43g38F*<*gPZ<?fGa)\^Ik79^^L`a=pCsndF7`4CCl1R^hN;K`FLqtLDksWZIjAPKHI[=fD.2$$`%[:&s4>gf7d,Y=C2?LaYZpoh@1\CKgQB;=]=RI44]6f:q4bV"8BKk?oGl]]H\jQXXr02A[*4TI$^PU!@PO1Je-HA(1XpKIV"(B;E(%T,ahLeXClA1UK)1rAi(Vn'A9j.71)^D#Fqn"G"k8ku\p3NGe6!j#hoh-Bg`TEL`+Z?NiZd`m(D`IjQIa`6k-lqs_&LC^.#b)-X#g%8aiE5bbI,<nhhc-Y.AoshOc)9Gk?hDom]a9T*u:UFZ'ngdX]_gWZ8),Y\`=oP&t[9M0@OUeO+lHpoH]8)Fm.DUU;.D>I,+1P=tI[%^])tpr\K1$`M.j6!2&L4I-,J==fKJ<"TeT0!gF#nPR7I@Xk2NKnl@d\[F/daPtj]KF;enje+L<-AhF=2E]L(N&2=E.kAjBLQ\/K2%%6gIdV#n%S'mR&_JW`V/lI>,r>-FjQn92JTjn1Z[LQ%UZQ]-^l84qi8\Qf\n626+:0IQXK=th=LVPFW4"J8KqAd"_[D]'2K?'l:Q%_Cq8gHpUI/:8DHg&U_I.i@d<I3C08?R\YG3"nR=AW)Kn;1O4CVj93I*M?HQ@8_t^K-_i&!-Y"C7_oUpsP&$//:^cCjT?n3R5r*4R%7TKrs67nRs]YXe$jB\,pI)7P(*Edme,U8'ln-QL1Idfp0OmE\^=40>*..70R\\*FQ2'_-+:kr3WDDGJ<bfT'WjCDMk?dc6m?DN>R%&*gssjIHU`K=At(8L_jo5+rbFh_77r'Cmc'662Ga0.?:*)0ZAI8.T6TbBm@J/+RS1Ocu>&p4A5>nsU3$PL0u@PC<hn@-$m9aE&S9%LK\`eUil5l.4>/:a9cIAh+ZCi^kT3ma8a6[<O&+-isX#^Wa_8&-["mAh(A)BFoT;4l5l*C?!V"Zb3D%'Lh'&ngF>&@Z-)*lq^(Wm%2`Zo;s55Q(MOa="k=LO,Qi'K'a`$i*q<&-_;WN]2Qi,$;aD^`)q3T?hhq>*dG?4QA.ZkA:0DS[%PMbY4o$8,R<ll$J0DS\MOl,G2%nrHfM&UFq&#G5O4a`$tkq2=CU-S*;<]ujsQohr5_buF"/oREFXVK+-"KV"pDA>YfpU&V1I^V6B?$2g,a)Ja*fU)#Q[D9EjORa-=C%pIVc[KX]@d;SA[$VYCi9OFYYT<rO3@QW&BLs+e=^L3]cgIr/K0ghgh>PBQ&<%GE26>&M@^l]#L_Oe9F(ZY?8Kap[8`QQgq4.]EUC%<VqLl;Z`@%R3/G3K9<+icsNc3,_C(da(GBeHj4aoMW^foi=l7:aDI(>p"uS\X-nr-R3>@!=_J,q9(Cu/e2I.-HVGDU?(+pMI(Z9q%C,$#jaIMK0P@fbsOCkk"[P"t\+($lSOLG7[TEd4j*pmY_O,rWP^.(REXX)Wldbgk5f;MR/Um=$nZS4`aJtrQ*@ffd>C.XB)\2A"S%i;$9GY)uRoPGml5ZHm;s9QGPq^K!:E:lQMtMM"fP%+uoAS3R[j'?5ZKSggJ.mpm<u6fu3t@(44hK01<a8A\'sDdD3CoOng/b>>e]%mg_Z/?n\O,&!+L[-M2IbSi'kP0gL:Y?"usJ5'^Do43Upc+1U.&Z?P@eW,fOZpLTT&L3<o2-EBd?(%7BU]Ye;_d(<S<].Z^J"lBX1%8KIYs\ru`tFsir.Qfo')-S,)-b*Spo-?3g3&&>p)-p&01n.N]o[3VN"^PK)/#aBO49NUJI19.,OUQS;n1pEteauj4%it7TR>50bF%/COA6kFEAZ],89tI\?-USWSA:WFeVS$[Fh)Zrk^j3j$%nZ[A6@pQ0).K%.ALY@@E1g4GcmC0dC6@8(2a1Auh?e)8!r;DhH$hf*jA%O6\>LKt^J'C2`8D\;fBFiLNT@@mbUFX<1`J::4+[CJA+u!jr^m[qEO.ZH@PSFZpd8.$M<I1qR%B6Q0sM9'/n/X=QF578_W'VTR%p%\Wh7Ras0neXA8GOUO#L/l_iX&3GG*Y4B6\PCUua<Op@lK!&\J4,m170)(7S"X-i62dV99D9Ib+K+cf-OG>_#]Wf!KMJQcQd0%3T_%a5m*^S(dNN.Oo7Z:@8doU'`IR9t:L8OCX-X1cD1AH'C-K&9=R@r2.]s0U>7JQK\:.lB`2;O\o`mj&'H`mM>^iQKfVDcN%rX6/F%_%lh%i811JHF8d;pV/$03/bUY$GK04%>RT0*OTs^&rM[7g3RO[bHJQ;E(1/e%_XS+9F3(E1DWEfspa_;pE/,PXV5oI4d!OCK(;"R4J%)9,E*!5Y2'q@ctb2^kHO5XgjIGU!0!-(&`d(Wr,_>L0F]3rLsDf(:E9KC2`Ijn>L]Lb@p?Z3I5+T$#P(b0g1'?K5/*r:D5Y)L>0C%,j^uR1JfPnDFm\e/7n&"a=616F)hTFQ*gBf:8.323ac..l:/sZ&j0Jd$WWV_a<Obe1T/A1phronnhAnBC0)+1SCdHaitP&%>[?)7%YL+?2MK&^jIU/f>niCd]*g:4f@2Yn=@@:<&.fu?/BsD7Y's_<>hP-hk:0ACE/ZKNls"W$GKRQhO=f!9,_)as^c2iq3!qhkN;eb0g%]T$WY,\_#(<LpouPsK(3kf4oVW.EjL]dU19?&uT;.r03KSZG-ER;10C)j4JT;am('arp(j.\3Q9.Y\^@),!k2RTkta%^jce\Z@++%2-HhPQ1_i64GKGWWasna17sn7`]+K3i`C=+krY0XcUf1;[/6o'P]h7$HWq_eb;9@P=87lr*le&_6sI%h'HWmB)*(fKYbam'-c1?6%ni>5IKXl80qH]EDWQ>nh1M[\)O6W!r7c8-@Y.4=8X\1rsM>s^7FuL1:Md<8gM/UHJ(LD#[:/''9X3s,0Sg;"2'pDiGOr)Wk8p1V@%%pP!K*<N#iga:EdI6ji%9j1J$44rO?oh;h]>*n-4l:Wsor0"0l8_H]_iE8V.\LN>G0F*[sD^=-GWc\E/VH!L7eIY7Xg+DM-n;g8+%JuD@)P=-T'eqRHis!-DNUB-n2:?@\UZcT.1qB0@lG?f/;cK8WoUJJrc5P*8rSG%[ZIF4Z[1EVh359cUP18SkaS=l#o;js@gVU?'g%]md`8e68F=9Opn1]ma$n:??4Sk$!&*7B3_6CJ:eXRrmeFpV-E@VPVien$d8r*P$/%^Zf5rnu>6o.OqXq8FnuBVao;%.<UBTGongd%F[r7qLoNO7lAiq^k+q:4<1U'iIEYrqgMM@dL_HYD"t5@&#JlmtcGW9rAhb#^E$W]8kP`+SA&bVW5[aN3TJm(W@CP&_:n$;EHIQ,b%l&<W3-G>Jd))Ibh]&KA?q.@\bPjT1%dB"k41Sl"23pjDRT0DAa\3HSqHGd9s8cJTW*&</WrisdG:]<GEFPfO:<,X2%pH`TKRJ5Zq%>bQkC9>1AL`@4Kd48RQj&c^\O[g)UXg0MBeX,gR`hKnXOd,Gt!nM*O,/Ik7V^A'ljIh>5-rI/Yn1S9\3*K_e5`@+<I:&7du7^,C;%>r3fr*8j&+,9mc[7cb_f:&IY4:*+S*s7B]O-pU^=I]n-GT<u[sf&i/.*\#)CA_d%sDU-;8pX"Sim=BRq`i,M,(H)P*CDG1LXf86-%&H>!qB:ksp'Q"F(;kg^6NVZs*4/8Y]Y!tZt5b9(Eg\!h2F?h=HP"MWOHh+gF8W@L`j-jlJRM9mQV5D]_6bQ20@aOC6@)#K*;Q\Kc%#XM:U@'l!jS.@hfPPLm/Ra2NdNeZOPdqPNMHri2lAs#-%]pd4O@buTd$Al(q-<%<\B*@WeH2jr)MF0Dc4>Q237]erR33F;n6\tHX%c1jrf;-U^01DYD">agjqf["+3#/NY(RCE%V8"/ZOh[qKbr_OF9o>_RWJJ;=mU@?(@AN<"4K]oaKX5E<X^GBOI"71EQN$kCg]S"9j%&%+A!Jqf`?k*XVKpsJ[0\6OnW=:[s_kAhH;2+B7s>8fp_b>cI[XQAWUUpO&4LAdGur"/gSP(h&,[!,k1rs[VVr[UA88j5%Al6ueP%<s6u.Zln:*i]A#F8bVhY5=\/%a_3k%(qu&Y+Uf7g=_m`q0D?&b9uDGE)>WMEDkO#QhEN30Q>#s2@GCLY-K$'>iBM1/+j,UIQ6*!^%0'Bp9khONr#M`i:rpjS`rUaHV7X\iqg*1*qdUW1hlMkMhEJ@g;Sdl(&NBKiJoKAHdZi@OA:i5M>:uQnEl]i7F170rn3bBD"PUenZ%Z3<:ipKJ;.I38KRs16jK(peS<J[uf"-YG\i3dpPh%h^;qcE1*cpX*M:JIOiG%K@%;UG4VsjU#BfrnH"7CtCKp';Ck"KHV2)<A9F;%A+8FK?[fH'+s-1=Z]8g-]%G%$f!%%%j6'$u5^q)Z7J'8HP/oGUd1jrURe4SZp,$dJ(NQ;SHlZjL&:<n$7meO,i?/%]R_s)t`l=OU%#,4?E@kN*17'YiOepiSVs7"/0NNE0J&,L:%^3lVEs7.Q9a8X+lf&&nlmk/Rm4!Yc,M/W:hLc`8E^F"C*PM*_"D=4TLRpuCm\(om*%QN'&&$@eu.b[9TmrHHgNrHHgNrHHgNSbtS*VZ'?"l+b^7?UCF#_h$6cLBD,e%L:/S*@d?M4&d^$GGnL'mng"-IlipA6r.%Yrp8=3%A+JM9qM(G^%S&R#4\j:3S643/U:Dad3st:dXhKV`><LWG[[U^jUS_G+;kG5!lE'#-.kCSAh(59H1f8<NYRT(!'p_]e30k6jjUdmV%5LO&kORAf2j3h&k0J@ILnB/hed2mgF4_t[H:&^73GK7sl;-,S+h"HO&4m3DREP+/u9mZ4&9Upjbej<A0P=b)TVhl.q:Y"`XpA3U%%3$`Wk5BD>tUQiX9ljp&+:`A%-:1+$89r?YNX"J$m("H@`Vq%E_FlE/GU>?Gi,cN,MA?,Iu586/7dYTRVdiW_H`NC0$a>IIWG@'YX%N`kIKbRJEL96#-,-fI0P](V#Ih]jC+>=c8mJ$7DjMf(Gej/W)S6M11?Y#-4>roG.0e*G5UZdI_";R537L\YWlKH8ur#fYS:a'Zjp%1m\07U&=q@V:50gr<IE(^PiBGI]r?-SJLf7l!aq\6>Z=skPDAgGP:95Kr'ZVQNVB?<$EQ_ZVIk''Yt['c*ZQ#IsG?<enIbVG(k[#%HQpVO,S%0Vj(:3!rq:.>+XrIA2Uc?#Ak3hRMXN?A'o&2\);k6#i;Au'?&n'2Nef?Xq<P+(0rViMKRl*uFcds1FW<E&j&kbBV?]&l%MlM_CIQSCX^%oIIh@p(#Xm9E!KAMhs.iiT!?SQM-Y=QEM-&XbQT2!8'3:j0X(Fu6aIS]CYha9Q6Atm$LDDBeW"g:6b+`4'.SGu]]%Iek^$i;)"%05OL[L1]3<pCQSsU\W.65u,:jWk`?f5Fp-?W.KHhku:8G8P9+<[3i6RW&<i94)bXiT0qY*6-iK[As:eb3c:WkmJK7;%k]QjQhLCA7RfisHWV[C%jKmE[H)c53Wf&\qO\Gn;K2lZ,RYAQ3@.KBB^CpQ0o@LRe=f^BEpL\o><Kik.m\ON2pb?]8M#Oa.=C+$O%+W&St8rd-3Y&5Tq>17EGR&8ok9NS:Fmn"c\,Hk?rge10<P+J=L:)%Ln*V`;!fgsdN`XSO2O'?+I"Ol48hJ]C*LpMc-<6eAA@K#X%%2GJ-lnUJL&$phM]lF2Kg'>1&H6(8qN;#N0QG]u$CZcVE8jr^*^j\EQL7RIB6n)&S5`uPU0hAFF?@.]L>)2$I=OnmDYF[hRtfJP:a%T/de61rUFDhr.+CcJKT#&WN[?J&[4p;5B-EULgeU=7g<Jh$Qig,#.ueSp3^n$rW@,%-E;G<gd8G%:LKh)rSdCgE,.(#c5u^+6V<r%rn?&%h/kJ1O7_1[2$\%RkSL"l^0`HA6P%a50\/CP[ac\;X_:h!C9E+VW]NR@4&tj;o3<:oTB;5*`s<P_p0nRgpPC-,Ah2ghe+KTE%I\KJ=`-YUN-pYkfH$E&`Y;1&Umu4j\<88S,*n7^c\oD38;Vp=G7>n<.*`!D3\>V%]%cHbic:/H"LTC&`CJIiW/<f)\lOm&u+c44=%*N8k=dJNf?S2jUHe5\<?oP;rG0V.o$L+SCh@Tj?sD-IXL*@m0,H[X:1^"0RHRgiP2ql6I;`$eY(C3TN<6t\>EjECh+e7PXU;^'V,%\4Y2Hm\H<h9`VRA!!O+p&KU]f:&[f/V=h5M8"eTl=[_HgNNh:Y-U(heqo=#!j,_$#!m0"aRWXBMp]Z77l>!nU#;+W12cJ9l_5BtN%4]Fiu%>:+S`E3UuN"DdDHlk@JRo!b0%TTcUdr%mW2Sd9H&]hmC_Bt.(\>ZKj#T%V4,2o7S9d\;SeKO9mWZAL*b0$Yge>5Y%U:-)l%):mks3(nAjj2q13BSX+XB`]Q[#t1rK0(CcLW#s*,6WB?1^P83W*[`:\ie%!<=j7I9A-g_LW/rLgRW13m*YE@n>F]d_;_@]`Ae<#5%AGLC0[I1R]8BAYdBCNs%p8JcsZVO^>Y\4Xd\O7gJ':0%*Xk6)e):G4jrhn-)mHN;&f`)KN+JqDZ'`[+9])k9n2mhO]^]Fi8Z5tdN%Oe`=u)fq;bR\EZIS7O;+r#.nB)'Ws(J,>;A3pHSF^p>>YkkuZAPd'0I)JX!*rC%/e0nKrd@2j_I_@CBa1H&0dWij)oVj_umF#-eY%+%koWY;P^SqP)c2@m(dV81KVrSNf$%)qX<_Vfj1OF_8>$@O\Tn4B$2*Ei=VI]b:L;aMceKaFp."QGg/UFP`<r-(*0/^A*cA\#$J!%*bZq0<JKK<@`n`'bo8&mOr]>OFo!*)s->cXo7[G7s4Q[([%n/A*"ue\P0/`O]S<Al`iNT;acYLob7[;)NfE[_.njfWN[o57MqC=<%YM19Ui>qMu`t^nU[9LPBCp[)_IR>]U$?%H72mA=,jI1NoEK-h<XgW[ii2(0'Sc-Q9+u.XC*>E;\.:M$9aeFT5Ib8HBW&FVBNKIs1%Zsg.7%AIYd;\;'^f[g6@^,6SK5^>>(6]dQ:+>ki,Kd3R*1kY%DU:P5W*=?4'`6f-bQcjab4K"eOTM(W:K7e!?.`1>"<hkAu>:*Od%Beq:R4cVpgT/-M^n]@?n]V#t//)P<^[SXW*Q)jAa`qTK/`GVaQcJBA%;Eh[=Oo>cB*[;VTf^[e20,TLg&ncb4?`sU,HTM7oft@pT%Y#9gCpcLRuVoNHneaI&=oW97#ZU-SKO<-ON`8BjTbcS[(eP^Sj<NJk@L"<KU^\MW2hi?#UV:^lVp'%p`geG5ghOW8uQ2RUn/lKh#%V%/0<AS//(^A8/S5/6f"r4tYb[JPdBJu3N*#jkDtnDHJR1in4]@<W]UH9nkeN5I_e1uuQ*2!!4V=o.i8=N#8P0[nM^qK=kW<'g-I%"fL&Mn;7b<mPied-ASL=WfCod2#YLiT!S$%Tb5pV!Jm2h2MBiPolp&7d7<Z^=658tVj#6roO7='I<Nagaib6!I2K*?/UEb19&=tS%A#>e\J!B[Z4&,<R9Yd`.?P'ec:L9FP/ah3:kt*nJIQd*XbrVDu^SK%RSaI<>1W(0eW@qqPCGL8Rh<pdSRs)ADIn<geb1=a+HY/iF%JuIGrqSmIehDGOWo)=?F^Rnc"GM3>hCiY<7=/MNHpA$5o.:Ata_#-RYl4%rp2Kl^0?.I]Oe%F%\:;b(/%G_DQI4gI>9od^u;(lH[%S#d%VZ`PfbVlA2(F_oUmlf@k_G\,:e?7VSGDfBr,k\`ti0?(C.X%rCJK[BFVH)E`TkNVi@GbOF;og65QYCm9J)hY"jVpXm\^0o?&%H@>a)rfAl'1jT,BerP"":bQF%?)nKV_;n2\goOG_53a.lG.MsH.Q2C>68)6G,25(aIkV,saXnJ0Ao94uVjXe2Bsnq`K%0%54J_:"%p%*TWJLNhK[eB?!f?Eo]^bu^D!d#>8b]Nm^-^-(tP@gAkc,%#jlP0(;FdkOs]sOn&I:5qKVjHP:*c4%[-'2_Jg?I_(O?lu_2:lFb%H'G]"oJ+Ho*F+=N3h=SLRuPIIg8Q_rFaM$OHBt+.M'pNF<Mp)gc-'/(][LJ1b87et"\srPF1mRjCg)".>7,5N>BSY0+(Di8C8Y_t%<4=4[i`Dcd$(5u5gg3(Nm.<Bsh`A..oVmXio#jZTBg1.tkh8"JE72,B2rQB"g$.5h98$/("YN7XLqmP!5Pp11UB[MSjnGKbfprW<%2#j>K8TSco,B`jRMs*4p"b0i7K*gt3h^X<Q[@HA1RNKdhctU^[WE2d_[!-nK3o-:jB3IA7ZVm^-@MGr&Q4sPVNE:]gr:;IhW23,L%CoqkdLJAMo:+,YB?slV9AaWEnosq5(T_qL]Q?6?lNoIWFf<,Ue/o[^Tn[dDL46:+m!+2.:TMsDqdi791l`Rf46(K&$HpKoG-^._5%k,N%r?"ni8*P>UC$CugZ=fK?YO8q3(>J?(fn)hQoPca=p@rgh1JLrhTp)b"Ve$q+Dpu]QGX%d=&X^bX_*9_mNV$;a\a2s<op"QD9%mk="TbF;b^XAjcgHhgep>JGT/0fl]nS]kQUbg[R*#40%6cMXUPHdX,WHh1+&>F42aS8HoCVOp1iW=`UKqk$mS[i\M/;<uZnn'J%:%W=6%u;"Dp.m?`kMdBXIkpHl^-1jKaQfg(MN9tXh;Q^2^7Uikon5oA9?N'%![Dd0rHh].\`/P?28d7R"`I@V2t(>(T!I*:Vg4m`XH%Cis,g)VsAA<L_G(Mn06M;EgsXb%(ngM&2''\#E6LNeb'Cg&CD>op`"HRDW69YduG.?<3!3bH#GAYW552)J=E@Co^IKH`D9%2d!-?%(Jtk3>:(ik3n)i#LX?l>X!)@W][5$MaVqq%HPVqj2I4).5GR@E=;SEM,"^:TI-'m)-.^:[G.<6Jl+8rVFq?@aGK`*:g`Xr-pqG7[%,bqZ-@uF*EZBMg)5?i5Us('][01b6:<Z_]]F-Y7GonR>+::C_eM%@/G7\B*j-P4:g.XXI+\Np>m/B(PYFuMA3eP<#HR8%gn$CX^g%TA`W:Z*3I-Ui?^Vch(JMSZ^LI$-Q)KmU4FVH6"ht2jNiIkF0&5[HY''OgaZl1^@<a=;mO7&kF9"X%k=L43a?:h,nk.nq`%;TPc]]%4JmLa9>X_?QZ6#$W3Bn,?nRn:lrt`BEmZ'He5U/`VPkbc_hbg,P*T(gm;IC2h-\5\mOJ-8OZ`][#^R^u+]aLu+-h)HU8[pO'ad+9%:pC<-221NG=rpC6a=,EE.]EA)gp<"tU$f,1d*GG5GNTRK"!U"rbZs<Roo.u^Q[=lJVNO+90GP"r+,+^5HR6egZ6;lCN!?lf6`Ohd%BR%=(k#8>ci<.3D$?RJ((-XR-a"#]pf\0C,841*fW!0#Yf^[%'8>,F86.MmAK3IGIf3A_J*bft\1p0aajMas_8-a/A@PlI%8*d=X%lJuRK'/m:[RSNI,%p0ff+gG:gXYk5)/_:O&o9NFpN:XqFV6b`2'm-^0XS=*uR-d[VcjEluND70+(Y\5/_O,37&Qa=N2SAB-H!bD9%I)4>u*fELRE;'MPKD^'Bn[LPin-)OC:[P+md?:)iT(FG;G<pOS9cW)>+.HpDW!lg%HGm/.-5"CZYcE=%I\7X>(+WbT>DT^0`t[0o%Sh$JV0/``S?9U+lgD3m_XEhgFFrt)_5.+l!r)hr32P>L,Ddj]l(eAJE@$pVg0^^$"8ulm9h.og:\E=1W?LGl+:05e=6X_n3j2,i)%fQV6#h@_BRTNf4aETqL7g,-F^N'))h&2N.bA%ql&4']'G4k@$l)GuH9Z:,@RYC")IH8KJfY$4Idk*O\_l)j,Ypd:d-poM;B>I;sf%f:80@Ijk#$@`C=mNk0cKdZ*Y!ip<*gN2nO`/bjd1m?kB<Yfu8Y\ndPICmKaqM$bCOnlWe$$?Jpf\d^8iri5;:'"7DDP8U@mrQ`^T%foci&b#smIIF6t[jsuRc)UOD.;B(0%Tc(',OMj#W+X,"3N5s29bX=L;8>d72cKa"WOY/I@kTnTe?G@K!?X0_+*O'G@p7&n-:h,?9%G*^jHp)I4MN*3G@PGZu46B#+p`;!>!9^i*<M(M@>/LF>DNT0f>cZZd$2:']*?bYi(FG%ppCK84k%q`e2C[p*c.mNa84FVRWS/!uQ%p6\-C`i$AEd$Y()eL[=#k\MjS*Ac?@\VRB>CR<1qWF1PEo'1bG4uYi37)^r&LbB$$EBmeg"4>5Vg4:ZXV%ZNB0NG:o[ao%"PsJ8F%h``r(0;=Y#FXD!`jV:/5#t".%$8!^scdRs.+rsc'280RE<,4pW0d@c@#kC+VZ/kGP6^"CEfq;A6!0EufFJ\H<+TTipd,ng6^,=8k%im$#YH\sBcaiIh\Vk4HdXP^E$P5G>E&<pa!YFCDthtjmiV[Pbkia\[GUYS.=d&a0K5?^\]?mSkY//l?qGbkFC3Y^`eV^dSad0L]%%nQ_tn;&!US]ADIBMrGKf'%rH+$_$I3@3ZlJYZ2Ut.M[_@IWo3DEFG"N*,=SZrR?5ka]V:h)=h7n^t-oLTq3hhDYHHo@'3KYW<rBP%AufK,U"k]:WCGXsIAf;PLl[9Rg3jN7hXdEG>?d`V#,9N/[Eu1`f,.'[oV/TJBSC0?GQougdYcH_*FMau!agi:d<1MS)]u%qOK=@[%4Dl$Frd;o.NpsSfKP5+Gn+\Y%ddfX.WamiG+D3\b?dO8".mlKu3T&g0;KjnM4$'7J"9HT9#IN8]Y`d%s!0_T2gcAT(P/jrVdE8cW%cuCAT_GM'<[_8?#)a.IHn'!*g,WMgQpm/.0=3r]Km3s.9G/SE4cgRO3]F+]PH`NRe6.'4VCj5$(Y2!=B6OIIpCi>5e<EkjP.F_8I%N`M9IilD7+;=IAIqNc!=m\E0d`><W2a2n&lkBkV`YPs2oTuOHOEB*(il/YRC.X['ZH_TKMKEb/UAkbkNlU#n61`!>VoW^C9ZOe=r%'@[aFC%9Z:U<-LDbem!!d'K!61g$+/\*$]&MSZ,U6T6:6PtME))JeW'',MA-PeTInB*#1Mm96?"?>q!gRS/NMO8I:aGDZTr_qnr3%4IT9?^#F4B'MWZ@Eiu"nR)oE:%m3uM4!U0Ukg8,E2Ps@5/K?XSNSiQnl2\845??<J.r!d915"[FV2T"See`ENZ`#VEj&3?S<i4!;%Z"91i$CP[*:Sqk;3I>n,c8Ps*-?hjD^W16)M"[9<BEnee_(O?"H\L2%3f;[sEBS=TaYce$l!e54C7(WU(P6l-MWB+P`u+7`?Nh%)%4*q0DbmQCXYYo!!r@)R-MU5=L?#,'uAu"1NanL^70sm7<9j6!1YCIRddFe"V[p0?qE@9Y5[A%?o\=M`lTmjiEmE(9-_mn+(Fa'bD%L%MA.U>56\@UiB7?)M.rkHO(Gn%_c/Dm:QE-rkr-5(0K)DVOjtV/&X=2>+NJL@VsmDUd=J]a`fUCMa/.2^iRA>cKm]FlEbSm7pFX%'bY,UCXjBHd@F%E^$Lj1J6ZVjC`-/uC1L$*ksB1mGbl]rW[+Z?O`!;5[/,5uC1[Z,6SIW)EkaqZ>L]%cqoVrbVBbEO)rlsIX0Ibn%VloC.Web*U6<%!K0lt(:3YSt60u0Es>12$h#^T&(V[7TE/pDu>YH!6i6r%W3bV]c&]NjUtnNBg!W8CkJ0sbo,2L3u(<Fb7Z,NsZ<%XWiMF5(X:%h6DPK3jVT3#WfrYj"Z;65(ZOi8G*lgVskMO#WgL&i[oo15(ZOh(A&A0B-0EP&M:M3$sh@@Jkh:@oG0fl>uQ.kRs]:8%f,-RG#WaHPc;P.BM1Aa64g/*?L<_u7%a4dY%a!:a5eCN=V,usbD]K.++)b9F!Ub_rnYK]ueurip]QJJWeC)N/n`t66/"jBDg;1nI%dTb7Cqk]YIEm;EraXs#P>"3GiB6HE.\I8\S*%hFCD,Z\u;Df;nQCjep\PF1E,1"Wlr1<8m7&_?_7m:gN*1ct3%EXUkap(Tn6fr4`%P[&+Yg=(UaL^`Z2ljuGDF9^mk$DL(qp[NcHZ`uX#HbJ[ee4\%pC5]]U(d&rbfIa[d^dJXs/SXI'@(-<"D62`'mpfiHRGZhO"+Wf^%BAlGpZ"hKKbOl&+)q2B+7>sQ$X6udI];3Pk1UVEMV,u30>P3]%9Pm*ig\d*BO0pfi1#3lObN:@F2NuLZ.X$QaUsXYkSXil?'+:C6%Tip2S+8NI,!`S+RSA[&SEI9)S``dfJI2nVAr!R>rO?+Z1;k@kolg(KXPDb,1k14Bsi75ef(E93Y@%-l+]+-IC>;0?cT6VEK;bYC:%RfVDuT],d>)RBg6+[5D`)ftMK?OUDP0f'2t.j'(>)8p?p6?%[HcL<nGr9.CVq"!7!K@gHq.i/9\X>"jVlrJ:&a*9WA-D1BpRm_d.%T&"D]_Z@BmG<a[2D1C'/58E!uYO%[8@f'cu6#X/SC;TLU'NIGlUaJm\Li]MbisHNu[W1;1S];^%+N2M2pJ$44Mb8&m`%;`L8,Msn%)4ZuQ!Y_lSnjKB\l"oB`3RZuqoBX1@.TWT^>41I("jK-s_W+<7L:$6GAOKL7I:`!%o.9):eEZ%4PK75=$^u:@_sF+%Aj`:TLg7fr%3ce`dd;8n_bLOG'()a_l2R(89oLbJIdPrL"ACb`TRmAW<Og4ORf8%<s"t-NA7bGe11]"^F%\:9.gf\0@NVo6Ea3I"XC4jDM/M]d;%G_A)HX0Ka=WGu.64bs;tDCmV3Z`jj*F7=<o[`BF\I]t=.6Z]WUpftf$H*t`gJcM1fio)m5cnQ'VdI1UiU#u0WR6D+gGTF0bV,;+m%E#+b%1q13[AtUQrO_:GL>^:^m1[1:Z`a'L*d*tC"VZo69.LaRue"2!_)!,u#-*GOQ/$R>[Y0QXP@H/U%JR@8@:Bc\?Yu[T7*K?]l%S]m8L94U\dX'Wm.,k]RnUXS!,VF8A)3Z_%7kBH;l[no2W_u4'qMMD;hpPO@DnSiA/<5$8gWIB8;7%C/XRGct#d=MbH_c`OhX>V,[%`4kI\i`7'1VmF2l/`GC'_eF#qTQo'\j5I@GCV?e1Eq++g;d[^mYs#;"&jYrK/4Wg]Mn/S=]QW6Il-k41dO4V>Pu"2#mb`scLXuV?%MRrG5FDT"g=pt'P]VM)eXtm7'N?Z:o+3=]Rf]^QuQV=#-)FAD6[6`"sS,a_+p4d`9HPt3B4^/a49s$Pn(L@QR,,-X,H0*%[pLnfX%OD?U@6G"'b%qqn.)^D%8BcMABbR=r'XZ5,@N8%JT%1V#ABu`"Ji`<.&C%li-i-&?oLDpDD,DEsn=Wb7:\rgd1dTcK=@!rdj#kD^k%>V>"#oVqBQZ]^,DDU$n5A)W5CDTu/mWOmscDCt*UF[=@i9nR=!Mb(Ne;+0^:8g7/O<tpdC]:t,2>PH`74.3H*^7b!7BT9o]ZcA4=%%<^8f9>.!rfCfWs,oYKj_I7A]`M.L@#_g/-1C*%L6fB`;5$crXjXCnhV;9R0.%I,?\^F;6/&&dP:cS=FCj.VfbCmb.h"p,5FOpfQ%O94I%n0T-cP43W>]QTH;[,A5rZrCPD5(OUi`ka/:U=X3710d5%W?dce:E!=*2<!gY/N_PfLd/7TH.7lD\K-pX*F[55A.-&-^Q:=u%F?<-2J.lHg56CB6q.h*ro25t79>X=EI[I/>O9/@3Dtf>hr!GX]+K>,Zj:e_'<8[ikEoo9E"l7Z;=o,"P4.ApSi.T*Q9nZDbNR-d$%%ol=0f\33.YZi;Hmh\]rd2i5HgoOF'4#WnbI^BH*Ha!m$qm)-aHU#'jSFU>\^`]b&a/[Uk>qB%PP3Q#'`DZ9sI>TLOe;&Q?WbH%A%qI$dZb>&XoGO6U@fQrQ@Z04$X^2Ymc?`\k8*$XaH8[Gs"_/?Ne)p:u"QgCVM/7HCR_QMbNZKuZg]e0F=3t:O>a0.=8.cr!<5Q7f<%7(Dg7*U%7,epEeqL5tqG[bmG*h5Oo/e>K\B,h<8f7o(G%+=^T063A5iKt5^rele/@\D1gF=HaDma/],6Q"Auh5Qe&kR%<Fs$Wfp7%SFUc)$q]o/<RhJn98ADTSSi08PY'0E]&['a-97Dn\>lkG[7`Jr8'DZ"CVRS0P/pd/i?FS6V/m80p[a;)h#m+lIZCrCg^hQ8B;oc>%3idjRr]'X>U23-XR3bS`?!TqK3EUT/'M[c-%^Ub#3jVpLXUk=ZU?Tn!jpS=QRa*mSC=M'bjW`)o91M0l5/tT$\#_ETc3u6XQdnRS%3Sb7PRV4`@*8,ZqSN8#rDmm&W0,72oAnN99YcE_[1Q/(coBl&`9kPdiC17iW&l!!S94rRSJu<9C1X`:$QrQT(R10JoQ^(%hfgn^c%N2ABE:9bgOV9sBslfXdHC=-]UZ_eL&iH:$T1Mb,[^2h>/3X^bG31=_r&9ANom3/oqBKEJ0'U*n%4\!ng`R:188G*foB,4-QIV5"6%BK@__P?9l$prXnWl-('Mp.o!QRSEsI=%6gu?<&hQR7LhEqb'H.Bn.?IS@Z7bB%`,a.POP63:n%^BC=RVK1[_HL0=bBJ"F(^=p=C\%<<*c8>W.[](iZ_hI?&4BTpd43e'`rL2$_UkQ0,,gZGWaj?_(=NQGogO)Ut'c30B"j&1_#60o%@Mkp##cb<`Zc"i__MZcfmKB;Zne%,QR"3c>;G")O^!]l@_G\P>;RM9W^Lc4#:LKJY4J?s!'Ig3BGF@db[e.V7De5ZB[t0\@=bt-&$>2FQY[/*L4Cf.?MimS`$g:Y\g*r%cY;g+eC#e_E1&P,3fB_XU,rHb(/8j_]9?O25Ij@,\*UeI8,Cm5Aa[)qP,X)5dB,_e'X';sDIQ%?#i/#E%`%LAH-k'X?EC*dPil^O%ha:ZlSRkW[U0"p":q)t`0?l!jL<`KrXCHXO_<K;i8#hgS%E\J_LaOriR*s-l5U3`HnO0K\LWuK%FOpGWQODcCAIR)r]qJ84X7M',%)_B+uoT>1ENm6u9+2ds5?@u7oANQ$.7UmM<`8XH\X-co2Q"QG)4)T)&\ao*=`Z,'JCd$Ci>$neKE7i8-m]KT8.j/SC,nce+/e'OV%QYF;LPhf'j3_tc9^/s&c#30:=&;ca_5Mjk)ig)dX2^?W\,p^Zm_lVZaCeh`>M8sWS%&`!cnoQnM^3]CULX:Tf<LE9?A*DW`+G9W,%2/^J+/HL(JWo-$E2'.a"C99YO@gdrFJ3O3QWIHR@_RjC==TOY0'mfql[D6Qugj'1lU?6:[&`FW;?"UTfQ+,IgL-%9`d6,J*Jru*0%1B$4#ns5+[1<YpF*=_ZZm_!)QF._F:hDUB5>="!*2;bH[N]YR<[;,?_Ko>7O*!<h>`12PL*JJTU98PZ@pPqRMh?.PcIT.C::Q^]X%(P/thpKZ[#4Bo.2.qnUhdpErOXeV*+FZXL$gW`Dq>+6."Qfg*;SN_jaYUDb'>qbF+9$e-ol>^E1`uMs`%%th"gc0W%GGdMmKR%QD%1dGkW=.>t^<4.,l];69PkuHu5BJ"/X.&iLu9\;O`ZR<<k@raRTrJmPQ$;8=IQLF8%3l02$RULATPIh[`p=*rj7lMF`hK-7u=rp&[%r3f[bgo#MKqeTA;'OA\fQLAE<CsfCrR![0D*YgnA#kdg2isPVGXB;&XlIe2;'b+l>FH78<VLD.;a:@XGc)F9aP3<-Z8qG(22MXZl%+KY#e&:<eN"X7$E1jhC&Z$j>o+F`sO@[XjsN5U$c8)Nt.AF#C:Ft.#C&!oFh=;md7P;V^#WoRUC(l`61VocglC2[@)>G\m:brGG1%f@n8e@<go+WC<`Loo5ZLrG!(#pS-u<ct"F5>9IM5BqmDn=$"k:iN<-Uk>,-PC!XMd:$gd5*h>et)k%PumU'0%iMA^_Haf-Bg*rJK%B!0^iIgEh3XC\;GrH[9Mg^p4.K&=dHgFDp#A^b@Gc!,?PR=6-YX.>EdDfciQdsClE$G\C.R3$20eeCq:Nk6[dk]&TgF5F=+8_6%0%(Z!SF45C?ZmJI_W-hGsY+N5[9c3Bt@7U5S'/>QdH=FIL!rH*?oEhe7m&q[I7JaP?c[@MWi@Q(Z=nM%50=NCI.\^'bW2C.BrYd7%o%06_Wf<b<8kEg^(U2BCRGFllq2IB,W(8En?X$_$,(D69ok.a?OSHa0NVkX'5dRkj-e6B/rb1dArPbGFs+c282,L.(.][MtHR!dId6%P"l\WmDKCLaloRtSlhOiRqJ2:OfSB3:f"6aD9OVRVVK4n"/B/V?u%9N7XD&%WP9c=*4essn)J0k:!N<pVm_2HB^]G@eZQ<eI15,a%guuumpKH0L@9J=%5boOTAn,of(t\:eN`lfIV?n_Um#iI0U8UK)_JO9r3Mc('hgnI0>&/>JQgu]',M12!_.L.W]/]J<J3.P=3J/J?%^'iZ3W`$==%,\2/:;KP:)5BY+Jo8Krecf.G#gDBlCRqAId6P"XR@-0(k=fk;$KuU)_?)Gm$RHRn):GU2B^%JD/<+G#UnRPZ5X=3.%''4=TA'%PBK;=/)5I=5)ZbZDTcM'IZk)e2>S[s<p\M:!53gNM)j,k8bY2X/YcETJ>2!/at\JW8To'%\.1!u4XR"buQ98ArQ5`*6,%)$T4^#138h&rS*&cD[X3I7m!0\r?_qet0NV7Qj]'dWH7sgDE22/7oAhJ8SH01fi+K'VGUS0Z3tF7bKaj!BP.GMd+FBM?7l="6`WQ%[Q&]ANrbJ7U\OLfki=)p&h?SsB9eTr[7U2L>2d+?jmrZ3898+$nnBkbrE<)_qieru-0<$ggf\7)>?+Qb^#-ft,ipi*QF6RbHm\Y>%4XB.<%7tbbMcP-Nj)G>6f&cRg,Ht3h2j@l[^BGjm<cg9b2QNIZ]:m`eIU9[(h<4I;NOj2!bJlQGTBEh[>ikX"]GkT3H2[*9qY@(T%p6+%RhITRS\FZ*>cX(#2GS#/Al_jAfRak3+lZq0rIeNb73<!ImH2[*9qK]GP.XD!ZBB>?Y`,/gFq[)4f<fkqZ5-(=Ape$=SIeFgq%qNsZ((M?rboqN^c4QZ72,>*ntrK`C71Z\58[kCk@5da^#5?g.JJldF*H2[*U;ARBpk<7t`CL06*'bcnB>X#kjo4j`5N%C1EcXo^=%Kls8Ymdg5-BD&TfHupGVp*Db13;+p8-"`LqcT\D%ft&_uf?_b$)R;%9iuXN.lXttBWp>MnW&/]'_pnLrVn@KP#@/&*pQX9*KsmEI%^.^^S[rDp:QE)>'qO+dtJim).-Ej%i.sB;[iW=E(>^5#++KqCA%1QJ=,^F2pBP;P#o"n7<9DN4f7LUl2f?\bJL7@h$5sm*)T/UK>%D-fHIW99H,os<!0[pVD6-$<p]"Dc6I[ob+DI8d]rFhHo1dmrA3Zhg(Z4t_uLDg=CP87"N-0o+P%l92>C1+q%WIZ*%9A=_=jZ+/Cs%oD7-Qp%+?-cb4(1T9%<F0KdJBkHd:/==iUV5-(<V]@1'Hos<!0B4c^%-Ej%i<^0M8[R=FdqlG5VpKY7iH*Y][8)4R9.Bf@:];<Q\%I[2Ku]QnOSQmXnthb(Nd*V9-\$\gpe<fu"[?8/2#pcR[21OrAee^&1iZ=I9+q\'oSFR@M%rTsK6Fj[TikOgW^=N1PS9BPoRkN4to%OP%DoH2[)bUdf?MbNl'=%b`Fhj^+OV+-pNX4bC1=Q^EM1ULV3t,<"ml7h"'4hJ:"ElT151KskF'"oGknmi\td5/`+.90`b]J17;>%7OgNCROH+gm:YI1c$A]bHlG>s0#q^cPusGJG561;qY<;h#S&Z4^fI&/#9oqdo)PDt4H==RoAsXoGHr$u55O&DCF<VCXljGGD#O0T%T5DO/(Mkm+IUnq/%it@'1/5!>gKQ-#o!Jb/jn2]ebMI%E5M;MQpVYjH%l`.q@_9cHT7.leca1P1qg&eqZ>Yk`+T&V=&tVcli`hU\%krCnpN]%CpoDIrp\iqa]-\Q)T/k'r4N6VdpXhaIL3QPi\_,+o?4BoRG\12;'-VSrP:VNE:]j9d,CKH:^GkA"b[T,<E&^sT''Q@hp%I&b.Ac-7oK,geZ+]u:);hD5g-m2]PAESo9o9?3BRHi71lg/";U;F!Q4a^k01]!E'rRfWs""&4!'I6.q0lXoDilK0#@mNg37CpCe,%YAWZB@srGWR:^BL30I5I%_[bf13&hBEfJ!_enSR9AGS.:L1fh,RuI`?W7"[SG>--(7%BA*Xj%i6-DQh>a_ErikE$YSNhk![*T,]W%6LiWq0*jkPL[_PX8N"fqEG"eG^fGu%Rno,<1C(frWTk7]B#NA/(9^_P0PX?U8%5r\d:t3lYD;f^%ZpZMGcJN5+--t&hku8=ZN1aE%.GSk-EM@gr;GU6da[efZ[D/Pc$UG!351kH0WQosG7/\<Y*J9t=l";<)J=d-:hbWVqdFuk$5)eYr.,Kp+Q!TC-=Jh/g.0G!1]:i&-%0$$Q4!j;6[hiS<?@VPpQDp8>9J3?r3-`Ed&q9,B-:6SZckjBDc0[)@IpY=DZWj&7FDUd^\TN[!pC@nmT&C/'J:0G(9/h1\u"uGoC%RYS<rLp"sB;A3].-rc%sO3A164G_1fA55IXd'I<cqt?gp3/nAnE5;V#k0QU7Ibp3!L#UW:6.R^%OU,HnOCdhjn4KE].bqJ^l2>;t%pEGj.6?ZR\$,9P*drcqRPl'/,/@?dhE(n]I<dWA2SZ(3L`iN<KUGuFrTk:K2[Ft3FDSB#[hV<R\HtJDYV5r&6(?6-:IZ1q$SK.(Q%omFThm:KaX2VOFhCpZ-IV;"^egU%NT-3i\e707uSK7KOIq:8`]M;rL[pm2T`Xo'=."4H'O$2/YYF.h]I>,I)36)uOMJGeC0!9&D%%j<911IL?a<Gok#\mg!=\ifsfNd-&`?p>YLg#k&3Z[8I;!(E%o[a7B$6e+s)H`-\9_S0^NR1CF67^<Z"$r\uF%4npjl?QoW#m"`\T%^2Nu.TBP<aKE6lCcFq"L?4F^K(tLo+W'F7lRjEk_h2CBiR!9h&YBFSk*'jsUE^Y)-nc8pGW0[q0[6c36&I!bRL#&[\-kH-0:a"*p%?nOqUMY>"QG+%XScA9I3J5*G4JB&aO<0]rK-]Jo)itN5u7$RM$EL'P*<P_!);2#d9B3l1D:@u!&,/9NM\F9!,-RTd?;lC]j^!p@W%3If_q:Vo1b/=pQubtSM9pE.HBqfP)_g8S'In6S.kC),0?au-\T*`8:oo.cq^q^\3e\!lXGRQEk,De5P($3_NG8dmc/+hL`;NKEj"%]e4+jb$!m%niP14$0>*do,$[#@IV(I"h%%i@Coi2@u)H,fDVna:td@qnYVHLZ[70NnNEu`(4@;*okr*ML%QIBid@e4*FnuTM1VNA%Ih(-VmU_`Ch#r`MR;)/hqq[dHq=_JgU/PM?Vn-0,dr(;+KpoW8/2:krWR5IoFJmV^3PMq#Y+g>e=-h-ojlF44"4.1rklV6>OFTMk%Vu8Ei0Z?$#4+#ZDp59`*ApP3RNj9PDTfp"/c/X-Y_$4-"W50\HrZ:4;*n+ucLsTOUm?dbdG&"D".gRZ!lRFs'Le-'<RR3r.W:@(I%SLj%_ZA03nFhA9sqLY"=CP/c;[0@fcqhK^)=WuGRW!K4k^M&Ha^/]"/Hu#'a>i-8N]##<X\Tff&aLb.A=2'NRCk3F4L0VI7`BIE-%0s:J]eW`hUIY[iVOZXrn44?7Bp_`Tfrm)/OhlZIWm6ScK,utg_(GdgkjPM0O1?rt#i-&g?/?ERB"F=e>Nrp-j^%noD?G\_/V00&I%#\&]DXcT\?T;-cSJ6K`]lXF:N?C*PsE:%7Y>JaO$Ka!q3EG;fgqo$65I-go*Ui7)8bj3^20.`:Jn=@IPp[pZpZF<b*0!1%ceTaDu%mNC*Pq4=[f=M#KA29,2`k0Wem3"fE')FE\!V[:j5.?l"q,nh>M%hdGA!ErZ4BjouO-ML11-u;Y]lJ2AF*91iF/Zj!-^[Wsqp4U<G%D*NaK`sk4;S5t/FZ%rpM.qY?p]rY`XF7&MX*q[Jr*4k!*qib'1j[^&6go;O^$*ob(RZ,tBn%+%OLJAol.snZ2f@en%XC*nR=Qa6D%Heb%!ouK@m6d9TZ=T/$Z*bD,%9TA<O.c=rTQ-pRsm:$9bDm[!D8POm&-=XZWY)-h'UI[M+YuR,$jmE9ecge?L[6h.7G([]tA?n:S%BJk]LYqfUcf7RfOXLOR*FA:QHSX#EdH6J9A)/88)Rg]lD[J$sJ(H/`E3IJ/Q29%L['#]&&5NU(42[T'AH29!uUR\FI^<SRtL@m,R%^E*=6>d8$-Ws6i4G3AK7FKnba%3&EW(Xm4M'>h5k[A8_thKF0DE'2&BiDB(7)%ACT5Qs]dVY:p6::r4N!+)!sJ?2%WqRFX&p"'1c%H:Npn`gc,OCNV>Lb2FSad(KCK=So\L2J1HQ,*"8JGVm,WN2Nko+bTih3ka%uqkjF&rckGni(aZ3-j>4CM9s6bn-)[uH&_qmje;Pq%!s+C:"p.mSA0>!)+L4:aTNM"-Bk@9?F[CU$F\5rPf.mG[%Kn&)%!O13:;8(dn8f(l!:=<.-Woa<7bu^@JItg*qd<=9IoJ]6[k'^G%m"98u(Sot+g^1W]D'dp`_Ccbr"`9`bGT?n>$tq"AN=k-:gG**k2f0c,FW(Ro!FKfVBeTpS!TT*P$.eF>icGW;X271t`56-=D3*F4%Ro1fCGSAd8]Mk2"b[LuU4$npPO2\e-,@S-Q)#'jRKY?tR88=l!4Ol?pfV[(K-e9eXX@M'%EV?&iE8M-a@_CJaH<itBl!!,GU8c1$%e9Z(<m$W6$k^_:P0h0tC''GHdMcld4=YZeS]?hU/&kbPlh.)DAon<TPb=tUt1#$F+M8hk-"7It!pP:<3.E8CtaEu.6$*WR8-TlH\%hMkKb1^b7]kEeV=HmHXR2tufYe_h$*T=*#e)UTQ)[>*#9/3Q!A+[5D.<TU[sCK7\C1UutjilDNM(IL:)E3bfr,Kk,sN^+*NL`_/K%q[eMrX(+DS7g/5X;!l)Yg9>d=Iah:Bd$GC!Z[.?iP"5?O;OR9fTtP<:GVq"LAnN'W0A(MuBR`T$Z?P3lTI%"eD;MPLc9l"2Y*B0e%Br3s[Uobt)Dh$F\7re!\D&4ae8o2U:k.n[i^0g2Rs5[^C8i(%!(:pKHoX/^5L1bIo4r6-bA86&`.o@.2.\&M5'mCt>fH%ZpYFTZi%gJ>%f=Tc8U_o[3kgXS<=[Mk;)L30Nh%>Iti/WpLA4ITtJb+-D5=]V'#^i^A3*u[XHUkomd7(4J#Z[NTt&'oDLnmQQ`P7Ml\q]PRj%5_.G3/V+$DhT3!MDnZb-PWAOr*rJc@mq>0pQWFHJMbG>=kPJF`.".-)9Wno#+TohDUq6p-X^\)WJH\l!1kekN&?0]TjtrnUY41!?%h)#rF%$Y-(-/91uSqSX'E*oXOS)MgIgtD?=.!+c12XPCZq.fhI#BfNec-&V%G`q)pM@1kGb@(j%cH$kcL(<a-,FB^fJbeM&X0kA3%L,39O30W\5asH`#UKHe<SnP=uM0e`5M]AE\9%beD$nS1/fgqhB#ZF;0o7Q)0$Jmu-)o7ZtAQU`)$I<#)XPJdVfJHaanH`L3?R60i%ZL?*)9KD!#n0ZF'[3r41n)*VCp,n[Ye4\tia6M&<i"@oZ]0D\tG2(PVo^]"c%!<Zeohk*ZA$dCIk^kQ!dFKAmE/O.TCgCb/E):^U%)KM;hEKSE("#pZN(bA)i#XSXH\H8jO)@Sa?-Su^e>([c%h>se`E)Eo&$-lHB2R4q@eM6LXO<(9M%S>PI%EU=p<tIAAJKn,2,6/Mj%$5p2P].qgcDOD$5o5W!gUpsKpHq5SBK!b_oJ`9PP2:$p,6^_H+^5RfOVW')inS*j+;d@tF]]Gu`Cj`KQ$LVI!d`73!1=54*>0:fC%O?$\,@dK2sPQBoUTFKE(XH#%AV8uDaMu@H<(SV>*,MUS"jXA$<N\V/1=DQWp)Ti'G@RhA<6Q)O545/VT1)(h*RZe<kg9;L<5bGfi%(.XWJ/4^YoJOr?LOH<<2"k!$)C)X`QgdqrmAHlMgMq$ZcB#'O691o_3AHqKeeD03DG4n][2hh3i.0g>H9r<-l6HK.hH&<5e[1$db%d,7VqjK"?P%+'t\$n9H9L%"S;X>213S$uHhBO+/Viprgr$hBt^]-%79@Nj.8"aTT_(EHbB#:Zt8Ms0)N4SXMO"CgQ1L$7HH4M\M[%&u%a&Zk.LJg+,T7i%2aQ'A3HJ!S6@6PmU2+Lf`aHQ&7-0j"EQ@^cmX35eLIeaXnUeU!pgT.sK`=9Sa\Xca+0LlrpY<P^;Ni(lCYa%M[2q%4N4nhPF:cGTJ.;[5t>@F(9I:tUX`a]apaFmbaI]10'_f^f.a*I!4"PJ-.+D,:0lZ;i!\7C*EHZkORIjEiI(".k2:<b3]Pe4%:*4O0C^sY+*i%9%K?YR6g)MN?cd_5fZoLB)DV[Henj*-K]upr[j?`<io-ciUP6[U4a1M8b$0BG'3r]sUar>.,U!mlJ[b[o'>?W'"%pK+fK^,O)&7[jKa@sVdKe\@ta>lCj<Z'8k:4^T5;rj$-ur)m40ps+oE":*;9-..92,''NUZT>2-k()s?f'9IXRtI,_KXNqOZoM*F%P_%ikLa-\LK?!2,BS-V&TYq<\A^JL,1hDd8A&"p@aS94[F]])aORH*E25NWtQ+s.p@*4"<$..%Rb5Tkr3XXm8UiEWggs[EF#342E%Ot%)pjO$\&T9_)<fh;/34a/#/Q'T$^'g_EHLZ5uK!ZET"K<9!`57+GE-H.TN\<nU`!KY&:c[c)[n?[L^F,]K(=@]6HEr5TP\5f>h%!%sfE0qH.I1ghID7$4_=/5";!aha'*f6b2sF?p$?)3,jHe@PH_`-9G):?./h3lM2-OiHiD<<^45/4k7$2K`pH[b(VqgU.),("'BT%0?PR,jRqK4bT;IAFW5=onkhfbICb2V&M.5K&<CLs@P:ZIH=iYMG&qB^bV=3Z:Vtf'l1^KuZt:L3M!R]aadIj>4#?D-CqY&#_0dj<%G"b1)7I!7p=[Fr%E^Bq5CPOmN0e-6b$0-2"4FO!8Q@Pr'ah@j=Y`0uin/to`iJ*1moL#lTXaH3%k&(UJ*9+d@`ToAo4=CAChOc.Y%1Hm,UF1A^(hJD+^Z/1c2[h4UFW8CrNF329[\8cC;6lqTa8im+5RQN^YnqUi<_&%2?&<$p@d',8qnpp5KR6Z!D%nKH=-4lcj".!>5%=eTs8+rCX)isdEK+H/EWNFnS4Qll'C!5Ps:AjEXeGF,N$D)C=$ibU%5@#V28;A_So'1t@'+dPZ@'F"VJ#?]5=oH5%&C1Ru.<WRmT%_9,eP0I\\FP`SNbQr5V`;E\+C1&Cl[9/Mm:gL)oc^LKS6Ne\7@3#*Z+_3\Z&_k\$QC5q$TLH6k4psT"qfkBB&(uR`V+o8T?:b^0]%0;27%#Un?K*A%qWLBm;Q+24cY]o/9Nkt^ksH]nCGDI(k<C<7']V-E!G9o,a^$>`\Jl[d=PfRYq!*D7iMBQS*-c+0)Q7nSIi3#osa%Mpi]YXq2;`7-!<ficom.CH]YdcdqMa_i%!_k%!&L!C"1'bEu]X@7S??/h'$;P6ZoI>_W)`:EF%,frP$Y+[*&b#YL.XYUEh5OuiC>%2EBJ"ZU[c#MPQ4H>\lOTk@2\RfjJ]R#`)q+p3'GWK,TaK91jp'5t$rp]3eDb'JG&F<@S]D]3ePfYY*j^l;&lNc>HujF&J^#)h>f8%5,m2(055;(I"C&f2CB5JL^3:t]U0X3:(t!0%ZTV;i7ZlcqYjAf%W9N##hKR+jPCqVK7b5WOe>lFEu?ZXlo#Y",iXDI$\FaHFO1Ye%s*i4%URISR2P]B#`RP@l`p)AX0CT]fBL9Y_?iFX0!d:m3)B?6O"W,uH"Pg!nZo=4q/YO!R!pE6[-Trk5^SC],Df=lS6nOS)To\1>%NitidR]i0NB'N/]Q9MHr&"QbGN[r?OPSQHc^q7\X1_X?!V;mF7dlY0L9W1>sB)s;[=4'O,kpFl;<GLmtb?g2lW_CSIq02r1j;E!6%=l+Nc`LoWI7J(qFcZ#g#qC6R`Lr5o<R7Cb36h8EiE.1BH-T_R@D7F2O$sf.cO#/#;e+$8`o9#o<D1"W>C)9C/`)FX=,INFS:&SeC%&rtI:8"*e;,k`8Ok"+n!8<Z<_lqhar\Ti"36Y.+J)cN`"I+sJhlin#.r!=2mMHJ!b"eoKZI3uXt?:[-JU>j*c'Og:/R5e&%fHF")%%FE)TCJ,3RW9j#]SPBcZO.?Khj[2)^*)DLZ@:Qc5mQOXh#q_g430DAP_)+dN;>t>A;:*>f^?#@_m[-dofu*:0O]tJsicYUFS\l@=%`9Xt%-":jUKPq/i`8YqGrJ`jU/.mfp+acRWQAAYH7UNU5W#\48ds_<j"FX!Uj2R'cPb.?ea.&0o@tBPZUt[OsljI3G3&-UL9\lWi%p'ko.e#:Y25=%h"N*<_CV<"/-[%Ta?qtE*ECU?j5A\Hj=f@GDebh@VIJ@bn?i9_*L*ED0c]C-\Z]<oQt!QL6i*`TJE&]Fu$0#jIM%iCc(:+/HEl`VqbI66JO'gP$($f0Q&<f&8F?2Mf'N6ru-P+@6<HTX1/mg"Y^o$5&RJ"Mt$O#n`)c,lWC&P])gRKV\s*UBO^C7'o.d%/O]qPE.pW3V$MYN@D;&#$5)LX6<JHd'Z-4)*iRJ<.RG8*=e-+4.73f]^Z#;,2=]u(/jqfGRD6-7&jX\a6:BHnS/ls[,a<2XgD3,/%*n3$#5oNiHd?#tcj8GOW'Hs\N`2\Ir9+_6,E4b,kC4ljc&V=EPMM)8UGd3M>&XFVo0;o-gCOs`Up"506@4=O9Sa8t)GZrrk$GEKs%Hc<WlSA"8T0N#aK*\RaA_GZ'69,F1Q#YPa2j8Q'3#bq[q3S/OE^kGMTc$`b0^Y!/U.t`9:3NYYgaWgj+.M3QW3q;#7^-R`oIgh@Q%/<L&!io?lT^BN9$M&c(fm$9%!lOgCT8&Y*>s"aH-r-KIs@%Q+247EB$hq;OshMu;EQ?IIB)?V[L`qMP9egcG&OcR9;@BC.c@dA+(%@K#%&,?:JdWfZO!Be:Ku5o]]t$9h:f:.rBk3/Q#1K3BLT'Mm+A#01<ijtCsIHscoW8&R/(&P.T=A<6_i7g,d2b6noDbfSk1=1G6[%E6mjU6A20@U#Q%YKEt3__VitTN"BuP1Xt&##SfV?\r#H/@^0O=$5(ls"njA:Ee$.,/7Thk'T_3jgB(33U/$M0/OgZVCR8o'6jP5S%b%cS89+f%.A]B?6@4=P$)r"C>6s,<Xo_ln'Ka:<`_ABQp+r5@&ZkO[^b[1_`&^BD)6=*Sm)HVTJAhp%p,+c;HrZKP%h0*[@#SI*O%7<+cR&98J_<es"[\ji^<ET@7A3j0,>a;*/cHmE[CCG[m]&OI"AHn)-%&OQ<or7*9Eot6I8Rkju[r@g21HU#_p[m1X+kAFP&Id_`Q%0^C$B'AlH^^U:b+3*W>3:\o38HcmCS[D%p3).)?+8`^UmO`.(aB;N^%2""YQ&W/NNG<k.CC'd6'#`->M+om0<g^Rh0Xjl6.:RNu"%rc4P7GO.\EeDWaA!))d!=Y!M(CKUPmZ<!u_L8%iKK!eKV1hbX_Wi_PdU>ZIa2YT0)J&PTj.N4Q=_SfX2%kOntoE-!`8]j+K.,]I,%amDVL<]!@+eaHTj<CK:JLKVu-M,s!DV^%0='TLpGTD"]dCAZZH8kG74lNp[j-m0H!;78UXe,rl!Kk(ecBN83?I1RcT(S6XL?"b1!%`Z2<0:O`:Ca[^3/4C&qO9%b&2q>*ZT)ZReB-[e:I8"N:*?;pK1ol<Qo+]cn>B78]PPfDf0:JA8W2+O7*)eO,fl#geQ4AB@8O#P=O%*I.E]IaagT'=KQ-l%Vn_)Mfe<)-jNscA+Rf<SW,$U4Kfk+XE=ReL61Qj<<Bd3e&uVR4b4I-sei=YFF9?*lKY<%3noVmUc`)gQ:Fh%[JE@7e_13fHX5m,F2cZ.P>9j4HuU+*+o@]]Y&.!ZVc1(E/?3RFlf5D,L*i#oaN6o"A(B:fi]4[J8?RcKD7GMb.W01%BLJUAM#mW=%rCgp*NbA(!E^usodTRB/Fq0nrrFq6%cb$e).L.36r5rU]&mXIC>ir'l>;b6iL3/(9YBX3M.Ym!&2RN?3h<IB+o=gfe[f`3*Mj<.7%NB.@4YPqjD3aZn*oi9<"HT%&Oo]6o`Fr[r4b'C&85/F[e"@bStoI6X5>2PK``.E7Prra**GU6*h$cZ?AZ]^DA<1Qn]!fPW`8fkV;%W=8&?9Gcc%/YsR^(Gqm-V'&ML]OXF,JC4'GY'_Wd]#:rf6HlEAf:fWXq'8EGHmH<r5m#quMcP=W@uhq/hN-83T?mm7&eVNYK$"MI%UR7-^m4eiDb'@5ph[Qm\kZNL:l(fhKJ,;6a;qGuZrDS*0PWC1nJEo<[EcP(CH5&,76)Rd=8R+sPPqani>U$ioWL&1OAmsP8X'@9K%<Z8V34*SAF:+K%67da"!8qVf/47OlZ;P(da]C\OB6\MCMD,\j(O^'CH5h:W2PIo=F_mZ;*7PZFEJ2%'"3Pt1PZ%u%[#8mX4])S@1%],.]6["a,hDqXlOE=pI!f>MYo87-siA6/WBX'i0KN?nCWD'_O\F9EBp*UKF&ql1;6Acd7f9e)3s1Zk*h_Eeq8]\]!YC8MsF4#\0S%+[c&s+F[J+J5#*$X,0]>r;'H'BP/k"?WHAq_U'?u-unW#^EX>J;fO4B&9m"5dn;lUhmfa^a(8]TBrY19\!1f>dL2=f*WO?=J55RR%V4Z#.A@Fos1K1tJ%p1]+3h#"Y-Oi\7:L.PJL#".Wd+YGbap"'?>(@1Y\qg`eQbicu(*VAsUEmTqasdKI'&RWo7au'mc](PU.\M**%*$bM72e*F&[\kP1#=npkR\QSb%a-a%eBgMaTnl8Q^tD"Y?GsB*Xe%B`\;E\Zc7W5K?5q,mrTV1O4!$>=.*#.>ItT`n@@=)8`/$HA%%=Wj>;dW?bCs</"#r4rVmC]uFF=kgfPV2,<^"PjJ%*gc636\RR6-QSFIsK_2a7pk"Uu3`%mT$u)bUE&)/_Np=8dBRigbSI"]L?\H%T>;_!bK3u[<jIaGi4D7gkqk*U%ZKMqHX\_k>\k8e/8!8E,3<ma?U?'[C7X?n5A<MhDm)p8.%=3tNT_q(,\CS0:*[A,1J=l(B^IVX%7lXc:0jQ_Z/E=Y<Uk!<iLsome,a!)BFI(FeXlBhp+BuuK@Za]7;<Bq&f@sPh"..N,GSBu8!:M[JZLNC]2V:AV%`Su+RmKMT?in'o%AD@;X&KVC+@h0[ts)NMgc]SVQNit9""Y)>nb&8Z(]@)-h]n^R8c$7X^Uo[8)EX+;6-M&1=ot0rO13ki#.O=jjnJau/#3#BJUQ1J(%mkmEjKoOkq7\;0<?:3/Ml$#O!29`kG[2>%RaA7W37R%Qd:[^KB>5)_s]T<P!4K]V1jlM)AKOSL,7kX/I-s!cVCa+-u/ug:t,)UU\%RM7-G]14A>:@Y9S)gbG>PpniuYAD]g2Yr"R_DP4Y)bie.mSan"8X+ab3SRJFn;7\4kZJpIT87;WX*uk<h0'QW6l(W!V\A:Um$&Y%%Y'fuMJUUo=2CUT^-n&8%'IWRmr(Qf'C8rM+>Oij1ZJK8-D6cN=@*Q'oFQ#9+K"+qF\Jp^ahns"j_Ys@%?6,fFZ*X%V<AuT6I4MBM%7e=.g?._r^$&Q>Y*,pS7=$*</fr@m9?h;^Tq;Vi+MR@Eh<G,]m\V-3?CY/!9E^VC"8pT!Z/:C-IhDO@`^E2b#>gHIVp^.Z-LqDMJ%-js)*V73h%cbfC5#B(D@1bOOj*HUNVq/WsfFlLlM)/&"'e'/k_"jtS?C6Pjk+"=;$JUau)l=NRY%_73'leE?8UBr26N:uOAlsgj:%T_<NUO:au2_Yl1E\n(%oQ$+sF';l0G<=hd1GS,1.'t910klA4nmQPtXaB\R:q[=E+:KHY\7W\%sqW^K.G,\:RF1^/eiGPf=44(rq%om-nfmBFfQa6sS_aLgr?[-)VNDWuo5H/WqNqX4-L(N,#,V+Z:#L"j]]G0^$2$b+$Smu$"JiHG!>+BSKd$b,`<k'(.A*GnT\kBDi*%44QM?h*^2QrEmJ07+]`a<%O*ImmOkd5LLBP]+EYa6J0d=/C*GpnEKV]ka['IV9hj/N38?c1dLH%<&cr%,M;g5pnAsheV.3hBUPHB%oC7@E4;0<$\$q%8mDh?CnTuMWE*`S1;?!gG?]GoF_')JiU'3%h!n*e&%4[:*m+dpo>$sJt(E2[npHoPMN/!)"L"aY@69AV99Z*1D%rT6gEg[gKPHp+t<g-d^rF5u74I8\l,f-W0HQX>SCQ=\6NXuG;aQA/#pHPKRiW774aZ1bbT6`&(%M5?-\)_,uB8r+>\"[f-39Sk?Y%X#F#Cb`pb,E:nrXSXGY$9Ne'_;J2lF*-q438tDAJZ7+/(,"UV\I-.;!)*l73\i=augZC[h2p98"_V)+UjYGQtU8iPTh3G_jraRIm%':dE(05#1N4_5"404iP(&iaKV20u0qrWj=@[W8>;B+B+'#eo\VgW(3H#TDmU@M?/T>6<\Za:08@TC,M_g#h&g!FLc7n>1Rr^/eM$%;j-/Y++E"F@HUV,b!I1'Ha5h[KTs/P]rJdS^-*Of3>Xg'E+5[(E]P8^`&G70K\\:#W:]tgG$CQomP2%gZi#!PI8ei950nFjpR`"s%7JR$R!5uML5Tfc;b_tX&_3\0m75M);fe$:D(X9H63TXBi?Spf#UmG*P75M*FfO.e#(X9H6jtA7HMe64V:s2l075M+1$a,pO)S"f*%lZ`TIes<j%>kqR@d`+.l0q:V,pS,ITKSNjtHB[7[[9hq2lU?6()pPeG,!hb'1kr[FnP`%4`tspV\[]XP+pgbY3NOV9S,@CEl&AP"%r8ZE)fD.iFq^N"uTSXbb6PdRBCd$Sta+V$F_,@I;iAu<Ij;'H/X'+gskIK4U$b$Y5:U"kreAur:NU?iSQ:..m:=(hm73#m!+PP%,%oLOUJTVY3W5Ua=Z_3tas`Buj4p2)6*92;&n5t3nQS*adl.75D-1fbe%3-ZWjR]YECPW"?7L"f+R,dXs8)p5WKXMf'kBf;b=MOk94%Q=`L@^FX4]Cg?QaPUfa(?3)"MA0SD)^Fd0Qh^b>`qPb/8UUi"ndV<&'eIRZ2iWWiCShIU$MsfCEd7u$3`a<kDPjZ01]0h1[W3rS8%%YI#[p+dppq;0iY-Jg$oqp/4WX:jFmHln\kbc,+iCHC)`L95nmr5AGiJkbHg)j]D#U=4Iffq/DUo`5qY^o0cBnBqpL3#*stnttsY%"\/jEB8%Eu=S/IM!#&o+@[5kR)DK#s/>4Q+;MThPp34'^2QVNU0j?fr)6lZ+L=,?e8=`/6$S4iAec.5r1>-KdT1rlQIcb+r(FQ,E%hFDMJO86549^.)fY(th1I3OPMikK-V;.i'(LGOG:c]g%4#7&p]<U>[UU*!=4e6Bp(.NiS2_<PbF+rjV?F,fYeoo%X,oprcLkV)]:%$i@Qo?$P<9#,6h?SNp$4Nke6]&q8EJNA*Vg(E'<*=<<:"=2daV?Afj`Dm=^tVaVbCYP*UE]bG]imAKM@U_S;A,#*p/bT-!bA*@PQ%N`gnt?V&@4eh3$9;f];a#k+9/@2_'Yl72=BAcf7,hB"dB$q/Fn:5CtX.OYM\-(u96*T-5h,!YB,UDh$??+ABWGCLasoV8Y;+Vm&)%7,07KO?I8+Q"D1n7`1i6;/$eDBOq+LJ4^JE_GO^TO9Z"N=n-s<ATsmAJ07m(>!&42O8YD?XJ$jmeIOMQ'Cc8`_I5lMdB#KOWp7/a%=VfSY]'X?k=4MrkDEqf=GFYE-n/D6Qgj`UrO31WtM@EG;X*mV8N[,.BY8M'/\*mG%h)kt<Di^F,8D5_E+a:_s[;*2/9HCiGZ)H:g%%=#"tTA0V3S"i.)p(!d+L[\.d\0(ScT:2Og6<>G>GAUs.1`6T,3.;(?(G!JNgt#ZWoh;L>KHtu;D%8i-N+o+a#2aBQ2'KrB*+=6]%G_EtKcsiX(&cH>U4qLA8Si1P8NMOX/[K*00ncfD=8ftPCafE4O'08u*cP/s.h+($tJT)R$4%F:IBki69U4ph9Ic]t/e:j-%IDR5h%)[E!-R#L8=:09EnXpFlN9ZGMP<phK$_h]rS5--die6?TO%%Z,A:^D\C4'>/\RMs_U5Z7N=\BcNUB)('u<;h58gI)l;+Z0hseT;6g%.iZH2PiTM)60k6"]qB[5ib*%BKjo]%#)CaNA9S`])($3Hf'7D;\VMcBi`_5e2/mb`<[&"2H[^;bNJS.E94Wgp$It`Vj)FY3+[T(d%Ja`fji%]kVJWQ->c^q&<!`kHEN<WEc)=GEN@>i?KL]9>HRGGLNA<I?c"7okE"l#TsA&*^S.(ImE:81K;ps7%<D5;mT@BDGU^[:S/%LN%et(_.9&&_C/Y2Gb!Pcq"esTtE#L!0K81)C25AS%s7Nd-2PbX@o>Q?_:/Q;n.kt'o8-m7p(qi^jJnYI9e'W7I-o$6lbf94<>>6%?\LV4]gj@[<2Z&i#bG]@bTBV8#bVth*XW0M$4)\+Te-?ic`'/8=!"q+1'l6?BFn]$3Y9@oR0GugK*"BEnh["MV*ic>flp>l"9d/9%=Fl"recj!(8>ef:oNM@u5Nc;>"%M,!GC^?),9WA<miSB"'tE!pHfO,-@NU7j'GQ0]JN'p;AD$t>al0Ij-D5pGI00WHm@/pC^^*#L%#fh<YYLA<>BYYFkD'Iq])@T%dQ^e7q\Z'Z[i*-@ZS)E'[@F7?!g/>ZC;V3"J/4:NjKeYLEQ,;GZ%_;Z\#Ir,q`8Z]95rsp%RRjqj%%:S]f'U"nu'i24H0P27C6d53[fHlZ<]$#W1J:q.^M",Kfl#d`OVJD0dM@O)h7'4!S'Xl>`Re6]bXf$%JM=4#t`=1-J.h"/gTU7%V%=5,u,#MI)j(h:.kp'p4/`d421.ETBRKj1:fn4Sd-h.+*!N9@=0PNKrp:$<C8EK87Ib6@;fSp*G$)icITR_-*h-$i.YoMg^J-]Ec!%D91gaFWBhldG,E$ipHs!1H36Q;>aA#MW17k'2*'n:4>B&74B%uQKjqHG:BO.)UJT:)*4aK8l3(Ki/#+t+El"l)[#Tp+!p-FO55$A%*L82%WH_P65h_cLh8'DG@0=q9Pk3@f\E7+P`]+LPGbU_TS?V&eK`-!+QLTW8ngXg1MoB67;9r;mnGUO</X?dZpk&&;[S[K6K5oBO%NLM\5etQ;o`Z'1S>4gnN$m'a:"+=E65"h:mFcgY26PpB'TqD&ma?gr"gU@huEE-g$>M.^AnGlo?[[r51V1g\%P/qc2[(X8]KM<2_%,G2sE!=@5eRjFjqd9&SiW<IHbdN/3U[r:<%<O.OI%t(*#l#/W+/%1KRG,+ViO(+8\jdJi0i#gteb3'4.Q;+cJ_!%K,_Sd]TIm$KH%Rd+lHqS*3k[P%nV%'R'IQTeaF"bZ$\V)Xs*TgJ%P/:R5Gc.3tVioBst58O2&T:)4Aj0O1uPsR]5n?gmBKlC<^(\Td"iI,90P?G<F%RIs%ef&VlV&!-.=S(@mFJ)3ud^7r3nrX]tWqhf-`U+i*O]V6"PqH/4RrI=PphqT$9UMgt4s+ZT"7Y+22THAsQbEnhqV#:8`F0,Do%s7jh7]C=[2O3;)J>W1ma\6L5K8S.i&+3u-j<QHN;B78[60.CEE=TQd(WgOQaM0(Y>damK"66_c@$?XNc?f[Xqg&NtW4BXlN7lPC?%K4]ac[0GX,YUf^Br4\\\-@b+6gHGbrJ,,<-@iq:Bf9c2d_Z%1%"kr$rD<fiL+fGC!Sk^UU,WRV#"`>b4Olb')#&`uf/_njE.bs6V%C.E$`"l[K$!o*q)E(b2-A<,cZE6Di+3F92PjC_Z+WAR\cd5BI7e=$c^/bocn96l7r2O-hpFSdZ3o*I==b0Y*+Sn[+PePtJ(WMsu-%eQ`Z'l!JsF`[fi-M!SZ8CdnfA<'%k[kaV-:$TGJj$9,Png6#Q[6+CKU!H'pDE!*D0A9Ic$a!Lpq\)67Z>.COh<OgF6eW/.J$c7mE%cPW0!$a_+UgE[KN;B@":TI@/J.*<da*jnArp@opO+D8Qn]Q6=Op>?9mYjrd'#)Rk1=Wj>)gL&%m)VIE%7`.rG9(++g)%AU+c)!^=%_Q^\*c@eQp"'m[K?rQ<s%Wo6lJebS]#'A!D%HulN2!C0:)UPI#/e'iTT&gu7-;;8sk]5oU/sT1G6&3/kUeC@u%6ET""Zl;o%6CN6%V*Sb2[_.7<KMT)ZSWHMlEbnq+JM*EbA@'sJ#'A!D%HulN2!C0:)UPI#/e'iTcK,pc]EtKT#J(n,"04poF6uJH7YB!V+3MoCcr"X4%$Td--RkUIO1<Cn!/B;O=bPA2^]T1G6N,\$N5bN%3c1KBtB$Wg,)$($TW/O1B30WLoW"oAkHTfG:9JGcSoKPYg=FNiPO*Ap>bdOCa%-J5-PkAppljL&G14B-Q!qKY;+l]Z-7_.Ri)*<^Lh/MKY0AOnNq=H&JG/IZ7/6/nXj?6ZU$fj#^m8?jqq,`eN'+?7NiqRZ'm'@DsE%GpK(*4A&8S,lJ8q+T_f[$%cJQWg8jF'JsJE+ZjrraRo[BWL&q:,r8.VV7dRWO(V>==jUR(ZiAY1q6a%^,hMu.b]i9;"\DhEXo+gb%dk6qP+L"^9:O3S)1gVbMmtfYZKtk;O1ZOu=<LErT"G.pH48X2k\l#Bj7f9QprC1Tde_[RiKi][4=g))]f!=%?Ksg9aDV&6KRZk]W%S*&YS@`>Vm/X-@(<@fZ/>C`icru6+hg<K1F@L;eU:Z/f&/S9-@`-AJn4G?T/Mh#pVqaKnm4KYg;#aNPDrI32f75WfW\uStmGtLHj%&W;`j`(I@<#[D$56maBNm0FFs/7KJ0Pp(=8Lfq>U_ub(Enl29)U5/tV-](ruF]+[.[\J]png*=r6L?$9/(@=WYsIfZ4>lJl-"DQi%=Y_nVSX$,X\[,i5O?4sk*Vs;YW^E@/)*?n3aOGY$0sqBh]OM8k9Z9)(ne<G9NgW!5.UEq00$McbMcb]rh(dZe;T:e1qX?B`mX);)%;lSdtMc^3)mo[RjjQV\E5Nm@2Thh(2>jln'en;s`W&p<s\jd_/=D\g`V@rT<eFAQe5)hV[1"3`h<=*\)b':rfQC3\5`bo(Mb0[%b%`XK8e&s]/6Vi1doGKEso)tR%%:R@(FEd-bM:%.jSSuV%'a/ELUrSg=mWi")_UQ3UkN[jLA/7KV5eP,En7NIulUQ41&M6-/iBZY[X%_YqDgZ&E88<&_4[lMJ)H@@=)SDIHJ8W;8\q=3Y3Oij^eHALd0/2Uj:44H4[tej7;;[e,D+n)FW$/;?9H]*[%Sa)U:X3ok#1-*Rk?%Na"gicOl<4rTj*-p0WFNbI8?n=$fmJ^J"3QF\m><"L&BnKMh9E%QTIZ:8NH)pLZ/@0]>'Ke9@/E[>^s^%bY_LrM(:WZ@'\dhiOri%7ofOcA?h(2bZ<i#.fWeq\/dA-TNmf""W)b?s!Wh.a#k)A$!@U:m72lrZ<U7\J(1p86I`L(3`+cG%G(UgIqZ>#<;8t+>2ldU#8js4%6k*S_+q&mNIu>fSTkcT#fHH:?IY<--Wr!D%/ZS5/pp[35+$\Hi.c0&D;b(sp_SAUjr<NWEq/aQ3RG+\<&[*RVlMgR)7Z0RO#R_GK%pEM6E*J95(BKsR_?dbe^$ig"I6jl<#)"G"HiK%qs;2%6O_*o.=ET&R!<;=L6*\CtZ7ejHk\fYA=U?[2\JP.*LQqa3K\j%gjBJJWU%(+uTS7p*9s\fZk(UQ3<nE`1^8QVt1-'320UVb9'O/+VqfNYVGrn4,TRhBC%o9^]j9+5u.@$@d_]9.]uQ"tlnE&+QMZG75t<^EqG/%#QpDmpEL+%*J9=8U[=/@Om]',l@+>=9<.jq(,!_\-[<-_"s"@>>Z,^ZA#><eH\.$bA'csH_^1TB":pi$hG_dE]d>9dH!&o:*8DRO%m5r/#-'n9.".*!D;q,]=]9td]mKrkEWOaJP\"r;\@,R3JH\-g\A'f5nkG=6>H\-lCWpU0/DZ#R<FWKeHA'oa!<#PPfp[A!/:rd&>%oMh'S@da]F+2E?S_l[%XIT?7g<>GAchnc_VH9(Kk0=SaSB$;k1f)>ejQW3hq]\W>o!R!6a0nmlpE`2-th9(+Cktg-XHrB3)h9,X9%UVpI8FmWhiWUsi5]/p4R1Yc86l-HSX8YnY$Zl^R=f6WF><;H-nmcep$!b[n4Uro<<mLh%"L:8-%C?u`*4_<a$0Q9UK5Jt8_<rNO-%Q;m\KR&SOXiZ24fA/5(Ps-?[[1]5uu+h!#Sb:<F6CoNUuq!Zj5-`c`L34Q',T4-\JWWUl+IOb8>CoNUuq!T'S,H)e;>ZTt4Y]-"q%58S0,'oU1t=o!+rH%pFnXkMAjZh!9o@V8^?$jS`P[,%1mP?%DHfFg9Hn7O_j4%:)riN`f?L5!f#r-+)?1t8ctD\`6['6hKi@tBK[%.fAD'rK*s>[d(/EDanQnjXanK/h?O]Q+pR)j`@/Tjhc2Br--6C8Q;t1_IZdI!XG&lq$S1t*A\E<$sZil^LJUO$@dVXb:<Dn%PFgO%(HApETa%[[IaG>FkbH"%i8M\p)n=2c<oG\cEEUT$^r0e!r]=`gaP%Gt\3!/#@H)<iN\GI@ot;&V7i;^,@=9f5E*;kI^r"n^a9W$;%<SgC!DNM+i+'&%:#FAHH$QRt#AY>'fE*:`)^qsY_pH*!`2!G8VQW;iL9O)JF6]P9b3pPA*+)^$0@lNBDb68pPa)8c)o*/McG#Q^<%nF^;coK.a'GJ1ASAZE%#:'JAK_IXMX$3sX3i%#f&*A\E\$sZYX^LKp._YX6Hd7_l*1U\e2-jTN?U/gu_WaDN$pnFcqU\9>OGAO6Z%<:qcCh&V-Z("TOdl;q*"U8hSLHE&%JV/f_".tm@Vc0K7R=S$<72tNc,?aFUgMI5mSH^#XhKuT%fMI29igP[P1`G<"G#$Hk-UTA^@%>u^=^QjFP).u[\0_65P170UHC\J5kWMRV;."ojUN1f4n&\ePtX$L:_ln11Tp?+hXpLGZ%+GKcjp`NO5u72<SR\J80Cp<dc>n;aWS%B48co6gNK0<:S^ShtBo:D)]+m.k:<'`iZ2th_ESM"ht5>Xb,Hgh!Q#$Cp7eG"i%mb'c$W^Tar+(7a1L*_/D#G70UHB]G21ZQF%_i%Q)l%a1$I7&^@8/t/Qm?PXS=AOFWWI]gLY3AMLUCT+'&4ClW.-X)k:,0`G]^5G767D\.obV4(e>fi&<X)EJM>QY\ll5^VRJr(&V+?%+*F[37g6ZD]G2=\#4kkpn/KSUOeZhKDg..$G3IDO,KsA#`Gb6`GDJ#k]+nBE%dR.qnaG+nVm><+34GoFhr3A1Xibg>EN:SVrR,T)%diDZhgbHn&@GRqUH\ZaE.d\85XfAaPGdj^$I`Ia<G76NUR('*LhI5:+`>a#VGoJ]\^ieEC2src9oVjD24k\)h#2Zh9Z?pk.Ja^]u%j`_")m@NZN?<Q35L--sT*R=&45t)X"WqtR\goBXdLN+:-<btj1O6V(IEuXl.^i^CXW$ABJ<IO=\G<PB1Ja6"%o_O8Mq_-i=bcV(K%rXN.Va/C\.>ug,Z@mXbg7peS_iU:X>c7A40n*=jt'>L<UgJ4jHCe:S*qJ8a5@nYPNq:HLtZKR?O`%k!BLiGN*2R4X&ZKOgP,i!V@%&,(XJX"=)lQEe_51h$p[')"[o6=nQ*lq43-qBM<2Xp(u/=D*JJ+*b9R4Kop=&h9r2A62+"9GOY`*D5%gA(d#!IZekaVNT&RU)uV^%gM0ZUbdZE%bI01\<a"o^.+ofA#lP%He-%B[V4/``F/r"aJp"\8PRuEJG,5Hb$$V=@%du;Z\n[Rb_n0'13?$c!@[%Gk@'rWoF<oA]%/A\n,j&ER*.G[23':`;(-rImmobE+0BLc_X,mqY/poApV(!EV#lWAm(>qg0*EIrqO+(5YNYhkG.%AU/aO''F`kVtU9YRYri0'rla%=%>TJ1$Ejf<fJ'sr9+o$`OuH?GQfVcNK/I2'k3_FC,R?]R@6AY7mfVLQt>Q?VY2$^MPD6ob=ol*@^i:(---anioijF(4qFqn8/qN%Sq_0i(hC:b[UYoUO)W.4is"VsU3)'0CIrf'Fh;/5&_='1kuaTS;PFNj:=?C4n"`WWkaeMZeUH#Q6D)J$<QL_Nhi:cjgaqkpKA%gC%ZQEV5OXXdm5-""F*<F?NW"-@<gIFIpZPX?5hHAHG`ZX>Y8?`qa*$#>fLI@,63NRjpUEos,O=7O_$s1(m8RtI\;f*%!Dlkcn!Trd0%6-'&t2V^+^$P8-5I<Hl<kjd-=lbCZ9(2!F^2R)YekYtd0<;8sN6F3$c]_W6*$o*GJf0P&)+lYOZkn!9*9r1'"D$Pc-6c)etV13Y6%ba;$&kX]A&K>OB"%-s:sN;^=%cM4E>oZrg+MrC]j=q\'"$5\*_<Vo9Z_Hb\qqq7+YfqKA;OjI8."0>^>LZXCm/;(Z:].m1-jQRbd%fM(Y7dQ]c*R`1YlAnq'513RK3d_C)@lARGnh;muRr;fXb?)9dFI9^EGk3QAWlW!^n;o6nZX7X`8"H,Rdd?K0(aOFl]_E,likXiQF%a>eMZVECsYUPgO(#V(k#KXHcHIl%C!$R&BB,6>t3G;FMDqBOd"=6YcbDdB2(_S1/XrWrDPfqUS)F-]!>r@pTVQ%%#GFuF'[/fUmE%Nh\$(l^4UZI8p&QL>FEY0gkDgH-FqX'.nCnGZcS,h>R(\MjZi:8JCD`mofS?3nUr+X+.T\`4B![cM!aX+6uUp=oIB>2(1YhJ%&Oq%\iWtqQa&.JY2at"qjBpKqHFHfjEcrSE,su!YB$1J5,s)b(,Lq"jp>WA8@)EuCL)OWl_@=@lO)4n^ieEC\Oq+G4e;e]hZ]!OQ,br7%]J3Io<j"ArR:,-&A$0ER_UP>XbLr:k0kd!5jgs`)JsYeo=sfWIXu\do'?6Se1qb,8dI,"[FZq+`]D&I5-+gd52J^SR#HWQDCej2"%\[(@N1`GM]T@paeK9jXGgk[[dB'2XB>3;[/LbVtBBg-"Udd5bF;+n6:l#S:T"oDTRd[Ch=N*9D+_MI`+L->BM`X;]%'fMC;@a&6/%hnff1V;-l(@C(7D'9kfSH0H!<YkbpDUV\&K"]gZ:RkU]q`e/Hr](p1`Z"fP;r7I$PXVM9J/F/SECqFZp^bX@jZEBlW@Dno-G2Y34%9N8`F)2q<b/E:XC-HsbgWLE5T3T)AX<&Y%e"hFfsJ?'eih&NYkmJs:JU!=MGPU#g4Zf[&YXMZ&$8*HM.W.b-%VE]Pr?M`jqO;%7u%Zf_1&)!di)cHnX/<E\'R`XI8NA^!tTofj7k>ps36g+*-5@(/H?$hR<hcNS(,qr\<sMfc%^>Lbr>lmM6dRhMY_<B<&%/ao;NoWH>8%KALFnT0Ip:*>?ts:R-q\H<9@`Tm("D0IQ[1Pd,V?>skK$Do.`/[D.*^G(Y\6"0kl&b6>-i<%Ji/;rsXR#udEmq+J)^WSK"5#uGtJ%ITmU2[i@T#'1T'&XttLen4S;gUKu@"R@?hcg[sZIH-Kel<&B"U[VO1Gkb?%h@kfo$@`Xe%\IjFP-##GOb$K%J&6)oJ#pXUZ`F;kc%KU=0oE[(c'1Nl]FT:H9UMt'7AGq,];F\,&DE[/RdR?L9FOH((Q"mK,`T1]ZD2CDUc3gu6O1$WFIDT%p@VZ!H'K0CdSkY=Yb$[c[H%DQ(@;%_5a#$c`.J-l"i)@=^'P@]R;r&&aK)Z$mh(l?iJ;\&:D&2.=EG,?baM%!eihjA+40?B@6Ga*MGajCpM"9RROrX9!Y1kDp(U%s0>+pCVZ4.b$P7RKZlN&NVJuBq.GK"<%ddf1clC&#),R&!nJNO#o>q*^boO^Q@AHRN"C&tE#l1T=.$TmV8'n&NL+:d>Lm[+3(#]+%rX*Rf<@J>pGH(.7Ge6V_^V\`2m+.-'5WSZ>$?(-n>BBctJ9>g?'e\oPjf`WC@q#`@2<^g`?fBusQMq4)G;[JJ'6g_Rf<3qsW=F2U%qC=,PV:&^ZiN<Y*)][Y0b26Uc/pVn&.?#*SD")D4nt'dDYn#ZE"r!p1g\E1D;2/'GB:Hd!&[>\a^>Y(f6Ubd0EC#l)_8U-fG.tQ-%3aD-S9qfk"AZESb"dT&k',OdI)a%B8W+([X.^AWl*X)p+;6Y"\rYE[4Q9iKUZlAUIYI[Y/j_pNW%]]F9(+oaS#S._Nq-26qb`fa*%:3-E%lOkUBe.F;cW:DmW3"=fkQ`neGbZ'9[/H)nJ_*X@u-8)Op2gDhiJ9tFX]0XC?GuXWAO2?c?76%fMb2;.8Jgu99g5[q3kbH9b%RhRCX*BQAg;!%08E#QN_D]#7gT]9ieR/4nWcSbrb+]074:'8!N<j<.&l9Y;58$j_@TE:04KbRYI4&"Fu^r<U>AL:oBLC5U$ZUnTj%_ZJ_(iIVDaLP6*>13PXeT_dMRiT:-CjXEKf8fc<TOQHPGXb2DX!:G5OL3;!#CHpr16_>hKiSl\E4(>(rl?e;EdfAf`V1j'AYsKNJ%p^RtH#&pb!r7,6Q0Ag@m@ftd'mOkI1GIY9#dZ5H''NFojbhX8``NkA4=hAf-6fmcBgJM@/)`4!F?P#qcUYb]dfK5)TNgDL;f%D'k%^?!*k]/-:EFe5HjR`fj>8r0SHoApG42=(Qt(KpUtl^,!hV164-RDMCYrqWFf=_qYa^/VqS<4OPi=UA3Mh(2E;2C],\k%JY;ck8FG%o$=cfd:1<5**d%9T<C2XNd7p*Kb;LZl^$<EboO'HFnSOsY:-WXA%rG#=S_-\LM/Ch$8,'U\0KS0NgVBN04V`uIA1g7cmLSK0QCk0%G:eH(Mhs4+_o8EF<ToVp,="+@.8d<gR_YI)m8uk!S$lh$)?e1qZ9t99+^s@eJNKL1Z&V.omDhV;#fP/`d'8ZhK0,]jYn!25@,iFm%2s4+YZP\?`a$PZ^r<Wo@Bas$1=hul*i\-\/aP&kN>-Z:^7(YdCXSiIm$6s.<?EeC2V11[Q@[WM\q2gGUck63`.C/Rn1b9osi6LLU%XR"LL/l"44o=;).m&F<'qQTT>F=a6?PUP0Dc/?mF26<R5=o0@@)=fW+#T":=1BeF.]2XH?Mk)?7_o8cH<QNXg+tR!c;@ss&G3'#O%DU%+BFYIfV#1qF/^I$?WmX368(8Hn/ELO_7%kq*U*P;$?Nn1FrOp_*j)lFS/q%V7.L.hd'\AS^ri8TnLr9RK%ng%92!#(\OWYf.'%&hA?[LJ+Z:!?Q.(i*tB&-`Old=L^b7s7IDWMk'u\QW3Y\S=M!JVl.QrW/F]1UrhD+esEr[\*n%^S&J4K!kd?ZbdDRIG=c?fbmJ/[%k&R"u"Y0BMk&*lT@R$6lUq.XUmLnhLH54jJc/g^m#[$g'XBe`[&$U4u1`+?F)\Z5E>,&M\G"G[u^qXS=GPY4=UUk]`Xi]@O?A4WL%ncT2qakZ,4Z&X*Eg5gNrlYTAY-8[6KUoI5aQ6p[NlbbdKfX7>_$G?d\c/2hC1O3*r,7IgTfoIh+M.Jog^Eo.nF=N6:WJF<'PZ7<#%r0t]EVlRZqa;BQ<_tB$rKr"7nKO0A.n_<;[YRYr9Y],HtS($2$*NC!G'iIr[8$bP1!:KJ2=9fik/6lZ;O)T&0AKSSm.C&67<FLQR%@YB;*/Gg%Y/ZJ*WXPKPD2(GE'WfKW'PZ@B$m+WGo`O^eHW;<c65N^'+'iJ)_8#&E!!3Ur4IrJKc$AdV)KJ2l?TW@0=KuEk"0'[od%M0JeUknfG+qOICc<rRDW;sutMGr.'^NPECF=-X]<YbY9q`a;qAX%LXaOK>QF<IF0B<jb-(>F*mH9A@G9]UR\iaoua$_)l>9W`$YD%$:Imji][XNoZSsC=]NR<_4iqHN?<=\]@C(J024n_h9jL202e(=bsn_%[mYVpZ?AifrZn@U=[9u=PP2<8(,JXLSn1HlRSS_)b=bIX%/A)#,Q7S`pDmaSpH,E"`)ee`ga-OreJEY=^r@S?0Z>mD5ka5WpLRT&9E8At<9$F,_%&Tq0s0)[+]%h4FKN.1P9/<Ne;jc)f6E8$a%"J7W_?3)R1KN-2$ESJd9iT;'['7u1CcM&Ah<-A.<af$-HGOT7]W9To!+Gd$ZQkY;6e<)*i<>R9H+KEG\=`UHEo7(lTj#72t_CV4g%I79lF%P\,"<RX2r;,g740[.BkpZX@>VcJ76;&)<Y?mr%\VC.%WZLJl(EC*<@I:/s4A-2fG3!M7OO:>N8R#,+@ol;2pNV^/H9u;&O%Q(Su(aZ=I@2"jELPoE=@LT3?/'aN\S`Bt2:&L@i..Q?N_&=&`p-&JX82N/o]K%<qQW&,Yl%TO9t#r=X\9uKMpHH`BZ!Xo2uN!'tg%^BL;\%n8g+"9X#]7kc'(M$*oTD37-Gn.0@2FOUUPW%o<e"JKiq%77!KRsmf"8raJe$<>O8@RSC]@`u,eW)ej+^`8lV8]2$4NT5\c%j\qZf@AnuC'87oW'd6QQNX.t:FKaSsh`R?"j(SlqFZhEK$Ve$<9Jc14%a>]=(\O^Si'iiaaZZ,NQn6:T_S;FR.MWi+W>pa&9q\cW%YHTakW*0mP$nc9EFg7n]Xt4PB*40bYZULa[+i&L[";`);#=EHjlUEL,'Gh$W.S#jNQHI&.LntaLN`7JuaWm'#l:XSr<QtB-&kh=g%IgI?=d=\7OKY[e96.A;L!k]Xj=u&P5k*T:bToQ^'aJFcoCueJ_%>V7^1HIuB\5\J=8M4#mc')D4W2Wj=WM2"+EiB2c,aKop-oYQG%/o%%<@1^`C4;/hA;+&7CTg^!%8ncTgQHE&r$(hPCHmX9aO\\Q@$E?q@:BfRr(4L!q?L^0M+H$GP"VT1VU:_h773)dpF_qrf7nJ.5%)$lFFN_<%?PiL@.534c5KMMcrdUtfR!q3f?&;-XtI+"noHi?F*EX6%3Vh0F!`(u)]Nrn5$aMHq5"jS\+5SZ99,QLgUfRO+)^j.@@%W.Ne[#upai<WoEFn3R>t^`f""+9i=pSDi6iB)5ojJu4*?eohT;UMrLe$1au64IZ2IOS"CggO`Z@!E9P*9`S0aqH!Z,&2YA$!``X!%,([nAZ:U\r]"ntE21O_k(,EQlj3I@5H&PVj?e02?`UIU-O4p)bans*8$AO+AJ.k1*3u.6T)jWM8e-F1<1AYZGa/Lh>KJt'(.]D!_%5NUhc"Ak(JN3J=BZJ]<14PW4G)IAI+Uf%@2n)DVe+YX5"/o\,23&E`064OInkZ.3Y*&oui<2p2nI6jhR>kfKqr"DZ0M":=O+At5B%4Gd$g<!*3$*2&lgWh?s7JQ+q,S3SP/]I/djn<&AdWh::IGuTfr:E\1D7Vohl<"[k\?5/o6i1jL"(LHjU;RN(5:RO,%Qq8lW&<TpX%I[`kXSKL0AeK\V^:>M$=UiPW1&4dOh2Bn7J)<62,qZ(&t,7c9JgET\-$?RA!iH9Z;]sO8e7@_%V\e!$>1SurH5SYIZrXn1>U/]gT%h/T.('FbRRe;*A.UC(k!fmY$*].a9[N1&I];+3&6,F5PD#Uu@Fi'SiP6L\m/J[%b"J&Ji9ktjKB_8UY<fS9SD!iV]qE`gB\8:BL.%$BH$bj8ciMk08\8HWAO,%Q.h_4CV:1`@BJ*79[/j/0*5<*J2hQe98+r?:Xuocs'HNW1G^NjC6Wn@AG;2GY+7o<iGAcW")-[@M:1)%,drVr_n*:YMpd@dV'rTS/0EHND-_2ZfgSC.e2'S-?*%r0ZLi;pmRIsjQ9Hoj]j7^Xl\b>cTl=6.RfcRm5/Sp(eLRrn^PZ"&Q2=,+%f"CaVP06_".)1\Z_n'kj\*qopQ]"^i(SgmREcoLmfMeF:]#CGUhD)Y:5%8Y=#9Ne![e@?*k(?(%B5G]iN:h$.CtgbSmft&e1Ub$c%5)+9$cWK0f:mId0:U-aYO28IlA+?e+*7jNS!D<$Dn_e-ubD14W>?A0RGYCO=.?rj.Wp`rlDN>@j;2FKc<;0Dk]rLIH2(>:3Ki+e`%=*;VYGZK$X.7RHFN3X!WoT@?M((]`fqh[DrA!`BJZ$9B;&*rrfJs/YYl)[uNXK1*eGh=ZA++f6A`-/D3=P($)l*+NX7P70L?*%u1%Z8?d1ID7=m>`>+-k0AO#Z$9B[moQ:s@iuRM@kmDVHs#"/F\Ndb(c?NBHrsIZF[/bdA%P5/TQtaM"-D'(k(!_cgjY,4EksQ?a9Bml%hpqfpV3oN&D?&^e_c&^B=Dq320chac(mkNR=?N\>pBs_ZJZ!TI-l*?ZnmU@g?ZPE\[Q#&K=?`gegU_db0-A]emV5R7],HL(o!*5f%Y8fAKLT@*gY(jMn%74#WA%P5'TQrV4h@?!`K1>7$;*SaN&"<71IXTfrI!1LdB@f7nG0SG-q20#-O](k2D465qf0!;nrPG]L@8tS*%VE&?i4r+\+`Ea_JW%LelO@SDB8XaQ[Wb78/\_-f/=Ri>]Z$9B[n!Bj_@muiu=?*D*LNTNnT'&lKh>sUIZ#j)L&*rrfRP]%>C@5Qm%Yc_p1qI.-fd&8$CIifI)HcMq.`jYieUjC$=c,lc-`\u'JV0^->N@'pjDR%0]H,fD`>s5:D1l?;)4N:[u(jF574RADXNQ@rB`\u)`%V=Lm=fIn='b.Hfs;YaGJ2#hlXIWMlrkF^Ur.u,XK*j10B\.\(8^O!C&gA^IeXm-eY^AXj-4_)*ErGX(T_j/RZ=$kf0,H^5KgTH5%%frp)$3UCtWhcA1*T!@ZT8Cr;:Ui=s>ll)!eoo*aVVmpN6iaKU3CR!h];+eI_.IES%FP&86)R3kia7?BYb.Hdb+83k_NQOQYEmVH=%1bXX_l9V1kd(CDVY6W>,@D@!4W#[^5#L3-3o7#>q+#N8pk4u?!Sj0jLq6TP1[Y8@1dl_!Lk5!^gcduU?CY'ti?1T%Zc#_Mpcf)*8%gbm5of/t.F>s:6[HuO7:;nZY0k5!s%o"j#@K<kZMl4r&25<-93VlEs;]?@O%i>LB-5<-9&E-D'8m(fNF`"('F+.QV#34jQWG&1K0%`cfT;c7U3/>ral+&?9'A:%NCEG%Gl@?OtP&,$2JWoQDOFKAQdAl4r'fr?^gQZ%:jOgTH3Mn9a9TpHYm-`AZi#_=*YAh^\rH#BnWB%Q4M+Yr*DDY]lNUhTNAg9]1*$<<t<NY*1S&5<Nk&Xq8(aLK<m'5B?*JrB5H2ti9\V&fp.2r"2F+9gGH)=B3,VhXra)R&(gBWK<qT`%B3,VhXra)R#Ze.]VKk<a]6\F>p#,2PWHuNAc0N4!eUt3/#A;(pL1b>O]H3SK4ZL'"E->Vh]jeV9#A7*KcE84Y*EZ=&fYQ7kK<qT`%B3,Vh%]l[3CtJUCm-;F?eUt11Xm-YU2*X(4G&VWli9]+Fn;M4Q[tD#&#A;Wuc47Le=)??u*LpCs34j?QG2Q@`@L$Pt%aM3tS6_&b%7R1"f@[lNIi9]16fsQ4S-m(9,34j?QG&;GH?OtP&,$DVYoWHucn$Rf*CBqW+l9Vt,;"!99g;36cKAQdTl4r'WKS//t#JUM4eLS'W%#Fa0n[Ts4<i:m)amt#*DMJZE]5<-9(E-D3<m!O_DMf"pWK<skKB@d[>%QpdnCt$$=S6\?=]7+^B4Eg$.gGJ@(B@d[>Xrj/SLfTSh%_:eL6Zg.j/f+6.:7&sC*fDORnqSCkXK<t0_%PG2*IW0K/i9^<Vfn!H%MX?l$cAq7k=7!UBfi>6.>B@*N?Eq!%A66HRDiG%+HH"a0%P@!p>mJFjs,P%mAZ+&lV=$:$)ZV/$i_8Y9"P@+!?]eq1Pl4r&2g798[<KGf#m)ZAV`HI5aB1IL&/%4oU^\^d?hgr&gfb%ZcMXC<.%n%P"SGAsfmoA/(3@J,Lp)Ynge(Y^d]G%X<ue\a92d;K(j4oY)]?O>?PpP?8(`-/n^I'80\D-+T^q`Vfu?Enpn\1;djIZJHK=)>J]%Y2/Omhs8)1me7!rHH!<CiS+6:o">NlmEU`:X&j,P&p@oSI'80\m@*LhNe"0#Cj1'EpH#h:Y5.MP#e53"pAOhRUYXT8E:o**RYT_P%-/\%(f^A*^\9c+Pc,8u9P4*O$Cj1'@=hS:6k$`IWanIj+fVWrHSK2]NO4`med\59D33-+sdld!BN]=(@CtE?EFp)!^@_:d7ZV-'[%#9p9VZ!HtWfqh'>6TXj#&8Cfpm@*Lh/ff6Yd\59Dm$q-nfDORn%_WA:d-ErqeLS(B*Y6Qad-Hc']ahta4^nY/(D"fO7rUV$S*'8!%m,Gk7`IkKYoK&d8Y62%1YLo^t4?0r?Y<tAC3Y6-#MJ\g&h:[3>7)'%Qp%Zu@^D@E00-:$t4SZTWY<tAC3Y6Q/psafepYYqeM_%m'%nc(tLX7D1AX8`^KQ2g1907^1s\HK>jm[jQbe`8ML\Q/p4C-.rcAP\k#e=ssh/KC<RmJ`n[<RHRmVlE>c!Dc]QR41="(\7r\Wl!6/%`2>)An1<LsMVAVgW\-c)!NL/TNQM6$R:cd;:mKj$[?,O=&ZV#;*!fP9^`sJl;USnZ6raT:&eJ(-j4>l*49Z+OWi-5N19+gS4K?B!%MSrAL;'fDP(fd9qZ[bmfWY>Q1.V't/86$5"L6S\L4DW*\f(s`G3tHl^,bBcVI%WH!Qi=\Z<*dVPWtqZ!MY_[:C2TU3_EZf,]$CS\%RboLZ(BD0aqQi(=2]k!E"&u*!U<';P&'^b\)5_/?hhB<!2S8UBYbAT4D$r^P^%6OqVlD]TXh[nYBgtcr0D]m(le3HD*%nUj3)r#/%;4OX-G>;/iUc:A7?":q9<-?GjP#F5EV7nohXU4oY7h)$j.o96H!^D6ZTQ>4/WoAlL,$!lD@?IR3cEU2Gc*=*!-.daH>cf`?VHI`0%Wg]f+af9(WBltF0cJ2i!Xu^5/L?*T^\PQ9e8R8DI*T/PP<IH!f$mV&s>#ig65Clj87?epsW^]dl16,H^%grmc2)p+d!c<le,!9@7%%GA&uZtd[PYc>j6BX4Wf-XDS/.Lo)T<)r2Z2ZQiX3e`P1O"5moOAo6PALFIWLhK1SPpg;3!A1lD8ZF6]?=d(k5u<B;.Y=-$9'$%e%KMn*5Jl7j?9gbAL8R6SGIs%P:7)(`[<Crcg[AJ%<oMhhJV,MV>X@Q>[<ra:%MQdpC<>>bV_BVPW*cff9NZZ52<CM!7OK+2MGl!kc%/XPX'F^%<4Nfg?a[?7JH6Pj0IY%Xi+UoO"U#c\9u86`[4T<M8tamlRMe6I1\,/=\oQs<$ZA^q*]WcIk/WhiGX*^[9Ac:rdA?r^>e%L9R[/L+$J1\I#$aB+<8WaK!D-o;`Li+Tlu;aNYs3CcC2+M5n_8*YDD;X"jk6JY7?8<Fq;SLoSUX3/3R+/@Zm$<Qb^.cShjL*t"sH%>TK,fg[SVTg;.HJ_kdFiJR\`o<L!s+Zm8X_eT$bPZ3-h0?nN6A"h919-kf0P\SS(A>]c6^<:u3<5*"fZpW$DV2PR4CZ$KNmrQ'Ql%mGJj<]cXM2F[B:)p^.2lVNAp[6RK5P[J).IWZE<uUCa8!LdL^n-OK0LnZ\&%0PsD0CksPo9pX3[[Rj1aeMB[/lma0Rl4Kc;\A$VZ%l)mAtWnd8>7+F(_To$Uc'&(&46r^^8%M;_/)b*;^q^1I&0/a\\c$ck7P>UGUlXWt+LJ.g'^sr`XWa%\1Uh[g`#)eG?>WoPG"!(!u%%iA<W$Mj9YN)g;i/0efkdWX[`Tip(a<8siUGeY;oh]/FA<tDHCFXLuSW4[c=A<<fB#6dY`]2\i/Pm,52Uak[j)N^uSG">VN8e[/R%]8_qNQ1[g:8lZYSO-HXVX.W6WY[7-dcar_28<n<Fa$7<%7S`)Gd>a[r<cAQ(c(0rr/DEcfPqrW?<9:94D:O(SV+P-"6E7>a'80="%_)'`u.4`<ecLTAt%(q3:<"(3U%PCLK<V^l[<P^^]YI_/pA;!nsLHIU72e&eE@l_rH#o?%fp7P2ME.UZkJoPku?rF"^T(tpV.R\Im%;H3i$,GiQ9<`5sQX"%#ISDtolWXt4\8<rehKN&\<g;p3B@_@h#jfCDQ3f>,$KN&]Fk=DR%@A?d^(,IC>L"'g'W^a<RTMcmQ'QNsT%W@E5G5Y+le$]pH"pH1c5<RKhh+]Y7,P>P<_1aJls&=lNdeT`jd-\cCUo`h$*PcE,??F_]'T"d[m.O$p:;H6,;,c.Ms)G*P$&RCQa%WZo#/.9/g@8lDYrhhA;.Z\XN486+X'!A^ZI-4#QhWd2=oP>O3/>q;8pDFJ@a:o_NV0=Ct[Wg"N&<TK0rW@Dp@`)IIs&n7kuHj)6)%74*VR.efl:9N@2g+Ju/<O016hoOL6]<RL3(R&V?B.kt&l9`d%LL$uQCW@GL,P#>;)UEu_YdF['[=nnZ0Y0E^(\V6g$rlmrcG8l6b%l17o>Wm\\c+Ju1.IL/\JdHqR:WmWh$<RIA"S>nnh5;?1+h$l)=Kl7AkW@E4M-Dda3IRcq/dJ])e.^AB_W2dG<O\qs!9ghr\]a,aT%Wq&&;6<2QQN.`[obT`^[IWduA;#KBQ<Saq$VlIZlZ?NY?m43NB.rS1Y;cVYD8>iHj@1l=8Y8pB7P68n'WZlhR9iZH\,+>Os5"%5-%%K($]CfP^YP,\(KO^P1=VCKD]3p;*!W[d'[\Q!lh8M!jV:7kdk)Yr(Ef;`^@"B3j\JZ5Ye/gOB[>R$@jWa<:L9i[&;-(8TI?FH.W%m=qo53)r]LE1g-0h+*:!Wk+7Q:ZY?7+J5\!5!hG5j[!)0;cTBY90Q?%Ip%0!RWgqqjXX-sW@Dg*i_rjkh\Vobo!T]*<TV-(pf+Zb%o79\;q:I/\Q!U/B:K@4\.6^b6qL!P:<r&sJ5#oSF@H"3Xk$E;4MH<rT;q6aL/36eM%75$6>&hk'S;KNILeUlpK+ONP2L[RZ[E9GA%cr@FCZb`j02[Y\HC6OPECR&hl7Ad(j.Y:>o]076Ig%=$TaAb2^7:`FPFd:pPqs$^\+B.NkBp#B`c:]OQWf\AP10)eKl0Qo9jFE+]%eT>+Ya].XP*T>Z)LH<;V21fBCVJ<UELeBVFB`aX'Nf/WrJ?W#L9hOoSL0K2\;iU9UZ);i*NR1U`O!7pAd;KLcebJ1)J5lBi9L,Vt%*t8CLC-eI0_ekBo,6Cb#*MUh+c,N[X"JjH`4T\NhW6^7X[`4(5!N?t<irW+95(!W,e]9E\OK(`t51mBb+&W6;C5M5m`\iA#`M71)%l=.-&-%.h5[^AMG_(97klCpYP-)uk-c,Nt=?rS^.:Ddn`=ZQUed'@a]K;Qpj&r`jT<^7L%e#hQF?sD*^hu^3WkuPS(:&WQ\0=3r&%h$OF_C:Y,k7b)T2+H3>b<knpaL:<7R;)R/9aJ*GE3C#!mVAfP5</ig<G%W]s.YpLCGU">eWprYH+=d@7/e1nAPCbbnNA'5.Tk_.P%O@,k)+*"5_;jos%BRI?;%TVPI1i]I_mKMZJ281p]LT5JC$FGE9,pR^l>F1<4EG"Zi0N?:?[Xb&dSXBP5Wcb:scHQ9]MWd+b+!mqe%M#f*C^o=M'%''<cB<0aG.\aVeJ!;8gY4YFC!`[N"ab[CLIOS!)bNtR+7!j!i,\&dDq^!*\.d273,m75GobW3PLTh(Ne`m$dT^)%G%,#F8S&\H#e/$m.j$U?R]b6""^?rVpU(OrIVFd)T!*St/uWD;n8r05o;KV.Nds2%QS^02.uWmgnS5LnF$+oG;8aqIsJ4'SJ5TB^fd%,lCV;8ebGa4's6>5LkrQL":mJUa(WFHD7kkI]C_X93/4BI+_"c6,"lcZ0qVgZ-F%m1S@!3ID.S]?O4@#rl[6UTXnXaE$YWeT.cG7%`U%Lm3<)q`Wa9ZDW=W%BTM\GiWmU#E\1V9^21u9%e]6DhXu#b'@OM@Z02`\MDER;dY-Y0[m>aM0onoV0+fK]U,F/m?]ikr5#ZSL3%eOp%F?ENBa!30AQ3@4`+Dg$f0pf"j\;<1OGB"_oq:\@22M4a&_rkqV*7NI>Xl72eO:\@I'M4a'Z&0QG%GNB.+Cg@PQ`(tM6EXG%-%SiG],3fdqhI]@U'$LOU\%s8#(C;cbin5CQd<+VSpq2pUqanPD#N&Ja86Hk\i\CoP:Z##s=r4/&jK&&'%Li[r.QXmHX[Lm#@bf>\[%FYk1!k8KKWVYul0)e5ANLk4mC\\R7Y\T6Le(\f6$&+nAAJ&HdVqZS:g`n9EIAECCF%ePOi[R<p93Q[O8OJbPR14hVG>:K`@R66T]%Ap;IuWL.tR.8P%3GA>&i7:<%UHtDCpP=O.FfVplPM<tAo<qQ]@C<g6gY3T0p*J'b"1#rYnW=acC^eTk+W^!^dF']N:9%]3lI`,"+%cLSbnVKZXL''.?&&_&6e]Fm7_6<#[,SkKkT`)_EoF(u27g27('X1mbKh2:c&TML]/"_nk8WC$"s*@p2OI0Xe-b^M<C(&CnofUt0Q%s!Mi%`0dJ-^%oQ0O]*LE9QfPtV.5;;Wpi8Kc%]b%<JT@h14hJC7oNLK!M#UBWKnt5Vaem@"E/#bX'25_QI5fO"A@#8e\GbFH&W[/%df<%cRF\e%RR>a-b;UTBAdc$r!p%k$J@0:s\e.C?$DSPK`)+j3S=3B]fIrt9>a6DPWAuDc'\`?9LnUOD3Am^I9bAMGF<EAr;mX(u%E#H,P%^!3^:=EZ2lRe[V['lGA]Fi"^!PGBDK>&58WU^-M2.pfh-Q?>10a_arDU.2FY$2^ZV90>(P\[*CDJIJZ#-M1fe4X_,J=@H3%l=_ef`0dL#rMX4Y4t?Np8XOS4QDoTf!L8,\VWOh\AIA#a=-SR_o!%b=2)R]k'Ne:T+F*8XeC9un%U<VXWU^-K2.DXZW2U@rSq*8u%F2NRp$J%L5TVb0e'a(D63>-oA!q]OT#AS#!(L*VaRMmn[1n^^8%%.03C<du(Xu!akqgk1S0r-9bmS"KaRMqA1-6l\,k-Qm!Kb9uY%5Xo^i7YlnQKc=sNCq$M%-t@uqU[kT\"jGI54/%](E8rO=<A\*\7Z;VEM&WYL!nWi(Wr0Y+c(j3Z-b-ZZPolBm3<E-icLu&%YsBIs%IUK&8gpCW"-LPW3&LQpTkm(a6KUA_KH!'pZQl7bB9GB&5(q<na!AQGu:_AM_2=@gAeD(<@A8E4dl?kp6*!+J<rl,PC:*"nQ8iiGt%LoE3AC>uh$[uS$D@O_Q3G9EcGNZB?RC<go+Y$:`*(3gCfgr'j4;^nrd"#-"kWH_ORj9[C,i(Ko>!Y<"ER\pC"=iN4q#e\ZW%nE5X%9m0^\-[(D"IHCiq>aM^U3l8h[_]ir'd=0;<_8o]>NWo:CD*C3_.BpO94[d$k09t\YS*TJB]Mo4fqnPja)"L`OR`[hX;KGsrncrg:%:+<k-`nd;)K4lb3?q\a9384nV/u\%;/N%"9qER]5(rbl=9iW9KW=aco5YECD2G:F,(t:pEJ<lW;o%<D_C709aTVYO_eH]8m:<ckC%X&t-N!A0RY/2,CK,DNB&g(VJZ]VPsGW=]KkY%*mA#d@88.f03=NL7fnY1+H-Y?]Y`b[^iWC/3l#2qYS^^CREqSCF`IB6(<tLfgW:%1hkhK@&9#]E$eU8l(hs$V<101p4Iu*WqsM'bpe,f$4]gd:(o.CK$$9];CSj:K.8`e!.i<KQ6B2rDa@qV:oVPAYh^5Y;:u1QC;cbh%gfmV*#?#;7"KYc,.5bS!&[T_J<?Fc21"=?._8&K?I3PMNNZBKFC;d3B&LfSHVB_4$.C/4P.5e(-fFJHe"1CTi9iAgO'T#^4'X/Sd%>X[6m:hkY]jg'hV-"%U7ZUBp'2%^)%)r+Y.eL++,`0_p^\&bRFSCE?L:Di%sVpT#1Ouou7'.5YHbS(E?GSQ;<1A'OD\AUs5@KI/G%#8a.WKS,1[R4?pO3YpomV.5'?Of<q`Mbu7H^r8\ZiSS*BVCM40Pd*QIUdW&5NVEHD'^T$td]mLJ-E9A)/0R(Xaq><k/nQC:%PD?"%fsMn8eKGJ34BYQ,"sLgGRXg19FXB(t`$I9U`#p=o'INH\V$]p(F1Ao(=i%Cd`NL@&[f>hk0W>XN$3??ZbR")]!eb(J-VJ2`,Qa8h%/;(Z%8WB*;I\NVb=X%gU$-11aPglL'X?/%3;Bsbt+0=;nWM=L)mDkiCM3;n(!2?8YN#@;X)aB0YY00p;J[>&;VD<7/dMLIeG%M*,%/p>>E%i7=hKnYFjM5lZ8US+;R@>(R'/6qPa'.dDb84Ij6oMM3]94>d.70#el`2FnS>Z0Yg7V]lu(o\,-(W!Zs7Z<1UMb?0oRM`"9%6`,Br)DTDL-rM8m):>66@[8H.UdbV>![9L2VBQjTK/\?LJKZm[(O'*S,ZT:9Udbc<!^^Y?+<qFq,PFStN>Qb*S&0tI7j+U*;WS-M%C;`rqJ<1[(kQljkLbVa5qP`re+Z3`Q'O4mPpC7d5,6f0>O;\B8Uaea(,T1%M&kbFh;Bs+R_8E*;)2iZJU'gNaPS"BXWUL!32.FcC%/6p?G&T>.B$:"A$7Z;VEM&R,;fFK;]WUL!32.FcChJO\UIe5(J(_[&hQ\om<MbC)J^djBOAI<8],6Sn3VD)JF.DV]V;Lo'8C;`e7%YbOYnM*dQGLma.a;A^RU#^"RP+\t?nN>Q1/3blTP!s^l%TOX'2TVFsb3W^<Z@`T50;%#J'FkdKgU/,49R&C;(ftKgqe;-C\TVGCo%JHn2MKHMMn'LiM!Jqlu%W=U%,@SdXP/ucX=&2dond<ZK2G)%Qa_.>WR!2;rA^GP<)Do+u'(oeIX;%E"]Ct+9SYu)a#]/Qrk,K@jJ%5Pt?H<b'OlJ,+kHb:hJ62af.nV]\n1(El[`(8gANP5;M7F#9kS32p9]:`lC-**8">eT%EfiPCdGD=M!_TSj^@%Zu[<7Vt[KC6$%3%E`'^b^]G<06$ikiWg`o4\>U/bbJ6mk.u2oSWl[2?M^fh=`%<Hd/LkX8&H`;n\$.Im>>uU4#Oa5,`$#^]Uf?<6?DLQj0*S^2(]=en%(6'DWYoB?)j2Ycl!eFL=*IA+>U*S/&WC9C29>hUjK$JKB4=bki@#Iq0hdJlOe%pQYPJF.1(B`HeBil*+:0#\j`\!WT.JS7raj"HR%_\T@%<Q^\'mca4JKY?AP_0;3>.e/e#OC<\n-aWiJp&ZK'YB;KGq(K&dq":)@YskY_FK>gA<S'ZIi1f1/8[rN.?K#cjDUJ+@paA$Z%[=/Ff5AJuJnQ<ZCf!n0:(H@#)golG8(X6;N!J[l$WVOa(ar\>eo.ehq>(DOnPHsEYE0:#HTAZG@Tj2CDc-=fF`U[1[mMEr5j4+E!%$G<K%@7W#>I6*ZCU5RMi,]o0[S:iN[NSd:$Mn068fgY1,'>2C0\-ObQkiikp8F;1A(NiG<71<"8>uM=;<1Tdn&JOVL<&Jhr=:MUP%l<o-7]t8k423&K9?,Yl:To5@//r;3$S1^Oo=r+"Bm%UAFfL75=Y%c`87E,#d)l0G-)$*$\RS-6$KE]Aq81A;*9f:12&4hHi6-Yr;%UaWEl(\*8?;T"QNJbLYZ9uOtsF\%r3p2eRs1uLEf<rs1<P?*Df=tq1V<``Yiou%W^au37^MQ3PT8LgaW3K[9?q%M*+6hHl.(Y.ID%[/DSH80ko?,EJW:<<lq6]uZ1HP$V)j4WqG:#e!!EO[`AC0.OQdOBtm-W$31m'lF<L+u^p_kXBR4QldU.:oq[((V=?T70fu!o<fRM%?K@gcieu_=+hl#L.N/aA\#9SL88aP/MC5p4kds3$O_4=//TLsoEf5gbIfpRE:I&ep\bmO,@5OXG3fmm=5&ggjN8MS'U%:e+B#f')%^dW.'VL?E8d\*hS7=oH6>K"N\a"?:n,A[qsVaW1H9basj_qK\XEQhY6,$nK*((i&EBG&?b*a461*41NT*_.gA5LX&!aL38$-nB/q%(1g?ia=S$e:>@&Q"b\JU7&dCZ8UgoK7@IBp[RfH^@>d)^.r%r0^Ok)^NS]Os`:l<Q>9n<D\4%;;(:QhZ$?;!bji&ea!CPch:+_B.%Uu>p*Mh:q3Ef9Q!'=UNBO5.,b/dl]X1peiPOh`4$(23tXg`f&V">5jW(V!#;'S227/JbjPD`f&N8-A<)(CBOSEfoMI`@)?NL57#Y%Pp)mC_.SA.j%%,1HZh(^R'nR.%6Rj<BH29*UdpaQc^&+6a=0_249]4no*n6ud(5,_#P\==1-#mWJ<TRF9=<-p-TS=@9NuQ8+df^6%dRHu/E]BhgrV3QJVGD4\,hTQqp;fE)>ao%JI<G$'7)(a,;%eSEn=nu?9pheM/@:'H,tEE9QV2p7&71S@26(@P?5RP8HP>^g1#?G]%:b(L"-AS`ZhIL@nET^AUZ!\,,nK'r5O^@d=>P*k3Xon+ri1_J>(VrO3Nfr=pB<5M^-o`ns8TZY<Mk2Ye7`:Gsa6$m9Ce7U3$Hr.%%EBdoO0M1qrRF]#0P$IVbV1"VW4[i3m\&cTD#QK`/XqT#Mq^H.R\6+kW/f"u`$J(?]<4!`W<<B]J"`gkq=P(!(mB@\b7F.?Li?,>9%XTQ3!);FoOP/tTj\;U%S3jO[8Z#)_BMd2iF0ClBkBs-*c3UoPaQo#V28=D%E&*qAH*VTZb-;#J9W45/.gi8B'3+L(tVAKI\2((t7%(SfoK;aeG\G*/gBKGQd]'\pYU3+tHDH7Qqi88fu@a2KI9@h;LT(GiTB=pY\aQ!i$tI&q0"S[>+]L]s=hWM\Lm4p%kM))JfDd0U<N%)/E?0)\mWe\t(EZ;0dk?5:=J4U\d(A4I9sL0#m:7UUbKM`MH:<O`&tX(,>H(%t8R6USLueU_l+9YV8NW'@?o#_$ichc>hD-aP47%%8(`]hS1(p=(ePFu`Ct[t-:3Z]Yp.,"rer`E'-TijPBH'O85hSE\aKA8nN>+CnVR=d8=#ATUSK8E@Z6i3,f_<U8W>HLk>VaCP+a2B%kRm)b-"[a5UT2SWdHd<V1&BmhFbai"E1\/Z9ocl1DFLru0QLcs"Jb<c0JID93M9P(@N"\n+)OO;%ff(%oDerOZGXc!\;aUm(<T`K%o$+#u#RpjM85DD.(M-+0JT7.i9[uHEb6Z@Lg5\.gW!=i)I\Imb#hOoZY\Nm8LjD`>D^T6\P*D-W?cTrtN>>^if1S^]UVC+L_VVW`%8^lll1NXS.BH`R/Qitiq7a+%I/=W5L"Y\#b;I6_9`htD7L3?Cf2=EY6s4HMRG^J$2("l$%r"cn8O6L*iNL5-'TSp*f["p?_;np[J%3@MX-(M,<@Lb>,L&ZUOYBT74u>Vt>&E4_-Q"R(6?S`Q7&U?n73(iI[<_22GS?\PSrK']6-)eQJh[j+cTe*VIf,#$C?fdA,D-p*(n%0LbS%9skPA,IId*mIM?ZD27BLlpsL2DBJ>&lk9J!PT>-"C-*&X0\i6A5b^-k5%=6M0\`0fYooei4)RpHG0D<N7H;XZICcKrAB\];%$SmJrl<))S(2_*>!`G7?(/7=sFr2K$MWW*n\_l"_eDO54(M+aI#VX==XWtJ,4,O[/7@BN+_2GVG)h]#=d?_R#b)Wn5G#@B`GHm(u%_G]`p/1OTMG0DD^7=+t_FA^US+43M%[]T[pMtB&1jJ"3"'@B6OF+6RoNRtN&.Nl;No/?oJMmC,oA/Ag:#Ei@L?N=.8R6:CM:[Ff,%4qusEHCla5;9l[@aY(_=J02"RoQj^-U9(U5ZAV2r5$cT[bT5&!\L;Ye(M+2WLb?go:_@!/2sN^GjeCf:?'HA/$LAtMTbk<h4*hY"%73_X;?8OD8eO"l`j5[t`AI#btCD2k<oV2/N6F@B6F/1#/a2+uF0+r#,oHL%'"YUL'?gsfVTNQd]$*,_(&[D1A([6S`Z&=:c(V<4?%IBe]deJGeFCI![A,%:/`/eV2ln=oa5::61__e7:!0C%k2Pm=r-0ml#%-n0asjFNJ^:Q(q`$*,_*dJP`!>):g[-ApB6O*?0ll.d)k%Mrr>keO$.ALbN?UM7#![O]_Ki(ZiY)!F;LbC4n4^,"N>P,lYO)72aEO+r?*N060o*BTd`e1&8d9da*O)'8aga5#L`?<&M6dmS$S9%<g>B;$Vt:f-E7rb9'H8.-aFR%e_H4T+qa@c9jVCaL$OkUFJ?WB)T%>g*bbm-dVl.;'++1^3`4kr$fOK7,=uu$;?''4dSIEj'C!^e%iJDXj^t1sGS"g`64fsfL`8?X[/^g$fJef(aR1NP$oGg22&^M%#ZUhi9Mcj"3V%:"0B+'Mu</BrfZ:I3?$X':c#,6DSo[j1Td6*!\%+,'i;4_(:hrKo"'``gI^"LH/i90d+:N8`g5eeL>D!*Z1!!()TU#bS9Z+qP_.d%Yf5!>5S9VJZK&Mqj^)KGMfg%?N"U\3e1TQppG1%"#>dHP62HJ[2g_5Qpp?)K*S\q&k7D3JUc-g#\4^]6d`t+>4!*U67.a7$J9l*`3BEOa;pa8BTYA7J^bmqj[!Y/4A#Vr%gK3+W;t9h%GIdjL7C/*Z+"q:h#9GXK+qb&kd6smgD.IZ7,mjjZaQeC\jEb"N/6YP"fLLLFdm8/1(<tkXm%_A3'o,r7g5_$4cptMce=qe>YscFC%'h;bcIk.htTGG(j*_7kd9g..SjHcnQ[)eg:5\SQ(#uL7X%t`.Pf1SMFOZOe>d%YYP7(#k-1+'#84'k'05=qaeP$,/\R];&KQLX6k%JLg<\?kuJ"N?nqY,'Q!jTge:oM7"G(7BX=]e=mP]mhr&m1B`0O"b#Ij_'X28;ij^1@hj6^J7Z6:fS*.4f@bkN,:nWtE^s4C9f-(r%n55qRA#:FQU0e.naIRE=1=;'>j2&PHq/r?eAlG0FarPiN7(He\EV1#imNiMM#?U-@_'YW6B&Jjea<SG02UUg"Wtri[jq'ukb@hG6%H?/m9hZPO"LMYm)<[^J./so)fIkZKt:T>q,bbFntO?nsUGsFmL.7uA_3^u]<]eoC0RNV[:aRppD=YsX0@#&V$p(ggnZJ-n#SP4C,%ZP1ZuI^C+]2!?B"pEZ.qm_fVkMqe?6A/<E,GW#,4,!^`_jN[rQZcG"EP$+UP6AR1]f`CLhC-,[$5ShVs$X'9H77\tMkDBgRjP!:a%/=L42i7"r\<"?Ui`6"\T=u8"XXMDdE:_H*QAdF7!H)]I#MiRoM=67d0/R!pr<!t!'_pnj$d>0MS"YIZ5k[51:L0QKlgaOU](<pVa%*$alaKaPnqH1D7S"V4[g5R+Q.`e6Eg=D*<pbT_6t$CO==L.&kql&]=?Mrq8ni3:#8kpR9EMae,C@Oje,qgLegAuK`3*nGqd#LFZ=%"u;l@lPPq&+k&rq)pG&PV84O1LJt62R76_W(46g`31\YfB$lRrj2&Z6^;pPcBV+177)?fAq//HU>^n`47I.%AC8$Gp\9^ClRPB2Q%V!XNt]\BSEhOkXp6X`M;Re6Y&%jnI-GQV,+6V%pJD<p[.6At!b0e[4f3`$%8nR-0>4]U5k;0[r"L3qp:k.rkK-noX@`Z':LG8^qd%7-c[uC*D%r`Z':LG<u`>7;a/sJ>.1$9smg611!*aqT*l5:GbkQ!J^k+Y0)!A:ZRNS-_G&nGlrfE"bC@"JL>K9i"/]F:;J*FBZ/Pi%\4=:?=u9aTetOCSAB/hgP3dGVJ`a8uSHkTFc4Z1lOW=\7BZ-8g=M'H^C/Tta:>[5'BZ+je!F$8oM*/Qh73;A%C=*=GRKBm1`fNAd%4*PWSW(#)Sg]M<=N$2-hG4%%+:lFK7aZ^'ESNG^6d%WPfJr`g'O6ej)75JP4JqJ-b!.e<1Nr_SAR^Q_#GdNY#33YjN\0,aKr,G#n%K0_UY!na5mJe/RFThj5#!t49e'`tgWhKe91:MQ"RBSb04)-_qA[E+=AO]jS;+0oVD&*JQ.a%7j$0`k`8m8rYL>gPu3'2XVLa[PtQ%Y],l1S(OHXRSgI(\*Nf7&c0jsP?TkRpiN`Z<AYD/Mrq97aAgT:bR+k]_RjhtMrre1&d8Z@j,o-LRP>tC9VBBnAa%&+ihR@#A!BM9%RdS0Z8^VFk@fT[h@n9RM4C(OPL$QBtkhs&C6jM=dosfX>Qm[*^'(SEqf6-W1_0+k=BfkAYjF*$7&R%$Y)"L'"f6-W1_0+n>CHL\#%*NOjO8&m+,FH]ia@[8AaMq10jl]YQqD217<>U:6RUiVe@8-T:$d<$$rjN`Z-RV9Vj:HCe`nRd#t'&Rhq9f+46_4Z@/C[g+I'<S%,%m$$o=V+Z*n!D4/L!rLRDY+&srFX35hQa@dt3]oXk@\.gld\T(B^1ejV@%nN+T!Ge7;L!X'hfU<;T6)MZn8I]';IJB#hfXE37)'%1%1h0&uO&ZOuUj0$ThLH8Aj@2rP/98d@&Qgl!%SjrPZlGT,a(XG,^t%Zd/HUj-laMr'[@LeEnJ!RP&$AZk[,_tHfY#*6=6'kL,-PZB%#iM0"Th5g\"&l*b\Hj`)0jI[#(<r4X$H/\7:gtN#a"$Tg3/L(A7[V,gfGkJ/riP.h7fnT\#bR.?.a`>O=;75,#Jn-^W3!eLkpS4e%Mrs%31<"="i4@#\RN[%mpbs327UFJiZkC94gY'&3V^`u="no('Z%]uf)+1-+hc`oYMY=sL_q"s]5t5D43eOM;-t!o+"om/:&qsEA%/aMud>^'eS37aXc'TR<K>s1p:0i<2'XWu'r/995(7%^u!c3Ptia.1gQl.V0I(qeR?o\9Qb\^Snr/=Ni/-if1f!GV7!5V/@bYP(Q?%S"N-tLb*RfpI#eAa'=!+ppW`=9k;X6>g5G>H4q2Y<_+d1B<1!d^q]-H2%kg:bRt(eOZS/S^nM^Igl?$O]n&V41-f6040+@ZU@BMR%9VFJ?d9j4=5u8I4Mrk+(4pq3lPJ7=-BV"b'[R4t"PJ(RLK$JfiS7op(./:7uIgnBbLbVhA:=(/(KG2<oIgn<`I$O2/'2:70`;a(j%1.==9#GHBbs!cN"LD^'Tn+YXuTg+##pYYr7+91o`5Q1N;J+l`'s6dolI/h[qrUO=a:s,C`J,-Q<I/j'sJ+Dp?mU,tigV<a_e'DBM%oAdUaiLg/Fj_oYCgOK%p:VZgoZ#2Zdrpn4Hqse%F]'E,W0<Y/@+9&`dpF#\UDZ8Oc%_g@e^\boe^\l2lIe2lTqPSi?p:!9cr;HDD%CZ4X&s5b8NoAe.]s7gF_rGVH1J(K[toJaP\mT71&lhlfnonS%rS+$CG%mU$gT7?U9?i@1sJ,@.@rUg'WIfI;]hu380huB;j^3os9%5E*AFLO[#;bEq,coYVc#rpcm.^ARM.If/pP\c2r$s6<[8ofrJsGQ/2<AFOa~>%AI9_PrivateDataEnd