%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: perturb1.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 259 194
%%HiResBoundingBox: 0 0 258.5752 193.6274
%%CropBox: 0 0 258.5752 193.6274
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 6484 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FF7DA8FD7EFF527DFFA859FD047D7E7D7D7D7E7D7D7D7E7D7D%7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E%7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D%7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E%7D7D7D7E7D7D7D7E7D7D7D7E7D7DFD04FF527DFF7DA8A8FFA8FFA8FFA8FF%A8FF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8A8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8A8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8FF59FD04FFA8FFFF7DA8FD%76FF7DFD07FF7DFD77FF7DFD07FF7EA8FD76FF7DFD07FF7DFD77FF7DFD07%FF7DA8FD76FF7DFD07FF7DFD77FF7DFD07FF7DA8FD75FFAF7DFD07FF7DFD%75FFA8FF7DFFA87DFF7DA8FF7DA8FD71FFA8FD04FF7DFF597DFF2752FF7D%84A8FD75FF52FFA852A85252FF84A8FD6DFFA8FFA8FD06FF7DFFFFFFA8FF%FFFF7DFD77FF7DFD07FF7DA8FD6BFFA8FD0AFF7DFD07FF7DFD77FF7DFD07%FF7DA8FD67FFA8FD0EFF7DFD07FF7DFD77FF7DFD07FF7DA8FD63FFA8FFA8%FD10FF7DFD07FF7DFD63FFA8FD13FF59FD07FF7EA8FD61FFA8FD11FFA8A8%7E7DFFA8A8FFA87DFF7DFD5FFFA8FD11FFA8A87DFFFFFF7DFF7D52FF2759%FF7D7DFD5DFFA8FD0FFFA8A87DA8A8FFFFFFA87DFFA87DA85952FF7DA8FD%5AFFA8FD0FFFA8A87DA8A8FD07FF53FFFFA8FFA8FFFF7DA8FD5BFFA8FD0B%FFA8A87DA8A8FD0AFF7DFD07FF7DFD59FFA8FD0BFFA9A87DA8A8FD0DFF7D%FD07FF7DA8FD55FFA8A8FD0AFFA8A87D7E7EFD10FF7DFD07FF7DFD55FFA8%FD0BFFA8A8A8FD13FF7DFD07FF7EA8FD52FFA8FD0AFFA8A87DA8FD10FFA9%FD04FF7DFD07FF7DFD51FFA8FD09FFA8A87DA8A8FD0FFFA8FFFFFFA8FFFF%FF7DFD07FF7DA8FD4FFFA8FD07FFA8A87DA8A8FD07FFA8FFA8FFA8FFA8FF%A8FFFFFFA8FD06FF7DFD07FF7DFD4FFFA8FD07FF7EA8A8FD09FFA8FD13FF%7DFFA87DFFA8A8FF7DA8FD4BFFA8FD07FFA8A87DA8FD04FFA9FFA8FFA8FD%16FF7DFF527DFF2852FF7DA8A8FD49FFA8FD05FFA8A87DA8FD04FFA8FD1D%FF7DFFA852A85253FF7D7DFD47FFA8A8A8FFFFFFA8A87DA8A8FFFFFFA8FF%A8FFA8FD1BFFA87DFD07FF7DFD47FFA9FD05FFA8A8A8FD27FF7DFD07FF7E%A8FD43FFA8FFA8FFFFFFA8A87DA8A8FFA8FFA8FD24FF7DFD07FF7DFD48FF%A87EA8A8FD2BFF7DFD07FF7DA8FD41FFA8FFFFFF7E7D7DA8A8FFA8FD2AFF%7DFD07FF7DFD43FFA8A87DA8A8FD2FFF7DFD07FF7DA8FD3DFFA8FFFFA97D%7D7DFD32FF7DFD07FF7DFD3FFFA8A87DAFFD34FF7DFD07FF7DA8FD39FFA8%FFA8A87DA8A8FD36FF7DFD07FF7DFD3BFF84A87DFD39FF7DFF7D52FF527D%FF7EA8FD37FFA8847DA8FD3BFF7DFF7D7DFF597DFF7DA8A8FD34FFA87DA8%A8FD3DFF52FFFF7DA852A8FF7DA8FD33FFA8A87DA8FD3FFF7DFD07FF7DFD%33FF7D7EA8FD41FF7DFD07FF7DA8FD2FFFA87D7DA8FD43FF7DFD07FF7DFD%2FFF7D7DA8FD45FF7DFD07FF7DA8FD2BFFA87D52A8FD47FF7DFD07FF7DFD%2BFF7D7DA8FD49FF7DFD07FF7EA8FD28FFA87DA8FD4BFF7DFD07FF7DFD27%FFA88484FD4DFF7DFD07FF7DA8FD24FFA87D7DA8FD4EFF7DFD04FF7DA8FF%7DA8FD23FFA87DFD51FF7DFD04FF52A8FF7D7DFD21FF7D7DA8FD51FFA859%FD04FFA8A8FF7DFD20FFA87DA8FD54FF7DFD07FF7DA8FD1DFFA87D7DFD56%FF7DFD07FF7DFD1DFF7D84A8FD57FF7DFD07FF7EA8FD1AFFA87DA8FD59FF%7DFD07FF7DFD1AFF847DFD5BFF7DFD07FF7DA8FD17FF7D7DA8FD5CFF7DFD%07FF7DFD17FF7DA8FD5EFF7DFD07FF7DA8FD13FFA8A87DA8FD5FFF7DFFA8%FD05FF7DFD13FFA8A87DFD61FF7DFF7D52FF277DFF7DA8FD0FFFA8FF7E7D%84FD62FF7DFF527D7D5252FF7D84A8FD0FFF7DA8FD64FF52FF7D7DA87D7E%FFA8A8FD0DFFA8FF7DA8FD65FF7DFD07FF7DFD0EFFA87DFD67FF7DFD07FF%7DA8FD09FFA8FFFFA87DFD68FF7DFD07FF7DFD0CFFA87DFD69FF7DFD07FF%7DA8FD05FFA8FFA8FFA87D7EFD6AFF7DFD07FF7DFD09FFA87DA8FD6BFF7D%FD07FF7DA8FFA8FFA8FFFFFF7E7DA8FD6CFF7DFD07FF7DFD07FFA8A8FD6E%FF7DFFFFA8FFA8FFFF7D84FD05FF7DA8FD6FFF7DFF527DA85259FF7DA8FF%FFA9FF7DA8FD70FF7DA87D527D2752FF7D7DAFA8FF7DA8FD59FF7D27FD04%7DA85259FFFFA8FFA8FFA8FFA8FFA8FFFFFFA853FF7D7DA8A87DFF7DFFFF%FFA8A8FD5AFF527D52525227525252FFFFFD0AA8FFFFFF7DFD07FF7D84FF%A8A8FD5BFFA8FD047D597D7DA8FD0FFF7DFD07FF7DFF84A8FD47FF7D7DA8%A9FFA8A8FFA8A8FFA8FFFFFFA8FFFFA8A8FD04FFA8A8FD13FF7DFD07FFA8%7DA8FD47FFA827525252275252FF272752522E5227595252275227525252%27525253277DFFFFA8FFA8FFA8FFFFFFA8FD04FF7DFD07FF7D7DFD48FFA8%7DA8597D7D5284A87DFD05527D7D595252527D52525259527D527D7DFD0F%FF7DFD07FF7DA8FD45FFA8FD09FFA8FFFFA87DFF59FD05FFA8FD05FFA8FD%14FF7DFD07FF7DFD45FF527DA8A87DA87DA87DA87D7DFF7D527EFD057D84%FD057DA87D5252A8A87DA8FD0FFF7DFD07FF7DA8FD43FFA8525252F85252%522728525252FF272752522E282759272727522752F8FD042752277DFFFF%A8FFA8FFA8FFA8FFA8FD04FF7DFD07FF7DFD45FF7DA87E7D7DA87DA8A8A8%7DA8A8A87D527D527DFFA87D7DA8A8A87D7D7DA87DA87EA8A8FD0FFF7DA8%7D52FF527DFF7DA8FFFFFFA8FFFFFFA8FFFFA8A8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFA8A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFA8A8FFFFFFA8FFFFFFA8FD0EFF7E7DFFA8FD11FFA8FFFFA8%A8FFFFFFA8FFFFFFA8FFFF7DFF527D7D2752FF8453597EFD077D7EFD177D%7EFD177D7EFD1B7DA8FD137D7EFD0C7D52FF7D7DA8A8A8FFFFA8FFA8FFA8%FFA8FFA8FD07FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD07FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FD13FFA87DFF7DFD15FFA87DA8FD%14FFA87DFF7DFD15FFA8A8FD15FFA8A8FF7DFD1BFFA8527D7D287DFD14FF%7D527DFD13FFA8527D7D287DFD14FF8452FD15FF527DA8277DFD1AFF7D7D%52A8527DFD14FF7D527EFD14FF7D52A8527DFD14FFA87DFD15FFA859A852%7DFD1BFFA8FFA8FD17FFA8FD15FFA8FFA8FD17FFA8FD17FFA8FD0AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:55:33+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T14:23:47+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T14:23:47+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9UtXiaVrTalK/jirzvyi&#xA;/mvy95B1/UtaivU1G1W5vLW01W5jvXVYLVeI+sQzTc1keMu1PTAZmCRooWqrJksvPgHx6xpRPiNL&#xA;uB/3cDirf1Pzz/1d9M/7hlx/2X4qh9RTz/a6fc3MOo6bczQRPJHbrplzykZFLBBS+Y1YinTFUR9T&#xA;88/9XfTP+4Zcf9l+Ku+p+ef+rvpn/cMuP+y/FXfU/PP/AFd9M/7hlx/2X4q76n55/wCrvpn/AHDL&#xA;j/svxV31Pzz/ANXfTP8AuGXH/ZfiqH1FPP8Aa6fc3MOo6bczQRPJHbrplzykZFLBBS+Y1YinTFUR&#xA;9T88/wDV30z/ALhlx/2X4q76n55/6u+mf9wy4/7L8Vd9T88/9XfTP+4Zcf8AZfirvqfnn/q76Z/3&#xA;DLj/ALL8Vd9T88/9XfTP+4Zcf9l+KofUU8/2un3NzDqOm3M0ETyR266Zc8pGRSwQUvmNWIp0xVEf&#xA;U/PP/V30z/uGXH/Zfirvqfnn/q76Z/3DLj/svxV31Pzz/wBXfTP+4Zcf9l+Ku+p+ef8Aq76Z/wBw&#xA;y4/7L8Vd9T88/wDV30z/ALhlx/2X4qh9RTz/AGun3NzDqOm3M0ETyR266Zc8pGRSwQUvmNWIp0xV&#xA;EfU/PP8A1d9M/wC4Zcf9l+Ku+p+ef+rvpn/cMuP+y/FXfU/PP/V30z/uGXH/AGX4q76n55/6u+mf&#xA;9wy4/wCy/FXfU/PP/V30z/uGXH/ZfiqH1FPP9rp9zcw6jptzNBE8kduumXPKRkUsEFL5jViKdMVR&#xA;H1Pzz/1d9M/7hlx/2X4q76n55/6u+mf9wy4/7L8VS/zDP590rQtR1VNU0qU6fazXRhOm3A5+jG0n&#xA;HkL/AOGvGlaHFWW4qkXn3/lBvMX/AGzL3/qHfFU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvPv/KDeYv8AtmXv/UO+KpubyzF4tkZ4xePG0yWx&#xA;dfVMSMqs4SvIqrOoJpSpGKsc80a1o+r/AJfeZLnSb+31C2TT76J57WVJ0Ei27FkLRlgGFRUYqynF&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqskuII5I4&#xA;pJESSYkRIzAM5AqQoPWg8MVY757F1P5E1925WnDT70mMFHZ0FvIAGNGAB6/Ca++Kr7/yiJfNsHme&#xA;ylgtb9LGTTbgtbiRpYZbm3mPJw8bVRLd1jrUKX5UIBVlWIWH5dyeSvy4822jamdQjuNLlVBwmQKL&#xA;awNurn1p7pubRxop4sqAKoRFAxV6VZWMNnEYoWlZS3ImeaWdqkAbNMzsBt0rTFVfFXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqoJPJOIZLcD0GLeqZVdHoKgcU&#xA;ZVO7dz28cVX28HoxKhdpWWtZZCC5LGpJoAOvYAAdtsVY/wDmNZQ3PkjXmkaVTDp146elLLECRbv9&#xA;oRsvMezVGKskxVIvPv8Ayg3mL/tmXv8A1Dviqe4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYqpGcmVY41ZuSFxMBWNf5amorXwX6abYqtjtSTDLcsJbqJSPUUMiVb&#xA;qVjLOB4A1Jp33OKq+KuxVIvPv/KDeYv+2Ze/9Q74qrP5o05PNK+WmjnW9axl1ETtEy23owyxxMBM&#xA;1FZ6zKaLWg+1TaqrEn/MPQfOn5eebLrRxJ6Frp10peRoG5LJauyMPRlm4VHVJOMi/tKMVegQXNvc&#xA;IXglSZAaFo2DCvWlRiqpirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUm&#xA;uoBK0CsHuVT1Pq6svqFegNCRSp2BOKrDbvOqNcmitGVns6q8JLCjVJUM3UjwPhiquiIiKiKFRQAq&#xA;gUAA2AAGKt4qoX2oWFhAbi+uYrWAED1ZnWNanoKsQK4qlo167u9tJ02a4U0pc3dbKD3/ALxTOfYr&#xA;CVPjiqQ+fbTUj5M1yTVtXWEHTrvhZ2irbxuwgc8XeQyzPv8AyMle64VZPe6Bpd7qEOozxv8AXbeJ&#xA;oIZ45ZYmETzRTun7tkqryW0fIH7QHE/CzAhWM635Q8v+XfInmhdIt2gE+lXCP6k005EcFtIsMSGd&#xA;5OEUYYhI0oq12GKsygtre3QpBEkKE1KxqFFelaDFVTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYqp3FxFbwtNKaItK0BYkk0ACqCSSTQAbnFVkkdzKZomIigKgRyxsfVJP2q1WieA&#xA;oSfliqsqhVCitAKCpJO3iTucVczKilmIVVFWY7AAdziqTHzTZ3B46RBNq7VoXtAvoDxrcyNHAaV3&#xA;CuW9sVcbPzNff71Xkelwn/dFiPWm6d7mdeNDvssII7NiqJsfLuj2Vx9aht+d7ShvZ2ee4pSlPWmL&#xA;yUp25UxVMcVY9+YVvBN5H8wGWNJDHpt4yFlDcT9XfcV6HFWQ4qkXn3/lBvMX/bMvf+od8VT3FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXMwUFmICgVJPQDFUO8lxKJorcGGSPiFnlT&#xA;lGSdzxUMjNQd+nz3xVUW3hWdrgL++cBS5qTxH7Ir0HsMVQd/r+k2Eognn5XbDklnCrT3DD+YQRB5&#xA;CNuvGmKob6z5mvjS2tY9Kg/3/eETzkd6QQvwFezNNt3TFW18radKyyao0mrzKQytfFXjBFKFbdQl&#xA;urCmzCPl74qmzNHGtWIRRQVOw3NAMVUvr1qfsP6lASfSBkpQ0/YDYq39YJI4QyOKgFqBaVFejlT9&#xA;39cVa9W6b7Fvx2r+9cLvvt8HqYqknnxro+SPMQKIq/o29qwck0+rv24j9eKqOo+bLvTfPFvpN6tr&#xA;b6FcaZNdpds7m4a6jura2SLjRUAc3YVFHJnagFOjKsXsfPGp+bPy+8/Tahp0mlvpy39rbWk0M8Ew&#xA;tzYLNH6wmC/vv3p5Bdht1BDMq9Isbz63EZPQmt6Nx4TpwY0ANQKnbfFURirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdiqHN6jOUth9YdJFjnCMtIq7kvU9h+yN+m1N8VakghEUkl86SxI/rAyq&#xA;gSIJupFRtxpXkT18BsFUuHmVLs8dEtZNUJNPrS/urMf5X1hxR18fREh9sVUpbPULhh+mdU9BWK8d&#xA;O04tDWtaK029xIdusfp1p9nFUfp1nY2MZh06wFtE7Eu6osYZlFC71/eMTSnIgk/LfFUTxvXA5MkN&#xA;RRlUGQg+KueI+9MVcbQOCJJZXqSRRzHQEUoPT4fjviq6O0tY25pCiv8AzBQD0p169NsVVcVdirsV&#xA;Y3+Y939X8ka6voyzerp14lYl5Ba277vvsMVZJiqReff+UG8xf9sy9/6h3xVPcVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdiqnLcRRPGj15StxQKrNvStTxBoPc7YqgNR1K0soEk1a5SzHrE28UUj&#xA;F5uG6oqhVkkY9SiD2+IdVUDJrmsXrGPTLUWaBgrXF8rPKK7grZxH1ACB1meOm2xxVdF5bW4aOfUS&#xA;9/cIeSPqBWRUYbDhbRcLdfEOPj8Tiqb/AFPmKTyvMCACpPFdqV+FONQ1Nw1fDpXFVaOKKMERoqBj&#xA;yYKAKk9Sad8VXYq7FXYq7FXYq7FXYqkXn3/lBvMX/bMvf+od8VT3FUi8+/8AKDeYv+2Ze/8AUO+K&#xA;p7irsVdirsVdirsVdirsVdirsVdirsVdirsVaZ0UqGYAuaICaVNCaD6ATiqS3/meztJoo5H4TEOz&#xA;aeIzNdutD6bKkTH00JH2pBTseOKoSCLzTfRcLdBoNk4LBpCLi+YserFvUjRh+0p51FAGHYqj9N8r&#xA;6ZZSPOQ1xdSqEluZmZ5HA6q0jlpGU0+yzEDoKDAqbIiIoVFCqOigUH4Yq3irsVdirsVdirsVdirs&#xA;VdirsVSLz7/yg3mL/tmXv/UO+KoW+1DzFaeerVHZ5PLE+mzco4bOSUx3/wBbtYoTJNH6jHkkzmlF&#xA;CqrM1QKqqxbStT8y6j+VPm2416W7ln+rXy2w1CxbTrlYhYivOExQqA0vNk4epxUhTI7A4q9Jsnv3&#xA;iJvoYoJeVFSCVplK0G5Zo4TWtdqfTiqvirsVdirsVdirsVdirsVdirsVdirmYKCzEBQKknoBiqSX&#xA;nmzT4buO0s0fU7mSMSiCyKSvxanAtRuMYatQ8rKlP2q7Yqg4tG8zaoifpe8FhEqnglkVa7+P7Qe6&#xA;KIE+UKA/5bdSVTnTNC0jSw31G1SF5N5ZQOUjk0qXkarsTSpJO5364FR2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2Ksb/MZ75fJGvfVYYpVOnXgmMsrRlU+rvuoWOTkfY0+eKskxVIvPv8Ayg3mL/tmXv8A&#xA;1Dviqe4q7FXYq7FXYq7FXYq7FXYq7FXYqlGp+Z9Psrs6dCsl9q5j9VNNtVLycSeKmRto4VJ/alZR&#xA;iqBj0fzJqzCbW706fbNHwbSdOcioJDN6t0QslTQD91xp2Y1OKp5p2mafptqtrYW6W0CmvCNQAWPV&#xA;m7sx7sdziqJxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvPv/KDeYv8AtmXv/UO+Kp7iqRef&#xA;f+UG8xf9sy9/6h3xVPcVdirsVdirsVdirsVdirsVS7WNf03SUX6yzSXMoP1axgUy3MxHaKJKs3uf&#xA;sr1Ygb4qgTaeZNXLfXZTo+mPsLK3at869/VukYpDX+WGrDqJcVTTStI0zSbNbPTbZLW2Tf04xSpo&#xA;AWY9WY03ZjU4qi8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSLz7/wAoN5i/7Zl7/wBQ&#xA;74qnuKsDn8u3Hl/8rvNWnzS+ryj1y6hk9SSZvRunuJ4g8k1XZ1jkAYsTv3PXFWa2VtNbxFJruW8Y&#xA;tyEs4iDAUA4j0UiWm3hXFVfFXYq7FXYq7FXYqoX1/Y6faSXl/cR2tpFQy3EzrHGtSFFWYgCpIGKp&#xA;I195i1slNMjfRtNNP9ylzGPrUgqaiC0kB9Pb9ucV/wCKyN8VTHSNA0zSjNJbRlru54m8vpT6lxOy&#xA;iimWVvian7K/ZXooAxVMcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVY3+Y1vNN5&#xA;I14x3UtsI9OvGdYhERIPq7/C3qJJt/q0PvirJMVSLz7/AMoN5i/7Zl7/ANQ74qnuKuxV2KuxV2Ku&#xA;xVILzzS811Np3l+3GqalbyeldlmaK1tiBv60/BwWFR+7QM/sBUhVUsfLKC7XUdYuDqmpqS0LyLxt&#xA;7eva2gqyx0/nJaQ92ptiqd4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkX&#xA;n3/lBvMX/bMvf+od8VVz5r0Aa/8A4fN1TVQvMw+nJw+x6nD1uPpep6fx8OXLj8VKb4qkWsea9B8y&#xA;/lz5mvdFuGubaPTruN2eKWAgvZesh4TJGxV4pUdWpRlYEEjFWZ4q7FXYq7FUFq2s2GlWwubx+ERk&#xA;WKo3+J+g/oBueigkgFVIjp+ueZOX6Rkk03QjIskFpGGgvZ0WhAncMxhWv7K/Gdq8DVcKsjsrGysb&#xA;WO0soI7a2iqI4YlCItSSaKNtyanAqvirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVSLz7/wAoN5i/7Zl7/wBQ74qhLv8AL/Tp/M3+IUvry2ufVS5NvEYPQNwkItmmo8Tvze1B&#xA;gaj/AGCSvF6MFUgP5c6F5K/L3zZb6VJNJHdaXcBxKtugCwWsiJ8NtFbqzUPxSOGkf9pjQYq9AstP&#xA;sLGIw2NtFaxM3No4EWNSxAHIhQBWgGKq+Kqc1xDDw9VuJlcRxjqWZugAG/Tc+AqegxVI9U8xTxy2&#xA;9nZQvLrMgZxpSlCwXcK9zKDIkMXcnqTQLU7FVfpPlhILpdS1JkutTBdouCBLe2MpJcW8Y6M1Tyla&#xA;rt3NKKFU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksb/Mawsb&#xA;ryRrzXVvFO0GnXjwmVFco4t3+JeQND7jFWSYqkXn3/lBvMX/AGzL3/qHfFU9xVDfWXljinh4pbVY&#xA;zPMrxsEWvRWC9SOp7b74qkM+o31/PNpXl92B5k3+qTFpEt+fxcYwx3dh9mNSOI3PGq8iqcaNodhp&#xA;Fs0NqpZ5W9S5uZDymmkPV5X/AGj+AGwAG2BUfirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdiqReff+UG8xf9sy9/6h3xVL28/BfOx8uNY/6MsptTfeqTJ9ZFl9fp9X&#xA;Cf3Xo7epz+38PHvirHbX8xB5z/LvzZcHT2070tJlngicymR7e6tJHhkZZYbc/EFO8fOM/sSNirO7&#xA;S8tbiOG5m9SS6i5Ige3ntmLkDk0cE1GpRqct6Co5dcVS6eTUNdvJLW1ZrfT4iY7nUEK1VlNGgt/t&#xA;BpaikkvSP7CVfkyqp/ZWVpY2sdraRLDbxCiRr0FTUn3JJqSepxVWxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KoTV9W0/SNLu9V1GX0LCxie4upuLPwjjUszcUDMaAdAK4qlMP5g+&#xA;TXRzPqkWnPH/AHlvqgfTZ1HBpORgvVgl4FI3YNxoQrb/AAnFVt3+Y/kC0Nqs3mHT+d8YRZxpcxSP&#xA;KLiQRROiozMULmnOnEbkkAHFWR4q7FXYqxv8xr2G28ka8siysZtOvET0opZQCbd/tGNW4D3agxVM&#xA;7ny35eutQGpXWl2k+ohUQXssETzBYpBNGvqMpaiSorqK7MARviqS+adB0TSPInmldJ0+108XOn3s&#xA;twLWGOESSG3eruIwvJvc4qinM2qX09jaSOtrF+71TVEPFnZSa2luyn4eP+7HH2Og/eEsiqe29vBb&#xA;QR29vGsUEShIokAVVVRQKoGwAGKqmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVi/nH8wtI&#xA;8q3+l2F7BLPc6v631QJNZW6/uGiVgXvbi0QsTOvFVJY77bYql1r+dHkKe1s5muLqKW+W39C2NldS&#xA;OZLqCO5SINDHLEziOeMvwcheS1O4qqibv81PK1nonlzWLn6xDaeZ3t1sA8VHjW5UFZJxX4I1LorM&#xA;CRVhSoNcVUU/Of8ALp+FNQuF5wi6+PT9QTjbNw43MnK3HpwN6q0meiH+briq7/lcn5ciCO4k1SSG&#xA;3kjSZZprO9iThLTgS0kKheSMJKHf0/3n938WKpRrv5n/AJa+YfLd/pGpXd/Z2uqW93bThLG7MyQK&#xA;9zbySfBBOsRpZzSBZAGVVLOooaKvP7+0/JmK8traDW9Znurm6h0FRp9nZaelt9akaRecaWVjB6ck&#xA;qCT1ArM/p0XkodSqmvl7Qfycs/qFtpnmTV2juL+C7tozbtwN4l3bXMNzK31FfTRzdW6KzlYmR1K7&#xA;nlir2e/03Qr24jTULW1ubjifSW4jjkfj1PEOCafLFUH+gfJXpmX9Hab6QbgX9GDiG/lrTriqqnl3&#xA;yktx6cemWAuI6PxWCHmu+zUC1HzxVQ8+/wDKDeYv+2Ze/wDUO+Kp7iqRefRXyL5jH/arvf8AqHfF&#xA;U2sbG0sLSKzs4lgtoFCRRIKAAYqr4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWBa7+a0Oi&#xA;eZb3T77T+GjWCSGfVhJIxMkVi9+8SIsJh5iJP7trhZTXkEKfFiqVW35weSNVv7XWLbS7+6u7Rn0q&#xA;zuYmtGX61e3EUTWaFbr0naR4oiJd4qbiTc4qkFh5g/J65FvZ2vlnUiumXsI0+L1VAk1K1/R1gtso&#xA;N58TQma0Q+tSEleQZvtFV3mfWvywtfJfkSbWvL6SW+s2kVhplrPcvM2m2c6RCSWB5TyZ4GaEc4+M&#xA;nHcMAuKsc0ib8trR9IN9pWu3K6f5eS41VZpE/wBIsH+peleXBXUpK2o4fDYrzUcj+7FPiVTfUPMX&#xA;5Ifo20vNT8r6lFpqWdisaSyBoViSGKS2V4Y711eT6kEdnKsWi/dsxaseKrLbzF+U8Ng0U/k/UgBF&#xA;fLcIl2k5SBG1iKX1ZZr2NmkaBL+R+JcDlRXZuGKpcPMH5K295psOj+UbuYSa7pcRmuL2VIonLXH1&#xA;K6hKT3XqIKz8YqKv89PhxVkeja5+T/PT4rPy3qKC4kt+Eksob0IpJdJktJZC94zekTLp/ponJkVe&#xA;HBQGXFXtbzIjBSGJPTijMN/cA+GKrPrcVK8ZOgP91J3NP5cVb+tRVpxk7/7rk7f7HFUn8+/8oN5i&#xA;/wC2Ze/9Q74qx298wecLT8xDbtBey6CGRFggs2ltzbyWw4zi5WIkT/XmERQyhVi/eMAoLBVQ8vTf&#xA;mF5j8oec7DzNpz6fqdxJd22k20ohWJYJ7JPSiSWFpBKEkdg0vf2oVVVPofMHnh1Jk8p+m1dl/SFu&#xA;23jsuFV/6e85/wDUr/8AT/B/TFVC/wBZ8+TWNxFa+XPQuZInWCb69AeEjKQrU4/snfFVf9Pec/8A&#xA;qV/+n+D+mKu/T3nP/qV/+n+D+mKu/T3nP/qV/wDp/g/pirv095z/AOpX/wCn+D+mKu/T3nP/AKlf&#xA;/p/g/piqhf6z58msbiK18uehcyROsE316A8JGUhWpx/ZO+Kq/wCnvOf/AFK//T/B/TFXfp7zn/1K&#xA;/wD0/wAH9MVd+nvOf/Ur/wDT/B/TFXfp7zn/ANSv/wBP8H9MVd+nvOf/AFK//T/B/TFVC/1nz5NY&#xA;3EVr5c9C5kidYJvr0B4SMpCtTj+yd8VV/wBPec/+pX/6f4P6Yq79Pec/+pX/AOn+D+mKpXcWd5c6&#xA;jJqdx+X9lNqUsbQS30k1k07RMnptG0pjLlSh4kVpTbFUOuhRqhRfy20wIYDaFQ9gB9XLczDT0/7v&#xA;n8XHpXfFVVtMma2Nq35d6e1syGNoDLZFChWJCpX06cStvEKeCL/KMVW6hZ63Po9zp9r5ItLcyWEm&#xA;m25E9nwjt5FoIQvCnpA0Pp/Z9sVSXSfy+tdMfR2g8hQSfoS2aC1WW4sGDzN6FbyWkI5XX+iJ+9FD&#xA;ufoVTx9LleaKd/y709poIoreCUy2RZIYGV4Y0b06qkbIpRRspApirUOlSQwC3h/LrT4rdUMSwpJY&#xA;qgjZZVZAojpxK3MoI8Hb+Y1VU4dDSBuUP5baZEwmjugUewU+vCWMUu0f20Mj8W6jkadcVVrfT7m2&#xA;QJb/AJe2EKKxdVjlskAdpI5i1BGNzLDG9f5lU9QMVR9/rPnyaxuIrXy56FzJE6wTfXoDwkZSFanH&#xA;9k74qr/p7zn/ANSv/wBP8H9MVd+nvOf/AFK//T/B/TFUr80X3nzU/L+paXb+Vh6moWs9qJDqFuAh&#xA;mjZAxFN6csVZzgV2KuxV2KvPvzDsfzIv72BNDhMVjDzW0nsr8xS/WpFT0bm9icWy/V4GVw0SSS+o&#xA;GB47UxVV8rWnnX/H2r6lqlrcw6LfQh7VLm4qtufTtlSCOCG+urctVJTIwt0Ib7Mjq2yrPMVdirsV&#xA;diqV+a7fWLjyvq9vokno6xNZXCabLXjxuGiYRHl+zR6b9sVS3yBZa3aaZeJqcd3bxSXssmmWmoXI&#xA;vbuG0KoFSa4EtzzJkEjL+9aikLXbFWTYq7FXYq7FWEfmZpnnS9/R3+G2uPgE4f6tcLbendN6f1W4&#xA;uKyRetbxUk9SIcuVR8Jpiql5WtPOv+PtX1LVLW5h0W+hD2qXNxVbc+nbKkEcEN9dW5aqSmRhboQ3&#xA;2ZHVtlWeYq7FXYq7FVO5ieW3lijme3eRGVJ4wheMsKB1EiunJeo5KR4g4qlHki21u18n6Lba6ztr&#xA;UNlAmotLIJXNwsYEhaQFg55V3qcVTvFXYq7FXYqx7zpp2vXttpZ0W6ngmttUsJ7uKCSOJZrRLqM3&#xA;KSs45FBDzJVGBbpuNiqknla086/4+1fUtUtbmHRb6EPapc3FVtz6dsqQRwQ311blqpKZGFuhDfZk&#xA;dW2VZ5irsVf/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:47BE6B6051D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:DF72445355D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -193.627 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 193.627 li
258.575 193.627 li
258.575 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
258.325 182.724 mo
255.175 182.724 li
15.875 182.724 mo
19.0249 182.724 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 46 /period putdup 48 /zero putdup 52 /four putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/space <1C60D8A8C9B854D00D> |-/period <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369E6> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWEW+Helvetica /Helvetica findfont ct_VMDictPut/DVPWEW+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero 3{/.notdef}rp /four 203{/.notdef}rp]DVPWEW+Helvetica nfDVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 185.06 mo( 0.4)[1.9458 3.89209 1.94629 0 ]xsh258.325 160.324 mo
255.175 160.324 li
15.875 160.324 mo
19.0249 160.324 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEW+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/DVPWEW+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero 3{/.notdef}rp /four /.notdef /six 201{/.notdef}rp]DVPWEW+Helvetica nfDVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 162.662 mo( 0.6)[1.9458 3.89209 1.94629 0 ]xsh258.325 137.974 mo
255.175 137.974 li
15.875 137.974 mo
19.0249 137.974 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEW+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/DVPWEW+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero 3{/.notdef}rp /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWEW+Helvetica nfDVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 140.31 mo( 0.8)[1.9458 3.89209 1.94629 0 ]xsh258.325 115.574 mo
255.175 115.574 li
15.875 115.574 mo
19.0249 115.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEW+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/DVPWEW+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one 2{/.notdef}rp /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWEW+Helvetica nfDVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf5.82813 117.912 mo( )sh7.78125 117.912 mo(1)sh258.325 93.1738 mo
255.175 93.1738 li
15.875 93.1738 mo
19.0249 93.1738 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEW+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/DVPWEW+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWEW+Helvetica nfDVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 95.5054 mo( 1.2)[1.9458 3.89209 1.94629 0 ]xsh258.325 70.8237 mo
255.175 70.8237 li
15.875 70.8237 mo
19.0249 70.8237 li
@
DVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 73.1616 mo( 1.4)[1.9458 3.89209 1.94629 0 ]xsh258.325 48.4238 mo
255.175 48.4238 li
15.875 48.4238 mo
19.0249 48.4238 li
@
DVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 50.7554 mo( 1.6)[1.9458 3.89209 1.94629 0 ]xsh258.325 26.0737 mo
255.175 26.0737 li
15.875 26.0737 mo
19.0249 26.0737 li
@
DVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 28.4116 mo( 1.8)[1.9458 3.89209 1.94629 0 ]xsh258.325 3.67383 mo
255.175 3.67383 li
15.875 3.67383 mo
19.0249 3.67383 li
@
DVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf5.82813 6.01318 mo( )sh7.78125 6.01318 mo(2)sh40.125 3.67383 mo
40.125 6.82373 li
40.125 182.724 mo
40.125 179.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A75CA669> |-/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEW+Helvetica /Encoding getdup 45 /hyphen putdup 53 /five putpop%ADOEndSubsetFont
/DVPWEW+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]DVPWEW+Helvetica nfDVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf34.0938 192.052 mo(-0.5)[2.33105 3.89209 1.9458 0 ]xsh88.625 3.67383 mo
88.625 6.82373 li
88.625 182.724 mo
88.625 179.574 li
@
DVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf85.7031 192.052 mo( )sh87.6484 192.052 mo(0)sh137.125 3.67383 mo
137.125 6.82373 li
137.125 182.724 mo
137.125 179.574 li
@
DVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf131.289 192.052 mo( 0.5)[1.94629 3.8916 1.94629 0 ]xsh185.575 3.67383 mo
185.575 6.82373 li
185.575 182.724 mo
185.575 179.574 li
@
DVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf182.656 192.052 mo( )sh184.602 192.052 mo(1)sh234.075 3.67383 mo
234.075 6.82373 li
234.075 182.724 mo
234.075 179.574 li
@
DVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf228.234 192.052 mo( 1.5)[1.94629 3.8916 1.94629 0 ]xsh15.875 3.67383 mo
15.875 182.724 li
258.325 182.724 li
258.325 3.67383 li
15.875 3.67383 li
15.875 3.67383 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/E <1C60D8A8C9B64EDF885E9C70E86F4D6078E7D1BF0D69911FD55CAA5C46B6C6C433175B8381217040BB42F142B1A0E1EA4F6BED24146D2DB65AFCA0> |-/a <1C60D8A8C9B7EF32A0B922DB529D708010F72F0E62F6CA36E98277AFD8C536E6814BFC8F2509E1B2B1B62A6BDA8D1A6ED67728D80620B28FE439D2F57DCEC5483105FEA93379701773DF23A415938C688874994BCC9880105CE27AC2270A13FA38E952045C5E8C52BEF83397E5FBEEFAB993BE33E385A5E36620F7427AB5E4423C6A4ED6DE24A89F54E52C8FAD8A45FAD4B8F6CFD50EB7D35BF120B079B932E0EE2F7685462C7EC6E9B818F0F9E1F7814D04F2B9AAFA6704B8B745452B73181F38CB34F1645F> |-/c <1C60D8A8C9B7A73DE7D498F17521D6359F9ADD96B62202C43AB7E2B6A506D4DE60506EB0B21A851A7E637BA285607D05D1170907CD76EA31977E70CEDA0DED90924EF61C48FC884B70C05F0A56FF474D664DA9646860BA> |-/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B5837088353D9095E679DCF29A> |-/x <1C60D8A8C9B7A73DEE9439F61CF83FD6F0AADDB8373458EFEDE4BF6C46155F8370F02E9CE5FFD24DBE7D153354FABD4F844978ABB054761731A2B93E507FE62552012BB1EB5E1E3EE678332D9E> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEW+Helvetica /Encoding getdup 69 /E putdup 97 /a putdup 99 /c putdup 116 /t putdup 120 /x putpop%ADOEndSubsetFont
/DVPWEW+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 12{/.notdef}rp /E 27{/.notdef}rp /a /.notdef /c 16{/.notdef}rp /t 3{/.notdef}rp /x 135{/.notdef}rp]DVPWEW+Helvetica nfDVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf208.266 164.412 mo(Exact)[4.66895 3.5 3.8916 3.5 0 ]xsh242.525 47.4736 mo
242.775 47.3735 li
243.025 47.3237 li
243.275 47.2236 li
243.525 47.1235 li
243.775 47.0234 li
244.025 46.9736 li
244.225 46.8735 li
244.475 46.7734 li
244.725 46.7236 li
244.975 46.6235 li
245.225 46.5234 li
245.475 46.4238 li
245.725 46.3735 li
245.925 46.2734 li
246.175 46.1738 li
246.425 46.0737 li
246.675 46.0234 li
246.925 45.9238 li
247.175 45.8237 li
247.425 45.7734 li
247.625 45.6733 li
247.875 45.5737 li
248.125 45.4736 li
248.375 45.4233 li
248.625 45.3237 li
248.875 45.2236 li
249.125 45.1235 li
249.325 45.0737 li
249.575 44.9736 li
249.825 44.8735 li
250.075 44.8237 li
250.325 44.7236 li
250.575 44.6235 li
250.825 44.5234 li
251.025 44.4736 li
251.275 44.3735 li
251.525 44.2734 li
251.775 44.2236 li
252.025 44.1235 li
252.275 44.0234 li
252.525 43.9233 li
252.725 43.8735 li
252.975 43.7734 li
253.225 43.6733 li
253.475 43.6235 li
253.725 43.5234 li
253.975 43.4233 li
254.175 43.3735 li
254.425 43.2734 li
254.675 43.1733 li
254.925 43.0732 li
255.175 43.0234 li
255.425 42.9233 li
255.675 42.8232 li
255.875 42.7734 li
256.125 42.6733 li
256.375 42.5732 li
256.625 42.5234 li
256.875 42.4233 li
257.125 42.3232 li
257.375 42.2734 li
257.575 42.1733 li
257.825 42.0732 li
258.075 41.9736 li
258.325 41.9233 li
217.325 56.7734 mo
217.575 56.6738 li
217.775 56.5737 li
218.025 56.5234 li
218.275 56.4238 li
218.525 56.3237 li
218.775 56.2236 li
219.025 56.1235 li
219.275 56.0234 li
219.475 55.9736 li
219.725 55.8735 li
219.975 55.7734 li
220.225 55.6738 li
220.475 55.5737 li
220.725 55.4736 li
220.975 55.4233 li
221.175 55.3237 li
221.425 55.2236 li
221.675 55.1235 li
221.925 55.0234 li
222.175 54.9736 li
222.425 54.8735 li
222.625 54.7734 li
222.875 54.6733 li
223.125 54.5737 li
223.375 54.4736 li
223.625 54.4233 li
223.875 54.3237 li
224.125 54.2236 li
224.325 54.1235 li
224.575 54.0234 li
224.825 53.9736 li
225.075 53.8735 li
225.325 53.7734 li
225.575 53.6733 li
225.825 53.5732 li
226.025 53.5234 li
226.275 53.4233 li
226.525 53.3232 li
226.775 53.2236 li
227.025 53.1235 li
227.275 53.0732 li
227.525 52.9736 li
227.725 52.8735 li
227.975 52.7734 li
228.225 52.6733 li
228.475 52.6235 li
228.725 52.5234 li
228.975 52.4233 li
229.225 52.3232 li
229.425 52.2236 li
229.675 52.1733 li
229.925 52.0732 li
230.175 51.9736 li
230.425 51.8735 li
230.675 51.8232 li
230.925 51.7236 li
231.125 51.6235 li
231.375 51.5234 li
231.625 51.4233 li
231.875 51.3735 li
232.125 51.2734 li
232.375 51.1733 li
232.575 51.0732 li
232.825 51.0234 li
233.075 50.9233 li
233.325 50.8232 li
233.575 50.7236 li
233.825 50.6235 li
234.075 50.5732 li
234.275 50.4736 li
234.525 50.3735 li
234.775 50.2734 li
235.025 50.2236 li
235.275 50.1235 li
235.525 50.0234 li
235.775 49.9233 li
235.975 49.8232 li
236.225 49.7734 li
236.475 49.6733 li
236.725 49.5732 li
236.975 49.4731 li
237.225 49.4233 li
237.475 49.3232 li
237.675 49.2231 li
237.925 49.1235 li
238.175 49.0732 li
238.425 48.9731 li
238.675 48.8735 li
238.925 48.7734 li
239.175 48.7231 li
239.375 48.6235 li
239.625 48.5234 li
239.875 48.4233 li
240.125 48.3735 li
240.375 48.2734 li
240.625 48.1733 li
240.875 48.0732 li
241.075 48.0234 li
241.325 47.9233 li
241.575 47.8232 li
241.825 47.7231 li
242.075 47.6733 li
242.325 47.5732 li
242.525 47.4731 li
192.075 66.6235 mo
192.325 66.5234 li
192.575 66.4238 li
192.775 66.3237 li
193.025 66.2236 li
193.275 66.1235 li
193.525 66.0234 li
193.775 65.9238 li
194.025 65.8237 li
194.275 65.7236 li
194.475 65.6235 li
194.725 65.5234 li
194.975 65.4233 li
195.225 65.3237 li
195.475 65.2236 li
195.725 65.1733 li
195.975 65.0737 li
196.175 64.9736 li
196.425 64.8735 li
196.675 64.7734 li
196.925 64.6733 li
197.175 64.5737 li
197.425 64.4736 li
197.675 64.3735 li
197.875 64.2734 li
198.125 64.1733 li
198.375 64.0732 li
198.625 63.9736 li
198.875 63.9233 li
199.125 63.8232 li
199.375 63.7236 li
199.575 63.6235 li
199.825 63.5234 li
200.075 63.4233 li
200.325 63.3232 li
200.575 63.2236 li
200.825 63.1235 li
201.025 63.0234 li
201.275 62.9233 li
201.525 62.8735 li
201.775 62.7734 li
202.025 62.6733 li
202.275 62.5732 li
202.525 62.4736 li
202.725 62.3735 li
202.975 62.2734 li
203.225 62.1733 li
203.475 62.0732 li
203.725 61.9736 li
203.975 61.9233 li
204.225 61.8232 li
204.425 61.7236 li
204.675 61.6235 li
204.925 61.5234 li
205.175 61.4233 li
205.425 61.3232 li
205.675 61.2236 li
205.925 61.1235 li
206.125 61.0732 li
206.375 60.9736 li
206.625 60.8735 li
206.875 60.7734 li
207.125 60.6733 li
207.375 60.5732 li
207.625 60.4731 li
207.825 60.3735 li
208.075 60.3232 li
208.325 60.2231 li
208.575 60.1235 li
208.825 60.0234 li
209.075 59.9233 li
209.325 59.8232 li
209.525 59.7231 li
209.775 59.623 li
210.025 59.5732 li
210.275 59.4731 li
210.525 59.373 li
210.775 59.2734 li
210.975 59.1733 li
211.225 59.0732 li
211.475 58.9731 li
211.725 58.9233 li
211.975 58.8232 li
212.225 58.7231 li
212.475 58.623 li
212.675 58.5234 li
212.925 58.4233 li
213.175 58.3232 li
213.425 58.2734 li
213.675 58.1733 li
213.925 58.0732 li
214.175 57.9731 li
214.375 57.873 li
214.625 57.7734 li
214.875 57.6733 li
215.125 57.623 li
215.375 57.5234 li
215.625 57.4233 li
215.875 57.3232 li
216.075 57.2231 li
216.325 57.123 li
216.575 57.0732 li
216.825 56.9731 li
217.075 56.873 li
217.325 56.7734 li
166.825 77.0737 mo
167.075 76.9736 li
167.325 76.8735 li
167.575 76.7734 li
167.825 76.6738 li
168.025 76.5737 li
168.275 76.4736 li
168.525 76.3237 li
168.775 76.2236 li
169.025 76.1235 li
169.275 76.0234 li
169.475 75.9238 li
169.725 75.8237 li
169.975 75.7236 li
170.225 75.6235 li
170.475 75.5234 li
170.725 75.4233 li
170.975 75.3237 li
171.175 75.2236 li
171.425 75.1235 li
171.675 75.0234 li
171.925 74.9233 li
172.175 74.8232 li
172.425 74.6733 li
172.675 74.5732 li
172.875 74.4736 li
173.125 74.3735 li
173.375 74.2734 li
173.625 74.1733 li
173.875 74.0732 li
174.125 73.9736 li
174.375 73.8735 li
174.575 73.7734 li
174.825 73.6733 li
175.075 73.5732 li
175.325 73.4736 li
175.575 73.3735 li
175.825 73.2734 li
176.075 73.1733 li
176.275 73.0732 li
176.525 72.9736 li
176.775 72.8735 li
177.025 72.7734 li
177.275 72.6733 li
177.525 72.5732 li
177.775 72.4736 li
177.975 72.3735 li
178.225 72.2734 li
178.475 72.1733 li
178.725 72.0732 li
178.975 71.9736 li
179.225 71.8735 li
179.425 71.7734 li
179.675 71.6733 li
179.925 71.5732 li
180.175 71.4731 li
180.425 71.3735 li
180.675 71.2734 li
180.925 71.1733 li
181.125 71.0732 li
181.375 70.9731 li
181.625 70.8735 li
181.875 70.7734 li
182.125 70.6733 li
182.375 70.5732 li
182.625 70.4731 li
182.825 70.373 li
183.075 70.2734 li
183.325 70.1733 li
183.575 70.0732 li
183.825 69.9731 li
184.075 69.873 li
184.325 69.7734 li
184.525 69.6733 li
184.775 69.5732 li
185.025 69.4731 li
185.275 69.373 li
185.525 69.2734 li
185.775 69.1733 li
186.025 69.0732 li
186.225 68.9731 li
186.475 68.873 li
186.725 68.7734 li
186.975 68.6733 li
187.225 68.5732 li
187.475 68.4731 li
187.725 68.373 li
187.925 68.2734 li
188.175 68.1733 li
188.425 68.0732 li
188.675 67.9731 li
188.925 67.873 li
189.175 67.7734 li
189.425 67.6733 li
189.625 67.5732 li
189.875 67.4731 li
190.125 67.373 li
190.375 67.2729 li
190.625 67.1733 li
190.875 67.0732 li
191.075 66.9731 li
191.325 66.873 li
191.575 66.8232 li
191.825 66.7231 li
192.075 66.623 li
141.575 88.3237 mo
141.825 88.2236 li
142.075 88.1235 li
142.325 87.9736 li
142.575 87.8735 li
142.825 87.7734 li
143.025 87.6738 li
143.275 87.5234 li
143.525 87.4238 li
143.775 87.3237 li
144.025 87.2236 li
144.275 87.0737 li
144.525 86.9736 li
144.725 86.8735 li
144.975 86.7734 li
145.225 86.6733 li
145.475 86.5234 li
145.725 86.4233 li
145.975 86.3237 li
146.225 86.2236 li
146.425 86.0737 li
146.675 85.9736 li
146.925 85.8735 li
147.175 85.7734 li
147.425 85.6733 li
147.675 85.5234 li
147.875 85.4233 li
148.125 85.3232 li
148.375 85.2236 li
148.625 85.1235 li
148.875 84.9736 li
149.125 84.8735 li
149.375 84.7734 li
149.575 84.6733 li
149.825 84.5732 li
150.075 84.4233 li
150.325 84.3232 li
150.575 84.2236 li
150.825 84.1235 li
151.075 84.0234 li
151.275 83.8735 li
151.525 83.7734 li
151.775 83.6733 li
152.025 83.5732 li
152.275 83.4736 li
152.525 83.3735 li
152.775 83.2236 li
152.975 83.1235 li
153.225 83.0234 li
153.475 82.9233 li
153.725 82.8232 li
153.975 82.7236 li
154.225 82.5732 li
154.475 82.4736 li
154.675 82.3735 li
154.925 82.2734 li
155.175 82.1733 li
155.425 82.0732 li
155.675 81.9233 li
155.925 81.8232 li
156.175 81.7236 li
156.375 81.6235 li
156.625 81.5234 li
156.875 81.4233 li
157.125 81.3232 li
157.375 81.1733 li
157.625 81.0732 li
157.875 80.9731 li
158.075 80.8735 li
158.325 80.7734 li
158.575 80.6733 li
158.825 80.5732 li
159.075 80.4233 li
159.325 80.3232 li
159.524 80.2231 li
159.774 80.123 li
160.024 80.0234 li
160.274 79.9233 li
160.524 79.8232 li
160.774 79.7231 li
161.024 79.5732 li
161.225 79.4731 li
161.475 79.373 li
161.725 79.2734 li
161.975 79.1733 li
162.225 79.0732 li
162.475 78.9731 li
162.725 78.873 li
162.925 78.7734 li
163.175 78.623 li
163.425 78.5234 li
163.675 78.4233 li
163.925 78.3232 li
164.175 78.2231 li
164.425 78.123 li
164.625 78.0234 li
164.875 77.9233 li
165.125 77.8232 li
165.375 77.7231 li
165.625 77.5732 li
165.875 77.4731 li
166.125 77.373 li
166.325 77.2734 li
166.575 77.1733 li
166.825 77.0732 li
116.325 100.574 mo
116.575 100.474 li
116.825 100.324 li
117.075 100.224 li
117.325 100.074 li
117.575 99.9741 li
117.825 99.8237 li
118.025 99.7241 li
118.275 99.5737 li
118.525 99.4741 li
118.775 99.3745 li
119.025 99.2241 li
119.275 99.1245 li
119.525 98.9741 li
119.725 98.8745 li
119.975 98.7241 li
120.225 98.6245 li
120.475 98.4741 li
120.725 98.3745 li
120.975 98.2729 li
121.225 98.1245 li
121.425 98.0229 li
121.675 97.874 li
121.925 97.7734 li
122.175 97.6738 li
122.425 97.5234 li
122.675 97.4238 li
122.925 97.2734 li
123.125 97.1738 li
123.375 97.0737 li
123.625 96.9238 li
123.875 96.8237 li
124.125 96.6738 li
124.375 96.5737 li
124.625 96.4736 li
124.825 96.3237 li
125.075 96.2236 li
125.325 96.0737 li
125.575 95.9736 li
125.825 95.874 li
126.075 95.7236 li
126.325 95.624 li
126.525 95.4736 li
126.775 95.374 li
127.025 95.2739 li
127.275 95.1235 li
127.525 95.0239 li
127.775 94.9238 li
127.975 94.7739 li
128.225 94.6738 li
128.475 94.5737 li
128.725 94.4238 li
128.975 94.3237 li
129.225 94.1738 li
129.475 94.0737 li
129.675 93.9736 li
129.925 93.8237 li
130.175 93.7236 li
130.425 93.6235 li
130.675 93.4736 li
130.925 93.3735 li
131.175 93.2734 li
131.375 93.1235 li
131.625 93.0234 li
131.875 92.9238 li
132.125 92.7734 li
132.375 92.6738 li
132.625 92.5737 li
132.875 92.4238 li
133.075 92.3237 li
133.325 92.2236 li
133.575 92.0737 li
133.825 91.9736 li
134.075 91.8735 li
134.325 91.7734 li
134.575 91.6235 li
134.775 91.5234 li
135.025 91.4238 li
135.275 91.2734 li
135.525 91.1738 li
135.775 91.0737 li
136.024 90.9238 li
136.274 90.8237 li
136.475 90.7236 li
136.725 90.6235 li
136.975 90.4736 li
137.225 90.3735 li
137.475 90.2734 li
137.725 90.1235 li
137.925 90.0234 li
138.175 89.9238 li
138.425 89.8237 li
138.675 89.6738 li
138.925 89.5737 li
139.175 89.4736 li
139.425 89.3237 li
139.625 89.2236 li
139.875 89.1235 li
140.125 89.0234 li
140.375 88.8735 li
140.625 88.7734 li
140.875 88.6738 li
141.125 88.5737 li
141.325 88.4233 li
141.575 88.3237 li
91.125 114.125 mo
91.375 114.023 li
91.5752 113.875 li
91.8252 113.724 li
92.0752 113.574 li
92.3252 113.474 li
92.5752 113.324 li
92.8252 113.173 li
93.0752 113.023 li
93.2749 112.923 li
93.5249 112.773 li
93.7749 112.625 li
94.0249 112.523 li
94.2749 112.375 li
94.5249 112.224 li
94.7749 112.074 li
94.9751 111.974 li
95.2251 111.824 li
95.4751 111.673 li
95.7251 111.574 li
95.9751 111.423 li
96.2251 111.273 li
96.4248 111.125 li
96.6748 111.023 li
96.9253 110.875 li
97.1753 110.724 li
97.4253 110.625 li
97.6753 110.474 li
97.9253 110.324 li
98.125 110.224 li
98.375 110.074 li
98.625 109.923 li
98.875 109.824 li
99.125 109.673 li
99.375 109.523 li
99.625 109.423 li
99.8252 109.273 li
100.075 109.125 li
100.325 109.023 li
100.575 108.875 li
100.825 108.724 li
101.075 108.625 li
101.325 108.474 li
101.525 108.375 li
101.775 108.224 li
102.025 108.074 li
102.275 107.974 li
102.525 107.824 li
102.775 107.673 li
103.025 107.574 li
103.225 107.423 li
103.475 107.324 li
103.725 107.173 li
103.975 107.023 li
104.225 106.923 li
104.475 106.773 li
104.725 106.673 li
104.925 106.523 li
105.175 106.375 li
105.425 106.273 li
105.675 106.125 li
105.925 106.023 li
106.175 105.875 li
106.375 105.724 li
106.625 105.625 li
106.875 105.474 li
107.125 105.375 li
107.375 105.224 li
107.625 105.125 li
107.875 104.974 li
108.075 104.875 li
108.325 104.724 li
108.575 104.574 li
108.825 104.474 li
109.075 104.324 li
109.325 104.224 li
109.575 104.074 li
109.775 103.974 li
110.025 103.824 li
110.275 103.724 li
110.525 103.574 li
110.775 103.474 li
111.025 103.324 li
111.275 103.224 li
111.475 103.074 li
111.725 102.923 li
111.975 102.824 li
112.225 102.673 li
112.475 102.574 li
112.725 102.423 li
112.975 102.324 li
113.175 102.173 li
113.425 102.074 li
113.675 101.923 li
113.925 101.824 li
114.175 101.673 li
114.425 101.574 li
114.675 101.423 li
114.875 101.324 li
115.125 101.224 li
115.375 101.074 li
115.625 100.974 li
115.875 100.824 li
116.125 100.724 li
116.325 100.574 li
65.875 129.574 mo
66.125 129.423 li
66.375 129.273 li
66.5752 129.074 li
66.8252 128.923 li
67.0752 128.773 li
67.3252 128.625 li
67.5752 128.474 li
67.8252 128.324 li
68.0752 128.125 li
68.2749 127.974 li
68.5249 127.824 li
68.7749 127.673 li
69.0249 127.523 li
69.2749 127.375 li
69.5249 127.224 li
69.7749 127.023 li
69.9751 126.875 li
70.2251 126.724 li
70.4751 126.574 li
70.7251 126.423 li
70.9751 126.273 li
71.2251 126.125 li
71.4751 125.974 li
71.6753 125.824 li
71.9253 125.673 li
72.1753 125.523 li
72.4253 125.324 li
72.6753 125.173 li
72.9253 125.023 li
73.1753 124.875 li
73.375 124.724 li
73.625 124.574 li
73.875 124.423 li
74.125 124.273 li
74.375 124.125 li
74.625 123.974 li
74.8252 123.824 li
75.0752 123.673 li
75.3252 123.523 li
75.5752 123.375 li
75.8252 123.224 li
76.0752 123.074 li
76.3252 122.923 li
76.5254 122.773 li
76.7754 122.625 li
77.0254 122.474 li
77.2754 122.324 li
77.5254 122.173 li
77.7754 122.023 li
78.0254 121.875 li
78.2251 121.724 li
78.4751 121.574 li
78.7251 121.423 li
78.9751 121.273 li
79.2251 121.125 li
79.4751 120.974 li
79.7251 120.824 li
79.9253 120.673 li
80.1753 120.574 li
80.4253 120.423 li
80.6753 120.273 li
80.9253 120.125 li
81.1753 119.974 li
81.4253 119.824 li
81.625 119.673 li
81.875 119.523 li
82.125 119.375 li
82.375 119.224 li
82.625 119.074 li
82.875 118.974 li
83.125 118.824 li
83.3252 118.673 li
83.5752 118.523 li
83.8252 118.375 li
84.0752 118.224 li
84.3252 118.074 li
84.5752 117.923 li
84.7754 117.824 li
85.0254 117.673 li
85.2754 117.523 li
85.5254 117.375 li
85.7754 117.224 li
86.0254 117.074 li
86.2754 116.923 li
86.4751 116.824 li
86.7251 116.673 li
86.9751 116.523 li
87.2251 116.375 li
87.4751 116.224 li
87.7251 116.125 li
87.9751 115.974 li
88.1753 115.824 li
88.4253 115.673 li
88.6753 115.523 li
88.9253 115.375 li
89.1753 115.273 li
89.4253 115.125 li
89.6753 114.974 li
89.8755 114.824 li
90.1255 114.724 li
90.3755 114.574 li
90.6255 114.423 li
90.8755 114.273 li
91.1255 114.125 li
40.625 147.923 mo
40.875 147.724 li
41.125 147.574 li
41.375 147.375 li
41.625 147.173 li
41.8252 146.974 li
42.0752 146.773 li
42.3252 146.574 li
42.5752 146.375 li
42.8252 146.173 li
43.0752 145.974 li
43.2749 145.824 li
43.5249 145.623 li
43.7749 145.423 li
44.0249 145.224 li
44.2749 145.023 li
44.5249 144.873 li
44.7749 144.673 li
44.9751 144.474 li
45.2251 144.273 li
45.4751 144.074 li
45.7251 143.923 li
45.9751 143.724 li
46.2251 143.523 li
46.4751 143.324 li
46.6753 143.173 li
46.9253 142.974 li
47.1753 142.773 li
47.4253 142.623 li
47.6753 142.423 li
47.9253 142.224 li
48.1753 142.074 li
48.375 141.873 li
48.625 141.673 li
48.875 141.523 li
49.125 141.324 li
49.375 141.123 li
49.625 140.974 li
49.875 140.773 li
50.0752 140.574 li
50.3252 140.423 li
50.5752 140.224 li
50.8252 140.074 li
51.0752 139.873 li
51.3252 139.724 li
51.5752 139.523 li
51.7754 139.324 li
52.0254 139.173 li
52.2754 138.974 li
52.5254 138.824 li
52.7754 138.623 li
53.0254 138.474 li
53.2251 138.273 li
53.4751 138.123 li
53.7251 137.923 li
53.9751 137.773 li
54.2251 137.574 li
54.4751 137.423 li
54.7251 137.224 li
54.9253 137.074 li
55.1753 136.873 li
55.4253 136.724 li
55.6753 136.523 li
55.9253 136.373 li
56.1753 136.224 li
56.4253 136.023 li
56.625 135.873 li
56.875 135.673 li
57.125 135.523 li
57.375 135.324 li
57.625 135.173 li
57.875 135.023 li
58.1255 134.824 li
58.3252 134.673 li
58.5752 134.523 li
58.8252 134.324 li
59.0752 134.173 li
59.3252 133.972 li
59.5752 133.824 li
59.8252 133.673 li
60.0254 133.472 li
60.2754 133.324 li
60.5254 133.173 li
60.7754 132.972 li
61.0254 132.824 li
61.2754 132.673 li
61.5254 132.523 li
61.7251 132.324 li
61.9751 132.173 li
62.2251 132.023 li
62.4751 131.824 li
62.7251 131.673 li
62.9751 131.523 li
63.2251 131.373 li
63.4253 131.173 li
63.6753 131.023 li
63.9253 130.873 li
64.1753 130.722 li
64.4253 130.523 li
64.6753 130.373 li
64.8755 130.222 li
65.1255 130.074 li
65.3755 129.873 li
65.6255 129.722 li
65.8755 129.574 li
15.875 171.523 mo
16.125 171.273 li
16.375 170.974 li
16.625 170.724 li
16.8252 170.423 li
17.0752 170.173 li
17.3252 169.875 li
17.5752 169.625 li
17.8252 169.324 li
18.0752 169.074 li
18.3252 168.824 li
18.5249 168.523 li
18.7749 168.273 li
19.0249 168.023 li
19.2749 167.724 li
19.5249 167.474 li
19.7749 167.224 li
20.0249 166.974 li
20.2251 166.724 li
20.4751 166.423 li
20.7251 166.173 li
20.9751 165.923 li
21.2251 165.673 li
21.4751 165.423 li
21.6753 165.173 li
21.9253 164.923 li
22.1753 164.673 li
22.4253 164.423 li
22.6753 164.173 li
22.9253 163.923 li
23.1753 163.673 li
23.375 163.423 li
23.625 163.173 li
23.875 162.974 li
24.125 162.724 li
24.375 162.474 li
24.625 162.224 li
24.875 161.974 li
25.0752 161.724 li
25.3252 161.523 li
25.5752 161.273 li
25.8252 161.023 li
26.0752 160.824 li
26.3252 160.574 li
26.5752 160.324 li
26.7754 160.125 li
27.0254 159.875 li
27.2754 159.625 li
27.5254 159.423 li
27.7754 159.173 li
28.0254 158.923 li
28.2754 158.724 li
28.4751 158.474 li
28.7251 158.275 li
28.9751 158.025 li
29.2251 157.824 li
29.4751 157.574 li
29.7251 157.375 li
29.9751 157.125 li
30.1753 156.923 li
30.4253 156.673 li
30.6753 156.474 li
30.9253 156.273 li
31.1753 156.025 li
31.4253 155.824 li
31.6753 155.625 li
31.875 155.375 li
32.125 155.173 li
32.375 154.923 li
32.625 154.724 li
32.875 154.523 li
33.125 154.324 li
33.3252 154.074 li
33.5752 153.875 li
33.8252 153.673 li
34.0752 153.474 li
34.3252 153.224 li
34.5752 153.023 li
34.8252 152.824 li
35.0254 152.625 li
35.2754 152.423 li
35.5254 152.173 li
35.7754 151.974 li
36.0254 151.773 li
36.2754 151.574 li
36.5254 151.375 li
36.7251 151.173 li
36.9751 150.974 li
37.2251 150.773 li
37.4751 150.523 li
37.7251 150.324 li
37.9751 150.125 li
38.2251 149.923 li
38.4253 149.724 li
38.6753 149.523 li
38.9253 149.324 li
39.1753 149.125 li
39.4253 148.923 li
39.6753 148.724 li
39.9253 148.523 li
40.1255 148.324 li
40.3755 148.125 li
40.6255 147.923 li
229.975 162.074 mo
249.925 162.074 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B64EDF9ABAB3D6B19B5B82CC49C93A7CA17E50CDDB377C52588B81292225BD4FB078DBAFD3981F1169229379F45CD94A50BD016A1B4BBDB2608F6EEE5C> |-/F <1C60D8A8C9B7D8BE41A64DA557BA3801C50A6D0B90DD03689D1958230FDD078C54AD8D0DA7DD6F0C9EC4C6354485AE4B93FC66781C> |-/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D72A7354004D800853CB28271AB7834CF7A2CB132BAFF26EF4E9D89B> |-/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706FE45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC754258679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52DA81BBE025DB4544A719A686DB3A0393D2301EEF9A4AA3D42067FE37BAF> |-/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA563254EC441C4BC3817B6ABCAA45C3FADDF2A0C1F1BCD1456474D7370B95E3791CB0774B8A788FAD31DAB8E43BE1DDCC8C2722C438CA874C21003F548D691EAB87ADC2BE2D98ABE47C6EE8D76> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/p <1C60D8A8C9B7EF321971A47DFE20E88A554AF6C7BF26D7DE21E7159091488A77474EFAE16E717C524A15C920EA73AA47F3FA5326288E9152C7B3C170946831BD532AD7339284A44181A5422DAA5A3944CCAFE4499DA2E6E45119A891F62D3E7DB19C997B84C7105E8154EEFB4DEC8858FC770AEE75D22C6FDC3AA98F517994> |-/r <1C60D8A8C9B81F2C150546EE4CBAAF688B47B2BE559294D5CB0899F2E804995909AC00E005B47DD0AC10879B5BC7D5032F4A9752992A333ADEB05A77287D04AF74FB420D308AD8> |-/s <1C60D8A8C9B7A73DF2FC7D734CFF3CEE44DEE08B4814311F759A12C668E2414B1F185B71CDFB81A4EFE4B67531A5BC3DCC468E7336CC99F93A0F8C9CAAC21479B9DF30E1F20CC55E079066616501132E6501EACD2121153832E7EB63F4284AC03D21E5D5BD534A816A07833E9E45AAF0AF784FB128B27EB090C038A83361862615D53FB49FC431C156AA9A7FD4E2EF50395549EA0CB64112DC> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEW+Helvetica /Encoding getdup 65 /A putdup 70 /F putdup 105 /i putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putpop%ADOEndSubsetFont
/DVPWEW+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 8{/.notdef}rp /A 3{/.notdef}rp /E /F 26{/.notdef}rp /a /.notdef /c 5{/.notdef}rp /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t 3{/.notdef}rp /x 135{/.notdef}rp]DVPWEW+Helvetica nfDVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf165.492 171.412 mo(First Approximation)[4.27734 1.55371 2.33105 3.5 1.94531 1.94629 4.66895 3.8916 3.89258 2.33105 3.68359 3.5 1.55371 5.83105 3.8916 1.94629 1.55371 3.8916 0 ]xsh0.25 lw
[2 3 ] 0 dsh
242.525 26.7734 mo
242.775 26.6235 li
243.025 26.4736 li
243.275 26.3237 li
243.525 26.2236 li
243.775 26.0737 li
244.025 25.9238 li
244.225 25.7734 li
244.475 25.6235 li
244.725 25.5234 li
244.975 25.3735 li
245.225 25.2236 li
245.475 25.0737 li
245.725 24.9238 li
245.925 24.8237 li
246.175 24.6738 li
246.425 24.5234 li
246.675 24.3735 li
246.925 24.2236 li
247.175 24.1235 li
247.425 23.9736 li
247.625 23.8237 li
247.875 23.6738 li
248.125 23.5234 li
248.375 23.4238 li
248.625 23.2734 li
248.875 23.1235 li
249.125 22.9736 li
249.325 22.8237 li
249.575 22.7236 li
249.825 22.5737 li
250.075 22.4238 li
250.325 22.2734 li
250.575 22.1235 li
250.825 22.0234 li
251.025 21.8735 li
251.275 21.7236 li
251.525 21.5737 li
251.775 21.4238 li
252.025 21.3237 li
252.275 21.1733 li
252.525 21.0234 li
252.725 20.8735 li
252.975 20.7236 li
253.225 20.6235 li
253.475 20.4736 li
253.725 20.3237 li
253.975 20.1733 li
254.175 20.0234 li
254.425 19.9233 li
254.675 19.7734 li
254.925 19.6235 li
255.175 19.4736 li
255.425 19.3237 li
255.675 19.2236 li
255.875 19.0737 li
256.125 18.9233 li
256.375 18.7734 li
256.625 18.6235 li
256.875 18.5234 li
257.125 18.3735 li
257.375 18.2236 li
257.575 18.0737 li
257.825 17.9233 li
258.075 17.8237 li
258.325 17.6733 li
217.325 41.3237 mo
217.575 41.1738 li
217.775 41.0234 li
218.025 40.9238 li
218.275 40.7734 li
218.525 40.6235 li
218.775 40.4736 li
219.025 40.3237 li
219.275 40.2236 li
219.475 40.0737 li
219.725 39.9238 li
219.975 39.7734 li
220.225 39.6235 li
220.475 39.5234 li
220.725 39.3735 li
220.975 39.2236 li
221.175 39.0737 li
221.425 38.9238 li
221.675 38.8237 li
221.925 38.6738 li
222.175 38.5234 li
222.425 38.3735 li
222.625 38.2236 li
222.875 38.1235 li
223.125 37.9736 li
223.375 37.8237 li
223.625 37.6738 li
223.875 37.5234 li
224.125 37.4238 li
224.325 37.2734 li
224.575 37.1235 li
224.825 36.9736 li
225.075 36.8237 li
225.325 36.7236 li
225.575 36.5737 li
225.825 36.4238 li
226.025 36.2734 li
226.275 36.1235 li
226.525 36.0234 li
226.775 35.8735 li
227.025 35.7236 li
227.275 35.5737 li
227.525 35.4233 li
227.725 35.3237 li
227.975 35.1733 li
228.225 35.0234 li
228.475 34.8735 li
228.725 34.7236 li
228.975 34.6235 li
229.225 34.4736 li
229.425 34.3237 li
229.675 34.1733 li
229.925 34.0234 li
230.175 33.9233 li
230.425 33.7734 li
230.675 33.6235 li
230.925 33.4736 li
231.125 33.3237 li
231.375 33.2236 li
231.625 33.0737 li
231.875 32.9233 li
232.125 32.7734 li
232.375 32.6235 li
232.575 32.5234 li
232.825 32.3735 li
233.075 32.2236 li
233.325 32.0737 li
233.575 31.9233 li
233.825 31.8237 li
234.075 31.6733 li
234.275 31.5234 li
234.525 31.3735 li
234.775 31.2236 li
235.025 31.1235 li
235.275 30.9736 li
235.525 30.8237 li
235.775 30.6733 li
235.975 30.5234 li
236.225 30.4233 li
236.475 30.2734 li
236.725 30.1235 li
236.975 29.9736 li
237.225 29.8237 li
237.475 29.7236 li
237.675 29.5737 li
237.925 29.4233 li
238.175 29.2734 li
238.425 29.1235 li
238.675 29.0234 li
238.925 28.8735 li
239.175 28.7236 li
239.375 28.5737 li
239.625 28.4233 li
239.875 28.3232 li
240.125 28.1733 li
240.375 28.0234 li
240.625 27.8735 li
240.875 27.7236 li
241.075 27.6235 li
241.325 27.4736 li
241.575 27.3232 li
241.825 27.1733 li
242.075 27.0234 li
242.325 26.9233 li
242.525 26.7734 li
192.075 55.8735 mo
192.325 55.7236 li
192.575 55.6235 li
192.775 55.4736 li
193.025 55.3237 li
193.275 55.1738 li
193.525 55.0234 li
193.775 54.9238 li
194.025 54.7734 li
194.275 54.6235 li
194.475 54.4736 li
194.725 54.3237 li
194.975 54.2236 li
195.225 54.0737 li
195.475 53.9238 li
195.725 53.7734 li
195.975 53.6235 li
196.175 53.5234 li
196.425 53.3735 li
196.675 53.2236 li
196.925 53.0737 li
197.175 52.9238 li
197.425 52.8237 li
197.675 52.6738 li
197.875 52.5234 li
198.125 52.3735 li
198.375 52.2236 li
198.625 52.1235 li
198.875 51.9736 li
199.125 51.8237 li
199.375 51.6738 li
199.575 51.5234 li
199.825 51.4238 li
200.075 51.2734 li
200.325 51.1235 li
200.575 50.9736 li
200.825 50.8237 li
201.025 50.7236 li
201.275 50.5737 li
201.525 50.4238 li
201.775 50.2734 li
202.025 50.1235 li
202.275 50.0234 li
202.525 49.8735 li
202.725 49.7236 li
202.975 49.5737 li
203.225 49.4233 li
203.475 49.3237 li
203.725 49.1733 li
203.975 49.0234 li
204.225 48.8735 li
204.425 48.7236 li
204.675 48.6235 li
204.925 48.4736 li
205.175 48.3237 li
205.425 48.1733 li
205.675 48.0234 li
205.925 47.9233 li
206.125 47.7734 li
206.375 47.6235 li
206.625 47.4736 li
206.875 47.3237 li
207.125 47.2236 li
207.375 47.0737 li
207.625 46.9233 li
207.825 46.7734 li
208.075 46.6235 li
208.325 46.5234 li
208.575 46.3735 li
208.825 46.2236 li
209.075 46.0737 li
209.325 45.9233 li
209.525 45.8237 li
209.775 45.6733 li
210.025 45.5234 li
210.275 45.3735 li
210.525 45.2236 li
210.775 45.1235 li
210.975 44.9736 li
211.225 44.8237 li
211.475 44.6733 li
211.725 44.5234 li
211.975 44.4233 li
212.225 44.2734 li
212.475 44.1235 li
212.675 43.9736 li
212.925 43.8237 li
213.175 43.7236 li
213.425 43.5737 li
213.675 43.4233 li
213.925 43.2734 li
214.175 43.1235 li
214.375 43.0234 li
214.625 42.8735 li
214.875 42.7236 li
215.125 42.5732 li
215.375 42.4233 li
215.625 42.3232 li
215.875 42.1733 li
216.075 42.0234 li
216.325 41.8735 li
216.575 41.7236 li
216.825 41.6235 li
217.075 41.4736 li
217.325 41.3232 li
166.825 70.4736 mo
167.075 70.3237 li
167.325 70.1738 li
167.575 70.0234 li
167.825 69.8735 li
168.025 69.7734 li
168.275 69.6235 li
168.525 69.4736 li
168.775 69.3237 li
169.025 69.1738 li
169.275 69.0737 li
169.475 68.9238 li
169.725 68.7734 li
169.975 68.6235 li
170.225 68.4736 li
170.475 68.3735 li
170.725 68.2236 li
170.975 68.0737 li
171.175 67.9238 li
171.425 67.7734 li
171.675 67.6738 li
171.925 67.5234 li
172.175 67.3735 li
172.425 67.2236 li
172.675 67.0737 li
172.875 66.9736 li
173.125 66.8237 li
173.375 66.6738 li
173.625 66.5234 li
173.875 66.3735 li
174.125 66.2734 li
174.375 66.1235 li
174.575 65.9736 li
174.825 65.8237 li
175.075 65.6738 li
175.325 65.5737 li
175.575 65.4238 li
175.825 65.2734 li
176.075 65.1235 li
176.275 64.9736 li
176.525 64.8735 li
176.775 64.7236 li
177.025 64.5737 li
177.275 64.4238 li
177.525 64.2734 li
177.775 64.1738 li
177.975 64.0234 li
178.225 63.8735 li
178.475 63.7236 li
178.725 63.5737 li
178.975 63.4736 li
179.225 63.3237 li
179.425 63.1738 li
179.675 63.0234 li
179.925 62.8735 li
180.175 62.7734 li
180.425 62.6235 li
180.675 62.4736 li
180.925 62.3237 li
181.125 62.1733 li
181.375 62.0737 li
181.625 61.9233 li
181.875 61.7734 li
182.125 61.6235 li
182.375 61.4736 li
182.625 61.3735 li
182.825 61.2236 li
183.075 61.0737 li
183.325 60.9233 li
183.575 60.7734 li
183.825 60.6733 li
184.075 60.5234 li
184.325 60.3735 li
184.525 60.2236 li
184.775 60.0737 li
185.025 59.9736 li
185.275 59.8237 li
185.525 59.6733 li
185.775 59.5234 li
186.025 59.3735 li
186.225 59.2734 li
186.475 59.1235 li
186.725 58.9736 li
186.975 58.8237 li
187.225 58.6733 li
187.475 58.5234 li
187.725 58.4233 li
187.925 58.2734 li
188.175 58.1235 li
188.425 57.9736 li
188.675 57.8237 li
188.925 57.7236 li
189.175 57.5737 li
189.425 57.4233 li
189.625 57.2734 li
189.875 57.1235 li
190.125 57.0234 li
190.375 56.8735 li
190.625 56.7236 li
190.875 56.5737 li
191.075 56.4233 li
191.325 56.3237 li
191.575 56.1733 li
191.825 56.0234 li
192.075 55.8735 li
141.575 85.0234 mo
141.825 84.8735 li
142.075 84.7236 li
142.325 84.5737 li
142.575 84.4736 li
142.825 84.3237 li
143.025 84.1738 li
143.275 84.0234 li
143.525 83.8735 li
143.775 83.7734 li
144.025 83.6235 li
144.275 83.4736 li
144.525 83.3237 li
144.725 83.1738 li
144.975 83.0737 li
145.225 82.9238 li
145.475 82.7734 li
145.725 82.6235 li
145.975 82.4736 li
146.225 82.3735 li
146.425 82.2236 li
146.675 82.0737 li
146.925 81.9238 li
147.175 81.7734 li
147.425 81.6738 li
147.675 81.5234 li
147.875 81.3735 li
148.125 81.2236 li
148.375 81.0737 li
148.625 80.9736 li
148.875 80.8237 li
149.125 80.6738 li
149.375 80.5234 li
149.575 80.3735 li
149.825 80.2734 li
150.075 80.1235 li
150.325 79.9736 li
150.575 79.8237 li
150.825 79.6738 li
151.075 79.5737 li
151.275 79.4238 li
151.525 79.2734 li
151.775 79.1235 li
152.025 78.9736 li
152.275 78.8735 li
152.525 78.7236 li
152.775 78.5737 li
152.975 78.4238 li
153.225 78.2734 li
153.475 78.1738 li
153.725 78.0234 li
153.975 77.8735 li
154.225 77.7236 li
154.475 77.5737 li
154.675 77.4736 li
154.925 77.3237 li
155.175 77.1733 li
155.425 77.0234 li
155.675 76.8735 li
155.925 76.7734 li
156.175 76.6235 li
156.375 76.4736 li
156.625 76.3237 li
156.875 76.1733 li
157.125 76.0737 li
157.375 75.9233 li
157.625 75.7734 li
157.875 75.6235 li
158.075 75.4736 li
158.325 75.3735 li
158.575 75.2236 li
158.825 75.0737 li
159.075 74.9233 li
159.325 74.7734 li
159.524 74.6733 li
159.774 74.5234 li
160.024 74.3735 li
160.274 74.2236 li
160.524 74.0737 li
160.774 73.9736 li
161.024 73.8237 li
161.225 73.6733 li
161.475 73.5234 li
161.725 73.3735 li
161.975 73.2734 li
162.225 73.1235 li
162.475 72.9736 li
162.725 72.8237 li
162.925 72.6733 li
163.175 72.5737 li
163.425 72.4233 li
163.675 72.2734 li
163.925 72.1235 li
164.175 71.9736 li
164.425 71.8735 li
164.625 71.7236 li
164.875 71.5737 li
165.125 71.4233 li
165.375 71.2734 li
165.625 71.1733 li
165.875 71.0234 li
166.125 70.8735 li
166.325 70.7236 li
166.575 70.5737 li
166.825 70.4736 li
116.325 99.5737 mo
116.575 99.4233 li
116.825 99.2729 li
117.075 99.1733 li
117.325 99.0229 li
117.575 98.8745 li
117.825 98.7241 li
118.025 98.5737 li
118.275 98.4741 li
118.525 98.3237 li
118.775 98.1733 li
119.025 98.0229 li
119.275 97.874 li
119.525 97.7734 li
119.725 97.624 li
119.975 97.4736 li
120.225 97.3232 li
120.475 97.1738 li
120.725 97.0737 li
120.975 96.9238 li
121.225 96.7734 li
121.425 96.6235 li
121.675 96.4736 li
121.925 96.3735 li
122.175 96.2236 li
122.425 96.0737 li
122.675 95.9238 li
122.925 95.7734 li
123.125 95.6738 li
123.375 95.5234 li
123.625 95.3735 li
123.875 95.2236 li
124.125 95.0737 li
124.375 94.9736 li
124.625 94.8237 li
124.825 94.6738 li
125.075 94.5234 li
125.325 94.3735 li
125.575 94.2734 li
125.825 94.1235 li
126.075 93.9736 li
126.325 93.8237 li
126.525 93.6738 li
126.775 93.5737 li
127.025 93.4238 li
127.275 93.2734 li
127.525 93.1235 li
127.775 92.9736 li
127.975 92.8735 li
128.225 92.7236 li
128.475 92.5737 li
128.725 92.4238 li
128.975 92.2734 li
129.225 92.1738 li
129.475 92.0234 li
129.675 91.8735 li
129.925 91.7236 li
130.175 91.5737 li
130.425 91.4736 li
130.675 91.3237 li
130.925 91.1738 li
131.175 91.0234 li
131.375 90.8735 li
131.625 90.7734 li
131.875 90.6235 li
132.125 90.4736 li
132.375 90.3237 li
132.625 90.1738 li
132.875 90.0737 li
133.075 89.9238 li
133.325 89.7734 li
133.575 89.6235 li
133.825 89.4736 li
134.075 89.3735 li
134.325 89.2236 li
134.575 89.0737 li
134.775 88.9238 li
135.025 88.7734 li
135.275 88.6738 li
135.525 88.5234 li
135.775 88.3735 li
136.024 88.2236 li
136.274 88.0737 li
136.475 87.9736 li
136.725 87.8237 li
136.975 87.6738 li
137.225 87.5234 li
137.475 87.3735 li
137.725 87.2734 li
137.925 87.1235 li
138.175 86.9736 li
138.425 86.8237 li
138.675 86.6738 li
138.925 86.5737 li
139.175 86.4238 li
139.425 86.2734 li
139.625 86.1235 li
139.875 85.9736 li
140.125 85.8735 li
140.375 85.7236 li
140.625 85.5737 li
140.875 85.4238 li
141.125 85.2734 li
141.325 85.1738 li
141.575 85.0234 li
91.125 114.125 mo
91.375 113.974 li
91.5752 113.875 li
91.8252 113.724 li
92.0752 113.574 li
92.3252 113.423 li
92.5752 113.273 li
92.8252 113.173 li
93.0752 113.023 li
93.2749 112.875 li
93.5249 112.724 li
93.7749 112.574 li
94.0249 112.474 li
94.2749 112.324 li
94.5249 112.173 li
94.7749 112.023 li
94.9751 111.875 li
95.2251 111.773 li
95.4751 111.625 li
95.7251 111.474 li
95.9751 111.324 li
96.2251 111.173 li
96.4248 111.074 li
96.6748 110.923 li
96.9253 110.773 li
97.1753 110.625 li
97.4253 110.474 li
97.6753 110.375 li
97.9253 110.224 li
98.125 110.074 li
98.375 109.923 li
98.625 109.773 li
98.875 109.673 li
99.125 109.523 li
99.375 109.375 li
99.625 109.224 li
99.8252 109.074 li
100.075 108.974 li
100.325 108.824 li
100.575 108.673 li
100.825 108.523 li
101.075 108.375 li
101.325 108.273 li
101.525 108.125 li
101.775 107.974 li
102.025 107.824 li
102.275 107.673 li
102.525 107.574 li
102.775 107.423 li
103.025 107.273 li
103.225 107.125 li
103.475 106.974 li
103.725 106.875 li
103.975 106.724 li
104.225 106.574 li
104.475 106.423 li
104.725 106.273 li
104.925 106.173 li
105.175 106.023 li
105.425 105.875 li
105.675 105.724 li
105.925 105.574 li
106.175 105.474 li
106.375 105.324 li
106.625 105.173 li
106.875 105.023 li
107.125 104.875 li
107.375 104.773 li
107.625 104.625 li
107.875 104.474 li
108.075 104.324 li
108.325 104.173 li
108.575 104.074 li
108.825 103.923 li
109.075 103.773 li
109.325 103.625 li
109.575 103.474 li
109.775 103.375 li
110.025 103.224 li
110.275 103.074 li
110.525 102.923 li
110.775 102.773 li
111.025 102.673 li
111.275 102.523 li
111.475 102.375 li
111.725 102.224 li
111.975 102.074 li
112.225 101.974 li
112.475 101.824 li
112.725 101.673 li
112.975 101.523 li
113.175 101.375 li
113.425 101.273 li
113.675 101.125 li
113.925 100.974 li
114.175 100.824 li
114.425 100.673 li
114.675 100.574 li
114.875 100.423 li
115.125 100.273 li
115.375 100.125 li
115.625 99.9741 li
115.875 99.8745 li
116.125 99.7241 li
116.325 99.5737 li
65.875 128.724 mo
66.125 128.574 li
66.375 128.423 li
66.5752 128.273 li
66.8252 128.125 li
67.0752 128.023 li
67.3252 127.875 li
67.5752 127.724 li
67.8252 127.574 li
68.0752 127.423 li
68.2749 127.324 li
68.5249 127.173 li
68.7749 127.023 li
69.0249 126.875 li
69.2749 126.724 li
69.5249 126.625 li
69.7749 126.474 li
69.9751 126.324 li
70.2251 126.173 li
70.4751 126.023 li
70.7251 125.923 li
70.9751 125.773 li
71.2251 125.625 li
71.4751 125.474 li
71.6753 125.324 li
71.9253 125.224 li
72.1753 125.074 li
72.4253 124.923 li
72.6753 124.773 li
72.9253 124.625 li
73.1753 124.523 li
73.375 124.375 li
73.625 124.224 li
73.875 124.074 li
74.125 123.923 li
74.375 123.824 li
74.625 123.673 li
74.8252 123.523 li
75.0752 123.375 li
75.3252 123.224 li
75.5752 123.125 li
75.8252 122.974 li
76.0752 122.824 li
76.3252 122.673 li
76.5254 122.523 li
76.7754 122.423 li
77.0254 122.273 li
77.2754 122.125 li
77.5254 121.974 li
77.7754 121.824 li
78.0254 121.724 li
78.2251 121.574 li
78.4751 121.423 li
78.7251 121.273 li
78.9751 121.125 li
79.2251 121.023 li
79.4751 120.875 li
79.7251 120.724 li
79.9253 120.574 li
80.1753 120.423 li
80.4253 120.324 li
80.6753 120.173 li
80.9253 120.023 li
81.1753 119.875 li
81.4253 119.724 li
81.625 119.574 li
81.875 119.474 li
82.125 119.324 li
82.375 119.173 li
82.625 119.023 li
82.875 118.875 li
83.125 118.773 li
83.3252 118.625 li
83.5752 118.474 li
83.8252 118.324 li
84.0752 118.173 li
84.3252 118.074 li
84.5752 117.923 li
84.7754 117.773 li
85.0254 117.625 li
85.2754 117.474 li
85.5254 117.375 li
85.7754 117.224 li
86.0254 117.074 li
86.2754 116.923 li
86.4751 116.773 li
86.7251 116.673 li
86.9751 116.523 li
87.2251 116.375 li
87.4751 116.224 li
87.7251 116.074 li
87.9751 115.974 li
88.1753 115.824 li
88.4253 115.673 li
88.6753 115.523 li
88.9253 115.375 li
89.1753 115.273 li
89.4253 115.125 li
89.6753 114.974 li
89.8755 114.824 li
90.1255 114.673 li
90.3755 114.574 li
90.6255 114.423 li
90.8755 114.273 li
91.1255 114.125 li
40.625 143.273 mo
40.875 143.125 li
41.125 142.974 li
41.375 142.824 li
41.625 142.724 li
41.8252 142.574 li
42.0752 142.423 li
42.3252 142.273 li
42.5752 142.125 li
42.8252 142.023 li
43.0752 141.875 li
43.2749 141.724 li
43.5249 141.574 li
43.7749 141.423 li
44.0249 141.324 li
44.2749 141.173 li
44.5249 141.023 li
44.7749 140.875 li
44.9751 140.724 li
45.2251 140.625 li
45.4751 140.474 li
45.7251 140.324 li
45.9751 140.173 li
46.2251 140.023 li
46.4751 139.923 li
46.6753 139.773 li
46.9253 139.625 li
47.1753 139.474 li
47.4253 139.324 li
47.6753 139.224 li
47.9253 139.074 li
48.1753 138.923 li
48.375 138.773 li
48.625 138.625 li
48.875 138.523 li
49.125 138.375 li
49.375 138.224 li
49.625 138.074 li
49.875 137.923 li
50.0752 137.824 li
50.3252 137.673 li
50.5752 137.523 li
50.8252 137.375 li
51.0752 137.224 li
51.3252 137.125 li
51.5752 136.974 li
51.7754 136.824 li
52.0254 136.673 li
52.2754 136.523 li
52.5254 136.423 li
52.7754 136.273 li
53.0254 136.125 li
53.2251 135.974 li
53.4751 135.824 li
53.7251 135.724 li
53.9751 135.574 li
54.2251 135.423 li
54.4751 135.273 li
54.7251 135.125 li
54.9253 135.023 li
55.1753 134.875 li
55.4253 134.724 li
55.6753 134.574 li
55.9253 134.423 li
56.1753 134.324 li
56.4253 134.173 li
56.625 134.023 li
56.875 133.875 li
57.125 133.724 li
57.375 133.625 li
57.625 133.474 li
57.875 133.324 li
58.1255 133.173 li
58.3252 133.023 li
58.5752 132.923 li
58.8252 132.773 li
59.0752 132.625 li
59.3252 132.474 li
59.5752 132.324 li
59.8252 132.224 li
60.0254 132.074 li
60.2754 131.923 li
60.5254 131.773 li
60.7754 131.625 li
61.0254 131.523 li
61.2754 131.375 li
61.5254 131.224 li
61.7251 131.074 li
61.9751 130.923 li
62.2251 130.824 li
62.4751 130.673 li
62.7251 130.523 li
62.9751 130.375 li
63.2251 130.224 li
63.4253 130.125 li
63.6753 129.974 li
63.9253 129.824 li
64.1753 129.673 li
64.4253 129.523 li
64.6753 129.423 li
64.8755 129.273 li
65.1255 129.125 li
65.3755 128.974 li
65.6255 128.824 li
65.8755 128.724 li
15.875 157.523 mo
16.125 157.423 li
16.375 157.273 li
16.625 157.125 li
16.8252 156.974 li
17.0752 156.824 li
17.3252 156.724 li
17.5752 156.574 li
17.8252 156.423 li
18.0752 156.273 li
18.3252 156.125 li
18.5249 156.023 li
18.7749 155.875 li
19.0249 155.724 li
19.2749 155.574 li
19.5249 155.423 li
19.7749 155.324 li
20.0249 155.173 li
20.2251 155.023 li
20.4751 154.875 li
20.7251 154.724 li
20.9751 154.625 li
21.2251 154.474 li
21.4751 154.324 li
21.6753 154.173 li
21.9253 154.023 li
22.1753 153.923 li
22.4253 153.773 li
22.6753 153.625 li
22.9253 153.474 li
23.1753 153.324 li
23.375 153.224 li
23.625 153.074 li
23.875 152.923 li
24.125 152.773 li
24.375 152.625 li
24.625 152.523 li
24.875 152.375 li
25.0752 152.224 li
25.3252 152.074 li
25.5752 151.923 li
25.8252 151.824 li
26.0752 151.673 li
26.3252 151.523 li
26.5752 151.375 li
26.7754 151.224 li
27.0254 151.125 li
27.2754 150.974 li
27.5254 150.824 li
27.7754 150.673 li
28.0254 150.523 li
28.2754 150.423 li
28.4751 150.273 li
28.7251 150.125 li
28.9751 149.974 li
29.2251 149.824 li
29.4751 149.724 li
29.7251 149.574 li
29.9751 149.423 li
30.1753 149.273 li
30.4253 149.125 li
30.6753 149.023 li
30.9253 148.875 li
31.1753 148.724 li
31.4253 148.574 li
31.6753 148.423 li
31.875 148.324 li
32.125 148.173 li
32.375 148.023 li
32.625 147.875 li
32.875 147.724 li
33.125 147.625 li
33.3252 147.474 li
33.5752 147.324 li
33.8252 147.173 li
34.0752 147.023 li
34.3252 146.923 li
34.5752 146.773 li
34.8252 146.625 li
35.0254 146.474 li
35.2754 146.324 li
35.5254 146.224 li
35.7754 146.074 li
36.0254 145.923 li
36.2754 145.773 li
36.5254 145.625 li
36.7251 145.523 li
36.9751 145.375 li
37.2251 145.224 li
37.4751 145.074 li
37.7251 144.923 li
37.9751 144.824 li
38.2251 144.673 li
38.4253 144.523 li
38.6753 144.375 li
38.9253 144.224 li
39.1753 144.125 li
39.4253 143.974 li
39.6753 143.824 li
39.9253 143.673 li
40.1255 143.523 li
40.3755 143.423 li
40.6255 143.273 li
229.975 169.074 mo
249.925 169.074 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/S <1C60D8A8C9B64EDF7B9A268599F9CD8C4143A0D599CA838C6F6EFB82E6187B34759773BB4D8C1A41E190DEFABB354DFB531C99308891FC3B7E87957393F9CD35CA8C07371CAABAAF32C24CDAE22C826F234EC2B15BA06DFB54FFCB46EDDF1D277ED530855C8BB0880980568C5F76DE693CEE6004D84A502F3C6B0F55A55095F8FAF71FCF3869AA0D55975A515D287103786F2BEFCA3E30833F771676F4E4B0C078830B99B254F2B4> |-/d <1C60D8A8C9B7EF3272B02106CA005D490B9AADA17924914F2C970DE0CC49CEA15AE0636239F8F8972696F7F5932B166AF2D78F67482CC14B1A6381CFD7128F8DE76CDFCE15FA9EB575CCF12B456F3EB76367E9886C5281DF7AB34F68E50A05C60D95A0109B0EE1AC212C660640ECA54376F807195B77C533845305049FE68DE5BA8B1CD6F2147B0BF4B5B691FCBB3989ADBCB5DBED> |-/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C2021D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495ACA0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCDBE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553A431EECECF30F5581F5F0240E470E520EB9771> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEW+Helvetica /Encoding getdup 83 /S putdup 100 /d putdup 101 /e putpop%ADOEndSubsetFont
/DVPWEW+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 8{/.notdef}rp /A 3{/.notdef}rp /E /F 12{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t 3{/.notdef}rp /x 135{/.notdef}rp]DVPWEW+Helvetica nfDVPWEW+Helvetica*1 [7 0 0 -7 0 0 ]msf155.367 178.412 mo(Second Approximation)[4.66895 3.8916 3.5 3.89258 3.8916 3.89258 1.94531 4.66895 3.89258 3.8916 2.33105 3.68359 3.5 1.55371 5.83105 3.8916 1.94629 1.55371 3.89258 0 ]xsh0.125 lw
[0.5 1 ] 0 dsh
242.525 62.0234 mo
242.775 61.9736 li
243.025 61.9736 li
243.275 61.9238 li
243.525 61.8735 li
243.775 61.8735 li
244.025 61.8237 li
244.225 61.8237 li
244.475 61.7734 li
244.725 61.7734 li
244.975 61.7236 li
245.225 61.7236 li
245.475 61.6738 li
245.725 61.6235 li
245.925 61.6235 li
246.175 61.5737 li
246.425 61.5737 li
246.675 61.5234 li
246.925 61.5234 li
247.175 61.4736 li
247.425 61.4736 li
247.625 61.4238 li
247.875 61.4238 li
248.125 61.3735 li
248.375 61.3735 li
248.625 61.3237 li
248.875 61.3237 li
249.125 61.2734 li
249.325 61.2734 li
249.575 61.2236 li
249.825 61.2236 li
250.075 61.1738 li
250.325 61.1738 li
250.575 61.1738 li
250.825 61.1235 li
251.025 61.1235 li
251.275 61.0737 li
251.525 61.0737 li
251.775 61.0234 li
252.025 61.0234 li
252.275 60.9736 li
252.525 60.9736 li
252.725 60.9736 li
252.975 60.9238 li
253.225 60.9238 li
253.475 60.8735 li
253.725 60.8735 li
253.975 60.8237 li
254.175 60.8237 li
254.425 60.8237 li
254.675 60.7739 li
254.925 60.7739 li
255.175 60.7236 li
255.425 60.7236 li
255.675 60.7236 li
255.875 60.6738 li
256.125 60.6738 li
256.375 60.6235 li
256.625 60.6235 li
256.875 60.6235 li
257.125 60.5737 li
257.375 60.5737 li
257.575 60.5737 li
257.825 60.5239 li
258.075 60.5239 li
258.325 60.5239 li
217.325 65.9736 mo
217.575 65.9238 li
217.775 65.8735 li
218.025 65.8237 li
218.275 65.7734 li
218.525 65.7236 li
218.775 65.6738 li
219.025 65.6235 li
219.275 65.5737 li
219.475 65.5234 li
219.725 65.5234 li
219.975 65.4736 li
220.225 65.4238 li
220.475 65.3735 li
220.725 65.3237 li
220.975 65.2734 li
221.175 65.2236 li
221.425 65.1738 li
221.675 65.1235 li
221.925 65.0737 li
222.175 65.0737 li
222.425 65.0234 li
222.625 64.9736 li
222.875 64.9238 li
223.125 64.8735 li
223.375 64.8237 li
223.625 64.7739 li
223.875 64.7739 li
224.125 64.7236 li
224.325 64.6738 li
224.575 64.6235 li
224.825 64.5737 li
225.075 64.5239 li
225.325 64.5239 li
225.575 64.4736 li
225.825 64.4238 li
226.025 64.374 li
226.275 64.3237 li
226.525 64.2739 li
226.775 64.2739 li
227.025 64.2236 li
227.275 64.1738 li
227.525 64.124 li
227.725 64.0737 li
227.975 64.0737 li
228.225 64.0239 li
228.475 63.9736 li
228.725 63.9238 li
228.975 63.9238 li
229.225 63.874 li
229.425 63.8237 li
229.675 63.7739 li
229.925 63.7236 li
230.175 63.7236 li
230.425 63.6738 li
230.675 63.624 li
230.925 63.5737 li
231.125 63.5737 li
231.375 63.5239 li
231.625 63.4736 li
231.875 63.4736 li
232.125 63.4238 li
232.375 63.374 li
232.575 63.3237 li
232.825 63.3237 li
233.075 63.2739 li
233.325 63.2236 li
233.575 63.1738 li
233.825 63.1738 li
234.075 63.124 li
234.275 63.0737 li
234.525 63.0737 li
234.775 63.0239 li
235.025 62.9741 li
235.275 62.9741 li
235.525 62.9238 li
235.775 62.874 li
235.975 62.874 li
236.225 62.8237 li
236.475 62.7739 li
236.725 62.7739 li
236.975 62.7241 li
237.225 62.6738 li
237.475 62.6738 li
237.675 62.624 li
237.925 62.5737 li
238.175 62.5737 li
238.425 62.5239 li
238.675 62.4741 li
238.925 62.4741 li
239.175 62.4238 li
239.375 62.4238 li
239.625 62.374 li
239.875 62.3242 li
240.125 62.3242 li
240.375 62.2739 li
240.625 62.2241 li
240.875 62.2241 li
241.075 62.1738 li
241.325 62.1738 li
241.575 62.124 li
241.825 62.0742 li
242.075 62.0742 li
242.325 62.0239 li
242.525 62.0239 li
192.075 71.8237 mo
192.325 71.7236 li
192.575 71.6738 li
192.775 71.6235 li
193.025 71.5234 li
193.275 71.4736 li
193.525 71.4238 li
193.775 71.3735 li
194.025 71.2734 li
194.275 71.2236 li
194.475 71.1738 li
194.725 71.1235 li
194.975 71.0234 li
195.225 70.9736 li
195.475 70.9238 li
195.725 70.8237 li
195.975 70.7734 li
196.175 70.7236 li
196.425 70.6738 li
196.675 70.5737 li
196.925 70.5234 li
197.175 70.4736 li
197.425 70.4238 li
197.675 70.3735 li
197.875 70.2734 li
198.125 70.2236 li
198.375 70.1738 li
198.625 70.1235 li
198.875 70.0234 li
199.125 69.9736 li
199.375 69.9238 li
199.575 69.8735 li
199.825 69.8237 li
200.075 69.7236 li
200.325 69.6738 li
200.575 69.6235 li
200.825 69.5737 li
201.025 69.5234 li
201.275 69.4736 li
201.525 69.3735 li
201.775 69.3237 li
202.025 69.2739 li
202.275 69.2236 li
202.525 69.1738 li
202.725 69.1235 li
202.975 69.0239 li
203.225 68.9736 li
203.475 68.9238 li
203.725 68.8735 li
203.975 68.8237 li
204.225 68.7739 li
204.425 68.7236 li
204.675 68.6235 li
204.925 68.5737 li
205.175 68.5239 li
205.425 68.4736 li
205.675 68.4238 li
205.925 68.374 li
206.125 68.3237 li
206.375 68.2739 li
206.625 68.2236 li
206.875 68.1738 li
207.125 68.0737 li
207.375 68.0239 li
207.625 67.9736 li
207.825 67.9238 li
208.075 67.874 li
208.325 67.8237 li
208.575 67.7739 li
208.825 67.7236 li
209.075 67.6738 li
209.325 67.624 li
209.525 67.5737 li
209.775 67.5239 li
210.025 67.4736 li
210.275 67.4238 li
210.525 67.374 li
210.775 67.2739 li
210.975 67.2236 li
211.225 67.1738 li
211.475 67.124 li
211.725 67.0737 li
211.975 67.0239 li
212.225 66.9736 li
212.475 66.9238 li
212.675 66.874 li
212.925 66.8237 li
213.175 66.7739 li
213.425 66.7241 li
213.675 66.6738 li
213.925 66.624 li
214.175 66.5737 li
214.375 66.5239 li
214.625 66.4741 li
214.875 66.4238 li
215.125 66.374 li
215.375 66.3237 li
215.625 66.2739 li
215.875 66.2241 li
216.075 66.2241 li
216.325 66.1738 li
216.575 66.124 li
216.825 66.0742 li
217.075 66.0239 li
217.325 65.9741 li
166.825 79.5737 mo
167.075 79.4736 li
167.325 79.3735 li
167.575 79.3237 li
167.825 79.2236 li
168.025 79.1235 li
168.275 79.0737 li
168.525 78.9736 li
168.775 78.8735 li
169.025 78.8237 li
169.275 78.7236 li
169.475 78.6235 li
169.725 78.5737 li
169.975 78.4736 li
170.225 78.3735 li
170.475 78.3237 li
170.725 78.2236 li
170.975 78.1738 li
171.175 78.0737 li
171.425 77.9736 li
171.675 77.9238 li
171.925 77.8237 li
172.175 77.7734 li
172.425 77.6738 li
172.675 77.5737 li
172.875 77.5234 li
173.125 77.4238 li
173.375 77.3735 li
173.625 77.2734 li
173.875 77.2236 li
174.125 77.1235 li
174.375 77.0234 li
174.575 76.9736 li
174.825 76.8735 li
175.075 76.8237 li
175.325 76.7236 li
175.575 76.6738 li
175.825 76.5737 li
176.075 76.5234 li
176.275 76.4233 li
176.525 76.3237 li
176.775 76.2734 li
177.025 76.1733 li
177.275 76.1235 li
177.525 76.0234 li
177.775 75.9736 li
177.975 75.8735 li
178.225 75.8237 li
178.475 75.7236 li
178.725 75.6733 li
178.975 75.5737 li
179.225 75.5234 li
179.425 75.4233 li
179.675 75.3735 li
179.925 75.2734 li
180.175 75.2236 li
180.425 75.1235 li
180.675 75.0737 li
180.925 75.0234 li
181.125 74.9233 li
181.375 74.8735 li
181.625 74.7734 li
181.875 74.7236 li
182.125 74.6235 li
182.375 74.5737 li
182.625 74.4736 li
182.825 74.4238 li
183.075 74.3237 li
183.325 74.2734 li
183.575 74.2236 li
183.825 74.1235 li
184.075 74.0737 li
184.325 73.9736 li
184.525 73.9238 li
184.775 73.8237 li
185.025 73.7734 li
185.275 73.7236 li
185.525 73.6235 li
185.775 73.5737 li
186.025 73.4736 li
186.225 73.4238 li
186.475 73.3735 li
186.725 73.2734 li
186.975 73.2236 li
187.225 73.1738 li
187.475 73.0737 li
187.725 73.0234 li
187.925 72.9238 li
188.175 72.8735 li
188.425 72.8237 li
188.675 72.7236 li
188.925 72.6738 li
189.175 72.6235 li
189.425 72.5234 li
189.625 72.4736 li
189.875 72.4238 li
190.125 72.3237 li
190.375 72.2734 li
190.625 72.2236 li
190.875 72.1235 li
191.075 72.0737 li
191.325 72.0234 li
191.575 71.9238 li
191.825 71.8735 li
192.075 71.8237 li
141.575 89.1738 mo
141.825 89.0737 li
142.075 88.9736 li
142.325 88.8735 li
142.575 88.7734 li
142.825 88.6738 li
143.025 88.5737 li
143.275 88.4736 li
143.525 88.3735 li
143.775 88.2734 li
144.025 88.1733 li
144.275 88.0737 li
144.525 87.9736 li
144.725 87.8735 li
144.975 87.7734 li
145.225 87.6733 li
145.475 87.5737 li
145.725 87.4736 li
145.975 87.3735 li
146.225 87.2734 li
146.425 87.1733 li
146.675 87.0732 li
146.925 86.9736 li
147.175 86.8735 li
147.425 86.7734 li
147.675 86.6733 li
147.875 86.6235 li
148.125 86.5234 li
148.375 86.4233 li
148.625 86.3232 li
148.875 86.2236 li
149.125 86.1235 li
149.375 86.0234 li
149.575 85.9233 li
149.825 85.8232 li
150.075 85.7236 li
150.325 85.6235 li
150.575 85.5234 li
150.825 85.4233 li
151.075 85.3735 li
151.275 85.2734 li
151.525 85.1733 li
151.775 85.0732 li
152.025 84.9736 li
152.275 84.8735 li
152.525 84.7734 li
152.775 84.6733 li
152.975 84.5732 li
153.225 84.5234 li
153.475 84.4233 li
153.725 84.3232 li
153.975 84.2236 li
154.225 84.1235 li
154.475 84.0234 li
154.675 83.9233 li
154.925 83.8735 li
155.175 83.7734 li
155.425 83.6733 li
155.675 83.5732 li
155.925 83.4731 li
156.175 83.3735 li
156.375 83.3232 li
156.625 83.2231 li
156.875 83.1235 li
157.125 83.0234 li
157.375 82.9233 li
157.625 82.8735 li
157.875 82.7734 li
158.075 82.6733 li
158.325 82.5732 li
158.575 82.4731 li
158.825 82.4233 li
159.075 82.3232 li
159.325 82.2231 li
159.524 82.123 li
159.774 82.0234 li
160.024 81.9731 li
160.274 81.873 li
160.524 81.7734 li
160.774 81.6733 li
161.024 81.623 li
161.225 81.5234 li
161.475 81.4233 li
161.725 81.3232 li
161.975 81.2734 li
162.225 81.1733 li
162.475 81.0732 li
162.725 80.9731 li
162.925 80.9233 li
163.175 80.8232 li
163.425 80.7231 li
163.675 80.6733 li
163.925 80.5732 li
164.175 80.4731 li
164.425 80.373 li
164.625 80.3232 li
164.875 80.2231 li
165.125 80.123 li
165.375 80.0732 li
165.625 79.9731 li
165.875 79.873 li
166.125 79.8232 li
166.325 79.7231 li
166.575 79.623 li
166.825 79.5732 li
116.325 100.724 mo
116.575 100.625 li
116.825 100.474 li
117.075 100.375 li
117.325 100.224 li
117.575 100.125 li
117.825 100.023 li
118.025 99.8745 li
118.275 99.7729 li
118.525 99.6245 li
118.775 99.5229 li
119.025 99.4233 li
119.275 99.2729 li
119.525 99.1733 li
119.725 99.0737 li
119.975 98.9233 li
120.225 98.8237 li
120.475 98.7241 li
120.725 98.5737 li
120.975 98.4741 li
121.225 98.3745 li
121.425 98.2241 li
121.675 98.1245 li
121.925 98.0229 li
122.175 97.874 li
122.425 97.7734 li
122.675 97.6738 li
122.925 97.5234 li
123.125 97.4238 li
123.375 97.3242 li
123.625 97.2236 li
123.875 97.0737 li
124.125 96.9736 li
124.375 96.874 li
124.625 96.7236 li
124.825 96.624 li
125.075 96.5239 li
125.325 96.4238 li
125.575 96.2739 li
125.825 96.1738 li
126.075 96.0737 li
126.325 95.9238 li
126.525 95.8237 li
126.775 95.7236 li
127.025 95.624 li
127.275 95.4736 li
127.525 95.374 li
127.775 95.2739 li
127.975 95.1738 li
128.225 95.0737 li
128.475 94.9238 li
128.725 94.8237 li
128.975 94.7236 li
129.225 94.624 li
129.475 94.4736 li
129.675 94.374 li
129.925 94.2739 li
130.175 94.1738 li
130.425 94.0737 li
130.675 93.9238 li
130.925 93.8237 li
131.175 93.7236 li
131.375 93.6235 li
131.625 93.5239 li
131.875 93.4238 li
132.125 93.2739 li
132.375 93.1738 li
132.625 93.0737 li
132.875 92.9736 li
133.075 92.8735 li
133.325 92.7739 li
133.575 92.6235 li
133.825 92.5234 li
134.075 92.4238 li
134.325 92.3237 li
134.575 92.2236 li
134.775 92.1235 li
135.025 92.0234 li
135.275 91.8735 li
135.525 91.7734 li
135.775 91.6738 li
136.024 91.5737 li
136.274 91.4736 li
136.475 91.3735 li
136.725 91.2734 li
136.975 91.1738 li
137.225 91.0234 li
137.475 90.9238 li
137.725 90.8237 li
137.925 90.7236 li
138.175 90.6235 li
138.425 90.5234 li
138.675 90.4238 li
138.925 90.3237 li
139.175 90.2236 li
139.425 90.1235 li
139.625 90.0234 li
139.875 89.9238 li
140.125 89.8237 li
140.375 89.6738 li
140.625 89.5737 li
140.875 89.4736 li
141.125 89.3735 li
141.325 89.2734 li
141.575 89.1733 li
91.125 114.125 mo
91.375 114.023 li
91.5752 113.875 li
91.8252 113.724 li
92.0752 113.574 li
92.3252 113.474 li
92.5752 113.324 li
92.8252 113.173 li
93.0752 113.023 li
93.2749 112.923 li
93.5249 112.773 li
93.7749 112.625 li
94.0249 112.523 li
94.2749 112.375 li
94.5249 112.224 li
94.7749 112.074 li
94.9751 111.974 li
95.2251 111.824 li
95.4751 111.673 li
95.7251 111.574 li
95.9751 111.423 li
96.2251 111.273 li
96.4248 111.125 li
96.6748 111.023 li
96.9253 110.875 li
97.1753 110.724 li
97.4253 110.625 li
97.6753 110.474 li
97.9253 110.324 li
98.125 110.224 li
98.375 110.074 li
98.625 109.923 li
98.875 109.824 li
99.125 109.673 li
99.375 109.574 li
99.625 109.423 li
99.8252 109.273 li
100.075 109.173 li
100.325 109.023 li
100.575 108.875 li
100.825 108.773 li
101.075 108.625 li
101.325 108.474 li
101.525 108.375 li
101.775 108.224 li
102.025 108.125 li
102.275 107.974 li
102.525 107.824 li
102.775 107.724 li
103.025 107.574 li
103.225 107.474 li
103.475 107.324 li
103.725 107.173 li
103.975 107.074 li
104.225 106.923 li
104.475 106.824 li
104.725 106.673 li
104.925 106.574 li
105.175 106.423 li
105.425 106.273 li
105.675 106.173 li
105.925 106.023 li
106.175 105.923 li
106.375 105.773 li
106.625 105.673 li
106.875 105.523 li
107.125 105.423 li
107.375 105.273 li
107.625 105.173 li
107.875 105.023 li
108.075 104.923 li
108.325 104.773 li
108.575 104.673 li
108.825 104.523 li
109.075 104.375 li
109.325 104.273 li
109.575 104.125 li
109.775 104.023 li
110.025 103.923 li
110.275 103.775 li
110.525 103.673 li
110.775 103.525 li
111.025 103.423 li
111.275 103.275 li
111.475 103.173 li
111.725 103.025 li
111.975 102.923 li
112.225 102.775 li
112.475 102.673 li
112.725 102.525 li
112.975 102.423 li
113.175 102.275 li
113.425 102.173 li
113.675 102.074 li
113.925 101.923 li
114.175 101.824 li
114.425 101.673 li
114.675 101.574 li
114.875 101.423 li
115.125 101.324 li
115.375 101.224 li
115.625 101.074 li
115.875 100.974 li
116.125 100.824 li
116.325 100.724 li
65.875 129.474 mo
66.125 129.324 li
66.375 129.173 li
66.5752 129.023 li
66.8252 128.824 li
67.0752 128.673 li
67.3252 128.523 li
67.5752 128.375 li
67.8252 128.224 li
68.0752 128.074 li
68.2749 127.923 li
68.5249 127.773 li
68.7749 127.625 li
69.0249 127.474 li
69.2749 127.273 li
69.5249 127.125 li
69.7749 126.974 li
69.9751 126.824 li
70.2251 126.673 li
70.4751 126.523 li
70.7251 126.375 li
70.9751 126.224 li
71.2251 126.074 li
71.4751 125.923 li
71.6753 125.773 li
71.9253 125.625 li
72.1753 125.474 li
72.4253 125.324 li
72.6753 125.173 li
72.9253 125.023 li
73.1753 124.875 li
73.375 124.724 li
73.625 124.574 li
73.875 124.423 li
74.125 124.273 li
74.375 124.125 li
74.625 123.974 li
74.8252 123.824 li
75.0752 123.673 li
75.3252 123.523 li
75.5752 123.375 li
75.8252 123.224 li
76.0752 123.074 li
76.3252 122.923 li
76.5254 122.773 li
76.7754 122.625 li
77.0254 122.474 li
77.2754 122.324 li
77.5254 122.173 li
77.7754 122.023 li
78.0254 121.875 li
78.2251 121.724 li
78.4751 121.574 li
78.7251 121.423 li
78.9751 121.273 li
79.2251 121.125 li
79.4751 120.974 li
79.7251 120.824 li
79.9253 120.673 li
80.1753 120.523 li
80.4253 120.375 li
80.6753 120.273 li
80.9253 120.125 li
81.1753 119.974 li
81.4253 119.824 li
81.625 119.673 li
81.875 119.523 li
82.125 119.375 li
82.375 119.224 li
82.625 119.074 li
82.875 118.923 li
83.125 118.824 li
83.3252 118.673 li
83.5752 118.523 li
83.8252 118.375 li
84.0752 118.224 li
84.3252 118.074 li
84.5752 117.923 li
84.7754 117.824 li
85.0254 117.673 li
85.2754 117.523 li
85.5254 117.375 li
85.7754 117.224 li
86.0254 117.074 li
86.2754 116.923 li
86.4751 116.824 li
86.7251 116.673 li
86.9751 116.523 li
87.2251 116.375 li
87.4751 116.224 li
87.7251 116.125 li
87.9751 115.974 li
88.1753 115.824 li
88.4253 115.673 li
88.6753 115.523 li
88.9253 115.375 li
89.1753 115.273 li
89.4253 115.125 li
89.6753 114.974 li
89.8755 114.824 li
90.1255 114.724 li
90.3755 114.574 li
90.6255 114.423 li
90.8755 114.273 li
91.1255 114.125 li
40.625 146.673 mo
40.875 146.523 li
41.125 146.324 li
41.375 146.173 li
41.625 145.974 li
41.8252 145.824 li
42.0752 145.625 li
42.3252 145.474 li
42.5752 145.273 li
42.8252 145.125 li
43.0752 144.923 li
43.2749 144.773 li
43.5249 144.625 li
43.7749 144.423 li
44.0249 144.273 li
44.2749 144.074 li
44.5249 143.923 li
44.7749 143.724 li
44.9751 143.574 li
45.2251 143.423 li
45.4751 143.224 li
45.7251 143.074 li
45.9751 142.873 li
46.2251 142.724 li
46.4751 142.523 li
46.6753 142.373 li
46.9253 142.224 li
47.1753 142.023 li
47.4253 141.873 li
47.6753 141.673 li
47.9253 141.523 li
48.1753 141.373 li
48.375 141.173 li
48.625 141.023 li
48.875 140.873 li
49.125 140.673 li
49.375 140.523 li
49.625 140.324 li
49.875 140.173 li
50.0752 140.023 li
50.3252 139.824 li
50.5752 139.673 li
50.8252 139.523 li
51.0752 139.324 li
51.3252 139.173 li
51.5752 139.023 li
51.7754 138.824 li
52.0254 138.673 li
52.2754 138.523 li
52.5254 138.324 li
52.7754 138.173 li
53.0254 138.023 li
53.2251 137.824 li
53.4751 137.673 li
53.7251 137.523 li
53.9751 137.324 li
54.2251 137.173 li
54.4751 137.023 li
54.7251 136.873 li
54.9253 136.673 li
55.1753 136.523 li
55.4253 136.373 li
55.6753 136.173 li
55.9253 136.023 li
56.1753 135.873 li
56.4253 135.724 li
56.625 135.523 li
56.875 135.373 li
57.125 135.224 li
57.375 135.074 li
57.625 134.873 li
57.875 134.724 li
58.1255 134.574 li
58.3252 134.423 li
58.5752 134.224 li
58.8252 134.074 li
59.0752 133.923 li
59.3252 133.773 li
59.5752 133.574 li
59.8252 133.423 li
60.0254 133.273 li
60.2754 133.123 li
60.5254 132.974 li
60.7754 132.773 li
61.0254 132.623 li
61.2754 132.474 li
61.5254 132.324 li
61.7251 132.173 li
61.9751 131.974 li
62.2251 131.824 li
62.4751 131.673 li
62.7251 131.523 li
62.9751 131.373 li
63.2251 131.224 li
63.4253 131.023 li
63.6753 130.873 li
63.9253 130.724 li
64.1753 130.574 li
64.4253 130.423 li
64.6753 130.273 li
64.8755 130.074 li
65.1255 129.923 li
65.3755 129.773 li
65.6255 129.623 li
65.8755 129.474 li
15.875 165.423 mo
16.125 165.224 li
16.375 165.023 li
16.625 164.824 li
16.8252 164.625 li
17.0752 164.474 li
17.3252 164.273 li
17.5752 164.074 li
17.8252 163.875 li
18.0752 163.673 li
18.3252 163.474 li
18.5249 163.324 li
18.7749 163.123 li
19.0249 162.923 li
19.2749 162.724 li
19.5249 162.523 li
19.7749 162.373 li
20.0249 162.173 li
20.2251 161.974 li
20.4751 161.773 li
20.7251 161.574 li
20.9751 161.423 li
21.2251 161.224 li
21.4751 161.023 li
21.6753 160.824 li
21.9253 160.673 li
22.1753 160.474 li
22.4253 160.273 li
22.6753 160.074 li
22.9253 159.923 li
23.1753 159.724 li
23.375 159.523 li
23.625 159.324 li
23.875 159.173 li
24.125 158.974 li
24.375 158.773 li
24.625 158.574 li
24.875 158.423 li
25.0752 158.224 li
25.3252 158.023 li
25.5752 157.873 li
25.8252 157.673 li
26.0752 157.474 li
26.3252 157.273 li
26.5752 157.123 li
26.7754 156.923 li
27.0254 156.724 li
27.2754 156.574 li
27.5254 156.373 li
27.7754 156.173 li
28.0254 156.023 li
28.2754 155.824 li
28.4751 155.623 li
28.7251 155.474 li
28.9751 155.273 li
29.2251 155.074 li
29.4751 154.923 li
29.7251 154.724 li
29.9751 154.523 li
30.1753 154.373 li
30.4253 154.173 li
30.6753 153.974 li
30.9253 153.824 li
31.1753 153.623 li
31.4253 153.474 li
31.6753 153.273 li
31.875 153.074 li
32.125 152.923 li
32.375 152.722 li
32.625 152.523 li
32.875 152.373 li
33.125 152.173 li
33.3252 152.023 li
33.5752 151.824 li
33.8252 151.623 li
34.0752 151.472 li
34.3252 151.273 li
34.5752 151.123 li
34.8252 150.923 li
35.0254 150.773 li
35.2754 150.574 li
35.5254 150.373 li
35.7754 150.222 li
36.0254 150.023 li
36.2754 149.873 li
36.5254 149.673 li
36.7251 149.523 li
36.9751 149.324 li
37.2251 149.173 li
37.4751 148.972 li
37.7251 148.773 li
37.9751 148.623 li
38.2251 148.423 li
38.4253 148.273 li
38.6753 148.074 li
38.9253 147.923 li
39.1753 147.722 li
39.4253 147.574 li
39.6753 147.373 li
39.9253 147.222 li
40.1255 147.023 li
40.3755 146.873 li
40.6255 146.673 li
229.975 176.074 mo
249.925 176.074 li
@
0.5 lw
[] 0 dsh
15.875 3.67383 mo
15.875 182.724 li
258.325 182.724 li
258.325 3.67383 li
15.875 3.67383 li
15.875 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWEW+Helvetica*1 uf/DVPWEW+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (perturb1.eps)%%CreationDate: 10/4/10 2:23 PM%AI9_DataStream%Gb!R&pO4SRcR=0YJ9uel,S15TVkd8?Hg`4R&eY6sb's&1s7ibqZWtL+_c1$7ot4r)h^7:OaL3YCOt9c+Gc<di1g?N3;YT'X<6T&R%WDJC#Z5Q^ME[2^`Bq=JjV`G\U-]+drP#6;#KPF/J6D:'H="<%8d?!-%T(KX5qI!.f[_)K(0j8<NhS)^FCYd8I(%:ARJ+R18X^QNt%53hgp/\O/NAU@L,Y-lu0XkWki%&8N8!+hns>T1$(c(i\4X55L!'g[I]q&-Yi3G<g(`@1^\MK_.#m86eH5s<Yc]0GNL!$:3mnb7*Q%3(/Bf%?%/\jhoi$o14a9+d5h3JqX,<\\',Epktg-oB8h5&.=pD:#)B*+0EA`h\`f5S]<!ip-SfD[2VIRUJVf6N#Irh.X^gUZmH\8%6$=:Y-E7iGBJ-3EB,nV]5:ugu`TUajXjn;4#G5P:-`o=ZVsXKQ]_+L&jI.JcEs7DbSrMHMs0C)T`8[KmH0qijeD%>9^KYJ4!!`T)%:Gb7(;W4@ts3QOW2S/8fN3O5E$NbU,B&TEQ>ON4.63G7k]lVT7_S'6;&:SZ1*!.IEEZTXoUQUAJX$SY@dY:/2A+2[pc+rJg]UYX_%3psI@>+Hj`K1oXcheM`8b=U)Dq7s\ijA#Xjf`.b"BWT+FhOtrZjA\>(E!.>*GYT0epd>hIBs\GG6n'30B[Js-8dWabVpZD?&?;#.%K';mbB^,7&Le9r4A/RQg%6b.'pahb7W@Yqo=b`i[$r:H&4K[/lD=X!i5qPf`?^_2,1_"26>-5eP((*m9:k1T?+Vs#'631g9$;_,E%_'d_^Q_@Hj$u_HTn>'<D3jfkgXjo6;hQGDeH*'Qm+[%1N-2eu=P,IdrHS-PW!M<0r`WVo1$c^+S8tNkTi"PCkLu8rdbqMH?Ke^Ck%r.5Ns-U8l#,*65$n-S-0^JG8IJi3on8c)<l`W_u2VcJF*2F#Q0Jn'C$JgL1;Dj$6HhNP[;^6.!?kA6/\%It$E_>)q%+H[NeUF+=.%N58l""lj)K9X$k?L%2u,r.<=Yq1hboF!uT8W!246:GRi]8dJ`pqp6O^!U)P=+#[c-Ig#(6Mr9TRKoDPo*dUTX7G9&LfmJo#llX`.%d4rdsdD=RJeDr';%mH[&Tl1bi_$PB'5+rIF/eVf]c.3B@*,0t#2kseN.u`2TkCc_=/[0B6k*4epoT!=MZqKlm4_HRf`^]e7[92_t%3dI>[-iZ``aiYmY9]hl'L-V]rItW:HC+&I<ibZ$nQ,W72BqJ3\UO,acn2@0f[aOt&1G&-CJ0$F=_V6%LXKS_?XBbmo]IA^>rWdoZ%<tsm`8Kpt*?h-uiaD_'Er/8KnQ'CdQjBjN0Ie1>8?Tq87kOYeB4T2b&9qLjhjBnlSIe1>8?R/sWO:qPZr2Wl?DuQ+$'9%EoT>TI#%-^e',S,FO\dJ+u`XJiOaT[[_eb'(L"a]3+6<Q\<V[I(V1J1!?VLAnC/s$l!c:P/M`Dbp#fT5L-+KAZ`KK!8-/s,XVO]^lf?s&jd@%G*k5.gCEh0pY0S(OI7KR).aqlC%*-+acX?KSEY54;ib]'=N?ZC]V(?).VdX7#IU\>*lD>C2oZd\IS/iAq@B22dMCbb,bA'S>UVn&%/]%JVSNP:L`n2dCko]mpYXWTie5NJ;hq@]F\!Ee3X+'*\AC_^lG"!+Hp$'q_.+<GsYcgnTM"iX9%2;ONF0*nAC<]qCNKu[3X<>_%%8C);S$LN+ueL(n7L=hFb^EE:ue=phB^4lHbapbmo$<%g#9@1-/*?0IT\7n\0[pZ4;+nKQjVQ*N&?ml.-_Fo"kZ_Sps]0pBh4BneT%d#]+dXsZJAnCrg0/u-^DD,`ANIeK,dgt[71cBXJ1a.i2%Y-Bp%lc]bD`kd!i`X#h3cR3((8nkpCPWKTSWenY_\o%f:Pk'bK0FTjH%l50qC]gBca=/O2T:WXJ15t>Ob58.D)La>(`53a-UVpR9LOt:tg^Kj]IN^nFX%(]u==,"*-YUPjWAl%J!amNV'X@V([k8^(0SR\X2%LF6.?]^5dV"jqBoZM$rRrNDo%ar$?EV/o:FZAi2O'&elGHbmoH@#"31iRK(2)9OHDG)=c1I+W*u@@Vr->cnWe9PVAe)a0G1F<]><%4TiA*[npWq[Z4.XI#6."Ck%r4Ps/3ghPN,_qh+.Rp3+RMG/;HCUc]S@=ZPVgV&[<s*bk'+Bk=AW`R8\5:GCH1;[]`U1FcHp?AIJM%[j:N.'(2M5S;F@b<(l.t<QD%+XK^QSVj`l,Of,_sffdk?3C)@X5q^gS*1d5F&<:[E2.u3"RGlqGPB6E^fUEYF;/;,ci,R4Kk&na_%C#8@gRDRn*Y[TnA5]nBugRpahD.N9jZ%$HpTkDf',&%sB:PDGHW2==K-HH=s=!h1Xq5.E.B%4rWhC]aC$4_!Tk$8%7L$I@b;pk`6%Bl&-pKeid2E4rOd7ZNI.X"o-Ah;\O"A0u8t)TO;hq#sOVA8e0ISNsmihK'DYdfFCIpa#;P^5aV3N17U%h]k.2B6t&NJ4P1cN.Lm.%/])>)'!t<o*W8>e^OZgr"))e$2m>h.Lrt8REk4#7N67`L61O1+!ghK>]k)PRBan8l'.iNN(qf5ulS&&AoM*%k<ErR4cWE?Kf>on=%X99o0fd.TG#I:e[86(N6)G"-\l_Ql#@(:mIA2\EZ-`KTn92&U9</mH=s$`*+I:$"m<=t\^s0MA.CHt^)c3SW%oE@A,OA<f=?a;mp%3lhu9!<siNB#:hV1JiVZ%*LMe5Os`[RKI\m8WO3a0hd$=j'jtqrFPcbqZiC-NAh9&O)caqS*f<Rh/Q&n:n0m5=X@M50`NF;Q00)S%9;:,Jdo=uScB(&9-9NKUW%t)<R->ULH=@B-9_9;'>@Mpaq(7g;<]CSk.tN\,gI20fqk&p25]%=YDK!.,3Tmm=GVcfZ1:`#'Pq(Z)%a;VBL_sagJUqB)r#bD4D"%7k07$u85$hiasVBc5"XBN8#Y`qCh4[^Z*[FtCfhp'IQh][DG$h/g?*i*.bPZ//0<JN?,UMgeqO&nD;%3,Khrb2".!%3)NmR$3!.h>JJBN:6P`\NV#+,52\[OSq'%%eW,go?l-a"YKW!Du?BJM,&6+g!]c]aWS4O7ut"<2ndmZ[i="8j)$X&%ZU_o6];]G(=g^fodWhNQW\cE:Cu_YJIiJ@!\+P6W%:4h&hn[%b(iUM1)9M1)<Sd;IDS4[Ii*3!Pb>bBNeELB1O_gB6m?5%d;r+TR%[nF:f,#q./lA/N$A4K,FB&ho=mq8,gK=[Y&6hnq:L3gTDUDW35Duc8R*OXYu0\^C8!<^$]/:-?Sd:p>'&XN:g3#"YoB&C25hu2-H%k:f!a2k'S=U]6l2I5%,5FLoAergqrKArd2a`o&X^'_U1T_,%*fig&0Rhg-[I1U7fe`p0hDh1"s$8"a$+*PVP1#&g7pr*U6XW1:<q%CSVJKONm3C3a)F=[s$d:Imql;H>Bn8$cZE>m4Oj_nSW`5crB<qh-jN;+7`bA'7.:HlG:OH]uHP5h'S>j9o4l/WFib-,Fp1H;HEh6%IkW#j'P!g&#D%_]nT%O[D#Mfa!\odKi;D1$p>0_L)6Jqq?//Ak;N-(b?Pm#nqqaXAVW<;3cLt'rh'N[=Snl'c?5j"&kTKkUWX_8*%UB)R$89W`UU/f\:D*f+?UN9FeRU&h*CF7Y=UXCcoFA+/)S)CPk+-RV0UrK5KbU%PaKUE_e>$9>/A0QI@Dge;Q^.t[chXH+>9:DsG%8G7,Sq.TCj5OHI(Lt6"DUOQq6)X+lU726nZX*`//K@,`dN#n[JjCfXAWG:Uu$dKO,kd07C?ugh.cgp'HY<Yk-0CB)g`;:C=k]X<0%WaG\ll&g<i'BpEqME*\TE2!:M2;7!:O_o6td97Cd2Q\YM5H]MRUu$V>Kc^m]0>^%C$[pZB[%"2lpFI6(%sE*:pA3V-kRFeJ(4nLK%L5*M,$eaP^rM'saL]oYo<]r"&W*%,P)a3i1^U+f2I(#cYLQ/5X.[3iY$MtpYo:\Z#7=`Nt7(^e.^OKS%mH6%r90F!1crG\8B8"_I%1a-gi+$&W&PPk#DH\<HjqqY+f\+AI9,VWi)-]R(t[+%S2C64D&1@d4nhE[nBXabFjQ>*^P8PaRIIIP;PL`X<[+jPmMV?QnPq5?1#%r;iJ(JQ"m">3_.QT@&R7[r(c`qT.kI/]OV`s1b=g'Dt2[\3hr5h@cquDeZgJr3'l>eTPj34oB5Q?>cEA#&hbg2l?j"Sf98DB-A1o%[2XOb^Q3lM^B)CgYO'iuLJstIj9.Hg>?a>lNC8XGIqTSq^"`QATad>h49+O3DU6g(UBGF*dHa9:k62d$$$"09=s8,RF#8&iHJgFm%4o]?jFPP^2B+<HT%m\/%7]4Xpic5,HYTH9JLn@gQ&h,VeWkeARXD_[hRjWr>Tg53"BA)c5g)_Hkr=5!Cn;h5pNM4fiIENZhIe7;7%P!*a^+HF^<$INAUs$q`fP6oX+hrr*%qXT>trY&;+LXGuh+kf>\2eTYW%?_1A^fMaXZobpq^CG*MAbGLKX8ST$F+:+@r824sn5l&Y%KYQ!;pii2*3t"UT3t"UT3t"UT3t"UT3t"UX3t"UX3t"TEr_Bfjhe?-e43db3k>M&QZnZ;+++5%Ss*^Y\#df)3^jb3jMD"kGdMNVS%\1Hbmd%*#I3mrRuDbj\lFOM;O!50C@`hFDIhBF<nUOC]e(eO8uJMSNtCj<J,,U09;O@M]i!&4G.(*c)Q65SReY:T0pfUe_Alo1X>%psm5NZUXsRq0d=/E7AaiNXo3dM1:$/*V=R[.Ad!olY*4-P)-JAea7h#nUCe^%,dUi]m[?Cc+`$XFei\o(Lb=.$6R1CTFSfe`+!BK%r(j(P=@K:UHjH#oCXmnQm1HB,jTCiq*OI"^2;47Fjk'N1ll]'$#=(tpqt@-NK4'Ga9`Npg]s_koR2B=JLcE]Qi=R,as7jgGB/KQc%@RB_*7%j(Z)R"!@#iY[+lMm`8?Ml2?;MV9%RA+,7Dkk.Qqt#"lfq5%Wih-=h%d\ISM$53G5JAaH?iGtpo)HQV*PDF8^N_^:bKF;?%DS?!ekJ`UQ-_]8I1VM1Z+7"D[c/E;s)5\/K/diF&E^l75MVk?rFZ?T81+ZJt097W]q$lTG5g/Y8&&bt-^h5L=K8eseh]<4F7]G/8%(rg?8LnoS(rI%4gdt<Tor13k>SKG2NoBrRWVW6tarqb3,2Q4CHKcb`qBHg#]g3sa5m)OL;RN@&WQ`2`hq>O3/[RNJYIWknH[OsYD%2tSGL[_42K;8^2#4m/R3Op&H?4mD87I2M&QQb\mjIZH?'D4q^`6Tt8QXqTFk!mcHJ0P7Q&>DO?cK?raa"2)NTs+;mqVQP2rs6_#C%[Q>Bs5KIOf<0[UpnDhp#LFRP$f2PaNl'/tVNW/FTgZUSkDf@F#<(-[tW0^3.LAaSSctf:WIJ]#8ctZ#TXoHcNJcmG@g:Sma;Vo*i%A89u1C)F1'AeOV#XAMp'9EZ\pr]b`$6N;6HXYsD$`bVX2)ZDX,NIi.JV1V8#A(:;#UF4k=RlWVUQ]3#if4['ZPjm-=I,"KSk]MZh%>)d]`ZHO;X\Rr%1Ta7A=BU!pT[;>;$[n"?=5r%C&?AS:n4gYJ!Xe/J&_5TtI`?9R]Qk1H0hi619a%`]6UV@6M[U1!@7d&$)?(#%c%6k?GXd31i(YaU2Q^\c:L&(.6E>J&EQ>m?#Oh^H!NFuqm+oG@mVs3^^,YaQIc5FT3nDSN/0a!Wg74mEM/O$tjR4'`=Kg?RT;FU-R>%_LmK/=I0^je*+WNbbN!sb:rE@*Vc%Ji&SM*86%tnfdeg^-1bqU(`TG[#A5t<HZ1DWSBf-%r'qu$X!d(:_m/\ndd@.[3Htru]6JVT%gU/YFBYb\qj)pD3=e2&(b)@iK/MOJ$Fan41LJ$Fo+0,qB=Uo^n)e#&U?<OY&gVhdu6:uLDk'DYg44>Gd0b*H5"!kOq_eZVChnXlW%dqerUa6cX[:A(',JJ7@8nV3EDkVlT0p%k'l>b.,\-fJGjLL&'riGpHpRXM?"RFG=$\jVc@=Q4SU2lQVGmeclH+8T"7ZrJ'_ku[To%iH3HCkVOj-MIT(;[BEPop8utqDmf6<obrJ7f'oTbo<(^NoZ+qNZ.a-`Icdce60re$ql*(eTr,Z'?f?#aO1P:%VV?m&m=Qgcpl>-r%B=In*em7!9$h"@5=:UN#XeHlF)njI.^j?$jpT=2[o:81Q23MR(XWRHB=[7?mK=li6CtKXEo:M.E8#h?EBLr:N2VDPE]A>m_Ut'bZ%qGcdMc?=W9@d3$_d3!TU(KX!Qe!k#.RJ9."ap*b0:tNW2!n9-7$-fk=KVf0Z]adllk]MEeVHsM+D.@HnF7S0*At&*ns1R1W>.D73%"sg346oT?cnK<Io+38aK<7SAUNn+':Qg*7m$f9d3C46:o6`;'f6<qHOg=:F2,2g%"lo4eDlfo4U0TN1gq0"H2Du&cJ_h?pVTANtf%O&tZX5FF(\!YRD3asSetkF(PArea*!UdI)9%uKoDj-,7/oH21F9S!CBqhO7f'F5VZNlUPl>9Mm2mTkQ.<2uU%/@t8r-6AF&\CNF)%?P>s_6d2YMIJk1goNV=qniW<fHG<rJ9"=9g(2iBFqs,#`16+]"KP^^?(cuQOQG,@sW-nU#GH1Xts)*SVr*rVdSSJ\k)Ju%]nu_)[%1QkADp=jKril6,t3Wh%"U,p1mgTVC&DEJ#?$1b'JRD%J^en<4\WQTse>,K6Cc=$:e7O:.fdC0%8hY-$;Y:\*r4KESr&%!ecj#(`4%lpu<dGh6Yf_#G@TbK^b3h#F_.KSVZ"G1e+aP-`<$PIuX[[)K-*`lXA$kIDm\HZ'tR$a)2Q(cnhH*/1YMg0XM[^gumNFl!0S"C/Rd%kqJkIfD3I%RCVge@=/1Ca>U(:"Vl7:'P,bF0?3]`?H$Nk))IC7CA^8Q[I]KamXetH`&^+F#Qh"8^0<ar>')m8=/Z=cR/MRG%JRPO%JdUBPl;";5lb5\.NXI$_3,le\WA/8pZQk19DH\%fTe"(/&AYVbOXu`d9*!AokN1OU]NW^6\,^8Y6[d(Q2QpGn68itrSD*l\b4&,'%ekV./n_hplL**M>Rhrt?jh4LjhO-T4DcGSIgC<2BPZg<#5%BHHjb6h5nE)VAO/:\g-aC$X/&tOlCG@!EI[e,IWNgL7<#J5Z6e%7@%\$C;WZ6>S*EaHB,IdYcf?>A<O[4F01;dnil0DG>_ND@08p%;L73BZ-S:3XXs8:5PY]ZO=<S"j_p]^tV@/oTo6ZiPG\OqB8</q1df%T3j\,s*-*ngq6-e6,P[C-$BK,.(IOC#DH8pA%`\VXe8O.oTEuQeE+@cg?$=WM10g)gVdUDA-_BQo^0:M<X"I9&g-1MSI6lD\6TZ7%M]s4^1%/9F@ITCL/a#X'NI#E',7oFNfB)>Kq02J;hF?tj<nP1u#6"Pdi3**iH?(QIQ1G-IIHW8$(;24^-o[b'Bu`[b5>"#?NG?mC%2WiM&,S&)5p7JXiCY\8YUIV0Ar+3'[i7-sur^eWN27g,6Rd45;7O.H.Yq!kbeEYfYTjsj=[3rr$;5%%Ehf<Hg&kC2]o*_+<EnqVL%b3bBhHTsQ8DR:Hh>86h'0,tq5mmn8);-9+D#aXm:/m`LlLp16eelf]S5E%K1T[DiqS0i.8qmMk[N@J5j-u+I[l@H_^I'U+iCK+;`%SpP@755--`3u9N/DDee+D*c,3@W%JgqR$'=k18bAJt,qkE,KbLp,JH>eB_rjU/jgkVrd!ZYD&SNVaaUcmG`jnUY>YDYL-Y$\P_J^%?E!7pSY0#R`]@2u.E%LHb,J=76ET"rF)?$hn5umK)MM4*ZarstS\K58nBnWTs3=rAUIK;fqk@5n5KgF]gQdGo;>&Q8q&/>mW7gIR%GKhno]+*_,[ie&5b@;dQq>QXX8t1]:UVajn]5DBu[mHS/+',"?h&:\SNn_V;cAh6Fh<ej:B&_J,q4X<GX3tjd#BaTbEG>&O&MA7Q%P:hiTL?Ag7q]'N2&iV[p,n+"\NF(g=fh](HGD3)qV%)TW%gkslpf/M][-9R$l]nM>f1)sQ'<C_BNOFMPo_K5>'TL)]m*W!8'mj.[%3&^X.3d9fAk]a;F[-,m$_^;,=Vl+CNH*#&c\_])FPE(X:a>XFW7d"Z]QF"5$fYu&C,1c57:;3FLeC^KUQF9\4q6`02B^qF[-]Q'i%'lETTY\\)3'*%Wpqs!-QV590iNch6[8JSkT.Q!S8?`=jppi5Wh$oPURY`H/;e.ZMj_p&ma(Fq"p$Ob9kd7B>9iguDcSI3p4AITR&%fGa.<?K/494d!?FNRgS-7Y1/D=0>-$S)XF)XjO\;]o+]%W4[D$E+!Q_)KoRfH2%T'$=b<oOrqDU.Vm5+dCiX-DF\Z\?VRe2p#O0e%1aWr\hqapIDn@Mp:['Kd"L)duokhWn(]1@2L$Dhtc(:MfD9E/g48/r7WF(W>pk,o2B9/t8QT+Z:LU$OXIl`<=iD<[u\A*GSqYkMb%H@?#-FQ6.G`e<s0C<?GAMmMiVldPhe/[8$PIQOuaY:an236!$+$Ve/-.$*/U?8%g"GWaLt')^uR`iaML/+.?5WV7k9ViT_lA#H45%@o!Em`r5;&O!icV.GEW;2VaoS="=^jN/?kgpIk7YV1PGO5<[_^],he&O+.mG?/I7ep:ASQ:Lf<^ZHAb&pW"s'><(F5B$XiO]ItT<%PonVUWAWq5iph-`XMutaT(gGYV38hbigHM6/Qu,[_iCX0[^1E[q%h/Mm+uk1?CBF>c7>B`o8EN=CiP-BePEWZ_khD@k+U?o]>7_U%^PG/!00,uTo@_^kCD)cF>SZW1RqEMNfq4Ioek]<p`Wl$9[jS&XDTp9s=HOlo:9f1rbF*MH0]-#"](F5Q.m""SmqY[XU>;Ijg@fsK%/<s(dj[5A(Og:0490TpDHMcXMBI$?m3`kXh:1L-ccMZLpCSOP7YF,pPBYA8#F=ifsN>h].EkYpNn;/W_)Jq)ZcLXL19=[JdVR!$q%oeW#g]PlOC"_jJNpsD3)CSPsY7`Mi5X?3pKWm-1YnA=pJlWBG,B9,OJ$^uF;TK1XC`R6^l-'1Y9DN16u2jutb^N+6,j:McT6-V$t%o<e%)KaM&-le+PrjKd]C&&r(X.D.2J[f\n6Jf<ef@#@k')rh<MM/#U$Kq3oN9`5oaqFt*rg(\]20s]V+[ZR_i9crJ^jg(TF;_&P3%46*@J+]Uts,us4?N^thM[gK)6<SXm>250.c:XIEVd!&"'X8sM1gWWp#+SGA/Q1HT-MfH0Qm&BM7s4HN]RMSr[AqhjC)0L&e(TClK%UYu]LZCcFh%Ne5:2R'OSADom#\?C^JKr#dlJS*,ECfKHe,CS3em1SX[Uf4[PB;an2oVIq0O*e4HLA'rcK_!AUFl.poMD6p8nOMW:%_KBmsn];0>qZhT1K+F=hCa!eh_50.UK<FeNlgri3L5h6)gQYH^!mG&&q%NBRrQ9s\,B5YQGl\k3?\]hK_I8tU]dm,*#PDdZMp^'i%-5)p[k-8U\MYBY(*9Q/%RJZKD+VK!051PFJALm)Gg0'Ikq>dUPCZ9m5gN;>)5blM'et\jJ(5YjGNk6cSik)YU=BFVUBF45&_mFtV%a)_D`q5Gi,N_92oCtiN$&o6>`U"ulq9g?#0ioqWB?T_0`P$Gq@aJC-GT!?/f7toRorZ[n]#BI"3<*#k;&8pU<B;Tc\)-T#D,(,ok%:6Y0"cJ?(+,n^`G(p@5VPb:FNI[F[K-O(`,9(#9I]>EEX_!J,)0iq00<Q?YJk^.08F_C-eX#.-,U`o?9\]hMEMeW)T\KF(OE$1(Y%h".'9FQ*hKSkRA\A(4?pj+:lN>Co&Ob`;A^<DL-lqi/-Rad$8?TAA#n\.n'[,t(Kb(a5$^l@)W5@+Nf.Mp%s#RVc9GG5bl)UM51l%o0_t`abE7E/89K\;<OQ@1Qe9od#+)eO!AGn]^`RW8Y:(i'&rgYItDdb8Yfj%3^,@NXF:'Vl,#3.INi(Uq(%j+QU!@jKrh<iDdnNU%!gX-]=WE\!*16lO:'f&EPV>ahM6k-f1eWeLdpS,PbEUB%Pk/)nf8grG\^[QQ/KIK\S#2$\&3f6Z8iX#,iFXXFGjVph5Ba,Tr8ao!%\@LNf@q1BO50\5gc7n[gAjlc/B/(*DS8a,#U,SYs""F\=Jfu&UZd1[m"R/Mq(!j-0OJhL.fk9ORl%i'B[!'BL/cBYJZVp1Z@:O1W%k8TXWlJ'.PlS(AFb%BWkD0_V-8foYSqm'@&OraiM__;P0))]-OSQ'AlL2gZED@>NFnB5s8GO,t(Q;4!>&Hb:]69L@D++sYW%MOcZ%oR1qZbF;QLLVYu/ldGS-ni6F:=ikieFcka/nUVgH/Z0mEiI0tBNAkL+=;;noSK(N,0Vhk!14Nmf$';"-$sD]rm^H8X+j7=4`Ou:Z%ij^r<6D6?DkuB&?'?73LZY*S'/f#(38Vk<UW*`jZ-5J_/`h5rC*gY[c=@`L\A:O<So"0<`&c:KkL8H5n0lLIckg,iK>7PTG6$+fd%Wg'@]7H.(KjZK3Q0A0?bp9sjcBP\2$%8U^46"kNs-LO!5I<HQc7AI>$a2;4>c3g3ZMljfF9P;DlJ9q)n;;.oK/5!OUQd*_'r04_W%mIP1Vbfb6\Jo67\e"m$Y&IG`TU7i="?SB*@lQ59-Q!??_(L9NGM0i14dH,ejo7\7tVdr1W[S:ZA##IFA=a)s\9cimnN##g4D6g67%*j]=r.a'k_-]fke7odL^p<5YTW&4F`EuI$Bi06srS&"/l7an/XF$?na&^-I6IL!ZG!>%fgX\N>\M'iD0p#2-_jlRO);Y]ioDd,?J%>3IQai0H8\<^h%\,85T:X?S')9a\r,Uk1sj`;SVQmsO*g4aOt\59UF=b\@oKA);l5h?9mrQ_*_Z)F7)2!(q237CC`DH5?Qcp,M\a%3TG/m,/=jK&1YraV^"]AWtI=OEK5drB#;r'?3]:cTAl-V>Uh:PK3GDZ9(2iI^oj11i+S/J$NN8F:!:p:3CfQNmA!elaO.ZP5/<SX%UOhUtoJ-U<bq..H0cV]6ZQ-ZKnl$MU=hsA+:Su@Z87jkCFLJ^PbY.%DR<#Tmhd"Fk!4I@2j(brj2!ul^_/q_Y7OKN%M>OM["O-hS%1anQ!4;e0h<,"0@k3Bj:UY8)\?@slnX"gNL?qeC3@oq-8p(f&g#7)Ni:'N)U6LAM.`GdqEO8MCd$RdQ3bfj)siu?k`_)m'7nibuB%g$(B.11DLfhA_jZ?>/k]V8.][;g=`G!S$GJeHS)ATj9b%pYg<N1m_.1[-6l&?oLKen_=M)mU?/DR!e?*`R)OXSB5tBqh07LPJcjD%/*"XORiC*gBKd.?],Ns.4cINqf;Z.!F4bX52diT=EL@Fq.f"[<5CG&WAm`4tb.s/m!qePqK_#FOh$DZB[gdc0f@g=:6'f$IElfd+%\K>LUH_$bF;TLhcY.6KUY</;?]Y#$Ef]"+HijgeW%`UH)f0Q?P$2.!CNN&Ff2amr@>dN_mY6-..T[WK&-^EF(HJ9WO2X`.ljk1VV%mgMnF5F@FajE2$TT$0W^EA'^i-F6Im[r,j</g:Mp'=^^3(5aeian[aoG:F_(GknAf77$"qK:K8[@>U>o^#-Tf.X/;$o<%A`FAV?h%XZuCo3q!>8i+'*LU%=;;_fp=K+GS1@;'&#9=F6p(U%=;;@hG]h`m>V#Mdll1[ua9"6g#IUa.ig9MkTa&TQ>r*$lq^%nr07%d=Tid%croP]*ll9<DOED;c9$X''O`q#%%W$$=nXt]S1'-;4+[scr14D?mZBd#4b'<[l3$Jr$$<dWGL6MEG6tI>ZF="%Ddi/'iIM)40,MO0%04:l3h9tVC-Qc!"`P1)&4E]h.5(6*in^OsaoF?=^LYYM:@'K5t3':>0RIligR*f[>n_'H0XRRr[KYb\&i#O.ZlB6APj'pWl\M$dG%Jlo0<n.[QecI5Q<+Mh)#G$RIGbau^9!E=M\@(rcdL'2k8&t@Tkb_C:V2gm]4WVHrS]IV'j-R8i,V.L:+BN]Wp>'_@E/]=oR>MSO]%]&t7.#<Ql)[+OCi!\#=2^jNNE8DG/OeHK`6>_m(Cr,hL[4LsUMp4cIk\W5IDKaKU.#VgamIbE;WPp_@9m1HWdcEb],'!nKnQf1aY%\)2\uql\pHa:g'\WZ1[W^S"G37NA%mfG-N/cb[NOWp^1R"7qA!!Q%S#0"ISE2!\1L8'<e.0!qi:n)4Ap-SJS<PgtBMhub&\\Bo-0%$oia^EI<3i0d2>Rhh#7hpSS)T'd?"mi.D.'nZ!+T1!c5TOSpXUmUh2.c`7WT0kN6>%QAji>b.\=c'+4@#aVLk!qpSC'QgUlfe%X4%jh*kZ!2#`K@';]'&b1Y&l7UojEaRYZ7ih;%d@K4<T!KiRj2<#*<bjo2^/q(K"i2HI=^jku6fi].BOfs<-Z7I[S<jD4\G<7T7qC8H%dK1q=iF:llIXTcVc:r>1!I8$t@T0FG[W/>fl#>AP[HeVDCK3/r.=!kJGpc^=S7BL!<F'a,LoSbH9HJO#`dNGB!uu1kH#,F8H,i(l%0"'ci-'JR25Wi&$!R*V`&ob3_m=r$iGQkF)7E2''#,KH40)7)2gFhX9WGiUj=7:6X=BmgJ=Y2E"6K("A^Un"%c^QST77LT3c8g4;%K^r%<fpg>41[Y@+<mK]@/2CmPimQ<t6pH#a/M]`#E",2+nTFK5aQubgfGT@9q-%;QJ`?9u[E(bqJ/C.kG`E/TS:bnLPT27(]Qc3=%a.[BW`nc&WN#N<*Kk2OSbtgk=-4[@H[8D]Zmd8b&3Y&UgJ4:P9Zp`97!@>@3T`oPlo*uiuq-?Z-<u8di38u#]2tajm]m]C$TA3e7%,K?3U)pu(-7SplqDSjpsA4rDm?GbYHomE3fc>k_.&J6tfGW<=+5HmphW-C:oqo<:_%gQm"g;W4s%i<__Fh2fWmal*3Lmr-Y%dS&-%BYi'cE,I$JZ]0_bZ#B>l\66kifkdl+96f=`E7S4p9RGAbj5I(?CV-Y/AFXX!VnT>(@U%=<8cZ[t9TF(M(CTXEGo=CF11EVEX&%ef%+J23^[=?_t3kQN$:b&+cUb<_>CFt.1n.I]hXtk"cN?Q59*m"S)4S36D94l+l)+&;5]0XY*S,b--lOE5Pp)7:mW%@QrFL:b+"*c[+%MMQ9bkD^FYK.k-C:p.ob&UMDu9sG*e[dbQ3:)\mN4RKKaD,C.J"3,;s0>fO3Q,&f6).G"3\odGRDD7SGdGa,;rA]SK^tauVIGMuH%<p:oX-*TN?!!IQfpfoE`kk(kRn7s?_WT'G[:IjW)<,jNe&8AA)<,k[$>'3-`efBB\_F:8,cR:"1H6s6'f/&:T]q/(hl?2T3T`%Pf%j[ads)JG&HK"o?hD&M'1JYoQBdS'$</Dr;U#_g1Q:uS-k-4#=C(ir1/$q&u-`]aL[Bf/m=>X5p_PbE'!HK@gfiS=/*fnRA3DpJn/%UHM0s>U67TDV92mYQlZq^Cf=27kSGO]+Nm\85lnRUgCDT@%KQ5()b-4.hJH,4>/Gu,K#a%PF<l>BC\%rkVb"Gf*-spo[r_.'G1Z*%WIP]A]K%YR4C>jb29q>SkoAUaR=gRQ9'>h,QG.[F``BP0VqB-uTc-9*9GtS#69aoIpt11oid6b_]Q.&-%nOcE=>2(DdFMn*bn>6O%+,KI$H-KM:Pa"2-=>5*#>!g$e(;5=U1+Qs_Yr%nQP<Ma4)Pu,l+g(IO>HlkQ=0UGG=+oE,dCJA'`u5!`BsljR)Jsf>@[555N>f'(%7R"O^SMN]]#T0A+2F_ElG.Vm6'VTa,/&G&['ndfu7^`&GZQJGR/_J;q_JZ#+NKj^[V-gB1)hhP&T5Loe):&T#g;/qfU]&$j7a/9f%f[f**Kk4$P!k%X[msH=Bjh'Z9XeoUAVpS;\[iWigqc(6hp8t<C;S&W--NkGQCtf(iAu/)sfX=]q95Wa],q4AfX]9sq3$Gl:f^De-%1l_bsYaUL'aa@\4.-[(*Sh??^fmU"QFs2+i:pHJH/^74*P&mo]7:qZR/t`r^ipT5T&5T@M:(!?"?f(uXjP6hUbH?/fIhK<Mj'2&c%#<qYPHuf`"mo3]@;HoK(<X&O$EP]7tZ3<7$Q?74m%2_h&A*KO]1gL)CbRC61S7:`a54Gn7VK3YZ,X1O-]((e[;SgX/_aMsJ*;MSe%0fHbVAZ!js:2#3`bVkp8mtQqW7+2=mOf+8;j'CYjZ_u?"U1cS83t(S2SRjXK;_4K'DpNOQFA@F],rT0Yd<&-gFH6)F9GL:b`*,0V%R8l)7;j["Q1=Knt%nUJid<&.#.CR.<1n)^(rqnQGKoMsN!Yt]ff.WT<$'[r-jb2$'/f:'t1u6A0jsq9p@r)q.FABk)%emb7),99.%9BVB]FinAYVcZ"C41hAHVR*FB&khC$?TCD/SJ)!Is5ZbHkq!ZscJ%X,Z\kW$&ntV&rl!3+(1bdEdic-H9U]s],K&Jp_^VAFS@q"W%;sFM/d&I(<O+Z&C<<:n:$D=XR-Olm;_uc$/`7Jij;>"5]B'I1[RY,nV9_6g1fjSKVYKeR4bN2\;F_YW*4HYFn&1[hQ0cq&'%$9p8%@&F(4K(1JHZc`MYc@0')8-&XuS9a$An7)+*WtRO:TKIm>R9"`LI5mhs#D/uRr/ZG3k0.Q--ME0$Q0+*)ZC=D!(Z$7]Q,EAC\skb*%SLK&b?Qe/=GChWs@F%>c;l@/FkE^Q/L6JFDZWS!5'A\Wk->],4:J),XrY-X&h5'e^mFu.2-b8CI8Z"\K`h3[H]QooL$5+j-5j7)!%FoW!fbCbP8SApFY:3lO\oKBPbd^]Ps)1#l0"Efq(rgNRRLnP1h!UC\339G>HP9\UPJ;3-5+l\?u1JCs5?f7&>A+;sHB-1TeD054F%QKOsmSSJYa%)&>GYh=:hSbu0kgY!enI2n`/76W'c_7a>ZKn+-.6hSGZqFSJjNb1#GF<Jm^IlK`7P6LOD!an1mGFkCA4f^6k9/8NA%oA*Zqn5_dWCaKc9m?`Np"j8a]MTY(UjIRa>/`3UA.)YgkbRfV4oKM-<CZ;K\e5tJ*,>(Lm)4sb2O4YG"4#2l=1)LM8"6Je<=o8-Z%j!d;"0"EYj<K<crTRdO.VpuX0e@,S9@&q0:frB%1gf&!*!KDd=AH72e_,^N,i.Q<r_6X1en]K\o$u1@&jLC['Yfek8B9.kab:m=Y%]0LYBVp98%,9NItgkC]7FHPh*B?H\hT#`?ZhXo"<T&FRU9R4H1gj.Yo0sDO+\E!BkSTER\*E^L[T?[LCO5V&1jX'&B\p"k:a\=&C%38HY'^nqXDIJCd0S>M0k>R:sDlZ^YiL,64p$U[4d5<]%#hKV(B70:@5)W0snd^%SkE4W\2j4hf`d1@&sMpU#^.\4[:7&.=8](7YK%0W$R(()&tR^"D0*rXiSf3%p;#CfXW,,>_W^T>YV]`L&P6]b8TO<=gJ,22DRna)Laj5[d=e]4@fFZW1Fc(t[3\m>=Ul*-9AD]!Wth%N9fdPBY)5,47_dgkoS+?(`MPG[osJ.h4re=_p+nm.)rZ:1CRZL%OAsI:7^h#n:QEkcfnqE+Wm90Q=l8)p5a2^>mce`&YmLr:Pk"r%i*LaaE+k;iILr@j>M`^%EJPZhops.OccqC#o#8$AhbJ-,?R-[sfmd%Vm*0a7DE[=ADfbZ?FibO`Q#Me>bF`;K1HqH.F4`k1aMYI5%m?tFE9-1O[lb_>a>FIY"N,qcF<r879%'QHI]/6P406H:*B=B"r-X3@!-Q@?`@]FdMom6YhB[e)V2ucMi4h-3C4\"EPZ%&ZUjue7H%d'V;;qpI&%:]4PT\mFgp7aY<h@s*k26O<Z&>T4DmO#q7<L(KUcs3=ra]#FY+4;t=07Ft$+K9*]khC-MCAe)_*R+EtH&=iG4l0b9_%:17k>i9!Tfq?dVI*&V#;Rd2!?lTsg\*O!MbG(,dHrR(4\gpBemR)akT[W'X+l%Ep>`9NP%m\f)$LDq8HOq=-7rn'tu\F"D7/7q%`%(Cp`YM0o0H<o>N9:0fVm#!5u[ol:QYD<7RE9U;+.AC8H2e7R![flmhR=l)=Kie$;SF\?d3Mb<U5fFA^_Q3r<n%Ve*R(BTnodJ+,'%Xao8\*okEHk`RA"[o]K_'>Ok<&j8tY[M+G7e$t_[5I!8`FNu^O@op/(Nh'JOgR&**9Y!m0#=\s,_,b1aNV$1m;L]^)3"2G[hlb1W%)Of\8:NZk#dGCaIgo`N>I15,aK':HCpKCX2@9J=%5boNIAn)7(R)&6$^01mEZNM"s]B%#:-lPshE*Ji4%]N0nmsoDF`nZR>V*(Gn%jI28ef]b<P!2nZbE9HXF2eE>'G<riC<GJ\'i<M6n)68oq@qseMTNV$&FWli/!b;&O]BADf)b>-:FHT/<3E(Nb!r?39&0f+D<+6H#%/e'c6>lD\@V/^:;/H"?G#T*jk;19;s-4JuUPE\o,45Pg=6Hn?>q>O@/I.A3%S*hBi#Nh@A`tah%*k=JCX%YBAs&bj(^jJm0_dUbB%T2$enl&K#c0jN@:3jcg*df!ao.);K1JBmnN\:Br+URiY%9b[aJ1^7nsHZHWTHB,:Bi$cC60n;Gjb^?,bK?fQgXD$N?5aRI</-aHW%b/Q@Id%BZ1DD_q>"W0'#0VFHmEr+o="%[cKq":32j<k$C1J5gQQB?$m8bmsAiMK8j(PrBZk,(kqB?A6ga--"=T-V]3.3H:ac8>^\%XHN/-r@\(C;Eh!p=gLoHkE*H!MPPX.0%k,[YtE?<5<bdW[_.&?!c'-,6b2@P$Q7&DUV!5$=oG50)iEhOS&X2@G[<V\W4RSjD#Eo$%9mns"TY,`fG=0V#YFg#>^PHU$Voe8fmBUDMgeF3gcWaedGS!T3f?\-V0rpp0fCPe`rOi)sE;[lfo(mWEopaBIC#nsY*gL(:OJ$mt%]Ea*oR6b.Dn#Uthj"#QKqK[FXfjbYm\N&>,X.LhMBWA^ok(o2jXF:gPV2aU0o<p<^h`qo/YFh^4<Q;@0K=lZiB.79[nP(+s5&FUj%',63RDmFb<@In4p`JdKRf?^3b8;6a"QGN.gH"ZgALjTUP-2+24A2oU&L_B=%lfXhhcY6]4am8-OE",s;a5\3fam8,sijnBsZr(PR%%Yd^@qbuVLo02@nEW2s.qJg=5amYGSisQe"i*j0b0X%)nPSrPedOfbC]V0R=F6Fe<q??AsSO$RHb;('\l:9s@)(e4bgQb,rV+p$C%i>=:+6!ceMIZ<0Z2p!hNH2XV(`e3FHo8S'f8R=XMXF;>anP,rT>9qkk]RJg;n_$4]DUb(<YFdrbf:(791%K=9]RH(9YqUJ%]Ytk2%]BSs5rJZ1cB(ZOUCQj*O^Mn1rPNMQ0cK[>_5/,sT[<FgKl%@qd<kjIV=[]ce-h"-cJaQ8DOOqf?X.PRZIZh?mhHBdsGHhJFqKZ`H%o==$6Gg)@a<^5'HE)Ylk$Y[#>19[>99TJ!m3C1k&bNh)#mm5jDIboZ"n?H-Wp%&q-9kSiPjn0Q[V'W2"fZD3fH2YBOCi%M,'Bf&[%p'8#pf1qjfcN.N9%ua5Mf?\e&O19t`DM6-tkM7F*`Aq415PsSN]n2WZni6D`2(NR,L$Nr>Bi5dlCq.$rL0aP0+`GDJCY3+@B$r/u%D-/I][Oofe#]5;,0k&9?#tYe>2UmpCa/;WFL"Nl*r(:dF<4snia&(H7O2kAejaM\b.W&EShBl_%:/6Wt'noh-\U/cDPD\OYWRZ0s%PhK7.Dl#)\5F7&g;,7sBL$Ft#H[OT\lKQ]aE0)U+$O?EMDo1K(+=!D[/uc_`o-VPEQX?pjiG,@`.9mmL^P&ZEhL]^[q-"@OO2(FC%a'n+"Ghu`j#VXA6ET(Kr.G=/3XXs,MgQ,Nfcs>GoO,CjP_0iHYSrjQS,9#82d6610Q=>W9V7;bJ`"S+VrFGommUB\"e'HS\-0=r9%l/fRFT=`a&>=i,M:6me5f5rTUKE<dnkRZ4/gqhtdRZ^VZ_VS=&rRPI:IbZtH_rAD*V:Q\oRV]A>YuFpf[A8>+I$.+m2RU!%;KP;B%7Kse!U@<2j344`&'"<iX[JHbn[tW'9TltE]'C,2FPPu\Sh8GGO7W@Q[C-B1\F&C5FR)Eb4/))..FB>/PIdCZVZ:_WK[B\REaj*;E%T_?rhK)&*[.OUD4GcZlI2s(Q@T:%mU^54.:)KV$#"PN4Za!r@b4Gg1N(S:\E)j"q.!E*VITR330/eMee+)^31>]'L_%gLecf@Nft%8if/9-$FHUOoG1J:jYson"UVGWtH:^!B:Kc\6nB"M"8*M4q-@^Q82lkB?Bq7J.-mDYQ[<jSXj=)oo&P02#L%rTB/`NIV'":?eri$%W`M,@d%:Pgo;YkA[i/CHaDNC4USEl:1Qa)k#K:9R5cd-af@Y_X1k1%a[t>.f!,-2DQ8(OK*'J/DG7FcT^ta=NR"USKbq7PV;B0oC%QKtrD8=Vo]&iD.%aHE);><`n]2Ro!a;"tp&T9g2+?:K<R=J-d3asj9P7N]/NqRO5TGfbbp/toS'%/0'cdl<<r.QA)lB8buK#sW>6%=F'M4P9KOa>f\1q;CH'oGO\A$<m'DOD=mN]K3OI2Gr`X>5:,41T3;]G0VrrA5&VW:,92mIZYH[%XV67Kb;t3^!QEH<TtjtA*3==o%?7^#%0!;pQ5BH_8m>LAW2-s?^l$iGb:ic-oVA4r+XWGFWLsRbbK@!rK1];X8aejV)C$#YcSRhe(BaEooP&H>jWtkOA+ocqXHn4$p%40[peOTbP@>2-IRJ_!O+]n9pb0n<_X#(Y9Ro&q]W<r<S>!2C`u\)3%=PFE?u%)AH!QdXmiD$&/j)VT?9dgKBsk<4"fP&:*u=2\==%"IpkH+ZiB5WdPr>WmY=I/pm)%f"Z;4pt/0$R=&B<Kn#hXgFbr<;E2-pO*EQjmAI5gM,=G>d`jI5<9dMqR)7&\M13u<-fYK$YbQV5%-,p0P\4!I[cs#2F,u%'aXJ(XH<$]c#]MCKuBEp5WrJZU-V*EP;Q+aT.JGFbh^@&l[^Fu%Ue4[P51cZYukeYZP0tnpYEb`!3\;284%BE<Jr%2%mHDHkk[(0**^]t4T>TdIHXmiRG[?buj:+C]UrpO5A`3]5Z4YmpE;O"aeq/OATH;L4Hua3OOLae\oW-WNokb((E?4RK=]%Aaq@d[.ib;6gM^);,!=GS&0WZG=[^dlaI5Z7)@l\<L:_VQT6o">8mi0HV;d[p#6NeQ5rp<ZbPUnYb+2J^#bP0O>B^ah/G_fI!Ju9%<(,VH^HJJ6S^lr80u#V"<R+X0lsY@Q,pg%-4C@@hg!VX8)PUTDJ7"NWA\!E^FO*)2_@A=6G9*PlOSA(J^#eN3;C0Iibaq,<q2m_p%XOu2Xr6-4RIhtYG74R%QH.ijS2U>^"1`;JZaC7iDPM+iXP+)$U]=]B%85Cnqm6s]#:=5XW,sE4nX>Dq3ij]0KEuNj]Ofq1g;<m\O%NG'O+$-C2p4ZVA(W/:2"q[Aq3jXl.T#+Brs[ILl%dhik"Kj(p]ju1?JCP)Oh7""1]rKnW,b\TS6oL_NPQ%b+fgajFR4sr!iQhJDj%Y?5p*>fXsYs6!^94'SkL<]6d2>+-so.`/JB:WN]E@X--2RT.\qUc-0f7o)HV@-9N(]"KpUWVr5b\Qh;=[U*mp5W":3IgK+gR:Z87%REimL'8i\d9HSY!!G3k=dn+E]S'<k^+MR4qPf338CsP#16l2>MXh.8>\qh\G]d.N'?`tZF4P>CBRSMX1FU,>F<KenV]6UbL03*`#%X6"sODU>go*e`9imq5:<5PWlb;<JL.T.0kd]D!GgXO_!`Q"@=4^%QW'pSTV8p1J2g_EfC1_I8gD<FY<Be?7t:$ouuo/3m^/O.agu%=gP"5/r_AOPuF@omo3-VI`b?g(rY.j\I$4B6TW+^J5%C1Qd<i_E]tH9qpODc?R:@W,[gV5#4j0Oc/P;$B;/43SQIu9+AOM49ORoG%$\4ee*A3M<dl2<r&XI32)sJRRY"hH45^Fd]h_IZ(egM3Y\+<rLd.XMYhnKMMON?51oF>n7<.$:kK!e[iC?T4LTisVG)#&)7+SA@+%UBa=L2_XmC%ipapHj#ue7a*f,X$:5`[e:]Y<Ztq20lF"sgA:;licut!pC1'Oc=:JSlOmF$:nsEnD!T!P8L?@ag\/;8(h7USpm[_,%UlgIOe"V#ZeEYfYTo_Fgk?*4-[sK]rODs*D?Ps3.,"Fr)I+NaT-pYJNY"G2sQQY8/N!/D*e3LmA)%!6#A'q2\.#>h=UW2""7tQ-G%(A%7TFJ_O,II&[2$8O'i#E,(bM06.)JqSU;p-'<6ClK9?O('(40kG==BV=8fUB%F=nN4o>i[N!Rpu"V62`=R>!''Fd!+bdjK=L3$%l2qsJ(^TKP'QQWE!'L1bompO&pb;2+Z6<(ZZbYUR[qUSj&"WQI`Y*Y9T7MjA#(YTHh2Y28JoR]hNpGC'SfD-\TA4Uf@1UutpX#Ci%_jij$YUDCGLr9!rijD!^+7oTj`OohnH,0VmZi$k>!V,DF<&Tm`CYrtGhkTGgbXn._'Z$.]1B#eD8UlcniV&$/&9\P%hotb2+1_Zr%PZq()X`lEbc0([L=j_n*Z6f@-$>Ad,T5oC!56p&4or#(Lmi_5f"e[[2(n5I]r?*Z/PK%K1F49g@osNsP@t?pn#+eS"8%+'Fp6eal%fm)lm3@`98EpshDqCC?A2=8IJHK[6A9S#32*Ok,CWI6;*Qmsc0(6@ojX]G6P2;39acV(*Ggn6/R$U#-JM%RMrS0UT%`nVV!T1H4:%7nF,E*/rJ[jt]JI]2.CX;X*>Xch+CC(#Pog=>iq(dIZ*l2.aJce)AgR(HEsq!t^rt00Sb\e+iD4G>@#-SBG:HG(,:>X&ok%N$Fk<%euE\sJAG\,;/O'+(Fs^;gP]#s;+=+<66AZ=0KcE'ib[BOch+lWjZn<.aWd)?rK-%?_j/%%Q=An,"u8o'`lgkKCu0$c8k\J_^L5RC%"LaCsa:%"qdOKK<-+kdrl+F[B>hG=-A,?G\6gu:M1Ht5_YpsZu$r>9GX'_r,0DX+PG*N:6=W)]cObBf>9P':58m]l"N?*<F>Mi4"%]m*HjBGLS71%Y8K@IIa?b`9)oMc-i`g7bs"l_pW1BEt'=$?Z)Onq!Pe94)K,gl(!_fjE$R^<`LXIeGTP/="V5ml&P%oobPEp_(AA%F+_0^N-hZ_prERZglE>]jm#$3>Y8K%+JfGBil;hO=M9*d%0>>iH#\,',j=.IFZa71grP4lYqFn+[;jk6_";o>rTqPUjmC2b!UNfj%ip4Y6#.9\p@_t+q8k,o'3['92'Ns@i6d,uTrtI5h%M-R]99`XKifme,hO?h,7<i]Yb^KhH&Y<2<N@u9d#gY)aAmsg<i_\Jm9dICI%7<i\^M$N/Zbg3%(RTh&::!&B%BF&+]19n]Y/itfgi!d&JqpMTFVZHF?H/+NPbPU%ujH;4eCZ7rkc6:&3:Xf!9'j&H_4nb*rYnUqA%"dW'%ZsUhniI&.tq!-nco:E=r0ioN1KVa[Hc?O9X(#jj+`f@2WB](gl!*7=P2U6'ShH/kE:HU<IEhttFrc=5+?^hDr:U-I'U6"HJ%ptGVu`@#]clbV6m@N#=X0p9dkba=4X,-bBUcX)ec:Rd0b$rjIIg/nO2?r9G'a]YhHV>h)7=B8Fb<n=m!_NQ?G@&F<s8)qTeC6[Kh%WbYDRdcd`:`&MaZ<TC7l@ZO.sn?sWA'&4i7qniE(6XU'X7,iJ(hN/'@-]Us+ORTQ1H00<nH?hQ1Z`k,j&:SF*[#qUS,B</s\47-+%oqga3euH"TPgn[6JmNr>Hi9Zk-TBrS^g%g(>s\>_m4PhL]?GgdFD0]+B(PRq%'OBuYP69HqJ'W!F]ekIZ.h/`"r$SJ7mV_>".W<*%r^j0uGQc(@WP5T&L1X^j\YI1,3bftknMpB1$bM5!F!Z,/q5[q6'QF$aJlPLc-mIVP`Is0O,)&Cg$=FRB#GW\rPn7SA6J08X/A3U<%TX!!^2;jcu>!\q_W?]5g(OKm]N$DUi5Y+s7R97m)9]>Yh#E_Va'%&*W;Iub-Eoe&r:LZkD&W0fN,7;0Y!t"eI.lY'GlRp$)h-l'o%Kk#P!/5>7>Q"7@:';DP20>l-qkg.8PZt0[Y0CYS'2"0Q@A+GO%1(gSr1_rF]+aa-!U79/56dDJ=8'g2_!PT_`m7#%-k@Wl^CT5M-%Ids2>FBMhK.UAc20(gh5_=?e7[SY'T5osf[*15'.E&JAfe!fsZn<C7Gi`s\ETuq?`nSi4-O*2bl)]1@m=#2L-I%pk6?ZM6B>*(+Q%\"%#5QAUpH4:+b9P*VJ']7Y[R.tu&eNb]`(Jo/bucE7ZIq9%@(?eDn0_(+0a(kTMS@mTV42"KYci0HA:2kfDi-FMd_W`bi(9nn!)%-Oe_6Lf7q:CX,7>I6T6rD=1#V4G!^%%MQ;k9;#E!4:*-ah:+^1a@X^%?^l(-R(iXH+<d04GT30o*jLnKi@@oRXcBid5oH\Y^cZeY%\'rN#i%TsW,VFq0JJd[g)L+W?aVo>E':Oca>N.?7&&+A]]Jd7CYnKCC0L)e]=d]-r(R:QS)(HQSF*JV@"SJhh;DcD+48t&1!PY>s%L'_iJPqQJ(P:7EI3.jbL6GnJMFTt]"d!Dsq)JN8++M&MLa$iD7f>\7C#6h$E%U@qJ02h:;,K>W4Sq@a[:*7;6e=oFMp727BHB6ei%XB#FgHASpbM_Si(Gddi-N%hP.FXZWZV5LMnSIHst""&S)a=380`Xgu]2r@]tXNA<uXF>R5c@D^FP$H/D+1lRu`&tInE2[0i!,LK1%)mIhr>D#=W3QrFS_\l.QDiVKHOY`ZtY7JH"l.B6dHd7l%bADm/Q<l@+;9kL65?Qdf02^$s_@KDQP\Hd"N)XfjYrsP"/KK?$^'[n8%h9[!d[3&m]jNY=4@YOT#ZS70t+hNF4Cd>pW^A=Lh(pt[anu%1h]s`>m^9?nl`m,1KoppP]A,Wg@R6&*]CaPTp@]<1KZj9c%SN5`U%87U'2Y3$L%ZO4$B93lPJI")C>E6!ZlE>0f\hPNe[(RF`7Ebj[#Q:4t'ltGE@hfJH'(>b[0S(-2N#nAqPF#q^b.QA,qpWI$s-9.B1%eX0<X!.mpj$P%:P/Y^/%P#P`D5D)VTZ=Xb!jq6q8+6de7.?e7QX!GM%8EIgj<^p?%FF`$MOtKGjLumo.[WVJ#=FjL2o*Z5[Y@?GW%[To.?LC$\$WGYaiI4;T,?A8V?qH@%%1^eJE!LguD,mbr:J`L@]0/>ih7<i\^R=JXtk8)]b*Kjc_k8&$ZA+5EIcGS\D9pR6fD](g'%5U)N(4.42GA!P(sS\h9Y=^#>QRjFeXn0QE#A;T[bAfZ0j-HcK[!'A++[Tkgs,)#]2@pRqTWe*WZ,'$<Z`i$J_/6(skL"j5t$#/N7%f!fi94S0+`c_etPg=!130nP"diIUdtQle=Jls]u6M9W#Kp?fRC?un^a@g&R3d,p-l`X$>+1GnX+k(ljR#eVC;2b2q=f^Ubr0uEFg%[9.#CQm:CG&Y"Vlg1H9t<i)u[!rN=*gnQCV1do:TK:A$fb!B[t8a-MSEbql:bHtPT%a\NfPR_&cK*Y[I<"?;(j*b&00!6F*FE)$X%8kYYsFZ>9'P,jSjKd""<'Sj_3q5]HU1h^eGHls"F/`rmr_qkU3KBQeakn=:J&p,sZ`1`&M>>$h!B78=87"Q-7&(IHAM`d.m[!aq&%=C^oX1UfUf?YFm#Q<S_[bp#9b#gY)i%t#4C&Y<421Q+J5]Ys@Xn;GcfmY&U'!8Jb2pZ!(LrlTo693A/2PHE.])N4Dd9]J,6o4%B`%GY];\;@^DSds+V)^8&EV'4F$OoHEpu5a/P/,OmGI^(\[?4(q>)\&J2T6G^ALL?Cs29HRN*%!0>]!JgX0*b\.3LdSP`4\IT.oi0GY%=E-0W))F$hs!fBPVK'64bl"N3ba=26#PYFEa2H\+I4i2'60p9sDtP?*npuO8E8[aD@&nmkqB:lg0t"o89<E'KN[3@G)-mb4cramr%Vf8q>7,jp-'GDI*+R()o&I1JWLi"3k==ng'[BPKg2sTtZ<qQNGV.F*(2HQ+m9jsCc<+1gn$``sEK+^Q[Sl&-oChXinO%V%##`*>9%D2GI0JK0P1N,'2m=XR[:lUNV2m(mk[jWk=9!S@LE=,&m$#gXRUm1%N(<8#qlC4.==@h83LW)2XsiRn=pQE\ZB$&&Y0GKFaB1gAn%%!a_/2MS-X2WQdnqE0;He.F0Ok$0LUc1rSG\P7NMN,a!jQdN(iC"7\+^U1fpTK_PU=COb]T_nO'WquD]:p#uQcF/[1708MEtaJ\2J%D.>SL\dFSf-)A,:94I`HpQ2,`4Ys?<G\\8\.*h2)enu,b)ia3c[>i7dX:sIE`n5-3'3Zcr[>d`4_`FK7CU;DHbjic*XV28Aa*dI\%STg1e8p93F6i:b,<?@J@r9l]^%;qo5#)_A??E.hDlu?o/DkWm&!acTM[h.OQ1lHI,?<l`[Z$lmSo"0_DS<_(&KcJl$EOLE8aic!a%TSc/`E?+?QH`m[D2X+]B#Y?9H<NmLIMWru*'6/lG/s/]sn)>7;I9-R(Vnf+Z5VKYWA_$E8'b+`POM9jTDEaFgT3cuL0O#Vm@S`#r%\K9#:#8>97@pYN9qdA8;6mj'MlQ$SG9BBIXa27[\&oP6ji+W7:D-5!glYR^N&uoFfHjKtj*!5Q=19QD"p&N%]&JN/>ZNCcQmh+=l%IDqH;Er_@iHi/$6fgK74n$$0<!k2o\8BK\!):ne-TpfiCDf*\P=&$'qIqa$N6p,=M]7d.$duJ0!LNtO22MD$<F,R>@$\uRdQ]_'m%mb.]s0Bl&;^VBbqqWBDs=@WiS;hT8-[!6fm0ahS=DKW`7`Kl[68$dBR`)-V&AW#5K.%,Z['J.Rd9r<.ghQ4Te-?X8a<[X+\\4#9m%0/b&C_J/D`hU@AX=hP:hEJkB:^H9QK`1*75Hhh:Zhrj,I6uY%.^9+L"\-N,GCQT/O-1@1^2A-[<QihmsA6Z-"27'Wo@(P#D4=ll7%^jRCGb'el[^&C<A/*pb2:IY;R]9T'9:#U!_Gd6/10[qh$/&N1kca[1*R4h%(GtBP4HpRUaF<nn41;3,GqD1<:Nm?AY`BIAKb"&af%fZ\aM$kK(lDnoXnM6f&gq/^OIq6)%+Y[ZIjHmhOi\DNIYqi>BmHirWSJ&6ooGt4J&m).Sb3E`Fs=OZD>M%s#[dSomeEG?<XeASVd%BVDP'B\J.2rF-sf2/YU.(W@/a<M;U"_r4"\9dcu.TE+R[VG4s``65Y.i/eYTfnQhIP@O^PVkWn^$KImI'k@[<Q)u6Fqq=@ZWk!-H%!qEh,,MK04aI>':WPf]W<:b;3`>Vc@@8OMn3?0HKr,b8l9R8AIT9(Mg&J0F_VVi'jQMSJA'\2@H155O'e<LD:-<"Gk@A5*,@K;f?%1F?&ACM7@M(XXRTG?/gK.GWq$B.Ho"M#p149I`sD4s)ZA.rVTpH2I)&*^:a[\[._Qm+70d,n:<qT)J"&5Qf,AI"C;s6F_l(0p9Zi%_MV>'&_!(RS+?:#c4Rau@baB1C7pC$s%%gAn8eJiP3+i_>fr5S,f##%gm3f'b6<bOT>m2=j2Lp?asXW/*oF##(CLpS5#"."_3e.h%q3(A0/FH5GbHs9BP,N$BA[hB6DJ*G%"M]jZFoMTRAPrp6+*6Si@(q1rTq"L,?<aF$bH[V%1![&$<=lB<ai6?BI)C\_X8Z!Mhlht2%O,s,Z0jC$YTS&U`&t;)mb=3]sL/LB01rg]NiX4SgANJq@fbITS[neQWaC,<$ScDR-lg&2T@O/?1N^T'k2#BF+\.2(3A$V+QSeLac%DseV)7?B7VeXssSK/7r)loBPJG>9F/Zf_J;STD*U8+;IsfVkm+\bIqDmjd4V2%2+A4ih,+mkKE=Eh"GdF%SC+(=:B#&\l6!hTKkP%[1$[4'YYD(P8mLR%sSUlS>8]On,(4hnnhbp'(nP016kAhg;]t0[%2P[-3uUZn'5EB9Xqd&GTZ%$[C$g>"D?6^B!clTjsa$#b0E%=%LY!ELj]1_l7<Y+rGro'K%U!LQ9(^m%re[l4C9mAGPBpXg/"p3rd+W]nLG+Q)PIgTu00H9nN5kF9pP"$Bn29>>s0>In9f*JIN$I#)%s54)N/L2T8/&VXhTUf\C$a,%Xa#C6##DA5!-(*[S";DWlFtjs(`4B(-_L]j?gY1=1*T97pWNt3]HObtuO.Ql,Z%$tND.Z>5qV%$;%QM9@RIX`G77H[Tb_L>A+M<QCD3EW='cL<;07ig8Oo\DM%.(pU3c`6rAi_ukM4KMLONR-qUFa<DPI_&^pWQ[:keQQBimK+>fC^57`%7\/5iUr!Z5&0LL'b#=X>A"T[($&1@/0Vq#im2!`gLX+8k2c?H9LI@M'ECn`=.:3eg=\QV7gf^=8%huTBU4ka@'X;H-F3OI/C^HcW%ii98uCojO.NuADfFnVK@@bTL-GF+fc_/@i2ZRr8-CpOAe,2]E!9aOUVBl>fh=0%\:V?`ualan$fj7G)ngHu<D2\Nm?7d.Z+fp6HR%iFq(,n)SFdVhTh)>`uu.^8l>L+Z8o#Vjd&=7-sI9@!u;-b("6"NttpL]B0E1%_WFa=Ci75DP(HO8%VUA454B8NTY`%?D/=nBfQPc%Z]%5S&a\+>317Jr)0&tmdo[F#alJriR-<V2@ua9Nm-_&'Dl7fO]/u1+XK9D0,V@40\)+"SgfsqS6OBoq>H`dmeV?U'bf6UAC=47`%=<F:J[i#D)k]@.!455:Tq2!oiS0aT4]#W<41)Z8lV98pV7iG2l(VV&X7#DN65ouQD[W"CoV=M#$B&PlNGobYTEh_67>l9,#?iRjq%`a3Jc#Hk<@DW__-Iqo8jpLH#WN7b5:^!ZEt)$eb>2JB6,Zi_M$f@q[a+'OquPl/@j8k6*eT%mC\MWJ!nNh)q]ghb"5a=+Pi*&:E9%9./YiObfi`okpJi.@-97LS+Vg^pdgXL=H524md0c\nfO3eV0Ucph!J'QGD*??sEpa<<TJJOt&4C23MA32[,6VDXZ;r2mfVS]LOMM%[\.N?OIqR9*Ad+00(&g)I5&sUDr/4W6Kc=4Y\\bbNk]UP\XtcE\eLXR"'`d`GN46^HEa]ZqoKnP)8[g=dH!-')91<+b+)N&.J%.N%?SOe/'nPru)=k\-J9d<fUE)VfQrES^?9_><b0r2\(Cgj"1r1B3O<u7D[^$D.ph?&0H/%,.20:=24sHsAFMCc-V#0,H6=d9);*ZnI%0_H")fL/1q+h3A*3[jL0#V9U(>>+f]A[f2kUZ?fL,8qMpAD.<QmH8bl*]=^2Q;`uhnTqi7mc\92`Tq*$;X!G++MJo`-IK;LOV6jC%PI+3>Q&sSqg5th`]?_39[(Ok]#L%YT@uk`[l.@5rTa)W33]VZUiLX<>J"P%eH9(2o#LT&"';Mq%((XHNQu6u@_"YWopSI0?cPk46%j%.3]jqjkooV(9O%<?j'RmW0QM!2\?&d4#-+P(XgqDCmjabuER&UkMcCDJjfZil_F*2/[fjA`L.KHj$I'9B`/pKH;oQZBh^4OpOb%>!/H0nYmjR+0?QF'P,NO*u1N"Y/H[8Kt[<`^'Q.tJLGZBJ'o=lJ*mq4iuWH.NXXh=S4;dKrAkNe?Ws^[1;L:`R%G$R%!QND(^\Kl%PCqMmm0p>S(Vh-4CM0$Z^&U)5GjPpGfb_a/64S[ff;H+Zq_U_k^%OkPj/;gF@t>X-S7_!!TU#'H,+qA'l&0IAa7q"cqK@'9dd3fd%V:JP!bqMl<NO5F2(lQ#,e38ppdtQir;kLS%!9Z>J=9;VfnsEE23t4S*/#23Zf<@'Vg<,67A^&F:gr_#cjD5d4dlAZ+`Pt[lB:I)5%H$3>s=jK-q[4.TX.@^"3F'4_"@aAY'dWiD(haSlXc`>I+Ra4F/B;;ol5OQ!E>+K=fZ5Ui&mu$+9VqJ3FFo=Z,G?F+DNILNF0NsEI%\'N70]6UfY^NH#lPXrtN3Km=-lsNfNQJKiFLi?@>0@[a\k0MTtQ$;21_gVfTP]t\%/,EBo%[tIB/?Xp.TUhUjcPfCA_N0r%icsr6%]0'HJqk[.IFa.kb%JdF\+1;&NrDgD/JJ[#5N`qBC2H-7BV3`Fk4L`)5R79Eu<`1c,,'@u^lQ#?,2d"BE0#j&i7g][b$@5u$2gAkC%l/^D2:&06!G6H(@&Nn^)X_c2*=ShN!-arqg^-D#s,>k?YP>.tKr6/4+8JdRhKWGnV2]j!<E2Q]CqD)>1^;`:>OABT9$Xh17YF5dB%Gl`kLjJ4Gn3A654p"1\Bi>"B7ci;D1X#l!>9")"5BZ+;+E=:<a@_t>\.LPHLVp$;F_5!,n5p9"%nfZ3t7d6=;jT0/3<U%>T(8dV,%Ll-eP)P!-WXR.m^a7eG$PH=`TYMQPUZ8_Oc?1ri1(beagNS7J9"nE;)"F=?j:uRhtmg!/RYU:Vt3h<RH:M6r["m[MTI_(,rDH'Z^%TZKC3M6Lg>p&-/ZX&I2>7E@dsQle!`JZQT\"$bF7i/$>M@lqoS,=Rc=o:GBnE;MigSc';776]gT6QefaA+"*0r:7PWKZf)'V=n/l%Af",]N(Wm;g@/,uHg^MS9onCn3ZD"8D$MbLOCkc*D;bo:bc_t[WD-DR>XnWNBp.ASnKbl%UcHP8\lH-=8<juLX!pt2<[gnUQ*&_q%GNS$G2X;obEHg*K@D]k.>cec;3FkP?!,c[L[KurDj`8&"YT-F^q2J3!bY[t@F[]VA]b_8*WMDiN#J'+RMp'J;?Y)d]j5=([a%D<;%5Y:&2JJ5ZNj>gtAMue>ZDd>"TS2(gLifG2Ud3V;"MP]m60Giqi\mo,aZ<YA.\U'.-TJAJc;".j^_<Ck8UOZuM1a+#R6:0m@`Dh/k%TR]m[d"He>EtQ!YN=lrP.<.]UhCC#fnGRf2$(D%F6'`1m/Q6X7SdL^_312I/&^k!@8pZIG3LQBA"9;Qt#!gbR2i(F`(#cPAP!nH)%C)AH%!(>h<+>VCU,AZ;)'+RBK,q9i6m&f=S64=4<"[Ld0;N^`BX#h=SPrW@i*s45LLInC\!5do`:ToH?"$NtK5\'r?##7NU5r:K\%XT5Y%KT.]%GSn;NMi7I!VaVCq"C2s\M#kucq;N=:eb@6FN+J?$c%V1jH9uDuIO&\l:*=Z9UR9">in11``b_3g:,'F`!#Z_f_p_`=%EIPS%fJ+^H3t+WFJYe9t9Hu&^fEY/]d^1N2Eh?+uNpI(h5,$qZABA+0#e&_=TB5@C,L[ls`N90g9DI0BQ?gB<4b,b-Yg\AAc5ro@%54tn^pXoY?r>D+tV``9H:b0@XV'eHRJ?]5=I@00`J`ehXi2e'jf`R'K%!)1uc.N3S5rZ?8F3q5u)P%T#oO42p#<5QfG5<o;fg@%S%l,,>j&!;+`dta1ffu%PM%S$rReP=S@]F]q?;9?@4*;,tVqHVH5>+L;cDnR5)UZ=W?r<Jt*6<'3?;+Xd8%i%\I?6]b]2_$/L#Dhn6%B=IcU9'^?Hl?4*EhpEV^h&IJ@mT-($.&m*&lE3SiW&MRLWf8&GiCr8Lp$asc7(:SD2ue_n,0M5'm0rr#NsN*/kfIc8@h4"`M@(4Y%qOa]76k?'eO$^2[n!uncJsa[Ce>Oo*)(DI5d2u>`Act[Sn?R5u4JKnh7[@#q>Z6d(N0mQ7es^&3QdI@\5H&]"OrW0U2UOL<BGQVG%i!9RI#6/H9ke!C_r\+(q54%umZeqeqK\cYrQ0;WZO/a)FU5<FQk1VS*@t:F/#e<Vp&P3dtZ-!]*WobmCAS'GtnsXs-k*iq+?8LYE%`L2]c(,E0>k,i,n@=Ye3AS'GtnsXs-k*iq+?8LYEV4!<C7HcAVk;AUL.$AFR=daE6]I"`$\L)6Nf*jZ?3Ug.'_c4WaL;[:+iMBq[%O[:4TQdhN/Dlh0?2dV^.c!6Gk`+t+GRlW>D.A3Xj#W^(1'hLaJ[aKt/Af7YKVD2+E9qrk1c&cGcAi3UX7-IYSlb"^)P#6;OGr<aG%A*#TD=Nr^K6bI$PZ0#XV<^k/%MLAeg/Q8mUIA>"I<aLuNeQe:s`+t)ICOTl*eI];"p3Fn!?msTOAS'GtnsXs-k*iq+?8LYE$\*]Q%M%0SP8AsW;gp+gOM-<B5/4'h"Ou_-,KdL@",)rdRj(1NJ:r![@h=W)P3N<K#Nkcq\$'C-X)lQVE*[iTs&(E!_&!Xaiq*9RNq&t8L%m&e+.VWBS5,-+bG!GZH3_2Cuh@tc82nKJXtN0bp4R_qT:MEGE(T.+G__)>+a"QjQ`iD!nGTs@Sf=F$<[Yf?R(O#Hd!*s/CYhAQfF%LustS/6PiJ+H-Ube="HQW&%&jba4Za:rhIc*-K`uWf!`e$6iqLQI1T;MXt^q;\n*tC15k*qe;*YF"A6FkQTJG,)DX,5Qdk&fRlQL%-27u:KG:2(.?CoE.P;qK.K[If:=7;A65,Eo;Z2L]&I_[&Qr.mmL9W*<[Xa6U&h7YV+rT!qR%=IMR,t%dMGGYC@iV7!25a$U9W#0A%_*auVb_8G%&1Jg(',<f+UaXQ(;+4M:-k)Qg`W0QaR_i_Rb#GG`TJAV\;O5MR11OQ_NBh'/S5CVqH7C#)b2C)PUFaINj]F[*_:(B<%[#?90+tf((4XEVA$qtB6>I;Vi'Trqs]c7qM/^#kn3Ab]M9O[Tn?4W`(`asF%&"u_;"Co6j"56;6!A=tBJs<7IT#U'WGs)M<^u6"F%]E3jiT_)1@i!P]t$636#g-#Rn4:/-59T-3]C8"1q[8^I*UU>-T(4dcP=<]%4<+Z+DR0?#iKE>^7X%*I"b4;W?J^or$4@@kT1;b;'%=Y5l;XIdGt;8+44IR9/jH7I*S<Ci)+6BQ*6;HYT/8gqlfC)!"tTJ1$dRi*WLi"V1OKi3r4E-*Ro&nUj4BXFkVl=&6FALaNE=lfoc%)*F0/5\9Fa4AVcO^oF[0CQr^INV?PMFGS(MaXGV?4ep%9V*eDG;jQJ5N#q.!]H$Ap>:6A.+ZW&L-YN'1:['RR0q>.`R-3;M;``-D%r8oH,4K#@aKpCi^:gdgtB7(02.+o:CH71Hs1mXG<CsJu<T`^S%X<(RWW6>7^-lA3]G`#n%6_k(oas];=\mD%cd2XW7=Z(pGO_mSq%?Z`$\^`ahBAjhKl'+GjGALa`NEK5n^fdJ%_6DARs8A#7sOs)7/X9k;X+Y$uH7qF\]O!,R0)=T$pM@'G5)\\.P#i-o70sdg;d#B7@%-59(-MThPd.35-<eqD2]n\p@--oeq#60MbMN$bc(VrBJ,#n<bhPd)Pl5U-uBXGM"!apX'cL^@$XH*]LtTF,&C,$>j]`+CB0J2/H!%a2gj4PEVp*WG$["nru6ONAlrsjJcf^$[E6-BVN;Xj`hFB\m[+:;2YUh@4T^p*%f=<C5e#rJaV-gN%G`8i8E6SOTYjupcsiT;/jO`%$"]?io#=jt6q0psK/I(GMjCX0Nhn=4Ao+;?7c>)@aT6[FeRLEZ8ISqATF"2!oOMdB:e'Y?jZ>$7?o_E1-:j:KIB!@d*YH7[Ob#Z`%K/9a0E,`hD'LFp^BHWB$l`/$GVpL%r^(DU+8u/kR;5jbu4RJM.6#hW%W>$'0#9](9\l&:;/8=H=6/k8[-lK#t+-K+X:mLg;EX\OU%N%)f_E?9\M0j81JMNSmB)8jTq/ueC^>b[^DX=AU.PcgZQjR;554Z6FH#**WeW/T)_Wc1!M:qBL=".]TfL8rD<YX$<,<=OV55fW(D%KVC5UeRJjgOc7h##UKh6N6<&)Z.TYSBag]@aJdGsS=rVdeJLV=,\-L(qPqK-)6HLN**_#M<FXIJdATHI`t5C".ZZlXdA0IX0P='&%.Uo(Ar'^h5BMbDX>Kn*#aA96(-]o-53*^>dAU.>&BN8VcR-2_o$m(Kr:8VS:?@fSd13d&mO>TKf^d..r)C%Yq?'ss^AU48-+[f&_%m8>hOAOa9l$;V=[]/^3o'DQfnP]T`i`nr)<W,]'EUb,Wn^iQ*1U*fGSo*c]'3Zr@GH:GM_V.cSh:Ba?P)Abj'![U9pWrsPLOa7Wb%-mDiW+t6$dK$"d.NO>bl%%P7><Nlt.ih@E><MTbnEFsmHaS)eTb_SeeUe'LKk#jQZ@TB?-J/'8j5bSA^NN3m'2#q<q_)rF/en?i-%$*sVF>d.(m"[Gupm\)<BJ>P"D;dgFANUn\ik27'[-jg2LAK<<V_,dWTa1tM@G&30(-47'ZBW=>u$F9_G.\@'5_kXMnU2k43TdVAq%=5^8[HIA2-Xt]f]j(qCtqS1#r+GK([R`<aXEGu-=EuZ5g!)rnT/eog/XjOXXUbMIKj4m@;lG(?lS&3[)NUo(Tcf+!]]*:A""&/[F%ncf;sp9/JD8>4bPQKR;+g:q6e*$gearu)]E<5F)R#Hq%e?Rlt'=.*BiEGh[0m9eo/:1`.o`apTaC&_@f9ti)tE,>)FM1]<fY;53(%-Q(@:1;,$T`@E9>5T-DIPpu_nDUi-8"I-/o:h:,sc%7EdE,6;WbTQ(:2@D"`CNA5.Tec""a#,T:C&^2U:B]/GF5/%8WZ3(L$E!aa%\1jd8jZgef,V%8YEY=uPVZ,bgKVgNt5K>',Q)XdDM0DDKn5rbZp7IOo=.&]RPBg6.)O$A1:T3uZj"d)rec2.UcihnuF##,"]E-0J%#cdjd\-T!1m6AW;30e4Xs*o08ZYN-QSS.^)qAsB<J2/ZkB11gQ4X+;P&0ScC8fDCd1o*#uTUSY4>8D>Tm`^XYIFkVO$4oK57"CKb%?#_'0a2qR:,1^i/i?4<^n"tPLdf4`+(gF<GI5$]KATo$5QL')[XP7'L2a/FpAH09&a=ZZVmNZaFqS2WXg_RM3.*_/s9!\KQFe1/k%be?*%V#S&B5?lS9h=,>UqS/4SDVa^t9"2Dm8%']C]8t2gq9/29F%c5Aqq0\erU2p.[q,M#lUKWDGF>SfC3LOeP5kK",jTh`mtQ^(%P5j?.l'CC[pK>'Rqqlgh5-KmBNM5_4pC-.n)JT*:DL!T+_#n:BB!\g)[3be/buV<Ls82'=P5apQ=D`iLj]T&5p6TFJG1n$*8cF57%f\M_j+$OkW/-$YPG5((tLLKBFZFfoamOrq1I+hs$QDqPFs$'`ggQVXZ7\Y8#s2.BL:]>k=.,Gd;bLa6_qodT95;KFESV'H&hWF's%_ru2<qL>l"B7$raK5I-ZD<,3;:W`Ts``KTmHcoL!O([_tB$^?JrX\&>q=s61$Z,^arXYXFqoo$MT?R2VrXYXFoD*GbEJK_/*!WHj%o)F>2\39*VdChn=s,Xu:9(mbE0"35*56tWjAH.GDl^jp7i-E!`q*075kBHo?it`s:57D9#,l`YGlTNAiiU_@kp4&Hun&]8R;tE0*%s0;D(-N-/6f%ZDf+3(i]df74?plY4KE2i:sqLA8O5Ec!f5/`MXrs')),O,5:m!C#V5Bqu+MnLjVV#SK,YAqkLX!QZ_0pDWiFoPqu%s2WE/Gg,7Ki/rJ1HHJ0kFF)*.B'Om@4?o"=*!F8O1B584q2ro$n8Wn&o06J]4BB);[s+qIa4OGibNq:@bSk!R,FSR?b^:]-5CB1I%anu[Akf7:bN,Q0i`ja\Ej%Jf\(e>ajr(isK7l(+nQ%UBMs63.mOj*iQ3PNE11Ad-MrYT!_Qdb0p8Et^$S3N25T8V`&l@8Z#5Eku:%53L8Qrhn*<o4<ChhjNR*FS56!np`:I^GF"3\M1`Rg&Gb+IO=qVNPhBZrhh@*n!PH`Ch8miZe"U5[V'3C^(`O.E;EJj#f,\/JKk/m%Y6E2OS;-AM!]YT_>_`<NZbJ-"Sll+S]6?,*!,$M'=TUR>j?6+O.*ic]PLft.!)@&"1V(cPlf-+i_!10:'*'D`$P!0,^+MAFE:USJ%s8R2gQMpiI"d!Nss*k!?*+NY0a,AR497GTd,9Z0_OLs:b8'XW.3Sr3PmJkl5dh=d7UVD*2[b]^<ZY`Kf1VYs%*4Kh=rBF!XZMT..%n)\r^3TWsBd'NV!DAcX(mf1DG8^Hi)Gs@_BfefVOQ>,")r]fkLeN)B15'JnK2lGX5"O#t?IsZ'FBD__AT5*P*lhT?7>PYYNM6f:X%Q>*in^St:=cTJk4IbS[Sq:r6QM=,h])eket*P%_BgRL>!6h:%XQ2o4J)k&('oC.cP$/dr:?$?bYS;4Rq[D*sb>uTlHH?:4bdach?%gsR043`!NZc*R9%dOfP1RRPtIU-%f,Ap7I+5.95#S=N_c:FX,O:Hc&I:+5\,qnUhLjkY=@fiM*F=3h5he\o.K<WK9LDWO/kgrYu%%>]&9<\HHlZ0feD0^t$GqS4`k6dBD=s%dgs4f>BM9H9RYbjoE3I2K.Y3e![7NrgrlNs,Z@;@%V9fT?EeL!J'_<DWGm2QP&*[!63R?%\=<3nJD$7WIVI-@\_?W1h^8D9>DCq)_]7_9[@/2L<WHadr9j%Ps4P>H]=lHBs4[IeB$JkjDgrYr!;``Xi:0LXX,R.@H%c(FR/m!\%s(oje\G-#9)^A\V02l7]kN(mOJ7Y:8V_d7VbkqD,T&\Yh4</bGg[&YLj_qK'iE5j-eSqI6VThXOEja/+_]&Hn0=61P[iP:r>euQ5%3Oj_e5@emD+6d\),*)<(H51)Tk3?NJR@C6uprqMuS\o+&-J;.40DiqKgWTROLYF?XD%-6os*nY0Q6G/?s0F.A^:4,TgC++TZ^.pL%6b^&0B3T9P^&:1M(ilrIL>4PRI#GCug$)`-hYs-a)04'ag`:E2GIp61G/o^AS5[$E*ck(^_8k,>;kK[k]^lF/MjN/Qr#`,[_61,F%K<_ScVo,42R5]mg>r-K'(YTkIQ>(S'eh-L_E3Pi11"snO1>L^RnnZnObaXdsn!Q)3,Mk3c:IfeC)P2uaYe*"TZMT-Zc0&=is0!aR%Ht:t#P.N[QB+kA2k:Bk/ZMM935MMLZPB1pAS=I<C`4c%4gG7c8pOBV_`;Pt4Y?+2@DuS([4IN2E=ie5C".Au?R3/]047]QO5\?L&%)=kK>5MI%GZN+r%bu`$Br4cDjV<@:HeWac'GQ4kDb`]O6Il/t7:1"EQrd*?Q^hqk$Es^c>Rra6=kY#EGAFoh9b8eXds4,+0?gWm4%Y4fn\n'kq(D>QMPEc58JD*LaX3s*)Ss(>PJah@M"[rlWbQN"J)HqSrja?"gjT)Q<2hD95U[iqB51Zu?-F"DZM@X":-R>K`=J(Pie%r^_OV>CWH`q_bq0[Q/JX;-o#0pY",=?d;?aiCl6f'n'*=]Do2hp\s%KT5D.5p\+W'bIo"$3IqCDrn7;NE0WWJc9Jr@G>iDWZh])0%jhB%cPiIcZpf.+4?(\b,j,Q4`+Bg*&q-;6(s4*F)So+J=.c^=2+$XUj@Y/FqO2X%j2ZLh7RkpQ6=&ZhiD#RdYH.e7HHXCUr>&ms?%C<L[2bcLYUbF<Rs("]K<O34`]hgADc*9>Yg2mHs]m=^/EmXL^C#mnY@$#3(WDu\.lq;Af-s(>9me%PWCgG5D@Ap7M!T)%IEFR5Dk%]MJh:\%>_HB6kUoW$C+=cDVuDq,/5'qX^OEAnnXlhY2*:W?[K$\bCT]0VcoR4V&pi8QY^6SpUKI0kHl%s&[[>2f!H&`A_Tks0&j>%5F_[S>DAcps0;?Rc0#&V2D62Bs&W.%+IiCT3HKX;bIfjKL:JurSj;n;D9k%T0<SceG?mpJ`E_0/g:3#XG?dSG40G=(H..$(hOFPO%M5qJ7)E-KalTF]e[;cp+h3i?@S,]fH=-9#MR<,NH9$\<W@OD(U)cs;@E.-^@Zu5T(X4Zd!X4Zd!X-fk\o52-(M>q8'NT\mm>o#[%%h^Q;&$>/;THkju0s3Z3-c`R5JM;]h3BoV<AR`rO7Q"KW;=<Q/#q*4;'IK#%5riL5Fg&3":+k?0?ZMT-ZjW_.o09*ZPT&'FoHoYj6%s(]`"AG?+=bB7@is(]`"AGcCAbB7@mIl(NX>8!=cbBZbKhg@G&ao.\^k:Of*)dZ%D5H^d9+4np-O6]@5s-/1"59oFmQ':9A,lPL#%`:>^IrjUGD8G[f`0Crg%rGUi')o!l'f.kbSk"C&jl$r<$4cbkfk"C&jq0uVT7,582^:8iU^:8c*0mBnVlp!!#D=\*tlX+Kjs7XOs%&p@fhs(\$se&Td<mfM=_+-QA*%KMG8"l!\ES5R)?F3<f`bPQ5$&jYJ/^1@J@q%h<@XjMNSmo][)^;]iJ!&WTmH]jl<>C=`u5k?SA%B*H(3]_f3=5*r>&(V@jjm#1i(>MBtk94kpd\S3D63<4$+c"C/h!*i6dGC()*/G4A86Hurl<-u*d]N"TBJ+IZmcO?`IDP%.6L,FR2%*WW^=1@sW/JC/bRcN=0b6Gbns!*i6dG4P^Le\jD1-%O#3E"2l,42m`mb6ibGLcm*cY-u:73<=*,n]bnD2s47;%#njc]k7MARo&8R%^t"`(-7])P[sa8:>]"jCLY_'KO<Xb#qmPCGflZ*EHWC-XDu2[j!8Y-_SgApTgO@H]5kf-1B*k6#G99rhkiU\k&t<dqI:NYWPB\0P%!pF7Q8!X.dWV<[M?+uq@Z+GBJa'sPiqjAg:7Q1C9-NHVS>h;(=E&GlnB:]+5>4ULn'*)*4^7'<M@!!WDGm*&?b-Uq8!n1;<c5D/E%.9D`KJ8TP%6NEmf<1PfF=&W^9c2`f@Eh5&e<u^&?RV?8PShgB,?Hm_doJm"m[;fVZVP,_1c2`f@9TV%1='OhBOT`\@eGB58Rr*O1%=TI[*"@j4-/7@j8('(KmMHj@$!:HT4q/6f@j4][4FHcJE$NT!.rl>.+2i0c)!76]=Nmn!;[aY4rD.aUa\oGSI':Ea*E6eBr)^V"1%s6g-ukKNt0VKlJ16=7:)F.odB<=FM\!d@u#R3^p$$CV(?!l/*-4+BL2!4njk[eWEPFN?B?e](T8eaMSl+2?2!h;,O%?ROUSLA]Sf%=&X;"n$ZJ><WK_96h]'6[_-b/@=NQGS?)V5hm@I4]DSOs=TR_=Vk7)mkU`X(=TIY<Vk7)lkdsp)fc=/&fj13:k@T3kQ!".O`Y1?4%E4'[s=T[fg$=s0dFB8XOs$+*R7/$Ya[TqM0E4XH83V38g0JPNdY9kl;/c]u\M7NG32spO\oJNgdbg$0gBjT6CC2J1LF%LF[okBk]%1p[!C3q:21mf2KR4;ccL+.^B'Oj3o7L%WOLs6)!Tgma_XZm!AT)ja@T]WSe<q6\CR]TLqJd8-sIgL%+bgYJ8>Rh^JDo#d-JN#,Q]%"b?.6b-D(&?=$c8!:F%ZD)Tc\(H1W?$X<"Y$VOYZ?=$`7!3?hUg%rJ;\?`19N5[<j$G]cRZE+$7U5kA<s/W9`a3GEMZ#F,m!FRHb%f3A:mMjH;&!(PNZ7X"b99+E1.s44#2qb#H[)2jiG'nEPK27!@'eZ\.KAd.*rOj,ap"^j0j.4YBC]A\'!K1KMU\@L>UDqs-2H.qD'%Z1gIbM\tgZO2`!WhZ$+p1>)FFKHc&NJ#h`#c&cSp&;iU)*4%4qPHFl$o#+r%Irqlqg#!3,#(-B&"2KQ6s18VfrnF5%UZZJQf_ln_%92"tCLe\/Ds+BNGYk^MhlTWtu+2]U%nimCTY-pOE_gI@uocHRK,<Pp8GZ?Qm++pb9UF3dlNNP#oZh6P;=-UpY%)9Sgrdk0'?2h,*%"X`g_X-]%jJ#n*ML]-`H-@Hc5BRK`boqtseh;'uee&p2fo,hf,%lXI.l@_=f0&Pr.Dn03JrWbLuchcrjEO%B?0=C5S.GlUZs't)U%PJ."$j_JGnIh8Ug[f-N*b$aQ8V@W5nk?Qa9C0U9.RmWSC1jT+/kC9`-5;k/QM>puJA$GVZRkWLk+1kT91Rl3pJ<?E&61cq<o03Le%7X"e((.NKH#GK>^f)Hk5);4j.$!a'EZ?n@o?=soNEVK\ao,e3E?kWKZGaV/$a5IiEfj2>-c//3sPPC3V$VfVF%_fa>rT!AT9]A9q%B\</'6o=9.%jN!9rl$%P<L8'd&CI`R5E':.qB&0`D#KEYCH_'ECH_&;hdB5@1U9C=XA@';>Upcnl4\f@s'\0filX=)@-<#N*G)JH%^N)$eanF>u.2U`Og:nQdAD_lJ'kLq9Il50d`kT+(aN"6pJ<Pump#UlSDcr'<H4p8.pkGpNebFm4s-7/\gXZ2cH7n7Fn(WWsi?lnZ%o[a$bB(#ERV]b<?#FfLDlsC[VnpB.Pa/M.ug%I&motGlec^D@RcZRgJZ0/otV!!&Tf5g;lF.uc_Xr!$KkKZdX`TMOJg4oP\P$rhX%8rfHd$<"7oH4!Q-ke9-A*'6)2Pb.2pG$F>D)K2ss_T,BDCNh0eH/9'dP(Vr/<Q]C]!9D>>o1g$Xn=5?)n6@VC>Un(siCHjlh?tBk%b4?u.bNH<]/ji4h\`f=H>X'7O4F+)^Kfdm82o2%(<h&12q656#-dQq?Eq"HY4;`6Z:clb'o20J<*'57nP]5u:=B!)Ao3k?"a3KGt%,oeug7BpY%Q_C5CHrrRa3]AH-7%GjJ(@9g)em7RdLK3-6F2cseSJtULF6\-T`QbB'/M7O(%nf5KF?V5^6(KMi([Be[,Qr:.'Kn+'%kJM=+gc<V3fXYG$+RImVrW@;G0OC]!@lTYLOr3/qc5#"_m[Wf0mbG%t,OX>h)9237l4nJ[XN]SOSI\[meN'C@fstjGV=8k7'F6cZ%/..'$X8Wq%gfB6A3H%=aAER(3/*rdkh6M))_1eH7*=D/g?7EHCT?C&=kH+$9SYHTiFj<$5e[aLuT[)d)Wm4c$/N]j3,Whn*,Wg3(%'\#.dr`&'210!G<qGWrkl;)Q*."eI>8f=XMKSP8P47gYfnWn3lkN78mo\@P"BBa^3aWf'5Kd`H;)lkA8o\=33+7re]bFn$i&8mtS%CHe))*-TBh:?hQ]WI[1@8noKpXT^XWjnWY>+7rggc!L)K"89%8_U6X-.--,S>:nrhSm*Z)7\3hdfgD?8Xk?(5>FQjOG/m,T2ltSN%,L<JtIgpZ5a]*N1niYmA@\\(XK4O:k=-U8KTCrieSFdBb*4:%4F%RCmF&_-"cWR`:4D3>*nm'#[OQW_!<h?X4>BrtT6[9/Q6[2@;%6[9/8<Hq8r;0YiH6[6oQCuID?Z\@S\M1k%CcrQa55[/J.AOC];AOCag&oH_j!obEMkr:0=a_WBO;3`^q=%"t)3QeX]k:FdlT!KtP%GYVg;H*/9,c2Q)-,0rhq5gLTg+O=2>NBEP0=Er-FCZ)`)[K4\hYRPhP9ETNW1Dg=fgPgl<k;L1cgpp.s#^<EiDQDTEo;2;21Esi0%gPgr.k;G>'h7865^s3\GD7@.QbG7135cd"Z4gjQ[F!R]*7`;<J7`;<J7`;<JNM2kca&#Uq#`(q4%#@@8%#@pHe2((ej>0cuMY.08%=0OX93<E[?3=DQmkL>K%kD4pE4#c^X"_?eTP%!M^P%Ef-M6?2M7T\)"BJS'tiagS""(g"Cr=%4:rJ\nE'qGg^%OJ6]F2a!*m$pfj%l<J>g@-<?1<Tf=*X#e9l$9Q:!$9Q:!@-<K5A`o#:A`nl6.m(dJ$9Q:)$9JKa=4fP*5hJ(aA_FW3Ttnqo%&KnDb\c%D."81;N'h^t%Zn(F3&23<Rn`46D0Y7ZR=#`413&s"K3UEuEc:'E[o"Q+PUX&6r_c<7;,Xn86,Xn7+;_.2SQs*q]1)/4u>pIl[f-[LY=,8l(\3eEU%c4sduG)i71G"uM,m_J5t3u@7dW,monW,kCp6_,aE*9nO3?;]m)pPM#P:^T:NTbMX0Tr?6k'%JuB^nT+c*3sVoUTef[F^aGg#h:pL%_Q(oKq%W$4K;e!=A?MZP+`mS_l5VQ\<Tj'hEhIIr@=L=[Nfj8(coHjOT3@dq,_'?Imb/6IpZ+?$/H/cB>R"<k3<o6`aE&4kL$(4U%!m^mf'mU9BXNGTGT;+V9Y"I$>ej78D/h?Ktk4b?-\*%8:F,Zp1F,Zp1F,Zp1F3nL>EsBffSms1&Ss,R0Sh&#)oNVs8,0q!90(N7U%k+]g0AhI7,_bcpTbZs5>_T\j[$po3!0bekm5lf4K,qI:Z-!,APE>3_ZJJ<E*;i^;8mKu)nmga[3NKf'Q/#40W*$Zp)*&G+OF+ojR%5DE)"\I8XecIE6_3?hqk3@!MjcbXrCGRiT2^iS^Z"eLA@.e"F**:fVI*:R5'j,iG/S>buu&t8G4d$XGF"4<]M*3nZ0j'p=P$tITq%$Q"/M+V]9`0bf"q5nn\VljS9eGZ]@]F<KL_/59g('c4%*EtS'P4U2?rkW)+qjM/!>8cDN;-D9NO$^^5[1a7[G45$a:nludlOQ%)a%nsg;snsg;snsm=7b&]11.*o.X+ZsC&>iE4aK=H!AHGc:(ef4%ICD4:#7`;lZ7`;lZmagXJYrEmg<rb233<E[?\`1(!B2tH#Zdq'X%c4p`;3EIb2k7!VUkDY[+k;:sZkDJ4&3p5d]kZgF/5j&QB7HY)G<Ta_BL,rDW2V>Q,[_^7k;9"JT\)ppnET]=S?f8KSZYfC@d"XYa%KJqo%c*9O[jkO(&k;J*I4I7jA"eOa2IY$[@Q\FUG7fkf^4-IC#*4$HQUI%b$DJ'r/k<(ed4(m(am[U39ET`.BM`Y!j2;C2eOVN)#%@QN1&X6F0XTP%6e$DkbG8YOX1k>"O!3_)_Ge@AMN%!A_gC#/cQkjIkV-S7]Raj"mQs7t;P!4_F'gu,^Cn0Y!V"b8N]D:fjR=mbZV%FRH$SG!7k,,"g?FGlG!4NJ$Dt`M)ANq.ltF*8R<sD>)"HG5Ee_g`mV4B9o=U0C-hYkHN5skG6BgkF.#_kj$Ng932:WRq.Y]RHU0;%ihCLb@:7@q_!GWV+kL&o#64A%2aB@L\Y6223`jBXd(*VOJ^.E:,s!t%$KbTUa=ue36c#9C'H-$Q+`Tg2ME;#'=5:&uImS7!=!5(7%D/qtRTQ<.CU2u3ZU2uVlM9]6N,s#[1Pj$ob:kHtirId1DTbHW0F\\<F<_.kg=j[@5[l]>8Xr%6(gb'iX01V_aF,]&Ks7-B?;6H]V%G;qqI3NJ?sk:BD,Sl<4"Sl<4"Sl5YgT#2rgSgt-bn/Om?\oS&QHJ)LWlh4.])2[i&_6WRcU127/o>T-f:7j0mL6B--,'i.m.=#q.%I*o%VnG/e]al2hqm@#9AiU]JhKYuur_VE/%.nE`:T.d\s3IJPC':cu'M\9S2T.^r[kOA;A6^bjT\%OX(0e50Ma2KFqgd5j2B?qB6%%h>3beF@SQI-D+cB?qB>8Ih@GnrgM(rZQ49\Y\n%`p*)HB6!cq!L)U6q<_^Da3F&1,WU7d%"=O^k8*_]:7pDhef77VT.a6j$I9/o%0^tV3Q1,bAV!d#A/\7(*ALP-27)K2"'7^dg;p#ZCUKF>-F-'D5F-9P7Es[S4kJX?=kH%@rS_G,Rgc8)!gc9QCFQ]_a`LTArOI`_`%<-KsGE+.pgKOs<TKk9FhUh&Yi&!`]l5ZDpP?s%T4?s%PHLJ`1h=BK^kBNTE&BNTCP'2!CB,sl_as%.=X?s%N2?l3sf:f!I"mH$l:%EaDuubdh=BN&fMBXj`djL_Jq+KfDg(.jZ+QCP&)*CPk+'N.iM%2+->YF%qrDi`nd:,0gpU.H4Sg%$!:p\-+eC7"57#>&tCW2fFAd%+2?0+_7=02$oliIOV-cFS-%^*_^XD9.5roK'&[">7)k^3L<+U\rr%/V\Jn*AP,#Y5CV[JmN!q[I5U=.U2Af'/c#<IbK9#BZZ>K;i%,Ic>F,=srF<_&<fo0O>rc8@t"^q"'5$oliEOn%S&$8:7@;rN]pf*Wf`lckn2Eko4deA,4*?FZ\ZF"PQIG]V-f38U1,&DgYJ3l[X>%KFm!FZfW?JXr/DCbr%k!^q"'9$olk;ji<i@%$9<cJ[!q"J[""$J[""$jLa9=9+lPl#/Y\-#/Yt5@XWKBl90H7/kP9O'prpI]DODj%c5?orcKXm"c=ue+bnYj9Dls`Zj38<V#B-cG\&XsgZqe9EDB'X7Xrob+kB\<C%cj(;@cmUE`JAb[>oG@f96"t0k.3i4gg"cX+ut-M%DrBabHNQ4Y%><^&6uLB63`Y6UF58,K[(1'"N&K:IK[Jq.dHctfp[1kHrFID!=pdk(2V/7gZ0&WK0\0JNN[-W7J+Mj-Af++K^UuG/%k5#mq\W2[[2:l,sJ=>dV8O1OC,@RO]DBoWJ="p"<F58.!:ii0BM+D^D-ofX[-O:2=f/EphPQ#%"!6nY?-T"nP(8/3U(^r6&0G[2>%i0B@q2caRo]1dc3f*RLHjpJa&1KTYQR(;WO"jU?b<H.*3IuOPCY4sG*F$18Y135lW_3qXJ:1m<A7;&bB+61T$-$F>X8bcjmFQU/j%>&p$;&@H'HSa[J.Xqr`C$,8?@13:@p#ai/2Hjheir3I;]js3N;k(`#$Wm+h.#W"CFNMF^W@[j4HHuTQ,)I/%_R?J/DR2c.%%%'&c%&=L'0:PLV`>`1k8Zc#UN:'O*uDAXJ5bWWf652/7)5'5r&4CmTm4CmRYJM>7%;dgJf%Zc7):i=SPSBTbB&r)endU4bM_nU'i1C(:\%1,iI!5ab!i:mi7,_C0JkfW!)S!dQA@a%.m%oXMf_%0PQCF*F&.2I!Wc+iZ8.I>dH"k*.E)k(YU0QoQ\`AEFRUFQUpuAEMAiAEJt$%AEJV9(<i9PFu"+SfZD>d9$#5u8'&m`j\2&P_0Q7,S2>oA*&`JkS.:4nS-='[Eu*DbbUGZ1bRJhIO?#<+OZDV0NOe"g"NHrHFrGG>%8/PiS(^X]r=^e3_Vm`6Q2cu+H0rM&P0t.c"8!mN:R>WaHQ[gc&)'-Sa2?Lac%YDRQlE2,Dgr_qd^te3I"Mieb(lU,W)@%M/XU(%2%5Ae)p%Hu!;DUm^hXfbOZbH:cS,(-rOp_[@UA\/FYDKW](?I%7cIC[o'(gh/<5/rpnh6I-M>@!9iQs3^S^mA77O7D=4_IIi$eL`k-%3D8]!j]7]mi8n#"@ski;/N\?jebBtgDIksT^>/!o7!uP1i&JC)C2=krcK[H8\^ct$n8^#e&b'fkIj.EiDC%!fQWqjji8n#$+F#n^%lh':>R36mfQ1.m_DUem,QWjWDnE&5\Td8T([=7&qejRRDEpN-aP42[Z-SK+HS\3aXfn1reEdg_iDVZ=*1B&#K#@DA6hSGO_Tm,GV%<gatQ\[<Q2anIBhPF#J]$(-Bq(!pBUIkCY,1B&"+LJ@d@F=8s(\%iJ\DCqgE9__]+@!ju8lN$(U@eJ!)J!8teg9MHZ0.Hpe+BVrf%.fs'5IS9"fjXdNtQeR=Lp#S)lYNa5I8p^8Q)f?_Or#6"VqJoda@<oDC86B6EdQ2e:9C)63[cU,DnS]CSe!JerFdJ>BPI4''^NG<p%N8N>MH+Ao2=C,ki'UG*?$;HkGJ*RRj.K<Ed3k>E,9?+_<c6_H,L*N,.McFloEa-B@B"l$2gu?LoDff7\@MCWYhc9q9'E2ik$q^6'%"MsYL)c<iPgpT8$jSK_>aiePlD/A?Q7)D92>L@%IDlp\-L=X?Ss0ar'AGk$/aieOjoD5gUGd:lX>9VU]b\Vu79?P"\5sepr,<j\F%gCbUobADr.>O7?3,iRVj8!7Cp.k4^Xrf+g2!cqQhd$!s<EbEYb(eV9Lct5lE2dt;,EgG:mbAF0;R/-_^FL%>(D]E#7QeR27ZGXH9%Wb-m5QV`C&Z`Ho.DC7E0QeU2le!JfrNaoC[#-uoh7^C\fdT\L+*V5L9ra"EG*Ib'So]>ecOW8P"\9HS4I`9t"hmH&Wk4\N+4pC(l%=]2^'G?@adpid$BG5/2>':?,+:1.rU(Ia_G`C8J>hh=JOinkCU$dA#)bR)Kr==5f3'++icm6nekF8Ko!1Z@5&5I88B6[WKuJ!]rS%#60_HRJm)43/"(Z<n5=8=]Hh&[hB"ibO$!a9O@/`\c;Nbmsge1+-o\o\"#DPNsTmpocFn1rl`%jAF:>]UWe.3:d\kjABpm+b^!IQ%UVL.6)Fjhj)PtLTF0-R!ZTb/SFB"WCJnR/Rh?o(),Nau32hANZb,iB`9,3r1>iUot^0E28=cSlY!hJG/q>DZjp())W*3j)Vk,;$*%^`8UO"dlngbGVtsmQUC,W.HG3**$VTR,_m\J2p@?'ObnLgY(tTY6SL=q>DG[2=DU'>k@A,bVd/._uBF_+Qg8E%q;\gqa/MLmp:g\%me8LJRJVaN+Qg7h@6%lTXjYH;o3UXbC!?5oLZOJ?Q`&f$GqVur%[l4(H!m7=;`_;@MaQX?^gK05Y/@1mGAeGfZg%:Nm2"Dbb_[s0%bdgLp13`*lc-^[Gj2MP?j2,9LFUMk;k3f@CI5^Hn&\5+[R<OR#1$6&.!QJAG-bu*J:=PZs;?RhXf,i5MZ;d6m,\kPGb?Zjb](Q-F%gq@""cR.R<Y&(R/Y&'Dl]/??<=89ZMF4Xo2n$D77lnHN9Mi0X\MJE9]ZWL4<Y.03/F%`Z-A*uqpT4)EW=V[bf[q$CLbZTV!0kV)u%`gdc?)KRL^,r'U<ml?PCG8Oa"F$79F$?HuM9$CFH.PYSD^W)e)%?7paf3f'lA'P=7`n]L$6Ho8dOI3A!<+=-NIZ6?\q).;8VMWBa%Q(fID.lVRX4)QId>Tj8*ju.**`8"s,,;1tp.kbPgIXJ[U$I0"Mi<(F@gos$c?d>b_ICWelVSITSI"@V'5%!g@#0$B,En(IiIJL,(%'45WRn-Lc2NeP.$YjNQ=DHP^$0;g?Q0/kG[a-Ujo6=6kqJ,jZ.>#'UYiBp+CmZfG+?d@)FI5rB2qJn]BjQ.rIe<fdCUG'+G;rQi>%d$0m'6;q3.iMT/3.p?;%\UsL.QYZN?k]0^5_TRd(_93RYDl"t5+M:rFq;C?;U#b<_%*?]g(t+a$!oImFr7p--:B0\aiN-f2R'Wr$%@'5<4!-?^c$HuX3.55C6UG,c*4bU@4lljRf@LlmB`(=B4`(=C_LQfRp%k!&kr=FZC+%-`_KK9H]5)C!9%!<9HG((pVSCQj(F%RSU%F#uTB^mm(l^mpMt_VDs<$ntb54FjsDj8mI>+>5&'WsBBSh!0Lu@*TL6Kt5a>F+h*S#8=u0l@TCODD`7tQs5b3'jsdZ8RS^rG6i8n%]Ntd(MLW+i*RbC)c6u7mc?aMb3MRjR3M0=ZEs90;ln@8hBm60WF$?cQk'18_bc*$?bS`DibZR$10PBd__OOe"($<<H+Qi;W,j'Dj%]YYY3;AJ>+@hn-R[NWljBN(;id8kr]@(SbL@I-;(q.S6EKC"\e1LH?51[;!Y*&j]*F53!Hbj!'Zo!.2md2h,`C3Kp_'OpLl5D>Kb%"r(O,)c2>ND?.Tp=H^Ok=H^Ok`SZrJis$3,Y39s=F1D<?R,\AnbS?]:YWJ_t@<YCr6Hk/M;jcUs6=Pu4$Agd!Yn1s\B+T-/bse!%%>q<c3kZSS\nD=R-=!Th_3@-_t6_\@>LPT#f3CpeLbX%+$@P4HY&`t4TMD,9Of'Nt#XP4c&=Wup:Rh]A7W,i5c7@cf5/*\+k*8a.-%k#CLTk4gP90unK8LcN2-6Hnt*<+9`O71nZ!8J1)?Ooii^Os8+)&qr=MU+jVIMD-uE+Y^rq.)9)*V8+)B6",d.<+2s"0o.hZ;2Mj*%BGFqc9^N?%jrhmJ0Gi-;&9D5oIl_&!U&=/2\[ZPWWJ*@^Zp1iMp[@?e,0YNf?*<]X\jK9k"*?OM<9<3[T7_b(UfMRtjKPZ-[=!qi%5g1]1-WUHWLY#OJ3U!]IbCpEV]Gu#qiT6`M$82W)<d;1%@H_`$XAtSp*EI-iHtQHG':]/k/)VD\@Ge'-'l`T7\DG$3ODkAnM_<%E%;O8ol>]_uDOh;ZXW:4i_+a?$-=*Zgdf?2:u():*b%'Sl8\OArRit`A8:5!Mj?9YUDj[A;>/lrTFE4LSIJ]mT^'jQdR<,aieLG!43%Y:aH[0/)KU]^g(S@tg8eod[ToY#jTDnDFX,#>GFV=(jXB\Mot;rZL0W0?<k[jUff2jVXQ&*9^LP3?`g$3?RPeF2b0FoYnV'0ZUtd%0ZV7l0ZVNOk1h[gQpYd-R.EVI0LsbH0]uBJ$?JXr6^YIr0RR)X\\hMf@IBM\)SRf?gu/;:_V?kA3db.b\\gp#`8!(C5CE?'bV;;;%\X2?/Qn,H_`8&Q+*VRPK+Qd!j%qEn`>@XgTG9Cs)r$$3r!(>ss!Jntq!YCdk"X#Ru3@ZfIRYAnSk,?F-61A:E$A+%t`G=Gm(L#^`%3F3INF1s2)jp:$:k'U<fb_bG(HNSd#R1mc]Qu`R%@u`dN+u*_L0/6P(][cG3nlE@Q4PcN,#5o0U7f<s@LA_a+L!PC=.t$2cJ)&B+%rc148k'XL+bjf:BQn+gN`*<?9+Qa$0#;O8]nNtH>AmAf*1ZK*h1Xc61&9ChABZsW$K/%!r43$'Ad;$m.@&Yli7K4mXgjSY#g",aT%4>i52qtnItkRTq[fcL=Y[tFjC7@CLA7qKuG99m'D0r)rqG,[7+5JQ::b08[,?cJTEkHkpZcJ4oCQXt]r;G>@9<4=O(!2iifS,kS[%a#qO%Xu=;4B(?q%3QI8"b\rMeb@Iu#5"EusC!C7MT\mWDcKAeh7JPWdT1)0>&Gf<?Z-ASI!hE)F\IMHT^UXhnK7EJk#@/'F/q#J,%899Ib7%0;>"Ics?X0f#)fOrR$Kq:VPWdm]_QJa:<=oYHX7ffR8S0^`nF-Is7bZU=:1M9jhd%"R&d%#5N6?<k-lc`K\W\\:MP0TRd%8ih#/.1+7%4t8C%q5D^]KhFaRf(BEq=]$Y*B/,UsSAe/gF&\RebZSH`1hUqEd%&)T8967_897h&,0^jrE2TnpEM,<H!'*'rI31[j%rTU5o+`i>m7%)L5:mn(d<Fi8rL*1P+2[#N^eIn:VMH+1^nIT663*S&J91b_tSA^?.S7P\MF4a\@Eu)B."T?<FR`O8WKn(E305Frm%k/7lujpIEq$1sQP(FRSukNl,sa:\%g-uoIhKil,&oU"+6+EOa2X-dPH?PLlL#l;a@fc3;-ko/UgqY_,#,9(`Y::JYQ/@LhHnBZ+V%rFLg;-d_=[s6Mrtd#5ob$1o%X!=-tY<o%ctrO$tU]A;RqaU.UV2KAlt[JRYu"T!g.k'P2VoU"[MS3Rm,j8f$L+9?$@A]68Lcu6jB%reR(0Ip'b6&bMDi]Gs5P@7U;Kr?706ln?$'bO.XSEWZ2.;COB!s2YN=i]hGbrDbtc`U7bX+EKIK\W+5'fjB]DGm+(X,3Q_28'kVp%K7SMsbYR?#jq76P7D]m_0<ZhE*:Is)3V=AO\`0&dbZRUj1AC?s5j!rH[b;hT[+ZT<"Yt;:j4DsB<B+@V,'-fg0`N`Ih#65>BA8m$%EG[+FMq>Dl?dI%eR1kERR1iCqR9R<^QoW%bR5nD-S@KTISGtL$)L".rY:X>KMp;jYgs'-MJ"*b84)C>b2J)'0p(,I((!=am$T*("%EI@a;d+e_5Y-T_LAhH$jg_C";T,MG3Teb6Q'R2Fc)JSWj1\lf%?_)*idbO5(c@;4uo.-KVO%e[2deOMAj_eQa-0=TtGKk]ggeuM.%mS=.-f)6a\Un^#mZW*M(F<\s]Kn`7ZGsONck!V:njqc.HOld#3M);[iaJJ=;fUb?LbF9u:mAVR*Dd;U?GFqHJK`FQ1>Mf!4/5@fU%L$-XK8;HTSeY_h`.8&E)J*:j,rGfA(X]Z!92f$_UEdt$u7ETM6ShJ):OldEbO&0m*fM\NU6B4CW/]KSCF#'O^F,L/BdbNi^!Rfbt%Mha-uBJgsX/VZ8^F,P#Je6GjEZ0%?]kb[pad&'odMm-Ns475@YL8A:)WB=OlW0-5.ipW`5HncmuRTl"IT]VPLnu_W+*CrZ+(ahVo%.B"H8/VWUcj`s^'U#m+N^WkW>g,?S'VTcEEfW1_.(=Bm"G[<)T897F4!"Z[;7%.>;$[C#u_<6h\Y>BdAqA58DW4AboJ][`rlj>VZ%&8iZ9($cTKY#ql(F,Of[:ijU*Kpl5)_4]p+f2&(%()B`.jq_5<Uq&pf&8H*&=TrP8:)7TIE3`;]MhW"sguA/<eD0$b%+O'A$jSZA%['lXi)GqL(>iBCjk*dP(e6J3uJspJVhB:'#=)T;-2>tHaF3XBJ:ijnCS5=8q\rAT!>i:GrVgSq1f5qh&k*k6Oe6LHJLRQ]5"dNli%EI@[NCUN:3Vi*Fa>VQ;LCVVi1F3Up$CTb4(KJhBR`j"SD$VO<;`TMrDC[.!`F3VZNXLTZXQF+Cl^//mQn7>2gRqknuF01O98c,!E%%b=lnJ?e7*&3JNLTn1&BRYt6TF)o*+F0-!fh>VHhAnod%RPnQ3M_*KCVmpk*nScQbK<D_(1[f7>QbhgQb@"_!3lG-Ac)!.r\Q280%jSd?r19`dP@][+@jL/$Z2pEJH\`+N;br%gmW4>586d<$aRPNH!1[N)L.jQn&>U's&RVVZGs3m:H^DRAgbnW5VCT\6j6d7L+A#QpW%=FP]%em/*(2:k%$k*dGLem'.F]jo<p2j99i1,6&rT&lb00o7d>$=,U^r\h:*_<)*j*,MbqCBp=ZcuZG%2RpN<k*j+FfNdC._<)ZJ%Che%9J/iFoAu"OM)"u#K?0s:d(iHMH-a2UnRXmQUgeCPiT+PtD'n@sm>VhnjRsQW'f%ENBggZZ;6M2YtDlYfWWILBbhS(T">]HkH%kM#4':[2;kCV[KhH1,aYh(qHh.k3I:>hcpc&G).J.aAbm)f`$kiJ9JF9H?m=m+hH!F,dq7N]G_HQ&I`T2XYq9\Rp!sF0<&r)0;s#%*)^kG]kpLcG;qnOg;]H]3nNN)gM`!2f/C>_I(@8mb)`1&So<n!F3bPCY*$SOc4rYcFKYG;*C/eVBas?4TuKsm)QUWGF%%/USSMgu%TQBR=B0HQ:#;`PgN]Pe5Ld:-lN\9U%!R=R*RTU9g>]Z)FF\W2_FKV#lJ^1s<d2grub\i<3*d+Wr@iTYe<B]W;4p:.U488u;3bK,k%>V#YRnsUo;K0%Tud9u*.c;`u\O^C-!\bA"nK.pNrmk]*hZ'DFPf8@.?SG><L<hO`l$8`8`<hT75QWp-Yq9,]u-^p_j=5/8fO8OUp%c8D/d=-;X?+MEXh:KrtDQe[3;c(k.NBqB6%q7je[o%\R2rUH.kp=F?r2Z)MrT*kYf:![W<rPn"-5^P<QNr>0=K>*]S#CS</87RO#%QSj<IQ8O293WlYlcjG\Tg)i-/[(iuQom`GXcWJ!GR\h/$gj@f$kN4p9n%VfT-U7@^[dptS>M/kgs+\</$YX]t".WGU@e7?UqE]Su%]oE$RqcJ?NPC)WA]smNu$8Qt\rU4K$m/Fc/nV7W1J(XbhPjJb'e[F$-15-q!]f/)Lr/4^CmJm1._'oMupSRSJ.@'<#cC&e\]%Vft%s)LG7cG-chHnI>fF8hFa5_JL<NW,;ULQcAZIJgJF'8*H?Oc.T"[l$@9q[#?F'#k4XRlCDp'ceI]hV71G@a@]"m_/#KF+SK*=5)jK%^hp?k-t,\f8e^E9@Eh(#hqBtP-VHsRZuu6J,4"r(g@FtpOOH7?R\T@mq9p='mfn91_\W5,7rIdg-^n(^_M:d=oA2AQVhQNG!,>_=%!]it7)KbFblPD`TIrX^rkD`206<q@_8Qa]6KuK1L]@&V7PPsPJ^jFh+2K*GR)R@d:6MK=po""ZfS9ANY]cj:"]6S=ae)mcLbNJF1%k6+%e>O4#X,THi0Dqi"q\S(W?$jK&mhUM-G`4<!ug2_T3R8-9Jc-$%cHP:lMVR5mV@Ih_%#f(dks5\7MTXtB=Rs>Cj2NAXaIAbl/%paQC[pd,r"o\7]=qdS%C^A>IFIeF;%nV\K<r1Cb'`ufg0rGTFLiSQispRdnoqYK[tJ+Lq:hgY@r0E187n5nNGpA5q\r:%nus5c3>%oXbW`oBTc^o8eCpiP/]k]2$oUr_NO\pV2,?[qtI+J*O5Pq7j8JTE"P^^Amq?Q_X;mYCH/E%mU*U07WMQs7e8)rQY($IXR4Fq;?[)%qtKj[bO9rYnb_dHO8b34rr:M/]tM2[j]=\D`F#bIn<^ocVn`6-hnJpFci<pDTDe-VI/U*arq;,NJ,San5CE.)hgPJ'^A79kDgld+%\8Qindsq2_Wuo(Oh2gInnBHaGrU]d`HF<\C:\+%JrTl3;p](*Trr^(KWV?~>%AI9_PrivateDataEnd