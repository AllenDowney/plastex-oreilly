%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: logisticscaling.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 273 193
%%HiResBoundingBox: 0 0 272.7012 192.3125
%%CropBox: 0 0 272.7012 192.3125
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 7402 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0DFF52A87DA87D7D7DA87D7D7DA87D7D7DA87D8452FD047DA87D%7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D%7E527D7DA87D7D7DA87D7D7DA87D7D7DA87D7EFD057DA87D7D7DA87D7D7D%A87D7D7DA87D7D53A87D7D7DA87D7D7DA87D7D7DA87D7D7DA852FD0EFFA8%84FD12FFA8FD11FFA8FD25FFA8FD24FF84A8FD0EFF7DFFFFFF53A8FFFFA8%FFFFA8A8FD63FF7DFD0EFFA87DFFFF537D7D525252277D2752275952FD60%FF7DA8FD0EFF7DFFFFA8527D275252A85252597D5252A8FD5FFF7DFD0CFF%A8FFA87DFFFFFFA8A8FD04FF7DFFFFA87D52FD60FF7DA8FD09FF7D7D52A8%FF7DFFFFA852847DA87DA87DA87D5252A8A8FFA8FD0FFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA9FD13FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFAFFFA8FF7DFD0AFF52%522EA8A87DA8FF527D7D27275227272752272727A8FFA8A8FFA8FFA8FFA8%FFA8FFA8A87DFD2DA87DA87DA87D847DA87DA87DA884A87DA87DA87EA87D%A87DA8A8A87DA87DA8A8A87DA87D7DA8FD09FFA8A87DFFFF7DFFFFFF7DA8%7D7D52A87DA87DA8527DFD0DFFA8A8FD27FFA8FFFFFFA8FFA8FD23FF7DFD%0EFFA87EFFFFA8A8A8FFFFA8FFA8A8A8FFA8A8FFFFFFA9FD07FFA8A8FD20%FFA8FFA8A8A8FFA8FD25FFAFFFA8FFFFA8FF7DA8FD0EFF7DFFFF7D27FFFF%7DA8FF527D52A9FD0DFFA8FD20FFA8FFA8FD25FFA8FD0BFF7DFD0EFFA87D%FFFF7D527DFF2E7DFF7D5252A8FD0CFFA8A8FD1DFFA8A8A8FD21FFA8FFFF%A8A8FFA8FFA8FD0AFF7DA8FD0EFF7DFD07FFA8FFFFFFA8FD0DFFA8FD1DFF%A8FD25FFA8FD11FF7DFD0EFFA87DFD18FFA8FD1BFFA8A8FD22FFA8FFA8FD%14FF7DA8FD0EFF7DFD11FFA9FD21FFA8FD21FFA8FD19FF7DFD0EFFA87DFD%12FFA8FD05FFA8FD19FF7DFD1FFFA8A8A8FD1AFF7DA8FD0EFF7DFD11FFA8%FD1FFFA8FD1DFFA8FFA8FD1DFF7DFD0EFFA87EFD12FFA9FD05FFA8FD17FF%A8FD1CFFA8A8FD20FF7EA8FD0EFF7DFD17FFA8FD17FFA8FD1BFFA8FD23FF%7DFD0EFFA87DFD17FFA8A8FD14FFA8A8FD1AFFA8A8FFA8FD22FF7DA8FD0A%FFA87DFFFF7DFD17FFA8FD15FFA8FD19FFA8FD27FF7DFD0BFF7D27FFA87D%A8FD15FFAFA8FD14FFA8FD41FFA87DA8FD0AFF7D52A8FF7DFD11FFA8FD05%FFA8FD13FFA8FD19FFA8FD29FF7DFD0CFFA8FFA87EFD12FFA8FFFFFFA8FD%13FFA8FD17FFA8A8FD2BFF7EA8FD0EFF7DFD29FFA8FD17FFA8FD2DFF7DFD%0EFFA87EFD12FFA8FFFFFFA8FD12FFA8FD16FFA8FD2EFF7EA8FD0EFF7DFD%3FFFA8FD2FFF7DFD0EFFA87DFD16FFA8FD10FFA9A8FD14FFA9A8FD30FF7D%A8FFFFA8FD0BFF7DFD27FFA8FD15FFA9FD31FF7DFFFF7D277DFD09FFA87D%FD16FFA8FD0FFFA8FD14FFA8A8FD32FF7DA8FF7D277DFD0AFF7DFD11FFA8%FFFFFFA8FD23FFA8FD35FF7DFFFF525252FD09FFA87DFD12FFA8FFFFA8A8%FD0EFFA8FD12FFA8FFA8FD34FF7DA8FF7D52A8FD0AFF7DFD11FFA8FFFFFF%A8FD0FFFA8FD49FF7DFFFF527D7DFD09FFA87EFD15FFA8A8FD0DFFA8FD11%FFA8FD38FF7EA8FF5252A8FD0AFF7DFD15FFA8FD0DFFA8FD4BFF7DFFFFA8%A8A8FD06FF7D27FFA87DFD14FFA8AFFD1EFFA8FD3AFF7DA8FF7D2EA8FD06%FF5252FFFF53FD15FFA8FD1DFFA8FD3BFF59FFFF7D527EFD06FFA87DFFA8%7DFD14FFA8FD0DFFA8FD0FFFA8FD3CFF7DA8FFA852A8FD0AFF7DFD11FFA8%FFFFFFA8FD0BFFA8FD0FFFA8FD3DFF7DFFFF52277DFD09FFA87DFD12FFA8%FFA8FD0CFFAFFD0EFFA8FD3EFF7DA8FF5953A8FD0AFF7DFD2FFFA8FD3FFF%7DFFFF7D527DFD09FFA87EFD14FFA8FD0BFFA8FD0DFFA8FD40FF7EA8FF7D%F87DFD0AFF7DFD1FFFA8FD4FFF7DFFFF52527DFD09FFA87DFD14FFA8FD09%FFA8A8FD0CFFA8FD42FF7DA8FFA8527DFD0AFF7DFD2BFFA8FD43FF7DFFFF%7D277DFD09FFA87DFD14FFA8FD09FFA8FD0BFFA8FD44FF7DA8FF7D5252A8%FD09FF7DFD11FFA8FD0BFFA8FD0BFFA8FD45FF7DFFFF7D597DFD09FFA87D%FD12FFA8FFA8FD07FFA8FD0BFFA8FD46FF7DA8FF7D2784FD0AFF7DFD1CFF%A9FD0AFFA8FD47FF7DFFFF287DFD08FF7DFFA884FD14FFA8FD07FFA8FD08%FFA8A8FD48FF84A8FF5252A8FD06FF7D27A8FF7DFD13FFA8FD07FFA8FD53%FF7DFFFFA8A8A8FD06FFA827A8A87DA8FD12FFA8A8FD05FFA8FD09FFA8FD%49FFA87DA8FD0EFF7DFD13FFA8FD5BFF7DFD0EFFA87DFD13FFA8A8FD05FF%A8FD06FFA8A8FD4CFF7DA8FD0EFF7DFD13FFA8FD05FFA8FD55FF7DFD0EFF%A87DFD12FFA8FD05FFA8FD07FFA8FD4EFF7DA8FD0EFF7DFD11FFA8FFA8FD%09FFA8FD51FF7DFD0EFFA87EFD12FFA8FD09FFA8FD52FF7EA8FD0EFF7DFD%13FFA8FFFFFFA8FD57FF7DFD0EFFA87DFD12FFA8FFFFFFA8FFFFFFA8FD54%FF7DA8FD0EFF7DFD6FFF7DFD0EFFA87DFD12FFA8FFA8FFFFFFA8FD56FF7D%A8FD0EFF7DFD11FFA8FD5DFF7DFD0CFFA8FFA87DFD11FFA8A8FFA8A8FD59%FF7DA8FD0AFF7D52A8FF7DFD12FFA8A8FD11FFA8A8FFA87DA8FFA8A8A87D%AFFFFFA8FFA8A8FFA87DFD05FF84A8FD05FFA87DFD27FF7DFD0BFFA852FF%A87DA8FFA8FFA8FFA8FFAFFFA8FFA8FFA8FFAFA87DFFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFFFA8F8522727275227FFFD04522752537D2752275252%52277DA82727A8FFA87DFF7D52A8FD25FFA87DA8FD0AFF7D7DFFFF7DFD11%FF7DFD13FFA828845252522727FF7DA8A8FD0452275227FD0452537DFF52%5252A87D52A85352FD27FF7DFD0EFFA87DFD0FFFFD04A8FD13FFA8FFA8FF%A8FFA8FD05FF52A8A8FFFFFFA8FFA8FFA8FFFFFFA8527DFFA8FFA8A8A8FD%26FF7DA8FD0EFF7DFD0DFFA8FFA8FFA8FD4BFFA8FFA8FD0FFF7DFD0EFFA8%7DFD0AFFA8A8FFFFA8FFA9A8FD44FF7D7DFFA8527DA85253527DFD0EFF7D%A8FD0EFF7DFD08FFAFFD04FFA8FFFFFFA8FD44FFA8527D2E7D52A8525253%7DFFFFA8FFA8FFA8FFA8FFA8FFFFFF7DFD0EFFA87DFD06FFA8FFA8FFFFFF%A8FFFFFFA8A8A8FD43FFA8A87D7D7DA8FD047DA8FFA8FFA8FFA8FFA8FFA8%FD04FF7DA8FD0EFF7DFD0BFFA8FD05FFA8FD44FFA8A8FFFFA8A8FFA8FF7D%FD0FFF7DFD0EFFA87DFFFFA8FD06FFA8A8FD05FFA8FFA8FD43FF7D7DA87D%527DFF52527D7DFFA8FFA8FFA8FFA8AFA8FD04FF7EA8FD0EFF7DFD07FFA8%FD07FFA8FD46FFA8527D527D52FFA87D52A8FD0EFF7DFD0EFFA87DFD04FF%A8A8A8FD08FFA8A8FD45FF7DA8A8FF7D7DA87D7D7DA8FD0EFF7DA8FD0EFF%7DFFFFFFA8FD0BFFA8FD46FFA852FF7D7D7DA8525252FD0FFF7DFD0EFFA8%7DA8FFA8FD0BFFA8FD47FF7DFD05527D7D52527DFFA8FFA8FFFFAFFFFFA8%FD04FF7DA8FD0EFF7DFD0DFFA8FFFFFFA8FD25FFAFFD21FFA8FFFFFFA8FF%A8FD0FFF7DFD0BFF7D52FFA87DFD0AA87DA87DA8A8A9A87D7DFFA8A8A8A9%A8A8A8A9A8A8A8A9A8A8A8FF7DA8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8%A87DA8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A87DFFA8A8A8A9A8A8A8A9%A8A8A8FFA8AFA8FF7DA8A8FFA8A8A8A9A8A8A8A9A8A8A8A9A8A8A87DA8FD%0AFF7D52A8FF7D7D7DA87D7E7DA87D7E7D847DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87D847DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7E7DFD%0BFFA87DFD15FFA8FD5DFFA8FD0EFF527DFD10FFA8527DFD10FFA852FD11%FF7D7DFD11FF527DFD10FFA827FD10FFA8527D52FD0CFF7D527DFD10FF7D%527DFD10FF5252A8FD0FFFA82728FD10FFA8277DFD10FF59277DFD0FFFA8%525252FD0CFFA852A8FD10FFA97DA8FD10FF7D7DFD11FFA8A8FD11FF7DA8%FD11FF7DAFFD10FFA8A87DFDC3FFA8FD7EFF2852527D7DA87DFD79FF7D7D%2752522827A8FD78FFA8A87DA87D7D52FDFCFFFD3AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:56:33+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T14:24:21+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T14:24:21+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>184</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqw7TfK3lrUvM&#xA;Hmm51LSrO+uDqUSia5t4pnCjTLKihnVjTqaYqktzf/lZaNfT3XlCOPRrCWW2m1xdLt57UzwSCGSJ&#xA;VgEtzVZSUq0IUkEA4qpxeY/yElu4LaPT7BmufQMUv6Gl9Cl0IDEWuPq3ooD9cgqWccS6hqE4qh7D&#xA;zf8AkDeW8U66ZYxJcB3thJpBrKqTTQJw4QOC8rWshji/vWA+xXbFWR2Xl38s/MHluXUdK0Owe0uE&#xA;uI45RpyQyq8TPDIPTlijkV0kRhRlG4xVNIPy98jRQRxf4f01/TULzaztyx4ilSeHU4qv/wABeRv+&#xA;pd0z/pCt/wDmjFXf4C8jf9S7pn/SFb/80Yq7/AXkb/qXdM/6Qrf/AJoxVRuPy58jTS20n6B05Pq8&#xA;hl4rZ24D1jePi/wbj95y+YGKq3+AvI3/AFLumf8ASFb/APNGKu/wF5G/6l3TP+kK3/5oxV3+AvI3&#xA;/Uu6Z/0hW/8AzRirv8BeRv8AqXdM/wCkK3/5oxVQi/LnyNHdTz/oHTm9fh+7aztyqcBT4Rw2r3xV&#xA;X/wF5G/6l3TP+kK3/wCaMVd/gLyN/wBS7pn/AEhW/wDzRirv8BeRv+pd0z/pCt/+aMVd/gLyN/1L&#xA;umf9IVv/AM0Yqo2X5c+RrWyt7b9A6dN6EaRetJZ25d+CheTHhuTSpxVW/wABeRv+pd0z/pCt/wDm&#xA;jFXf4C8jf9S7pn/SFb/80Yq7/AXkb/qXdM/6Qrf/AJoxVQuvy58jXHo/7gdOi9KVZfgs7ccuNfhb&#xA;4Psnviqv/gLyN/1Lumf9IVv/AM0Yq7/AXkb/AKl3TP8ApCt/+aMVd/gLyN/1Lumf9IVv/wA0Yq7/&#xA;AAF5G/6l3TP+kK3/AOaMVQWgaLpGledtai0yygsYZNN0xnhtokhQsJ78ciqBRWm1cVZVirjsOlfb&#xA;FXnnl7825NX1zTtMfRXsheyy207STh5YJll1KONeEaNG4I0WUuyyUUsoHMVYKp/5evIR5j8z2hWX&#xA;1W1GNwwilMVP0ZZ9ZQvpg7dOVcVeceZ5/IzT6rqWteXGn0dtQntIjDq0sd5JqFvcxI8ltp0klrFC&#xA;7zID6sEvqMN2FHwqxzX/ADB+T1v5QvLPT9H1LT4dQsPSt71+N0zW8ltptxcJCk1+repDai0pz2Ur&#xA;8IcBlYK7z7rn5c2tvPZ6R5Xu1dGlmh1JZBRTb6rJYtNb24uVd6XOo3QUExPWnAqOMkar1b8uG0e3&#xA;/LqGHTJbi8sUN8EvZEkrcObub1Z0PO4f05JSzRl3LcKE+OKsyN1ECRxk2NP7uT5/y4q761FQHjJv&#xA;Wn7uTtt/LirT31uiNI/NURebsY5AAvWv2cVQo8xaMxAiuRMxPEJCrysT12WMMTiq4a3Zn/dd13/4&#xA;9Lrt/wA88Vd+m7KlfTuulf8AeO6/6pYq3+mrOtPTuuoH+8l13/554q1+m7Pb93db1/487rt/zyxV&#xA;36bs/wDfd10r/vHdf9UsVd+m7OtPTuv+kS67/wDPPFXfpuzrT07r/pEuu3/PPFXfpuzpX07rpX/e&#xA;O6/6pYq79N2e/wC7utqf8ed13/55Yq3+mrP/AH3dbmn+8l1/1TxVSfzFpiNxf6wjFWcK1rcg8V+0&#xA;aGPtiqj/AIv0D0xL67+kSFD+hPxLEVpXh1pjSrj5s0IBC00gEhpGTbzgNvT4apvvttjSuHmvRC0i&#xA;iSXlEGaVfq1xVApo3IentQ+ONK5fNWisoaNp5AxIX07W5ckjcgBYyTTvTpiqoPMNgWVfSvatSn+g&#xA;3lN/E+jQfTirh5i088v3V78O5/0C97bbfud/oxVo+Y9PCg+je0PT/QL2v3ejiq7/ABDYcwnpXlT3&#xA;+o3lNxXr6VMVSnQdUttR856zNbpOiJp2moRc289q1RPfnZLhImI36gUxVlGKuxVL4vL2gQ3sV9Fp&#xA;lpHewCUQXSQRrKgndpJgjheS+o7sz0O5JJxVBeXf+Ox5o/7acf8A3TLLFWAaDquj+YPNfmSHzB5b&#xA;0iGOP9IRGWaziafVYNOvmhD+vM3p8bcW8fqLJ+2Vb4FAqqgjb+Qf+Veeb/NflvyvpV5LEzXDWWoD&#xA;S7u2X6rbQj0kOmveIsaJHzWEuDzJ+yGDYqm3k220LzFrXmrTZtB0mzNk7Rx3NpY24uIXF9dW6LOZ&#xA;ROjzBdPgulqnGjp8JAVmVZ9p+jWGh+WINHsU42OnWYtoFfc8Io+ILkcak0qx7nFU1xVbNLHDE80h&#xA;4xxqXdtzRVFSdsVS+2sDdMt7qKc5jR4LZ90gHVaL9n1P5n69QDTFUyxV2KuxV2KuxV2Kqc1xFChe&#xA;RqACtACzHcDZRUncgbYqhzdXs0KyWluAGJH+ks0J402YIFdv9i3E4qqmG6aZ2a5KxEERxxooIqPt&#xA;Mzc+RB6UoPEHFVv6PiMXpvLO9W5s/rSKxb5oy0H+SKL7Yq46XprRpG1rEyRV9NWRW4k9SKg7nviq&#xA;tHBBG7yRxqjykGR1UAsR05EdcVX4q7FXYq7FVE3lsDKokEjwU9aOOsjry6VROTb/ACxVsTMXAWFy&#xA;hTmJPhAr/JRiHDfMU98VaEl4ViPoopY/vlaQ1Qe1FIY/d88VcyXhSULLGrk/uW9MkKP8oc/iP3Yq&#xA;k9kCPPWsGpNdM0yg22/f3+Kp9irsVdiqReXf+Ox5o/7acf8A3TLLFU9xV2KuxVSvK/VJ6Eg+m1Co&#xA;qfsnoPHFVXFUHqIMrW1qDtLKryU6+nF+8P0Fgqn/AFsVRmKuxV2KuxV2KuZgoLMQFAqSegGKoEXM&#xA;99Gj2DiK3LENcOhLOgA3hU0BDV2c1G2wYGuKq8FjawTSzRxgTTGsspqztvWhZqniOw6DtiqvirsV&#xA;dirsVdirmYKCzEBQKknoBiqi9z8UscUbvNEAeJVkVi3SkjAIfehNMVbC3RkqzokRjoY1UlxJXdhI&#xA;TQrTtw/piqw2Fu6w/WB9ZeHdHlox5E150oF5bbEDbtiqIxV2KuxV2KpFZ/8AKc6v/wBszTP+oi/x&#xA;VPcVdirsVSLy7/x2PNH/AG04/wDumWWKp7irsVdiqjeitnOKV/dvtXjX4T37YqrYqgwA+rsT1t7c&#xA;BKf8XueVf+RC0+nFUZirsVdirsVWySRxRtJIwSNAWd2ICqoFSST0AxVBw+pfPDdlpoLZKtFbn92z&#xA;9lkk/apT7KGn+UK7KqjsVdirsVdirsVWTTQwRPNNIsUSDk8jkKqgdyTsMVU2luHaSOJPTolYrlwr&#xA;xlj0+FXDmnfp88VaaxglZXuB67BVVg5JjJU8g3pE8A3LflSvviqIxV2KuxV2KuxV2KuxVIrP/lOd&#xA;X/7Zmmf9RF/iqe4q7FWB6vpXnmT82dH1GzknHlSK2Vb1Vn4wcxFeiQPD668maSS2I/0dz8O0kfEh&#xA;1U48vfX/APEnmenpfUv0jHyry9Xn+jLPp+zTFWSYq7FXYqo3ppZznYUjfdq0+yetMVVsVQlgQ0l7&#xA;Ku8clweDePpokTfc8bDFUXirsVdirsVQUkf16aSG4gItIHQpzJHqyL8R+Hui1WlerdthVVG4q7FX&#xA;Yq7FXYqhprtmWRbER3FxEwR0MgVUYip5kByKLvSlenzxVVWACV5WdmZwo4kngOO/wr0G569fuGKq&#xA;mKuxV2KuxV2KuxV2KuxV2Ksa0b9If411n676Xqfo7TeHo8uPH17+leXfFWS4q7FXYqkXl3/jseaP&#xA;+2nH/wB0yyxVPcVdirsVUbyv1OenX03pQVP2T23xVWxVCaVvYpJ+zOzzoO4WZ2kUH3o2+KovFXYq&#xA;7FUJdypLJ+j0d0mljLO8RAaOPpyr+yWOy/TTocVRMUUcUSRRKEjjUKiKKAKooAB7YquxV2KuxVbL&#xA;NFDE8szrHFGCzyOQqqo3JJOwGKqLrPO0sTBoIlZOEqOObjZmFKHiv7Na8uvTY4qiAAOm2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KpFZ/8pzq//bM0z/qIv8VYJ5C87eadT/MzVNN1G/aXSHXUf0dYvAsRAsr5&#xA;YFlRvq8NY+J4VE81WUluBooVesYq7FUi8u/8djzR/wBtOP8A7plliqe4q7FXYqo3lfqc9OvpvSho&#xA;fsnvtiq64nSC3lnevCJGdqdaKKmmKrLCB4LG2genOKJEanSqqAaYqr4q7FVk88VvE00zcY16nc9T&#xA;QAAbkk7ADriqnZxXEcRNxJ6kzszvSvFan4UWvZVoPfr3xVXxV2KuxVTnnSGMu1SaHii7sxVS3FR3&#xA;NAdsVWJFJI/qzE+myoVtXVKIynlUkcqty8Gptt44qr4q7FXYq7FXYq7FXYq7FXYq7FXYq7FUis/+&#xA;U51f/tmaZ/1EX+KsE/Kvyb5m0fzEb7UtBstJieykhme2tdKh/ef6NQJJYos5DyrcNxc8fT9Kv7zn&#xA;ir1jFUsn8yaNBrtvoMk5GqXKCWKARysvEiRl5yqpjQuLeUoGYFuDUrQ4qhfLv/HY80f9tOP/ALpl&#xA;liqe4q7FXYqo3gBs5wQCPTfY9PsnrTFVLV99MukH2pY2iQeLyDgg+lmAxVF4q7FXYqhnV5rwRvED&#xA;bwqsgdq/FKSeNO3wAVNe5FOmKonFXYq7FVOadYuHIMxkcIoVS257mnQADqcVWQ2xBWW4KTXK8wkw&#xA;QKVRyCVXdiB8K133piqvirsVdirsVdirsVdirsVdirsVdirsVdiqRWf/ACnOr/8AbM0z/qIv8VeX&#xA;/lNrPlC9/NLX49FlgubiT9I3DzxtZTSFXvkYs08Wn20rpIZOUfG9nULQPQhaKvbcVY5eeQtEuvO1&#xA;n5xdpV1WyhFuir6XpsqrMq8mMZmG109VWQK3wlgSq0Va8vWNqfMnme9Kf6SuoxxiSp+z+jLPalad&#xA;/DFWSYq7FXYqo3ppZzmtP3b705U+E9u+KqWqf7zxjubi3oPGkyE/gK4qi8VdiqjeTvBbPJGhkkAp&#xA;FGK/E7HioJANAWIqeg6nbFXWdqLa3WLkXapaSQ7F3clnag6VY9O2Kq2KuxVRuJnRSsKrLclaxws4&#xA;Su4FSaMQoruQD8j0xVdFCI2kbk7GVuTcmJA2Aoo6KKDoPn1xVUxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2Ksa0awtLLzrrMdrH6aPp2muwqzVYz34r8RPhirzn8p38wn8xtQhn0vVLbQYYL86fd6jHr&#xA;QUrJeRmIc9SuJYzI8YLnjCjEdd6gKva8VdiqReXf+Ox5o/7acf8A3TLLFU9xV2KuxVSvK/VJ6Ak+&#xA;m1ApofsnofHFVG9/3p0//jO3/JiXFUXirsVQqMLi9LpLWK05RtGKisrBWqT0PFWp8yfDFUVirsVU&#xA;ppijJGobnLyCOELIpCk1cilBt474q6CAxqrSFZLkoqSzhQpfjUjp2qxIHauKquKuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KpFZ/8AKc6v/wBszTP+oi/xV5T5Fg1C0/OTWbz6nDfu0moW88Gnjy/B&#xA;NZxz30TRz3JtrmO8uFaOPk5niEiHYK7MTir3PFXYqkXl3/jseaP+2nH/AN0yyxVPcVdirsVUb6n1&#xA;K4rSnpvWvT7J64qpTb6paqd1EU0gHbkDGob58XYfTiqLxVSu5J47eRrdBJcUIhQmgLnpU+Hj7Yq3&#xA;BCsMQQU6lmIFKsxLM1P8piTiqpiqjPO68kgVZrheBMRcLRHYjk2zED4WptvTFV0MCRc+JY+o5diz&#xA;M27eHImg8ANsVVMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqRWf/Kc6v8A9szTP+oi/wAV&#xA;Yd+VHl7X9P1G8ufMWk6lHqMweWLUb26s5beM3QhlvIYba0uZI4RJdq8ilIFqoHNuWKvTsVYb5h88&#xA;ajpv5g+WvLMGnSvYauZvr2ptDO0SkW80kMUMiD0/U5wVk5H4UoaUJKqo7y9eQjzH5ntCsvqtqMbh&#xA;hFKYqfoyz6yhfTB26cq4qyTFXYq7FVG8NLOc+Eb9uX7J7d8VUh8erNX/AHRAvCnf13PKv/IhafTi&#xA;qLxVBxend3nripSzaSKPcFGcgB3FO6fFH7fEMVRmKqM0x5m3iPG4aNnR2RnjWmwL0K9z9nkCd6dD&#xA;iq+KFYxXZpCAJJaAM5UUq1AMVX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxvR72G78&#xA;7ay8SyqE03TUImhlgNRPfnZZVQkb9RtirJMVdirsVSLy7/x2PNH/AG04/wDumWWKp7irsVdiqleA&#xA;m0nArUxtTjsfsnp74qo21X1C8k6BPSt6ePBTLy/5LU+jFVS8ldIxHEyrcTVSDl05UJr0P2QCcVVY&#xA;04Iq1LUFCxpUnxNKbnFVKeSR2e2hLRymPkLgoWRamg3NFZtjt279RVVfbQCCBIg7ycBvJIxd2PUk&#xA;k/7XhiqpirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSKz/AOU51f8A7Zmmf9RF/iqe&#xA;4q7FXYqkXl3/AI7Hmj/tpx/90yyxVPcVdirsVUb4A2VwCAQY3qCaD7J6ntiqlp/xNdzD7Mtw3Edx&#xA;6QWE1/2UROKrbF1vCNQMYAPNLOSpJMD8TyI6fGych/k071GKqiT/AFpY3tmR7OQOJJgzBjQ8R6dA&#xA;Nia/Fy7bVrUKq0MMcEKQxDjHGoVBUnYCnU7nFV+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KpFZ/wDKc6v/ANszTP8AqIv8VT3FXYq7FUi8u/8AHY80f9tOP/umWWKp7irsVdiqjeU+&#xA;pz1NB6b1NK0+E9hiqVQXSPZ2yrMkcc0omuQalwLlzKkKim7MWAb/ACa+IwqmaRzSlHlDQCJ24RI4&#xA;Idd1UvQDtvxrgVEYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkVn/ynOr/&#xA;APbM0z/qIv8AFU9xV2KsM1XyhqN5+ZukeZVt7Q6fp9uY2ufXlW99UpcIEEZhljMNLipVJIyzUZy3&#xA;BFxVG6BHqR8x+Z3jnhWz/SUQaFoWaUt+jLLcSiVVA9uH04qyDheUH72OtDX923Xsft4q7jeUP72O&#xA;u1P3bfT+3irgt5UVljpXf923T/g8VSXzDqWqQ6TerYiKe+iiclJI3iUKFPKVeTfvFSoqFO52qMKo&#xA;3S9HfTYWigmDc+JdpA7VYAKSAZKDYdBgVGlbyppLHSu37tun/B4q4LebVlj71/dt17ft4q4pe0NJ&#xA;Y60FP3bde/7eKtTJdmGUK6lirBAqlTWhp8RbxxV4OPLX/OR8nlnSLW41K8a9+qakNQVLixilgmht&#xA;ZYdORbiMq8vrs6l2d3IajckIriqceWbH8+l83eWYNZE/+F7KK3bVZGubNy0yab6cnNo3FzKGupG5&#xA;B+Y5KrA0xVEnyp+benW99q1lq15Ne3d7dL+iopUmmjs2vJngkibUrm4sQ4jEQCpFFxjLAhnAOKpN&#xA;oet/85B32m315FFLqCyWuo2MPp/oqFY9WivJYEmh5mF/qsKQhf3lXL12ZeJCqWyaR/zk5PaWthMb&#xA;1Le3snVpIrzTllN0lg8ENJ1kSaQPPJzl9UkgryVqgHFWVWkf/OQTavavPKyafFOj3kTjSyJf9Ltl&#xA;mjQoC4tfqrTtFUiao+I14gqqfm28/M3yv5qufMzMbvygurCR7We9FvFFbvp6WkbM373jA93cF3Xg&#xA;eLRh+PxcsVZuut+cLzVtGmsdPePQL+2guL0yW0DvC0oLMjTNqFvKjKONQtpJ8z0VVCfl5a+a11XX&#xA;7zXLXUbGG7mVrG0v7uC9QL6szl4mhnlEdVkRPSWKNVVV3kbk+Ks3xV2KuxV2KuxV2KuxV2KuxVje&#xA;jpfp521kXk0U0h03TSjQxNCAvr39AQ0k1T71+jFWSYq7FXYqkXl3/jseaP8Atpx/90yyxVPGZUUs&#xA;xCqoqzHYADucVUkulkMJhRpoZgx+sIU4KB0JqwYhu3EHFUHOs/pPDK0eoXtUljtfhhRaMAjlSXbg&#xA;rDkSSxqPhFaDFVDV7RY7GY1D3d6Y0mckqrrEObpux4R+mr/DXuepJqqnOKuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KvNpPPfnDS7vV4JNFu9QiXUZf0bPdW98imz3QKp03Tr4kLPFLw5qCY+&#xA;DFjyBKqSx+afzP8A8O6sky6imrl7J4Jjpsg9CQXSrqdvAYrG6WSGOFlEMrQys3JmHPg1FU7/AC11&#xA;zz/qOsSjzBDfQ2rWrSTW19bJCtvJ6kYtVinjgt1neaBne4pUJIOICfZxVnzXlwGIFjOwBoGDQUPu&#xA;KyA4q19duf8Aq3z/APBQf9VcVVoJpJQ3OCSCnQSFDX5cGfFUns/+U51f/tmaZ/1EX+Kp7irsVdir&#xA;HdBjnfWfNiiX0421GIIyAeorfo2zqatyXwoOOKpxObK1C3d3KqmNfT+sTMF60r4KCxG9BvirRmu5&#xA;3eOKJoICm12xUPVlqpjiIf7Pf1Au/Y4qvs7G3tEZYgS7nlNM55SSN05Ox3J/UNhtiqFvz61xIm3p&#xA;2lu8jlhVfUlBVKAVrxRX5D/KHXsqmWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvLrfW&#xA;PzGiutdGhWo1CzOrXBt5BJbaqYVUmGS2YS6ppxhIkhMvp8jwWRU4gqwVVJNJv/NY8m+dEl1mSO5i&#xA;s5YRq51Wymig1iBWE1JpLiX6nFcvLGIoyE9MK1fTYqSqn/5fXur3HnrWI59WW9hjileeJdRhu42W&#xA;aZHsGgtUmla2EVtySUmNPUYhhy64q9F4ah8f76Kh/uv3Tbb/ALX7z4tvlirmj1H00CzwiQV5sYWI&#xA;PhQeqKfecVVUEwdzI6shP7sKpUgf5RLNX7hiqS2f/Kc6v/2zNM/6iL/FU9xV2KpXceZ9Dt9ft9Am&#xA;uCurXaCSCD05CpVllZQZQpiVmW2lKqzAsEagPE4ql3l9bmTzB5oKzhII9UjDxhBzZv0XZdXJI4/E&#xA;Ngta9+2Kp9bWMEA+HnI1eXqSu0rVoRsXLU6nYbYqrMyopZiFVRVmOwAHc4qgZNZtXrHYEX1wdhHC&#xA;QyKf+LZBVYx89zvxBO2KrZIvqGj3cs0hkm9OWe6mUULPwqSoJ2AAooJ2AAriqNt50nt4p0rwlRXW&#xA;vWjCoriqpirsVdiqhcXkNvNaxPXldymGKg25CJ5d/bjEcVV8VdirsVdiqhDewzXdxapX1LXh6lRt&#xA;+8HIUxVXxV2KuxV2KqFheQ31jb3sNRDdRJNGGFG4yKGFRvvQ4qr4q7FXn2oflr5hnvNSuLbzIYV1&#xA;K8a9khKX8IRyDEqq2n6hp7EC3jhT4iasrP8AtUVVAR/lld6NZC1XW42WebTIbBjZOeB0q7W6sPWA&#xA;ul9XcSLO3wmSq04cfiVTT8uPyxuPJU8ix61JeacbaO3jsisyr6kaonruJLieLnxj4j0o49j8XKgo&#xA;qzf0JeBX6xJUty50jqB/L9ilPor74q5oZC0hE7gOAFACUTbqtV/4lXFVRFKoqli5AALmlTTuaAD7&#xA;hiqRWTg+fNYTuNL0sn6bjUP6Yqn2KuxVj975L0m682WvmeWWZbu0WMC3BjEDtBHcxxSuChk5Rpfz&#xA;AUcD4tweK0VY1p915J82ed72BfLekaxai39f/E0f1W/MpRYURZWSJ1TlzZYw0xciJjwC8SVWTf8A&#xA;KvvIX/UtaV/0hW//ADRirv8AlX3kL/qWtK/6Qrf/AJoxVd/gLyN/1Lumf9IVv/zRiqC1zyt5A0nR&#xA;dQ1Wfyzp0sGn2011LHHZW5dlhjMjKo4bkhdsVSzyZpPk3zBYXUt15R0mxvLG5NrcwQw29zDy9KOd&#xA;THN6EPMGOZa/AKNUdsVZB/gLyN/1Lumf9IVv/wA0Yq7/AAF5G/6l3TP+kK3/AOaMVd/gLyN/1Lum&#xA;f9IVv/zRirGvPen+T/LWm291aeTdJ1O6nmMUVkYraCRyInk4wqIZpJpWKBEjRDu1WKoGYKslHkPy&#xA;MR/yjmmD2+p2/wDzRirv8BeRv+pd0z/pCt/+aMVd/gLyN/1Lumf9IVv/AM0Yq7/AXkb/AKl3TP8A&#xA;pCt/+aMVYlBcflfP+ZU3kWDy1pTXltYNe3Vz9XtRxlDRcbcR8OTMYpxJy6U6V+Liqy3/AAF5G/6l&#xA;3TP+kK3/AOaMVd/gLyN/1Lumf9IVv/zRirv8BeRv+pd0z/pCt/8AmjFWm8i+RFUs3l3TKKCT/oUB&#xA;2HyTFWLflwnkPznocmqL5Q0ywCSoi27WkbN6ctvFcxs3qW8BBMdwvRSp6ozqQxVZV/gLyN/1Lumf&#xA;9IVv/wA0Yq7/AAF5G/6l3TP+kK3/AOaMVd/gLyN/1Lumf9IVv/zRirFfzHh8leTtBj1OHyXp2qzy&#xA;zi3hso7WFGZvSkl+HhBO5PGIgAJ1+0VWrBVktp5N/L68tIbu20DSpbe4jWWGVbO3KsjgMrAhNwQc&#xA;VVf8BeRv+pd0z/pCt/8AmjFXf4C8jf8AUu6Z/wBIVv8A80Yq7/AXkb/qXdM/6Qrf/mjFWDXHnzQv&#xA;KOp6xY6P5RtrBrG4kGotCYbQzWtnbW9y8yiCKQSScb8ejCxBYVqVNVxV6tirsVdiqAh8v6DBq82s&#xA;w6baxaxcp6dxqSQRrcyIAo4vMF9Rh8C7E9h4Yqj8VdirsVaZVdSrAMrCjKdwQeoIxVDaXpOlaTZp&#xA;Y6VZQafZRkmO1tYkhiUseTEJGFUVJqdsVRWKuxV2KpbrXljy3rohGt6TZ6oLfkYBe28VwIy9OXD1&#xA;Vbjy4itMVTIAAUGwHQYq7FXYqkuv+cdC0C4s7fU2uUlv3Mdp6Fnd3Su4VnKc7eKVQ3BGbiTXiCeg&#xA;OKoLTPPf5bavdW91Y65pVzqD27mClxALtbdlWeVSjETIAsYeRSBTj8Q2xVP9P1HT9Rs4r3T7mK8s&#xA;pxyhubd1licA0qroSp3HY4qiMVdirsVQmmaPpOlW7W2l2VvYW7u0rw2sSQoZH+05VAo5Gm5xVF4q&#xA;7FXYqhNV0fSNXszZatY2+oWbEM1tdRJPEWXdSUkDLUdtsVRMcccUaRRIEjQBURQAqqBQAAdAMVXY&#xA;q7FXYql135b8u3somvNLtLmUTpdiSaCKRvrMaCNJqspPqKihVfqAAMVTHFXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYqluteX7LV5dOkuXkVtLuTeW/plQDI1vNbUeoaq8LljtTemKsDsv8AnHry&#xA;NaaXFpsdxftBFA9sGaWLmUdL5GqyxLvTVJfuTwNVWb+U/LNp5Z0KDR7W5ubyOF5pWu76T1rmWS4m&#xA;eeV5ZAF5M0kjEmmKpvirsVdirsVdirsVdirsVdirsVdirsVdir//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:D9772B8551D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:E772445355D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.007</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbo; Symbol</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -192.313 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 192.313 li
272.701 192.313 li
272.701 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
267.838 170.899 mo
264.688 170.899 li
28.188 170.899 mo
31.3384 170.899 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B854D00D> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWFF+Helvetica /Helvetica findfont ct_VMDictPut/DVPWFF+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]DVPWFF+Helvetica nfDVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf18.146 173.237 mo( )sh20.0913 173.237 mo(0)sh267.838 139.85 mo
264.688 139.85 li
28.188 139.85 mo
31.3384 139.85 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFF+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFF+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/DVPWFF+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two 205{/.notdef}rp]DVPWFF+Helvetica nfDVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf18.146 142.183 mo( )sh20.0913 142.183 mo(2)sh267.838 108.85 mo
264.688 108.85 li
28.188 108.85 mo
31.3384 108.85 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFF+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFF+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/DVPWFF+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four 203{/.notdef}rp]DVPWFF+Helvetica nfDVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf18.146 111.183 mo( )sh20.0913 111.183 mo(4)sh267.838 77.7998 mo
264.688 77.7998 li
28.188 77.7998 mo
31.3384 77.7998 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFF+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFF+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/DVPWFF+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]DVPWFF+Helvetica nfDVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf18.146 80.1357 mo( )sh20.0913 80.1357 mo(6)sh267.838 46.7998 mo
264.688 46.7998 li
28.188 46.7998 mo
31.3384 46.7998 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFF+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFF+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/DVPWFF+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWFF+Helvetica nfDVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf18.146 49.1357 mo( )sh20.0913 49.1357 mo(8)sh267.838 15.75 mo
264.688 15.75 li
28.188 15.75 mo
31.3384 15.75 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFF+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFF+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/DVPWFF+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWFF+Helvetica nfDVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf14.2554 18.0811 mo( 10)[1.9458 3.89209 0 ]xsh28.188 0.25 mo
28.188 3.3999 li
28.188 170.899 mo
28.188 167.75 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFF+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A75CA669> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFF+Helvetica /Encoding getdup 45 /hyphen putpop%ADOEndSubsetFont
/DVPWFF+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWFF+Helvetica nfDVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf25.0757 180.229 mo(-2)[2.33105 0 ]xsh68.1382 0.25 mo
68.1382 3.3999 li
68.1382 170.899 mo
68.1382 167.75 li
@
DVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf65.2163 180.229 mo( )sh67.1616 180.229 mo(0)sh108.088 0.25 mo
108.088 3.3999 li
108.088 170.899 mo
108.088 167.75 li
@
DVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf105.162 180.229 mo( )sh107.107 180.229 mo(2)sh148.039 0.25 mo
148.039 3.3999 li
148.039 170.899 mo
148.039 167.75 li
@
DVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf145.115 180.229 mo( )sh147.06 180.229 mo(4)sh187.938 0.25 mo
187.938 3.3999 li
187.938 170.899 mo
187.938 167.75 li
@
DVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf185.013 180.229 mo( )sh186.966 180.229 mo(6)sh227.889 0.25 mo
227.889 3.3999 li
227.889 170.899 mo
227.889 167.75 li
@
DVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf224.966 180.229 mo( )sh226.912 180.229 mo(8)sh267.838 0.25 mo
267.838 3.3999 li
267.838 170.899 mo
267.838 167.75 li
@
DVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf262.966 180.229 mo( 10)[1.94629 3.8916 0 ]xsh0.125 lw
[0.5 1 ] 0 dsh
68.1382 170.899 mo
68.1382 0.25 li
@
0.5 lw
[] 0 dsh
28.188 0.25 mo
28.188 170.899 li
267.838 170.899 li
267.838 0.25 li
28.188 0.25 li
28.188 0.25 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFF+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/P <1C60D8A8C9B64EDFA3F30AE4AB14FCCB57D446AF805F45D1BE197D47C6C20943FECBF4EB404456C629F1F5342EEA681381C7461EF00E178F4482E2C7F7B39C94B8CCFF41619BA5DC67957F7F81> |-/S <1C60D8A8C9B64EDF7B9A268599F9CD8C4143A0D599CA838C6F6EFB82E6187B34759773BB4D8C1A41E190DEFABB354DFB531C99308891FC3B7E87957393F9CD35CA8C07371CAABAAF32C24CDAE22C826F234EC2B15BA06DFB54FFCB46EDDF1D277ED530855C8BB0880980568C5F76DE693CEE6004D84A502F3C6B0F55A55095F8FAF71FCF3869AA0D55975A515D287103786F2BEFCA3E30833F771676F4E4B0C078830B99B254F2B4> |-/a <1C60D8A8C9B7EF32A0B922DB529D708010F72F0E62F6CA36E98277AFD8C536E6814BFC8F2509E1B2B1B62A6BDA8D1A6ED67728D80620B28FE439D2F57DCEC5483105FEA93379701773DF23A415938C688874994BCC9880105CE27AC2270A13FA38E952045C5E8C52BEF83397E5FBEEFAB993BE33E385A5E36620F7427AB5E4423C6A4ED6DE24A89F54E52C8FAD8A45FAD4B8F6CFD50EB7D35BF120B079B932E0EE2F7685462C7EC6E9B818F0F9E1F7814D04F2B9AAFA6704B8B745452B73181F38CB34F1645F> |-/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C2021D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495ACA0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCDBE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553A431EECECF30F5581F5F0240E470E520EB9771> |-/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D72A7354004D800853CB28271AB7834CF7A2CB132BAFF26EF4E9D89B> |-/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C0EAF> |-/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA563254EC441C4BC3817B6ABCAA45C3FADDF2A0C1F1BCD1456474D7370B95E3791CB0774B8A788FAD31DAB8E43BE1DDCC8C2722C438CA874C21003F548D691EAB87ADC2BE2D98ABE47C6EE8D76> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/p <1C60D8A8C9B7EF321971A47DFE20E88A554AF6C7BF26D7DE21E7159091488A77474EFAE16E717C524A15C920EA73AA47F3FA5326288E9152C7B3C170946831BD532AD7339284A44181A5422DAA5A3944CCAFE4499DA2E6E45119A891F62D3E7DB19C997B84C7105E8154EEFB4DEC8858FC770AEE75D22C6FDC3AA98F517994> |-/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B5837088353D9095E679DCF29A> |-/u <1C60D8A8C9B7EF325758E576B7BAA1EFA82EFF7976BE67CE506354F22E3D1B078EDAE7715C61BE16B3CD4B647E2C68818E308CF0BE659E73BA193580128E99771A6AFDBFEB4E9486BE6CBE5D0A068E2F3382B692BCB6E47C62554398C9E56946239346863C679F19> |-/z <1C60D8A8C9B7A73DC507CAD0E4E88F6FB9C94CACABF910769E2577196AAA10B49DA01B4D69E59659AA04AF6A1B6969B2FA2F58> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFF+Helvetica /Encoding getdup 80 /P putdup 83 /S putdup 97 /a putdup 101 /e putdup 105 /i putdup 108 /l putdup 110 /n putdup 111 /o putdup 112 /p putdup 116 /t putdup 117 /u putdup 122 /z putpop%ADOEndSubsetFont
/DVPWFF+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 23{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o /p 3{/.notdef}rp /t /u 4{/.notdef}rp /z 133{/.notdef}rp]DVPWFF+Helvetica nfDVPWFF+Helvetica*1 [0 -7 -7 0 0 0 ]msf6.01318 109.909 mo(Population Size)[-4.32031 -3.8916 -3.89258 -3.8916 -1.5542 -3.89209 -1.9458 -1.55371 -3.89209 -3.89209 -1.9458 -4.66895 -1.5542 -3.39551 0 ]ysh3.68799 85.5996 mo
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFF+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B7F374CC52CC6AFA2AC69E2626E08155548B3F09D592996A164FA4C0B7A39FE024A3E562036F05B86028> |-/C <1C60D8A8C9B6079F22E07CDD698967474547499A046CA6108DBC03A99D050F43EC0939593DCBE2D36ADBBAFB7F4B6F674E545889C28BDF2C528A201492F729C5289E096795ACB3E8B74F794BD95CD345203B50927FB3BCDBBCBA8BBFF702C4> |-/I <1C60D8A8C9B854D0A3953AFD56E13A0A68A3547B5275504502229C694F1498D4> |-/K <1C60D8A8C9B64EDFA3F30AEA5DF4FD401A7F234D8B48713128AD4E4576F51EA758FCC04623E76F0392C65BD3153165595668DEA1A39FCBD3CCA6EA172D7374581D5F> |-/N <1C60D8A8C9B6079F1E210C2F9CEEC55EA27709010CA5156BDE4F7169DCD83D1487618C13D4BC4EBB77DC3BF6CD15F7D9F6F5FB65B0AD46AE56999C41B6BE7783> |-/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67BA95C799E46FC7C8D88E9FFD990A> |-/c <1C60D8A8C9B7A73DE7D498F17521D6359F9ADD96B62202C43AB7E2B6A506D4DE60506EB0B21A851A7E637BA285607D05D1170907CD76EA31977E70CEDA0DED90924EF61C48FC884B70C05F0A56FF474D664DA9646860BA> |-/g <1C60D8A8C9B7EF326F0C168637D7A49AFFC209EC4BD7378EE8A777DA14ED0433ABB575BAA4A098791F7EC46D250F5BCBA737E6ADD6E1EA28A72C69A1D2534789ED43F588B444BB33EF91B59EF2C4FE743D22BB1490B1C3D985CEC86DB4CAEC82645FBE79A010F5150478D7CD822F749944770C7A9AD08A4C4D068AD8C66DD4250133C698BF087BA2E532A8750CA7F12CE9EAE477EA1DDA085AAD3B0D4A0456D044E2A177014C879AB81F36C957A614E7A4A934> |-/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706FE45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC754258679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52DA81BBE025DB4544A719A686DB3A0393D2301EEF9A4AA3D42067FE37BAF> |-/r <1C60D8A8C9B81F2C150546EE4CBAAF688B47B2BE559294D5CB0899F2E804995909AC00E005B47DD0AC10879B5BC7D5032F4A9752992A333ADEB05A77287D04AF74FB420D308AD8> |-/y <1C60D8A8C9B7A73DB586573D0157E99900164D3426B7076627BC2EECA01286D768DC747555489A92E6150F2562090A782510749223A2D01B0EE6374EEA8FB8F18250484D2C6B565CDCA8D95B100B7B1E0289ED25E0E350438F56B28A332ADDF034CB8EDC264C3ABAA85278C66F3E4B6419> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFF+Helvetica /Encoding getdup 61 /equal putdup 67 /C putdup 73 /I putdup 75 /K putdup 78 /N putdup 84 /T putdup 99 /c putdup 103 /g putdup 109 /m putdup 114 /r putdup 121 /y putpop%ADOEndSubsetFont
/DVPWFF+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 4{/.notdef}rp /equal 5{/.notdef}rp /C 5{/.notdef}rp /I /.notdef /K 2{/.notdef}rp /N /.notdef /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t /u 3{/.notdef}rp /y /z 133{/.notdef}rp]DVPWFF+Helvetica nfDVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf140.208 190.737 mo(Tim)[4.27734 1.55371 0 ]xsh151.865 190.737 mo(e)sh110.083 142.284 mo(Initial Population )[1.9458 3.89209 1.5542 1.9458 1.55371 3.89209 1.5542 1.9458 4.66895 3.89209 3.8916 3.89258 1.55371 3.8916 1.94629 1.55371 3.89258 3.8916 0 ]xsh163.38 142.284 mo(N)shDVPWFF+Helvetica*1 [5.6 0 0 -5.6 0 0 ]msf168.435 144.386 mo(0)shDVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf171.537 142.284 mo( = )[1.94629 4.08789 0 ]xsh179.521 142.284 mo(2)sh35.1851 11.1357 mo(Carrying)[5.05371 3.89209 2.33105 2.33105 3.5 1.55371 3.89209 0 ]xsh35.1851 18.1357 mo(Capacity)[5.05371 3.89209 3.89209 3.89209 3.5 1.55371 1.94629 0 ]xsh35.1851 25.1357 mo(K = 10)[4.66895 1.9458 4.08838 1.9458 3.89209 0 ]xsh0.125 lw
[0.5 1 ] 0 dsh
63.1382 15.75 mo
267.838 15.75 li
28.188 139.85 mo
108.088 139.85 li
@
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 108 /lambda putdef/UniqueID 27004 def/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [-17 0 673 685 487 500] def/StdHW [92] def/StdVW [95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/lambda <1C60D8A8C9B796767907097873B0A0717092A7192B9296E8233C4CF067A5AD2314C0C63BBACFAE2E3C00527B0EFFA9642EDF91040054A3151AC4F18062ED4E26D5346370E07C0A0BE9FE7584ABC2085229564D4CCE43F117CA246AF1E03EE22F6E0FB4BC4EBED040D803BB7747130BC271CCF09C4CE351633DA2C41A72E6F7374680C2DC454BCCF506A67B20CCDB6AE26A386F76B607377F5F491C69922B3EB9D74DC506D013FF7A146C92D30F9F2C63B723806FA6B8339E39E72CE16B6C> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWFG+Symbol /Symbol findfont ct_VMDictPut/DVPWFG+Symbol*1 [108{/.notdef}rp /lambda 147{/.notdef}rp]DVPWFG+Symbol nfDVPWFG+Symbol*1 [7 0 0 -7 0 0 ]msf213.732 152.589 mo(l)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFF+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369E6> |-/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFF+Helvetica /Encoding getdup 46 /period putdup 53 /five putpop%ADOEndSubsetFont
/DVPWFF+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 4{/.notdef}rp /equal 5{/.notdef}rp /C 5{/.notdef}rp /I /.notdef /K 2{/.notdef}rp /N /.notdef /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t /u 3{/.notdef}rp /y /z 133{/.notdef}rp]DVPWFF+Helvetica nfDVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf217.576 152.589 mo(=0.50)[4.08789 3.89258 1.94531 3.89258 0 ]xsh0.25 lw
[] 0 dsh
252.238 15.75 mo
252.488 15.75 li
252.738 15.75 li
252.988 15.75 li
253.188 15.75 li
253.438 15.75 li
253.688 15.75 li
253.938 15.75 li
254.188 15.75 li
254.389 15.75 li
254.639 15.75 li
254.889 15.75 li
255.139 15.75 li
255.389 15.75 li
255.588 15.75 li
255.838 15.75 li
256.088 15.75 li
256.338 15.75 li
256.588 15.75 li
256.789 15.75 li
257.039 15.75 li
257.289 15.75 li
257.539 15.75 li
257.738 15.75 li
257.988 15.75 li
258.238 15.75 li
258.488 15.75 li
258.738 15.75 li
258.938 15.75 li
259.188 15.75 li
259.438 15.75 li
259.688 15.75 li
259.938 15.75 li
260.139 15.75 li
260.389 15.75 li
260.639 15.75 li
260.889 15.75 li
261.139 15.75 li
261.338 15.75 li
261.588 15.75 li
261.838 15.75 li
262.088 15.75 li
262.338 15.75 li
262.539 15.75 li
262.789 15.75 li
263.039 15.75 li
263.289 15.75 li
263.539 15.75 li
263.738 15.75 li
263.988 15.75 li
264.238 15.75 li
264.488 15.75 li
264.738 15.75 li
264.938 15.75 li
265.188 15.75 li
265.438 15.75 li
265.688 15.75 li
265.938 15.75 li
266.139 15.75 li
266.389 15.75 li
266.639 15.75 li
266.889 15.75 li
267.139 15.75 li
267.338 15.75 li
267.588 15.75 li
267.838 15.75 li
227.289 15.75 mo
227.539 15.75 li
227.789 15.75 li
228.039 15.75 li
228.238 15.75 li
228.488 15.75 li
228.738 15.75 li
228.988 15.75 li
229.238 15.75 li
229.438 15.75 li
229.688 15.75 li
229.938 15.75 li
230.188 15.75 li
230.438 15.75 li
230.639 15.75 li
230.889 15.75 li
231.139 15.75 li
231.389 15.75 li
231.639 15.75 li
231.838 15.75 li
232.088 15.75 li
232.338 15.75 li
232.588 15.75 li
232.838 15.75 li
233.039 15.75 li
233.289 15.75 li
233.539 15.75 li
233.789 15.75 li
234.039 15.75 li
234.238 15.75 li
234.488 15.75 li
234.738 15.75 li
234.988 15.75 li
235.188 15.75 li
235.438 15.75 li
235.688 15.75 li
235.938 15.75 li
236.188 15.75 li
236.389 15.75 li
236.639 15.75 li
236.889 15.75 li
237.139 15.75 li
237.389 15.75 li
237.588 15.75 li
237.838 15.75 li
238.088 15.75 li
238.338 15.75 li
238.588 15.75 li
238.789 15.75 li
239.039 15.75 li
239.289 15.75 li
239.539 15.75 li
239.789 15.75 li
239.988 15.75 li
240.238 15.75 li
240.488 15.75 li
240.738 15.75 li
240.988 15.75 li
241.188 15.75 li
241.438 15.75 li
241.688 15.75 li
241.938 15.75 li
242.188 15.75 li
242.389 15.75 li
242.639 15.75 li
242.889 15.75 li
243.139 15.75 li
243.389 15.75 li
243.588 15.75 li
243.838 15.75 li
244.088 15.75 li
244.338 15.75 li
244.588 15.75 li
244.789 15.75 li
245.039 15.75 li
245.289 15.75 li
245.539 15.75 li
245.789 15.75 li
245.988 15.75 li
246.238 15.75 li
246.488 15.75 li
246.738 15.75 li
246.988 15.75 li
247.188 15.75 li
247.438 15.75 li
247.688 15.75 li
247.938 15.75 li
248.188 15.75 li
248.389 15.75 li
248.639 15.75 li
248.889 15.75 li
249.139 15.75 li
249.389 15.75 li
249.588 15.75 li
249.838 15.75 li
250.088 15.75 li
250.338 15.75 li
250.588 15.75 li
250.789 15.75 li
251.039 15.75 li
251.289 15.75 li
251.539 15.75 li
251.789 15.75 li
251.988 15.75 li
252.238 15.75 li
202.338 15.75 mo
202.588 15.75 li
202.838 15.75 li
203.088 15.75 li
203.289 15.75 li
203.539 15.75 li
203.789 15.75 li
204.039 15.75 li
204.289 15.75 li
204.488 15.75 li
204.738 15.75 li
204.988 15.75 li
205.238 15.75 li
205.488 15.75 li
205.688 15.75 li
205.938 15.75 li
206.188 15.75 li
206.438 15.75 li
206.688 15.75 li
206.889 15.75 li
207.139 15.75 li
207.389 15.75 li
207.639 15.75 li
207.889 15.75 li
208.088 15.75 li
208.338 15.75 li
208.588 15.75 li
208.838 15.75 li
209.088 15.75 li
209.289 15.75 li
209.539 15.75 li
209.789 15.75 li
210.039 15.75 li
210.289 15.75 li
210.488 15.75 li
210.738 15.75 li
210.988 15.75 li
211.238 15.75 li
211.488 15.75 li
211.688 15.75 li
211.938 15.75 li
212.188 15.75 li
212.438 15.75 li
212.688 15.75 li
212.889 15.75 li
213.139 15.75 li
213.389 15.75 li
213.639 15.75 li
213.838 15.75 li
214.088 15.75 li
214.338 15.75 li
214.588 15.75 li
214.838 15.75 li
215.039 15.75 li
215.289 15.75 li
215.539 15.75 li
215.789 15.75 li
216.039 15.75 li
216.238 15.75 li
216.488 15.75 li
216.738 15.75 li
216.988 15.75 li
217.238 15.75 li
217.438 15.75 li
217.688 15.75 li
217.938 15.75 li
218.188 15.75 li
218.438 15.75 li
218.639 15.75 li
218.889 15.75 li
219.139 15.75 li
219.389 15.75 li
219.639 15.75 li
219.838 15.75 li
220.088 15.75 li
220.338 15.75 li
220.588 15.75 li
220.838 15.75 li
221.039 15.75 li
221.289 15.75 li
221.539 15.75 li
221.789 15.75 li
222.039 15.75 li
222.238 15.75 li
222.488 15.75 li
222.738 15.75 li
222.988 15.75 li
223.238 15.75 li
223.438 15.75 li
223.688 15.75 li
223.938 15.75 li
224.188 15.75 li
224.438 15.75 li
224.639 15.75 li
224.889 15.75 li
225.139 15.75 li
225.389 15.75 li
225.639 15.75 li
225.838 15.75 li
226.088 15.75 li
226.338 15.75 li
226.588 15.75 li
226.838 15.75 li
227.039 15.75 li
227.289 15.75 li
177.389 15.75 mo
177.639 15.75 li
177.889 15.75 li
178.139 15.75 li
178.338 15.75 li
178.588 15.75 li
178.838 15.75 li
179.088 15.75 li
179.338 15.75 li
179.539 15.75 li
179.789 15.75 li
180.039 15.75 li
180.289 15.75 li
180.539 15.75 li
180.738 15.75 li
180.988 15.75 li
181.238 15.75 li
181.488 15.75 li
181.738 15.75 li
181.938 15.75 li
182.188 15.75 li
182.438 15.75 li
182.688 15.75 li
182.938 15.75 li
183.139 15.75 li
183.389 15.75 li
183.639 15.75 li
183.889 15.75 li
184.139 15.75 li
184.338 15.75 li
184.588 15.75 li
184.838 15.75 li
185.088 15.75 li
185.338 15.75 li
185.539 15.75 li
185.789 15.75 li
186.039 15.75 li
186.289 15.75 li
186.539 15.75 li
186.738 15.75 li
186.988 15.75 li
187.238 15.75 li
187.488 15.75 li
187.738 15.75 li
187.938 15.75 li
188.188 15.75 li
188.438 15.75 li
188.688 15.75 li
188.938 15.75 li
189.139 15.75 li
189.389 15.75 li
189.639 15.75 li
189.889 15.75 li
190.139 15.75 li
190.338 15.75 li
190.588 15.75 li
190.838 15.75 li
191.088 15.75 li
191.338 15.75 li
191.539 15.75 li
191.789 15.75 li
192.039 15.75 li
192.289 15.75 li
192.488 15.75 li
192.738 15.75 li
192.988 15.75 li
193.238 15.75 li
193.488 15.75 li
193.688 15.75 li
193.938 15.75 li
194.188 15.75 li
194.438 15.75 li
194.688 15.75 li
194.889 15.75 li
195.139 15.75 li
195.389 15.75 li
195.639 15.75 li
195.889 15.75 li
196.088 15.75 li
196.338 15.75 li
196.588 15.75 li
196.838 15.75 li
197.088 15.75 li
197.289 15.75 li
197.539 15.75 li
197.789 15.75 li
198.039 15.75 li
198.289 15.75 li
198.488 15.75 li
198.738 15.75 li
198.988 15.75 li
199.238 15.75 li
199.488 15.75 li
199.688 15.75 li
199.938 15.75 li
200.188 15.75 li
200.438 15.75 li
200.688 15.75 li
200.889 15.75 li
201.139 15.75 li
201.389 15.75 li
201.639 15.75 li
201.889 15.75 li
202.088 15.75 li
202.338 15.75 li
152.438 15.75 mo
152.688 15.75 li
152.938 15.75 li
153.188 15.75 li
153.389 15.75 li
153.639 15.75 li
153.889 15.75 li
154.139 15.75 li
154.389 15.75 li
154.588 15.75 li
154.838 15.75 li
155.088 15.75 li
155.338 15.75 li
155.588 15.75 li
155.789 15.75 li
156.039 15.75 li
156.289 15.75 li
156.539 15.75 li
156.789 15.75 li
156.988 15.75 li
157.238 15.75 li
157.488 15.75 li
157.738 15.75 li
157.988 15.75 li
158.188 15.75 li
158.438 15.75 li
158.688 15.75 li
158.938 15.75 li
159.188 15.75 li
159.389 15.75 li
159.639 15.75 li
159.889 15.75 li
160.139 15.75 li
160.389 15.75 li
160.588 15.75 li
160.838 15.75 li
161.088 15.75 li
161.338 15.75 li
161.588 15.75 li
161.789 15.75 li
162.039 15.75 li
162.289 15.75 li
162.539 15.75 li
162.789 15.75 li
162.988 15.75 li
163.238 15.75 li
163.488 15.75 li
163.738 15.75 li
163.988 15.75 li
164.188 15.75 li
164.438 15.75 li
164.688 15.75 li
164.938 15.75 li
165.188 15.75 li
165.389 15.75 li
165.639 15.75 li
165.889 15.75 li
166.139 15.75 li
166.389 15.75 li
166.588 15.75 li
166.838 15.75 li
167.088 15.75 li
167.338 15.75 li
167.588 15.75 li
167.789 15.75 li
168.039 15.75 li
168.289 15.75 li
168.539 15.75 li
168.789 15.75 li
168.988 15.75 li
169.238 15.75 li
169.488 15.75 li
169.738 15.75 li
169.938 15.75 li
170.188 15.75 li
170.438 15.75 li
170.688 15.75 li
170.938 15.75 li
171.139 15.75 li
171.389 15.75 li
171.639 15.75 li
171.889 15.75 li
172.139 15.75 li
172.338 15.75 li
172.588 15.75 li
172.838 15.75 li
173.088 15.75 li
173.338 15.75 li
173.537 15.75 li
173.787 15.75 li
174.037 15.75 li
174.287 15.75 li
174.537 15.75 li
174.738 15.75 li
174.988 15.75 li
175.238 15.75 li
175.488 15.75 li
175.738 15.75 li
175.938 15.75 li
176.188 15.75 li
176.438 15.75 li
176.688 15.75 li
176.938 15.75 li
177.139 15.75 li
177.389 15.75 li
127.488 15.75 mo
127.738 15.75 li
127.988 15.75 li
128.238 15.75 li
128.438 15.75 li
128.688 15.75 li
128.938 15.75 li
129.188 15.75 li
129.438 15.75 li
129.638 15.75 li
129.888 15.75 li
130.138 15.75 li
130.388 15.75 li
130.638 15.75 li
130.838 15.75 li
131.088 15.75 li
131.338 15.75 li
131.588 15.75 li
131.838 15.75 li
132.038 15.75 li
132.288 15.75 li
132.538 15.75 li
132.788 15.75 li
133.038 15.75 li
133.238 15.75 li
133.488 15.75 li
133.738 15.75 li
133.988 15.75 li
134.238 15.75 li
134.438 15.75 li
134.688 15.75 li
134.938 15.75 li
135.188 15.75 li
135.438 15.75 li
135.638 15.75 li
135.888 15.75 li
136.138 15.75 li
136.388 15.75 li
136.638 15.75 li
136.838 15.75 li
137.088 15.75 li
137.338 15.75 li
137.588 15.75 li
137.838 15.75 li
138.038 15.75 li
138.288 15.75 li
138.538 15.75 li
138.788 15.75 li
139.039 15.75 li
139.238 15.75 li
139.488 15.75 li
139.738 15.75 li
139.988 15.75 li
140.238 15.75 li
140.438 15.75 li
140.688 15.75 li
140.938 15.75 li
141.188 15.75 li
141.438 15.75 li
141.639 15.75 li
141.889 15.75 li
142.139 15.75 li
142.389 15.75 li
142.639 15.75 li
142.838 15.75 li
143.088 15.75 li
143.338 15.75 li
143.588 15.75 li
143.838 15.75 li
144.039 15.75 li
144.289 15.75 li
144.539 15.75 li
144.789 15.75 li
145.039 15.75 li
145.238 15.75 li
145.488 15.75 li
145.738 15.75 li
145.988 15.75 li
146.238 15.75 li
146.438 15.75 li
146.688 15.75 li
146.938 15.75 li
147.188 15.75 li
147.438 15.75 li
147.639 15.75 li
147.889 15.75 li
148.139 15.75 li
148.389 15.75 li
148.588 15.75 li
148.838 15.75 li
149.088 15.75 li
149.338 15.75 li
149.588 15.75 li
149.787 15.75 li
150.037 15.75 li
150.287 15.75 li
150.537 15.75 li
150.787 15.75 li
150.988 15.75 li
151.238 15.75 li
151.488 15.75 li
151.738 15.75 li
151.988 15.75 li
152.188 15.75 li
152.438 15.75 li
102.538 15.8999 mo
102.788 15.8496 li
103.038 15.8496 li
103.288 15.8496 li
103.538 15.8496 li
103.738 15.8496 li
103.988 15.8496 li
104.238 15.8496 li
104.488 15.8496 li
104.688 15.8496 li
104.938 15.8496 li
105.188 15.7998 li
105.438 15.7998 li
105.688 15.7998 li
105.888 15.7998 li
106.138 15.7998 li
106.388 15.7998 li
106.638 15.7998 li
106.888 15.7998 li
107.088 15.7998 li
107.338 15.7998 li
107.588 15.7998 li
107.838 15.7998 li
108.088 15.7998 li
108.288 15.7998 li
108.538 15.7998 li
108.788 15.7998 li
109.038 15.7998 li
109.288 15.7998 li
109.488 15.7998 li
109.738 15.7998 li
109.988 15.7998 li
110.238 15.7998 li
110.488 15.7998 li
110.688 15.7998 li
110.938 15.7998 li
111.188 15.7998 li
111.438 15.7998 li
111.688 15.7998 li
111.888 15.75 li
112.138 15.75 li
112.388 15.75 li
112.638 15.75 li
112.888 15.75 li
113.088 15.75 li
113.338 15.75 li
113.588 15.75 li
113.838 15.75 li
114.088 15.75 li
114.289 15.75 li
114.539 15.75 li
114.789 15.75 li
115.039 15.75 li
115.289 15.75 li
115.488 15.75 li
115.738 15.75 li
115.988 15.75 li
116.238 15.75 li
116.488 15.75 li
116.688 15.75 li
116.938 15.75 li
117.188 15.75 li
117.438 15.75 li
117.688 15.75 li
117.888 15.75 li
118.138 15.75 li
118.388 15.75 li
118.638 15.75 li
118.888 15.75 li
119.088 15.75 li
119.338 15.75 li
119.588 15.75 li
119.838 15.75 li
120.088 15.75 li
120.289 15.75 li
120.539 15.75 li
120.789 15.75 li
121.039 15.75 li
121.289 15.75 li
121.488 15.75 li
121.738 15.75 li
121.988 15.75 li
122.238 15.75 li
122.488 15.75 li
122.688 15.75 li
122.938 15.75 li
123.188 15.75 li
123.438 15.75 li
123.688 15.75 li
123.888 15.75 li
124.139 15.75 li
124.389 15.75 li
124.639 15.75 li
124.889 15.75 li
125.088 15.75 li
125.338 15.75 li
125.588 15.75 li
125.838 15.75 li
126.088 15.75 li
126.289 15.75 li
126.539 15.75 li
126.789 15.75 li
127.039 15.75 li
127.238 15.75 li
127.488 15.75 li
77.5884 57.8999 mo
77.8384 56.0996 li
78.0884 54.3496 li
78.3384 52.5996 li
78.5884 50.9497 li
78.7881 49.3496 li
79.0381 47.7998 li
79.2881 46.2998 li
79.5381 44.8496 li
79.7881 43.4497 li
79.9883 42.0996 li
80.2383 40.8496 li
80.4883 39.5996 li
80.7383 38.3999 li
80.9883 37.25 li
81.188 36.1997 li
81.438 35.1499 li
81.6885 34.1499 li
81.9385 33.1997 li
82.1885 32.2998 li
82.3882 31.3999 li
82.6382 30.5996 li
82.8882 29.7998 li
83.1382 29.0498 li
83.3384 28.3496 li
83.5884 27.6499 li
83.8384 27 li
84.0884 26.3999 li
84.3384 25.8496 li
84.5381 25.2998 li
84.7881 24.75 li
85.0381 24.25 li
85.2881 23.7998 li
85.5381 23.3496 li
85.7383 22.9497 li
85.9883 22.5498 li
86.2383 22.1499 li
86.4883 21.7998 li
86.7383 21.4497 li
86.9385 21.1499 li
87.1885 20.8496 li
87.4385 20.5498 li
87.6885 20.25 li
87.9385 20 li
88.1382 19.7998 li
88.3882 19.5498 li
88.6382 19.3496 li
88.8882 19.1499 li
89.1382 18.9497 li
89.3384 18.75 li
89.5884 18.5996 li
89.8384 18.3999 li
90.0884 18.25 li
90.3384 18.1499 li
90.5386 18 li
90.7886 17.8496 li
91.0386 17.75 li
91.2886 17.6499 li
91.5386 17.5 li
91.7383 17.3999 li
91.9883 17.2998 li
92.2383 17.25 li
92.4883 17.1499 li
92.7383 17.0498 li
92.9385 17 li
93.1885 16.8999 li
93.4385 16.8496 li
93.6885 16.7998 li
93.9385 16.75 li
94.1382 16.6997 li
94.3882 16.5996 li
94.6382 16.5498 li
94.8882 16.5498 li
95.1382 16.5 li
95.3384 16.4497 li
95.5884 16.3999 li
95.8384 16.3496 li
96.0884 16.3496 li
96.3384 16.2998 li
96.5386 16.25 li
96.7886 16.25 li
97.0386 16.1997 li
97.2886 16.1997 li
97.5386 16.1499 li
97.7383 16.1499 li
97.9883 16.0996 li
98.2383 16.0996 li
98.4883 16.0498 li
98.7383 16.0498 li
98.9385 16.0498 li
99.1885 16 li
99.4385 16 li
99.6885 16 li
99.9385 16 li
100.139 15.9497 li
100.389 15.9497 li
100.639 15.9497 li
100.889 15.9497 li
101.139 15.8999 li
101.338 15.8999 li
101.588 15.8999 li
101.838 15.8999 li
102.088 15.8999 li
102.338 15.8999 li
102.539 15.8999 li
52.6382 170.1 mo
52.8882 170.05 li
53.1382 170 li
53.3882 169.95 li
53.6382 169.899 li
53.8384 169.8 li
54.0884 169.75 li
54.3384 169.7 li
54.5884 169.6 li
54.8384 169.55 li
55.0381 169.45 li
55.2881 169.35 li
55.5381 169.25 li
55.7881 169.149 li
56.0381 169.05 li
56.2383 168.95 li
56.4883 168.8 li
56.7383 168.7 li
56.9883 168.55 li
57.2383 168.399 li
57.438 168.25 li
57.688 168.1 li
57.9385 167.95 li
58.1885 167.75 li
58.4385 167.55 li
58.6382 167.35 li
58.8882 167.149 li
59.1382 166.95 li
59.3882 166.7 li
59.6382 166.45 li
59.8384 166.149 li
60.0884 165.899 li
60.3384 165.6 li
60.5884 165.25 li
60.8384 164.95 li
61.0381 164.55 li
61.2881 164.2 li
61.5381 163.8 li
61.7881 163.399 li
61.9883 162.95 li
62.2383 162.5 li
62.4883 162 li
62.7383 161.45 li
62.9883 160.899 li
63.1885 160.35 li
63.4385 159.75 li
63.6885 159.1 li
63.9385 158.45 li
64.1885 157.75 li
64.3882 157 li
64.6382 156.2 li
64.8882 155.399 li
65.1382 154.55 li
65.3882 153.6 li
65.5884 152.7 li
65.8384 151.7 li
66.0884 150.649 li
66.3384 149.6 li
66.5884 148.45 li
66.7886 147.25 li
67.0386 146.05 li
67.2886 144.75 li
67.5386 143.45 li
67.7886 142.05 li
67.9883 140.6 li
68.2383 139.1 li
68.4883 137.6 li
68.7383 136 li
68.9883 134.35 li
69.1885 132.6 li
69.4385 130.85 li
69.6885 129.05 li
69.9385 127.2 li
70.1885 125.3 li
70.3882 123.3 li
70.6382 121.3 li
70.8882 119.25 li
71.1382 117.2 li
71.3882 115.05 li
71.5884 112.899 li
71.8384 110.7 li
72.0884 108.45 li
72.3384 106.2 li
72.5884 103.95 li
72.7886 101.649 li
73.0386 99.3496 li
73.2886 97 li
73.5386 94.7002 li
73.7886 92.3496 li
73.9883 90.0498 li
74.2383 87.6997 li
74.4883 85.3999 li
74.7383 83.0996 li
74.9883 80.7998 li
75.1885 78.5498 li
75.4385 76.3496 li
75.6885 74.1499 li
75.9385 71.9497 li
76.1885 69.8496 li
76.3887 67.75 li
76.6387 65.6997 li
76.8887 63.6499 li
77.1387 61.6997 li
77.3887 59.7998 li
77.5884 57.8999 li
28.188 170.899 mo
28.438 170.899 li
28.688 170.899 li
28.8882 170.899 li
29.1382 170.899 li
29.3882 170.899 li
29.6382 170.899 li
29.8882 170.899 li
30.0884 170.899 li
30.3384 170.899 li
30.5884 170.899 li
30.8384 170.899 li
31.0884 170.899 li
31.2881 170.899 li
31.5381 170.899 li
31.7881 170.899 li
32.0381 170.899 li
32.2881 170.899 li
32.4883 170.899 li
32.7383 170.899 li
32.9883 170.899 li
33.2383 170.899 li
33.4883 170.899 li
33.688 170.899 li
33.9385 170.899 li
34.1885 170.899 li
34.4385 170.899 li
34.6885 170.899 li
34.8882 170.899 li
35.1382 170.899 li
35.3882 170.899 li
35.6382 170.899 li
35.8882 170.899 li
36.0884 170.899 li
36.3384 170.899 li
36.5884 170.899 li
36.8384 170.899 li
37.0884 170.899 li
37.2881 170.899 li
37.5381 170.899 li
37.7881 170.899 li
38.0381 170.899 li
38.2881 170.899 li
38.4883 170.899 li
38.7383 170.899 li
38.9883 170.85 li
39.2383 170.85 li
39.4385 170.85 li
39.6885 170.85 li
39.9385 170.85 li
40.1885 170.85 li
40.4385 170.85 li
40.6382 170.85 li
40.8882 170.85 li
41.1382 170.85 li
41.3882 170.85 li
41.6382 170.85 li
41.8384 170.85 li
42.0884 170.85 li
42.3384 170.85 li
42.5884 170.85 li
42.8384 170.85 li
43.0386 170.85 li
43.2886 170.8 li
43.5386 170.8 li
43.7886 170.8 li
44.0386 170.8 li
44.2383 170.8 li
44.4883 170.8 li
44.7383 170.8 li
44.9883 170.8 li
45.2383 170.75 li
45.4385 170.75 li
45.6885 170.75 li
45.9385 170.75 li
46.1885 170.75 li
46.4385 170.75 li
46.6382 170.7 li
46.8882 170.7 li
47.1382 170.7 li
47.3882 170.7 li
47.6382 170.649 li
47.8384 170.649 li
48.0884 170.649 li
48.3384 170.649 li
48.5884 170.6 li
48.8384 170.6 li
49.0386 170.55 li
49.2886 170.55 li
49.5386 170.55 li
49.7886 170.5 li
50.0386 170.5 li
50.2383 170.449 li
50.4883 170.449 li
50.7383 170.399 li
50.9883 170.35 li
51.2383 170.35 li
51.4385 170.3 li
51.6885 170.25 li
51.9385 170.25 li
52.1885 170.199 li
52.4385 170.149 li
52.6387 170.1 li
239.488 150.25 mo
259.438 150.25 li
@
DVPWFG+Symbol*1 [7 0 0 -7 0 0 ]msf213.732 159.581 mo(l)shDVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf217.576 159.581 mo(=0.10)[4.08789 3.89258 1.94531 3.89258 0 ]xsh[4 2 ] 0 dsh
252.238 15.8496 mo
252.488 15.7998 li
252.738 15.7998 li
252.988 15.7998 li
253.188 15.7998 li
253.438 15.7998 li
253.688 15.7998 li
253.938 15.7998 li
254.188 15.7998 li
254.389 15.7998 li
254.639 15.7998 li
254.889 15.7998 li
255.139 15.7998 li
255.389 15.7998 li
255.588 15.7998 li
255.838 15.7998 li
256.088 15.7998 li
256.338 15.7998 li
256.588 15.7998 li
256.789 15.7998 li
257.039 15.7998 li
257.289 15.7998 li
257.539 15.7998 li
257.738 15.7998 li
257.988 15.7998 li
258.238 15.7998 li
258.488 15.7998 li
258.738 15.7998 li
258.938 15.7998 li
259.188 15.7998 li
259.438 15.7998 li
259.688 15.7998 li
259.938 15.7998 li
260.139 15.7998 li
260.389 15.7998 li
260.639 15.7998 li
260.889 15.7998 li
261.139 15.7998 li
261.338 15.7998 li
261.588 15.7998 li
261.838 15.7998 li
262.088 15.7998 li
262.338 15.7998 li
262.539 15.7998 li
262.789 15.7998 li
263.039 15.7998 li
263.289 15.7998 li
263.539 15.7998 li
263.738 15.7998 li
263.988 15.7998 li
264.238 15.7998 li
264.488 15.7998 li
264.738 15.7998 li
264.938 15.7998 li
265.188 15.7998 li
265.438 15.7998 li
265.688 15.7998 li
265.938 15.7998 li
266.139 15.7998 li
266.389 15.7998 li
266.639 15.7998 li
266.889 15.7998 li
267.139 15.7998 li
267.338 15.7998 li
267.588 15.7998 li
267.838 15.7998 li
227.289 16 mo
227.539 16 li
227.789 15.9497 li
228.039 15.9497 li
228.238 15.9497 li
228.488 15.9497 li
228.738 15.9497 li
228.988 15.9497 li
229.238 15.9497 li
229.438 15.9497 li
229.688 15.9497 li
229.938 15.9497 li
230.188 15.9497 li
230.438 15.9497 li
230.639 15.9497 li
230.889 15.9497 li
231.139 15.9497 li
231.389 15.9497 li
231.639 15.9497 li
231.838 15.9497 li
232.088 15.9497 li
232.338 15.9497 li
232.588 15.9497 li
232.838 15.9497 li
233.039 15.8999 li
233.289 15.8999 li
233.539 15.8999 li
233.789 15.8999 li
234.039 15.8999 li
234.238 15.8999 li
234.488 15.8999 li
234.738 15.8999 li
234.988 15.8999 li
235.188 15.8999 li
235.438 15.8999 li
235.688 15.8999 li
235.938 15.8999 li
236.188 15.8999 li
236.389 15.8999 li
236.639 15.8999 li
236.889 15.8999 li
237.139 15.8999 li
237.389 15.8999 li
237.588 15.8999 li
237.838 15.8999 li
238.088 15.8999 li
238.338 15.8999 li
238.588 15.8999 li
238.789 15.8999 li
239.039 15.8999 li
239.289 15.8999 li
239.539 15.8999 li
239.789 15.8999 li
239.988 15.8999 li
240.238 15.8999 li
240.488 15.8496 li
240.738 15.8496 li
240.988 15.8496 li
241.188 15.8496 li
241.438 15.8496 li
241.688 15.8496 li
241.938 15.8496 li
242.188 15.8496 li
242.389 15.8496 li
242.639 15.8496 li
242.889 15.8496 li
243.139 15.8496 li
243.389 15.8496 li
243.588 15.8496 li
243.838 15.8496 li
244.088 15.8496 li
244.338 15.8496 li
244.588 15.8496 li
244.789 15.8496 li
245.039 15.8496 li
245.289 15.8496 li
245.539 15.8496 li
245.789 15.8496 li
245.988 15.8496 li
246.238 15.8496 li
246.488 15.8496 li
246.738 15.8496 li
246.988 15.8496 li
247.188 15.8496 li
247.438 15.8496 li
247.688 15.8496 li
247.938 15.8496 li
248.188 15.8496 li
248.389 15.8496 li
248.639 15.8496 li
248.889 15.8496 li
249.139 15.8496 li
249.389 15.8496 li
249.588 15.8496 li
249.838 15.8496 li
250.088 15.8496 li
250.338 15.8496 li
250.588 15.8496 li
250.789 15.8496 li
251.039 15.8496 li
251.289 15.8496 li
251.539 15.8496 li
251.789 15.8496 li
251.988 15.8496 li
252.238 15.8496 li
202.338 16.5 mo
202.588 16.5 li
202.838 16.5 li
203.088 16.5 li
203.289 16.4497 li
203.539 16.4497 li
203.789 16.4497 li
204.039 16.4497 li
204.289 16.4497 li
204.488 16.4497 li
204.738 16.3999 li
204.988 16.3999 li
205.238 16.3999 li
205.488 16.3999 li
205.688 16.3999 li
205.938 16.3999 li
206.188 16.3999 li
206.438 16.3496 li
206.688 16.3496 li
206.889 16.3496 li
207.139 16.3496 li
207.389 16.3496 li
207.639 16.3496 li
207.889 16.3496 li
208.088 16.2998 li
208.338 16.2998 li
208.588 16.2998 li
208.838 16.2998 li
209.088 16.2998 li
209.289 16.2998 li
209.539 16.2998 li
209.789 16.2998 li
210.039 16.25 li
210.289 16.25 li
210.488 16.25 li
210.738 16.25 li
210.988 16.25 li
211.238 16.25 li
211.488 16.25 li
211.688 16.25 li
211.938 16.1997 li
212.188 16.1997 li
212.438 16.1997 li
212.688 16.1997 li
212.889 16.1997 li
213.139 16.1997 li
213.389 16.1997 li
213.639 16.1997 li
213.838 16.1997 li
214.088 16.1997 li
214.338 16.1499 li
214.588 16.1499 li
214.838 16.1499 li
215.039 16.1499 li
215.289 16.1499 li
215.539 16.1499 li
215.789 16.1499 li
216.039 16.1499 li
216.238 16.1499 li
216.488 16.1499 li
216.738 16.1499 li
216.988 16.0996 li
217.238 16.0996 li
217.438 16.0996 li
217.688 16.0996 li
217.938 16.0996 li
218.188 16.0996 li
218.438 16.0996 li
218.639 16.0996 li
218.889 16.0996 li
219.139 16.0996 li
219.389 16.0996 li
219.639 16.0996 li
219.838 16.0498 li
220.088 16.0498 li
220.338 16.0498 li
220.588 16.0498 li
220.838 16.0498 li
221.039 16.0498 li
221.289 16.0498 li
221.539 16.0498 li
221.789 16.0498 li
222.039 16.0498 li
222.238 16.0498 li
222.488 16.0498 li
222.738 16.0498 li
222.988 16.0498 li
223.238 16.0498 li
223.438 16 li
223.688 16 li
223.938 16 li
224.188 16 li
224.438 16 li
224.639 16 li
224.889 16 li
225.139 16 li
225.389 16 li
225.639 16 li
225.838 16 li
226.088 16 li
226.338 16 li
226.588 16 li
226.838 16 li
227.039 16 li
227.289 16 li
177.389 18.3496 mo
177.639 18.2998 li
177.889 18.25 li
178.139 18.25 li
178.338 18.1997 li
178.588 18.1997 li
178.838 18.1499 li
179.088 18.1499 li
179.338 18.0996 li
179.539 18.0498 li
179.789 18.0498 li
180.039 18 li
180.289 18 li
180.539 17.9497 li
180.738 17.9497 li
180.988 17.8999 li
181.238 17.8999 li
181.488 17.8496 li
181.738 17.8496 li
181.938 17.7998 li
182.188 17.7998 li
182.438 17.75 li
182.688 17.75 li
182.938 17.6997 li
183.139 17.6997 li
183.389 17.6499 li
183.639 17.6499 li
183.889 17.6499 li
184.139 17.5996 li
184.338 17.5996 li
184.588 17.5498 li
184.838 17.5498 li
185.088 17.5 li
185.338 17.5 li
185.539 17.5 li
185.789 17.4497 li
186.039 17.4497 li
186.289 17.3999 li
186.539 17.3999 li
186.738 17.3999 li
186.988 17.3496 li
187.238 17.3496 li
187.488 17.2998 li
187.738 17.2998 li
187.938 17.2998 li
188.188 17.25 li
188.438 17.25 li
188.688 17.25 li
188.938 17.1997 li
189.139 17.1997 li
189.389 17.1997 li
189.639 17.1499 li
189.889 17.1499 li
190.139 17.1499 li
190.338 17.1001 li
190.588 17.1001 li
190.838 17.1001 li
191.088 17.0498 li
191.338 17.0498 li
191.539 17.0498 li
191.789 17 li
192.039 17 li
192.289 17 li
192.488 17 li
192.738 16.9497 li
192.988 16.9497 li
193.238 16.9497 li
193.488 16.8999 li
193.688 16.8999 li
193.938 16.8999 li
194.188 16.8999 li
194.438 16.8501 li
194.688 16.8501 li
194.889 16.8501 li
195.139 16.8501 li
195.389 16.7998 li
195.639 16.7998 li
195.889 16.7998 li
196.088 16.7998 li
196.338 16.75 li
196.588 16.75 li
196.838 16.75 li
197.088 16.75 li
197.289 16.7002 li
197.539 16.7002 li
197.789 16.7002 li
198.039 16.7002 li
198.289 16.7002 li
198.488 16.6499 li
198.738 16.6499 li
198.988 16.6499 li
199.238 16.6499 li
199.488 16.6001 li
199.688 16.6001 li
199.938 16.6001 li
200.188 16.6001 li
200.438 16.6001 li
200.688 16.5498 li
200.889 16.5498 li
201.139 16.5498 li
201.389 16.5498 li
201.639 16.5498 li
201.889 16.5498 li
202.088 16.5 li
202.338 16.5 li
152.438 24.3496 mo
152.688 24.25 li
152.938 24.1499 li
153.188 24.0498 li
153.389 24 li
153.639 23.8999 li
153.889 23.7998 li
154.139 23.6997 li
154.389 23.5996 li
154.588 23.5 li
154.838 23.4497 li
155.088 23.3496 li
155.338 23.25 li
155.588 23.1997 li
155.789 23.0996 li
156.039 22.9995 li
156.289 22.9497 li
156.539 22.8496 li
156.789 22.7495 li
156.988 22.6997 li
157.238 22.5996 li
157.488 22.5498 li
157.738 22.4497 li
157.988 22.3496 li
158.188 22.2998 li
158.438 22.1997 li
158.688 22.1499 li
158.938 22.0996 li
159.188 21.9995 li
159.389 21.9497 li
159.639 21.8496 li
159.889 21.7998 li
160.139 21.6997 li
160.389 21.6499 li
160.588 21.5996 li
160.838 21.4995 li
161.088 21.4497 li
161.338 21.3999 li
161.588 21.2998 li
161.789 21.25 li
162.039 21.1997 li
162.289 21.1499 li
162.539 21.0498 li
162.789 21 li
162.988 20.9497 li
163.238 20.8999 li
163.488 20.8496 li
163.738 20.75 li
163.988 20.6997 li
164.188 20.6499 li
164.438 20.5996 li
164.688 20.5498 li
164.938 20.5 li
165.188 20.4497 li
165.389 20.3999 li
165.639 20.3496 li
165.889 20.25 li
166.139 20.1997 li
166.389 20.1499 li
166.588 20.0996 li
166.838 20.0498 li
167.088 20 li
167.338 19.9497 li
167.588 19.8999 li
167.789 19.8496 li
168.039 19.7998 li
168.289 19.7998 li
168.539 19.75 li
168.789 19.6997 li
168.988 19.6499 li
169.238 19.5996 li
169.488 19.5498 li
169.738 19.5 li
169.938 19.4497 li
170.188 19.3999 li
170.438 19.3501 li
170.688 19.3501 li
170.938 19.2998 li
171.139 19.25 li
171.389 19.1997 li
171.639 19.1499 li
171.889 19.1499 li
172.139 19.1001 li
172.338 19.0498 li
172.588 19 li
172.838 18.9497 li
173.088 18.9497 li
173.338 18.8999 li
173.537 18.8501 li
173.787 18.8501 li
174.037 18.7998 li
174.287 18.75 li
174.537 18.7002 li
174.738 18.7002 li
174.988 18.6499 li
175.238 18.6001 li
175.488 18.6001 li
175.738 18.5498 li
175.938 18.5 li
176.188 18.5 li
176.438 18.4502 li
176.688 18.3999 li
176.938 18.3999 li
177.139 18.3501 li
177.389 18.3501 li
127.488 42.0996 mo
127.738 41.8496 li
127.988 41.5996 li
128.238 41.3496 li
128.438 41.0996 li
128.688 40.8496 li
128.938 40.5498 li
129.188 40.3496 li
129.438 40.0996 li
129.638 39.8496 li
129.888 39.5996 li
130.138 39.3496 li
130.388 39.0996 li
130.638 38.8496 li
130.838 38.6499 li
131.088 38.3999 li
131.338 38.1499 li
131.588 37.9497 li
131.838 37.6997 li
132.038 37.4995 li
132.288 37.2495 li
132.538 37.0498 li
132.788 36.8496 li
133.038 36.5996 li
133.238 36.3999 li
133.488 36.1997 li
133.738 35.9497 li
133.988 35.7495 li
134.238 35.5498 li
134.438 35.3496 li
134.688 35.1499 li
134.938 34.9497 li
135.188 34.75 li
135.438 34.5498 li
135.638 34.3496 li
135.888 34.1499 li
136.138 33.9497 li
136.388 33.75 li
136.638 33.5498 li
136.838 33.3999 li
137.088 33.1997 li
137.338 33 li
137.588 32.7998 li
137.838 32.6499 li
138.038 32.4497 li
138.288 32.2998 li
138.538 32.0996 li
138.788 31.9497 li
139.039 31.75 li
139.238 31.5996 li
139.488 31.3999 li
139.738 31.25 li
139.988 31.0996 li
140.238 30.8999 li
140.438 30.75 li
140.688 30.5996 li
140.938 30.4497 li
141.188 30.25 li
141.438 30.0996 li
141.639 29.9497 li
141.889 29.7998 li
142.139 29.6499 li
142.389 29.5 li
142.639 29.3496 li
142.838 29.1997 li
143.088 29.0498 li
143.338 28.8999 li
143.588 28.75 li
143.838 28.6499 li
144.039 28.5 li
144.289 28.3496 li
144.539 28.1997 li
144.789 28.0498 li
145.039 27.9497 li
145.238 27.7998 li
145.488 27.6499 li
145.738 27.5498 li
145.988 27.3999 li
146.238 27.2998 li
146.438 27.1499 li
146.688 27 li
146.938 26.8999 li
147.188 26.7998 li
147.438 26.6499 li
147.639 26.5498 li
147.889 26.3999 li
148.139 26.2998 li
148.389 26.1997 li
148.588 26.0498 li
148.838 25.9497 li
149.088 25.8496 li
149.338 25.6997 li
149.588 25.5996 li
149.787 25.5 li
150.037 25.3999 li
150.287 25.2998 li
150.537 25.1499 li
150.787 25.0498 li
150.988 24.9497 li
151.238 24.8496 li
151.488 24.75 li
151.738 24.6499 li
151.988 24.5498 li
152.188 24.4497 li
152.438 24.3496 li
102.538 80.3496 mo
102.788 79.8999 li
103.038 79.4497 li
103.288 79 li
103.538 78.5498 li
103.738 78.0996 li
103.988 77.6499 li
104.238 77.1997 li
104.488 76.7998 li
104.688 76.3496 li
104.938 75.8999 li
105.188 75.4497 li
105.438 75 li
105.688 74.5498 li
105.888 74.1499 li
106.138 73.6997 li
106.388 73.25 li
106.638 72.7998 li
106.888 72.3999 li
107.088 71.9497 li
107.338 71.5498 li
107.588 71.0996 li
107.838 70.6997 li
108.088 70.25 li
108.288 69.8496 li
108.538 69.3999 li
108.788 69 li
109.038 68.5498 li
109.288 68.1499 li
109.488 67.7495 li
109.738 67.2998 li
109.988 66.8999 li
110.238 66.4995 li
110.488 66.0996 li
110.688 65.6997 li
110.938 65.2495 li
111.188 64.8496 li
111.438 64.4497 li
111.688 64.0498 li
111.888 63.6499 li
112.138 63.2495 li
112.388 62.8496 li
112.638 62.4995 li
112.888 62.0996 li
113.088 61.6997 li
113.338 61.2998 li
113.588 60.9497 li
113.838 60.5498 li
114.088 60.1494 li
114.289 59.7998 li
114.539 59.3994 li
114.789 59.0498 li
115.039 58.6494 li
115.289 58.2998 li
115.488 57.8994 li
115.738 57.5498 li
115.988 57.1997 li
116.238 56.7998 li
116.488 56.4497 li
116.688 56.0996 li
116.938 55.7495 li
117.188 55.3999 li
117.438 55.0498 li
117.688 54.6997 li
117.888 54.3496 li
118.138 53.9995 li
118.388 53.6499 li
118.638 53.2998 li
118.888 52.9497 li
119.088 52.5996 li
119.338 52.2998 li
119.588 51.9497 li
119.838 51.5996 li
120.088 51.2998 li
120.289 50.9497 li
120.539 50.6499 li
120.789 50.2998 li
121.039 50 li
121.289 49.6499 li
121.488 49.3496 li
121.738 49.0498 li
121.988 48.6997 li
122.238 48.3999 li
122.488 48.0996 li
122.688 47.7998 li
122.938 47.5 li
123.188 47.1997 li
123.438 46.8999 li
123.688 46.5996 li
123.888 46.2998 li
124.139 46 li
124.389 45.6997 li
124.639 45.3999 li
124.889 45.1499 li
125.088 44.8496 li
125.338 44.5498 li
125.588 44.2998 li
125.838 44 li
126.088 43.75 li
126.289 43.4497 li
126.539 43.1997 li
126.789 42.8999 li
127.039 42.6499 li
127.238 42.3999 li
127.488 42.0996 li
77.5884 126.45 mo
77.8384 126.05 li
78.0884 125.649 li
78.3384 125.3 li
78.5884 124.899 li
78.7881 124.5 li
79.0381 124.1 li
79.2881 123.7 li
79.5381 123.3 li
79.7881 122.95 li
79.9883 122.55 li
80.2383 122.149 li
80.4883 121.7 li
80.7383 121.3 li
80.9883 120.899 li
81.188 120.5 li
81.438 120.1 li
81.6885 119.7 li
81.9385 119.25 li
82.1885 118.85 li
82.3882 118.45 li
82.6382 118 li
82.8882 117.6 li
83.1382 117.2 li
83.3384 116.75 li
83.5884 116.35 li
83.8384 115.9 li
84.0884 115.5 li
84.3384 115.05 li
84.5381 114.65 li
84.7881 114.2 li
85.0381 113.75 li
85.2881 113.35 li
85.5381 112.9 li
85.7383 112.45 li
85.9883 112 li
86.2383 111.6 li
86.4883 111.15 li
86.7383 110.7 li
86.9385 110.25 li
87.1885 109.8 li
87.4385 109.35 li
87.6885 108.9 li
87.9385 108.45 li
88.1382 108 li
88.3882 107.55 li
88.6382 107.1 li
88.8882 106.65 li
89.1382 106.2 li
89.3384 105.75 li
89.5884 105.3 li
89.8384 104.85 li
90.0884 104.4 li
90.3384 103.95 li
90.5386 103.5 li
90.7886 103 li
91.0386 102.55 li
91.2886 102.1 li
91.5386 101.65 li
91.7383 101.2 li
91.9883 100.7 li
92.2383 100.25 li
92.4883 99.7998 li
92.7383 99.3496 li
92.9385 98.8496 li
93.1885 98.4004 li
93.4385 97.9502 li
93.6885 97.5 li
93.9385 97 li
94.1382 96.5498 li
94.3882 96.0996 li
94.6382 95.5996 li
94.8882 95.1504 li
95.1382 94.7002 li
95.3384 94.2002 li
95.5884 93.75 li
95.8384 93.2998 li
96.0884 92.7998 li
96.3384 92.3501 li
96.5386 91.8999 li
96.7886 91.4502 li
97.0386 90.9502 li
97.2886 90.5 li
97.5386 90.0498 li
97.7383 89.5498 li
97.9883 89.1001 li
98.2383 88.6499 li
98.4883 88.1499 li
98.7383 87.7002 li
98.9385 87.25 li
99.1885 86.7998 li
99.4385 86.2998 li
99.6885 85.8501 li
99.9385 85.3999 li
100.139 84.9502 li
100.389 84.5 li
100.639 84 li
100.889 83.5498 li
101.139 83.1001 li
101.338 82.6499 li
101.588 82.2002 li
101.838 81.75 li
102.088 81.2998 li
102.338 80.7998 li
102.539 80.3501 li
52.6382 154.85 mo
52.8882 154.7 li
53.1382 154.55 li
53.3882 154.35 li
53.6382 154.149 li
53.8384 154 li
54.0884 153.8 li
54.3384 153.6 li
54.5884 153.45 li
54.8384 153.25 li
55.0381 153.05 li
55.2881 152.85 li
55.5381 152.7 li
55.7881 152.5 li
56.0381 152.3 li
56.2383 152.1 li
56.4883 151.899 li
56.7383 151.699 li
56.9883 151.5 li
57.2383 151.3 li
57.438 151.1 li
57.688 150.85 li
57.9385 150.649 li
58.1885 150.449 li
58.4385 150.25 li
58.6382 150 li
58.8882 149.8 li
59.1382 149.6 li
59.3882 149.35 li
59.6382 149.149 li
59.8384 148.899 li
60.0884 148.699 li
60.3384 148.449 li
60.5884 148.199 li
60.8384 148 li
61.0381 147.75 li
61.2881 147.5 li
61.5381 147.25 li
61.7881 147.05 li
61.9883 146.8 li
62.2383 146.55 li
62.4883 146.3 li
62.7383 146.05 li
62.9883 145.8 li
63.1885 145.55 li
63.4385 145.3 li
63.6885 145 li
63.9385 144.75 li
64.1885 144.5 li
64.3882 144.25 li
64.6382 143.95 li
64.8882 143.7 li
65.1382 143.45 li
65.3882 143.149 li
65.5884 142.899 li
65.8384 142.6 li
66.0884 142.35 li
66.3384 142.05 li
66.5884 141.75 li
66.7886 141.5 li
67.0386 141.2 li
67.2886 140.899 li
67.5386 140.6 li
67.7886 140.3 li
67.9883 140 li
68.2383 139.7 li
68.4883 139.399 li
68.7383 139.1 li
68.9883 138.8 li
69.1885 138.5 li
69.4385 138.2 li
69.6885 137.899 li
69.9385 137.6 li
70.1885 137.25 li
70.3882 136.95 li
70.6382 136.6 li
70.8882 136.3 li
71.1382 136 li
71.3882 135.649 li
71.5884 135.3 li
71.8384 135 li
72.0884 134.649 li
72.3384 134.35 li
72.5884 134 li
72.7886 133.649 li
73.0386 133.3 li
73.2886 132.949 li
73.5386 132.6 li
73.7886 132.25 li
73.9883 131.899 li
74.2383 131.55 li
74.4883 131.199 li
74.7383 130.85 li
74.9883 130.5 li
75.1885 130.149 li
75.4385 129.8 li
75.6885 129.399 li
75.9385 129.05 li
76.1885 128.699 li
76.3887 128.3 li
76.6387 127.949 li
76.8887 127.55 li
77.1387 127.199 li
77.3887 126.8 li
77.5884 126.449 li
28.188 165.8 mo
28.438 165.75 li
28.688 165.7 li
28.8882 165.649 li
29.1382 165.6 li
29.3882 165.5 li
29.6382 165.45 li
29.8882 165.399 li
30.0884 165.35 li
30.3384 165.25 li
30.5884 165.2 li
30.8384 165.149 li
31.0884 165.05 li
31.2881 165 li
31.5381 164.949 li
31.7881 164.85 li
32.0381 164.8 li
32.2881 164.7 li
32.4883 164.649 li
32.7383 164.55 li
32.9883 164.5 li
33.2383 164.449 li
33.4883 164.35 li
33.688 164.3 li
33.9385 164.199 li
34.1885 164.1 li
34.4385 164.05 li
34.6885 163.95 li
34.8882 163.899 li
35.1382 163.8 li
35.3882 163.7 li
35.6382 163.649 li
35.8882 163.55 li
36.0884 163.45 li
36.3384 163.399 li
36.5884 163.3 li
36.8384 163.2 li
37.0884 163.1 li
37.2881 163.05 li
37.5381 162.95 li
37.7881 162.85 li
38.0381 162.75 li
38.2881 162.649 li
38.4883 162.55 li
38.7383 162.5 li
38.9883 162.399 li
39.2383 162.3 li
39.4385 162.2 li
39.6885 162.1 li
39.9385 162 li
40.1885 161.899 li
40.4385 161.8 li
40.6382 161.7 li
40.8882 161.6 li
41.1382 161.45 li
41.3882 161.35 li
41.6382 161.25 li
41.8384 161.149 li
42.0884 161.05 li
42.3384 160.899 li
42.5884 160.8 li
42.8384 160.7 li
43.0386 160.6 li
43.2886 160.45 li
43.5386 160.35 li
43.7886 160.25 li
44.0386 160.1 li
44.2383 160 li
44.4883 159.85 li
44.7383 159.75 li
44.9883 159.6 li
45.2383 159.5 li
45.4385 159.35 li
45.6885 159.25 li
45.9385 159.1 li
46.1885 158.95 li
46.4385 158.85 li
46.6382 158.7 li
46.8882 158.55 li
47.1382 158.45 li
47.3882 158.3 li
47.6382 158.15 li
47.8384 158 li
48.0884 157.85 li
48.3384 157.75 li
48.5884 157.6 li
48.8384 157.45 li
49.0386 157.3 li
49.2886 157.15 li
49.5386 157 li
49.7886 156.85 li
50.0386 156.7 li
50.2383 156.5 li
50.4883 156.35 li
50.7383 156.2 li
50.9883 156.05 li
51.2383 155.9 li
51.4385 155.7 li
51.6885 155.55 li
51.9385 155.4 li
52.1885 155.2 li
52.4385 155.05 li
52.6387 154.85 li
239.488 157.25 mo
259.438 157.25 li
@
DVPWFG+Symbol*1 [7 0 0 -7 0 0 ]msf213.732 166.589 mo(l)shDVPWFF+Helvetica*1 [7 0 0 -7 0 0 ]msf217.576 166.589 mo(=0.05)[4.08789 3.89258 1.94531 3.89258 0 ]xsh[2 3 ] 0 dsh
252.238 21.6997 mo
252.488 21.6499 li
252.738 21.6499 li
252.988 21.5996 li
253.188 21.5498 li
253.438 21.5498 li
253.688 21.5 li
253.938 21.4497 li
254.188 21.4497 li
254.389 21.3999 li
254.639 21.3496 li
254.889 21.3496 li
255.139 21.2998 li
255.389 21.25 li
255.588 21.25 li
255.838 21.1997 li
256.088 21.1997 li
256.338 21.1499 li
256.588 21.0996 li
256.789 21.0996 li
257.039 21.0498 li
257.289 21 li
257.539 21 li
257.738 20.9497 li
257.988 20.9497 li
258.238 20.8999 li
258.488 20.8496 li
258.738 20.8496 li
258.938 20.7998 li
259.188 20.7998 li
259.438 20.75 li
259.688 20.75 li
259.938 20.6997 li
260.139 20.6499 li
260.389 20.6499 li
260.639 20.6001 li
260.889 20.6001 li
261.139 20.5498 li
261.338 20.5498 li
261.588 20.5 li
261.838 20.4497 li
262.088 20.4497 li
262.338 20.3999 li
262.539 20.3999 li
262.789 20.3501 li
263.039 20.3501 li
263.289 20.2998 li
263.539 20.2998 li
263.738 20.25 li
263.988 20.25 li
264.238 20.1997 li
264.488 20.1997 li
264.738 20.1499 li
264.938 20.1499 li
265.188 20.1001 li
265.438 20.1001 li
265.688 20.0498 li
265.938 20.0498 li
266.139 20 li
266.389 20 li
266.639 19.9502 li
266.889 19.9502 li
267.139 19.8999 li
267.338 19.8999 li
267.588 19.8501 li
267.838 19.8501 li
227.289 26.5 mo
227.539 26.4497 li
227.789 26.3999 li
228.039 26.2998 li
228.238 26.25 li
228.488 26.1997 li
228.738 26.1499 li
228.988 26.0996 li
229.238 26.0498 li
229.438 25.9497 li
229.688 25.8999 li
229.938 25.8496 li
230.188 25.7998 li
230.438 25.75 li
230.639 25.6997 li
230.889 25.6499 li
231.139 25.5996 li
231.389 25.5498 li
231.639 25.4497 li
231.838 25.3999 li
232.088 25.3496 li
232.338 25.2998 li
232.588 25.25 li
232.838 25.1997 li
233.039 25.1499 li
233.289 25.0996 li
233.539 25.0498 li
233.789 25 li
234.039 24.9497 li
234.238 24.8999 li
234.488 24.8501 li
234.738 24.7998 li
234.988 24.75 li
235.188 24.6997 li
235.438 24.6499 li
235.688 24.6001 li
235.938 24.5498 li
236.188 24.5 li
236.389 24.4497 li
236.639 24.3999 li
236.889 24.3501 li
237.139 24.2998 li
237.389 24.25 li
237.588 24.2002 li
237.838 24.1499 li
238.088 24.1001 li
238.338 24.0498 li
238.588 24 li
238.789 23.9502 li
239.039 23.8999 li
239.289 23.8501 li
239.539 23.7998 li
239.789 23.75 li
239.988 23.75 li
240.238 23.7002 li
240.488 23.6499 li
240.738 23.6001 li
240.988 23.5498 li
241.188 23.5 li
241.438 23.4502 li
241.688 23.3999 li
241.938 23.3501 li
242.188 23.3501 li
242.389 23.2998 li
242.639 23.25 li
242.889 23.2002 li
243.139 23.1499 li
243.389 23.1001 li
243.588 23.0498 li
243.838 23.0498 li
244.088 23 li
244.338 22.9502 li
244.588 22.8999 li
244.789 22.8501 li
245.039 22.8003 li
245.289 22.8003 li
245.539 22.75 li
245.789 22.7002 li
245.988 22.6499 li
246.238 22.6001 li
246.488 22.6001 li
246.738 22.5503 li
246.988 22.5 li
247.188 22.4502 li
247.438 22.4502 li
247.688 22.4004 li
247.938 22.3501 li
248.188 22.3003 li
248.389 22.3003 li
248.639 22.25 li
248.889 22.2002 li
249.139 22.1504 li
249.389 22.1504 li
249.588 22.1001 li
249.838 22.0503 li
250.088 22 li
250.338 22 li
250.588 21.9502 li
250.789 21.9004 li
251.039 21.9004 li
251.289 21.8501 li
251.539 21.8003 li
251.789 21.75 li
251.988 21.75 li
252.238 21.7002 li
202.338 34.6997 mo
202.588 34.5996 li
202.838 34.5 li
203.088 34.3999 li
203.289 34.2998 li
203.539 34.1997 li
203.789 34.0996 li
204.039 34 li
204.289 33.8999 li
204.488 33.7998 li
204.738 33.6997 li
204.988 33.5996 li
205.238 33.4995 li
205.488 33.3999 li
205.688 33.3496 li
205.938 33.2495 li
206.188 33.1499 li
206.438 33.0498 li
206.688 32.9497 li
206.889 32.8496 li
207.139 32.7998 li
207.389 32.6997 li
207.639 32.5996 li
207.889 32.4995 li
208.088 32.3994 li
208.338 32.3496 li
208.588 32.2495 li
208.838 32.1494 li
209.088 32.0498 li
209.289 31.9497 li
209.539 31.8994 li
209.789 31.7998 li
210.039 31.6997 li
210.289 31.6494 li
210.488 31.5498 li
210.738 31.4497 li
210.988 31.3496 li
211.238 31.2998 li
211.488 31.1997 li
211.688 31.0996 li
211.938 31.0498 li
212.188 30.9497 li
212.438 30.8994 li
212.688 30.7998 li
212.889 30.6997 li
213.139 30.6494 li
213.389 30.5498 li
213.639 30.4497 li
213.838 30.3994 li
214.088 30.2998 li
214.338 30.2495 li
214.588 30.1494 li
214.838 30.0996 li
215.039 29.9995 li
215.289 29.8994 li
215.539 29.8496 li
215.789 29.7495 li
216.039 29.6997 li
216.238 29.5996 li
216.488 29.5498 li
216.738 29.4497 li
216.988 29.3994 li
217.238 29.2998 li
217.438 29.2495 li
217.688 29.1494 li
217.938 29.0996 li
218.188 28.9995 li
218.438 28.9497 li
218.639 28.8994 li
218.889 28.7998 li
219.139 28.7495 li
219.389 28.6494 li
219.639 28.5996 li
219.838 28.4995 li
220.088 28.4497 li
220.338 28.3994 li
220.588 28.2998 li
220.838 28.2495 li
221.039 28.1494 li
221.289 28.0996 li
221.539 28.0498 li
221.789 27.9497 li
222.039 27.8994 li
222.238 27.8496 li
222.488 27.7495 li
222.738 27.6997 li
222.988 27.6494 li
223.238 27.5498 li
223.438 27.4995 li
223.688 27.4497 li
223.938 27.3496 li
224.188 27.2998 li
224.438 27.2495 li
224.639 27.1997 li
224.889 27.0996 li
225.139 27.0498 li
225.389 26.9995 li
225.639 26.9497 li
225.838 26.8496 li
226.088 26.7998 li
226.338 26.7495 li
226.588 26.6997 li
226.838 26.5996 li
227.039 26.5498 li
227.289 26.4995 li
177.389 47.6997 mo
177.639 47.5498 li
177.889 47.3999 li
178.139 47.25 li
178.338 47.0996 li
178.588 46.9497 li
178.838 46.7998 li
179.088 46.6499 li
179.338 46.5 li
179.539 46.3496 li
179.789 46.1997 li
180.039 46.0498 li
180.289 45.9497 li
180.539 45.7998 li
180.738 45.6499 li
180.988 45.5 li
181.238 45.3496 li
181.488 45.1997 li
181.738 45.0498 li
181.938 44.8999 li
182.188 44.7998 li
182.438 44.6499 li
182.688 44.5 li
182.938 44.3496 li
183.139 44.1997 li
183.389 44.0498 li
183.639 43.9497 li
183.889 43.7998 li
184.139 43.6499 li
184.338 43.5 li
184.588 43.3999 li
184.838 43.25 li
185.088 43.0996 li
185.338 43 li
185.539 42.8496 li
185.789 42.6997 li
186.039 42.5996 li
186.289 42.4497 li
186.539 42.2998 li
186.738 42.1997 li
186.988 42.0498 li
187.238 41.8999 li
187.488 41.7998 li
187.738 41.6499 li
187.938 41.5498 li
188.188 41.3999 li
188.438 41.25 li
188.688 41.1499 li
188.938 41 li
189.139 40.8999 li
189.389 40.7495 li
189.639 40.6499 li
189.889 40.4995 li
190.139 40.3999 li
190.338 40.2495 li
190.588 40.1499 li
190.838 39.9995 li
191.088 39.8999 li
191.338 39.7495 li
191.539 39.6499 li
191.789 39.5498 li
192.039 39.3999 li
192.289 39.2998 li
192.488 39.1499 li
192.738 39.0498 li
192.988 38.9497 li
193.238 38.7998 li
193.488 38.6997 li
193.688 38.5996 li
193.938 38.4497 li
194.188 38.3496 li
194.438 38.2495 li
194.688 38.0996 li
194.889 37.9995 li
195.139 37.8994 li
195.389 37.7495 li
195.639 37.6494 li
195.889 37.5498 li
196.088 37.4497 li
196.338 37.2998 li
196.588 37.1997 li
196.838 37.0996 li
197.088 36.9995 li
197.289 36.8994 li
197.539 36.7495 li
197.789 36.6494 li
198.039 36.5498 li
198.289 36.4497 li
198.488 36.3496 li
198.738 36.2495 li
198.988 36.0996 li
199.238 35.9995 li
199.488 35.8994 li
199.688 35.7998 li
199.938 35.6997 li
200.188 35.5996 li
200.438 35.4995 li
200.688 35.3994 li
200.889 35.2998 li
201.139 35.1997 li
201.389 35.0996 li
201.639 34.9995 li
201.889 34.8994 li
202.088 34.7993 li
202.338 34.6997 li
152.438 66.3999 mo
152.688 66.1997 li
152.938 66 li
153.188 65.7998 li
153.389 65.5498 li
153.639 65.3496 li
153.889 65.1499 li
154.139 64.9497 li
154.389 64.75 li
154.588 64.5498 li
154.838 64.3496 li
155.088 64.1499 li
155.338 63.9497 li
155.588 63.75 li
155.789 63.5498 li
156.039 63.3496 li
156.289 63.1499 li
156.539 62.9497 li
156.789 62.75 li
156.988 62.5996 li
157.238 62.3999 li
157.488 62.1997 li
157.738 62 li
157.988 61.7998 li
158.188 61.5996 li
158.438 61.3999 li
158.688 61.1997 li
158.938 61 li
159.188 60.8501 li
159.389 60.6499 li
159.639 60.4497 li
159.889 60.25 li
160.139 60.0498 li
160.389 59.8999 li
160.588 59.6997 li
160.838 59.5 li
161.088 59.2998 li
161.338 59.1001 li
161.588 58.9502 li
161.789 58.75 li
162.039 58.5498 li
162.289 58.3501 li
162.539 58.2002 li
162.789 58 li
162.988 57.7998 li
163.238 57.6499 li
163.488 57.4502 li
163.738 57.25 li
163.988 57.1001 li
164.188 56.8999 li
164.438 56.7002 li
164.688 56.5498 li
164.938 56.3501 li
165.188 56.2002 li
165.389 56 li
165.639 55.8501 li
165.889 55.6499 li
166.139 55.4502 li
166.389 55.2998 li
166.588 55.1001 li
166.838 54.9502 li
167.088 54.75 li
167.338 54.6001 li
167.588 54.3999 li
167.789 54.25 li
168.039 54.0498 li
168.289 53.8999 li
168.539 53.7002 li
168.789 53.5498 li
168.988 53.3999 li
169.238 53.2002 li
169.488 53.0498 li
169.738 52.8501 li
169.938 52.7002 li
170.188 52.5498 li
170.438 52.3501 li
170.688 52.2002 li
170.938 52.0498 li
171.139 51.8501 li
171.389 51.7002 li
171.639 51.5498 li
171.889 51.3501 li
172.139 51.2002 li
172.338 51.0498 li
172.588 50.8501 li
172.838 50.7002 li
173.088 50.5498 li
173.338 50.3999 li
173.537 50.2002 li
173.787 50.0498 li
174.037 49.8999 li
174.287 49.75 li
174.537 49.6001 li
174.738 49.3999 li
174.988 49.25 li
175.238 49.1001 li
175.488 48.9502 li
175.738 48.7998 li
175.938 48.6499 li
176.188 48.5 li
176.438 48.3501 li
176.688 48.2002 li
176.938 48 li
177.139 47.8501 li
177.389 47.7002 li
127.488 89.4497 mo
127.738 89.1997 li
127.988 89 li
128.238 88.75 li
128.438 88.5 li
128.688 88.2998 li
128.938 88.0498 li
129.188 87.7998 li
129.438 87.5996 li
129.638 87.3496 li
129.888 87.1499 li
130.138 86.8999 li
130.388 86.6499 li
130.638 86.4497 li
130.838 86.1997 li
131.088 85.9497 li
131.338 85.75 li
131.588 85.5 li
131.838 85.2998 li
132.038 85.0498 li
132.288 84.7998 li
132.538 84.5996 li
132.788 84.3496 li
133.038 84.1499 li
133.238 83.8999 li
133.488 83.6499 li
133.738 83.4497 li
133.988 83.1997 li
134.238 83 li
134.438 82.75 li
134.688 82.5498 li
134.938 82.2998 li
135.188 82.0498 li
135.438 81.8496 li
135.638 81.5996 li
135.888 81.3999 li
136.138 81.1499 li
136.388 80.9497 li
136.638 80.6997 li
136.838 80.5 li
137.088 80.25 li
137.338 80.0498 li
137.588 79.7998 li
137.838 79.5996 li
138.038 79.3496 li
138.288 79.1499 li
138.538 78.8999 li
138.788 78.6997 li
139.039 78.4497 li
139.238 78.25 li
139.488 78 li
139.738 77.7998 li
139.988 77.5498 li
140.238 77.3496 li
140.438 77.0996 li
140.688 76.8999 li
140.938 76.6499 li
141.188 76.4497 li
141.438 76.1997 li
141.639 76 li
141.889 75.7998 li
142.139 75.5498 li
142.389 75.3496 li
142.639 75.0996 li
142.838 74.8999 li
143.088 74.6997 li
143.338 74.4497 li
143.588 74.25 li
143.838 74 li
144.039 73.7998 li
144.289 73.5996 li
144.539 73.3496 li
144.789 73.1499 li
145.039 72.9497 li
145.238 72.6997 li
145.488 72.5 li
145.738 72.2998 li
145.988 72.0498 li
146.238 71.8496 li
146.438 71.6499 li
146.688 71.3999 li
146.938 71.1997 li
147.188 71 li
147.438 70.7998 li
147.639 70.5498 li
147.889 70.3496 li
148.139 70.1499 li
148.389 69.9497 li
148.588 69.6997 li
148.838 69.5 li
149.088 69.2998 li
149.338 69.0996 li
149.588 68.8999 li
149.787 68.6499 li
150.037 68.4497 li
150.287 68.25 li
150.537 68.0498 li
150.787 67.8496 li
150.988 67.6499 li
151.238 67.3999 li
151.488 67.1997 li
151.738 67 li
151.988 66.7998 li
152.188 66.5996 li
152.438 66.3999 li
102.538 113.2 mo
102.788 113 li
103.038 112.8 li
103.288 112.55 li
103.538 112.35 li
103.738 112.149 li
103.988 111.899 li
104.238 111.7 li
104.488 111.45 li
104.688 111.25 li
104.938 111.05 li
105.188 110.8 li
105.438 110.6 li
105.688 110.35 li
105.888 110.149 li
106.138 109.899 li
106.388 109.7 li
106.638 109.45 li
106.888 109.25 li
107.088 109.05 li
107.338 108.8 li
107.588 108.6 li
107.838 108.35 li
108.088 108.149 li
108.288 107.899 li
108.538 107.7 li
108.788 107.45 li
109.038 107.25 li
109.288 107 li
109.488 106.8 li
109.738 106.55 li
109.988 106.35 li
110.238 106.1 li
110.488 105.85 li
110.688 105.649 li
110.938 105.399 li
111.188 105.2 li
111.438 104.95 li
111.688 104.75 li
111.888 104.5 li
112.138 104.3 li
112.388 104.05 li
112.638 103.8 li
112.888 103.6 li
113.088 103.35 li
113.338 103.149 li
113.588 102.899 li
113.838 102.7 li
114.088 102.45 li
114.289 102.2 li
114.539 102 li
114.789 101.75 li
115.039 101.55 li
115.289 101.3 li
115.488 101.05 li
115.738 100.85 li
115.988 100.6 li
116.238 100.35 li
116.488 100.149 li
116.688 99.8994 li
116.938 99.7002 li
117.188 99.4502 li
117.438 99.2002 li
117.688 99 li
117.888 98.75 li
118.138 98.5 li
118.388 98.2998 li
118.638 98.0498 li
118.888 97.8496 li
119.088 97.5996 li
119.338 97.3496 li
119.588 97.1494 li
119.838 96.8994 li
120.088 96.6494 li
120.289 96.4502 li
120.539 96.2002 li
120.789 95.9502 li
121.039 95.75 li
121.289 95.5 li
121.488 95.25 li
121.738 95.0498 li
121.988 94.7998 li
122.238 94.5498 li
122.488 94.3496 li
122.688 94.0996 li
122.938 93.8496 li
123.188 93.6499 li
123.438 93.3999 li
123.688 93.1499 li
123.888 92.9497 li
124.139 92.6997 li
124.389 92.4497 li
124.639 92.25 li
124.889 92 li
125.088 91.7998 li
125.338 91.5498 li
125.588 91.2998 li
125.838 91.0996 li
126.088 90.8496 li
126.289 90.5996 li
126.539 90.3999 li
126.789 90.1499 li
127.039 89.8999 li
127.238 89.6997 li
127.488 89.4497 li
77.5884 133.55 mo
77.8384 133.399 li
78.0884 133.2 li
78.3384 133.05 li
78.5884 132.899 li
78.7881 132.7 li
79.0381 132.55 li
79.2881 132.35 li
79.5381 132.2 li
79.7881 132 li
79.9883 131.85 li
80.2383 131.649 li
80.4883 131.5 li
80.7383 131.3 li
80.9883 131.149 li
81.188 130.95 li
81.438 130.75 li
81.6885 130.6 li
81.9385 130.399 li
82.1885 130.25 li
82.3882 130.05 li
82.6382 129.85 li
82.8882 129.699 li
83.1382 129.5 li
83.3384 129.35 li
83.5884 129.149 li
83.8384 128.949 li
84.0884 128.8 li
84.3384 128.6 li
84.5381 128.399 li
84.7881 128.199 li
85.0381 128.05 li
85.2881 127.85 li
85.5381 127.649 li
85.7383 127.449 li
85.9883 127.3 li
86.2383 127.1 li
86.4883 126.899 li
86.7383 126.699 li
86.9385 126.55 li
87.1885 126.35 li
87.4385 126.149 li
87.6885 125.949 li
87.9385 125.749 li
88.1382 125.55 li
88.3882 125.399 li
88.6382 125.199 li
88.8882 124.999 li
89.1382 124.8 li
89.3384 124.6 li
89.5884 124.399 li
89.8384 124.199 li
90.0884 123.999 li
90.3384 123.8 li
90.5386 123.6 li
90.7886 123.399 li
91.0386 123.199 li
91.2886 123.05 li
91.5386 122.85 li
91.7383 122.649 li
91.9883 122.449 li
92.2383 122.249 li
92.4883 122.05 li
92.7383 121.85 li
92.9385 121.6 li
93.1885 121.399 li
93.4385 121.199 li
93.6885 120.999 li
93.9385 120.799 li
94.1382 120.6 li
94.3882 120.399 li
94.6382 120.199 li
94.8882 119.999 li
95.1382 119.799 li
95.3384 119.6 li
95.5884 119.399 li
95.8384 119.149 li
96.0884 118.949 li
96.3384 118.749 li
96.5386 118.549 li
96.7886 118.35 li
97.0386 118.149 li
97.2886 117.899 li
97.5386 117.699 li
97.7383 117.499 li
97.9883 117.299 li
98.2383 117.1 li
98.4883 116.85 li
98.7383 116.649 li
98.9385 116.449 li
99.1885 116.249 li
99.4385 115.999 li
99.6885 115.799 li
99.9385 115.599 li
100.139 115.399 li
100.389 115.149 li
100.639 114.949 li
100.889 114.749 li
101.139 114.499 li
101.338 114.299 li
101.588 114.099 li
101.838 113.849 li
102.088 113.649 li
102.338 113.449 li
102.539 113.199 li
52.6382 148.399 mo
52.8882 148.3 li
53.1382 148.149 li
53.3882 148.05 li
53.6382 147.95 li
53.8384 147.8 li
54.0884 147.7 li
54.3384 147.55 li
54.5884 147.45 li
54.8384 147.35 li
55.0381 147.2 li
55.2881 147.1 li
55.5381 146.95 li
55.7881 146.85 li
56.0381 146.75 li
56.2383 146.6 li
56.4883 146.5 li
56.7383 146.35 li
56.9883 146.25 li
57.2383 146.1 li
57.438 146 li
57.688 145.85 li
57.9385 145.75 li
58.1885 145.6 li
58.4385 145.45 li
58.6382 145.35 li
58.8882 145.2 li
59.1382 145.1 li
59.3882 144.95 li
59.6382 144.85 li
59.8384 144.7 li
60.0884 144.55 li
60.3384 144.45 li
60.5884 144.3 li
60.8384 144.15 li
61.0381 144.05 li
61.2881 143.9 li
61.5381 143.75 li
61.7881 143.65 li
61.9883 143.5 li
62.2383 143.35 li
62.4883 143.25 li
62.7383 143.1 li
62.9883 142.95 li
63.1885 142.8 li
63.4385 142.7 li
63.6885 142.55 li
63.9385 142.4 li
64.1885 142.25 li
64.3882 142.1 li
64.6382 142 li
64.8882 141.85 li
65.1382 141.7 li
65.3882 141.55 li
65.5884 141.4 li
65.8384 141.25 li
66.0884 141.1 li
66.3384 141 li
66.5884 140.85 li
66.7886 140.7 li
67.0386 140.55 li
67.2886 140.4 li
67.5386 140.25 li
67.7886 140.1 li
67.9883 139.95 li
68.2383 139.8 li
68.4883 139.65 li
68.7383 139.5 li
68.9883 139.35 li
69.1885 139.2 li
69.4385 139.05 li
69.6885 138.9 li
69.9385 138.75 li
70.1885 138.6 li
70.3882 138.45 li
70.6382 138.3 li
70.8882 138.1 li
71.1382 137.95 li
71.3882 137.8 li
71.5884 137.65 li
71.8384 137.5 li
72.0884 137.35 li
72.3384 137.2 li
72.5884 137 li
72.7886 136.85 li
73.0386 136.7 li
73.2886 136.55 li
73.5386 136.4 li
73.7886 136.2 li
73.9883 136.05 li
74.2383 135.9 li
74.4883 135.75 li
74.7383 135.55 li
74.9883 135.4 li
75.1885 135.25 li
75.4385 135.1 li
75.6885 134.9 li
75.9385 134.75 li
76.1885 134.6 li
76.3887 134.4 li
76.6387 134.25 li
76.8887 134.05 li
77.1387 133.9 li
77.3887 133.75 li
77.5884 133.55 li
28.188 157.85 mo
28.438 157.75 li
28.688 157.7 li
28.8882 157.6 li
29.1382 157.55 li
29.3882 157.45 li
29.6382 157.399 li
29.8882 157.3 li
30.0884 157.25 li
30.3384 157.149 li
30.5884 157.1 li
30.8384 157 li
31.0884 156.95 li
31.2881 156.85 li
31.5381 156.8 li
31.7881 156.7 li
32.0381 156.649 li
32.2881 156.55 li
32.4883 156.5 li
32.7383 156.399 li
32.9883 156.3 li
33.2383 156.25 li
33.4883 156.149 li
33.688 156.1 li
33.9385 156 li
34.1885 155.899 li
34.4385 155.85 li
34.6885 155.75 li
34.8882 155.7 li
35.1382 155.6 li
35.3882 155.5 li
35.6382 155.45 li
35.8882 155.35 li
36.0884 155.25 li
36.3384 155.149 li
36.5884 155.1 li
36.8384 155 li
37.0884 154.899 li
37.2881 154.85 li
37.5381 154.75 li
37.7881 154.649 li
38.0381 154.55 li
38.2881 154.5 li
38.4883 154.399 li
38.7383 154.3 li
38.9883 154.2 li
39.2383 154.149 li
39.4385 154.05 li
39.6885 153.95 li
39.9385 153.85 li
40.1885 153.75 li
40.4385 153.649 li
40.6382 153.6 li
40.8882 153.5 li
41.1382 153.4 li
41.3882 153.3 li
41.6382 153.2 li
41.8384 153.1 li
42.0884 153 li
42.3384 152.9 li
42.5884 152.85 li
42.8384 152.75 li
43.0386 152.65 li
43.2886 152.55 li
43.5386 152.45 li
43.7886 152.35 li
44.0386 152.25 li
44.2383 152.15 li
44.4883 152.05 li
44.7383 151.95 li
44.9883 151.85 li
45.2383 151.75 li
45.4385 151.65 li
45.6885 151.55 li
45.9385 151.45 li
46.1885 151.351 li
46.4385 151.25 li
46.6382 151.15 li
46.8882 151.05 li
47.1382 150.9 li
47.3882 150.8 li
47.6382 150.7 li
47.8384 150.601 li
48.0884 150.5 li
48.3384 150.4 li
48.5884 150.3 li
48.8384 150.2 li
49.0386 150.05 li
49.2886 149.95 li
49.5386 149.851 li
49.7886 149.75 li
50.0386 149.65 li
50.2383 149.5 li
50.4883 149.4 li
50.7383 149.3 li
50.9883 149.2 li
51.2383 149.101 li
51.4385 148.95 li
51.6885 148.851 li
51.9385 148.75 li
52.1885 148.601 li
52.4385 148.5 li
52.6387 148.4 li
239.488 164.25 mo
259.438 164.25 li
@
0.5 lw
[] 0 dsh
28.188 0.25 mo
28.188 170.899 li
267.838 170.899 li
267.838 0.25 li
28.188 0.25 li
28.188 0.25 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWFF+Helvetica*1 uf/DVPWFF+Helvetica uf/Helvetica uf/DVPWFG+Symbol*1 uf/DVPWFG+Symbol uf/Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (logisticscaling.eps)%%CreationDate: 10/4/10 2:24 PM%AI9_DataStream%Gb",KLNY.-''T2nrk[5pPNb>U^gqE&ff0Z!2V02fAp<t7T1\CANelWVfm!/8);IN[P"JUu<N3Xfr,=RXF9`o`iP./fI$34qd]&4.%9\bH#H'd,em9WBuX"of*.N(_[Kh.Be"hA_pfUhc4_6cBI[\_*A0^K7hPKZM1f5,q6YKOi"'KrTk]t^@W\(sHUJf@d@pKPNV<U+<W%)YL[>a0B`h(4Ro[HW#,KmPh$_km.O?Gi:MElh3APZ[POcB/X4(!Zm9'\4&??k(f2S^t7XeD:%^q3`7!+;sMm/kk,'b,[^*7Pr,&+%hP2to*t,!+A%I/X%5*g&V)\ST9dEXlOiJ8C4I&5LBoYt:p^Q-@V=`0+9ZPClG;sj@'<p(dJ(/7/-&bof917bY@QG"6g9k/uFcg&R%%1]iZ:WGAVaV]<$+^OrF/,_!)ES>5Q#LhYmPB=:jD%f%n`m_!VIo+H)BY]dFJNUW9oq_-&TF3a!O4**qdpYc3acGr#j^&U>^u><<%op7$0Y++G^Bo47\YW%1uAi<O,7p_ld3,/@DN<oXe_"gM>>RtamCVp4j:GS>+Q1;MS6C6\dOMKDe\ICC9#U#]C#2d>M9!q5I/p0!K%kMtu#GE>*tOQ!7!],bb\P/9\Gr8?-r;Uk_\jaY]DeCWqa)TW@We#@;de\cBhdjkLXq@h,X6*lI\`=&Z)1o_NQ-'-&l:i&mr#\FK>%N2lO=NVq[4QrG(%-]7D_8AK.)%DRUKnl-=^Y:.7l;1uEQ8D]ZUn2:"kOap>d"Pb:9:b%TX;MdfPXONY56^`$7b,!ELpc=t#;X$$&%Jh-VM;M>1:.MUga635pW$;dU)L:?8b+ou&;bOE5N-Jsn#PP115&;]C!I&Xap7@+g>TbR,*I\@JJ8a.[L#<dZG-j)Va?g+tN$1]\?%$%ChCH3CuZ'>Y?])0uG#cu8[e:SCPaP@0TiLJlJPpk:Kb1-ALT#?jlA9X%'l"Ma"jdW<i_dWX%s!ZbIIN0."ir.@no5PTr$a9[r8%PBUQUi%L=Hr[B'cYX6'XrkU8C61;ni__5^a4Fpif"oX'\15]V.&A/YN!)]-dcuN^s-t>a#8$EK"#i69.OIhZe6d&'5#[C9611$c0%ndil.n!'4H]n<L[YK:#4+8eGS1;BN4"=N87pk:KM4-s$:fui"lQm30`lrN8Q109^n"t_2YL!0^3>ps2Tn4m.WYYO*h]Ks`+&Q/Bo%g('qnkbNCm4aBj&Od;2r8S0arF+P?/6Q,nKo2f/`j;XFe=fpE#;XgL,I58F"H*>IWpfa.Sb"C8T=i%C%%aZC'POPu7%Ag1!HPO&d%?LfDgF8-jT,ug"nrs8aPU\uM=@PMo,r?_JKhKYPQdJf;YaX"FKrfVc1'Y.#9'\Fl1?S4k*BRe.=I%K,/J&spA[oanO[(k[/WC60^%^Z6K7rZh%T`X[I>\<;4#Nr2?E'4QYt]NjNTj`4VIV34:B+9&VCRu5/g<&R56>[G$_/:Z(!V784gA-p)1>CEW'&f9`K`GI8nb;mL2%;mCA*(Z651jiLjQ0)porbGc=`60VpBi!LUB?hg)fKb=\(Q]UMZA`FtPOT>Cfa^e7>_V]SVi$UMZ)HoM[%W*HP?juOkBi5%t6d6f/%n2c;).$0ZoE&"IAp^Z5\:ss:d:J&_eLadThQ2_.Q;Et!fQVsK<fj]?7aBsNVFHo<4(\K)=s4)Jl0CErmAgY`$T`hL8]df56,:!S5%l+a#H\lJl:Gn+s(\piu8!$e](QcM9:G7&Hj[>&8'p9HShi#PrHg=d`\9i`5O4X"OV7T#91'jAXgAsJV.<bA%KV`Z36jcXAl*8PP@%k.$.Q"j?bqR)CS.n^_Z=g7MF"$oLs8PueE]f<5<4hXDi@.[8jmS's'X8LsV2g:j;sCNE3/L3OKtg*ubp`L>L=W"6'E[:QSVF_eA*%bI-nd'j#tkbN7hq7VJ/YUt$6\J,-IVDY1>1=1GcS%'PXuOZ2rg:a(KL\X\6hm@&W*P,VNOJs'+0c)\@.EIp2E5tPgf2%5TB#32i'%Oued,+'Q:U\Kn,eaH=$1c@69)K`u%r@lSaFVC?:S/mHmLQA[Jh][u9GSj*q/!!DdS=6PMG9,X:PJk6\ueBC3'-IQ#4?fm?8'@M3N%#t<;M2:\dKR"YB3a]L(A+QTgpfec@`YBX/dBb`/n9#U@mE!-(8'55%Rq'#>$]#G<0l3^O"E(Z&=OVX4ee\93EAuaQ\6,oN6='uX.%Vno*I"8)b4dSoNBXs'Z.PpqCs.Y10'Mpg`i>([0h<eX^TAtP)InB,PZ;t=Ud<N;k1;J;Ns9e<L<9pmaO\HG'F<Qp`UQ/"#I7q%L<%H3.JabWor4C3@UZ6j+s1<[h[<^`i$$n.KST.'6G;+;PZ9^gkTuUIU9d)nmn=37Q7eAUG2niO)Y97SbQa:m$DUdSL+DDOHhfr.#i^%R%ZqUc5#&ekBT(aRt8`'Qg+<XBXL`VR^?>[3p8YV`Y;^b+L`OA.Q'T:9c-anf!df>S%Z,G,thV[]uh;.;HF>(.W&@_eEW-@T(Z`I%?DAXlWYcqc@[]EqAWmH8J`)\fd5"6T<0%_!.1L'tPUm>\lU7?A.O>l'?cPT=daZi@/d:,\oUPQ4k*-3:?/A\PUAH6"Pdj$-:u3TX%aj_K-[U3/RVOA4/n[MUEOnLWcXgUsl>HDA8NRpW*E<E`^EP9k!U2!Y"#\Is^OGo+fUoCPD*i#!ZR5Bh2_TYrcfqa%a:jIo&:W9gf%GA%sqI@F/G:Gci9fL@KqN\^QuZMMXY5d2^%=+^UbQSl%Xnr/kVYYJ8#jE%G93D,(RmM.4Os'O0PBY:"q'WkH$J_nAM(+4WU-YmgU%XHt15\u'g&OtO+GLf<n)7l2r#6K7*,,0rb&"o:+()G)Rsm>aG!cgWg!5gbFE?@fLR&brJ9RP.dn8)NDbq+0C]N*AaB/!l7*:hc^d%3b4fi$0,j^o[q,f;h^p7M6`qVb*$eUZpmCh4Fi@_@8WoM-1agl;DLIol">,iVUPUWLT4F6$7@UR(\q8;p(I52MSu?"+stb[`QD#C%m3>XC0K1]M(+MP)dk+YjU3o\F!G?5B_Tu4s-eD6sg8<Lf@()/B,>1U_[Lp%h[n]GW#i3D&'ag=)0MDBm/Wi%\ab7KtU<O:aU/L*_%3lB-e4,m-rEi"_^gs`pM($'.USe.==1tU5[W-kYIOuU:3/3V>oTWC\2Q6TG[cS\k'VY!r)NG7e%'=siG-E"0tU^76iR?^Dq=G&R)%?NkAfkPDs#e\\jB%FYSeSJg]p3S-gkKXd\8$Y\*RmB=q6V#=(YbkchdY?8N1s8TB36]Z3$o.#f#A.(gu0+n.Nf&os-CQ08]r0;^A%P[F:pcgcT69CoGAW84Fn>+'aiUpQT?120mkQ05]hH3sdM:AH4g95>O'3fTmJXJsf_"VSX<6'emnIO1d(g-a^CA]l@Y-((#+=?8jr%<D+?8&^[O5f__pC"fodM)K]?tP["rXIFt<d.(c8InZXtM+Rdfqr8pV?c:4s,Q^Ee^c\>A4dN*`-UlBI?qCume-,Dc\1tUtaA+X@G%c&L-:BV@##]"ME+>&(KY;^m#NmIiS=oNWj-MVb:=1eEfVXtA@DGK9)Rs1KfY45/3,ORJ[Ko!VH,KYMUt-1\$'I4D4gG"M@4;Pm*P%l)J;!\9_4u8BME6fca@=W0SHeVT_TY)(@VqMRoN<[;;c:nKEme*Rm>GMRF,2UQ_Z6mQiKQ;B*(+UTI\&-V^A2jqod+qM_.%qTV=(%eO*FW@j_FZ>:8,GNrC)D5<c!ml+#E/qT\P3PdE^[(E!XZ*U,_U.n.c3^#nD)V*5gjAs7[f0[g@XJ,bf=dJhAbfOZP1r#LeZmh2Y#%4-8C3hjh&d4h+>r1sp@^qY*[P5USY2Igr.#^Y?G6+((bqeSR6lkQCLYpYHGjY.5Dl1GmTZIlQgemo/V6?pa/O\g-G7ACPEgd2X$_%S35Kc5GdQTk/a3JRM;%`p^`t;#fX;OjbD9An$M9=@Aj!((FFrq1_o0_p$-t\,U6K]NJG$?GbqA+`cnpR=7j1a3\4&;"?AM0E/#C#%+F'uqFk1;&,di3u"r3\X%VHG379n4[2+:0fFcO\)P1mDY5u!>$YL1h,VA?1o6Kb/k3E;^"mrMCdL6T3AX19CW3\XHq8N07i9a7?L%Cl`#=O!R]*fu=DO/8;Da?.%!Oi1i<(om=s:'Wo:35l-AHS*2rcFU>[K`/e6.-aUOOff2>PM8KcL;l)d,#X2+RNE=XdM=OMiN,"EK%=omX+ErA6Q6F9OfAg>nF[\W6(7hRU[iW>s$69Ud'df1rl(O4?=A@d<4k+MU<1nHONY35ktM+tQ'"*b7h&5d+cJL3TT)HX<!+$j%3%"-ZmbF8FQX%hT89#-ctF96md"JV&%m?iB+$d3PB</jrG2I5Kb68T`(t%ol'>epjLc&2=8DcI(mkd+.b%O`.U?LU/]dh7q>0Ul2,J%"O1Ij+TVZZ&M!4BabjEt]CI7!#?9o6"s#sfTSZjIO[f+Tn1gNn?KHL.:XlDWKXc-2nC_qQMc((g98LaLb3JK#d_q+u_40-iI]&h%%'AaHeDN73Mp8$A[FjT$pR4ET<r]`o4)<9&jf@QY)qTD[aZ`EL!e9'M7Kl.SA'6qU9=4.>"H&o\=:XIDiriUsrgm9iDBLZs]dedu7%WR#.G,E.WoamC;/clBsUG0k39EC%OVJG95kBTiA'E5c\X>)2`O;VEmXLEE>,\5X:=(Hk4sr$&iAah@)f@-4,5;gLOjb*YI[Tsk]`%gF;c<VEbtb07!As/,F2Vbm8Xm+18Qjl"^YfK(%eb::gBVmbL*<4oH1&aE*=g.hH5N==*MV;&C`#m(kar1o>c7AFTXoP2<9oAkBJb%+2Zb3Pa^V]VBisJS)a&.?`bKQEdUHu%:::cQ<Ygp!Nn^(EQQXs9,!FqosSl5nnOHEeXuN3h,+]jAi(QhL1=mA-;(3GLcT[in#0ke%S9(YB"7!/h3Vq5'$dJPL&3Vjka2<BWDe(RlDAJsu;nP0LjqIFb5B)Cfi4.N0ncBHE`rfF*dKk!&L9U>."i>A\?N!M`*$'E2Ja`X]%7O"&MG&gBWT[Y&Xs.2Js]-)C?+t4kXGl=:QU8KgBJO4%LULgL^UV9H7/UXN3D<VCj41'J5R(Nm4A4<YjTL8d76-(-A2,SRLQIi`A%'6iPb<To_:&\u\n4]TU\$Ub=giAKjt]uH!t^)i<"iC=NG2HaR):qKZ(N$90T[q+LjLB!A?+-PCqo!-o,k$UN"!oIa@^pck+kVigb%<R*HB;)^2ql:l&oUV0Kc\qQm.X\r8qMrL4T[mSuNjktK.FlNDA?&"2e#-"M+6$:=-I&:/XFDP%G#ej5aK(#Y@W+G4?W\_6WP--XP%e,#gT<Vmq4A5QJ`,EC3tZJHgui+7eM_'_Zoq4a@38rb<:8gR\f>/@+]:oYqdTT-B8FV/suEOWc^dY-Lq\G1/NRFE1'3_>MBFIsa$%_1obGA/_5e_[Rd/6"*krEmJ*p\fN5NlRNTYl\MEi&%1_>"E.2Ap"g+jWf2_>;/PedFSRV&2X4s]D<);nl:h*pnhY<u6,#T[:QSgL%Sjf+(Ol*FXlS3Y&Ir(XarZIAV5*d:(=')`r<171A<?'`1`uFjED">,V4WO1Fp?>q`c'0=1VbmAb!MbZ>(n;*BVTk4`!_,_knamn.%"dQNOJ6r5=CG.LV/&l1gDVGMK`Hr=4H+*dX1(kWSm<a5]r+27]G\)(HI;Ll?:[12j&>-`6)f_YPr7[#N`V1ggiMWNg?W%ChG3uj:%"EDqN]B4A!<&G'tU6nLDhn\P\6fYC8Je4f=X3]p!_TeX#Q>t"sL1uV!H#pWLT;trnq*FTgd5*pW,1"b2j$<?QdMEBTe&6r)8<YtD%gGAdIYm7(h%?S)MD`0AL%tc$?>P,#MQSq1'Jb9Vo<o.j9kNMpVQP.W^D;>/NDN<)_+8"c()mPCONQ5[LUP#/p?fH,#L]N[!n%(Cg%GBcW-/RWHA\DI>1rsi/iGJK*N"#fj'@$A>][`RDEgZ7g^D=X%52Z>dG'>FW-q)_t_^B6Cm.pu;j6S;9OZ[brgZ[brgZ[brgZ[brg%Z[brgZ[gK=,Jp:,BAKG7LWu`HLWu`HLJ"CmLJ"CmLJ"CmLJ"CmLJ"ECT2V^ZoX$XE9qUSK-NALf.oc3>dlNMWgWA3W'.`39PLn=T%\[m4&for:3$+IA"@VM_0:_@C.`+:uEUu$:Fo.#+kbT]N1'3$!3CfC(IJRto!4@`]i>7sp,J)nYK,/Zd;b2p&]Vk=TfZe)-rO6-Gt%Fn&L2F8Ru-^HXkA)g3LMQb+3NJ+n9loK(ct:<22ACar0WBPO68\ad3*s/(Z2e5)?EIs-10Yr!S7KT0XS@7GYQ5L[B`1'VZFgOmW6%?d8+O(Tj^<.6,Q8MuM8nc'5O'Ht$#lJ6!pE-F[N[]DF8#%\e%X"(HSop6X9;_2M8IoXk':Fn$>F4@A#QjLCAMB=JWHqaZuZe*sPs%$/Q7-9`=E<><RgSim/Xqs/(LAq29Nt6d]84dEoT#Cbd%)J!Z>sgcWeSRNUqscU1?aFZTNs\j1-.#;tWCLK-B\s49K&)uoIaR.RuW%s)qQs,isXmUR+lbBA_<jFZ\&JQ4]Djr[nN>dm?I`L%r;eI:AgLQ>S,tJ%8oXDI/\/c*Rn/]-HT,So]5L2bS)grpAPb6BWE#*P0W:%:6@AP,/$do8WbR;14Sm+i;Au'>n(H,[Y,0(rH6\P(t<I_TeB-0*@(rng5bf_mF^^FV?`F?72<fa5FtK<m]=0s*Ma%NXd_VcNP8A,%bLLid6T&i@J@Q-b`):<^;'/FEBtBue>b&)Nn955TN@oh0S4X_Pn=mhWE-N)V.V[)VdMo+4jE'@EKJ`T3>El(`3EH/;5^Mg:2Vn-N%N\aL2jE-ZZc__pd^q';04>+Y8+b>]Cj(W;]*-X:`hI4(5U\64:(T:flEH<hM5+q;X;%pO3NCik/&n@3bO"#^B$S`f9?WNi8cRl_!%[:@0$0Xn<%8R==eGT)P@OuBJ>Inr!qSaNl<lLqg<^XZ2FX#//!PNLe5f)1UflGJ`>F@JSL-BsW42*2hr9^"D_?\UI57`24!<3t2A%8S1j<\^%,mOV&j'6+n8=X!Lj%aN^SLFiKdrG^<lL*2,eTl1Sc'VDa?W>7A[C3=6qb`k/gN`Y_\M0<%*'fPZ7YGM?S4d@[('%hX[<%;hTD(P*>-TpndHjhPP8(f,^P3K>RBO%<24d%d&-n;Pq8!053NMX/RT?UTnSF`uV-h*o)b=fl3s<c-uG.%(5@Y\c^`^i<6dI3D_De%F9rn"(`g[4h&BV-!$*`6*P\C3T%"M[.7tpVoTkG:SfTI(@3_U!E\mdi/gQ\,5^__gL>OE0YFN2!UNm"1$&gl(NriS!4H4=Q9,Sl)%,JdXY>b4ttoX(?47>`fEM\MeE/U^^B=7c;MBCb:FGmoWcWl\QY$.gC&-+^(/]1eQ\9RDm3W=dHb8YuJOkN_"^\\,qt=hYbrqWN'?%^tbkcLUhG7h,;#G;[WBcJtp^QdY2c/,7oIC<cU6caZc4OmoXV3l!qiFi*;S(dOIgF(MuOmIgt;m-dm*CYtm_A'2JQ9>6q,<e_/FY%/!^A/d'dI^H>^RXHab@WP\X#th.aVaE\9u,N6PgsWH>a2NjOQDLtDcXlHiKYWKQK]jBljS475Lk@p%H+&-W6p&KU]fNrPm;d`,1P%,LCR9$mIr*/aP>bO\`u;J(_;Jo[3\r+P@Z)ZY\q4Im=d22OZ2STHTeJVs=%I2"QI$-sG%aLacPeD:;!gJTM.c_`>]UeDBV`U0,!@%29-@8jPkasAPrc8-Aju@'NRd.6Wo:;0U/HV7)HAl%W'V'R\?t>C50#nWu4MKLmr*Ph?VM#V`,O/%gPi;G;P/,6oB]d%31.J&jb"X%AA&!n9(?7eaa]?q@j?!0r8"C6#7DD9j^]j:M7?Sk9e/^:>l,G[Saf+_H?h$"j'mmn4.4_gDYGB5nD!C2m6piYJjY>HGH;Do\P+Ag%,$0nd4/mp%18I9]2P,:tGN\WHs2JE_*&.Ts;Z&nd"pKTJGMp9mJ-?SNA`%#H,>/dB2!/X81e"1&C"lOmq:18]1.9nY)m-k6MISV>%@1Mfqh[aCqKH:*E;+j"=0Bl#b)21lmgAmTH40W.!gFO5B2ZEE?CA]fYS"VTe;/3"OW<jPJT[Yj.S-*CLKgrcLh[YhhQY?sW:+/PB%VVRhY.C*MI'6"8H;[*p4GmnMj&8S<n'7-Yt'$E$A(,#>R[&0T]kqB%!882:6cqYR=%&=EPPlGdh2c+ZC3t@e(oQ[&/9r5t_!tWo]%Ze9n^F<&B`L_*4=<$na.2+49`AdpgoNW_R:Q7s;d*MaKV@,fOU>bElW`"$PWgj&o6hD#tVR0WjHh&Hh;UQq_JRnD(-GZQc:JTW69%PhZ6Rf5(fBC[9S!?E+_pfPaG1&ke46Nack]-*4_o\IZs$LVndq@[""`#cSRA#PJMDhuKYE6it/6kE;LT2lDfR.Z]<9Lrm"iU^dWq%GU+TZAhYH-1tPI86Qn:?3#Y-Vau`Z=T$pI8dCH;EXd4h\-(%q6C[`JGQ4.AD>>[!k4:MG"T2Q?)K\5-M7T<`"W)rc5Y*cnok)8]m%b#``OEkbb)k8FTj>9UM+RJ:n$]=ieXFSesZH/51?5F2uP,jc'_m#SfaM<MLcTOQUG[f`f0G*I]8Uk/i.^fF;Nk@^XLl,d6$\E:M'%hA3jMd7M!>$G/`&iVD]GOfKhclhS$=]>@umDm/U"npt%d&9erg(G^N[Rk.V7h;RSC-#2VpT%bdca3aH/\1Qb7"3+C.6+kf!I2=!J%nS53FcZkB$i9+VLm7b#^*Znu]kdDMOj)WX>+4^f:$M8'Y&'fVK7[fhh:<pqGgs_J/GT85W\`iundT?YK2h#L*`_\TlZf"-g^$S/B%&14;Ib>K'`ep(u(gIdOmCc@5n[C_Y"n[#uTb!ffA5.]dX;?;1`I#)VHR/m)Ba!5Q+!Hi\.cSp]T#1`c2INa0"m=;p1T>.9_2F%YP%`+:_U@%]-U!UP&o]&W1.<b#i^m`QO4hWFNBa"n]<!C_F)]gY&tQKRh\WioZqbO4$`9l,)Q]C0HLTWuKM=2)se@%_3*%=R%`O##S`%mcgPod)sr/`"qR^d7N]S$7P0I6L`7pW@](j=MG`iRs1Sc52ALH`eHtT5%ct_1=5mCNaYUkf?$Vq"3%=H<RQrnoD&-iF_Lq7o,>C.%HpfQ;^4`]9XFRmp(i1u(I^OgERXjh:rSpHr33`Zk:VOd85>OUH5USVu%5O&R<>t`Qs7Gd@V2@.W=JN]te(g?;d*;,OdW=(Xc4*#N%'JbrFT?B+u:2G3j#,_VdTM;R%HFpQh>2aK`OtYL-GqBUjh$R_)TT-2%Y\:=TZ2H$O[.NujecC3Oj%bbG*e4GOTEkl*>Esrc>"t$9%oCq>9TkOTcZ'G7PP[Ed-(:ho01Sg)]K9_#=^,(Oo`b1X(5d,?T6sH>)dZqlkJ-$Ddp+acs^%s[iJK@mhZc<<ccP#I/cJZSUkgek8%>74AYX1gbu\D-&kSi+k.d<eeUgtT:B3]btO!6%cFYd^g$c)D`1F7(Z->dO]]H;Jp9\TiS3"T!NF<C<h8Y-3<nnP7aAkYm@cT(KnN%5gTFgqWI+-Vu]=l9EY/q$P.')NkJL[[gg^(%9MigO">jZcGH&AL,jVkQOqfn[rKg>?B_QJd$ElS//nQ+8MbmJ$9JL,WkPAYgfknb%"/$eG'_OluMlQaI^!.Y4?6c-?@hX2.DXYb6VqI`:Vf'H:r<-fJ_:S=4&4q<1aj#AU^dcOIW>8N\>*p4Y#'[,;#m)s,+,:;Y0JnZX%]j[S.-W;u//k1KdN5s2o!.](oT]:#e)Ck@QaDI`fnNWGS$oE#;0qd.[h&K%*f7^t3c.@W_;:V0'QXRo-D<$6:hqGdB7,jPW-?CoB%pPAGW[r&iKA$?t)GicDaUnlsd,/q;HXe'p:9WKp'ptWM@]VgQp]p<rLI@CiNQZ'<N?/F(Do4>u9I88FDB\U6a#nF7mrS,p!qlYf2%oDA.(G,oBLFfN#Yh7K):\*lE9Bu@D=_=$_5q(9@L0k'FGF`]Jp]Vh]50rRX2(2rZSXf1"JXil(c<6X^`^45ag,X&SSs%MaRWpSQE%>9SKi@*IVYs/UP:@eVbFrP`[0p?dtR41Mc?R(#4l?(KVr^$X[Z4U#ZZQ?&lTanDhE_9QrhG40Ki_;iko]T$"'dXFIGF2k\)GT4<0%Qt03U'dA!ZpXa>K5Yh=4o_(*!aXZ;Se_BH.iApip(:kc[Kre/f_LVd?fm,+sC7ht*X(LJF\:\NC9Kf%>(>RlDF9D0XC\W`ojUu[r%iai.>mQf1lW7ibq0J^<'AR;("j%Wrp^E/]O!UljF`5.bLK/H2ollah09ojbq1c<oOMWF^EX#gUDqjn.5/)&ftq%7Ju/:k)?ee)[9%BQ-cB\?H$lV=DLTf$1/fW$.N4)J_If!_"[(%rVi?/&.]^l1dHuf>JFYbdJP=%Lk7<je74%cLP$Nd*D@Y('Z6]j--T@ku-oLBL)('%\#6G'[*mD(of$]<,4t:23kheLQ2?G\#90=,Rmaj*M[e%QZP?<<MdZ`a@TIoB[7R/UfE)64iR8_/Si_OTWdJ07i6Ci7N\+'YO4XL;%H/r-fVG^T`POZ%=&H9O6Vf*tt=mfkP+3Z;APlLWWFFQK`AGfAtGDKQj2tEon:HA?,C#Qf%qLG&.c*dh).F6!hES8&e1p$IcG:O?T%IL\i]cF'b=.orU$Oah;Ff'(!d*2KX,5I_.-l,k4r([:9C9)r2GOeu'qIh#(Wq'U8FPQ>.mg0j&0X[-7I+-@a.!uiS5H'^Jd.2B7_%93U2<%9_k/nKL5td+q\QAZ3^0F`b5))WWHBi.f>N(G;oJ_M<G6hps$6`]SGZpNl??9ZXhk:&7K6AH$&oW7T]4R_#C?@407K1c(9<%-BtK]OY/cBo#K$(GKH5=)c(SH$Zl>kg^O/!5??gBp4\I`eY_^>W^F7lp+Kh.57i3\[.+6HT5=]_`c&pT57,?l=2kL9J'+fcG3B<"%eo#_<1TU*=D8<d#`>6KV&rdr7<t;\43$:l85GX@+7$^;gY_D/fD^IY$-2l2JbEAIF;f1mldO8(aX@(o(+[+DdHRYrX[:r@6KQfo4%+(aAUX*o[0BW0[OCg4)8Cs0.iQ)1Cuk/psCZa\PaL9?YYd@n-l]FF8B[)$c;aO2T<*nciL+882gh+J$rm;V.sJLYoJUG1sgUhBOn%IiC96^1];rTb62Slr</m5Qr_lo*187(s\^GIh%,.AC=:1)&n71X5Yut[S17YQ6.fa\n2h`3as+8D;@'.mq7Y*M'OB2FMimlk:oNp%2OLEcU5Zh71"BRqiIi:0S=1$ojnmQo5Wpr#6+XAn$aiQ*]22k3(!Cb@<*Bsj8P4Tb\p;@ge!m:-$?I&ITQs'h'o`bSPi%)f0Ths1%eARY)C!B':R%;I"'h?]rj4$pKfQ&$=MMkI7-WLDk`%4&o.XF--BGO#G=f4WHn_-^J$CFAFCmoHp.CVc\&m6jtNNsAbe=i?rI_]=)%OI#>`=?+M%]($_aXi:l;@2qQO=d=;_Tuhh!Z>F/SK2lNL<Y]#d^eg?#$rti^<+;03Qq=Gb"_4ar2.B7VC!0L7d^_=_`s0KtXfI)2%JVu*1*ESe36'kY+dTT6q6N6u5c)TFKXib@$F%r\jJ,eo(1WN1H1>0p[^eU1[5%,0"$#]BA"LpUSc0\N8K83ZBbI061P:73ncns2B%Lk;lT(A^40$G21.h[l4`&35"BSEOP-3=V+k`S?\<bMJm0#&P4,7hn_LO0X1mc)O+=1c5s@V,jA\4D@54F#LV0_2L$->"FSPClB9'%&nE_3\7kGAZTr9s`/_B&;R@_!W3%ohJENo`aHeFNI0KaL>D)tj..7WrV!fj(Z0e!5q9'a\_(]['2RE*Q%5n@XXSR_Er<4QKEQXW>%-P^fO#1CVq2*Nko5K3:<$SQIcV3JCkZ=&MFo1B\%oLiH]Uq`Z#-%;XAEEaa6`FRRfZZ^D0>Ct->MR5l.b$)90=fLU,l/d+n$d!d[%/F(s76=$pnr(#\qE&q&BFu!uHq4j@tQ3i85A)OS[lt@Gf$`kA#R;C,JO%ckP&pBoH&Sqk7FBiWB`6>R\aVOZ^()t%aJcRqI.F;39%7XB@Hm;QYOVU7M60d\r>dU^$2)hmN&E0n,>2c$us$Sat&H^!6Q59l,'cuQf>)]@U4?1Vi;dn<;L<(Y*7Jb_=NF/gniR6EYiEk\A2%jMi`h^9,_D!+^#\EJ>@pRZA<!/8L643O13uqZo7f<bI702H^eRX*/1F%5O-p;ub#+%_>\+Xbg.`]T!i%,ON+X>*@X>SgsTZ<j9'%%W^9?s7@FXC`bL^SJgNS(<BP#B?$(o@09<hRO^+V%;N"<6UhXmp(TV22SI4\r,[:i^k@<FsUagM:cr%A^g8TUAJrib]D\fR8X'QGu%mkHNM]aED7Q%@c$)"]GZ9Sb70a/A7:IU)kC!W?W2%4WgsdugA!^AO@ml(Leb=>oXc-lPFqiV/j^@A%9m$W/`n$TtG*/JJZc(T;.M%E<<5i[M3S@[?!do8W%*urA@D.W'sM0lth+AlWJZ)("ZsJ&(5=.jF-;W:=O=GkQd(ANnWaEo[]_DPTi28.B\_&j"]6,d5.QDeZp-u%YR,2CKNqhQOgT_jq7/:mZmW0!rI(X2f"JRmDpp>lpVCn=Q'KSKZKfjjYL@M]A#XZf>)F`dd9g%`a0!b$5T"65XZ[*c+I.8peu0>s%>gEJS7o%5=WmWIc#6-D*DM\-*1s#F\/8SEK3bl2:2f*A<:0,s@mdJ_=c+:Xl.-m&bmqd9Ch?H&SU-3o\aS0bd(l[4lnia.p^^HLg%@^mI@q0i>sL?hu;^,OP.8P6%(_l%Ec?:anc0QP'4o1h#&F6&%X"h8!\a68;T\RERm\(F8?/TVaA)O34oVq99Y?JCK$1Ag@NG@'#B%j_%`PpIpaQRF58KN+n-p="_lk7W?fo^!plZ)MHGk.)V!OZLm-G1!U'J`C2m5FH!11$(Dc1+_'>>#.?qe,Sl(2IE0o)O2Z07h_&X[%^gnI.?=)cnd[I8`gD29FfY(_L]?sQ+<12t'4[*#d,VDKJ9_N#/]n(7\8A;Bs)jEL*S&O6'FM?;M#cB!]]-V?ZrQYt\YH#Ug%cXAg%)pL\j!ursQq/D)o(U%e69Z\=#M(]E#=0dgZF,logV$m*6W>N4>@g!g7P?3g=F,loGZTH_M6Y?R%MkID4(0i>Dc8gK:SDCGr%%S,0%/V6a&>HSl3k8ZdcSDCGb%%Ri(3J,O;>&a!K3X*0="J%IIX2WFG8'o@**N^;Kk8ZeNU:)OQM4o!N:i[EoOrY`tl9"*Q)Dj%r;/ni*%+8En94D,J]-L(H+/2V>X%@P'8bKMT:19\'kj;3gHmp&!.>C%BLH>^JSSdZqmZ_%jdSot4I$#AL4[bpWn6G]bsp`L"6O*&"pHnn\Z%q7:Y>*b=`sS@CSGAIg@3A[#DkdNh3@j)/sYUg#clT&n+o;0lE`*&=Gd;du3"V8Z_+/2Y(1B^..5ZFYX$7cQLp?3[`UM*[nZc&W;A%D_]>fNct)YKdYr%_/>;,@Ra!D"M66pWj7J./NjhOoM]D@fXcYGc%9(1;(?A7RU7YIEd8*h=?76LhRmLM'#*PRF#KKB/2O6<9M04r%gsg^tQO,FD(12.SP]t^=>S\ote*RaQ*;6\/$th'0%#2['eAu#E6!rM#)\-B5Z)Td??)BS8k9r$$KrlE:2e-ecB8tqe3QJmNl&8Z?%-E6q).r?@2_]VS;Re4.%mfS&Q'r#Ca)`>Y@IK;*R:.9*;>^$$a*+*GsLl,>D15r>W$j5C"YA@O$N34X(@@Sg:Ve@W5Z$A&[$Zsh>%/RW:ObrZ8@%`Sq)1\po;=RYNS27hAb(E74#'9"hVLW.OO/S>t"1r"o$kEA<BKK%kDLS)&KF6$hR4j"fUJT?%(Ps)`/k)tMKTsG4%%UMBEFYTISW5e/m0,P+FhQ"/0c>i%IaDQH;3>@a-!q3OCf][0c>%%"BfSA%@3f==YeZB-9<fXK)CjN?pA:)?b`m3@%@"M9b@B=[Lk%-'h%C'4hgh2)XsrA`^2Ng/e-DR^V'ijY8YUfpR$mPLMH[e:u&LKe*],Q7IaC3,=i=cm6H-8[?@Fd(EW1,3'MK(L,3`R321gKI=H%%-=XF)oT+rDG?F'N//FWu<f;p#QPu$?4mTAo!3aU7[ccBt(b@F4lgQ#`<VVk:4A_Kcd5ig6BZr%Z1@i`36=FPc>@^Ftq[e;o>Lap=%A72/**o6ETbooW=/NCe*,9,W=Ze&,N0.\3kMaQ$sBG_O)CUBJB$#Zk))+MY9T<"fJ3f(o%#p".C)g,!/1;5'HVTn2LnWHXo\qYG]%X\1L#@>h0jk1hZ.^)07u3P!Bia49DpJX5gI"N2i,3bl$+lEOi;"J*/NFnR`HC2J.E6dOo)XYV[m&eDJBH$rBVE1js"q:)M\%qh8>%E^\\TF3GgLDRh`b7H<@ni[iY"&%>_1.Vh-d;mbK*nSegUdmq>.?C>jsSEt<.Lko8Z4P[7*O=V.XkH^&&UW6pdnSn-#e0<mc.!+G-%(j:=mGd3MYl[cb&c:,tcRaGXPPqD>9WB8R8?Q#&'jLg:%O_r.]3EF8_+L+m&3j'j;Wn:RlB;b2:,>"3eeQO0-*'G10>r#-C"UV?<%2i,]h-SYBYmsG@Zm$lklH09P"5d37Ugtuk);"KBF-F/MOO&j_:CmQ<FC^&F$rLO1mD"V@qY\g?k/gcPoeoVfaY%J3e#Lu-mT4Q@:%-nOH8@"6a%_>-X[Kfm,dded#)D:^V^&MlK:#(O^1_ntqQMl>,80f]*.4TZFmA+P`s?6CH"\bXBeKJlasC3-_h[<b7+h0L8CT>&nh%Oo"^`Sqp@%(L'Bt.b(ebLfC=.m25'_nQU2ArS"b3b2BO8=GC7BAU&,qKGLJSZS'-!6K.(qMle3<:9uCk_/R\Wqi[Xl[cbH02&)&W%@k3>O.3)J"LAR*03#Tk*a4)a`$AZ[@;)DN-'[@g<g;d5QSFj/,:4u,c0c_[T>$RUX:EF$%Z[p8$:?p9Oa(k$GlcN6gg!5+&_]cq@%DD'iY2X:elj(V[lVt2*Am_nZ9R"OL7=q/q`h[@HSNG&\2L&tN<6<6X=`rIL.4?3ABoPU/%`N@Fe<).cM?cpt*p!R8j\l1"aB9S>7%6b.2BHmjsbF4J5%;'@#q(CL!%0dIpP)JQnmhO_I'nm75<fZbR\gRe;i2X8NJSYRknFaAAuKAC_*kGP]!-Nu@+)=[()LN]*?mN!M<%-Ca*le.sH-X).qqYm!_,S+[G;D[mA&Q#N/nC5g-S"=GZqA%FWj28-'\8j`m:VU$^DNK;]n%IWWWm3Cs1>?g!Afoo^GgS7^&=l1[F%DKpS(mCaFucF-NEc]0#BaXNPFinb$@&n+j&H`YjDfJ=(_?gWAMR)Tgl<uF-7P"1#JSREoQj`['7`L]g5j^auiF%LkPPa#>68]&?r%7Tm7_=jP/aS^12DE4OLlYebm)LT%pM2!Cp91K@Q;BUB9L=0*`inlU<%/'k:kK&*mrcDcaGFaE<(b3*N1RH1HN93.JOk%0]c`KMYD%ZM@`cj@,Q)EQ$ee[tZ/K[T0;Q,sr;*k5Ld3N>VCsoT&`BH0lB8Rb4KJgF+C]8qn[De@15iV*gFlq_U\nYJ*kueT8iG3ia%=*-mOk%FB5Yg%[k(tN2EqE[V^&)Xq4<?eM[;CofAi3X9=$rrQ:D"l'N\;=,Nl]MPXP.C2G%eB;Ku(1O4DrFO"4>l\_PqO(>RJH`+&%RVo:Y%H7dNd<j?aiH`tU_e(OQjX>cSC5CH'RSZTBgda</;r51!2EOBI@/(/1XQaCKaSQ.53C`TA7af<a1<e<IpZ#-&ZFB7G"=aJ[79kP26%B9i..[:m/5G'Fg_VK7d$>ZWbQ<@ls@(iqZIGB&Qn'MW3T91SmQX='I^g'<)_d<&D(&0Jl67akMBD.4MkB/H/Z/=k$W'Xh#cO/B7`%5bg%!MPcl0o5Qq@FB/T['k;$;VR&UD`@3Vo7akN-JE\N,C=./"-IE/CHUOl?!OUL!rDU%6"SB7"9S%:\Be!t0N6K_hoAk8T@].Ul%T?V5r6+U/Y?_*JZ"A@U)\bYOQ`iR;Z@]3/?STWki340+AG</UA+dLfp4LBhifuX(BWTok?"Pt0b_3;2.?p<\rTi(Eece:9K7q$A3%k1Do#8>cB.OXtu=0kL@s4mC?6s!&:8Qt)RHAoFW5dbG^L'<Dl'/`_tkG&>8b@?ud4>9qIah0RHp\m*T"USYM*aZl1Rc(.0QX]`3)%k\_]),+rM]KnShI>N[heoLrk<Ip+2D*UC7TUZ45%F!YF:Gio>Y<g1V0<Fh4lX=/_J4ZZoj!SBH!#Ban@^N.\r-?h-3CQ/G\(k[^q%e$H.YkuNgp4gs:6b9=mAl-MI]Wf7Z0?tYaL,1Sn\ralDOhV-@-ap!0+l7.`fo=(gq=13q&UpBUs?cj;p<Q=+Dc/]=f.V&#4G'7Z@%P]&.9O)os+?&\G-'2r\*I_&]QDHC)$[1h*-GnQH91hi.$EIEDGo!ppG^tPj*](RkO.Zj,]a&gQQn=VOL@V2$B_U`esRLtgl)@7Sj%jje)7TamGIHAKLD.ZhJ%qIqO4?"JZGq!o#dW3R(LX^ltkL?M's+]$_&[=>N/U1tf;[XehpjVWSqQ3q.VjFBMgXF*V?WC82QgNodD%YK&i7QH<3nbV@j`GiP`P0<rF\%pCO%g\&Ju5s@K1*-^_jE$tOE0JC?*1>H$pXep-oXhZus%!Sa@5-i0Ac-MW`NXU,BoN,=Qo.o)Q%Ost>F%!Mm_A'/f#:h?Nf#pmK[.9G5,!c.65f'OdJf[KR]@ZKKZUJTWI$s>R\n`bB0J[PEQII+p>OcQE``hh.pT:hc5cqRJt;2;I&%P;p=K`RH7SC2%^k@?5?9(pL6>O5f0hm299P'Z?7+7HXL?0eL:ik9)*4+!3ie'C+,k'$7uV1)OVNp8O]#$t@BS@e2:nlAPn3Z)pWa%,[<G.!s[SP8[#d>4GV3:M!9&`nQ@BV^K?H\4[TdERPBRH`ms(Y6l[[6:GC;]j0O_b/OYooZa8c7Xi^Ff4Z9Yf)`r>(4iXnGE&<i<%d=;Xj/X>bO)Ir)*pK35>[1++f;`*[X\=22,ChEln;QE`k<_<%a>2Ws2&.HKKdMe]$qE`&(FoT&J`>A*mUV#NOFECO,#-Y3(LMt!3%\uO7OCu>1i\KgG\C_gS&R@&.HgTc.6V2Lne?ID)]nSj\ogI@_l<Tt^*%PiaY#/-5!cbjpE)\4m!]k)FmTNmlm(aK'fb[62Y:\)s6%C`!!CjHSeE,h`@&Cd$S;cA418@B6d[+*Mq^r!oE7osc^t%XW@J#i8-jCO$%O6^4A'Q[S5RV7CZk37j,Q/6BhF]]6]:%FE%Z2g/5L%Z\sTc2#nr7DebN3-XdOmEj>:F"#O$.KiT+CU@mL[qfdF'&%#<I.I5%(")gQlPoPB9$g^BCUMj(//8u$Z\@4^MB2oFRZE@^l1Rsaf%2Mlb9L`(nAFgK)>FV_(.-[#GXATa#nPM0b<8<*N>]0Ski\&lUqR-bh[S*!gD+L9!bjtA@N>%QTe_H;;.bL3(Y'*_faVT^S<KC4+L%l-6c'``HEl[E9Od=%3G%V5)J?>cX0L9!e6=FIl9/<FL<*+[7QVW&m'o/K=.EL]6NaDmguq7<*2UkB^mL2G(=iYJ+=t%UN=ZCFh58%(s#_AkocWH=/ElQbgtJuWk69T@5oX;9Z+L03Ui!>G`D24<uCcbkW.$]X.#A0jaS_]HjmCRJT8p-Z-k++esb4895+j$AV^Ao:_<95%UJ-JPelq4h@E`B'0i_iK1*)JTqK-aKZb2T6TZ_-#OdfndA$Cm1*)$G%m*4%$%06Z_98"jO_sgf(*n&eB@c,gd5d-#oV8`oV$!SP*%^!eECMkt!S/%:YgV0ist63104$V'6^>NhRZq^,HKNYdesl1%Dbff$r%&<NF5BK(NMT(RbW_Ao&3onII7Ft0q/3g=6]5\85dNQkJV%SdYggc-)j!gb/2IjXM*WLuhd41?Y4O`@s2_kAikIS]%+9.PlbdgId7H0n>^r_D3#ACCHkgLFPY*+DVCYP;GHf$BR+LOO]q=*<jM&%Z\E,`dSYNu)k:C<oi]KSN<3W2+WN#DF;,j5%%rLb*R%*bClj5DbL07<L(;mSYhJ<^N)>*0ab7%@goHRoYOABPo#Vd&IQ/dKSJ?%U%8bjp>E,/7lVt5RH&l8+_o'(?2Ijun>VH<b-;SG/(WN@TuT7[[P)O'^mhk)8aYi7*?gE\XcBO5BAS@j<r>4.oeTpYHJ3CRs/He*<t%P]Km?`Qj4Dcg/&j\*XNJrFd1Sj(p.0]RJ-H1>?3'bNidZ-='Zejl7j-M1opB*+mO_kNj]F;p1HtqDi3]>=0YPK=@Rq#*H6D5<l?D%ZTf*tq,b](Vfg8,S@bHMdPe;$oDCFWB37'qT6"&JV*%^/o(k@">hf%r"nVRNBD#c&ac,1K%U&b#o2i6\oik'gg5>+qW*BETjn3]?%lF3Q*Zmi39137:%]RI;shuMPTjPu`UnsK"</[PRr@Req3f2$1F<>;S>[9P2b+'CUI=oIP?LfVX`kIarXZ^@j<YFdU#@9hBGf?ZIX%+3A*#H=">ga/j^t7\q[ShJ'70^JnN(gNFGlnWi\Ac/#L.93siKI!i!XolJFD[obi.AYUr$d2X[tos5Jh.]]2\);RsIolJFDB<Ap"%T%D:k/"7??[[nm_bf/.pf2$1K<UeCfd^X.#^W!#=Ab5b$e.S?3qMXP0F09(L5!J,AIa2*p%!J#W;XkVSZ]AX#r'VRk]RJ-5[=2c,%3S;1tYMVZDBhRX^1EoYfe^$"VIYk^dc:Y&,WD2`)rLCbNM$1G:?9`(<efsqbQM6ZmkMoe>9Im0FIUG1e1qqN2qDeeu>FqD"6s`)j%],!Y77p\FC]fCA!Dga?9Q<F1Yk?KU2f?[T:-Yn5)]RENk>?B%49iaJ?]lMN5I`lsH/tU\@=YM,54KIZ<ZQ!#0eP@Pu/F$N=%j,l6%l3B.k*I7URGAQWcA^S/>c<:+5U2*m5@NDfO;0tkbjn3[)Lc*-s/t(>;VFe't^1Fb1`KS#*/XXG.fhY2kj;XCP9FiVFV@s^71Q+Ci%bstWS]si0e15%7EjqAUZc%^AF5GHq><A+Ea.6\ab,!ueo>kD8nW;&L(Bqcu=nQ;0+\e/.,EX*]44C%OX.nPU`1mQg:H;J[.,Fi]1%Nj^$"0ld,:<'KM/V_;oh^2VuEPQ/pLeW7&lf(U_fE'H3A,.`(^oYshAea:iWn&tM#=5u"QO2TbOe+.qJ3&5Zt:F`WYr8lO)[W?S[%\GNq)cJhA9]CebaT"CLW<rB:LI<kaUl0[:;V6"V)rL3ZXNXlAO1\]^.G/kj(.LGS@A$+mcI;V3fL/1\O%kWh.4Lhr9\ogMp08FH(%j81aE-ghspjns+i/&/QSd(!$fgR$sj>M;$-V!_u]Xd;Fk&oTqaePO'Ii-mM1(D0HkRnD>fTBLOj1k]C\kq24,?X7cQbIdXjns[k3%01J2cY=<OUa<rupj1U$!iQ72sZ7n=9GGj3UZ060hp@QhqoegrhqUY&Oompa0Ng@/.fZ.g/f5Z!WQLm]S%X$)aUY$IZX.9`>9VOUM%^:s;]*iXd`eVAI%I:QGD=G!XkW1Z/qhF_o"OYnX_*$i1N=n/1:h;e-qL$-V?IH%?TffY3gpPo`YPKn&+^%I*?jO2kXpk$jN32lIe%n"4XNKY)s'\c#R/-+WMmI./Wm_2OA?_qc"#)##N3+.c/Ha*2a2_:%_!'s:AWlb*RWm"U<oIh6OWAc!;\Sbg,@iH7a@EAS`i;6G-c%[N-T_,S@\614Z-K&](H+d-Z8fh]a]H3(CB2M"4\/=tU,Z.9(!r[+Ad.4"L3.[2L.@q0Z0\HL.P:Uo-r[7?Dt<&o=U%_XrbQUnk_\%lCj.D+6kAJH;Ve6_Z=Xf!W(K/YGDps$dgUk@NG,1"Qq^cH24K'O9;B<iN(qC#d8J@MhYSd21#Y=(NeK8O!%j(,".<q4irXV]au??%l':GdiI)c)6m6<EcaU6g'UC@(jD*Ec2n3#sC>IVGHj:h+(c*M"i"*jnqS/m=,P\U#])ZCY[_"3a]uW\d=)YjG'T[%t/)%=&%EC$`%'j%FFZb55"QM25r2,n>_mP%^hEO)cKRu^A2*i\`.OS[%(brjh16`83qs*/B-$dZ/G_a:gMjgf'b7DoiKA*c6G+eb8tWmg)_N);#<%0+,K(n"Rr;\3kDJSfpb]*A7f7nN4r2L2\H%/!U4ZOnF$t\#gkTlM=b9!+_\ILVD2Brq%W-mu>`K8&QNIc'Pr][@%#n'LpB?]0k^i%+IBrXXnn<#e;*Tu]`/>%WKP#GR;gQWbt,4R=l76^NVB=jkDN#+mB>t8?M<$L)&j(5D9S']OtSs=_JLWUk5LtT=OSF91nN&1[kL/!%#Sp4OLEqHdC;06OH,/H<NS54>Wgl+G[]-fgeuTD;35>8#2gA9QEIb-G:r,5V)glU\kmrg7gV<YU&'>KLp,rf0PL`gL[lGi=4lD2f%HUA8X3Tnp:04]$X<)D6Y./c48imFS;Z;5MLXd'/9$SC;uZsSqa."tl%47q:qF9Ua6K"124:[t->;3l-IGE/n0N"GrP$^(q/+J<#e%g*X7'THA0cgT)P%95"I;Jk<V3C8!J![Y,mnR."S]ORH^%@e+!FCO;<+Wt?sMqJmg1Zer9U=+oH"MgciUkZo3kSu`1I;qSK9##ftm%r<Ik9(&T*)jU#OQ:`N3Ja<;Z%FpgM9'OqQ&I<4l<\>*+#i(&<$q=E'`"e`Mq$Nt4F!4DF]f)sRrF:"URmB84D#cKs:H9:PH&9&_h%D1T:L0U:jn=p"rQihtol!(DgCg':E#a1e^SVdP(Bqb"['#Z/c0L;9)VM%][,ScMYo.#*lL"rcXH5RfpHqS&Pd9&fR!o<,STQKlk8%I(q(oG5H,M!:^k][WRHq37ZdZd8.;(D?oa3kipQ?!\dYHqCPEAP`ljI)U'3iKEIsY3)D.RdpO&E$E/j?!KnZt!Wu9J%e"F'j.a"G%.GFohknkq&)1a--V^ZIV_$bSb;.Tm!7W](32('+8q:*PcaVLi3Eu5Ko</#7_HbU#n'<!nm63f?%H9-Y6PHP*?T.1rV-8#_$",#N^%:C(AA*K].N\;TF'8VMs1MZ@mFQ]tSH&=h(b#ZQ9dq!p`aOq&jBm\iuHKH7V5!@ZN^fFc=9ZuXU:C->#`AVEum"I]M.064JakKo^[%X,3#KG;T7sYbq/^aqKIB_qScE;e#t)&bl:iaWi\?5)V7U$DL/KZSO.dY/4^#XO]4lH/aju$@1TIn*D$[:E#@FZ)5GgZ7f+_?5B5d%I"b'UrRhL4&A;.3Pi97XLjjINl<8`GL'5H%5H9*emtf7S'e!i?]cdu9[\":,ikmq[7>f@+9h!:>rb9MfWVlh1%uG]"j:S@eV.pXh%A9J)/$'aX,0g>A4,HA\C!&]*jAVKLsE42d*?mOW"]:mFl7duR+D*1f<J;,S4",1_tCfCj/\Io!@f?.#@M&$OE]g.7tQtFOhDS:><%*W*J[)Gm+)CRr3h<'dei6thnth)+j;aaZNV:BQmnArBgEj(.1@\++I\^#*A;BL;-b\YK&QXjo<BD0$9[Vs(J-,4HBWp(f)RDeE]?%Gpd@?5a=H481LW/]9UD],-Uc'i@57QANcR.1)_0QnQ-7JL=.LO>3pL\#`TqOQ3<(8J%k.9d6BlppPqos7%[ec@W!jBbh;,minC36%Lg62aEmP($kj<9?<>k6qs(HaE5l!A!;/N]0;`K[)K'RXd79"XSUcBm,@P<))<Pd4W64nVLT*I<Y!SHVJSAMG^NW'ndGqX"B4\O&@%k1TH\E($f;ZBqqBY#TIMY$e--TXnDThLc_Aa>&a]kqdE.^mSJ:FB&de<CD6N<M+9plKT<H4iYF#aS@"jPW>)sMW,Z]]R0'*A`%0.%:pu>BT>$WSnd1/2YmP;T7<DF`Y:k*US>)EpPCj_HG5IV2[/B3D(Ce$"L1W2i[G/;RUGl6>gO4?Po)@[BEaWPQ3O8JD#5'*@7R/2,%CudIGjJa,'L+t#%cbH]<"LdlS)6`Ge"aA_aVm$uKWO.FAfJK8gWWaHa@Z*9K<CMJRnBcGX:_3pPoR2+!&4+/@N<J5#6:J`nffrG?%6_e%8n83j\Q^:0.F72diK)"!Y;q1%Oc]_C_#"fnP3Y)B^JrOHMs5#ntQ3\,Cq8OZ64M^asn\h$02&*Q1PK.O!!gctKa&YW\@31N_%.>#Md];ajnJXlUOPq$[,$l.^.Dd,Y?`4@./.X3/DM-t/1DS2!4nR/gU_9ZW!DFd^.%0U/KGN3biUbYo"qI6J!k?b(o1Ng8L(tQ-I%1$7"lD[[F0&,Hr]lVF;+-qsTiP!l"X0TS]:2.!QtMTgQHQR6cD,N,8qa;2LF\i+q2D'q6CI?nbubuUMMq"0<7gDUa,CSO)M<%;SR%[0jG/BqqfN=Q;uD3t83t>ktq1o1j&5N`=6n'P;nBg@e-'`u<C3j/Z/K3O-Hf,'0jUAO!oS'keF'bZ=)MfUcV-cEYB*F-SZ!*,Dr_%>k+rB3Q"G`MdmK/Q358nS?9V,jiC)tpsqCIEjauLi1Wu$^%H1Q>jUHn*cQo&bsH<3Edfg0PEcZHncL;$lE/.oOoXo0i/78K:4.'l%)T)jNXo_*#g!:#o]kY:4%#u*l&i4MlmhB?jJED&J7UUKG&K\oqc5Z%kW`U"?dhB7E+=U73UK;B5i'G50Pe'D`.coGSi=UFLTPF5%%j70s7$YN*\App3T@J9B`6FT7(d^[foMX"2(e_r584$5"l";$V+;oW&Znq"[<6i#:4pcuRDqp9*In2STl35lI1pRpBYmN\OZb(*s)%)t4!4mU5bra8PB>-e1$M`/:RRbPbKZO+n.oD$oc\7qMnepS9e-D-4V%I@=IFNcPc,i>7C1a#uWQ'pHS@9WIRE"b.^0L7!1\h%BtO%ZVV(<@bRo`MKD[>'@Xn,+QOW_.`R./:Pl(,kPje0QEc&:opOMP%s.=+VR"JDfZ,#_pT^'3:s?W/A`T_5rc"O]hd^:7nGRlPT-b=u%8d`:nQUC8tg/U9io%<XFFr9sK(A6UJLWZ2&2iX/PYg&]t6:.q!..X'q8K=6i:84BLRgJ&uJ"P[eTC*[U/k:;gV*@jbn_K&t2;AbH%RfJ-_D<9t$D+Ab&biU0[<Hu3m<We:[FW];plpCS2I8_1[SaGW!G1TUT_<F3kE9C,L\1$b2?XX1,^ZLmcF%g`$+\I7U4/D\5WDS[#%okhj>Al06MH\LQ#_33Ri&gs=E%7>dM@9Xi:MaVRV!8l]bFrd:=0-B#=lih<Na-i")c:rSf'H7[2^,*@RG)&9]>e</<e<YGC4tQ#C%7dt01'3d=Jl:m'Ng,^T[<t9=3M,V]Cc-;.*N-3H`;:JK#,([8g@eVaa85UnA^=g:Yft94r&9.nCB\Cd;D%eNT?fB0G^2ic]!J=`2%g5R0i<4D;.ojS.U?s'6#bM,s3nh@^I<uWsJI;<`_,-V2J@d\:O_r2fem_NI;oeXOHAXaD0ONk/^RVh9Qh'MT";glVrgP)o?r+1-!%Re/H)3&,XR,3">r7t1a;Gb3(gr-HMY]!.:P"?gT='tE:u]0_gs2.b,pE9SdgH*l>;3>ArH+">@*`*(a?L@n@IH+iDnN]E(WXG8R@%k0SkU:^5aU[%IloTaWQW*GsGNDdS04l_+`3:Y^LZ=AoDmlsQXu0_u,nJ7[q#cj&"ffKO+-,ioKA:b<2aO3_hcfOP39QPH;#<ga!W%^FUroYf[CFR4=4p6]>rS>Sa!(!3GT,CdV`d@Wand<rC.4R-V1V8Sehj=;qjCY(CjfW18QT,QUc&INDLTb[Ra[^@cJE&H)KKBk?j#%>Mp;/*Mf`iaFh[Z5Tj)S&,P+8V*kOmnj#sD=]0?,jPaKI@3?*We$GAR*N[?b%LcCZK<kBo-p#.MK\o$9FFo-&H,-3TP=gP!\bLrF%$IoZQ+qROYEI7UqV,S/57m>]l=ttN@o'qkX?6:LSN()^5g*r`0oV6rU19CFTkEn=lJ%EJ]XG*^ZJ\pX3#<dbA*E\<ZnS@M>g#YP>%OG"\fY'cLf*jUV4G.Zc]RfdeZ_n9QjK$=>B0aFbsH>F(k(!ahaYe&(&)m;HijY=*l@6HLRe!VZm4FX).QPR"i+=IG`".E`n?M-pX%*Jb^JI>o&o,f<O4-jh*i`A9eCk6i_S59%(?n!M5l\)k/]UXfmMV`Ur2P*4C4j+(Or,bo9p3Cr-:aWUiJJ?%TSd&McMk_[Y]2Gh3l%X!8.\eGu3K=:rn@hquri"<k*Oc\+dk6HiYs#<eg/(U^nJ*d!,A*hq("#fOmH6"bc#&Vt4'UEfqe:oun()^QBC""fKcBp<-N%nO$o%7j(Eb/!C2n0$>+YA)FBKJP\u[JbVisf]->ka9/;Lo*E:Wj8j'5Es]e%j<59*2Z?P66.YcbJUlrf5J@jq];6`HMh&]e7$&Z*4c$Tk%hdW,mhFcH&>1"-dlpZdYg0k#1Z,9^I+)mgi7a+,+&E`]ud-mNmRDMpO>)XSU(CebMS=T,1C-"q%"@/8\kEmL\U<J7(iQl,_0a:if%Q.du=Jm>-"0=:\4O&1DU;[tIkJ3k[21aPR?)*cVlM@V.$CGs/L(Es_b&e_/59"k"jTd=,1c([a7XOu'VC7SGR<C@/TI)V5/;2pUP%[LT5]]&6pQS@8)<hb.hFah@qc[-8(6G-9YpAj#XRRK_Q'>#M\W:t:Y[i?=:GVd)fC8@,7br"8r`R`1HE(&fI#r&WWn6_?G[KAhB.%57N-=Dm#<QOL'*^9b2e+pa7H`Y`Gd?n.68imZ,UQl)V&g>C..CGQ6F(=N9jgFmo*dc@0o^,3pb5QJAeHs1beuSqRW)=ID:e#uksP%`6..,3Brqf121ZO.,s8MX:,Vmmu,%uhjrdpR81_3H3e'IM!s4C.d-J-)'4_NL,(lY.EjGY(<l1Vs3iN@RYA7!Cq]kKB!FR+?F.`D%7h^X(D`J%!B/GNjhg+aaU0/<B&%#qWCO,uu!tUk/q\jaQ%1e$.M'[GoT+U%C+f^d^<=&e>H9ek0:OZmG0PA_KfeRjQ5B!Ks/<f'7%5EhVZ_[h)]*R9uFL<=,n;odoHN9!:]Z!,g9ktE/>kc\llF=%N%eisDg")W9B$&3:+%ql:,m.-D\86<S+("3R%o%JlOg^6pkC*>[Z%#LPeFBZ#Ib_O(`BE!"Qpe&,pTLKG,5;Ch.c"U=kA.b4h@Zi)&G*=TK_omuo2Z.L.!Ys,\1kYM)l^#S_"8V3q@+U3jbe2*W>9IWl-%Dd&8iK"n`A!Vf&=)/G]U>qmR4LCdN".%'H;25*+\H,qmCP,WL4WpT/q)0+NA[LHk;Cr_)bP_@Z6?:p6Rh'sD-o3bWr2"VOr2G;!J%MMB;iZp`hT`3*b^OM3E\'[4j"2gNKWbi.R`aU(q(38saukGr9d+k'P^P?P5U:_N@IPd^,98L+;$<CDLHWdHm*Gc&Ccr@p3L(s+rQ%T`i;8b5+S6Ge8$0&Xg0i&@]ugcf>AaF_D^D(Ln(*:>O\%B5b/=^gmq>G==r3aW:%cU4Kfs+WAVM,<Qot8s(pEHB),L9p!U*9U-`?%c\!sFRB<d:02(>oCBK3kKJ69j6qg^r0PVbu[:.iM1pEJEpdoEON:_\<1sR?"UeBM0B*u2=mG5V;/pHWteRIMVn$S7!nka4/,;NKq%$GLW"UU:-SW"343%a(]qLsQWS<b/)-k0b*^pa#H]-8+SG\-`SYS<>^2,Z%iMr@$(F5*JZKG8QL7:]O#b;.g0&^T:tO`*(gV'+0gQ%aVp@&`7/_JfQ]t\0)&_^,]<,M-H#'OMmMX1E5+em]O1PR6rJo63^-)bDk5Z'+Bm3H%F8buT0,,.Mq_N5LGhiQpc_%>c5]/XEnp2f%]?#d&AeD/)Bi=TK-MuTG=7c3rm$>"Cjo=\5MqBVtTCS=sX`&tfHUQeJ>MV"9i'6pXT1'srW+9m%&oMC:b(gn*X3]#$Lo$8T9P/=l%^]W,`H":PHLs$#l:u'nm!#fQFE&>a<E$-qS?#,XRG,be5*o0`-<kq&"M+6hBHSg!RK^he?jK]q5Sfa.`Uc\40Z!`.TM>]8/ii8pO%9H]]-EP?j(h50`R"/9K:itqItIs?dfP?QUr_CW%TaZqGZ:XUJc19=:5^m<j-[QH.-O&>#cXifb64;h*.Qe,Zh;cYnVbGuU<%90),%bXr+mb!C:6I$I&Ho;bK=fr`]eYeg,bLL.=^.BdNCITkLgVsW=FJtdIi`3M"lD+N,r$3DP(jLdFh&oX>2*")[</r#_&Ka@4)aU!pf%9%S#a*$>).lj9N%Fr$+K5oNA]:DN@5PE2$1lke`)CPupH0(0_7.W&=rihQ:T`_1Hfr2B,uF0RU4<Jl/$qjX_X;VC1-8`QX3V#&!E%@7!"eI@ds149r/cV.ZN8c0RVAk@W0b"r0\$7_;l[3B2%CM2tj$>MhLi84SF,6>MP6ZAR<:s5`iBD-=ho+oYpm[8f5I_X[KRL'a"Y%C$KJ9S=rPj$1ES74iAj<I&DY>LI"^$W'!."Tirgt#fVS@!?ZV*eL[MXCTc^0Cr"gc-<Xo(FL3qDcqqYs\"k@M=ZCVNQS_2`A;kIZ%C6$Xm+')m)Ck5sK*3kS[_WB=l&Y-3GS$AD,oYq0OZSB>YAMH]JQ*n5?:ac)t7.2@1hBirC9fUlc5Q\YgDoYcfF5pSM("[5Rm:$O=%Pu\hD&21Iuhb%Y`;metXh?9Qfm$5s2NuZ:IlPZ"5`rgY)A^Oi3!($bLL76e[iD1T\U)7m:`9kuUg+8#\9@5H^MQZ5KBr,LA4,IbE%XgCt_oG74Epf:QI)O)&S>i/.Vd>0HYBIFo67WZaNM?Y8rI*G:2E-W=E2p>Torj;WtgD5[$hBV"b9U;')i(SD\jCN%]IU`#VHkc2"%].+nKFW[$Y"Hgkr5DL+uFo&@Uck=-c9Y;p9W2AVeUk@1F@X`ZO%0S&rC9?!%Q&73&/o0S#NE(5$+YIK2ek41f8]C/%h--f2.KR]g%Xd'soAZ>8Eq(ZZ]Aud3IaJuXG@WnM%>:\Z/42[bj^-\!05P_5ZYKZM#+0ej][RtBq@K"bLbuSP9'=YAMneM/<L75d@1Kc6ekWE%r%0]j!-_Kcg%-%<SO*W'0#(lQt&L.k,J5W$RIV2u,^p:MN\G2-)M'I%0FdSu2J;)Cu0.\Q$t4Bo:hJPQPS@Gd8Cd@fU^<VASH'b+;q%1%0JO4JFbuh-#f55tO]8qjp@X4]qQ>#l$H\=#?NDC(ad/DtnutM-/OCiUSU=M-/OC5uC9e9>oh5#i]p%[m]HNIaBPG:2o=NK,R0?%6_t:5$=s3Q&#'M\C\1^?hF_]&c:3U9.>+2+V2Z)(^"n))r6mbP%0"BK9TP""7sGo#D(k2e0ujR96lB;@Zcd\`TW^@#ASAcIK?S:X%jD9E%Y0*TS/0.FrY/Q>29:?tO+%7P1bOdV^mrlS,)5$B&U;^GOL2VF--)>B?f<kdBGbs7&@8-6eV_De$N,#T?&RWT^62"W7^roVg%Jrk$_XP:S>@"Q1Voh4asZC2o?FKp9"94EM*SkLol"@;SV-$D@Q9b<V6(uGZ1Q<<P/esRXI.@g47?aS&?p-XsI/"A?%mRSsB'>tQ_%?:@O\am!km,6Y+4GOI.p.5l$CasICe^GM[--AZS9:>F]!(U/.9ob5]k(,/'+BnC;LXc3ksRuK9H6)WEgJ+O"-F#K5S3.fH;SR[>'%g`.h+9]9to/eYhR@!7pC3$SKs-dSC6NPu#d6")K7/89]d3OXGM@S%5d)D=R=&?W3Da2#PXdV?6)67a8S.URAOl]fL^#,DXUDJ)Go%^<<;!a>>F5;)FM"<m0lRJdGoQh@A[TS@&fC<A(uHae3J^bsKf:>,$N:/PcRfK4J@sC!0H(2YcF1^1F-X\@hDb&]'a?%G5r%:X_sS%H,@#k]sdIT]bg,2%,(p(,HnW=ae3L\]IRoGR^<MdLNM5SkkbioSd3Y\rA&+>8UtOL]b$%I.`Yl,Au0MZWrf(SHRs3XR?>18V'5B*%:?@9u-s3-uA?-#TV/d];rIfg"6044&/F`#P4P,LJiiKQ`<-YS=MWM3Xo3,H/nbm;'mB#l?X,>;ci5/]no(at(Z8Dua[eCHDMuCZ=%iU2PLN9-g>Is<`"Z$<+bjXlk]B07K57)(X::4j'9Uudm(X&$HuHj+&K&B#&(Eee1J*8eUA7(3cnXIH.H%hKBmjU9mVPinbG0q[0u%B>du$)<F:6TY98V0:=ub`F2;aJX#L7Ul-\*aq<phoBbR8H#^]8050igKSX_@6*;13e\WsXAF+#;%Vr8p@_WeUB.$Pf\Bd1.3^JA+%B`1cn_(-9OdBbUZ&Hdo3>Oa5th/>RhXHO?-7ct>H(p0E#Tq2g)38Yd!Hc+l^P\M;ZkipWa#_HP_anN@]<&hgQf"s@M(HRo7l0,CY%3Va47IZ<'s=UD9gK:<^@a)];bNfQkHs21++egq`#K%<E=Za][``<j@Fl[1.&oe$q0L:jjuY?J!C\Mc.6mNP'3/j@d0,2F'ikAcnk%$H:k]+CEA7?\f=rni'nb%Y)hAT=Vka]EMq3h\*4,/\M=C1E#EirSfZKcki`N^[#HG9#T(s-Q+Tm[7Y5/dP45e[s].0fe:Z'm:bmF%Rged:,]!a+O79U4aaa^+HPTc!h[P-g#C(e*rbsEC-N4Z^+LCi$,rQi]>so7!HT^5H$_q2;5Dhbth[K7.1D6Ep#IQ\4.+a,Mi!bIX%mR.BOg"IKB.B2\&c`[CIh2_X`MEI[D<A6BFK,=/`cY&f[6ULUui(^<-7pbtl'NT-]T_o:4V<Gn@V7h]d$LLXUdte4Q1<u_I9R?-A%`+V+'jAW1'@HI9;Vhs8T\"d:*Q2Q+VY68G0&`72JYf<\Oq=Z'\ZcVs2bZ$<ke0r=hqDV,!*%C-MfNY#amqQ*D5=iJ&H4'PlMaEe?%Du#0XXR`)$V:_8MpEQTK39N/JKh8fp01IZUJ?<e)6ATqR6*A]]@*/`tZonT_4:n)3IqIo`-/hR?f?c3]qcGt6cR;*jC11ZjB*!8b%e5%9A`t:[FrK;f^T6U"WJ_PO&Ye9>q5W5hB4V>F[Sht2,kV*^QnOr(8]:43D^9["9'18=dLUc!UahHGoS,133brjh16`8319B7t`%MO$RI0;:c5Y%';8b9ksrYKH[X17,U$7,^&(bg8FNGO$+T7X)L#3U\Zn(rDP/Y)H-C3Y`BWY*O$B%ttg?C.F]rmFE<cdjpir[?jW2%jpR4Bg-dF4GG6;Dm]OkPnhhRodLR7BYaNPslp68tLRb0Q5\/YOAmZt;_IqH_p4/PlNqgG-b35=\]1Wt1q&3@6j+C^*H(:*%H_#ug%B_r35#o1G7hG1nSPiVenPD?KoDXOk+i*jQ<"'%?5M$WW)E\d#AC89r'1!r5I,q[!bOnJ'YC"XGs_'2QeI-YlI1K]=t]K4Z/Fl93Z%aXr[>J`'G=X6Jk5&XaKX3!'A^S3dAtA!m[!I392=@5F#djXQ"-)@0D+*+FI0hdTAP@%QmUbU_Y^4UDeM*DH`nc.rna&foHf1rKj[%e/&/^7D[_V?\!i`H?I,Le5m7Y`Q.tiqLYJKKKZ_=ji*W0iso`j;gfG"KjA"_]^c\LX09B>4dAkK..N_Jcd+RE;F%OBkfX@F#Ha%0%T^m\JYC,)gbc&rYk]B@3JaMqjkf=Q;;GTAY"$1nIbMQR[J3nE&;@4;9/$`oA6rK\/f2N-c>sUftf_,K<*t,S*,;Q:#+ka=p;#q2O%V!DKlZgX3XF5rin)3[=pZ1ki+k\SM2.N1-XDVmK&O^+:*K65MPM97W]FjKT[PF<S!4nA1)CqU)Zl'd.bAZI9>X2Vas@D0n<RZJl>%X(IIMQ&;f0r?Hm1DKdbU5m,ltZST<6i=[ZAAt#pr%u"+neI6UiIiuZ22K'7tW=_mC&\/Om;Bf]OiA*d/)foYg1NMci\&1M)eQr<B%4$Gu)p2D+q8,6Y;kE8@,V,L<_VlRk:W^l&@8\!oPG]lZ%7?Mm9O$O2prc@QV_RNlXB@hl;FmgrGIliQqkMK#fEeW]!jh6<.d3]RF%nP%$3*HOsKpe6,JTq0Nj)L!hW#K5<t[M0&H?qWVpn50Fp@#VAf;6!A"X8#lM5F;,P`jq[`gRR&Gi?O9AYs;%/!<LJEqr2c*Xci]N%?gEe\4]R-bRIY,5jsu/_]VV;,0k1ftpdc=*Ea]>NV+RI_J#7eCNj*_R":8psG7&=,]8.F;;JO;fRW?NOq1OU<>4cl\=Hp4Q6M#_G%f>9C3=5F>Z3UAe\jQRrNds9[m^=H)7d3<(#q04n6?99@f/J0+d5u&i=o/LMh"^s,`&H(qm2[5]r8(Xokh(#c0oia;9)79*ef%g[s%).J6s6$FjGCdh*:q#P]?5CMfR45pABKC2bS'[#6(Gb/N-Q?9Sk+.O>aOMV=O*"_coauR)nk9Z4>?e=LZKq5=go'o6+Xmd=9d_p"Y%X\]stVY:fn&%kb<84RIXepC=,A78GG)((@8iV3^_fYRl`@!S.Pr&*od5UC*19`>WdPfLHEET>Qr#S@\ojcDeai\_VTQ<lI!YmQIE%Xo3Aa5_EbRiQ)F,+qj:/5LW9R#XoYEM[KspW5.CL_W>p9&t,!qTM^!r13'!O`3BZiX>E96kZ4[9kXg7moMe/1Q'rF[ikmsJSDAge%b!LmLX+')MW<?B0brf0p0>'Ur@L([c,nnWWiR0XDf0Bk&U"R3*LL*0ME7,=^8U:i+gHMFY>TWB7c_6/j!ac/X&j6qLP[/(!V\4;d%V3,drJ#W"hlm5Os16;<'$qQJ$keN7kaL@@BP,8hEN/2+eKH4D/O337Yk0J&'&3F24r5erkj7_ELbf;KdND04=)N#GA]PiHBY9$HG%L=<I>h)d!2rdWoV1i(f(qT2ZLKSTD..qlDC55u<8S\]b8F1ng#.5W3aA?H^^Lb_rT/$cM>al>#2^>(fek:.IDr3r4`'2X[uN2P$5%ID\#gT&1-<U[/2@jh#.06@h\`@f^:ceYGKu!-t[8\0htD'6RIP)a3Tr!Vb9$c95*eDk4as,`*!D-b_`$$[ICbB=b`?(EmNS3WFkq%U<u)ZIe"m*QhTYe6oE-lU<.`9`^2'5Z:9De-g*:1Ach3k/a8T.HV+$O^G-5"EcZM^O())J*Vg]4p'-hjP?Q*+laN(X1<be#73h9k%.</b[10WZbLQFnaAR+5n[fo035Oo:6#::[VJKoeMJlkNQ@$n`VKqZHp'+?@Gbo(_KL5EiOiG;K).g-qE^"`,_ig%,'s1ge3,PM`8%n]=Ok`.MabUF3M>6+OF$+*.:;D;5@?>ULmLAeok:.C/%Jk"t]Xd2[JFlR>,e7ig`@ME<FIJ\?%Nl9=cbc(Tq7*:AA-'ZJ'gicDLk%F!sUe@WVfnH0tRe68,:Tm3HmfBb%8(13";7"j>UODN=lBl//@j=o[V`-[';REJ3/D.VgG'7A)F68REjW_HS.27'J5M@Tb;#T.G/q%pWfPiX`>:$9S&'8dV8uJ3;7mm!eNe;68F),IbnL6blG'CK.6FqAh9ZCI,VPs47k\9\q:fg"a;pRFr!j[VT+Sm5gCIMPgf"GrC"pQ%9jJocR,o$J]2r3j`LsBto87!=7HPf"U;@NP):TBNP&%eK&iCc#Bpd"LQhu0lV14I"^8A'#pFMV3=OQ9G%#`"QLi%MSKdFl\=G8pH%5eRum6^^0Zelk`,CC8qH)2,U9)Q$Ze".LZPL_nf%A0$ApmY[ANGAm#Ga8@6HOct4t_FTDA-m3opp@h.E%Wg4KUlHdUF#o`mkB=W<%.1+=!*umN;;T:ObQBZhN(_o+Rl-Hma_5NDX,a[-]3'5K5m%gq2qKd`]e3*l.S^\XA]"[e-1cm/GqeWkn9:VWPaC']ND7Niq:?lIO%W7tdr;RVbnbm/A1-8E"iYU(I#TeJ!-.CRr'E@nVg6=pi,?:k;s[.kehFeTAdbpW$>)jDL69bp-p$IVRlBUp4pH,9EKkj=&H@QqJr%"3d(Ig1/DkBHT[(W@=_XTfd'f)-^D\885Xarat<PkHF[\h\e\`M*g[F\45XMQbE:U)P%];5)MDq`AK\0b#&7AmYbk&??CI0h&"],%]SK)8g3mt#cAO<%pVf!N04H?\mYbk&?<lGoKuPLHo:j47$Ku9S\I,M]YXXsSadH[gcTS#1is01?UIEL/GV?^?na7)FNt?Ll4YK)5%:8e**jN6O+?kutVd't&3_s&ICOghROVhJURit,Y[Ne=+l5`!/T05/,PF%5sZ^?p)Q3m1e-'R&AknfcC.+'Hin0>'LH6/q=g*Bn4"%J_GOD(D6\p=ls%11qJQ_[.lflI-<Y?9MTZ.n0]N<W!7Hr/8Xt7f>R&ce&F.%9^ZmjbtgPX`%[SK1,([&p,tTPb?XDF(/7<RO3OW*%\GMaZMY]<WQ(3W6\>r0\<7k%Coi30Poq=]CY"!B/!3]Q'&\IkWKS"lM;B#U(TETd5-qHH<OF7hjMQ`"q%#6hY84DaN&5eg$3NDN5%dVL29o;OY4fMB7Q:K:-kVZG8M:4arK3Mq'nkTq[W0;A)s;*j6-4O&<FhZ73>d!=@&pf'.s7^L4Z7ndKXB+\sXJA$)c+M*G@4*Voi%Rb!BumD25Q0Vd3T-iE'mF(%Cec@HMu]ShTiYn@5aq)BXH'ZYU5HB)nIR=RLD&hV.YQ%NgnF@]GA&fK+a_Sm9L\o,*gX4pY*UNZ.+%J2a";IaD<X1O2+*?0;E9KY?Ih"#"]YF8N\P+QckW_T1kBp!u]*a2Q-N;sQ2*(`7K!OK7O+/R`Co\/<)i*KsO_H+$f')i-dJ4IfMf%?$I^&lWn&N(A;/];/&>c:^n<Q%7@X"(1^$bdtC(QhTo&+dRT463lC1]k`MW0?>3eOTgb"^I1H^hO%<ujn6s4_)/mAX$W5FKHGm[+%7>Et_@W/*T1U+6^5b"d2q<dm0_Sluqd5%5J1`-&QUX;RMn(e0#KPI'j<.s7@)Rd#6O!.Ho*d=.5PA"2b%f!'us&O@3lZUdt[XWo%%%a0A9Hs?#V?+Ls\`l83&+=&pO&r.#'4+tP=`0caZJ'PBmetpA7WS1rim.6dSo>,%!<E$5.eLd&^dSIXU+T(:#rcq*'K)^<T;rsjH%Q^$6nAq..oaY.RfoA9K/Z=i60mVq%;hjc].06N'AhYq-RXaXtGSG2_9Vq1G#mVq%;hctBW^;M&;Hi';E?"ks#L\'C%k1h2RFbfS7%*ns]c@:$SJ0q:F9lKW>fjH)2I;sc!mbB*,"@+FXlK(W7ZVWt@P^+50V[bfq7H=sEjS?V@@LiUaXK-<)dqRQ49O,LX*`d[AoXo,@U%D$-FM>Bf]!5EG(0nB9^=>1Odu?'sKi>uccHC1fDB?0dOnjt1^i=Hq7+DC<NF]]>Ytl\BrhgUt(B\p/,k3,`;E&uOC:ro3p\[P?OI%pMr<<55"B2n%7mmh8m75kcS8tDs,o3kH%q2cnr`4H"`WOVD%A1OE($d4M+sLo$2RLr8[V$0q`^G^ujSQ.tQF=\*;SR9<(L2Kc$hq%lhT::N1h^W]go7C6^@@G?i/p?=,`h^0D6kM<;CWjc^qj[%+WoU^N`WPV-p53c=[^=/&kD^r@d&V(/Bg^]$c7f5K?gK,<hU7[uIV=%QM[r?MVE?%P'bp%RHM*&C$XA79k9&aBeoVSs+cj$14OBI9!_=/VH^%(\*QH5h/CFiCV03hBgO6/`U_g$#eRXH]<)nHmG2-IQtjm)%POYFB[Os<%&4jLe#LeC=CJ/6Pp!M@ZD;QbjZs,c%om=HsqZG\IA)uPDAa?VIV,M98I<P:=bO<-:k!`V=ro[d`0)+lp(VX)Q^,K>B%N6/s:pJ7,+D9^H_-4B/805$\*4N:pj_:b^oO"je)ZI@,Z?$M=M6B[@(4^E;kahfg.Gc'`B@n[Y1%f@3A$]d#F=Q[WL1gP?bahl8W%3UV"JW=M!gDrlZdD.i0t1j1d`WA-ft`HgKR:lYJLZF@L/;*s,BJ,:Y/[2^PVB1.t'\BDY:K;%=BB'[c:Z2*R*NT`tQ!kn&?r8O%n%#(V2e^?Zlup;[Ts3]Gh8^H;J=1+5c*U\?FuEkckqc&/+VG'Y$8>sE`"GB_14Uqf%&1#$WpR-g3OIe2k_S^`+:r9j!\O%O>WJ*Ng'%DLM6VbUsd%k#`Zle!HES2?%m2p!00_DZBS'3-_Dq5G+QfE;%fQrQ4d\5GR!-H5aHG1%I+m#18k.;THl)85\7^nP[EKcUbb%)=^VF%aNl94A"O&\Fc?5,aWWYH?KrC')$f?NN0cRpIR[Ig3tkrc)#5'67(*nCBUkUjC[s:\q"j;hfE&7*gZ3"3)6U9n18gD'O50DPY!qK4%^ET12:R-?RjPOV%0(!MEWpKAK/J`@&p@d(PgfW%dX^Tr@9Zpf7G+jE^GFHhqEZi9T_RAl)06ZGe=f;,[GM=P1PE4/h[,t[gX]+2_%*5,&>jVp//1>2>)=0AJ#qPNn.pM]2*Z<)MkB0!AIoD,#]bOfT&R]?t6HBYBp03eUjdd:.amXQRdnCAc)<k%,L=-A*#g>nUO^d#;R%hgX\K2=Sq/hFl$VSU#nZipfS]n"4]T1-N9krmp3(_OkC2L`oJaJC1]9'#U*)[&[ggEGoGa@f@B9r(EQJ.r._gM"kK)bY=_R?,(Rr%g<'&_8bD*$AFtNeqpt=&HhZDHnBFV-(\2X?='WpXEdH!e484a$i8.YMb6?[dL1+/5q"iZ@h2lgUX\62:b"6C1)Xss$LGYo.Sg""^%05k^B1-a%,ZNo[d!c@@4hu2(O\`Afe]X#5*7ltYIeXO=&kK/hK["n/&O0@rp$^AX$o"JMBr:LGo=lV!gPQ1UL_7V>XE!a^8GkL[#%*^4iFg!_%Ws5EM,jb(#QY$Sk+NaFo_s5\g1%j(ZJ_>cX0q;f/[*^+cGm-q-pX4QgQJ,ApPDEdj`ao)I"QO?N-<YMI/)mB4BHes]X%M3;cUD>isr+2.[LYO:6Eg[KuBqfSA9m\=-[]5mS2T5X8JV0Dt8cFNNW`fJTIs%`Fc5mkZYW@98PF-\oIMm)#cnFX^r[k<+*a]EcY%]1^3Q&-$tAh`(T16/!o>rM/l5q4#tgrVc/D^\h]T1Oo>Z[EI=Fn#k`]K0.?Mi8OJl&/jm*lkeh;]^m)7DWAo^eMjsaH/n%-p"\X:%n%G(;?`3:5^H$N&];+8Z5?o]XlRm\`oge0trqlAd2DJXOFSo:ImCE&lh+K,"iVCNHMjL$%U<k27V")DS85\R`'_GW$&lTLU"GOu$%5"UXKKsCg@,RZeIAncOe$U0'qC@(*5Hggk6dq8XDQ3d0YK)]RT)VYujI\.qSPuicVa"HnH\`G^Ck*:m23-)!n(c?KYdjAc=O]0cM%gXEG-g8B/lS^NPs3rSAJH1rulqd5u_^\2>Bl>(n9SLTul)%AS-9omn&,LEW3h5eB`]l3LV6#W&QEJpYH?Y\/6YNFs34O&W[oL^/f%k8Ej8fq3\P)2o(j^/-7RiIe1R\C!D?\NQ#ZjMES8^[`K'odObC%nGFWE5'dQd_:4?p<..SrCWJ?03r*MC]<c"j[\e>je(/nVb,$d%2]f^,pk(aah-#ca/&$;26_F-)j37-hj8<Km2=4:F]!W=WBeA0j%J"uM^El#<5\8MXXlRt,c^uNT0/rL;^!da:+W!u`\GX7HY(016%^N&YlV6\[9]<t$fESN=7[F\`3pY(D?rUZ(g5(3:.-Ppo\RF[='qr!)^Ah;HC#Hri^>le;^rS-Y7J:mGt&O3q]XJ]t+>BrQ!LMm(T%m47T@Dr2SEL?.LY'`"Z:lI2e:gO0"^;:3,RnQV@C8EE-1)pihm?-/\\GPKJUrU72InEZ^<54o`+8Y,lsjUZ9ZpXuJ/4a8RWi=AZ=%e^c0Tr800ApXR60g\^KoXf"D^j]>B0L[lMsc<khfg>/m_H-LiKrFlYRF<kkjZ2!FYF!]he54CenrC-!rc_V`^3rS%1H8Q5Jpl0=>%]77?g(c?Ks_T+["aHcSGd;/dW@]QD"+)F/fF=$\;q0LK>4Cl^7H'1h.$?#if#?C7@>m3IKr@D#9qNZ(aWY-q`9"=cJrDb?+Xc\lf%iVc!ts0G\@d?UR9;Y8[BJNV&c&h^nl.cK+Ys*g]+8%13SH1'sYQ7AgcH!V6L'5THhUAUsZ5Po)qK^#E)R*WTK51j57HZJd[WIh$,%rc#?l.d*FPo<3([rhnpA#8c5r[<V\AF+;kiPb))EIZc?h3(jj_J;Z'5TY1.T0&k;6hM;u]%i6i?S3Q=V>WG7S#NoGr`6h_+j/QiG%:O*nsF!%EbJ=PT)>JtdA,+_`KAbAS7S3PQYIJMlZRYS#!Ysk1jKt2TA.j30WS]Db:YFPM/C(;DE3')dQ1*4+EEUVUoD#m`4*pd-A%a1dPlPV3j+Z^8_qeAQ@aN=7)V"iT$gErGdeLEF:ge_&E1[!^o=Hi(;&nq0G2CW?[Up3X2ZF,+Gs.b@dH;--QPhmS'1Y%CK/N*Y94%mu%S;CMYurD<s.u3P%1fUN(E;jYcNFS'LlM:X=6_mZCjY7.8KdpW1hTj+?=)n^GgsXtT"$l]O_CMn[$8LD'3MAF74'"EBBBW0=DJ%e7eb+SmA_4p5luf;U6uL>C1&WErOkfs&6*ae/`K]B/AYGkH-nCr2ru%'c_SfTpu:*SCND$X?@iGm2:t_4iZ2CR>!`JlGHcU*n#qo%nQ$aWZM&6Vm+$ltX?@Pn5ORgSV4V+AGl-EH>%7:#f&QXRH/[]Zq+\Eki7Up+8d=8/)\9[_iUJ;irqkX<_0B)]2f/Les.7i[EEWjM%&@N)mWLs+]i6?(b3*nTBA8?G)]mBYAZ^X1,p[!Y_O7,71n)7JBqYJZ:^:8U_n?'T;qsA"mp>MLqeI:>Qf%ZfLUc"-M[k%CM?oYg5%rU]]3%XpIKps\qDT5XaWGVIXJf`(I!mDH-:s7jXnE"if^F#XYbT,ukfAiRGq^A%H>\1U;3Z5gGi3#[Pq*^2WPL2Flo(/O>V_4:\s%k+fn4pS9@Ro1*eg6Ye]bmV#lAV_.?W>l:<Ig8*HXmW1A#R[.j>'$bYZq:!#I%rOVGs58CLk<%"]4T2I2If!NRh>\Jk_bUg6?/7`$%LMpKYr;*H-PW@GQ]<ZMfU9`;9N:YF:6b+5e>8WF@0_hO%6u2+JQE3#^aWI8=$0uGS"nh$'>]5'O>/oLTH<V_#DkaZ47SD=%[c@tH%nq?\u?U;AZ1Y:Bog3W@c4.:n4de*gHWAeCFH>>)%6d"tQobLn#^!12l2a7dB9+4a'Dr05p'<SAq>-d"l-%C`:-`jf=("Cuak'HXZ%:;+p2BF7J9'rA#gZ!r^?ME`4a-`jH?pt`d4h;UO;X^c$K,5+p!*&#%W_`Ad^6.u$E5)R632HF^BP>9`iNB>tFM=*+oB3Oma%.'i<%[p@Y;/iNYi2;BN8ga<hbU\sQEn+9V%;WDJ<WG-_CLCdrsD=_d)/33o[Ubu2BBWO*?9srrlVm!O1d791omA-UjX0s1_[bBNHh54CH%?#<2$[6[0f;:3q6n".8I?:>YfT!j\Pos0=_X0jW'X\MC6O0lo1'90C(V5Z>"p[kle.QXNuZosY3>DF83hc8FBF[!u(2q:BWeKu38%%8'Q9q!P,^D0crWQKbaY(I)`d2Y9_ur\tCVZ[KGb)\lXqr9igMmJ&i]hJN,RBHG0m^!5s$VIX^+=cS8__#)!oYhnN[r8%:qr13$E%s(]VjX7W*b^5%,.42R%__rA,oBp49j[(3Anr[4YcSR1erJ^WEDVf?VmO:5(Yqe81j.QXctk<#m'-9,g;M;)A.mIcjni@dRcTYk`U%r=_t1o<4mXR=;l>3C.(8:&=)^qt[,e";;2*Xldt,ES;J]&r07&KUq$kNur;Tkf;/.jqL%/V?RPq*g]h(q!f;[]cZ-<T/aim]o7N;%`RL@C1q7mrA;Gp3eCWbdD1t!3Ckn;e99V.O9l-:t.lAn-4S6%$5#FJUMDiSIUeR:W="SX%F[s.U:q''i_g:Ce*1Cude#)3acD/,m%%rXXM2!\Gr;^EkF7bY_NWR]S&UF_kgZ&:\eI<jRGg'ss;f$?*!/aV+A`bsQ\D]A^/bLgUH=`$'?dl,LUROrHXmV'#]=`$$>>A.U7%geN-tG>XN([tIfRakoSZ4*GVacFPD@QRAnZH.%#*-d@qnG?bi+>TS)o*d:jQn!#d"\7j`=q7PbYA]NoU:3k$CMj>BM0?WCQ?(8:3%QS,1*+&SeoW3*bh(>t4dh56V22N9np7N[IF.\BX\4*J'F;>Ebi8bn12gT_,JG.'N"Hk^pEo23p#P\ed"ZeB6^4NgYAI&&Uo>\Wei%h.l;..PFa)*eFHC6WlL?87+aKbDGl7['!'Pi+H^ZrN%ib@u'Vq&6q'e"e(l#;juIGK:haSU1bqcg.K-T;!W+tT9U18m,7&3.GOkm%@3WK3+Uh#oi*iIu_m-r+Btd('@XS<UOl\#$^7";NY\EUt*3'&n=(S+mQ_@a+`3P\4PFK"+VTa1aK1&F&SZ"`p)Z7A$3guT6J#j`m%laLc](Y<S//S[\;[V=8l,9H<qMsJF[&8mAX<IKre/VoZOH.,TY3,]0OCEpK7e8cj$)W?h/)l-=QV;d(`kp%]-Z8C?_'PC.Qf-nq:%G[F=<5OgA#3.Kp&cR]S;a^!l-8M4n`?2,\j8lBfFj)lp4Hma'IM!H(2E=pMVed#YBa1Fjck4oC@ff\^10q2gHYMpL^nf2,IJ1&2W%Ade+/6d->2m5m^P&Qds]nP-rm3CI[fjfbnhSt=m[LPTe:SSq^)c,/A*`&C>7o,Y]U[=52@??,.'+uRED4:Occ?Q<GB9e2fTo%Z<.%?gi(c"0@BH[pnk8&u[h\ntm,)3+"lcLM[!AC6/_G"l?OQBMMR$6tk=o#n@9l+kp*cSA&^V-#TP+&Xm?jm3G$iHuY]FBO9LoXKAXL%iq0c>]ADT0F)u39I?[s.CCBQCQ8M<<MuI<_KjZQrDTC<"Lm;06E,aO6\2f6=Yne)=c*dBn/Gtq>As'oaPJA`T7<&s-70e$^$-]hD%Yr)K[<jQT$XL7'Q\8&.UHBu"a93=*Q?]_L.)\1&VCg(i&2PudQf1T5SYZpi7Q7[3OQ`t;b6g#aH>@tNHBlZ'mB3FbdGR;Po[a8?t%Z;j((5Hg39+V@iqK^rni@<Q$sj_I9H[pb=:#$3Zhm".no-Z(JZ1S+j?R0+SVLC_?aIUk8&CJ<m"&.[;iUGAH.W).u=`aq>f.%ss?%NQh<R)2tB%]V9qRgrIiQqlO#>?,X>BYVfrdINcaD8R#mff?tX#hXn\GF[_XpfurIRY`8SJ?QNc156bgb*d&\XPE%;JY>Ld5HkCac%gALYTiguLb"K*4?I!7/:](_4d\X"R*V+/\Y6EuHMY>r`7;uGaW<q?k<>]ZjKgZCGB2q6L)#I[L'`bmt6GWnHRh0b;B.SVq"M6l,=%YiVmLqJIAVHld%Xk!RX%Gn.^8YL_@NDiKS.l_`dqe;'=@;55rifp7=1V>3Xm#FPZmNQn=8s256:^1kPN>6?-H;5g1WO2[naC"l-a%L6nV9X3t)$W-2t*MJJqCg7^uM8XW!rDN=([6]eTc?>?EVM$kB$9e1,71jL*/NREuE.^)^<hqC^#7[3IE4>r[0>dJ/>mTa$RX2ehT%YPcV\6^XpTB*lXHNRRf1$Bir5=nud25+WY5L)Qj6%6%XH[%uZt<[hrrKrgG>1J*;(e\dl.-`2W38J@H1)PSO[>^dYpQMfmBjgNgf%Y("U>nFdH:'?AOq-`pW?*(tXM'R@dZLk:Z*W44'()\"L$WAY6I<31XRej<BL=Q):gQ6srXVH%i)lZD,f09'AfWa@pXa,+/c\!8d!%9(()b1H_,_kf((R<?Jn6f>HRpMfY.!=C.pmonLNI)M@gNY@\4&>P:N@MJjFCje6Re35nPH7WC,H=kq2T0@&S87RL>Jat-k5[-D/p%/o_IF2k#Mm<78YSPQo`)>K,-dI]QkAO0SZLWrAIDqV7ud_32HBo2,>6<f9%_Mm44(Sih2&8r$>KokgHU`blFH2OZ49&q:&Xq,JH7%50@&CZtD;bZ`D>oX%b[!@E5NsWR6gI#>J[8<qACrZ*'EBBm#urXf<,X4!R10<Sp9B7CApZc0a0&*BRK^9W'>!3K_h.Nnn12QC[R^%\jpIRO4%WM\'j))ZfS<2O4)s(V6.Ge1=4iL1Z`JB]Ui;jGEgg;QX"<Ta3Ku0.Ndd(5,Eb@??*t3)OnG\V`Z1rS,8Y=?u2.S`g_"]%1qH;q.h6.YCk=M$9'OM*apXrjVkU8`9iV*+V(X3r\eg'l/BY'l.#KrAI6"X5q8ISt0cjSY#8^=aC2/2T*aF[0fA;/Gd$M'f?-TQ?%n%j/14h-Nc#M7@f1\N]@NkG\LZ1m0;oc@?c;pNnEr&XKl>[?g7eb'tgSLMVP28=H\Pu,it6A`]ol"ksNq9XJ-%D<"u?p#9#3RQ?(%1`hUqK<t++CheFeC;)7Dp\LYdoU_V5B,=MG_S/j"\9,UA>-'cC^BhQ_k[#W>^k\(.V:sNV.F-R6A(*KVag->i3+EV\9jc2A\iN^@%d>8Kpc.pu3;i^/nh8p:XUWg_im;0Eaa0ufP#2_Hp$#=;g>3@3JpD/1R#NNI1S/71VU+%IY8l+u<:<6"aF1i3Fc-k8rVU?:@]YujK%1!X!=`jf(G8mdSL<o^j#GMY=OjlAjR]rNG.m66l4XIW(CDL/-4BC+?hUpP!4)lKi59o:_bI5t55o4^45knRiIK!FR`nU8Z[7J*EX%K!C_*RpaAFVWRcc-7Q:+krm\>2(gPR[l#7e#G^hICcj\HEb88AZgls_4Lc4=/uIbI;tI'[i+bBaRW?hel`BD4YEAS%A8Hk&Z/p'b%08nkMif23!D#/1L^?5$mGe:;`f,eKLRdYB*:!;KgYB8VLlf"D_H$/C^SYYo>ptcs8*P>B=n("dW?u5[[6N972p$Z4TN(kua[[c1n%IB8WshQ)&uPE`eO`ROh6^JARWgXu->>YR5ZWVP(hE:#gPL>IQ#kf_*6gJ,rUp$GctHOm]mpL%1X2E"jc];bO4>15Af_:[C\\sdgi%Y]2"oE@.o0-EtUmfhK^Qhg<`:!DQ2L_6fTCoL`K^U%b2f`e2Z`0Ud$VWVL3iBVHGYU)Ra>S%Nk!f)/u>\/5`/`e2H03IT/Akf0%S%`gQ$;Y?!UTSCacf`>b:[D#/1l^?3TWFf.W;ds9<0kU*K-2t`\BVL,02TJt8X2pk?+Q>V#Q]I;Sc^@*#iK!_fIbOL#*@k!k(M/Kt_%DS1gDne-%Ko?hg06oWsj2r6q]=F/OjlbPYPH^'fPX!Zir-K<-?c)iou`8aS1j%[JP9uN53R%(Q40/#7V)#Et^/M.p2?u.lB";C;.%'Cc2=nH9Nqj9=Yb)o4p)ToXG]&rfUmNpCIER-5lakU)\\-CF!DY95b]+&$bi9QUqAF;%>iPLkiLRQ&Vg0[WTKd7l=B%9AFqdX0>/%2o.m@_*g67HV;=G2o.m@_*g5u6oS\>G]&f'K-n/9-G#$\]#i.5:!H0Ah*_q46keBE'A_`WiMPb4M/K&EDPDu*@R#5(\1F_Gc@aM4%2pk#PGtkfJkI`"o.OM``-G#$\\r$CPV(4(4S`5T&1cBbBdF<P#2/f4YBVLu0U78gngXc:=4D:IYBVLu0U)P`].])m4M/K&EDPDu*%ntL&,o-V&:9lr1\k[la#NF)7ZMMZ4_'A^kZ\sZ97PF$TbR\0K@k)Rh1AL3`4F^CV5`06O3)fOfVh-T?Y3h,r8g!&XC79q=4=(`3:%bU2>;9uJgmisc[lbU2>;9uJiWLhDaf)^aR4qhQUK]iRpMPLj^,RQ&X=CndEP6oVH/DXr[%>Os2QR8%e0R-8-:d7prB.n]!@`C)YC%M/F(Bh;m,>VWJ[.h(0na=\NqDR-:EKc0Ca)9Q[V.k[lQsc!ofho@e#a3+EV\9j`pK_ouo&]b68umm.WCR'g(0en1,oHdG/>Mhu<e%1P_CMAp^BKTS[P%'A\n\fst+/&";]o1""6TU78eRgXLUWS*^r'CkAqVb8L2GcYKl#&r]QJ_::q4Ao6+e[FqA"`hr@cC8.312VZaZ%C8.3J6oV0'DH7G,R'g(0en3`QU79\$2lhdQo%Inao-V%O9m!_1k[l^"9jX<+CVGjImMN'6@!]#FLhARWO'.fD9(,annZ4(s=\Zi@%Y/VD-i`Z/7-Y:T4?;6;92Q\nn)eNfL52o.k1H'YAA*4:coFXksS?WC?VD#u424p,aX%<W;B'sL3kf0+2fqbtr9Zh0ff$:.b_p$aI%f.58$oH*@o)aEt9R!sjgk54?hm=XUcfLImWXO):"6L0Cj\k,N__*5I#6U-@jbmJ;cH4T_s9i>df?-SiRg8&t'1E2gtS:61CRhaYQ%6t=\kE9s>=DcUPb=eSP^kJ=EaDN`G7e$%,EZU1.)[<*H0qrf@UI6%65XZ%c;8XYN30K-A0^?5=V-7QV5qrf@UI6%65XZ%c;8a/Cj%7lPn`UDn,PBTpkkY`E\M5,$hcI<=Mo$>i[%%o.OpP8%YGK!FQTId3\tUeJcT(`Q[S=7]?4h:sa=UTA_3^!<ZW+7XT^6CX4bX&C,1%,c1+te42XXXO&;joBOgq4D>=-kLHPmGe@1Q9hOm)52o.+n'sV]nRdJ5m2tZ-g.+7sl+Pfs@=#7Hl_cqX8P8Hf5.^8rL";_.>(CB,%V>$X>DTiHi2_27,M8lFaTJOuT=eYM#Kf1BN#G$]hS;D.-$EZ6;ZtZ^Mk<WaT)eYlaZU4!&$>nMef6P`2kf0%S`iRO5ZU1,qDeu/Q%l-&<mBY@QBbrZPt:%(@]h3\p\DcUPDLQOX1H#V@W:59i[b.1GiUn3Wr")._A1o[)P_!TLE%X7AXguh;O*Kr#8gcedh#],H)WEQ-o%8d3o7X/Jo^p'iOP'^,RT.M[u\@=sdOZ<:<RV77In:j<&p+#PH/6.lQ$BK/<6LJ4@?!:55$.;l=9:o\"s`O%@5WS/m+"+Ya6P)@nm%5aE+n6^&f2Z*TlM.;nZ'9.H65AHYRnYY,7bine!lU`q^T&L8*B)^.a%@cJ4i;N]K1O;)no'-oI(J>B\6PTZrnpCEA8bkho%&,-Tr%'TiD!8Wa9EO;.HD'-oHarA2X7r;n6%o6p_',%6'GWJ1<U889TWK>L/2]JErk\EfCsWQM7a6YbRsJK`!<`ahUl]Ibh5\9jYQWQ`+"%5&,e\Ll^OJ>N2C`M]b2u-+4'R..T3NO';&r&g+O4f95X%'sAb=;(I"oGa+qD!$:59F@kCf:;MmB;W&7&814WjWQW13L`NX#:^'Vf%"Toe,!8o"]b)Q((D,\O[!&Y,9&29k!GHZW:Pp2;>J2W!p&nmLC:'@4eMEh5ZPU#W$i$^PS_?:n@-B!n)"=4$gV2-H`8#<G%J/ud:%r7[m?>i%mUC6[bu@o/p#7fbEg3Qm@R&Wp=O0V]W^)1rg7Bt+FW7QEb/<R5]p0SiS$;/udXjZFqhe[sUt$Y#>E[t#=W\<drKW%C%K%eoG%=7_-;V'k1."[.rHWm"0UdW)8Sg)Q6Mn4W(+p%c*>G7Z".E;2uY2W)8F2"*Bc:8,s[l,%3lkNnQgeLPd#3fI)1gV9h*X7QIpM%i'sPR]Aa0k7QIp.TLLrMbb.ES&.Z3IY-tlk7QIo\J4;Q-V1;#q2P,Fg\]jJTTi%:[IR&]dNm&:_7]#H6!hs^Rm7Ai/1J.[o^l7gk%>UIrK&$2-PU\n4Y(@QPQnrdBSOa_h=;Nq^MUAUre;oL%3GAl\a;(6jqecg"i.=X!9"&3I&>qI]g'OX@T&<e@Ro9DE<9GI:i&rLt_%!s"2;nL]D^H#DCB-V@6/!/o8f,72>:@!Mg3npG'NMt4f$!#OaN0i`W01m5dc^;bH67!ZUdJ/%)_Jq4WtB2*^k`=A+Y$,KNB?3!j&%qLS\jOJ;ZI#uH9,!MKWoPbL'e'Xc(XJJ2&@#%F<-_QF"T'bl9n5Z&F"-(q2%a<!WEq+91s.+AG<;'T4I?plk'WEL"@E!/U(p%g!,%g&tZqKO2LbqBbc3?n,!I!2KW?.Zi<f7TAmRRu>o"X!?"n_-@!P'`pZq!f.1LJ$&K)'GH>7!_4DA6RcI[fMH"Z+0-o(MhMKFGU3Al%=>4Ci)bRrU^kPH4SPYU:%CW`4L.[m^/]s!BZmV#qX&32dNghi]Z4M]B7EhK6Tq'!j#Snn(o(WJ+8oqfO$^K/hU]D/\<)-mA?roDN%kZB-R[Nh]P8U5Hm,AFZm=it6,-MXL7eOK7-Vkth76(sHrX-TD0WlIS\1/0QgYUi8TU[H7I.;2k_#_F=P3`Qap3TEe(@$M#JT[?dh%N5I4j691#4P/+/lJn!9Q1CuQSOjmZr>*J%'S0_3SU,&F*'^Fl:2:%6Q"ULCA]26.nAY?I<%Orc>JN5On[>iS?i1SjV'WHt>@m_Cb%-k1\?&sNL47Q=4>&RpCqQ#`fKdM*NtdR"\=(]cHn8PgjMb'AB>\7?qY;-6XD.B6^/6sarPIB'+q]Sr<4SeIk]8s?%<njePKAe$R"%"-l["P7*Sa90qtK"-p3]b(WhD6-`o%-_OoTEm><6:rU,k`/Bo-9-Nn["dOQ4+YceB\Z!P6,n3Y2"CEUo88^\E01Fb3$rftE$<=&f%5"4XtcthU!P@1&H-:7n:6"uXWJ=r&@W_hZ'jmSI4O:usD_c&Q!8H[OVP]Bg[OeAA1-?g^`W0DBKDA!YJP=&,rK$%dd"@e[)'Oag7%:an\"ELr&G2[ss`_:M<-Wpl[E(911='>d]<a4_)rMLS\21m.iT%@Rc,r0n=(Uc'Iu;tr_25p^BF<]n%;gE\2GS;KYO;t9=fY_FG$%8oq1b?)q#"M_"$o&qI*SUB(iSc(S#c<.psRK4$to1*]mt"3G1`6)@8:[9eY?,,NKo@7J?od\+ZlZB1<J1o3ft"Z:fF-7#NU_7TmU%2(0*'0VQo'Uf<2$TbKEuFJsb8>0rstg6D[J29b`'=cO=Y0o6V'PX/18*)rkF_4?2c2/ou6<2`),AMBe^p/bWg.@MQM:hc5ugh#S4%JdXHeM(Ho*)Fm]%KR0k:66u^MC7OS0=qkV$J:nh424i>)U:=K3Ii9?C@`TT3ks@[&.0?CiTgjaOWXOQFAK]T..0sFbT1Ui.UmQje%TKo*A6)D[R\LQP\N&%^>(=^Da%4nGti?KU!."qg.$Yj3k$5V.4JNd14BgH+/6s*7cK7a<'+JU&F9d?i0\-Q"@JPsR(5bKI<H%8.k%?Ki$$<ZF5A7L]p-M828>T[IZ$:qhkKie`X@+AdrG$4'U;TrHoa#aAL\!<fF(EO`#;Z',q0&1BtH"U6GNqTEd_#YIhH!sOsehZqdc%@Yagl*0_YS!XL[RD$:QpOdc\+PTt8_==D4@#Ja/np^/jBj1kb9.*$lDn5+!h#S01bR\Bs0b&NdU8<dTq"&+s>$]JV,`toTWaGt@0%^nMNe(:^;"djb8-@$G05$tPTk_#uSE9fL/$#W><"5lr$kjqkt&JrXm:farCmA+p=XPTut<!%Gn+"[Yi+'ETK?<rLk>F%3D78Z>9H%TVN97(GMgDjYp4W(-?nFJ5Ts1%lC7B$Qrf?4FK)T#GRIGirc/XRCFc6+aH2AYYjI6Ha`qs9.9utfMXJ+#IK`Yo)uRfB=e5XPiosi%!)mWE%YuPUlGq=qHT!\$@eP2^ON6^Eq?:G&To$URo'B4=Rds]V"`)9D#Q^SI0;0@N;i5Q'e<D=N(pKtp$WerS68["J!l-82NX0;I%16_1nW#@\(%B=EK'"`G^Ue:"9\UZ'c.F2<ocr5hF/F]XSVG?VZJP0b[TF)ZG"$smN_$H_YjI$jbJ1$d..Sf%:727LS+H.cm,UJJ.%ctEK[!]isuWIg<MPu+I\83*qSBk1Ng+bH]aS0,*\G4dF4S18biZNP$5#pc/nG[@`CFX5S-OK&k:bn@,^1rKMs"\`8*<>>S9\HZif%A-5mJ,(H6iCSB$f"'?9^$Q!=g-Pm)k,&s+)Wbj/Eng.ZOZi#=VCglHZ#eDM0X<Q<t8U`Vg<FMjK9C>VAlplA%=SUAO^M;5L>aRop%7"LP1'c'!$'!6kQ2^MVT@?m=FSH3/qh^)YT=I^qC:tO7>Z3khT8[F;,1b[om`Hma[GufT_P@t[9gaP"U@uXI0[#+s8;t^Nn.0Y1,%[(i,8-.scBh]gf)QGmg;XWh,!^o]Lhr!C"N-Y3UoMA'o7&uah92_PKeOc9Gc=)k7,+aYDi@OL7e::q"WU.u@;EZ($1*SH$pFVPq_%6UEW(h9!:ggb=Rd&`@L]Y9Li-;Qh8ugZ2[0?U%R=He+9(<HFUsi2\[f&n"d(j*>@E=d%uoiif*>V+GuUA>9;2(+6$e_2<'MJAEGP%Sfk+j0RtRQ)#-o8$nIXs:pR;L@Kk2a3!2ns<b*-T,$%+Q8g[SL_[%_m7%?OqQ>lQ>`JP7-N4eJt-5:9tLqsZp=:rgCSK1]DZ@q@9%6<7XgM[\qhH"XE!+jTajp&9mt#EUJX$p[Ke`6b!HXGFiFU9`c`4X7Qjj37B7RKQD(+>#+hE^t[Lahn9g<^bd\M-4Q?U%[,HB(=(H%;R>@Ls%-77RdCIW0$ZAjX\.4](Z).pBO'145:a$H6%3u^GdjtW+gS9P74TsIaR9IMJnHQpU_VQ1+]CJ*X97.^&D9j1V\N:aJM8Hr%7K]&^&]80X[Gm&k)dKMd?4LMJFM:,U(9k2kjoajOOhDpD\%1Ea_H)mB&qmBsU8G`YiX$6nCdhm0.F-L@5M">"N8G=]Mk)Fc>DSOZ%C.gTq-?9Wu2Jc_;=Dc]rac;h*/VMsf\Q'tu'lf/F3LO(RlOc3;&[X(VQLt$tl5j&gOen`mZ($<l!U3ejlP>/2Z$rdRh$bEngc_r\%Z!h]ah."PS!t@T,)D/`W<!B,7#M?Q.&;;Mb%Sd;i)X.@^\8!EZ)Af8W'ora/HA]d$as=0"E]"cXP@pIlY.?Bf\6KH.8EReJ,`9jC%[#(X08T)N1@\?.VQ[Gke`]5CRd+)f)m)5fTFA4NOY:s6S"/lV')@G"@YoQ\I89@h8Y"#I@Adh4<f;?[7"(9Mi-r54dCfcT<8aW81%@H$NP!+Nbf.D]:^_e+^]%g+_::0\ZMeJ\K#i&1&0!T[^Qa(F:K5_6E6+CQL.UVZhPOB-[7Bdcaq#K"+j4qm*JNBf-u5LpWU51WUK%E"hBaBK3+`Sj*:i)@bl[837L7kr258^1'o7YZITFfS-?DV,pKZZpo^q2-TZ,#7Uf`2;2O+4NiqSN0pe<X'Xp2KW$Q#!VTM?rtOdW%!^%\oFfn*$8Cgk;M21U>OS@:=rLlW:q1UU](%nWTi+@6h8H*?\\-CYR2j`-MoIm%/@tTs*oca@9dGSQ3_9)7?OTJ"3*3_nb?_gsT%$`q_k@lMiXniDp>enFQ5d]0ctKbFb>+/eh9Edgj`LnfU`"XXUNBaDQo%7_#P92-U4UK)dl%:NA6H.^XOQt3EjX8Yp6G*=hQ'0BnR%8-j"<`RnU#Bqn[Xe8ukQ#uf!pg!$HA;8a^C.S0t_[+X(T&8O+,SiS2j)CBl+PgWTB\'il#@sRXhY4R_%i+p`]%r4#:@u'WNnKUIr%Bd8&.1q-s2GO0-k'0R&0!(WAmH_&[%`;$1J21k.PFnCm)^gr9Zg2-+<rN7t]Su83F#/<gs9s0l3!r]8Y^LIL5.1L`](?p%>_=,f>%O>>C#n.W0sITMumZ&:\e[_.;(OrfD&Yso*_G)NV0GKO.S,Gi6>8t1/h'$0@3F,E5['_hn?]FAH>Cdr^h8mfk7Y<[Z"V8":.XO6s+%?/2];:S9`E=D;Zn0(.B.-dXu(U,;XIqJL>q)Jq3PJNcpL]V;d;@lG@=\5Q_0GE`=3.'5^':pJ0)/>-ZfN<UIR%6d\DC?u`4>\UXZ%Kg&BQHk("ic^!X9ltgqtI3e=o.;"S%G3m)+SLncUO-Bj@.kU,?c,OYT.;r*JU=LFZW7Y^A[Mh6:;]^3+oqR$AlGlp)Q'dX/dC4T?%\3U!@A:aZ@BTN#;[==2'?\Khg58*-V5J$QlU&Acu>p;Dr8"i-ep:.Dg<E@?FP`QGXUWSf*(kg=fK2C:7A%*AgFf.>*p.u[C&5$.g%]*;T=[(a0W@&C=1Us90RVR6?`cN[pW1nZ%c.GT^,gl>[mZ*WO@lpi'g1fuQ1KcReYf_M*/oU26!GU=fGH,je[Fp\AH2#'UUEQ;rS%G&aEBK`k6kI&+-gfI8M1dVO19%\bfT#b&W&.F%84g%(FL+0@Ug>'GA.meD1c/^O2_"4<@aT>TAJd?N4Sle6m:PX_9DM`Z*_Z(#pZ%;i!9,dHB!pA#DS+9!dV.=IR\%F3t[U9keLccBbB4C![PR9ki(:?.cF:/'n&_+k2`gI3*T[*d>brGC279pjCrgq7PbZAZ*1Pa%+=5%c^,ZEY<+pTGKO-6I'd(LCW)[iN6a@n9khU;)RZG!j)^2a;qbQ'`^^rOL)p4nmD3RLOOg/XW:e4/[eM^pKKi=l4*I[0o/l&J&0!K9%TVsH^:?1!*g%$t_N>d@EU1l.t27I(.bL:Dgd57GSg9b?+G3l;kjrGOX:`D:Xo4=i4A]I=,NfVa3T<C=??Yt&t\;csI;$1a3ApiG8%go))42%V]]`odfPNLDG;Z9E#BDPB/Wo*4GKc'IOoNuG6lB\rTuJ\+dcjnTo="mbaanj^n!]E,^&(3b-?GC1HUHldKZ54=^pn+^SQ%nbI!KT$_J#VaK(RdAD-qm+_*rY]&jlY]"l4k4c-!ElZ,49lV!H-EJ8BI1oQjY]%fill51P`4g5P$*eCoqN1X;SEtGCq+X_85^jAE%*P$+6Om"-^&]_#`+MSX,&>3s%oE@M;'H[VA2mrGbj>Y$d!r:)d9lraJMWb8/:oFFT6K!;!CW(5U"3>E+bFL^1KfcKn2mieogc&<K%-)_ClLi!gdRgZlK6,#A4Opp9<U)!e)k-uiU^c,?hS:gOt!\&#<K`P@)HX.X'I^7GQ.9rKq7T(`ni1&9-`C)CuNkb^(hOMIU$0KJ=%L]rl!VndZ]GuH7>@,@E(q#iO;g:%)iXKGP;4opYQW:=_gf\nH:2<#=(:KSi:;>>f%P1iP0CC+dpa`\A[hAhXu+MB3.'1d&EmLfce%/I?Q`2)&r`*u-JJNj(ZshAfsN!55q>I]WMp.tER;DV$,n9fRJF]Ihck:;RtEY`nRbB^4>'Fs*l3Q<0Y@'&FB*`IN4YpkG0FQ..[A%hRMO!TJtQt9@=dRdZa=CSYTf0.FoPBDehu?nPqr%oc?AE,=$gU2oXJadTbFc[Y!F<Tg=RD-_r])=F3@M8__hIH6klnnT@>^=Dpcm%*tYN0g=lhc>LMR;K_FQ=)]c:E5I/^kp6N#BUe1dck(UVVi*4?_X&T5ZRia`M>7ssRc!ggAQU"!&7Z\Pr>AAQdpuY01"7XQ2\6K$k%r$7UZA._&"G(G#3'heb]Rg09dZeiho^=][H4SOS^p#[XHE-#InbaPcm4Q-WT]r=_V!5<aHlj*%)F0@$CDr+XTRn$otO`-gZ'Hl9q%H[$[j4M,\Xhn2;T$2)ON9a/a"[JLNZ2_P_-!KVI/!>OI]QVJF:2pWOILi6TN$LEb#/R`SGf+RbrI[-ijG,'`(Yo>"Z9b@FmHt0'G%iYu#+,egOM,k6jZ$PM@L-^+6?8KJ!(NEmZ`D\7sAZ#B!s#_&8j.$=HT>oVI81YucMheG)>n/FAF"MY6DJClf(=N%oc9gn=e8HHcD%OZ,ht)uCkch\NRMUq]LY6i7n4U([O9erSA)lse%b>;Zr:M&e2Mm'i5r!VW")*[JL?lR0bl@Ak7u)2qccJUIpm,=$]Vqa37:%2Y_Z%DtP:gpC.p)mMgSKiG[]h"b4FbU#9j_$7H=D#0:_X#/+%3)n/TVr^M2FiG[.t'E'h'W*:RVOYK9!Rf\<Frl0rLKYOc4-39.o0F;\.%[nd'1h4RIH*#i-<i7QtN!@K5E/SnM1JE*ki$oe`JaFNl$4;i*k,*;r)OCb*#O`<esS@"kq^i<j7)/t-X<FFa:$oe6<$Z%0kJP2E1%r+>W-N#[@u9D`#VRt?.uKJNW0(PM,\!*ipd#68":gBR_Km!pDGNB:P:m&1j&('r.hr[fg9#Q?:dY6t23+=Rru\$0PO>A:tWRl_2>%!^gf9hu]<++M`]=IO"ni:gF^0Kb\)7^u%II9S30XG0"TQ^hFt,78f3Mr[-B/M14Kn=JF^4J9h@r/V6/5kdSWh($N-JNUG`>`=^`f%nDELH=Misi_NkN-/J?87r*,],('OUg&o.dT>\%mY!aM7?>=*juKXHC3a8N,N^dXug_14%_=^))8F9'10!QTVh"MmOG;3PChCfG7;%E+r7N>b?Q)\1*[k\>W5LJqAoN3WTSjCc5S!<m+-19;X=l";fb"!!a<c7KIII.;N!;:Em-0[9Fa`TYX'g(]YIZA5`ON>ibeaG]8d5%J+2Ao3cFg#i8D*uP;kPi_'BUFZAei"Y&'sL[+cjLTS!OdNgh;NKo8@X!t/0g3jr/#PkSB3)-j\mEAk=Ggk/-M*;:&.$Wm$,[Tp=5%:aihmBa\:M.1+;JcFfk/Y^hMhSibrjB!qcV_j*r99@YNLEPtXDLmBupeXmC6*4M/p%Q>%$"?tVb[iTq,R;Y7`E-W\X=Jb#L]M#7'%X9<8o2RNVtk@T_X"V9d.Z@dfAkK7*F_8oWt@mXR^<N;"uoR>DaPt5cSq^kt/.GYfSPt5cSN2cm;h!Fk38?eEO5K>5gGL$<_/tlHT%&u\kUU"Z"@=_%G2!Q=*\iHhg3LeF19MD4$f!jL1djFAV[f"7`.-](C(lCE_l&PQHX<k/hLeP\GJW1$+i1["92'ULYU'*6)6FQ,Tr%YQBYSC@6<],gOZrMbXhU$A.CCo#Z>d+E9sT_9ES_M/&1jDC3JLQ5FN%-q2S#F3_%GQ3YR=$qTMI*D(i>$?Mo$jFlOo;XVRA^9;V:%`$G^+/+_'p6!V9`9*rPHfI3Oknm@(bQS_sKbc383KG@6e:.HWEY*(fu*t'GKV^$DU\=ARQ!o+oA\71k\?MJ7B.5#>E@L:X%::1?[%/nt!9-!4B!rE+HQ-ue&nW)%T@_MLo(Qs:9*/I`ArQH,C(iP[#Or3AW`X*b))':3d(lV.[50'=R.BXKsZbCpRq!NB4h`64[6&4Bbu%9+K=KQe?3_+tfc>GDNc!Q5lQK^^A;T`,#h!BL0Q_9me7C\>4tb";.!-R<Co+XWK(><Ml+:%@7dJGFQONB>Z#iETLdu[DGuXXK?lV%,R$;E\9SD3<lMS,!b(2k-#C)]UF\>M_:m%59A"2D8""P.]W$@]***r!$PY5B@B8>)7+'nd(u`ad7U$bU$5"n'-?hkfS=WEd+Ek89%$.;k/Y!Re7RQU70KM.ch\Id__-?h(1\<N%*:V@=uP#hBg&u2RO%8M^u8XMrG/gbUW"gs]EkR)(.@\SG.9+7H^i0'rSERi$5SQ`ks%-(8`U[hm[D+Q8Kld&oEb\3<3q,u$,P8rpY<`37\oUR^cmW`&]Z_J^/3>Y]C,Rg6Hin'DD\YN#?Yh5`5D6A6?m-V_*i"5b8@iJ)nB%03l"qi6;A[9:dZDE5TbdQ]8'K5Qd8aC]:']E!$(@AAcre;b5gBGZ?0I:gYgu_@:n%KEsO+eIj(]TR_TY#WM7l!YK>.MZk<[^g4#a%_@>:g#pS0?*J#?M%GYY%,2AiiBgRIl'K$=jh]R;!!.?@a#V`c>\0/TF#,6YKK,a;p&I(0^_S--W2^h.a^u,F98<]#H!sq)?_$r2=%?h0*ZJoh!F)\`lYnr&7!IOpL^jMi\RDBQ>V-uae?T2c6RYjfX_#AtYF"rt-=6-b,c2^lb8E8Ur;=hoS-8R;E(DBqFM,e1*7:k4*9%Kjt/igdi1e'#dAX6BETZ.NY:Fi't[1'GB1lL'C1f,9[jG_2T*]<t`KmM/JIc(Sa545_9ro?l%NQ/ljaG7thA8%.TJ7h1:+r0ao94%DH&_P_2O>1r?W?@UXsHE06U`La\IaKe;kp#CID>A.<$LLKLcRp#pD]Wp_\7dZH6R7)Xpe@*/O_1d)\ai(6ZR*+^lNOI*@6o0]5FK%XFPj@8Zi+!DBtGR=lCU:/n3a.U8<Bk)i9LT#&[ZqHVOPc,@<7&KTCN,O:jbJ70<X0,^Th+\</E_5]@si84X&ZLAJ.h2%?Vtft]Y2%4TkuE7"c*gE"h1qa9J7N-;\kc9P!XC!B1;t:j0$;jPBk:2j"6#<:EK<rr`<\&bH,/gr),^%(Jmc4:pEt@Rrb7Rg9#q!H)qHj#.3K%)jEA9a#]@I!!_6>lUUHR_,HQ2'GIaE!52+Z^3jQ`ebHV1mjJ0TPsZq`h\4mEYhpeAUB&+"#Z_#b-:Q#iaN105G`r%hJUStN.jd]r%P?k:Qes$<I8^ZgV1,9FWMWF4t@%e^YnT7V@i$QF,'@Ot?<u2"LWM.2Znt^m@s(uLQDq4Fe4YK+RUj-_hK]U*4M14L$S4(-^&5JtW%-GIVf^J0*@On7u2X,M/hPc%e)'VN0#il463F/4PAqW:$FP@SU0LgH82m1c]r[SjV4Zf-e&SNsI`0B2bI,LbBZ6\S3P*d('4RhPc7%J8[R"P/'"HH4oe]*=hcenBD7e%UaBD`$>J,I+JCH@ra)NDj%J"i0tro"i*(;c548TAssA-`iN&>hpNV.V?4rY:!#j2([B'+@%<ZO%gm\\a.EUsh![iP;Nc?_&DlF;Y/_U!c,!@6GR,hP9q3Ho'Db;EY;C]_e<Nes&%H8<?,tWK*N/^,NF#0jpG3h4I$=LS.&qn)K@s0)b%D`ii=bdWhJ..o%d,BsbGZ#<<8,kfJ7(Am5Jm6g4Z;\4e698O&I?.o&=<rT8?@n\L#poPeS$KMZXiHJj_"OdP]Ie.AH5_!:$+R*g9%E<>?BT(kUuhjF@4qAZd@8:U5I?9j"(9L$t_;H9gV`W:Z5q9;oIq;n"GqopY\S]#)5i?S6E.ghj6NUVfO-bE]5O+6a.i?iQ4B-RQW%RkJS8fb:Vjb1Mp8Qu.&F<HDZNa`#D>,PfS?1]dJJcIX?=NS/Jc^NkEs^jb=3Rq09ZNZZ&cX1<?U^G33Xi&Ati"lM<\bXqZ#kI;N<%3$-XB"Is,B"pCI"UNu@dQqp6ORh*/nObMa\AFHS^E!6(tcVZq%Dk<n7&E)gSTEN&U7R$mgq8`r+fSkZ."Mf:P6ib#J%VGclo<X1g%<S(1]0Bd>Gm31\3Ouc,,)cPpUJ+H>3=FEMr0)0@V"!I*jGR,boDgp)-30XXXRr!<AN30mFj'eeF^\O.t_SHNe\q2t&!Au.W?("MZ%rgROC"p1;?e<'ao3Lp0T>Y_4Br[j3T$iF4TdOT,Npp\%X%J[F)oN-Pqn8El[/F[R<aUWJ/JBnfGn8Bc#:<Jdq/?n4>r[kfG!HuFB%J`KeghZ>7+@))rS`rNpZ`dj_u"\u0"$-.ue,2iS`UHl]dCf_h>!iKFVKO^SpO`5l(6Qk=h@IQP!V;+55"4-Q!SH'9TjmG^2b)TLD%+\O(cE3)upecM"LLkH.Pdt*/["=O<X(C2Sq'J=>1$7oFi9+N^]asN9eQ6!*Do9s5\CWcYbYa`TAf.7LQErq2Q$_1&q)D86m!#dJ$%-cp9t`"n0`!?*RJ9QJB;7Nq8iAOgND7fbGO+AEnj\3QKFcu>sqX1nZl>eo&>d;V4)QY<nE4p>UZjrP-EQWciR%>i^=FuL!B(NM_r%=0;<=;djln<6^5/mNOB*+a06_^i19h\.Eq$ZH4u.QNATg7,FA+Y_BW:X@4jU#:(q+dfLdIO=1W1>i<9M/2>qW_)m50)+\#j,etrc%>ehdtKZ"$h$igp\Ce6tQ![e?UM$r\H!/XWENW9\.fGt#+`tOXCM$j^[9unVhiKGX/)m_1(M9DeKj1@;9Uomo7&f92;!YVDk0EEGZ%B/L>8(YFuS&f6@Y#:>H[SHQq%S7eSU!\s1p`<Dc36sL_<57*8VS.>WU:*#T$BO'Kj#10m$[0AnV,0gcI1bNfd'[XA22$lP.ikYH1%_$V/$!?.jG?NE!DRAY_X`I[b6!F01(%VQiC]-]@0*Sgd1>\&m+BNuO&^Cn[DQ^,q-a=%&8\B$*@5iX%);ZMf8N!o]GMo;Fo)TUmJ%$&sk%(''=eRTtc49:.J-BO'W*0q`M81m'i7&IXOI!0&M,bJ^D\T/4mq1bPC[;p3&j$PT.bQ0"]GKNs\cTrHWFBO#(9!b`S&G6s8h%n`,;B77J_V`^Q[<&K2H'\H!PGNj\sF:*"0RBO#()")&ZQKF*WrN,ScVM^2O0)TPfd6K?S#3.T";*l%r">\#)_HsG`9(`7;Yp`+hF%+qO,D9eJ21!`G'Cb2g]6_N+_aMi=AqR#;qO"#Ca=(`6@rl:`6!k9?ZQ;!1GC[&Y+fPNN;N3H]KUQu`ieHf"#:L.)mrVu]GeNr9!?%:*'4a4G"uW:>k?c5sW657FEB2UPfQNJ>6$J"p%41GAqX9GV%k<G_coNFHI[Pi94WUs!Nbc7h$&"(GW6](`eYZ,)hP]j+PfK*-+[h%*D[t*N%SRKJhT6W<(%R/XEcutd7&_W7+(Ne,GOBG_G?oiGfC=mF>;p=3%HMBF=4U%&MkT+cm>g<?'.IojEFMcjCfeok[J(f$`Sg"%-':J00o&F,*KO#@K.`J2Q2it;WC-_lN:_[SECl?uO>&:VqI!o\eH[jp*O4q&pc4qY7/U<<j;'"sj(V3*cfNWC8=k_>"->Xc':MI`%9:FXd`,FEO5k80M`<VQ+!/3qd@6U73\VLP<;Wj3DD[Fq(Lj=2BkNW@M7*[*Ph@u&m&HP"VF%NDk"lrphiRfUL'T\T]'3PI`783@f%3#<2''0$eJ!'#ONg_`?8SCS7[/bNUr0Xd@32&C6b-s:U'Ws`I_-#HrNWo4L>V;VudlG(-_i'/25\'TV\f,"2nnQM^H#V5B0YGrhP%b)bP$\V349Yh!JI^T)1A,A&P\oVjk^/'>!RE4JH=IU9t=#h9^e)5.t)%tr07)Opoe,?3F/Wd=Pmbf-u=P_6%%8"<^.D?j>tC%]2k%Q>8@J=s]42cuM^YpH>K3Y_q1\VAp9QB.Fc0)RW<R&1beb]SMhg2>i4$I6:F<_`D8g=tPV;W5:#RdPuk.f4m9W9UZ/>jW_^#ABJTq%nJ]E,ABN$a@3j!0"\4kMf*\*SX5V,TBgBItM\q)0-`=A?m["-24Lq/7XB74QM"AT]7j^Z"BqWOUY$"W_OL(r8EfGee`[jQ]d;WPt%IGDW";[U[1rga0Pb\o"`>bg8n122S9OAjlSo&NXm6*AUSA6Gi4c7>)KNVL"Q6XfQ\&KfV<EfM,C1#h439jEWIP5)OVK6,1&W=P2n%MPm62OX)ujd86,kVYV]$B^.E7C&a!LCG`P)*aPN#PQl6b=?jrjAb@9C/!G.>^c8.k(l+po"cR4R*[N2A%:C0_%#dgi_1*r_9sA;[%*=>"?S?rSY5q$DBX'^8,QaA"8Gjr\gq/<HCJ,8No&)TPIiQ:,,:]Ge:eg@5)U8snN\G,L^c0Mjj_qU7Op#PAD_])C#H@5b5_p<i-%rpS/c**uB`Bdib(bMPP[=0W_)oR*]8*rN,UpL`,'RJuYAU=2:(iUQYtDr/!DrO_NIHM%#sBD9gh(;lX^s83LJ4F-YeaeN>Ap@chK%>+'Q+gc.9CrH@u0f&QY"h#$PmVcU#@S3R&.Hf%'_rR6*X4FHYji;4VbrN?H]pDuOo5PO)CgKtH*J,8*DB2>*_3;i=8:]?QBm42Xp%rqrnE4ui=%I.f:j~>%AI9_PrivateDataEnd