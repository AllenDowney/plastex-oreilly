%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: glyphplot.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 187 187
%%HiResBoundingBox: 0 0 186.5498 186.5498
%%CropBox: 0 0 186.5498 186.5498
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 12900 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45527D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D52FD%057D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D527D5252527D7D7D%597D7D7D597D7D7D597D7D7D59FD047D5352FD097D597D7D7D597D7D7D59%7D7D7D597D5252FD047D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D%5259FD18FFA8AFFD17FFAFA8FFA87DFD15FF7DFD19FF7DFD18FF7D7DFD18%FFA8FD19FFA8FF7EA8A8FD15FFA9FD17FFA9FD19FF7D52FD35FF7DA8FD32%FFA8FD14FF7D7DFD36FFA8FD31FF7DA8FD14FF7D52FD67FF7DA8A8FD14FF%7D7DFD2AFFA8FD3BFFA8A8A8FD15FF5352FD29FF7D7D7DFD39FFA8A8A8FD%16FF7D7DFD29FFA87DA8FD52FF5952FD29FFA8A87DFD1FFFA8FD32FF7D7D%FD2AFFA8A8FD1EFFA8A8FD32FF7D52FD2BFF7DA8FD1BFFA8A8FF7DFD32FF%7D7DFD2CFFA8FD19FFA9FFA8A87EA8FD21FFA8A8A8FD0EFF5252FD45FFA8%FFA8FFA87D7DFD21FFA8A87DFD0EFF7D7DFD3AFFA8A87DFD07FFA8FFA8A8%FFFF7DA8FD20FFA8FF7DA8A8FD0DFF5952FD3AFFA87D7DA8FD07FFA87D7D%A8A8FF7DFD20FFFD04A8FFFFFFA8A8FD09FF7D7DFD3AFFA8A87DA8FD06FF%A8A87EA87D7DA8FD21FFA8FD05FFA8A8A8FD09FF5952FD3BFFA8A8A8FD09%FFA8A87DFD27FFA8A8A8FFA8FD08FF7D7DFD0CFFA8FD29FFA8FD05FFA8A8%FD09FFA9A8A8A8FD21FFA8FD04FFA8A8FFA8FD09FF7D52FD0BFFA8A8A8FD%1AFFA87DFD0BFF7D7D7DFD05FF5284FFFF7DFFFFA87DFFFFFFA8A8FD1FFF%A87DA8A8FFFFFFA8FD0CFF7D7DFD0AFFA8FFA8FD1BFF7D7EA8FD05FFA8FD%04FFA87DA8FD04FFA87D7DA87DA8A9A87DA8A8FFFFA8A8A87DFD1DFFA8A8%A8FD11FF7D52FD08FFA8A8FFFFA8A8FD12FFA87DA8A8FFFFFFA8A87DA8FD%04FF7D7DA8FFFFFFA8A87DFD04FFA884A8A8847DA8527D7DFD04FFA87DA8%A8FD15FF7DFD05FFA8A9A8FD12FF7D7DFD09FFA8A8FFA8FD13FFA8A87DFD%05FFA8A8A8FFFFFF7DA87DFD04A8FFA8A8FD04FFA8FFA8A8A8847D7EA8A8%A8FFFFFF7DA8A8FD09FF7DA8FD0AFF7D7DA8FD04FFA8FD14FF5352FD0AFF%A87DA8FD12FFA8A8A87DA8FD05FFA8A8FFA87D7D7DA884A87DA8FFFF7DA8%FD04FFA8A8A8FF7DFD05A8FFFFA87D7DA8A8FD07FF7D7D7DFD09FFA8A87D%A8FD19FF7D7DFD0AFFA8A8A8FD13FFA8FFA8FD06FFAF7EFFA8A87DAFFD05%A8FFFFFFA8FD05FFA8A87EA87DFFA8FF7EFFFFA87DA8A8FD08FFA87DA8FD%0AFFA8A8A8FD19FF7D52A8A8FD07FFA8FFA8FD15FFA8A8A8FD06FFA8FFFD%04A8FF7DA8A8A8FD09FFA85252A8FFA8A8A8FFFFFFA8A87DFFA8FFFFA8A8%FFFFFFA8FF7EFD0BFFA8A8FD17FFAF7D527DFD08FFA8FD19FFA8A8FD06FF%A8FFFFFFA8FFFFA8A8FFA8FD09FF7D7D52A8FFFFA8FFA8FD04FFA8FFFFFF%A87D7EFD04FFA8A8FD0BFFA87DFD07FFA8FD0FFFA9FF5252FD06FFA87DFF%FFFFA8FD17FFA8FD05FF7D7E7DFFA8A8A8FFA8FFA8A8A8FD08FFA87D7D7D%FF7DFF7D7D527E7DFF7DFFFFFF7DA87DFD05FF7DFD04FFA87DFFFFFFA8A8%7DA8A8FD05FFA87D7DFD10FF7D7DFD08FFA8FFA8FD19FFA8FFFFFF7D7D7D%A8FFFFFD04A8FFFF7DA87EFD08FFAF7DA8A87DA8A87D527DFD04A8FFFFA9%A8A8FD09FFA87DAFFD04FF7DA9A8FD06FFA8A8FD11FF7D52FD09FF7DA8A8%FD17FF7D7D7DFFA8A852A87DFFFFFFA87D7DFFFFA87D7DA8FD08FFA8277D%7DA87D7D52847DFD07FFA8A8FD06FFA8A859A87EFFFFFD04A8FD06FFA87D%7D7DFD10FF7D7DFD09FFAFA8FD17FFA8A87DA8A87D7DA8A8A8FD04FFA87E%A8FFA8A87DA87DA8A8FD05FFA8527DA8A8FFA87DA8FFA8FD06FFA87EFD05%FFA8FF7D7DFFA8FFFFA8FD09FFFD05A8FD0FFF5352FFA8A8A8FD1EFFA8A8%A87EA859FD05A8FFA87DFFA87D7DA8FF7E7D7D7DA8A8FFFFFFA87D527DA8%A8FFA97D7DA8A8FD06FFA8A8FD05FFA87D7D7DFFA8FD0CFFA87E7D7DA8FD%0FFF7D7DFFA87DFD22FFA8A8A87DFF7DA87DA97DA8A87E277D7EA87DA87D%7D52A8FD04FF7D7D7DFFA8FFFFFF52A87EFD0DFFA8A8A8FFA8A8A8FD0BFF%A8FFA8A8A8FD0FFF5952FF7D84A8FD1FFFA9FF7DA8527DA8FD057D527D52%52277D7DA87D7E28527DFFFFFFA8A87D7DA8FFFFFFA87D7DA8A8FFFFAF7D%FD09FFA8FFA8A87DA8A8FD09FFA8FFA8A8A8FD10FF7D7DA8FF84FD22FFA8%7D7D7DFFA87D537D7D7D527D7D52527DA8A8525252A8FD04FFA8A87DA8FF%FFFFA8A87D7D7EA8FF52527DFD0BFFA8A8A8FD0BFFA8A8FD12FF7D52FFFF%FFA8FD21FFA8A8A87D7DFFA8597D7D527D7DFF525227A8A85227527DFFFF%FFA88484A8A8FFFFFFA8FF7DA87DA8A852527DFD09FFA8A8FFA8FD20FF7D%7DFD28FF7DFFFFA859A87EA87DA8FF7D527DA8FF7D7D527DFFFFA8A87DA8%A8FFA8FD05FF7E84A8FFA87E7DFD09FFA8FD23FF7D52FFFFFFA8FD23FFA8%A8A8FFA87D7DFFA87D52FFA87D53A8FFA8527D7DA8FFA87D7DA8A87D7DA8%FFFFA87D7D7DA8FFFFA852A8FD2CFF7D7DFD28FFA8A8A8FFA87DA8FF7D52%52A87DA8A8FF7E7D52A8A8FFA8FFA8AFA8A87DA8FFFF7D7D52527DFFA87D%52A8FD0CFFA8FD06FFA8A8FD17FF5352FD22FFA8A8FD04FFA87D7D7EA87D%7DA8A87D5352527DA8FFFF7D527DFFFFFFFD04A8597DA8FFFFA85252527D%A8A87D5284FD0BFFA88459A8FFFFFFA87D7DFD17FF7D7DFD22FFA8A87EFF%FFFFA8A87DA8A87EA8A8A8FF527D52A8FD04FF7DFD05FFA8A8A87D52A8FF%FF5252527DA8FFA8A8A8AFFD0CFFA8A9A8FFFFFF7EA87DFD17FF5952FD21%FFA8A87DA8FFFFA8A8A87D7DA852A8FFA859527D7D52FD04FFA8A8FD06FF%A87D7D7DFFA8FD047DA8FFFFA8A8A8FD0AFFFD04A8FFFFFFFD04A8FD17FF%7D7DFD22FFA8A97EFFA8A8A8FFA87D7D7DA8FF537D527D7D53A8FFA8FFA8%A8FD06FFA8FFA87DFFA8A8A87DA8A8FFFFFFA8A8FD0BFFA87DA8A8FD05FF%A8FD0DFFA8A8FD08FF7D52FD21FFA8FFFFA87DA87DA87D7D527D527DA87D%5952527D27A87D7DA8FFA8FD07FFA8A852FFFFFFFD05A8FFFFFFA8FFFFFF%A8FD06FFFD04A8FD05FFA8A8A8FD0BFFA8A8A8FD08FF7D7DFD24FF7DA8A8%7EFFA87D7D7D5252A87D7D527DFFA87DA87DA8A8FD08FFAF7D7DA8FFFFFF%84FD09FF7DA8FD06FFA8A8FFFFA8FD05FFA9FD0BFFFD04A8FD08FF7D52FD%1DFFA8A8A8FD04FF7D7DFF7DA87D7D527D527D7DA87D7D52FFA87DA8A87D%7D7DA8A8FD05FF7D5252A8FFFFA8A8FD08FFA8A87DFD05FFA87D7DAFFD04%A87EFD0FFFA8A8A8FD08FF7D7DFD1CFFA8FFA8FD06FFA8FFFFA8FF7D7D52%7D537DA8A87D7DFFA97DFFA8FD047DA9FD05FFA87D7DA8FD0BFFA8A8A87E%A8FD04FFA8A884A8FFA8A87EA8FD0EFFA8FFA8FD09FF5352FD09FFA8A8A8%FD0FFFA8A8A87EA8FD06FFA8A8A9A87E7DA87D5352A8FFA852FFFFA8A87D%52A8527DA8FFA8FFFFFF7DA852A8A8FD09FF7DA87DFF7DFD05FF7DAF7DFF%FFFF7E7D7DFD12FFA87DFD06FF7D7DFD08FFA8A87DFD12FFA8A8FD06FFA8%84A8A8FFA8A8FFA8847D7DFFFF7D52FFFFFF7D7D7DA87EA87EA8FD05FFA8%52A8A8FD08FFA87DFFA8FFA8FD06FFA9A8FFA8A87DA8FD12FF7D7DA8FD05%FF5952FD07FFA8FF7D7DA8FD0FFFA8FFA8A8A8FD05FFA8A87DFFFFFF7DFF%7DA8A87EFFFF7D7D7DA87DFF7DA87DA87D7E7DFD05FF84537DA8FD06FFFD%05A8FFA8A8FD06FFA8A8FFFFA8A87DFD11FFA8847DA8FD05FF7D7DFD08FF%A8FF7DFD10FFA8FD08FFA8A97DA8FD05FFA8A8FFA8FFA87E52537D7DFFFF%A8FF7D7D7DA8FD05FFA87DA8A8FD07FF7EFFA8A9FFFFA8FD07FFA8FD17FF%A8A8A8FFFFFFA9FF52527EA8FD05FFA8A8FFA8A8FD18FFA8A8FFA8FD07FF%A87D7DA8A87D277D7DA9A8A8FFFF7DFF7EFD05FFA8FFFFA8FD08FFA8A8A8%FD23FFA8A8FFFFFFA87D527DFD0AFFA8A9FD23FFA8FD047DA87DA8A8FFFF%A8FD04FFA8A8FD07FFA8FD2FFF7DFD05FF7D52FD0BFFA8FD1BFFA8A8FD06%FFA87D527D7DFF7DA8A8FD07FF7DA8FD06FFA87DA8FFFFFF7D7D7EFD09FF%A8FD1EFFA8A8FD04FF7D7DFD28FFA8FD07FFA87D7DA8FFA87DA8A8FD07FF%A8FD05FFA8A87DA87DA8FFA87DA8FD05FFA87DA8A8A8FD24FF5352FD2BFF%7D7DA8FFFFA87DA87DFFA8A87EA8FD0DFFA8FD057DA8A8A87DFD05FF7E7D%52A87DA8A8FD22FF7D7DFD2AFFA8A87DA8FFFFFFA87EFFA8FFA8FD0FFFA8%FF7EA87DA8FFFFFFA8FD04FFA8A97DA8A87D7DA8FD22FF5952FD2AFFA87D%7D53FD04FF7E7EA8FD0DFFA87DA8FFFFA8FF7DFF7DFFFFFF7DFD05FFA8A8%7DA87D7E7DFD22FF7D7DFD2AFFA8A8527DFD05FFA8A8FD0DFF7E847DFFFF%FFFD05A8FFFFA8A8FD04FFA87DA8A8FFA8A8FD22FF7D52FD2BFF7D7D52FD%04A8FFFFFFA8A87DA8FD08FF84A87DA8FD04FF7DA87DA8FFFFA8A8FD06FF%7EA8A8FF7EFD22FF7D7DFD2BFFA8A87D7DFF7DA9FFFFA8FF7D7D52FD0BFF%A8FFFFFF7D7DA8A8A8FFA8A8A8FD0AFFA8A8FD21FF7D52FD13FFAFFD0FFF%A8FD09FF7DA8A87DA8A87DA87DA85252A8FD09FFA8A8A8FFA87D527EA8FF%A8A884A8FD0AFFA8FD22FF7D7DFD11FFA8A8FFA8FD0CFFA8A8A8FD09FFA8%7DA87DA8A8A87D7D7DA852A8FFFFFFA8A8A8FD04FF7DFFFFA8A87D7DFFA8%FFA8A8A8FD2DFF5352FD11FFA8A87DA8FD0CFF7DA87DFFFFFFA8FD05FFA8%7DA8A97EA8A87D7D7DA87D7DFFFFFF7D7D7DFD05FFA8FFA8A87D84A8A8A8%FFA8FD2EFF7D7DFD12FFA8A8A8FD0CFFA8A8A8FFFFA8A8FD06FFA8FFFFA8%A8FF7D847DA87DA8FFFFA8A87DA8FD08FFA8A87DFFFFFFA8FFA8FD2DFF59%52FD11FFA8A884A8FD0CFFA8FFA8FF7DA87DFD09FF7DFFA87E7DA8A8A87D%FFFFA8A87D59A8A8FD07FFA87D7DA8A8FD17FFA8FD0DFF7DA8A8FD08FF7D%7DFD12FFA8A87DFD0DFFAFA8A8A8847EFD0CFFA8A8A8FFFFA8FFA8A8A87D%7D7DFD09FFA8FFA8A8FD16FFA8A8FD0CFFA8A87DA8FD08FF7D52FD11FF7E%A87D7DA8A8A8FD0BFFA8A8A8A97DFD0DFFA8A8A8FFA8FF7DA87D7D527DA8%FD07FF7DA8FF84A8FD13FFA8FFA8A87DFD0BFFFD05A8FD08FF7D7DFD12FF%A87D52A8A8FD0DFFA8FFFFA8A8FD0DFFA8A8A8FFFFA8A8A87EA87DFD09FF%A8A87DFD07FFA8FD0CFFA8FFFFA8FD0CFFA8A8FFA8FD06FFA8FFFF7D52FD%11FFA8A87D7E7DA8A8FD0FFFA8A8FD0EFFFD04A87DFFFFFFA8A8A8FD07FF%A8FF7DA8A8FFFFFF7DA97DA8FD0CFFA8A8847DA8FD0DFFA8A87DFFFFFF7D%FF7DFFFF7D7DFD12FFA8FF7DA87DFD10FFA9A8FD11FF7DA8FD04FFA8A8FD%08FFA8FD07FFA884A8FD0DFFA8A87EFD0FFFA8FD04FFA87E7DA8FF5352FD%13FFFD05A8FD0FFFA8FFFFFFA8A8A8FD09FFA8A87D847DFD05FFA8FD05FF%7DA87DFD07FFA8A87DA8FD0EFFA8FD15FFA8A87DFFFF7D7DFD14FFA8A9A8%AFFD12FFA8A87DFD0BFFA8FD0EFFA9A87EA8FD06FFA8A8A9A8FD25FFA8A8%FFFF5952FFFFFFA8A8A8FD0FFFA8A87EFD12FFFD04A8FFA8A8A8FD09FFA8%FD0BFF7DA87DFD09FFA8A8FD26FFA8FFFF7D7DFFFFA8FFA8FD12FFA8FD12%FFA8AF7DFFA8A87DA8FD08FFA8A8A8FD0AFFA8FFA8A8FD13FFA8FD1FFF7D%52A9A8FFFFA8A8FD0FFFA8FD13FFA8A8FFFFA8FF847D7DFD07FFA8A87DA8%FD08FFA8FF7EA8A8A8FD12FF7D7D7EFD1EFF7D527DA8FFFFA8FD09FFA8FF%A8FFFFFFA8FFA8FD17FFA8FF7EA9FD07FFFD04A8FD09FF7EA8A8FFA8FD11%FFA8A87DA8FD1CFFA8A85252FFA8FF7DA8FD06FFA8A87DA8A8A8FFFFFD05%A8FD15FF7DA8FFFF7EFD07FF7EFFFFA8FFFD04A8FFFFFFA8A87DA8FD13FF%A8A8A884FD1DFFA87D7DFFFFA8A8A8FD05FFA8A8A87DA8A8A8FD04FF7D7D%FD0FFFA8FD06FFA9FFFFA8A8FD08FFA8FFA8FF7DFF7DFD04FFFD04A8FD13%FFA8FFFFA8FD1EFF5952FFFFFFA8FD07FFA8A87DA87DA8FFFFA8A8A87DA8%FD0DFF7DA87EA8FD08FF7DA87DA8FD04FFFD05A8FF7D7DA8FFFFFFA8FFA8%A8FD14FFA8FF7DFD1EFF7D7DFD0BFFA9A8A884A8A8FFFFFFA8FFA8FD0FFF%A8A8A8FD09FFA8A87EFFFFFFA8A87DFFFFFFA8FF7DFD07FFA8FD05FFA8A8%7DFD0EFFA8A8FD1DFF5952FD0BFFA8FFA8A8FFA8FD04FFA8FFA8FD0DFFA8%A87DA8FD08FFA8A87DA8FFFFA8A87D7DA8FFFD05A8FD06FFA8A8FD04FFA8%7D7DA8FD0DFFA8FD1EFF7D7DFD0CFFA8FFA8FFA8FD05FFA8A8FD0DFFA8FF%FFA8FD08FFA8FFFFA8FFFFA8A8FF7DFD05FFA8FD0DFFA8A87DFD2DFF7D52%FD0DFFFD05A8FD05FFA8FD0DFFA8FFFFA8A8FD07FFA8FFFFA8A8FFA8A8FF%A8A8FD11FFA8A8FFA8A8FD06FFA8A8FD24FF7D7DFD0EFFA8FD19FFA8FD0B%FFA8FD05FFA8A8FD14FFA8A8FD05FFA87DA8FD24FF7D52FD28FFA8A8FD0A%FFA8A8FFA8FFFFA8A8FD14FFA87DFD05FFA8A87DFD24FF7D7DFD12FFA8FF%A8FD20FFA87EA8A8FD0FFFA8A8FD0CFFA8FFFFA8FD24FF5352FD05FFA8FF%A8A9FD08FFFD04A87EFD0DFFFD04A8FD0EFFA8A87DA8FD0EFF7DA87DA8FD%04FFA8A8A8FFFFFFA8A8A8FFA8FD24FF7D7DFD05FFA8A8FFA8FD09FFA8FF%7DA8FD0EFFA9A884FD0FFFA8A8A8FD0DFFA8AFA8A8FD04FFA8FF7EFD07FF%A8FFA8FD23FF5952FD05FFA8A87DA8FD09FFFD04A8FD0DFFA8FF7DA8A8FD%0DFF7DFFA8A8FD0DFFA8A8FFA8AFFFFFA8A87D7DA8FD07FFA8A8FD23FF7D%7DFD06FFA8A87DFD09FFA8FFA8A8FD0EFFA8FFA8FD0EFFA87EA87DFD0FFF%A8FFA8FD04FFA87DFD2DFF7D52FD05FFA8FFA8A8FD0AFFA8FF84FD0EFFA8%FFFFA8FD0DFFA8A87D7DA8FD0FFFA8A8FFFFA8A8A87EA8FD2CFF7D7DFD06%FFA8FFA8FD0BFFA8A8FD20FFA8A87EFD11FFA8FD33FF7D52FD07FFA8A8A8%FD0BFFA8A8FD0EFFA8FFA8FD0DFF7DFFA8A8FD45FF7D7DFD08FFA8A8FD1D%FFA8FD0EFFA8FFA8FD45FF5352FFFFFFA8FFA8FFA8FFA8FD1DFFA8FD0FFF%A8A8A8FD44FF7D7DFFFFFFA884FFA8FD31FFA8FD45FF5952FFFFFFA8FFA8%A8A8FD76FF7D7DFD04FFA8FF7EA8A8FD75FF7D52FFFFFFFD04A87DFD07FF%A8A8A8FD6CFF7D7DFD04FFA8FD09FFA8FFA8FD6DFF7D52FFA8FFFFFFA8FF%A8FD05FFA8FFA8A8A8FD6BFFA87D527DFD05FFA8FFA8FD05FFA8A87DA9FD%6AFFA8A85252FD07FFA8A8FD04FFA8A8A8FFA8FD6CFF7D7DFD0EFFA8FD6F%FF5952FD0FFFA8FFA8FFFFFFA8FD68FF7D7DFD0AFFA8FFA8FFFFFFA9FFA8%A87D7DA8A8FD66FF7D52FD09FFFD05A8FD04FFA8A87D527D7DFD66FF7D7D%FD0CFF7DFD05FFA9FF7D7D7DA8FD66FF7D52FD09FFA8FFA8A8A8FD04FFA8%A87E7DA87DFD21FFA8FFA8A8FD41FF7D7DFD0AFFA8FD07FFA8FFFD05A8FD%1FFFA8FD45FF5352FD0BFFA8FFA8FD05FFA8FFFD04A8FD1EFF7DA8FFFF7D%FD42FF7D7DFD0CFFA8FD09FFA8A8A8FD1FFFA8FFA8A8FD42FF5252FD0DFF%A8A8FD07FFA8A8FD1FFFA8FFA87D7DFD42FF7D7DFD2CFFA8FD0BFFA8FFA8%FD41FFA8FF5952FD28FFA884FFA8A8FD0BFFA8A8FD42FFA8A87D7DFD28FF%A8FFFFA9A8FD51FF5252FD28FFAFA9A87DA8FD51FF7D7DFD2AFFA8A8A8FD%51FF5352FD29FF7DFFA8A8FD51FF7D7DFD2AFFA8FFA8FD51FF5952FD2BFF%A8A8FD51FF7D7DFD7EFF7D52FD7EFF7D7DFD7EFF7D52FD18FFA8A8FD17FF%A8AFFD18FFA8FD19FFA8FD18FF7D7DFD18FF7DFD19FF7DFD18FFA8FD19FF%A8FD18FF7D277D527D527D527D527D527D527D527D527D527D527D527D52%52527D527D527D527D527D527D527D527D527D527D527D527D5252527D52%7D527D527D527D527D527D527D527D527D527D527D287D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D7D52%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:57:06+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T13:57:06+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T13:57:06+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7N+Xv5e+QbryD5aubny1&#xA;pU9zPpVjJNNJY2zu7vbIzMzMhLMxNSTirIP+Va/lz/1Kuj/9IFr/ANU8Vd/yrX8uf+pV0f8A6QLX&#xA;/qnirv8AlWv5c/8AUq6P/wBIFr/1TxV3/KtPy5/6lXR/+kC1/wCqeKu/5Vr+XP8A1Kuj/wDSBa/9&#xA;U8VQMP5U+RU1y7vH8t6Q1lNbW0MNv9Rt/gliknaV+Pp8RzWWMVG5479BiqO/5Vr+XP8A1Kuj/wDS&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:0C3AF29051D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:D68BA99A51D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -186.55 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 186.55 li
186.55 186.55 li
186.55 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0.25 0.25 mo
0.25 186.3 li
186.3 186.3 li
186.3 0.25 li
0.25 0.25 li
0.25 0.25 li
cp
186.3 0.25 mo
186.3 3.3999 li
186.3 186.3 mo
186.3 183.149 li
149.101 0.25 mo
149.101 3.3999 li
149.101 186.3 mo
149.101 183.149 li
111.9 0.25 mo
111.9 3.3999 li
111.9 186.3 mo
111.9 183.149 li
74.6504 0.25 mo
74.6504 3.3999 li
74.6504 186.3 mo
74.6504 183.149 li
37.4502 0.25 mo
37.4502 3.3999 li
37.4502 186.3 mo
37.4502 183.149 li
0.25 0.25 mo
0.25 3.3999 li
0.25 186.3 mo
0.25 183.149 li
186.3 0.25 mo
183.15 0.25 li
0.25 0.25 mo
3.40039 0.25 li
186.3 37.4497 mo
183.15 37.4497 li
0.25 37.4497 mo
3.40039 37.4497 li
186.3 74.6499 mo
183.15 74.6499 li
0.25 74.6499 mo
3.40039 74.6499 li
186.3 111.899 mo
183.15 111.899 li
0.25 111.899 mo
3.40039 111.899 li
186.3 149.1 mo
183.15 149.1 li
0.25 149.1 mo
3.40039 149.1 li
186.3 186.3 mo
183.15 186.3 li
0.25 186.3 mo
3.40039 186.3 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
0.25 lw
58.6152 129.78 mo
58.6152 128.91 57.9097 128.205 57.04 128.205 cv
56.1709 128.205 55.4653 128.91 55.4653 129.78 cv
55.4653 130.649 56.1709 131.354 57.04 131.354 cv
57.9097 131.354 58.6152 130.649 58.6152 129.78 cv
170.55 24.8496 mo
171.4 22.1997 li
170.55 24.8496 li
168.55 23.3999 li
170.55 24.8496 li
166.55 27.6997 li
170.55 24.8496 li
154.3 8.19971 mo
155.101 5.69971 li
154.3 8.19971 li
152.55 6.94971 li
154.3 8.19971 li
150.2 11.1997 li
154.3 8.19971 li
163.601 20.8496 mo
164.4 18.3496 li
163.601 20.8496 li
160.45 18.5498 li
163.601 20.8496 li
159.45 23.8496 li
163.601 20.8496 li
160.101 44.75 mo
160.9 42.3496 li
160.101 44.75 li
158.2 43.3999 li
160.101 44.75 li
155.351 48.1997 li
160.101 44.75 li
140.4 58.0498 mo
142.5 58.0498 li
140.4 58.0498 li
140.65 57.1997 li
140.4 58.0498 li
138.05 56.3496 li
140.4 58.0498 li
136.25 61.0498 li
140.4 58.0498 li
142.5 58.0498 li
146.2 41.4497 mo
147.05 38.7998 li
146.2 41.4497 li
144.45 40.1499 li
146.2 41.4497 li
141.45 44.8999 li
146.2 41.4497 li
138.101 49.3999 mo
138.95 46.7998 li
138.101 49.3999 li
136.05 47.9497 li
138.101 49.3999 li
133.3 52.8999 li
138.101 49.3999 li
160.101 41.4497 mo
160.851 39.0996 li
160.101 41.4497 li
158.3 40.1499 li
160.101 41.4497 li
155.5 44.7998 li
160.101 41.4497 li
186.3 18.3999 mo
185.25 19.1499 li
186.3 18.3999 li
158.95 29.5 mo
159.75 26.9497 li
158.95 29.5 li
157.05 28.0996 li
158.95 29.5 li
154.601 32.6499 li
158.95 29.5 li
161.25 47.4497 mo
162.101 44.8999 li
161.25 47.4497 li
159.25 46 li
161.25 47.4497 li
156.7 50.75 li
161.25 47.4497 li
136.9 42.0996 mo
137.8 39.4497 li
136.9 42.0996 li
135.25 40.8999 li
136.9 42.0996 li
133.351 44.6997 li
136.9 42.0996 li
138.05 45.5996 li
136.9 42.0996 li
72 89.9497 mo
72.9004 89.9497 li
72 89.9497 li
72.9004 87.1499 li
72 89.9497 li
68.0503 87.0498 li
72 89.9497 li
68.9502 92.1997 li
72 89.9497 li
74.1504 96.5498 li
72 89.9497 li
72.9004 89.9497 li
186.3 165.35 mo
182.7 168 li
186.3 165.35 li
186.3 164.7 mo
184.4 163.3 li
186.3 164.7 li
139.25 61.3999 mo
141.851 61.3999 li
139.25 61.3999 li
139.2 61.3496 li
139.25 61.3999 li
135.9 63.7998 li
139.25 61.3999 li
141.3 67.6997 li
139.25 61.3999 li
141.851 61.3999 li
171.7 66.0498 mo
173.15 61.5498 li
171.7 66.0498 li
169.05 64.0996 li
171.7 66.0498 li
167.8 68.8496 li
171.7 66.0498 li
131.101 82 mo
132.351 78.25 li
131.101 82 li
128.55 80.0996 li
131.101 82 li
126.3 85.5 li
131.101 82 li
131.601 83.5 li
131.101 82 li
121.851 70.6997 mo
122.9 67.5 li
121.851 70.6997 li
119.4 68.8999 li
121.851 70.6997 li
118.05 73.4497 li
121.851 70.6997 li
123.25 75 li
121.851 70.6997 li
117.2 89.9497 mo
118.25 86.7998 li
117.2 89.9497 li
114.851 88.25 li
117.2 89.9497 li
113 93 li
117.2 89.9497 li
118.65 94.3496 li
117.2 89.9497 li
67.3501 64.6997 mo
68.5503 61.1499 li
67.3501 64.6997 li
64.6504 62.75 li
67.3501 64.6997 li
63.9004 67.1997 li
67.3501 64.6997 li
68.9004 69.4497 li
67.3501 64.6997 li
110.25 90.5996 mo
111.351 87.1997 li
110.25 90.5996 li
107.65 88.6997 li
110.25 90.5996 li
106.55 93.2998 li
110.25 90.5996 li
111.8 95.3496 li
110.25 90.5996 li
104.45 22.8496 mo
104.65 22.8496 li
104.45 22.8496 li
106 18.0498 li
104.45 22.8496 li
101.15 20.4497 li
104.45 22.8496 li
101.95 24.6997 li
104.45 22.8496 li
104.65 23.5 li
104.45 22.8496 li
104.65 22.8496 li
180.95 103.25 mo
182.101 103.25 li
180.95 103.25 li
182.101 99.75 li
180.95 103.25 li
177.851 101 li
180.95 103.25 li
178.55 105 li
180.95 103.25 li
182 106.399 li
180.95 103.25 li
182.101 103.25 li
91.7002 98.5996 mo
92.2002 98.5996 li
91.7002 98.5996 li
93.6006 92.7998 li
91.7002 98.5996 li
88.6504 96.3496 li
91.7002 98.5996 li
88.7002 100.75 li
91.7002 98.5996 li
92.2002 98.5996 li
112.601 100.6 mo
108.45 97.5498 li
112.601 100.6 li
109.5 102.8 li
112.601 100.6 li
113.05 100.6 li
112.601 100.6 mo
113.05 100.6 li
112.601 100.6 li
114.4 95 li
112.601 100.6 li
133.45 46.75 mo
134.15 46.75 li
133.45 46.75 li
135 41.8999 li
133.45 46.75 li
130.55 44.6499 li
133.45 46.75 li
130.55 48.8496 li
133.45 46.75 li
134.15 46.75 li
118.851 0.25 mo
118.55 0.5 li
118.851 0.25 li
110.25 19.5 mo
111.15 19.5 li
110.25 19.5 li
111.9 14.4497 li
110.25 19.5 li
106.851 17.0498 li
110.25 19.5 li
109.9 19.75 li
110.25 19.5 li
111.351 22.8999 li
110.25 19.5 li
111.15 19.5 li
110.25 58.0498 mo
110.95 58.0498 li
110.25 58.0498 li
111.851 53.1499 li
110.25 58.0498 li
106.75 55.5 li
110.25 58.0498 li
109.3 58.75 li
110.25 58.0498 li
111.45 61.75 li
110.25 58.0498 li
110.95 58.0498 li
145.05 69.3496 mo
145.95 69.3496 li
145.05 69.3496 li
146.3 65.5 li
145.05 69.3496 li
142.4 67.4497 li
145.05 69.3496 li
142.75 71 li
145.05 69.3496 li
146.2 73 li
145.05 69.3496 li
145.95 69.3496 li
34.9004 157.75 mo
35.25 157.75 li
34.9004 157.75 li
35.9004 154.7 li
34.9004 157.75 li
31.3003 155.1 li
34.9004 157.75 li
31 160.55 li
34.9004 157.75 li
37.3501 165.2 li
34.9004 157.75 li
35.25 157.75 li
16.3501 72 mo
16.6001 72 li
16.3501 72 li
17.3003 69.1499 li
16.3501 72 li
13.6504 70.0498 li
16.3501 72 li
13.0503 74.3999 li
16.3501 72 li
18.6504 79 li
16.3501 72 li
16.6001 72 li
107.95 105.899 mo
108.8 105.899 li
107.95 105.899 li
108.9 102.95 li
107.95 105.899 li
105.55 104.2 li
107.95 105.899 li
105 108.05 li
107.95 105.899 li
110.101 112.5 li
107.95 105.899 li
108.8 105.899 li
118.351 119.2 mo
119.25 119.2 li
118.351 119.2 li
119.25 116.399 li
118.351 119.2 li
116.101 117.55 li
118.351 119.2 li
115.25 121.45 li
118.351 119.2 li
120.5 125.8 li
118.351 119.2 li
119.25 119.2 li
107.8 119.25 mo
105.601 112.55 li
106.5 112.55 li
105.601 112.55 mo
106.5 112.55 li
105.601 112.55 li
106.5 109.8 li
105.601 112.55 li
103.45 110.95 li
105.601 112.55 li
102.45 114.85 li
105.601 112.55 li
107.8 119.25 li
77.8003 72.6997 mo
78.6001 72.6997 li
77.8003 72.6997 li
78.6504 70.0498 li
77.8003 72.6997 li
76 71.3999 li
77.8003 72.6997 li
74.75 74.8999 li
77.8003 72.6997 li
79.9502 79.3496 li
77.8003 72.6997 li
78.6001 72.6997 li
75.5 48.0996 mo
76.25 48.0996 li
75.5 48.0996 li
76.3003 45.5 li
75.5 48.0996 li
73.75 46.7998 li
75.5 48.0996 li
72.8501 50 li
75.5 48.0996 li
77.6504 54.7998 li
75.5 48.0996 li
76.25 48.0996 li
81.3003 74.6499 mo
82.2002 74.6499 li
81.3003 74.6499 li
82.2002 71.8999 li
81.3003 74.6499 li
79.3501 73.2998 li
81.3003 74.6499 li
78.8501 76.3999 li
81.3003 74.6499 li
83.5503 81.6997 li
81.3003 74.6499 li
82.2002 74.6499 li
70.8501 69.3496 mo
71.75 69.3496 li
70.8501 69.3496 li
71.6001 67 li
70.8501 69.3496 li
69.2002 68.1499 li
70.8501 69.3496 li
67.8003 71.5498 li
70.8501 69.3496 li
73 76.0498 li
70.8501 69.3496 li
71.75 69.3496 li
4.75 48.75 mo
4.8501 48.75 li
4.75 48.75 li
5.7002 45.8999 li
4.75 48.75 li
2.6001 47.1499 li
4.75 48.75 li
1.5 51.1499 li
4.75 48.75 li
7.1001 55.9497 li
4.75 48.75 li
4.8501 48.75 li
25.6504 148.45 mo
26.7002 145.1 li
25.6504 148.45 li
22.3003 146 li
25.6504 148.45 li
21.5503 151.399 li
25.6504 148.45 li
28.1504 156.1 li
25.6504 148.45 li
133.45 83.2998 mo
134.351 83.2998 li
133.45 83.2998 li
134.25 80.8999 li
133.45 83.2998 li
131.601 82 li
133.45 83.2998 li
130.7 85.2998 li
133.45 83.2998 li
135.65 90.0996 li
133.45 83.2998 li
134.351 83.2998 li
85.9004 56.0498 mo
86.75 56.0498 li
85.9004 56.0498 li
86.75 53.5 li
85.9004 56.0498 li
84.1504 54.7998 li
85.9004 56.0498 li
84.3003 57.25 li
85.9004 56.0498 li
88.1504 63 li
85.9004 56.0498 li
86.75 56.0498 li
89.4004 68.6997 mo
90.25 68.6997 li
89.4004 68.6997 mo
90.25 68.6997 li
89.4004 68.6997 li
90.2002 66.1997 li
89.4004 68.6997 li
87.5503 67.3496 li
89.4004 68.6997 li
86.5503 70.75 li
89.4004 68.6997 li
91.7002 75.6997 li
89.4004 68.6997 li
84.75 70.6997 mo
85.6001 70.6997 li
84.75 70.6997 li
85.5503 68.2998 li
84.75 70.6997 li
83.1001 69.5 li
84.75 70.6997 li
81.8003 72.7998 li
84.75 70.6997 li
87 77.6499 li
84.75 70.6997 li
85.6001 70.6997 li
58.1001 64.0498 mo
58.25 64.0498 li
58.1001 64.0498 li
58.9502 61.4497 li
58.1001 64.0498 li
55.9502 62.4497 li
58.1001 64.0498 li
54.8003 66.4497 li
58.1001 64.0498 li
60.4502 71.25 li
58.1001 64.0498 li
58.25 64.0498 li
73.1504 77.3496 mo
74.1001 77.3496 li
73.1504 77.3496 li
74.0503 74.6499 li
73.1504 77.3496 li
70.75 75.5996 li
73.1504 77.3496 li
70.75 79.0498 li
73.1504 77.3496 li
75.5 84.5498 li
73.1504 77.3496 li
74.1001 77.3496 li
72 50.75 mo
72.8501 50.75 li
72 50.75 li
72.9004 47.9497 li
72 50.75 li
70.2002 49.4497 li
72 50.75 li
69.4502 52.5996 li
72 50.75 li
74.0503 57 li
72 50.75 li
72.8501 50.75 li
136.9 67.3496 mo
137.9 67.3496 li
136.9 67.3496 li
137.65 65.0996 li
136.9 67.3496 li
134.95 65.9497 li
136.9 67.3496 li
134.351 69.25 li
136.9 67.3496 li
139.15 74.1997 li
136.9 67.3496 li
137.9 67.3496 li
96.3506 48.0996 mo
97.3506 48.0996 li
96.3506 48.0996 li
97.1006 45.7998 li
96.3506 48.0996 li
94.5498 46.7998 li
96.3506 48.0996 li
93.9502 49.8496 li
96.3506 48.0996 li
98.6006 55 li
96.3506 48.0996 li
97.3506 48.0996 li
53.4502 60.0498 mo
54.3003 60.0498 li
53.4502 60.0498 li
54.25 57.5996 li
53.4502 60.0498 li
51.0503 58.2998 li
53.4502 60.0498 li
50.6504 62.0996 li
53.4502 60.0498 li
55.8003 67.1997 li
53.4502 60.0498 li
54.3003 60.0498 li
116.05 79.2998 mo
116.75 77.0996 li
116.05 79.2998 li
114.15 77.9497 li
116.05 79.2998 li
113.101 81.4497 li
116.05 79.2998 li
118.3 86.2998 li
116.05 79.2998 li
117.05 79.2998 li
116.05 79.2998 mo
117.05 79.2998 li
116.05 79.2998 li
119.55 39.4497 mo
120.5 39.4497 li
119.55 39.4497 li
120.2 37.3496 li
119.55 39.4497 li
117.7 38.0996 li
119.55 39.4497 li
117.101 41.1997 li
119.55 39.4497 li
121.8 46.4497 li
119.55 39.4497 li
120.5 39.4497 li
107.95 24.8496 mo
108.95 24.8496 li
107.95 24.8496 li
108.601 22.7998 li
107.95 24.8496 li
106.101 23.5 li
107.95 24.8496 li
105.601 26.5498 li
107.95 24.8496 li
110.2 31.75 li
107.95 24.8496 li
108.95 24.8496 li
111.4 51.3999 mo
112.351 51.3999 li
111.4 51.3999 li
112.15 49.1997 li
111.4 51.3999 li
109.45 50 li
111.4 51.3999 li
108.95 53.1997 li
111.4 51.3999 li
113.75 58.5498 li
111.4 51.3999 li
112.351 51.3999 li
54.6001 44.0996 mo
55.4502 44.0996 li
54.6001 44.0996 li
55.4004 41.6997 li
54.6001 44.0996 li
52.3501 42.4497 li
54.6001 44.0996 li
52.0503 45.9497 li
54.6001 44.0996 li
57.0503 51.5996 li
54.6001 44.0996 li
55.4502 44.0996 li
80.1001 93.25 mo
80.9502 93.25 li
80.1001 93.25 li
80.9004 90.7998 li
80.1001 93.25 li
77.9004 91.6499 li
80.1001 93.25 li
77.3501 95.2998 li
80.1001 93.25 li
82.6001 100.95 li
80.1001 93.25 li
80.9502 93.25 li
74.3003 63.3496 mo
75.1001 63.3496 li
74.3003 63.3496 li
75.0503 61.1499 li
74.3003 63.3496 li
72 61.6997 li
74.3003 63.3496 li
71.4004 65.5 li
74.3003 63.3496 li
76.8003 70.9497 li
74.3003 63.3496 li
75.1001 63.3496 li
107.95 127.85 mo
108.75 127.85 li
107.95 127.85 li
108.7 125.55 li
107.95 127.85 li
105.7 126.2 li
107.95 127.85 li
104.55 130.3 li
107.95 127.85 li
110.45 135.55 li
107.95 127.85 li
108.75 127.85 li
66.2002 82.6499 mo
67.1001 82.6499 li
66.2002 82.6499 li
66.9502 80.3999 li
66.2002 82.6499 li
63.9004 80.9497 li
66.2002 82.6499 li
63.1504 84.8496 li
66.2002 82.6499 li
68.75 90.5 li
66.2002 82.6499 li
67.1001 82.6499 li
87.0503 165.7 mo
87.3501 165.7 li
87.0503 165.7 li
89.2002 159.1 li
87.0503 165.7 li
82.1001 162.1 li
87.0503 165.7 li
83.7002 168.149 li
87.0503 165.7 li
87.3501 165.7 li
87.0503 102.6 mo
83.6504 105.05 li
87.0503 102.6 li
87.7002 104.55 li
87.0503 102.6 li
87.5503 102.6 li
87.0503 102.6 mo
87.5503 102.6 li
87.0503 102.6 li
88.6001 97.8994 li
87.0503 102.6 li
83.5503 100.05 li
87.0503 102.6 li
118.351 131.149 mo
118.95 131.149 li
118.351 131.149 li
119.75 126.95 li
118.351 131.149 li
115.4 129 li
118.351 131.149 li
114.7 133.8 li
118.351 131.149 li
119.25 133.8 li
118.351 131.149 li
118.95 131.149 li
123 103.25 mo
123.8 103.25 li
123 103.25 li
124.101 99.8496 li
123 103.25 li
119.851 100.95 li
123 103.25 li
119.8 105.55 li
123 103.25 li
124.351 107.35 li
123 103.25 li
123.8 103.25 li
95.2002 115.85 mo
95.9004 115.85 li
95.2002 115.85 li
96.3506 112.25 li
95.2002 115.85 li
92 113.55 li
95.2002 115.85 li
91.75 118.35 li
95.2002 115.85 li
96.6504 120.35 li
95.2002 115.85 li
95.9004 115.85 li
75.5 65.3496 mo
76.3003 65.3496 li
75.5 65.3496 li
76.3501 62.75 li
75.5 65.3496 li
73.6504 64.0498 li
75.5 65.3496 li
73 67.1997 li
75.5 65.3496 li
77.8003 72.5 li
75.5 65.3496 li
76.3003 65.3496 li
110.25 81.2998 mo
111.15 81.2998 li
110.25 81.2998 li
111.101 78.75 li
110.25 81.2998 li
107.75 79.5 li
110.25 81.2998 li
107.75 83.0996 li
110.25 81.2998 li
112.601 88.5498 li
110.25 81.2998 li
111.15 81.2998 li
62.75 65.3496 mo
63.5503 65.3496 li
62.75 65.3496 li
63.5503 62.8496 li
62.75 65.3496 li
59.2002 62.7998 li
62.75 65.3496 li
59.9502 67.3999 li
62.75 65.3496 li
65.1001 72.5996 li
62.75 65.3496 li
63.5503 65.3496 li
127.65 80.6499 mo
128.55 80.6499 li
127.65 80.6499 li
128.351 78.5498 li
127.65 80.6499 li
125.7 79.25 li
127.65 80.6499 li
124.55 82.8999 li
127.65 80.6499 li
129.851 87.5 li
127.65 80.6499 li
128.55 80.6499 li
101 59.3999 mo
101.8 59.3999 li
101 59.3999 li
101.7 57.1997 li
101 59.3999 li
99.1006 58 li
101 59.3999 li
98.1504 61.4497 li
101 59.3999 li
103.25 66.3496 li
101 59.3999 li
101.8 59.3999 li
117.2 51.3999 mo
118.15 51.3999 li
117.2 51.3999 mo
118.15 51.3999 li
117.2 51.3999 li
117.9 49.2998 li
117.2 51.3999 li
115.4 50.0996 li
117.2 51.3999 li
114.7 53.1997 li
117.2 51.3999 li
119.5 58.3999 li
117.2 51.3999 li
82.4502 88.5996 mo
83.3003 88.5996 li
82.4502 88.5996 li
83.25 86.1499 li
82.4502 88.5996 li
80.0503 86.8496 li
82.4502 88.5996 li
79.6001 90.6997 li
82.4502 88.5996 li
84.8501 96.0498 li
82.4502 88.5996 li
83.3003 88.5996 li
99.7998 85.2998 mo
100.8 85.2998 li
99.7998 85.2998 li
100.5 83.1997 li
99.7998 85.2998 li
98.0498 84 li
99.7998 85.2998 li
96.6006 87.6499 li
99.7998 85.2998 li
102.101 92.3496 li
99.7998 85.2998 li
100.8 85.2998 li
106.8 80 mo
107.75 80 li
106.8 80 li
107.45 77.8496 li
106.8 80 li
104.95 78.6499 li
106.8 80 li
103.851 82.0996 li
106.8 80 li
109.101 87.1499 li
106.8 80 li
107.75 80 li
139.25 111.2 mo
140.2 111.2 li
139.25 111.2 li
139.9 109.2 li
139.25 111.2 li
137.3 109.8 li
139.25 111.2 li
135.851 113.649 li
139.25 111.2 li
141.601 118.45 li
139.25 111.2 li
140.2 111.2 li
92.8506 93.25 mo
93.7002 93.25 li
92.8506 93.25 li
93.6504 90.8999 li
92.8506 93.25 li
90.5 91.5498 li
92.8506 93.25 li
90.0503 95.3496 li
92.8506 93.25 li
95.3506 100.95 li
92.8506 93.25 li
93.7002 93.25 li
83.6001 89.9497 mo
84.3501 89.9497 li
83.6001 89.9497 li
84.3501 87.5996 li
83.6001 89.9497 li
81.2002 88.1997 li
83.6001 89.9497 li
80.5503 92.1499 li
83.6001 89.9497 li
86.1001 97.5996 li
83.6001 89.9497 li
84.3501 89.9497 li
67.3501 85.9497 mo
68.25 85.9497 li
67.3501 85.9497 li
68.1504 83.5 li
67.3501 85.9497 li
64.9502 84.1997 li
67.3501 85.9497 li
64.7002 87.8999 li
67.3501 85.9497 li
69.9004 93.7998 li
67.3501 85.9497 li
68.25 85.9497 li
75.5 78.6499 mo
76.2002 76.3496 li
75.5 78.6499 li
72.9004 76.7998 li
75.5 78.6499 li
72.4004 80.8999 li
75.5 78.6499 li
77.9502 86.1997 li
75.5 78.6499 li
76.3501 78.6499 li
75.5 78.6499 mo
76.3501 78.6499 li
75.5 78.6499 li
7.1001 113.85 mo
7.2002 113.85 li
7.1001 113.85 li
9.5 106.5 li
7.1001 113.85 li
1.6001 109.899 li
7.1001 113.85 li
4.9502 115.45 li
7.1001 113.85 li
7.2002 113.85 li
16.3501 43.4497 mo
18.9004 35.5996 li
16.3501 43.4497 li
11 39.5498 li
16.3501 43.4497 li
16.0503 43.6997 li
16.3501 43.4497 li
18.7002 34.7998 mo
21.1504 27.1997 li
18.7002 34.7998 li
13.5503 31.0996 li
18.7002 34.7998 li
18.1001 35.1997 li
18.7002 34.7998 li
45.3501 70.6997 mo
45.5 70.6997 li
45.3501 70.6997 li
46.9502 65.6997 li
45.3501 70.6997 li
41.7002 68.0498 li
45.3501 70.6997 li
41.1504 73.75 li
45.3501 70.6997 li
45.5 70.6997 li
147.351 102.6 mo
148.55 102.6 li
147.351 102.6 li
149.45 96.1494 li
147.351 102.6 li
142.851 99.2998 li
147.351 102.6 li
146.55 103.149 li
147.351 102.6 li
148.55 102.6 li
65.0503 171.7 mo
65.1504 171.7 li
65.0503 171.7 li
66.5 167.25 li
65.0503 171.7 li
60.75 168.55 li
65.0503 171.7 li
61.5503 174.25 li
65.0503 171.7 li
66.9004 177.399 li
65.0503 171.7 li
65.1504 171.7 li
27.3501 0.25 mo
27.4004 0.349609 li
27.3501 0.25 li
118.351 57.3999 mo
119.4 57.3999 li
118.351 57.3999 li
119.4 54.25 li
118.351 57.3999 li
116.351 55.8999 li
118.351 57.3999 li
116.55 58.75 li
118.351 57.3999 li
120.101 62.75 li
118.351 57.3999 li
119.4 57.3999 li
96.3506 30.7998 mo
97.2002 30.7998 li
96.3506 30.7998 li
97.25 28.0498 li
96.3506 30.7998 li
94.5498 29.5 li
96.3506 30.7998 li
94.0498 32.5 li
96.3506 30.7998 li
98.1504 36.4497 li
96.3506 30.7998 li
97.2002 30.7998 li
95.2002 54.0498 mo
96.1006 54.0498 li
95.2002 54.0498 li
96.1006 51.2998 li
95.2002 54.0498 li
92.9004 52.3999 li
95.2002 54.0498 li
92.6504 55.8999 li
95.2002 54.0498 li
97.1006 59.8999 li
95.2002 54.0498 li
96.1006 54.0498 li
125.75 33.3999 mo
127.65 34.7998 li
125.45 36.3999 li
127.65 34.7998 li
129.5 40.5 li
127.65 34.7998 li
128.75 34.7998 li
127.65 34.7998 mo
128.75 34.7998 li
127.65 34.7998 li
128.5 32.25 li
127.65 34.7998 li
125.75 33.3999 li
63.9004 12.1997 mo
64.8003 12.1997 li
63.9004 12.1997 li
64.8003 9.34961 li
63.9004 12.1997 li
61.8003 10.6997 li
63.9004 12.1997 li
62.25 13.3999 li
63.9004 12.1997 li
65.9502 18.5996 li
63.9004 12.1997 li
64.8003 12.1997 li
52.3003 92.5996 mo
53.25 92.5996 li
52.3003 92.5996 li
53.3003 89.5498 li
52.3003 92.5996 li
49.9004 90.8496 li
52.3003 92.5996 li
49.7002 94.5 li
52.3003 92.5996 li
54.6001 99.75 li
52.3003 92.5996 li
53.25 92.5996 li
95.2002 97.9502 mo
95.9502 97.9502 li
95.2002 97.9502 li
96.0498 95.2998 li
95.2002 97.9502 li
92.75 96.1494 li
95.2002 97.9502 li
92.2002 100.1 li
95.2002 97.9502 li
97.4004 104.7 li
95.2002 97.9502 li
95.9502 97.9502 li
102.15 30.1499 mo
103.15 30.1499 li
102.15 30.1499 li
102.9 27.8496 li
102.15 30.1499 li
100.45 28.8999 li
102.15 30.1499 li
99.9004 31.7998 li
102.15 30.1499 li
104.25 36.6997 li
102.15 30.1499 li
103.15 30.1499 li
99.7998 42.0996 mo
100.4 42.0996 li
99.7998 42.0996 li
100.55 39.7998 li
99.7998 42.0996 li
98.25 40.9497 li
99.7998 42.0996 li
97 44.1997 li
99.7998 42.0996 li
101.95 48.6997 li
99.7998 42.0996 li
100.4 42.0996 li
112.601 31.5 mo
112.7 31.5 li
112.601 31.5 li
113.351 29.0498 li
112.601 31.5 li
111 30.3496 li
112.601 31.5 li
109.851 33.4497 li
112.601 31.5 li
114.75 38.1997 li
112.601 31.5 li
112.7 31.5 li
97.5 44.75 mo
98.1504 44.75 li
97.5 44.75 li
98.25 42.4497 li
97.5 44.75 li
95.9004 43.5996 li
97.5 44.75 li
95.0498 46.5498 li
97.5 44.75 li
99.7002 51.5498 li
97.5 44.75 li
98.1504 44.75 li
58.1001 96.5996 mo
59.0503 96.5996 li
58.1001 96.5996 li
59.0503 93.6992 li
58.1001 96.5996 li
55.7002 94.8496 li
58.1001 96.5996 li
55.6001 98.3994 li
58.1001 96.5996 li
60.5 103.95 li
58.1001 96.5996 li
59.0503 96.5996 li
148.4 40.3496 mo
146.2 33.4497 li
147.15 33.4497 li
146.2 33.4497 mo
147.15 33.4497 li
146.2 33.4497 li
146.9 31.2998 li
146.2 33.4497 li
144.45 32.1997 li
146.2 33.4497 li
144.15 34.9497 li
146.2 33.4497 li
148.4 40.3496 li
101 56.0498 mo
101.9 56.0498 li
101 56.0498 li
101.7 53.8496 li
101 56.0498 li
99.2998 54.8496 li
101 56.0498 li
98.4004 57.9497 li
101 56.0498 li
103.2 62.9497 li
101 56.0498 li
101.9 56.0498 li
105.601 72 mo
106.601 72 li
105.601 72 li
106.351 69.8496 li
105.601 72 li
103.851 70.75 li
105.601 72 li
102.601 74.1997 li
105.601 72 li
107.851 78.8999 li
105.601 72 li
106.601 72 li
99.7998 32.1499 mo
100.4 32.1499 li
99.7998 32.1499 li
100.5 30 li
99.7998 32.1499 li
98.2998 31.0498 li
99.7998 32.1499 li
97 34.1997 li
99.7998 32.1499 li
102.05 39 li
99.7998 32.1499 li
100.4 32.1499 li
102.15 67.3496 mo
102.8 67.3496 li
102.15 67.3496 li
102.9 65.0996 li
102.15 67.3496 li
100.45 66.1499 li
102.15 67.3496 li
99.1504 69.5 li
102.15 67.3496 li
104.45 74.3999 li
102.15 67.3496 li
102.8 67.3496 li
170.55 96.5996 mo
172.2 96.5996 li
170.55 96.5996 li
171 95.25 li
170.55 96.5996 li
169.55 95.8994 li
170.55 96.5996 li
166.55 99.5 li
170.55 96.5996 li
172.5 102.7 li
170.55 96.5996 li
172.2 96.5996 li
109.101 57.3999 mo
110.101 57.3999 li
109.101 57.3999 li
109.8 55.25 li
109.101 57.3999 li
107.5 56.25 li
109.101 57.3999 li
106.45 59.3496 li
109.101 57.3999 li
111.351 64.3496 li
109.101 57.3999 li
110.101 57.3999 li
74.3003 61.3999 mo
75.3501 61.3999 li
74.3003 61.3999 li
75.0503 59.1997 li
74.3003 61.3999 li
72.5503 60.0996 li
74.3003 61.3999 li
71.3003 63.5996 li
74.3003 61.3999 li
76.6001 68.3999 li
74.3003 61.3999 li
75.3501 61.3999 li
96.1006 37.4497 mo
95.2002 37.4497 li
95.8506 35.4497 li
95.2002 37.4497 li
93.6006 36.2998 li
95.2002 37.4497 li
92.3506 39.5498 li
95.2002 37.4497 li
97.4004 44.25 li
95.2002 37.4497 li
96.1006 37.4497 li
95.2002 37.4497 mo
96.1006 37.4497 li
175.15 71.3496 mo
176.2 71.3496 li
175.15 71.3496 li
175.851 69.25 li
175.15 71.3496 li
173.601 70.1997 li
175.15 71.3496 li
172.75 73.0996 li
175.15 71.3496 li
177.45 78.2998 li
175.15 71.3496 li
176.2 71.3496 li
149.65 58.0498 mo
150.7 58.0498 li
149.65 58.0498 li
150.351 55.9497 li
149.65 58.0498 li
148.101 56.8999 li
149.65 58.0498 li
147.3 59.7998 li
149.65 58.0498 li
151.9 65 li
149.65 58.0498 li
150.7 58.0498 li
74.3003 56.75 mo
74.9004 56.75 li
74.3003 56.75 li
75 54.6499 li
74.3003 56.75 li
72.7002 55.5498 li
74.3003 56.75 li
70.7002 59.3496 li
74.3003 56.75 li
76.6001 63.6499 li
74.3003 56.75 li
74.9004 56.75 li
107.95 60.0498 mo
108.851 60.0498 li
107.95 60.0498 li
108.65 57.8999 li
107.95 60.0498 li
106.25 58.7998 li
107.95 60.0498 li
105.351 61.8999 li
107.95 60.0498 li
110.25 67.0996 li
107.95 60.0498 li
108.851 60.0498 li
107.95 89.2998 mo
108.95 89.2998 li
107.95 89.2998 li
108.65 87.1499 li
107.95 89.2998 li
106.2 88 li
107.95 89.2998 li
104.851 91.5 li
107.95 89.2998 li
110.25 96.3994 li
107.95 89.2998 li
108.95 89.2998 li
104.45 40.7998 mo
105.5 40.7998 li
104.45 40.7998 li
105.15 38.6997 li
104.45 40.7998 li
102.9 39.6499 li
104.45 40.7998 li
101.851 42.6499 li
104.45 40.7998 li
106.75 47.8496 li
104.45 40.7998 li
105.5 40.7998 li
107.95 41.4497 mo
109 41.4497 li
107.95 41.4497 li
108.601 39.3999 li
107.95 41.4497 li
106.351 40.2998 li
107.95 41.4497 li
105.351 43.3496 li
107.95 41.4497 li
110.2 48.4497 li
107.95 41.4497 li
109 41.4497 li
111.4 57.3999 mo
112.351 57.3999 li
111.4 57.3999 li
112.05 55.3496 li
111.4 57.3999 li
109.7 56.1499 li
111.4 57.3999 li
108.45 59.5498 li
111.4 57.3999 li
113.7 64.4497 li
111.4 57.3999 li
112.351 57.3999 li
104.05 40.9497 mo
105.601 42.0996 li
102.95 44.0498 li
105.601 42.0996 li
107.9 49.1997 li
105.601 42.0996 li
106.601 42.0996 li
105.601 42.0996 mo
106.601 42.0996 li
105.601 42.0996 li
106.25 40.1499 li
105.601 42.0996 li
104.05 40.9497 li
76.6504 117.85 mo
77.4502 117.85 li
76.6504 117.85 li
77.4004 115.5 li
76.6504 117.85 li
74.2002 116.1 li
76.6504 117.85 li
73.3501 120.25 li
76.6504 117.85 li
79.1001 125.5 li
76.6504 117.85 li
77.4502 117.85 li
131.101 123.85 mo
131.351 123.85 li
131.101 123.85 li
131.65 122.25 li
131.101 123.85 li
129.601 122.75 li
131.101 123.85 li
126.45 127.25 li
131.101 123.85 li
133.45 131.05 li
131.101 123.85 li
131.351 123.85 li
24.5 115.85 mo
24.6504 115.85 li
24.5 115.85 li
25.75 111.95 li
24.5 115.85 li
20.5503 113 li
24.5 115.85 li
21.5503 118 li
24.5 115.85 li
26.75 122.899 li
24.5 115.85 li
24.6504 115.85 li
33.75 101.899 mo
34.1001 101.899 li
33.75 101.899 li
34.9004 98.2998 li
33.75 101.899 li
30.3003 99.3994 li
33.75 101.899 li
31.0503 103.899 li
33.75 101.899 li
36.0503 108.95 li
33.75 101.899 li
34.1001 101.899 li
30.25 93.9502 mo
30.5503 93.9502 li
30.25 93.9502 li
31.4502 90.2998 li
30.25 93.9502 li
26.8501 91.4497 li
30.25 93.9502 li
27.6504 95.8496 li
30.25 93.9502 li
32.6001 101.149 li
30.25 93.9502 li
30.5503 93.9502 li
30.25 100.6 mo
30.5503 100.6 li
30.25 100.6 li
31.4502 96.9502 li
30.25 100.6 li
26.8501 98.0996 li
30.25 100.6 li
27.6504 102.5 li
30.25 100.6 li
32.6001 107.8 li
30.25 100.6 li
30.5503 100.6 li
59.25 117.85 mo
59.4004 117.85 li
59.25 117.85 li
60.3003 114.6 li
59.25 117.85 li
56 115.5 li
59.25 117.85 li
55.9004 120.3 li
59.25 117.85 li
61.5503 124.95 li
59.25 117.85 li
59.4004 117.85 li
33.75 114.55 mo
34 114.55 li
33.75 114.55 li
34.8501 111.1 li
33.75 114.55 li
30.25 112 li
33.75 114.55 li
30.6504 116.8 li
33.75 114.55 li
36.1504 121.899 li
33.75 114.55 li
34 114.55 li
19.8501 158.399 mo
22.3003 165.899 li
19.8501 158.399 li
19.8501 158.399 mo
21 154.899 li
19.8501 158.399 li
16.1504 155.7 li
19.8501 158.399 li
15.9502 161.2 li
19.8501 158.399 li
31.4502 129.149 mo
31.8003 129.149 li
31.4502 129.149 li
32.5503 125.8 li
31.4502 129.149 li
27.9502 126.6 li
31.4502 129.149 li
28.3003 131.45 li
31.4502 129.149 li
33.9004 136.75 li
31.4502 129.149 li
31.8003 129.149 li
82.4502 133.8 mo
82.6001 133.8 li
82.4502 133.8 li
83.3003 131.149 li
82.4502 133.8 li
79.6001 131.75 li
82.4502 133.8 li
78.9502 136.35 li
82.4502 133.8 li
84.75 140.85 li
82.4502 133.8 li
82.6001 133.8 li
58.1001 72.6997 mo
58.3003 72.6997 li
58.1001 72.6997 li
59 69.9497 li
58.1001 72.6997 li
55.5 70.7998 li
58.1001 72.6997 li
54.8501 75.0498 li
58.1001 72.6997 li
60.4004 79.7998 li
58.1001 72.6997 li
58.3003 72.6997 li
67.3501 62.6997 mo
68.2002 62.6997 li
67.3501 62.6997 li
68.1504 60.3496 li
67.3501 62.6997 li
65.25 61.1997 li
67.3501 62.6997 li
64.3501 64.8999 li
67.3501 62.6997 li
69.7002 69.8999 li
67.3501 62.6997 li
68.2002 62.6997 li
65.0503 49.3999 mo
65.9502 49.3999 li
65.0503 49.3999 li
65.75 47.2998 li
65.0503 49.3999 li
62.9502 47.8999 li
65.0503 49.3999 li
61.9502 51.6997 li
65.0503 49.3999 li
67.4502 56.7998 li
65.0503 49.3999 li
65.9502 49.3999 li
78.9502 52.0996 mo
79.8501 52.0996 li
78.9502 52.0996 li
79.75 49.5996 li
78.9502 52.0996 li
76.6001 50.3999 li
78.9502 52.0996 li
76.5503 53.8496 li
78.9502 52.0996 li
81.2002 58.9497 li
78.9502 52.0996 li
79.8501 52.0996 li
59.25 50.0996 mo
60.2002 50.0996 li
59.25 50.0996 li
60.0503 47.6997 li
59.25 50.0996 li
58.9004 49.8496 li
59.25 50.0996 li
56.7002 51.9497 li
59.25 50.0996 li
61.4502 56.8999 li
59.25 50.0996 li
60.2002 50.0996 li
78.9502 2.25 mo
79.8003 2.25 li
78.9502 2.25 li
79.6001 0.25 li
78.9502 2.25 li
76.8003 0.649902 li
78.9502 2.25 li
77 3.6499 li
78.9502 2.25 li
80.7002 7.59961 li
78.9502 2.25 li
79.8003 2.25 li
78.9502 50.0996 mo
79.7002 50.0996 li
78.9502 50.0996 mo
79.7002 50.0996 li
78.9502 50.0996 li
79.9004 47.1499 li
78.9502 50.0996 li
76.75 48.5 li
78.9502 50.0996 li
76.1504 52.0996 li
78.9502 50.0996 li
80.75 55.5996 li
78.9502 50.0996 li
77.8003 58.6997 mo
78.6001 58.6997 li
77.8003 58.6997 li
78.75 55.75 li
77.8003 58.6997 li
75.4004 57 li
77.8003 58.6997 li
75.0503 60.6997 li
77.8003 58.6997 li
79.6001 64.2998 li
77.8003 58.6997 li
78.6001 58.6997 li
67.3501 59.3999 mo
68.2002 59.3999 li
67.3501 59.3999 li
68.3501 56.4497 li
67.3501 59.3999 li
65.1001 57.6997 li
67.3501 59.3999 li
64.3003 61.5996 li
67.3501 59.3999 li
69.2002 65.0498 li
67.3501 59.3999 li
68.2002 59.3999 li
77.8003 91.2998 mo
78.7002 91.2998 li
77.8003 91.2998 li
78.8003 88.25 li
77.8003 91.2998 li
75.1001 89.3496 li
77.8003 91.2998 li
75 93.2998 li
77.8003 91.2998 li
79.9502 97.8496 li
77.8003 91.2998 li
78.7002 91.2998 li
72 109.899 mo
72.9004 109.899 li
72 109.899 li
72.9502 107.05 li
72 109.899 li
69.4004 108 li
72 109.899 li
68.8003 112.25 li
72 109.899 li
74.1504 116.5 li
72 109.899 li
72.9004 109.899 li
21 115.85 mo
21.2002 115.85 li
21 115.85 li
22.25 112.1 li
21 115.85 li
17.3501 113.2 li
21 115.85 li
18.2002 117.899 li
21 115.85 li
23.4004 123.3 li
21 115.85 li
21.2002 115.85 li
11.75 143.75 mo
12.9004 140.149 li
11.75 143.75 li
6.6001 140.05 li
11.75 143.75 li
8.05029 146.45 li
11.75 143.75 li
14.1001 151.05 li
11.75 143.75 li
66.2002 67.3496 mo
67.0503 67.3496 li
66.2002 67.3496 li
67.1001 64.5498 li
66.2002 67.3496 li
63.7002 65.5498 li
66.2002 67.3496 li
63.4004 69.3999 li
66.2002 67.3496 li
68.3501 74 li
66.2002 67.3496 li
67.0503 67.3496 li
85.9004 118.5 mo
86.75 118.5 li
85.9004 118.5 li
86.8501 115.6 li
85.9004 118.5 li
83.3003 116.649 li
85.9004 118.5 li
82.8003 120.8 li
85.9004 118.5 li
88.1504 125.399 li
85.9004 118.5 li
86.75 118.5 li
67.3501 52.0996 mo
68.3003 52.0996 li
67.3501 52.0996 li
68.25 49.3496 li
67.3501 52.0996 li
65.1504 50.4497 li
67.3501 52.0996 li
65.1001 53.6997 li
67.3501 52.0996 li
69.5503 58.8496 li
67.3501 52.0996 li
68.3003 52.0996 li
12.9004 131.149 mo
13.1504 131.149 li
12.9004 131.149 li
14.0503 127.6 li
12.9004 131.149 li
9.25 128.5 li
12.9004 131.149 li
9.5 133.6 li
12.9004 131.149 li
15.3501 138.7 li
12.9004 131.149 li
13.1504 131.149 li
83.6001 64.6997 mo
84.5 64.6997 li
83.6001 64.6997 li
84.4502 62.0996 li
83.6001 64.6997 li
81.4004 63.0996 li
83.6001 64.6997 li
80.8003 66.75 li
83.6001 64.6997 li
85.75 71.3999 li
83.6001 64.6997 li
84.5 64.6997 li
68.5503 35.4497 mo
69.4004 35.4497 li
68.5503 35.4497 li
69.4004 32.8496 li
68.5503 35.4497 li
66.4004 33.9497 li
68.5503 35.4497 li
66.3003 37.0996 li
68.5503 35.4497 li
70.7002 42.1997 li
68.5503 35.4497 li
69.4004 35.4497 li
59.25 46.75 mo
60.2002 46.75 li
59.25 46.75 li
60.1504 44 li
59.25 46.75 li
57 45.1499 li
59.25 46.75 li
56.9004 48.4497 li
59.25 46.75 li
61.5 53.6499 li
59.25 46.75 li
60.2002 46.75 li
85.9004 51.3999 mo
86.8501 51.3999 li
85.9004 51.3999 li
86.8003 48.75 li
85.9004 51.3999 li
83.6504 49.7998 li
85.9004 51.3999 li
83.6504 53.0498 li
85.9004 51.3999 li
88.1504 58.25 li
85.9004 51.3999 li
86.8501 51.3999 li
82.4502 127.85 mo
83.2002 127.85 li
82.4502 127.85 li
83.3501 125.05 li
82.4502 127.85 li
79.8003 125.899 li
82.4502 127.85 li
78.8501 130.45 li
82.4502 127.85 li
84.7002 134.8 li
82.4502 127.85 li
83.2002 127.85 li
69.7002 66.0498 mo
70.5 66.0498 li
69.7002 66.0498 li
70.5 63.4497 li
69.7002 66.0498 li
68.2002 64.9497 li
69.7002 66.0498 li
66.8003 68.1499 li
69.7002 66.0498 li
71.9004 72.8496 li
69.7002 66.0498 li
70.5 66.0498 li
85.6504 49.3496 mo
84.75 52.0996 li
82.5503 50.4497 li
84.75 52.0996 li
82.5503 53.6997 li
84.75 52.0996 li
87 59.0498 li
84.75 52.0996 li
85.6001 52.0996 li
84.75 52.0996 mo
85.6001 52.0996 li
84.75 52.0996 li
85.6504 49.3496 li
89.4004 22.8496 mo
90.3003 22.8496 li
89.4004 22.8496 li
90.25 20.2998 li
89.4004 22.8496 li
87.3003 21.2998 li
89.4004 22.8496 li
87.3003 24.3496 li
89.4004 22.8496 li
91.6001 29.6997 li
89.4004 22.8496 li
90.3003 22.8496 li
72 50.75 mo
72.9004 50.75 li
72 50.75 li
72.8501 48.1997 li
72 50.75 li
69.8003 49.1499 li
72 50.75 li
69.6001 52.5 li
72 50.75 li
74.25 57.5996 li
72 50.75 li
72.9004 50.75 li
61.5503 30.7998 mo
62.4004 30.7998 li
61.5503 30.7998 li
62.4004 28.25 li
61.5503 30.7998 li
59.5 29.2998 li
61.5503 30.7998 li
59.2002 32.5498 li
61.5503 30.7998 li
63.8003 37.6997 li
61.5503 30.7998 li
62.4004 30.7998 li
80.1001 43.4497 mo
81.0503 43.4497 li
80.1001 43.4497 li
81 40.75 li
80.1001 43.4497 li
77.9502 41.8496 li
80.1001 43.4497 li
77.9502 45 li
80.1001 43.4497 li
82.4004 50.4497 li
80.1001 43.4497 li
81.0503 43.4497 li
77.8003 58.0498 mo
78.7002 58.0498 li
77.8003 58.0498 li
78.6001 55.5498 li
77.8003 58.0498 li
75.6001 56.4497 li
77.8003 58.0498 li
75.1504 60 li
77.8003 58.0498 li
80.0503 64.9497 li
77.8003 58.0498 li
78.7002 58.0498 li
95.2002 38.7998 mo
96.0498 38.7998 li
95.2002 38.7998 li
96 36.25 li
95.2002 38.7998 li
93.0498 37.1997 li
95.2002 38.7998 li
93.1006 40.2998 li
95.2002 38.7998 li
97.4502 45.6997 li
95.2002 38.7998 li
96.0498 38.7998 li
83.6001 46.0996 mo
84.4502 46.0996 li
83.6001 46.0996 li
84.4004 43.6499 li
83.6001 46.0996 li
81.6001 44.6499 li
83.6001 46.0996 li
81.1504 47.8496 li
83.6001 46.0996 li
85.8003 52.9497 li
83.6001 46.0996 li
84.4502 46.0996 li
92.8506 72.6997 mo
93.75 72.6997 li
92.8506 72.6997 li
93.6504 70.1997 li
92.8506 72.6997 li
90.6504 71.0498 li
92.8506 72.6997 li
90.0503 74.6997 li
92.8506 72.6997 li
95.1006 79.5498 li
92.8506 72.6997 li
93.75 72.6997 li
67.1504 50.5996 mo
69.7002 48.75 li
71.9502 55.75 li
69.7002 48.75 li
70.6504 48.75 li
69.7002 48.75 mo
70.6504 48.75 li
69.7002 48.75 li
70.5 46.1997 li
69.7002 48.75 li
67.5503 47.1997 li
69.7002 48.75 li
67.1504 50.5996 li
62.75 58.6997 mo
63.5 58.6997 li
62.75 58.6997 li
63.5503 56.25 li
62.75 58.6997 li
60.75 57.25 li
62.75 58.6997 li
59.75 60.8999 li
62.75 58.6997 li
64.9502 65.5996 li
62.75 58.6997 li
63.5 58.6997 li
85.9004 47.4497 mo
86.8501 47.4497 li
85.9004 47.4497 li
86.75 44.8496 li
85.9004 47.4497 li
83.8003 45.8999 li
85.9004 47.4497 li
83.5503 49.1499 li
85.9004 47.4497 li
88.2002 54.4497 li
85.9004 47.4497 li
86.8501 47.4497 li
78.9502 62.6997 mo
79.8501 62.6997 li
78.9502 62.6997 li
79.8501 60 li
78.9502 62.6997 li
76.9004 61.1997 li
78.9502 62.6997 li
76.6504 64.3999 li
78.9502 62.6997 li
81.3003 69.8496 li
78.9502 62.6997 li
79.8501 62.6997 li
102.15 65.3496 mo
102.95 65.3496 li
102.15 65.3496 li
102.95 62.8496 li
102.15 65.3496 li
100.05 63.8496 li
102.15 65.3496 li
99.7998 67.0996 li
102.15 65.3496 li
104.4 72.3496 li
102.15 65.3496 li
102.95 65.3496 li
125.351 66.6997 mo
126.15 66.6997 li
125.351 66.6997 li
126.15 64.1997 li
125.351 66.6997 li
123.3 65.1997 li
125.351 66.6997 li
122.75 68.5996 li
125.351 66.6997 li
127.601 73.6499 li
125.351 66.6997 li
126.15 66.6997 li
66.2002 107.25 mo
66.3003 107.25 li
66.2002 107.25 li
67.1504 104.399 li
66.2002 107.25 li
63.6001 105.3 li
66.2002 107.25 li
62.6001 109.85 li
66.2002 107.25 li
68.6001 114.6 li
66.2002 107.25 li
66.3003 107.25 li
32.6001 157.75 mo
32.8003 157.75 li
32.6001 157.75 li
33.6001 154.649 li
32.6001 157.75 li
29 155.149 li
32.6001 157.75 li
28.5 160.7 li
32.6001 157.75 li
35.0503 165.3 li
32.6001 157.75 li
32.8003 157.75 li
63.9004 41.4497 mo
64.8003 41.4497 li
63.9004 41.4497 li
64.75 38.75 li
63.9004 41.4497 li
61.7002 39.8496 li
63.9004 41.4497 li
61.7002 43.0498 li
63.9004 41.4497 li
66.25 48.6997 li
63.9004 41.4497 li
64.8003 41.4497 li
72 32.7998 mo
72.8501 32.7998 li
72 32.7998 li
72.8003 30.3496 li
72 32.7998 li
69.8501 31.25 li
72 32.7998 li
69.6504 34.5 li
72 32.7998 li
74.25 39.7998 li
72 32.7998 li
72.8501 32.7998 li
81.3003 29.5 mo
82.1504 29.5 li
81.3003 29.5 li
82.1001 26.9497 li
81.3003 29.5 li
79.1504 27.9497 li
81.3003 29.5 li
79.1504 31.0498 li
81.3003 29.5 li
83.6001 36.5498 li
81.3003 29.5 li
82.1504 29.5 li
76.6504 34.7998 mo
77.4502 34.7998 li
76.6504 34.7998 li
77.4502 32.3999 li
76.6504 34.7998 li
74.5503 33.2998 li
76.6504 34.7998 li
74.25 36.5498 li
76.6504 34.7998 li
78.9004 41.7998 li
76.6504 34.7998 li
77.4502 34.7998 li
91.7002 30.1499 mo
92.75 30.1499 li
91.7002 30.1499 li
92.4004 28 li
91.7002 30.1499 li
90.1504 29 li
91.7002 30.1499 li
89.3003 31.8999 li
91.7002 30.1499 li
93.9004 36.8999 li
91.7002 30.1499 li
92.75 30.1499 li
76.6504 48.0996 mo
77.5503 48.0996 li
76.6504 48.0996 li
77.5 45.5 li
76.6504 48.0996 li
74.5 46.5498 li
76.6504 48.0996 li
74.3003 49.7998 li
76.6504 48.0996 li
79 55.2998 li
76.6504 48.0996 li
77.5503 48.0996 li
110.25 35.4497 mo
111.25 35.4497 li
110.25 35.4497 li
110.95 33.2998 li
110.25 35.4497 li
108.75 34.3496 li
110.25 35.4497 li
108 37.0996 li
110.25 35.4497 li
112.45 42.2998 li
110.25 35.4497 li
111.25 35.4497 li
87.0503 49.3999 mo
87.9502 49.3999 li
87.0503 49.3999 li
87.8501 47 li
87.0503 49.3999 li
84.9502 47.8999 li
87.0503 49.3999 li
84.5 51.2998 li
87.0503 49.3999 li
89.4004 56.5 li
87.0503 49.3999 li
87.9502 49.3999 li
88.25 109.899 mo
89.0503 109.899 li
88.25 109.899 li
89 107.55 li
88.25 109.899 li
85.6001 107.95 li
88.25 109.899 li
84.5 112.6 li
88.25 109.899 li
90.5 116.95 li
88.25 109.899 li
89.0503 109.899 li
51.9004 30.5 mo
51.1504 32.7998 li
49 31.25 li
51.1504 32.7998 li
48.4004 34.7998 li
51.1504 32.7998 li
53.4502 39.8999 li
51.1504 32.7998 li
52 32.7998 li
51.1504 32.7998 mo
52 32.7998 li
51.1504 32.7998 li
51.9004 30.5 li
61.5503 42.7998 mo
62.4502 42.7998 li
61.5503 42.7998 li
62.3003 40.5 li
61.5503 42.7998 li
59.5 41.25 li
61.5503 42.7998 li
58.6504 44.8999 li
61.5503 42.7998 li
63.9004 49.8496 li
61.5503 42.7998 li
62.4502 42.7998 li
117.2 50.75 mo
118.15 50.75 li
117.2 50.75 li
117.9 48.5996 li
117.2 50.75 li
115.601 49.5996 li
117.2 50.75 li
114.9 52.4497 li
117.2 50.75 li
119.5 57.8496 li
117.2 50.75 li
118.15 50.75 li
73.1504 43.4497 mo
74 43.4497 li
73.1504 43.4497 li
73.8501 41.25 li
73.1504 43.4497 li
71.1001 41.9497 li
73.1504 43.4497 li
70.3003 45.5498 li
73.1504 43.4497 li
75.5 50.5498 li
73.1504 43.4497 li
74 43.4497 li
78.9502 74.6499 mo
79.8003 74.6499 li
78.9502 74.6499 li
79.7002 72.3999 li
78.9502 74.6499 li
76.8003 73.0996 li
78.9502 74.6499 li
76.1504 76.6997 li
78.9502 74.6499 li
81.3003 81.9497 li
78.9502 74.6499 li
79.8003 74.6499 li
107.95 49.3999 mo
108.5 49.3999 li
107.95 49.3999 li
108.55 47.5 li
107.95 49.3999 li
106.3 48.1997 li
107.95 49.3999 li
104.75 51.6997 li
107.95 49.3999 li
110.2 56.3999 li
107.95 49.3999 li
108.5 49.3999 li
87.0503 66.6997 mo
87.8003 66.6997 li
87.0503 66.6997 li
87.7002 64.6997 li
87.0503 66.6997 li
84.9502 65.1499 li
87.0503 66.6997 li
83.5 69.2998 li
87.0503 66.6997 li
89.4004 73.7998 li
87.0503 66.6997 li
87.8003 66.6997 li
56.9502 129.8 mo
57 129.8 li
56.9502 129.8 li
57.8003 127.1 li
56.9502 129.8 li
53.7002 127.45 li
56.9502 129.8 li
53.6504 132.2 li
56.9502 129.8 li
59.8003 138.649 li
56.9502 129.8 li
57 129.8 li
170.55 24.8496 mo
171.4 22.1997 li
168.55 23.3999 li
166.55 27.6997 li
170.55 24.8496 li
154.3 8.19971 mo
155.101 5.69971 li
152.55 6.94971 li
150.2 11.1997 li
154.3 8.19971 li
163.601 20.8496 mo
164.4 18.3496 li
160.45 18.5498 li
159.45 23.8496 li
163.601 20.8496 li
155.351 48.1997 mo
160.101 44.75 li
160.101 44.75 mo
160.9 42.3496 li
158.2 43.3999 li
155.351 48.1997 li
142.5 58.0498 mo
140.65 57.1997 li
138.05 56.3496 li
136.25 61.0498 li
140.4 58.0498 li
142.5 58.0498 li
146.2 41.4497 mo
147.05 38.7998 li
144.45 40.1499 li
141.45 44.8999 li
146.2 41.4497 li
138.101 49.3999 mo
138.95 46.7998 li
136.05 47.9497 li
133.3 52.8999 li
138.101 49.3999 li
160.101 41.4497 mo
160.851 39.0996 li
158.3 40.1499 li
155.5 44.7998 li
160.101 41.4497 li
186.3 17.8496 mo
185.25 19.1499 li
186.3 18.3999 li
158.95 29.5 mo
159.75 26.9497 li
157.05 28.0996 li
154.601 32.6499 li
158.95 29.5 li
161.25 47.4497 mo
162.101 44.8999 li
159.25 46 li
156.7 50.75 li
161.25 47.4497 li
136.9 42.0996 mo
137.8 39.4497 li
135.25 40.8999 li
133.351 44.6997 li
138.05 45.5996 li
136.9 42.0996 li
72.9004 89.9497 mo
72.9004 87.1499 li
68.0503 87.0498 li
68.9502 92.1997 li
74.1504 96.5498 li
72.9004 89.9497 li
186.3 164.399 mo
184.4 163.3 li
182.7 168 li
186.3 170 li
141.851 61.3999 mo
139.25 61.3999 li
139.2 61.3496 li
135.9 63.7998 li
141.3 67.6997 li
141.851 61.3999 li
171.7 66.0498 mo
173.15 61.5498 li
169.05 64.0996 li
167.8 68.8496 li
171.7 66.0498 li
131.101 82 mo
132.351 78.25 li
128.55 80.0996 li
126.3 85.5 li
131.601 83.5 li
131.101 82 li
121.851 70.6997 mo
122.9 67.5 li
119.4 68.8999 li
118.05 73.4497 li
123.25 75 li
121.851 70.6997 li
117.2 89.9497 mo
118.25 86.7998 li
114.851 88.25 li
113 93 li
118.65 94.3496 li
117.2 89.9497 li
67.3501 64.6997 mo
68.5503 61.1499 li
64.6504 62.75 li
63.9004 67.1997 li
68.9004 69.4497 li
67.3501 64.6997 li
110.25 90.5996 mo
111.351 87.1997 li
107.65 88.6997 li
106.55 93.2998 li
111.8 95.3496 li
110.25 90.5996 li
104.65 22.8496 mo
106 18.0498 li
101.15 20.4497 li
101.95 24.6997 li
104.65 23.5 li
104.65 22.8496 li
177.851 101 mo
178.55 105 li
182 106.399 li
182.101 103.25 li
182.101 103.25 mo
182.101 99.75 li
177.851 101 li
92.2002 98.5996 mo
93.6006 92.7998 li
88.6504 96.3496 li
88.7002 100.75 li
91.7002 98.5996 li
92.2002 98.5996 li
113.05 100.6 mo
114.4 95 li
108.45 97.5498 li
109.5 102.8 li
112.601 100.6 li
113.05 100.6 li
134.15 46.75 mo
135 41.8999 li
130.55 44.6499 li
130.55 48.8496 li
133.45 46.75 li
134.15 46.75 li
118.5 0.25 mo
118.55 0.5 li
118.851 0.25 li
111.15 19.5 mo
111.9 14.4497 li
106.851 17.0498 li
109.9 19.75 li
111.351 22.8999 li
111.15 19.5 li
110.95 58.0498 mo
111.851 53.1499 li
106.75 55.5 li
109.3 58.75 li
111.45 61.75 li
110.95 58.0498 li
145.95 69.3496 mo
146.3 65.5 li
142.4 67.4497 li
142.75 71 li
146.2 73 li
145.95 69.3496 li
35.25 157.75 mo
35.9004 154.7 li
31.3003 155.1 li
31 160.55 li
37.3501 165.2 li
35.25 157.75 li
16.6001 72 mo
17.3003 69.1499 li
13.6504 70.0498 li
13.0503 74.3999 li
18.6504 79 li
16.6001 72 li
108.8 105.899 mo
108.9 102.95 li
105.55 104.2 li
105 108.05 li
110.101 112.5 li
108.8 105.899 li
119.25 119.2 mo
119.25 116.399 li
116.101 117.55 li
115.25 121.45 li
120.5 125.8 li
119.25 119.2 li
106.5 112.55 mo
106.5 109.8 li
103.45 110.95 li
102.45 114.85 li
107.8 119.25 li
106.5 112.55 li
78.6001 72.6997 mo
78.6504 70.0498 li
76 71.3999 li
74.75 74.8999 li
79.9502 79.3496 li
78.6001 72.6997 li
76.25 48.0996 mo
76.3003 45.5 li
73.75 46.7998 li
72.8501 50 li
77.6504 54.7998 li
76.25 48.0996 li
82.2002 74.6499 mo
82.2002 71.8999 li
79.3501 73.2998 li
78.8501 76.3999 li
83.5503 81.6997 li
82.2002 74.6499 li
71.75 69.3496 mo
71.6001 67 li
69.2002 68.1499 li
67.8003 71.5498 li
73 76.0498 li
71.75 69.3496 li
4.8501 48.75 mo
5.7002 45.8999 li
2.6001 47.1499 li
1.5 51.1499 li
7.1001 55.9497 li
4.8501 48.75 li
25.6504 148.45 mo
26.7002 145.1 li
22.3003 146 li
21.5503 151.399 li
28.1504 156.1 li
25.6504 148.45 li
134.351 83.2998 mo
134.25 80.8999 li
131.601 82 li
130.7 85.2998 li
135.65 90.0996 li
134.351 83.2998 li
86.75 56.0498 mo
86.75 53.5 li
84.1504 54.7998 li
84.3003 57.25 li
88.1504 63 li
86.75 56.0498 li
91.7002 75.6997 mo
90.25 68.6997 li
90.25 68.6997 mo
90.2002 66.1997 li
87.5503 67.3496 li
86.5503 70.75 li
91.7002 75.6997 li
85.6001 70.6997 mo
85.5503 68.2998 li
83.1001 69.5 li
81.8003 72.7998 li
87 77.6499 li
85.6001 70.6997 li
58.25 64.0498 mo
58.9502 61.4497 li
55.9502 62.4497 li
54.8003 66.4497 li
60.4502 71.25 li
58.25 64.0498 li
74.1001 77.3496 mo
74.0503 74.6499 li
70.75 75.5996 li
70.75 79.0498 li
75.5 84.5498 li
74.1001 77.3496 li
72.8501 50.75 mo
72.9004 47.9497 li
70.2002 49.4497 li
69.4502 52.5996 li
74.0503 57 li
72.8501 50.75 li
137.9 67.3496 mo
137.65 65.0996 li
134.95 65.9497 li
134.351 69.25 li
139.15 74.1997 li
137.9 67.3496 li
97.3506 48.0996 mo
97.1006 45.7998 li
94.5498 46.7998 li
93.9502 49.8496 li
98.6006 55 li
97.3506 48.0996 li
54.3003 60.0498 mo
54.25 57.5996 li
51.0503 58.2998 li
50.6504 62.0996 li
55.8003 67.1997 li
54.3003 60.0498 li
117.05 79.2998 mo
116.75 77.0996 li
114.15 77.9497 li
113.101 81.4497 li
118.3 86.2998 li
117.05 79.2998 li
120.5 39.4497 mo
120.2 37.3496 li
117.7 38.0996 li
117.101 41.1997 li
121.8 46.4497 li
120.5 39.4497 li
108.95 24.8496 mo
108.601 22.7998 li
106.101 23.5 li
105.601 26.5498 li
110.2 31.75 li
108.95 24.8496 li
112.351 51.3999 mo
112.15 49.1997 li
109.45 50 li
108.95 53.1997 li
113.75 58.5498 li
112.351 51.3999 li
55.4502 44.0996 mo
55.4004 41.6997 li
52.3501 42.4497 li
52.0503 45.9497 li
57.0503 51.5996 li
55.4502 44.0996 li
80.9502 93.25 mo
80.9004 90.7998 li
77.9004 91.6499 li
77.3501 95.2998 li
82.6001 100.95 li
80.9502 93.25 li
75.1001 63.3496 mo
75.0503 61.1499 li
72 61.6997 li
71.4004 65.5 li
76.8003 70.9497 li
75.1001 63.3496 li
108.75 127.85 mo
108.7 125.55 li
105.7 126.2 li
104.55 130.3 li
110.45 135.55 li
108.75 127.85 li
67.1001 82.6499 mo
66.9502 80.3999 li
63.9004 80.9497 li
63.1504 84.8496 li
68.75 90.5 li
67.1001 82.6499 li
87.3501 165.7 mo
89.2002 159.1 li
82.1001 162.1 li
83.7002 168.149 li
87.0503 165.7 li
87.3501 165.7 li
87.5503 102.6 mo
88.6001 97.8994 li
83.5503 100.05 li
83.6504 105.05 li
87.7002 104.55 li
87.5503 102.6 li
118.95 131.149 mo
119.75 126.95 li
115.4 129 li
114.7 133.8 li
119.25 133.8 li
118.95 131.149 li
123.8 103.25 mo
124.101 99.8496 li
119.851 100.95 li
119.8 105.55 li
124.351 107.35 li
123.8 103.25 li
95.9004 115.85 mo
96.3506 112.25 li
92 113.55 li
91.75 118.35 li
96.6504 120.35 li
95.9004 115.85 li
76.3003 65.3496 mo
76.3501 62.75 li
73.6504 64.0498 li
73 67.1997 li
77.8003 72.5 li
76.3003 65.3496 li
111.101 78.75 mo
107.75 79.5 li
107.75 83.0996 li
112.601 88.5498 li
111.15 81.2998 li
111.15 81.2998 mo
111.101 78.75 li
63.5503 65.3496 mo
63.5503 62.8496 li
59.2002 62.7998 li
59.9502 67.3999 li
65.1001 72.5996 li
63.5503 65.3496 li
128.55 80.6499 mo
128.351 78.5498 li
125.7 79.25 li
124.55 82.8999 li
129.851 87.5 li
128.55 80.6499 li
101.8 59.3999 mo
101.7 57.1997 li
99.1006 58 li
98.1504 61.4497 li
103.25 66.3496 li
101.8 59.3999 li
118.15 51.3999 mo
117.9 49.2998 li
115.4 50.0996 li
114.7 53.1997 li
119.5 58.3999 li
118.15 51.3999 li
83.3003 88.5996 mo
83.25 86.1499 li
80.0503 86.8496 li
79.6001 90.6997 li
84.8501 96.0498 li
83.3003 88.5996 li
100.8 85.2998 mo
100.5 83.1997 li
98.0498 84 li
96.6006 87.6499 li
102.101 92.3496 li
100.8 85.2998 li
107.75 80 mo
107.45 77.8496 li
104.95 78.6499 li
103.851 82.0996 li
109.101 87.1499 li
107.75 80 li
140.2 111.2 mo
139.9 109.2 li
137.3 109.8 li
135.851 113.649 li
141.601 118.45 li
140.2 111.2 li
93.7002 93.25 mo
93.6504 90.8999 li
90.5 91.5498 li
90.0503 95.3496 li
95.3506 100.95 li
93.7002 93.25 li
84.3501 89.9497 mo
84.3501 87.5996 li
81.2002 88.1997 li
80.5503 92.1499 li
86.1001 97.5996 li
84.3501 89.9497 li
68.25 85.9497 mo
68.1504 83.5 li
64.9502 84.1997 li
64.7002 87.8999 li
69.9004 93.7998 li
68.25 85.9497 li
76.3501 78.6499 mo
76.2002 76.3496 li
72.9004 76.7998 li
72.4004 80.8999 li
77.9502 86.1997 li
76.3501 78.6499 li
7.2002 113.85 mo
9.5 106.5 li
1.6001 109.899 li
4.9502 115.45 li
7.1001 113.85 li
7.2002 113.85 li
16.3501 43.4497 mo
18.9004 35.5996 li
11 39.5498 li
16.0503 43.6997 li
16.3501 43.4497 li
18.7002 34.7998 mo
21.1504 27.1997 li
13.5503 31.0996 li
18.1001 35.1997 li
18.7002 34.7998 li
45.5 70.6997 mo
46.9502 65.6997 li
41.7002 68.0498 li
41.1504 73.75 li
45.3501 70.6997 li
45.5 70.6997 li
148.55 102.6 mo
149.45 96.1494 li
142.851 99.2998 li
146.55 103.149 li
147.351 102.6 li
148.55 102.6 li
65.1504 171.7 mo
66.5 167.25 li
60.75 168.55 li
61.5503 174.25 li
66.9004 177.399 li
65.1504 171.7 li
27.3003 0.25 mo
27.4004 0.349609 li
27.4004 0.25 li
119.4 57.3999 mo
119.4 54.25 li
116.351 55.8999 li
116.55 58.75 li
120.101 62.75 li
119.4 57.3999 li
97.2002 30.7998 mo
97.25 28.0498 li
94.5498 29.5 li
94.0498 32.5 li
98.1504 36.4497 li
97.2002 30.7998 li
96.1006 54.0498 mo
96.1006 51.2998 li
92.9004 52.3999 li
92.6504 55.8999 li
97.1006 59.8999 li
96.1006 54.0498 li
128.75 34.7998 mo
128.5 32.25 li
125.75 33.3999 li
125.45 36.3999 li
129.5 40.5 li
128.75 34.7998 li
64.8003 12.1997 mo
64.8003 9.34961 li
61.8003 10.6997 li
62.25 13.3999 li
65.9502 18.5996 li
64.8003 12.1997 li
53.25 92.5996 mo
53.3003 89.5498 li
49.9004 90.8496 li
49.7002 94.5 li
54.6001 99.75 li
53.25 92.5996 li
95.9502 97.9502 mo
96.0498 95.2998 li
92.75 96.1494 li
92.2002 100.1 li
97.4004 104.7 li
95.9502 97.9502 li
103.15 30.1499 mo
102.9 27.8496 li
100.45 28.8999 li
99.9004 31.7998 li
104.25 36.6997 li
103.15 30.1499 li
100.4 42.0996 mo
100.55 39.7998 li
98.25 40.9497 li
97 44.1997 li
101.95 48.6997 li
100.4 42.0996 li
112.7 31.5 mo
113.351 29.0498 li
111 30.3496 li
109.851 33.4497 li
114.75 38.1997 li
112.7 31.5 li
98.1504 44.75 mo
98.25 42.4497 li
95.9004 43.5996 li
95.0498 46.5498 li
99.7002 51.5498 li
98.1504 44.75 li
59.0503 96.5996 mo
59.0503 93.6992 li
55.7002 94.8496 li
55.6001 98.3994 li
60.5 103.95 li
59.0503 96.5996 li
147.15 33.4497 mo
146.9 31.2998 li
144.45 32.1997 li
144.15 34.9497 li
148.4 40.3496 li
147.15 33.4497 li
101.9 56.0498 mo
101.7 53.8496 li
99.2998 54.8496 li
98.4004 57.9497 li
103.2 62.9497 li
101.9 56.0498 li
106.601 72 mo
106.351 69.8496 li
103.851 70.75 li
102.601 74.1997 li
107.851 78.8999 li
106.601 72 li
100.4 32.1499 mo
100.5 30 li
98.2998 31.0498 li
97 34.1997 li
102.05 39 li
100.4 32.1499 li
102.8 67.3496 mo
102.9 65.0996 li
100.45 66.1499 li
99.1504 69.5 li
104.45 74.3999 li
102.8 67.3496 li
172.2 96.5996 mo
171 95.25 li
169.55 95.8994 li
166.55 99.5 li
172.5 102.7 li
172.2 96.5996 li
110.101 57.3999 mo
109.8 55.25 li
107.5 56.25 li
106.45 59.3496 li
111.351 64.3496 li
110.101 57.3999 li
75.3501 61.3999 mo
75.0503 59.1997 li
72.5503 60.0996 li
71.3003 63.5996 li
76.6001 68.3999 li
75.3501 61.3999 li
96.1006 37.4497 mo
95.8506 35.4497 li
93.6006 36.2998 li
92.3506 39.5498 li
97.4004 44.25 li
96.1006 37.4497 li
176.2 71.3496 mo
175.851 69.25 li
173.601 70.1997 li
172.75 73.0996 li
177.45 78.2998 li
176.2 71.3496 li
150.7 58.0498 mo
150.351 55.9497 li
148.101 56.8999 li
147.3 59.7998 li
151.9 65 li
150.7 58.0498 li
74.9004 56.75 mo
75 54.6499 li
72.7002 55.5498 li
70.7002 59.3496 li
76.6001 63.6499 li
74.9004 56.75 li
108.851 60.0498 mo
108.65 57.8999 li
106.25 58.7998 li
105.351 61.8999 li
110.25 67.0996 li
108.851 60.0498 li
108.95 89.2998 mo
108.65 87.1499 li
106.2 88 li
104.851 91.5 li
110.25 96.3994 li
108.95 89.2998 li
105.5 40.7998 mo
105.15 38.6997 li
102.9 39.6499 li
101.851 42.6499 li
106.75 47.8496 li
105.5 40.7998 li
109 41.4497 mo
108.601 39.3999 li
106.351 40.2998 li
105.351 43.3496 li
110.2 48.4497 li
109 41.4497 li
108.45 59.5498 mo
113.7 64.4497 li
112.351 57.3999 li
112.351 57.3999 mo
112.05 55.3496 li
109.7 56.1499 li
108.45 59.5498 li
106.601 42.0996 mo
106.25 40.1499 li
104.05 40.9497 li
102.95 44.0498 li
107.9 49.1997 li
106.601 42.0996 li
77.4502 117.85 mo
77.4004 115.5 li
74.2002 116.1 li
73.3501 120.25 li
79.1001 125.5 li
77.4502 117.85 li
131.351 123.85 mo
131.65 122.25 li
129.601 122.75 li
126.45 127.25 li
133.45 131.05 li
131.351 123.85 li
24.6504 115.85 mo
25.75 111.95 li
20.5503 113 li
21.5503 118 li
26.75 122.899 li
24.6504 115.85 li
34.1001 101.899 mo
34.9004 98.2998 li
30.3003 99.3994 li
31.0503 103.899 li
36.0503 108.95 li
34.1001 101.899 li
30.5503 93.9502 mo
31.4502 90.2998 li
26.8501 91.4497 li
27.6504 95.8496 li
32.6001 101.149 li
30.5503 93.9502 li
30.5503 100.6 mo
31.4502 96.9502 li
26.8501 98.0996 li
27.6504 102.5 li
32.6001 107.8 li
30.5503 100.6 li
59.4004 117.85 mo
60.3003 114.6 li
56 115.5 li
55.9004 120.3 li
61.5503 124.95 li
59.4004 117.85 li
34 114.55 mo
34.8501 111.1 li
30.25 112 li
30.6504 116.8 li
36.1504 121.899 li
34 114.55 li
19.8501 158.399 mo
21 154.899 li
16.1504 155.7 li
15.9502 161.2 li
22.3003 165.899 li
19.8501 158.399 li
31.8003 129.149 mo
32.5503 125.8 li
27.9502 126.6 li
28.3003 131.45 li
33.9004 136.75 li
31.8003 129.149 li
82.6001 133.8 mo
83.3003 131.149 li
79.6001 131.75 li
78.9502 136.35 li
84.75 140.85 li
82.6001 133.8 li
58.3003 72.6997 mo
59 69.9497 li
55.5 70.7998 li
54.8501 75.0498 li
60.4004 79.7998 li
58.3003 72.6997 li
68.2002 62.6997 mo
68.1504 60.3496 li
65.25 61.1997 li
64.3501 64.8999 li
69.7002 69.8999 li
68.2002 62.6997 li
65.9502 49.3999 mo
65.75 47.2998 li
62.9502 47.8999 li
61.9502 51.6997 li
67.4502 56.7998 li
65.9502 49.3999 li
79.8501 52.0996 mo
79.75 49.5996 li
76.6001 50.3999 li
76.5503 53.8496 li
81.2002 58.9497 li
79.8501 52.0996 li
60.0503 47.6997 mo
58.9004 49.8496 li
56.7002 51.9497 li
61.4502 56.8999 li
60.2002 50.0996 li
60.2002 50.0996 mo
60.0503 47.6997 li
77.75 0.25 mo
76.8003 0.649902 li
77 3.6499 li
80.7002 7.59961 li
79.8003 2.25 li
79.8003 2.25 mo
79.9004 0.25 li
79.7002 50.0996 mo
79.9004 47.1499 li
76.75 48.5 li
76.1504 52.0996 li
80.75 55.5996 li
79.7002 50.0996 li
78.6001 58.6997 mo
78.75 55.75 li
75.4004 57 li
75.0503 60.6997 li
79.6001 64.2998 li
78.6001 58.6997 li
68.2002 59.3999 mo
68.3501 56.4497 li
65.1001 57.6997 li
64.3003 61.5996 li
69.2002 65.0498 li
68.2002 59.3999 li
78.7002 91.2998 mo
78.8003 88.25 li
75.1001 89.3496 li
75 93.2998 li
79.9502 97.8496 li
78.7002 91.2998 li
72.9004 109.899 mo
72.9502 107.05 li
69.4004 108 li
68.8003 112.25 li
74.1504 116.5 li
72.9004 109.899 li
21.2002 115.85 mo
22.25 112.1 li
17.3501 113.2 li
18.2002 117.899 li
23.4004 123.3 li
21.2002 115.85 li
11.75 143.75 mo
12.9004 140.149 li
6.6001 140.05 li
8.05029 146.45 li
14.1001 151.05 li
11.75 143.75 li
67.0503 67.3496 mo
67.1001 64.5498 li
63.7002 65.5498 li
63.4004 69.3999 li
68.3501 74 li
67.0503 67.3496 li
86.75 118.5 mo
86.8501 115.6 li
83.3003 116.649 li
82.8003 120.8 li
88.1504 125.399 li
86.75 118.5 li
68.3003 52.0996 mo
68.25 49.3496 li
65.1504 50.4497 li
65.1001 53.6997 li
69.5503 58.8496 li
68.3003 52.0996 li
13.1504 131.149 mo
14.0503 127.6 li
9.25 128.5 li
9.5 133.6 li
15.3501 138.7 li
13.1504 131.149 li
84.5 64.6997 mo
84.4502 62.0996 li
81.4004 63.0996 li
80.8003 66.75 li
85.75 71.3999 li
84.5 64.6997 li
69.4004 35.4497 mo
69.4004 32.8496 li
66.4004 33.9497 li
66.3003 37.0996 li
70.7002 42.1997 li
69.4004 35.4497 li
60.2002 46.75 mo
60.1504 44 li
57 45.1499 li
56.9004 48.4497 li
61.5 53.6499 li
60.2002 46.75 li
86.8501 51.3999 mo
86.8003 48.75 li
83.6504 49.7998 li
83.6504 53.0498 li
88.1504 58.25 li
86.8501 51.3999 li
83.2002 127.85 mo
83.3501 125.05 li
79.8003 125.899 li
78.8501 130.45 li
84.7002 134.8 li
83.2002 127.85 li
70.5 66.0498 mo
70.5 63.4497 li
68.2002 64.9497 li
66.8003 68.1499 li
71.9004 72.8496 li
70.5 66.0498 li
85.6001 52.0996 mo
85.6504 49.3496 li
82.5503 50.4497 li
82.5503 53.6997 li
87 59.0498 li
85.6001 52.0996 li
90.3003 22.8496 mo
90.25 20.2998 li
87.3003 21.2998 li
87.3003 24.3496 li
91.6001 29.6997 li
90.3003 22.8496 li
72.9004 50.75 mo
72.8501 48.1997 li
69.8003 49.1499 li
69.6001 52.5 li
74.25 57.5996 li
72.9004 50.75 li
62.4004 30.7998 mo
62.4004 28.25 li
59.5 29.2998 li
59.2002 32.5498 li
63.8003 37.6997 li
62.4004 30.7998 li
81.0503 43.4497 mo
81 40.75 li
77.9502 41.8496 li
77.9502 45 li
82.4004 50.4497 li
81.0503 43.4497 li
78.7002 58.0498 mo
78.6001 55.5498 li
75.6001 56.4497 li
75.1504 60 li
80.0503 64.9497 li
78.7002 58.0498 li
96.0498 38.7998 mo
96 36.25 li
93.0498 37.1997 li
93.1006 40.2998 li
97.4502 45.6997 li
96.0498 38.7998 li
84.4502 46.0996 mo
84.4004 43.6499 li
81.6001 44.6499 li
81.1504 47.8496 li
85.8003 52.9497 li
84.4502 46.0996 li
93.75 72.6997 mo
93.6504 70.1997 li
90.6504 71.0498 li
90.0503 74.6997 li
95.1006 79.5498 li
93.75 72.6997 li
70.6504 48.75 mo
70.5 46.1997 li
67.5503 47.1997 li
67.1504 50.5996 li
71.9502 55.75 li
70.6504 48.75 li
63.5 58.6997 mo
63.5503 56.25 li
60.75 57.25 li
59.75 60.8999 li
64.9502 65.5996 li
63.5 58.6997 li
86.8501 47.4497 mo
86.75 44.8496 li
83.8003 45.8999 li
83.5503 49.1499 li
88.2002 54.4497 li
86.8501 47.4497 li
79.8501 62.6997 mo
79.8501 60 li
76.9004 61.1997 li
76.6504 64.3999 li
81.3003 69.8496 li
79.8501 62.6997 li
102.95 65.3496 mo
102.95 62.8496 li
100.05 63.8496 li
99.7998 67.0996 li
104.4 72.3496 li
102.95 65.3496 li
126.15 66.6997 mo
126.15 64.1997 li
123.3 65.1997 li
122.75 68.5996 li
127.601 73.6499 li
126.15 66.6997 li
66.3003 107.25 mo
67.1504 104.399 li
63.6001 105.3 li
62.6001 109.85 li
68.6001 114.6 li
66.3003 107.25 li
29 155.149 mo
28.5 160.7 li
35.0503 165.3 li
32.8003 157.75 li
32.8003 157.75 mo
33.6001 154.649 li
29 155.149 li
64.8003 41.4497 mo
64.75 38.75 li
61.7002 39.8496 li
61.7002 43.0498 li
66.25 48.6997 li
64.8003 41.4497 li
72.8501 32.7998 mo
72.8003 30.3496 li
69.8501 31.25 li
69.6504 34.5 li
74.25 39.7998 li
72.8501 32.7998 li
82.1504 29.5 mo
82.1001 26.9497 li
79.1504 27.9497 li
79.1504 31.0498 li
83.6001 36.5498 li
82.1504 29.5 li
77.4502 34.7998 mo
77.4502 32.3999 li
74.5503 33.2998 li
74.25 36.5498 li
78.9004 41.7998 li
77.4502 34.7998 li
92.75 30.1499 mo
92.4004 28 li
90.1504 29 li
89.3003 31.8999 li
93.9004 36.8999 li
92.75 30.1499 li
77.5503 48.0996 mo
77.5 45.5 li
74.5 46.5498 li
74.3003 49.7998 li
79 55.2998 li
77.5503 48.0996 li
111.25 35.4497 mo
110.95 33.2998 li
108.75 34.3496 li
108 37.0996 li
112.45 42.2998 li
111.25 35.4497 li
87.9502 49.3999 mo
87.8501 47 li
84.9502 47.8999 li
84.5 51.2998 li
89.4004 56.5 li
87.9502 49.3999 li
89.0503 109.899 mo
89 107.55 li
85.6001 107.95 li
84.5 112.6 li
90.5 116.95 li
89.0503 109.899 li
52 32.7998 mo
51.9004 30.5 li
49 31.25 li
48.4004 34.7998 li
53.4502 39.8999 li
52 32.7998 li
62.4502 42.7998 mo
62.3003 40.5 li
59.5 41.25 li
58.6504 44.8999 li
63.9004 49.8496 li
62.4502 42.7998 li
118.15 50.75 mo
117.9 48.5996 li
115.601 49.5996 li
114.9 52.4497 li
119.5 57.8496 li
118.15 50.75 li
74 43.4497 mo
73.8501 41.25 li
71.1001 41.9497 li
70.3003 45.5498 li
75.5 50.5498 li
74 43.4497 li
79.8003 74.6499 mo
79.7002 72.3999 li
76.8003 73.0996 li
76.1504 76.6997 li
81.3003 81.9497 li
79.8003 74.6499 li
108.5 49.3999 mo
108.55 47.5 li
106.3 48.1997 li
104.75 51.6997 li
110.2 56.3999 li
108.5 49.3999 li
87.8003 66.6997 mo
87.7002 64.6997 li
84.9502 65.1499 li
83.5 69.2998 li
89.4004 73.7998 li
87.8003 66.6997 li
57 129.8 mo
57.8003 127.1 li
53.7002 127.45 li
53.6504 132.2 li
59.8003 138.649 li
57 129.8 li
@
1 lc
56.9502 129.8 mo
56.9502 129.8 li
@
0 lc
88.6152 66.6597 mo
88.6152 65.7905 87.9097 65.085 87.04 65.085 cv
86.1709 65.085 85.4653 65.7905 85.4653 66.6597 cv
85.4653 67.5293 86.1709 68.2349 87.04 68.2349 cv
87.9097 68.2349 88.6152 67.5293 88.6152 66.6597 cv
@
1 lc
87.0503 66.6997 mo
87.0503 66.6997 li
@
0 lc
109.495 49.3799 mo
109.495 48.5103 108.79 47.8047 107.92 47.8047 cv
107.051 47.8047 106.345 48.5103 106.345 49.3799 cv
106.345 50.249 107.051 50.9546 107.92 50.9546 cv
108.79 50.9546 109.495 50.249 109.495 49.3799 cv
@
1 lc
107.95 49.3999 mo
107.95 49.3999 li
@
0 lc
80.4551 74.5796 mo
80.4551 73.7104 79.7495 73.0049 78.8804 73.0049 cv
78.0107 73.0049 77.3052 73.7104 77.3052 74.5796 cv
77.3052 75.4492 78.0107 76.1548 78.8804 76.1548 cv
79.7495 76.1548 80.4551 75.4492 80.4551 74.5796 cv
@
1 lc
78.9502 74.6499 mo
78.9502 74.6499 li
@
0 lc
74.6953 43.3799 mo
74.6953 42.5103 73.9897 41.8047 73.1201 41.8047 cv
72.251 41.8047 71.5454 42.5103 71.5454 43.3799 cv
71.5454 44.249 72.251 44.9546 73.1201 44.9546 cv
73.9897 44.9546 74.6953 44.249 74.6953 43.3799 cv
@
1 lc
73.1504 43.4497 mo
73.1504 43.4497 li
@
0 lc
118.855 50.8198 mo
118.855 49.9502 118.149 49.2446 117.28 49.2446 cv
116.411 49.2446 115.705 49.9502 115.705 50.8198 cv
115.705 51.689 116.411 52.3945 117.28 52.3945 cv
118.149 52.3945 118.855 51.689 118.855 50.8198 cv
@
1 lc
117.2 50.75 mo
117.2 50.75 li
@
0 lc
63.1753 42.8999 mo
63.1753 42.0303 62.4697 41.3247 61.6001 41.3247 cv
60.731 41.3247 60.0254 42.0303 60.0254 42.8999 cv
60.0254 43.769 60.731 44.4746 61.6001 44.4746 cv
62.4697 44.4746 63.1753 43.769 63.1753 42.8999 cv
@
1 lc
61.5503 42.7998 mo
61.5503 42.7998 li
@
0 lc
52.7354 32.8198 mo
52.7354 31.9502 52.0298 31.2446 51.1602 31.2446 cv
50.291 31.2446 49.585 31.9502 49.585 32.8198 cv
49.585 33.689 50.291 34.3945 51.1602 34.3945 cv
52.0298 34.3945 52.7354 33.689 52.7354 32.8198 cv
@
1 lc
51.1504 32.7998 mo
51.1504 32.7998 li
@
0 lc
89.8154 109.859 mo
89.8154 108.99 89.1094 108.285 88.2402 108.285 cv
87.3706 108.285 86.665 108.99 86.665 109.859 cv
86.665 110.729 87.3706 111.435 88.2402 111.435 cv
89.1094 111.435 89.8154 110.729 89.8154 109.859 cv
@
1 lc
88.25 109.899 mo
88.25 109.899 li
@
0 lc
88.6152 49.3799 mo
88.6152 48.5103 87.9097 47.8047 87.04 47.8047 cv
86.1709 47.8047 85.4653 48.5103 85.4653 49.3799 cv
85.4653 50.249 86.1709 50.9546 87.04 50.9546 cv
87.9097 50.9546 88.6152 50.249 88.6152 49.3799 cv
@
1 lc
87.0503 49.3999 mo
87.0503 49.3999 li
@
0 lc
111.896 35.46 mo
111.896 34.5903 111.189 33.8848 110.32 33.8848 cv
109.451 33.8848 108.745 34.5903 108.745 35.46 cv
108.745 36.3291 109.451 37.0347 110.32 37.0347 cv
111.189 37.0347 111.896 36.3291 111.896 35.46 cv
@
1 lc
110.25 35.4497 mo
110.25 35.4497 li
@
0 lc
78.2954 48.1797 mo
78.2954 47.3105 77.5898 46.605 76.7202 46.605 cv
75.8506 46.605 75.145 47.3105 75.145 48.1797 cv
75.145 49.0493 75.8506 49.7549 76.7202 49.7549 cv
77.5898 49.7549 78.2954 49.0493 78.2954 48.1797 cv
@
1 lc
76.6504 48.0996 mo
76.6504 48.0996 li
@
0 lc
93.1748 30.1797 mo
93.1748 29.3105 92.4697 28.605 91.6001 28.605 cv
90.731 28.605 90.0254 29.3105 90.0254 30.1797 cv
90.0254 31.0493 90.731 31.7549 91.6001 31.7549 cv
92.4697 31.7549 93.1748 31.0493 93.1748 30.1797 cv
@
1 lc
91.7002 30.1499 mo
91.7002 30.1499 li
@
0 lc
78.2954 34.7397 mo
78.2954 33.8701 77.5898 33.165 76.7202 33.165 cv
75.8506 33.165 75.145 33.8701 75.145 34.7397 cv
75.145 35.6094 75.8506 36.3149 76.7202 36.3149 cv
77.5898 36.3149 78.2954 35.6094 78.2954 34.7397 cv
@
1 lc
76.6504 34.7998 mo
76.6504 34.7998 li
@
0 lc
82.855 29.46 mo
82.855 28.5903 82.1494 27.8848 81.2803 27.8848 cv
80.4106 27.8848 79.7051 28.5903 79.7051 29.46 cv
79.7051 30.3291 80.4106 31.0347 81.2803 31.0347 cv
82.1494 31.0347 82.855 30.3291 82.855 29.46 cv
@
1 lc
81.3003 29.5 mo
81.3003 29.5 li
@
0 lc
73.4951 32.8198 mo
73.4951 31.9502 72.7896 31.2446 71.9204 31.2446 cv
71.0508 31.2446 70.3452 31.9502 70.3452 32.8198 cv
70.3452 33.689 71.0508 34.3945 71.9204 34.3945 cv
72.7896 34.3945 73.4951 33.689 73.4951 32.8198 cv
@
1 lc
72 32.7998 mo
72 32.7998 li
@
0 lc
65.5752 41.46 mo
65.5752 40.5903 64.8696 39.8848 64 39.8848 cv
63.1309 39.8848 62.4253 40.5903 62.4253 41.46 cv
62.4253 42.3291 63.1309 43.0347 64 43.0347 cv
64.8696 43.0347 65.5752 42.3291 65.5752 41.46 cv
@
1 lc
63.9004 41.4497 mo
63.9004 41.4497 li
@
0 lc
34.1353 157.74 mo
34.1353 156.87 33.4297 156.165 32.5601 156.165 cv
31.6909 156.165 30.9854 156.87 30.9854 157.74 cv
30.9854 158.609 31.6909 159.314 32.5601 159.314 cv
33.4297 159.314 34.1353 158.609 34.1353 157.74 cv
@
1 lc
32.6001 157.75 mo
32.6001 157.75 li
@
0 lc
67.7354 107.22 mo
67.7354 106.351 67.0298 105.645 66.1602 105.645 cv
65.291 105.645 64.585 106.351 64.585 107.22 cv
64.585 108.089 65.291 108.795 66.1602 108.795 cv
67.0298 108.795 67.7354 108.089 67.7354 107.22 cv
@
1 lc
66.2002 107.25 mo
66.2002 107.25 li
@
0 lc
127.016 66.6597 mo
127.016 65.7905 126.31 65.085 125.44 65.085 cv
124.571 65.085 123.865 65.7905 123.865 66.6597 cv
123.865 67.5293 124.571 68.2349 125.44 68.2349 cv
126.31 68.2349 127.016 67.5293 127.016 66.6597 cv
@
1 lc
125.351 66.6997 mo
125.351 66.6997 li
@
0 lc
103.735 65.3398 mo
103.735 64.4702 103.029 63.7646 102.16 63.7646 cv
101.291 63.7646 100.585 64.4702 100.585 65.3398 cv
100.585 66.209 101.291 66.915 102.16 66.915 cv
103.029 66.915 103.735 66.209 103.735 65.3398 cv
@
1 lc
102.15 65.3496 mo
102.15 65.3496 li
@
0 lc
80.4551 62.6997 mo
80.4551 61.8306 79.7495 61.125 78.8804 61.125 cv
78.0107 61.125 77.3052 61.8306 77.3052 62.6997 cv
77.3052 63.5693 78.0107 64.2749 78.8804 64.2749 cv
79.7495 64.2749 80.4551 63.5693 80.4551 62.6997 cv
@
1 lc
78.9502 62.6997 mo
78.9502 62.6997 li
@
0 lc
87.415 47.46 mo
87.415 46.5903 86.7095 45.8848 85.8403 45.8848 cv
84.9707 45.8848 84.2651 46.5903 84.2651 47.46 cv
84.2651 48.3291 84.9707 49.0347 85.8403 49.0347 cv
86.7095 49.0347 87.415 48.3291 87.415 47.46 cv
@
1 lc
85.9004 47.4497 mo
85.9004 47.4497 li
@
0 lc
64.375 58.7397 mo
64.375 57.8701 63.6694 57.165 62.8003 57.165 cv
61.9307 57.165 61.2251 57.8701 61.2251 58.7397 cv
61.2251 59.6094 61.9307 60.3149 62.8003 60.3149 cv
63.6694 60.3149 64.375 59.6094 64.375 58.7397 cv
@
1 lc
62.75 58.6997 mo
62.75 58.6997 li
@
0 lc
71.335 48.6597 mo
71.335 47.7905 70.6294 47.085 69.7603 47.085 cv
68.8906 47.085 68.1851 47.7905 68.1851 48.6597 cv
68.1851 49.5293 68.8906 50.2349 69.7603 50.2349 cv
70.6294 50.2349 71.335 49.5293 71.335 48.6597 cv
@
1 lc
69.7002 48.75 mo
69.7002 48.75 li
@
0 lc
94.375 72.6597 mo
94.375 71.7905 93.6699 71.085 92.7998 71.085 cv
91.9307 71.085 91.2251 71.7905 91.2251 72.6597 cv
91.2251 73.5293 91.9307 74.2349 92.7998 74.2349 cv
93.6699 74.2349 94.375 73.5293 94.375 72.6597 cv
@
1 lc
92.8506 72.6997 mo
92.8506 72.6997 li
@
0 lc
85.2554 46.0195 mo
85.2554 45.1504 84.5498 44.4448 83.6802 44.4448 cv
82.8105 44.4448 82.105 45.1504 82.105 46.0195 cv
82.105 46.8892 82.8105 47.5947 83.6802 47.5947 cv
84.5498 47.5947 85.2554 46.8892 85.2554 46.0195 cv
@
1 lc
83.6001 46.0996 mo
83.6001 46.0996 li
@
0 lc
96.7754 38.8198 mo
96.7754 37.9502 96.0693 37.2446 95.2002 37.2446 cv
94.3311 37.2446 93.625 37.9502 93.625 38.8198 cv
93.625 39.689 94.3311 40.3945 95.2002 40.3945 cv
96.0693 40.3945 96.7754 39.689 96.7754 38.8198 cv
@
1 lc
95.2002 38.7998 mo
95.2002 38.7998 li
@
0 lc
79.375 58.0195 mo
79.375 57.1504 78.6694 56.4448 77.8003 56.4448 cv
76.9307 56.4448 76.2251 57.1504 76.2251 58.0195 cv
76.2251 58.8892 76.9307 59.5947 77.8003 59.5947 cv
78.6694 59.5947 79.375 58.8892 79.375 58.0195 cv
@
1 lc
77.8003 58.0498 mo
77.8003 58.0498 li
@
0 lc
81.6553 43.3799 mo
81.6553 42.5103 80.9497 41.8047 80.0801 41.8047 cv
79.2109 41.8047 78.5054 42.5103 78.5054 43.3799 cv
78.5054 44.249 79.2109 44.9546 80.0801 44.9546 cv
80.9497 44.9546 81.6553 44.249 81.6553 43.3799 cv
@
1 lc
80.1001 43.4497 mo
80.1001 43.4497 li
@
0 lc
63.1753 30.8999 mo
63.1753 30.0303 62.4697 29.3247 61.6001 29.3247 cv
60.731 29.3247 60.0254 30.0303 60.0254 30.8999 cv
60.0254 31.769 60.731 32.4746 61.6001 32.4746 cv
62.4697 32.4746 63.1753 31.769 63.1753 30.8999 cv
@
1 lc
61.5503 30.7998 mo
61.5503 30.7998 li
@
0 lc
73.4951 50.8198 mo
73.4951 49.9502 72.7896 49.2446 71.9204 49.2446 cv
71.0508 49.2446 70.3452 49.9502 70.3452 50.8198 cv
70.3452 51.689 71.0508 52.3945 71.9204 52.3945 cv
72.7896 52.3945 73.4951 51.689 73.4951 50.8198 cv
@
1 lc
72 50.75 mo
72 50.75 li
@
0 lc
91.0151 22.8599 mo
91.0151 21.9902 90.3096 21.2847 89.4404 21.2847 cv
88.5708 21.2847 87.8652 21.9902 87.8652 22.8599 cv
87.8652 23.729 88.5708 24.4346 89.4404 24.4346 cv
90.3096 24.4346 91.0151 23.729 91.0151 22.8599 cv
@
1 lc
89.4004 22.8496 mo
89.4004 22.8496 li
@
0 lc
86.335 52.0195 mo
86.335 51.1504 85.6294 50.4448 84.7603 50.4448 cv
83.8906 50.4448 83.1851 51.1504 83.1851 52.0195 cv
83.1851 52.8892 83.8906 53.5947 84.7603 53.5947 cv
85.6294 53.5947 86.335 52.8892 86.335 52.0195 cv
@
1 lc
84.75 52.0996 mo
84.75 52.0996 li
@
0 lc
71.335 66.0596 mo
71.335 65.1904 70.6294 64.4849 69.7603 64.4849 cv
68.8906 64.4849 68.1851 65.1904 68.1851 66.0596 cv
68.1851 66.9292 68.8906 67.6348 69.7603 67.6348 cv
70.6294 67.6348 71.335 66.9292 71.335 66.0596 cv
@
1 lc
69.7002 66.0498 mo
69.7002 66.0498 li
@
0 lc
84.0552 127.859 mo
84.0552 126.99 83.3496 126.285 82.48 126.285 cv
81.6108 126.285 80.9053 126.99 80.9053 127.859 cv
80.9053 128.729 81.6108 129.435 82.48 129.435 cv
83.3496 129.435 84.0552 128.729 84.0552 127.859 cv
@
1 lc
82.4502 127.85 mo
82.4502 127.85 li
@
0 lc
87.415 51.2998 mo
87.415 50.4302 86.7095 49.7246 85.8403 49.7246 cv
84.9707 49.7246 84.2651 50.4302 84.2651 51.2998 cv
84.2651 52.1689 84.9707 52.875 85.8403 52.875 cv
86.7095 52.875 87.415 52.1689 87.415 51.2998 cv
@
1 lc
85.9004 51.3999 mo
85.9004 51.3999 li
@
0 lc
60.7754 46.7397 mo
60.7754 45.8701 60.0693 45.165 59.2002 45.165 cv
58.3311 45.165 57.625 45.8701 57.625 46.7397 cv
57.625 47.6094 58.3311 48.3149 59.2002 48.3149 cv
60.0693 48.3149 60.7754 47.6094 60.7754 46.7397 cv
@
1 lc
59.25 46.75 mo
59.25 46.75 li
@
0 lc
70.1353 35.46 mo
70.1353 34.5903 69.4297 33.8848 68.5601 33.8848 cv
67.6909 33.8848 66.9854 34.5903 66.9854 35.46 cv
66.9854 36.3291 67.6909 37.0347 68.5601 37.0347 cv
69.4297 37.0347 70.1353 36.3291 70.1353 35.46 cv
@
1 lc
68.5503 35.4497 mo
68.5503 35.4497 li
@
0 lc
85.2554 64.7397 mo
85.2554 63.8701 84.5498 63.165 83.6802 63.165 cv
82.8105 63.165 82.105 63.8701 82.105 64.7397 cv
82.105 65.6094 82.8105 66.3149 83.6802 66.3149 cv
84.5498 66.3149 85.2554 65.6094 85.2554 64.7397 cv
@
1 lc
83.6001 64.6997 mo
83.6001 64.6997 li
@
0 lc
14.4551 131.22 mo
14.4551 130.351 13.7495 129.645 12.8804 129.645 cv
12.0107 129.645 11.3052 130.351 11.3052 131.22 cv
11.3052 132.089 12.0107 132.795 12.8804 132.795 cv
13.7495 132.795 14.4551 132.089 14.4551 131.22 cv
@
1 lc
12.9004 131.149 mo
12.9004 131.149 li
@
0 lc
68.9351 52.0195 mo
68.9351 51.1504 68.2295 50.4448 67.3604 50.4448 cv
66.4907 50.4448 65.7852 51.1504 65.7852 52.0195 cv
65.7852 52.8892 66.4907 53.5947 67.3604 53.5947 cv
68.2295 53.5947 68.9351 52.8892 68.9351 52.0195 cv
@
1 lc
67.3501 52.0996 mo
67.3501 52.0996 li
@
0 lc
87.415 118.5 mo
87.415 117.63 86.7095 116.925 85.8403 116.925 cv
84.9707 116.925 84.2651 117.63 84.2651 118.5 cv
84.2651 119.369 84.9707 120.075 85.8403 120.075 cv
86.7095 120.075 87.415 119.369 87.415 118.5 cv
@
1 lc
85.9004 118.5 mo
85.9004 118.5 li
@
0 lc
67.7354 67.3799 mo
67.7354 66.5103 67.0298 65.8047 66.1602 65.8047 cv
65.291 65.8047 64.585 66.5103 64.585 67.3799 cv
64.585 68.249 65.291 68.9546 66.1602 68.9546 cv
67.0298 68.9546 67.7354 68.249 67.7354 67.3799 cv
@
1 lc
66.2002 67.3496 mo
66.2002 67.3496 li
@
0 lc
13.2554 143.7 mo
13.2554 142.83 12.5498 142.125 11.6802 142.125 cv
10.8105 142.125 10.105 142.83 10.105 143.7 cv
10.105 144.569 10.8105 145.274 11.6802 145.274 cv
12.5498 145.274 13.2554 144.569 13.2554 143.7 cv
@
1 lc
11.75 143.75 mo
11.75 143.75 li
@
0 lc
22.6152 115.859 mo
22.6152 114.99 21.9097 114.285 21.04 114.285 cv
20.1709 114.285 19.4653 114.99 19.4653 115.859 cv
19.4653 116.729 20.1709 117.435 21.04 117.435 cv
21.9097 117.435 22.6152 116.729 22.6152 115.859 cv
@
1 lc
21 115.85 mo
21 115.85 li
@
0 lc
73.4951 109.859 mo
73.4951 108.99 72.7896 108.285 71.9204 108.285 cv
71.0508 108.285 70.3452 108.99 70.3452 109.859 cv
70.3452 110.729 71.0508 111.435 71.9204 111.435 cv
72.7896 111.435 73.4951 110.729 73.4951 109.859 cv
@
1 lc
72 109.899 mo
72 109.899 li
@
0 lc
79.375 91.3799 mo
79.375 90.5103 78.6694 89.8047 77.8003 89.8047 cv
76.9307 89.8047 76.2251 90.5103 76.2251 91.3799 cv
76.2251 92.249 76.9307 92.9546 77.8003 92.9546 cv
78.6694 92.9546 79.375 92.249 79.375 91.3799 cv
@
1 lc
77.8003 91.2998 mo
77.8003 91.2998 li
@
0 lc
68.9351 59.46 mo
68.9351 58.5903 68.2295 57.8848 67.3604 57.8848 cv
66.4907 57.8848 65.7852 58.5903 65.7852 59.46 cv
65.7852 60.3291 66.4907 61.0347 67.3604 61.0347 cv
68.2295 61.0347 68.9351 60.3291 68.9351 59.46 cv
@
1 lc
67.3501 59.3999 mo
67.3501 59.3999 li
@
0 lc
79.375 58.7397 mo
79.375 57.8701 78.6694 57.165 77.8003 57.165 cv
76.9307 57.165 76.2251 57.8701 76.2251 58.7397 cv
76.2251 59.6094 76.9307 60.3149 77.8003 60.3149 cv
78.6694 60.3149 79.375 59.6094 79.375 58.7397 cv
@
1 lc
77.8003 58.6997 mo
77.8003 58.6997 li
@
0 lc
80.4551 50.0996 mo
80.4551 49.2305 79.7495 48.5249 78.8804 48.5249 cv
78.0107 48.5249 77.3052 49.2305 77.3052 50.0996 cv
77.3052 50.9692 78.0107 51.6748 78.8804 51.6748 cv
79.7495 51.6748 80.4551 50.9692 80.4551 50.0996 cv
@
1 lc
78.9502 50.0996 mo
78.9502 50.0996 li
@
0 lc
80.4551 2.33984 mo
80.4551 1.47021 79.7495 0.764648 78.8804 0.764648 cv
78.0107 0.764648 77.3052 1.47021 77.3052 2.33984 cv
77.3052 3.20898 78.0107 3.91504 78.8804 3.91504 cv
79.7495 3.91504 80.4551 3.20898 80.4551 2.33984 cv
@
1 lc
78.9502 2.25 mo
78.9502 2.25 li
@
0 lc
60.7754 50.0996 mo
60.7754 49.2305 60.0693 48.5249 59.2002 48.5249 cv
58.3311 48.5249 57.625 49.2305 57.625 50.0996 cv
57.625 50.9692 58.3311 51.6748 59.2002 51.6748 cv
60.0693 51.6748 60.7754 50.9692 60.7754 50.0996 cv
@
1 lc
59.25 50.0996 mo
59.25 50.0996 li
@
0 lc
80.4551 52.0195 mo
80.4551 51.1504 79.7495 50.4448 78.8804 50.4448 cv
78.0107 50.4448 77.3052 51.1504 77.3052 52.0195 cv
77.3052 52.8892 78.0107 53.5947 78.8804 53.5947 cv
79.7495 53.5947 80.4551 52.8892 80.4551 52.0195 cv
@
1 lc
78.9502 52.0996 mo
78.9502 52.0996 li
@
0 lc
66.5352 49.3799 mo
66.5352 48.5103 65.8296 47.8047 64.96 47.8047 cv
64.0908 47.8047 63.3853 48.5103 63.3853 49.3799 cv
63.3853 50.249 64.0908 50.9546 64.96 50.9546 cv
65.8296 50.9546 66.5352 50.249 66.5352 49.3799 cv
@
1 lc
65.0503 49.3999 mo
65.0503 49.3999 li
@
0 lc
68.9351 62.6997 mo
68.9351 61.8306 68.2295 61.125 67.3604 61.125 cv
66.4907 61.125 65.7852 61.8306 65.7852 62.6997 cv
65.7852 63.5693 66.4907 64.2749 67.3604 64.2749 cv
68.2295 64.2749 68.9351 63.5693 68.9351 62.6997 cv
@
1 lc
67.3501 62.6997 mo
67.3501 62.6997 li
@
0 lc
59.5752 72.6597 mo
59.5752 71.7905 58.8696 71.085 58 71.085 cv
57.1309 71.085 56.4253 71.7905 56.4253 72.6597 cv
56.4253 73.5293 57.1309 74.2349 58 74.2349 cv
58.8696 74.2349 59.5752 73.5293 59.5752 72.6597 cv
@
1 lc
58.1001 72.6997 mo
58.1001 72.6997 li
@
0 lc
84.0552 133.859 mo
84.0552 132.99 83.3496 132.285 82.48 132.285 cv
81.6108 132.285 80.9053 132.99 80.9053 133.859 cv
80.9053 134.729 81.6108 135.435 82.48 135.435 cv
83.3496 135.435 84.0552 134.729 84.0552 133.859 cv
@
1 lc
82.4502 133.8 mo
82.4502 133.8 li
@
0 lc
32.9351 129.06 mo
32.9351 128.19 32.2295 127.484 31.3604 127.484 cv
30.4907 127.484 29.7852 128.19 29.7852 129.06 cv
29.7852 129.929 30.4907 130.635 31.3604 130.635 cv
32.2295 130.635 32.9351 129.929 32.9351 129.06 cv
@
1 lc
31.4502 129.149 mo
31.4502 129.149 li
@
0 lc
21.415 158.34 mo
21.415 157.471 20.7095 156.765 19.8403 156.765 cv
18.9707 156.765 18.2651 157.471 18.2651 158.34 cv
18.2651 159.209 18.9707 159.915 19.8403 159.915 cv
20.7095 159.915 21.415 159.209 21.415 158.34 cv
@
1 lc
19.8501 158.399 mo
19.8501 158.399 li
@
0 lc
35.335 114.54 mo
35.335 113.67 34.6294 112.965 33.7603 112.965 cv
32.8906 112.965 32.1851 113.67 32.1851 114.54 cv
32.1851 115.409 32.8906 116.115 33.7603 116.115 cv
34.6294 116.115 35.335 115.409 35.335 114.54 cv
@
1 lc
33.75 114.55 mo
33.75 114.55 li
@
0 lc
60.7754 117.78 mo
60.7754 116.91 60.0693 116.205 59.2002 116.205 cv
58.3311 116.205 57.625 116.91 57.625 117.78 cv
57.625 118.649 58.3311 119.354 59.2002 119.354 cv
60.0693 119.354 60.7754 118.649 60.7754 117.78 cv
@
1 lc
59.25 117.85 mo
59.25 117.85 li
@
0 lc
31.7354 100.5 mo
31.7354 99.6299 31.0298 98.9248 30.1602 98.9248 cv
29.291 98.9248 28.585 99.6299 28.585 100.5 cv
28.585 101.369 29.291 102.075 30.1602 102.075 cv
31.0298 102.075 31.7354 101.369 31.7354 100.5 cv
@
1 lc
30.25 100.6 mo
30.25 100.6 li
@
0 lc
31.7354 94.0195 mo
31.7354 93.1504 31.0298 92.4448 30.1602 92.4448 cv
29.291 92.4448 28.585 93.1504 28.585 94.0195 cv
28.585 94.8896 29.291 95.5947 30.1602 95.5947 cv
31.0298 95.5947 31.7354 94.8896 31.7354 94.0195 cv
@
1 lc
30.25 93.9502 mo
30.25 93.9502 li
@
0 lc
35.335 101.939 mo
35.335 101.07 34.6294 100.365 33.7603 100.365 cv
32.8906 100.365 32.1851 101.07 32.1851 101.939 cv
32.1851 102.81 32.8906 103.515 33.7603 103.515 cv
34.6294 103.515 35.335 102.81 35.335 101.939 cv
@
1 lc
33.75 101.899 mo
33.75 101.899 li
@
0 lc
25.9751 115.859 mo
25.9751 114.99 25.2695 114.285 24.4004 114.285 cv
23.5308 114.285 22.8252 114.99 22.8252 115.859 cv
22.8252 116.729 23.5308 117.435 24.4004 117.435 cv
25.2695 117.435 25.9751 116.729 25.9751 115.859 cv
@
1 lc
24.5 115.85 mo
24.5 115.85 li
@
0 lc
132.775 123.78 mo
132.775 122.91 132.069 122.205 131.2 122.205 cv
130.331 122.205 129.625 122.91 129.625 123.78 cv
129.625 124.649 130.331 125.354 131.2 125.354 cv
132.069 125.354 132.775 124.649 132.775 123.78 cv
@
1 lc
131.101 123.85 mo
131.101 123.85 li
@
0 lc
78.2954 117.78 mo
78.2954 116.91 77.5898 116.205 76.7202 116.205 cv
75.8506 116.205 75.145 116.91 75.145 117.78 cv
75.145 118.649 75.8506 119.354 76.7202 119.354 cv
77.5898 119.354 78.2954 118.649 78.2954 117.78 cv
@
1 lc
76.6504 117.85 mo
76.6504 117.85 li
@
0 lc
107.095 42.1797 mo
107.095 41.3105 106.39 40.605 105.521 40.605 cv
104.65 40.605 103.945 41.3105 103.945 42.1797 cv
103.945 43.0493 104.65 43.7549 105.521 43.7549 cv
106.39 43.7549 107.095 43.0493 107.095 42.1797 cv
@
1 lc
105.601 42.0996 mo
105.601 42.0996 li
@
0 lc
112.976 57.2998 mo
112.976 56.4302 112.27 55.7246 111.4 55.7246 cv
110.531 55.7246 109.825 56.4302 109.825 57.2998 cv
109.825 58.1689 110.531 58.875 111.4 58.875 cv
112.27 58.875 112.976 58.1689 112.976 57.2998 cv
@
1 lc
111.4 57.3999 mo
111.4 57.3999 li
@
0 lc
109.495 41.46 mo
109.495 40.5903 108.79 39.8848 107.92 39.8848 cv
107.051 39.8848 106.345 40.5903 106.345 41.46 cv
106.345 42.3291 107.051 43.0347 107.92 43.0347 cv
108.79 43.0347 109.495 42.3291 109.495 41.46 cv
@
1 lc
107.95 41.4497 mo
107.95 41.4497 li
@
0 lc
106.016 40.7397 mo
106.016 39.8701 105.31 39.165 104.44 39.165 cv
103.571 39.165 102.865 39.8701 102.865 40.7397 cv
102.865 41.6094 103.571 42.3149 104.44 42.3149 cv
105.31 42.3149 106.016 41.6094 106.016 40.7397 cv
@
1 lc
104.45 40.7998 mo
104.45 40.7998 li
@
0 lc
109.495 89.2197 mo
109.495 88.3506 108.79 87.6445 107.92 87.6445 cv
107.051 87.6445 106.345 88.3506 106.345 89.2197 cv
106.345 90.0894 107.051 90.7949 107.92 90.7949 cv
108.79 90.7949 109.495 90.0894 109.495 89.2197 cv
@
1 lc
107.95 89.2998 mo
107.95 89.2998 li
@
0 lc
109.495 60.0596 mo
109.495 59.1904 108.79 58.4849 107.92 58.4849 cv
107.051 58.4849 106.345 59.1904 106.345 60.0596 cv
106.345 60.9292 107.051 61.6348 107.92 61.6348 cv
108.79 61.6348 109.495 60.9292 109.495 60.0596 cv
@
1 lc
107.95 60.0498 mo
107.95 60.0498 li
@
0 lc
75.895 56.8198 mo
75.895 55.9502 75.1895 55.2446 74.3203 55.2446 cv
73.4507 55.2446 72.7451 55.9502 72.7451 56.8198 cv
72.7451 57.689 73.4507 58.3945 74.3203 58.3945 cv
75.1895 58.3945 75.895 57.689 75.895 56.8198 cv
@
1 lc
74.3003 56.75 mo
74.3003 56.75 li
@
0 lc
151.255 58.0195 mo
151.255 57.1504 150.55 56.4448 149.681 56.4448 cv
148.811 56.4448 148.105 57.1504 148.105 58.0195 cv
148.105 58.8892 148.811 59.5947 149.681 59.5947 cv
150.55 59.5947 151.255 58.8892 151.255 58.0195 cv
@
1 lc
149.65 58.0498 mo
149.65 58.0498 li
@
0 lc
176.695 71.3398 mo
176.695 70.4702 175.989 69.7646 175.12 69.7646 cv
174.251 69.7646 173.545 70.4702 173.545 71.3398 cv
173.545 72.209 174.251 72.915 175.12 72.915 cv
175.989 72.915 176.695 72.209 176.695 71.3398 cv
@
1 lc
175.15 71.3496 mo
175.15 71.3496 li
@
0 lc
96.7754 37.3799 mo
96.7754 36.5103 96.0693 35.8047 95.2002 35.8047 cv
94.3311 35.8047 93.625 36.5103 93.625 37.3799 cv
93.625 38.249 94.3311 38.9546 95.2002 38.9546 cv
96.0693 38.9546 96.7754 38.249 96.7754 37.3799 cv
@
1 lc
95.2002 37.4497 mo
95.2002 37.4497 li
@
0 lc
75.895 61.3799 mo
75.895 60.5103 75.1895 59.8047 74.3203 59.8047 cv
73.4507 59.8047 72.7451 60.5103 72.7451 61.3799 cv
72.7451 62.249 73.4507 62.9546 74.3203 62.9546 cv
75.1895 62.9546 75.895 62.249 75.895 61.3799 cv
@
1 lc
74.3003 61.3999 mo
74.3003 61.3999 li
@
0 lc
110.695 57.2998 mo
110.695 56.4302 109.989 55.7246 109.12 55.7246 cv
108.251 55.7246 107.545 56.4302 107.545 57.2998 cv
107.545 58.1689 108.251 58.875 109.12 58.875 cv
109.989 58.875 110.695 58.1689 110.695 57.2998 cv
@
1 lc
109.101 57.3999 mo
109.101 57.3999 li
@
0 lc
172.135 96.6602 mo
172.135 95.79 171.43 95.085 170.561 95.085 cv
169.69 95.085 168.985 95.79 168.985 96.6602 cv
168.985 97.5293 169.69 98.2344 170.561 98.2344 cv
171.43 98.2344 172.135 97.5293 172.135 96.6602 cv
@
1 lc
170.55 96.5996 mo
170.55 96.5996 li
@
0 lc
103.735 67.3799 mo
103.735 66.5103 103.029 65.8047 102.16 65.8047 cv
101.291 65.8047 100.585 66.5103 100.585 67.3799 cv
100.585 68.249 101.291 68.9546 102.16 68.9546 cv
103.029 68.9546 103.735 68.249 103.735 67.3799 cv
@
1 lc
102.15 67.3496 mo
102.15 67.3496 li
@
0 lc
101.335 32.0996 mo
101.335 31.2305 100.63 30.5249 99.7598 30.5249 cv
98.8906 30.5249 98.1855 31.2305 98.1855 32.0996 cv
98.1855 32.9692 98.8906 33.6748 99.7598 33.6748 cv
100.63 33.6748 101.335 32.9692 101.335 32.0996 cv
@
1 lc
99.7998 32.1499 mo
99.7998 32.1499 li
@
0 lc
107.095 71.9399 mo
107.095 71.0703 106.39 70.3647 105.521 70.3647 cv
104.65 70.3647 103.945 71.0703 103.945 71.9399 cv
103.945 72.8091 104.65 73.5146 105.521 73.5146 cv
106.39 73.5146 107.095 72.8091 107.095 71.9399 cv
@
1 lc
105.601 72 mo
105.601 72 li
@
0 lc
102.535 56.0996 mo
102.535 55.2305 101.829 54.5249 100.96 54.5249 cv
100.091 54.5249 99.3848 55.2305 99.3848 56.0996 cv
99.3848 56.9692 100.091 57.6748 100.96 57.6748 cv
101.829 57.6748 102.535 56.9692 102.535 56.0996 cv
@
1 lc
101 56.0498 mo
101 56.0498 li
@
0 lc
147.775 33.54 mo
147.775 32.6704 147.069 31.9648 146.2 31.9648 cv
145.331 31.9648 144.625 32.6704 144.625 33.54 cv
144.625 34.4092 145.331 35.1147 146.2 35.1147 cv
147.069 35.1147 147.775 34.4092 147.775 33.54 cv
@
1 lc
146.2 33.4497 mo
146.2 33.4497 li
@
0 lc
59.5752 96.6602 mo
59.5752 95.79 58.8696 95.085 58 95.085 cv
57.1309 95.085 56.4253 95.79 56.4253 96.6602 cv
56.4253 97.5293 57.1309 98.2344 58 98.2344 cv
58.8696 98.2344 59.5752 97.5293 59.5752 96.6602 cv
@
1 lc
58.1001 96.5996 mo
58.1001 96.5996 li
@
0 lc
99.1748 44.8198 mo
99.1748 43.9502 98.4697 43.2446 97.6006 43.2446 cv
96.7305 43.2446 96.0254 43.9502 96.0254 44.8198 cv
96.0254 45.689 96.7305 46.3945 97.6006 46.3945 cv
98.4697 46.3945 99.1748 45.689 99.1748 44.8198 cv
@
1 lc
97.5 44.75 mo
97.5 44.75 li
@
0 lc
114.175 31.5 mo
114.175 30.6304 113.47 29.9248 112.601 29.9248 cv
111.73 29.9248 111.025 30.6304 111.025 31.5 cv
111.025 32.3691 111.73 33.0747 112.601 33.0747 cv
113.47 33.0747 114.175 32.3691 114.175 31.5 cv
@
1 lc
112.601 31.5 mo
112.601 31.5 li
@
0 lc
101.335 42.1797 mo
101.335 41.3105 100.63 40.605 99.7598 40.605 cv
98.8906 40.605 98.1855 41.3105 98.1855 42.1797 cv
98.1855 43.0493 98.8906 43.7549 99.7598 43.7549 cv
100.63 43.7549 101.335 43.0493 101.335 42.1797 cv
@
1 lc
99.7998 42.0996 mo
99.7998 42.0996 li
@
0 lc
103.735 30.1797 mo
103.735 29.3105 103.029 28.605 102.16 28.605 cv
101.291 28.605 100.585 29.3105 100.585 30.1797 cv
100.585 31.0493 101.291 31.7549 102.16 31.7549 cv
103.029 31.7549 103.735 31.0493 103.735 30.1797 cv
@
1 lc
102.15 30.1499 mo
102.15 30.1499 li
@
0 lc
96.7754 97.8594 mo
96.7754 96.9902 96.0693 96.2852 95.2002 96.2852 cv
94.3311 96.2852 93.625 96.9902 93.625 97.8594 cv
93.625 98.7295 94.3311 99.4346 95.2002 99.4346 cv
96.0693 99.4346 96.7754 98.7295 96.7754 97.8594 cv
@
1 lc
95.2002 97.9502 mo
95.2002 97.9502 li
@
0 lc
53.8154 92.5796 mo
53.8154 91.7104 53.1094 91.0049 52.2402 91.0049 cv
51.3706 91.0049 50.665 91.7104 50.665 92.5796 cv
50.665 93.4492 51.3706 94.1553 52.2402 94.1553 cv
53.1094 94.1553 53.8154 93.4492 53.8154 92.5796 cv
@
1 lc
52.3003 92.5996 mo
52.3003 92.5996 li
@
0 lc
65.5752 12.1797 mo
65.5752 11.3105 64.8696 10.605 64 10.605 cv
63.1309 10.605 62.4253 11.3105 62.4253 12.1797 cv
62.4253 13.0493 63.1309 13.7549 64 13.7549 cv
64.8696 13.7549 65.5752 13.0493 65.5752 12.1797 cv
@
1 lc
63.9004 12.1997 mo
63.9004 12.1997 li
@
0 lc
129.175 34.7397 mo
129.175 33.8701 128.47 33.165 127.601 33.165 cv
126.73 33.165 126.025 33.8701 126.025 34.7397 cv
126.025 35.6094 126.73 36.3149 127.601 36.3149 cv
128.47 36.3149 129.175 35.6094 129.175 34.7397 cv
@
1 lc
127.65 34.7998 mo
127.65 34.7998 li
@
0 lc
96.7754 54.0596 mo
96.7754 53.1904 96.0693 52.4849 95.2002 52.4849 cv
94.3311 52.4849 93.625 53.1904 93.625 54.0596 cv
93.625 54.9292 94.3311 55.6348 95.2002 55.6348 cv
96.0693 55.6348 96.7754 54.9292 96.7754 54.0596 cv
@
1 lc
95.2002 54.0498 mo
95.2002 54.0498 li
@
0 lc
97.9756 30.8999 mo
97.9756 30.0303 97.2695 29.3247 96.4004 29.3247 cv
95.5313 29.3247 94.8252 30.0303 94.8252 30.8999 cv
94.8252 31.769 95.5313 32.4746 96.4004 32.4746 cv
97.2695 32.4746 97.9756 31.769 97.9756 30.8999 cv
@
1 lc
96.3506 30.7998 mo
96.3506 30.7998 li
@
0 lc
119.936 57.2998 mo
119.936 56.4302 119.229 55.7246 118.36 55.7246 cv
117.491 55.7246 116.785 56.4302 116.785 57.2998 cv
116.785 58.1689 117.491 58.875 118.36 58.875 cv
119.229 58.875 119.936 58.1689 119.936 57.2998 cv
@
1 lc
118.351 57.3999 mo
118.351 57.3999 li
@
0 lc
66.5352 171.78 mo
66.5352 170.91 65.8296 170.205 64.96 170.205 cv
64.0908 170.205 63.3853 170.91 63.3853 171.78 cv
63.3853 172.649 64.0908 173.354 64.96 173.354 cv
65.8296 173.354 66.5352 172.649 66.5352 171.78 cv
@
1 lc
65.0503 171.7 mo
65.0503 171.7 li
@
0 lc
148.855 102.66 mo
148.855 101.79 148.149 101.085 147.28 101.085 cv
146.411 101.085 145.705 101.79 145.705 102.66 cv
145.705 103.529 146.411 104.234 147.28 104.234 cv
148.149 104.234 148.855 103.529 148.855 102.66 cv
@
1 lc
147.351 102.6 mo
147.351 102.6 li
@
0 lc
46.855 70.7397 mo
46.855 69.8701 46.1494 69.165 45.2803 69.165 cv
44.4106 69.165 43.7051 69.8701 43.7051 70.7397 cv
43.7051 71.6094 44.4106 72.3149 45.2803 72.3149 cv
46.1494 72.3149 46.855 71.6094 46.855 70.7397 cv
@
1 lc
45.3501 70.6997 mo
45.3501 70.6997 li
@
0 lc
20.2153 34.7397 mo
20.2153 33.8701 19.5098 33.165 18.6401 33.165 cv
17.771 33.165 17.0654 33.8701 17.0654 34.7397 cv
17.0654 35.6094 17.771 36.3149 18.6401 36.3149 cv
19.5098 36.3149 20.2153 35.6094 20.2153 34.7397 cv
@
1 lc
18.7002 34.7998 mo
18.7002 34.7998 li
@
0 lc
17.9351 43.3799 mo
17.9351 42.5103 17.2295 41.8047 16.3604 41.8047 cv
15.4907 41.8047 14.7852 42.5103 14.7852 43.3799 cv
14.7852 44.249 15.4907 44.9546 16.3604 44.9546 cv
17.2295 44.9546 17.9351 44.249 17.9351 43.3799 cv
@
1 lc
16.3501 43.4497 mo
16.3501 43.4497 li
@
0 lc
8.69531 113.939 mo
8.69531 113.07 7.98975 112.365 7.12012 112.365 cv
6.25098 112.365 5.54541 113.07 5.54541 113.939 cv
5.54541 114.81 6.25098 115.515 7.12012 115.515 cv
7.98975 115.515 8.69531 114.81 8.69531 113.939 cv
@
1 lc
7.1001 113.85 mo
7.1001 113.85 li
@
0 lc
77.0952 78.6597 mo
77.0952 77.7905 76.3896 77.085 75.52 77.085 cv
74.6509 77.085 73.9453 77.7905 73.9453 78.6597 cv
73.9453 79.5293 74.6509 80.2349 75.52 80.2349 cv
76.3896 80.2349 77.0952 79.5293 77.0952 78.6597 cv
@
1 lc
75.5 78.6499 mo
75.5 78.6499 li
@
0 lc
68.9351 85.8599 mo
68.9351 84.9902 68.2295 84.2847 67.3604 84.2847 cv
66.4907 84.2847 65.7852 84.9902 65.7852 85.8599 cv
65.7852 86.729 66.4907 87.4346 67.3604 87.4346 cv
68.2295 87.4346 68.9351 86.729 68.9351 85.8599 cv
@
1 lc
67.3501 85.9497 mo
67.3501 85.9497 li
@
0 lc
85.2554 89.9399 mo
85.2554 89.0703 84.5498 88.3647 83.6802 88.3647 cv
82.8105 88.3647 82.105 89.0703 82.105 89.9399 cv
82.105 90.8091 82.8105 91.5146 83.6802 91.5146 cv
84.5498 91.5146 85.2554 90.8091 85.2554 89.9399 cv
@
1 lc
83.6001 89.9497 mo
83.6001 89.9497 li
@
0 lc
94.375 93.2998 mo
94.375 92.4302 93.6699 91.7246 92.7998 91.7246 cv
91.9307 91.7246 91.2251 92.4302 91.2251 93.2998 cv
91.2251 94.1689 91.9307 94.875 92.7998 94.875 cv
93.6699 94.875 94.375 94.1689 94.375 93.2998 cv
@
1 lc
92.8506 93.25 mo
92.8506 93.25 li
@
0 lc
140.815 111.3 mo
140.815 110.431 140.109 109.725 139.24 109.725 cv
138.371 109.725 137.665 110.431 137.665 111.3 cv
137.665 112.169 138.371 112.875 139.24 112.875 cv
140.109 112.875 140.815 112.169 140.815 111.3 cv
@
1 lc
139.25 111.2 mo
139.25 111.2 li
@
0 lc
108.295 80.0996 mo
108.295 79.2305 107.59 78.5249 106.72 78.5249 cv
105.851 78.5249 105.146 79.2305 105.146 80.0996 cv
105.146 80.9692 105.851 81.6748 106.72 81.6748 cv
107.59 81.6748 108.295 80.9692 108.295 80.0996 cv
@
1 lc
106.8 80 mo
106.8 80 li
@
0 lc
101.335 85.3799 mo
101.335 84.5103 100.63 83.8047 99.7598 83.8047 cv
98.8906 83.8047 98.1855 84.5103 98.1855 85.3799 cv
98.1855 86.249 98.8906 86.9546 99.7598 86.9546 cv
100.63 86.9546 101.335 86.249 101.335 85.3799 cv
@
1 lc
99.7998 85.2998 mo
99.7998 85.2998 li
@
0 lc
84.0552 88.5 mo
84.0552 87.6304 83.3496 86.9248 82.48 86.9248 cv
81.6108 86.9248 80.9053 87.6304 80.9053 88.5 cv
80.9053 89.3691 81.6108 90.0747 82.48 90.0747 cv
83.3496 90.0747 84.0552 89.3691 84.0552 88.5 cv
@
1 lc
82.4502 88.5996 mo
82.4502 88.5996 li
@
0 lc
118.855 51.2998 mo
118.855 50.4302 118.149 49.7246 117.28 49.7246 cv
116.411 49.7246 115.705 50.4302 115.705 51.2998 cv
115.705 52.1689 116.411 52.875 117.28 52.875 cv
118.149 52.875 118.855 52.1689 118.855 51.2998 cv
@
1 lc
117.2 51.3999 mo
117.2 51.3999 li
@
0 lc
102.535 59.46 mo
102.535 58.5903 101.829 57.8848 100.96 57.8848 cv
100.091 57.8848 99.3848 58.5903 99.3848 59.46 cv
99.3848 60.3291 100.091 61.0347 100.96 61.0347 cv
101.829 61.0347 102.535 60.3291 102.535 59.46 cv
@
1 lc
101 59.3999 mo
101 59.3999 li
@
0 lc
129.175 80.5796 mo
129.175 79.7104 128.47 79.0049 127.601 79.0049 cv
126.73 79.0049 126.025 79.7104 126.025 80.5796 cv
126.025 81.4492 126.73 82.1548 127.601 82.1548 cv
128.47 82.1548 129.175 81.4492 129.175 80.5796 cv
@
1 lc
127.65 80.6499 mo
127.65 80.6499 li
@
0 lc
64.375 65.3398 mo
64.375 64.4702 63.6694 63.7646 62.8003 63.7646 cv
61.9307 63.7646 61.2251 64.4702 61.2251 65.3398 cv
61.2251 66.209 61.9307 66.915 62.8003 66.915 cv
63.6694 66.915 64.375 66.209 64.375 65.3398 cv
@
1 lc
62.75 65.3496 mo
62.75 65.3496 li
@
0 lc
111.896 81.2998 mo
111.896 80.4302 111.189 79.7246 110.32 79.7246 cv
109.451 79.7246 108.745 80.4302 108.745 81.2998 cv
108.745 82.1689 109.451 82.875 110.32 82.875 cv
111.189 82.875 111.896 82.1689 111.896 81.2998 cv
@
1 lc
110.25 81.2998 mo
110.25 81.2998 li
@
0 lc
77.0952 65.3398 mo
77.0952 64.4702 76.3896 63.7646 75.52 63.7646 cv
74.6509 63.7646 73.9453 64.4702 73.9453 65.3398 cv
73.9453 66.209 74.6509 66.915 75.52 66.915 cv
76.3896 66.915 77.0952 66.209 77.0952 65.3398 cv
@
1 lc
75.5 65.3496 mo
75.5 65.3496 li
@
0 lc
96.7754 115.859 mo
96.7754 114.99 96.0693 114.285 95.2002 114.285 cv
94.3311 114.285 93.625 114.99 93.625 115.859 cv
93.625 116.729 94.3311 117.435 95.2002 117.435 cv
96.0693 117.435 96.7754 116.729 96.7754 115.859 cv
@
1 lc
95.2002 115.85 mo
95.2002 115.85 li
@
0 lc
124.615 103.26 mo
124.615 102.391 123.909 101.685 123.04 101.685 cv
122.171 101.685 121.465 102.391 121.465 103.26 cv
121.465 104.129 122.171 104.835 123.04 104.835 cv
123.909 104.835 124.615 104.129 124.615 103.26 cv
@
1 lc
123 103.25 mo
123 103.25 li
@
0 lc
119.936 131.22 mo
119.936 130.351 119.229 129.645 118.36 129.645 cv
117.491 129.645 116.785 130.351 116.785 131.22 cv
116.785 132.089 117.491 132.795 118.36 132.795 cv
119.229 132.795 119.936 132.089 119.936 131.22 cv
@
1 lc
118.351 131.149 mo
118.351 131.149 li
@
0 lc
88.6152 102.66 mo
88.6152 101.79 87.9097 101.085 87.04 101.085 cv
86.1709 101.085 85.4653 101.79 85.4653 102.66 cv
85.4653 103.529 86.1709 104.234 87.04 104.234 cv
87.9097 104.234 88.6152 103.529 88.6152 102.66 cv
@
1 lc
87.0503 102.6 mo
87.0503 102.6 li
@
0 lc
88.6152 165.78 mo
88.6152 164.91 87.9097 164.205 87.04 164.205 cv
86.1709 164.205 85.4653 164.91 85.4653 165.78 cv
85.4653 166.649 86.1709 167.354 87.04 167.354 cv
87.9097 167.354 88.6152 166.649 88.6152 165.78 cv
@
1 lc
87.0503 165.7 mo
87.0503 165.7 li
@
0 lc
67.7354 82.7397 mo
67.7354 81.8701 67.0298 81.165 66.1602 81.165 cv
65.291 81.165 64.585 81.8701 64.585 82.7397 cv
64.585 83.6094 65.291 84.3149 66.1602 84.3149 cv
67.0298 84.3149 67.7354 83.6094 67.7354 82.7397 cv
@
1 lc
66.2002 82.6499 mo
66.2002 82.6499 li
@
0 lc
109.495 127.859 mo
109.495 126.99 108.79 126.285 107.92 126.285 cv
107.051 126.285 106.345 126.99 106.345 127.859 cv
106.345 128.729 107.051 129.435 107.92 129.435 cv
108.79 129.435 109.495 128.729 109.495 127.859 cv
@
1 lc
107.95 127.85 mo
107.95 127.85 li
@
0 lc
75.895 63.2998 mo
75.895 62.4302 75.1895 61.7246 74.3203 61.7246 cv
73.4507 61.7246 72.7451 62.4302 72.7451 63.2998 cv
72.7451 64.1689 73.4507 64.875 74.3203 64.875 cv
75.1895 64.875 75.895 64.1689 75.895 63.2998 cv
@
1 lc
74.3003 63.3496 mo
74.3003 63.3496 li
@
0 lc
81.6553 93.2998 mo
81.6553 92.4302 80.9497 91.7246 80.0801 91.7246 cv
79.2109 91.7246 78.5054 92.4302 78.5054 93.2998 cv
78.5054 94.1689 79.2109 94.875 80.0801 94.875 cv
80.9497 94.875 81.6553 94.1689 81.6553 93.2998 cv
@
1 lc
80.1001 93.25 mo
80.1001 93.25 li
@
0 lc
56.2153 44.0996 mo
56.2153 43.2305 55.5098 42.5249 54.6401 42.5249 cv
53.771 42.5249 53.0654 43.2305 53.0654 44.0996 cv
53.0654 44.9692 53.771 45.6748 54.6401 45.6748 cv
55.5098 45.6748 56.2153 44.9692 56.2153 44.0996 cv
@
1 lc
54.6001 44.0996 mo
54.6001 44.0996 li
@
0 lc
112.976 51.2998 mo
112.976 50.4302 112.27 49.7246 111.4 49.7246 cv
110.531 49.7246 109.825 50.4302 109.825 51.2998 cv
109.825 52.1689 110.531 52.875 111.4 52.875 cv
112.27 52.875 112.976 52.1689 112.976 51.2998 cv
@
1 lc
111.4 51.3999 mo
111.4 51.3999 li
@
0 lc
109.495 24.8999 mo
109.495 24.0303 108.79 23.3247 107.92 23.3247 cv
107.051 23.3247 106.345 24.0303 106.345 24.8999 cv
106.345 25.769 107.051 26.4746 107.92 26.4746 cv
108.79 26.4746 109.495 25.769 109.495 24.8999 cv
@
1 lc
107.95 24.8496 mo
107.95 24.8496 li
@
0 lc
121.135 39.54 mo
121.135 38.6704 120.43 37.9648 119.561 37.9648 cv
118.69 37.9648 117.985 38.6704 117.985 39.54 cv
117.985 40.4092 118.69 41.1147 119.561 41.1147 cv
120.43 41.1147 121.135 40.4092 121.135 39.54 cv
@
1 lc
119.55 39.4497 mo
119.55 39.4497 li
@
0 lc
117.655 79.3799 mo
117.655 78.5103 116.949 77.8047 116.08 77.8047 cv
115.211 77.8047 114.505 78.5103 114.505 79.3799 cv
114.505 80.249 115.211 80.9546 116.08 80.9546 cv
116.949 80.9546 117.655 80.249 117.655 79.3799 cv
@
1 lc
116.05 79.2998 mo
116.05 79.2998 li
@
0 lc
55.0151 60.0596 mo
55.0151 59.1904 54.3096 58.4849 53.4404 58.4849 cv
52.5708 58.4849 51.8652 59.1904 51.8652 60.0596 cv
51.8652 60.9292 52.5708 61.6348 53.4404 61.6348 cv
54.3096 61.6348 55.0151 60.9292 55.0151 60.0596 cv
@
1 lc
53.4502 60.0498 mo
53.4502 60.0498 li
@
0 lc
97.9756 48.1797 mo
97.9756 47.3105 97.2695 46.605 96.4004 46.605 cv
95.5313 46.605 94.8252 47.3105 94.8252 48.1797 cv
94.8252 49.0493 95.5313 49.7549 96.4004 49.7549 cv
97.2695 49.7549 97.9756 49.0493 97.9756 48.1797 cv
@
1 lc
96.3506 48.0996 mo
96.3506 48.0996 li
@
0 lc
138.535 67.3799 mo
138.535 66.5103 137.829 65.8047 136.96 65.8047 cv
136.091 65.8047 135.385 66.5103 135.385 67.3799 cv
135.385 68.249 136.091 68.9546 136.96 68.9546 cv
137.829 68.9546 138.535 68.249 138.535 67.3799 cv
@
1 lc
136.9 67.3496 mo
136.9 67.3496 li
@
0 lc
73.4951 50.8198 mo
73.4951 49.9502 72.7896 49.2446 71.9204 49.2446 cv
71.0508 49.2446 70.3452 49.9502 70.3452 50.8198 cv
70.3452 51.689 71.0508 52.3945 71.9204 52.3945 cv
72.7896 52.3945 73.4951 51.689 73.4951 50.8198 cv
@
1 lc
72 50.75 mo
72 50.75 li
@
0 lc
74.6953 77.3398 mo
74.6953 76.4702 73.9897 75.7646 73.1201 75.7646 cv
72.251 75.7646 71.5454 76.4702 71.5454 77.3398 cv
71.5454 78.209 72.251 78.915 73.1201 78.915 cv
73.9897 78.915 74.6953 78.209 74.6953 77.3398 cv
@
1 lc
73.1504 77.3496 mo
73.1504 77.3496 li
@
0 lc
59.5752 64.0195 mo
59.5752 63.1504 58.8696 62.4448 58 62.4448 cv
57.1309 62.4448 56.4253 63.1504 56.4253 64.0195 cv
56.4253 64.8892 57.1309 65.5947 58 65.5947 cv
58.8696 65.5947 59.5752 64.8892 59.5752 64.0195 cv
@
1 lc
58.1001 64.0498 mo
58.1001 64.0498 li
@
0 lc
86.335 70.7397 mo
86.335 69.8701 85.6294 69.165 84.7603 69.165 cv
83.8906 69.165 83.1851 69.8701 83.1851 70.7397 cv
83.1851 71.6094 83.8906 72.3149 84.7603 72.3149 cv
85.6294 72.3149 86.335 71.6094 86.335 70.7397 cv
@
1 lc
84.75 70.6997 mo
84.75 70.6997 li
@
0 lc
91.0151 68.6997 mo
91.0151 67.8306 90.3096 67.125 89.4404 67.125 cv
88.5708 67.125 87.8652 67.8306 87.8652 68.6997 cv
87.8652 69.5693 88.5708 70.2749 89.4404 70.2749 cv
90.3096 70.2749 91.0151 69.5693 91.0151 68.6997 cv
@
1 lc
89.4004 68.6997 mo
89.4004 68.6997 li
@
0 lc
87.415 56.0996 mo
87.415 55.2305 86.7095 54.5249 85.8403 54.5249 cv
84.9707 54.5249 84.2651 55.2305 84.2651 56.0996 cv
84.2651 56.9692 84.9707 57.6748 85.8403 57.6748 cv
86.7095 57.6748 87.415 56.9692 87.415 56.0996 cv
@
1 lc
85.9004 56.0498 mo
85.9004 56.0498 li
@
0 lc
134.936 83.2197 mo
134.936 82.3506 134.229 81.6445 133.36 81.6445 cv
132.491 81.6445 131.785 82.3506 131.785 83.2197 cv
131.785 84.0894 132.491 84.7949 133.36 84.7949 cv
134.229 84.7949 134.936 84.0894 134.936 83.2197 cv
@
1 lc
133.45 83.2998 mo
133.45 83.2998 li
@
0 lc
27.1753 148.5 mo
27.1753 147.63 26.4697 146.925 25.6001 146.925 cv
24.731 146.925 24.0254 147.63 24.0254 148.5 cv
24.0254 149.369 24.731 150.075 25.6001 150.075 cv
26.4697 150.075 27.1753 149.369 27.1753 148.5 cv
@
1 lc
25.6504 148.45 mo
25.6504 148.45 li
@
0 lc
6.29541 48.6597 mo
6.29541 47.7905 5.58936 47.085 4.72021 47.085 cv
3.85059 47.085 3.14502 47.7905 3.14502 48.6597 cv
3.14502 49.5293 3.85059 50.2349 4.72021 50.2349 cv
5.58936 50.2349 6.29541 49.5293 6.29541 48.6597 cv
@
1 lc
4.75 48.75 mo
4.75 48.75 li
@
0 lc
72.415 69.2998 mo
72.415 68.4302 71.7095 67.7246 70.8403 67.7246 cv
69.9707 67.7246 69.2651 68.4302 69.2651 69.2998 cv
69.2651 70.1689 69.9707 70.875 70.8403 70.875 cv
71.7095 70.875 72.415 70.1689 72.415 69.2998 cv
@
1 lc
70.8501 69.3496 mo
70.8501 69.3496 li
@
0 lc
82.855 74.5796 mo
82.855 73.7104 82.1494 73.0049 81.2803 73.0049 cv
80.4106 73.0049 79.7051 73.7104 79.7051 74.5796 cv
79.7051 75.4492 80.4106 76.1548 81.2803 76.1548 cv
82.1494 76.1548 82.855 75.4492 82.855 74.5796 cv
@
1 lc
81.3003 74.6499 mo
81.3003 74.6499 li
@
0 lc
77.0952 48.1797 mo
77.0952 47.3105 76.3896 46.605 75.52 46.605 cv
74.6509 46.605 73.9453 47.3105 73.9453 48.1797 cv
73.9453 49.0493 74.6509 49.7549 75.52 49.7549 cv
76.3896 49.7549 77.0952 49.0493 77.0952 48.1797 cv
@
1 lc
75.5 48.0996 mo
75.5 48.0996 li
@
0 lc
79.375 72.6597 mo
79.375 71.7905 78.6694 71.085 77.8003 71.085 cv
76.9307 71.085 76.2251 71.7905 76.2251 72.6597 cv
76.2251 73.5293 76.9307 74.2349 77.8003 74.2349 cv
78.6694 74.2349 79.375 73.5293 79.375 72.6597 cv
@
1 lc
77.8003 72.6997 mo
77.8003 72.6997 li
@
0 lc
107.095 112.5 mo
107.095 111.63 106.39 110.925 105.521 110.925 cv
104.65 110.925 103.945 111.63 103.945 112.5 cv
103.945 113.369 104.65 114.075 105.521 114.075 cv
106.39 114.075 107.095 113.369 107.095 112.5 cv
@
1 lc
105.601 112.55 mo
105.601 112.55 li
@
0 lc
119.936 119.22 mo
119.936 118.351 119.229 117.645 118.36 117.645 cv
117.491 117.645 116.785 118.351 116.785 119.22 cv
116.785 120.089 117.491 120.795 118.36 120.795 cv
119.229 120.795 119.936 120.089 119.936 119.22 cv
@
1 lc
118.351 119.2 mo
118.351 119.2 li
@
0 lc
109.495 105.899 mo
109.495 105.03 108.79 104.325 107.92 104.325 cv
107.051 104.325 106.345 105.03 106.345 105.899 cv
106.345 106.77 107.051 107.475 107.92 107.475 cv
108.79 107.475 109.495 106.77 109.495 105.899 cv
@
1 lc
107.95 105.899 mo
107.95 105.899 li
@
0 lc
17.9351 71.9399 mo
17.9351 71.0703 17.2295 70.3647 16.3604 70.3647 cv
15.4907 70.3647 14.7852 71.0703 14.7852 71.9399 cv
14.7852 72.8091 15.4907 73.5146 16.3604 73.5146 cv
17.2295 73.5146 17.9351 72.8091 17.9351 71.9399 cv
@
1 lc
16.3501 72 mo
16.3501 72 li
@
0 lc
36.5352 157.74 mo
36.5352 156.87 35.8296 156.165 34.96 156.165 cv
34.0908 156.165 33.3853 156.87 33.3853 157.74 cv
33.3853 158.609 34.0908 159.314 34.96 159.314 cv
35.8296 159.314 36.5352 158.609 36.5352 157.74 cv
@
1 lc
34.9004 157.75 mo
34.9004 157.75 li
@
0 lc
146.695 69.2998 mo
146.695 68.4302 145.989 67.7246 145.12 67.7246 cv
144.251 67.7246 143.545 68.4302 143.545 69.2998 cv
143.545 70.1689 144.251 70.875 145.12 70.875 cv
145.989 70.875 146.695 70.1689 146.695 69.2998 cv
@
1 lc
145.05 69.3496 mo
145.05 69.3496 li
@
0 lc
111.896 58.0195 mo
111.896 57.1504 111.189 56.4448 110.32 56.4448 cv
109.451 56.4448 108.745 57.1504 108.745 58.0195 cv
108.745 58.8892 109.451 59.5947 110.32 59.5947 cv
111.189 59.5947 111.896 58.8892 111.896 58.0195 cv
@
1 lc
110.25 58.0498 mo
110.25 58.0498 li
@
0 lc
111.896 19.5 mo
111.896 18.6304 111.189 17.9248 110.32 17.9248 cv
109.451 17.9248 108.745 18.6304 108.745 19.5 cv
108.745 20.3691 109.451 21.0747 110.32 21.0747 cv
111.189 21.0747 111.896 20.3691 111.896 19.5 cv
@
1 lc
110.25 19.5 mo
110.25 19.5 li
@
0 lc
134.936 46.7397 mo
134.936 45.8701 134.229 45.165 133.36 45.165 cv
132.491 45.165 131.785 45.8701 131.785 46.7397 cv
131.785 47.6094 132.491 48.3149 133.36 48.3149 cv
134.229 48.3149 134.936 47.6094 134.936 46.7397 cv
@
1 lc
133.45 46.75 mo
133.45 46.75 li
@
0 lc
114.175 100.5 mo
114.175 99.6299 113.47 98.9248 112.601 98.9248 cv
111.73 98.9248 111.025 99.6299 111.025 100.5 cv
111.025 101.369 111.73 102.075 112.601 102.075 cv
113.47 102.075 114.175 101.369 114.175 100.5 cv
@
1 lc
112.601 100.6 mo
112.601 100.6 li
@
0 lc
93.1748 98.5801 mo
93.1748 97.71 92.4697 97.0049 91.6001 97.0049 cv
90.731 97.0049 90.0254 97.71 90.0254 98.5801 cv
90.0254 99.4492 90.731 100.155 91.6001 100.155 cv
92.4697 100.155 93.1748 99.4492 93.1748 98.5801 cv
@
1 lc
91.7002 98.5996 mo
91.7002 98.5996 li
@
0 lc
182.455 103.26 mo
182.455 102.391 181.75 101.685 180.88 101.685 cv
180.011 101.685 179.306 102.391 179.306 103.26 cv
179.306 104.129 180.011 104.835 180.88 104.835 cv
181.75 104.835 182.455 104.129 182.455 103.26 cv
@
1 lc
180.95 103.25 mo
180.95 103.25 li
@
0 lc
106.016 22.8599 mo
106.016 21.9902 105.31 21.2847 104.44 21.2847 cv
103.571 21.2847 102.865 21.9902 102.865 22.8599 cv
102.865 23.729 103.571 24.4346 104.44 24.4346 cv
105.31 24.4346 106.016 23.729 106.016 22.8599 cv
@
1 lc
104.45 22.8496 mo
104.45 22.8496 li
@
0 lc
111.896 90.6597 mo
111.896 89.7905 111.189 89.085 110.32 89.085 cv
109.451 89.085 108.745 89.7905 108.745 90.6597 cv
108.745 91.5293 109.451 92.2349 110.32 92.2349 cv
111.189 92.2349 111.896 91.5293 111.896 90.6597 cv
@
1 lc
110.25 90.5996 mo
110.25 90.5996 li
@
0 lc
68.9351 64.7397 mo
68.9351 63.8701 68.2295 63.165 67.3604 63.165 cv
66.4907 63.165 65.7852 63.8701 65.7852 64.7397 cv
65.7852 65.6094 66.4907 66.3149 67.3604 66.3149 cv
68.2295 66.3149 68.9351 65.6094 68.9351 64.7397 cv
@
1 lc
67.3501 64.6997 mo
67.3501 64.6997 li
@
0 lc
118.855 89.9399 mo
118.855 89.0703 118.149 88.3647 117.28 88.3647 cv
116.411 88.3647 115.705 89.0703 115.705 89.9399 cv
115.705 90.8091 116.411 91.5146 117.28 91.5146 cv
118.149 91.5146 118.855 90.8091 118.855 89.9399 cv
@
1 lc
117.2 89.9497 mo
117.2 89.9497 li
@
0 lc
123.415 70.7397 mo
123.415 69.8701 122.71 69.165 121.84 69.165 cv
120.971 69.165 120.266 69.8701 120.266 70.7397 cv
120.266 71.6094 120.971 72.3149 121.84 72.3149 cv
122.71 72.3149 123.415 71.6094 123.415 70.7397 cv
@
1 lc
121.851 70.6997 mo
121.851 70.6997 li
@
0 lc
132.775 82.0195 mo
132.775 81.1504 132.069 80.4448 131.2 80.4448 cv
130.331 80.4448 129.625 81.1504 129.625 82.0195 cv
129.625 82.8892 130.331 83.5947 131.2 83.5947 cv
132.069 83.5947 132.775 82.8892 132.775 82.0195 cv
@
1 lc
131.101 82 mo
131.101 82 li
@
0 lc
173.335 66.0596 mo
173.335 65.1904 172.63 64.4849 171.76 64.4849 cv
170.891 64.4849 170.186 65.1904 170.186 66.0596 cv
170.186 66.9292 170.891 67.6348 171.76 67.6348 cv
172.63 67.6348 173.335 66.9292 173.335 66.0596 cv
@
1 lc
171.7 66.0498 mo
171.7 66.0498 li
@
0 lc
140.815 61.3799 mo
140.815 60.5103 140.109 59.8047 139.24 59.8047 cv
138.371 59.8047 137.665 60.5103 137.665 61.3799 cv
137.665 62.249 138.371 62.9546 139.24 62.9546 cv
140.109 62.9546 140.815 62.249 140.815 61.3799 cv
@
1 lc
139.25 61.3999 mo
139.25 61.3999 li
@
0 lc
73.4951 89.9399 mo
73.4951 89.0703 72.7896 88.3647 71.9204 88.3647 cv
71.0508 88.3647 70.3452 89.0703 70.3452 89.9399 cv
70.3452 90.8091 71.0508 91.5146 71.9204 91.5146 cv
72.7896 91.5146 73.4951 90.8091 73.4951 89.9399 cv
@
1 lc
72 89.9497 mo
72 89.9497 li
@
0 lc
138.535 42.1797 mo
138.535 41.3105 137.829 40.605 136.96 40.605 cv
136.091 40.605 135.385 41.3105 135.385 42.1797 cv
135.385 43.0493 136.091 43.7549 136.96 43.7549 cv
137.829 43.7549 138.535 43.0493 138.535 42.1797 cv
@
1 lc
136.9 42.0996 mo
136.9 42.0996 li
@
0 lc
162.775 47.46 mo
162.775 46.5903 162.069 45.8848 161.2 45.8848 cv
160.331 45.8848 159.625 46.5903 159.625 47.46 cv
159.625 48.3291 160.331 49.0347 161.2 49.0347 cv
162.069 49.0347 162.775 48.3291 162.775 47.46 cv
@
1 lc
161.25 47.4497 mo
161.25 47.4497 li
@
0 lc
160.615 29.46 mo
160.615 28.5903 159.909 27.8848 159.04 27.8848 cv
158.171 27.8848 157.465 28.5903 157.465 29.46 cv
157.465 30.3291 158.171 31.0347 159.04 31.0347 cv
159.909 31.0347 160.615 30.3291 160.615 29.46 cv
@
1 lc
158.95 29.5 mo
158.95 29.5 li
@
0 lc
161.575 41.46 mo
161.575 40.5903 160.869 39.8848 160 39.8848 cv
159.131 39.8848 158.425 40.5903 158.425 41.46 cv
158.425 42.3291 159.131 43.0347 160 43.0347 cv
160.869 43.0347 161.575 42.3291 161.575 41.46 cv
@
1 lc
160.101 41.4497 mo
160.101 41.4497 li
@
0 lc
139.735 49.3799 mo
139.735 48.5103 139.029 47.8047 138.16 47.8047 cv
137.291 47.8047 136.585 48.5103 136.585 49.3799 cv
136.585 50.249 137.291 50.9546 138.16 50.9546 cv
139.029 50.9546 139.735 50.249 139.735 49.3799 cv
@
1 lc
138.101 49.3999 mo
138.101 49.3999 li
@
0 lc
147.775 41.46 mo
147.775 40.5903 147.069 39.8848 146.2 39.8848 cv
145.331 39.8848 144.625 40.5903 144.625 41.46 cv
144.625 42.3291 145.331 43.0347 146.2 43.0347 cv
147.069 43.0347 147.775 42.3291 147.775 41.46 cv
@
1 lc
146.2 41.4497 mo
146.2 41.4497 li
@
0 lc
141.896 58.0195 mo
141.896 57.1504 141.189 56.4448 140.32 56.4448 cv
139.451 56.4448 138.745 57.1504 138.745 58.0195 cv
138.745 58.8892 139.451 59.5947 140.32 59.5947 cv
141.189 59.5947 141.896 58.8892 141.896 58.0195 cv
@
1 lc
140.4 58.0498 mo
140.4 58.0498 li
@
0 lc
161.575 44.8198 mo
161.575 43.9502 160.869 43.2446 160 43.2446 cv
159.131 43.2446 158.425 43.9502 158.425 44.8198 cv
158.425 45.689 159.131 46.3945 160 46.3945 cv
160.869 46.3945 161.575 45.689 161.575 44.8198 cv
@
1 lc
160.101 44.75 mo
160.101 44.75 li
@
0 lc
165.175 20.8198 mo
165.175 19.9502 164.47 19.2446 163.601 19.2446 cv
162.73 19.2446 162.025 19.9502 162.025 20.8198 cv
162.025 21.689 162.73 22.3945 163.601 22.3945 cv
164.47 22.3945 165.175 21.689 165.175 20.8198 cv
@
1 lc
163.601 20.8496 mo
163.601 20.8496 li
@
0 lc
155.815 8.09961 mo
155.815 7.23047 155.109 6.5249 154.24 6.5249 cv
153.371 6.5249 152.665 7.23047 152.665 8.09961 cv
152.665 8.96924 153.371 9.6748 154.24 9.6748 cv
155.109 9.6748 155.815 8.96924 155.815 8.09961 cv
@
1 lc
154.3 8.19971 mo
154.3 8.19971 li
@
0 lc
172.135 24.8999 mo
172.135 24.0303 171.43 23.3247 170.561 23.3247 cv
169.69 23.3247 168.985 24.0303 168.985 24.8999 cv
168.985 25.769 169.69 26.4746 170.561 26.4746 cv
171.43 26.4746 172.135 25.769 172.135 24.8999 cv
@
1 lc
170.55 24.8496 mo
170.55 24.8496 li
@
0.5 lw
0 lc
0.25 0.25 mo
0.25 186.3 li
186.3 186.3 li
186.3 0.25 li
0.25 0.25 li
0.25 0.25 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (glyphplot.eps)%%CreationDate: 10/4/10 1:57 PM%AI9_DataStream%Gb!R&H!_LPdO>$B!Ik?\3:*MDgJ%_PYg&Vi5Y*"C+U/o/(n91?badjWqq80K;JBoh]=j^ro=S^b6_M'&,aE+CWCeWS[Q?/0gP>LY%G3@auH-c0S^>nAS.*;d[9!2"CHT5a5CbWgNFN?+4V&0D6KgSp'2_RtOG5o),\S:b`4.TEMgKVj>[i.2d\\cpHGZB6,2=$h$;kotG%M@P'sH<8iS&$=U\02L3EmTMen9(]B<`P+P%2=?oKH1j<^hJ_;Y?>c7Q"D@=Ls,"DVd21mppA8R1h^:Q5NOkoM47=d3e\7-Cr."=)%-dB8Y?GG7Y5BPW:(BF3-k0nCPd;Q=AqG+",OqEH@Vu3)QP&W0(Q]0bBLJa-dQNMI[WR1S/U%tn"r4Btn6bD7?h8>V?+)ZTG>M];C%_uGhWPmC+-OU"ZX?<YVA=o4mg#/M?LnCbG!D6q2'Z#As1"s'Y[ro]02/c^96FRPZH14,SC$Q\82^>_-AMNI\5nTV;I<2'hLG]'rS%F[!.gY';7Z%&Q__jSBV^X.T,Y%"7@#b9:fF<?%^je#s@#R1TCc9ZMqV_qd\,NI1bJ[+g#=PuCZUneLr9H=*a%s,Z[Lcp9G<I_XRu%*@<nTo1n:bSDq.ZB].?&@AA#+JIous.d[2"0t588\#YL;K0G;8-bn:2GCKGX533f?r9*tLB;n:K7M5U0Z\)&%TDn0RoW@T2\%WAk%lZN%]HrVXnW)AKO<@UkE;Md`*9(b7)N$8TB72.'ms3\$FLdFNBKqc?0T+l$QLI1CpcnBTdkaS+`$<+.W\+P'H7),nVl2,cI^4@=m%J"]*R,.saZid9S/($JF#7E7fG;CFRQ*%AOq,GICO$lorY8]QgTJ8a\>kYM$k*>/6A0`dgF1E@)+8]OR*V,-?CBU_7]BV.W=ERCBm%VI$1HE.2KHJ]9rDTG%20?c'mXpX"-J)mi@eNcTjbn/m@Yj.egf-C@(928"PZU]44?3^0'BTF-'>a%(X-^Zalhrom5B3IO5D;CFRi%q@dHQ\-2"&mF)i5#ADGGIrN]+ImA,`"a!,C^rW5D[-,dhBGWA_HiXBL7q(WFO>H.bkgqM'GY?(IIo7]QD`U(T$%,Bq;A_I+>QHi(%AHsUg/HBu>%jS8#\'^cLVZ8BC>i;+Rh4]$XF_DTT7XL.OJn'GI;^cH&Yf$5)*r^e`K4G$B_jggG!(3=U#Q-*K*PTW1:g0]++e9nI%"*Z!I9E(\n9--DkQa;WMQLd@gKTr9>957jAZ+npDi.Wgif4"^,ImGTrr'/M[2tC>N0*pKSq(MZ4.tf'.OoN:JjYH`cs+UJ&(&5C=%_6tll^TB)4,QEJt[^Y46q(MZ4.o`S=7/dSoeS=T_r"o?R`.+H+l.j[Y0X't)rWW=bnThrG&;FN%>-<SlrL*'1d&U5>)rV?8H1_./%J+,C247S5TeHs=35&J8qC_4./g(sr0AFBmH2f6O9eE^>(XZH9[9R\5$e%a(+non3>Z[X5!Dh\/u^JU":OR+"dU0Jp&.e(\``,S6@%/a]%RYYc7p'42!#d4`<LhaJr<8&$U?i>Fh5ES%8J(B8!9NBji]2"Mp,c*0\N,$/_VfW#b(=Qsnt9g+I)9+&j3>3BaIn."VBDjRk4%_r'B8qg)J*JG0GM7j1:HG80=NCGkt,F(J,fJfWu2TN"@KZQ:nRY3[Nij^[+ESsJmSp_nMA3IKC;<LkV"*PSD<f^glt73"';')FKI%2>VO1NYHH,GRrGJk$d0R&Ms'M]FC.r7\U^Rl;JNYN6!N-2t4N=8Vbb/Akum51ZgAP,=^((JFb#_c_O*GST)afb(I#P3Jq8V]h/8]%"Y.=&JiDsKDGF^@#5ZG]CuO^\YE5Y>flO#p!m.)048k)rN)\TZ?cK?N*&ke$MG[Am[%`<s@TR1T>(a9ZCanhW+-hBU>m]_Act9S=%U2@%tpe4*.-ARU\lFXcHJa-2pbK.*<!cg**L2aLITS$A$i[[$qm'eQ$-N'HL'Wu#VjGY7)'L!"<It7uX$:l<W\)]$'(+2M=_`&uF%Js1kriDb_WrnqkZ94";)[7)pTQnKqKTcCPq>ECkpdF\udMi-RJ6?BOl/dnto@\-PE"eAp(DNXbuBhg[@im?kOcZ3<3,%r=N7j3@q%OhbjDJ'mDW\j_&iQY73@^/m=m/gQ[h)@3G!6K62dM`U'9DIlHhmEfq%;bhOoY?]WMPba_a5P/^ua$#%nr,-I9b"uJ\(hu]'c;<3t%f+He:OX!=G%@C"bZTj-bB._^0GC1b--`91agkrU!i3UWfOQd.7EhJMfIj3qa.OD6^!!Z$X8<+1OCR0d9`%0<.")TGe.ePboC:dom%`ZiGNjpWiG674euAIdh#'lF6@f77TAUXPj`8EpFS<e7Csg2@t=OO]0[1IOuJg.9@q:$QdLc-.sPYoSNfFim!:`s>:(^Ne'L70eZ0%P5N5p`GI'^j4^1Zqp"K3U)fA#.<a&uFIkbh+O-;_<mdecnPbk8o[+pR8tr,lTF^]-#bFY=G'8f8(6"N=#^pRTjg*_CcdY&]UM;"'%_Pu%[1*Ct"MTQh51Y)e$g.L?<E9a*GcKE$1CB3kU!?8*F<.>&?TPi^E6Tp&_I&20<MRGnpZjpG]C&TCO"T3aeZPc69%/o\<8/q?8%&qH6K['S\:d1ac^H]/GVguS3eoSc$VEFd.S6M"2WhZN&2lb6PVgO,k?On)MuQXc:Vi+m&%;$(\@i!kWN6:j@+R\LkmhQto*K\to@%(/5e_jYc9udJe.oMS,\-/rgrA%oU9T?q8`eW0d:J`Y1*X]Kr2@=p%k],(5U)5UFd2@AJnl@(Cd41b*NF-(qTABk3pFAP]7j<B1eB%%N%.GTTjiShab:P^W(^nR:6qc;.<2jK)7;g%p5gAEbur$5L(VP*Y]BgX]bI_Yl7Ph"Zd^o_:5k&g(W0FZ'kbu7-Kb)c2qf]np(an%aUR1qTaujg>gY;n7nJb0l>-BA<BsO%qU:_<"m&b(*`+([RaAgJlq;&S[M1#\qQEe,bFT+-Wd9B!DA'!+09Fa,k_.Y$A-VkZYcQUr%OZGO)?lUXZHB]&LV*+`BHQd\_BL>gA<MamVIAiVlP(--9U[K>g!.1onPHY_#<<_gslo4YbA+XbbO:N&?>'LES[t"WZ1jPm:D5=S<%bld]E"RfF1.Z1DgCJ*?D=:L+S$+#4][V@;Jfda?5oV16:L6WYXoU;"^0$@K`YtaZT$6;F3-9Z277-'4?g/n5XXr4$a/:ibR"iHsK%SQJ>*Lje5<?5'*onJ9M>77*8"MH%>UY&+1Adq_WMiVH-YX6\Vp=K;bc+*7nU=/C]#f;e=?#5akQC1#*cXJ!P2%2n,hEfh9'Rus.I%J^I+kpc=;9KY]DW3Ui06ppHoNVRsun>e*<jB)1-eF=M%P3qqs-SuS4G13dA:!=S16(a\qR,/hO#=$o*EFYOO\[c^:eU%b4]`?U%$%>9S-s/n8p$?<uZ-).-;$K2oKU/mH4r(A(K]S^`=#qa#OQj?Q*XKkBAZ8mR;78ZtRZR`^>)r=Y_g2Bi_fn[?gPl4un=/uYU5`#u!U%6g]E;nO.K?;e(VC(TO(,K7ot#T\(Z_"'ggn`)4NuGsi0b.]6<AmB%?=Y0_l5.WImW$KF;4HkVAtWId&Z4`"h:Fe;FjER0FkMd6Q>%qC:+<+sMa,EQp:+YD5X6R5?<ThaVFP"!^A>agl/6:%3hu0CbWlPs:14eR?`_YDHA3r!=-iH]'XcO&EgF5G0$)h8c:g9)i0udg%s,%Y9Mm?.C%;c6ORf."d6=0cff)K2QJ5,Y,fg_NjN>c7tT-W#UhA!\`Bi4<UpOW"R@?Xs&Di_q->:5TSuj>BD`]+E[<F86&i![]rm8j%7T;_93'$B&[j!%sYY.qcIfQUcCb(HDbp[uh&N`qa?:D"BENH5Vg&`?J),DhJHJtcX=HC$s-eMtbA&kAHk?#g:2:\"/C&Sh<]Sq)h%mR)#e$$CH_7k/n/DM=,ib1:R>d'iF-ZtQGqZ5@FQc2t02U^b3:dNq9NAAhZ6q8e/cE@.O^#MpYLenQ0nZR%ShkikN63r$?feT"+t%^ker7jc[ZO56C]f@\6J#>bVrjCWC^#=<ldMM0L)EchP$K\e^'ZklhZukAeO=8iZ+%\l_8ghUT-<f6f\E3c:j_K[pSrk<8tE5-fIi%6pB]B<un&F>(>jYj:lfDffr?A@\)t(8Ij``:>lW2LO:p"rl_]Y?.aO!UF:F,V2ot!/t[(!j,q@9I"knF%g*-tZE-lhoc0e=@h-?`%B;;W/d3_UcXpt#O"%<_t>S4>B`t`-</T=6Dm_DnB@)!u-b5%3DZ7bldq#2,.E)$2KSEa+DNH]g8,L_p^.jDd_bUZO+h5^"4-IRLJ%@MJ)8T3h:UloV"qlXL?me"NZ1SN]8M9SUk1Y$l'Cn#8JYH:<-j<nK,Z210frllhRZ#VD9$ZflZOEa2PB/&0FfVrI*;1p^ME*HNj4%W^[G^QE/YZe(1O"R/_lO7p;hk^(tL`Wh_]u[pk3Er^s5B^&uZ_AkVEX*g?Gffm\`=^iRm^%9DGXZAo`Mi]`LiRHYsg`(EI39&.2=%(-NIDEolRYX@Ws.o9!Sl>:?1k5@*&7;chdI0@8\YY<e`_k-cZr:p['?4bVZ2)g;EAkI.ZCkSQk&TNVXN"h=$)o!.7.Kjs=.>g[>E%jbZ5qBJCm%AW=U'rfPTP]$BCW*bp+_PYpAaE`H6"C0fHna\gEZ_=,O\*CTM0N0WJ:kan7ZVlJ_"0Y"^JF0Sdr\@A^;e^>d!g=/C-%KEeIq]bER\1`9iha?5KGbfm%:q_>lLh#?l7'AjTh&t(:aJM!YHW#98G)Uq,@8sJcGb^ra#TQoe^MHnVfJV]&t2\ho+iO]HB8B6SX%?'`kt_,'t<7Qp%lp'&l;P&6P/N:3%"-Z<u?l`+8mUDB$)90?+TY.f$1!jU0YTd84Rl>0"@;RF/JC8b$9M<uba71LdR?XCkDJ[^cK%"t2:(P2HUg+'@k5@WkJFUtG,V7<=AL[l?:212'=h7(cRg'lXY%NIFO&c?i!-jLW09MZ&b2(B-WpnShUV".B1Aqcla2Sm0hCj,&_Q%WjF'mVBe!+PdiH_:A0[Tbt#sP5S_E&]%dM,&'"qoqMO3TLG&:YiM^65(;/%i5X74#Kp%^W/Xc+TCBbg$pmMLnY2L@eC[l$].OsJX%FaP[@X.%5RI46Jc'-Xp,`?8hN(&(5(rL[Yg%eYP"No`>D)8G_ln[=3i2p9hBY#&okdde(HD5Ztnl[sLcQu_!LZoWF#:AiDoS2U6t%cVS)grk<^9+j^a:>548-ce_X(Na"0teS_kfo"<lZe]H'Sh0,rjq;XsE5/5og[VpL#H2\6Obek7Xl-[CU9mB]T4?P9miqq6%AP@=D%&(eRc2gt6OIis5&I<k$8#9u:CTs[#=r-%h2GG"obl*NkYoN.cVr%WOjiVu!n3+a8>5I?!inWl.bg!Wp1s'O@bJPL*6]_l]f^=-c'%*q$V!kPL#R>6C2cU*Y%C6t>mjUYD$jZTn!;$uGb6drhS]d!Lr2W'!(XFScS-Xlem*]mfQe0Xb`f=/YqkOGuE*[Jt!M3mUDG`KNdg%2ZKW$I83.(Vs2f#qj'bYP@mJ,cI4R$"O3Rq2kHM?]D_UfK07Do`iV_BdET#\![Ui2KR\hBdo@#C'1g"kU)6n\\$D1"'-h`hlRVj^%\!k"cl=%<rY;Z8&^QtA(,a<)W[//YrnuM3u:X/fXDY<Y\l'[X)K/iZ;3JWr%5*FeuE`cq!R)<B+-\)+Sq;[#'ns_c<=$F^?b?o^B%o!d]Eq+6TI8=n`$<agN^F88ha/GYWTOGl_RDr;In)m(HLEn6*-lWd=&/+$4f(TVC9^<%C6Mae900GHVnkZ"k,`kVRDR4?g>=!._^%c2Yg+'1BjX"Q[5!=EY'qp1b?B-F6;DHFTZuBQX9/^X(dX^$j`7XY4&EkPtM1C6R7"7(7=]Y$_$"@RHJ2kZ51Ipj[p*!r*M/S,7ul%D7A1&(b`Y8:FIIEdNAG&WDq?Uo<6l]X1oS/hJ4;WVZ])dqASR)NReKSdc\:H\2KI$!966,Bn-(7V,"YODIt"bX)mmb]Zib\KO"N&%NpHOm<Va6E`^Z>J\>J`J+9mm&Kq?Z`O%BX:PnKM)s3S8n27#"9^fgWn,j9#nAJTCqqB+j53kUrK?GH+(T@IKP*$;?V)UrVt2NNYr%<d+D]jb!-d^Si[_Iur+8YCHKe>N>af)"^uB2uhWTZ!/Zn;*(a*bsj4/XT*UVmGDQE@1N()<P_g.Fl.SV]?d3-"QY&U>kA`+!CQ^-%-8GEo%n%E!1gi.iB,StOs67oB7C(b6U^Z:pdjO"f;=dj2N[Dn(Wq\OQ"dYd[][P/!pSQ&mkPC7/IU\uLdp735p)CKZ',n>%d?sm"%\`KN?/DR'%Z]?cs2/aRCT(;I5/fLQICHpU90+lsi^?aoMJ:m5%jS9Bjc#3Njg[$fpH+DjR:b:7CfO4]0[*\"qo@J'hJ49%^/;+K_%K<>)#s/t%ec_!%?rFYf_Ioo*1kuoS5a#7)PG$b%@3sb\6]$ZUhGj.F+J9:F[0_@^r-1ms%[t!4JFDpb0oN8K59DX^FpCsi\\'aV,%2or)Wr(XclE1?;Zr(f*nb.DO)\KUSHYEB=[.ErA+*<p?s6NR?O.j/,7+rD8@s(^[\2?2LYf5;],NU)AN6iV'ZCE-oUQ]<!O]9gNC%1On2*`i1a/\R34AHu@`r)P$<HkWKi4l90@f##qAj^f=taBC>KhTu[PYT9)onKsY[`kI4do*PjIM#*8?$NFsF<]n`MP<^UniRn,jE%hGFR<jF7JMlE[9frbC<^$+6rUX[`3-,$4%WK]u\Om:O(.#bMR3fC*l(d=/S3^c/BNB@:A&i;5I$oK+h:!FIr6$ZuA_G+WKu<;?B%%mVY)AgZE@#Eq?@#4+6M(X4"K5Om)?HD:YIWO)5W-BJ;ktH$M0).I'MG%>3K1"5i&>5>_YlQ@].1^_j,E@CEVpg!UQR5jrk8[h"_j%l-9QJ3^`]O*fZYm*M92<8(2b1mLc"2](&5DA`@F4X,A`M+diUUfFOLS:0"`#Ba%n4M$;giWML+?^)B,b!R.HYf,06]<Vg%&7$q1Q%L.Gf#2ImQ*f5DCB!@-X`-J&7hl0.AE**sQQ/DiSI5*=I!G32O_he#=fd4OmB.i);<i:D$!pcqVF/[gHKRgl[\iG+u+D41gbQ0Y\q%kbZ1K.kO_0*;#!&ri>YV=0L:!"En^6`G#+[F%p?%HamiM1hXc7aJS["]@$c^422h?bm\QNhXs89WUZJg$8C;G>8;e)Bm#=mSMj?[%I;2PV\k4-"R_GXHn>=!EDi:/=($u$TU4C"7*kLf^s$sQH-5<cl.PAmidT/pM>E.h*I7C`]P5Fs#p[hQ5^,>FmZcNaT!!Gj<AsRAV%Pk?-p@fD9lB]XOI8jo*t@O2eRf_&l$+:mjHSH3,(AT)bm.._>Z)r4g-E>]lB=n@qMPG0-S!"0O(!EN&1)5'te;+^t@C31PEHET+)%MdC%H<I12:g/)[l3Vh4n(N3O(h-Z^rRc$C(MU\CFg7Xcr`P!JCIaltb'2Z[I`ZY<[>jRp%L"UYhjBWNY7,YQjOtNo^W_#0hE0E#"%DnA/<H<hK/)&W4Z]j>a&2bukaIW(hW:=FV(Yg^?W?Q]@q2<8"<S/"hXq(L!.if]E]oPOT^r99OYa57['IsD.O'\]3h5<O9keBrMS%VcYlm!^V/ZGF?<eYCa*cRqSK1*EA+4U"&St4RpUNEkBS's.-?:+9&"Q93%SEqmIE-8@&8a[S4"+9hhJ&8P"D7$m:aCVe0&sS(41S%q+nFuh7LMSN55@f/3E5q]phKlM7<c,V-$1eH>_R:S\j.jk,-s-,:S3.5I<hS.+.PVBM-VO(oHX))6b_CCKm,kT5%;6L$?9Uj/@@;%*c3e7C:7"tmI^QeSYUkERs2e!s-5K[WnE6tfM739\Q&SfYfl`sVqV0bESKh05m&X%DBR([IuS,U/Zb)1abf&EC(`SR2_!Sk"6cQi%SH7N[$kik'5#2u&YT5CaRnO0?5r[M7$sLb1Iges"_QQDtNCHFH&2I%J\FECW^0:ONZ_\;QLu6-;,h<_1J;(CZ88RZ[Hr6V!mnt!S%K(U0,T#oETSRPnS=I4hF\(@DbGLI`"'#)b3g.6M9\Yf1u$&$fA@&5)5`5>t0;.P-QSkqti!f;XG4hf+Adc]m/9'ED+Sc/LZ=D^su%U0*a?_Ooqdc-P"BcK`ii`MLiV^/'7MJi=e'I.?3kpl2t3m;II=Dc_EW]8q:p-gQcW0BZe3]_.TA:J1@[$i]#ZeB7(38ZjbT[.3p'%WmGhuVj?e$T@,si7K4b[^T9X9Jt>4(OgQ0FIe^J4m/9'!V#@;ED3PfKWm0u*95WqLd?j.WrmWC2XZdM%Hf8;`\uu"2I]\BPKFiLh%>+rO<FFUk"o=]?O5('uQ9`D\-+lET$jMU!uek.p0Zgc1/\pb5VQa]&ip[B+Dku"Y=%B9ralM4pmK&d8ZK\^R+bCC"ro!5X-47t)e%H+eFSZc]HFEq/air41R&DI6[K<OArVkM>S7eT];RE&t04r2R:p^0LM,>+,*8(<M>LS+cQ.dcgG3;Dk`,n>$$99ks<5p\UT^R;A+p%U,KW)>rl]$Gh,?2PqR#QUO,:+fQsn`qI]S(Y0`Z-m6'.Cg3rd"S=REd4o&]*e>YO!D\<s?c-03ps,(?^KTjr3]D1O<5AbnW&pV"e%]N4gsnF"6KkjD.-.'_0)@IE&%GaChVZgP:Amsm=-&>.M;07G)2c]QP*:2E\WAiFt0a)c<4?M%A05*^=rXAO1]lairPqRue)oCY[A%UMErig$RUqXjLCIqd\a:HeGLJBR0:&l(#H72cC+?hV(lRhWStT7rWp,[*0H5'oZaOEuPp56DNN<_VB<UfA:1[ET,ClkImup_IM'f%]CP=1PP;mO<i>rqHTe(MdS/W)rGF!^d>#!>r:;^[Pk(3X9"WC">][W,@@bsJbjm*!oO;Cg&=Ul<_>6*([.`ml/fQ,.dLEq)EK80l%/o>bdf'$GHK9BDe2Fi(8q6c@3BPF@AG[(3a)U0"UAne#?kM>.laPQ.[T=)/C]C/OsNLmkUo50KL$EVpuk,Ih%`_%/_>]ENB(8gJY%*ptoC?[c:J[l4).Y'n>/V,f-2f$jMW>lRtGh/tn'5/4?]HK5mfl>PR])i^"]T\8L\ksPT&^=o.G-T1b:q6G9J[5[r"UNZ=jj7i#Q%Jp"0P5<S?]2Z!:p]WEP<qQ8b)n$Q2T7S,,Wm/,\d:EQ<gDf,,]J#/^gBX_rl1mQGO`L0YOGWHtLfZ%*?^G7tFpA7IA1qND$'UkAh%neH*8g0ZOeB&W&QA!&Y6c#(\nYsrFXI&oi`cc*:Dg?<S$dTlbMo?'5+qEu6-n&ERUkLDV3[(j.^N-'rEq$#n0O_2'UgjNHC/pDYT%)cO,k@bfDuYM_rqqF75QYP4ned-.?R\AB.qX`.:Mr#EBLaVshbf6.Ys7VB?h`c[b/lBig`DDaMs^B[]7p'lMTD%in%B%K3^%0B=L%RQj#fH##=@9"K3&4+$XqZ^1C[ihQDC=hZbp=EmU]Yej&]fCq]+<aR/c-$/QjBrAc(rbe$3)Q$JRYHZota,9D0WI7!ZT(oaA]YF.l%nSQ6L4SbBq,eq*4r0U-)]B-a&HB\-tBW8]0agVJnaSY96^Kr::rF,QbH8"5oAae1+S$O0KrAF<sMG`_Vl/D;Rrna2P1N8sl+.TbQ%hgV^\TpKJ=qk\8F3e\9S^&M,=>>KYDZga_PS+u]$s7gk8^5Z"Vn[#_'1%FS-a83f:Upm/;+('f3[m748JJW-m-[pKm^-4\PHM_IB%ec*%s`4*.VGLt)MMS2(?2Q,B,[p)efm(urCgMkK<XY8\$fB-G0;Rs:/l!nXq^Y^KS1#@BU\\#A:o_*`RFq^ETr@Oc]H,'1Jm0E<4%Y^AbPdRRF0mAql,34Esq41OW-[+(pTr@1KDRX+j7=BFoaXW0_FFC"^!r[>(kjj\>DA;C0Z6C4+H@eC'HL:>bofg`[.SbD3sO&rhK%E!osrmVg>EF)29lb8mlF;rhZc?)9\S(6[i6Cq2peqt3Fc2m`@bI_A!ggN8E-G#gG2XYrdTH/m_/<7J>0BPD)@m(%7QD`#!!Rb0#C%6,-^Cm]4Snoj@/`'-!bPo-UHa>IDl:FB1:l]^a/Am8ISt\$',_a@:M4pWXB!W,IcAj3R(U)!Pp2CNSN%2@A<[X@D,j0<nB_G"?;2%X<u'3iJ4O4k)E_q:E1l.E%ab"Pcc#>)l5'?HYN6IZ+cVUVDWZVQe3_X7r40*btgKc:YMm.,A`tM`[>5(kNhM6(:YG>:Mj,*'-Kq(%It#nm57GIIhK-Ekg1$P1q:c\^640lO?2U4BU=;2#6<+utQS)>lY>3sn'#48sZaME7Ccp&$Ic="KN'_AD0>)Rr^?)tPL12C]S,LTX%Yn?A0<f,gNe7d%>VOD2i)mobIZ2CcB)dj/_&`t:N+[]I`c4p=M$aDFo\%R+FX;8a8'@l"&JZK@`\4TuY<JQKp1=G-f@k.@??Vq!r%ZA@!2T:`/oAH^&WF98J,G7MJVJc25Mq8MQ\[bcd74\#=*SYEfc,HUc[fpg`<p1:mkpBt,XOkfj5Z@0ebN_qbddHM1uH!$87`]#iA%@=1*1BAa2i:(Nr2))8io@sm(p#Gr]Jmo^"&ZHlmui(k449-dOF13[a8G<H&7k6;Ucou`)\V-.?eXPIfE`hC%3GN'Nh2<Z[UAOssj%gL$_.XI;Gn0&k$/I^9Se4[3]XeG:%^:G*\uVmB7t[bk'k.(ZJln.hlC47.LH"F7OW`r!)I>D=5iFqAbTe*^[V.T(%18L9;W=bh/T%4jMC[-e#p-S"DpY)aruI_cO5&-OCfm/gZO8Ns0thO,L4:m)O3pNO88e1ZEp1-PP>[MnsJ2(IAO156&1_MKJ="RP7IZcYd69DU0F5%fZKlnj!7jnqp*VNEfT)=CO[LiPH4-@aHE?:Oo&XWgbnB7bFQ&ENTp$NPl69GS8jnAgh$?BE_4r"Lp7-2N:XHpo]['5T1l2BS]<%E%N6fk&.^BR,7@06fOg4P&X`hHSB)fH/`3=0NB)c[)k(TX*ajLeiXgKUgh&YR1AQ:mSQ(DM./h]TfN"VM&1RJ&>ZNRV(.h&$,>tU<o%EP*YJqmX18;^W.B>t5giPV2Vf%h`a@LD/O:/1qt-P&TYp>nU'`k)[L$'5*E.nl$QeXRhc/ONt>a?1P)f8Vjd$r+&.u50VBp:>8//%Mbu#;R;Phj+!dEUh2CHQ;9\IYNC^=TmK=u9CU>5iq5hVFI[7UNKkl152n!p(HaCbYK%u4m?:n</['tI45F''uVXd(7gb+ljc0:'V%jnAMBg#3^hYa]F%cDGr5A>9V*qD(t3@es*U`J6_ui@0oR(1qjM@_qILmNj=d7:).h,!1s1M.^o5=5pkC"11=jNbH/'QfM?\TZI2=%2cbZ+M@ZJOW4P22]"T.n9b(Br1;nSbnTj#=f0u'npS'nLPilgL1lr9u+J.LjM@X2s*si"S5KN6-0'*:+>"GQ'``<(=>>gU\hCf9T%.8(YQ7003fpQNWV2jD</?=,J8'7>KZY"eKJJ+"&.21(Bk-G`[3^0CKkgU1aM>f"/D8Q_/im_ALO1N/LW4R4=hXPlQ0R93.u1Y^%h%Z#gTPB;<LI?,-uHJ7I*_]':=V>p<N8SLm0k(/$V@6aC<BZ@uhWXaE1V4ns\!n_fK[);:TtBO(6eL.Mkg:;a^&_])d$FONBtdEV4f%E?E%&Ilq4+@aAMN!LYig@,/e7`L[S'f'pX\E?@f=_6H0k'kf+DSN<T@S?++@&Sj(jC!uIZ0;^6op`N3`OeLsDTB&ZfRenQZcu/5\%6/"qXJ$OC;roR@//s.B!KjbDKTkOd&P*`S;$Q2L+b3+O7j/;87A<02E+.@@kn:3np;<&\Qk`);:2U;`(iK&shR&^W]H8'HF-bbg=%*Q+3aA;BNc/GGCmB%<E?^Hk@YSn2>b_+WE$[RMm0)Y:sGSY)c`4-gJ@FUO?T)]We(79aUiR3ESApf(QF66irf;K[!uYHh<SC@XWN%-0*AhP,%`*jsQ3=J^>@Z:5-WLbD\rPSIT<,1qV(qBfh!c+k+?g[%(NL?E6bnZGVi1;^Ef,#]5?nY"DZd@;KD?_;%jt??,0l^'#g8%AqDXI,,O:JWZ"TN1.iiM*Xa]^epC*I^rrCue9N3jH2D5ZNHSp_B_q!O]1+k$8u'5h-S;/CZLKg+k>&06p9lK@[<.Co;>(<fEAST:%?PoC)2&aFhrn]0CPHl.7]KIokEE8ps#V-[_ZEtaB\oh[Sgc.KhkU#gPadORm)lM"/Z2mV-^l*iXn\LgM%[$>nrH'=nH[JuG/4&uT%C9V<S.Tpi]F_C(-#:driNO:Ut)&ZbNafH@O9rV5-H&U`#f!VtrTa;:!2a/^_JICaJ2E^NZUWb@$-Mn5)`+%8=HqVm'U)kOT=!ltb%PP+j1R343]MXUJdnBid5U)66URX]6C79^Ye)LhRID@<dR0fj+1KXB7^+5ahG==gn"==_D\V#'gD/:&$YiYgSk-;IZh4F'J5aHljG%>=b>_>Guf,UKbXDq#PbC3D1PjiqT^g.8ut(dN#rCNI3pX=>cbGZCO;QB9DWRFP4+a>,P1JPIhc@%pCr<D8)B/c;Sm^G6g>rY=ah2%7BSDAdhuH6^_&-`-:,:<_mE?I0c+QbfkRC,AHp'5D4f_"N0CfLXnPE5b^G!E;J$KCle^^.D(2d,HT,VF"sh\3AH(r]_kTdk8-m2W%_mpW<c@A*B=2bkK2N]9kqaG8jXi:sqDF.O)13,cT"A"HfD1qB3es-E2"'.),]:2u<J%V4RrqrNL[BeooTQP=`oEr07@59]^knS<A%@V>g#FQjN^\\_llkgD!FN,$1kCZs1sk]2C!eBk$nd'4>C"D[/K/*PX=*>>BFM`%M7d)E!g8$&CWYFq)eDr]BpV,u$C28%u!d%PMq%YFnOFO:5,VQX2tU`KO46P#KN[Np#]lMdA1E5.M:S1"dj?Q^$$9F`?@6@^bjC\s[SRY*$%[nuLp,ef#OL(?rN6lILF6WM:N9T!0q)%SR*sam&JZp$6)4%V&6<0]D4H;SKo]>qLp+dcbmmh^(m%<T9Mp6EI:7:b0m+k`nJtpX,06jcm>gbEBrS7NDA^aF1dZO;!^.T_q#H!%61iC[5m:6d&Q:u)/&$#?`obXdMDd=bD8=M!B!TG,Bru&hZ!/asAD"[?R;j^&j$n?/Z.n2RRp:\W[k-jooGU!G8oc\C\I_><L=?k%%ZQMIm"#<"CbDkuC>^Lr)<Bb$D=cN9NmIu9&D`kLaR,okJPZ^UP)q47\6RRr"[O9!cfum^YSqdT.20<F@*'RDpNA(\7p1uuS9]d@r%h))TV:_fA__6Q,+JSnQO3kgqH3UfDcnQi'E^W`pDQ1U9(9@K&^@'Z(6@Li=kqYa)cVr$-"1m@*@?k.SHf]qk,*l/gMJ*D*'Q0t<6%Qu'u3a$Pn_X?s:0/!86R/;?GK%*&mQR&st4A;UgI'?r^3gJJ5D:s>l0ffm/Qd8TB*&o2-55F0R1Nl?AZK\`m%C><iK]pogkL>^I*%P)*<;kl(.&\Fdhf<9`6YC9bgFHAT8.GC,_oH\i#e*5rLd$p#:qc8.jYD)<,85<Eh=Y+3?%"^N%Y=O7\iX?hT:FX=.^)n:\CW^[Jo%16EPjSdQF_THd6O5h=StmROGQ@]B:sec%8Gb[aKJ]g#bH-ac&h[:75(3lr+6rBtEbUd):P]Yl2oA&%bn$h#@-fpN^G,Lbm@F/0sB%EqOd/aG<MVQ\[Rq3opgiQcWN*'':GiQ9qKWpb(5V$nmMXO\U3jVT>M>>5\-Z?m62N"!]!G;O/6kKP-'taKUqS6@$lC>4L-2+u0Ce%a<2Z4k0o*Ob?0KW?:9NL$]^js8'B6l,;OR6lCe!d@)Rk[&qN7aW]VZ23/<g`B`aX>ak>,:kQMuemOTHKcE]$?4H$Q4Dk8Q*%)iW5%%J+s,@Sk*CXu2OYLD_S?6\`$-T0BVeQ85hP'A."/r)k3=9WK>Za&:1l;lU!+e^]Y!DA]PO=C'b0q0MQK.Tf>6A!Oo`K:n"!LK%EQ%=8+;k<5%>e:+CZM[%Xh/?Zmc%&!n!nT56Yqf(6r%X+umActZ#)aE87)ol*:M=c?;j(XMDWGU?Z+2dWn"ep=j]^`opQeAEa.a@\mk%+up=9LP%RF=V3UWHFSW,![_._Qa9`29r8uW>`0nFld/84E@^@K?>Ms""@\WD'<1kp=`P]NG;A8J%[-eIUHbn#Y[\qLN*;4dn185>%:%Ae_:Ac6m;0t*]9!6Z;"sXA%@)auQY"K7\V3M_PI\iJ&4SNJCQLR*3B>?n\m]@DTT(C9l&AsE=6O57k:1k>0Jh5re1':=FU<&'*%_jEAXkrn<X;.6iRS-I4,N%."p4Yjj;V&ju&Dp7R&&^Iu@8O!hIiA@[42!aq!^]RB%8r?5.*T-Ec/;K?'T>d/H__7s&r,6]jH;#;1%SET)D;3BS"^<08?R^"'E0mu2iaM?dfI$mYslF0!AWCWk1`ihq0ojX,`8>UPX;3=K@A30uV0r-+*8k_L5%o"'*a_5*O$DGnjq4tq_%?4*UqZ!j\UZBrEW*c+`%DuukT)T=%(k\?F#%3)e+.@.@UDW&*H,,K60kN[,/k2'W@iC$XRE2De9V/U0s/6ggK/UU06%.,FZVc`"^%K#Fm9Fh0fG;]N"mb*qN_;2'WNQ8O1dO_$Q+/s?eZ4(NTcc%Y`s[UYS6$Rb=`?D>Tk9\tPcMKb2!*`VhgcMGhPcDj9&T@N>KHakqN%g"%4:"*Qum`eXHIf&t%QFlrCo<f^kMrht>#33Kr#mEb1L5Ac]>WaG'.T5oYNf37q9em@Ui_9R5oAnPb'ooNKIE;GOUW6iu)bTfl/%/QPKofpes6Fr+dXh-&k"g9Je,HEl5jRh+u;i3UjFGe[@*1Y#'sYR<)/du)t!<tcNaQYIm)8h98l[G$V9@^hsYNUEr;8u#uMf%O"t%2!W-Mj#b"?HC[k62Ed[5m,f&s)l<<!]m`SRYUduBr$f=,9.G+s9Y7k&.D<U$oBB1_UT]]HpU<_R2Uh-Tqfn\l<i>ZjE]9]>b2-sh%IsmU3kXW>'Nm0$c=Pa)P)s?k$f^.AO?Dk]g<hShu8!u%8$c`7f:$5BqieX>eemDV)S8,+V[+KAQPZusr?#%P',%:5,?ZjAfUHsT[%=WO$+C'H>Tn$2^F<0n5=Y"5Gp-)Y@Vng!#[J=NYPDN_>K.5sYVGMl29=efr&eU]a1)<mrbq$_Osfe8K2&;;(`'"NSRPP;d#\niYX%p]fV5OI><bmMRajPS@-=E.;-T/iEM.DO.Z,]+0;kSLr8O?8^OmEL>.SkmZ17e^E[rRm]-)D.mBSHt(WJ[O!KGb9X.QC]bTYnhEcp%SLkV\>3*e)e(HLcPh>baWp):2&2I9Dh,"l4jD$_[/R>f`oe=p<p77=;=4>i;ku)SL7]N>l3JQ,?T!><[CpeBLk:2Eg9kSNbEYGXR%ZZSjK09`?3ZdmKlT$mDaF>i;]M=aQARa*g@_M=O]24^k8DN#UmKPEOeWXSQc6WVYFU=a"Vl"mbLj&'WcA!g#r0rjJSgF0=rM\X>P%XdW!P^dH'J`?nPYB<.lh(3tM^FGW$I'<S-)>.m\>Ra+A7(/LN82-lAnR;=aON>Qar@C"F*p.DJZ=4>i-;WBsTk(&q7#;6(B*ET$B%]3fAN=`q_N3dh%-dlgbLU@@En+CS?.Y=<U*]5/g6?QJTuG$CLp%Pu[aFZ06C%IgYpVj?I7Um%)N8S^'d3YiT9+Q4AFXm11NVp_cK%9C,R9m;hnnBSZ&>Op='$SHdn6CM9*B:8Prpm4&e$6_]1e4m3b6,(DLs*ftl9,r.uo\JmaP.a'\ni_5U<0)9bDg_mTEfe9oUDJ5>O%mO\*6%P4F!PTZ*[T5;.'DNq][@_0[jbbR_-L:lY$+ekoBF>kUhADf=hR5fKYC[P)8hm.)?4WdGWS1B*\bY8V@B!8O#S61Zso:[`:%GfX&01:6_.iM3?k/e>XgDM[(84+G[63k_K5ZEDDN82jdCZdi(tVC$:n^UHua*G2u028Oj@eB(MiP=q3Ko7jB\T/1P#4V9h621qSA%]J$^?r%rS*(VT:FEA\j\4EECp5rC?G/9<]`6'`glHN9,o0\n[=b"(4m&b7\,Ss5[IM'Z4?LhFf@?#<]2:**U@=`71ffp,1g%-_B%%_\^lRH/k4-g=*KEq<50,SI.oM:$*X0elSlqL:_.DOd)Kd8XXPTCK_5@@XLU?/+M%CW%BOiU`AZ3mr9P:.H\am,C'oXlKBOPDjdG2%PIrm#E8^"(ffpGGU2#\8B]\:LmKC/9/[^Z`j)-`d#&a?;!W^QV[oENrpsiPgQ'A845nf@HKa\iBGScYs@eb5I6AC^14M0Wk&qsU5%q?&JsZAW/V;8pH/><V6\GO`hr$&E$VL:]0Xar@(H..*nE0uQo-6A0;%2rtL]i@^J%5%M;Fmc*uSl?D$?>.fEhFLG,mC%]sMKsfh;%f\E"Ec5ib&L2h8O-RUr9hu8R?=A,V6:8[UPh10P0/E^7m4CdVMIRXIZ1NnWg_dZn8`ReQ$nKc`'-5J<B5<1W5.jNWSgGYejmb?In%E_Hnnjp+RJ`Zh:$-A75%b[/;R>`pnPrZh5Z0^=].;8u!/3?WK[>IGp(bM%?@GYXPKVR?59;OQVZY.=4KZ3rDB](16e+soH:7W2'r%/Ro^=0g(f'Dei<\p_qbY`A,#eNa_LX:"a8dGDaLfG#B(5Go))ano\lhlQ32-fYupSHb>I!j7N4"ZIHBjA2p#-Wt0:-)tCM[=<9"D%oc1T`24fPb;Y</^`g(Wp,=a00;2]_X&Kj+H7qI$okk`\a\%VH1eOOgrHhH;iFf'G'>2<FErNtGW\Q$]daR?a]:u-?pXa]T\D+n$I%s'qa.-$IL^du*YODk<neC@uPZREl\i>3s,9LM^nknfjbKDBZOrYP[m3c*]E$-jE[\c=0]=?YO,\I'W6)W<hrs>34YJYOe,fqmSZY%odmAq\c(jR?.(lP$b"Kj>_*R`3)hBeN7,)i>ksYt8'j2p*#I`r03_$"gqetkMGDaGn/BEVInot3c#H(FV3s[>^A?;l<*#i$>c#sL%mEV#\)r:HPo/35harW(7PhOP:_`LH%8+?"hEhg%r=^@ZK=gf],]Zbh+MD/BQf2iDP4.O(GA:Pm=qmj5FPlYo>XjaIF1J,T6&XZ=k%fW6f$-d0"]harY<Mj75\9*bf#_ZbHIW!]F'B24sj]239+\ZdM+6BYURPEoC;fVS?P;i=jA_j*.5mG@B6SoOb^aJi0/5W:F&.[M<A%<6^k8PrNo6/OgX<*@:qAXm42p=>aPfg40T+PFIA':-iL<di*[_[$B$W=k($IP,4Eo%+V>.\";6aA=dmBc&eig\P",GA%=ILpEu7G%CT+;f[uEg^?.BQtbX:6T6?)C+3;Rqd%/*2.;Un;S.oV1W)8-q;@sC"^QfgkUm#u,9JT9_ja(cL#X>?A^rM)8oA=;gf/3f2D%!;>K%ECRXoTN+Y_XLLrZr2=TP4__j?`S.8OGi+(O@HnM1,<+nbL)GEkRhjeUGZfFIBBEDF79'VuN&^hk+Zl?a*`WOG`"E=s/)>2C]sYJE%k17kB2[>*g,`CJk1%I=0\%>cnRBkUV2q0hmeh/]SEk@eV4!*UFCL+6Cl>qGkfM]N*fqD"ug!3,d.H$jLNAJmfI"-VSA;U%!.s?CJ%A:ndI0i97J,84UB<>gj,")E1f%l.k^E[6MO]ME/gMB)lX&s1)TKbM-e<W`Uh<hi[rAuu(RE":!?._rm'F@(0I:fW%FMKpir:EHVF%0P_,*XtWTc@+H73N450#Qb?t1!>IWa,?4bVXT?XHAWoZFN&?.-Vj_7t!mFgM83E_'WW9FZ-.`.2`JUAa,Z!u/^-O]`:$,>;b/r97%??X:Fd\V=RWpgO+b%JJOD:4dA-0_\V?HT19Gjl5Mb(o^9s0J'_V;@LqYtOmjm]RVn;EhceAmLRKN!AUoT[I5k7Wn&u^JW=31@OlT%Z'&nDHi;B2opa=]:^<1D)f"lUITc6+`kU,D,P>*P+jPg7^"4q7fhg_al_cLFlIf!Dh<UD6fYl@+'=cXIh-md*&.O,m?[TBKXaWhr%V.&ic9:s>]K^SM+*ua2#$/Fj5I]Hi<)aFV_l^'dXBuS*(f2!hc9KUce4(3k*386P'HE;Jl<"d/go`G_Jr-SBYq)=>DeSj6CZts10%$n"k_]%8T`WN0PqO*.XuUpa"i7_+Ru!]BEkhWngn,#$j<p[MhN:e=fH%s>)5_"7@LEj)*/lu4MbqCu27JU@>\%$PT%;pHO(lX%?u%X[lR-Ndn6>HGVP+b-CF.922o[K=[lKn+B?:`E[R^,5#9WoSkJ-Xlq2-qShSr]@Ci$qtLr5]"8(4j3)hR?i$mR'=s6CJG<ZUjqrKL%?htPCQ>P@rrE_^X-SKE2drTh*^Xk.;<kjctdY>oj@'*,\?GD%=:eg"W^[tb/L:`LbJF^p3+5[4(`O+Fc2sPg=_\FoZ:N)'PC(,;$%T6[JE9&sa>'6R2joh2E7*9(;>a],)G]%8Ukc-^cPN-kN_rOOm^clH]^@c$E0@bp@3p\L^okrjJeSc'`"oh3>gnNOZAMrFI<+_c)/%_ppkPDtP(;m.B@crBr0e>Q%GEn3c!sQf&(H<bqj3qPBAgZI?k/f2&*-A_Cr_(N,IarJ$;9l4b28k"2o#'=l^JrDpZVZNh04oh0K;%2*GQ_L-sb^QgP^EFqR<Uf.[)'^Z:rJiU6A3^XXumQ@6u(rR1:gPH&DR^"4q9<kg248QkKS9AdOA<S&S=kFd2#dZ&mUMK>S?rK<,W%.ed=noC+VSgZ-1SqB;^Qg:]F@<+NG#4A?=QVC14>AW,8c"AjckYXGnWqQiLMm^2M]ju"=s4-D;ClA&tCd.=rZ&j>N&]3arTMAVV2%>[_C3o)5YrHN%"N+BhPu2>_9$^Z`nNVcI^gT*)iTIo,$9I?-R`/^CO^/^/)3flm)WhJ^[:H.afEI;@X7jL:b"$Xr/ihQ(iBrg\Xk%*\T.h@559k]W7Y@F+qM@G:G`/%=W2e4J$EHT"Z_'\c:0,+9)'uhu#A/ASWHfrgs+2Eqm/qH?7qWDU,`k>a>='\o6?"pJYGUDpHW(%o=Lj9YKQnCKpV\)bFnI/\],t^<H`8MI6.=#`_p(<nTN'eqt#*tNBd0gWG`kr47ur>#L75OeOd7I1Rde+.UVmr1I"L`^$tmh=Hil9%>$>9=q,6jGU1l0*qn:_NII#8'k+W`m61d^O<aY_"ld8_>Fn>-kRT"20,e["Ejel<bgj4<h?m?F3"rV=Y<O_;?:9frD$;"a@T5Vq2%O(UY+rNn<6m]P,JH,8=[9^?leQ<'.i?ubD[bOT`DT'!)eCU9JJWNH#p:BbC>GtX_LGKc81T+17H%./:0.@QIj<b5r4XkDpB;(CqF%<57"RkNr&h>[cgmm`Bb=rQag&gXZ:mK=@npgXl+3k4,tTjfSQ8OKH4$g\Q<sD/6=3F\V@Qre"nCqTO5/l*3oT))$HOI=3s&AY[t*%l5]K*%_mD%>,m!7hocbumps5SXWf@N?%uqh7X3<l.jnu;5>STtY54fJ=2X#;roVM4fJ0'k\P<&S0=%TbU2]guae.nBlq_*00"Z6(%'(-J(_tn,]k.Rf,[!U(rFh.!>TASD\GF.L\YHXdW$gNYKh[hH,e/(VJ2rY"#O"%8]Pag[_Wqt_#k>&[/Po%'eIqWu@qaL22g&*]/%^L(S+EWuI-0";Y"MX6'bGAm2W6VYG!]=1]4kmNhkU<]OG[s:=?r2AVh^0@=rrO<7Y2m_U'Y.Idg*+c<jpL\!mV*M)gDX#9Vg"`K9%qoI1AHotnPBi42c)+s?D>$K4pd]Bp^&lA&sdu%tk>M+?#R^VdUDKh`6$JV]Bh;[#Uc**o-iVq?+A4]XY\YCf_D6(s!DdfjK7\Vc%%WgWQJUA]>D0$nKkrSuSnme<oM]<0PKfn\;5gLH#!cW*!Yqu60HmES(/eTFnGIe^utT)s]Pe]kC-RkH:NP[=%C%^h$u<`&k2&DYmp%kq-aZ>jhBA?hg3]L]6_ZDn6D-NSZ0[!=8K@VuUiAV?3+d=Sr)k1LL$brU+'?U"-!ip8,IiRT'+u<rhC]\T>QEMd$p>f'3;Hj1'^R%&n8YBJ6B>,J+T8]a6DUK_t<ILIl;W<43i5Y=1`bU'/?b)3R'*o8H'#5fM&laDf=m4CJ0?TIrA/??=pN0kMdHVij6O'8UEngT[4[A%,$RsW]0D0pah5*O&00AE"IHc!G_=*(4AFl6j"<F\T0eS&SQni4Q?N\^]ZV74R0KBYKTeX]c[&IP^@0qQhY#oPCV!fLqS9'O]]hBY%jF\sJI_b#p=0T<NaMu9?npZG?YNkUk/r8eCW(p!!Aj&aB@FeI8G$%p4Xkc%IKm'lY?,(Z]g.unFnsdNMdZf)?T<8:\n??Qt-J`m%%i+KkkO=PE[Y)iSo4'd+4pZ9q,mm-F%fX%RMM^QA6-[k:XS7tJ5:kpI/3*$WES[sB&GSgAYV*o='?Psg"XFUPS?d3j(:YTIGL!:88%\T90K0(<M55E#Hmj7EtT^JHW<Xd3Zs0uBmB@1Vqkk-n\5)h_XdlJtBRKulXYYQO#=0$cn94M@[q*db\?Pie"Odd,K;HeQk]qW^C3%qdEgVbP>+M[0GJVGPgA4*=Lkf>gK!h,ITA[26KSag9T?sMS2^27]1dP61=@ZV:--ME^<q]d2UX7^@jTYK"(`BG'WaV7KPXJ5D)s-%"PTJ<V1=,f(B?k%p.bc'^8WB&\bmR@@%=d4bZ>SE7.B)_S=et4BP`-RB1>f4n4'>*.FC]%cgEKD!7rVQmb_>1'L^UN?C_"CQ@TPh%+cOh)07S3\-W,+AY"FA:&+>\VJ=gcirV#YCC+!]I&X^%nc`,]e%>B?5/?Y"`bl1Ee=KSnu,1>R=a\\g?iU5,R_b_4K6_I(`.LL>R%f?hE3nmU[ZhC4I@$t95Z=!^c_/1!89'nsr"6Z_?OdkHA,8!34bPq*LZOKkUU;#,.-4ts--MJ4KEcGmN>Q"bZ>Z_,SPad:,UZ+9S\%7KeVQ'7o(617"&iC47S6"PG_28A7b@AX^`)>j:TT:Tp%)HeLOAJn.'Crb5U/p>W[j-[:U)4\jZZS]=V6Z_/eN;0Zo.0o4bm;'op!%;/mHZ'HW1+:__MP_iP9nrNT4a`^1;j=Si(\B(TPP>ck>GW!pdX6_I78@Pj"U.$_ec'#/,?Lhmip7EM%6S#^pB+qADjTD+V[`)h=J%mVBN@Y$[$Qb&Je1_"I3]Zb(U/\%u+A4O?IIIe7E\p02*Xd]MDPrnHlgNKEKY5^U9.rm7FKpQkTHC\-&Dg0<NO0j7/l;>`IZlf1<P%hiZ)9Z4u^s]V?G-"o1J*_8c>7ntIkNZd)n(g#(Fb;:]jD?dCY#S,H@__Ol7)[tQJo,p$>?PLZ4OVRF.LZ^`NoY=..+eUEYGVaVeu%hj2pSR`O.M(\6S(AUjQGB2dm;j0oZq'jj'Ff@e$*nmZ[0YP;eh]0]Re'uF9!\ch67.V8?cd_MJXo&glX]*OV,H@4t\^,pb=Y5P7E%-2;QYW^t]E(IsW>5I$KG'fn"EY:J/R`g^%FGO;rIqO:[X>7"?G13E9g@r0cO4,QSDg,f^=3YoHET83^_$"S8r%OrQqb&71F>k:m:%s)rgJ1\Seu.j?pD)STrlbqMV]Z[^@.`%W,[.p[X,@BiM?Y.Qr&jXbk/m^Uk=q[;Jo9:&-nYCCd9d6:\dX^3r6p)?EV.+p;TP:8+*%4?7ZG+4dV25h[.*#L'+u+UAZ/_Abo^8YSkoDa!r?<Q7JKTB.[5TJDMHcKe\aej?=5!LK=aq*-8fDcbTUF&]<V/o<.hjq6>0ELCSH%,%d1mCp.21hL<?]VW89aM?[?f/b.C<#dn-.^[nBV&NGTGkd'?(f7u2EFi^:?jj/9859I@PrQW[7gF+^j$ZohONpY[7l;V#]h<rsD%KrD5f%m5l\om\l?j[piC=2IQi^O#J!C3Dg`+7:3(q;pDth!3J)l^kM&48!Ktq5O2YI^O7go$hLMo5"0PXj`j>rCU1/hK3Y)H$7PL%pp2OE0'=f-Io3\H[(m(Q)lp`Jh8d3sPP%E<QZKF*KPd+=?h!g@VcHj]:?Ya*`oEPf6IS)f>/(#b9)l!1Je_`[f!@4OpFjfkS)*Iu%g=!U.01P`%X]33hFmVutCH\K0c+S(UT!rup\c)-5G?R1X]=CW7]NG9$KRF)BQVZ;*Z>X@J?VN,bGotCAI&=T[P-N53/#uUl$ZFqN%V[$-n+/e!l/_q,udheKP.pN#?eFL6C]rAt81L1o_W=3?fQqZZMs02H1J's")J(4HO@8P1c5@]2q$OCVLKD(('+1Bl#:YHn&2faTt%b;#pJ%?XA;.5aIq,/.=.MK)%R`4(>o<Vf4%'&B/B<_71bn#/f/KSrg7(K-Yum&=g9!BkTkIr'`'0E6=s?l+0`=1Hnd^1'P4c/6,k%+3')u,&AmUXe.Al`cQ8"V+&S'="&DU%#)IlV:HdOoTJ%h7lSE\k1P2"c(1Mi`4\SlipQH=='`@A@f)'m'6/_CRB\>5R\=]'QoZc#%$L=bd4>!9<<*'8%'dBUX>FH3[S"F%Tl!7f:R!3=1DD0,udk9*Da;)/`aEJd!NCR[laTAIG>7N0iqtFRcE'`h;CqI;LdmZI7h7$&$%@&cdSaZId'%GR&"Lk!]7BtI<*d.!@?n+dUJ(;ZW3hV">5nb^Y;/HDu`TPac]5L^)E909JLGecB,<QmrL^9L`o4h\,2MgH207:WNq%2dNU'A5M)r:5>kSK(JTo/O2Rf;X4kbg=G"rMfU;;U"[!-/,lU$QS),\eRc<*"W:k;);VVK_R&^E/"a@jaCnY'Fd$G4i3![5PK=-8%28O>FeialncP:+iqR^U:J2G$j*cID'@_"'=2H#>nC]#_D.'TKYiNhcV/#RIs+tW).^&<L-+MCWD5lGAU"N\\7&Jf!o,&H]Fl);2s%o@<9u]1$ID<dI;\0H[ACmM=mk)>8uecC.h5aL6=EXH^HX['24o$:e?MQ\YWP597^@#)Pm7LP=hp@GG:mA3c5,UnT8t3t+g+)e0^[%eh'Fupe3s3NjFX8&1f=_Pq.e=h91^DW<]l2BqcGG_^mG[#l*rd6d3R@b4'g5''>L<).k+14*>i!`n65ZR>9a[-sZ=&Uh)K9&m8dU%fg>n=)(Ah(l.s5tK4:m>&otGJ^HT[7$(a7":,3*aH^qCc+N?mi-t[R9FbKS@&JP\s%aSXcf(i$1?rG2dG8OAG_7Y]-8n6BjYn*#<%]Q#7S9:eo/,,_.h-ZjTklm;N4fd,Dn+Kd./R3aYOL#(K)X@j><^29j3d+pAHi(qO`@I;+h)nnr@ctr=(nG+<VA)>bmm4qt4Y/"M.%Y5RS97DAIWRqA(dF1=&rR:CrR/BJ=;Td%Se1.i^^.t"r1It$iDQao'Ccb=\r',HbGI_:q[Sn^dg]J9)u:-mre*\OKHc<SH_A@$bf%<+"I`rt=4f\ZEd`O0(Lbl;".[^/rcca_F3(,JMdY=EgChkVU"\`PqLs#;SU>8k3tAhnpYn^&Ck?\3DSHaRul43Vh]mE&Ga0Ht/`h%jS+eZ5%KnDFsrrC%eGA0S%T@!:QG/2l_Veb'GpEg&b:L;<H"S<-;n59'ql@T@CG0?Xj]UR3El3?/%g;tI%I_u6XbfmMcPaYm&*i&%7N4NR6tRQ28&=DlcLfsES\=HW2U6pK>NP=_o/u:0lff*QF"TTnaN>5CH[,uP[uV_eFBQj?h-6e_s/!fc9#'d]Ut_s,HjKOdXYZ%<%p2]t]7<?,q6K<sr'r#YY@onBi<7W]F&kXEYMb2hNZGl&a#9dQb`3Zq*H'u>t@O6(HH]fEpo"3#<V[F&M;1bb`SK\lW[o;1p2!qM)%nhF8]^V&6,I5p[3+Y!"kH#8CP$\.kmmD(.KiMAO5k3)Jo\6$Lrckg>BrFSH(=aY$qI0mN5a:kA+(`"^o\!egTqW<nb2Bn*umLnk@%Yj?6IhZB`6RD7MP59%/b\H:Sr\>lrTea8&qTg53>2Z#/R'Hk'BDVdO`NuEL,]/_e\s)Z9]kg+:6GJ-W*$UaJT8=pr/kN3XuhHe2E%&]K+)]%-1L+)^ocST^e*GCGN83e)?q[U7:_jT5(4^qS+?PMS9#"Icu,TR.SYUk`#3-bi+LJ,ZY,95a9Rr,tF+^RK:h0?BWtaWCcK%Qf!(d)!:j`GFeZDr8i,MInRO<aa($joYS90\Abc6Gki`X,V0.['?FggghG&p.Rc"J.Oq59KgdpW+VCJV.7P#2M@lKF(aYurW'V]J%EiJ7`:.`?ZcZG*Y;IWTK3QAl-Mgjm".Rrr%_l,g-N#EsN$ji=ha4E$)1EE6DPSdCk`)nH)bFsY$T'4f<9&c"1[Q3JGJmp#_BHl3k%Ig<rUK;/jL,3bo$iKDMdD"puhP>>/:Pu=l_n^*Kr9Z;f`,t@\u_<?50Y`?l*nsP),4I+E[:K39!(Ka2H.%dIUnYsGTT;WU/dNkE`%(bINpSgYH3Ho5UB($U[dgPWDc1@W6^mc>51R(Ates-<1J;;Mfi&jCZ=W*"$F'Dj'\A_8Mecl@HL#,Etu#.#;4QOu>1]DPmM/3_EG%6dHSmiXH$^>P&pI2Y)ea&<Ic?ccCl=W>I@Eo/oWAQTY_7<:28GoRmc\mK78Lh>hL&eXuq?9T812n:6NF#j<4Zb=,&"*!(IgU-oCe%&n:E'DcfAXn)F6_\7(Vl'WR=RpoFWe(N;pK;F.fXOIJAm.a"%+i.ME,;UGgH1U@NCBOjYbcsr=PW##R_c4:Y^nh`Hp<#(Ih%m1DE%qQ.n1<L+.0b`&F5_`LJ@4HR@79-Bp:!5n??1*(4g&P,#7+^BiuHpUZ`*llrkTkC,N#@%]ATjV$oN-E"[As2^nW!p3&E((H0Ojdqd%G+aHS`Gr4"92r7@`_*1>6Jbh$:botdLk'HFi<t)[P/>UI7.Vm+7S:P=CbGX+72S5jl;nrkrhp616_?AD$Ajj@di&S13Z`Y+,"*D*%$6]\A'F6$E^aZE5ImcK)gT3Cb%5IZgPLm)_7TI^WX!`iQ&L2f6"+cDe&J[2j\e=0+cXBj36EX048:75."qc[L&'BUi`R&7V]g2kT%5QY$GD9bLt74Jp:$fAjfi`KXK!pF_DM"eiZ!)6&qT+UK47%@`5:fp&iq@58jkfRO!?5sc?+1^]/IASEX'(;eF/q(b',_m@Z_GW\i%j;@P*J6N'p6D_as'7IYq8BFl>&HEC\Lcl,+1P$$KrRAEQ2#q+q3&`=m8"ThLb/bc5`C2b[hcqf%A.5.eoK^]<$p!O;&k=%.K_d6P%!?_Tk"'so-*?HVT6Tbap.#G=Y2@6FW#*30t7uIn7.Q\.\/P[DFpOs1gkb"I3T.(<72q.h)7I+qd9Jdn`]dNX-BF9K!Jc8N;!a\AW%iZ:$5'.)!A<*=7d,I*NEqnht4c@pnsHrNXK$Xbp?^e#>-H0,M#98isTAEj6S1QVuGg)!(cYV3qJE\ePNJ[OeJd\U>&nt\GWL#F0r%'2tNS(W^5A\2f*fob$^(\G$RBPne(%\-%]K81VRA&^Mr^l@V'B,oeIa<^NORE!oIWQ%Y3lLINemd,hQf4Ce<UbATc/92FjK&63!>%eIOs(NfT8!)fGbEMKroB,XtrQkZfsd*r&_FrlnaPKS+u0<nopU9,_89':d3EdQi72*`q`"`%pUpdRiPgE%MV_@<c\$4>,t)EmXP(%n=Q(<q?3JHZJ\Uc^N>1hUX,<$13X2db'\Wr<)=I$/\k>Od.4`aU.*.OJ`(mt*2$O=?[W,g%3.Cm]W9Q^'$ApE"3+R(Z9VD4?gBZd%VS1[4dI%'$kfD_<HrrcI$!..%9AmqNS&f$B%^$#G1\&DT_8(HC606Et_3*dr(OY_5OQJr]`&LK`cmT,qIHLl`9$Rk/fb"*6'V9R3%F#1hLTs>@E'<c@bd>LuZ=T0k7;@t[R.$UmXAM=Mr(!7r>K`8j>R-;qn7bBjV.qf1LP(soS8!eX9;M!8iAl=%I8rnuPGR%:b-*CIE%fJEA88MC?k)*([<nk;)s%e=dFOUPd/!-;;/h%e@97Tll"h]W>'0.HK=Scs0)'iBFC*fPps2,VH]%C.O7&4kYG%B;*l=fhWI8Sq^A%\=qt?%6KN3q^utjcDaI/0sUIGT'S)4b"EeY!2p=1epP&dO_Y8*jXY,5=<"h[+Y*SuHGG*)Y%3P6;I%&YT*8+Gi\JhI^5q4XRDG.I%d8.QlATY$V#ZF,b\KDb_'tG+!.4G(0!@&>VJJ;]/(H$6HU-+W\;Qera5b1[mV,=>W4nK7P<Qaql:sFbN#kFeTA5BEJeL9pd-US*#%-Y"3fqIQlT-0[C&aB<lRoD$7L7UOU(;$"EWKc@8m@0G$I;8)%GJUCheCe+.XG<o`KJ[Q&kZ_V88*)It[0["$AT#K3!h`qq#$<R.i%FVH3&DZO",OM`_?Hi_,FbV)WX,2rfnY+F&2NmMDk#t6?=Q-'bda=;LDed)_GK<?PB3nO_Z*%9O1)^A.,`nedp>gbVt@H-?gs$]Eg%e*42F&5*,rJILNCAXif4ERJKu+[!JJo8+$O2XpM4eG&(Q9uG:\oXV!k;%uU&IK8neag#0jfn7p'N"u1!Id%-?jQ!s>8Zl9-/SM"T%$(%l//<W_@Kfqm[,L8=a@62RT/f%*i_8$-i1!H(ZihMY>QNWC=W4+7H7;5S!XA@%#:H=r$CN)L9S1t[;8d`$C1.3@s5k0)p>WD"P%'4em/8HXsdK-sA\X:6.#fJgd'O!$>*?/r3rr9up25F/.r7&RlmjmZ!o\2j[7+Q>$?[>WE=7iFj!]_G_@M)_IVWeuo4;i%i<S2TWY%J@gW0<^OOq'ogB'(D`ICYSgKM0$r6Nb/0<@+r8WD?8jA4MPG>`D,>=B(a3JgAb9407oILkd/'4Z(?1:,1J8H&\;^$F\`TRo,Z\)\%lhZK=oq>cY-KDUPJI9V&<^YTXK+]a',GR\2pf_G6'PBEIR4NtB$QM&#&.;7!`VQ\^"X0&h73<f+Jg##PKjG@_8QdoFe6"/XF=M)M%kB#u_7>1MKbW")SN#0a(>Yu+mT7)NK.^;7O.kHc`.WNVA;O#Rjd?ULEWJMRhH!gZi5cd,%m?>Ona=ht]I1!,ZrQpfnF9ubM=jFF3%+!O`JX@"q!7+dCo`mg/\T7+GLU0DQWA]X)B-YT+Rc8;m]d(<Bf@%fQHdB/6<[hQR&U2+Fc]F&O\Hd[9"9L<qQKZW56#7[[>P@^JD%_3Q2J``E4-$,)=]:fIJ`MXs&)BSDNZ(guu/@d@79$f$C.XXr'(AIn_V)20S@QiRXV3s"H-2-APPRIJ2P64>d]NVfb?>(@tiH.YKE%`4gkZX%0oKU?-K7@@.eDN!teJ:c;LC#4uL6GHiL%B&u9GZ]U'Lb%;mW67=EYL6&aYkE6eWMG.C`pcR!@Q"@^UTX,it_LO<3r(8*p%Y_!fLOW[]+%:EJs86;?4V@"as#sr.*_$@g?*18ZZ&*B76P%.4fCoJKF?o)r=E2aoJ[5\%&@Qf8M6_dGEd*Y*/bX'?:(`o.8A^!B!%?/*Y$RC<ePe&e.!mf0h<5p]RB\AoV0F%/"n7Vd,$&-1ik'*Q1NZ#/B[`Ha/cl'="Q<CRu[_n(CP7cd+fk_]gZZN]"]$=Ne]7hbdG%SB7_5,5/X%YMtGrGRc>,.oPls:FSc<Q4OY^Gg#TaX);rSAA$C.,1;%XLIqiu/`X0&G$0&#O_du_%s2G"/.f'=qLGd)KcfO=%QNhZ%`pm=VUm$s?4KG,6+Cap\HDD)GZR[ej"S[Hf8'X!$QK/pUHIa-9+#pop.5ig-EQm&VF;,1>g7Bsf']_/J`&f8B4h2^AXf>S71&RD<%'B/X8O6Dj3J6k43!A]lP2FYsA;cY@2a*H*c23:1[N#)lHdV#)h4<Z='^8P!.9H$(P]/d_qn\oCW#G7FJ=ec_%,I\r,D(9p%)ZVgY%D^uuK"3E6EKl7``5`%-P3$"^'j7k@u%7<ri]c:ig7Vu9&+5g[-Ne:4G-t3&[_t?2_cHR,4:<Virb2A^n?<(M=#m6H!=Xlnr)tJTj%Msa'_75rs$*qjR$'J5$n?G=I,mBV^ngrZ5u/JO>o#sPZ%YNcE73D;#K&ZL;#Do/^QbYn%8jUhf2]=A'-PrUt-^htmG&i-A:HZ*o2%\G[e`nC6hi?pIM*lZkH8WJ+X5a`_s!/k4u.?g:=k!GL&JTgR$9E'9$DZ`b@m.9-"u,.;o*OfB#f8[*gc7btSb-#V=^PRsN:6^/K1%Uo0UU7nRP/LN4S=D[GLORP2&NC'#21_L6:YP\4"lnel&]pl728Tj/UpB4`*ajUh1S6EsHV?%/A2+`gRKS=rc4?0O-]Es!+^`<B2A%o&=MZ[gfL0jAt@[>9-\QLWoo^EgsH^Z?O5R_.,Y=AQHe3ef+Tej"`I\H((!+&^rul:H;uCSjN#41X7j%dt2FH@o,EQe+'3R!cW8'%`LRBEVbh2_&33fj0mjP!P"IR>I"M8&S,s_;/g76!k$`S-ZkbW;l'>1,#o(Z"+TTK`0Te_d,&(+*mKd)p;HsUZ"ed+JY%0H<23D2i%g,3(7X&>8R5JE-i]:aW6W>;9<IKs5NcmPL8.RN##RmN;r;"qq4J1S,?r0U;7D@)[-Og%\hM3!UuW!).lP*obW=@,ccn<LJ6>Yh65%rQ-G[R1efZnX5=UQ<=>N.#SL:)7(cK]T7:FY`KGgAE[g7j;=m"^nSUOMXi0qD+nrFZ\Qj.Qb/KdVU:OkrdjMG"Xp".e<q#MNelKt%cnc@r(Hs8%&i6?CRFqeO*8rNSFJt`9pb.dWKZ?\=Vi![r)tb@5@4:lD/+n^T)\R=!WNac+OO):GnLDs!'V6kbe]d%WqP,:nM)D)c%*EKqb"Y?CNQr?VL+T&+`0OZ#HO-ia5&1aD;6_7p-[P7`7=urqQK'R%#7i6,B.%Q%22Go*.m%?]i`/B>Q0IDAq*:hTu.QP@<$"kTH%E'/PPi+lKL?pbAX1l.hmeBZR96#d7Z/A$KqkVMYQnBDr1MXN5j6.F<"Zs`T\P(SRfSLRBV:Hcqt$"_<gf0Ro77^s:!fZE,G5W'Lu%`u'"KKDX."8KXFN-B]s"$o(^X/eMMo6,Yk[[Ut53"JK2#C]o$Nc,67hgh+1R0F1?($[2%+YpW9lEl-ql6\\Q/.YTCJJJHDmE+Fij%a?FTSZ;[h6&_n]HM&Aj!B\Ni<c8=Zf3PHEb0([&e)VO7"6>#!lk]&*l@PgqN1lBU-5-ZJeqg4H!6&@uP:AD;?LR%>1.GpS2L^YlN%)"<t%bg9g2%94qM]cu\E@IL01(+CVB'Z@:NW7K@K9BtJ`o4Tk$8Wci&Is;*!Cld%XkW.SX/EITg'nD?b[Ku[[h?Na0YVYCF-;g<;%Y2[6QH&Z>;"d]6b-j'l[l(SAP"EJV5@!UdW,,PDL)(1Lu)#$&m:-i,D30%gH#=JG\8XhPV@u?2*>HI%t6m47R.p2s5`#Mk'L]lt%%PRU1m_ae/r&T>K6CadDjYS-=:ald+L<;L-38M5T_d]1J((PU%@2LoSC1.Fg==h1Dml#j-Zf$^!-pI*5b/Z0_"85Rr,Np[P4B;[:Q%j8t+kECZBdju%]>^j(curWOSEU"@4#b7TbuNa<ue6Kl:MaV!O#P$m=m25/[OEm_Z_Wcn_l`=8YfBXWK(XY`)T<F8=P#(>Q]Om2*S%XRc9\Obk8O6cpMO8s'1rDBu1tCJrde`up#]hrl*.@(42X(Ame:*#)!e/"U!>cSI;6[0O_&762LafgJ;_cN"$G(4FDC&PB<[gB(qd%;<k)GN-K%RO2F+8V?,)JaIn4TU/rV*XRG/8Sn,YM.Us&r0j?p%NGnuOmkjkPY+eZ/[Xb+<6Wo-kP2Cpqo6m5'Uc^A/@keGMZ'+OI%K;n@&9Q.bKC:8^mWZbbC9M*msTh2hq$fj+W%;ZmjT]`#H9++G/:3`K==4D$\C)RuD0b!eA/#$h[G=#eV@"&cFS.c6:VMr6e,Ei-r%SX!->8I2g]G%>h#WWT3.#&hFJO$RqIMdj;S4b<N!aX8]1?V7IT]Im8d1uD.YD\"e,jL7Sd(m&kp2D2pI"Ct.\3s@IFaA!=^HCb[?%/u=^F1#+Ib*\QCR9MG!;_Ha(jiQk+g&diqQZ;O'Va%Q4`>C[7c/qX75A:0Wg^]eadV#VNN&UpJ#\DutuZj"ZNo48P4X:8Zd9JO"Y%&u9?HGqN]M<;:"oBTKO-*[K'YMXE?aC\pIU_,t+mn5W)SN9fC/]G,==O4B18),q8r@$iAT7h;$p8eWZuD!?igV+U?`(,guE9u5II%:m+!Gg@IS4hXq(\TFq$1b!m67TXg*J[.*1MN6$=4`:$7+_T,cd;Log'!Ot^sTSX+4qTR#!04B%:-TBIH=?E3)WtNu6-rr"P!X;0i%FGnj;)-R>7Sr!l:"Km+fb01tS<m@[H0g;>,#;6F46Y0mRLi=2OB-C*/>*-ro8]L#2!f(6g5t3bB/a,WDC.>s/Ro>2kq%g)?%$h_:%6^99&V1\o.H\X(kgi2>GQ:u'/T=N+Y,Ga;/Ei%'R3&6I7lAHZsj'p(a6-9S3pVW3NJ;Q,&UP&Y7:Jj_$+S:n78W;iD8p.@q?S<Nu%+tF7$7A`orTishMEJ9aoqU-%@p#p3[+u.H_NMR7/PdQ@R,+LMdY3s[F:q2$.N-W0W:WF(;*`'5[>i42'Vc_+dc&c"aamC,=KLZFp%e/>tu0-JDN0c`YopL@sQMA;ol-,9h?M@)UKaCkh%7cEWgrJ=atEl$u""qJ&(MTG&'+c:u85$q\^6)k@b)Zif)X>&`d^gq!F_SDI&%4qFNCq_CG`L)sf!R'nAWe^.;nC[^$Y9=SNlX6]AgC[hE',IuuTU'Gu:5n5DC>-Wt)_f1WkYsCca(<_PtPg,;DUP/"!GVQC`UJd+7%&C3ab"'q@*._D,cbVL/+#[S8i3n!bY[=J]7?>M,a$?-"k$GO>0#dfC+-Wc"K:*l*n%D7"-[$%U1@A8N-*W&Gt/&%st5+(Z:ADl=M%;NPE5a,OA2jH'2>n3GYD_jmd5>XGt%5#X@G,JID4Trl^^A$DRXHV,"bb2Q4>8eMPVMeIF%n:JgPS]K1]G=5$j1f4XY*g_1tnc:)O%d++-n:Dj8m^3&\a/<)9FIMhMghr0CM`o&VM1).CZ7Y<3!hRkO+UUW%\m.f%s1f#QXngtk<,S'rNA8sQ2PC6fhC@e518hQ5HlEbMK%PeKCcK4-[<L)QeJBEP*@Z_LU+KGp?g$m^0Dl%D61bZW6/L'/;IJ2`U"WX(Pm1(VID>V/0:e#R^S50O6Y",PbU/;9e+gr#($*AoZ%%[MUJ_rN)Ws9QkK&ibqY:,Z!?1D5e_K"H-*>JL_a(L(TZ7J+dNjce/W8.h%Cd#<H:-W$kLf-4(#Kd>3WbD5"`*1LChNM'P\jQ=ciq%U2]?nEcHN/q!]N#90e$>_1<j<:R=?X*^`s`jYi,<g_@""*Q_,JL]K/cd;dMGb5e>jC\<SLW!I2k9+.iW#XcTUOsH[X]N-3g7tQfO%#P8D/K>o;Q"`1@I24Dno-sf$08uZ0?.r5l&jF@TW.8)Skjl0'H!shl9N\kaN>^6kb&bCk7l8WO1%]?Imk(*>bO`I*%f9GQdL=$&,%F$p1a;Yq#o&WUm'Y0?Z\(nk3#LhJ(%e%'M0&ShF!VL7i&lk+5c(-$>7k)#VP#WJ2TZ2kb.:'k955jMN<S5D@>Q_'cp+aU?\7(Y5/%_oE2q=(\l8+[:K0hm-Y0KPFaT1Hc;jR!Lb.)FnGj7r@X4KdiSL5Wj"^(JL5:?$]Y!9LW0%#b]OG>WgJ%6schVKFi_c2,=W&Qkg[:%9M4B"(J5#XHfB!UNjF9PO%-Wu7RJ9BJ>d=B[fCH0-_>TI<c@bXmX`G)!pKk_iisL9nX7R+Dc,&_lpcl/ZD1Bd3Ok?Me.@Lj?_r,d%b6B3Q#U-M`huh1s;f\?/Uq;T8pgDB]`ego7QuNj32%h)h#%D-aDh5<#L3&L<d3!0Xg>Vh2NAA^d!6MaF?jmdWJHQPElC/k"jR]]>%jAA0aZ[c\Wa:MCOKP@_IP?UPR9m@dr!a*Z&A>U7#$3=.a'P8e@1.iktm9p'A7C#&\Z':c.W3H\_miP%(EZjqAjUPRPUJN.+JN2:K%`mXuOc,Q*!7gpKHJhEEGO>)P4Pp%q'Q%=V&N3J1?9RP2Z^c*Q:D1poY'5;1a_th`B#8Ir#["=[-U%iF.H=MO\Og47EhF7'JXHO$&%MH6]-_ep2@U_.tF'Pg5*k*7Z$]2TQi<Q7s:PT;@g,V$niEZ"skZ@jNa&$gaYaMP5Q,s:@e+qHo3ScF#"MWA0lV^qq`0moYgd;)\_%fOE$t,VraWBP'l"R[??7o6%8r0mjPOXl+r#H:"ERU151=Q#MPT%F0.$U`D(2fVAu%H2seLJ+5lTGoU!LPgVZa1(L3uf4g"Ag>HcP%>2%nn6S<4@8I&VV3Yt!hP6m7bT%*KK5KGSie?U*bB`YL\VJ1[@*O'6pdW4P`;V-l=?E@9e%cT;UcA]ZKEn1=SD/cpN4;6Z4#CG1Y%[2nsTn"8tI;"Xb:;a@ac46%IQbWI<'#%]kYe-9PI:t,[c4(QhFA0*jj0"sGm1j2ou$.DL+S2:^e40CCMAN@O_%M_(Re,j)@jOD3`%bHsW3c,3-5E%TgQW&>dYJ5dJDmEefOSF%G!HbXBPX5`\Q4^h@dZXj/O`=HD=>8I(qVhAuro3,u2[PM0*E40gnD/e4$Vf7f*BUn]5%4/CD[C748$`W9m'`7gknB?%qqMObr,ktJt)Z@!$W4'1!4e8[HcWmpWQD'68CC$fln3OLafle/\S:;ma%J2B#7G,DBe'Wh\:7Q8k=%DrX[aPAi*-qUrAu!8D4uE@BT;\TmJ:EIKMO8(R:Pi*[Wq4_N@N&Nb?k%MV!cf*5lZd@8K-UZ\Pt<iCIfYC>VO*3'`<hq&'ASG?q&%Z(1u5K<q*XD!tC%]O7Oiot4Zs:0@1Wm9F'=SF*Cd4.L<iYRSa$-?3ehPc=c:[RT.G4f]D`Q[A?36n;n7br>o<45Mq/83QE$#%Tdq%g"%OYfDMG;MJamqk87tWI%(d'.q^1J+Rp\@@fXN*b/SeO!R%`C=O(+\j^]n)/XrX`a5L3fF.$l![^2E$iKWr'D/f#$SaASHTCWJg%=`+D3a"a&;Xb=$Rj&"Ioco-F,n^)7eqgm-A<;[#930L:nRl97CC%Kti';h%6e8u\QG5-/!b&SJE*%KotC(j\HaD,>WI;r/;mFZ0a%2NP\^&rsH0_:aj][_]qD_6uY_NlFi]ST.oCM]$@$j0Id4;@K^nE3-JWc?@^G%F0.p[LLN2,^2l\Zt$ZffkV0(MP%!kLMQ"qj1K4O%[NiL"i8Ve+gR>Ji"eOF*m2RfW19MW.DBA!^LMQ!fa,&KCCe'E<iQU?%D/d5^#]b:\Cr_\DQl7O$=Yn>:2aLWuUW_[Ok$dClM"pN&%E>[G]kLTXnN?ce=8\]9K\peP-$.I&9O%GCbfFCZc6AY\s[\^&iIBn#?IcS)BUZN`d/=;Lm//^s_lURknTiqa-[bK_VLUc*tiWm*M%i,"1^g\YV)!"\6mU>oo,!frgH8nEbf#:ng/@IZ68gB$kg3$+qqc7u`CfaaHHkasR>W*&%`60dG#nVsai>g#7*h?I@L\D@]35Kqsg%B05&.g+h?UpS*C85P3ep%Ohn>b1R<G\%l,WbdYK0K3:c^dW2R@6J(3E3l+/-_aq(Zi-t$sr&>\V^:ZRqhZdIMX?R^X\LlR0rmj89%%f1t@>qm=64mZMkoYfZk3SUA12Q57s!HoSlCnb/U@"Ydk.$3.?jerG$=/k_I":T6"YLTJCH3Jj(@(VK8!8q*&(+o;52\kQ$lb120%Gunm[MH\-sAHQq^QK<u+)jKaDK)or6<=$$6D:^#bHY8??b4V/5UL0C=A6$"D$3g:^]N,'pgO/U'rSD]$6OK&u.75)t\>I*r=^t"&%rtN5[5tQ;[JV4E-?LV>)Z<[66K<nke@Dc`i*$Vq78eMs8&==38?Q.l`lEcc[%d\B:EX<\TmD9/KSF$pr)k?;)$@DfsEN%&#j0B$P%Jr)H,?V#_8&XQ\RTPPEMUr(55P6K7@>_nNh2p3Kb4J>EY,(hs"GYGCI!NR$lE4*A;0%Gck[U$1I[Lg&m,MiU;PG_%PWV$l6:Wf16%f?.5Ll`e4Y0(;D^o?eb>>m4HE[Ym=Iqkma!JSq`As$s"8QC'q;n#TT7a5LhNLY1PEQ\j@fiYRR+qkagQ)[C@=KmN8[r5+OT>V"cb%&f[?\Bo*kK\B)SmA@pX8#%tR;"<9\NIb$/8nSqujP7`H-p*3P]Wtid'@7gS@=?pRkXfYbZ<_;MG3=84:Wn4@$f:s2O'j[\B`tAK[%h9Q]9MI5!K"7iQQ\6/T<>j6iCPkpXtjuk88\5pn(ons:)FrcM^/p9[B%F2UE`nn*8YECWCK<\c8A&)3MRPA5+?9P&*N#o_]7K[AX%/uC?'XS:3]3,I3t(a.C6ClFCn3m3]9A,"Y14A,$2`Vbq_2QBj8(a-g-36'_JKfB9%r-k/<%ua75_$oA8*:oJc3#qZ"iL.2V`r]hc%C<$[Z?,'ldcuLF.6H:Y/oZ5/jm@#(KAr:]!E2n#[fD/P,XB5>Pi%3LZ=PL5g"dI@uEu[ZF9!*UIr?an^0fVqG:_!/&@*G[*ll`S!%L9/X&Xrp@#QJ$\/2b:]LaLk4q%`atE[jAtYL'>l4dO5-Lg\*>7anXCVEN&6A;BaQuP4T]P9Gj&YQ#\(-m/eRAP]<Nt]IDS]9=>=u%f.Q"p7)*]_1M>9hC?99`1>/<Of.k7<X;<_4ES7L2ZLuE-]f+Ep,u3U195uqa=ufQg@'*86$_S-j6j+mG<N3EA]-thY48\,:Z1LE,%F\d!:GfHqP&4'87PjRHZ)k?:N.N=oVJgt!nid$?;dag%QiY2eQ`^8?h[U!c^J[8U+AV79nJn8fLE\UT]n'"YE=YSj.5I$%a^Z6jS%a(.ZO<6GIY]4f@pA@m64et2h,XuK\7-!gFf1?F\%pr-EV\5pn(R?n@8I_h?[b'*$9%F0,/=<&gTEj,OZFN!9Kna!jIE%Ur5@Q$43%`F:`Q[`c[,E4-.qi_['Va]Jfo_o6/PbJgQLQ!*'^(RS>Y/$jCElW%RK^(E'2Wo&&u?;tM<ZkBN0MaM3FUtK(pY>'pBfe-1/F=;UG%)J`Qf==ntFRL'.<cbgGhN`cc_]o^M0eojJd]I!HOD'i612/X+']u2LOn!XQZo!i_j>9(e/q3qO;Frai#3Vru"-</EYEU9=ujheP&%"`G`P2FL.730`g)3=D)=lFD.tp<2Yn.,4E:Xs/Al"a)G,1jE>T@_9W4%V<9)/e2I)l7NQX]DTt*0=1CXe+cbOU4dsS\(MWas0o[[%gQa?NNr+G-L]'Pi1p"T;^Xu=-/-@.'f\hm"^BoPDQm0miL)>q%kjQ3b1*[uEAbDoa^]XqKA&l^6>.qL"H$sh)js<XK75+VQBrdU"%hWqMW[VGISmoeJ/HfMfJ?!c[,\deL^XOOV\a6GMPlcJENpZlPEC\W\-_+hh^'a?Nt?Wu=Pd:j$A,P@K/p3<Qf@#pSB$GOogdJn!\%&peIQGfO,2hQ,CmYfFm\$9^'qrT2cQ$,)XZ4^P>:@:/I=;oS.R5,?Yp0_8Uhg*HB:^"/$'?>c[nkOk8mp@[`.=<'^+&_"X8>nJmS%oqi=2LY$Cgf].)m2Km..1i_mQ;IdaDJH>juD)]I.1<nV?*(h(@GeKu94^P<hA<3(H8+s@&9d+nZ9gd#ap?M-RD]2DpG\o7Z*i3^M%fc;_'XaHmDMo@XLhT3!>5+-\9T!@6cLY$6lfjf.C@s1@:bqe2?eo.5Gr_#/rCqF#^SC\uCg!#+UgWdt-2<)i]IV[5peSE`m[&n\]%c8H_"o3Q@(HM2TS7\;hM\+sZ4?IKImY?DDbSJeaPRtTqDSsf?<2A>J_H4<>j]\IV9a6GN+mIC%t8J,#DS!3R"M8!b8HN2U#2m#f$%]O&5!*j=/s[E$I-;1#BnX46(rU@0\C2U/ndUYetWa6U-9mI>M)=*qSd44_,p]b[a8r1]BSm];k&Y?ia2*ij#Dg84FF^@hct[=R`8%qQ40R'Jp6#@<5f-b^6`LA:&u)>M1&N\!l[j9C6BhUfR.mMVYB\D;.K;oA\.G[]]#fHL5Nq][YrL8*[Rsm4"B+iS*r-YMm/8/d(gG%@`s*]mVR#lJ+'bmmIAp(\iinbbMBljXk'GQK^04Snab`+rmuC^O,\H)9((Hg&:/2@)bR<7DpfnY`:mi`$lgBN4aCr[4,^EI(+7U.%H<l(@9!:g*6g=:QDKT[Dp$[]*nR<Hrh"E\u?>nO,pNX@e`-n5<X1#r0?Dgfnf+.ZEbp`Of`WIE!H;0C\.nRD*UYG^Va6PTNI`$4o%BP<Ra)`KWLr`$G<iXR=C4ee.Gha>(Vi/QYfb5-*n[<s?D4"hsRC;em;e*5&G27]da<L''(VRbrogb<&qIO"#D\eU1fr4U_I3K\X$%T,UD#))PCJHS]>b_h5M!jn\n;RR[$rWKD:`eM`c^$0jC<mOQj`+R]66$$C,)SU#5LO3O\O]Nt^+*j=2F]#W!RY'[6oc*.'S'UiCl%G1E#THM!\;pNX5gG+[kb+$qdN*j=I/47i;C\)Bch\)!Wn]s9H[oqj`nO4S1"h</bY?JgodA+.-HpBdJs#\p&T)h':\,4T!#IUhjg%YLb><a3+q1H`UOPnP?P#NQ/(E#b$M'gPpRI0)UY@l]ms&G:9Ff\KAm2r7ftUmD""5bj6g"CNTPFebb#],)LYm[fO'f$AnM'oGaY$%GeN8(I@aXa6UUMfYLd=`;uK$e-n@B0dsBJjh0(N@O;#r0YA<;=a2tF4\@k\L2fnGM\ddNRkgemX(OTo/)n3iU]##iOX4JK.a6GOA%J&?%@anNg!c/h1?XDKq(/M;ORiI#0Mq*P1ZfQ9<$MpK&f,;lCf;0'SN*\01Smgj'#`kAX*k4P2!gYJiG;#dZPTYB=)IT-FV[cecN%?-p8P/rM?C-CX$pGocjtG.QO[b?aQmWF0C_3_c7<fQ'\T&`3$4qLUPk/uqk:CX#E?,IE@+c0S&sat8JEW[V_TS>[j;*Y87?@N>A8%T(Q.Tk+Ja>0I%K^<G6^<'l8o]i]cI#OTdk2%e$GZUt)mY*c!I(1WZ^AjMZBg/b&7gQQ?7[YF#[GjgcD37P4C@[EHa^=m+I<NS@re%BJjjL88nO!3tW1Eg&='u65W(RZjt3Q>#i`oPMgp06@#7mb&`CObp]U`N@BsA>2:LU/&X5jX->5n7@&ZgLGRh5hH_ggH1qO)q-,#F%Dj7k0+lrO?Sg8"2)g[<NhFkMU+2d\s4=$AdWijb20t*%<bWbKGS`OdKS*0<A`K&U&\<]02r>'X-m[TWd2:Xbuc>8nK9gWKsT(FFK%&5joJLUCX\f].*/.s4qk.iRE30JbQ2>:9?M)2-bM$t0Y%HPWoJA)G$2bM@DS+doSSjq26ZKX!aQO-R,^DM2WY)!VgUR\dJ%As3aT%HTcUW=iOjEBINdEEYV+Z(r(i1XAPe?WtYXeOtP7jogGI,W*,SWfW2o:_%SOSffBg=BV*XSX9)s`aaG!_s.1XG-TfrDYj(E&@Vt4f%PHET(.<+PVS9X`@YKPOr`M(==DU^B&*.Z*thSH1D9p^VPnPa!nhItNdimo>>/ZVie?e%%ImhInfKQ*>#O/\!l,B\:$4<h.dG'MRk%?ogMNmQWnCYN?9k@VWRl+:<bX]=I_C<C=O3L*@^Wn#sqc$?9_g`EoH6/VQ5X1jXT[`ee-Eal_/CN>52mSf'7pGe^IMoQW/Qnd\0*%RY`S#d0I("lAc3-q(R2A/$(N1gaTr7,Km9j*2UfD[]EP@WW#JE`@TqOQ\N`THOfMe4Vff;7i;Xudjl,<7Jt`P<,m'@*+U()=>+.n%rfu2C5BF@"J,(#d"m^776@6pTmnR5\7VNS(Y".C=/[@HXGW'bD4<Lo_@]#fkOIDO180>>/N9Tftp5JQV4\^\'[F#DcBRKZn6AU!N%"X=`)%eNms4iXkV6T</H+s#G$_g.dMr])X4?^@6?ZlP]=F;2_d:k,p-@740p7b6H&,C>UEFP.;ZZBu#"1PDAr'l@q<ZmpNi'eIkh%.G0JZIMbfmcS\mAg)LjqYcnkff(,J,@3%#/Jp]B4[/OoC<ZdUi:8FW*m;edh&^g`GGct9hB#=e-[EC=d-&\f+$"oIG_qD)g&[""3%oU,ij(TZBJ53K=0$k6A)K&pUd1N\h8XY93N[<eME6mhV&m.&^m@?1#YH9BuN&;p%=Qh?9uGD;B+%@5N^)"jGFDXk)<L9f=@4Eu@1%?)E-9ce&")cd:WR!Vpc]?/LO^;i&i`.b!SSiApa]>Lpu"oc\6W5C0sS+W9%5G3V5^+*C2<^(fTKa.8;0o_H"2(:Q9K7=-:T'[re9%W9(^%*2iWIGBn?UAU\oc_YRrepZ[fBVbsY=)nfGR^HPaZQ55R6\EA*6;2`LMKO.t3;C<6#/S>o-hQbikUNR!8&Xed&D<d*e2r2l:%bHE$GZNu"up`gUK+3qNcnLRR)?WNN&_!9+aS9I*)(s<iLjg"WFC?N7YYF.o'Emh'`fg4RPf^eBbl*iV5=ESoQ6963,.BJi?HnK/&%D>B\+F]5B45YMdsbsse^2Q$^.@a&iGe1SJU)rZB[a7LDZ!K>d#<h8!<88pnpK6O?'fN5\L,H(m!K!SJ'=8V,JH;tR[fm-K]n0Tt'%?.:M&%<"X-@eL#jNJlQ_1B&m(DNjj!]rZ+V$<^,:K=s=Yp]&q[Y/\hf/H=IF1j&2QJj$_.e7'Ld;Hei7,7o):5L[/%2lpHOm\`1G%Z6&d%Y<u[Vft,S\SF3[Z0RQdlFdIkA"Q=UUje:1Q\F$uWY+5_?3p;K7hm[kj)sl,6]g?8K_D3*Z*_[rT>BZ@BWo-TuD2^UPYa9Y7%7(!egNS-\_4aqo9P!/>AQ02M26LVP!d*mVa_#$6KJ:$j0LUAm&?U9NeZthCs/pJnhmcBYh'kM%N1*1IR"=B(JoghO)IA>4"V6.r/%qsE#TriTPnC-/Hlk-;bf1dmhSSJT>(]m+ldX.VAn:&PB6:o3\7bP[pBZb95;SH)?5n@27&Xt&)2hMaUSAXL5RTdNuu[itTb>!M0n%qJ@-8jfrOraL8C&mI#&2%G>3E6PK`_[>47,L@qPt1F\>f6p%IbcPc-C11cahCjIbuXPXbRf0+OcXhTTOr$+i]U.`;#^u<4X)9[uG%FJ\_V]`#lnTZ]\C2J/+o7qL&ioU0n&d@&gjYcGjZ2j'P]GGf#c`*2T:K5VHo*p-9A^<cDX=bKt$=J>ZhqZ0pG^T'+[YpJH"_f[!P%X2D::^KQi_i9mm_p^4L>']d7<QXH/hbGWVpXKP_fJZlJQMZ)koh8eES!(sXH/DLjomhI<F/^mo2U=ehXZ+]0@M8($J58j$-%E%]c%S$r9TW8Yb-r\m=B$pRR%?'[GXY(s%IR5hNs,(<18rC;^qRFA25[I-@fL/.+nNnK_n,OSQUQC0`qTmV5\JSQYlUZh2jq@5FNF$4ea%N@HtRUU7VArEQUO>9Q+10/TYCH*>;!"bAjU7&6A'"a>4ooO^d>T*IU4Yf6S&'E)Orrdr<A[U3Y8;'mID.'MR+@IrU!YUfb%`cjiY%O'Y?Vml:,tV7*;D?.i=;30\;kg"fI71%FV@gRt<Z0g4B5h"hV).DB;m8nE333'E&dK"b*`R/g\hgb;V&XF"o64a[fcF\"0K6N0lD%KJH65]LZ<LU*]ML1:cpMG8Y6&%!e/ZHH3dKW\T.hDqY[*6b-E6;ijpean`9DG"I`P\T+QI?)![ea4kH)Q?)>Q=_#KO5OpVLKL@Wp%0qn5C2/pHaLXbn5F(8-+f,h!,_[^V?&[sl86iE!GX/`T#=`-T%G\V"m4Q`eJX+-)o*N`BJWu.KX-3*hI3r8PK;9Q,.ZK@d$VXW/k%T6*Gg=]jkR$+MG[2:T6:'4uSUeDU,IGZBJCZe?d>QET`<<FWe^%]ab]%Q,qE6L]Bimg$HT>p9fA@&h+0_/'S0QC<(Pb7mFdiUnc/%@DA"@EkLAaL$5kjCs./i<`WI&,,(51MV#o&0Fc3ag(o8r0<,DG=C)bXSo/Nl;%+)gV^C'W51G1RpKLBng33tgDMKV115,ZK]>BV"%Cu7U.Z9)XiP-YNi!Z``2qV7+Cb$c.!!,RO7b*8Bm8fb4bO\Sgd1]8?82S2oUf-n#1RaK!7h4\"I^!Bf]a7f3P!],ISeG>+]ZgCJJ%eLD7GYsUt1@][#&<L"lT4>VFjkeoKrTtD=P5VT!W_<q:J$C%n09p([J7EXAD#R!VWL'1\&+A]Y:ap$%f7domP>Y#SDpkIrKm2%od%f$</F\h"`HF!@oU!Ak8K'fl&WABo0MZKI2Y-6US%7]As,3;7ftL*CtHO<l``7&d-;p+c+&!`=#G\HqmWr,M1_k3V^'3_T/DmV97H%nEPEo$8!aF,$Cu_r!d%b)AKC/YjA%CYEt2Q*>VPpe1mi<Rf"-@dg-SemJI]F]!3JbLfd3\=3X%)he--MZ;qk?F+Jf1%O>JBZIjAG%+hBYoV>+2')<A+q/6g1X:#\S:W#i!OO2(SXb_7/RNQSo;e]l413&!M@Mk5Z?0eMW)dQ^6e7-O1Q^-=6t\!hRXc9/fcKIX`ph%:EI%eH\4889is#Jn^jh;eDQS#!]K%,%rQ5H@PZ2e,`4GR\.mt<(tH38\A+VU1MY`@OOX2\,.b_54A.r&%SOfgI*@D9")ln6BI!rBNU9'%IejBmZ\F1oHjS!,B@5LFbrG*qb=eJXl?.O*Vgg@2Sa_HI);WnIn)W$X2?0-(_H`)'rVld,6TAuNb7tZ3fU"*6AKC/."M;d'fhr#b%FPQbOh'jBI'RF(D'_Dqu7p-/q]%heoFDch20FM3a&BKrXp-j=b(ENp1//6!)Zu,J\/!bd@^;1lZdWqI%>ZG"`(O3r6FD=q^nXc[X%s3KsFKQBrKPel>U>Q#>B>8*WGjSF2#'ZgW3=QM9`U^`$)<*m$[Kt"O].e)aeGMEsQrCSWi*NAq0AF_pXWp_+e>+V^&&jt(5*mYb;%/?3R7+o0!bZEU=VB3*59`%E=,]c$gX.%7!U>>YPuQ`CV"/Q`c0d#'Jp;(^VBH\Fdsi;n(H\AEuE[DTm<6<0e".k_("DE$E?1<clA%3ja$Tpt<p'(%caoJ[P=&;&e'`\`t2#;6YJs0,qee/:ZpN\ZeCnLUEh5Z233fQ9W\9[8j],BDLAmN[<aG,bE-MF0l#F\i^+-KPLH+%hUhUn\$m#WSo8a0VYMCUE8hUK_,Xhm:R;=\p9'Lc%aVm=eCBLdLCDnm<+7NN$AK5EVJiNU6cIAL3amIj:LP0r\6@(JBfpSMdr=[M%E?<^r/$Yr6E;d$aqmi43)&@XLen/m]5+IaV>pd"&NcKsNB[92ar'_!VY!r4kYVhl!IQi?Qi(.Y)8TT5bZi3c#=MKa`j7h.%]5IRL%+hi(Qqso2S2uFl&SG98YX[NR./+:;s.4B0E<O!HF2&\/"r:mW5oJ/Qar!<KL7!trr,@JEUAKUUV#qB8AD&kVP5!L,e#?XgUjlD7]%leCrV,ra>g^us6WHpB!dpKU3mq'V4F-?f?fO7J!)o=PgB5KhYb9_dWcOCu8o?=Ot;F^1p],8oSKn^3qhJ/*Fdp`VqEZ.#jK(_4XY%!L:`gdOllk$r9Dk\7(^u(nOQ\2o"5"Z$HPUkJ)9>]OTQEr]%+U[PTVLL9&C@f'i:cAWC12nuT"+@3#!V.Zs6gq&UtVLl_:X"K[n_%3'Mqin]S1BIgY3rnpCSBaJ.g]eBUj.&l'Lq$f5??:=k&D.pmYZRI!WTfP5=inHPWIs&?mMq,7`"Rtae]Z_#C=Fc<-l=q'"/$6le6%lODKOhZ:iem4AWsc$5G(8n:e9aD'hWB>eS$-p<bJrn=C>H!T`/3Z`Hf&VabI-*)>P4V<(D0DBV93egeYZ[*k"YB>f*&jG;n]L`aq%j#nIbgV1nlp^mXo*I1rNE/m%&5q0%6\-kp8j"F0<iuST^,(,;@P1/i;b\4c9)g6,\b:a0jS%hBrq,8_/j^Bm(4KX"]4@[ckAXNBI%E^9`*_q@7qm!=#]IkNh6lW*oq#'8l$#V(s*[3;H=)rDjL;p&IOW?mMLW3l>kMh9QoaPW_BH&]8$K//uuQFadP-2)]@L.TIm`d(pl%6mRb!ee0tf3<3*-WIgH4`Cn9gY=9@C`X<LQ+cABK:-10o+In#*?b#F2R!/FD[2W39&+8"%@Ft3.PTNCE(bqP8m,N-99m'X^3<G"R%`n-o2'3;R2D-J;WJ<+=*"bWteqtd^K">SMVAh/1@0Lq^qTFtC,gEkt'nQ.UW(<+(,mOaT_7:Fdak.A%H+kY1^<me(Ro8GXgo10?'%m_f.4m95+GULQ"Fq,3$\^6J=s5KtaOMaEoiK]u_uIlYf[QBf`0Yk^@Y%fc3$FM34FBto;**a23>[].=Mo(;:JEJgj`kd%:"PXM=-%k/SE.Y"NFk=A-rI"kUZ$7W[Yd#We):]d`202m(Nj@RVr1D[FgZW0fck&%11G-cT.(G.e2d;5'L`f#+gHjpG?Te`<Td!^(68QQ'/E%\b;%pND^b3;"fqYWosB[6W/eiHDrtaL&th^.+<r&bla-Wbd>h@0H]'OjR/Ca@:cQJ%]`#\q8J!=@<3qO6eaFimD'':B5uj4".SWE%6OL7L8KkB,kC@D-1We<dnmSU/O!lDE(6tbiG%t32?saG@V%]/%U13oSR[9uN=A%M`^9ge,EK2]7"7[Z]a'TBL!T6>!Qfrb+kHeDV%-0=us*4M7?8:698P0T/RAsQeu:cC+;H9rp(A2RTSi\@A9S@3Cd/GON@/#gd'4lFY8Fp%<BlcN=(/S'ii#a?SY`tr*"M<qZi85=FH%[^t+$1a(,"F:nsr;p]Aj>+uV3lB^K8crFTKX'I[b$,aTUpoDSt8nXXZIW/'"E]X7AZem[[]"Z1)<sk+HkR8`\%keQKo8SLR.7d'n%7E$FKSXnW/qZ5pES:+",S982pE4U9[=@[Q7Y)D+O43bWZn&$214RL((Q0:fL(5Af[>q(HJp-hL0aj7Hi4\O)[Y<j7CiO^:.8>*C*%EhAI(c#?"m1n??bQZA@]bC3R,b*G46D"MkE>VE"\,F=QBAL/d,\?,nS3Uj+YGM?9o;0&Q"!kBp\$kXTJq%-R.($dV@5p^-Ir#R[5%OQSt\M$::5WLY"N'"e&kqXBO/`B!>T?&Y*HiK'2T[Fgc%F@#1@^6g;2[G(*[46mQ*elT"Z#Qe_@2hiF[J.H8\6A8#oBt9:&b$OLn%AYnKb5b8K8,SlW1TQY'rLCV8h$sjjG6$.7a`YmCqAk<^!7_n"*^Y\^EG/@DpIC\#DCE9U,S-*E;IK\%@)%^!G!X9Sd"jp)dd:>t9%8n(Y78no`o/U_4q`)6%7/]NQ&Y'tpP?K05r)oBb:\9q3kEd_M"\RMSr9.;]"mu'H&27TPj.RffmegWTZI'Dd$:oQ*'IRqQTALR#5%"u>-4#hjerKd!7_Pq7c.67'Zt_QkJ-$J>^'Y+P2aIMoNGQ,&]6%>I"NU)agc)@.c]L^t9GLo"D4m)NBJF</i-S(SEF1a@lH[4/)G%>W*g%[j6noVMB7684IeXUPP'6,>K`-.t+Rd-"X!Blf>L!&dlrIfAWL;gOXJfBt%gdUa.,dc9+?abre(f5Yej6Cjs4.d=Bk,fQ7bL%eWul_`:S0(abS1=N+nF2^<BnK"%Qrg`B[K`TAiu-:A8gqrFu"p)uuS\\9-#=<o@4IP\M\5(a'[=rg@8OmlV:@m=$&;BL(oH@4I+f%M,7#)1G-u^8qu9cBb29mYLDKIO5*fM6He:nRVPFIVUHT'FlZdhd_=7UB7R>O>5=5chFYPoT#os[M2MCdZ0\)CG.=l6Jr4]F3dWh)%&3EIP8n)3Q'\(?#-UMuq6C)&4kX+R\[j2F!&I)q?D.feSdohgE1C\#rkJ4F\kNiR(#Od>a&6ZPj$!Z?(U7`B1/rhi2pQA-Z6#-gB%Au=nXJuCX]4;lVb;[h'S"^%D;YkemXZ0D,0=$P$.ORDFF;jN\A_o&5c.UlJP@iX(@.e,K6'El3Ao8Af"j&fSC'N9m8e5_3T3FZdT%MSKa8KrMSXG&gc9<nO]JRPb_T\*.#Yp+#7$"+qEl-YhD3m52_F\L(d4<B)\TpJrn/JTZr6X\k/^(sQED$6A8NTTkUF>l>9T$cqo_%NPsgM+K1j"hBN@ieU=:5oH&usaS6[5>b_2?+0\.ordHQK&'2'q#(2O[ld.+uP)*L*qfg!Fl_gQ<l`%&n`rfeK$=BXG$?Pb3W0s.k%,0FCp:<)pb8sjJU.hi1(?\q3YDSEtcm.k=BKpPE\=RVVf?+]6<Eu#+FZV[#Nq'65p5Rf)ZTp-aZMF13%48meoY<.%<':+&Tl^iN5%-"6'+$S1qd].XR`n:c]5N/!<F%)YM@=Kr*#?WcOmFSCIiM7t[KW:ng;_DGB\$WF7(N+GqL4K8ED>#Pu[V6\@eUFHY3=>9;:&s5>H%K%pqV"KedT806<SeCp@C.&`]mbnLj!la2,jZFaF%]$[f$(7J\QgY`.&r,-a&qcF74V6i_*5lu=4cd97ikl<5H=hBSY;F#UlF4WBp%?/]sJcFBNMmO]MuQ4o3LO[[54W1BL1l;<[H/.gTG>)*SP=05Z,!Gtr>G9,"W0Agl-j,Un>W5it1*sX6OaJqBf@(sQWdXkJdj"4H8%W>/R)M[O8HVcCeg4fmB,mmoK:Q[&=;=Q50`.SY3R%YWkX\X/Ad6S=IFVA9Q[AP"**_o4uc\Xi230;G?%bIlA2OlJG7&(P-'/hX)j%>Wu+;4X"<]LJ",8ea&3`ZT2D<INRZjH>ZdZeD/-s(O,*7drrOtblpk!#q\A7aWWF\faM[[iGF=F@Q330-=rt2Zb:X]OZ:]kEn\(g%*C>q(C;jd9?0]g^03mhdmq$Pn3j6oZ?M+U@m>Aht]i_qQ;\BZamWPkMIU7/6Q)#$+[)V&5\6\F:J_$(6bUhZ;<L>RPg?L%*5"AoF%M+tLC:H6<gIVVIMM$)'B#jUS]kEHP7BamrGN4daU)K6XNP[_A2$Tj(EihqF/O''o"P1l=<U\EgO:V"/gee0g-Bq(.XJ@PKhepX%Q%H,EqS2;N*g`or43<o@_1(TUMK528rs:(8B\S/Odbp`h3-?0kuV3oYceA5R89C?DAs#g%C5`Fg`/>c6LM,mFl.Di'\T89pJjkXX`_%P8q?"8dYRo;$kYI8La:nE[^`\V%6_YR?H9lj]cLkED.4A:e`Ah[Y*T"F4Z/Nh-CYi2Jo^>Q3G[K(?I7j22M($CZE:3`AFf2Z`44$%6oK?MKWX[-OJLDi(E.4gIm[D%7Em9\SKFKQKG5f!i6Rd>CY,UJ`rjJnLuB1Lg58Vf)NHj)V/mTm&]oJ\b;npO[9q)P1"dfYd=E]T%G)h\1*-F*0%Re_PX>h06#.O3Q>(i^$E%"=\]:IJA<adX3aVi][8*sk6nR:(FM4-ufb6#k2W?;L<*@kr:,rob1UP6;?8Y"7MKY`1l%XXp\1$OVd?8fO11HNTH2YSI?542%lGDrP`fPomQmf&>+',6)'oD=m/()up'ooRL\#'tFjuB=k*`,TspO(g,.QEnZ?rmpW0WRPCp2%X0#t[&Jn^bKWW43F4N4ad_RT4\ot61UFr,<b*k$;$7jEo"eT'-!$BA_O[6=#Ca<RA?C`YXjbU$_Xq+[bR?H9lC&P;;.Eg^tr9Z;4%bk71-UlU\6j@<llZQFTg=6(8OG9M,lT')POK$TdlV%mp.E>*!W<#*Lu1@YW%D"OL+,Ro2b`b5I8d*d^iC/$_Uh"Y^J3OZ3'I8&d_%&BPhE"JEVpTGU\])e('CX:g*GL5R12LgjM@+dc8m4A7Vka'dJk'j9%VP1o_#"%S/X]mX]kXX2Ga<^]3b9RkTk=V<t_Qb^k/7"VBq%YhY$a8O>=H*"Z=;;h0I#,SP.,<CTA+"W$c;BoK]!/K%a8?Z;?(=PhFQKTHL+jHk$b7#,K+<=G:=@C!+9;j%^1O9n5:(Ze>H%c_5d%@`YJ]=je7PR^qOn>Wq:+ehbqLn2rTM<LN1/>:ODO4fU9g%uaG'4K?d]cR?`,or-#6%pu=&kjk[p<Y#rn!^Z4t]!cq9#ALF_[=EFQ%0l!Ca9"18fL(JnKotB5a$%Tt("gSu.5Y4:i]GS.T!l*o&r_kP:::L-K+>Ih$X=tT[eBT]P0#X0e=FO#A6/(Hj%UtpHX@T*a8nbBB%I-;"b4t!Z2"=Qj_MPubi/N%Vr#[1t^9,MO9!19Dl37JjEg8X1(A5th.,pZ\S_S[(B00`VSlii5h#J<OR3ajQV0IVa-?D7GQ2_Qn1%4#E>]+fRk1R#4OO-eB7sihZ$6kB@]#dDT]cjr7#V1Z/(;NTRESQ[dD46+k2LdH)lfDFC?Ig6js-YXVPAZGLE_;EMY=mqhChcJ$HC%ad&Id\LR\JcH0C%e'BW,V3EUfiNlf,L,3GC(9c58gi?JL.!J+IkH7VmF'!anOLmi5`1bTje':X*d@PD\'%Yb.'lYIX!FfJqXd=jR%&,Sd?DUuhdIL\)!'PAa$d:!Z@#VqC:3&@N:QILYb1qCoGYA#@XYL2Q2`<qD-R"qu3-,SZ*4kf!!682)9;CoO"J%k@!('72:65Z:,%0TTWKJiq8r#%AQG:kSs$$R'4VH8K;m&F(Ac/:042TsXK+XD@.L\<*1M".u>Y6QGqPf%-UId;C"b3I*HY`hP824;q/hB[!SK6_h%1%%CCZ`f"i%q^=[4'b^aYl#s6t<<UREHBq=G<&n"pZ[VjW?ieU$Xf,mLjNV3G]P)(+MNC@Y3J\[FJl7#]9(WQXKHq5cm_JEIT4$Q/u%cZgcA9o98+eUBEG;J@fOLE]![11pp+/QZdF9pKJ6os@XAl`1$oaKq2g2)CS$K:B_'#mc9lJ*5HmV\ogk]p[#gLSHk;Fp(a#*6\LO%RX+-un*S81CT)*YN#'lXZr\>[0hs:n,QTIJrtY]E8RA!'9'Gr#RHp3IR_+c>IAPIC)H_nX:4jf9FYN\oNa+f9Z@N0>Qc_ho_.kes%Sr]NX=\tT>DA1LB;\+QsFiS6LV"8&tG_71f`'uCTK#:`n3E6HSi!;guS/908Z_.F5(f]S7U$Yfr&ee1pVH1G7K)l;A`P@)ZP1370%3A2-fG+f,fX"u!"@5kg"JA[Ae,t,k<2,6(a(FPk%CRd4K(Pc3hef\\rg^M=+YaZ)jT/X5!;oIt0AW=%E!\J91U;dmhS!74uX)t<j%Zn7H5b-b[9'J4.kZS,=X9bVCT#"Wtm,5Jkt#JeP.FF^N8n"OGncG0$cXJ$s^TVW3&@3R>&SQbo80!tn%N7&h_]d_4*[UG.Gc39cX%@B!W.ol.D9[KZ_g.um_69dD/1Fh"sDPU[P`SJNT;*PF#j)UFPUk(j2[.B&Y>]BU@Tc%un(mHV9JmCjdm&l"<#jQfj\SSPSfUXin]%7:37C>cjf4>r/&>2JjYS(/9`GA4iSeRH"Hd1pnNcRT!*G5OD\0Qh>6W^&\Wn]=ok(bSI;'!F'D$/Vl'3X0&lflJE2!f#lUYTTV2/%RS,pH(+b]%]EiEe1YIX)#+MhL#F3B)g6C)^NcAX/@lgB:fs_HW;Oc_/,n,,1;Mhe5+lPCu?:[^!/B_9.JcKKU!lQ[G@^n"0YcrCM%-*jI--)J_[m,kg+,tuEif7%el)X8hOjFqHBgg8,jeL8Q1l`S%21JG\Yi#,-GPB6+FMs$tK(a:JOjFo1Wg+G[LVn[#SKh:i5M(GZ$%8aYT'1PY>&TtY3W</4p35M3)AOkJQTfOtjm"fX`bdS$6&7>81]'4Rk322?<,q1<(8[aYFO6j<cN$+l5$LQr:"U_4MNIZ#2kJ`fB]%OTW!;VOa5L;,I3WD2haN(GS;&F$TFq@O!-TLD"2mHO_@Ga?jl%aq<Xda8tgijWMUMR_rfs8p.X5i(3#gPl(gYap$!U;9jjZGBS4O%B;nY<3LeZ0cAB)4NqT"4ikMELdVEO!"87APKMun,O78DO,!3FI!SbgU&Ho5u]a1C8n8SSraJ.CQe4raL.9%BXejdO).o[L=*[2<&%dfOmcPmrA"roe,$&mlifqur3&+U8'l!d<tYA"B)^Z4?68cIDB?n21hK>!l&R>C)Fs?gs"X/H<pd%puYg"RIg8"eO-7,Hl+$H:C0Z%1D1'[,0CM'_ZFhqC(P<F[$`KjN46X_6(PfJ1GLn(DY_>MT$/(9m</G,bO:Zn!(]T[1a.W^pDQ36b$]K!Rof.]nh`<*=tT2R/RB)]%P),(>7NaT;M4b3Ueq^j.@lPT[?oWPEFr'_)S7ZNip=\C;TpuS/2eX_<B9tD$7gVOX;`UMQ.)<G=N-[Qp-Ih^ZDM*]^MH)3rlP_&M%;81Hf)_Kh`P*#F6nWY%?Xi(RQECoQqp_I]kqC8FYEPhL@b+\'A1G\ObL$bK3IXNC&EE^D`$+FLsD[>FPqq.tSU.Enq]+cP;LrdS0%H=<jc_,JWoC%<0X74Ptb!f&g(838OiTOUKiif0r0$-RUM.tc(Jk!<H"&(0FY667>'bsEHq=i`t++=/A/ChZF7[)-=s6Te58/>NQG%C8pb8aU2a;-E*J=c9ki:k<36f-(5Mf6\lm;r6[=eKhFc=No:%+(=j<o+qfK;L`na4Jf#KFi=m7VV9"8FOOHlTY=*-dO>6-8PJ<(H%CeZINM!_%!Ve1;Ij4Sa_?O'0_l+\;I&u)-Y0qF/,&5UOf/=`f8&NNZK*mj@Se&co(WV:A;DD<_2f?L`@G=i[*H+(F"_QLG0[7-`'%W&_P_8Z>s#ln8@1[;3f`Cc(,[?4@-+pt5mu4p$I",ntFM=sdGj$cqo_KuB_.PgiH%$djWV4<sb%,cjr76jljC+Q@O)=^qS-N!b\\%+_%\hP,<TUWrT7hJ37##64hJCOVII<IDf=X;6P7SSY@K!Vs$\coih!e=]T=Jm/kum=JO)KX'O$&h;UGtGPKVG4G4EFOn^5'9b+d,%,-iC(j+c*'N?Dr?OH)$OK#!G?'j6u`$Yh#dB/Fo`KBk1hKU8oZ#oTf*EkGOA7^o8;lqjbe[Fu:R'0r9D6nF]c,UjjY]P%]kX#]h]%`fSS"Y$jHHAV4#o;0,?EkEh/O[DV1pURob_Y_Z/[&?uQ!r*853apL8km?fF/A(DSU+\lOuHSuZF<ff[Ze/K)Us5GJA^q8R#%=3N&%&NO8H/uP80SrE&&]Q&UcHnqO5^E"%)EutTs]uI.fn.TH-brgVnXT@KcgL'dpLoej^4;7p+0oqoVfmJ67aRnRRei=6%aR]uX,)]&l%dX>SP.$DXKq2D-]O0Em5XR80/X2)_Si\%TV0eS*.7d('U]fpKZ$/!UXGAp'P_e@5V)Br#*TaC0Y>8BRd_NpHArLQK^hc]<t?Gf-t%H]6)cl1M+o<9H5LUg-m:j#X9eDB<rOU$C=2#%GZT.NZMT<Ss1Wpk]gNi,BpaGXs9fUppe)Zd\I?6m&"Hmu/?2,huAdeEW9:.X!l)%Ds068ZJIq@Qa3kB&Z`fbo+>b=Gm0NkX16%3s2]cAr1QF#Ein0J9$"ggGs6gPA5R29]$3ph6&NR5Da<$rUTGRKD=#n/Bnj[2)GKh*%XTT,WB8IcE9_H>;@&G+ciAk'qePdd"TJZm11Wt,i1t9!:4pZmp^VUJk+me-@C;)g$WSfF)E2<78:I5&[gb5?qZU.rATD,)>msI1G%L+I(561)>U3A=G09j#!3Qh?:pfnk\:8E'='Jp:#`*GlX].*oMK@+fBZ#Qhf[F[F-*9'Qt/*%3Xp_2^nE.%l`*:g9+:ae_(Gq27>t%1T&=oX4MMZ=8!OE[X!Xig(jE?`4Ca=G@dm&&*-m:j'0KJYpLtn00oS=FrDO2G^C!Y\W/Jbp)4-VjS9'2O[ZZ,WL]QZq_-gI]_obC%YCu!E[l`39JGC[hb-JW21puo@NcdmXC&)BUYE]57>T!V*b=<-).uXqU,q(0.!gTUDG"T<dmCo;:<lX3ja6':_g&^djmaC9^gI68F%bbt.KGP0182BLmda/0[sbg$]ckAUYlT'%+`@lAR.#qW%b8SN2p;L54?g)8)B_ihasD@Bs3],t^c/&<%P76sikOD$]ibO'lo"CS)G%,=(C>OI4-Q'H1e^(IK[7'rKuRg<!pliB6^4OYAqodp9;[4a"YWaf'fYNu)B(b4t+p<UHb@MKt-!g>&GS8HJ@-:][ns;*g;qPmYF6%qG^:K/1M,qmHjJ0%^0`Ml;JR!;;e]Iaf[Q1U+dG`MA'O3H0<A1E,3/YkEk9MVeB^*O:"cf,a%#U5Epoc`]m"GI?;@gL.IlVJ_Cg%%-E#bUJG+T#+XS`dC_VL',<:VJLue4+Lk9jsB?d..kE)n[31c!>j:Ku]$mTRW!%'!D#h&@m('S_V,BB_?jg9)%.3%q5T'`(&3QA^S%;K9=ac73Y2-IU.#0\,s0@RFG79bW%i]aWM!:?$N--OA,_Q$-2:.&eXMZWg6`ekA0+'EUoW6W0A?md_Dp<;lq\CVoiZe\H43F<OAB%ON/CV^`!`B(7m4FheVUS0Hu0Y.Qp@=$NkEMmrBO*6l8f50Fp8OJil"9N5cE`TFtDSRY$urnI;dqLgt6YShWYd(41^9`PE3#LAEK5%,oL/NNUgjj]MOVQU8\u:KTsg#(3fb.W!nV=<,\HM'R8#-.K^oLaJ.)oPbt=N`<"4Pe4q5s._p"Ll;4E?.1EU.9=eqF)-Kb@ACT2l%1K9nrNj"nu,hD,DYTsfXeOa1U/5h'r:K#*0lD0XgMi'ku4$+0c3;fTZ<@8HWV_je,W$Diq7Q=img05aDW_9(NG-9f=V9aH*QH5nG%nN!d_,jj0V0*hmj@YBH[*nj7QP6_,&[##sCdKqJh%7+]OHqHh:243cinB@94X2Ul?^;hB2Rg(dV9JhahW$GY"kkt4_%Z+sqquVLo%GR=J'U!+hK(e[7ad(h-Z2V&Eh9g]q@3"=#E-RS"km:/;LlihY>Er+`KU%Dm2&GaOT^X=6<][[#_&ebhq6>dqm$(4nA;V5)%7Ku-a%Nn/.VTpASa8T>Q2As`*"9CF2!,AFD^[Au3XhcLt\R/K'B-*)c\c"j6X9dJ6U$7m^M'a+h^%ud1;gb_=@k._uI[ddEGQ,o]RPgiG\%(%/)O5m?$ZCQ"Jp)Zl&OKN:;NUI'2_CXdD]lA-)[A]k0k<p:*\6tG9@>1i2^@S*$UjK.<PS?A\%37+*lR[L"Hjn19=W4jMIr_-u.%a@[QUX2PY5RLA@3"he='p%"jI+Nl7#T',]/Ne+U.lsOLY#dDaN+KpM:`)s^k0G\CQ#)0jdc4naQ9SZ)5L>)!VInPSKq'AX]Z1S[Z%>@@cLIH]fNSF?ejIjt\K+r5uL7H;@eiUpuN6tDYA0OX>;USJ>_6&rFrF%EFKMR,$/Bn!A2*c@_o%M/6oa(3I;-:KKdRMBXH[e&eg%oQUL@fRZGC^0%Vi9+m@YE=9_)06$'cTFimb*,\a:!gOr;HB/Jb\4nR0o1LGn"M;*E:4bZ,p<8(+f=Q;khjSIgFg:d[2(+fa6O%Yj%G]%SaK5B]a2;SVC1`Ol892P*</,U#Da7O"a3/:<\0$Gg.5*ln$W5-bhSM%ocG[g,K[sE][`bs*.?&WLj#[NC['m^Y-eK]/eVU^;9%(6-tdfV5*,(LpQ165*j27U0ed8X&Hs1#<U)eRCOR!L8uQE[$hm6jS%O!M]pfP7SoIS:bJXaWY[I-\9@!S-6o!74!nhW_:c1*9p3X%pNbTS'i]/:p+`&7Y;OMZ)Z`%E.j8-dKiH*H/B0rLJQaVWSgd7P%Z`um2Y0QE8ZO^?&*'d*V&luF9:A4GRU<L"%m,ft)9Z<7fL8Gp%2no\OFhBq>BY;50>+n(i=`!%a8OV4f.U^g0.gWF5=^a./dL%IT"/R0:R9/\D1T?>m*Q`_T#H^/+\72*=m_Dg+]lJn4p7S1`=Qm=H%8OUGL6]>dk-*<-Io\m=R81/AT2T<%eCKpDM8`,YX0b#ds0RW&r$1be!gL>DOGbYrX[nb$gU3B+pJ*dm0mfg_jRj3'kTZ3)@:91pk%L0*OJA-]J>HNQ18%VR-Tb$1pr??qRMEp'_2!LT#P)VMVdbg8DDQ.HsS)HmBQ,diiZ%VV^4AkZG+k1(qsm'^j"`6(6FSD7mSVK8b,%jgcG^kI&m\`94GO/m^b@S5K]'3MIK;5$Ic+`3(1L]h:mokpjG_0`,Oc&R?J4W%s(6'@YBGk%_MDksP%3K]:A[o9.GlVm%^/SM$U\%1d*X(_0[Cu6<MGl?s`Ca8Fj(5@6><d%U+u`bonO\0=c?pn`Yq.T(:9_+fou3fYANq$1IC:#6rquMrBZT.>"2V:^@n1+\@X)-9)Xo%(I8qK0;L4IMm\a@mGros,%LH-P\&UUk(V(J]:qb@m&Tul>\e_I%nI\a??1iqoRR;fOiL0f"*2)'["1CpC#iCCg?%D+j_%Qli]aT"%jT<l^3lrEK`&@6Q5f)UB*M,Xu=TG.C1au`K>!`4jC2F5i6/r"PRF0c>"3p+]5]+T:`Y?qJ/(]h'<Z4sOQ;^c5BI$skI.DAUZk-*W%W#CXDYuE8"T2L[\78OR`K+LU@'+p5%<[5tJ*,82.Bl5q"<K0I'QBRnR0T=+@efI6T7;`G@=\(@dL0Q%169:<',!med^tdEU,agA@%$jVDncj:\*9e"?23]TuoN^,1^3j/^NC;;MX1c_>=Pc`;a9pH1:!m>qj"\D,SLkK2WP2t*DE-t(%#oos>1%"%"j#("?>=9WZLH?HA%RDgS./LW9`]A'VNqlBk`k0?[D()9n6TH^N+,aBJrZO2s%bj(*ad,ZKD2;5u8V:(4%0GbPTc;$*=)gX]&H+-nR/4I(2&DL,d$=9r=%_]`:&=I+Oi(89AZ=c./-,IW&8b#6Hp@ejuSL/B=;W&DW%PO"I0#UZ2[bPC_`bS[@9=lbe0VJhC57PTB58BdD:$^pLK'+mW/$(EL8%8V0EmNRDbj,H.7J3)\JLUm^=\q=9ka\L+2[ok[cUV1+(DYR!6Pmpr$>8B4V,C,j_I$8K_1bmY;eVI6T#O<ioV'G_k(B:_rFZ?^U#%7fuXYK2,lQDb@Ue9rI7gm91%_YTup2d-84h#?JGGQrg7=pOd6u1rlm>iG78d)CWIK\&Dro%5,W2%R!1%,#Amaet<J>'rmOl_/%_=%\:GB5V3G(]*.lntl'LNA(TW/l$VZImdGDPYTINkCbUZ;Mjim"HT^"pJ=0:bDC/^A4@r"sjf'N'&,`)f-7GKS40IKFuG9W!dg(Zh'%ZGLE_;EI)pgT+C4;0@bTjf$K#A<I#!AaoU!##HqIAKW\LdX`7a8Ig>0,mFVZM]nXf:O:8=TV/Ue0:i0I4i/uiW018Q$73*Db<_]j%8RGlBjB!@0iDrRS0Vm\\-Z%ncem/clV^nJ86JU]uc47HKjUb9a0/4a4;@rGBIB\g^981H\dL_USVXe>SLQmRahLtk-VQ3a/rE[n&%C?RcCG)*M-@UlX1QEP`T-eVM5Pf>!7lf."a8=D+Y.L74RaS6,/qDFZ!eE'r-c*E53*,pPti@]'/5\CF<-`0D>U-sc?+=/QTh4@T:%;])NLZI\]%_OIA=p8#QqXHlQ^.r&"=&Cop%QkcHa,h1YO6`Dc;F<MgO_&JWHZc[F"-cXqS/9R]s0s60@SBARLLgO_7=N.eUK.K#r%1+P(I']UYOTrAZXkZ*V>(g!\)(:9s3AnGm1g(<5s+M"39aJL9#Xqds;UK?pB$Rl8FeR7$\B4trEOSTYYN"?Ek%,HlGLKI3s92Gpb%Y<bJp%EL?41DYmITqljP\Y!l3G)PHGX3?eE1ndhUH^`7DeAB5'ZT>Lu4"=D"TLqdDR(Rmc]Y=e"%HtXFnHO,NTiP]</hX)j>c6,P%qXl1/:?]sO)G8eNg[g-$DM>h:Ns+7n;L`!34^N*&4o`+5>Gd*V1BJ(9M9&#1^9H:+Zq8^4Q?nNLe"/4paJ.g]eBUjZ4O/Y5_W_]1%JF_/MZkkrL?)S&\BMLN/jqBD.D[UHNG7We>'EV3NdIS2HS%7I0+<\!\^^*3d$DbmZ?c\pkP^`mk`8W<rkVb)JP4)_T[(p!:3FR:p%,p)keXgo%\Iu,b5gb!Nia(\(eAm>^Q/\)4]">-eu&Ot&L/%5^3%a5:[-%r4&8sp:EbFrOes&'rD3"JVrB;PZCD\@Nq!U05[B;!4m%V;i^,/>*Z"e(K6;-&?F41S66*5b>B9Xt:W&NP;nn&s5Ns=CO@.ViXjZnu?gI_`;*0-e!nlBMBr#b]F&X/D%H1KkI%odi,oE^;nG3%?UBYuk*FA!9,h"rGP@Vi>d?'$\'tbo'GRiBUo@0'OdS5D_Br('Q))fZ>JbV06=>CGA3k2BC*oi9g3`CV^VJB^YT1TSH`Ac)0GQJ'%G>Q3mn<U)q"#=!LQU65deeg*U>=oIpT,:4F<2h)PVa3?1`0r@a>u2I_orAI;CC$Ws%%G/./If>(WHA[)b`RNQF;,rfX_WU+eLEkk%OpV\HY?6+H&m3YP520[]\R/Y+?B_Tm9W<[YY92XGYh=3;RRJO4fnsjDZ4W3q8L^nA]a0dWXC"dJf7CmKDb/)gHVt\s`m,;u,)^27%dVWTqL/NR=PRD62*6tc/3LjM>gMhmqBYt_]+bqk8`BXT!&p!&PL=2"T*mV"WD)_WZ(sX6>2;d/-#*%5h1Md;k`tOcPXiH*t!B2PJ%mn3f"[bna"5bb_f/GN'k-R*]?k\Vmjg3iM#Q=fVFlTGi*>KN#YOH\gm]rb_o$-NWtW`sYa/G4\,CT'e$$oc]g;]_H28<oC7J09b=%Qrb47P0bXEj/JZ(Zm(Es;c5]lS5M:`[qrW1p@^diE9TWpH=%.kUYj!+A/U^\605Dd=<b&#[*BJRX%W`GR3dNB&+t;U.ige=/Y%Db%?uFYp0bur;+&YTKW%9sr`7/I1o@Djm06P-U6q12mJsCakQlkch:m>%m*0@gbWj=`7Q;FAk*@$EKCFP&F%rVL'O`uBi\%?:MYf,qS%lkPhr"XfPrFXc_-PeFB7"%*=4N9*mf:b8"O9,oahP\#poHQ%bf1I+sA6"Qcr&s,p@3FZ%KR$(PURH'!1aj`qa0H6A.cEE4N%Af4,%,X8&>rOtLhd]R&k4eQSSnk*.`(eB$>@U\Pb7-+,`Ilc>E.U*IjD5bC,_19J%,8Shd<V\/hXF2pqDYTSN*2W>TelXn(pE?R="'`Wr%e-[ic3&hK:)s"eR+YcAS<e1i@TQU\GQ([m3B&3M#bo:+hD+\OjQd$J-QQ^:0<94RkZNB&:Y?4\^?*RKK/[Wf4H+(NZ&oKuJOo8VJ%NEr`>)"3Cu#%R\7TFtC,HY]Xoh>:ggEU9?`0pu3H#UpOulV%3mYhK&P-9[eQV,?RC<_^p"*13O!ZE!%AOsZe_`8EG+Z@Be_BR(=(%;duEbM25XBGs8$d=KB/9(Y$`(G1P?tlM;=,#[<6`W9-ROj"3r.(rDcg),6tZ!;a9<+8ZpBU+`WAT[PmeOYrFG]R,l16t+N\&E,03%*X&V((aoiQ^nAgadS>`3W.\O2.1ic4%?gUJPbMQDVZROc&7:7U*Z%^1]@?rca>7oX&IZiO,`0U"N9l'H2/PD\RLuL>iFW9D8h%'E%3!?Xqb7-tM<M;&tQ?KEoXlgMrJ/re:k>"kf\]9e6![);biqTqr`":UA[gq'Q_9N\#g)W>8[c/VU<$I68;c5]fB)a>?f:b:Sl!g`G%-F"SqSUAsCfW1:9Y:p?QW;/,,Tg,de";=X$'4E:W,!huuI=3r;1m(C<8Sq!jPO!<FSi^5:kJl/*CrK4>i.bCJB;@\r4ofXK6PTVK%:^.[B"&Vra:cV^HVuHun?6UMNa$Khn/$Pg0,c1=5Cs5^H+Cf^m.uh)!&J7@qUA8!47QO7:r73V"_&Po6-J4HsR>RthMaE5us,f!W%/Wq5u2UZ:(IftJHJ]8DQbY"amg"c[LXCa#koIE*U>Vq+Z^NfIuX1<6C$@sgV7%S/X(Kf7k0*hWp54B/i]7InF6hrDQgWg%ha9kjc%8aYS:90Wr`NuupP?o>uIBt</u!XVS-i9sc1-,!j.NP:rei]<06D'<<$FKm1=J<qN*,ARHPbY%e)dbn[:2;Z,XJ^TE,c,BiDP>_hl%5PWaCp^Jc_W=DA\1_MK\&Ak^`Ca-aM&>@V[$V6*82'sT)^nu?*5V(lb>fqq#.#u81,=*Q[W&4^c;el_;KK^V4P(KN>TpLS'Ba\oP%.cH!CV-)pb0i!;]@8K6f5[YiNL'fMqKISSm:UON)'j9%VP1o`NE2ct%-%=(SG+l.I0U.6&C`BBDHha)q8i&eo%)gLa#SGUP(5?kV%&ql.i(e[l*V%,I_)040DEi`QF/"J@XTH3?"Be3N"6:T<$hm!ZW>Brr^g9Ff_\[:4uVMaKYXonbB]T)uBEZqWs@MD^F>+:l0ne)35%$OKWQZ(SHLh'^4_Ze(*$(%lFW61eh;90=_I7K(UF3AmS#)S0a;-='FG.^;eoZAM96Co8SQ8raII=:g)4#aDZiI"IEeWl+u3&ViF9%HH'r2H8:,ndB@Hd\H@.1ZcAiG*MsCTZ+S(9[e^?+e`AuC`*SgtU)"Uo_XM-)4N-'0&4%sC+m<>`3=@54&_g\cP=9DSCJ,iF)<m!f%7j9k.9UOD"d1c%^`R5,]"T3sU;=k#ho'>4jIu@e#Y9gtbJ3hSt21L^.#Uke+OGCS<aLj$4f1)2D7SeHNU<YA=9ha<kJBgn>c&o6c%:P:B]&:EYWhnf&=%625Z_c@mhH++=k!e>KM!5<R^_4.-lo_qB)ZD]T+h'\NcM1kUN@<t$VKD_/HnnU#%Y8r8nRLJb&1<?X>KD_/H%nnU#%Y8r8nRLJb&1<?BhkrDIQmu%9V_E."D)N4qh>EJWl\(2_:0VGmG>WJ=ieV->GW4.R:D[@URkSga&+0hr(<$?hX6:O&7c5MA]%+q::0Z?pkaD:`hPG$mq3(Rj"e9RHGQ1u"^ZZZsk9Ynf!/,=t:H4WIq#:Q0m+balYRH9tSg/1M,qmHjIu-uc(m/7C#^]_e+D=0`%8%A+4MSje()@q_<Cg[VbU\5*3'?YC7&pCU'pl"?D"[b.eR"[FQa<5J/$V#6XOE80tOX<*W<_3Ah*8P0i;D?KaU`W@qUP/W?&c'qc/1%dK\)O0.%L0WErtXj1QQa+@n+!k#m6JKZ$.cVrU/n72?VnTQYLX3F>H59UJ&@O6aIRnSaJ&1`tDUHfhM[/lC+>n654T[=Vlno7-LL%jQ+X:IJi-c(]X-nhu*-<J,Aj/k<K"A_fn?Dqo=2sTOf--If7=U^O(D,ni+<F5CW@o00fI.o>bd!r7<%iq6(lir:?Q[jl^!!r9(pI%Pr7GTs5D#5(iS3,pT-T,s*n;/08D2JrQhZ2If8s&TDnc+T0@`"gY`"mq>Ai_J,Jj"mtuih/7JOMN;M?OJ,]8aDas]/f7+n*a"Mr8%n\>+Uit&nQr8KZM>Q<sVJ,&1kI/!*es7CMbp\;]\ro\KTqYhRcqX2\5msfZ]l*'"ChsWeDqr*;ch"Q</rpoTWT>(?kcThF$rPr:F%ji;j$aRr=os2?YjrdXk?a8Z7HE%De~>%AI9_PrivateDataEnd