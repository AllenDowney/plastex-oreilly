%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: coplot1.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 445 401
%%HiResBoundingBox: 0 0 444.2910 400.8320
%%CropBox: 0 0 444.2910 400.8320
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 116 8%%BeginData: 11040 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD08FFA87EA884A8A8A884A8A8A884A8A8A884A8A8A884A8A8A884%A8A8A884A8A8A884A8A8A884A8A8A884A8A8A884A8A8A884A8A8A884A8A8%A884A8A8A884A8A8A884A8A8A884A8A8A884A8A8A884A8A8A884A8A8A884%A8A8A884A8A8A884A8A8A884A8A8A884A8A8A884A8A8A884A8A8A884A8A8%A884A8A8A87DFD08FF7EFD76FFA8FD08FFA8FD76FFA8FD08FF7DFD71FFA8%7DA8FFFFA8FD08FFA8FD72FF7DAFFFFFA8FD08FF84FD76FFA8FD08FFA8FD%76FF7DFD08FF7DFD76FFA8FD08FFA8FD76FF84FD08FF7DFD76FFA8FFFFA9%FD05FFA8FD70FFA8FD05FFA87D7D2E7EFD04FFA8FD6FFFA87D7DFD04FFA8%A8527D7DFFFFFF84A8FD70FFA8FD05FFA87D5227A8FFFFA8FF7DFD76FFA8%FF7DFFA8FD04FF7DFD76FF7DFD08FF7DFD76FFA8FD08FF7EFD76FF84FD08%FF7DFD76FFA8FD08FF7DFD76FFA8FD08FF7DFD76FFA8FD08FF7DFD76FFA8%FD08FF7DFD76FFA8FD08FF7DFD76FF7DFD08FF7DFD6DFFA87DA8FD06FFA8%FD08FF7EFD6EFF7DFD07FF84FD08FF7DFD76FFA8FD08FF7DFD3EFFA87DA8%FD35FFA8FD08FF7DFD3EFFA87DFD2CFFA8A8FD08FFA8FD08FF7DFD3AFF7D%A8FD04FFA8FD2BFF7DA8FD08FFA8A87D52FD05FF7DFD39FFA884A8FFFFFF%7D7DFD2BFFA8A8FD08FFA884537D7DFFFFFFA87DFD3FFFA8A8FD35FF7DA8%5227A8FFFFA8A852FD76FFA8A8527DA8FD04FF84FD41FFA97DFD28FFA8A8%FD09FF84FD08FF7DFD3FFFA8A87E84A8FD27FF7D7DFD09FFA8FD08FF7DFD%3BFFA87DFFFFA87DA8FD06FFA8FD2DFFA8FD08FF7DFD3AFFA85252A8FD05%FFA8FFFFFFA87D7DFD2CFFA8FD08FF7DFD28FFA8FD0FFFA8FFFFFF7E7EFD%04FFA87DA8FFFFFF847EFD24FF7DA8FD06FFA8FD08FF7DFD05FF7D7DA8FD%1FFF7D7DA8FD0BFF7DA8FFA852FFFF52F8A8A8FFFFA87D7E52FFFFA852A8%FD22FFA87DA8FD06FFA8FD08FF7DFD04FF7DA87DFD21FFA8A87DFD0AFFA8%52FFAFA8FFFF7D52527DA8FD04FFA8FD30FF7DFD08FF7DFFFFFFA87DA8FD%23FF7D53A8FD09FFA87D7DFD05FFA8A8A8FFFFFFA87D7DA8A8FD22FFA852%A8FD09FFA8FD08FF7EFD04FFA8A8FD23FFA959FD0BFFA8FFA8FD09FF7D7D%277D597D7DFD22FFA8A8FD09FF84FD08FF7DFD04FF7D7DFFFFA852A8FD2C%FFA87D7DFFFFA8A8FFFFFFA85252A8FF7E2E52A8A8A8FD2AFFA8FD08FF7D%FFFFFFA852FFFFFFA9A8FD2EFFA8FFFFFF7DA8FD04FFA8FFFFFFA8537DFF%7D7DA8FD1AFFAF52A8FD0CFFA8FD08FF7DFFFFFFA8A8A8FFFFFFA8A8FD1E%FFA8A8A8FD0DFFA8FF7DA8FFFFA8A8A8FFFFA8A8FFA8FFFF7D7DFD1BFFA8%A8A8FD05FFA8FD06FFA8FD08FF7DFD08FFA87D7DFD1FFF7DA8A8A87DFD09%FF59A8FF7E7DFFFFA859FFFFFF7DA8A87D527D52FD04FFA87DFFA8A8FD1A%FFA87D7DFD05FFA8FD08FF7DFD08FFA87DFD21FFFD047DA8FD08FFA8A8FF%FFFFA8A9FFA87DA8FFFFA8FF7D7D5252A8FFFFFF7D7DA87E7DFFA87DA8FD%17FFA8FD06FFA8FD08FF7DFD2CFFA8FD10FFA853FFA87D52A8FD05FFA87D%A8FD06FFA8FFFFFF7DFD10FFA87DFD0DFF7DFD08FF7DFD07FF7DFD27FFA8%FF59A8FD06FF5384FFFFA8A8FFFFA8A8A8FFA8FD0BFFA87D7EFD13FFA8A8%FFFF7DFD0AFFA8FFFFA8FD05FF84FD05FFA87D52A8FD1DFFA8FD07FF7D7D%A884A8FFA8A8A8FFA8527DFD05FF7DA8FFFFA87DA8FD05FF7DA8FD04FF7D%FD17FF7D7DFFFFA8A8FD06FF847D7D527DFFFFA8A852FD04FFA8525252FD%1DFFA87D7EFD06FFA8A8FFFFFF7D5952A8FFFF7DA8FD05FFA87DFFFFFF52%7DFD05FF5227FFFF7EA8FD08FFA8A8FD0FFF7DA8FF7D7DA87DFD04FFA884%2E7D7DFFFFFFA87DFD05FFA87DA8FD1EFF7DFD0DFFA8FD04FFA87DFFA8A9%FD07FFA8A8FD05FFA8A87DA87DA8FD08FF7DA8FD0FFFA859FFFFFFA87DA8%FFFFFFA8FFFFA8FD05FF7DFD06FFA8FD1EFFA87DA8FD0DFF7D7DFFFF7DA8%A87D7DFFA87DA8A8A87D7DFD07FFA87DA8FD08FFA87DA8FD10FFA8A8FFFF%FFA8A8FD04FFA8FD08FF7DFD1CFFA8FD09FF7DFFFFFF7DFFFFA8A8FD05FF%A8A8A8FD05FFA8FFFFA87DA87DA87DA8A8FD07FFA8A8A8FFA9FD05FFA87D%FD09FFA8A8FFA8FD09FF52A8FD04FFA8FD08FF7DFD07FFA8FD14FF7D53FD%07FF7DA8FFFF7D7DA8A852A8FFA852FF7D7DA8FD05FFA8FD09FFA87D7DFF%FFFFA8A8FFFF7DA8A8527DFD05FFA8FF7DA8FFFFA87DA8FF59847D7DA8FF%FF7D7DFFA8FFFFA87DA8FFFFFFA8FD08FF7DFD06FF7D7DA8FD13FFA8FD08%FFA87DFFA85253A87DFFFFFFA8A8A87D7DFFA8A8FFFFFFA87DFD05FFA8FF%FFFFA8A87DA8FFA87DFFFF7EA8A852A8FD07FFA8A8FFFFFF7DFD05FF84FF%FFFF84A9A87DA8FFFFA87DFFFFFF7DFD08FF7DFD07FFA8FD21FF7DA8A8A8%7DFD05FF7DA8FFA852A8FFFF7DA8FD04FFA87DA8FFFFFFA87DA8FFA8FFFF%FF7DA8FD09FFA8A8FFFFFFA8A87D84A8FFA884A8FD05FF7EFD08FFA8FD08%FF7EFD0BFFA87DFD0FFFA8FD0AFFA8A8FFFFFFA85259FD08FFA8FFFF7DA8%FD06FF7DFD0CFF7E7EFD09FF7DA8FFFFA8A87DA87D7DA8A87DFD08FFA8A8%FD05FF84FD08FF7DFD0BFFA87DA8FD0DFFA87D7DA8FFFFFFA8A8FFFFFF7D%7DFD04FF52527DFD07FF52A8A87D7DFD06FF7D7DFD0BFF527DFD0AFFA9FF%A87D7DFFFFFFA8FD07FFA8A859A87DA8FD05FFA8FD08FF7DFD1CFFA8A87D%FFFFFF59A8A8FFFFFFA8A8FD04FF7EA8FD07FFA87DA8FD08FFA8A8FFA8A8%FFFFA8A8FD05FFA8FFA8FD05FFA8FD05FFA8FFFFFFA8A8FD06FFA87DA8A8%A8FD07FFA8FD08FF7DFD19FFA8A8FFFFA8A8FFA87DA8A87D52FFFFA852A8%A8FD0CFF7D7DFD0BFF7D7DFFFF53A8A8A8FD04FF7D7DA8FFFFFFA87D7DFD%04FFA8FD057DFFFF7EA8FFFFFF7DFD0AFFA8FD08FF7DFD15FFA8FFFFFF7E%7DFD05FF7D7DFFFFA87D7DFFFFFF847DA8FF7DA8FD06FFA8A8A8FD12FFA8%7DFD05FFA8FFFFFFA87D7DFFA8A8FFFF52A8A8847DA8FF847D7D7DFD0DFF%A8FD08FF7DFD15FF52A8FFFFA8FFFFA87DFFFFAF52A8FFFF7EA8FD04FFA8%FFA87DA8FF7D847DFF7D7D52A8FD0DFFA852A859A8FD09FFA859A87DFFFF%A87DFFA87DFFFF7D7D7D8452FFA8A8A9A87DFD0AFFA8FD08FF7DFD14FFFD%05A8FFFFFF52527DFFFF7DA8FD0DFFA87D7DA8FFFF7DFD0BFFA87DFFFFA8%A8FFA8A8FD09FF52527DFFA87D7EFD05FFA87D7DA8FD06FF7D527DFD09FF%7DFD08FF7DFD0BFF7D7DFD06FFA87DA8A852A8FFFFFFA8527DA8FFFFFF7D%FD0DFFA8FFFFFF7D7DA8FD04FFA8A8FFA8A8FFA87DFD0CFFA8A8FFFFA87D%7DFFA82852A8FFA8FFFFFFA8FD08FFA8287DFD09FFA8FD08FF7EFD0AFFA8%A87DFD07FFA8A859A8FD04FFA8A87DA87DFFA87D84FD11FFA8FD04FFA87D%7D7DA859AFFD0EFF7DA8FD05FFA85253527D7DA8FD0DFFA8FD0AFF84FD08%FF7DFD09FF7D7DA8FD07FFA8527D7D52A8FFFF7D52527DA8A8FFFFA8FD13%FFA8A8FFFF7D7E7D7DA8A8FD0CFFA87DA8FFA8FD05FFFD047D52847D7D7D%FD09FFA8A8FFFF7D7D52A9FD05FFA8FD08FF7DFD0AFFA87E7EFD06FFA87D%AFFFA8A8FFFFFF7DA87DA8FFFFA8A8FD13FFA852FD09FFA8FD0BFF7DFD0E%FFA852A8FD05FFA87DFFFF7D7DFFFFA87DA8FD06FFA8A87D52FFFFFFA8A8%7DFD07FFA8FFFFFF7D7DFFFFA87DFFA852A9FD06FFA8A8A87EA8FFFF8459%FD0BFFA8FFA8FD05FFA8A8FD08FFA87D7DFD06FFA87DFD0BFF7D7EFFFFA8%FF7D7DFD06FF5252A8FFA8A8FD0BFFA87D527D7DFFFFFF7E7DFD06FF7D7D%FFFFFFA87DA8FF7D7DFFFFA8FD07FFA87DFD05FF7DA8FD0BFF7D7D7D7EFD%05FFA8FD09FFA8FD07FFA87DA8FD09FFA87DA8FFA87DA8A87DFD06FFA852%A8FD0EFFA8FF7D7DFD05FF7DFD06FFA8A8FFA9A8A87D7EA852A8FD0BFFA8%7DFFA87DA87DA8FFFFA87D84FD06FF7DA884FD06FFA852FD0FFF52A8FD07%FFA853FD047DFFA8FF7D7DA8FFFFA87DFD04FFA8A8FD0EFFA8FD08FF7DFD%09FFA853A87D7D7DA8A8FFFFFFA8A87EFD04FFA87D7DA87D27A8FD04FF52%7D7DFD04FFA8FD0BFFA8FD06FF7DFD08FFA8A8FD08FFFD04A8FFA87D52A8%7DFD04A87DA8A87DFFFFFFA87D52FD0BFF7DFD08FF7DFD09FFA8A8A87D52%A87E7DA8FFA87D527DA8FFFFFF7D7DA8FFA8A8FFFFFFFD04A8FD04FFA852%A8FD0AFF7DA8FD04FFA87D7DFD0BFFA8FD0BFF7D7DA8FFFFA852FFFFFF7D%A8FFA8A8A8527EA8FD0AFFA8FD08FF7EFD0CFF7D27A8FFA8FFFFFFA8A87D%FD04FF7D5253A8FFFFFFA8A87DA8FD07FFA8A8FD0AFFA8A8FD05FFA8FD0B%FF847DA8FFFFFFA8FD0FFFA8A87D7D7DA8FD0EFF84FD08FF7DFD04FFA852%A8FFFFFFA87D7D52A87DA8FD04FFA87DA8FFFFFFA8532759FFFFFF7D53FD%0AFF7D7DFFA8A8FD1AFF7EFFFFFFA87D7DFD0EFFA87DA87DFFA8FD0EFFA8%FD08FF7DFD04FFA87D7DFFA8FF7D7DA8FFA8527DA8A8FFA87DA8FF7EFFFF%FFA8527DA852FD07FFA8FD05FFA8A8FFA87DFD07FFA8FD11FFA8FD05FFA8%FD06FFA87DA8FD1AFFA8FD08FF7DFD05FF7DA87D7DA8FF7DA8FFA87DFF52%52A8FF7DFF7D52A8A852A8FFFFA8A8A8FD05FFA87DA8FD07FFA8A8FFFFFD%04A8527DA8FD0FFF7D7DA8FD0BFF7D7D53A8FD19FFA8FD08FF7DFD08FF7D%A8A87E7DFFA87DFFFF7DFFA87EFFA8277DFD06FFA8FFFFFFA8FFFFFFA8FD%0DFF7D7D7DA8FD10FF7D7DA8FD29FFA8FD08FF7DFD08FFA853FFFFFFA8A8%527DFFFFFFA852FFFF7D7EFD05FFA87DA8FFA87DA8FD24FFA8A8FD2AFFA8%FD08FF7DFD09FFA87DFFFF7D7DA87DA8A8FFA87DA8FD09FFA8FFFFFFA87D%84FD09FFA8FD0AFFA8A8FD13FF7DA8FD24FF7DFD08FF7DFD09FFA87DA8FF%A8A8FFA852A8FFFFFF7DF87DFD0CFF7DA8FD08FFA87D7DFF7DA8FD06FF7D%A8FD0EFF7D7DA8FFA87D7DFFA87DA8FD20FFA8FD08FF7EFD10FF7D7DFD04%FF7D527DFD13FF7DA8FFFFA8FFA87DA8FD09FF7DFD0CFFA87DFD07FF7DA8%FFFFA8A8FD1CFF84FD08FF7DFD05FF7DFD09FFA87D5284FD04FFA8FF7DA8%A8FD08FFA87D7DA8FFFFFFA87D7DFD05FFA8FFFFA852A8FD04FF53527DFD%11FFA8FD06FF7E7DFD1CFFA8FD08FF7DFD04FFA87DA8FFFFFF84FFFFFF84%FFFFA8A8FFA8A8FFFFA8A87D7DA8FD07FFA87D7DA8FD04FFA8FD0AFFA8A8%FD04FFA8A8FFA9FD0FFF52A8FFA8A8FFFFFFA8FF7DA8FD1AFFA8FD08FF7D%FD04FFA852FFFFFFFD047D527DA8FFA8A8FF7D52FD05FFA8FFFFA87DFD05%FFA8FD05FF7D7DA8FD12FF7D52FD0EFFA8A8FF52A8FD05FFA87DFD1AFFA8%FD08FF7DFD04FFA8A8FD06FF7DA8FFFF7D7D7DFD0BFFA87DA8FD0BFFA8FD%13FFA8A8FD04FFA8A8FD2EFFA87D7D52A8FD04FF7DFFFFFF7D7EFFFFA8FF%FFFFA8FFFFFFA87DA8FD0DFFA8FD06FFA87DFD1EFF7D7DFD07FFA8FD05FF%A8FD20FFA8A8527D7DFFFFFFA87DFFFFFFA8A8FFA87DA8FFA87D84FFA8FD%17FF7D84FD26FF7D7DA8FFFFFF7E7DA8FD1FFF7DFFA852FFFFFFA8A852FD%07FF7DFFFFFF7DFFA87D7DFD0DFF7DA8FD05FFA87DFFFFFF7DA8FD08FFA8%7D7DFD19FFA8FD05FFA8FD20FFA8FFA87DFD05FF84FD0EFFA8FD09FF7D7D%A8FFFFA87DFD05FFA8A8A8FFFF7DA8FD08FFA8527DFD40FF84FD08FF7DFD%17FF847D527DA8FD0AFF7D59FD16FF7E7DFD36FFA8FD08FF7DFD1AFF7DA8%FD0AFFA8FD17FF7DA8FD36FFA8FD08FF7DFD0BFF7D7DA8FD11FFA8FD07FF%A87DA8FD05FFA8FFFFA853FD42FFA8FD08FF7DFD0BFFA87DFD11FFA97D7D%FD06FFA87DFD05FF7D7EFFFFA8A8FD11FFA87DFD2FFFA8FD08FF7DFD1FFF%5252A8FD06FFA8A8FD04FFA8A8FD15FFA8A8FD2FFFA8FD08FF7DFD1FFF7D%7DFD07FF7DA8FD06FF7DFD45FF7DFD08FF7DFD28FFA8A8FD05FF7D7DA8FD%44FFA8FD08FF7EFD33FFAFFD42FF84FD08FF7DFD23FFA8FD0EFFA852FD0D%FF7D84FD33FFA8FD08FF7DFD22FFA87DA8FD0EFFA8FD0DFFA8A8FD33FFA8%FD08FF7DFD23FF7DFD1BFF7DA8FD35FFA8FD08FF7DFD3FFF7EA8FD35FFA8%FD08FF7DFD76FFA8FF7D7DA8FD04FF7DFD2DFFA8A8FD47FF7D7D7D527DFD%04FF7DFD2DFF7D7DFD47FFA8FF5252A8FD04FF7DFD76FF847D527DA8FFFF%A8A87DFD76FFA8FD08FFA8A8FFAFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FF7DFFA852FD05FFA8A87DA853FD1B7D52FD1B7D59FD%387DA87DA8FFA87DFD09FFA8FD1BFFA8FD1AFFA8FD1BFFA8FD1BFFA8FD10%FFA8FD1BFFA8FD1BFFA8FDC7FFA87DA8FD19FFA8A8A8FD18FF7E7DFD1AFF%A87DFD19FFA87DA8FD0EFFA8A8527DFD18FFA8FF27FD18FFA8527DA8FD19%FF527DFD19FFA8527DFD0DFF7D7D595284FD17FF7D7DA87DA8FD17FFA87D%52A8FD19FFA852FD19FFA8527DFD0FFFA852A8FD1AFF7DFD19FF7DA8FD1A%FFA8A8FD19FFA852A8FD82FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:58:15+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T13:58:16+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T13:58:16+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>232</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA6AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWMeW/Lfl240aCa&#xA;fS7SWaQyNJK8ETMxMjblitThKpn/AIU8rf8AVnsf+kaH/mnArv8ACnlb/qz2P/SND/zTirv8KeVv&#xA;+rPY/wDSND/zTirv8KeVv+rPY/8ASND/AM04q7/Cnlb/AKs9j/0jQ/8ANOKu/wAKeVv+rPY/9I0P&#xA;/NOKu/wp5W/6s9j/ANI0P/NOKu/wp5W/6s9j/wBI0P8AzTirv8KeVv8Aqz2P/SND/wA04q7/AAp5&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:DEE858BB51D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:DFE858BB51D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -400.832 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400.832 li
444.291 400.832 li
444.291 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
231.576 205.805 mo
231.576 204.314 230.367 203.105 228.875 203.105 cv
227.385 203.105 226.176 204.314 226.176 205.805 cv
226.176 207.296 227.385 208.505 228.875 208.505 cv
230.367 208.505 231.576 207.296 231.576 205.805 cv
58.6558 238.325 mo
58.6558 236.835 57.4463 235.625 55.9561 235.625 cv
54.4653 235.625 53.2559 236.835 53.2559 238.325 cv
53.2559 239.815 54.4653 241.025 55.9561 241.025 cv
57.4463 241.025 58.6558 239.815 58.6558 238.325 cv
145.896 243.365 mo
145.896 241.875 144.686 240.665 143.196 240.665 cv
141.706 240.665 140.496 241.875 140.496 243.365 cv
140.496 244.855 141.706 246.065 143.196 246.065 cv
144.686 246.065 145.896 244.855 145.896 243.365 cv
221.496 132.005 mo
221.496 130.515 220.286 129.305 218.796 129.305 cv
217.306 129.305 216.096 130.515 216.096 132.005 cv
216.096 133.496 217.306 134.705 218.796 134.705 cv
220.286 134.705 221.496 133.496 221.496 132.005 cv
406.176 168.005 mo
406.176 166.515 404.967 165.305 403.477 165.305 cv
401.986 165.305 400.775 166.515 400.775 168.005 cv
400.775 169.496 401.986 170.705 403.477 170.705 cv
404.967 170.705 406.176 169.496 406.176 168.005 cv
287.016 123.245 mo
287.016 121.755 285.807 120.545 284.316 120.545 cv
282.826 120.545 281.615 121.755 281.615 123.245 cv
281.615 124.735 282.826 125.945 284.316 125.945 cv
285.807 125.945 287.016 124.735 287.016 123.245 cv
200.136 238.686 mo
200.136 237.194 198.926 235.985 197.436 235.985 cv
195.945 235.985 194.736 237.194 194.736 238.686 cv
194.736 240.176 195.945 241.385 197.436 241.385 cv
198.926 241.385 200.136 240.176 200.136 238.686 cv
311.977 156.365 mo
311.977 154.875 310.766 153.665 309.275 153.665 cv
307.785 153.665 306.576 154.875 306.576 156.365 cv
306.576 157.855 307.785 159.065 309.275 159.065 cv
310.766 159.065 311.977 157.855 311.977 156.365 cv
395.615 162.485 mo
395.615 160.995 394.406 159.785 392.916 159.785 cv
391.426 159.785 390.217 160.995 390.217 162.485 cv
390.217 163.976 391.426 165.185 392.916 165.185 cv
394.406 165.185 395.615 163.976 395.615 162.485 cv
348.695 175.205 mo
348.695 173.715 347.486 172.505 345.996 172.505 cv
344.506 172.505 343.295 173.715 343.295 175.205 cv
343.295 176.695 344.506 177.905 345.996 177.905 cv
347.486 177.905 348.695 176.695 348.695 175.205 cv
245.256 146.285 mo
245.256 144.794 244.047 143.585 242.557 143.585 cv
241.066 143.585 239.855 144.794 239.855 146.285 cv
239.855 147.775 241.066 148.985 242.557 148.985 cv
244.047 148.985 245.256 147.775 245.256 146.285 cv
165.576 210.845 mo
165.576 209.354 164.366 208.146 162.876 208.146 cv
161.385 208.146 160.176 209.354 160.176 210.845 cv
160.176 212.336 161.385 213.545 162.876 213.545 cv
164.366 213.545 165.576 212.336 165.576 210.845 cv
174.096 319.565 mo
174.096 318.074 172.886 316.865 171.396 316.865 cv
169.905 316.865 168.696 318.074 168.696 319.565 cv
168.696 321.056 169.905 322.265 171.396 322.265 cv
172.886 322.265 174.096 321.056 174.096 319.565 cv
409.416 174.725 mo
409.416 173.235 408.207 172.025 406.717 172.025 cv
405.225 172.025 404.016 173.235 404.016 174.725 cv
404.016 176.215 405.225 177.425 406.717 177.425 cv
408.207 177.425 409.416 176.215 409.416 174.725 cv
260.736 160.685 mo
260.736 159.195 259.525 157.985 258.035 157.985 cv
256.545 157.985 255.336 159.195 255.336 160.685 cv
255.336 162.175 256.545 163.385 258.035 163.385 cv
259.525 163.385 260.736 162.175 260.736 160.685 cv
284.496 145.085 mo
284.496 143.595 283.287 142.385 281.795 142.385 cv
280.305 142.385 279.096 143.595 279.096 145.085 cv
279.096 146.575 280.305 147.785 281.795 147.785 cv
283.287 147.785 284.496 146.575 284.496 145.085 cv
390.096 208.686 mo
390.096 207.194 388.887 205.985 387.396 205.985 cv
385.906 205.985 384.695 207.194 384.695 208.686 cv
384.695 210.176 385.906 211.385 387.396 211.385 cv
388.887 211.385 390.096 210.176 390.096 208.686 cv
108.936 213.365 mo
108.936 211.875 107.726 210.665 106.236 210.665 cv
104.746 210.665 103.536 211.875 103.536 213.365 cv
103.536 214.855 104.746 216.065 106.236 216.065 cv
107.726 216.065 108.936 214.855 108.936 213.365 cv
349.656 288.005 mo
349.656 286.515 348.445 285.305 346.955 285.305 cv
345.465 285.305 344.256 286.515 344.256 288.005 cv
344.256 289.495 345.465 290.705 346.955 290.705 cv
348.445 290.705 349.656 289.495 349.656 288.005 cv
105.456 228.485 mo
105.456 226.994 104.246 225.785 102.756 225.785 cv
101.266 225.785 100.056 226.994 100.056 228.485 cv
100.056 229.976 101.266 231.186 102.756 231.186 cv
104.246 231.186 105.456 229.976 105.456 228.485 cv
205.776 215.765 mo
205.776 214.274 204.566 213.065 203.076 213.065 cv
201.585 213.065 200.376 214.274 200.376 215.765 cv
200.376 217.256 201.585 218.465 203.076 218.465 cv
204.566 218.465 205.776 217.256 205.776 215.765 cv
408.816 114.965 mo
408.816 113.475 407.605 112.265 406.115 112.265 cv
404.625 112.265 403.416 113.475 403.416 114.965 cv
403.416 116.456 404.625 117.665 406.115 117.665 cv
407.605 117.665 408.816 116.456 408.816 114.965 cv
306.576 228.845 mo
306.576 227.354 305.367 226.146 303.875 226.146 cv
302.385 226.146 301.176 227.354 301.176 228.845 cv
301.176 230.336 302.385 231.545 303.875 231.545 cv
305.367 231.545 306.576 230.336 306.576 228.845 cv
107.616 266.285 mo
107.616 264.795 106.406 263.585 104.916 263.585 cv
103.425 263.585 102.216 264.795 102.216 266.285 cv
102.216 267.775 103.425 268.985 104.916 268.985 cv
106.406 268.985 107.616 267.775 107.616 266.285 cv
371.736 243.605 mo
371.736 242.114 370.525 240.905 369.035 240.905 cv
367.545 240.905 366.336 242.114 366.336 243.605 cv
366.336 245.096 367.545 246.305 369.035 246.305 cv
370.525 246.305 371.736 245.096 371.736 243.605 cv
235.896 198.725 mo
235.896 197.234 234.686 196.025 233.195 196.025 cv
231.705 196.025 230.496 197.234 230.496 198.725 cv
230.496 200.216 231.705 201.425 233.195 201.425 cv
234.686 201.425 235.896 200.216 235.896 198.725 cv
321.217 254.525 mo
321.217 253.035 320.006 251.825 318.516 251.825 cv
317.025 251.825 315.816 253.035 315.816 254.525 cv
315.816 256.016 317.025 257.225 318.516 257.225 cv
320.006 257.225 321.217 256.016 321.217 254.525 cv
132.456 237.605 mo
132.456 236.114 131.246 234.905 129.756 234.905 cv
128.266 234.905 127.056 236.114 127.056 237.605 cv
127.056 239.096 128.266 240.305 129.756 240.305 cv
131.246 240.305 132.456 239.096 132.456 237.605 cv
253.535 133.085 mo
253.535 131.595 252.326 130.385 250.836 130.385 cv
249.346 130.385 248.137 131.595 248.137 133.085 cv
248.137 134.575 249.346 135.785 250.836 135.785 cv
252.326 135.785 253.535 134.575 253.535 133.085 cv
274.416 130.085 mo
274.416 128.595 273.207 127.385 271.717 127.385 cv
270.225 127.385 269.016 128.595 269.016 130.085 cv
269.016 131.575 270.225 132.785 271.717 132.785 cv
273.207 132.785 274.416 131.575 274.416 130.085 cv
249.695 161.645 mo
249.695 160.155 248.486 158.945 246.996 158.945 cv
245.506 158.945 244.295 160.155 244.295 161.645 cv
244.295 163.135 245.506 164.345 246.996 164.345 cv
248.486 164.345 249.695 163.135 249.695 161.645 cv
378.455 214.565 mo
378.455 213.074 377.246 211.865 375.756 211.865 cv
374.266 211.865 373.057 213.074 373.057 214.565 cv
373.057 216.056 374.266 217.265 375.756 217.265 cv
377.246 217.265 378.455 216.056 378.455 214.565 cv
264.816 181.685 mo
264.816 180.195 263.605 178.985 262.115 178.985 cv
260.625 178.985 259.416 180.195 259.416 181.685 cv
259.416 183.175 260.625 184.385 262.115 184.385 cv
263.605 184.385 264.816 183.175 264.816 181.685 cv
306.695 177.245 mo
306.695 175.755 305.486 174.545 303.996 174.545 cv
302.506 174.545 301.295 175.755 301.295 177.245 cv
301.295 178.735 302.506 179.945 303.996 179.945 cv
305.486 179.945 306.695 178.735 306.695 177.245 cv
118.056 261.245 mo
118.056 259.755 116.846 258.545 115.356 258.545 cv
113.865 258.545 112.656 259.755 112.656 261.245 cv
112.656 262.735 113.865 263.945 115.356 263.945 cv
116.846 263.945 118.056 262.735 118.056 261.245 cv
348.576 246.125 mo
348.576 244.635 347.367 243.425 345.875 243.425 cv
344.385 243.425 343.176 244.635 343.176 246.125 cv
343.176 247.615 344.385 248.825 345.875 248.825 cv
347.367 248.825 348.576 247.615 348.576 246.125 cv
212.256 338.525 mo
212.256 337.035 211.046 335.825 209.556 335.825 cv
208.065 335.825 206.856 337.035 206.856 338.525 cv
206.856 340.016 208.065 341.225 209.556 341.225 cv
211.046 341.225 212.256 340.016 212.256 338.525 cv
82.1758 272.765 mo
82.1758 271.274 80.9663 270.065 79.4761 270.065 cv
77.9854 270.065 76.7759 271.274 76.7759 272.765 cv
76.7759 274.256 77.9854 275.465 79.4761 275.465 cv
80.9663 275.465 82.1758 274.256 82.1758 272.765 cv
222.456 220.325 mo
222.456 218.835 221.246 217.625 219.756 217.625 cv
218.266 217.625 217.056 218.835 217.056 220.325 cv
217.056 221.815 218.266 223.025 219.756 223.025 cv
221.246 223.025 222.456 221.815 222.456 220.325 cv
70.5356 244.565 mo
70.5356 243.074 69.3262 241.865 67.8359 241.865 cv
66.3452 241.865 65.1357 243.074 65.1357 244.565 cv
65.1357 246.056 66.3452 247.265 67.8359 247.265 cv
69.3262 247.265 70.5356 246.056 70.5356 244.565 cv
62.1357 262.205 mo
62.1357 260.715 60.9263 259.505 59.436 259.505 cv
57.9453 259.505 56.7358 260.715 56.7358 262.205 cv
56.7358 263.695 57.9453 264.905 59.436 264.905 cv
60.9263 264.905 62.1357 263.695 62.1357 262.205 cv
367.656 196.205 mo
367.656 194.715 366.445 193.505 364.955 193.505 cv
363.465 193.505 362.256 194.715 362.256 196.205 cv
362.256 197.695 363.465 198.905 364.955 198.905 cv
366.445 198.905 367.656 197.695 367.656 196.205 cv
106.416 247.925 mo
106.416 246.435 105.206 245.225 103.716 245.225 cv
102.226 245.225 101.016 246.435 101.016 247.925 cv
101.016 249.415 102.226 250.625 103.716 250.625 cv
105.206 250.625 106.416 249.415 106.416 247.925 cv
221.736 212.765 mo
221.736 211.274 220.526 210.065 219.036 210.065 cv
217.545 210.065 216.336 211.274 216.336 212.765 cv
216.336 214.256 217.545 215.465 219.036 215.465 cv
220.526 215.465 221.736 214.256 221.736 212.765 cv
387.336 234.605 mo
387.336 233.114 386.127 231.905 384.637 231.905 cv
383.145 231.905 381.936 233.114 381.936 234.605 cv
381.936 236.096 383.145 237.305 384.637 237.305 cv
386.127 237.305 387.336 236.096 387.336 234.605 cv
77.6157 291.485 mo
77.6157 289.995 76.4063 288.785 74.916 288.785 cv
73.4253 288.785 72.2158 289.995 72.2158 291.485 cv
72.2158 292.976 73.4253 294.186 74.916 294.186 cv
76.4063 294.186 77.6157 292.976 77.6157 291.485 cv
149.376 209.405 mo
149.376 207.915 148.167 206.705 146.676 206.705 cv
145.186 206.705 143.976 207.915 143.976 209.405 cv
143.976 210.896 145.186 212.105 146.676 212.105 cv
148.167 212.105 149.376 210.896 149.376 209.405 cv
84.6958 243.965 mo
84.6958 242.475 83.4863 241.265 81.9961 241.265 cv
80.5054 241.265 79.2959 242.475 79.2959 243.965 cv
79.2959 245.455 80.5054 246.665 81.9961 246.665 cv
83.4863 246.665 84.6958 245.455 84.6958 243.965 cv
320.256 188.285 mo
320.256 186.794 319.047 185.585 317.557 185.585 cv
316.066 185.585 314.855 186.794 314.855 188.285 cv
314.855 189.775 316.066 190.985 317.557 190.985 cv
319.047 190.985 320.256 189.775 320.256 188.285 cv
72.5757 257.646 mo
72.5757 256.154 71.3662 254.945 69.876 254.945 cv
68.3853 254.945 67.1758 256.154 67.1758 257.646 cv
67.1758 259.136 68.3853 260.345 69.876 260.345 cv
71.3662 260.345 72.5757 259.136 72.5757 257.646 cv
245.016 131.165 mo
245.016 129.675 243.807 128.465 242.316 128.465 cv
240.826 128.465 239.615 129.675 239.615 131.165 cv
239.615 132.655 240.826 133.865 242.316 133.865 cv
243.807 133.865 245.016 132.655 245.016 131.165 cv
289.535 156.485 mo
289.535 154.995 288.326 153.785 286.836 153.785 cv
285.346 153.785 284.137 154.995 284.137 156.485 cv
284.137 157.976 285.346 159.185 286.836 159.185 cv
288.326 159.185 289.535 157.976 289.535 156.485 cv
388.656 233.285 mo
388.656 231.795 387.445 230.585 385.955 230.585 cv
384.465 230.585 383.256 231.795 383.256 233.285 cv
383.256 234.775 384.465 235.985 385.955 235.985 cv
387.445 235.985 388.656 234.775 388.656 233.285 cv
195.096 156.125 mo
195.096 154.635 193.886 153.425 192.396 153.425 cv
190.905 153.425 189.696 154.635 189.696 156.125 cv
189.696 157.615 190.905 158.825 192.396 158.825 cv
193.886 158.825 195.096 157.615 195.096 156.125 cv
308.977 300.005 mo
308.977 298.515 307.766 297.305 306.275 297.305 cv
304.785 297.305 303.576 298.515 303.576 300.005 cv
303.576 301.495 304.785 302.705 306.275 302.705 cv
307.766 302.705 308.977 301.495 308.977 300.005 cv
138.576 202.925 mo
138.576 201.435 137.366 200.225 135.876 200.225 cv
134.385 200.225 133.176 201.435 133.176 202.925 cv
133.176 204.415 134.385 205.625 135.876 205.625 cv
137.366 205.625 138.576 204.415 138.576 202.925 cv
245.375 178.325 mo
245.375 176.834 244.166 175.625 242.676 175.625 cv
241.186 175.625 239.977 176.834 239.977 178.325 cv
239.977 179.815 241.186 181.025 242.676 181.025 cv
244.166 181.025 245.375 179.815 245.375 178.325 cv
143.976 326.165 mo
143.976 324.675 142.766 323.465 141.276 323.465 cv
139.786 323.465 138.576 324.675 138.576 326.165 cv
138.576 327.655 139.786 328.865 141.276 328.865 cv
142.766 328.865 143.976 327.655 143.976 326.165 cv
236.016 176.645 mo
236.016 175.155 234.807 173.945 233.316 173.945 cv
231.826 173.945 230.615 175.155 230.615 176.645 cv
230.615 178.135 231.826 179.345 233.316 179.345 cv
234.807 179.345 236.016 178.135 236.016 176.645 cv
111.936 224.525 mo
111.936 223.035 110.726 221.825 109.236 221.825 cv
107.746 221.825 106.536 223.035 106.536 224.525 cv
106.536 226.016 107.746 227.225 109.236 227.225 cv
110.726 227.225 111.936 226.016 111.936 224.525 cv
252.576 312.365 mo
252.576 310.875 251.367 309.665 249.875 309.665 cv
248.385 309.665 247.176 310.875 247.176 312.365 cv
247.176 313.855 248.385 315.065 249.875 315.065 cv
251.367 315.065 252.576 313.855 252.576 312.365 cv
413.977 200.646 mo
413.977 199.154 412.766 197.945 411.275 197.945 cv
409.785 197.945 408.576 199.154 408.576 200.646 cv
408.576 202.136 409.785 203.345 411.275 203.345 cv
412.766 203.345 413.977 202.136 413.977 200.646 cv
75.0957 232.325 mo
75.0957 230.835 73.8862 229.625 72.396 229.625 cv
70.9053 229.625 69.6958 230.835 69.6958 232.325 cv
69.6958 233.815 70.9053 235.025 72.396 235.025 cv
73.8862 235.025 75.0957 233.815 75.0957 232.325 cv
364.057 229.085 mo
364.057 227.595 362.846 226.385 361.355 226.385 cv
359.865 226.385 358.656 227.595 358.656 229.085 cv
358.656 230.575 359.865 231.785 361.355 231.785 cv
362.846 231.785 364.057 230.575 364.057 229.085 cv
91.1758 247.925 mo
91.1758 246.435 89.9663 245.225 88.4761 245.225 cv
86.9854 245.225 85.7759 246.435 85.7759 247.925 cv
85.7759 249.415 86.9854 250.625 88.4761 250.625 cv
89.9663 250.625 91.1758 249.415 91.1758 247.925 cv
215.856 306.725 mo
215.856 305.234 214.646 304.025 213.156 304.025 cv
211.666 304.025 210.456 305.234 210.456 306.725 cv
210.456 308.216 211.666 309.425 213.156 309.425 cv
214.646 309.425 215.856 308.216 215.856 306.725 cv
85.5356 303.605 mo
85.5356 302.114 84.3262 300.905 82.8359 300.905 cv
81.3452 300.905 80.1357 302.114 80.1357 303.605 cv
80.1357 305.096 81.3452 306.305 82.8359 306.305 cv
84.3262 306.305 85.5356 305.096 85.5356 303.605 cv
314.375 274.205 mo
314.375 272.715 313.166 271.505 311.676 271.505 cv
310.186 271.505 308.977 272.715 308.977 274.205 cv
308.977 275.695 310.186 276.905 311.676 276.905 cv
313.166 276.905 314.375 275.695 314.375 274.205 cv
391.176 250.805 mo
391.176 249.314 389.967 248.105 388.477 248.105 cv
386.986 248.105 385.775 249.314 385.775 250.805 cv
385.775 252.296 386.986 253.505 388.477 253.505 cv
389.967 253.505 391.176 252.296 391.176 250.805 cv
364.656 207.365 mo
364.656 205.875 363.445 204.665 361.955 204.665 cv
360.465 204.665 359.256 205.875 359.256 207.365 cv
359.256 208.855 360.465 210.065 361.955 210.065 cv
363.445 210.065 364.656 208.855 364.656 207.365 cv
75.936 222.365 mo
75.936 220.875 74.7261 219.665 73.2358 219.665 cv
71.7456 219.665 70.5356 220.875 70.5356 222.365 cv
70.5356 223.855 71.7456 225.065 73.2358 225.065 cv
74.7261 225.065 75.936 223.855 75.936 222.365 cv
242.016 153.125 mo
242.016 151.635 240.807 150.425 239.316 150.425 cv
237.826 150.425 236.615 151.635 236.615 153.125 cv
236.615 154.615 237.826 155.825 239.316 155.825 cv
240.807 155.825 242.016 154.615 242.016 153.125 cv
230.016 264.485 mo
230.016 262.994 228.807 261.785 227.316 261.785 cv
225.826 261.785 224.615 262.994 224.615 264.485 cv
224.615 265.976 225.826 267.186 227.316 267.186 cv
228.807 267.186 230.016 265.976 230.016 264.485 cv
251.977 282.005 mo
251.977 280.515 250.766 279.305 249.275 279.305 cv
247.785 279.305 246.576 280.515 246.576 282.005 cv
246.576 283.495 247.785 284.705 249.275 284.705 cv
250.766 284.705 251.977 283.495 251.977 282.005 cv
90.2158 236.045 mo
90.2158 234.555 89.0063 233.345 87.5161 233.345 cv
86.0254 233.345 84.8159 234.555 84.8159 236.045 cv
84.8159 237.535 86.0254 238.745 87.5161 238.745 cv
89.0063 238.745 90.2158 237.535 90.2158 236.045 cv
322.057 156.845 mo
322.057 155.354 320.846 154.145 319.355 154.145 cv
317.865 154.145 316.656 155.354 316.656 156.845 cv
316.656 158.335 317.865 159.545 319.355 159.545 cv
320.846 159.545 322.057 158.335 322.057 156.845 cv
388.775 186.365 mo
388.775 184.875 387.566 183.665 386.076 183.665 cv
384.586 183.665 383.375 184.875 383.375 186.365 cv
383.375 187.855 384.586 189.065 386.076 189.065 cv
387.566 189.065 388.775 187.855 388.775 186.365 cv
133.656 253.085 mo
133.656 251.595 132.446 250.385 130.956 250.385 cv
129.465 250.385 128.256 251.595 128.256 253.085 cv
128.256 254.575 129.465 255.785 130.956 255.785 cv
132.446 255.785 133.656 254.575 133.656 253.085 cv
352.535 186.845 mo
352.535 185.354 351.326 184.145 349.836 184.145 cv
348.346 184.145 347.137 185.354 347.137 186.845 cv
347.137 188.335 348.346 189.545 349.836 189.545 cv
351.326 189.545 352.535 188.335 352.535 186.845 cv
51.936 142.445 mo
51.936 140.955 50.7261 139.745 49.2358 139.745 cv
47.7456 139.745 46.5356 140.955 46.5356 142.445 cv
46.5356 143.936 47.7456 145.145 49.2358 145.145 cv
50.7261 145.145 51.936 143.936 51.936 142.445 cv
146.376 258.965 mo
146.376 257.475 145.167 256.265 143.676 256.265 cv
142.186 256.265 140.976 257.475 140.976 258.965 cv
140.976 260.455 142.186 261.665 143.676 261.665 cv
145.167 261.665 146.376 260.455 146.376 258.965 cv
206.616 238.205 mo
206.616 236.715 205.406 235.505 203.916 235.505 cv
202.425 235.505 201.216 236.715 201.216 238.205 cv
201.216 239.695 202.425 240.905 203.916 240.905 cv
205.406 240.905 206.616 239.695 206.616 238.205 cv
298.057 209.045 mo
298.057 207.555 296.846 206.345 295.355 206.345 cv
293.865 206.345 292.656 207.555 292.656 209.045 cv
292.656 210.535 293.865 211.745 295.355 211.745 cv
296.846 211.745 298.057 210.535 298.057 209.045 cv
146.136 245.045 mo
146.136 243.555 144.926 242.345 143.436 242.345 cv
141.945 242.345 140.736 243.555 140.736 245.045 cv
140.736 246.535 141.945 247.745 143.436 247.745 cv
144.926 247.745 146.136 246.535 146.136 245.045 cv
98.2559 263.646 mo
98.2559 262.154 97.0464 260.945 95.5557 260.945 cv
94.0654 260.945 92.856 262.154 92.856 263.646 cv
92.856 265.136 94.0654 266.345 95.5557 266.345 cv
97.0464 266.345 98.2559 265.136 98.2559 263.646 cv
385.775 212.525 mo
385.775 211.035 384.566 209.825 383.076 209.825 cv
381.586 209.825 380.375 211.035 380.375 212.525 cv
380.375 214.016 381.586 215.225 383.076 215.225 cv
384.566 215.225 385.775 214.016 385.775 212.525 cv
372.455 216.245 mo
372.455 214.755 371.246 213.545 369.756 213.545 cv
368.266 213.545 367.057 214.755 367.057 216.245 cv
367.057 217.735 368.266 218.945 369.756 218.945 cv
371.246 218.945 372.455 217.735 372.455 216.245 cv
262.535 339.845 mo
262.535 338.354 261.326 337.146 259.836 337.146 cv
258.346 337.146 257.137 338.354 257.137 339.845 cv
257.137 341.336 258.346 342.545 259.836 342.545 cv
261.326 342.545 262.535 341.336 262.535 339.845 cv
142.776 292.205 mo
142.776 290.715 141.566 289.505 140.076 289.505 cv
138.585 289.505 137.376 290.715 137.376 292.205 cv
137.376 293.695 138.585 294.905 140.076 294.905 cv
141.566 294.905 142.776 293.695 142.776 292.205 cv
264.455 144.605 mo
264.455 143.115 263.246 141.905 261.756 141.905 cv
260.266 141.905 259.057 143.115 259.057 144.605 cv
259.057 146.096 260.266 147.305 261.756 147.305 cv
263.246 147.305 264.455 146.096 264.455 144.605 cv
52.896 285.725 mo
52.896 284.234 51.686 283.025 50.1958 283.025 cv
48.7056 283.025 47.4961 284.234 47.4961 285.725 cv
47.4961 287.216 48.7056 288.425 50.1958 288.425 cv
51.686 288.425 52.896 287.216 52.896 285.725 cv
388.775 194.885 mo
388.775 193.395 387.566 192.185 386.076 192.185 cv
384.586 192.185 383.375 193.395 383.375 194.885 cv
383.375 196.375 384.586 197.585 386.076 197.585 cv
387.566 197.585 388.775 196.375 388.775 194.885 cv
295.416 235.925 mo
295.416 234.435 294.207 233.225 292.717 233.225 cv
291.225 233.225 290.016 234.435 290.016 235.925 cv
290.016 237.415 291.225 238.625 292.717 238.625 cv
294.207 238.625 295.416 237.415 295.416 235.925 cv
302.256 252.125 mo
302.256 250.635 301.047 249.425 299.557 249.425 cv
298.066 249.425 296.855 250.635 296.855 252.125 cv
296.855 253.615 298.066 254.825 299.557 254.825 cv
301.047 254.825 302.256 253.615 302.256 252.125 cv
95.7358 283.325 mo
95.7358 281.835 94.5264 280.625 93.0356 280.625 cv
91.5454 280.625 90.3359 281.835 90.3359 283.325 cv
90.3359 284.815 91.5454 286.025 93.0356 286.025 cv
94.5264 286.025 95.7358 284.815 95.7358 283.325 cv
403.295 245.405 mo
403.295 243.915 402.086 242.705 400.596 242.705 cv
399.105 242.705 397.896 243.915 397.896 245.405 cv
397.896 246.896 399.105 248.105 400.596 248.105 cv
402.086 248.105 403.295 246.896 403.295 245.405 cv
189.096 281.525 mo
189.096 280.035 187.886 278.825 186.396 278.825 cv
184.905 278.825 183.696 280.035 183.696 281.525 cv
183.696 283.016 184.905 284.225 186.396 284.225 cv
187.886 284.225 189.096 283.016 189.096 281.525 cv
257.736 180.965 mo
257.736 179.475 256.525 178.265 255.035 178.265 cv
253.545 178.265 252.336 179.475 252.336 180.965 cv
252.336 182.456 253.545 183.665 255.035 183.665 cv
256.525 183.665 257.736 182.456 257.736 180.965 cv
254.016 93.7251 mo
254.016 92.2349 252.807 91.0249 251.316 91.0249 cv
249.826 91.0249 248.615 92.2349 248.615 93.7251 cv
248.615 95.2153 249.826 96.4248 251.316 96.4248 cv
252.807 96.4248 254.016 95.2153 254.016 93.7251 cv
336.096 240.605 mo
336.096 239.114 334.887 237.905 333.396 237.905 cv
331.906 237.905 330.695 239.114 330.695 240.605 cv
330.695 242.096 331.906 243.305 333.396 243.305 cv
334.887 243.305 336.096 242.096 336.096 240.605 cv
138.576 257.525 mo
138.576 256.035 137.366 254.825 135.876 254.825 cv
134.385 254.825 133.176 256.035 133.176 257.525 cv
133.176 259.016 134.385 260.225 135.876 260.225 cv
137.366 260.225 138.576 259.016 138.576 257.525 cv
266.137 200.525 mo
266.137 199.035 264.926 197.825 263.436 197.825 cv
261.945 197.825 260.736 199.035 260.736 200.525 cv
260.736 202.016 261.945 203.225 263.436 203.225 cv
264.926 203.225 266.137 202.016 266.137 200.525 cv
136.056 243.605 mo
136.056 242.114 134.846 240.905 133.356 240.905 cv
131.865 240.905 130.656 242.114 130.656 243.605 cv
130.656 245.096 131.865 246.305 133.356 246.305 cv
134.846 246.305 136.056 245.096 136.056 243.605 cv
118.536 309.485 mo
118.536 307.995 117.326 306.785 115.836 306.785 cv
114.346 306.785 113.136 307.995 113.136 309.485 cv
113.136 310.976 114.346 312.186 115.836 312.186 cv
117.326 312.186 118.536 310.976 118.536 309.485 cv
313.896 286.686 mo
313.896 285.194 312.686 283.985 311.195 283.985 cv
309.705 283.985 308.496 285.194 308.496 286.686 cv
308.496 288.176 309.705 289.385 311.195 289.385 cv
312.686 289.385 313.896 288.176 313.896 286.686 cv
220.056 171.005 mo
220.056 169.515 218.846 168.305 217.356 168.305 cv
215.866 168.305 214.656 169.515 214.656 171.005 cv
214.656 172.496 215.866 173.705 217.356 173.705 cv
218.846 173.705 220.056 172.496 220.056 171.005 cv
172.896 198.365 mo
172.896 196.875 171.686 195.665 170.196 195.665 cv
168.706 195.665 167.496 196.875 167.496 198.365 cv
167.496 199.855 168.706 201.065 170.196 201.065 cv
171.686 201.065 172.896 199.855 172.896 198.365 cv
364.656 247.445 mo
364.656 245.955 363.445 244.745 361.955 244.745 cv
360.465 244.745 359.256 245.955 359.256 247.445 cv
359.256 248.936 360.465 250.146 361.955 250.146 cv
363.445 250.146 364.656 248.936 364.656 247.445 cv
242.375 189.845 mo
242.375 188.354 241.166 187.145 239.676 187.145 cv
238.186 187.145 236.977 188.354 236.977 189.845 cv
236.977 191.335 238.186 192.545 239.676 192.545 cv
241.166 192.545 242.375 191.335 242.375 189.845 cv
342.336 206.525 mo
342.336 205.035 341.127 203.825 339.637 203.825 cv
338.145 203.825 336.936 205.035 336.936 206.525 cv
336.936 208.016 338.145 209.225 339.637 209.225 cv
341.127 209.225 342.336 208.016 342.336 206.525 cv
327.936 277.686 mo
327.936 276.194 326.727 274.985 325.236 274.985 cv
323.746 274.985 322.535 276.194 322.535 277.686 cv
322.535 279.176 323.746 280.385 325.236 280.385 cv
326.727 280.385 327.936 279.176 327.936 277.686 cv
163.416 284.765 mo
163.416 283.274 162.206 282.065 160.716 282.065 cv
159.226 282.065 158.016 283.274 158.016 284.765 cv
158.016 286.256 159.226 287.465 160.716 287.465 cv
162.206 287.465 163.416 286.256 163.416 284.765 cv
150.816 215.525 mo
150.816 214.035 149.606 212.825 148.116 212.825 cv
146.625 212.825 145.416 214.035 145.416 215.525 cv
145.416 217.016 146.625 218.225 148.116 218.225 cv
149.606 218.225 150.816 217.016 150.816 215.525 cv
224.256 136.565 mo
224.256 135.075 223.046 133.865 221.556 133.865 cv
220.065 133.865 218.856 135.075 218.856 136.565 cv
218.856 138.056 220.065 139.265 221.556 139.265 cv
223.046 139.265 224.256 138.056 224.256 136.565 cv
257.615 223.686 mo
257.615 222.194 256.406 220.985 254.916 220.985 cv
253.426 220.985 252.217 222.194 252.217 223.686 cv
252.217 225.176 253.426 226.385 254.916 226.385 cv
256.406 226.385 257.615 225.176 257.615 223.686 cv
280.057 295.686 mo
280.057 294.194 278.846 292.985 277.355 292.985 cv
275.865 292.985 274.656 294.194 274.656 295.686 cv
274.656 297.176 275.865 298.385 277.355 298.385 cv
278.846 298.385 280.057 297.176 280.057 295.686 cv
140.136 232.205 mo
140.136 230.715 138.926 229.505 137.436 229.505 cv
135.945 229.505 134.736 230.715 134.736 232.205 cv
134.736 233.695 135.945 234.905 137.436 234.905 cv
138.926 234.905 140.136 233.695 140.136 232.205 cv
131.256 246.725 mo
131.256 245.234 130.046 244.025 128.556 244.025 cv
127.065 244.025 125.856 245.234 125.856 246.725 cv
125.856 248.216 127.065 249.425 128.556 249.425 cv
130.046 249.425 131.256 248.216 131.256 246.725 cv
79.7759 251.285 mo
79.7759 249.795 78.5664 248.585 77.0757 248.585 cv
75.5854 248.585 74.376 249.795 74.376 251.285 cv
74.376 252.775 75.5854 253.985 77.0757 253.985 cv
78.5664 253.985 79.7759 252.775 79.7759 251.285 cv
69.0957 226.925 mo
69.0957 225.435 67.8862 224.225 66.396 224.225 cv
64.9053 224.225 63.6958 225.435 63.6958 226.925 cv
63.6958 228.415 64.9053 229.625 66.396 229.625 cv
67.8862 229.625 69.0957 228.415 69.0957 226.925 cv
226.896 283.565 mo
226.896 282.074 225.686 280.865 224.195 280.865 cv
222.706 280.865 221.496 282.074 221.496 283.565 cv
221.496 285.056 222.706 286.265 224.195 286.265 cv
225.686 286.265 226.896 285.056 226.896 283.565 cv
168.216 285.245 mo
168.216 283.755 167.006 282.545 165.516 282.545 cv
164.025 282.545 162.816 283.755 162.816 285.245 cv
162.816 286.735 164.025 287.945 165.516 287.945 cv
167.006 287.945 168.216 286.735 168.216 285.245 cv
215.376 172.325 mo
215.376 170.834 214.167 169.625 212.676 169.625 cv
211.186 169.625 209.976 170.834 209.976 172.325 cv
209.976 173.815 211.186 175.025 212.676 175.025 cv
214.167 175.025 215.376 173.815 215.376 172.325 cv
162.816 305.405 mo
162.816 303.915 161.606 302.705 160.116 302.705 cv
158.625 302.705 157.416 303.915 157.416 305.405 cv
157.416 306.896 158.625 308.105 160.116 308.105 cv
161.606 308.105 162.816 306.896 162.816 305.405 cv
136.056 257.045 mo
136.056 255.555 134.846 254.345 133.356 254.345 cv
131.865 254.345 130.656 255.555 130.656 257.045 cv
130.656 258.535 131.865 259.745 133.356 259.745 cv
134.846 259.745 136.056 258.535 136.056 257.045 cv
408.576 218.045 mo
408.576 216.555 407.367 215.345 405.875 215.345 cv
404.385 215.345 403.176 216.555 403.176 218.045 cv
403.176 219.535 404.385 220.745 405.875 220.745 cv
407.367 220.745 408.576 219.535 408.576 218.045 cv
371.375 207.845 mo
371.375 206.354 370.166 205.146 368.676 205.146 cv
367.186 205.146 365.977 206.354 365.977 207.845 cv
365.977 209.336 367.186 210.545 368.676 210.545 cv
370.166 210.545 371.375 209.336 371.375 207.845 cv
187.896 189.725 mo
187.896 188.235 186.686 187.025 185.196 187.025 cv
183.706 187.025 182.496 188.235 182.496 189.725 cv
182.496 191.215 183.706 192.425 185.196 192.425 cv
186.686 192.425 187.896 191.215 187.896 189.725 cv
49.7759 135.725 mo
49.7759 134.235 48.5664 133.025 47.0757 133.025 cv
45.5854 133.025 44.376 134.235 44.376 135.725 cv
44.376 137.215 45.5854 138.425 47.0757 138.425 cv
48.5664 138.425 49.7759 137.215 49.7759 135.725 cv
145.896 224.525 mo
145.896 223.035 144.686 221.825 143.196 221.825 cv
141.706 221.825 140.496 223.035 140.496 224.525 cv
140.496 226.016 141.706 227.225 143.196 227.225 cv
144.686 227.225 145.896 226.016 145.896 224.525 cv
314.736 223.325 mo
314.736 221.835 313.525 220.625 312.035 220.625 cv
310.545 220.625 309.336 221.835 309.336 223.325 cv
309.336 224.815 310.545 226.025 312.035 226.025 cv
313.525 226.025 314.736 224.815 314.736 223.325 cv
52.7759 171.125 mo
52.7759 169.635 51.5664 168.425 50.0757 168.425 cv
48.5854 168.425 47.376 169.635 47.376 171.125 cv
47.376 172.615 48.5854 173.825 50.0757 173.825 cv
51.5664 173.825 52.7759 172.615 52.7759 171.125 cv
233.855 249.365 mo
233.855 247.875 232.646 246.665 231.156 246.665 cv
229.666 246.665 228.455 247.875 228.455 249.365 cv
228.455 250.855 229.666 252.065 231.156 252.065 cv
232.646 252.065 233.855 250.855 233.855 249.365 cv
223.776 264.965 mo
223.776 263.475 222.566 262.265 221.076 262.265 cv
219.585 262.265 218.376 263.475 218.376 264.965 cv
218.376 266.455 219.585 267.665 221.076 267.665 cv
222.566 267.665 223.776 266.455 223.776 264.965 cv
360.455 229.805 mo
360.455 228.314 359.246 227.105 357.756 227.105 cv
356.266 227.105 355.057 228.314 355.057 229.805 cv
355.057 231.296 356.266 232.505 357.756 232.505 cv
359.246 232.505 360.455 231.296 360.455 229.805 cv
267.336 127.805 mo
267.336 126.314 266.127 125.105 264.637 125.105 cv
263.145 125.105 261.936 126.314 261.936 127.805 cv
261.936 129.295 263.145 130.505 264.637 130.505 cv
266.127 130.505 267.336 129.295 267.336 127.805 cv
374.137 194.646 mo
374.137 193.155 372.926 191.945 371.436 191.945 cv
369.945 191.945 368.736 193.155 368.736 194.646 cv
368.736 196.136 369.945 197.345 371.436 197.345 cv
372.926 197.345 374.137 196.136 374.137 194.646 cv
241.775 226.205 mo
241.775 224.715 240.566 223.505 239.076 223.505 cv
237.586 223.505 236.375 224.715 236.375 226.205 cv
236.375 227.695 237.586 228.905 239.076 228.905 cv
240.566 228.905 241.775 227.695 241.775 226.205 cv
406.656 204.005 mo
406.656 202.515 405.445 201.305 403.955 201.305 cv
402.465 201.305 401.256 202.515 401.256 204.005 cv
401.256 205.495 402.465 206.705 403.955 206.705 cv
405.445 206.705 406.656 205.495 406.656 204.005 cv
237.816 100.205 mo
237.816 98.7148 236.605 97.5049 235.115 97.5049 cv
233.625 97.5049 232.416 98.7148 232.416 100.205 cv
232.416 101.695 233.625 102.905 235.115 102.905 cv
236.605 102.905 237.816 101.695 237.816 100.205 cv
55.896 131.285 mo
55.896 129.794 54.686 128.585 53.1958 128.585 cv
51.7056 128.585 50.4961 129.794 50.4961 131.285 cv
50.4961 132.775 51.7056 133.985 53.1958 133.985 cv
54.686 133.985 55.896 132.775 55.896 131.285 cv
248.256 284.165 mo
248.256 282.675 247.047 281.465 245.557 281.465 cv
244.066 281.465 242.855 282.675 242.855 284.165 cv
242.855 285.655 244.066 286.865 245.557 286.865 cv
247.047 286.865 248.256 285.655 248.256 284.165 cv
227.137 199.805 mo
227.137 198.314 225.926 197.105 224.436 197.105 cv
222.945 197.105 221.736 198.314 221.736 199.805 cv
221.736 201.296 222.945 202.505 224.436 202.505 cv
225.926 202.505 227.137 201.296 227.137 199.805 cv
121.056 265.565 mo
121.056 264.074 119.846 262.865 118.356 262.865 cv
116.865 262.865 115.656 264.074 115.656 265.565 cv
115.656 267.056 116.865 268.265 118.356 268.265 cv
119.846 268.265 121.056 267.056 121.056 265.565 cv
267.695 141.845 mo
267.695 140.354 266.486 139.145 264.996 139.145 cv
263.506 139.145 262.295 140.354 262.295 141.845 cv
262.295 143.335 263.506 144.545 264.996 144.545 cv
266.486 144.545 267.695 143.335 267.695 141.845 cv
417.455 82.8052 mo
417.455 81.3145 416.246 80.105 414.756 80.105 cv
413.266 80.105 412.057 81.3145 412.057 82.8052 cv
412.057 84.2954 413.266 85.5049 414.756 85.5049 cv
416.246 85.5049 417.455 84.2954 417.455 82.8052 cv
390.816 238.085 mo
390.816 236.595 389.605 235.385 388.115 235.385 cv
386.625 235.385 385.416 236.595 385.416 238.085 cv
385.416 239.575 386.625 240.785 388.115 240.785 cv
389.605 240.785 390.816 239.575 390.816 238.085 cv
349.656 222.125 mo
349.656 220.635 348.445 219.425 346.955 219.425 cv
345.465 219.425 344.256 220.635 344.256 222.125 cv
344.256 223.615 345.465 224.825 346.955 224.825 cv
348.445 224.825 349.656 223.615 349.656 222.125 cv
258.336 247.445 mo
258.336 245.955 257.127 244.745 255.637 244.745 cv
254.145 244.745 252.936 245.955 252.936 247.445 cv
252.936 248.936 254.145 250.146 255.637 250.146 cv
257.127 250.146 258.336 248.936 258.336 247.445 cv
162.096 206.525 mo
162.096 205.035 160.886 203.825 159.396 203.825 cv
157.905 203.825 156.696 205.035 156.696 206.525 cv
156.696 208.016 157.905 209.225 159.396 209.225 cv
160.886 209.225 162.096 208.016 162.096 206.525 cv
179.496 190.565 mo
179.496 189.075 178.286 187.865 176.796 187.865 cv
175.306 187.865 174.096 189.075 174.096 190.565 cv
174.096 192.056 175.306 193.265 176.796 193.265 cv
178.286 193.265 179.496 192.056 179.496 190.565 cv
234.096 169.205 mo
234.096 167.715 232.887 166.505 231.396 166.505 cv
229.906 166.505 228.695 167.715 228.695 169.205 cv
228.695 170.695 229.906 171.905 231.396 171.905 cv
232.887 171.905 234.096 170.695 234.096 169.205 cv
427.775 174.125 mo
427.775 172.635 426.566 171.425 425.076 171.425 cv
423.586 171.425 422.375 172.635 422.375 174.125 cv
422.375 175.615 423.586 176.825 425.076 176.825 cv
426.566 176.825 427.775 175.615 427.775 174.125 cv
59.2559 189.125 mo
59.2559 187.635 58.0464 186.425 56.5557 186.425 cv
55.0654 186.425 53.856 187.635 53.856 189.125 cv
53.856 190.615 55.0654 191.825 56.5557 191.825 cv
58.0464 191.825 59.2559 190.615 59.2559 189.125 cv
344.137 180.725 mo
344.137 179.235 342.926 178.025 341.436 178.025 cv
339.945 178.025 338.736 179.235 338.736 180.725 cv
338.736 182.215 339.945 183.425 341.436 183.425 cv
342.926 183.425 344.137 182.215 344.137 180.725 cv
248.615 133.685 mo
248.615 132.195 247.406 130.985 245.916 130.985 cv
244.426 130.985 243.217 132.195 243.217 133.685 cv
243.217 135.175 244.426 136.385 245.916 136.385 cv
247.406 136.385 248.615 135.175 248.615 133.685 cv
232.535 241.205 mo
232.535 239.715 231.326 238.505 229.836 238.505 cv
228.346 238.505 227.137 239.715 227.137 241.205 cv
227.137 242.695 228.346 243.905 229.836 243.905 cv
231.326 243.905 232.535 242.695 232.535 241.205 cv
311.016 191.045 mo
311.016 189.555 309.807 188.345 308.316 188.345 cv
306.826 188.345 305.615 189.555 305.615 191.045 cv
305.615 192.536 306.826 193.745 308.316 193.745 cv
309.807 193.745 311.016 192.536 311.016 191.045 cv
179.616 135.005 mo
179.616 133.515 178.406 132.305 176.916 132.305 cv
175.425 132.305 174.216 133.515 174.216 135.005 cv
174.216 136.496 175.425 137.705 176.916 137.705 cv
178.406 137.705 179.616 136.496 179.616 135.005 cv
182.136 153.605 mo
182.136 152.115 180.926 150.905 179.436 150.905 cv
177.945 150.905 176.736 152.115 176.736 153.605 cv
176.736 155.096 177.945 156.305 179.436 156.305 cv
180.926 156.305 182.136 155.096 182.136 153.605 cv
137.016 255.125 mo
137.016 253.635 135.806 252.425 134.316 252.425 cv
132.826 252.425 131.616 253.635 131.616 255.125 cv
131.616 256.615 132.826 257.825 134.316 257.825 cv
135.806 257.825 137.016 256.615 137.016 255.125 cv
52.0557 290.285 mo
52.0557 288.795 50.8462 287.585 49.356 287.585 cv
47.8652 287.585 46.6558 288.795 46.6558 290.285 cv
46.6558 291.775 47.8652 292.985 49.356 292.985 cv
50.8462 292.985 52.0557 291.775 52.0557 290.285 cv
255.936 102.845 mo
255.936 101.354 254.727 100.145 253.236 100.145 cv
251.746 100.145 250.535 101.354 250.535 102.845 cv
250.535 104.335 251.746 105.545 253.236 105.545 cv
254.727 105.545 255.936 104.335 255.936 102.845 cv
309.936 184.205 mo
309.936 182.715 308.727 181.505 307.236 181.505 cv
305.746 181.505 304.535 182.715 304.535 184.205 cv
304.535 185.695 305.746 186.905 307.236 186.905 cv
308.727 186.905 309.936 185.695 309.936 184.205 cv
76.896 197.646 mo
76.896 196.154 75.686 194.945 74.1958 194.945 cv
72.7056 194.945 71.4961 196.154 71.4961 197.646 cv
71.4961 199.136 72.7056 200.345 74.1958 200.345 cv
75.686 200.345 76.896 199.136 76.896 197.646 cv
187.056 289.925 mo
187.056 288.435 185.846 287.225 184.356 287.225 cv
182.866 287.225 181.656 288.435 181.656 289.925 cv
181.656 291.415 182.866 292.625 184.356 292.625 cv
185.846 292.625 187.056 291.415 187.056 289.925 cv
425.375 40.2051 mo
425.375 38.7148 424.166 37.5049 422.676 37.5049 cv
421.186 37.5049 419.977 38.7148 419.977 40.2051 cv
419.977 41.6953 421.186 42.9053 422.676 42.9053 cv
424.166 42.9053 425.375 41.6953 425.375 40.2051 cv
174.456 261.965 mo
174.456 260.475 173.246 259.265 171.756 259.265 cv
170.266 259.265 169.056 260.475 169.056 261.965 cv
169.056 263.455 170.266 264.665 171.756 264.665 cv
173.246 264.665 174.456 263.455 174.456 261.965 cv
343.176 282.365 mo
343.176 280.875 341.967 279.665 340.477 279.665 cv
338.986 279.665 337.775 280.875 337.775 282.365 cv
337.775 283.855 338.986 285.065 340.477 285.065 cv
341.967 285.065 343.176 283.855 343.176 282.365 cv
211.776 318.965 mo
211.776 317.475 210.566 316.265 209.076 316.265 cv
207.585 316.265 206.376 317.475 206.376 318.965 cv
206.376 320.455 207.585 321.665 209.076 321.665 cv
210.566 321.665 211.776 320.455 211.776 318.965 cv
193.296 357.965 mo
193.296 356.475 192.086 355.265 190.596 355.265 cv
189.105 355.265 187.896 356.475 187.896 357.965 cv
187.896 359.455 189.105 360.665 190.596 360.665 cv
192.086 360.665 193.296 359.455 193.296 357.965 cv
156.576 342.485 mo
156.576 340.995 155.366 339.785 153.876 339.785 cv
152.385 339.785 151.176 340.995 151.176 342.485 cv
151.176 343.976 152.385 345.186 153.876 345.186 cv
155.366 345.186 156.576 343.976 156.576 342.485 cv
267.336 218.765 mo
267.336 217.274 266.127 216.065 264.637 216.065 cv
263.145 216.065 261.936 217.274 261.936 218.765 cv
261.936 220.256 263.145 221.465 264.637 221.465 cv
266.127 221.465 267.336 220.256 267.336 218.765 cv
177.456 205.445 mo
177.456 203.955 176.246 202.745 174.756 202.745 cv
173.266 202.745 172.056 203.955 172.056 205.445 cv
172.056 206.936 173.266 208.146 174.756 208.146 cv
176.246 208.146 177.456 206.936 177.456 205.445 cv
128.616 285.845 mo
128.616 284.354 127.406 283.146 125.916 283.146 cv
124.425 283.146 123.216 284.354 123.216 285.845 cv
123.216 287.336 124.425 288.545 125.916 288.545 cv
127.406 288.545 128.616 287.336 128.616 285.845 cv
396.096 210.845 mo
396.096 209.354 394.887 208.146 393.396 208.146 cv
391.906 208.146 390.695 209.354 390.695 210.845 cv
390.695 212.336 391.906 213.545 393.396 213.545 cv
394.887 213.545 396.096 212.336 396.096 210.845 cv
153.816 240.245 mo
153.816 238.755 152.606 237.545 151.116 237.545 cv
149.625 237.545 148.416 238.755 148.416 240.245 cv
148.416 241.735 149.625 242.945 151.116 242.945 cv
152.606 242.945 153.816 241.735 153.816 240.245 cv
79.416 254.885 mo
79.416 253.395 78.2061 252.186 76.7158 252.186 cv
75.2256 252.186 74.0161 253.395 74.0161 254.885 cv
74.0161 256.375 75.2256 257.585 76.7158 257.585 cv
78.2061 257.585 79.416 256.375 79.416 254.885 cv
195.816 212.045 mo
195.816 210.555 194.606 209.345 193.116 209.345 cv
191.625 209.345 190.416 210.555 190.416 212.045 cv
190.416 213.535 191.625 214.745 193.116 214.745 cv
194.606 214.745 195.816 213.535 195.816 212.045 cv
424.775 182.645 mo
424.775 181.155 423.566 179.945 422.076 179.945 cv
420.586 179.945 419.375 181.155 419.375 182.645 cv
419.375 184.135 420.586 185.345 422.076 185.345 cv
423.566 185.345 424.775 184.135 424.775 182.645 cv
273.096 153.965 mo
273.096 152.475 271.887 151.265 270.396 151.265 cv
268.906 151.265 267.695 152.475 267.695 153.965 cv
267.695 155.456 268.906 156.665 270.396 156.665 cv
271.887 156.665 273.096 155.456 273.096 153.965 cv
285.816 155.765 mo
285.816 154.274 284.605 153.065 283.115 153.065 cv
281.625 153.065 280.416 154.274 280.416 155.765 cv
280.416 157.255 281.625 158.465 283.115 158.465 cv
284.605 158.465 285.816 157.255 285.816 155.765 cv
155.736 233.765 mo
155.736 232.274 154.526 231.065 153.036 231.065 cv
151.545 231.065 150.336 232.274 150.336 233.765 cv
150.336 235.256 151.545 236.465 153.036 236.465 cv
154.526 236.465 155.736 235.256 155.736 233.765 cv
374.496 210.245 mo
374.496 208.755 373.287 207.545 371.795 207.545 cv
370.305 207.545 369.096 208.755 369.096 210.245 cv
369.096 211.735 370.305 212.945 371.795 212.945 cv
373.287 212.945 374.496 211.735 374.496 210.245 cv
311.375 199.325 mo
311.375 197.835 310.166 196.625 308.676 196.625 cv
307.186 196.625 305.977 197.835 305.977 199.325 cv
305.977 200.815 307.186 202.025 308.676 202.025 cv
310.166 202.025 311.375 200.815 311.375 199.325 cv
202.896 275.525 mo
202.896 274.035 201.686 272.825 200.196 272.825 cv
198.706 272.825 197.496 274.035 197.496 275.525 cv
197.496 277.016 198.706 278.225 200.196 278.225 cv
201.686 278.225 202.896 277.016 202.896 275.525 cv
292.176 155.045 mo
292.176 153.555 290.967 152.345 289.477 152.345 cv
287.986 152.345 286.775 153.555 286.775 155.045 cv
286.775 156.536 287.986 157.745 289.477 157.745 cv
290.967 157.745 292.176 156.536 292.176 155.045 cv
213.336 278.165 mo
213.336 276.675 212.126 275.465 210.636 275.465 cv
209.146 275.465 207.936 276.675 207.936 278.165 cv
207.936 279.655 209.146 280.865 210.636 280.865 cv
212.126 280.865 213.336 279.655 213.336 278.165 cv
181.416 139.685 mo
181.416 138.195 180.206 136.985 178.716 136.985 cv
177.226 136.985 176.016 138.195 176.016 139.685 cv
176.016 141.175 177.226 142.385 178.716 142.385 cv
180.206 142.385 181.416 141.175 181.416 139.685 cv
265.176 161.765 mo
265.176 160.274 263.967 159.065 262.477 159.065 cv
260.986 159.065 259.775 160.274 259.775 161.765 cv
259.775 163.255 260.986 164.465 262.477 164.465 cv
263.967 164.465 265.176 163.255 265.176 161.765 cv
101.376 234.965 mo
101.376 233.475 100.167 232.265 98.6758 232.265 cv
97.1855 232.265 95.9761 233.475 95.9761 234.965 cv
95.9761 236.455 97.1855 237.665 98.6758 237.665 cv
100.167 237.665 101.376 236.455 101.376 234.965 cv
107.496 289.686 mo
107.496 288.194 106.286 286.985 104.796 286.985 cv
103.306 286.985 102.096 288.194 102.096 289.686 cv
102.096 291.176 103.306 292.385 104.796 292.385 cv
106.286 292.385 107.496 291.176 107.496 289.686 cv
118.896 266.765 mo
118.896 265.274 117.686 264.065 116.196 264.065 cv
114.706 264.065 113.496 265.274 113.496 266.765 cv
113.496 268.256 114.706 269.465 116.196 269.465 cv
117.686 269.465 118.896 268.256 118.896 266.765 cv
330.576 214.925 mo
330.576 213.435 329.367 212.225 327.875 212.225 cv
326.385 212.225 325.176 213.435 325.176 214.925 cv
325.176 216.415 326.385 217.625 327.875 217.625 cv
329.367 217.625 330.576 216.415 330.576 214.925 cv
108.816 259.325 mo
108.816 257.835 107.606 256.625 106.116 256.625 cv
104.625 256.625 103.416 257.835 103.416 259.325 cv
103.416 260.815 104.625 262.025 106.116 262.025 cv
107.606 262.025 108.816 260.815 108.816 259.325 cv
90.8159 295.325 mo
90.8159 293.835 89.6064 292.625 88.1157 292.625 cv
86.6255 292.625 85.416 293.835 85.416 295.325 cv
85.416 296.815 86.6255 298.025 88.1157 298.025 cv
89.6064 298.025 90.8159 296.815 90.8159 295.325 cv
275.375 168.605 mo
275.375 167.115 274.166 165.905 272.676 165.905 cv
271.186 165.905 269.977 167.115 269.977 168.605 cv
269.977 170.096 271.186 171.305 272.676 171.305 cv
274.166 171.305 275.375 170.096 275.375 168.605 cv
114.456 279.125 mo
114.456 277.635 113.246 276.425 111.756 276.425 cv
110.266 276.425 109.056 277.635 109.056 279.125 cv
109.056 280.615 110.266 281.825 111.756 281.825 cv
113.246 281.825 114.456 280.615 114.456 279.125 cv
173.016 243.125 mo
173.016 241.635 171.806 240.425 170.316 240.425 cv
168.826 240.425 167.616 241.635 167.616 243.125 cv
167.616 244.615 168.826 245.825 170.316 245.825 cv
171.806 245.825 173.016 244.615 173.016 243.125 cv
407.736 138.005 mo
407.736 136.515 406.525 135.305 405.035 135.305 cv
403.545 135.305 402.336 136.515 402.336 138.005 cv
402.336 139.496 403.545 140.705 405.035 140.705 cv
406.525 140.705 407.736 139.496 407.736 138.005 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
83.376 289.205 mo
83.376 287.715 82.1665 286.505 80.6758 286.505 cv
79.1855 286.505 77.9761 287.715 77.9761 289.205 cv
77.9761 290.695 79.1855 291.905 80.6758 291.905 cv
82.1665 291.905 83.376 290.695 83.376 289.205 cv
117.696 277.925 mo
117.696 276.435 116.486 275.225 114.996 275.225 cv
113.505 275.225 112.296 276.435 112.296 277.925 cv
112.296 279.415 113.505 280.625 114.996 280.625 cv
116.486 280.625 117.696 279.415 117.696 277.925 cv
415.416 228.965 mo
415.416 227.475 414.207 226.265 412.717 226.265 cv
411.225 226.265 410.016 227.475 410.016 228.965 cv
410.016 230.455 411.225 231.665 412.717 231.665 cv
414.207 231.665 415.416 230.455 415.416 228.965 cv
226.775 213.245 mo
226.775 211.755 225.566 210.545 224.076 210.545 cv
222.585 210.545 221.376 211.755 221.376 213.245 cv
221.376 214.735 222.585 215.945 224.076 215.945 cv
225.566 215.945 226.775 214.735 226.775 213.245 cv
368.615 187.085 mo
368.615 185.595 367.406 184.385 365.916 184.385 cv
364.426 184.385 363.217 185.595 363.217 187.085 cv
363.217 188.575 364.426 189.785 365.916 189.785 cv
367.406 189.785 368.615 188.575 368.615 187.085 cv
235.656 261.125 mo
235.656 259.635 234.445 258.425 232.955 258.425 cv
231.465 258.425 230.256 259.635 230.256 261.125 cv
230.256 262.615 231.465 263.825 232.955 263.825 cv
234.445 263.825 235.656 262.615 235.656 261.125 cv
241.775 274.325 mo
241.775 272.835 240.566 271.625 239.076 271.625 cv
237.586 271.625 236.375 272.835 236.375 274.325 cv
236.375 275.815 237.586 277.025 239.076 277.025 cv
240.566 277.025 241.775 275.815 241.775 274.325 cv
279.455 185.045 mo
279.455 183.555 278.246 182.345 276.756 182.345 cv
275.266 182.345 274.057 183.555 274.057 185.045 cv
274.057 186.536 275.266 187.745 276.756 187.745 cv
278.246 187.745 279.455 186.536 279.455 185.045 cv
112.296 253.205 mo
112.296 251.715 111.086 250.505 109.596 250.505 cv
108.105 250.505 106.896 251.715 106.896 253.205 cv
106.896 254.695 108.105 255.905 109.596 255.905 cv
111.086 255.905 112.296 254.695 112.296 253.205 cv
328.295 217.565 mo
328.295 216.074 327.086 214.865 325.596 214.865 cv
324.105 214.865 322.896 216.074 322.896 217.565 cv
322.896 219.056 324.105 220.265 325.596 220.265 cv
327.086 220.265 328.295 219.056 328.295 217.565 cv
126.456 313.325 mo
126.456 311.835 125.246 310.625 123.756 310.625 cv
122.266 310.625 121.056 311.835 121.056 313.325 cv
121.056 314.815 122.266 316.025 123.756 316.025 cv
125.246 316.025 126.456 314.815 126.456 313.325 cv
421.656 154.565 mo
421.656 153.075 420.445 151.865 418.955 151.865 cv
417.465 151.865 416.256 153.075 416.256 154.565 cv
416.256 156.056 417.465 157.265 418.955 157.265 cv
420.445 157.265 421.656 156.056 421.656 154.565 cv
169.536 310.686 mo
169.536 309.194 168.326 307.985 166.836 307.985 cv
165.346 307.985 164.136 309.194 164.136 310.686 cv
164.136 312.176 165.346 313.385 166.836 313.385 cv
168.326 313.385 169.536 312.176 169.536 310.686 cv
290.375 213.965 mo
290.375 212.475 289.166 211.265 287.676 211.265 cv
286.186 211.265 284.977 212.475 284.977 213.965 cv
284.977 215.455 286.186 216.665 287.676 216.665 cv
289.166 216.665 290.375 215.455 290.375 213.965 cv
300.576 171.245 mo
300.576 169.755 299.367 168.545 297.875 168.545 cv
296.385 168.545 295.176 169.755 295.176 171.245 cv
295.176 172.735 296.385 173.945 297.875 173.945 cv
299.367 173.945 300.576 172.735 300.576 171.245 cv
313.775 173.885 mo
313.775 172.395 312.566 171.185 311.076 171.185 cv
309.586 171.185 308.375 172.395 308.375 173.885 cv
308.375 175.375 309.586 176.585 311.076 176.585 cv
312.566 176.585 313.775 175.375 313.775 173.885 cv
153.816 202.925 mo
153.816 201.435 152.606 200.225 151.116 200.225 cv
149.625 200.225 148.416 201.435 148.416 202.925 cv
148.416 204.415 149.625 205.625 151.116 205.625 cv
152.606 205.625 153.816 204.415 153.816 202.925 cv
380.615 185.525 mo
380.615 184.035 379.406 182.825 377.916 182.825 cv
376.426 182.825 375.217 184.035 375.217 185.525 cv
375.217 187.016 376.426 188.225 377.916 188.225 cv
379.406 188.225 380.615 187.016 380.615 185.525 cv
405.936 215.646 mo
405.936 214.154 404.727 212.945 403.236 212.945 cv
401.746 212.945 400.535 214.154 400.535 215.646 cv
400.535 217.136 401.746 218.345 403.236 218.345 cv
404.727 218.345 405.936 217.136 405.936 215.646 cv
330.096 300.245 mo
330.096 298.755 328.887 297.545 327.396 297.545 cv
325.906 297.545 324.695 298.755 324.695 300.245 cv
324.695 301.735 325.906 302.945 327.396 302.945 cv
328.887 302.945 330.096 301.735 330.096 300.245 cv
232.535 130.205 mo
232.535 128.715 231.326 127.505 229.836 127.505 cv
228.346 127.505 227.137 128.715 227.137 130.205 cv
227.137 131.695 228.346 132.905 229.836 132.905 cv
231.326 132.905 232.535 131.695 232.535 130.205 cv
143.976 321.845 mo
143.976 320.354 142.766 319.146 141.276 319.146 cv
139.786 319.146 138.576 320.354 138.576 321.845 cv
138.576 323.336 139.786 324.545 141.276 324.545 cv
142.766 324.545 143.976 323.336 143.976 321.845 cv
135.696 252.125 mo
135.696 250.635 134.486 249.425 132.996 249.425 cv
131.505 249.425 130.296 250.635 130.296 252.125 cv
130.296 253.615 131.505 254.825 132.996 254.825 cv
134.486 254.825 135.696 253.615 135.696 252.125 cv
96.4561 292.686 mo
96.4561 291.194 95.2461 289.985 93.7559 289.985 cv
92.2656 289.985 91.0557 291.194 91.0557 292.686 cv
91.0557 294.176 92.2656 295.385 93.7559 295.385 cv
95.2461 295.385 96.4561 294.176 96.4561 292.686 cv
167.736 179.885 mo
167.736 178.395 166.526 177.185 165.036 177.185 cv
163.545 177.185 162.336 178.395 162.336 179.885 cv
162.336 181.375 163.545 182.585 165.036 182.585 cv
166.526 182.585 167.736 181.375 167.736 179.885 cv
115.896 277.085 mo
115.896 275.595 114.686 274.385 113.196 274.385 cv
111.706 274.385 110.496 275.595 110.496 277.085 cv
110.496 278.575 111.706 279.785 113.196 279.785 cv
114.686 279.785 115.896 278.575 115.896 277.085 cv
378.217 206.165 mo
378.217 204.675 377.006 203.465 375.516 203.465 cv
374.025 203.465 372.816 204.675 372.816 206.165 cv
372.816 207.655 374.025 208.865 375.516 208.865 cv
377.006 208.865 378.217 207.655 378.217 206.165 cv
288.695 129.365 mo
288.695 127.875 287.486 126.665 285.996 126.665 cv
284.506 126.665 283.295 127.875 283.295 129.365 cv
283.295 130.855 284.506 132.065 285.996 132.065 cv
287.486 132.065 288.695 130.855 288.695 129.365 cv
108.816 270.965 mo
108.816 269.475 107.606 268.265 106.116 268.265 cv
104.625 268.265 103.416 269.475 103.416 270.965 cv
103.416 272.455 104.625 273.665 106.116 273.665 cv
107.606 273.665 108.816 272.455 108.816 270.965 cv
133.656 198.845 mo
133.656 197.354 132.446 196.146 130.956 196.146 cv
129.465 196.146 128.256 197.354 128.256 198.845 cv
128.256 200.336 129.465 201.545 130.956 201.545 cv
132.446 201.545 133.656 200.336 133.656 198.845 cv
77.856 243.725 mo
77.856 242.234 76.6465 241.025 75.1558 241.025 cv
73.6655 241.025 72.4561 242.234 72.4561 243.725 cv
72.4561 245.216 73.6655 246.425 75.1558 246.425 cv
76.6465 246.425 77.856 245.216 77.856 243.725 cv
324.096 242.045 mo
324.096 240.555 322.887 239.345 321.396 239.345 cv
319.906 239.345 318.695 240.555 318.695 242.045 cv
318.695 243.535 319.906 244.745 321.396 244.745 cv
322.887 244.745 324.096 243.535 324.096 242.045 cv
345.096 217.925 mo
345.096 216.435 343.887 215.225 342.396 215.225 cv
340.906 215.225 339.695 216.435 339.695 217.925 cv
339.695 219.415 340.906 220.625 342.396 220.625 cv
343.887 220.625 345.096 219.415 345.096 217.925 cv
422.375 198.005 mo
422.375 196.515 421.166 195.305 419.676 195.305 cv
418.186 195.305 416.977 196.515 416.977 198.005 cv
416.977 199.495 418.186 200.705 419.676 200.705 cv
421.166 200.705 422.375 199.495 422.375 198.005 cv
136.056 216.845 mo
136.056 215.354 134.846 214.146 133.356 214.146 cv
131.865 214.146 130.656 215.354 130.656 216.845 cv
130.656 218.336 131.865 219.545 133.356 219.545 cv
134.846 219.545 136.056 218.336 136.056 216.845 cv
330.936 242.646 mo
330.936 241.154 329.727 239.945 328.236 239.945 cv
326.746 239.945 325.535 241.154 325.535 242.646 cv
325.535 244.136 326.746 245.345 328.236 245.345 cv
329.727 245.345 330.936 244.136 330.936 242.646 cv
255.336 346.925 mo
255.336 345.435 254.127 344.225 252.637 344.225 cv
251.145 344.225 249.936 345.435 249.936 346.925 cv
249.936 348.415 251.145 349.625 252.637 349.625 cv
254.127 349.625 255.336 348.415 255.336 346.925 cv
59.7358 300.605 mo
59.7358 299.114 58.5264 297.905 57.0356 297.905 cv
55.5454 297.905 54.3359 299.114 54.3359 300.605 cv
54.3359 302.096 55.5454 303.305 57.0356 303.305 cv
58.5264 303.305 59.7358 302.096 59.7358 300.605 cv
157.776 223.445 mo
157.776 221.955 156.566 220.745 155.076 220.745 cv
153.585 220.745 152.376 221.955 152.376 223.445 cv
152.376 224.936 153.585 226.146 155.076 226.146 cv
156.566 226.146 157.776 224.936 157.776 223.445 cv
273.096 180.605 mo
273.096 179.115 271.887 177.905 270.396 177.905 cv
268.906 177.905 267.695 179.115 267.695 180.605 cv
267.695 182.096 268.906 183.305 270.396 183.305 cv
271.887 183.305 273.096 182.096 273.096 180.605 cv
298.656 188.285 mo
298.656 186.794 297.445 185.585 295.955 185.585 cv
294.465 185.585 293.256 186.794 293.256 188.285 cv
293.256 189.775 294.465 190.985 295.955 190.985 cv
297.445 190.985 298.656 189.775 298.656 188.285 cv
278.375 139.205 mo
278.375 137.715 277.166 136.505 275.676 136.505 cv
274.186 136.505 272.977 137.715 272.977 139.205 cv
272.977 140.695 274.186 141.905 275.676 141.905 cv
277.166 141.905 278.375 140.695 278.375 139.205 cv
139.176 220.805 mo
139.176 219.314 137.966 218.105 136.476 218.105 cv
134.985 218.105 133.776 219.314 133.776 220.805 cv
133.776 222.296 134.985 223.505 136.476 223.505 cv
137.966 223.505 139.176 222.296 139.176 220.805 cv
282.336 147.245 mo
282.336 145.755 281.127 144.545 279.637 144.545 cv
278.145 144.545 276.936 145.755 276.936 147.245 cv
276.936 148.735 278.145 149.945 279.637 149.945 cv
281.127 149.945 282.336 148.735 282.336 147.245 cv
257.375 153.725 mo
257.375 152.235 256.166 151.025 254.676 151.025 cv
253.186 151.025 251.977 152.235 251.977 153.725 cv
251.977 155.215 253.186 156.425 254.676 156.425 cv
256.166 156.425 257.375 155.215 257.375 153.725 cv
81.2158 252.365 mo
81.2158 250.875 80.0063 249.665 78.5161 249.665 cv
77.0254 249.665 75.8159 250.875 75.8159 252.365 cv
75.8159 253.855 77.0254 255.065 78.5161 255.065 cv
80.0063 255.065 81.2158 253.855 81.2158 252.365 cv
320.855 166.445 mo
320.855 164.955 319.646 163.745 318.156 163.745 cv
316.666 163.745 315.455 164.955 315.455 166.445 cv
315.455 167.936 316.666 169.145 318.156 169.145 cv
319.646 169.145 320.855 167.936 320.855 166.445 cv
277.057 172.925 mo
277.057 171.435 275.846 170.225 274.355 170.225 cv
272.865 170.225 271.656 171.435 271.656 172.925 cv
271.656 174.416 272.865 175.625 274.355 175.625 cv
275.846 175.625 277.057 174.416 277.057 172.925 cv
407.496 221.165 mo
407.496 219.675 406.287 218.465 404.795 218.465 cv
403.305 218.465 402.096 219.675 402.096 221.165 cv
402.096 222.655 403.305 223.865 404.795 223.865 cv
406.287 223.865 407.496 222.655 407.496 221.165 cv
169.416 299.045 mo
169.416 297.555 168.206 296.345 166.716 296.345 cv
165.226 296.345 164.016 297.555 164.016 299.045 cv
164.016 300.535 165.226 301.745 166.716 301.745 cv
168.206 301.745 169.416 300.535 169.416 299.045 cv
260.016 290.165 mo
260.016 288.675 258.807 287.465 257.316 287.465 cv
255.826 287.465 254.615 288.675 254.615 290.165 cv
254.615 291.655 255.826 292.865 257.316 292.865 cv
258.807 292.865 260.016 291.655 260.016 290.165 cv
115.416 227.885 mo
115.416 226.395 114.206 225.186 112.716 225.186 cv
111.226 225.186 110.016 226.395 110.016 227.885 cv
110.016 229.375 111.226 230.585 112.716 230.585 cv
114.206 230.585 115.416 229.375 115.416 227.885 cv
65.856 156.125 mo
65.856 154.635 64.6465 153.425 63.1558 153.425 cv
61.6655 153.425 60.4561 154.635 60.4561 156.125 cv
60.4561 157.615 61.6655 158.825 63.1558 158.825 cv
64.6465 158.825 65.856 157.615 65.856 156.125 cv
131.976 227.285 mo
131.976 225.795 130.766 224.585 129.276 224.585 cv
127.786 224.585 126.576 225.795 126.576 227.285 cv
126.576 228.775 127.786 229.985 129.276 229.985 cv
130.766 229.985 131.976 228.775 131.976 227.285 cv
298.535 262.085 mo
298.535 260.595 297.326 259.385 295.836 259.385 cv
294.346 259.385 293.137 260.595 293.137 262.085 cv
293.137 263.575 294.346 264.785 295.836 264.785 cv
297.326 264.785 298.535 263.575 298.535 262.085 cv
231.096 154.685 mo
231.096 153.195 229.887 151.985 228.396 151.985 cv
226.906 151.985 225.695 153.195 225.695 154.685 cv
225.695 156.175 226.906 157.385 228.396 157.385 cv
229.887 157.385 231.096 156.175 231.096 154.685 cv
264.695 113.885 mo
264.695 112.395 263.486 111.185 261.996 111.185 cv
260.506 111.185 259.295 112.395 259.295 113.885 cv
259.295 115.375 260.506 116.585 261.996 116.585 cv
263.486 116.585 264.695 115.375 264.695 113.885 cv
281.736 155.525 mo
281.736 154.035 280.525 152.825 279.035 152.825 cv
277.545 152.825 276.336 154.035 276.336 155.525 cv
276.336 157.016 277.545 158.225 279.035 158.225 cv
280.525 158.225 281.736 157.016 281.736 155.525 cv
208.176 258.365 mo
208.176 256.875 206.966 255.665 205.476 255.665 cv
203.985 255.665 202.776 256.875 202.776 258.365 cv
202.776 259.855 203.985 261.065 205.476 261.065 cv
206.966 261.065 208.176 259.855 208.176 258.365 cv
76.2959 319.085 mo
76.2959 317.595 75.0864 316.385 73.5957 316.385 cv
72.1055 316.385 70.896 317.595 70.896 319.085 cv
70.896 320.575 72.1055 321.785 73.5957 321.785 cv
75.0864 321.785 76.2959 320.575 76.2959 319.085 cv
192.096 184.685 mo
192.096 183.195 190.886 181.985 189.396 181.985 cv
187.905 181.985 186.696 183.195 186.696 184.685 cv
186.696 186.175 187.905 187.385 189.396 187.385 cv
190.886 187.385 192.096 186.175 192.096 184.685 cv
53.2559 255.725 mo
53.2559 254.234 52.0464 253.025 50.5557 253.025 cv
49.0654 253.025 47.856 254.234 47.856 255.725 cv
47.856 257.216 49.0654 258.425 50.5557 258.425 cv
52.0464 258.425 53.2559 257.216 53.2559 255.725 cv
339.096 235.686 mo
339.096 234.194 337.887 232.985 336.396 232.985 cv
334.906 232.985 333.695 234.194 333.695 235.686 cv
333.695 237.176 334.906 238.385 336.396 238.385 cv
337.887 238.385 339.096 237.176 339.096 235.686 cv
91.416 280.445 mo
91.416 278.955 90.2061 277.745 88.7158 277.745 cv
87.2256 277.745 86.0161 278.955 86.0161 280.445 cv
86.0161 281.936 87.2256 283.146 88.7158 283.146 cv
90.2061 283.146 91.416 281.936 91.416 280.445 cv
321.096 186.245 mo
321.096 184.755 319.887 183.545 318.396 183.545 cv
316.906 183.545 315.695 184.755 315.695 186.245 cv
315.695 187.735 316.906 188.945 318.396 188.945 cv
319.887 188.945 321.096 187.735 321.096 186.245 cv
197.256 201.245 mo
197.256 199.755 196.046 198.545 194.556 198.545 cv
193.065 198.545 191.856 199.755 191.856 201.245 cv
191.856 202.735 193.065 203.945 194.556 203.945 cv
196.046 203.945 197.256 202.735 197.256 201.245 cv
201.816 330.605 mo
201.816 329.114 200.606 327.905 199.116 327.905 cv
197.625 327.905 196.416 329.114 196.416 330.605 cv
196.416 332.096 197.625 333.305 199.116 333.305 cv
200.606 333.305 201.816 332.096 201.816 330.605 cv
397.057 148.205 mo
397.057 146.715 395.846 145.505 394.355 145.505 cv
392.865 145.505 391.656 146.715 391.656 148.205 cv
391.656 149.695 392.865 150.905 394.355 150.905 cv
395.846 150.905 397.057 149.695 397.057 148.205 cv
295.295 149.165 mo
295.295 147.675 294.086 146.465 292.596 146.465 cv
291.105 146.465 289.896 147.675 289.896 149.165 cv
289.896 150.655 291.105 151.865 292.596 151.865 cv
294.086 151.865 295.295 150.655 295.295 149.165 cv
165.816 187.205 mo
165.816 185.715 164.606 184.505 163.116 184.505 cv
161.625 184.505 160.416 185.715 160.416 187.205 cv
160.416 188.695 161.625 189.905 163.116 189.905 cv
164.606 189.905 165.816 188.695 165.816 187.205 cv
89.0161 257.405 mo
89.0161 255.915 87.8062 254.705 86.3159 254.705 cv
84.8257 254.705 83.6157 255.915 83.6157 257.405 cv
83.6157 258.896 84.8257 260.105 86.3159 260.105 cv
87.8062 260.105 89.0161 258.896 89.0161 257.405 cv
430.295 187.805 mo
430.295 186.314 429.086 185.105 427.596 185.105 cv
426.105 185.105 424.896 186.314 424.896 187.805 cv
424.896 189.295 426.105 190.505 427.596 190.505 cv
429.086 190.505 430.295 189.295 430.295 187.805 cv
277.057 205.325 mo
277.057 203.835 275.846 202.625 274.355 202.625 cv
272.865 202.625 271.656 203.835 271.656 205.325 cv
271.656 206.815 272.865 208.025 274.355 208.025 cv
275.846 208.025 277.057 206.815 277.057 205.325 cv
230.736 144.485 mo
230.736 142.995 229.525 141.785 228.035 141.785 cv
226.545 141.785 225.336 142.995 225.336 144.485 cv
225.336 145.976 226.545 147.185 228.035 147.185 cv
229.525 147.185 230.736 145.976 230.736 144.485 cv
130.656 252.365 mo
130.656 250.875 129.446 249.665 127.956 249.665 cv
126.465 249.665 125.256 250.875 125.256 252.365 cv
125.256 253.855 126.465 255.065 127.956 255.065 cv
129.446 255.065 130.656 253.855 130.656 252.365 cv
191.376 248.405 mo
191.376 246.915 190.167 245.705 188.676 245.705 cv
187.186 245.705 185.976 246.915 185.976 248.405 cv
185.976 249.896 187.186 251.105 188.676 251.105 cv
190.167 251.105 191.376 249.896 191.376 248.405 cv
258.096 118.445 mo
258.096 116.955 256.887 115.745 255.396 115.745 cv
253.906 115.745 252.695 116.955 252.695 118.445 cv
252.695 119.936 253.906 121.145 255.396 121.145 cv
256.887 121.145 258.096 119.936 258.096 118.445 cv
281.736 213.845 mo
281.736 212.354 280.525 211.146 279.035 211.146 cv
277.545 211.146 276.336 212.354 276.336 213.845 cv
276.336 215.336 277.545 216.545 279.035 216.545 cv
280.525 216.545 281.736 215.336 281.736 213.845 cv
284.977 141.365 mo
284.977 139.875 283.766 138.665 282.275 138.665 cv
280.785 138.665 279.576 139.875 279.576 141.365 cv
279.576 142.855 280.785 144.065 282.275 144.065 cv
283.766 144.065 284.977 142.855 284.977 141.365 cv
197.376 168.845 mo
197.376 167.354 196.167 166.145 194.676 166.145 cv
193.186 166.145 191.976 167.354 191.976 168.845 cv
191.976 170.335 193.186 171.545 194.676 171.545 cv
196.167 171.545 197.376 170.335 197.376 168.845 cv
95.2559 275.405 mo
95.2559 273.915 94.0464 272.705 92.5557 272.705 cv
91.0654 272.705 89.856 273.915 89.856 275.405 cv
89.856 276.896 91.0654 278.105 92.5557 278.105 cv
94.0464 278.105 95.2559 276.896 95.2559 275.405 cv
56.6157 174.845 mo
56.6157 173.354 55.4063 172.145 53.916 172.145 cv
52.4253 172.145 51.2158 173.354 51.2158 174.845 cv
51.2158 176.335 52.4253 177.545 53.916 177.545 cv
55.4063 177.545 56.6157 176.335 56.6157 174.845 cv
129.096 261.845 mo
129.096 260.354 127.886 259.146 126.396 259.146 cv
124.905 259.146 123.696 260.354 123.696 261.845 cv
123.696 263.336 124.905 264.545 126.396 264.545 cv
127.886 264.545 129.096 263.336 129.096 261.845 cv
178.656 189.725 mo
178.656 188.235 177.446 187.025 175.956 187.025 cv
174.465 187.025 173.256 188.235 173.256 189.725 cv
173.256 191.215 174.465 192.425 175.956 192.425 cv
177.446 192.425 178.656 191.215 178.656 189.725 cv
184.056 209.885 mo
184.056 208.395 182.846 207.186 181.356 207.186 cv
179.866 207.186 178.656 208.395 178.656 209.885 cv
178.656 211.375 179.866 212.585 181.356 212.585 cv
182.846 212.585 184.056 211.375 184.056 209.885 cv
319.416 206.525 mo
319.416 205.035 318.207 203.825 316.717 203.825 cv
315.225 203.825 314.016 205.035 314.016 206.525 cv
314.016 208.016 315.225 209.225 316.717 209.225 cv
318.207 209.225 319.416 208.016 319.416 206.525 cv
133.296 228.125 mo
133.296 226.635 132.086 225.425 130.596 225.425 cv
129.105 225.425 127.896 226.635 127.896 228.125 cv
127.896 229.615 129.105 230.825 130.596 230.825 cv
132.086 230.825 133.296 229.615 133.296 228.125 cv
324.455 288.965 mo
324.455 287.475 323.246 286.265 321.756 286.265 cv
320.266 286.265 319.057 287.475 319.057 288.965 cv
319.057 290.455 320.266 291.665 321.756 291.665 cv
323.246 291.665 324.455 290.455 324.455 288.965 cv
74.6157 300.605 mo
74.6157 299.114 73.4063 297.905 71.916 297.905 cv
70.4253 297.905 69.2158 299.114 69.2158 300.605 cv
69.2158 302.096 70.4253 303.305 71.916 303.305 cv
73.4063 303.305 74.6157 302.096 74.6157 300.605 cv
196.656 255.725 mo
196.656 254.234 195.446 253.025 193.956 253.025 cv
192.465 253.025 191.256 254.234 191.256 255.725 cv
191.256 257.216 192.465 258.425 193.956 258.425 cv
195.446 258.425 196.656 257.216 196.656 255.725 cv
59.0161 170.165 mo
59.0161 168.675 57.8062 167.465 56.3159 167.465 cv
54.8257 167.465 53.6157 168.675 53.6157 170.165 cv
53.6157 171.655 54.8257 172.865 56.3159 172.865 cv
57.8062 172.865 59.0161 171.655 59.0161 170.165 cv
294.217 266.165 mo
294.217 264.675 293.006 263.465 291.516 263.465 cv
290.025 263.465 288.816 264.675 288.816 266.165 cv
288.816 267.655 290.025 268.865 291.516 268.865 cv
293.006 268.865 294.217 267.655 294.217 266.165 cv
49.1758 147.965 mo
49.1758 146.475 47.9663 145.265 46.4761 145.265 cv
44.9854 145.265 43.7759 146.475 43.7759 147.965 cv
43.7759 149.456 44.9854 150.665 46.4761 150.665 cv
47.9663 150.665 49.1758 149.456 49.1758 147.965 cv
418.057 128.765 mo
418.057 127.274 416.846 126.065 415.355 126.065 cv
413.865 126.065 412.656 127.274 412.656 128.765 cv
412.656 130.255 413.865 131.465 415.355 131.465 cv
416.846 131.465 418.057 130.255 418.057 128.765 cv
86.856 259.565 mo
86.856 258.074 85.6465 256.865 84.1558 256.865 cv
82.6655 256.865 81.4561 258.074 81.4561 259.565 cv
81.4561 261.056 82.6655 262.265 84.1558 262.265 cv
85.6465 262.265 86.856 261.056 86.856 259.565 cv
206.016 166.445 mo
206.016 164.955 204.806 163.745 203.316 163.745 cv
201.826 163.745 200.616 164.955 200.616 166.445 cv
200.616 167.936 201.826 169.145 203.316 169.145 cv
204.806 169.145 206.016 167.936 206.016 166.445 cv
292.896 160.205 mo
292.896 158.715 291.686 157.505 290.195 157.505 cv
288.705 157.505 287.496 158.715 287.496 160.205 cv
287.496 161.695 288.705 162.905 290.195 162.905 cv
291.686 162.905 292.896 161.695 292.896 160.205 cv
47.376 297.365 mo
47.376 295.875 46.1665 294.665 44.6758 294.665 cv
43.1855 294.665 41.9761 295.875 41.9761 297.365 cv
41.9761 298.855 43.1855 300.065 44.6758 300.065 cv
46.1665 300.065 47.376 298.855 47.376 297.365 cv
298.295 277.085 mo
298.295 275.595 297.086 274.385 295.596 274.385 cv
294.105 274.385 292.896 275.595 292.896 277.085 cv
292.896 278.575 294.105 279.785 295.596 279.785 cv
297.086 279.785 298.295 278.575 298.295 277.085 cv
361.896 199.925 mo
361.896 198.435 360.686 197.225 359.195 197.225 cv
357.705 197.225 356.496 198.435 356.496 199.925 cv
356.496 201.415 357.705 202.625 359.195 202.625 cv
360.686 202.625 361.896 201.415 361.896 199.925 cv
197.016 322.085 mo
197.016 320.595 195.806 319.385 194.316 319.385 cv
192.826 319.385 191.616 320.595 191.616 322.085 cv
191.616 323.575 192.826 324.785 194.316 324.785 cv
195.806 324.785 197.016 323.575 197.016 322.085 cv
75.4561 264.965 mo
75.4561 263.475 74.2461 262.265 72.7559 262.265 cv
71.2656 262.265 70.0557 263.475 70.0557 264.965 cv
70.0557 266.455 71.2656 267.665 72.7559 267.665 cv
74.2461 267.665 75.4561 266.455 75.4561 264.965 cv
68.7358 154.085 mo
68.7358 152.595 67.5264 151.385 66.0356 151.385 cv
64.5454 151.385 63.3359 152.595 63.3359 154.085 cv
63.3359 155.575 64.5454 156.785 66.0356 156.785 cv
67.5264 156.785 68.7358 155.575 68.7358 154.085 cv
344.496 245.646 mo
344.496 244.154 343.287 242.945 341.795 242.945 cv
340.305 242.945 339.096 244.154 339.096 245.646 cv
339.096 247.136 340.305 248.345 341.795 248.345 cv
343.287 248.345 344.496 247.136 344.496 245.646 cv
334.176 159.725 mo
334.176 158.235 332.967 157.025 331.477 157.025 cv
329.986 157.025 328.775 158.235 328.775 159.725 cv
328.775 161.215 329.986 162.425 331.477 162.425 cv
332.967 162.425 334.176 161.215 334.176 159.725 cv
213.696 190.445 mo
213.696 188.955 212.486 187.745 210.996 187.745 cv
209.505 187.745 208.296 188.955 208.296 190.445 cv
208.296 191.936 209.505 193.145 210.996 193.145 cv
212.486 193.145 213.696 191.936 213.696 190.445 cv
250.057 225.605 mo
250.057 224.114 248.846 222.905 247.355 222.905 cv
245.865 222.905 244.656 224.114 244.656 225.605 cv
244.656 227.096 245.865 228.305 247.355 228.305 cv
248.846 228.305 250.057 227.096 250.057 225.605 cv
77.6157 238.205 mo
77.6157 236.715 76.4063 235.505 74.916 235.505 cv
73.4253 235.505 72.2158 236.715 72.2158 238.205 cv
72.2158 239.695 73.4253 240.905 74.916 240.905 cv
76.4063 240.905 77.6157 239.695 77.6157 238.205 cv
95.856 261.605 mo
95.856 260.114 94.6465 258.905 93.1558 258.905 cv
91.6655 258.905 90.4561 260.114 90.4561 261.605 cv
90.4561 263.096 91.6655 264.305 93.1558 264.305 cv
94.6465 264.305 95.856 263.096 95.856 261.605 cv
122.976 308.765 mo
122.976 307.274 121.766 306.065 120.276 306.065 cv
118.786 306.065 117.576 307.274 117.576 308.765 cv
117.576 310.256 118.786 311.465 120.276 311.465 cv
121.766 311.465 122.976 310.256 122.976 308.765 cv
243.695 122.525 mo
243.695 121.035 242.486 119.825 240.996 119.825 cv
239.506 119.825 238.295 121.035 238.295 122.525 cv
238.295 124.016 239.506 125.225 240.996 125.225 cv
242.486 125.225 243.695 124.016 243.695 122.525 cv
264.695 193.565 mo
264.695 192.075 263.486 190.865 261.996 190.865 cv
260.506 190.865 259.295 192.075 259.295 193.565 cv
259.295 195.056 260.506 196.265 261.996 196.265 cv
263.486 196.265 264.695 195.056 264.695 193.565 cv
259.176 169.805 mo
259.176 168.314 257.967 167.105 256.477 167.105 cv
254.986 167.105 253.775 168.314 253.775 169.805 cv
253.775 171.295 254.986 172.505 256.477 172.505 cv
257.967 172.505 259.176 171.295 259.176 169.805 cv
332.855 219.245 mo
332.855 217.755 331.646 216.545 330.156 216.545 cv
328.666 216.545 327.455 217.755 327.455 219.245 cv
327.455 220.735 328.666 221.945 330.156 221.945 cv
331.646 221.945 332.855 220.735 332.855 219.245 cv
348.936 195.125 mo
348.936 193.635 347.727 192.425 346.236 192.425 cv
344.746 192.425 343.535 193.635 343.535 195.125 cv
343.535 196.615 344.746 197.825 346.236 197.825 cv
347.727 197.825 348.936 196.615 348.936 195.125 cv
229.656 230.285 mo
229.656 228.795 228.445 227.585 226.955 227.585 cv
225.465 227.585 224.256 228.795 224.256 230.285 cv
224.256 231.775 225.465 232.985 226.955 232.985 cv
228.445 232.985 229.656 231.775 229.656 230.285 cv
192.576 195.965 mo
192.576 194.475 191.366 193.265 189.876 193.265 cv
188.385 193.265 187.176 194.475 187.176 195.965 cv
187.176 197.455 188.385 198.665 189.876 198.665 cv
191.366 198.665 192.576 197.455 192.576 195.965 cv
192.936 197.885 mo
192.936 196.395 191.726 195.186 190.236 195.186 cv
188.746 195.186 187.536 196.395 187.536 197.885 cv
187.536 199.375 188.746 200.585 190.236 200.585 cv
191.726 200.585 192.936 199.375 192.936 197.885 cv
86.7358 266.045 mo
86.7358 264.555 85.5264 263.345 84.0356 263.345 cv
82.5454 263.345 81.3359 264.555 81.3359 266.045 cv
81.3359 267.535 82.5454 268.745 84.0356 268.745 cv
85.5264 268.745 86.7358 267.535 86.7358 266.045 cv
240.217 123.125 mo
240.217 121.635 239.006 120.425 237.516 120.425 cv
236.025 120.425 234.816 121.635 234.816 123.125 cv
234.816 124.615 236.025 125.825 237.516 125.825 cv
239.006 125.825 240.217 124.615 240.217 123.125 cv
165.456 274.445 mo
165.456 272.955 164.246 271.745 162.756 271.745 cv
161.266 271.745 160.056 272.955 160.056 274.445 cv
160.056 275.936 161.266 277.146 162.756 277.146 cv
164.246 277.146 165.456 275.936 165.456 274.445 cv
280.775 143.045 mo
280.775 141.555 279.566 140.345 278.076 140.345 cv
276.586 140.345 275.375 141.555 275.375 143.045 cv
275.375 144.536 276.586 145.745 278.076 145.745 cv
279.566 145.745 280.775 144.536 280.775 143.045 cv
246.936 128.765 mo
246.936 127.274 245.727 126.065 244.236 126.065 cv
242.746 126.065 241.535 127.274 241.535 128.765 cv
241.535 130.255 242.746 131.465 244.236 131.465 cv
245.727 131.465 246.936 130.255 246.936 128.765 cv
285.816 190.445 mo
285.816 188.955 284.605 187.745 283.115 187.745 cv
281.625 187.745 280.416 188.955 280.416 190.445 cv
280.416 191.936 281.625 193.145 283.115 193.145 cv
284.605 193.145 285.816 191.936 285.816 190.445 cv
246.695 130.925 mo
246.695 129.435 245.486 128.225 243.996 128.225 cv
242.506 128.225 241.295 129.435 241.295 130.925 cv
241.295 132.416 242.506 133.625 243.996 133.625 cv
245.486 133.625 246.695 132.416 246.695 130.925 cv
111.096 247.325 mo
111.096 245.835 109.886 244.625 108.396 244.625 cv
106.905 244.625 105.696 245.835 105.696 247.325 cv
105.696 248.815 106.905 250.025 108.396 250.025 cv
109.886 250.025 111.096 248.815 111.096 247.325 cv
290.016 242.045 mo
290.016 240.555 288.807 239.345 287.316 239.345 cv
285.826 239.345 284.615 240.555 284.615 242.045 cv
284.615 243.535 285.826 244.745 287.316 244.745 cv
288.807 244.745 290.016 243.535 290.016 242.045 cv
178.776 305.525 mo
178.776 304.035 177.566 302.825 176.076 302.825 cv
174.585 302.825 173.376 304.035 173.376 305.525 cv
173.376 307.016 174.585 308.225 176.076 308.225 cv
177.566 308.225 178.776 307.016 178.776 305.525 cv
378.217 253.686 mo
378.217 252.194 377.006 250.985 375.516 250.985 cv
374.025 250.985 372.816 252.194 372.816 253.686 cv
372.816 255.176 374.025 256.385 375.516 256.385 cv
377.006 256.385 378.217 255.176 378.217 253.686 cv
240.096 197.646 mo
240.096 196.154 238.887 194.945 237.396 194.945 cv
235.906 194.945 234.695 196.154 234.695 197.646 cv
234.695 199.136 235.906 200.345 237.396 200.345 cv
238.887 200.345 240.096 199.136 240.096 197.646 cv
66.6958 267.605 mo
66.6958 266.114 65.4863 264.905 63.9961 264.905 cv
62.5054 264.905 61.2959 266.114 61.2959 267.605 cv
61.2959 269.096 62.5054 270.305 63.9961 270.305 cv
65.4863 270.305 66.6958 269.096 66.6958 267.605 cv
211.536 215.045 mo
211.536 213.555 210.326 212.345 208.836 212.345 cv
207.346 212.345 206.136 213.555 206.136 215.045 cv
206.136 216.535 207.346 217.745 208.836 217.745 cv
210.326 217.745 211.536 216.535 211.536 215.045 cv
361.535 211.686 mo
361.535 210.194 360.326 208.985 358.836 208.985 cv
357.346 208.985 356.137 210.194 356.137 211.686 cv
356.137 213.176 357.346 214.385 358.836 214.385 cv
360.326 214.385 361.535 213.176 361.535 211.686 cv
105.696 227.885 mo
105.696 226.395 104.486 225.186 102.996 225.186 cv
101.505 225.186 100.296 226.395 100.296 227.885 cv
100.296 229.375 101.505 230.585 102.996 230.585 cv
104.486 230.585 105.696 229.375 105.696 227.885 cv
137.736 305.646 mo
137.736 304.154 136.526 302.945 135.036 302.945 cv
133.545 302.945 132.336 304.154 132.336 305.646 cv
132.336 307.136 133.545 308.345 135.036 308.345 cv
136.526 308.345 137.736 307.136 137.736 305.646 cv
89.1357 240.485 mo
89.1357 238.994 87.9263 237.785 86.436 237.785 cv
84.9453 237.785 83.7358 238.994 83.7358 240.485 cv
83.7358 241.976 84.9453 243.186 86.436 243.186 cv
87.9263 243.186 89.1357 241.976 89.1357 240.485 cv
339.217 225.725 mo
339.217 224.234 338.006 223.025 336.516 223.025 cv
335.025 223.025 333.816 224.234 333.816 225.725 cv
333.816 227.216 335.025 228.425 336.516 228.425 cv
338.006 228.425 339.217 227.216 339.217 225.725 cv
181.056 184.685 mo
181.056 183.195 179.846 181.985 178.356 181.985 cv
176.866 181.985 175.656 183.195 175.656 184.685 cv
175.656 186.175 176.866 187.385 178.356 187.385 cv
179.846 187.385 181.056 186.175 181.056 184.685 cv
277.896 322.205 mo
277.896 320.715 276.686 319.505 275.195 319.505 cv
273.705 319.505 272.496 320.715 272.496 322.205 cv
272.496 323.695 273.705 324.905 275.195 324.905 cv
276.686 324.905 277.896 323.695 277.896 322.205 cv
384.816 252.845 mo
384.816 251.354 383.605 250.146 382.115 250.146 cv
380.625 250.146 379.416 251.354 379.416 252.845 cv
379.416 254.336 380.625 255.545 382.115 255.545 cv
383.605 255.545 384.816 254.336 384.816 252.845 cv
272.496 138.845 mo
272.496 137.354 271.287 136.145 269.795 136.145 cv
268.305 136.145 267.096 137.354 267.096 138.845 cv
267.096 140.335 268.305 141.545 269.795 141.545 cv
271.287 141.545 272.496 140.335 272.496 138.845 cv
405.217 186.605 mo
405.217 185.115 404.006 183.905 402.516 183.905 cv
401.025 183.905 399.816 185.115 399.816 186.605 cv
399.816 188.096 401.025 189.305 402.516 189.305 cv
404.006 189.305 405.217 188.096 405.217 186.605 cv
89.856 270.605 mo
89.856 269.114 88.6465 267.905 87.1558 267.905 cv
85.6655 267.905 84.4561 269.114 84.4561 270.605 cv
84.4561 272.096 85.6655 273.305 87.1558 273.305 cv
88.6465 273.305 89.856 272.096 89.856 270.605 cv
343.775 225.005 mo
343.775 223.515 342.566 222.305 341.076 222.305 cv
339.586 222.305 338.375 223.515 338.375 225.005 cv
338.375 226.495 339.586 227.705 341.076 227.705 cv
342.566 227.705 343.775 226.495 343.775 225.005 cv
134.016 216.965 mo
134.016 215.475 132.806 214.265 131.316 214.265 cv
129.826 214.265 128.616 215.475 128.616 216.965 cv
128.616 218.455 129.826 219.665 131.316 219.665 cv
132.806 219.665 134.016 218.455 134.016 216.965 cv
311.256 198.245 mo
311.256 196.755 310.047 195.545 308.557 195.545 cv
307.066 195.545 305.855 196.755 305.855 198.245 cv
305.855 199.735 307.066 200.945 308.557 200.945 cv
310.047 200.945 311.256 199.735 311.256 198.245 cv
146.856 269.285 mo
146.856 267.795 145.646 266.585 144.156 266.585 cv
142.666 266.585 141.456 267.795 141.456 269.285 cv
141.456 270.775 142.666 271.985 144.156 271.985 cv
145.646 271.985 146.856 270.775 146.856 269.285 cv
162.096 250.686 mo
162.096 249.194 160.886 247.985 159.396 247.985 cv
157.905 247.985 156.696 249.194 156.696 250.686 cv
156.696 252.176 157.905 253.385 159.396 253.385 cv
160.886 253.385 162.096 252.176 162.096 250.686 cv
302.256 171.845 mo
302.256 170.354 301.047 169.145 299.557 169.145 cv
298.066 169.145 296.855 170.354 296.855 171.845 cv
296.855 173.335 298.066 174.545 299.557 174.545 cv
301.047 174.545 302.256 173.335 302.256 171.845 cv
292.295 146.765 mo
292.295 145.274 291.086 144.065 289.596 144.065 cv
288.105 144.065 286.896 145.274 286.896 146.765 cv
286.896 148.255 288.105 149.465 289.596 149.465 cv
291.086 149.465 292.295 148.255 292.295 146.765 cv
290.016 205.325 mo
290.016 203.835 288.807 202.625 287.316 202.625 cv
285.826 202.625 284.615 203.835 284.615 205.325 cv
284.615 206.815 285.826 208.025 287.316 208.025 cv
288.807 208.025 290.016 206.815 290.016 205.325 cv
355.535 243.005 mo
355.535 241.515 354.326 240.305 352.836 240.305 cv
351.346 240.305 350.137 241.515 350.137 243.005 cv
350.137 244.495 351.346 245.705 352.836 245.705 cv
354.326 245.705 355.535 244.495 355.535 243.005 cv
411.816 99.125 mo
411.816 97.6348 410.605 96.4248 409.115 96.4248 cv
407.625 96.4248 406.416 97.6348 406.416 99.125 cv
406.416 100.615 407.625 101.825 409.115 101.825 cv
410.605 101.825 411.816 100.615 411.816 99.125 cv
187.896 157.565 mo
187.896 156.075 186.686 154.865 185.196 154.865 cv
183.706 154.865 182.496 156.075 182.496 157.565 cv
182.496 159.056 183.706 160.265 185.196 160.265 cv
186.686 160.265 187.896 159.056 187.896 157.565 cv
175.056 327.845 mo
175.056 326.354 173.846 325.146 172.356 325.146 cv
170.866 325.146 169.656 326.354 169.656 327.845 cv
169.656 329.336 170.866 330.545 172.356 330.545 cv
173.846 330.545 175.056 329.336 175.056 327.845 cv
271.535 140.765 mo
271.535 139.274 270.326 138.065 268.836 138.065 cv
267.346 138.065 266.137 139.274 266.137 140.765 cv
266.137 142.255 267.346 143.465 268.836 143.465 cv
270.326 143.465 271.535 142.255 271.535 140.765 cv
226.295 192.245 mo
226.295 190.755 225.086 189.545 223.596 189.545 cv
222.105 189.545 220.896 190.755 220.896 192.245 cv
220.896 193.735 222.105 194.945 223.596 194.945 cv
225.086 194.945 226.295 193.735 226.295 192.245 cv
360.576 235.805 mo
360.576 234.314 359.367 233.105 357.875 233.105 cv
356.385 233.105 355.176 234.314 355.176 235.805 cv
355.176 237.296 356.385 238.505 357.875 238.505 cv
359.367 238.505 360.576 237.296 360.576 235.805 cv
345.816 260.165 mo
345.816 258.675 344.605 257.465 343.115 257.465 cv
341.625 257.465 340.416 258.675 340.416 260.165 cv
340.416 261.655 341.625 262.865 343.115 262.865 cv
344.605 262.865 345.816 261.655 345.816 260.165 cv
146.136 325.085 mo
146.136 323.595 144.926 322.385 143.436 322.385 cv
141.945 322.385 140.736 323.595 140.736 325.085 cv
140.736 326.575 141.945 327.785 143.436 327.785 cv
144.926 327.785 146.136 326.575 146.136 325.085 cv
419.496 171.485 mo
419.496 169.995 418.287 168.785 416.795 168.785 cv
415.305 168.785 414.096 169.995 414.096 171.485 cv
414.096 172.976 415.305 174.185 416.795 174.185 cv
418.287 174.185 419.496 172.976 419.496 171.485 cv
124.296 209.405 mo
124.296 207.915 123.086 206.705 121.596 206.705 cv
120.105 206.705 118.896 207.915 118.896 209.405 cv
118.896 210.896 120.105 212.105 121.596 212.105 cv
123.086 212.105 124.296 210.896 124.296 209.405 cv
431.256 14.165 mo
431.256 12.6748 430.047 11.4648 428.557 11.4648 cv
427.066 11.4648 425.855 12.6748 425.855 14.165 cv
425.855 15.6553 427.066 16.8652 428.557 16.8652 cv
430.047 16.8652 431.256 15.6553 431.256 14.165 cv
205.176 186.245 mo
205.176 184.755 203.966 183.545 202.476 183.545 cv
200.985 183.545 199.776 184.755 199.776 186.245 cv
199.776 187.735 200.985 188.945 202.476 188.945 cv
203.966 188.945 205.176 187.735 205.176 186.245 cv
168.216 244.565 mo
168.216 243.074 167.006 241.865 165.516 241.865 cv
164.025 241.865 162.816 243.074 162.816 244.565 cv
162.816 246.056 164.025 247.265 165.516 247.265 cv
167.006 247.265 168.216 246.056 168.216 244.565 cv
348.816 225.125 mo
348.816 223.635 347.605 222.425 346.115 222.425 cv
344.625 222.425 343.416 223.635 343.416 225.125 cv
343.416 226.615 344.625 227.825 346.115 227.825 cv
347.605 227.825 348.816 226.615 348.816 225.125 cv
413.977 189.365 mo
413.977 187.875 412.766 186.665 411.275 186.665 cv
409.785 186.665 408.576 187.875 408.576 189.365 cv
408.576 190.855 409.785 192.065 411.275 192.065 cv
412.766 192.065 413.977 190.855 413.977 189.365 cv
173.496 129.965 mo
173.496 128.475 172.286 127.265 170.796 127.265 cv
169.306 127.265 168.096 128.475 168.096 129.965 cv
168.096 131.456 169.306 132.665 170.796 132.665 cv
172.286 132.665 173.496 131.456 173.496 129.965 cv
356.736 224.405 mo
356.736 222.915 355.525 221.705 354.035 221.705 cv
352.545 221.705 351.336 222.915 351.336 224.405 cv
351.336 225.896 352.545 227.105 354.035 227.105 cv
355.525 227.105 356.736 225.896 356.736 224.405 cv
351.816 226.686 mo
351.816 225.194 350.605 223.985 349.115 223.985 cv
347.625 223.985 346.416 225.194 346.416 226.686 cv
346.416 228.176 347.625 229.385 349.115 229.385 cv
350.605 229.385 351.816 228.176 351.816 226.686 cv
78.6958 247.805 mo
78.6958 246.314 77.4863 245.105 75.9961 245.105 cv
74.5054 245.105 73.2959 246.314 73.2959 247.805 cv
73.2959 249.296 74.5054 250.505 75.9961 250.505 cv
77.4863 250.505 78.6958 249.296 78.6958 247.805 cv
401.977 230.646 mo
401.977 229.154 400.766 227.945 399.275 227.945 cv
397.785 227.945 396.576 229.154 396.576 230.646 cv
396.576 232.136 397.785 233.345 399.275 233.345 cv
400.766 233.345 401.977 232.136 401.977 230.646 cv
113.736 276.605 mo
113.736 275.114 112.526 273.905 111.036 273.905 cv
109.545 273.905 108.336 275.114 108.336 276.605 cv
108.336 278.096 109.545 279.305 111.036 279.305 cv
112.526 279.305 113.736 278.096 113.736 276.605 cv
105.696 220.085 mo
105.696 218.595 104.486 217.385 102.996 217.385 cv
101.505 217.385 100.296 218.595 100.296 220.085 cv
100.296 221.575 101.505 222.785 102.996 222.785 cv
104.486 222.785 105.696 221.575 105.696 220.085 cv
350.137 212.525 mo
350.137 211.035 348.926 209.825 347.436 209.825 cv
345.945 209.825 344.736 211.035 344.736 212.525 cv
344.736 214.016 345.945 215.225 347.436 215.225 cv
348.926 215.225 350.137 214.016 350.137 212.525 cv
380.016 196.085 mo
380.016 194.595 378.807 193.385 377.316 193.385 cv
375.826 193.385 374.615 194.595 374.615 196.085 cv
374.615 197.575 375.826 198.785 377.316 198.785 cv
378.807 198.785 380.016 197.575 380.016 196.085 cv
134.856 185.525 mo
134.856 184.035 133.646 182.825 132.156 182.825 cv
130.666 182.825 129.456 184.035 129.456 185.525 cv
129.456 187.016 130.666 188.225 132.156 188.225 cv
133.646 188.225 134.856 187.016 134.856 185.525 cv
420.576 227.885 mo
420.576 226.395 419.367 225.186 417.875 225.186 cv
416.385 225.186 415.176 226.395 415.176 227.885 cv
415.176 229.375 416.385 230.585 417.875 230.585 cv
419.367 230.585 420.576 229.375 420.576 227.885 cv
122.976 284.285 mo
122.976 282.795 121.766 281.585 120.276 281.585 cv
118.786 281.585 117.576 282.795 117.576 284.285 cv
117.576 285.775 118.786 286.985 120.276 286.985 cv
121.766 286.985 122.976 285.775 122.976 284.285 cv
115.416 219.725 mo
115.416 218.234 114.206 217.025 112.716 217.025 cv
111.226 217.025 110.016 218.234 110.016 219.725 cv
110.016 221.216 111.226 222.425 112.716 222.425 cv
114.206 222.425 115.416 221.216 115.416 219.725 cv
221.136 179.645 mo
221.136 178.155 219.926 176.945 218.436 176.945 cv
216.945 176.945 215.736 178.155 215.736 179.645 cv
215.736 181.135 216.945 182.345 218.436 182.345 cv
219.926 182.345 221.136 181.135 221.136 179.645 cv
167.736 172.685 mo
167.736 171.195 166.526 169.985 165.036 169.985 cv
163.545 169.985 162.336 171.195 162.336 172.685 cv
162.336 174.175 163.545 175.385 165.036 175.385 cv
166.526 175.385 167.736 174.175 167.736 172.685 cv
155.976 254.525 mo
155.976 253.035 154.766 251.825 153.276 251.825 cv
151.786 251.825 150.576 253.035 150.576 254.525 cv
150.576 256.016 151.786 257.225 153.276 257.225 cv
154.766 257.225 155.976 256.016 155.976 254.525 cv
67.0557 144.485 mo
67.0557 142.995 65.8462 141.785 64.356 141.785 cv
62.8652 141.785 61.6558 142.995 61.6558 144.485 cv
61.6558 145.976 62.8652 147.185 64.356 147.185 cv
65.8462 147.185 67.0557 145.976 67.0557 144.485 cv
70.1758 289.205 mo
70.1758 287.715 68.9663 286.505 67.4761 286.505 cv
65.9854 286.505 64.7759 287.715 64.7759 289.205 cv
64.7759 290.695 65.9854 291.905 67.4761 291.905 cv
68.9663 291.905 70.1758 290.695 70.1758 289.205 cv
399.336 246.845 mo
399.336 245.354 398.127 244.146 396.637 244.146 cv
395.145 244.146 393.936 245.354 393.936 246.845 cv
393.936 248.336 395.145 249.545 396.637 249.545 cv
398.127 249.545 399.336 248.336 399.336 246.845 cv
350.736 237.605 mo
350.736 236.114 349.525 234.905 348.035 234.905 cv
346.545 234.905 345.336 236.114 345.336 237.605 cv
345.336 239.096 346.545 240.305 348.035 240.305 cv
349.525 240.305 350.736 239.096 350.736 237.605 cv
215.736 185.405 mo
215.736 183.915 214.526 182.705 213.036 182.705 cv
211.545 182.705 210.336 183.915 210.336 185.405 cv
210.336 186.896 211.545 188.105 213.036 188.105 cv
214.526 188.105 215.736 186.896 215.736 185.405 cv
70.5356 274.686 mo
70.5356 273.194 69.3262 271.985 67.8359 271.985 cv
66.3452 271.985 65.1357 273.194 65.1357 274.686 cv
65.1357 276.176 66.3452 277.385 67.8359 277.385 cv
69.3262 277.385 70.5356 276.176 70.5356 274.686 cv
59.1357 167.765 mo
59.1357 166.274 57.9263 165.065 56.436 165.065 cv
54.9453 165.065 53.7358 166.274 53.7358 167.765 cv
53.7358 169.255 54.9453 170.465 56.436 170.465 cv
57.9263 170.465 59.1357 169.255 59.1357 167.765 cv
350.855 261.245 mo
350.855 259.755 349.646 258.545 348.156 258.545 cv
346.666 258.545 345.455 259.755 345.455 261.245 cv
345.455 262.735 346.666 263.945 348.156 263.945 cv
349.646 263.945 350.855 262.735 350.855 261.245 cv
138.336 226.565 mo
138.336 225.074 137.126 223.865 135.636 223.865 cv
134.146 223.865 132.936 225.074 132.936 226.565 cv
132.936 228.056 134.146 229.265 135.636 229.265 cv
137.126 229.265 138.336 228.056 138.336 226.565 cv
337.416 210.965 mo
337.416 209.475 336.207 208.265 334.717 208.265 cv
333.225 208.265 332.016 209.475 332.016 210.965 cv
332.016 212.455 333.225 213.665 334.717 213.665 cv
336.207 213.665 337.416 212.455 337.416 210.965 cv
54.6958 259.565 mo
54.6958 258.074 53.4863 256.865 51.9961 256.865 cv
50.5054 256.865 49.2959 258.074 49.2959 259.565 cv
49.2959 261.056 50.5054 262.265 51.9961 262.265 cv
53.4863 262.265 54.6958 261.056 54.6958 259.565 cv
344.375 221.285 mo
344.375 219.795 343.166 218.585 341.676 218.585 cv
340.186 218.585 338.977 219.795 338.977 221.285 cv
338.977 222.775 340.186 223.985 341.676 223.985 cv
343.166 223.985 344.375 222.775 344.375 221.285 cv
245.977 223.565 mo
245.977 222.074 244.766 220.865 243.275 220.865 cv
241.785 220.865 240.576 222.074 240.576 223.565 cv
240.576 225.056 241.785 226.265 243.275 226.265 cv
244.766 226.265 245.977 225.056 245.977 223.565 cv
218.976 305.646 mo
218.976 304.154 217.766 302.945 216.276 302.945 cv
214.786 302.945 213.576 304.154 213.576 305.646 cv
213.576 307.136 214.786 308.345 216.276 308.345 cv
217.766 308.345 218.976 307.136 218.976 305.646 cv
160.536 269.045 mo
160.536 267.555 159.326 266.345 157.836 266.345 cv
156.346 266.345 155.136 267.555 155.136 269.045 cv
155.136 270.535 156.346 271.745 157.836 271.745 cv
159.326 271.745 160.536 270.535 160.536 269.045 cv
265.176 234.485 mo
265.176 232.994 263.967 231.785 262.477 231.785 cv
260.986 231.785 259.775 232.994 259.775 234.485 cv
259.775 235.976 260.986 237.186 262.477 237.186 cv
263.967 237.186 265.176 235.976 265.176 234.485 cv
380.977 246.605 mo
380.977 245.114 379.766 243.905 378.275 243.905 cv
376.785 243.905 375.576 245.114 375.576 246.605 cv
375.576 248.096 376.785 249.305 378.275 249.305 cv
379.766 249.305 380.977 248.096 380.977 246.605 cv
@
428.955 371.765 mo
428.955 378.965 li
332.586 371.765 mo
332.586 378.965 li
236.227 371.765 mo
236.227 378.965 li
139.856 371.765 mo
139.856 378.965 li
43.4858 371.765 mo
43.4858 378.965 li
43.4858 371.765 mo
428.955 371.765 li
234.936 166.325 mo
234.936 164.834 233.727 163.625 232.236 163.625 cv
230.746 163.625 229.535 164.834 229.535 166.325 cv
229.535 167.815 230.746 169.025 232.236 169.025 cv
233.727 169.025 234.936 167.815 234.936 166.325 cv
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 50 /two putdup 127 /minus putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-/minus <1C60D8A8C9B7F374CC52CC6AFA414A834D96E3500AE21BFB98508788FC7E> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWBV+Helvetica /Helvetica findfont ct_VMDictPut/DVPWBV+Helvetica*1 [48{/.notdef}rp /zero /one /two 76{/.notdef}rp /minus 128{/.notdef}rp]DVPWBV+Helvetica nfDVPWBV+Helvetica*1 [14 0 0 -14 0 0 ]msf35.5024 397.682 mo(\1772)[8.17578 0 ]xsh131.877 397.682 mo(\1771)[8.17578 0 ]xsh232.331 397.682 mo(01)[96.3623 0 ]xsh425.065 397.682 mo(2)sh29.3159 44.7749 mo
22.1157 44.7749 li
29.3159 109.025 mo
22.1157 109.025 li
29.3159 173.285 mo
22.1157 173.285 li
29.3159 237.545 mo
22.1157 237.545 li
29.3159 301.795 mo
22.1157 301.795 li
29.3159 366.055 mo
22.1157 366.055 li
29.3159 366.055 mo
29.3159 44.7749 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWBV+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWBV+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/DVPWBV+Helvetica*1 [48{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 73{/.notdef}rp /minus 128{/.notdef}rp]DVPWBV+Helvetica nfDVPWBV+Helvetica*1 [0 -14 -14 0 0 0 ]msf12.0259 377.924 mo(\17710)[-8.17578 -7.78418 0 ]ysh12.0259 309.768 mo(\1775)[-8.17578 0 ]ysh12.0259 241.439 mo(05)[-64.2598 0 ]ysh12.0259 116.814 mo(10)[-7.78418 0 ]ysh12.0259 52.5566 mo(15)[-7.78418 0 ]ysh29.3159 371.765 mo
443.916 371.765 li
443.916 0.375 li
29.3159 0.375 li
29.3159 371.765 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWBV+Helvetica*1 uf/DVPWBV+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (coplot1.eps)%%CreationDate: 10/4/10 1:58 PM%AI9_DataStream%Gb!R&kB\>qc7&VH!;D!G:139VE4-(u@@TJ%#7T6sN.E.R^"</A>l0X5GLPA)@@ssbDq;6K<*-,".S1qc8l`.K?E;tbesdb.XadNC%ZY!1_fhpMF7dXGA&rRd[05FjS.S2c4<K'W"aQ]d@TiL?,f:'C2:9.:YG4Vh*X4(@4mPW.P0BI2Qea,Tl6*9ZYX]M]jPt+pSG.UVT%<<oSk*ni9DHD=MUFhZ&4BJ-8mR;T\(p$7V&=o\B$eldo7=rN=D(Xi"O\,9*-Mj!P9pomn8oW,A-^o19sr.`6tI#rUshlge.*cr#5%ecD]Hl,0d['.@Gl/NmFk53gs1Vqe>^RSV*@p3#c7h'i#4KLVi):>/PYaCM@/=\\)bWMO5.@j%?Xc"&C%9[^0==2"=2[HM>8;K)84%h+ub&MgC'iA%0q!WrETO0<H2@9[9<-Qi0CUF4738oghr?^3851ef(WG]N]-8Z(i65:D]WaX`.S6I+3Hrn?#/%qZqhWC%N"!qP=%5%X[B(@%@jnCc0Nq4_04@"ld2%.dRcC(nC<I9B`d/BU)BFXUoTL6qtN&SRfVMU^i5ffl6#]])SAAVBYRKLas"nEd4G5=fI+#Js#L'C%71f=Lld_F4@GmROWJ%$\ajVco_"B(Z;6sL46Ku;c\t4po!LGqdlt2sH.mpSE_13QUrZ0hl]8+%o_*?DecZC'iF#j0BkBX%@ia:0Q%Vl#;H9p7amQ1/Ye<]Z5JdV8WE:1LDJ)Jc1uV%SQOb@-rH%dW36+24;h@BEcECZ.5M`*2t!f#m1Gc$US)jRZKO<5PQ0;EBeUQV.%c%<2/hXN%)IT+5.oeMJr(KVAY6L-e?-ui@!3n54P5mB@nI,`&cNqr5=&*9$hde:\]d]YXeJFO=6YJAF'nW@__FdQ=?Jj9hJ.651[T"%i@!2*Q*?4.%q8:J9W:R^KV.m2g2i-7`LZ!X>=Zp5)"AO:+4e=.i?psd,=m/UT@"7g^K:m@a%)LpKt`KD_b^2a]qaVKT+l>t_,%.d%rPMDlMNga^?"s2g,3K!FSF[751Q!9N3nC$Ij)gtXVq<6V'JJ/mL!7Sqf&6S4%ebp(-M@r,VS/j&Z%)P*[4$N7s!UV*]D.5*Y]l3H%kA2b4P]F,7b2&SC3NmC>6d.!W:gW(#_8hegSRP*g:>;Ue6d5@^n@hcTYnh8K6Ds;$kO]k8S4Y-iAif(=2AAK7r1j0?V4G=6M/d6p%P/ZZ2H(T+9kBk=#ppT6,0'RD@3L/\c+@_lappQt&a-G].gSJlRS"LV?5Q"0^U<``U#(7]qdXRQOJ'5V!?R07<Zpanis"YJg>Q1K!%Z<@#cS)nL"ftZ?KqF(=Zs7Z0MDu#b!Mo5r+=sF!pJ&NW1/cX7KReTDG3K>,/dW)+uq(MR\qI`oUb:XO:CoOe2bnPB.=_fsSrseu9%'33,B?@VM4n_TdRgR/-1IAU*rAC=!P:(?B)XI%?)G9iJ'5\\>?f>'GZ-+,jN%Dme-dhJ7$lHq)ql$AA/;3hQXc0B$04n:[5a:sRW%p-Q*!H+Lr;Go?;pb[`7Js,[G;E,<G5M#Jh?THrNdUol#9q"9>>PkKgE4\4$u^Ic0BC8a+f$a_"ONq7,'-s^Ak1S.P]^WdsXJo@-e%pX<$VaQ#4%r'[)]r/3Cu@q+d:/ePK?]d`?j4#ni<j2*(+NZZ!5[Z\%7;iW*A`%:F>VG18\q3GNIA'b$Dq1)t0FKgk9F/1CB)516Z%8L<4_VFZ!QaC%$%B?o1WY`8>nAgR1r^jCc$=s6YL5rfOfL!tSD0Vu.(a5HSBagr?6!MKBBd3dmq/2o+GIFi.2qU9)>QsPrj1d5@O%5D0346urXhMR4@q;lU_T@#m`L$jY2_SauiGmnunL=M(Y!a;aD(Og3FVgg3mX)i5FZH-7IOj:qF!BhM3i;Jr2\g'6S:FW?)n+n\Oi%&3EBrZHK5>UU5W]1XL0&NKk[^e\sh]s-tV'GT1ohhQgDGa`ml+0oGaciNfL^(#S/]fs_s#<E(qFV'<*[@XD(on>VFE98j+HgfEEZ%ag]A27>a+kCOteF.<G&a8W5.I6/U]@=mB<(DTU$Ue6+F-`t6G:c;Ej4MWSH!WHM\g`o>Ff0],lD0&(TX96h6/G%rV))XCI"Pr.3A%b.!Q)K\q\*75':PA\<B6V-MX9#k9oHSY6muVG#(qni$jJ"m:i;AJjbBT>q5f#R&lbmSnFkNu=:4.cCB`'O$X,7jV3[pGV&Q>K'_-%H7m+3KPPeb%ZV+P5Z4Y%R$)@oT,7-Y.R1Q^T\g)uXArP%`uN,$If[e%Z9MMrPr"Y05%:g7Y.[]qTp3o%S5ZAhF`7K2_mBYb`.d#u%p);R1Y5*sa5imgL<3\(Z[o07S,MKE5eeE5K$EP7'+Qi,*k=ms;Uc$/=H;UA]6.2+6c1M^O6!NJVV.(SDU.NLJm3)'\k=M61Q^lPY%N`!4SD4t*KM*LGffAE)RKU["^P]1KBl=qY;/o3?kNOhRA%l/oP,Y.FYK(92tZXSZr-$2m4TcF8+WI4-`On>-6UHHbC$`CO=7uUeU%Nh=\S-@a&.)WQ6EEj7BGN]BSJ94H1ZIDuX`d=98r6ME1uB5`EUk>\"NN:-bc;87.cOtn@9%Ym_]DHcOUSC^lVS?m]IO)#bN[uiS+%Wm+/m/kVZ^lmemq*&DV1]IBY0Ns;.8W?"HR>O#52[<uSL\q>>e%Qe+F.?j[(fdBNn7PtR!S+0U8o!sk3['3I&n;5NK3@\O=As/p)%k=#3Mfhp)erc$\FFe+g!dF^kocTQd#\\orUNqS.UX1Flq5+;^30&2\rk:K80J<-@J40MP:dfF#Lks`G1ER_Q9)T7s4TlBh1$S/&$%RA.jedQ`h".A'%>O."7%d.pn2=7pFeD`[S3%b3(WG%(>MnDZ4cPh',;c:64@[KDjWPc7?-gH1QonN4'1Eca5!0Ia1S3ecJq^)XJF%WRgR3*a0s_F.;okEOsX./dYB$M"Z_uRr_G%64ij@X[$8,_^$NuD.KP\9$-)j,qV=>>m^lQ1OFuQ>LIUpOU80T<<%i_%GqRKq^Ab=%V,%:XcsfRk<",cNeZrauVj+-7"A7u+L],&;"*b3Ui1e[]_V'X_;reeBG+C>umNY;KV/JrmcM]k>UZeSZ*@SmadUT$d'"X]C;^+-2%D/aB:cMiDgKmfVQ-D;+%fP042?'gjWk;,-U&hB0pI?23S5*=<+k;_s.<FqY8-E\)Kq6B"0O$V'jRXscGO<eQkWrAtL\6e^%GWu?b%(V,d/SB\_ap-+Zf21e<1)DSut92jQ\Jl=J*V4kmEaF?$]iNT+_1Pat&8WD#B,.r-^nOfu[efetofW80hj0L+TC.Y\092[*MmnfY!%eu3`,XW]UZ-KROMJYH#,3!-upM%h[-C!tCkEko1P6m9'I6"4#6`odph0d#ef^IhI%N^)+T'Vr&XI93,@(dZTn4UFRB(s]HU[hRqk%340e\k9[3HiK^Y[gN?_E;KkbDiKWDD_L,aG$aa-&QC=NKam;bIJ.@H7m9hZn@lg6]2GctKIo:4OiHXtI<UdJB?YI%1@,siM>>U`J%K:dR-Rmok:1mhXU/%l%ZM0;I/'o8C#UitoIC)gBM[tA2dlm3s;_rl?*bQrr4HZ:(DH(B:\])%rOaML_pc15*mE'.,""0'<"?j/T+%lAY'$&mZ_Q3"PC6-0D8R_2Q9FbYWLPEHuqkb+[:-TsFrkIkus@brJ+0#..[oH>])Fa8ER.d2n;DaOu)J3g0N6(5jqC,f6TO#T_rr%F3[1jK6HK]a[qU3iEqV?O9FD#12BuuqLO!u1;Y9D6:ofhcH$#,=/ia+5*pYr`Z_!l9qbiidM4d3c=>@Q'A/WGX=/EGm4HVm11J,s%RWh?.mHc9**('O[Ll'h=VmMd1Ym_M0TU$:K;K8[-oD)C17K*Oequ!W9G>PsqVtK/Y5NTt,Xf009pai?,E?Uf($'oLN/^8,fFXE49%4c\3XYBW$-,'63%0CnjC<Y`M\:p3Gcg(j>=J7$"1-'UnYe[LO4WhK69+_J2-VZj!/*9CJV)A\X)?53=:kY92O#)enK[ZrXdj-95<%,r!YA:CLXPBFr.faJ^MoQ"jmYLa\/iF4ld?.](N)#?>?$>96+DZMBX)V&3>^5MYN9lQsjH(L#VE$C(rkF%RVCG?/`#ZQh.ZUC4Ue%?*SO#=3.kT'm(MY)lTmk*c`UNE%b8V0q5-C94JM7)gf$)aJ:)`p07*NC^H^O,o?8$\mp;2,I_A%Nn&icn+Ei>'T!lP)q!Y+NRd/A%TMB3[`%3c\$5s_)T:fPIrDlG/i3C?Ij#Z*GWfaQPBf^6TX;5h/&_7DnXi`S.j.e+qCujBPdtIV['9C[bLC[.QMAE<&f+qU9X*#i:%>Kf/BUS7#Z:q3gLB0iA*2$PC>,esBT3q.Cos0oZn[#ec,"!pIpUO&O0c&pOt`>@9O`&De8[JB/6Ie1;mT1ds8nqoZ2$Vpu@B>mQV%/#$"EL<>if)sOFg7YZEU>"GQ,P(n@V`K5>7/4](2^5=5@@@/c"=1mjNU=]lRQdOuD2O:Bqr%7i<2(0QdMTmVgSYb67X`*"LguY#?%0064)l[qA7hoV(_>-HhD4@[P"l;,1FX**aQO%(^i9;as7jhGQ?5<#uSXk,W'Ump**^uJD.;QJ@fNH2%$Y4R(Ke60!3W7Fl0]NQS'%,Mjit.V/Z5<Nah5Q2^N)U\=.U=k9;8QO3-g#@8Wn7T),?C/&u]-=3fQn9%p4Y10G/3_]Z>P%rCU/R#W[e8:&R/W*/m<peA9I9AFj%lAN7(o#F8&PH"\9[9BR3oM0OU[8$gNdB-Df4*Ttlhe:McWHPh)'PMuni/R2GZhi5Q.WrhpG(<Uf<Eee)48"Z\?E2U+=)6^Tc<#n_%+IYq]>J4e=4geKfSTc%7mUnp%[2])4GJ2[rQ2'7OCX(@Qhd%3>W5nqH3n<sCJ>tPDq#.h[Xn3S-K3'Hg3G\Rh^XgA!<a5T=VJ?.6%1s4_:.r\S';Js8XiiVrE$O1edNK673FmZfkCXh3fne\,jXjO)VZ00qd\Pc)fd_XRIbf9Vr;_@'mAee-7e\9-I_T4uO!gN_X0ZbtN%:(+,q^Zrl_JnTbu&)u>jVbBUff^H0QVF4;bhW,IR(J2<lTu2gPT]K,lg1aQL6-*/$3I<9#CB?fm"02&Y>Q$1Y80kUDY\6o0^.UJ]%.$,rWdN$^+6^:pf7AW@Tl'td8=5`UtT@4];[)S(4k(Z("i^e4(op##**Jj0)V1\^&WR5JB$5!OndSuqcWR$%bUYP*`2p2(?aC2,P%qasl2n6Y1e85^/gUR1:as1>]T4bJMH;1kgH@^FM"]U6+jMo\mqZ;r#FZ8a-\cl@l-T+hk#4q8pN>A_((Y5`Ck,*.%RB/1IW1M-u-%;>\fq2rI1e<H#U(/G/pB,RjQG.Y*,PQ#T4^7mt\g-tjae]m@4dXhVWKTHi>>E@'0'[&X'3W.?upm%H`JnC_(3r4DZ"N^iZ2SH>c\%To&'F9WHm&(]M[`aCS;(>,,/Z)S3mI'dW-qC<_fCe?Cd2g]62Z\bc4#XjqYfdD%6iKQc1K1jf=m?GM)!5"=V7NDHi5(QCU@g@)EF%mDJ(5/$_Pk'>5gg5,3H6OK7eiPa0Xg;>LK]T%*e?dB[;nhHg\FGMU+%RZH\.gMbGtn1lMUhlchK?>VZpWsY_kFJ=,QIePXEh.eeM%Ia1Fb9iaq[Z2T5C)].Rhk'<.gHE\\r_;3OWVtXQM$Incf!?V5!6dM*-Q6B1J^#IRma)fW@I5XE%V+/!oPOF^-r,2kL,a)I%IS4QX%8hNs3<#W0F^VQ`@*Y,;KHZ+&@'s`tM@e6d,UX`D,'I>FZ7ISBiFqA=,-IA,[O:WV^P)QO32PrB%Y<L.s)F:k,=X#`,6EkI)gamZD%Ug/F<o`P+"qTPq%BUJj8UY]'Phs+s\:<_*5R.f//)mk#=Fkd,+LAZk1!D:TP1mL*PJ(LEO8F!5S%18IeeY;6rs$qa?qJ"@S^Z!3F%I/+4?s,("-e*,hU(9Kpfr?\Fe%oYXYa*K!<b5NF\HF+R?m=2"doKUf@k+??Gqp.*gqa[)4[""rUrL[fTpj_,d,F"MkNS`-GL?X1p%nEi!J1PLlW,GY,Y6^/I%5H2e[lGJN8\?"P1A"siY&\g_M7&_+C8C,#K6n\1$,958_g@bZbWFQt3"0!u7>1YY.LsDCok5Sr1!6A1(%".\>m1WO4>jX%lq_eA&53q3m,S\OFXqpUb8<jh)cE':f)mr*00X0ks3_`IHLn@QKm:12W.:8e$i#/h56/%$k!i"(!G9j5SnV@J/4%i[K?Kr^I7qT.V]P].\Z!45G%@O/j<_MpA>PPoG-X(X'ESopR"-Zl6iXlhL.fPWGJDC*<l3BN;c]eM*6H2&$"+^Y\8:N!hd:hgd_i%C:uFOM;eD3CJS[>-_uD:8;U1AYF",b[4mP(FB&9!$2W@_Tg^!&rkf_8h5g1[^"2pBX3(?^I(7`ZUY16?*f*p#G5REE"lSrYKZa<:%UpU$uYQ*V8p`C9(DPLP6hl_khb9BGJV(QQFL4<;)<Nl*[_[J6"ps3\_9@K&,dhpZ8cPit5K]s5Tq9O47CC][X^I--$5MZj!N7j<<%r#MXjJ,eQ"M5KuMXak<%[<c3eSCHDBoOP'X]c):]^L5V?lL(\&mo4&_@(Li8g5!f7T17eOegjh<$CVZigk9pr<E[rt%!O.caifaC%[;*DT*L-lU@>*pC=g,W1*89hSY"(p"K5;6YZ4l)0S`iM?eueV>db3'Y=HN9%K@)`e;!ul.Dn&\9<rC#efG[fq]8*r\Bs%7M]e&2U%M#..5BTdsN+S`,epp@/P0D[sN#I(5-3ImarHYo\m$pJO_VTjhu?Rg8GDln&X)QhqsISh-TkG1&$C;!BQfkm'a<%EG#$MA/@>Q:=!%8<C@DbaQ!MbK0P323d6Y<ZM?[LPGtd+tIEnNe&<hd.s^X]rq=G(G/\R^%,C@;=FH87ZDs=jJA&\o:o[lW'r@CD*E&Z7;f!u8@H^l%Wf%P)bM=ff:>L)okGhO"e="J'n<'c[lUaPg<W]u$#\hsTN:-Cd/\s/o%%`BcbA@fBDZ.3)-qc2@I4<7/CC3A7kduqR%V]\NY?Ib-%e:&o,b0>g!>cFn,e)S`DBFb@jY%G/pBmoOI6hdQbC"1mf1-0d^NoCPF<cc>$D9`3b^M9;t7SJNL%qA[TFfMk7i8@('B<@ccZ*)Na%fok9fod7MReKmkG!?+X/>t,N_0gK$D]chOif^V)ipnc^7N"c\(PqkhoQB'Of3a*$47VhJQh@=(C>X>3TcD>oCpI:2Z0<To<j3W(Y%h%LcL>Th(1M0QVdFc%r_i(o$B]'#$SY#Mi-Bgo(V-5N^IS6F4@d^Ou*FU7S!Q>0Y<@7o6[.1kVGh:q+#-.6A4?FSNW<[gGR__n:l%Q@cs5CTP7?^r*h6Y(":K7Pcl!m:p=m1pSFad"NLD<c#6,aZ:L2S&@I0iG/'i9^Ul^]R_q%dMpB^7W;XJ8dgnD=LEa's4)FFn()g&%WdVIY%FF`klO@O]Xa`1N%V*Ja+rT)nAkET9fQs_[C*Dl-]5RB!GI\`!Q.G1.RT0Ht.ud<0dV=C1mGWF2J1B+aCAJC#T+7gSW?tgi%'^[&s_M[fTLH\q5s)H?4mTO-j:gnVX,.7gq2TkFJB?5CKq;^'*q#3m;D%5'43;F^N:]Z`S)<MqVZ<k3l`]n1iSm7=V6)7?i.tJOE%eCu)gp#^U:8@=J`XuiF/Z#8F@SSeFI8OXb)XU<LPk_B_7Ko-.5=&BSRC9)(nm9:TT@X"AFLSuc.%T-<D3^dhOEZ5jZpLZ']D6uCn%X_*[Q[_#,<W&hGV2fOSb8^Mp"lSYB91B.j6r-(6UE@Vh\^O+N/#c!-I*n*I(`:]SLA3F\cqEsUK4'ecVl<Y/Pe[U%^mJ=:sq+btj%\+9KAORA;I>J3gM$i#7jM4EgeS)dR)H<5FqP72j&C@p-+e_U&?YN=tT`Xjp0)cYr1_n.?S2!W>9faXiEWkJ=-`]D>D?u2qAcHqH/%b2dqcWPR14Yff;B<MOJ^7gkma?V%gpjU(B7eY%TQr9r!uI^=OKTi)(dLm:L>+I$?UC"S!+kCb>*hg_NgHjlXlT[$o%gZ`"E>:DLG%*7iJ_!Abt&e8A7b%Ua0PVpao9OVI*Ql4"=Snst$:\/f6R*MVnU9jf!EXM%H-qU@5FSoqXC2r6(6>E:[WJ(5HgReEkDhFV+?B'f[I%jhHEDNLCl(a(B:]L5u,FbYe'TGgu_bjXMU="K9L%<L-N_B"[Ifd*drYL7]dt__5t$BXK>kedJJ(%HojP;!j;V#Bd^$/AQAqkVk#c%'EY7>DDlde9)AGf[8\`j/qS!Y*SKO3UZg\IL4YrPqXqX/.]^)=2Zk39:QL!]A*r(uik'^m$EE\BJ0D.#pT*-Tf:j-:]j`im4R.$(%fPi4J-G&^.?HnCm8$+`*GO@gh#7Wf[88AWg_;%G@HS_4^#n[o`aUl;[B9<moX!L=#h5gJ4@Fd'\OLYp;I*6u``4'[B;HbQ!\e<p"%m$[XnYVps3RGu$nnVoY52n,u;H\M4Lrn#!Aj^u'mY!$TXVac(*1As5>oXHY@P;p7*Lr<obQ/onX_C4MYi]A)8>&*Y;M)8eijHk?u%?))`RL_RS)mISp]F"_<@dm)==5;uVM9<HF/WE&%YmGOh,mrZ"\c2GZLn$g!^diZ36M5L7dM61^^\(SW'[9kKG%t6\+/%_2rCVZG^%V[&.IlT[1^ceet`Ir$J%;LO545W>iXQ4CJ4/9j^S-b5Z?en."`>(L!s[?ii+JF_)H6b.TTa1f5.D3M[Z;dK82I(O,(<.Y$;@bkk"%H#5+o*p0lqJkims/hu\il@*9;j_R/q[6Lu?#maqFqrZ`2gcPGhDnrsq"lAd5DPshtrRlI"^GshCf$tCl5%6%3Km32sf)=c'_R%Xf%O1bYQ7aoBGe;RJ(OVg"Rep1$0mmsbeNLoMhceYrI-XMdUkFU.LIZ5CbrQ$g68Y_F#5[UYTqtPL!r7&(#g![4ggSe0,45TLB1_PFQ%drY-*cLRhkJZX]?Xn7'cjk]/"bf56`oQ'?Pkl--Q9c?I"*$hcYF6i[f1^]3?<cjAe?0>:=lNA/4*ZWY*#P53o012L89/[-ZcqusR%3.W^u(L<$Sp@h57YL/]^dqA:+VpV&U3`DL!age:odRKk<?SD?r4d\0pephs(\hWg+SboKo\f-9'BX9qob?KJY^JDK\NNY:l[X8uf%ccuFQs3,^HC-=[oV;mOCBZ7$UZ_d+qbW79Pn7koQ[H^8rN@p`mfCiL0@OnP5R^W6+m\`!pcgJ0m=6fJd)U5YF6F43%@^8HF<gR'N%g4-i>/rA_GArFF<8rgXbgsSq-F!`fV1=4L&Y<Nn?Dqjht<'0o)YIPPtXfuEDVo@gX^IFj'o>^TkGGE3:5ED#dR<UW9F_YMR.fK3i%Z>Uaf5)ha0g@aFTZ;77ohUTaI@n&?pM(-^+C;%2sUXuo[e>HZKLYD.eig+e`-b72elum+*Ctl;"GH81\^5_":0!3Iq2-SU\-8qK-%UX0gRfsATMn!V>@P%UOcDmQ@UNIIue(6<h]rO!*)r;=3CH2$to520BERIk=fe\#8[D05L1GpOaU`E>l7&2TkPl/E'iN=Q<>\Zlg?%c#-LRdBu2VS^c8\\#du\gkr/[8F4Yqk.=!L2&<Ze%\,?"7=;5f.q5915tSab`QmeIQdFqkfA4p8=^,Bqp9s!8/l#C`e)k#9ckoQl%[3MSMqOnX^2^N8sl"[TSIuV](es8'%ctKEIC(rOTCA!TF]<*0Y\f.-Q5.\HRNLJT\-RWZ(7^"g^jEhVX<#b&cXnh;WI:6Uh)EjOG%`7tL`FGb'%X'U1cT$A1`_fu-YB'"!^lRA=B^]8.-I,>.Y]?p(rWYIIm$3'R3?s5bI3Hu5VB)d$>_4Ot=^B?[$^/k0(T$B/VjO4-e%BrBO0df8_+rmu)gVcU@<SC^\/1%"84\EEncok!IEpM$Ol0_hHPs"GS/[l9^>P%)2]Ju7@QjSSpPn)c:c".lB>/]joC'Y?I%/GR!Y%dsd8Q5CNB33qmsC.JCDbh>=tcr:+%`I1"I#es?>7lZTZU5V[[Cq0qB(F>%90r_LkKbZ4__o^b:_lb7;@/[S_8^/&AWid%"XIH_/:%ChEZgl\duWF6gOX6S!Q]5)jIt-\[)Kl^&nh1&APb\s-6I(l=Trm9=P>AuEm=fBco:]'uQZpJOM*O]Z%pG'$a:NaH()=(`<Fn8827%-e2GFQgT?gW\>C9(<DC6@W'T2AY)QF2rBpP"_NZH)f/kBoO_ae=PUPkAJFIUh*,'lIGL>J(PsA.h4:tOj+C=^WRG[)&U`j?5&kar%)"/DMNP]M9VRtu=eh".)[?X[_7`!d">V88:2#?^bX3jIsp3!gn2SJt0gmu!J2nk8(*kipbGbb-F[F'u%A^[NEpT:KAQ,"3ETeoqY%=I>;3Fr)qBP"eY@U\<mAde71geL4V]N5/5(?_*2%QHDeV7Z$TldqF%;4bm*!mlUD]4hLnS\j)h\D\P>>=/3\PB<6b%8_L;p9E.Jf%B?.L\NM8SqcnNi54?cPsDl_+7>1lT'Wb:HOYBnh;7nrAnASj@/6t3)dD1SB/MnUno\;SR(g<(G[s!HO9Q.s(")iNJ)+VMe:#KaCe%`J!fE?X:b]=._pTT^5QK'+i[uH&;!t\n;]bpf9ZS^IVOOW?u<XjoTuaTYK5gi=/Tcg(icHJQ>R9=1R$n^6hlHg6!D6acERt;Y?L3%gH:QD.g)M-IqTQe*/u)RQhmcu@e]tIZCoL#=+h*1n6"&\o8<j*J1BZi[Ycg5OZ74RU4iM07B4iH6u#Imguo(BGZ<]\%'O`+jP*>H%@i*6)`DiRqO7I]bqW(u]1[!AN:PSNQ5B(R4KZ&';(MDh8qMlZ?kFLmm%JGk$PV0[;N*qJ3dqZX5[pJtMM>7`6#[$ieDBrhl)TI]k%>C,h=]0?U7EP>UP7Uji?4>DhCkoP\@7eue+no8cr&;bZ^TAm&V'rU=G\lFgTI0e@J4`R:l6_`T`TKq20H>48<"_s82d]SCtpn8'7%Vc:D&(I>O&-3W]uf+jtLF4#6tmi?bUD',aQdC_b7HWZi0]PH8;5>Ko0&jYa6jTQhq5):K<6GiYI7:cFCJW7AK],,r3<[[;HC#u%j%Ek2fLLPAsIO%\A=dbaZM#@Fc)@UTQV1e[9h0rEVd:%=7mJ<2];[uJ(n\YCm1\YZGk],rCua!6K2]ekT$WS"j$IFh!sS"GaQW]mnX%+<O8bP-kK)[OBJ9bRP^infd#71lOT5*MicgVuk`$C;$+d!+'U+ZHp0jSinrY))h0@MJiu.@0&_^m6mWRWBI[SbR+`[HE-l=b22TM%CK_p%rbscj1;7,K?LY>_U7ta_)B<*Lrjb6.lY.GFEGFc)@]cRBY<PXe=[/-9o*]r_+Q[1_EKna%L!7-K:KSEn&KGE2Kc\"!1;AJ\%_'!4CXp-[LA0bR)OZ6!cEipWC@&Yl3H%=>?8MPX^'JlUX0lmtbZ"]U\>(UI;LZA5NTN)fO`JL^,A+..3kRFQ4r*9VI3Tt>+KJp%4%V"3Q]3QI16Q+cS\@6?I+.$N1d:[7R]_/<:!"EbJLU5g%,TJ*_Db=tN?_:()k^:Xl:j%("d7WIr\&W+F;Pp)k@"qd2=ksRqlQG[Ak%6rMj4@<o;j0./0el8p,^lVW'#\1>M"9R5AcKanC`@pZR-N2Q)6Dj1J(Jf;B7]j,>]_g&-k566&prpcQ>4],\BdL3$'.0-Rd@\N_u%0FHa;\$RiX^[Fs?F8P\-1q^ij-k4HT:Yj>?P3h=7+%uTp/-p:NE`/d_hA?4I#A]'Me+)tuaas>9,DHpRj/72p81\Ok`)6bdfN^F%%/=21Y7pRS'"<2DGfC$9K.Rh76'%d"EEf.A&KS2i.+u(b=2s8eYjo_0oYYN.LZ/7o:84%u?^Q4oY]=VhjGNX@bAh?^ihB:4nmj%S6%4F5cfpn7(t.?tB3@U>hkh4`UGe(9QhNr(4eG!qXN-]Ip&=l.brIKmgggbB@q8+36K5eL]*'jrPP=G,(i:(=?,[?$lUoT095.IA?5%gGeZ5$#/!TQI?rsQU-#9:5!CI(.3%/,g8X^?!Ee'?J<HF3H0dTnj+Ouqt;KP$g)P^o!+_\7dlH"ADeK[Uc4#0=Sji5SF'!7HYaO-%dNOA"A]lRsR$0R+>Lo9)Tkmk:WhR+B0@f$9da@1%X5g.1j"?C2N0nf1L<0eRHuuflOfRF9%Y:a9+<ZZQHC5e2:.AW\]a=ASr=rJ2%(p9'TA+;Nn,>WSO>Ir`P*Q^%%9G!)C5Ap.R$R]Va6:-OIL;=atq*q"NfF"g/KlA;FcEK8\o.IT?9oLS"XsJ^c7bA7jK$q:s1%061%^C,Up">'EEXRZ*'&\&K2'Id&Rdo3#]WPlng:np>0<&>MR9D<5]<P87FQ3rE(@$.LO(-DX[EB>Nk1n*V*K"s!N-Ilcg;PQr1q_2b.%2-R6N,Flk5)X\T:gnl4H9OmIT^i=*Ga3r-A\VfEY$`JF1l&Z&PaW*s/h@[6*.OqXFENe$irU$s-@.tbsdZ*t,`eR`031QS/d7_SN%@RJWr!:sPM%BF$M:'P+d3fT"N(OuDSFF36*CKPSj*SAjU:+<\uluj#jh>p($!'r3hn_f(EW-tG9"AZb`UL>L[!u/!mVA?5PrXI/,%\3#+2p-%WEeDqZX*Yc_En-%l<(HV9+119)8;Zqgi&_,R*1BooNUYU4KpS6&D0U<B-[+OS<@5\7)!p@G)ZP^OcBA\&%&Y:t51]D4S%*jFRIo'!F=l<nSsrn]LKWiMkhcA"!CJ=s3ZFXj*O*;8e"4U10]I"k$8V%cK#e[IXtq\F!FL:21)eE:'Rbo]Ed!SCIm%"2NeFTBCt%Lj5#&.674#'2$Q&<_lR,P$Xht\Jo;IFuh!t"UXFDE7&Y3S=&0EK+l^<GGJpZk=XWg.A-5C7>BL+k4JE*\mAf10C]t+.M#J5D%"-a%]<;:,B/R$P)jl)%17\]m>;oMD=dg1[]+DqPVS"hEqQ5VOQl*?*^u*RaE.j+3pM'aq.O7Lem8[^a61*`sN43HYaHt)_5JCb;5>/Ie%4/q)n8[7m"q''nDJhuUeO%gjS/i\KDSD>oR*'18mAHn]]p.Ui@(S!e31K#UFTbI$UB*OocOA(s-(S!c=ZNV`"TaT/=o>qaf3JT4.%QpE++"XhKeF,m4]O,]de12.5(E!Dkr@5h$nSVMca%pZ:X.u,`:K9"U^JK'dN1P%I=_jt,s*dI]YTSM'G+$Ul18jm"V_/B4A6c&Yt%#BkN>\VPZ^+`dhBOkq3A%>j]mgp?t36[(CLA=lb%3jkIk]uN=CdoI`)1>#TJ1cdW_.K2tK+D<W]s'2&jSG=hNLZ/+(.l^7&5q+eb%EM573F'g>[_F1O.kS,d`/o[F\8;8_q3qQ./;0NK\8Y@!1"u^QRLp18/<bE`h)tU3q\3jVp]@;RWD=jqQ"$7Y\fe#CA`'fCEN>_!"%A@E/:D>`s2*tmr@Rm5\["-UWoB+`8unH1\fbDjGlJN:2IXUH*[jjGiT4JY_)H+CU53PEj2/sf%"1(?c/I5Cl4jOgGq8+Z,!=933j%C7%EFW=fn)Zj,Rb?eLIC3AKNN(%geJJ&s?[(7<2')eO8Icf=WL@I3X\_rlR[aaZUr?'6W3Y4>QdSU2@te)Y2AKt4aE4n*L]_W=6I%,FBO!i'Sk.\g*Rca3Qi.DcfcY#g>P/6#b'F'*/J5OeI-[_ZLj`X*um_"m4$fLtCA/c`'bmn0itK'QXG,HWtu)>Fg_dqr],7,=\h&%(tcO(ITU%QMd$\9QO="K!/@!hJog%m]hUbG8GD!>++NMb?KuL5MB7Fpp:O,)"#'?*N`lqq1%],nko_D*P9X^NGcKQG&_cLSk(u0J%*cJ=!'XqMVmn!ph<a'/aDR:BDF^Lb^K(H<RYX?5sT"(:@=)?Z+7s_7[r]V<f($frtI6%+B`:-O3oJk0U+fDs;Rh8YjS!lM6e;Fc-%C(7GX8aWe#&]6^0Bm0#809h\A6m:eok_0<2\6-O&Ecj?V6ma=M%3mV<^G7'A%\bdRQsI%#!)fR\A:/U!]@5b/UQ[JXA'X8O;XUkQ%NeZr`$Q"p[kLX</GO19q9C;Uib_XL$*dEd:L$;!9TPOD``&idhO2=@sW+Y(YL,NSGj7%lK&_dOPKf$01&Xc1gr4GTG16ECd`Z@9+%a+l_4aZ466%[UqEG0tBoTl/c+r:eWq'+]g:b@&T>NQDTdL,khbW5C-pO'NnLO4\]uTFQ'\.;[UtPPrqV6>kKb:*3F.>tgD_(M51:%A9_G:`92l_O)Y^.q"s_0@=jcPaK?O%"@_Td`fseE>Iq9./U=Fn?;33&3DKbl)0+-NLNCN36gpun.3EHKq.!@GLI9ae<;;42_hHp?%3a"Y:gt/H9`(e`3&,@.p>B&YN35:`@l/on2gc'FHgpH\3>VXm9/\L"h39M^kb1nl)HoPcgg:c$W]R76*<F=X2Z(4H^-,ARdDFaK`%MhU%%GnXX_AAgo'h`[)\U%UkaQ2TIg`9HrnK]4/!64S_0H`T[2'j_5[PbUqMYn9J'pmG@m-bsYDCrqVE(ILm!o+-Wd:F?,cFIphh%[b%/h6J9FhkS`d0LY1,g.O3*VS/3PJLDRk_OgZSM+UlMuRQq9-[>>GiArYgjT(!@[(R/@+!>@GfMrB3\9&WGpL'3C+0-1%n)ZhBd%G5._=5H%ur0`P_9U"dYZ;<^Mi,d@.]!)2rE)035TW7@gE?[nr9OfHb(n*(ZL,?:?FPscNC,?:AD-?`[Fg,73PS'`uhn"u>3H8h+J%e@R/@Uu"fp,P<\e1!mg)>5:^*n/,iZL5"SJQ<[n_3X2%\!i7il'3Id[$qQ's]:h^;eeo\IN_mrhQr?\4,8C"`EMh8SWGj$@Q4p.4%q>-@T9ni2.pSXJfVk0J#/k:8Y<4GKOICXXT0u<sk@.6R/Nu9sMSErXgB.&s\_/X\H._l,["?L@d+hIe1HS+_0_bk6;Hue$3jPWSC%,X\-"'sr)ao+(r#4G>"(@?Co=&`/]RO2+Ea`EV@bfpRg#\KJ6U0sfU3nM6<<I4igHm[DHXX%0_[$ofqdr:Y[8M-o;`%ULW6K_L<>%0(\jh(NS[#`IKSN:hJT)H"W\N*p]a[lc;o.ArX3g\jP#1!]IY%PjF]@<VaV]BRI_mpu0aO],_ioeUI-`G5E/Am.NLh_s[Kib-B+L%9EE%H[4?]c<eGFtp9'WL74sn9O70D%Q(g>D%'Q*84`r-a4npoBjP:6eYgZ3)mEDKUo\BB+\+/gOlo$-,Y%r=UPpO$g?>k62`OfYF%rGi4.JJiX-P==@u45HC.);dnrG+Ma<*Fi9rYrFuD/dGiGs0MRhWp*[T\c:J*>*%J4qcpcu+'R.mA:2Fp:/!_F[HfS9H'Dq*gGPO2%?V5bH>EV<h\TM)[*\0X>"o"E7j6"a^#?LC%4/m!2Te?9^G#+G89("iD"h,(+G,eYYfI>&Yh'D.u?&D>9-Fo48\AI_ue04(`^>e6n%q=!Vgit=Ae.,9]`?TJ#s\a]Q%*Hhp?kl)%)CEP`;Tm)g6:i\u>L>O'h*[N*JjF+A1kB>I=flTS*]i3(N$PA/^68kB9/tI%or%t_D%]Xel89fnh^&<T:Agj8'1flU_:5#/bL9hoSoC,VV!=g0R.c))G'6HF8Sl,(ZcP@r?9Pbd1V(ptD8S'EP06MJ;k1RlZ?Qd0AbcXb^N%?A>-u2dn2hFC)M"T'%RsPYL>;>,?tA<]6Kb8n<C=C,T@JV)6/-3\TNX`*oO3:$4B__f(n\24Ml!eEAEq_m8O>5R$4MNgWW)6a8(Q%dnPg26Ogq@MG5=bc>+<:iuIh#Zg#,CkreB)SM6PY/!nQYbcXOCl(#%RF6SG?=,rD;k68YNJ+C,&F:O2@Ug3HNBk>b=R5DX`5B\rU%K,AF`1s@C*j5)aCM;`HkiIom+hRbi\.=2IXF?4rl;thm.F8uiJ""9scgdJa99F*P8%,JA,<#dCSWcd8<boo,nWqY$QMo/6O^,iH&%/>#p>5\b:J3mim[1b1oXYot[f)</B^O@Y(+"bS56DjLh`cGNJ!=9-673=DKYBOMB7WtUUVZ$q\617eEkAoI24+&&[Q[f7aLA59i#%DX?1U,@,B238)V'58nr7U9B:hG1#-afA%hL<t7m!S)?tZ^2l:'U:Z8c\Js%a__MY@\`V0P;=qTdDLaF9??6q(ae?.-Kt6>`giMG7%h7<(9S9"k"l&\_O=GPVc^<%p\aV>7nF<:a+!"P@="'o-&,`52qH&fr#Hg"(to1^\IIV$S.lGhTUX3Qut6Ph'OG%c?`^o#!mGGP'Q%d!0in#l-l@2bZ7!?dt3r"8P@HQQaT2Rcs\D>@*:7GJ6(:;qqfc^o"R[lJd07g!6/a3+QN?\BN!)GB3.;<$<NWQ'&<@c@43_9h3[r%<?fr<Y2O?:geAQ!B,:UgP&M5IF04ib$hq6F4?2rg?Vg2k5QE\W$]j9.:hJ[(Rd_V7Fi!R^-cb\if>(@?_8DWp'5oIIH-bl7qsL/l%D,$Nt6>r80dd-B?S)#_njY>U$L>B%0pN-k,I<kDR"K;J^d[6EcNhMrHM%%5$eHF19VZbe=W5@W)<>03HYL_Dn*ZH8f!V]N+^AdjD%/%gc]4"Duu0-<m'YRu-#*Hr/BFt%k5h@U?'$q&lj([BlBM/TnfR?-3Kgl7]sk[W)&IT,)_q*\OJj\7@^mMkR@\LB30%<oXnE<9q`%2r)OP?G5g;RlIZRAj9RU3$)RC@TSYZ1X`h/Gb*VlArbKRUBk],`7eRJj;t4U1*9Rb,h<GekDI'C31<:/_!"RsIhA0cND>V_E5LbH%H\Jhs0dUjGhLt^ll9[>)7A1:(>(P,$L`uEUZ0/=2L86O5OE,1ebXO77G5C]eYXp`+%T$tF8"0T/l*cWd[rbM!4Y=D]`pu$HPNnXU%7,h_;p;BdA9Hd8RF+bH3(aI(Dn,?bGAJbnnc1!d%.9qo!>;tnkO'uY]LP`3]<:)F(k#\ck'`P[6pRVi/Lgm;&f=h&fLfeaI)s1Sg%lQ4#/=A8CX4NA3*U[suGgf_t@F'JaB;6G6kV"3<=,Y`I;?@1,nBTJR1R&2^HEkJQ='Ko.U]:)=(<3Kq8Y'8@im=OEm7:J'Ra"Ole%])TpWWFrR1V4u#*9?u=l-3&A&lpXNFl1rbq,s,)F4`'_l[Q;r!mU9=GS%nml]B1a8`jt84B7.pgL:<L5pLuHI2r?ID?i6)VSm@=R%SLj2;S$Do2h;@Z`Ldp2lG]SA_rEk#QBhsjn5jmNj*VCI>B51Ut]lE)!KP,e;m+e_MAY[Tg7pl49s+%m,RW"s)l05u:h%6p@@UH+h%2o"._E^6Dsg6urTSaOPGS8=GHqkg7LrL-C:p^oIteC2;=f9i:GY*.p]2Ynn!_X(?PCT@'QkA"Gjc(8k!390p#2*:c'YF%(>@\3ma%:+j'GDIU^FFV=Gjp[4sN990`,JhA4V=SR'A#0GN^jL:MaK=?)M6qI7IIs+09o&YRg3#V'l@H]?<E7n8u*lrRbZWo$ifj<qNkMk_&%-0hSu?A.!`2K\-uB;_&\(:[k$[&gY089C#f#4LUS@#6?*:[HL:\U-$'J&r6M.<f_9+m"1SHmk63C-lm0GXOS%ma@7K<p)Eu2bgg3%eO-(q<`d1KbTZFKGt@]X7Yd#?(8mIXoN_$/Im$Od%,h1NXNljU2:#9oiY5.^I7U_V>\i^$)!7`MnXG<(CL*H"A/TFg_*J@>NA2D]%6Ka79oi_oo,H5@`6[hEk;.Rr2BlQm0UbqUi#@,02BCC6ZjVc01/pRVQ]hSY>Z0I;TGQ)sO"p+i'/81ZS9$-f]r3.>++dHj\j+A9V%Wr#.Z>mP#&?sgXRrqH&FRRm/)o<Lm94&a"o!Y.;<@>#W$OY.CU5cM5@jL]>X\2E\BaeA1ZM1C^#/BY0Or0XIR"-sQBh[I5TB8#do%=Po_VfT:H>kEPSYL'&B<MiKG=G<YTs^oT:g-\pmUMu[\8b2m:N)g7k!8//+MC'i4.@=RUiOTW\eQSGfH_r^rFT0qT?@dG',K[i"^%(1>c7^iADVUYVm3Bj6>;!XtP#391j]+^'>(8'!Jf1isM+cU9IK!uRD:1GfJY38=>#C-GN2@+ZI7O?Ttrl<A3;+N$\8laq8l:P'3X%\s1P07^hPfaqlrC2qb$TO]WH9DUM2R*&k2%a"HH]?:g[<V0q?_45V"HVKF>[Hf)elk#+CHgTm]+.A+ZZPnREFk<d:5Ef8CmVYCQk%%<gRna"srsE]00N]m_2<E_Ye7.-I^]PFW./n+E/\[r(ner;s=n6Jc90r*I-pc\;dLYM[^5Tr)k6?gt1H&S7ac\^rKZbG*X/2rVH!%_$7M]#LN\KqMFo.DtS2/ofVZUI_koL8H-dHme$t%eSi=7V7>,1\6$Rc!"""U?Z:ck.oWt00DJS_d.rqome$tEETYP<SE/UEs',Gd%N1l*roi!Y=#&j/R1Fm>#?GGFnK)Z-VUYY5PBLh1+kYL/D^YlMa;=<J64Qh.@Hi4X,*`Lp?p[O5hYGPCHa>iqj"eYuNlu6eZmU!Zd%>Q"UY+2_`JrN6U?iA`SZQ<;MII_iMiH&^!,p\G&1\Aha?#P0"V\_#/#ioSaT8[Hj^/IX/qq\.fO(VJ+kB`<kVoomo!ZJW^5O"Y>+%6U9^Ib^9:NThODdX.&'T^L/HUfc7C3me$smgNEquqDlK5i)W'SO%i1SrD$E83@esJr>D1E6Y"p;kE"618UBEQ+hQ?E12B#=]m`>T%Su6V4?gt1H,MpI"VD%>@?jH/n)so+=2^m:73g8IekK^qehWj9lq)HC-IcKb!;==)b2KS*HVN]p'-h-]>eShfnS,DaJ)_LN$gjB!O%DtTU\5/-NhFmsg,P:+8s>Q#b[CD!?'49aX-([CAZ&GQ#)hs0A>JKO&]^Yi>p4D1oRme$t%eSiMh=5e4l!cRa1c@qbO?GDSAb6dY1%o,YrhP:+DlH/eSp9kF(Wd!P_C%7AWTe%"!_fJ$:Upa3T(Dh+(4>Q"b,7`N*m06kIUQ!HKF]mdfpJR-s:A)HV86*X)``Q#RB06fC9%pnu&JNH2400M4*YF0^/kglmB^#\)Z5;tn0gXLLV$GM"(9bM(moLAOIRf_*Q-$Jp$r9Ns'Y6<\XlL@lI#\F+W4UJ:(uVM^cR@9Fbt%Q@7/DoQ5AQR/;&g?(G-^([q(cAt\Lj/T\".q+bSOf\<u_H<?Vm2)Eh-igNo:=_V1?Qnd0p:?1Z"[Cu@dAnNK?F8WSI(!kU2<lu/$%[*mFPJ[V37?YUsV]gqJNnRk9P?0N]DX7\nc]6`."g[aM$>?/:@Cjp-.-i+qP[XC!9h/0nA[&<N!A*p7^][pI"=.@q0b%47nh0<8o%FO!o'45J_jFJmks3:-:hHB6mmp>1/E4N[;"B'2\M@Oo,OF*b//1GY*F;L,Nj0mENdH>C7J8X1&"lfDsQokH'?H[SjrNF/#)(:Sa/%eC&?!$Fk=Wqc-nGS1OSm+c2O>m;7!C;h%EYcKhBp`8(*GoW%_`bOn>B-JktU33IeMq]r<*L\Sm/lC'**#Vi!a$ejq2dLTDT,;E8,%j6IEfhU]-E[*nVQ8_]kQ?$*[2].1oJ(!30$n]fQ5\VkKojs1_#^Jg]kYLYb#bmg1Z9Vk-\='M/2`HJ-@"H0a\jO?%)Vk$@Kj/LPK%].rd=opLZc]DJ"meadN%L.SgDpp#jGC0o,cVA>bcCg2/=jtFA>1Pb0cXh%'*R9FMV9?(`@]62QX4heOTNY`>5IVJ')n.>NDmpDoX%ji:kmkQdU20_;5O^u9a5>G]X.QMmkB5>t5^gBWYrgCiB$f>(K"?E/(N6F2,L^/!V4"T+T_-Lk_Hq"sbN.UKd$5<sUFRG54<]mRM`%d^@Sj[3Q<3d],r5C])$&ML;'5T@Z!rK:R[C!7T]E(3tEm[T,pLO.Q3o48bW_9g2CChd9U-Sh@&qn*e1@mF7Hr9<42BHpfN#-p:/L%R3AtfY2O)6EH=><h1M=Y#/X[I^!b(Y&/Y.%<_:(sV?oHt=1KsJe'oZl4%YUK4a)E^@fln$)X;,Z5-"DLSq8i/YFA*EI`q?)A`=D=%WJ<hrP0cg-?Y>?^S0plYk$HW_Y1K83ht*K)'%embNU0nN@7cTA8V&n8=-qMF?nYGb?sQ#h[bs\aD_qbYIC$JMhn</pJ'EITNn_1t%]?ND]=2s+Watr/?jiW!7'&-PRRHX^H?(6Gn?Ib0e4-=>X"sH]i6eQ#`M3Yl0Sn7c#4F=\4^&dc-<p7$+TB6.]r<$0+:]68?pDiCe%o\^`,AZc$a7TTR4qo`V:QU'OH5lpW08A>&=9O`;Eg-YnNn'>RX\G<?sGQYOc]0uFJMss`9YJ6mUIrHpt"#p;terl?a/YU\.oL_R4%1s<fYpGCKNf.c1D@%!&9qr/^g'0[I@KRi!"m`[eUd6QA\&H@rU$8&+O?BVnLou(%(-r2PqMFV!h&K%aYA'-+W"!?;`.iFGVXj")F%'W;FWD8meTNq+pT5j04r?]L>-mRqqDV@#g4/WJrrc$hao3W<,^WpK3Q8]0J6SATuc("'d-Em(F<Wo.B=8>?@Q\L("K1O!YPgK7#2%D^X_;7c>:GI:;0V7B16tP^pf?IpTk-7:nH&<n2e+Eq!`,1tu6dh`f3)e60ZB2KrM8cb5l+-*I7GW#b9Gf5^KNU6Gm6;X;?Na)dAN%5tK7>gjHV@Z[jnf\M\"Pl\Ug<Yi+Z(Q]0P.Veb;hGrQ8u:<4YCYuJk\8%ls+\UCfmDXQ)6qo7sA)*p:/YE;!E7[rq')S.7=B076o%jkD=Q]bHjY(Y(lop[n:#gIG;Q/c]&#TR-E54'mftqSCHH8Zs+OS?f*Vk(A@)>/UPeqXYs61^icDPEh1t(mi*SqcL$aDPTF*Di4QM%pEO7^Rc]1pI_0V5hd0XHL/D10*UG53pig7qChK*_lq!+Na84&`;7Kl=?sN![@NW<o9\G@e[kYp:9-*p1!rJ->FgcFuC[S>Vk4M>_%-1,GHG^R0WWAT"3"d8H_*.N/;S/g>9kqib-Ejf!%KjdYmC@>rQc07.o*foCC'AGZSn=T,!O,8W)hn1F>[;)dG!/IB04G3d,P`92<%As1;%Z2F9a-+c`@nPkWL%cTA.#17q4pnN'G$U9UqKagW,biT"6pjCc49AsfZkE&Nhro$0I@CJjH&E_rH"E?j2n<qe'R[kr,d`\Ai%r4SH5=mWf0V!gNtBQt691+C21D2"7'c,S.WZ@u:TFdVTAA.A7Cs15)J*N,HmM0D=)L*mc'7>j93?J9jE36_?>'"]H=rVKJP'i38M%+:"qiR^3+*V"<PUj)RB58epSN*M'kK$r<HQ`Si_i^c&Ik!?[]^<8F-^EJjF%YgF=\8uqj!J976r7dm<(K+FV.Ne:XH]I^A-M6LJ>%7#5^(]Q,2u.7jTm;*-Vg9M&(E?4df<@f4k!6%o6t\KJc&P6_Id"CDe/4$T$s(^\@>kK\4Tf<m4U!c)mI*Ki]4\4Np,+*AIimk#Uh%&fa"[B7Jgs*dGs:^3fq3GY_gCS2pUYHslShPm!BD;a3HJ,^Z]V()buK`t*)h$3HplU(75Dr?)[D2!YHe+Qr5\/)s8*>=9Hk"-n:1%&1U>5eI?h>*2D/2h4SbrO>p'^EJ'o5!>@/PM^sp!,D'#q\WTU0Y\^p.5CcT*1)pQ9!0o(TdkFGeI-<j9L2_eY[9cc,Eia.LY&k+#%Tbn$>^%U";+BI9nP^GJPA()j]dR\cM`=\7`]h$7V5B,&7I&S,#Y27*R?;5(GA]]='l$?.`qXES.Z";$eD!#67SI*uMAM46*NQ7@&%.P?2l>Fnf6/ZT<>?r@5j"a36gaQQf_o%:5iMhED<9!HkY4;J(:950?<".Ale:Q.(J/!;-)8Vs2a+RpuBEWh4ne:-"IbYiJaJ1;_@%pn)TER$l4fc73He%Rr"62q5'qFgXd#9Im_XB#?1k8CL"c"f(M#ij=kmI,uO_5B$SKD_uRQ:NGGf1q.s6?d'89OD[[7k%V(#'YF9q%/jNGpne[6bB<XIo`jDFsZ+RcVNc2"oG(Nc]hSjkZs68_$D\gd6s-c<iUeHie9Y=>Rc7Ee'-dejV\Y=%X'Z7=aNj!)X*>[qrkZZ,(%0(Q10\3BH0-s"(]j?/sL+%gmE:?[B%;'S4`:]IB<Diq3]mA3%l!uY.aS<^QB8\E3VETK_Qg>C-=M7%@1%r'9LUGQdU"+u+VGjB^C%[qBe/;'PL^"<12HPKjER/:':b!PJ"FgXHa79,d4Bcr-JfCL'0W^,0N9R&o&6?I.?ZdDO'i:b9">GV$6*eaGHMB#F234%^!"Gs88H%p&4snbH]GBR3EK(Fl6*U_o+kqHMf:W1KJ,]ddZ[9!@YB3o+RYVLHBH(kF[Z#SrCYU'tcO&gXP(uf'!<^'$E*JB'/]aqOG9Z_7MT'%+J\&k9"MWi@6P^CZ*\'V^=*k;UTRMfrPQ:Yqq6ECIcX35_f@uLUTaU,Sp6Y`_P#\Q^9=0qC.J#:3d,oR)q_!<Zb=lE$.N0B'dEWO%\-1I)>':H-JQC)o*-\@o@bmQEY[MXTY#6//GVBtI,$oZ^H=juSG]<q[eb+?#n=;mO-l8)jh9e/[&#GV(WZK<h7qBc'o."Cr":AH7%h*7<%Oso*qS.ksY5'@XnTHh^-!)F]r`OPM)997'J5;XREEIK?7r;Oi_*S?+F-5(dXQBE\K-k[Qh:qBCOI&En)\f:1/p!28]F7H-7%;7'M+o.ROj(,3[V4YpHdFCl;TO3S`m;6$6.b9P;7+4D3M)i=oXaM-S+P@-,*HYlNV;>$/c*qUQ_j$4t1Y>QY/@eP@$CXQij[b#>C%.r?PfG!`'0F9Jk82*a.-:3c-7.DsdpLeY.as&pFrGaf]bgt1+@>Olet=?56W-,sM:bKN^^:HZ)sflA=&c]80XECP8+2!)23\".2C%*QP,d/h&2Ws0+Jt)[lUbFi-^")9GkVXa5T!E.b)Cm5U_`,+M*qKA``k(9S;eaP&*M_d`gu5JAben>aFY^+M@(j[\\<cdT7+&l7(L%b_;=I*De$WNBr9)Cd@I@i,;*.6t.d66g$P9'T;M&7>4hm40p,f'gbF[1KBZ^#EMk;gsA0gM*Y02Z]"il'8,\\SVi8dN,SCP%()q]%/n4ubGoYs9-tC.UZpul0PSL5^Z(Z4O@q3X(fDlt6RN"H17_It@2?K4ugr9Q)qP:[l+#,YtDKFi&@VeFPk/PTg0!5Xc:*k$92LjCb%F/VP^>oG9nH<<hj[k831\6RLH-'<^g8,(,[-`In?Zi]I9C6Gc^4Wj"e2bTHcYZ!Y@$CBHah)G[=hG6rs#p&3+FhP)e]`rDFSUukT%D4u-Y;8_2V(%o^Z\jVhtbuf+bBG<Dned4NDFm8IJ/e-ie(/s/#M[+(qLbQ%7eI4Z2e+%*jV2"EZWa3TFZbd5_EGMuoecOd8cc1?M%M$rZaPA-EUg'X*_^+j#`_P,Db^U^(+,?nXB82s"umY#Ba?VG-n&6b0Q'Xq\QB=tYP6oQL_*BPo;L8M):OBnB$YI-MWh(Bd\J)mp4%V;36ha27B*bS>50o:XRcg3bDea02WRgIp(hg?\_&PClWo+J@U?=+]7r.B3D<2G.rk%!NIkEeQedaZobm556S/RDE`aaVNc3Ja9)d%>X3WeIIWttC(Bb`ZFpTi3j3%qqoRX,b8lrXSY'Ns/)=1hX"&a*8j]"lfINPJ9Yg_'YJn'/38YtN'-QbI<R_sL1tKWiH-Zg:L55ig%0rL)knuSFs?]HBZdqt$G37t9JR+U-Q,-E0*a#;/t_L33O^CRt?)4)#s=tE`k$GuuMYR*5_9i[Am"irm6.B!p?U:4U[k\ne^GI7,!%eIt'KASi\?L2c]\r'0,X*%FG"TUe2;j<La'69L/LAkCc:ne'G$EI&Cq7Qs/-+sr-pNZ%Yc44_<:,'4Ul1.G;26p>ul&Ssln7CJ&D%I#Qj1;D_^>BB7F;&q51uU(]oc`Km'9?pYIMWAlUh#.lXj'4\44mr.d7S/=qiTQeuI#,_]ebq>Jn!N_U>`h]_Xgq.Z1!n1T*^eGK/%WVXO$F)"A\lQQl?flqG-#H,=?d#Qs8;f3.+hhh;HbJMIJRSUi'C.Zg>/ROd:jG^$u4EaPp_=2fF;QbD-DIW+FjaY@i@+N$N^&A72%$l\AiO(DcO5)(pL>^:]!0qPXD%-rtt`#q+/oO,1cnWdrQ9T5/sI6V'C?i/55FDgaI&,@lKZ+9mdN1KfXrKjq86?'/.:M@ufBkO),%D]:>7h0n(UBq)`*qMEiEQ./lFMn;Geqn#+2r-T[%b(7*i>M_`TpPYtc-qbY6j)^7D6[rtj7<@LFDbBp.50_d#Z+9@MQOBK='MBm^%^)0:C*,*<NXr`FZl&q"$/bho>UZdW`[0=]G(k(qT$Wc0VSsOL26>tf9X3_j^K3qE;7'o+tQ;'lL/iPZm@lt!SMY2K,JF=IY#r?OO%)>$lmA=GOPWWailCXo'3&&R[Rbd3(_l_pA;EI(euW'->s0$-WoM:?#fQ\=&>_BmlW\KiC[,a"JK,p=Gri@]ru1IFsF^C/cm9DZe$%AL'.mM'p';U#S'08hWai#X1k$>_iG,8]bKS\XILM\oK%ieX?jrX1Pl'rSh?(UgthT#2f;$\1[`P1<MWd`/IhieJ"F!gACJ:ece>8%1h\?6/Bpl9Va5S_\j'dBid9"SV3rbbb_YjC#+&r!\1e#VL#:>&'Gk@*1$?tYG@k9a^TXNP9OhLcb[TF%1BRu.WL+ND@0SMd\o4Xp%rSX_IV]D/Ig;h%<8Qa0S]tuk"D%bDT!I:*e6LKk2>e.K>;D[NpSQHfh<E(c8bck2P/`O?65sIo4jBT-MG$J/*f8dR?FpU=J+hKs,%ZG#i8aN9uRq`7k=$9P;Dk58Bqr(<l(P/%>p;,@+X0+NRNHXTCF^\Ff>hh;s60_F34[d.Pb(eATKK^Mh0hu,:#]cU.59b7E[4AQ,N%5U&R=In[EnP>j;87ui.:p09<`5+h4YiL46$'`j00VRV`R)Za@tn'bF\oo4KpFlBro]61jV(BaI>.eB@QNi$:%Ns+Bh^M,7&i[#4i%Z&@&=rc[j[THD,#"5X:oJ,"X]!*`i]ba2/l,eVnMRJSmcpqt^SOf9ohVDLc"nONu+O`=<Yj.dk:7q,u*(lsnh/6WoK`H\0]@iC+?%,K4o'"Ck]=*\53S+Ml]E;)qR)OiP?#'F2M^:*GY9I$9AaQpOKe`A<?Q8KgQ9hAHM*4e7a_KofbNZ_4X:0,>s3J4f(sKp3k-@N__4%_uh/E@KFlI(3'k!E.Eb/O;rN*<hj\hkC2@:mE#W._US=P;-flgGop7<TF%6<5rh;Jb<B5VH,LO(HK?tI?=A]%q,gjG8K`4&eA5a:%QaCnm^@iJObn@OIH&X3BT'K9\4G+_`CrD%*6>,9WZPCSmZZ\0@B/@rbA\V+.S9O6?ok$#m=c]A%%s@iJ=`'Eb[G#cjhn;@Wdf6I-%HdT67CA03-GaPlH[7[K'M^GCGST-5Q#Y$]MHn];G']*p.?O(Y=S)qN!p96Dn7YZ2mM+QWloIu)\R930J7W7AqJ!Oc:'0U`[1Z+PC%c7<si>%b$GN1Z]sOl2*I3b:8,MLPst9:11:HXO%r$JY*sa1^(\j!o,_Z^lW=Pu[)_$56,k>PtTmF>&X1_T_SjR>'J,7B?mDQh`s+%23V/!fjPcd5A&4qS,Ea;Cu\q?eX=A?rP?_#T=Ku;.EBY(7JW0S?8u.p[)d&#To&2`io=NAnIpb`i7gS#\D(,7=V;5*$Ca]11a@(t%aj7@@,f[YMgVe^s"9\1CZe"0"GGn1>WbQ^RYKIu'D8qhGjn\g$Ium`mS9P)eEjO"4*N#&MB7BehQToH2"DS\`#A(bL>2IS(SHc3X%7nVP5LImG(XFO(@'dq]@AFOdb*aJ!kVn%43"$\G^,jZ>ED(\FKP#ln$YOI5nr+,&$?5?N$3=P;oH&>?aGSq@r][>uV6YEld7l,:6%on<^/f5[BY3u;OUpYeM8Pcp*di_Q4L+][B$&FTO9f,6#i.H\pp8sgIr_e*4AoRa!06m3]DJ=.YC\[,DM/f[pFjmCEqH_"A^f*8LZ%^q<%8b#iPobVAg;-sOhNUp/J*3Bas*c2;K=.E;("pDR/-LWf2S;.gQagU"/M4#C?HhTG%Ki:l_2)u,2H]u;%(HUBgCAt-qli_TI,%>O7&M@:C<>#YoIsfT3hKT6TP4XUu-,p0FrI[NX&&/D?M:S-@Q5$)a>^,,$QLj3<7]X]NV!<D\uWii,rPr"**-=D"HSg81&.\\"LF%3.m<GE-?sgYt]4q::e`a+[$"0YkeX#O!s=NP;qiuj&J!O5%eV>+pB2PF*j!urS"A_g.d4FOfS)/T=g&*W/auR34c#MR+"&)3mkmR%Y3'cB?^JJIGp\1^\iV2'RtVA8o=eoAK&qF<%O@&Rh.8H`4AdcC!6"L#gN<+YL(4`QV;-^fb&EuDh:g`K)=FUA=,)'G[T'!H-XF-Z%c.XT_JG]5%>m^RaXdeu08!!cl,Kc]>6H*<tX6.:qUCN0WO?h9OSr6=cd)\i-ZD[,K8_bK7BGa4uFItllYilWkBd\bfrRXag/eY30%0hc/-o#WN)9q*A<QOi/CP8hsg`<K8A6R5]nP]]P2p0<GZEJ4[Z*V57(JL(.L+tVo,<hDAY!#q1+GjpZE"ItZU,-9!=7+ffbBrNi`%V*ZQJ.0D18W!DlgRL#F@q^'lb@e!9m$nO%\<$V\NGd*>a!9um%:BCRuX98WuZ6'K!*^V'&jC(%\M+u]`eIV^)Ys8lB8\:*_[,m\2%d!V8("b8.TG_4;[K(&f&:fo1[)b[aU.jM"ucnL(p-Ijf,KF7cOFVngL'!%efi4QSZ23A;%)ICI'#QQ;,`[2B-h$n3piK?d+$/L@L%@:^ZlDuf,_.9t]^rStPK@]:)FF1u@k?a,uqDo5^R1'jBD(hLgB37'0B0c*`e0uhfO+R,WekWG1%*8b-(DMi.lG/I6i&F1OAdRY6c%iZNNjQrN&Ss5?pij?O:E!?HSX2Z2roE"['t&_DONR3dV>lu]46_N%'K]8>sAW')_6(6gfSH*,3$iVP:TA&c\X2*oMDUs:+ZIMtqr%,/2sZ/3Tnm]4Q,BjIg9$'dZ(U<)fXU)3Ouq]sC=\5':WIArW;O)]Q!IW5Ieh&)i8BLq3YYb(G*.9fttF%rV"hGsFjVI;IlSGXk[R%\6M/UGCXm=(1hLYAAdS@76Ei[Y<6R'i@pj[eX/.PGfI5pNl-*2ST+Pp3@8/6LsmhlD&kY4LYR.TT(pkL0'iI,ZD0YW8ii#PIV?Y4%egh!gj<k%6q>$u\Q%`+@KR=DK=Z3ro'leMA=,525MA6f8j_$^P;nJUpF@4jh(ci=4!+O(YU),q@JAP-=Rb,iKo[]"E[[VQB0$u7)%b<N1BGVnU2OFaK(9X:"igol1sY2:\P@MB;1;>0H,G8l7.LH9#D6KO^h\.oo@#5cu$I&=LsMTb)t,r$t2>.+ofE+mm66SZu"r.@AS%*ZH#ckhsgla+d&mP8kRBlkaF8T<61\,_er#0?%O'?!`?*@Sh)Flh,7WlHk"5X*rKe-fr*YSVS>`s(UsEIV*Uth8i%pgP-e.QCb`X%Q:Ti1^)T9:`VYhPmIUbY9!@)dQ90Rdf<FK<o]5/=&7(4B\h?m(4h:dKBJ31$*\HE@`X?2L'%*GcnGiI%,5oST+##+YY=nY?5GBl+%i9B.gi!=f2NbZ[p*W9&=f:o1ja!WHB`Kr5&<Xp1<BesMWR:Ip_ld9XY/=3`L[M?3U\YO*#QaE&PkH$5!A<WHr)mZ7PZ*NViD-8m,%QCTj,4/YCX-*07W:Qtk[c,*X(P&2S+*.ALenIg51@jPk]bW2JMr`(.D&Ha(iH<Q@2`+0Vho;rd28M^f-!T[cl9,g]:-g_<k0pAIE%Ll.?&]Vd-`L7M1W618qo+s;^Tg)RgRMY*^4[?+Mo+>'R*8;V#?Q/Huj.8`_\/g.]NLL&JPR3YT4$M?7AZ;Qp`M!DNmd]c86Ncmn<%=hm"Q"#$XhHY1\sgM+']Ojn3c>s]/MBnh7<A5bl25SiaGd[\:gX<8g($,cum=7<B:V@CV^GK\&QboHFZQ=Q34XDJ#m1.aX"N`r<G%e8c<F`H9,Fb*#@"a&107/1\,eA1iN'8O0#'2MSDl,!24A/2JaV)&<qufc2Z]pD?Z2'$"1kEH[;"DoPI_$+"<\=\,B-[EJW4G#Zd)%ag@ABTYMfaoSfBk#og/O+Eol59V^__Fjes=V5GUNnXDChn'E7'Q\,cOl)4Sk^qf"d=Me8T-1DgC8#aH]QB2=I7CcQ6V.Np'<gI;G%U*0??[q:Zo";D(-/Lpf8Z5M4t;(#(ba+9'(C!g-^A2>2O&<lcS[Ub9P8p#;0M(scBcnFafV4/T?..gY*WM.+UX(=cK:88TS%?S73%QC,cfL6Q@>(dnDg9J&a\7TRs1UWA$"O=XhbiHr3g"#?JPh@kDpN#?nNlo2R%&/%u&c5anja,"oiJ-\0.YE;Hr+>]seGnEST#4u-L%5]4YPJY()RKQ9?J*$WHs.R_*a1ttk8L+\7-Jch/^]JZ^/=;_+C/3PI+))/=_7)AEeGR5d2NYF.04^i:6\ji)jA'J_%;"tgVc(Z`k%$6M56=j"gKOrUEE`cdai&Ihc-H.19!5`8f(-nS=@+Gg`^*kj#E@"L*a,H=!aEN1eDp/hX8-a;U<,j$)p5lXBYZS4IQJ.u^gcKsF\%O[1@<*LIO?+YZn7\CDiN3`VQA"EDee>*ZLGiB[)$$7&ckRR?bcbJ6.^k(\PB)V29\k#_Ym`c2W6(tK=WX(PruZBtVpV?K<te\9Qh%RrTbCBJPoL@gRO6)')?9Ud\l-?32p9"UZN57ZFK\0PQi76j[W>h\0Q*nfu]uOEAXN8p`V^CBZ4c940@p\belb3Gf@.M=qdF4EamD%&U":#JPe3[(^;f02'%!Q!9#[o_Vuja>@:AJfJ-NeHm.ru8@!n+LB`qj,O>[LOG&9<91hU!X9@8k=G^3$E<4/23RVEa*Q4=&Fhl-F%VPPgFSS94@3RIL)nrTP"9`_+fg-fZ8-%H%69HYpI=rN?D=p;hPBOgfM07cSE`)8i$@nAW,4qql(&q#[K,\m^f"XI1$#[_4\2XV>;%C_I%?.5R-QL#rukifo(GiF%\^Bu=>+`_1j.1)f1B;%)^rb-;#2/7Iq^H_LoqE@VK1^Oua=366SEBoeTgHQ4P=Mdn@_\beld):Tt_%j.P+F.fWP,@'3'G!C71Aft_-a3bf-cAXL?+#6i!l(/^!*9*n.RYh&;,?3V0h/dmJ-82*)X)R;M4K'tFiA0lu=K]D>9)<IAWAoKOR%bUlsc%4*f#oHO4XZ#[!.F55D'F'QEL3nZ&AOTc;!+RC2HN*/^Z*+hbkN<sr)+s\XXN!12&YDBFeg4W?>#a)BKc;Me?i/?5e_\h'c%:,'+mS*H=K3h`8N/0OTC1isRF/VD<S&s=YOmGWDd%$YJ[U:Q4J1;Sm#01pSm"Q'kpM-9t%!Qj.^_U'D+0Qh!LN6.&3=_9FibKRbD%MC'mQ5%7>+0E]-2Q^/r5@k\#;J=]rfA=>kP&g[akKTn6OR7dSocE0J:MY;9$^;mLA[05UnP.Q3sXheqtl=m7lpnTIaF>fD]_7\CH%D$)(PVqZ;3c$MgDTG"QW#uE.?FF'$fG_%2RA6srQO_L%I_*4!L<]%cgn1BZ^XMp<fJD=G*/od=8(1PCe/u?df`Y/-Ifk_R"JB..b%'A5%*[UfdAWM#k?U9-j9N;M8)$;$I!g_Nf11c1T$W.]h!Qt\(qYla3D;k-5rJ[PR=mMpE'ehZ#"!h_GHa@[$E"_!>C@%#__U_ZXI%6uZrO$t=<Q6qIR=1XU']WO3/sfa'itE-8B>I#42?l(9<k#UgU^jcm214r5[cM-9sr!QikL,0?6(F!3gSYR+G]Zfs;]A2;@H"Z&A[%PEIbD=a:<E<lSU/XfOr/<WU,H9KkV^+p7")R(ssaS^+Q6@lg6A'pM*<J[U*imMp3m5c.,*Q;2#Q>:D>+W.51Fm5["KZfm&B(i&`#%&hraiVDkIL/8A`u0MOfq-*0+SO-c7[n.Cq99FQoZXg%qdRW+L9*KDr]ipIW5e7hAR>Kfl8)4OVk`A(iUD!"#h8kEoYq8iX&SIUU[%V:-b;+C61&$X(EF'Eno7G*L"bjJ8FoC'h6N,^8FmPaok;.8iYor)V!k2:9.GJ:EB0^o91!dfu&4W>Z?p0LZ$r&m_9^19!H8+Gg`^%*kj#Ei(Fuc'EsZ9-?n.7+\VlmQ)Gu_(QdGN,6JBa:.)sm!EcOj17dE>^dF#fTc:@'L'I>a%M(5.^]_mWL@(oBQ3(Jb!D&Mi*!oaP%0F=`l&q1uD_jfZin=%-a<"aE`5Qe]prh@El\7"=La<TSW)5q\"YgKAD&Rc(j'28Mo9&mq(Ud?:%1qG5Rfdm1V+c-i_*ko\<Z7mhD%,aNu!Gt,4i3D3g-C'i)fUk/Nm=]o6h%knAI^6GoSpZQ\VU1HmbN*')W"U`^P.j`\Ff0M-l[Eo2cD&&-\a`(HT.C6"mUd25qdkBF]%A8$K<`@FNm3M:r[;)Lho%PhR[_q(dp--K[%1`RSNf+ZR:*<I6o!7VRJZn.l-`P`n3;TYY.RfZ-FYi_mTb0#5T%.nrn,`SgRfpp(F%#R)SQ8`20#\U-iEB#"oZBF'2m?V22?bqafg=r*mmQ:Abp32,')+%-F\QJg?SFJRF7LuY?4iWWJ&%`op'^a?mbA._RNM\Y/C*$J0L%i%2[RHU_Kg(>:,r@VtW6b-EQc'?$):3X2f>m0SXtTcPk\E=G!FX0o5n&n[>X6pX<7<ts<r;$k7:I?AAL]Y>(&?:Wp)^pn_\js_P"%K&es^=GWHJP[T6!Y5OHT",X(G=CBRu">>9s"'tpX;<kfS7P-b0722u'n1@LL:si;$BN,p!NG2X1-l@eE!bh\Wh)2d(b*UpLPkY7%%17O8]bnol"?0KYgI$p%^T_d`-J[-%u0U.YeM'[mYQ5OLX,UAq@T579c@k;WZFTgD"N4X/\SY0a92B!u(@XZ?Bcu3(H"OIlG)m(Sp%F%-8(KI9.o)Ye,':oVDL$l)%%KXF;J$!(ZcOFRDSV!F4:HR<+=PXpX'*,P_seMXA51e(fU"k_Om;O4"L7L"1.(,"YJ$lW1K+-lWc%]Dt=!2Y\lJ#[ioKF=XXH+An<a.mcjr7@&oI5]hi\2TAfQ'nf[(M),5hcnXNP^a)[L?TFd59p]<W;%A#e%'f1SL1Y-\[:@V\-\40Q%Jf]J;_f8:#MZmE4+Ap!Z_tQQ%)SJ6h.Ni0TME#%=4]+O/(D>AaPrRJ!NiQqPY\2=.+.Z$DcUsTsq%1GZ)$>Mh\j^lZm2(EAX5G9\%:mXJ9P-qSH4s;)k&tLhH;PqQT)23aE=CfBV[)Yfn^rN^C[05V3dQmh'Y@3`kV&1GaBfo=[=k"WRbm]481aV*McqG,[<WG+0DP3AS%3[X0O"=$N@A,)K@e'T437hn9-[@*<21i?GH.#D+/D#qc73PsDq[q\2fA9>Cl0$?N=BE1a3]S%7<QP?eM(LuU8RMlO*;T6^K+f8(H%$#9oTP@`\<)7V@L!L[c';D`!Coh:4(W+8OeAq8ZB,Dlk@6ft7]I#j=>1>'kl4j1:_@)RrhhU+,qdg[rrJ&Z))F(?k\GqTen.+.f2%+&QRS[;lQZG8H?S^M&Xoi-QFm;+i#a+Luhh]dI's@0&'nj$bCPktVsufZG'WChH\G0eggZVI]d6D9H(j>05(;!3-/I9+86<74H[K%<YYoH@iDkH7C:&BkZSoo8QHI;$UCl/d1.+[_RSWbm9W`6%(bU1QhQ:tC8FW/*q2Ri<>6S@=mFWhPqpkbQ%3D%`]'+'1(6A,Q88gR%@mE':YEJ$m!Hsmk,Us,5"e^G'nYI's-PMCa(>NG'ROs_Sh?+h9OpkPe"8uVjJ1rWBbmRI%JUp<g$T'M>`g;ctM'WqmA=:Q*aWr-a%/Z$S_%'e_;YnFGIjrDf7s%'=ZEgV>jM0V^ZV:k2:&n`+nG?fmI5T&uE=_*K;;_SrR((!`m=rK(2HF=HL.'^]Q--Q'mN.b`G)+_2K%Lj;U%-#*b1"XJ<lkWG[t3Wgn:olHtRUs%W)Q\Ft=9p`jo,Kol:k3M3?"U2CkX&_Q*)-9$++B`1C'lBd@UW_L,&hke<)&LQf!h?2K%:83oiRfaSm*He)3Pfb\h,f'R-lYj';I"O6[d;U`Y5siVoA#'6d%Q`(F'(fuKVL;u,Sa?ZIO@0CjO8<4bbY2WS\;hmZ)0?3^g,&Ll%TjT0]$-WPuGQ5bVCnX,PU4=T!B?DF4WR:iHdNTmS2dW5^O&MZ!_'p%&E4V*'e,l"*U,X8m+?!ki'#(,=6K,O/AQs1nVSn;BP#ucr%m]I-\8nYjfP+))G.5E?@2KjVPJH2fD:XDP(.j_i]Xd"q?'NrUkq]c7e?D'(_A;Nd\PYgulm>5Y;Qf)X!,>h*CbosX07eKi;X\F@/%$2l0mZ<Z_JClo+,-)R(][M$SQ:nJS@\P1T&foheW,YHK_Iu,qMCE3GtigNHGB1`%JYS+>HjoU^XIsc\lc3uI\AW$;OQ).>[9JShr%4_/)eTulG0ZI;L3cj?0-7oO0m2?b@/_V1au1b/YY_a79g68IcAV:(sOQT#Y\GV+b4LG[@BdVFd0V1V@%mg]q@\3Ga"AJ%!2B*I(`%6``CZfq`0[+@43n2P8Gj`'bf`*sX&`G]T.+;O1bG3Wu6pRQ99<3F76\EL^Pcd2)i)h)i3]9kQau/'A%hZHUm5\/gQ/&hUQF$6NH]%1o+rGF[5S=B]*%EZ<;-M!"pTj3IFVeASAGV6F(DGOdGJ*&e&2)UdQN^(Ck,OG@[SfAM6,>G;iA>VA.]_p#),r[KS/*Vh?%tCIAJ(%**KkgWRT'eXXPF8&sMPpV9#=P7ffDaL/FDg3Emq'nQHQF%a!Ng\e8Z(>m4n&j`Jp^=TnYQ*+id78h'2BTG)^-/RXGK^k$A8="<`g%jT:GjTP`XL]EF0l"-MY00EVG@5M6Z&_'M($O/sXHk()5-UTm#FAD905U`r"/;MI94LmuZ?I;IDs3@nQr6bECqaKZI*=U0@U%*(pn%U4bCYYDG$igkCkn#tUi&?YN6p1PC@C`aao.D$F^YF*oEoc4QGE^`k#/b[r"-$e'B'SkYN->V='??F%Y.Kdeu4X,#9b=ZR1S.'Z0N%7$\]ASfn.!/ES*[dm[e8U;Uh=ZoOq5cI)%A((VMi780_aAXQ:F3Wisp)Mg(A2Z7;MNE5u7g:hFU[dC$]$hcgO(JA->1%(CtA.+3P%L_;_@n:lsh:Q1G'K8u![q"r;#m8e!r#U(CX/9s2+C;'IIF,nXp?!7Q5_XX*=%:SjV1$g'XL2a^"3FR&nXuB"@WcWVV_mQ"b9$bYX%(s-\.^$cHO&RAsST;VK+\`JR:pdeG=BD>^T_s=H1@3p$91KMT_2ue3uh7.O[C1FMKR#H!tqDi%iI3e!ZNG7Lj-L7ctrktl1H$qKt%g\u;c_W.pOBLZiVK3"5df'hkrrBL`'Y%10goT(4&Y#A7>"ImpI!:GgqaNSt`##-MG%FOKT3Bf3$:'e"$E6;4$>YNK"+maE4T^V3;%OJneEUV_-g5<BJ'5#0,q%Yh:reFd3Z1tso=:Hi2AZ8q+bCfRR^6jp/kD7)g!eTbULq.uYC^;f&SR99'(4#tco;b,l;eT:J]cd0QK%]DK_oq`l<2N-:HNKh&qM'=OQ.a'u<T3]VPd2<Sa:,c`mVU:77afC="T*IZ9%h@-imkOMMIB]J^QFhGV[5R=qTEH6lc`Xc%9N6LPC%1cA@hlM_^!C(<Q(VUcDY5:<XDA^AWng`QO>)tTS"pT6ZdY]Js!B42R"<.9nCi3M9-BB3QM4N=c^<\nNT9dE!)i@bE!b+Anqa/M:s%()'T(ae`*b.qX*F:.<81)N;/@a@eC,61JBs=:p!!%t,3",=is\`Pi*o`(K!K0H$:D/2B-S=-ZW<du*nORe;Whcg?"9d-B-0fhB`j%IB&4)F!&_8%D2FR@0t(7C)cl2W<d0;0sP/t94K\skr@1s",E`b*BQJ<?;3tJ@U^%L7J+$rnRm=,^Mn?Vr*!tT?`"P=8+-63$b)kk%88oZ"/QXJD=`@SF88#S;bS8"!abK=sg6hZPD<q#*gq9qX4VuT%rl1RU3`&LID_MnP#@e!?*=hT#=kVn:#Dc6g@AFA<$gKgBeVnCI%&.*<&QD'!a>bP<IjH[+g21idjgW8R)4ElOtf>0hildNd-ObR/:^nY3^Y;7[mhLiMQT?"9WF%u:3#MZ#Apjan.",Em7)Rf6\CmpV8%@p*Ph@9NN5Q!H;qF(<?TNaG,,Nu6RZF=8?D.F`PkBY!+]DPYP]1]ArMC)VT47O2A_BN*!Pd&'q]Kf6W16SH\/>M3dJ4gp(Jc,o-Z%h)j.<@r,Yabe[*8\[s;%HpRt/JH[,?gFTA#'8qF\m4uLi[CM+VorqpRN#!()5:;M$AZ*fFg_qrM3/a&i_Hhm3#,rB.k_A7kC%Bnh%jE7(tGW9M?4?teK,I=.N`ldrdUb^Dm;A66XU``*$`JADekHQmlTGRUXX-4)4MMBBs.u[9Wq"u*>EY%h/`2?:"V8Y*:(2[&GrUk.f%Ob$+"!^lj=UdAbgp;OgVqrb0/E%+h.gIuOT;\dY=DHB+XFr]_!T?DJE,0MZ`ZA_l>30%7tmkS4"q^8FM0iShRM%J-iL2Cn:0e"QD%oocnq;_kZ5id#DNkH2u<C+;2%FL+Se=+AoA6Lrr,BTpWaGIOToC/[3`M1Stb2\1)98DHm]]LFQBee<XqZf+lBjL0=T>9!HfSZg_7%Ik%GQYT"t_.QX9?^r2GlMZa@hPE1(B.>7dAWHQWV5u-Nd)g:09&>n(NDZk[*S:HYRn]=8j>=<DA6[ep8aN3I4).Ti`%f0D0f6,#6%[[A^$<Kjs8!Dr$3BMFFd7W^sB7*F-,)*?O0@]$1))+Ejp:-ecFI#='\@\W&RPa\8Z`p:K^UV8qElcN+jEN`k*AN<fB-G842'^o.0%_,+?i`.tHAWdomqs5mM+B+1a20r?Fk2G4e0hZM806L)VP;68i#R%@ML$1d2E5MsG2p3MQ^UL\K=O$c=c$Jnfp3E/e!>Im6]$cE,c%NKI3oa+c0jKf5Z^&&>8)q(WbRCaH8Zo[k#gEp#9!W&Z9Y_Od>kUS)7QkOGD>)P`fn8H$tDQdg^8`jFa/3(uUb[g*e?DKb]?WD]ak%o>g/'JKtl@ZB[R3e(ak@JJaZ336<q-gTZspcY>VRH6[f+(WS,'28YCm1:0p58emb&19r=*g9:mGf.]q.Xs.%f\oV;B=0]'oApWkU%V5e8CI_FcDR2bMc<Z;4MF#>D*Pht^31CcEdh%k74iB_.[JGR33&<./H&5?\'bLOoV4%E.bL^nf,]\&or;B1ikp-FkNNN(#1GH!0f%b[:ZK%hB_$l<]LB3hCs,TMu\n45&s[:5-YP6CEQBJIK`=b/>j=\:-13fZHC9l"t'X4XmQ-q@tV13jOaYIYh]Cam0Bk$8=p[D4OM(%Z"fM;(dUO?.-??9lXP/+7jAY>eLJ6TkcCQ-nhi8YTfP^r[N2?5PY8:P<m:3k*%hjSCA^Pj3!+F9gC]KNWi;\l"mZ7I!Y&-<=XAb+%:d^)dP`=g(*T/+KZ7=ATYQY'<`\b"9d`]n<Q]+]uZJQjPgDsJE=,'qV8`DrDRj$H`[%h0eA[%FX?$FG5n\\C5S=_<H/";@qWgSH4%'&t]In!#!KA#=Pa*Qm/too)il3k]9/oK5fcqa7moPJ/9tbZtHXl"c,p9['AD5O4/<6NNGj3DbaeN-:Ge2'O9'2]Z_/X(JA)_sg(;%$)er0:H"*f,'quahGR%u%l$Hd_Z["Q:\7X.XJgGnDZ'K"h3F(JCTOV_MUdXeXq22lC'\k]3qZqoc$lmNhhqg:p_&p&jfOp7\N)MB%8\FGJ:.d5)S#fMa];1"`8s\n&;T^1h3a42;"u)0jkbJJF-#[7];[OpZm#4Vq?&Fp&2UgFCE5JJ3h!<'1*=Y@D`@i^]4m>?h">X<P%!d'4DNjr);%U-q`27)L.9L`X;BGdc``=Td<e*Di#JIJ_0"Qq[f'e;<dU;uDh:,fHGVSjSH?#J;SY@&(iNm<?A[2E?#M?&V7"sYEM%GG#><=fF)59L^X_],GkN3uFh%>bY8%lNr+^*k\dY4;ZK$r_TIadF)(V'hl#<'c.jt74R2pj#[U0;WLi#Jr$&QC;.6SM2\7qWaW!R%$BsbaZ<jQDlr8qV(DArULVt-i-==MleV4o%=jp7/#QD<p=Bc9*$j*[hUq@[K+PG76:)0gJT97$V+i-(fF+d)0KrjE`9K]VCHoB;\%?c^4M7@B%A?n+S!2O2Cb=KU(LOR#S3gW4`#N+f;YSE.a:,W00C@jP<G<3;JZ;UQ>a@ccF5l+'#`+K>?>Dfhd%!o5*#:u.?AWD2`L%>SVFOgg)oj2CBHc<LLe@WDl1$Qt8'LjeVDPe7(n?M2TqD)p)U]4EcGQnVRUok^U;A4uRR,jZVIggO\oWaKa<fp*7An#Ut^e6t>7F%ZnmAck)gdURn&(4m.gq9JuD;->82Bt52"#+PN[F=aA!Ye8X=`OcX"O__/gT_.O'Es-8-tDX6!(/=.=M>SJ-?$BJnr_9I:od%rHZU%[N+HV1VLMQ3&l1H+n]pI.TYDcR@a;>T]f^s_khIOWAP7RU-q9FU8q"`6;""HYfa7@1PZQUMN4!`Ap*$:Dl/7/lMb_S%ZQ"Y,d!K9%B189O'sZm]RGR]43PN%*U$qb\2f*SUSLqRdX4']Ba$&ftN_7;^Oin:RiGq)q\Z:]?OjY1K-4-U,.Re&+<u]h2'0UPpHc<,0JmE<V%L)kN,Nqu%A,`EOW>ub1>^t8.uri<V]<i[\mb[b89Ha7'1hPQ9h!h=,@7Bbh8Q*'D`R@a;n]m5@d`"3PZ#0tl'e+!RsMBO@#k/1tj%>8Y/ZIOJS\,K8b=']egF44qC0Z'g\!h6NQ$O"^%F7e'\NDnEod;jo_MO!HsG%6O'QXM,dTn%:9[j+CQa5LAU+;?nX"q8>m?5@H=Q%lgr]3'q`Xg['5?9lRa`sMH@6lk@T&.%i($NRc@!DJ;LdjX[o,806=MRPqp.2*`mRUBZ;i+2q\?dHd.EW=cLPEU?l""-D]#4<-?5+%ioB]ji51K9^KB011HkK1BRsBp<$2fIH#)Z9Ca4\PmK*e+&;"j%7LR.,is3G3A9Wl$Ya'6M@9QKVOl[?YBZ):P`,3o7D%6kR`B^Jj%SmU_i426WM@]?QUi7iQ3hC>0rTSgk287>^9"kig=%^tkr(oCF;%U./_jQ;YbijXa#G)'hPK;Y-naf1"<WDpije#9Y.=-X4mZ,T<\%'.I_GX<sMI9Ots7U0nqH8g2oUH-1/so2BWY<q8=GceUmq?b2Kn'%q_D)eJmmE&mBOm?\1BXC@=fPZ4MsUo%iA""rGDfIX^anP$DK%q6el9@ZbmL.m%UFkLRXsq:]tf;:A3kf]l@DV'pOg#^M6TO"b#EbsO>ek^hkg0Y8S:9L71Id\'$sC(p-6f9Z$/YrQAG4)Uq9mN@Y9%(_lNCj6:,g7Wr?V@nhapZ];H#%#ui/Gtu>2B!pWDfnbS\8tH/QcJiVq7TO#;WtD9PU.7+=mu9:J]0_"oXJl8e@VcnYE41m-)I9,u%9T*@ToNDU$AtP8-RB\et:D],o$R?(ZMrptN(/(4X.bWjY"B:!brNV>e2Tsjh<7qKCj@L5X5Vqs\<CR2/jb7'+eZ-iO^J:i;Rr)_b%B+n"M>VTe&Cq>^1$.IDhkcipn$A%D?N9GG0*a?O/pe9cU-`R;Q3!j/kZ;MF+TZDDRr/qX3P"/5\ZW`G=BM:m-bu?FiHE:QkMM\d"%pN%u8"9lS[.TURP9TS#gB[$n!\kbC6A]uSPedC!YPUS%^'H09##T:OZ-*B^80gl)+OYYu[P%e+&M2Sd#P[1S[h)<`'F8.7AQ<G20%/:M?$,'4bm%B>n`D3L2J0_0c1cuI*c'g$ITPEA3I8IaEN[a^ZY`li[bou3sh<NbuL9[E[2iemt=om3k/\$/c+h,mB?NQ3?;HR_<N%o<Y0=d#59]`%5#XKP3L_M\3QHeh*cIR7"*jee@WE-!nR5].qcUIq.*1I&s-$U=d:?#+t3!H;H.0!UA_'6W?T>GrIp$A$rVlbX;M5%#I+`_$pBA8IIpZYEXY#^fue3%l+&gu*Dr<U:`G#)=0Rt<>h?n>p(/%?_T7lXPT$)\^?YH@m%:A&jNL>/@'RY:To$osVL_:dg(k?R%0dgq^<cM>;Dk"X3lt5C*pPai]EO%o2_]jlLY:O.`fOZA?"lQY;:e$CE*qM^/`$5qID)VjPbd;BbJsY4STclV=8:H?X\N?<;B78eM%bN&e)n'O]U[S`!o&*.2+rUOm@$4.<OMUg#1H'jO1QH9HAVnMuU$'u;Q]\\sb'_Y."n_CfXci%9)`N?CcVdENADSB])C#lMO*aF96%Rtj#;X_O\p8<2*;ii<V.3W6Z!G47A!-:\TS>RN:?V\n**'0UQ;:H/,1+u3n(d\+e&TfoI+6^NGEZYMBeX-E),5?Y*.&JQQ:;&Kfi%IF'ZF68ZkgAi)]n7UDSGYqm@\[kZg;.Xd_N$M=2Fe_R@QI-8@im-t+VZL29PF6tS)Xjc=@m74KdD?Q-?'P(40W*p'S8W@F&)83K6%`2m>;8N-.n/<?>fA:\[b9%>]](p(+77g\k2p\rOZ*rlfV![)eC:(X[uUr6a]+^1srbh.bo@>O1g2dYrZ9h>5Q>`+fU@]&>N&@ar(%41nC#Tg9X9&P>Z5gCC%S7Q@Q&mJ"sXh43A/WaP>K5?[4[&Z.Rt=@aMjBSJ];,FYR9SE2(J0uk_Ifl8f2G5&L*hH%oZ<Y:&Ie%Lmk%Zs4OjEQbK32M^HKJAmkpgWI']0"(HLm`>c>m=smd>jWR_X6`2ID`\p8SLEi$]lj0N)r(")S9Tjg&L,;;06gV*W!Wa/-jgkof)8]<%'4gd6XC:rVRV:77eZ5hJ<846OGq3KQDGC9`rV#.W3S6V`Or=X`,2a*K_bk)VWNZrXW'iqVX^6K2']YS&Lt8W!1Idds0U7[UGQrIW%+W+/bY@?VLM!8c+#hX(^j/B-hPK^jd-CNI#Qi,5a4u*K<!/6a1TsVY'=a73m"]k:A*[bGR"^.,aD:jHSlGbY:.%0a?VjZS1XmETd%T)1m1UB43@EJ0!\_d<@QP"n:h"H$_P/V]S-:gjrf!pPhPLt/;96Sen6PlP[RKJ[D1WiKplp9pP(oLHd!=P7aM^$SVW0i0LX1f_%O%S-<.\i5gLdS/5Ef/'*ulSglkVrQ!+!<\qo._\>LKIN-4.^l=0AK%k=;.bpQ"PoVg4@s=k;^G'Nm[,?3P.$[lmoQ]iVfltY5XOG23%7N]oT/CD@P>]XJ_ieS0^"4eQ4(fe]t&!bAn@b*VZ*na.LS*7,\cP8_lJ'"%AZ'n6B`]mUW'>ib.cab>cSg#61W6WF7!jko[#.c3u%'qT3=E4Zo"dYiZcjc,Yl\M_$b3?VaPpp(o'fYJp*d@,>c/bq-4-'.(bMIa(nZ2b23^7LfCaR46D?n7_f_aMV$[[r0nRTHr'k@/bl%TDEb%6t0kffRbZ1IA"i&Yo`VYoDK:bm*]7T=;+3*R8;#&.;KTR*d06<=Gpn%d^@YqRiXJYMNQ[PcXUa(XLM@qEk>)B@4^lG=!o2-%2t(C#WN_HYg[/5#la]n`j%i^WH>cJH>e/69eouf3@LYlZ]3HctY@;(hc1Ke`)T/]uSS7;k&9Os#U<9gBkC'nk2K=e>i=uKt@0[^d%Cpd_m5[tFIV7e(?\g#@?WH5rB?0SPs=0^1[9_?sW%Uf:C?g\^;G-fEuh]%e>U(mskXuQat@.uX!fF$Nb].jK"gb9H/5d-6*2Pi"5%g6U6c>d@(N"q?m-Xm(+JFUO)W"hH*;<u$l;RuQuj*>+]=rJu0Z_1m6M@I_8EPEA4YFb+`$b_:kNRC8X34O#<Zfl8f2G,P'h>Gp9F%fWZBQi).toW<6pcCXQB.I9`^M\Jg;*pE);P9o=pC@UdMr:!S4,*uimE'0S:/[cJa/5p_F&m,1m?,a0nfMN*<9X+\simInH"Wikh^%[[#R$_dm;e/5EF7@Q%ZSmA-lI4&#7g<qb<Bci)ftZ"(a&$']m00H?HL:oX;clR@DM'HGm"D\Vb-9\q*0#9oSSJBpLjj'eqWn2uuD%I->>EfZ5\7kddtgRD(VO`@NYSLoM$X^$8-9*TDFn_(TQBpS?iCXKFWT82(4Pj?kWc6A.qNPH5RKM0Kac3Zb$9k&>a[H.4I;WI8"s%%+ToXgJRNo1OCQFm1^MWa^,7[a)V*>'aM-*-6ZX^j%G#"baJsfLu407R[+WXnKgrLb'Pkl@s84<*XJH?71mRP)g_I#0^ZIBQ,c-*%VXToA`O^\$>]kGmNc)fC_T!jSbC+bPd)C:^-9=mo5'f44#TCU[=EuQ3HL)-n`J];HdkWY4DY00[3oK4-(eNY6>f,8Hc8pr]23c"5%"+hGLOjc'?_%)@7QtTM`TN@U]2(4Mp,bN?Qf[o:!eU-s+TjSh;s0s'@Ib'J7W>TheBoH#=C8)iO`s;j<0``[jps!A)rGnAp1l9O(%H.s2(&3Rh]3ET^^?mgRa3?DKF0$+3b&WFaJYENR@n2Y3[+M5NT_);L5_SiIa[[q9tep_:d<BM)Hg\s$U(/ioQXcY,g.ZQ2D8l*1g%lR5.m(*!Vh@"dm+6^<XU[V/&q\/L+]&\@a01=<,]8$04s6IIL*a?)-(@rD]Yo6e$G-bWq-]#cHrbh;YN99:RD+TPqd>ifgDn@!8(%+H+sl)`FIcWtA(mTZ_)6qs<=*XQ$[UhDU-u2Ek++pTW!=A/hT#_eFl5,Ea,`Zku(j4SeCf+(NeY&h1)K%\T5KBKaSS-?_*dB;RCK%Q<I?l:IsSIjcusR)_o%n:X<dgZX/+j.`V`SV"]3)j`bAhG;Y\G=6,M&h%a]E:;gn0!k+MUCfZQRZq<@07-XfuEp49u;ms!lApWeR%=,B(OpE#$#XGnoT;ZXq//T*'-/@7E3"Z2[r<'VWPD&/QpcS1j;<5:5$Mjk&9$>iF7!KHGi)liUWG=]oY)HCeRq]+sWdV\)77NlI,%%EE[8RSYRc!;VmOj1>]!d*&@K2,-G5ID6\DYX6f,'Bcf72'J6NO\;sbgLPWf*25YFmqfT`_DdEpguhR4(brLJ6Y=!j1IHfL#bj<U%psR/s_-G@,AAgjh)`Al2*@=AtAiZn6`[BNnD::U+LT^7QC%Zd<;?P%f"mMcH#p6^'M:7L!nWQle,_8o4r+l=C`Ijb=!ZVtA$FWmF%-q#TYNO%>S'r3f8/%[C-kLT,MShth?;`:L]#Fj<<4%#LbfX@EDm&]WaTpNND1>8SP@j3.e]AJ4Bm!]>kS4W$KDU(4bq]qs3/Y]`1%iQ\Ht_oM-;TO8.sH4E\'5$3JAcXaCU+"gQqV_YEQZ-ol;&/gnl*Fru!KkZotT&d36mdm$@ZB>)DdG+*9cmh?SfB5M2Uk<NSr`i'?%UNBl-J>riCJU`geeTHa-!+F'!X!O90%9Y8H&8^M(k:fVXhdsLCDoHs4.sl02kPe<(GG>Y]75YN''`%S`6JB66b3FDIq5hqc]o)P#%M;l<ce!*!O)+dX\(rMI_;S^_]-)bOECa5iHo%4bY<%"N3/:DB:C=>[NTh:cIZSs?-Yu1;A#kLBX.Pk,;h@O9s5Jq=ql@r0Bg._29%_DamK)6'7?Po5ccFsElnrF%Z$BE*sM1j7\/ekXO1V[*bQQeG50Sf.cdX)"s&NUmEcZuTbeLk<,f\m[.]DG2Ucc>p))DEcapI[fQ3%3ul#"goPc:cnoOj_I4)-r//mB)[B,;FVPr5S&\FV$Z\X]CfLPQWr<-"OP++mN)bl8(e\;7mG])AlNois(gb0RSt"t]Is?Y6S@Mn$%P73<O4/$s^\_J'bL3fMs-MgV>A9-Y9Cc(S3/-^8&7=o@bAqYr1)/V,&D`!MkAZ*fFg`#%o4--n0T@j\6PI?K=aFGgh)V:)XBp-H]%m!9<hQX["aCB[.A0a7)'Zse@12C:VIgNn<\2m7%/ccu+;+-LPiKT$f'lu!5TYpo5";".^W6uafn(R.?-WAi+]iosRq/BW9'RE32.%k!h^">7sZ:;h.)j#sk^)0#btNS*@IDe1iFIYh^?9-"ro./4sBK]B9DsnT8\:"so0G,=T%7A7W;8/*]ZcN3f6H[%1*miG+il,B:gp%fnkNVH^!ZFB=1Bi1>%.9Lb\&s;PrfpRE'R;,65(a.#Mc7?,EQf1:!moTj]I_+;tp2iE=G\oB$^kju8.RGDDpa>Q*?Dp)NGl/K(^O%Rdi,4BTX!UeO'jij!=ee?AAfF4c7e0?Ige:d<]J),^.&V0[0iD!+&G,B"Gj[=Eui;HL=RG@@0be_ZMoq1t^+4U/g;0EBY`SOOf=c%8Ht/'ID%=)_d/3:N)U+EJB]lB%5")$C6k:*8$g_3&Z'Kg<d*1bc`NmVAkl\EhouVj)g)F"UK<7ih'');o*ETbF"+&m=3+Et.f71!%`:(iV-f:k23r.@OHDfZFn]Fo+ge;Y`6eYCH"m`%e<1oemUm`iYZ*"e5U7+;*5&72<QH"`UnVN4Ta\T%,Jo&S%"^79d$IR(F;jNoD%Q&8MGMW8/lmLB=i:409PD_Vq;"?DV;*ts:)F$s1$+f[I'#3K7kW9pX[ZaO$OE\ii?Sb`0fD+OL^U6Q>>/@R[CC7f;fYKcZaA,,pB%N-lZr4)Y[g`J4j'Jr[J*qQ:76$A#Pe_QgA7)6s^8&_2FkLrJA5L]umW3L?9qVefqbc1KX/.d_@*X-''<a>%j2fg_l$MgN`1"#^J4%=XV0jkqj8),?H^BN#e(i&Q9.]KD^_['*:lLGSM`UDPlUr&EV]GI(;84hCp:n.pRnig5X5F\eXY.l?./?]n2BFT,'>^^s,ikKh+rM%-b4l3b_1ac^!^\UoiA!?j&N2AH'k3#6W3lW[R1Mn6H*$D/sSJ5@bn.8(c+\4(dV1CJlT)(#`:=<;)i%t<l9)[C,Mk_Kt^m>,EA6p%[^,(.HL=R]$m8"R&ZCGh,]?V'f$.9c!iE(gCK"=m<h#gHAd[O,]8!R902*"'b'K2$MH@'gk@T&.%j`HX$,57#dY]q`F7P(.o;1[1%\j-Ms@K_koXsf:(PVuA]1Ftl"(*cDd/o!M<W94$f*G@#O!-KW-a@=j=Lu,S;KBKCOA*V_WG-MY?\p0OEjOd4uaG[CLe?XLBDKdm7%F^9f^S8R!i[^4@B9O#fQ=Dl;:f07m/I[fQ343akBg$J:^W.o<G;pC*5.IUH6pJXH@E#'.>TbZV'(aCH"L<"fl3>jkr8GSY7`'C9&%FD>Jggl[RZ2Tsjhd+PD@a_S2dCp9<Nfun6[$cBF)6#?TFB[MKb5ce#K%88$TEbJNN*?9hQXD(FA1:,WtHtQ]AQ.ukuF*!0(?@7*"%VNc@a?oMBpof_;cQ7r:7p@6f$,=9@_GrW5I"VMc<Ojf/F?jH94Au]D+a@UV>+n]pI.TZ8u9[EY\:nYABe*39\_/<"WoE=>[1Mo;<%=\'Vb*@jjC2H,^d1ED)gSA]*<8b75@Src-;g/d`K9Q0gG'731hgpOYS`6a5SOK(rVQo5oZ^<4#1+0[7C=;<G-;]2f"(hOITJAmKn%_5NtFT"5Sp:mr16_KnOJ*QlMgMs.]),cB3%<L708Y_tQ_k=h/NgGKl_[H-aTE`@2%`!-q,H^lQ!&lXn@MTN\Xl5Z;XorI*)DQP;I%j%I%BPs#r4g]!jfIr^3@]tA@"#dj)%:^&H&3KGBkD@SNd&-JV-h_2!M!Vle$;,ODL)4>T]0N>$-E@W_?kmP^_=(+*4olG.'<cU;r%O51s767L!eeN,HplpsMHn!NcGd">,C,F"?1Ec\Zm01sZ\.ELr88?e@FNA)pkI!E=Ni=UEJ.snuWcLQ71GVLuoZcpiG%(&9%Y[2A1%ME4r($b1*2@te;Y/8i))3`QA7U*-cV","iWF9TSS3[H"_lLfh'P^>B$,IqZ_kLQ;oI,\X9F^uC5*fR+j6\Dn+ba+G;S1B>!Q"U@o%b'64_=u2UE_U+*t*/`#uCua=>0Q@Y9QLhK-k*(ek[u$]gK?X;5qO&fr^k&h##L8/`p]m'D27I;OPbrH'3-F/\iD-?9M:'J@A;H32%3WV-T`At1X/T"tEH$jJg4O#5mfl%NeGGcW=UdmB$.Y@%DbBiI?5"]g<>T#"1ZV/r.eNqBuU)r&?XSW<`ONltdL@O:DU.t/UYI5aU%C6rDkXdJ@`3Fsc^]N2a,fYT1ZacI[=XjO=0IfAI\X=]27#./5ikU[mS+HuEA`i<?m4KQda9<Zn3#sm^*!GtumF#1Ms&+A\>YI<&8%N\uh+gJOBKSL8;jp%Ut>cFJudSUljL/idO$1ntf5M+2#d<QS[e(7Z-ZdmQ2Y0/m#i00\(1I[fQ34&dc;Oh9m"ePp!oUNSs=3M-PG%J4If(c+\/uX<51/QTT)+I1)$seY3<Y]/1!`6n@@6ZJ'%*L:@pJDoGDrc/D9kJNUQ*@1D8UBt6@[LBjpG@);a_T>IThq#45g>E<QW%+GhM&:IP`QfdTTVcW=FjpE;(O`Q3Ldk\YMlhjsOW4;VY/Jo/^^e]?rO1jVbOX;W[1:%bU0\t>_t2-)mSR`WY1$rsO"H)32hbQh[l%a]X7@-*)8CVRQLi=n]k9U7N@9;[(WEW$4";JT'0P#okmOHu:9&$.ccdqr1\9<ib@rR)qne<5B&8oS7/.D9;)q\Pq1^=P7aO4nkk#%0H<ZFBMSbp@RQK8?3fc=3T-RAKD.G5.O/!L,n<X/TKooQ)R<tlJ[%Xr$-XYpM6%N\M0NS^HZ#_Dr]X%$hL1RrKKGjirpID;R37X&%lQV_t_R<>*eg(HI[;-WJJ)T(*7Ef5109UK,7e51oO'SG3C6lNH>DO2@UJZ(@+Q`31'Uk#4TZ:lAWgcb`qq+Ad"_%erY+CBQod;m!%-66#:-3Q2.nAnXM>"ij=6O\HCYN7#qJqhO=>-TiYpj-5)3n^4k_#`7@VB+),,<0D4ktZ_i7l&@.kY$>S?kp!t'nJ&E-enR,S,btV%3BGb]niK7ch:8*Hr7>;)r;.Y$Lec;O:_=iQ@q2;Y^LTl!N"Lpd^LX,2<(P!YDt^*_W\f-$M'=8k>-ED#fW")HR'o?cX]fYLDG@d$%Q$4IM\,G:bHmtp4*LU;1:`YdH:q(PCq]Q6-T'A&>r_d)5XJDR1-6pp##q#<]1[S(rnToP(AF*<tm(&OUqnq5^V/_Ei$QDRO_&DTm%,!3n4eo4oZi^G\E=`5Q^A$r>8cV-VU-.jmY%Q5Yk'"7Ha?.cfqPs#r4g]$]NRb8ogX`ineBpe'*:@,EjG.UV@F5Q?+'EX*oFDf+`%@!Cf$R>"*WFasUqcrp$uK]tPnqt#,#n90Id_W&+nhY3p0,sM'97b7jn^tIi12sAafg:@ti-etgf)o%B;=uH*/9L^eK2OF]oRd&0q%>-E-P/hp\Ob+>*e\N^KuPGYi[\H_%%ekrV/ILnkMCQ?f9RGhtN>9o,9)_%\<`JA0-2Jc*8M*r=pe5l1VUNg;oq.uYC^*)(,-C!'>%TnY;%;_M'kZ`K,`$ou7GQrk@N.M5,A`PbB^1LW&uJ5*ouenIedrNu5;+DP69b+>*e\Ng"K-dH2naGrN@L18r"R(lC^,1TAIOgu9+%_c"tj'e:b22'O9:U!^)EF#qN5Btu94q*;P['Dj>DkJ#I%b^PN*&O9jh`5(2,i_B_BAI._KV7&5OAT$/$Y2jl_5?[C'#S<*uXTmlU%5TIi_Rc@dhc\i)qIkt?8<OO*K\'6'OZuV$jau^Q^Wlu&:hM0%L`7:p.B;C#Thc]]Nj(Ka2,MP%-PU6asHHV&J.PjIDgha%%]X.EE%/,Lom\)$#U^#5_h.k`FM&<,ErZ*))sKbqZ>OJq;m]"o?$M0iM!S'cd`5_t#23IE!,eU1#]\\YXL9[q5l@,&S>FJJU_U:8s,mR*q6%_9=f6@gc`bWVEZIjJZ>9gYkEj%IP:APrfDu'P(7s,$<(iXl)[9Ad5TISrhfa&1`$DVRQLq*=BRDfqW4!2C?LQUu,ihWaS*Ts1:9A%`<^4u7fu_s=uAso9L_,a-J66K11@2.GPBs[,ClO"I'Sae%aB'9qEhNO`jKap@g-(bGu0^"._#83TlMNgE:jf4I?1Lr.m7]V$KBdH%L9Z=^9WE-VHDuUV=0]'o@X?cN,!u`>X>rGb@g(O4`*2E\"hcW-Vg7.agRC?Jo2N(O<ei^97:\g0e^#*pOa[Sb-BV<3[mc0S:>%%B%&^fA$oTdFuULrSmSLW:2/uT['J#ML;F@t)2cBH-ch+r0u;oD_kWM'r6$?EYK.bLm^-o8-QZE<;%biY1mm(&M?p4lq[cE^>!%-fcf%74c0c^hCu`\&@hO@b8=d<lYuOEauIrOCsB.b_i\bN#08`D&;4)?;:KLa7.2?nQSD"]0iLf`D5GmH8]Ter9Y0,(Y<UYl[_,mX7TZJ%%6'tm[5(Aj-6o\+%&WmF0WBd_l_W#c?H#O.LZu?6jC9RN,?JI4)n$nk^/RbgGYl+\J0QLD=[,#CKm\j4h0A##8qZ'=A7S[U]O<U:%jc*t@5/"'W.I5j'P#XU\e(aj9mD\C<%+O&Mlm6bZW.%op%N+4^2iN\5LBR^7g#>CCXM$>Ze<#=EndX;L;r<C3f%k\\e]%?(a[UHC%6uRE>acK!(+.g2WLc<eOZ&10g8umnIA(Ab_dS(f+6V\'g]!5GldMjMXLW;%OgGh)?9IhJ@A\HXSQf=:4jLC$fRmTj!cB!;]Ku1O6%@4SLn9=7?P02;u.RqlEub&8)IO3rc;YFo_ZIS3%<ACb>#@2#eA+e!9q^:]nrqDl)#/%]YqkN6O&22TaMX;iY>YT(QG2(]HgeT4'Y%XX6Z#&?LD^m^O.4't2p.^QGH<QR@Xo4&FdJ,&6dq1!BC2+e.+sOM#K?%12329,srT-R+%plHQeJ@.(P>e/*ia>'Hou)WBo9A,g)I%T\Qb+)<#V+(bi2YdNDUGQ#9,-]js8L:tL;#Z(g8%H>F))<0G\4LW-@)2KF'8[$V\17cnVu/Q-_;+?qir@]AA9a<K>QVZqC5KP3Af%?kKsuXXTuA8jAL4>0b40(H^0K]GE:cGGgW_LA83N9>NG8Bq6-Io/NQrBG^un2KWY1]%C$uQ!7D2#GrU]]+drfP/=#O8m*fgQf=:4%m(&M?p8;Y3KS`G];`0A*:fV^rGa""!WjigAWAF:[.QiI0Pc\!+\&)ZD/PZaa)cS%c;`i4bf$k2a.9kJF1Hfo:2q4N-Qql?<>F90)%2[#p0(8bU,/McR>Xb1P7,7bZO==Gj9-6]^Z-k0[d,to4%OS(AF+C<%0].qcUJ%/Bj,et!hemOY=]ej!POPK,t&HkTl=YC46Ygn$^%5mjKqoa=<T2411=_^)eCX;=abG\&CPDPlUrd)aN?]TLZ/C9h8,15aUa:E?8<=i[3mIoDeh\]IadToP;<%XrNE']`/tY[Ic7MIELn%'eXK0:C)UUW2(]>GV5l&rS^V^Z&Pdg!OIsB=M8?;VZ6<S(pDOZc<hC]n^?a^or=ol5/lHZJ79Q#=q$Mt5UU?.`DZ/-eNI=i+Wk(N%:oq;A'0WgZ%GuPNT!N&D#?rod=MplQS5kfiF+TU<%nn\rToE/k$5ncC_!DrX_'Vnm2Gk41$u(,C-_u2d:;tA)S*@IFgntY4=WF$;%($t!hXHIfp`Q!TQR[V(6\rKFC2H?'cl47+DWXpnKOi&EPJo,1bBhU$,1pYo:.ZX9L)nTsUkN4r79:'sn7Qgmd3(ZXRc4sMM1CnW"%"Z0BHfMF,md24l+llk$,&Ifme3G^+EXWC%JQY^6Bc1Ke]8j2dR[6Onh,m"hZ-Ekjh\FiSirMC&@pa4bZi&>q<5)$c*QDa4r>Nupt%,%!C`BI+gLB&JRu/,O.WkJm"ZSi*W_:<g5P7A\S!k5MSFIoHWu.Ka/"VQ+AIb21N\f:4!="`[1`0T"eB8]!Jj0Ch0ob#\5k9Q0f,%',g)R-4`*G2KL_>R*Ko7)n@GoY8r`b,A7<$n[`>?+K!bXKP8'q3Fa%')Q&@+!*O6GAjF"dQ$6`8kPiIAZ9"h_:2,3K:a+]KTG<WZ%H]@Zs)X4r\K^1m8<)OZ\h<V(D]BZM.<C;Hi;\Z)O1Y"<$1dQ.<6n7iTEbPc7;mEXgApWeROb/cEJYmE(N7rr]fQW<e6-0q/KH;%U%,'*I)ONc0$Oi%glX'.@OkhhL^1aHMHYXlA[CIR29*ne\2S*@I@`!I2C`bXusU:Ujr&<u"+Y$!XQ/@r,YB?UW6r2qiR'mh(Ie<%p4%gVKg_fU-9:@qWJXn_N=BZ0"'7hY6bYYj6>0V5cgtK^oQ%C@XWp0F+]uBQIIK&LY"F+sUiB$?WK_.RXMgV7bO@L8q`t,Inhha50Wm%@+g($?f_K_p]?I7a7ua<(H!;7Ear^6'Yhec_INCP[,MN/*W\@;=@"imq*MAb]Ho)1Q?\6N[^+4+H>Eul9H59t\RWNZV)ZWa&Ski%%@nlJ[4DN"&cS6pfXf_:*6u/i!e+b5!40'(5[%EKjjDqlU*TL(WjL:!&G)%b0T/(P>;1X%tSRpp3GkA@oS"majmc-2iL2u'okVT>_%4I6tKJCWcGL)/@)LLsT6gl#=r\@H-#]5=G.k+FKIG=bM7AQ_=:%dJ6*.n*3*-[#&AlnbJ7KTu,P7)9RA<U+LYWgG6VY!dcW<g3\C%-7WK6ofR&aH"ALQDPlUrE!!Y5Z)VGe3llp/D#C<d0\befS(J]]"kdCs_rM<5;P,rDW1_Oi9Nr_sEk-fRfYPQ\1EC:Gn8a<]*o^+W%m'hhC]7WBJKTF^M>ICR=mi&e'Uq";%M`j#Z0R6nO(cV#+TuqM4(3Q^%^*#aQKWEYL)*<(>1t1d,K+"+!'2h%bVefnQ`Uhk'Y#2i!%f9Lu4MEi!H!r&_Qqjk/gkU$S/E5L%_W/hi<",H:Y7OUY:&kUefV+B=Y+'[E2'0S7.)q:^f^lm"A.pi[-m[o[/FKND4aj*r7Yd)oj%=#;&")C?\e]1dh$lF/_$e0MJ%hr%mq]s?1RY<A;Fqa3l96emkO4+f*rgH6K,?WeQ:JGLb;cGNM'g)LUHP9n"Ta\H?r"#GTgbu:/h%-_#^lQk7ICJ4Hl-dq3p\)E+Z\SF-%1g0!HK(QK?Ll_#^C`e1cJ$f"G'lZ)mo!j<ADQ0M!7gkX"-euN'q48Fsqdmg%3X='gpP?5$[%DTqb.*u&=_%:!CP0X8,rH\>hSBj,!O#-b<PPs@5'c0SSu9oZb,D69ZAZ?]o!YQ]*&)c>)@j(_:Yd4X+pDO]n$3Rm$VPVLg6pBLma%f[dO6S6f7\r/oa8_bXQe"OpG$iZ'coX`ktj+:>Ed5;:a4[_=G8+@MN"I%$*l2R;3eHL=NeMMn>,atOdGQl03_(/U%L/,H575#;6V%+s!%6,b'd&-_W8835HSNB3I8_X;PiT\[&HMA1MqBU;tR/oh$h%e#1Gu2\1c>Wp'j(5=5+G)%;]nB_S;o%C3Qim13-W1P21;%NZ;&%<8q4D8npL6BRCh,2(O#kVW[rCAS0c8m=;@E&mueifV,f8StiVALe@kLH:&*1%B7SMlrGnWWkp#LlTm.afSSg7QoG4.bBZp'I'V"b%64M@*2i!=O_(M=j:%I*[CloLY0!1jJIGl-b^)O'Kgk+MSc"cBFbs\mFF4ShaoQkUX;F`Qd#t@TRM[?@)P=r0DgL5DG%eDk#Ifkp_%1itE]=>PEq]jZtLNBcU8bFS8_[?KK6=d@]t^:TsIlYir(\f+d/MtPFf11V-+hW!=#]X!eB(X[;Fa?3dFR]fijNPqTbGpGs_#_l#&%^)aV\V2l"pOS$WE>@V)`P?*U;@*KsMbC+bPO;ckI1`^<IeoHu/CZABq]GE@eG)*])%eTY_f5`S0[8ibA<-<)kEaL1RMX&uC/XLW;%1j*=b8O1<Q7S^^aKC+&SL.I2>=Y74'EQM7)gJ#r<Tjm)ISE/suh-_0PD%EZDf'<dq\-FmANI6[_P7bQddDDjjjq4i/@+WcL10_*S%_;CRLl_-=L.m%UBkLLcG1uYYt<*D8D3Z+b1<+5G*is_KEd:'UB;elNaYX<?7=n.j6R#H846,P[jTJ<^k]<16gnE-";ijkH5p,?;U%2/Qo([*H"Y3.ifa]rZ2(W/[?,en<Q)Pl1ka(\SfWqA@aQH=nfoLk<i'i\WRL._QPF6m5nj2d,N,5/g'AS*4^5GY9Vf/hN>Le20("%Anl7Pfrh>h"')9+V:<^7(oeqkheoe^PR%q$O@a#<_(%fV[>87k%.1QOHT`Ns^VMF)flJs_m8#AbCKF'i0,U=?o/TD6Jhc<]\1*Bq%_")lC;U;S0C/dk@A@KciYYAV]bd;'UOHs+Pne[p/'Yd*/[QC"c=i9"*>oTX^eX=t'l!p8e1YfTJB3#d,.om`N-6qbu2<JdX1V)8j%l_W>n?J3JmS*=d>T525?c.Ocd@CCK_.12!7b&TLTX51(HlFXoD`'ot$6R??#=K@k?>gF:SCh'Zfo%Y--p^DT%/QDBt_04D;C^d&@%(Nj(8XG7@HOG^"n+<.BS<hZ(OJo!'%$+@(F,trBWR9plejI,3)b#\5k9[E[2HYSb9ioC=;?jk`7DtC/IXgT%H5A[fWQ.<jl:mci.%DI>Es\d"hpge?nMeo\)CKO%ZsX'!L80Ko/cmQfUY(H5/JN,;A@be]<C:BW`.GMD6amHW!)e]*YeR#JPKWF9Ui$IcjW@b+a'DN%Z%%ZKGhGmLKcndX&Ph-F.'MmT@_V6T$X@ObMMP4bYXiJML94<%?-,`.K!J`po($>&TFOoQj!,J_^[&[^,(*HJ>&=5ZfXEhs4[NF>kT3%9'lJqQA!9%a^FsOmk4I@eXg7nR"?mg?3ctpD)>1FNQ*p.lNtB1#YM&=.\;R_D1=O.bp_DHYEIUrK$A*5HL[%8COMIEH2]i^9orOL%I<nm?WqDKTa3YV4Ob(X!7"R&APagerfd5^uK[biP0%nBbS*=d2T;10<W^g40G08W%R(OO=+?AL6U^+DHjl!P7Juj:*1i1QU?SfrO%8@A,&4j'3p[^,(*HJ9MKQT)kf0+/.*X/W0H#unc%Qc9i4d(3L3>,3<c2hRANnQSm:#.2fK3t]u`To7pB%!q>Vd,A.0:a+)VViA=u%&\W#icS4V,^Y\CK+kX"$U]6'Tb)kpMf\nM*N@KNj+2lN5*&m[qWOt#\7X!&MCY8L[6uUS7"Ok6(mTsf$n9=aT)nTsUkN6`]]G.:m%]uX%ne?IAZjFJDPY_b$N3pn,!2YiUuo\>a.7OXI649E#0,^]WXJgI=1Jn77C+Y,,O;8aL.fOM6MpSC+DBX+[(MGc@K/gabfqB'3H%o$(]='`\\k>9WbDTA0,kfLku,0GumAZ3drqd1RdsU9^@`cC.hCZKGhGmLOeW.F(r-NmFk9S";SISrFu]1A^I>Bm\@$$GelS7lj:D%3sP#)aM?d_Q_Cr22quqR1[27*`MS$Um*_+o'\sPRgZBbSbD>2[O*/>i?p5im,gIHn,"]:g.3f/4G:=bm_2$.RXH-T'-@@5Z<&6Q\%K8]DUTSsRk`QFdAl+'$L_%7KcW9C3*(nhE'n^09N*[g-r)'UrH%pFg:-B6dh=5%E?#V7b8=d],)d*1dJ&907.>L(.`RT$Z#j'm?&%%db%#a!ho&h_\"^oG)75'?eOANk3e;ReN\)iQ'5uQrp?-5"n;M?N$BKMW9J+#j?2N>>GOAl"p."Q$6`8kPe:B6C!nlfB5E3o9O@e%&>cQee@6;r=D`TjKQ#0ONZ/&oc"c77-;6mVV/7(;]dBa8oLSUg2$*A;F=B+g=sT/WBsXSfFA)mB]j"r%F%[m9^"5>sV(%c;DZIBi%_U-P@;PgUSN(cuE#qO&X>nU'^e4'LsX6JNo/HhqfU07(rH#=)VL74&tcZSMG#<S&+XnGj\\1_Mc:E%/:!4?K(.)JFU*D@,W\%Zsg%NClbc>&cK8X0&tL1m__f\&J!J3Ahi8`AR=c"%'-S!,oZP2'(U<3IPX'^tWsG>mGW7:9Eo68FJXU>P2ln#D6];)V'*eQ8=-<KAfe2%jER&`],OtW']qs\Sqi#`JmHkfRQ%+Z.d/Rl"kCXTIXsg8<]`\;-q6flLWIPFiM9jCoo;_QZ-=o%D/R@O:U[Rd-@5(i3fZiICZcY/%lsL`L<M^.$]"Ni?9jLRELO2nTAuM4c1KQJ)Uio$;KSt8+BisW)DQ*->5A?FmeZ;p1>`r+B(=V%#1_^VDm],&3X^AtHeE@A/QJoe.%ahE`aCdoOQM46c3Q5#LFBh>QY$h,&]3Bf0Wq:\3A:[8mLF=!YIZ*NP)HL;:k&Li+!WuBV0[\</;-p`l!T1@c7f_'O^ZN54i.r#)D%-6oR;arA?TjMj%@:?M5HIWM8c;snl%ge?&mIF;]*n:G7."llGp+p\pPKZ^Ko&r\YYL1W;3P`e^0:/>L0[WABFR!<UalhPkS]X!ec%2q)ht8D@B?_,l2]l3da^W\6?,s2OneKDBs>Pt'G/'bIF2kM.a/fc9Af[\tam9X?2R]\]1T!deK/3GtS3k&BP6m'Zf!E)NoE_F^3U%<c,8.\`KbK!GL$&4Lc5BAmC.NSCUCAG"D!k9Ua,ejYFD#51q?5Ms,#%QjUE>cKq>kF2MVfFm9d"nE_"j1PX+QhM7YR8d<m'qd?TM%XQlLmZf)Tl5plQmK8gI3PSF@c`u'(b+daVaY@8g(c1JG/A2"LHTNZT9@16r$Ui/H1SL`'.ASN*:"VLNA2'Y`NR#F"@d4bb`)AD*P%D)oR+RSU5ogST76%d0"=YH]7j`,gd?PN-gYB+c-Y(J"%\JrHQYBQ2;`YXa\#>Kr=h0U%X:K6r2e*4QY/Sa*Lec@5<+<qb<Bci$Fl%G#S:O`!V+do.rjt<3]%a8TF<(3$ucR\q=*'@B2gO;_p"^U.VN&fZ*8lQo8PYZejh,CqPXj4:fn^J'^NO.FkfMdc(P>;F.(4F:Kb"%WeHj2%dKp!Pn4536.RMd#GnWJ'P*LF8"b\G)CBd$_^MO^jb/#/M,Uj?j'm?&%U2upAG*=NL/C1>*hA,'=RUE7Uo(-NmY^2G8hlql%)=\E]?rAij'9j$^Ef3CV`[BM##\9Cek0WKWTb=Z6jQm?b['Qb#]MMI."[OOO5#7DK)Yk6EmSTJ,X>[^C)O$:`m=Bg(G4gQ&B'3Ne%S)#/'VdpO_`UqrVo'IEKHRP'7YS6R$qI"?6Y(d56).$H78_q$C:E7V0X1BHfUbA*e*"&i-Cs9rtg5+,.crO*:6ZYgWp0'#nXe@:Q%j"W%DM4o6M8ud-1U<fe7YG3g-8ZuJTRVs#*ql>;a/\84@\YPXPE4M#_%6?KVcU9R%*bDn8PEFjhXg/`t4a.,om>5PnbG-6fPn*[.%nlWT#8,5!dpr_(m!g8YO^/fA\_itDZC_S!Jb9k4%bG-86SXf0tSpL!;#c&4l;Em[4@c_H_kd`?(S"S0(3j3E[Rh.YaYufg=[;b,o%qYF+6BH+O1RB9<A&4MZ1UinFJ);/<m(Mr,I.82eDA\B)Xig$Y4\XB&d_isE+GC.EGo(ZdtSoH5X)Gc3QGeq5]3q+[TJml.KM:8P,%4I$hK&?Q1c"(E(m9kIkp8sXO>974%)[pkfhjqQ1^Kd.f3L8=0bW6<$BmtZ34RR[4KNepl;X!15,U(JJ@b3i]dHS4XGD&BHmFo1_t%U;uECZ9RC1h3)dfj'?k-iJ5m!UZ$,J![T9Sg@.Rb0311&%#rAbP@P,4.]kES?^LG5CMmH]#K!'rl$\&+H7<##p!7Uf$$Pq4YYGnE%(g<R)MI16n@L/rgb":QN=</+-0N4(VkE''V<,f^]EGhqGgH8]l505-hMrnktG_Vb?-E5FidBk"ZobAIkp(]5k<Jh]OcV:etBfE2Q%j2+b)Xeb@t-6ZWSPn8Huo\5/"\qrmIc-$EmT9E3Ynm9Q4fU\8dq&Pes6%c*h:nm<(<a8L>k6&[a"f:\5ViIkh4dj5&7-Xd^U;T;A%=uACYb?:p>3@1^c/uIh"OKQ,SZ"\:HEl2"!>UMVWIbInh>UN-;LtZ+G4O023rlIcl9OT^9>2ip?.uqNSZ77m#Xfbri=0[qO@=%>P%f8>b>gcJe"_:0H'0q&Hae@V8+RVfuV%,c:_!]eM=6*R7!)+g/h0K$n(8c:GO/kn7oa[Z!Y7*j\K6hYUo:#Y_\O'n1iX%jF8>:'Q:%.faR(p:-uH<(QSQIOqT:#%YS]jRdPT?kbh@9H/YnZJ6c]Y4s7]]5=#"k0Ph1A\IBU(jW+ch8h3K4Z1`)cAA0fH0)S<#TDiE3fXqY%k8TP6PA-d7#?"3'WE'\R]4ro@W:5O3YrYe]9W#k]n0_h+96JT[TiBB%;-%eU[,fW*4i6eL7k,IW-:Q1GNRaGol9Q+PX4>N63uN?'%e"pq@Y:$.F_K8CHG!_e0XeE&jjN[T`S66BBZD1;n(l]Q2ATK-AWrufp!jMR^(dDUWc*@_>Oi*U[?mp\C6n>S*?>NVN4V#TP5)\L4%0bn`7Z,Nu^L+u"r<KlIB3#$a9[a!SC#GtnucC'1,MK8g9'Z@8cL+u$HQl*eXlT*PJ]TQ8W(Xq.<n0M,*D;D9Q&raNej/Y)\#]$I:%.)Qr$G"7(DTr!Hp`#'M`Jg@'5Rh\GF/JJNu'AM!BS9rnX:GRgb,'quaNgmM<!OMV))n*Q4RaR"s_983m1Cb+/ZnVMckD:5JPaH93%m5,S'ZeG)(br;*f68Wb2Nu&I+5:2.p,c=$%gmYNH3!(Y&gsWD]De5`@VJVh.3KdsVM@>bnZ1YPg8JCAHD5FC6n`\jOUge$"[$@jp%NRSM\oia\DP(H3/P1*icDG=!B$6*f>)aFM1EH=g;YNWm4TXV7ZDMNu(o&b6RNY*4b3Z<tipL?+??(6h0SXjUTpO>)fA7_r5o\:=A%)Gc5lf'$VhW=F)j^i]6jN=NE<2)t71KN@6<3h9,63!;*UZVY^!1e'CLW=H@W8kXskio/E3ob!O,A[fqVg`3c88ZR3cF/r_"RrbXg%GMHj]9X/O*ISt4s+'b(KKN>1Vp7#&uAdYj-8^agLc^QVfpa#1%67#sWb+>*e\N^d)8Fa)KqcTU4lt0i!HF'm;;Q8l+Z*E@^6"rJj%`oA=FP19l&OjcbA_%,$4S*A^)K'_S)e5+16fu.aT]PS-[W"!1Z8qg*KdEi?)`JV!]aJO'*.R]<DB%22th3rZ"@<Hfm$AehS<c&7g%:i+NI,Po(?D)icIS=GJ%gc!PiCNq#+\l,Z%eJrDGSE5nM`Jm`X&!JW)QA)9r6c\&"-9Wit&n(C>k$SRp/;IkInO44_>bVgkCh9N`%oX6VVpi-L<RmGOXNXi'e3F$qg?Dn4t-7Gg(T'aJW:TPm<cO*S^:BbL#VU1c'o7aJVV@^_I=P7aM^$SVolaWuQKrAD/G,gr<,?HPk%Vg9i]/L,ioFCb>eZ`u4"/-_g[A^%_\k-=WD(Ma@Tp;g9X3a,J.X[-oL<Sc3%Ejpe.,C[]&2p?ZM;RV"4@iIq.M</XPR+YO/;V@#.%DPM&D1dNaZT/Gt#O]mPf9"\do+f.+JQXXO8`UpT!ol*9@V*r1Blk6a$4>&@s<0'6`W"):iN1bqF3\[gJ/B^EcZl3,XM4Ha^RAc"!%DROLo3?dVFL/YP'?GuKE4#IrcrT<rN0K0ZHk1X'-H)WEE6T8Pqn$FE-bqj_Hq4"Q'JRaLea,1<]+]?A)V+aIR'Btb.P`kIJSS^))%kVRf_Z1:r>o\:EQ\ItSbeLH;o%:'=VSe;pQ,;M_;ZF`bl;6\8FMaYh6AE7\Xf?gZ#XGJh=Bt`;f:p-@pPoVg4@s8KLiE(C4UuAN4%0\1!ha?CjPG1L`bRiQ3qh,Rh4<5HCj[c53(0c=sK<l8%@'rHro?!2)efiPhl<BM)Hg\u/mf^S(-&-Ls]%:_A<jN-V=<$qouOKJa/%2^9F)3\im`YrX&P(a9'B1Bq;BZI(@6fbSX2ZajTs]5=G.k&c`[<n8%+FCQ:Y]8Z>*-NX$dKBq<@k&th8dMJqnpVIIJn:]I[*(/Io%33'D=k(0tc-!A3(0thE6@6V+e2EghC;K3eDAE,d&V>#kQiQrN,pbC`@lDj@hZ,>g/9L5E!hQTYIAR^hNHe+)rI(Y?%G=/8%rS_%i%+TaX8[P-!a`i^dC`JCsj7=-=QKgBU_9De#1JT5V:3ge\3;\3$b22jD<NG65BXKAtqp=?m^PoMa1@rp(`6#:5YZ!rufZ!$*e-FUgm%NFNoKI?)!"HYd3gc`qXD(.F!-aQ.Me@q3+$L)N3/GtaRV'CtZ>?J-ecFCKRN+(ATt,=D*mN\QSonL/d3P\V24dDpG^)6(bpigUdc%$")6p$#k@7OHN/.;5,Lt,om_e@WadG>OS%[c]l2W&kr][XeV*NOO6EVTcr)XP>2HZ2J"0A5W&-[,8!X*B!!:6=V"*I2:3]H'Vdfu%?4oDFLD8O'"NJOLZ'`qcV..FPR?3QN_^O^NLBJj#Y+@!FbWISj&hf58^nFXq,J34Oc(aa4=XujMj,pJ1[@&(?6Z)D<VR4sQ6au2c%2t"<.4`KnN3c;mf`F6=\3)O0ZgpPDPTtFtlE;J-*m,21$4B:jTEXi<i'*:H8G\!j7/Z-"ZI>WN6$;WRF"QM1'8"-HB%[eZ_UPuST%=0*+h$<%KH.L`a`0-X)j)Z@A+)E@eE'e=PNVW[qB2\:sI%c^p91r.6C7,ptIh5u6!88fW.Q!/gWA;':A#,6,2)M'CnS^;N(Ei69O%j-+?H[V;>&6[2#&lci5/L@LrnhL4G'^[]->i<gP82F"oFTAhgufP8i#_b<Ao4:/IeW=u.o:St5&qY:l0@O9@FoX6uLE8pl'Y-!A@%d%1kFa:bUF8iRu#ZlZo6',!g?3[ju<VBDp43"7Ggi?Zg@'$a-%dB/(c:<b6HUuP*?3'Zd?JNoE'<cJmdL5j_\BF"uH1hfXCI3"#2%G&ptL>*].DA!fJ2S*=OkX_E`-0a%oASWj@;;9]+\$Gp+D#c=W=V-&!nApS>)'gZL])BX\I"[PQA_f4t0PE$6TgVVSA`o\Ql*$Tju%T<-ZLeX2#/[JDUF(D?`kW\DIR&1o74p&/hZ<n`Ce5&]i;E98M>Ak;3')1sID[gYoic<EafgIbtB_dk#RDo&C!Ag1s!H*ukKfd5Co%BotOOKh&O=F=("722F+nF\[T.cQjD,9q"5/X1deG#A"u]X]#0R;\54$22F+nNG)><W0^`;=_ajNA]Md^g`<89TSfHnPGI\[kb9V4%aUV%?<r/\8gNMU9DWG:qbf69O=]*!q9L0-r]ER%=b8)E4G'L^AHGh=:fl7Te2htNOXFdU"'1WQ:3]JmnAn6meS@YVZZbXPYMNLg6%4]MAr.uCNdaiL@D6\/95%1:M"a[0-Jnbf(?-*'!XVW[A2"n'DJ.dA2]gSe_[3-cffEPt^2h+3I[2_,'>_IR2b/lJpAJjs1;5%b3*%[+N'/ijNOW2M[+0W[S%Q4:e<8nM+Di%n5'6=+k&TbI>Xc+f')tJ]:gU&O-k)OOSk@N"tA"@SM+`F5;+(ZAge0QM7MTmX3LI5j.&D%L@!Su=8f,[i+a/]`tBj,=7)cIYrga<`:8Rm$/h=U_jEH"4Nst9`LMQr*ne\2S*@I@4KKnhiNVr'd#*.GEW8&Gk;Gr$`q'q!c'o'4%`i\?3gmM35%,?Yt/1O&&fS":A0Wc=4PP%sP^p-frZJ4AaD@Kt4?+66F,7]Z4IX#@'IU4^t`6%oZ"/.JBj7S2C"ArCj&tUk@&M8d]%'=!`E4u9l9/5UZbH9r`*2OoYepL9l[m\$`+3qUPtE,]!u%SBVP/826-0[eN.X58h`N55e0h8Y?6o3i!3CQqu><X_*+9FGo(=`8:,%-sk"FSr;iMJ+u[_<80GX'/&KXIo"<m)[.R47)JIc'2j=`PFoltm4(f?+qj=4RjJbCCf`!cRC7p)F1ohX6?YsjG$@)TXm+hu=$tLU%;D0EM?,qG.[#RMl:d(5?Z#X&"KbpBqDuSD!3)MMF05@$5*g!\I;4D<pC$2VIWsQVU#qjm\DN!arF--8`'EQrKiLiIAjq?/oPO\KB%^[tOrH=pfh-2CSu*N^[-lcisNkK&2Y0q6UI(<eCEb:T0%d%%D,*B2GWGK@'bqAq5NF>L@&Loh_UR,"t<<;/ER:Ug\u55W#7Zoc!Q%[b=TF&g@@742D?Mm,0YDk\D)m());Q4e1:NX10aY\':n!K]:[!.L;nXJ8LT3\G?B;8`J[m.]A:`,R.eeSrs-k;il)9"B.*AR+*gO%p!QkPYA@dr`UpT'-r$p"V,$D=D&TIhD["GPSP[@O<.S,1<kUJOi"_0#@]U?XJf9a_/QY/LCrjbJ%8e-\l5]'=#iP,.4L0h<+d2$.%TXV.'/ulW;<#u=Rnbi7[[QnG>5GYhH;iGHUOpelN=_4Y5c(+r8OO_JU;k*:]]mqe2e.fuMPEcC4Q*'D`R,7OlaNr+WoW%pj%CWJJ%&#':*<*fCFYKlHrK\H1Rhlh<('p">RF;5uC>4/.cQrR9=8uKXM*\+AUEp&Q'D#"bin&7]@h4`59`s:Wg20p[tNIaCmlaArtT%*Pd%eA0s/Ech4s<C\4hVS]>DEP-9ce<&.SLOpP6(hBLAj;S\;Y@jZ^K2^#cDO]go2%Ag34nWh/I^#<Do4)gfJ\O7R\TVTbKKrH<3Pnng%\^Hk(>].ChG+a9?6ml6bC'5ZX!LIVDj]W.[kLS,o`It$UU)UQ(A^<akje"%dc#fjPU?a#DUo:D-,u2]q`1kKc>BC!&e#Z3Bf<\"i%o?(,-ge?&m8IapYQF*ruL0!G)C])Aq_E=VgpPU'16I:UE53#c4lpVDJOi?S8?k]l@B%hK$b'KOq;Xqn1G$IG]c)D'Z:QG=r_onFI%jQE)qU%b,@&rK6KS.;Pk@Uts;260-_9Ld;i]o;>mr#h1Ql*F^]mGl`_B,j&ndrU!Ejj(N5^V2Gf=:TMYcaX<)-]4@e$bV?B7mW^X%bg@7b4O*.V5h/7,G5!L+>,c]YRK]sNXL0Gt&Vk$5T1/@[1XrqZ;>sUO6*Q9L!@<VB;&UA/"..NJDg*%g;Xg!s+d)4DN=$F+GDCaS%4ad>V>1G^me^b-B[7df_gL>K`guiY]QTDJUh<_2fgjjb!4D.A)\D<jL)$I4mS,tJa\^WCj+SJfjk[O"'QFkqG*N*_=]nkp`4!c:E%8#:?,N(E<2Oo[H4fQnt;I:+gN;ba6m_O-tNXB('R6R9T*-4Q^#8Vj0tP3&F,@\7,*I@03h`Xo981nM;30pgZLFX:pqlVfaZOX4<l%:B*%HEHf\6C0$5.KZV</oPVQ),_6mJ],.fD3um8oD;r!;hDU-5YFG!8BiW8R__r2YNKu%N">cZ/&)G[]2=.F%4Od(q#/jO^hpn*Q%X=?MNfSi.n`\d57P4^/OVW*lCm(&OUqnjAqUD$]&.3%!k?E@R)o`mJ0\I9'H+ZNe<E(m>i3@RWk<d-#4>1?qrU0143?>`N=ZCS:d%*B2GWGDPo4<9-'geJV'*R$De217+mW2G;U!A8R<4b-+kM,Vrpf;cY\J7afj*9\l(E;TED#94)>EZB[R3drU!eQ.XhJ!=&FQ8^4.[%W)aP8hDY`$<LL`!(*:j,WcA<"RFl7@5sSp8&m_/<;Y(3Y'S!DpFFiG:XmETdT)7!-GoT4&E+&'DA#CT53S%h_-=u?/+!\;mhU5qB%<@`u*_A$OiG]L#_<MjAkmU+P'3afV+Ps#r4g\s%\'K>8,)MQ#'/6J=TE@8N>s#N%il4K6sf>d]9XB(>M16[i6'H0'0/81nZl@WD=%#R6d8X'!L80Ko/c1WcYk:fi'&N3ui!(+4]pXQQSs!P4+noJOM<bBQCqB_PV2&I!.d<j7FW>%*k%cK4.7f6kQ8(s-\0^$T]"bGq%Z%B&,@`c4+9P[,R3-g"nfg)-*&=*.NZApi5713E@pN*)%Wn):1Y?\F;BljHeLt9"$X-A7LtFo%_iAL>>A&oVuj<VRj.("->$-N7t\/%A!2gNdZhY6Rh\j++VKn52FFK;1X4.l26SmL]Zgr>`]fmS\MN:s<d"s+DD5bVTb660<du``m_fr^W5fjUUOElW\)=kua?^NY-3"Ea%@mFO5o0AU_LI(OR7eU%SDnFKrX:ZSd(>Tu5\M\UtR&QZ*6Z)ak(lK#)Q_Kr].pJuU3^c7Lh<,]RIUt=+]TmcQdl04rA/"e*VWZ"6%<"uZK=QZbBB>Y4L'ItLn?@Ps$M]/ng`_4_cb$rAkZrrreBGdTh]?Yp9>B*PW9FJ6iZef/FcZgb:GV5l&r?8i<k+l-PpC1?":VXZ)%W<ch0s/KOiaGcrgCO[@L&TSLbYtO01`70lOb4EI#)j58NWf$V;0i+kuUt1`2Z'+9YHL;<4mlZ)\h\V_b)n(`LeBq^;;+c7!)(2$L%"ag`Ppi.U9%;u\a0sIUuZsbao;8[J3eBIJm6J1ll4GoDp2Uc__3."5TZV'2M:tVuk_LhGAK;rRhNBc>Hm8"lb6UAC6<`0Me;ijYH%JIO^1`sL5\HqsVgXX=5R0Ar+tijkH5p4k?<T'M=\hh,cFC9P+bcro)T2d=2`i5OjHg'Td`)G(F>$:p+)Fs8]G=Rk2Ya/V(eM&EuX%2EC4BQY^6Bc1Kd2ap=<'RQWRQfV24r1Hn@a8>i\RIXKq0TFP`tGb_1eag*EQ"dq,*9\ARMhb[kg-;U'$H@6Ku]ZMcdpT059D1@pX%Yq]0ZE?$m9#@#S^?BN-fdOco\'Cj+_4:k=uob3>s[]-.$Et=--4hF/=d)<Y=P>i6/oU^CU+Wk(N:9<feR@a;mp$lKer9H>_M.(sq%bk]+_88Un?/&UkK1b7*n%O6R7[AmBO9L^p9$o>8*@[Mut'pdr*-l/^sA]N'ff\Le$m;k@AO,./9R?>).Q](1JN%4h,/&HF<<iLQ`%+7VC#USD*9#*G$>@CQLr<#;9cd6+Tj3T:jACm:KHkde1m2m--JprgDnj#V&^gNZ>la6!()?$d7!)kSr1eJ5?qiZV>:oE^S0`MZEt%1XClNR<Xb9@ZsTWEQM7)gJ#r<Tgi,6fb#QI"l!_/)(".<eA/+mP_"lMooUQ527=u8We(_COiS.>PFc0L-om[V/5'ZCA0RX?o%4aR%+;:MYZdYub@rcZ4M;\O=ON29U*k>IoVg2F87m`Qg%9i#P&1/XII5VK?dLaYbLVdf6=XTfN2!`(iYJKeD2'a.PWdGnV^*8AEBdHnU%j_pHf<M_+?^KobU^KprjrjL?&nS^3$EQqY(Fq%/#e#'r2?I&dmbq!#?E>(Jn=$-EO?[qnAn&HX`jc_REQ*2NEY7(5T:i%.NdT2B[%IJn=D,]34afP4b2Y=I=q8J<!c>)^l_^b3?$9JiK-qqP3c;ElOq@ca_Zl++@Yq"45TLJ%)[<L$BL:,,a_T6Z/Mp?VQ_r%jYTAq"BA%c,.g>Q&VK2DH@qVV*&[N_7F3CWf8r[ZOGD:hgOtjl'AM;q]Gk!BCl%&hu9f$^Ac1)0B8,nr;1EIrTiA?ik)Do!WW#Y2rFW$\%h_3%J)T;bm>(/Es!RdB:VOK7^\Bj<rVNeif73_0IJqKqInsGOjqhBbYCH%s?iT9'ru8K2IuaF+O_ac:jBDR`Y1M9;qYKg8J,du5'7]QK%:&OtAf7RpirBfZ2oc'=^KgR5&]]M,8#0-A:KQu=.n_*d%/8G[Kd%(aAfs2[pdl9;,;V3A?F_BpK=W70J=b.BT\D#B`B?Q4j[;IG[%PGS$,/3iP#ht/qar]biApOC60cLLAEFoFIC?2lD+s5aJH&!mI2RdF6,BWmS[AUbm!1qZ2J*jU:oj[Xgta$9D!LHkaf`t,r]m^M)$%s%fgMrTJ1#>i^rqrp;YZrqZjaq:Y`>B>=7tn%Sh\lVG:mrGR2U]<=I!eM$sjLHg0'k!so*#Q'"um]XA%#?\[jqA5.jo%X11Y!8kT%J,SO@lZ`($YC?AlYCH&jTDmp3j7g=aq0,&N;sqJ@hYn%55Q1#*+27U]%0,D]h_-p<c[Yc>00f<Tch>-PZetcA0>I=\Dnl=I5PjrG%+8sf0IeiA<IK.QqIf8[.?[hg_DuSq/?bcF(DelUrs5EYNI/W1$hu<':fDG:-n,DaeIk9[R,;T;HO8eL\r:u]Z%I_J2=T~>%AI9_PrivateDataEnd