%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: happyqq1.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: SamreshNarayan Singh
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 262 191
%%HiResBoundingBox: 0 0 261.2432 190.2032
%%CropBox: 0 0 261.2432 190.2032
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 8178 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD07FFFD057DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8%7D7D7D7E527D7DA87D7D7DA87D7D7DA87D7EFD057DA87D7D7DA87D7D7DA8%7D7D52A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8FD05%7D7E7DA87D7D7DA87D7D7DA87DA852FD047DA87D7D7DA87D7D7DA87D7DA8%FD07FF7DA8FD0DFFA8FD1DFFA8FD0EFFA8FD0EFFA8FD0DFFA8FD0EFFA8FD%0EFF7DA8FD07FF7DFD76FFA8A8FD04FF7DFFFF7DA8FD75FF7DA8FD04FF52%A8FF7DA8A8FD73FFA87DA8FD04FF7DA8FF7D7EFD59FFA8FFA8FFA8A8A8FF%A8FFA8FD11FF7DFD08FF7DFD57FFA8FFA8AFFD1BFFA8A8FD07FF7DA8FD53%FFA8FFA8A8A8FD1DFF7DA8FD07FF7DFD76FFA8A8FD07FF7DA8FD4EFFA8A8%FFA8FD23FF7DA8FD07FF7DFD4FFFA8FD26FFA8A8FD07FF7DA8FD4CFFA8A8%FD27FF7DA9FD07FF7DFD4DFFA8FD28FFA8A8FF7D59FF527EFF7EA8FD4AFF%A8FD2AFF7DFFFF527D7E2752FF7D7EA8FD49FFA8FD29FFA87DA8FF7D5284%527DFF7DA8FD48FFA9A8FD2BFF7DA8FD07FF7DFD49FFA8FD2CFFA8A8FD07%FF7DA8FD45FFA8A8A8FD2DFF7DA8FD07FF7DFD76FFA8A8FD07FF7DA8FD35%FFFD09A8FD06FFA8A8FD2FFF7DA9FD07FF7DFD37FFA8FD07FFA8FD05FFA8%FD30FFA8A8FD07FF7EA8FD35FFA8FD07FFA8A8A8FFFD05A8FD2FFF7DFD08%FF7DFD37FFA8FD09FFAFFD34FFA8A8A87D52FF277DFF7D7DFD27FFFD05A8%FFA8A8A8FD05FFA8A8FD06FFA8FFA8A8FD04FFA8FD2FFF7DA8FF527D7D52%7DFF7DA8FD36FFA8FD07FFA8FD35FFA87DA8FF847DA87DA8FF7DA8FD27FF%A8FD07FFA8FD05FFAFA8FD06FFA8A8FD06FFA8A8A8FFFD04A8FD28FF7DA8%FD07FF7DFD37FFA8FD06FFA8AFFD0DFFA8FD28FFA8A8FD07FF7DA8FD27FF%A8FD07FFA8FD05FFA8AFFD05FFA87DFD07FFA8FD06FFA8A8FD27FF7DA9FD%07FF7DFD37FFA8FD05FFA8FD0FFFA8FD28FFA8A8FD07FF7EA8FD27FFA8FD%07FFA8FD0BFFA8FFA8FD07FFA8FD06FFA8A8FD27FF7DFD08FF7DFD30FFA8%A8FFA8FFA8A8A8FFFFFFA8FD11FFA8FD28FF84A8FD07FF7DA8FD27FFA8FD%07FFA8FFA8FFA8FFA8A8FFFFA8FFFFFFA8FD07FFA8FD06FFAFA8FD27FF7D%A8FFA8A8FFFFA8FF7DFD37FFA8FD15FFA8FD28FFA8A8A87D52FF2753FF7D%7DFD27FFA8FD07FFA8FD06FFA8A8FD05FFA8FD07FFA8FD07FFAFFD26FFAF%7DAFFF527D7D5252FF7DA8FD36FFA8FD15FFA8FD27FFA87DA8FFA87DFD04%FF7DA8FD27FFA8FD07FFA8FD05FFA8A8FD06FFA8FD07FFA8FD06FFA8A8FD%27FF7DA8FD07FF7DFD37FFA8FD15FFA8FD28FFA8A8FD07FF7EA8FD27FFA8%FD07FFA8FFFFFFA8A8FD08FFA8FD07FFA8FD06FFA8A8FD27FF7DFD08FF7D%FD33FFA8FFFFFFA8FD15FFA8FFA8FFAFFFA8FD22FF84A8FD07FF7DA8FD27%FFA8FD07FFA8FFA8FFFFFFA8A8FD06FFA8FD07FFA8FD06FFA8A8FFA8FFA8%FFA8A8FD20FF7DA8FD07FF7DFD2FFFA8A8FD06FFA8FD15FFA8FD07FFA8FD%20FFA8A8FD07FF7DA8FD27FFA8FD06FFA8A8FD05FFAFA8FD06FFA8FD07FF%A8FD07FFAFFD05FFA8FD21FF7DA8FF7D7EFF7D7DFF7DFD2FFFA8FD07FFA8%FD15FFA8FD07FFA8FD20FFA8A8A85352A8527DFF7D7DFD27FFA8FD05FFA8%FFA8FD05FFA8AFFD06FFA8FD07FFA8FD06FFA8A8FD05FFFD09A8FD18FFA8%52FFFF527DA8527DFF7DA8FD1AFFA8FFA8FFA8FD0DFFA8FD09FFA8FD15FF%A8FD07FFA8FD20FFA8A8FFFFA8FFA8FFFF7EA8FD18FFA8A8FFFFFFA8FFA8%A8A8FFA8A8A8FFA8FFA9FFA8FFFFFFA8FD05FFA8FD07FFA8FD07FFA8FD06%FFA8A8FD05FFAFA8FD06FFA8FD19FF7DFD08FF7DFD19FFA8FD07FFA8FD08%FFA8A8FD0BFFA8FD15FFA8FD07FFA8FD20FF84A8FD07FF7DA8FD19FFA8FD%05FFA8FD07FFA8A8FD06FFA8FD05FFA8A8FD06FFA8FD07FFA8FD06FFAFA8%FD05FFA8AFFD06FFA8FD19FF7DA8FD07FF7DFD19FFA8FD07FFA8FD06FFA8%FD0EFFA8FD15FFA8FD07FFA8FD20FFA8A8FD07FF7DA8FD11FFA8A8A8FFFD%04A8FD06FFFD05A8FFA8FFA8FD07FFA8FD05FFAFA8FD06FFA8FD07FFA8FD%07FFAFFD05FFA8FD07FFA8FD19FF7DA8FD07FF7DFD19FFA8FD06FFA8A8FD%15FFA8FD15FFA8FD07FFA8FD20FFA8A8FD04FFA8FFFF7DA8FD11FFA8FD06%FFA8A8FFA8A8A8FFA8A9FD06FFA8FD07FFA8FD05FFA8FD07FFA8FD07FFA8%FD06FFA8A8FD05FFA8A8FD06FFA8FFA8FFFFFFA8FFA8A8A8AFA8A8A8FD0B%FF7DA9FD04FF527DFF7DA8FD14FFA8FFA8FFA8A8A8FD05FFA8FD07FFA8FD%0DFFA8FD0DFFA8FD07FFA8FD07FFA8FD06FFA8A8FFA8FFA8FFA8FD07FFA8%FD0AFFA8A8FFFFFFA8287DFF7D7DFD11FFA8FFFD07A8FFA8A8A8FFA8A8A8%FFA8A8A8FFA8A8A8FFA8A8A8A9A8A8A8FFFD07A8FFA8A8A8A9A8A8A8FFA8%A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8A8A8FFA8A8A8FD0AFFA852FD05FF7DA8FF7DFD76FFA8A8FD07FF7DA8%FD75FF7DA8FD07FF7DFD76FFA8A8FD07FF7DA8FD75FF7DA8FD07FF7DFD76%FFA8A8FD07FF7DA8FD75FF7DA9FD07FF7DFD76FFA8A8FD07FF7EA8FD75FF%7DFD08FF7DFD76FF84A8FD07FF7DA8FD75FF7DA8FD07FF7DFD37FFA8FD3E%FFA8A8FD07FF7DA8FD15FFFD05A8FD05FFA8FFA8FD0BFFA8A8A8FD05FFA8%A8A8FFA8FFFFFFA8A8A8FFFFFF7DAFA8FD05FFA8FFA8FFFFFFA8FFFFFFAF%FFFFFFA8FD1BFF7DA8FD07FF7DFD17FFA8FFA8FD05FF7EA8A8AFFD06FFA8%FFFFFFA8A8A8FFA8FFFFFFA8FFA8FFFD06A87DFF7DA87D7D7DA8A8FFA9FF%84FD04A8FFFFA9A8FFA8A9FD04FFA8FFA8FD18FFA8A8FD07FF7DA8FD1FFF%A8FFA8A8A8FFA8FFFFFFA8FFFFA87DA8A8FFA8FFFD07A8FF7D7E7D7DA8A8%7DA87D7DA8FFA8A87D7DA8FFA8A8A8FFA8FFA8A8A8FD05FFA8FD19FF7DA9%FD07FF7DFD1DFFA8FD05FFA8FFFFFFA8FD05FFA8FFA8FFFFFFA8FFFFA97D%FD07FF7DFD05FFA8FFFFFFFD04A87DFD06FFA8A8FFA8FD1EFFA8A8FD07FF%7EA8FD1BFFA8FFFFFFA8FFA8FFFFFFA8A8FFFF7DA8A8A87EAFFD06FFA87D%7DA87DA8FFFFFFA8A8FD05FFA8FFFFFF7DFFA8A8A8FFA8FFA8FFFFFFA8A8%A8FD0BFFA8A8FD10FF7DFD08FF7DFD13FFA8FD0BFFA9FFFFFFA8FFFFFF7D%FFA87D7DFFA87EA8FD07FF7DA87D7D7DFFFFFFA8A8A8FFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFA8A8FFFFFFA8FD0CFFA8A8FD10FF84A8FD07FF7DA8FD%12FFA8A8FD07FFA8FFA8A8A8FD05FFA8A8A8FFA8FFFFFF7DA87DA8FFFFA8%A9A8A8FFA87EFFA8FFA8A87D7D7DA8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8%A884FFA8A8A8FD1DFF7DA8FD07FF7DFD1DFFA8FFA8FD09FFA8FD04FFFD04%A8FFFFA87DA8A8FFA8FFA8A8A8FF84A87DA8FFFFA8A8A8FFA8A884A8A8A8%84A8FD0AFFA8FD1AFFA8A8FD07FF7DA8FD27FFA8A8FFFFA8A87D7EA8FFFF%FFA8FFA8A87DA87D7D7DFF7D7D7DFFA8FFFFA87DA8FFA87DA8A8FFFFFFA8%FD05FFA8FFA8FF7DA8FD1AFF7DA8FD07FF7DFD21FFA8FFFFFFA8FFFFA87D%FFFD04A87DFD04A8FFFFFF84FD04A8FFA9A8A8FD05FFA8AFA8FF84FD04A8%FD07FFA8FFA8FFA8A8A8FD1AFFA8A8FD07FF7DA8FD14FFA8A8FD0AFFA8A8%FFA8A8A8FFA8A8A884A8FFFFA8A8FF7DA87DA87DA8A8A87DA87D7D7DFFFF%FFA8FFFFFF7EFF7D7DA8FFA8A8A8FD05FFA8A8FD04FFA8A8A8FD19FF7DA9%FD07FF7DFD1DFFA8FFFFFFA8FD06FFA8A8FFA8A9FFFFA8A9A8FFA8A87DFD%06A87E7DA8A8FFFFFFA8FF7D7DA8A87DFFFFFFA8A8A8FD0BFFA8FD1AFFA8%A8FD07FF7EA8FD19FFFD04A8FFFFA8FD07FFA8A8FFFFA8FFA8A8527DA8FF%FD05A8FFA8FFA8FFFFFFA8FFA8FFFFA87DFFA8A8A8FFFFA8A8A8FD26FF7D%FD08FF7DFD1BFFA8FD13FFA8FFA8FD44FF84A8FD07FF7DA8FD75FF7DA8FD%07FF7DFD76FFA8A8FD07FF7DA8FD75FF7DA8FD07FF7DFD76FFA8A8FD07FF%7DA8FD75FF7DA9FD07FF7DFD76FFA8A8FD07FF7EA8FD75FF7DFD08FF7DFD%76FF84A8FD07FF7DA8FD2BFFA8FD2BFFA8FD1DFF7DA8FD07FF7DFD0EFFA8%FD0EFFA8FD0EFFAFFD0EFFA8FD0DFFA8FD0EFFAFFD0EFFA8FD0EFF7DA8FD%07FF7D52FD0D7D52FD1D7D52FD1D7D59FD0D7D52FD1D7D52FD0AFFA8FFFF%FFA8FFFFFFA8FD0BFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FD07FFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFF%FFA8FD07FFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FD0AFFA8%FD0CFFA8A8FFA8FD0DFFA8FD0BFFA8FFFFFFA8FD1DFFA8FD0BFFA8A8FD0C%FFA8FFFFA8A8FD0BFFA8FD08FF7D7DFD0CFF52A8A852A8FD0BFF527DFD0B%FF8452FF527DFD0CFF52A8FD0BFF7D52FF527DFD0BFFA82EFD0CFF537DA8%2EFD0CFF7D52FD06FF7D7D52FD0AFFA859527DA82784FD0AFFA85352FD0B%FF5252A87D27FD0CFF597EFD0BFF7D53A85252FD0BFF7D52A8FD0BFF52A8%7D527DFD0BFF7D52FD07FFA8A8FD0AFFA8FF7DA87D84A8FD0BFF7DA8FD0B%FFA87DA87D7DFD0CFFA8FD0DFF84A87DA8FD0BFFA87DFD0CFF7D7EA87DFD%0CFFA87DFD7FFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T12:55:41+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T12:55:41+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T12:55:41+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>188</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxvzzPaXv5f8Amf0J&#xA;kmj/AEbqEEjRsHCvHDJHIhpX4kYFWHY7Yqr/AOAvI3/Uu6Z/0hW//NGKu/wF5G/6l3TP+kK3/wCa&#xA;MVd/gLyN/wBS7pn/AEhW/wDzRiqhcflz5ImmtZBoOnRi2lMrItnb0kBiePi3wdP3nL5gYqr/AOAv&#xA;I3/Uu6Z/0hW//NGKu/wF5G/6l3TP+kK3/wCaMVd/gLyN/wBS7pn/AEhW/wDzRiqhD+XHkiO7uJzo&#xA;WnOJ+FIjZ2/FOAp8Pwftd8VV/wDAXkb/AKl3TP8ApCt/+aMVd/gLyN/1Lumf9IVv/wA0Yq7/AAF5&#xA;G/6l3TP+kK3/AOaMVULD8ufJFrY29q2g6dO0ESRGZ7O3LuUULyb4OppU4qr/AOAvI3/Uu6Z/0hW/&#xA;/NGKu/wF5G/6l3TP+kK3/wCaMVUL38ufJFzCsa6Dp0JWWKXmlnbgkRSrIV+x0fjxPscVV/8AAXkb&#xA;/qXdM/6Qrf8A5oxV3+AvI3/Uu6Z/0hW//NGKu/wF5G/6l3TP+kK3/wCaMVUP+VceSPr/ANa/QWnc&#xA;fS9L0Pqdvwry5c6cOvbFVf8AwF5G/wCpd0z/AKQrf/mjFXf4C8jf9S7pn/SFb/8ANGKu/wABeRv+&#xA;pd0z/pCt/wDmjFVCy/LnyRbQtG2g6dMWlll5vZ25IEsrSBfsdE5cR7DFVf8AwF5G/wCpd0z/AKQr&#xA;f/mjFXf4C8jf9S7pn/SFb/8ANGKqF/8Alz5IurG4tV0HToGnieITJZ24dC6leS/B1FajFVf/AAF5&#xA;G/6l3TP+kK3/AOaMVd/gLyN/1Lumf9IVv/zRirv8BeRv+pd0z/pCt/8AmjFUr1Lyt5b0zzB5WudM&#xA;0qzsLj9JSq0ttbxQuUOmXtVLIqmlaGntirMcVYRqHli28t/lh5n0y2ZTbNb6zdwxxxiFIkuzPcLC&#xA;iKSAsQk4ClOnQdMVZhZ2UNnD6UTSspJas0ss7VP+XKztT2riqvirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVQ81/bxq5UtMyNwZIVaVg9K8WCA8f9lTFXGW7aYIkHCMCrzSFSN12C&#xA;qpJJDda09sVaFpceiUN7NzJB9XjDyG3QD0+NPoxVcbaYmP8A0uUcKchSL496/F8H6qYqqRRcOZLs&#xA;5dixLGtK7AACgAAH+ZxVfirsVdirGtfsYU8yeWrwNKZZNSkVlM0rRAfoy8+zCWMSn4eoWv3nFWS4&#xA;qkXn3/lBvMX/AGzL3/qHfFU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVBzXLz&#xA;mS3sZU9eMqJ3rX01YkEj4WUuOJ+E/T7qqps42maWR5HLVHAuwQKRSnBSFP0gnFVWKGKGNYoUWONd&#xA;lRAFUfIDFV2KuxV2KuxV2KuxV2KpF5i/47Hlf/tpyf8AdMvcVY9d675xtvzI+rPHeNoBdIhDFZNL&#xA;a/V5Lccbn6zHEz+v9eYRNH6nFYqyMAAWxVJfLeq+edS/KLzZP5wjnTUVtLpYRcwfV34HTI3kAX0L&#xA;T4VuGlUfuz0oHkADsq9Rs3vnhrewxQzVNEhlaZePY8mjhNfbjiqvirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdiqEuZjO72VvN6c4AaZ1UsUQnsfsh2H2a/OhpTFUWFAFAABUnbxO5xV2KuxV2&#xA;KuxV2KuxV2KuxV2Ksa1978+ZPLSPDEtkNSkMcwlYylv0ZebNEYwqjrv6h+XgqyXFUi8+/wDKDeYv&#xA;+2Ze/wDUO+Kp7irsVdirsVdirsVdirsVdirsVdirsVdiqncXEVvEZZSQgKjZSxqxCgAKCTUnFVD9&#xA;KW38k/8A0jz/APNGKtpqdq00cNJVeZisfOGZASFL05MgUfCp6nFUViqEuXW5layilaN1CvcNH1VC&#xA;fscgQVZwDuNwPA0OKomOKOMHgoXkase5NAKk9SaDqcVXYq7FXYq7FXYq7FXYq7FXYq7FUi8xf8dj&#xA;yv8A9tOT/umXuKqTeetIXzWfLbRTiYN6JviIxai5Ft9c+rcufqep9W/e/wB3x4/tV2xVJJ/O+jec&#xA;fyv8zarpPMWcdjew8pDEeX+h+qGHpPKBVJVqrEOpqrKrAjFWbWd/Y30PrWVxFdQglTJC6yLyHUVU&#xA;kV3xVXxV2KuxV2KuxV2KuxV2KuxVBrqMj8jFZzyIrvHzBhAJjYoacpFPVfDFW/rtz/1b5/8AgoP+&#xA;quKoiCaOaGOaM1jlUOh6bMKjFUPqn+8yf8Z7f/k+mKovFUDqcaSSWKOWVTOalWZDtBKftKQR9+Ko&#xA;dtMS6eSINeW8CMtJhczq0lGPNVBfkq/CBy7g/D2bFVaG2jtdSijhaQpJDKziSWSWrI0Sqf3jNvQ4&#xA;qmGKuxV2KuxV2KuxV2KuxV2KuxV2Ksa1/ULB/MnlqxS5ia9i1KR5LUOplVTpl4asgPID4h274qib&#xA;ryV5butc/TktvINU+A+vHcXES1jpxYxxyLHyKr6bNxq0dUaqEriqU615X0Py5+XPmWy0e3NtbSad&#xA;duyNJLMarZ+ig5TNIwVIokRFBoqgAADFWZYq7FXYq7FXYq7FXYq7FXYq7FUJpf8AvM//ABnuP+T7&#xA;4qi8VQmkf8cmy/4wRf8AEBirtU/3mT/jPb/8n0xVF4qk+rFL27srEK/pGc/WJeJCUWJyY6kfFzFV&#xA;PHpvWhxVOMVQF5bxz6paq5cAQTkem7xn7cPdCpxVU/Rdt/PP/wBJE/8AzXiq20j9HULiFXkaMRQu&#xA;FkkeSjM0oJBcsd+IxVG4q7FXYq7FXYq7FXYq7FXYqkXmL/jseV/+2nJ/3TL3FU9xVIvPv/KDeYv+&#xA;2Ze/9Q74qnuKuxV2KuxV2KuxV2KuxV2KuxVCaX/vM/8AxnuP+T74qi8VSnSZNV/RVlS3gI9CKlZ3&#xA;/kH/ABTiq7UJNSMMQkghVPrFtyZZnYgeunQGJa/fiqMuZpBNBBHWsxfm4FeCKh+IEgrXmVG/jiqH&#xA;kt0t306JCSBcOSzGrMzQyszH3JNcVTDFUJL/AMda2/4wT/8AE4cVReKoSL/jrXP/ABgg/wCJzYqi&#xA;8VdirsVdirsVdirsVdirsVSLzF/x2PK//bTk/wC6Ze4qx288keYx+Yx802RsniLIRPNJIlyITbi1&#xA;ez4rC6mBWrdqPUHKUcfhB5hVL7Lyb5g8r/l95+i1nVY9Xm1Nb/UEvEjeJ2MlgkbmRXeUL8cRoini&#xA;o6bHiqr0izt5reHhLdS3bVJ9WYRBqeH7pIlp9GKq+KuxV2KuxV2KuxV2KuxV2KoTS/8AeZ/+M9x/&#xA;yffFUXiqE0j/AI5Nl/xgi/4gMVUdemMdnEq1MktzbRx8R0YzIak0YCgBO4xVGW1rDbRlIgfiPJ3d&#xA;md2NAKszEkmgA3xVRvf96dP/AOM7f8mJcVReKoSX/jrW3/GCf/icOKovFUJF/wAda5/4wQf8TmxV&#xA;F4q7FXYq7FXYq7FXYq7FXYqxrX7aZfMnlq4N3K8T6lIFtCIvSQ/oy8+JSEEtdu7kb/LFWS4qkXn3&#xA;/lBvMX/bMvf+od8VT3FXYq7FXYq7FXYq7FXYq7FXYqhNL/3mf/jPcf8AJ98VRZIAqdgOpxVKdGup&#xA;7nSdPey9M25hiDTuWOyqOXBAByBpQNyp33HVVVu7WOCB3UlpJ7u3kldqVJ9aJB9kDoqgYqmOKoS9&#xA;/wB6dP8A+M7f8mJcVReKoSX/AI61t/xgn/4nDiqLxVLne8XV7j6vFHIPq8HIySMlPjm6UR8VVvV1&#xA;b/lmg/5Hv/1RxVfZ3M0xnWaNY5IJPTIRy4NUV61Kp/P4YqiMVdirsVdirsVdirsVSLzF/wAdjyv/&#xA;ANtOT/umXuKseuvzDvLT8yf8OXLWcGnF0gWKWqXR9W3Esd56jScPQe5dbRV9OplIo37OKpbpXnK/&#xA;82flT5t1G6nsLpYra+ggn0wn0nVbEM1UeSWRCsjuq+pwZlCuY05UxV6TZ3E1xDzltZbRqkelMYi1&#xA;PH908q0+nFVfFXYq7FXYq7FVGe+srdgs9xHCxFQsjqpI8dziql+l9J/5bYP+Rqf1xVXguLedOcEq&#xA;SpWnJGDCvhUYqqYqhNL/AN5n/wCM9x/yffFWpJ0u39C1ljdEYC7IKvRQTWOm4qxHE16CvemKt6R/&#xA;xybL/jBF/wAQGKu1T/eZP+M9v/yfTFUXiqEvf96dP/4zt/yYlxVF4qhJf+Otbf8AGCf/AInDiqLx&#xA;VCRf8da5/wCMEH/E5sVReKpZBczR3moKlpLMPXX40MQH9xF/O6n8MVRH125/6t8//BQf9VcVVra4&#xA;W4hEiqV3ZSrUqGRirA0JGxHY4qq4q7FXYq7FXYqxrX7mZvMnlq3NpKkSalIVuyYvSc/oy8+FQHMt&#xA;d+6AbfLFWS4qkXn3/lBvMX/bMvf+od8VT3FXYq7FXYq7FXYqhIv+Otc/8YIP+JzYqi8VSyCyhmvN&#xA;Qd2lB9dRRJpUH9xF+yjKMVVJbTT4mCPNMJGVmWMXM5dgoq3FA/JqewxVD6QJ57ZDG8kFrHcXBo4P&#xA;qy0nbjUvVlXry5Dkfl1VTaONI0WONQkaAKiKKAAbAADFULpH/HJsv+MEX/EBirtU/wB5k/4z2/8A&#xA;yfTFUXiqEvf96dP/AOM7f8mJcVReKoSX/jrW3/GCf/icOKovFUJF/wAda5/4wQf8TmxVF4qhLL/e&#xA;nUP+M6/8mIsVReKoTS/95n/4z3H/ACffFUXirsVdirsVdiqReYv+Ox5X/wC2nJ/3TL3FU9xVh2t+&#xA;Z9D8x/lz5lvdHuDc20en3kbOY5Ijyaz9ZTxlVGKvFKjo1KMrBgSDirMcVdirsVdiqBu4ILjUraOe&#xA;NZY/Rnbg6hl5BogDQ99ziqk8HlpDIHjslMNPVBEQ4VNBy8KnbfFVG0n0221Gdre3eKOWCEgRW0or&#xA;xeUVZVSo67V64VTAyX7STIkKRxqCIppHqWbjUHgo+zU03YH2wKgrPTYZpbxL0/XSk4/vgvAkwQ7m&#xA;NQENKbEio8cVTNIYUd3RFV5KGRgACxGwqR1xVD6X/vM//Ge4/wCT74qi8VQmkf8AHJsv+MEX/EBi&#xA;rtU/3mT/AIz2/wDyfTFUXiqEvf8AenT/APjO3/JiXFUXiqEl/wCOtbf8YJ/+Jw4qi8VQkX/HWuf+&#xA;MEH/ABObFUXiqEsv96dQ/wCM6/8AJiLFUXiqV6fqFvHDKjJMStxcglYJmH9+/QqhBxVE/pS2/kn/&#xA;AOkef/mjFVO2vNTuLeKdLaAJMiyKDO9aMKitIsVbku9QhCNNbwiNpI42KTMzD1HCVAMS1py8cVR2&#xA;KuxVIvMX/HY8r/8AbTk/7pl7iqesqspVgCpFCDuCDirA7vyXpflT8tPM9hYSz3EcunXDNJcmNn4w&#xA;aetpDHWNIxxjgt0QVFTSrEsScVZrZ2FjYw+jZW8VrCSWMcKLGvI9TRQBXbFVfFXYq7FVK4s7S44/&#xA;WII5uNePqKrUr1pUHwxVQXRdHRQq2FuqjoBEgH6sVd+htIrX6jb1OxPpJ2+jFW/0RpP/ACxQf8ik&#xA;/pirQ0bSASRY24J3P7pN+3hirf6I0n/lig/5FJ/TFWho2kAUFjbgddok77+GKt/ojSf+WKD/AJFJ&#xA;/TFWho2kAACxtwBsAIk/pirjo2kEUNjbkdd4k7b+GKt/ojSf+WKD/kUn9MVaOjaQSCbG3JG4/dJt&#xA;28MVb/RGk/8ALFB/yKT+mKtfobSK1+o29RsD6Sd/oxVv9EaT/wAsUH/IpP6Yq1+htIrX6jb1OxPp&#xA;J2+jFW/0RpP/ACxQf8ik/pirQ0bSASRY24J3P7pN+3hirf6I0n/lig/5FJ/TFWho2kAUFjbgddok&#xA;77+GKt/ojSf+WKD/AJFJ/TFWho2kAACxtwBsAIk/piq5dJ0tWVls4AyEMrCNAQymoINOoOKorFXY&#xA;qxrX9PsE8yeWr5LaJb2XUpEkugiiVlGmXgozgciPhHftirJcVSLz7/yg3mL/ALZl7/1Dviqe4q7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkXmL/jse&#xA;V/8Atpyf90y9xVPcVSLz7/yg3mL/ALZl7/1Dviqe4q7FXYq7FXYqsmnhhjMk0ixRjq7kKN/c4q2s&#xA;0TSPGrq0kdPUQEFl5Co5DtXFV2KuqK07+GKuxV2KrZJoouPqOqc2CJyIFWPRRXqTiq7FVk00cMZk&#xA;kbii9Sfc0AHiSegxVsSRsqsGBV/sEHY1FdvHbFVstxBCUErhC54pXucVXRyxSrzidZFqRyUgio2I&#xA;qMVbSRHBKMGAJUkGtCpoRt3BxVvFWi6BghYB2qVWu5A60H04q3irsVaaRFZVZgGc0QE0JIFaDx2G&#xA;Kt4q7FXYq7FXYq7FUi8xf8djyv8A9tOT/umXuKp7iqReff8AlBvMX/bMvf8AqHfFU9xV2KuxV2Ku&#xA;xVSubWG4RVkB+BuaMpKsrAEVUjcbEjFVO202ztpfUhj4UUqij7KhiGYKO3Iip98VQV1dx6jYXkMc&#xA;r2hUBVnKcjVjQAp3JIoY/tb0NCcVQMVvJbwWNyl39avD+6QyNzYgcl4gOYmcry4sCRvu24NShOLn&#xA;UVtfq6zxn1JvtLHVgCKA8SQpbdthSp7DtgS1drcrdRzi4SK1Rayq5oAAfiJ7NyBA3I40rvWmKsa8&#xA;yC8udSjZLhBDCeKhqLHRwrlSwBqrJ/fBuq04GvIEoTq1e9tvQYLLcpd8WbkKFAafaFTxc8uTdF2o&#xA;owJQmr3zadbSi/JuXkZPREfL4SzcOYIKMteQHBTt3b4icKutbUXn1fUFu0igWKIwRA1RQwUwDgSC&#xA;lSAxo1W5cTXipxVjuv23nldKje9ZbqZbkxqIFqxSRQKERcOaO68VVlpRqv8AZxQmUmg6/Pci70+9&#xA;9PT51SWNP2/iRQgAPGh+ELIxJJTYfFiqF0PRdW06+mspJpGjWhgSo4s6x8lRDUsrKBRJHP2aAio2&#xA;VVvMfmLWo2WzRTC9wFAPEqKO1EDfErx+oyspfl8K7gV3CrVoHv7q3C6jIlxZREzmXlGjiCRg/FxW&#xA;ojMqjkaGg3ryairLLmxluEt6XLK0W7OoHxGg+IUpRttuo3OxwJQVvcStOdQuWe2iQ8DCQWJJFPTA&#xA;HWh3PFT8X7RGwVR01nb3hhuQ5NArRlT8LAEOladgwDbEV77Yqu0+G8ihK3UolkLEgipoKDuQOrVa&#xA;natBsBiqJxVZFNDKpaJ1kUEgspDCo6jbFV+KuxV2KpF5i/47Hlf/ALacn/dMvcVT3FUi8+/8oN5i&#xA;/wC2Ze/9Q74qnuKuxV2KuxVTuBMYXEDBZSPgLdK/j+o/I9MVW2YuRbILk8pt+RoAaVPGtNuXGlab&#xA;V6YqrYqlct5dzxXUa2dODBW5guCpqCeI48j8INAehHXFUQun20iWzywCKSEKRGrV4kENxJH2qOK/&#xA;PFVLXdPur6zWG2kWN1cMedeLKAQQaA+NehxVINY8vwapqFsk9zMg09Ast0rVHJE5Gbc0R0P2WLEq&#xA;2/Ej4sKFDXI7FNUtZbG7VDFGqGJalkUmnF2J5KT1jB35gnc4qybQ73ULy09a8hWItQoUrQg16VJq&#xA;KUIbvXoKYEsd1nWINYiktZbJ0gt5CzvIoY0WoqVb4VoASwYMV2PBuxQlmqWehRalb3KalILK2YtH&#xA;HG5fnVv3nF3PGssrMsjueFG6g4qnWqeYLO58sGYuLWOXkiRyM1ZURTUKeDvsRv8AuzWhFDiqB8va&#xA;jr9zcrZJKv1bdo5VUoADV1cKDIFRa8BHzZWoPjG6lVMvMOtSLdLZwQmK4Z1j9dqAsrNxCCjRseTl&#xA;W2cbfE2w4sqs8x6pFA9pZhmbVYFB9YIHYFkJ+HiEdmbhyAUcWpxNKjFV15qUtxbyTWmllbmURm4m&#xA;QK0gaP41YOg4yrGwC/aqDX4diMVTCKyubixtZrdjaSxRj04HJdQy9KPseL9CxFSnZSTgSrTwX1zp&#xA;wgeRfXDBpQWEbcASUq6BwjigNVFKjbxxVfPqdnp9pbeowcSKBEIQoDKq1LItacQPA4qmANRXxxVz&#xA;KGBVgCpFCD0IxVL9M0Oz06WaSBnJmYkhmrTpQeLUAAXlWg6dTVVMMVdirsVSLzF/x2PK/wD205P+&#xA;6Ze4qnuKpF59/wCUG8xf9sy9/wCod8VT3FXYq7FXYq7FUKx1D9IIFC/VKfGSR4H/AGXLlSnale9M&#xA;VVbm7trZA88gjVjQE/f28BufAYqoQ6nFJPcRcHX6vUsaE7L1qBuK9V/mG4xVRsbq6u7t5o2pZr8P&#xA;psAKfCCOlSSahq8qU2py6KoiJdQF7K0jhrXifTQAddqU2rXryqadKdwFWJ2Ucsej6nLZI8UpZHlE&#xA;vHksC8m5Jy+1Ircl5uQxADfy4ULNT0DQZNDS4vA6XitwDRfGySlmlkQFqcqsztyY9TVaVAxVdFdQ&#xA;3tio0HVzLDZgSXDDkrtHRizqr+mH/eHnz59aip6YqgrzWtb1RJoJoFtoRJGjoaDkzfAFD8Gcyhmj&#xA;bkg48CAeNa4q660q6v0tfTsVlmVGacuhVZZdzKjqTuvqJxmB78eFGxVSsJtVu2WPUtIibTrdyjuz&#xA;UDLy5B5nBIqjtWNhyoQ/RqYqzhry0sNNt3gtzHbsFEcKr6fBSvKhHRT2A7tQe+BLGtc1S2k82RaY&#xA;llPcXMkRIYkotTEfg+yzCJkajHZQ3gwqChT0mCfX9XvZrl2hlgUxwSlQHKrKCuxLUCsrKypwNNn5&#xA;VriqPtidHvktZby4mSIFmAX4SFTm9Fqfh4sGZmqag0+I4qymT1PTf0gDJQ8A1QvKm1adsCUrstJZ&#xA;0nkveXqz1BXkNlYhjXjtXkO5O2224xVD3nl0rdRXts7ySQjeNuJLHkz8vi4rXnIXpsOVD0ULhVO4&#xA;DMYYzMFExUeqEqVDU+Kle1cCr8VdirsVdirsVSLzF/x2PK//AG05P+6Ze4qnuKpF59/5QbzF/wBs&#xA;y9/6h3xVPcVdirsVdirsVdiqnPbQXChZkDqDUA/cR8iNiO4xVUxVpERF4ooVdzQCgqTU4q3iq1I4&#xA;05cFC8jyagpUnuffFVN7K1e3+rGJRAKcUUcQKGoK8aUIPSmKqNho+maeZTZWyW5mNZOApWnQDwA7&#xA;AbYqiPqtt6Xo+inoitI+I471rt03riq9EREVEUKigBVAoABsAAMVbxV2Ku4ivKg5UpXvTFVOK3t4&#xA;nkeKJI3lPKVlUAsfFiOpxVc8Ub05oGoQRUA7qag/QemKrsVdirsVdirsVdirsVdirsVSLzF/x2PK&#xA;/wD205P+6Ze4qnuKpF59/wCUG8xf9sy9/wCod8VT3FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi8xf8djyv8A9tOT/umXuKp7iqQfmC4j8heZXPRd&#xA;KvWP0W7nFV3+PfI3/UxaZ/0m2/8AzXirv8e+Rv8AqYtM/wCk23/5rxV3+PfI3/UxaZ/0m2//ADXi&#xA;qhcfmN5IhmtYxrunSC4lMTOt5b0jAieTk3x9Kx8fmRiqv/j3yN/1MWmf9Jtv/wA14q7/AB75G/6m&#xA;LTP+k23/AOa8Vd/j3yN/1MWmf9Jtv/zXiqhD+Y3kiS6uIDrunIsHDjKby34vzFfh+P8AZ74qr/49&#xA;8jf9TFpn/Sbb/wDNeKu/x75G/wCpi0z/AKTbf/mvFXf498jf9TFpn/Sbb/8ANeKqFh+Y3ki6sbe5&#xA;bXdOgaeJJWhkvLcOhdQ3Fhz6rWhxVX/x75G/6mLTP+k23/5rxV3+PfI3/UxaZ/0m2/8AzXiqhefm&#xA;N5It4VkXXdOmLSxRcEvLckCWVYy32+iBuR9hiqv/AI98jf8AUxaZ/wBJtv8A814q7/Hvkb/qYtM/&#xA;6Tbf/mvFXf498jf9TFpn/Sbb/wDNeKqH/KxvJH1/6r+ndO4+l6vr/XLfhXlx4V59e+Kq/wDj3yN/&#xA;1MWmf9Jtv/zXirv8e+Rv+pi0z/pNt/8AmvFXf498jf8AUxaZ/wBJtv8A814qoWf5jeSLiFpG13To&#xA;SsssXB7y3BIilaMN9vo4XkPY4qr/AOPfI3/UxaZ/0m2//NeKu/x75G/6mLTP+k23/wCa8VUL/wDM&#xA;byRa2NxcrrunTtBE8qwx3luXcopbio59WpQYqr/498jf9TFpn/Sbb/8ANeKu/wAe+Rv+pi0z/pNt&#xA;/wDmvFXf498jf9TFpn/Sbb/814qlepeaPLep+YPK1tpmq2d/cfpKV2itriKZ1QaZe1YqjMeNSBX3&#xA;xVmOKoLVtYsNLgSS6lRZZ39GytmliikubhgSlvD6zxI0snGiryGKofynrw8w+WNK10QfVhqdrDdi&#xA;3LcygmQPx5UWtK9aYqmuKqdzc29rby3NzKkFvAjSTTSMEREQcmZmagVVAqScVYVH+aNrNreqWVra&#xA;LdafY2dzeWuowT+oLn6pbWV04VFjKiN49Ti9OQO3KjbD4eSqc+SPNEvmTRPr89stldJK0NzZK1wW&#xA;hdVVuEgubeykV+LgkenTuCRvirIMVdirE/8AHjf45/w19Q/0b1fqn1/1T6n1r6n9fp9X9P8AufR2&#xA;9X1Pt/Dx74qyzFXYqxf8wvOzeUdJhv0svr7yvPWIymECO1sri+mbmEl+L0rRgi0+JiNwKkKrZ/PD&#xA;Refbbyv9TC209vHKNSlNwnKeRLiQW8ai2eAusdtzIknQ0PwhuJxVlWKuxVKfN2vt5e8r6rrq2j33&#xA;6MtZbprWNkjZ1iUu3xOQAABVupp0DGgKqZwSerDHLSnNQ1OtKiuKr8VdirDJfzCu00TzNqA0SYXX&#xA;l7UP0dFp5k5yXLNHbyRuPq6XBXn9bFFVXanavwhVkHlnWl1vQrTVAI1Nwrc0iaVkV0Yo6Vnitpaq&#xA;ykEPEpB2IxVM8VdirG/LHmy91nWdbsJtNFrBpMohivEnFwkrepKhRiqKiSqsSyNGrvxV1DlXqoVZ&#xA;JirsVY35p82Xui6potjbaaNQ/Ss4hkKzhJY19SJGaOEJI8vBJWlcngioh5OCVDKqPl3zvJq/mjVt&#xA;ElshZjT2kFrI7XHqXKQyCKSVFe2igKBzxrHO5B+0BirKsVdirFPzA873XlOxivYdNGowhZZrwCYx&#xA;vFBDxLyKiRTu9OdSSFjUbu6ClVWV4q7FULpX6K/Rlr+ifQ/RfpJ9S+qcPq/o0+D0vT+Dhx6cdsVR&#xA;WKuxVjepf8q4/Sl5+k/0P+leNt+kPrP1X6xw9VPqvrc/jp6vD0uX7VOO9MVRvlb/AAl+h4/8KfUP&#xA;0Nyf0v0V6P1bnX4+Pofu6164qm+KuxVKP+dQ/wAU/wDSv/xX9V/4p/SP1Tl/yO9Ll/sa4qm+KuxV&#xA;KvMv+FfqEf8Aib6j9Q9aP0v0l6Po/WK/uuPr/D6lfs038MVS+z/5Vv8A4kj+p/ob/Ev+kel6P1X6&#xA;9/fSfWuPH99/fer6v+Vy5b1xVkuKuxVDan+jv0ddfpP0f0b6Mn176zx9D0OJ9X1efwcOFeXLanXF&#xA;UQnDgvCnCg48elO1KYq3irsVY7qf/Ku+d9+lP0Rz4z/pP619Wrw4W/1j1+fbh9W9Tl29Ov7OKpro&#xA;v6F/RNr+g/q36I9MfUvqXp/VvS/Z9L0vg4+HHbFUbirsVSHy7/gP9J6t/hz9F/pT1f8Ac7+jvq/1&#xA;j1ub/wC9fo/Hz58/7zevL3xVPsVdiqQ+Yv8AAf6T0n/Ef6L/AEp6v+4L9I/V/rHrc0/3k9b4+fPh&#xA;/d714+2KqPlb/lW/1u4/wp+h/rnow/Wv0V9V9X0OA9D1PQ+LhwpwrtTpirJMVdiqQ+bf8B+jaf4v&#xA;/Rfo+r/oP6W+r8fWp/ur6xtzp/Lvir//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:A2ACF33645D1DF11B96BBDB365EB4FA0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:A3ACF33645D1DF11B96BBDB365EB4FA0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -190.203 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 190.203 li
261.243 190.203 li
261.243 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
258.325 106.7 mo
255.175 106.7 li
15.875 106.7 mo
19.0249 106.7 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437917 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B854D00D> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/MIJMQC+Helvetica /Helvetica findfont ct_VMDictPut/MIJMQC+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]MIJMQC+Helvetica nfMIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf5.82813 109.034 mo( )sh7.78125 109.034 mo(0)sh258.325 87.3496 mo
255.175 87.3496 li
15.875 87.3496 mo
19.0249 87.3496 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQC+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369E6> |-/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQC+Helvetica /Encoding getdup 46 /period putdup 50 /two putpop%ADOEndSubsetFont
/MIJMQC+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two 205{/.notdef}rp]MIJMQC+Helvetica nfMIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf0 89.6826 mo( 0.2)[1.9458 3.89209 1.94629 0 ]xsh258.325 68 mo
255.175 68 li
15.875 68 mo
19.0249 68 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQC+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQC+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/MIJMQC+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 203{/.notdef}rp]MIJMQC+Helvetica nfMIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf0 70.3389 mo( 0.4)[1.9458 3.89209 1.94629 0 ]xsh258.325 48.6499 mo
255.175 48.6499 li
15.875 48.6499 mo
19.0249 48.6499 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQC+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQC+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/MIJMQC+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]MIJMQC+Helvetica nfMIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf0 50.9873 mo( 0.6)[1.9458 3.89209 1.94629 0 ]xsh258.325 29.2998 mo
255.175 29.2998 li
15.875 29.2998 mo
19.0249 29.2998 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQC+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQC+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/MIJMQC+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]MIJMQC+Helvetica nfMIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf0 31.6357 mo( 0.8)[1.9458 3.89209 1.94629 0 ]xsh258.325 9.94971 mo
255.175 9.94971 li
15.875 9.94971 mo
19.0249 9.94971 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQC+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQC+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/MIJMQC+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]MIJMQC+Helvetica nfMIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf5.82813 12.2842 mo( )sh7.78125 12.2842 mo(1)sh15.875 0.25 mo
15.875 3.3999 li
15.875 179.3 mo
15.875 176.149 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQC+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A75CA669> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQC+Helvetica /Encoding getdup 45 /hyphen putpop%ADOEndSubsetFont
/MIJMQC+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]MIJMQC+Helvetica nfMIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf12.7578 188.628 mo(-1)[2.33105 0 ]xsh46.1748 0.25 mo
46.1748 3.3999 li
46.1748 179.3 mo
46.1748 176.149 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQC+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQC+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/MIJMQC+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]MIJMQC+Helvetica nfMIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf40.1484 188.628 mo(-0.5)[2.33105 3.89209 1.9458 0 ]xsh76.4751 0.25 mo
76.4751 3.3999 li
76.4751 179.3 mo
76.4751 176.149 li
@
MIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf73.5469 188.628 mo( )sh75.5 188.628 mo(0)sh106.775 0.25 mo
106.775 3.3999 li
106.775 179.3 mo
106.775 176.149 li
@
MIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf100.938 188.628 mo( 0.5)[1.9458 3.89209 1.94629 0 ]xsh137.125 0.25 mo
137.125 3.3999 li
137.125 179.3 mo
137.125 176.149 li
@
MIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf134.203 188.628 mo( )sh136.148 188.628 mo(1)sh167.425 0.25 mo
167.425 3.3999 li
167.425 179.3 mo
167.425 176.149 li
@
MIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf161.586 188.628 mo( 1.5)[1.94629 3.8916 1.94629 0 ]xsh197.725 0.25 mo
197.725 3.3999 li
197.725 179.3 mo
197.725 176.149 li
@
MIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf194.805 188.628 mo( )sh196.742 188.628 mo(2)sh228.025 0.25 mo
228.025 3.3999 li
228.025 179.3 mo
228.025 176.149 li
@
MIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf222.18 188.628 mo( 2.5)[1.94629 3.8916 1.94629 0 ]xsh258.325 0.25 mo
258.325 3.3999 li
258.325 179.3 mo
258.325 176.149 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQC+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319EB739C72B00D2CC4607F53D8DAA36825DF613C6C839053BC26A7859D8AA158786D28D1E4DE04046CE941E5159199A77FA8129F02A3ECB8D9E54C278D22D0348DFB3C3C73F55886BF824DB1B2BE764C084A332EAF6E03DAE2729DE4723D54D14DE5E36772632D9593B8015D82D91A7513CF83AED18BF899FB582C1516AE5C3CE963C7A9224066B2CB5D769E52069DB2172C52452A135E45CF579C1E7FB12BEA387FFB8E1E9EB90D4F6BF80D4DDA346E7141D8646431020D523BDB64> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQC+Helvetica /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/MIJMQC+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 199{/.notdef}rp]MIJMQC+Helvetica nfMIJMQC+Helvetica*1 [7 0 0 -7 0 0 ]msf255.406 188.628 mo( )sh257.344 188.628 mo(3)sh15.875 0.25 mo
15.875 179.3 li
258.325 179.3 li
258.325 0.25 li
15.875 0.25 li
15.875 0.25 li
cp
@
0.25 lw
59.0698 142.5 mo
59.0698 141.63 58.3643 140.925 57.4951 140.925 cv
56.6255 140.925 55.9199 141.63 55.9199 142.5 cv
55.9199 143.369 56.6255 144.075 57.4951 144.075 cv
58.3643 144.075 59.0698 143.369 59.0698 142.5 cv
@
1 lc
57.5752 142.45 mo
57.5752 142.45 li
@
0 lc
63.1499 151.14 mo
63.1499 150.271 62.4443 149.564 61.5752 149.564 cv
60.7056 149.564 60 150.271 60 151.14 cv
60 152.009 60.7056 152.715 61.5752 152.715 cv
62.4443 152.715 63.1499 152.009 63.1499 151.14 cv
@
1 lc
61.6748 151.1 mo
61.6748 151.1 li
@
0 lc
65.79 131.22 mo
65.79 130.351 65.0845 129.645 64.2148 129.645 cv
63.3457 129.645 62.6401 130.351 62.6401 131.22 cv
62.6401 132.089 63.3457 132.795 64.2148 132.795 cv
65.0845 132.795 65.79 132.089 65.79 131.22 cv
@
1 lc
64.125 131.2 mo
64.125 131.2 li
@
0 lc
69.9902 131.34 mo
69.9902 130.471 69.2842 129.765 68.415 129.765 cv
67.5454 129.765 66.8398 130.471 66.8398 131.34 cv
66.8398 132.209 67.5454 132.915 68.415 132.915 cv
69.2842 132.915 69.9902 132.209 69.9902 131.34 cv
@
1 lc
68.4248 131.35 mo
68.4248 131.35 li
@
0 lc
73.4702 155.1 mo
73.4702 154.23 72.7642 153.524 71.895 153.524 cv
71.0254 153.524 70.3198 154.23 70.3198 155.1 cv
70.3198 155.969 71.0254 156.675 71.895 156.675 cv
72.7642 156.675 73.4702 155.969 73.4702 155.1 cv
@
1 lc
71.875 155.1 mo
71.875 155.1 li
@
0 lc
77.3101 137.22 mo
77.3101 136.351 76.6045 135.645 75.7349 135.645 cv
74.8657 135.645 74.1602 136.351 74.1602 137.22 cv
74.1602 138.089 74.8657 138.795 75.7349 138.795 cv
76.6045 138.795 77.3101 138.089 77.3101 137.22 cv
@
1 lc
75.8252 137.149 mo
75.8252 137.149 li
@
0 lc
77.5498 144.42 mo
77.5498 143.551 76.8442 142.845 75.9751 142.845 cv
75.1055 142.845 74.3999 143.551 74.3999 144.42 cv
74.3999 145.289 75.1055 145.995 75.9751 145.995 cv
76.8442 145.995 77.5498 145.289 77.5498 144.42 cv
@
1 lc
75.9751 144.399 mo
75.9751 144.399 li
@
0 lc
78.0298 153.3 mo
78.0298 152.431 77.3242 151.725 76.4551 151.725 cv
75.5854 151.725 74.8799 152.431 74.8799 153.3 cv
74.8799 154.169 75.5854 154.875 76.4551 154.875 cv
77.3242 154.875 78.0298 154.169 78.0298 153.3 cv
@
1 lc
76.4751 153.399 mo
76.4751 153.399 li
@
0 lc
82.3501 143.7 mo
82.3501 142.83 81.6445 142.125 80.7749 142.125 cv
79.9058 142.125 79.2002 142.83 79.2002 143.7 cv
79.2002 144.569 79.9058 145.274 80.7749 145.274 cv
81.6445 145.274 82.3501 144.569 82.3501 143.7 cv
@
1 lc
80.6748 143.75 mo
80.6748 143.75 li
@
0 lc
82.8301 132.899 mo
82.8301 132.03 82.1245 131.325 81.2549 131.325 cv
80.3857 131.325 79.6802 132.03 79.6802 132.899 cv
79.6802 133.77 80.3857 134.475 81.2549 134.475 cv
82.1245 134.475 82.8301 133.77 82.8301 132.899 cv
@
1 lc
81.2749 132.85 mo
81.2749 132.85 li
@
0 lc
83.3101 138.42 mo
83.3101 137.551 82.6045 136.845 81.7349 136.845 cv
80.8657 136.845 80.1602 137.551 80.1602 138.42 cv
80.1602 139.289 80.8657 139.995 81.7349 139.995 cv
82.6045 139.995 83.3101 139.289 83.3101 138.42 cv
@
1 lc
81.7251 138.45 mo
81.7251 138.45 li
@
0 lc
83.79 133.62 mo
83.79 132.75 83.0845 132.045 82.2148 132.045 cv
81.3457 132.045 80.6401 132.75 80.6401 133.62 cv
80.6401 134.489 81.3457 135.194 82.2148 135.194 cv
83.0845 135.194 83.79 134.489 83.79 133.62 cv
@
1 lc
82.1748 133.649 mo
82.1748 133.649 li
@
0 lc
84.5098 154.02 mo
84.5098 153.15 83.8042 152.444 82.9351 152.444 cv
82.0654 152.444 81.3599 153.15 81.3599 154.02 cv
81.3599 154.89 82.0654 155.595 82.9351 155.595 cv
83.8042 155.595 84.5098 154.89 84.5098 154.02 cv
@
1 lc
83.0249 154.05 mo
83.0249 154.05 li
@
0 lc
87.1499 150.66 mo
87.1499 149.79 86.4443 149.085 85.5752 149.085 cv
84.7056 149.085 84 149.79 84 150.66 cv
84 151.529 84.7056 152.234 85.5752 152.234 cv
86.4443 152.234 87.1499 151.529 87.1499 150.66 cv
@
1 lc
85.4751 150.75 mo
85.4751 150.75 li
@
0 lc
87.75 132.18 mo
87.75 131.311 87.0444 130.604 86.1748 130.604 cv
85.3057 130.604 84.6001 131.311 84.6001 132.18 cv
84.6001 133.049 85.3057 133.755 86.1748 133.755 cv
87.0444 133.755 87.75 133.049 87.75 132.18 cv
@
1 lc
86.1748 132.2 mo
86.1748 132.2 li
@
0 lc
88.71 139.38 mo
88.71 138.511 88.0044 137.805 87.1348 137.805 cv
86.2656 137.805 85.5601 138.511 85.5601 139.38 cv
85.5601 140.249 86.2656 140.955 87.1348 140.955 cv
88.0044 140.955 88.71 140.249 88.71 139.38 cv
@
1 lc
87.125 139.399 mo
87.125 139.399 li
@
0 lc
90.1499 135.3 mo
90.1499 134.431 89.4443 133.725 88.5752 133.725 cv
87.7056 133.725 87 134.431 87 135.3 cv
87 136.169 87.7056 136.875 88.5752 136.875 cv
89.4443 136.875 90.1499 136.169 90.1499 135.3 cv
@
1 lc
88.5752 135.3 mo
88.5752 135.3 li
@
0 lc
94.8301 150.66 mo
94.8301 149.79 94.1245 149.085 93.2549 149.085 cv
92.3857 149.085 91.6802 149.79 91.6802 150.66 cv
91.6802 151.529 92.3857 152.234 93.2549 152.234 cv
94.1245 152.234 94.8301 151.529 94.8301 150.66 cv
@
1 lc
93.2749 150.6 mo
93.2749 150.6 li
@
0 lc
97.23 137.22 mo
97.23 136.351 96.5244 135.645 95.6548 135.645 cv
94.7856 135.645 94.0801 136.351 94.0801 137.22 cv
94.0801 138.089 94.7856 138.795 95.6548 138.795 cv
96.5244 138.795 97.23 138.089 97.23 137.22 cv
@
1 lc
95.7251 137.149 mo
95.7251 137.149 li
@
0 lc
98.4302 142.26 mo
98.4302 141.391 97.7246 140.685 96.855 140.685 cv
95.9854 140.685 95.2798 141.391 95.2798 142.26 cv
95.2798 143.129 95.9854 143.835 96.855 143.835 cv
97.7246 143.835 98.4302 143.129 98.4302 142.26 cv
@
1 lc
96.8252 142.25 mo
96.8252 142.25 li
@
0 lc
98.5498 140.819 mo
98.5498 139.95 97.8442 139.245 96.9751 139.245 cv
96.1055 139.245 95.3999 139.95 95.3999 140.819 cv
95.3999 141.689 96.1055 142.395 96.9751 142.395 cv
97.8442 142.395 98.5498 141.689 98.5498 140.819 cv
@
1 lc
96.9751 140.75 mo
96.9751 140.75 li
@
0 lc
101.07 152.1 mo
101.07 151.23 100.364 150.524 99.4951 150.524 cv
98.6255 150.524 97.9199 151.23 97.9199 152.1 cv
97.9199 152.969 98.6255 153.675 99.4951 153.675 cv
100.364 153.675 101.07 152.969 101.07 152.1 cv
@
1 lc
99.4751 152.1 mo
99.4751 152.1 li
@
0 lc
101.79 154.02 mo
101.79 153.15 101.084 152.444 100.215 152.444 cv
99.3457 152.444 98.6401 153.15 98.6401 154.02 cv
98.6401 154.89 99.3457 155.595 100.215 155.595 cv
101.084 155.595 101.79 154.89 101.79 154.02 cv
@
1 lc
100.125 154.1 mo
100.125 154.1 li
@
0 lc
101.79 148.74 mo
101.79 147.87 101.084 147.165 100.215 147.165 cv
99.3457 147.165 98.6401 147.87 98.6401 148.74 cv
98.6401 149.609 99.3457 150.314 100.215 150.314 cv
101.084 150.314 101.79 149.609 101.79 148.74 cv
@
1 lc
100.125 148.649 mo
100.125 148.649 li
@
0 lc
101.79 148.02 mo
101.79 147.15 101.084 146.444 100.215 146.444 cv
99.3457 146.444 98.6401 147.15 98.6401 148.02 cv
98.6401 148.89 99.3457 149.595 100.215 149.595 cv
101.084 149.595 101.79 148.89 101.79 148.02 cv
@
1 lc
100.275 147.95 mo
100.275 147.95 li
@
0 lc
103.59 144.42 mo
103.59 143.551 102.884 142.845 102.015 142.845 cv
101.146 142.845 100.44 143.551 100.44 144.42 cv
100.44 145.289 101.146 145.995 102.015 145.995 cv
102.884 145.995 103.59 145.289 103.59 144.42 cv
@
1 lc
102.025 144.399 mo
102.025 144.399 li
@
0 lc
103.95 140.34 mo
103.95 139.471 103.244 138.765 102.375 138.765 cv
101.506 138.765 100.8 139.471 100.8 140.34 cv
100.8 141.209 101.506 141.915 102.375 141.915 cv
103.244 141.915 103.95 141.209 103.95 140.34 cv
@
1 lc
102.325 140.35 mo
102.325 140.35 li
@
0 lc
104.43 133.859 mo
104.43 132.99 103.725 132.285 102.855 132.285 cv
101.985 132.285 101.28 132.99 101.28 133.859 cv
101.28 134.729 101.985 135.435 102.855 135.435 cv
103.725 135.435 104.43 134.729 104.43 133.859 cv
@
1 lc
102.825 133.8 mo
102.825 133.8 li
@
0 lc
105.63 141.06 mo
105.63 140.19 104.924 139.484 104.055 139.484 cv
103.186 139.484 102.48 140.19 102.48 141.06 cv
102.48 141.929 103.186 142.635 104.055 142.635 cv
104.924 142.635 105.63 141.929 105.63 141.06 cv
@
1 lc
103.975 141.05 mo
103.975 141.05 li
@
0 lc
105.63 140.58 mo
105.63 139.71 104.924 139.005 104.055 139.005 cv
103.186 139.005 102.48 139.71 102.48 140.58 cv
102.48 141.449 103.186 142.155 104.055 142.155 cv
104.924 142.155 105.63 141.449 105.63 140.58 cv
@
1 lc
104.075 140.649 mo
104.075 140.649 li
@
0 lc
106.59 151.26 mo
106.59 150.391 105.884 149.685 105.015 149.685 cv
104.146 149.685 103.44 150.391 103.44 151.26 cv
103.44 152.129 104.146 152.835 105.015 152.835 cv
105.884 152.835 106.59 152.129 106.59 151.26 cv
@
1 lc
105.075 151.25 mo
105.075 151.25 li
@
0 lc
107.31 150.66 mo
107.31 149.79 106.604 149.085 105.735 149.085 cv
104.866 149.085 104.16 149.79 104.16 150.66 cv
104.16 151.529 104.866 152.234 105.735 152.234 cv
106.604 152.234 107.31 151.529 107.31 150.66 cv
@
1 lc
105.725 150.6 mo
105.725 150.6 li
@
0 lc
107.31 139.62 mo
107.31 138.75 106.604 138.045 105.735 138.045 cv
104.866 138.045 104.16 138.75 104.16 139.62 cv
104.16 140.489 104.866 141.194 105.735 141.194 cv
106.604 141.194 107.31 140.489 107.31 139.62 cv
@
1 lc
105.775 139.55 mo
105.775 139.55 li
@
0 lc
108.03 147.3 mo
108.03 146.431 107.324 145.725 106.455 145.725 cv
105.585 145.725 104.88 146.431 104.88 147.3 cv
104.88 148.169 105.585 148.875 106.455 148.875 cv
107.324 148.875 108.03 148.169 108.03 147.3 cv
@
1 lc
106.525 147.2 mo
106.525 147.2 li
@
0 lc
108.51 154.26 mo
108.51 153.391 107.804 152.685 106.935 152.685 cv
106.065 152.685 105.36 153.391 105.36 154.26 cv
105.36 155.129 106.065 155.835 106.935 155.835 cv
107.804 155.835 108.51 155.129 108.51 154.26 cv
@
1 lc
107.025 154.35 mo
107.025 154.35 li
@
0 lc
110.43 148.02 mo
110.43 147.15 109.725 146.444 108.855 146.444 cv
107.985 146.444 107.28 147.15 107.28 148.02 cv
107.28 148.89 107.985 149.595 108.855 149.595 cv
109.725 149.595 110.43 148.89 110.43 148.02 cv
@
1 lc
108.875 148.1 mo
108.875 148.1 li
@
0 lc
111.15 134.58 mo
111.15 133.71 110.444 133.005 109.575 133.005 cv
108.706 133.005 108 133.71 108 134.58 cv
108 135.449 108.706 136.155 109.575 136.155 cv
110.444 136.155 111.15 135.449 111.15 134.58 cv
@
1 lc
109.575 134.5 mo
109.575 134.5 li
@
0 lc
111.63 137.939 mo
111.63 137.07 110.924 136.365 110.055 136.365 cv
109.186 136.365 108.48 137.07 108.48 137.939 cv
108.48 138.81 109.186 139.515 110.055 139.515 cv
110.924 139.515 111.63 138.81 111.63 137.939 cv
@
1 lc
110.075 138 mo
110.075 138 li
@
0 lc
111.87 140.819 mo
111.87 139.95 111.165 139.245 110.295 139.245 cv
109.426 139.245 108.72 139.95 108.72 140.819 cv
108.72 141.689 109.426 142.395 110.295 142.395 cv
111.165 142.395 111.87 141.689 111.87 140.819 cv
@
1 lc
110.325 140.8 mo
110.325 140.8 li
@
0 lc
112.59 147.06 mo
112.59 146.19 111.884 145.484 111.015 145.484 cv
110.146 145.484 109.44 146.19 109.44 147.06 cv
109.44 147.929 110.146 148.635 111.015 148.635 cv
111.884 148.635 112.59 147.929 112.59 147.06 cv
@
1 lc
111.025 147.149 mo
111.025 147.149 li
@
0 lc
112.71 146.34 mo
112.71 145.471 112.004 144.765 111.135 144.765 cv
110.266 144.765 109.56 145.471 109.56 146.34 cv
109.56 147.209 110.266 147.915 111.135 147.915 cv
112.004 147.915 112.71 147.209 112.71 146.34 cv
@
1 lc
111.125 146.3 mo
111.125 146.3 li
@
0 lc
112.83 142.74 mo
112.83 141.87 112.125 141.165 111.255 141.165 cv
110.386 141.165 109.68 141.87 109.68 142.74 cv
109.68 143.609 110.386 144.314 111.255 144.314 cv
112.125 144.314 112.83 143.609 112.83 142.74 cv
@
1 lc
111.325 142.8 mo
111.325 142.8 li
@
0 lc
113.07 133.14 mo
113.07 132.271 112.364 131.564 111.495 131.564 cv
110.625 131.564 109.92 132.271 109.92 133.14 cv
109.92 134.009 110.625 134.715 111.495 134.715 cv
112.364 134.715 113.07 134.009 113.07 133.14 cv
@
1 lc
111.475 133.05 mo
111.475 133.05 li
@
0 lc
113.79 131.22 mo
113.79 130.351 113.084 129.645 112.215 129.645 cv
111.346 129.645 110.64 130.351 110.64 131.22 cv
110.64 132.089 111.346 132.795 112.215 132.795 cv
113.084 132.795 113.79 132.089 113.79 131.22 cv
@
1 lc
112.125 131.149 mo
112.125 131.149 li
@
0 lc
114.03 140.819 mo
114.03 139.95 113.324 139.245 112.455 139.245 cv
111.585 139.245 110.88 139.95 110.88 140.819 cv
110.88 141.689 111.585 142.395 112.455 142.395 cv
113.324 142.395 114.03 141.689 114.03 140.819 cv
@
1 lc
112.425 140.899 mo
112.425 140.899 li
@
0 lc
114.03 134.34 mo
114.03 133.471 113.324 132.765 112.455 132.765 cv
111.585 132.765 110.88 133.471 110.88 134.34 cv
110.88 135.209 111.585 135.915 112.455 135.915 cv
113.324 135.915 114.03 135.209 114.03 134.34 cv
@
1 lc
112.475 134.35 mo
112.475 134.35 li
@
0 lc
114.51 148.5 mo
114.51 147.63 113.804 146.925 112.935 146.925 cv
112.065 146.925 111.36 147.63 111.36 148.5 cv
111.36 149.369 112.065 150.075 112.935 150.075 cv
113.804 150.075 114.51 149.369 114.51 148.5 cv
@
1 lc
112.875 148.5 mo
112.875 148.5 li
@
0 lc
114.75 153.78 mo
114.75 152.91 114.044 152.205 113.175 152.205 cv
112.306 152.205 111.6 152.91 111.6 153.78 cv
111.6 154.649 112.306 155.354 113.175 155.354 cv
114.044 155.354 114.75 154.649 114.75 153.78 cv
@
1 lc
113.225 153.7 mo
113.225 153.7 li
@
0 lc
115.23 154.979 mo
115.23 154.11 114.524 153.405 113.655 153.405 cv
112.786 153.405 112.08 154.11 112.08 154.979 cv
112.08 155.85 112.786 156.555 113.655 156.555 cv
114.524 156.555 115.23 155.85 115.23 154.979 cv
@
1 lc
113.625 154.95 mo
113.625 154.95 li
@
0 lc
115.23 136.859 mo
115.23 135.99 114.524 135.285 113.655 135.285 cv
112.786 135.285 112.08 135.99 112.08 136.859 cv
112.08 137.729 112.786 138.435 113.655 138.435 cv
114.524 138.435 115.23 137.729 115.23 136.859 cv
@
1 lc
113.725 136.85 mo
113.725 136.85 li
@
0 lc
115.47 149.46 mo
115.47 148.591 114.765 147.885 113.895 147.885 cv
113.025 147.885 112.32 148.591 112.32 149.46 cv
112.32 150.329 113.025 151.035 113.895 151.035 cv
114.765 151.035 115.47 150.329 115.47 149.46 cv
@
1 lc
113.925 149.55 mo
113.925 149.55 li
@
0 lc
115.95 143.939 mo
115.95 143.07 115.244 142.365 114.375 142.365 cv
113.505 142.365 112.8 143.07 112.8 143.939 cv
112.8 144.81 113.505 145.515 114.375 145.515 cv
115.244 145.515 115.95 144.81 115.95 143.939 cv
@
1 lc
114.275 143.95 mo
114.275 143.95 li
@
0 lc
115.95 147.78 mo
115.95 146.91 115.244 146.205 114.375 146.205 cv
113.505 146.205 112.8 146.91 112.8 147.78 cv
112.8 148.649 113.505 149.354 114.375 149.354 cv
115.244 149.354 115.95 148.649 115.95 147.78 cv
@
1 lc
114.475 147.7 mo
114.475 147.7 li
@
0 lc
117.63 154.979 mo
117.63 154.11 116.924 153.405 116.055 153.405 cv
115.186 153.405 114.48 154.11 114.48 154.979 cv
114.48 155.85 115.186 156.555 116.055 156.555 cv
116.924 156.555 117.63 155.85 117.63 154.979 cv
@
1 lc
116.025 155.05 mo
116.025 155.05 li
@
0 lc
117.87 143.7 mo
117.87 142.83 117.165 142.125 116.295 142.125 cv
115.426 142.125 114.72 142.83 114.72 143.7 cv
114.72 144.569 115.426 145.274 116.295 145.274 cv
117.165 145.274 117.87 144.569 117.87 143.7 cv
@
1 lc
116.275 143.6 mo
116.275 143.6 li
@
0 lc
117.87 133.14 mo
117.87 132.271 117.165 131.564 116.295 131.564 cv
115.426 131.564 114.72 132.271 114.72 133.14 cv
114.72 134.009 115.426 134.715 116.295 134.715 cv
117.165 134.715 117.87 134.009 117.87 133.14 cv
@
1 lc
116.375 133.05 mo
116.375 133.05 li
@
0 lc
118.11 154.979 mo
118.11 154.11 117.404 153.405 116.535 153.405 cv
115.666 153.405 114.96 154.11 114.96 154.979 cv
114.96 155.85 115.666 156.555 116.535 156.555 cv
117.404 156.555 118.11 155.85 118.11 154.979 cv
@
1 lc
116.575 155.05 mo
116.575 155.05 li
@
0 lc
118.83 154.859 mo
118.83 153.99 118.125 153.285 117.255 153.285 cv
116.386 153.285 115.68 153.99 115.68 154.859 cv
115.68 155.729 116.386 156.435 117.255 156.435 cv
118.125 156.435 118.83 155.729 118.83 154.859 cv
@
1 lc
117.325 154.85 mo
117.325 154.85 li
@
0 lc
120.03 149.939 mo
120.03 149.07 119.324 148.365 118.455 148.365 cv
117.585 148.365 116.88 149.07 116.88 149.939 cv
116.88 150.81 117.585 151.515 118.455 151.515 cv
119.324 151.515 120.03 150.81 120.03 149.939 cv
@
1 lc
118.475 149.85 mo
118.475 149.85 li
@
0 lc
121.47 136.02 mo
121.47 135.15 120.765 134.444 119.895 134.444 cv
119.025 134.444 118.32 135.15 118.32 136.02 cv
118.32 136.89 119.025 137.595 119.895 137.595 cv
120.765 137.595 121.47 136.89 121.47 136.02 cv
@
1 lc
119.875 136 mo
119.875 136 li
@
0 lc
122.67 149.46 mo
122.67 148.591 121.964 147.885 121.095 147.885 cv
120.226 147.885 119.52 148.591 119.52 149.46 cv
119.52 150.329 120.226 151.035 121.095 151.035 cv
121.964 151.035 122.67 150.329 122.67 149.46 cv
@
1 lc
121.025 149.55 mo
121.025 149.55 li
@
0 lc
122.91 151.38 mo
122.91 150.511 122.205 149.805 121.335 149.805 cv
120.466 149.805 119.76 150.511 119.76 151.38 cv
119.76 152.249 120.466 152.955 121.335 152.955 cv
122.205 152.955 122.91 152.249 122.91 151.38 cv
@
1 lc
121.425 151.35 mo
121.425 151.35 li
@
0 lc
125.07 154.26 mo
125.07 153.391 124.364 152.685 123.495 152.685 cv
122.625 152.685 121.92 153.391 121.92 154.26 cv
121.92 155.129 122.625 155.835 123.495 155.835 cv
124.364 155.835 125.07 155.129 125.07 154.26 cv
@
1 lc
123.475 154.2 mo
123.475 154.2 li
@
0 lc
126.27 152.819 mo
126.27 151.95 125.564 151.245 124.695 151.245 cv
123.826 151.245 123.12 151.95 123.12 152.819 cv
123.12 153.689 123.826 154.395 124.695 154.395 cv
125.564 154.395 126.27 153.689 126.27 152.819 cv
@
1 lc
124.625 152.899 mo
124.625 152.899 li
@
0 lc
126.27 133.859 mo
126.27 132.99 125.564 132.285 124.695 132.285 cv
123.826 132.285 123.12 132.99 123.12 133.859 cv
123.12 134.729 123.826 135.435 124.695 135.435 cv
125.564 135.435 126.27 134.729 126.27 133.859 cv
@
1 lc
124.725 133.8 mo
124.725 133.8 li
@
0 lc
126.27 145.5 mo
126.27 144.63 125.564 143.925 124.695 143.925 cv
123.826 143.925 123.12 144.63 123.12 145.5 cv
123.12 146.369 123.826 147.075 124.695 147.075 cv
125.564 147.075 126.27 146.369 126.27 145.5 cv
@
1 lc
124.775 145.5 mo
124.775 145.5 li
@
0 lc
126.51 151.74 mo
126.51 150.87 125.804 150.165 124.935 150.165 cv
124.065 150.165 123.36 150.87 123.36 151.74 cv
123.36 152.609 124.065 153.314 124.935 153.314 cv
125.804 153.314 126.51 152.609 126.51 151.74 cv
@
1 lc
124.875 151.75 mo
124.875 151.75 li
@
0 lc
126.51 144.66 mo
126.51 143.79 125.804 143.085 124.935 143.085 cv
124.065 143.085 123.36 143.79 123.36 144.66 cv
123.36 145.529 124.065 146.234 124.935 146.234 cv
125.804 146.234 126.51 145.529 126.51 144.66 cv
@
1 lc
125.025 144.649 mo
125.025 144.649 li
@
0 lc
128.19 150.66 mo
128.19 149.79 127.484 149.085 126.615 149.085 cv
125.746 149.085 125.04 149.79 125.04 150.66 cv
125.04 151.529 125.746 152.234 126.615 152.234 cv
127.484 152.234 128.19 151.529 128.19 150.66 cv
@
1 lc
126.675 150.6 mo
126.675 150.6 li
@
0 lc
129.39 153.54 mo
129.39 152.67 128.685 151.965 127.815 151.965 cv
126.946 151.965 126.24 152.67 126.24 153.54 cv
126.24 154.409 126.946 155.115 127.815 155.115 cv
128.685 155.115 129.39 154.409 129.39 153.54 cv
@
1 lc
127.775 153.6 mo
127.775 153.6 li
@
0 lc
129.39 137.7 mo
129.39 136.83 128.685 136.125 127.815 136.125 cv
126.946 136.125 126.24 136.83 126.24 137.7 cv
126.24 138.569 126.946 139.274 127.815 139.274 cv
128.685 139.274 129.39 138.569 129.39 137.7 cv
@
1 lc
127.825 137.7 mo
127.825 137.7 li
@
0 lc
130.11 143.46 mo
130.11 142.591 129.404 141.885 128.535 141.885 cv
127.666 141.885 126.96 142.591 126.96 143.46 cv
126.96 144.329 127.666 145.035 128.535 145.035 cv
129.404 145.035 130.11 144.329 130.11 143.46 cv
@
1 lc
128.475 143.5 mo
128.475 143.5 li
@
0 lc
130.35 145.859 mo
130.35 144.99 129.645 144.285 128.775 144.285 cv
127.906 144.285 127.2 144.99 127.2 145.859 cv
127.2 146.729 127.906 147.435 128.775 147.435 cv
129.645 147.435 130.35 146.729 130.35 145.859 cv
@
1 lc
128.875 145.85 mo
128.875 145.85 li
@
0 lc
130.83 150.18 mo
130.83 149.311 130.124 148.604 129.255 148.604 cv
128.386 148.604 127.68 149.311 127.68 150.18 cv
127.68 151.049 128.386 151.755 129.255 151.755 cv
130.124 151.755 130.83 151.049 130.83 150.18 cv
@
1 lc
129.175 150.25 mo
129.175 150.25 li
@
0 lc
131.07 140.34 mo
131.07 139.471 130.364 138.765 129.495 138.765 cv
128.625 138.765 127.92 139.471 127.92 140.34 cv
127.92 141.209 128.625 141.915 129.495 141.915 cv
130.364 141.915 131.07 141.209 131.07 140.34 cv
@
1 lc
129.425 140.3 mo
129.425 140.3 li
@
0 lc
131.31 150.42 mo
131.31 149.551 130.604 148.845 129.735 148.845 cv
128.866 148.845 128.16 149.551 128.16 150.42 cv
128.16 151.289 128.866 151.995 129.735 151.995 cv
130.604 151.995 131.31 151.289 131.31 150.42 cv
@
1 lc
129.725 150.35 mo
129.725 150.35 li
@
0 lc
131.55 130.979 mo
131.55 130.11 130.845 129.405 129.975 129.405 cv
129.105 129.405 128.4 130.11 128.4 130.979 cv
128.4 131.85 129.105 132.555 129.975 132.555 cv
130.845 132.555 131.55 131.85 131.55 130.979 cv
@
1 lc
129.875 131 mo
129.875 131 li
@
0 lc
131.55 137.7 mo
131.55 136.83 130.845 136.125 129.975 136.125 cv
129.105 136.125 128.4 136.83 128.4 137.7 cv
128.4 138.569 129.105 139.274 129.975 139.274 cv
130.845 139.274 131.55 138.569 131.55 137.7 cv
@
1 lc
129.875 137.7 mo
129.875 137.7 li
@
0 lc
132.03 135.54 mo
132.03 134.67 131.324 133.965 130.455 133.965 cv
129.586 133.965 128.88 134.67 128.88 135.54 cv
128.88 136.409 129.586 137.115 130.455 137.115 cv
131.324 137.115 132.03 136.409 132.03 135.54 cv
@
1 lc
130.425 135.55 mo
130.425 135.55 li
@
0 lc
132.03 154.5 mo
132.03 153.63 131.324 152.925 130.455 152.925 cv
129.586 152.925 128.88 153.63 128.88 154.5 cv
128.88 155.369 129.586 156.075 130.455 156.075 cv
131.324 156.075 132.03 155.369 132.03 154.5 cv
@
1 lc
130.525 154.399 mo
130.525 154.399 li
@
0 lc
132.27 139.62 mo
132.27 138.75 131.564 138.045 130.695 138.045 cv
129.825 138.045 129.12 138.75 129.12 139.62 cv
129.12 140.489 129.825 141.194 130.695 141.194 cv
131.564 141.194 132.27 140.489 132.27 139.62 cv
@
1 lc
130.625 139.7 mo
130.625 139.7 li
@
0 lc
132.75 147.54 mo
132.75 146.67 132.044 145.965 131.175 145.965 cv
130.306 145.965 129.6 146.67 129.6 147.54 cv
129.6 148.409 130.306 149.115 131.175 149.115 cv
132.044 149.115 132.75 148.409 132.75 147.54 cv
@
1 lc
131.075 147.6 mo
131.075 147.6 li
@
0 lc
133.95 152.1 mo
133.95 151.23 133.244 150.524 132.375 150.524 cv
131.506 150.524 130.8 151.23 130.8 152.1 cv
130.8 152.969 131.506 153.675 132.375 153.675 cv
133.244 153.675 133.95 152.969 133.95 152.1 cv
@
1 lc
132.425 152.2 mo
132.425 152.2 li
@
0 lc
134.79 146.58 mo
134.79 145.71 134.084 145.005 133.215 145.005 cv
132.346 145.005 131.64 145.71 131.64 146.58 cv
131.64 147.449 132.346 148.155 133.215 148.155 cv
134.084 148.155 134.79 147.449 134.79 146.58 cv
@
1 lc
133.225 146.5 mo
133.225 146.5 li
@
0 lc
135.15 139.859 mo
135.15 138.99 134.444 138.285 133.575 138.285 cv
132.706 138.285 132 138.99 132 139.859 cv
132 140.729 132.706 141.435 133.575 141.435 cv
134.444 141.435 135.15 140.729 135.15 139.859 cv
@
1 lc
133.675 139.95 mo
133.675 139.95 li
@
0 lc
135.87 133.62 mo
135.87 132.75 135.164 132.045 134.295 132.045 cv
133.426 132.045 132.72 132.75 132.72 133.62 cv
132.72 134.489 133.426 135.194 134.295 135.194 cv
135.164 135.194 135.87 134.489 135.87 133.62 cv
@
1 lc
134.325 133.6 mo
134.325 133.6 li
@
0 lc
136.11 142.74 mo
136.11 141.87 135.404 141.165 134.535 141.165 cv
133.666 141.165 132.96 141.87 132.96 142.74 cv
132.96 143.609 133.666 144.314 134.535 144.314 cv
135.404 144.314 136.11 143.609 136.11 142.74 cv
@
1 lc
134.625 142.649 mo
134.625 142.649 li
@
0 lc
136.95 152.819 mo
136.95 151.95 136.244 151.245 135.375 151.245 cv
134.506 151.245 133.8 151.95 133.8 152.819 cv
133.8 153.689 134.506 154.395 135.375 154.395 cv
136.244 154.395 136.95 153.689 136.95 152.819 cv
@
1 lc
135.375 152.899 mo
135.375 152.899 li
@
0 lc
137.31 149.46 mo
137.31 148.591 136.604 147.885 135.735 147.885 cv
134.865 147.885 134.16 148.591 134.16 149.46 cv
134.16 150.329 134.865 151.035 135.735 151.035 cv
136.604 151.035 137.31 150.329 137.31 149.46 cv
@
1 lc
135.775 149.55 mo
135.775 149.55 li
@
0 lc
137.55 132.18 mo
137.55 131.311 136.845 130.604 135.975 130.604 cv
135.105 130.604 134.4 131.311 134.4 132.18 cv
134.4 133.049 135.105 133.755 135.975 133.755 cv
136.845 133.755 137.55 133.049 137.55 132.18 cv
@
1 lc
135.875 132.1 mo
135.875 132.1 li
@
0 lc
137.55 140.58 mo
137.55 139.71 136.845 139.005 135.975 139.005 cv
135.105 139.005 134.4 139.71 134.4 140.58 cv
134.4 141.449 135.105 142.155 135.975 142.155 cv
136.845 142.155 137.55 141.449 137.55 140.58 cv
@
1 lc
135.875 140.649 mo
135.875 140.649 li
@
0 lc
137.55 141.54 mo
137.55 140.67 136.845 139.965 135.975 139.965 cv
135.105 139.965 134.4 140.67 134.4 141.54 cv
134.4 142.409 135.105 143.115 135.975 143.115 cv
136.845 143.115 137.55 142.409 137.55 141.54 cv
@
1 lc
136.075 141.5 mo
136.075 141.5 li
@
0 lc
137.91 146.58 mo
137.91 145.71 137.204 145.005 136.335 145.005 cv
135.466 145.005 134.76 145.71 134.76 146.58 cv
134.76 147.449 135.466 148.155 136.335 148.155 cv
137.204 148.155 137.91 147.449 137.91 146.58 cv
@
1 lc
136.325 146.5 mo
136.325 146.5 li
@
0 lc
138.03 147.3 mo
138.03 146.431 137.324 145.725 136.455 145.725 cv
135.586 145.725 134.88 146.431 134.88 147.3 cv
134.88 148.169 135.586 148.875 136.455 148.875 cv
137.324 148.875 138.03 148.169 138.03 147.3 cv
@
1 lc
136.475 147.25 mo
136.475 147.25 li
@
0 lc
138.27 150.899 mo
138.27 150.03 137.564 149.325 136.695 149.325 cv
135.825 149.325 135.12 150.03 135.12 150.899 cv
135.12 151.77 135.825 152.475 136.695 152.475 cv
137.564 152.475 138.27 151.77 138.27 150.899 cv
@
1 lc
136.625 150.85 mo
136.625 150.85 li
@
0 lc
138.99 139.859 mo
138.99 138.99 138.284 138.285 137.415 138.285 cv
136.546 138.285 135.84 138.99 135.84 139.859 cv
135.84 140.729 136.546 141.435 137.415 141.435 cv
138.284 141.435 138.99 140.729 138.99 139.859 cv
@
1 lc
137.325 139.95 mo
137.325 139.95 li
@
0 lc
140.19 145.62 mo
140.19 144.75 139.484 144.045 138.615 144.045 cv
137.746 144.045 137.04 144.75 137.04 145.62 cv
137.04 146.489 137.746 147.194 138.615 147.194 cv
139.484 147.194 140.19 146.489 140.19 145.62 cv
@
1 lc
138.525 145.7 mo
138.525 145.7 li
@
0 lc
140.91 147.3 mo
140.91 146.431 140.204 145.725 139.335 145.725 cv
138.466 145.725 137.76 146.431 137.76 147.3 cv
137.76 148.169 138.466 148.875 139.335 148.875 cv
140.204 148.875 140.91 148.169 140.91 147.3 cv
@
1 lc
139.375 147.399 mo
139.375 147.399 li
@
0 lc
141.39 150.899 mo
141.39 150.03 140.685 149.325 139.815 149.325 cv
138.945 149.325 138.24 150.03 138.24 150.899 cv
138.24 151.77 138.945 152.475 139.815 152.475 cv
140.685 152.475 141.39 151.77 141.39 150.899 cv
@
1 lc
139.825 150.8 mo
139.825 150.8 li
@
0 lc
141.63 144.54 mo
141.63 143.67 140.925 142.965 140.055 142.965 cv
139.186 142.965 138.48 143.67 138.48 144.54 cv
138.48 145.409 139.186 146.115 140.055 146.115 cv
140.925 146.115 141.63 145.409 141.63 144.54 cv
@
1 lc
140.025 144.55 mo
140.025 144.55 li
@
0 lc
141.63 134.34 mo
141.63 133.471 140.925 132.765 140.055 132.765 cv
139.186 132.765 138.48 133.471 138.48 134.34 cv
138.48 135.209 139.186 135.915 140.055 135.915 cv
140.925 135.915 141.63 135.209 141.63 134.34 cv
@
1 lc
140.075 134.399 mo
140.075 134.399 li
@
0 lc
141.63 153.06 mo
141.63 152.19 140.925 151.484 140.055 151.484 cv
139.186 151.484 138.48 152.19 138.48 153.06 cv
138.48 153.929 139.186 154.635 140.055 154.635 cv
140.925 154.635 141.63 153.929 141.63 153.06 cv
@
1 lc
140.075 153.05 mo
140.075 153.05 li
@
0 lc
141.63 151.62 mo
141.63 150.75 140.925 150.045 140.055 150.045 cv
139.186 150.045 138.48 150.75 138.48 151.62 cv
138.48 152.489 139.186 153.194 140.055 153.194 cv
140.925 153.194 141.63 152.489 141.63 151.62 cv
@
1 lc
140.125 151.649 mo
140.125 151.649 li
@
0 lc
141.87 134.34 mo
141.87 133.471 141.164 132.765 140.295 132.765 cv
139.426 132.765 138.72 133.471 138.72 134.34 cv
138.72 135.209 139.426 135.915 140.295 135.915 cv
141.164 135.915 141.87 135.209 141.87 134.34 cv
@
1 lc
140.275 134.25 mo
140.275 134.25 li
@
0 lc
142.59 134.7 mo
142.59 133.83 141.885 133.125 141.015 133.125 cv
140.146 133.125 139.44 133.83 139.44 134.7 cv
139.44 135.569 140.146 136.274 141.015 136.274 cv
141.885 136.274 142.59 135.569 142.59 134.7 cv
@
1 lc
140.975 134.7 mo
140.975 134.7 li
@
0 lc
143.55 152.819 mo
143.55 151.95 142.845 151.245 141.975 151.245 cv
141.105 151.245 140.4 151.95 140.4 152.819 cv
140.4 153.689 141.105 154.395 141.975 154.395 cv
142.845 154.395 143.55 153.689 143.55 152.819 cv
@
1 lc
142.075 152.899 mo
142.075 152.899 li
@
0 lc
144.99 151.5 mo
144.99 150.63 144.284 149.925 143.415 149.925 cv
142.546 149.925 141.84 150.63 141.84 151.5 cv
141.84 152.369 142.546 153.075 143.415 153.075 cv
144.284 153.075 144.99 152.369 144.99 151.5 cv
@
1 lc
143.475 151.5 mo
143.475 151.5 li
@
0 lc
145.23 151.14 mo
145.23 150.271 144.524 149.564 143.655 149.564 cv
142.785 149.564 142.08 150.271 142.08 151.14 cv
142.08 152.009 142.785 152.715 143.655 152.715 cv
144.524 152.715 145.23 152.009 145.23 151.14 cv
@
1 lc
143.725 151.05 mo
143.725 151.05 li
@
0 lc
145.47 147.3 mo
145.47 146.431 144.765 145.725 143.895 145.725 cv
143.025 145.725 142.32 146.431 142.32 147.3 cv
142.32 148.169 143.025 148.875 143.895 148.875 cv
144.765 148.875 145.47 148.169 145.47 147.3 cv
@
1 lc
143.825 147.3 mo
143.825 147.3 li
@
0 lc
146.19 134.1 mo
146.19 133.23 145.484 132.524 144.615 132.524 cv
143.746 132.524 143.04 133.23 143.04 134.1 cv
143.04 134.969 143.746 135.675 144.615 135.675 cv
145.484 135.675 146.19 134.969 146.19 134.1 cv
@
1 lc
144.525 134 mo
144.525 134 li
@
0 lc
146.31 130.979 mo
146.31 130.11 145.604 129.405 144.735 129.405 cv
143.865 129.405 143.16 130.11 143.16 130.979 cv
143.16 131.85 143.865 132.555 144.735 132.555 cv
145.604 132.555 146.31 131.85 146.31 130.979 cv
@
1 lc
144.725 131.05 mo
144.725 131.05 li
@
0 lc
146.79 133.38 mo
146.79 132.511 146.084 131.805 145.215 131.805 cv
144.346 131.805 143.64 132.511 143.64 133.38 cv
143.64 134.249 144.346 134.955 145.215 134.955 cv
146.084 134.955 146.79 134.249 146.79 133.38 cv
@
1 lc
145.225 133.399 mo
145.225 133.399 li
@
0 lc
146.91 136.02 mo
146.91 135.15 146.204 134.444 145.335 134.444 cv
144.466 134.444 143.76 135.15 143.76 136.02 cv
143.76 136.89 144.466 137.595 145.335 137.595 cv
146.204 137.595 146.91 136.89 146.91 136.02 cv
@
1 lc
145.275 136 mo
145.275 136 li
@
0 lc
147.15 146.34 mo
147.15 145.471 146.444 144.765 145.575 144.765 cv
144.706 144.765 144 145.471 144 146.34 cv
144 147.209 144.706 147.915 145.575 147.915 cv
146.444 147.915 147.15 147.209 147.15 146.34 cv
@
1 lc
145.575 146.399 mo
145.575 146.399 li
@
0 lc
147.15 135.78 mo
147.15 134.91 146.444 134.205 145.575 134.205 cv
144.706 134.205 144 134.91 144 135.78 cv
144 136.649 144.706 137.354 145.575 137.354 cv
146.444 137.354 147.15 136.649 147.15 135.78 cv
@
1 lc
145.675 135.8 mo
145.675 135.8 li
@
0 lc
147.39 142.26 mo
147.39 141.391 146.685 140.685 145.815 140.685 cv
144.945 140.685 144.24 141.391 144.24 142.26 cv
144.24 143.129 144.945 143.835 145.815 143.835 cv
146.685 143.835 147.39 143.129 147.39 142.26 cv
@
1 lc
145.775 142.3 mo
145.775 142.3 li
@
0 lc
147.87 137.7 mo
147.87 136.83 147.164 136.125 146.295 136.125 cv
145.426 136.125 144.72 136.83 144.72 137.7 cv
144.72 138.569 145.426 139.274 146.295 139.274 cv
147.164 139.274 147.87 138.569 147.87 137.7 cv
@
1 lc
146.275 137.75 mo
146.275 137.75 li
@
0 lc
147.87 153.3 mo
147.87 152.431 147.164 151.725 146.295 151.725 cv
145.426 151.725 144.72 152.431 144.72 153.3 cv
144.72 154.169 145.426 154.875 146.295 154.875 cv
147.164 154.875 147.87 154.169 147.87 153.3 cv
@
1 lc
146.325 153.399 mo
146.325 153.399 li
@
0 lc
148.11 147.06 mo
148.11 146.19 147.404 145.484 146.535 145.484 cv
145.666 145.484 144.96 146.19 144.96 147.06 cv
144.96 147.929 145.666 148.635 146.535 148.635 cv
147.404 148.635 148.11 147.929 148.11 147.06 cv
@
1 lc
146.525 147.149 mo
146.525 147.149 li
@
0 lc
148.95 140.7 mo
148.95 139.83 148.244 139.125 147.375 139.125 cv
146.506 139.125 145.8 139.83 145.8 140.7 cv
145.8 141.569 146.506 142.274 147.375 142.274 cv
148.244 142.274 148.95 141.569 148.95 140.7 cv
@
1 lc
147.375 140.7 mo
147.375 140.7 li
@
0 lc
149.19 146.1 mo
149.19 145.23 148.484 144.524 147.615 144.524 cv
146.746 144.524 146.04 145.23 146.04 146.1 cv
146.04 146.969 146.746 147.675 147.615 147.675 cv
148.484 147.675 149.19 146.969 149.19 146.1 cv
@
1 lc
147.625 146.149 mo
147.625 146.149 li
@
0 lc
149.55 143.46 mo
149.55 142.591 148.845 141.885 147.975 141.885 cv
147.105 141.885 146.4 142.591 146.4 143.46 cv
146.4 144.329 147.105 145.035 147.975 145.035 cv
148.845 145.035 149.55 144.329 149.55 143.46 cv
@
1 lc
147.975 143.45 mo
147.975 143.45 li
@
0 lc
149.91 131.46 mo
149.91 130.591 149.204 129.885 148.335 129.885 cv
147.466 129.885 146.76 130.591 146.76 131.46 cv
146.76 132.329 147.466 133.035 148.335 133.035 cv
149.204 133.035 149.91 132.329 149.91 131.46 cv
@
1 lc
148.325 131.5 mo
148.325 131.5 li
@
0 lc
151.35 142.26 mo
151.35 141.391 150.645 140.685 149.775 140.685 cv
148.905 140.685 148.2 141.391 148.2 142.26 cv
148.2 143.129 148.905 143.835 149.775 143.835 cv
150.645 143.835 151.35 143.129 151.35 142.26 cv
@
1 lc
149.775 142.3 mo
149.775 142.3 li
@
0 lc
151.95 134.34 mo
151.95 133.471 151.244 132.765 150.375 132.765 cv
149.506 132.765 148.8 133.471 148.8 134.34 cv
148.8 135.209 149.506 135.915 150.375 135.915 cv
151.244 135.915 151.95 135.209 151.95 134.34 cv
@
1 lc
150.475 134.3 mo
150.475 134.3 li
@
0 lc
152.43 145.14 mo
152.43 144.271 151.725 143.564 150.855 143.564 cv
149.985 143.564 149.28 144.271 149.28 145.14 cv
149.28 146.009 149.985 146.715 150.855 146.715 cv
151.725 146.715 152.43 146.009 152.43 145.14 cv
@
1 lc
150.875 145.2 mo
150.875 145.2 li
@
0 lc
152.43 133.859 mo
152.43 132.99 151.725 132.285 150.855 132.285 cv
149.985 132.285 149.28 132.99 149.28 133.859 cv
149.28 134.729 149.985 135.435 150.855 135.435 cv
151.725 135.435 152.43 134.729 152.43 133.859 cv
@
1 lc
150.875 133.85 mo
150.875 133.85 li
@
0 lc
152.55 143.7 mo
152.55 142.83 151.845 142.125 150.975 142.125 cv
150.105 142.125 149.4 142.83 149.4 143.7 cv
149.4 144.569 150.105 145.274 150.975 145.274 cv
151.845 145.274 152.55 144.569 152.55 143.7 cv
@
1 lc
150.975 143.75 mo
150.975 143.75 li
@
0 lc
153.87 132.899 mo
153.87 132.03 153.164 131.325 152.295 131.325 cv
151.426 131.325 150.72 132.03 150.72 132.899 cv
150.72 133.77 151.426 134.475 152.295 134.475 cv
153.164 134.475 153.87 133.77 153.87 132.899 cv
@
1 lc
152.325 132.8 mo
152.325 132.8 li
@
0 lc
154.83 142.02 mo
154.83 141.15 154.124 140.444 153.255 140.444 cv
152.386 140.444 151.68 141.15 151.68 142.02 cv
151.68 142.89 152.386 143.595 153.255 143.595 cv
154.124 143.595 154.83 142.89 154.83 142.02 cv
@
1 lc
153.175 142.1 mo
153.175 142.1 li
@
0 lc
155.19 153.3 mo
155.19 152.431 154.484 151.725 153.615 151.725 cv
152.746 151.725 152.04 152.431 152.04 153.3 cv
152.04 154.169 152.746 154.875 153.615 154.875 cv
154.484 154.875 155.19 154.169 155.19 153.3 cv
@
1 lc
153.625 153.399 mo
153.625 153.399 li
@
0 lc
155.31 134.7 mo
155.31 133.83 154.604 133.125 153.735 133.125 cv
152.865 133.125 152.16 133.83 152.16 134.7 cv
152.16 135.569 152.865 136.274 153.735 136.274 cv
154.604 136.274 155.31 135.569 155.31 134.7 cv
@
1 lc
153.775 134.7 mo
153.775 134.7 li
@
0 lc
156.99 132.899 mo
156.99 132.03 156.284 131.325 155.415 131.325 cv
154.546 131.325 153.84 132.03 153.84 132.899 cv
153.84 133.77 154.546 134.475 155.415 134.475 cv
156.284 134.475 156.99 133.77 156.99 132.899 cv
@
1 lc
155.425 132.899 mo
155.425 132.899 li
@
0 lc
158.43 131.7 mo
158.43 130.83 157.725 130.125 156.855 130.125 cv
155.985 130.125 155.28 130.83 155.28 131.7 cv
155.28 132.569 155.985 133.274 156.855 133.274 cv
157.725 133.274 158.43 132.569 158.43 131.7 cv
@
1 lc
156.775 131.75 mo
156.775 131.75 li
@
0 lc
158.79 135.06 mo
158.79 134.19 158.084 133.484 157.215 133.484 cv
156.346 133.484 155.64 134.19 155.64 135.06 cv
155.64 135.929 156.346 136.635 157.215 136.635 cv
158.084 136.635 158.79 135.929 158.79 135.06 cv
@
1 lc
157.225 135.149 mo
157.225 135.149 li
@
0 lc
158.91 132.66 mo
158.91 131.79 158.204 131.085 157.335 131.085 cv
156.466 131.085 155.76 131.79 155.76 132.66 cv
155.76 133.529 156.466 134.234 157.335 134.234 cv
158.204 134.234 158.91 133.529 158.91 132.66 cv
@
1 lc
157.325 132.7 mo
157.325 132.7 li
@
0 lc
159.87 144.899 mo
159.87 144.03 159.164 143.325 158.295 143.325 cv
157.426 143.325 156.72 144.03 156.72 144.899 cv
156.72 145.77 157.426 146.475 158.295 146.475 cv
159.164 146.475 159.87 145.77 159.87 144.899 cv
@
1 lc
158.275 144.8 mo
158.275 144.8 li
@
0 lc
160.35 153.54 mo
160.35 152.67 159.645 151.965 158.775 151.965 cv
157.905 151.965 157.2 152.67 157.2 153.54 cv
157.2 154.409 157.905 155.115 158.775 155.115 cv
159.645 155.115 160.35 154.409 160.35 153.54 cv
@
1 lc
158.725 153.6 mo
158.725 153.6 li
@
0 lc
160.35 134.58 mo
160.35 133.71 159.645 133.005 158.775 133.005 cv
157.905 133.005 157.2 133.71 157.2 134.58 cv
157.2 135.449 157.905 136.155 158.775 136.155 cv
159.645 136.155 160.35 135.449 160.35 134.58 cv
@
1 lc
158.825 134.649 mo
158.825 134.649 li
@
0 lc
160.83 148.74 mo
160.83 147.87 160.124 147.165 159.255 147.165 cv
158.386 147.165 157.68 147.87 157.68 148.74 cv
157.68 149.609 158.386 150.314 159.255 150.314 cv
160.124 150.314 160.83 149.609 160.83 148.74 cv
@
1 lc
159.175 148.7 mo
159.175 148.7 li
@
0 lc
160.83 137.7 mo
160.83 136.83 160.124 136.125 159.255 136.125 cv
158.386 136.125 157.68 136.83 157.68 137.7 cv
157.68 138.569 158.386 139.274 159.255 139.274 cv
160.124 139.274 160.83 138.569 160.83 137.7 cv
@
1 lc
159.275 137.649 mo
159.275 137.649 li
@
0 lc
161.07 153.06 mo
161.07 152.19 160.364 151.484 159.495 151.484 cv
158.626 151.484 157.92 152.19 157.92 153.06 cv
157.92 153.929 158.626 154.635 159.495 154.635 cv
160.364 154.635 161.07 153.929 161.07 153.06 cv
@
1 lc
159.425 153.1 mo
159.425 153.1 li
@
0 lc
161.07 153.54 mo
161.07 152.67 160.364 151.965 159.495 151.965 cv
158.626 151.965 157.92 152.67 157.92 153.54 cv
157.92 154.409 158.626 155.115 159.495 155.115 cv
160.364 155.115 161.07 154.409 161.07 153.54 cv
@
1 lc
159.475 153.5 mo
159.475 153.5 li
@
0 lc
162.03 145.14 mo
162.03 144.271 161.324 143.564 160.455 143.564 cv
159.586 143.564 158.88 144.271 158.88 145.14 cv
158.88 146.009 159.586 146.715 160.455 146.715 cv
161.324 146.715 162.03 146.009 162.03 145.14 cv
@
1 lc
160.425 145.2 mo
160.425 145.2 li
@
0 lc
162.51 152.58 mo
162.51 151.71 161.805 151.005 160.935 151.005 cv
160.065 151.005 159.36 151.71 159.36 152.58 cv
159.36 153.449 160.065 154.155 160.935 154.155 cv
161.805 154.155 162.51 153.449 162.51 152.58 cv
@
1 lc
160.875 152.6 mo
160.875 152.6 li
@
0 lc
162.75 132.899 mo
162.75 132.03 162.044 131.325 161.175 131.325 cv
160.306 131.325 159.6 132.03 159.6 132.899 cv
159.6 133.77 160.306 134.475 161.175 134.475 cv
162.044 134.475 162.75 133.77 162.75 132.899 cv
@
1 lc
161.175 133 mo
161.175 133 li
@
0 lc
163.23 147.78 mo
163.23 146.91 162.524 146.205 161.655 146.205 cv
160.785 146.205 160.08 146.91 160.08 147.78 cv
160.08 148.649 160.785 149.354 161.655 149.354 cv
162.524 149.354 163.23 148.649 163.23 147.78 cv
@
1 lc
161.575 147.75 mo
161.575 147.75 li
@
0 lc
163.47 143.46 mo
163.47 142.591 162.765 141.885 161.895 141.885 cv
161.025 141.885 160.32 142.591 160.32 143.46 cv
160.32 144.329 161.025 145.035 161.895 145.035 cv
162.765 145.035 163.47 144.329 163.47 143.46 cv
@
1 lc
161.925 143.5 mo
161.925 143.5 li
@
0 lc
163.95 141.3 mo
163.95 140.431 163.244 139.725 162.375 139.725 cv
161.506 139.725 160.8 140.431 160.8 141.3 cv
160.8 142.169 161.506 142.875 162.375 142.875 cv
163.244 142.875 163.95 142.169 163.95 141.3 cv
@
1 lc
162.275 141.399 mo
162.275 141.399 li
@
0 lc
165.75 135.78 mo
165.75 134.91 165.044 134.205 164.175 134.205 cv
163.306 134.205 162.6 134.91 162.6 135.78 cv
162.6 136.649 163.306 137.354 164.175 137.354 cv
165.044 137.354 165.75 136.649 165.75 135.78 cv
@
1 lc
164.175 135.85 mo
164.175 135.85 li
@
0 lc
165.87 151.5 mo
165.87 150.63 165.164 149.925 164.295 149.925 cv
163.426 149.925 162.72 150.63 162.72 151.5 cv
162.72 152.369 163.426 153.075 164.295 153.075 cv
165.164 153.075 165.87 152.369 165.87 151.5 cv
@
1 lc
164.225 151.5 mo
164.225 151.5 li
@
0 lc
167.07 153.78 mo
167.07 152.91 166.364 152.205 165.495 152.205 cv
164.626 152.205 163.92 152.91 163.92 153.78 cv
163.92 154.649 164.626 155.354 165.495 155.354 cv
166.364 155.354 167.07 154.649 167.07 153.78 cv
@
1 lc
165.475 153.85 mo
165.475 153.85 li
@
0 lc
167.55 154.5 mo
167.55 153.63 166.845 152.925 165.975 152.925 cv
165.105 152.925 164.4 153.63 164.4 154.5 cv
164.4 155.369 165.105 156.075 165.975 156.075 cv
166.845 156.075 167.55 155.369 167.55 154.5 cv
@
1 lc
166.025 154.55 mo
166.025 154.55 li
@
0 lc
168.03 151.62 mo
168.03 150.75 167.324 150.045 166.455 150.045 cv
165.586 150.045 164.88 150.75 164.88 151.62 cv
164.88 152.489 165.586 153.194 166.455 153.194 cv
167.324 153.194 168.03 152.489 168.03 151.62 cv
@
1 lc
166.375 151.7 mo
166.375 151.7 li
@
0 lc
168.03 149.46 mo
168.03 148.591 167.324 147.885 166.455 147.885 cv
165.586 147.885 164.88 148.591 164.88 149.46 cv
164.88 150.329 165.586 151.035 166.455 151.035 cv
167.324 151.035 168.03 150.329 168.03 149.46 cv
@
1 lc
166.525 149.399 mo
166.525 149.399 li
@
0 lc
168.99 134.58 mo
168.99 133.71 168.284 133.005 167.415 133.005 cv
166.546 133.005 165.84 133.71 165.84 134.58 cv
165.84 135.449 166.546 136.155 167.415 136.155 cv
168.284 136.155 168.99 135.449 168.99 134.58 cv
@
1 lc
167.425 134.5 mo
167.425 134.5 li
@
0 lc
169.11 145.859 mo
169.11 144.99 168.404 144.285 167.535 144.285 cv
166.666 144.285 165.96 144.99 165.96 145.859 cv
165.96 146.729 166.666 147.435 167.535 147.435 cv
168.404 147.435 169.11 146.729 169.11 145.859 cv
@
1 lc
167.525 145.899 mo
167.525 145.899 li
@
0 lc
169.47 137.46 mo
169.47 136.591 168.765 135.885 167.895 135.885 cv
167.025 135.885 166.32 136.591 166.32 137.46 cv
166.32 138.329 167.025 139.035 167.895 139.035 cv
168.765 139.035 169.47 138.329 169.47 137.46 cv
@
1 lc
167.925 137.5 mo
167.925 137.5 li
@
0 lc
169.71 146.1 mo
169.71 145.23 169.004 144.524 168.135 144.524 cv
167.266 144.524 166.56 145.23 166.56 146.1 cv
166.56 146.969 167.266 147.675 168.135 147.675 cv
169.004 147.675 169.71 146.969 169.71 146.1 cv
@
1 lc
168.125 146.2 mo
168.125 146.2 li
@
0 lc
169.95 148.26 mo
169.95 147.391 169.244 146.685 168.375 146.685 cv
167.506 146.685 166.8 147.391 166.8 148.26 cv
166.8 149.129 167.506 149.835 168.375 149.835 cv
169.244 149.835 169.95 149.129 169.95 148.26 cv
@
1 lc
168.325 148.35 mo
168.325 148.35 li
@
0 lc
170.19 138.18 mo
170.19 137.311 169.484 136.604 168.615 136.604 cv
167.746 136.604 167.04 137.311 167.04 138.18 cv
167.04 139.049 167.746 139.755 168.615 139.755 cv
169.484 139.755 170.19 139.049 170.19 138.18 cv
@
1 lc
168.675 138.1 mo
168.675 138.1 li
@
0 lc
171.15 135.3 mo
171.15 134.431 170.444 133.725 169.575 133.725 cv
168.706 133.725 168 134.431 168 135.3 cv
168 136.169 168.706 136.875 169.575 136.875 cv
170.444 136.875 171.15 136.169 171.15 135.3 cv
@
1 lc
169.625 135.3 mo
169.625 135.3 li
@
0 lc
171.39 141.66 mo
171.39 140.79 170.685 140.085 169.815 140.085 cv
168.945 140.085 168.24 140.79 168.24 141.66 cv
168.24 142.529 168.945 143.234 169.815 143.234 cv
170.685 143.234 171.39 142.529 171.39 141.66 cv
@
1 lc
169.725 141.649 mo
169.725 141.649 li
@
0 lc
172.11 143.939 mo
172.11 143.07 171.404 142.365 170.535 142.365 cv
169.666 142.365 168.96 143.07 168.96 143.939 cv
168.96 144.81 169.666 145.515 170.535 145.515 cv
171.404 145.515 172.11 144.81 172.11 143.939 cv
@
1 lc
170.525 144 mo
170.525 144 li
@
0 lc
172.83 133.62 mo
172.83 132.75 172.124 132.045 171.255 132.045 cv
170.386 132.045 169.68 132.75 169.68 133.62 cv
169.68 134.489 170.386 135.194 171.255 135.194 cv
172.124 135.194 172.83 134.489 172.83 133.62 cv
@
1 lc
171.175 133.6 mo
171.175 133.6 li
@
0 lc
172.83 149.34 mo
172.83 148.471 172.124 147.765 171.255 147.765 cv
170.386 147.765 169.68 148.471 169.68 149.34 cv
169.68 150.209 170.386 150.915 171.255 150.915 cv
172.124 150.915 172.83 150.209 172.83 149.34 cv
@
1 lc
171.225 149.35 mo
171.225 149.35 li
@
0 lc
172.95 136.74 mo
172.95 135.87 172.244 135.165 171.375 135.165 cv
170.506 135.165 169.8 135.87 169.8 136.74 cv
169.8 137.609 170.506 138.314 171.375 138.314 cv
172.244 138.314 172.95 137.609 172.95 136.74 cv
@
1 lc
171.375 136.649 mo
171.375 136.649 li
@
0 lc
173.07 133.14 mo
173.07 132.271 172.364 131.564 171.495 131.564 cv
170.626 131.564 169.92 132.271 169.92 133.14 cv
169.92 134.009 170.626 134.715 171.495 134.715 cv
172.364 134.715 173.07 134.009 173.07 133.14 cv
@
1 lc
171.525 133.2 mo
171.525 133.2 li
@
0 lc
173.79 145.38 mo
173.79 144.511 173.084 143.805 172.215 143.805 cv
171.346 143.805 170.64 144.511 170.64 145.38 cv
170.64 146.249 171.346 146.955 172.215 146.955 cv
173.084 146.955 173.79 146.249 173.79 145.38 cv
@
1 lc
172.175 145.35 mo
172.175 145.35 li
@
0 lc
174.51 149.22 mo
174.51 148.351 173.805 147.645 172.935 147.645 cv
172.065 147.645 171.36 148.351 171.36 149.22 cv
171.36 150.089 172.065 150.795 172.935 150.795 cv
173.805 150.795 174.51 150.089 174.51 149.22 cv
@
1 lc
172.925 149.149 mo
172.925 149.149 li
@
0 lc
176.19 137.7 mo
176.19 136.83 175.484 136.125 174.615 136.125 cv
173.746 136.125 173.04 136.83 173.04 137.7 cv
173.04 138.569 173.746 139.274 174.615 139.274 cv
175.484 139.274 176.19 138.569 176.19 137.7 cv
@
1 lc
174.675 137.6 mo
174.675 137.6 li
@
0 lc
176.31 138.06 mo
176.31 137.19 175.604 136.484 174.735 136.484 cv
173.865 136.484 173.16 137.19 173.16 138.06 cv
173.16 138.929 173.865 139.635 174.735 139.635 cv
175.604 139.635 176.31 138.929 176.31 138.06 cv
@
1 lc
174.725 138.05 mo
174.725 138.05 li
@
0 lc
176.67 153.54 mo
176.67 152.67 175.965 151.965 175.095 151.965 cv
174.226 151.965 173.52 152.67 173.52 153.54 cv
173.52 154.409 174.226 155.115 175.095 155.115 cv
175.965 155.115 176.67 154.409 176.67 153.54 cv
@
1 lc
175.075 153.5 mo
175.075 153.5 li
@
0 lc
177.15 144.42 mo
177.15 143.551 176.444 142.845 175.575 142.845 cv
174.706 142.845 174 143.551 174 144.42 cv
174 145.289 174.706 145.995 175.575 145.995 cv
176.444 145.995 177.15 145.289 177.15 144.42 cv
@
1 lc
175.475 144.5 mo
175.475 144.5 li
@
0 lc
177.63 149.7 mo
177.63 148.83 176.925 148.125 176.055 148.125 cv
175.186 148.125 174.48 148.83 174.48 149.7 cv
174.48 150.569 175.186 151.274 176.055 151.274 cv
176.925 151.274 177.63 150.569 177.63 149.7 cv
@
1 lc
176.075 149.8 mo
176.075 149.8 li
@
0 lc
177.75 133.74 mo
177.75 132.87 177.044 132.165 176.175 132.165 cv
175.306 132.165 174.6 132.87 174.6 133.74 cv
174.6 134.609 175.306 135.314 176.175 135.314 cv
177.044 135.314 177.75 134.609 177.75 133.74 cv
@
1 lc
176.175 133.75 mo
176.175 133.75 li
@
0 lc
177.87 131.7 mo
177.87 130.83 177.164 130.125 176.295 130.125 cv
175.426 130.125 174.72 130.83 174.72 131.7 cv
174.72 132.569 175.426 133.274 176.295 133.274 cv
177.164 133.274 177.87 132.569 177.87 131.7 cv
@
1 lc
176.225 131.8 mo
176.225 131.8 li
@
0 lc
179.55 154.02 mo
179.55 153.15 178.845 152.444 177.975 152.444 cv
177.105 152.444 176.4 153.15 176.4 154.02 cv
176.4 154.89 177.105 155.595 177.975 155.595 cv
178.845 155.595 179.55 154.89 179.55 154.02 cv
@
1 lc
177.975 153.95 mo
177.975 153.95 li
@
0 lc
180.03 133.62 mo
180.03 132.75 179.324 132.045 178.455 132.045 cv
177.586 132.045 176.88 132.75 176.88 133.62 cv
176.88 134.489 177.586 135.194 178.455 135.194 cv
179.324 135.194 180.03 134.489 180.03 133.62 cv
@
1 lc
178.425 133.6 mo
178.425 133.6 li
@
0 lc
180.03 143.7 mo
180.03 142.83 179.324 142.125 178.455 142.125 cv
177.586 142.125 176.88 142.83 176.88 143.7 cv
176.88 144.569 177.586 145.274 178.455 145.274 cv
179.324 145.274 180.03 144.569 180.03 143.7 cv
@
1 lc
178.475 143.8 mo
178.475 143.8 li
@
0 lc
180.75 139.859 mo
180.75 138.99 180.044 138.285 179.175 138.285 cv
178.306 138.285 177.6 138.99 177.6 139.859 cv
177.6 140.729 178.306 141.435 179.175 141.435 cv
180.044 141.435 180.75 140.729 180.75 139.859 cv
@
1 lc
179.225 139.899 mo
179.225 139.899 li
@
0 lc
181.35 144.66 mo
181.35 143.79 180.645 143.085 179.775 143.085 cv
178.905 143.085 178.2 143.79 178.2 144.66 cv
178.2 145.529 178.905 146.234 179.775 146.234 cv
180.645 146.234 181.35 145.529 181.35 144.66 cv
@
1 lc
179.775 144.649 mo
179.775 144.649 li
@
0 lc
186.51 141.06 mo
186.51 140.19 185.805 139.484 184.935 139.484 cv
184.065 139.484 183.36 140.19 183.36 141.06 cv
183.36 141.929 184.065 142.635 184.935 142.635 cv
185.805 142.635 186.51 141.929 186.51 141.06 cv
@
1 lc
184.875 141 mo
184.875 141 li
@
0 lc
187.23 132.899 mo
187.23 132.03 186.524 131.325 185.655 131.325 cv
184.785 131.325 184.08 132.03 184.08 132.899 cv
184.08 133.77 184.785 134.475 185.655 134.475 cv
186.524 134.475 187.23 133.77 187.23 132.899 cv
@
1 lc
185.575 132.8 mo
185.575 132.8 li
@
0 lc
189.87 142.74 mo
189.87 141.87 189.164 141.165 188.295 141.165 cv
187.426 141.165 186.72 141.87 186.72 142.74 cv
186.72 143.609 187.426 144.314 188.295 144.314 cv
189.164 144.314 189.87 143.609 189.87 142.74 cv
@
1 lc
188.325 142.8 mo
188.325 142.8 li
@
0 lc
190.35 151.14 mo
190.35 150.271 189.645 149.564 188.775 149.564 cv
187.905 149.564 187.2 150.271 187.2 151.14 cv
187.2 152.009 187.905 152.715 188.775 152.715 cv
189.645 152.715 190.35 152.009 190.35 151.14 cv
@
1 lc
188.775 151.05 mo
188.775 151.05 li
@
0 lc
191.07 136.26 mo
191.07 135.391 190.364 134.685 189.495 134.685 cv
188.626 134.685 187.92 135.391 187.92 136.26 cv
187.92 137.129 188.626 137.835 189.495 137.835 cv
190.364 137.835 191.07 137.129 191.07 136.26 cv
@
1 lc
189.575 136.35 mo
189.575 136.35 li
@
0 lc
192.51 148.26 mo
192.51 147.391 191.805 146.685 190.935 146.685 cv
190.065 146.685 189.36 147.391 189.36 148.26 cv
189.36 149.129 190.065 149.835 190.935 149.835 cv
191.805 149.835 192.51 149.129 192.51 148.26 cv
@
1 lc
190.975 148.3 mo
190.975 148.3 li
@
0 lc
193.47 133.14 mo
193.47 132.271 192.765 131.564 191.895 131.564 cv
191.025 131.564 190.32 132.271 190.32 133.14 cv
190.32 134.009 191.025 134.715 191.895 134.715 cv
192.765 134.715 193.47 134.009 193.47 133.14 cv
@
1 lc
191.875 133.149 mo
191.875 133.149 li
@
0 lc
196.35 142.26 mo
196.35 141.391 195.645 140.685 194.775 140.685 cv
193.905 140.685 193.2 141.391 193.2 142.26 cv
193.2 143.129 193.905 143.835 194.775 143.835 cv
195.645 143.835 196.35 143.129 196.35 142.26 cv
@
1 lc
194.725 142.35 mo
194.725 142.35 li
@
0 lc
196.95 138.54 mo
196.95 137.67 196.244 136.965 195.375 136.965 cv
194.506 136.965 193.8 137.67 193.8 138.54 cv
193.8 139.409 194.506 140.115 195.375 140.115 cv
196.244 140.115 196.95 139.409 196.95 138.54 cv
@
1 lc
195.375 138.55 mo
195.375 138.55 li
@
0 lc
197.79 148.02 mo
197.79 147.15 197.084 146.444 196.215 146.444 cv
195.346 146.444 194.64 147.15 194.64 148.02 cv
194.64 148.89 195.346 149.595 196.215 149.595 cv
197.084 149.595 197.79 148.89 197.79 148.02 cv
@
1 lc
196.175 148.05 mo
196.175 148.05 li
@
0 lc
201.99 149.22 mo
201.99 148.351 201.284 147.645 200.415 147.645 cv
199.546 147.645 198.84 148.351 198.84 149.22 cv
198.84 150.089 199.546 150.795 200.415 150.795 cv
201.284 150.795 201.99 150.089 201.99 149.22 cv
@
1 lc
200.425 149.3 mo
200.425 149.3 li
@
0 lc
202.35 147.78 mo
202.35 146.91 201.645 146.205 200.775 146.205 cv
199.905 146.205 199.2 146.91 199.2 147.78 cv
199.2 148.649 199.905 149.354 200.775 149.354 cv
201.645 149.354 202.35 148.649 202.35 147.78 cv
@
1 lc
200.675 147.7 mo
200.675 147.7 li
@
0 lc
202.95 131.7 mo
202.95 130.83 202.244 130.125 201.375 130.125 cv
200.506 130.125 199.8 130.83 199.8 131.7 cv
199.8 132.569 200.506 133.274 201.375 133.274 cv
202.244 133.274 202.95 132.569 202.95 131.7 cv
@
1 lc
201.375 131.75 mo
201.375 131.75 li
@
0 lc
204.15 145.5 mo
204.15 144.63 203.444 143.925 202.575 143.925 cv
201.706 143.925 201 144.63 201 145.5 cv
201 146.369 201.706 147.075 202.575 147.075 cv
203.444 147.075 204.15 146.369 204.15 145.5 cv
@
1 lc
202.575 145.5 mo
202.575 145.5 li
@
0 lc
204.99 151.38 mo
204.99 150.511 204.284 149.805 203.415 149.805 cv
202.546 149.805 201.84 150.511 201.84 151.38 cv
201.84 152.249 202.546 152.955 203.415 152.955 cv
204.284 152.955 204.99 152.249 204.99 151.38 cv
@
1 lc
203.475 151.45 mo
203.475 151.45 li
@
0 lc
207.15 133.859 mo
207.15 132.99 206.444 132.285 205.575 132.285 cv
204.706 132.285 204 132.99 204 133.859 cv
204 134.729 204.706 135.435 205.575 135.435 cv
206.444 135.435 207.15 134.729 207.15 133.859 cv
@
1 lc
205.525 133.8 mo
205.525 133.8 li
@
0 lc
223.47 139.62 mo
223.47 138.75 222.765 138.045 221.895 138.045 cv
221.025 138.045 220.32 138.75 220.32 139.62 cv
220.32 140.489 221.025 141.194 221.895 141.194 cv
222.765 141.194 223.47 140.489 223.47 139.62 cv
@
1 lc
221.925 139.7 mo
221.925 139.7 li
@
0 lc
224.91 140.34 mo
224.91 139.471 224.204 138.765 223.335 138.765 cv
222.466 138.765 221.76 139.471 221.76 140.34 cv
221.76 141.209 222.466 141.915 223.335 141.915 cv
224.204 141.915 224.91 141.209 224.91 140.34 cv
@
1 lc
223.375 140.35 mo
223.375 140.35 li
@
0 lc
220.425 106.7 mo
220.425 102.85 li
235.575 102.85 li
235.575 106.7 li
220.425 106.7 li
220.425 106.7 li
cp
205.275 106.7 mo
205.275 104.8 li
220.425 104.8 li
220.425 106.7 li
205.275 106.7 li
205.275 106.7 li
cp
190.125 106.7 mo
190.125 87.3496 li
205.275 87.3496 li
205.275 106.7 li
190.125 106.7 li
190.125 106.7 li
cp
174.975 106.7 mo
174.975 77.6997 li
190.125 77.6997 li
190.125 106.7 li
174.975 106.7 li
174.975 106.7 li
cp
159.825 106.7 mo
159.825 50.5996 li
174.975 50.5996 li
174.975 106.7 li
159.825 106.7 li
159.825 106.7 li
cp
144.675 106.7 mo
144.675 42.8496 li
159.825 42.8496 li
159.825 106.7 li
144.675 106.7 li
144.675 106.7 li
cp
129.525 106.7 mo
129.525 38.9497 li
144.675 38.9497 li
144.675 106.7 li
129.525 106.7 li
129.525 106.7 li
cp
114.375 106.7 mo
114.375 62.1997 li
129.525 62.1997 li
129.525 106.7 li
114.375 106.7 li
114.375 106.7 li
cp
99.2251 106.7 mo
99.2251 46.6997 li
114.375 46.6997 li
114.375 106.7 li
99.2251 106.7 li
99.2251 106.7 li
cp
84.0752 106.7 mo
84.0752 91.25 li
99.2251 91.25 li
99.2251 106.7 li
84.0752 106.7 li
84.0752 106.7 li
cp
68.9248 106.7 mo
68.9248 89.2998 li
84.0752 89.2998 li
84.0752 106.7 li
68.9248 106.7 li
68.9248 106.7 li
cp
53.7749 106.7 mo
53.7749 98.9502 li
68.9248 98.9502 li
68.9248 106.7 li
53.7749 106.7 li
53.7749 106.7 li
cp
@
[4 2 ] 0 dsh
140.975 55.8999 mo
142.075 55.3999 li
143.475 54.9497 li
143.725 54.4497 li
143.825 53.9497 li
144.525 53.5 li
144.725 53 li
145.225 52.5 li
145.275 52.0498 li
145.575 51.5498 li
145.675 51.0498 li
145.775 50.5996 li
146.275 50.0996 li
146.325 49.5996 li
146.525 49.1499 li
147.375 48.6499 li
147.625 48.1499 li
147.975 47.6499 li
148.325 47.1997 li
149.775 46.6997 li
150.475 46.1997 li
150.875 45.75 li
150.875 45.25 li
150.975 44.75 li
152.325 44.2998 li
153.175 43.7998 li
153.625 43.2998 li
153.775 42.8496 li
155.425 42.3496 li
156.775 41.8496 li
157.225 41.3999 li
157.325 40.8999 li
158.275 40.3999 li
158.725 39.9497 li
158.825 39.4497 li
159.175 38.9497 li
159.275 38.5 li
159.425 38 li
159.475 37.5 li
160.425 37.0498 li
160.875 36.5498 li
161.175 36.0498 li
161.575 35.6001 li
161.925 35.1001 li
162.275 34.6001 li
164.175 34.1001 li
164.225 33.6499 li
165.475 33.1499 li
166.025 32.6499 li
166.375 32.2002 li
166.525 31.7002 li
167.425 31.2002 li
167.525 30.75 li
167.925 30.25 li
168.125 29.75 li
168.325 29.2998 li
168.675 28.7998 li
169.625 28.2998 li
169.725 27.8501 li
170.525 27.3501 li
171.175 26.8501 li
171.225 26.3999 li
171.375 25.8999 li
171.525 25.3999 li
172.175 24.9502 li
172.925 24.4502 li
174.675 23.9502 li
174.725 23.5 li
175.075 23 li
175.475 22.5 li
176.075 22.0498 li
176.175 21.5498 li
176.225 21.0498 li
177.975 20.5498 li
178.425 20.1001 li
178.475 19.6001 li
179.225 19.1001 li
179.775 18.6499 li
184.875 18.1499 li
185.575 17.6499 li
188.325 17.2002 li
188.775 16.7002 li
189.575 16.2002 li
190.975 15.75 li
191.875 15.25 li
194.725 14.75 li
195.375 14.2998 li
196.175 13.7998 li
200.425 13.2998 li
200.675 12.8501 li
201.375 12.3501 li
202.575 11.8501 li
203.475 11.3999 li
205.525 10.8999 li
221.925 10.3999 li
223.375 9.9502 li
57.5752 106.25 mo
61.6748 105.75 li
64.125 105.25 li
68.4248 104.8 li
71.875 104.3 li
75.8252 103.8 li
75.9751 103.3 li
76.4751 102.85 li
80.6748 102.35 li
81.2749 101.85 li
81.7251 101.399 li
82.1748 100.899 li
83.0249 100.399 li
85.4751 99.9492 li
86.1748 99.4492 li
87.125 98.9492 li
88.5752 98.5 li
93.2749 98 li
95.7251 97.5 li
96.8252 97.0498 li
96.9751 96.5498 li
99.4751 96.0498 li
100.125 95.5996 li
100.125 95.0996 li
100.275 94.5996 li
102.025 94.1494 li
102.325 93.6494 li
102.825 93.1494 li
103.975 92.6997 li
104.075 92.1997 li
105.075 91.6997 li
105.725 91.2495 li
105.775 90.7495 li
106.525 90.2495 li
107.025 89.7495 li
108.875 89.2998 li
109.575 88.7998 li
110.075 88.2998 li
110.325 87.8496 li
111.025 87.3496 li
111.125 86.8496 li
111.325 86.3994 li
111.475 85.8994 li
112.125 85.3994 li
112.425 84.9497 li
112.475 84.4497 li
112.875 83.9497 li
113.225 83.4995 li
113.625 82.9995 li
113.725 82.4995 li
113.925 82.0498 li
114.275 81.5498 li
114.475 81.0498 li
116.025 80.5996 li
116.275 80.0996 li
116.375 79.5996 li
116.575 79.1494 li
117.325 78.6494 li
118.475 78.1494 li
119.875 77.6997 li
121.025 77.1997 li
121.425 76.6997 li
123.475 76.2495 li
124.625 75.7495 li
124.725 75.2495 li
124.775 74.7495 li
124.875 74.2998 li
125.025 73.7998 li
126.675 73.2998 li
127.775 72.8496 li
127.825 72.3496 li
128.475 71.8496 li
128.875 71.3999 li
129.175 70.8999 li
129.425 70.3999 li
129.725 69.9497 li
129.875 69.4497 li
129.875 68.9497 li
130.425 68.5 li
130.525 68 li
130.625 67.5 li
131.075 67.0498 li
132.425 66.5498 li
133.225 66.0498 li
133.675 65.5996 li
134.325 65.0996 li
134.625 64.5996 li
135.375 64.1499 li
135.775 63.6499 li
135.875 63.1499 li
135.875 62.6997 li
136.075 62.1997 li
136.325 61.6997 li
136.475 61.1997 li
136.625 60.75 li
137.325 60.25 li
138.525 59.75 li
139.375 59.2998 li
139.825 58.7998 li
140.025 58.2998 li
140.075 57.8496 li
140.075 57.3496 li
140.125 56.8496 li
140.275 56.3999 li
140.975 55.8999 li
@
0.5 lw
[] 0 dsh
15.875 0.25 mo
15.875 179.3 li
258.325 179.3 li
258.325 0.25 li
15.875 0.25 li
15.875 0.25 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/MIJMQC+Helvetica*1 uf/MIJMQC+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (SamreshNarayan Singh) ()%%Title: (happyqq1.eps)%%CreationDate: 10/4/10 12:55 PM%AI9_DataStream%Gb"-6pO4<uZ7,Xa!:KorZ,*52,\OE(c5m3!fZ(p]$#AuiJ)"\O.YX0L2dt"uoA)4g[kOc2P,_J2<L'R`iGc%\mP`hUpL<UKCI'tM%%P%:%:fF\d/M@:EiSF3QCM6csRE]B;@OA'fW^:KfH]@Q>X#i?_oGXjjYgi"2#/diVYu>Rg$'2.#mKaQr[Q=Gq7dWZNG]Y\.pH.bC%dorTPQ[Z*G40<79n6I+>o1982AEC?]DKhPij6tUN?nJ<K)(8OXESjj8qKm!0Lqf/5]l'T$DRN<fLg&':DtJ8[&$jOVqaG9W6?&ZZ%AMg:4dG9?Z#qDeO739`Yn*T(I:`m)lh8^pXqm,nNn'jiZN$_QI,h#%:T8$/@S^p2J&7jqMLkFs)(<gAJnr2V5ohW3mYI3:c^!Z8.%HG^6pdqQE[OAQjR0&$>Z^rsek0Ul-7l1qj<)I.F>J3@/%-a+Q`R]R&O_XCMeFT>CXs2k,89Ia;u#Oec,RepE($o"gfF-8p4+]KQ7%J%#Ub9@1LH^X^$a?/s<Ze4^VYP6X4L=rr+:"dKL64tQpMm?!?=YqpVHhIb#E&b8`FFIWcnn*TN]H@sF=D:!1k.EX-V*;RCF:Zd?1%oB^r^5QpCdeEYH_,FU&%nTH0,H#u>5\GSU&e?-1lU1>Pdb\)Mf1mB2QlYa6sWZre1#b9`%^OsM_,G6"_rDQ_kb[fWfT81`jM3Y(j%r)HaAWiGPf<QW^)(#C9UAMR(4PC[)/%+NF1TN3C<Xg0kVH)QqQ6_-@9#B/es:b//n>4;tbTiS,q[7V`iZW)N(V%V:W<oIc#R`WA"%eLE\b<lmF6`+6Mk4JYL<']*BH<Ab>B:T+FN_'d_6Ql)X[)*e=s:^8+p:OnpCK"MIF_'f-^Lu8qM,'Y:`"%;VbE5Q$2"dkrYJkaZX%e,m/<'C&Pt:r_W&7S[nrYXku$TB&]J3>jst3uK"%*Ce?:Lt*XJTGG<JT?n4=5lroh7V3).67m_KbqQs@Go,Ck:\Y+?Onjc.13+do%:T+Hd_'bX>66uc<UjqTjd/],qd1;^&1-U;4W($3qn3S6FUPFtqEKP]AbA=m`%JC=t!-F/T!BPIp5Y[gOI..HM#^lf&"=N89pk1[.%>p.?>S#m]_3RS#'DFVO&<Z&6\a9e[S>%$ZJbpgIj)'-OSl'L<;7a>V!_+)ES[92mnFn._A:B$B<PEe_<RER\-%;DMnrt5+hX.?m:%#d`((<u/[eVgUnfN:&_)_:tK7fLk>5bco=S!Ck!]$#am$Yd(M(Z@5BWj@rdCn3?\@\=u[s.11@;s,ql#7XjsDjBj%":6Q=iQi,$=%a`%0Fr6+3Cmp(nGSYQ2l"nI?H-3&iknsfY*rrV/"R?[3UjBn`MIe1>8T;;K3r#Fi/50:I#hs;0TMr7O@P*W8:V(DIGQI=H,+dXdu%J)5YW@Ic!S8LofY.o*40\'p67rn(Rk&\hVVY>rZ?'i[\EC'4;Z&C]4QeLLK^l!LE!qJ.QN\?4u`i`<)@C^-Ki&e11,=cI6$YD]!J%60?:O')Y^_p\8h-X\/)KcK"ofs1!NC]T#E3PFeTjq4#[p2:5+?7=@9ZS8#X%K[qiqNc=4NBbaN8h_$FZq(4FBo#0t`P5]W-+f0JC%9o<//NXAAZDF@?PisK[t5iF=G"bp5TE>9dXAf>.ef?;XOniBO>2'iLn=NTj4C=$$'f.:)J@;V5g,QKcO1X0p;pqiSjL::"dmSD8H%-ri&Me1@FOp)!H,=ApM5]+rbs=IW\.hVi;RAWW#^D$+mYSuT')!'f#6OsSb3\k89r7-:!4SCY`BiA<r9<e)PfB;Q)Zc7uJ6N3JGl%PPR;!X]eaE7R6+jJ;^E>KBsP2>[p`D>i,VL)7DFK1X-6tjj5r3O,dCg`og9uCr@@<4gV]!g@e`Zmo/)[hC@fkhm#D[q?`/Fgjrt4%b..]A4/Z4i2Y:kE3j]((-,WibHn;@;re?423GjG?;dNWRD_p+RLK@*;Sn&-R@uaKA[gQ22H\<o*Pc+8Jjci9u;WI)td_D48D+59H%.p4YUE.Ze)j,?krL2ef;o8^A6C7HC"-i'B3S74GCN1Z$7/r[UQ@To+<#LnoIL0q3m,+I^*@ElmDN;,?WHdt5"@>.`BD()\us!7M9%(_>pQY\"pe)\%rN<00](IUSnl1l'i$(E@,kl7h'J;lg":&k_9!i9(9]g>c($Sn$-gR</j<`VCb.,n"LNcPW-9@35$;eSVe@0MHl.%X`G]LNSI(MS)+pZL%7+U))0MfCBni+ds`ZPh0k9g2.i7.11lY`/YgVT/%":uAhsl0:<W>W1ieS`7JCFY_[a;J\4Xt%cCVP)?JnLn%]Ir6qFLi&RDjYHo?Eh(O`j.28@'#d+[fE*mF0tlIlN^8mjiI6IQ'm>+U5>qhIW%JR@r%uY2`<0>Z])P)>Wk]>Es%:CR$4TX4#qr;%AGQZHV_5)^mE4fskTkXpqPK?^I43@NUReInE!s77MbInf93C*6H?mQ^.]aE=r?YlgAklb$PO5Vi`NF,>c/i@_/^/4^9K*sSI.q..%6)lWHTMmHA>K,#RgNbC)KU`d':(rFP0#ZX*O$T\K9HhHTTBWQ`b-qK3S5pr!0>*JbegOlOHm]K1;rsID[:f9aq[r%WB\_YTQFNkO%9j/.D40;?%[IU&>Y%uj-_^HLD?H<eZLV5:R7<!fN`V!N&.j>2Ea=D)8/GNgt99j5TW4`P10-[;Lq,*6=KMc:'AfU</FT9p7F'19c%S#S`MGpBG"\>obYphrTk;aMGKe5WP*h-Z[`"27FfW6FQ<m3RXG7I0:Yq\6;giQedmfa<5`5gbV)%Bu/IG^ibp"f3@D#MTJ@64nmr%br![KcY;AuH-];^ArL2n5\[2?@R65^GoP6S+lJlTnl]FO`K?!%A6:Xj!\PjhUhuO[S[V/W%W"RIX9Ri*FA?r2Lu<nJ(%i2ZY3k/6%28-*,khJ:]3K<'S;hr*,$kt6j.[/o[k`,*m3\k@)_J*95$Y4[JrKkb?Q5tM9<fAiN`^"dR5V$*./MKd3pGNkP^nF3m[EA#3F9)fZ%;*m,0-IP!5T@auG#GtagnI[Z/Q*1QiF5'^*e\^d8DrR`0meA!X6Z:`Gp^2_+rO&eS,*e)W3W<6bg08Hq`d1+aZ%Q('IqA.ghHE["%JX*.u2B1[m)u2HH(M!cS^G[[3[<M'uBR)na)WUT^>a\u]%H[@hM8O18"]C@Paj;s0d6QNh#+";KFJ%#I&#LY[/u_;+6EDfHX&NaQ%Q,ork2k>p:l''Fe3_re@P/Z48Pc=F<mMkL[Ya,jX-LKsc.0\s?Kb9N[U^')0,5(Gfd6>*1>2Xch>Gh&:A\oYG^Zce7nP:jBmm@e$%p71IqPV\TWPAHL\5e,6ZJhI-"<pG*cYJuZL$(MKOS_cGRVLQW^/m>#i5O]4\o;S@%Dq#]6]C2:k0V:qM&*j2%^u$87BXV+IoOO==%%++$6WR5Ih4.U\t;K%LaXjlm>h.a;q-`gJoFeuiM-WTHA[8aie*]1moDk5Io;fuE%]O/^=2d#)lr+7)%,-SG.='PO%D:3g$e7f;5%g3T;BDEa0IOh*\R[jT\ml#h>`-t?.t9WF+ueNdlNf59*rhck_4'+M1r8i70o;o;IJciGPLXTl;5UgD*4:2?*Zf*?hWr^R=/nQkTA%?TSNd"73+A>&0uR^&IIdqu(#h)@buVeouQ3Pp0_b]1[<oULrgD<N)]gL7S21,G5kG46,:D]0#/?f\bSgDX)Rb/e2"KZ+mt<o<!_8%C3NnOrOY70N'$N]<N)[5gAB4+2$>%k]mk0'Xa`8jol'aC;-1A,n":Kh\)'//1qD1G]T:H>\%[3a:?uc8Ih>A]3h:F9+<U=CNE3&E%-DNh_NW,oQH9`_2-5od^oo8uZ6:NBCNNsY%:&Kp9PJUr/T/I7:N\hd>GP\eX6(Q55AN]28OlDY#NuS,9blq!`D$2O=&(G[#O8A)u%JO&^0o6'b1+1CeBiZG,akbC'X+qb3X$3H&bK^T(2)&7R='nVl;;SFNAl^hEsO&S.`Ptm#+(u-L7`YGIm,rTg5*]7B'L;S1,GahCF%GJ,^2H69Lb[<_p.#dU8JM@QFG`ngCc@/Si[O%3k(p:@B0<25K1$X?`:b>ilgq/SIoDQO)'d6lo<L=oP&gZX3hhcfMPpUq6Qn/bK?%35mBZT<?@adLbDdXI3Iifm@RArpI5s%rt.:CH*_TeJ,khlXsJkTHBS$]DI?6_W\J5_>o$i!AVYr*G-"7"QZ']$On][;7k\![boq>%#`rukLmRB;HHgF3Z%4fJE<H[Z24r'i:;0s$ojC&1Vc.9Z_kII[q/!(f7kae0NZt)gQ!9eV4fHF?V,Xh=ri=RtDZpkMK$#*%]?_;.%^L)>Yk7m_brT=IMBnF68K[WjV+lH]C3:=\Jh",5mN#pLR]lAP*qpl-C0P5p7p!H:6fKnh<(_+nKnhWhn5c'8'Ip/X!=`=&0Y3fL)%^g$:kGk1]f3$Wa;(@Z5Yj7]G5h9\Rm>il7,ia=nH#[[4N*IW=T8,=oR0eS1Vru$6TiYT0R?%Qd+:UG_aVnuj6+4gn#mG%eipn->f%WK)->]J[/;Frf3tf6\^f-KqPbW=N21IJf<-og+mgA[dHPS/R*E;rBct:@$mu&h1Q.>:[2>H@p,:D7Ht$rMS31on>]s-"opYhUDdY%\#*T&&BAU]'nY$n7q;#"&)Q$VMiW2!KnhbdW8a6^50164n(%_0>cp!llj(okib(`H7*>-ke%k]HesAq;o>Eb:!cH5Whh^"l;?pJQ%f&.Xd2)M+H%s=-uY(*p4nNcB6rJ_XJHR]1pd/WP8k.3)IDh"N(qrl3N.f*4C$Q]Hn*i36XQ/8+mHFIRg-ZH-lJr&*pTt`L6#*n!$%kr/QC\lGTAe#iOl\lJ`)\*Dl8<r4u7VZ0E#RD73fp@!,#GIWn6GIWn2GIWn2GIWn2GIWn2GIWn2GIWn2GIWn2GIWn2hp/&>:hb@5%)*N:f9`FoUhp)<T)XY?7?t>&/?i^p4Ug1S)PYk6BSJKZ%n/tJ5"&?[]0Vi-m&d!=3#b2\':0:_a8AL"Z3>$*D(iY1C6u?'NO,+hZ%c2<'u(c>hRFD.2)Psm&5'DQX+rC4+"^Y7=`=!.>e^Mf/CO*f-;mDJU)jPSjc/pa$Q]()Hl3Zb\`;+)\.C1/fps7\?)L\?F*NK87\%3G<P,*@7*,6^Z8n_T1k!BP$ZiZJ6Has&1!Jf?sH)(kD_6=S8;4B?]X-q9YgA(Tf8eNK.O_q"6ic4,@OWHm#<8COEOYIPAZS`r@Yr%YAG7O/c1&-&][=UFGte?L/4m6Vs0fc'=',8I)4^C^NNe0#iB](s!KDj[=<QWFf>/'.2p!;N/+1bpYY(CIuY#jL34&3@*_25bV)!U%nTBE&nfK]Qs$*U5iS2-HK6Q@j]F9OcG2n'50:)3-;NXq3MXsl^isb6D$Vm)f9JNUDGF>[uOi]a;*cV(Yh&Lk<!K1"V]26=D1EHPp%gXe4YgOSM^j`j&^gCH-Us#)]Iob;a9(GK0B,:!^<[baL7"rBL#=l9#cf_I8F]BG4ZN>B51l*#%(BS6096hkPYl:iN1brUm_N8n#V%;U^7?l4PR6M8UgPYU@U[p+4i;p>GqIi%$ck@&F<iYdD@"D.,(>4DG<iK'.:G-Yr_u2Z<jT2+asqIs$k\g)H*)n)Sj2WiD5UnWWLA%O".XucW2F+0H/HQ_gWV7[IG3DgMR4NmJio"B@:KO/_$m57^'N%TG_R]Kht&Q_)_3n(#3tGpM!&pEmAeBTio^AP;G@/g:QNUopW0p%,#/BF@;G@..sTbDpF'-X[R^#BG,IM"Xj7o&'%PP">1daLGZaFKO6c8:i+]C@VCqFYe7uG4hno;AWUm.EDBSL[,\bjK]oK*M+@@%N%\^kY1jD'F38&*nsR`Og,55[/:3pcUb1g]XX.Efpjb%^S(8W%XoJl"DQ=%csT=;[*F3Z5@WA=X8)l[:Vh@JbE,WH6LP*N-k;+]@f(%a$ZIn:%+_*TFZdtTlhf@0;)kZmZPBuRS*=O)kD-o%070QIg<e'[+G!(p2DkPIBi0/Q3@$qCC`+^'*#<W,=Hp_ohN3Tcl!@_]1-_c%Cc/>Y)b_:H7Y\shLu3*2j!*.D@L.9Im-<OrHihhI5r=QRPU>Atf.@#t8eb.c,,2Aj[?7JB0N-L*k+W-fJQn;k2=S-Yl3GWN_EL[6%c+jM)98>2'i,o/Ui<="GaVtD(Y]>'K(C-bA1D6d3:FMc=Liaj#MH'2,/5gmoClu3>dH*ZAL>s0c%ngoq.tna[L\P*nd"jt'lO?@T%A<XBVBt-Sl5fC?]G`C;;)n;MaqTWsN\C:+6W.*3>j2AO*^EMbWqSe?jrZKmK9-f_ZX6d%PW(6Rp\,k$ck(%68fsKaFQ\a'NO0_l(%5i$q_hVO!hO]Sq$;`+qX5C9R>Vo/4T[r.:XCb+MEIAN[FB>r_3]@6=JY<I>NO1sq.pSt%7^acBfC,\2+A>@aFlurU0WQS,3VTu&G%iL3]3\q=V#2h7alJLIJlLA9+cDt%,R?.rNkmg*B,2NnE[U(MS6rT&a[HN,scXoJD!Psho8&s<-p+8c1C5^YKg]S!(te/mlGT2a7I%<"E!VOp4B,fIS"thF@sLh0nU7<#Z*U],jtWFRrZX$sesQ.jC4cRV4Pbr4tm7SON=P.kh8O[7*!9ENBW^1.1*#I8ncfmA$g<C*0iX%bfqmjDr"9rg$'%(H<n"6gE.b.U)H:YL$KE`PDK*e[+@`HL&KV$oABN-^s$'Qrbbg/h%(GkodCV38@^AGLrAT6ih/:K)HX+YLN-RY%8[u[3F3fj7,a7"&hnRul+0X<9IC'3]9u9@pq8?;(+rS%-]crRI.H\n5YK4]-am$!Bn/oV:9S!\-rBmjY$3Z?3f4B/Y/Wap)k9325%.TK;#Q5t0_JOa;CNjV9MEWjKqLq,BqYJ5_O62M`hSh'D#mrKr!AcF].9;gU\ARHrf'LF*^KCHk4@2h+`c#uJ9oC'=j%GndB1K<NZ%6$]f?2/Lc(/_65#4dV_%<9eZG^KlX7f4f>^DC@qr7dZ4RIWF4gL>W^*;$Sn(Y75<`R'kb3#sU:@M/AgBpm".Ag@N]el^q4uQ.*IU%5s'(gdVZ[m:&,ki\:Lt2fs0jLV]u<DYHoD,:HWUrO*VH@qcqcbT.ip`.^O<h)WK0Lj+%dj7tRB!QI+qV>bi0@@H[bRY0\.a@_sn6%m_44nhD+FVHnbb/]ADp1UD6kf/[[u!]WPK2^cGA$21qR]>&?>jD>hngQguUQj-.GM@]T#l::5=B*kJgDe6'CMi[Wrjmk-F!eV7Gu%512X+/itadK:('&YQZ$XghVM-?QZ]BYeAq@KodGYf)d!"r$F8'>9W/.R7;ruk_D,9!qP!M5RPZQ'#7u8U9qCr9:&jJ>gR5%/,bWj%D-t&TUf?\o27EH<;W4+>D4I`-qL^U&)h,#oDI8E]jgTX)CNo;rZX/*Em^Dbc8o4)]o+?jBX=f4d8%3\nE%':.Sqc5s[1nMcCkSV6%k$8+6Pn'(RBA-0"*he.L^U3BlQS#V4;feB(bkM'*ihbAPhPa>95F$Da>G]/DX59t$Y!69O01TZ/6G-BZ"i?Ood_]j9[r?gnfZe6!%WgDJom7qE'0gosKInRC,V^9%*'/EAmPn[NH8[<Fs.)"/[KaK2'QWM^sMY>/"4rb%:b-2qEh+./>QJ0Yc.+4?CTu=qDFXWAF8>5h!%k@H&=][JF)C%69><g6Yn^Btg:Xo.V8V[9#)k]*H#XDBJQnUj)o=%]?E\XKh;\GLr.eiH]Mq5u9/CjgOkpsmJ,81EqXoIMhgX+bKB%S[1ii]d@q,^gVs!iPB#<FXO.0k/O[.>%j=""R]7TSR6K03dho/5(?fsFLq:2r`SV]\C3^qeEu0CF+<K)l0`$D20EipksjlF\9NFG%C=d/B4Ns@5Y&(5**qnu/NNG.H%>R\7Mi63]a(bEG[C^db>0NMp:=4AB_7EJAbUmtfoi&ItV<V8pf<Ne97D#VQFc,;bFk`-q[DACs%Ju_+;9'Pn(N*b"[B(S9iI':pm:KLRjF/f_Q;]iNu5T#XECW/96%thpn2+DQ73igu02G.:%loXV'mb;k&#ifeYa3sf.mae8a`o&9n%hqE:#>ZkA1ac);I3ZTjHMcJO]n1b<P]A#qZ^:3Q1Mr)G(4'0J2SM!n-BtI,;04\)ocAE);c7F_!\b*<tVg$Hb[<Hn1he?qAF8<'5%E>>^K<N1/-]69Xnh;q$Q8S1u*r;*E3(<o0f\?Zbi6Dpls;q)3>G5(g%Xjq7Fh!*eSnK[Gn/eKg(RS>/np\(.mpI4?9q^dYO0m62O%h-1`Z%dt;rgJ1O*X^/tB&!B0U\>`EjKlm2'P:d>p`qGrEW)&3!l?:7We'#GuSn"Z78"%O:]N<h'qG<K\V5LtSVh^,JbNAE]\o"@s%:Ra^MVmmPsm<,5tgir&U8@hB/(EGQ=`,9a=K9C)Lp[QESZmqVSrEQip/37nL.jI4.?Xi`"*ac=if##IIhJ")`FSk]Pqs;sLYI,Br%GO"fkHDqmMm5qFVaarrumHAB4%bAJS33c"9I9!&>72*kJ<`IL]I:6)2mPJ^3Z!*<`dl?b0_'3uJZ5NI`Wnd$8:,`F?SS#!J(T3gQ%j]>0IL>O$fhJfAbnP7psZA3Klfl6jcK5M?'<d:-B4&'F"T%-Hp1J'X`N`>"m:=C:8bo#P6lI&l#!-U)Z't.S@\`3qY1hH&2'40>(%gYG;hmY=K,L6U]>#OQX#/89\m&H;$5<k_,6gK0/c7KfJLmdm3/[l5e)$,Y9W4/As#?QG_uQU>NZ]2*W]bB#7m(<omkAcK1S*?\fN%C-+OHdR@a-UdC[<gG7qGpRBUiNiM%#<X+&g/KLF$CJIY5dUD_ij7F&-0[`h^-Kk$6,+URacCLOj9,FG.Oi,Y'\9)`((nqkRH(L6Q%GE*kBDl9G4cqi*h.?`fuj%u%*[H#B@de-URP<:cW1_!#lfC+Q5Vl,<ubu2:6o^j!nEg*JeS=Z?FpP[]pVl-08j6cfF_p_sql1+?s%c7ijYSsQ%OelAWWGGOEGF5Gm?o0?'R*i)M+3QC=r3WGfn3P>=%-l85BW_Q>CjFadmI>=_[*eNMK95-IMDarj#c\#g+Vs1,Ijnd!\%hYsK04:SD\pQ$cCO=h4"2*N[HP.Ne[ppl+Q.AKXO6ehXJJ#Yqe`AWtT1Xf9_Z05\6A,Z:0G[="DSng]9kmVX?Xa['k)(YE8a+SeV%D>(l!C0(/\.QXSA+H:<_@AHGsJ4c6C/)OFs0$F!SN?g!;Whj11;(<;Z#;Pl17A%<h'(3PK<77Dco:igJePW(->kL/hikD$Gb&pdI%%XC.Ul4.:+D]?:Q]pNPQ^.-KW>c8cVBC43aX9T-Ub3!Di.6AnI!jgH>`R9#-@l:n2l>^u!G,jBS3d8/3D5J:7Q)^1i1W-p[_MSKV%PP.l0WRDZM:2>^!ctRQHGnG6mV=DB@/N2*e<D<bMDEeW_=f8Zf!PJjQYuC%!M0Cut^W9!a^9;`R&.I(NcmdBiOm__^^/OFe_6-_\%P;.[('g#MHJs#KZfI?"o9rC`j\5Rh52o(=Epp42f:-fq@6ncV+c_aHG<RPd2/@2pt(8p!KDj8Q!I+DNbp$g[ZWi>qXo[TZO4XKb,%[nmPj7PbioI)==6Nfg3Qnkc(1?U$2Qq2[3GL0;7MGNAOa*7mCr6rfl5L\aKnng2k@-I)e$gXbV0%u(=pr5F];R\9QVF?#4D?oi3o%!SV5L6DGtC*P%%XZ2XI+.GLn/SYDb"@JWj9($'4qN=Js;.*Imr@8-`'+#*>m<FI!>UE75]OnfkVjq&XB//]"tRh3u/MlDb<3=I!c%+Le114sXT91(R!\A0)F(9dNOu-pEL$k)><n7/7[$_4%kAdd[Qr&*r;bn=><hi<t<]0[JQf&>\Y;YPEMdY;5m/5"+>h1-['7I?GV4%ja7!XA"5aI0'7j=QcA#KLcs[OggaQr]DglU`T`8sJgj?=P8EYa`4QEF-6b=mbCl7Lr,N":mD?Yd(dQ37L%X6?qh>T&kT*b9g;P%D%UB4iQKI6=7)d#mX),m@pmdB'Ze#Kd6#P3-:6#h[>Xu<ejr43@uZ#-C=8JE6cd'i%g_^Rkr],1O7=S./ZWHFY7hWdTiqXunOSUT<Z%7<UC\o?.7dHf"a$O]oZ+S&k[d;DOseiuXoJds:=gfd*U;VQ$(@Tgdih-UZ+ao.DW&7TV$23<CK?rPl:NfAT,W)4M7>*O]7pIET3K%<IQ8uG>>3A$3mFl](YOSnp.m"AA+bJcBW4,j\Y&b<I#Q#%ihLrYj^&W'-jr.,pW2D>gUi"]GR>0'#t`.h"U,7l)g1tDufIibYALd%S.[Y%g(1Gl)lD[H2fRrfIT[25lB[NmY[3PcA4Abt2)A;kDbFbe5niuK^Wi3P?Wu-R;L1+$rNCUi$X&t&&KaA<MYHppVnGtMNusMP%/&1:-,X-AG,7sR=_65.d_.(g4r"5N*o+L;8YKpfTC=Sr[9MKLEB&^fo>M">E7FmB$A&\sh3[!BT*#a0.q73%0`b_H^kqVn?(:g%V%`_7@h1*EQ%Mq_Z0><aIR<@Qcg%;1f`fkB5d60`Mf"t]nYr<BqCV_bsQicTbZfXA'e!pFE.:9/COc;4ut;3[i9fMS!d%h;=DdA9%!%fU5"l'6#0g8dIN)8`++_-Wo`&JoSI`%)k1;hc^C0#_L#P'FuhSCESLK+SN+;#>RCI]id-rqpAsldhXgp)Og@]0?k%MBlXkG-6N(R%JkCIHTT-t_\VI[[^#Hd/#G[%E3:)BiAJdN&iNtj6pUnES.U2`ee7`h;#/I_pWkLDN#4T09@K>9]^*A$#fSX$r:%fCd6.s?eDH(C)%aTF)Vnjm(=ITGVt<$16+WG>(#MN<Bb^5%BN?U'`jDc,fQAW*VrQah\%"/nQ7pgd%QJ1T^n:KeS0pHDpAAG4idDGTS]]!SoMi5\1D%C.n?YGL?$[R:OuW\LeI^JX;)/gE_\BP?1GN$#AFrRH/^%h7gTcR`N-MoH(q<ao=o<g3rZl0@r>sO>-Qq!G(%c?0sfc]@aR)5;mQS%.I96KQF*!\ccc_9lo"[Cp)9'V(JV=BP;#^tle:UE,YG,l=()VL,&SGYE=ZKhIk\4R/.b;2Oi+?^nKS?-jTG*4-qHsoDM7rjj$l#a%HJ-$dN-_8QQ-T73VThn!jmd2I7O!-!\F4\C";7dFV'F^AAn:rII('baGc*idBqr"'$ejeG@4oec@`Q"+H1"%#=]UWK<`%\3/&G.7%qGopo&R0>N6n0abjP,SQS57X0^E%M[h)aiQ?3Q>!g0<sGX\P;gC2EI[B;/@-1pSd+lq4<4CXIqKM@]JqB6Ddj;o0=FBPcgSTU!#s%.tR18m3F$brTj?P+jPZsQCP68X'%P'V'dJlM=^ERT/"RMKE3s,D`?J;`bl[jfPY)%/r)VcB7(1U"<^MqT1!s]T8]Pm?-F_0Y9;@A%*Aqgn<4:AIP,"Er,e$kHi+U`>dq[E&HhGY2:h)[L>/9_4#rOUs7fs5Wr).06qf!,8b_c8$IB3*ps3V,K$Z<uq&+L^#R<_JGp57Tr%fr=Z*kiJQUgLN-/AHCF6%FTd:#n=XY/fM*AFI9A!;5g7VmbIn)c`5Zt$^LOU#k%lJ')%.6o3aqWP1f614-Lu!EPH>`g/4koB<l\n%YL(qoh@FEWht=N49dk9*!<m)[kg\\K$K3\am7\eZ418T^)4@oRGD/*9],`R)3&cuTYkE'HF0elMTP_.R_gA).O4>$VIqG#8JOj]Q%Hf7pB+6Zf?=gN'#Nk6HLCh!4s_$1:,bq@ngaU@?YlsfXAUUf`#W#\+>X7p;ii'E%NRESJTfTT%sa:mrqc?g_'Y_9&?H%Ok6mY,G=%\7I<uM^5hq2VW,*#4aHgFI`JYN&sgT7iFnmf-7N\\.#=s_Q!.k)c@G`[T2prd(IS6FlUI]f=$mH[0su0PO!kpP`4bqg:sNM^mK&N%l.X^/jhmY71aETh#__$#QYBr-MRRd9PEKPJSFEs74)R`9DG$@akF+is7jInM1dpe+\@>.&F^Eq5d$XFU_Q5ma:N)o2.>ZU_@s8=(%PDC&1Q^MC0[iRG0d[7p]IiZ*\hhi*kS0k`UlBe7Oji:HQBY4%iX'r$S[cC-FJDACinkn^Xf:U6Ec#KSK?eTe*?>c<7*$aYKiVCF=%`EXYOoSB1YA*D\mkfDR#ZcCEq3u'"(Cn_*2MP5*PTHeZ)bT9,af-ucR@iF7+0m)gqFSaf61WIepG,e'ZfgcEF*^f*35t=[pB9/a-%O.aC77*Hg/c96ahmk8a<TjoXk5(_'*_0S'd]7dl.]"6Pi^cP$frCf3sPGK')b0+f%W95[;b$\\q-R2Q9eio=Xd]\:C^mCnlFCcY'%Ep#6mLU,<9@sU8*U25dnU.)Z6$S%K90UOMC49IH$kqAti00_#FnD3a>@64`BLX2MJ"-X/Yff`$YGt=7B7k`&NbE/5]k'//<=4!I%%?Lq.$ZQ7bE%XS=TSN&+ScE8:u)II&JZ`tNa=JPQ_;Y'nUf:iefH6DPhlt5mCS164t&+TNQ>)XWWc,8HSn6r>s\B=_u%NI137#5i&%"q_R^:Gi9DZGpNs^N&_^N%S4:Y=d+d6o^Wm-g&OSb1LM&>*WE@h]=VQB+GeNT-:(3C/^R^D@\Wr`=YXC0+Oj88&HK@\oFL5U]uXS%Li")aM2>!/RPgG&bq08rT,1i4.lWo$*8f5t_[#&%T3]]h]P!MB<fK<4c@]jl#/U'@/JKc*2)cWPPB33):$;?Dp4;r[a6+nn:CtQZ%Z=$Ep%+I?Z)Y46=R=MTGbpVY>1Q+gCo8'lD$tIS\(K4_cf&(s<+P#.!Ai0FK$RQ=C:@Gf<ZFWmSo-MTJH3`i?Rc;0-G"^/+3GT:o%#-86R*;PCl\*UZ:hfo#KHeb4ZV!O)LII$,m%4lk^gu@#*ekkqI)MQGBA'BaWW8*%^A2tNId<Q^!gcUoR6\\65RW&(T,;O@<P2CBB%KFTr_"TZtu!9@Z02nAKLaoc]am,RS`jB'TJUL^`S:1UePNmrZM-mg\;3(HBIM&6oJA"S)]Xa#jPX#u.+ZofEmR6?A'a-2.$a$^!#%Q7G1^ELoNAqTGK)>t.<N`be7)eE"&r\_q0GMi=ET3XfaYMi;(87Z5LQaEi%8KI"g[,4iLo/M^7OWMrO+OX7aX)&gEYUc.Sca!-0/%rU9]Q4bsY_>/V"0_:RBk$uH3,%$)1Z+4"bcJM8obpL$W^Wb6_91_psmSKHk_r.X<Y"m7#`n-.uIahGD5;H@5:Ip`tVD>hKQ#g3Gd%H*KGNR'e^\#:@3CL:Veu?#d<j9OuX5E;,k3K`0OE&STQpSE.cjEo;1`fS"6e%^$2:BL0tS]'5_s7?%i;l9&<Hr5I2h6:bo;KtSKp%+Lo_mOt+Z?`Nl>0Wug8_.qVjG<9?ITVN&kuJ!k(7S?&31DXh\0gcm]F4Ij6fTLZrF4!&8X&(Se^iU$O>jrFskHaKFf0>i=$8FY<m%iJd<J/0\ugnSm7n,=]VrGiiUpLNC0U@%Qn-!S`DigDGI?io/+mR+&<8mCG63aElLs4J;E8'8`0`AKFn*dYCUDC<ZKAB*.Poe\[$$%'.`fZV(:GpOP]A0qhU"!38qjD(mX9`7RQ2ek(+Oc^"MHKn&`u4mf7M>-P4TSc-*?^CMVJ5$nK(bmKg0_>I?J>6PD2@LaW:9_sO="%\0eEWpfTTXJ$-mDpA3cZdWim;CP,^0i&klZ`pNP)L@3bGDJ/ZSG\pW;;r2YLg[U.22rCLok[o6[\RNSE[OGF][!l4(K$`Mp#\?Jj%H9-bkKPrb4pBY0r7c;NR,>rIB)3K5$O,2:m5BDZPPnt'SM+C)&bTS/Fa,A2ns2&I3&Wqt)nTbSND=j:EV?@:FjjMY8SW",,^l-Rh%bO]+*bKpq1BBE]f7dKgWKk&M+me4J"6fBR5q]heRe(?73)"SD0j@c\H3>@M/6$2G(e'9!A-X%747%-jg$>6f.q/a/8qkjg3ZJGlU%Yp8.o*@)uF&`+Xk=frO3qEd&QlGn;M@r"s6@6fRe7QtY9^1<Tmo-M<'*A1_O$%gfW*9"E`c3p^9jgaD\53<a<Ca:\*?/ON,X@DM(%h&a)I?GndLf^rfIJUY=tL"tT&+XA]]6E9P<d-AHY*/^*/DaO![Vi*f"'Rt",L/or8)>J@^2+sX]_/idPh0rr"G-os"&r4[^:<$\N%LgpE%AB-l.8KsH0EG*1SV4O&:eJRWgH!NK2Eld#OrT+f'[nqKF3-L2.C--O+=Yte#=X3:)gk+?KC$/57WOCZ_3>RNCSPd)KLu:di%&?rL3F.lN2YT'C,[d01>j4h+Im5p#Ph73^$]h=BV9%Csf[g9V8=6fY4WRJFOV_r25Y#@J*hu!DI"+i=eTjN_G.u.6D:tuN.]k*rB%*mH/cfE<5qrl/F;`_FqKgXeMiCcU'6E\ai/E3^APdGeR3r$@*@!mDEGPV$/4DEMCL/dEBP9r[],\MZs_Vp!umKLjnm/Jcm96[SYV%Z]i:pKjZcXc==9BIT<`-kK8'HSiL!P7JR8h@nmL_'5!E6)j9/T'lWE$G:#>b<k-VDL&'Y`Dt?0kqYVY%ZQ#'e'lNjnEpiE7o=fJr%)t=<.ff@j-5M7F44nFU<6NUAecQD>"]h!'sg+Qfc'!7ah-(o=boM-K&2k_7(b%NgTdCk-McC\l/SWfR+he5&4Ril&ko89EO'Ds5=%I.W;nZa7W?4mcmCVR)2W1Yk8RLM/`\VYk^*:D-A\nW#_31nFTulb'"WS52W:),4`[9BYEk1O1gJSZU_q[qFu>3kJKTms>crNMa#q%DWlL@F,[!&Ml!c82Eu7>SM2>4c,T@5VR$q29pXWr7+9i6T-;,%>b^KL@d36#$I9>ZB@g**4RZrE58]kQRa*OODK^u,UZj,DfTad*%%P_"*Ni'->n>bmpA]o?edhs)IZ#mjC4JujR]@.Bu;OUfHSW!2&a(RNSPEECFe%+fuF,Zu;ZAm0hRa)B\/5P:'U?V$?8=P!SZR^QA%6^%RBo8Cj@5g1rSAKYf9EpF_?j>Ze`@*PrK(UN8)'8GQt?-JV<cAk'tVkT2ro#tocM^ON2(+9)@r:&LWrK2V9*a3X7ZcAa2+aJgF%)i!FB?-\mlG.Ji2PML9AJg]1:ZSifCAPedD=D!EP94ENOQh"K4UIMV/eqgDFep]/kJZt2'G<TKeh#/N#r[l,GUq*hR/n[n#2`YQK%1j;^j/%l#Kk&>[U3RQZI!-+L2H^5Q$0Vo*(gppN$H(qq8+qb%6d$+4'0=1><k0>4Fc.Cndg(tO\@J4cge\N6c/G]TmE`#/rborD9%^m?^/JNdopldsEKIXM`tknD=PC=4W1%&EL`qs1an64BEk'8QV_6LUj0InjO)SZFJ:p6f>>@TAX9'$kWo1YrT&Ygn;=I\sn5l4&FO%Wd.^%rH^h>R=AQ":cS<$Af=&3Sp9eY`>@Nd&Arg^[N4Ps^hG;"?gUOMgXX]X$eh"k"d2n+,2%s<_VVQaUp14-CF)U`#]jD@B.IEt%XSls\S0ckAf'I;YKZ8D]6@Qec5$P("?Noo3b7U!U>t7jTkBh@ETt[rVksCf%#IT12mc6`PnJmrL1?E8")%<_2RDJC87j*GF[=@#%%4AiLT9>ZP;Aelb5/$<3LPI*.C/HMZ<=gM+lUi](]+et>[RBJ)D+?flFI%KgOfupr8;45`q"qM)hBg*F&TU0pU6g"l%PNT'>-GuC&%jQ"J-d$3L,[S1sqj,#lSjio*hSb\SXC"mY%gCs;tYP=4D1Yb"OHe!2m#qKX$7gmH+<qG%KT=G)J\]'M$(g&:ApkjbO>*;rpXh6?/%Q?3c8fQ+`Sb?s>*gLWBon%$=&9Pr#emYJB@947.HSYMCN0':uM974?W&/1WOL\Q%NF3TC&o(XCSVkP\"c8?.aFlg>gq$^_a41ZdH%@r`%#\TJ<i_Rl380I@"bX(-0(>I>LK.63&9X_`I]E#8/A[Y#!pq;l*dqFJJGl_qEkY#ddt-4aRk=Q"2m7$jHf1;OM2$++V@X2<pP%Y-6t$=&K6SU&1rdraK,j\';2,`"H)^Y\kjA)<iL>ZfA!kPK.!bF%c7`RKE)c[me\?N9ffVrG&?(A=-9C_`[0sS@$Hkq!A%K,_u&<%BA2o]URo//>g\Z2:di):=_)m;!mt'FW,(-0SV+i=@%`IEBSbMorXNE70&^:f&.ZYtaaFH]/)f^+UjAD8dO/td1d(WZ&=PKob2Io]%4q43"g4HVr(Msu.4D`3$nSj-N9@>g+0=IReRkr>u%`@kA3G6smmdAoZgjR>*SP%GAisPsKRI[T(qp,_L:7H-HfSUJ3V^.EuLiQbu%BQ45iNr@`/=o-\m29!I%SV-DCH8cQ@k;S1TjX&[658*(&riJ:C"lYle%>itrNo6VnghAA>Ep_ND8h6)'E!jHT)Y:\2_se.;*'5/L%YI6cXSVD;/':5G+([AGoB*5s,kX7g3pW[WoloW^D)Lltelf%W]bi6rIjn?X!`UjD341\-QLs3&S8a'\#RE.>E3d$Lql?M72OS"OX%Vq\$C1l,`uoBSC#\i5sAf;dPmR%,`R/m7_7>cSj"A:)$tT$Xmf3O#JDoX['?k7L_I/I@;JKCrYEH78Z0X`Bpm5o2%IkZ['\!4HW?%Y,77PoC1*`:_VOVh&<WrBh]'ZjQ%elHhsQ8NOj3#daHa*J##m$c*f+CA(ErVq.WPY,ah0"=Oh4C*ij4\O^6XFLA=fRZS>7<1Sll&%FgO%^s':$50#@BADP:KFL]#qHkX,BRbiP)P0&bbej)#m=ckG9hKABdnXSpsjNM?Jd0PFAA;2>;GF%rWH7QoZ!@U<52`RRW)Q[R*A%1a6/MG$^FU008jJ@HuBgl,^'nJr.B=IHh8"6''3lm//H+X==KY7Q\A'PF[^gP?$]pf/KUm0cLrWO@RN`Gg0*+RlleVSBk[@HOdc1%cM&;P*b4k(aZTlp+mJmI=5NbE"!>t$@7VJP=+*@URkti+aR<D%3JjQm&dmifdb*1LiNq.k^b\g-2_b_gj@]%$QtI0T96@:?@pZah%,T--3jm`kWh9"d.)"YtL1C;'+!n&XY_N*&QS6E%mMun*d%YY`bms@U\U&]UudSAZ`^7t],`W-pYUXRq\4_"Ho1IV?@N<'H@4dh4@%fUI'nTPj"b.LOO@%&!VK)b5#FL]IpoRaSmD!<'n;#/[]7!W%cV,j1Fop6.VJUjP?]ZHXOA+,8lumggf-'<DOj0I`W(7^fiSj`BNn%F%aZ2mJQr=i6@@J:QYGP?rB27CftgNb3,A2Ei,X[_N;!%U#ie5GK>$A6A%3eAhDW%eSgbcTu=Tm;u=F+Ph45]6.hgih,#_,rVV#s%]'&bXl_cRD?9]UuDYC]9*:s$;>D::ipp>>Fgp?jFmY7/kYFc1KA*Ll-b%EqarS3eBGXK_#YFdtf/?>D$:!'SjO7W4YcXahp6.[?b%T0$_4rlQ,MqQ[!23Fi,0am8+"OC8rp+g7MHROhV?VM_RI,l%\2H!Onm-Oi9Qk1gf$"E>4KaQr$MIm^O<bonR]LKW9m%9/pErS1CY%P8El@H2W]Sp@Ns.19[<s/'dtc-Hk`<e4RrW"l<lu5PJ1[F3<h3I\=P&;J42=B+QpP=oCm7L=u1pl-%F3X.So'P3MT7\K=8G=Ir[e%qRL83'3=3gH2ZM=Y-DRnLV/*(=oIsumMYWm\K>oR`JREZf?`$)?I.mqF$;cpVo(^hn]cH>#L1:JLV/*(6G2c#%Ze8OmRP22Dqc`4%qDh.<,cdR![eVBDqUrirR84H.cg0aHcKk>MN-YBWc^S&ic<9c80l5TOYrm:q^1j)om.0\k^'r7hrFX0lk?jR!^:h@Of5IB_I$TT<%H0"XnD?15MrBMEn7m\s)XF?@$V+iW*Qt^Bj]RI<Ld^AB)Df%8lopa[d2c3mGpK#("E?9E(gk?mNq=nQY_UZ2n-*Ns2b]okL-VIK)%lp!C`]RGTA/6Vp6/atsqqRO+[M7_E!H2ZM=STO2]N-Y@q(c//Y:A;X$M0Ta*qFtJ/1h+[)?9_eCjii#K[Tp08:#S6KS(Gtl0SHhu%O1]r0Jt^(Ril$-@>^,6j!mBqUr>:Xi=oAJKCo4joN_2:;NR&oST-qY@P1MALRao_B\ortDIdW\XI2(l*H2ZMVLXq8PYf?((20+i,%ke:GOM5bHteD&MWMApa3^%,p_AN@@ahOD@t%Fin*1aXIfgO2(6nRZVmH,[?=&oa4g*Wf>Kka!V\=]=t#k>l:NfK*pU_E4aE`dU5!%h-;?Y>75"I$0%q-A!a+d5q)X][N#?9:h\s)pEPpXr%,e;[smnQNV2nTfOar\-WMXg.B2m+=Hf`iB4\'rCEH0VZ[>)#gcKtN%_poX%&]RR,XUj[U8BjeoHgPV5CA@<G>t^rQFT&R,Q>R>e&a;K.'pThI(J^d(VqX/pq-4q30C%q^oPtX+)[lq9e6r'P[ltYPh<VoP3>WR9%A=#S)3$1Fsk=QkeBK(-2G)u6544fPfn"J:nnEoI<DS8sWT3g%@QTr4$$Ocd[EFc?'#k)L'jce<Bg[`?6$O$ruj*g=i"]#F2HRi&K%0>l49X,4toH^KFf/\Q74E.$nh#Q^cWTg\EG'2h*D4G%?;#@srN#T;YEl"/m(3Z&ha@Y(`kXBP6S[\9kj8Cc]c;6%>fp8-Kbnb7"m%.J!n/X!-3Sek[U#R6,kZ;UsqA`$CpGQ0[cm:@]d/:0MX1Q;$?0=Z-gpjI=n."jm&4,N<.=*/\VRCS=.2jVjk/\%^"YV/e1'MFVl6%TQEC44'O\!YhNZ4YT6=Me7L+XFLrJqrE2OMeph_)VQ44bh+A+Nk*!A\P1N@oH:eC?Sp/`r6N]G2JT/#k*9GQAMnU0\J)<TMY(*ZZ%0;ZAuP5&m:.K;PoUe!7pIf`Q-cu5PY<V4:KPbdVm>PX,lcPZVk(.l;;aHK.%%Q2rCiW>lIj6J'GV:']giOa:n/0*I#4<cC3b0toZ%AY]0S#f5)(9R'B@.W+/M^rNlU$3!IEhHt-+GP4r4!Kt.Q$gb]dX?Uqr',L",WS6Ja0,&]8Q-ek*O7^06UV.qiGC1-BA\V]QS].Pu%3;abk#NmlAWGZ'sd*L/]hY&`@&Q)[g%TQPlN85u3r<6;3%WTt8*+DGdBPL==;IEXfj,FlR]Y_prP0$:d5,bHUM_>gYI>Q=c\?Q<8%A#P%@\!4HcjCigI]tEE6?8D83EiQjY]_:2f\Z0OHZqm6U=ZC$\p.SFjmBfXM0[KOV9?u$8U9PT)Ac*9%)r8i2j`@ipc:[E.][rrN%.M7';18j2+-!$%]a489!hOYAI4>0T!];o^.''^[7]q-JL=`K,OC`!&_9$mh3H7R+@LO2njm6P?^4K6p[ALkNnTQtmdX8&0(%kNR8%R>@G&#,&.q<sF3+5-P$X!GoQ\IJDGA>Tj$p5I"i$k5;chAH4;Koa/R2M%GaCfIF.f/>;J)@MQeAR0MGS%bX"o&oL%l^8]V_cd@LM%=S><gc4Q4QZShZ41afo9FD]2/.A`PZLnPQs)/""Veij]`:h_?b!m3+BVU7nub/rm_b2,+03!5og+:CXXB[(9(&E;)hMaZ.kg0_a*%7-)Kho)TA)NZZ8k"!&ZV)!1Nk[`*LK5q9=.^"t?SHki)hgNodM=m/oJ`7!KIX)]3!P=)-tg>P@R&>g#iG%*/?7pJ=<,)BA%Ti0:s%L*/fcD/9$s60,X'2mOrFlpH@__?9UK9<PsXmpVr"OkKWhes->nGoeN7g9nU<?Meb*;HgOG8IbZbhtP:brT=[UqZ.$!8mGDgG<ZIU%,J9HGC&EhuFS"pPcC3-+ZF.3UUm01=)R,g?ZsV!G9u^RVPg-YBS<dYlHeWKG:0LqPff`<$e_U1,J@%=0&e$)maRU4c/WtrHdT\_2%<h_[D?0XAUH)JIa26;NL[2*R:>[V't?cB94Yq24&D);IW>Wut5`2Lk[R3SN'DH<\mmb&\NID*\#qNDCemCV,1>'U%Ja7P>'W0Lt_%YVl$#j/Je\5APe?)#C5nV#B'"CHM2]n4Hgn+fO,ZC&oCj8?K(dXP>em@(pgn88;.D8#q+^jbF<@p$'/C.7\-dC2<*TV/f8CT]a!R%#j&^tC)PJJ8:=)mNu5[:K!;>Vo3!35jahc88dIM6't!]3$M8au-M4=XmPD;Dd#"XKOt@%Ag-]D^[\YUcQaZ#NO&Wql;\hO4.cJij%CEX9;oI\KB?sCu/5[qJ9T2`G6Z'T3DSNq;O=%6K0.A@jB-WKV%4u`Yc'En'$('Y#!U_dt?Z$N?D9L(j,Gr=AN*&s)l4\_;tJ1R'f%1Gq#ZaW,8j%88s:nB;$r:-N^r3WqA]^Ab2R,2%9ZD5%?-BK?<hhI"E?-sot(X4t\djp-VsEH+>*GpJ*pdC-]o]f%Z2!7(%C69"H?%WK4MZ*q,P]o7Lb#0dL4V(X[PC?hn!"J]T7'UY=k#L(6Vt+jWkHJad'ORJOk=*ObK/XbCkSUCEQD[H$hGe-pQEW:D&X&eMJiD/<Pb%%IF%N-]JR_+F3>=H*tKt1W(`\78q,uZA?YD@r/%K/`/)U!kmMBO=D1s]R_kS"62gtduiM*mddNZS7i`"nfk0<,,tNC!A=d*43)PT%n1CW+V=ZO=-,_HcUspeJ+DR2V8_sh&,Ki-t+04@[cjRTRMA_B$+-G0Oo3Y%:e8"2uS2AnpFS!bP@&;OYs#p[UT9s<]>ug\hAh^eW%(6*Zc6Lh]&UB`Msn^6c7EoHTs5nL)[gVU`EJk$K6Cd3#0%oqsg6859K:VQ&#;9E!q:)@TANKYS`WYR-EB>om3"Va'-e5qBV24:3^%&;D^.Ser*!\!OdA5<9FK6mO2LB0$Cf722EBLaX*WrEp<>,s*<E^2_AZTK[JYS<0E<EVPt:4/I.S4kcS0HEeS9af5:ue4WdI&dH=e%#Cgj"1M2;'%Ug%o)T,LJ%3LmY,i#uX!TZs_=Su_S--$4K2mu#dJ;KaL1k=$W=;jH/php4@D/R*4gt)YW`Md.`/7:RN*#fGiV/$b>%,0jo<?mf"MOCC+%50QE++t5k#Y"a")mS.p`E-g?Zk:\WmmaJe>Ns7<$GAQ8?J&X3*'9XOVH^\P):1"6Ta$A7jFVLsOkA74P$"MU?%rU^L-HjCud0K(X&?fR!A'#A$kU)1,UKYOpG)Ak$0#4B2oDCOroh),Tg?b^^:\J%F_<?HDoa+SZ_I3#Z"J6B0$18p-gAfB0)bP1qg%cgKW0:nY(m<rCd?DjI*GR(8(AGXa@k!m;-hbWjRd)_XlA#,!^"-sg7n>k,!>k36CnoA@L<E7Q'*[6'go`P;E)/lt8!Eh=8f8)#c&%n"q+AqSSlN6E.1sGPGgaXV!T*YL,c_3Bb/.jAr3a:+Z4=4_i*RrM!qP[Gjsd[ISbJVJ@H!hY!&a!faV>lQ:Em:*ok;TFo"=Y5=Wg%(gMn8L)sF=82WL/&^M?:0gdsPFYPjC^j9npGsmFSQ6Z/MMOup9k;\1%dR3h<06Dc6h:s"Z[PhL9gTc[[noggS0,O6FK/eUPE/46=%E95fPip#VqC$ONu:A*T<6=Y)>o]4QN_`aM%gbXE]@g%J\oS2S#`3>:G35*4BV?CKhU$M";jer5kYsK"31+$&ONLCL9*gX%44V/C2%m:7CnqJc(i1q%X`B?8HuFUf`^@=:sQ&B`U6WT1LSP?O_Ban*6)k9["<W7u$D5YOV)#8(\MFL/p2J>14ZZru1\5*>N1)a]9WF=ARd%m4l>,,L87c5d,4<L;uns90CoX45RlhZ\-fXa4ipU/U[1HWV1+UQOP3I_eQljZFsGZL^*auKBXe;*/*[NauMI75O;kFk]-l)<jJAN%%iXd!Z7>7<g34oE-/,kW_/s=FC9W)eJaG[s/r0"E@$0*+p4jkeN^k/!;;(XTFm_WXb"iZ/>['J@BcM$BMc(7?P8,6)8n3:-Vi'Ga%agctO'FBCOF^u%>Z\O&Q"u.o\^t)@9"u.o\J:6>!+Ja>tK:&&i@#mB&#%@5nR$^$%0ArO4@M$h?EDs+Ib5'j2`6@QKc+Z,hn7E1k%[#RB<fu%#CRA?`ClI'ui*u8iReP9bdWHg6s71<XbjF>H)0<9r(>"lW#?nA>:VGpD#m?\:?0Y_GLOtmd_K/!>>WN:j"CcDjWngi>$%]AQ-I$dD-jY!\l@*(m4(ep19Ls6Skg3<PdQg,uZ$6QeR(GqJTNC-::kZ'CGuS66i]`7KJ-lsKCQPG!g]JC+lM9%kGiTXMB\UJA7>%s+RtsOG^!ablNsI]_reN/.=Lj;S7offO=U88o-T;M[M..]$CtYnpIkg:A$@klq)54EOZUm=s)tb.m5*VXn8f_8Z%*9Ecr.#:A:c_%OVdVbQ%p!]Q^d#tchOe9pl=_+a7sA/AOpbTVo3O)/Xe97*!JC,_']=Yl6D5LFQ!_9B^88jib5/8EB%[Nk5dUb@34/ciL[)sFViB<%>0NtVp#>f?Z'BC_ZBPIV`C1WZc3@$6&"_E.?i^(O$'TEb^518!#_4LX>:WZsH0cZj9q.N79Ol=rY3^&j^:t&omp\XZK[m0RqHDWA%%-$j#6'@$NBb886RUfeDE'slM"5?E^EPBn:=Y1'Mo>"#m;sh)b6bU,Pos^a+CT3&aNsr_%%h./-UouCNQ-.,FM81]LDD$"o61G?n%`Y%hj^TQq5"aJisatG+)(9!S>_c(S"IPEjl+>Wt-r*j\a6$220pr2=L+qPOc7D)pr_(R.u(23+4i>9]]R@GNt`%<IR[\Ccg8.;:%%K(6"V]9Cl'nVbN"Kcp!ajqj5&$]naDjVO,%Ma1C)YC&a/pdGB1Ye$Z!^X"et^S'BAYdoU:3SYqk75ip&]T7qjr-IV[+C.fmZ!C"N%oHNVZS+c0O8f(4dJ#/';Ul/Yp-+\U(2l-m%lnkhdJU1IAj;)dr5q4#ij)NnNJI%D2Z^E5u+t$ql%4!X&M;g&#l9bXcG2s(#ZCMU@%r9q,A\':W[?2BdND7IR/71[.)@TQuj`BnP=K,)(#OD@o0E8l9&O_^f266H]Z8Ii.Q><k'rN2V^q^YMCZoQl*WOl`$JI.pNR7aCJ$%C[U\-"Z&<[a"Z7@V6d3B!oGbeTIjC"'bL7<.,<&k*Vn#a/@`@p_(pS\,!Mhh'AoP[LFa4r?4dGVMoG6@s#d^.!gBs[5r0)GZriFg%F"2ehh"#CSL(ZXb>GHL1?/DNMih]4il'9NJTk0A#oP-;$`fWh"60e[qj`g15&F!Om_BR6gTJFSCM)Rd"WZB9s:YhXr-%'?Yl5Xjc%5uNU)RuB=1q)koJQoU1R's&aib8$kZH>j?q[&$0^FSg1i2"XMJote29IM_W)EbFO=n^7^V%b@(+//lU5LZ]Uifafms;cZAf`7d7n%oO=[l&`kBJTZHIe;]=jQQ0kl!TS.JSBMfB>kj?sQ?JLZM9[53u\Xkt[`N_-FTV\6!:nj603^Zbe:IoFp,3o_uS8aMb_L<3&5ZYk`%ViSO`WLS510Q=DqJW@r""<Y2e=W9iV-7$blj$5F-&h:;;[?/>D#)g,S8^c&j9[9',c*^I.C3dM)ZS#N:iF]>/QL;C0Q?-EHO%dY:%!+XKMGd.1Q"*aIS:3gXn"Lo>[S9RFFKLYZFd'U,`c9[sS#no/9d$,n!Ia:*[VoiNt*icUI<SCEDRnJ*oo8_?h$$D=\REdl*,o]Yi%ED'AE[.YRUdtn;ZX6-8WdH<\XnaLn^U#-D:eVT'1hJq[14cnD;rnr>UVBJ)!J+>i=09e_HSd2!NQb+nolp:+%:E>8^HUu_Be&i3r%SpQgq%a#iSeG&,97!84==61Mb&B/-J1<d*Q*f!qAn[ns<"P#B?Z'Qkkh`J8N$7?ll)+bXt%G)8S[#)\Vk8e.E6S/q%n16I(^D7-G%]emElg>+borH#tO/FuYTNZbgIq)1]=J!`H:]L9>u_&P0>/N7\T;]7=2,sO<-#b7%%T/g@b5"J@]]EB68s-5F0,;MmPrLj:D!1%:6%(0#4Ym"$82kT-=X_#@eh[!GOK[6A>eM)XHo-I/\=lr=$(f-.;'Zi790q#.kOM3oF<1>6ieJI/_0U`3Q=F]5;+a/IgF4D&.>#H;lo%YGa'D:NCKg5MS_D3kkoOK`VJqA_?nkE*.r8DCu[bg/Be=?kf4:GrM3P"Ik%<L<#B'&b3CY0^7[M#SpWbm:S9YZN5h%faTW9gs'ZJ%FH\>IN0f>tlpXj4LO.)r[icZ&MSkI2\-9TfGacO1M7<_Ki1@c03Q?%ambB!?m9tc'DR"AN`%qn(E`.>e]5,P+qrSMP8RebJk80>'%$[fkNK`&]I>7gEfE=6&B(APj+g-OTVFU5lX)pVG9qWtLYC;IjbWM"gL??^G49BGp[:#0S'071@q8OTQe&SPadO\FCYH_Q-T8GdVa%/`d.M)jn/YkVou8kh`<H1<".2>rsK+#Gj!28O&U]&k/B!oNJ'*iH+,IPki'X=0=_gO-eU^;d1s=iH#`n:cq%RV*Q[madfc)[OC`(%Sdumo[l9/XDm6EiL-ACN`l*$;bAjQ0N6/NHl-5U4fdedf$Fd'0BZ</*ac5[N`QBd8MC,rH<(/$Y.S4R1M&`/or1_J0EapPfTs<B[%=&h6Aa<OY*mn*D[LYG3PftKX6YTTB+-KMlK'laA\KH:WPo+imS3>If/l_fU_,ks(s+LY!_S#6X2o8_UiK]"B=-+D$!"]CRVQ.fE+%hB\g8B$m'lamb$W'ZmK%ITR0,nU5$Y(3i#o=Z%P3'Y7num7q&d`n(`tf\jQE*N^K\,t5:eeoa;0VFROWXkMh6lY!Jd>JpmC,4O$,%./r#76m%Ecd.5;2$6c8kPFY[3_7&Du&TfRE@j[D-clUMf$sB2]mlEGL<+%.U'WdBH$VAQ]Yuqj=n[7NXp79J\%1?]bAK@ZhJP2M6%N&$*eL)^(3S"O;uqh/YIS_i1[mX'u^'>f%V`9p[ehE*si'D*PIY0"/"E&i9`WdZ'^_T3c$4R)D=4OCkfO].hn10N)[`p8?$%nPpj%'rXKtW3rRE,Opd.^r(W?7VhO8X9"PJs'sE?8VAeQ2ZLhW3WNZ>i#'rh6EhE`k'RT[7#:aCe]%O/0rRZs&9HOg6H&/R63MSck$eq4%*Q\4pOdV`@9K^2Q&`LSQAoYp<?8lqLZBF6GGEnXIi._g'N@Y:2O]<Uo\(e\Onr>2T;SF6=W98h**][E'8Gcc'AZUa?'U(od.e>U2%J5D.B^#<#r0RRmK6+X:,W.?UPfM!#l2JDY[dJ<Q=))kc.mEaJ#b0E8'k/Ffd_OpS2SUlCK3BWLT<UHqR_l5$ofJd)`oUK;M`ihJK%0=M4?s-ud!\O@Y=k@=qB/Pc%4,R\\K`bhFpg+l_[gjl/gU]Rrk\iEYp<juk)[S3o0)Gr),(`X="$3!qOM-3df#L-^e>Gh%5IA]-+%*6((P$qeP[<=Z\1gFF:c<&s1/gF4/lW>q(lb!E>#fd\"`<&r$6onmXV&sNm@.YlOZdrL-Y8/F''Hh]:);IA`mN]h1h4YR?0A&X]!%IdHS4/]bcORZ.hi8U2:6LP"@Qm9-POg+D?((:mSa9fNIlP`aVO/QE+;>n;icH2OoG+(D]af(NRHjkH-APce#HN`Gk5D[+fCK3[j.%==%Q8RG#!jdBSRTV]/mAmOi!p9cg8qB9<HA"-HgspR%M@,meq[$:f)nQTXYb'4MN@MgdOuIOXX<>%E&Uo20m.1Hk8Y\)Tq2MI/n1%^=kuefTl,e_$PK;E%h4.b%&mhNS9o9:?AhLm]fK,VW^4uXc_FrLE'ZJfTbFe?HL,G!/han5!J_+b%f>o]]0gHN#46ei#MR1<4hj'%6fRj#m>8l5Zd4oWH,os]>WH.X;>f04=4-(;`epS2=J9WMh7]:hV6^*6A\"j_B#ec/o+(+U0JCI`a7BcVNBZ0TLV]W$#J[3$>Y3W%%2VAmSm9d%rjP?VRic=$e6FEc,B]-qEKrPj]*3G[JT7823D')eQG*CeRk4-X-AI:%eE8/@]mb0jp[70PEH-6n,U'QEH155;Kqc]Rd%VML[O$8,0Y_Z",(6Z$mZT.>.JBp'oMDRo^qq^.3$29C(VKt;\qC<&t<FElN]>F,'_E(>b6+(%'t-n$$#CnBEjCsl[rYVlh\\X?:n%'2Ct.YpY;?\Qf#NXJkA1$@g?hIk4X-p+b^<9V*iZB*]?g1"14PpCCF7b9:TGjpl9<bI%#"R("YGccGfMYG35kd>?.4,eLAn=Nj9S%X\?Q+1dLV6@;rFYB\dmk*(J-koTqGCYe%+J%c0*eO2'Z$*Qot*$]`6OR8'/%T>bpO'RicGpu]\tr@.Z52W5tiDVV="BbU;@pbcn$%InN$*'SsC3&#V7$OpD>gO(Jas"MT(r1I(dJo]S1O2a'm)f.j]&Earb9/-:54&#*DuOMW'$\C'(u,4]Tu@UIafqnh[^Tb?1`>3lXh%&dgFhNVZ<8l=iV23PIMXdpM6Y50?!C%?I%)7mAW(4<MNi]RN>H&=3p$Ys0I3E/DGNH\67)i[hf&dJ7IkOUFp.]@D&UmX,^Q'YS&b%o_'Pe+T<JW\a"hV-47,u$`b4:pkfR1&k<>B^56g<]1]EM(-'cMLl$^;P4q?*7<r&qartIZr_tNo/b$bTJ+7Kj$A<%I;2?Ycb$a"_%UU=C>M3(`?kP#)9dAOA]R`OrneYPA9m3!`U+6U%a\!&YPSZ_e;'I)06+EoQT_`n_?G'[7Z-0P.UFK8(',fn<P@1.#G/*bR&`XBTc%dK8>!'Q_,V62l5Y+0:>19&WkL!-A-l\G58[DX-[9`<Yk$Du'Q-G[O-NLU5jf%N"DV);&ABp"E?MTg)/*&,L&SPj'sIZ%SI6]ULna%\(G3-B$d+_f%WBHOXdP_RHXN\$(X43Yu$1],cT;7Pb=R'$-.bBNSP9GP;_1*Iun@S`k,tZ:M^oHE`?YQaY@C(_j&G8\.[+XT:!U;%a\Np@`,rk_.E>JJ-gtC/89PD(ZZW)b(UB+H#[mnaqhl$/9)5.<XHZ*kJ)R3!7*!P*L>*Yu/<o_n-<PD/#UM"_q`U@/Ge%gWVVaF9%$N2l3GTq`5-!GfL:D8h3Cm$4F3tS&2Kmqkfi)\Y>E2"Vd[Hf1Ypi]TG$ik-[0m^b==]g@LYiJmdQIJ[nOfk3P1/=5+iu#GGDF[:@%C#_a)#DRjg-_B.Mb5C<40Jc$Mq?OHq95pe[-'p1.o=;7H@m`G9dfbe7Emh>G^s`+oR4@ZDoHa(STd6IA%q(/TON$m%HgJ!S,qP"U%o"G(0(!,NXl!Q-7b6Co.j%aB/12+G3]>8`"4ch/[amrH@frGTdXio;18*+&er8$XuJnr2%iM*]gQV3ZLNF&q+N0@an5)ZI`LSe:T%lD2`;mA'TFYC5djSo<3'DpmI-fuGtMmVY@kd;tJ*GU!nc^<\$dUQ$>.]HoqMn_+/B*A*$ZdZK-\`c1Pn$@'LTHCt#IhakCZHeB?<%C7<(*)J2m'pQ,&m%e@N>h!W0VZJ)qBXt,-3pCapA<]:DU%6Sid[_jBm8+d;n[/*lFP:QWM6h0K?$6&ieD((RG0BfrHf--RI.=umA%.26WC[R,i=fe:FSS-OnrSC.[7_`Kk0naLqAQllH=65&sfmpBTKYAE'lNN-E=SP]8')E#JK;.kOiK$hlT)Dbo,`CX.kH:m9s&gq6b%l7]$E;%TjeIZ`_PefmGLANb#_:7E^a%:M3Og(BMh5:S2<LKj+B2(:Y4*'`hp#DYW$B<cfZQP8Ufkde,8'3O.UfQXI?',EeU"C@cZ%>WYV6-3$@7M(V8=+4mY0bc&IM^8IeEcB_/UqWV<QG6<:8Z__\gQm=,Ga`5qs\HIbLAF*cWIbp6"d<b%TeNUR/N3[kG02@NAL%N`h%b?ib(:XQZ"8#CT!21.$Nj6YP*&Y4E-C!,kh;g.O3_UGu=-/"f-]TbUc#Q;MNTmK/4/f,U1TBPeY>QiDc)ptL^PLk^P^TWE4+h9?g%9R/eA9TYcXPAg,JCN;thZOYHBC@Ok;B)P21`BC3'Mq(:(p3>!&g=MZS@V-4@:49cu$>Y,M'T[-=g+<,tM0@"VAGbGP]-P,)_#HSY%jXuBqBDq:_;soh@$<csal((K%F;SUF&J0X^9XI)P2_%U;[fguoKU<gaOZO-0.<&F''[]hf%8T\-@.W;k/ZJ+Q=N\2!hPt6'-)gkX%7km.ERM*a"WJ4B&RDi"4\5[&L1mUiFi$<1hTaA8U>E]4<"1%]07g;$\;H0hbeNW@$JS\ckA7a@WXR'hdC7fTX>l"T@*?l8OcoXUp%/^0ac+I`+ejIc;TKNEA8<pM:G+!rK71jm5M@(IV2`472:0fE#93nY`d%S9=SQL>#1d%a.a;)o7[?:9YP/]CQeU\POcn.fm1&r_to%Og)OmeR_9R%3(N#-$0iG,\+cqJ9FK9oM2mU7L.[`V^%dlOWJI;P`??Wat!mY3.iEmU.@ga"+d\QM9f45U*_E#%)8O6#08NSs!A;D%?aX)MmcslYId0YK$aH,8^qPI[%@C1mCD3OT@WF0@,h0d0?m[Sc8k>igT/a@5]8<F+BuVElnWf0V/?9]u6rE[_&;Tdh,!T8%D%*6p%(q].'n2VG.r%Jo\0nqsGAJA3d_J;'bZB`:4g.@V"F?6/5dYqP5Uhel97)(!mU=*o%9.]JP\:NU*D7@TsAS)PFaSlH&O^Jp#263?)%Y6QF)04MW4KiNk1]^J_AOpt9d0fR&#Ss"Qbf6MOTmok=lfMn&5l`^+m)'Y'.S(M$#8^.CXDPAV+-e3>C@lJHWq],d81%Qf"T>Iq:%pt*529W,*>qer46PYKB1,Kl(bAoaa`hoM&+bLPd9N1K+ZE^VA5aa5a*S[r_&NBlk,$HU[l9F!cHl<;WBT$RN&_ao:C,Rr/L=SDo5%!Rq"75B:d5n4X$lL$Dk"fnn#rl3hreEafJBEPU'+da6F=,^ZebdM5@D"9@gVchc$S<.'cLl)+<0R/#Snedr<6`+&ec86bpP.If^=%`/coP.N[6CNl;Zlg/[365@oWi%j9^drIj2jM=h!RRM&K#d2E+U5*h&V\\!8"5L79V?f,@Dfe]Xq,$J7#"5)X(4lU"0a9u\@/4Il+%[eBc=B=-@3fbJC*`JNW[;$YDE_URY1d"#d^"gi5=%cZ>a?L/rp<stpc[mTLPDPMr,8'nK"95"o4nMdt5Z`-)BAB'+WB8;sWB9V+t%iF9ILY1ts3iI'fdk1#<&9JGP`4fOCQ/iE1c@6:N^(u6J$!Q8+IfY^F@Oo5`(qt1O8XrEe^-#`;+D@b4KNJbJLMcB@0D/eP0I?Yho%oR[VI5Wt@q_;7n_XufD1T<WMq6;/n#DTC=,DG3c5hda=Go[T2AP_7TA<k``tX.T#PZ%G/FH@#-,Ed"t:0$6cS8^&t<\kG?XK.SYV%qHMBYH,YlfQ)EaH*\a\7"BgDrc@XVS+=sV0XmG^ul/etmKSpI)`QgfZC-M6qnZBg.<pCGh>_Ik3B.JM2(QKH+/)@(Ie.;n@;9;7B%2"!_boQ.;1hX2H9J%#U_3Cs.5d!tPQbm.f+(KAgsoHOgALTc77XrEV#_8C.5r1#5F7cef'eF%JFKAXL&.(VQ&]\4k@f7Kgd1TJ&.%N1eQhc_raJ'SZ.<B/IKgJ.sQ-s)7oP(^F*^khA,o^D;pp.+"18kf5m`nem[Tl/9=.Z4oD.5!2HR-G4ODORl@*QV@_8S=3FJq-<D.%'d9,8dIOrO'=\<]WgZnPZm+)N<%08/[@FM!SBE06L=1!>\p?dTDuc@5:+;Q^@iRJR6."Osp$^I<\(UU:q0b!_%=YY@lN)[pIg*7<%;#iu6$tOsPB^k_-Ji71US#3V^%-knH_3'oVN(1TkGgdoaR7U&?Lc<#kJ2a1!N]0="]d'65KQpFCj37[,9p1[>SCWY'.Z+7#o[='h%Ia3M>cZu;\q1KliEs#"Z-Sq0t&L'qEWbG$_JAoZiYjn/%5d;[)LY&%-<,HNGWqiG9Ve%*S)(Cu=,i]TE1*`m5-APU&aZJK>-\O??%2d"P>Umak*7Te&9Q-th1J<cB;@HB@,XC=o\&[+2<XI2;gc*FZr1G,(jB'$C7^mce]1r>."A1fHF#VpN"k*+K*:eQFQ-+4N?X-,Li%Fl[/2NkCh)kL,0!9/<CT7?QhX`PE82"??'P*DiFtJ<[f325p<g5uj.c;NWfh"DV+8C0AIU6r8/s#V%@dT^i^-<;l3`6'_Jk[Qa)m%Y,&J$RTD9l`9$&j2@IB_J2gj^,*%q/`:4HPEVeG=,Au(\?--ZA)-L""Yc>!lPSM*9k=#HJXAB.d(C5!FY>,V*s1Nl57W!<K?T:F4%:K#Wb.+=EVVANHl:aRBGQ#`tr&eT!WgXG2"f$.1EE_.Q%B2,UBQ"3qC1'Uj+R0Y;njfn:g&Q\ktl!aN(S#JO;DQ7<tac'io+W>r-%6L7-/S5:OT:+t-0-^4mmj)7_S\68Q*:!+c'))Df^C7tVX0,%dU+r>lsQ\_m2DbgnEs%RV;h9'@(nqT1^P>jA=0d9@&QCYuD*LRoe%"EuDqm$M"_.2W*n-.JoY6qmGa!C]FtE<[lTWg6B=h2<'lM)pQ,6\0,1^]HBh:Lm=PMMdd$*eXModQm9CaUB"HKN^oDQLfC,-+sFB%K9u332"dl5%gpRWPBgPl6>*Y.hU@7Uf@#GV[q(#jJW[VfJEG964C"srZ\5^p-r@dgF%KMe!NJEY=;_pt&5nd@)Kh<>C)S.RPgn2>%P[mmSZigT(7PgCVLpbZ?,AH!BY)RmBPPMj"W+<*+&g`<qb;s#Wn-U*=YGDb0DoiD!7gq1mTI5#AJncpe&VFK4U/mB0Q-E`S82!:*%[?fErn6=%L#R[@J,%q"oHr?*#2-//@a@)5Z'l+s9775SA>N-s92ZbK]6]fEq*98]J5nm);6@Z)4&`BG4CU%lcG"e!;r8`]B!tXse%DG3J=3uUFE>,:X5P9Jp10?Y`l8mVrnM3?=%$p0ne^mUY@j>8N?!@-=JJEQMrE\aNo@Io6G'&"A=VjAP90+W$,L/<Gc9CpHmmm_g<%8?\bKR5JFX9LfW#L'8E=6HiK]16/"I;BqhTZq;4@nM3N")-@Mb3G('$*^kcSlc>`^9JVr1o)]bNL2Mm];ECf"!'5$h0;74<HU=-R%p8FY2&nS/W4'DWfl!r-l$*_d2bg:>\AI)ob_)<%m3(b]7J=+7iI?F%TPqEQBOJ-4oe#:XtPXYeWJu6@V@+9J/g@=01[8;^M_)'2:%i['Jrb]oQ"QA==[9G\9/:Y(jM+-g/*+$",Y!hYK!e7&o+G3B6u*56:46p+nT%@]XELJ;YQ)'TD>Y@'KS1l_!L3Ls4@\FWgfAL.f@%M_*iSLXe`\Wd20EOd:4um>p1^Q>+IB%,2;2#uQDPji.44$,I8qQ!R**\_`Je4qUSt`AC+\$r=kuN[Ko00u7M40gIBZ4'r2:$-\9Y%ko4==fefBV/Ia;;&q[$'%PJPt$g8d-[i3[-0;8>A3[A9N`1CL+4g_%BAu7n=UnA;2`l.0+_q(;3"36PB//DuT,KX31Od%/(>F9;S%C*AfbU<)D(9$h@B7`Y]J09TG9G#&JafW^I(dQ+!2iiXsjTc(OsG",f5ASED98D0Z_&>BF6(``"(QG@kDORu`QYk==+^i:Wrksc1Z%M##(n+sJG5dZ%=?kS221R69_*<]%*>iauSG#a.;'C#D2)*9JPn/M3C4d1(l>,a@6d#``R9C/gH(rb5#=N@:0/p&8Vr,9Vq;YGI:b%DoiD0`t>>'YmsRn%VI6NGfk#TVfS[SkBN4AAJq+>)-=s7DQ7`[P\*$ZYEe7_R^SICS=4FD?7%C5U:2C&I\ZWbENZ*u9!>(P>]7^m%T84j_JFj/5YUsE1T!5_i5ro'N'ApGJS&@r_`s&o!)XeqS0%Sto6N+Lb7r+s3J>f9_hm=b_+'OE_6,kECDb!I_Ui]Z(NKuC&_O0t!%FNf%m7]8:aZIDb\:X]+)0pZh7+9>94CbCc0_R9%l,WBE4%.5VnBg`\$><<^D?H)8jQB4+l176DQ[@fV(T4prE$13d_QBfRt7+Mc`%8P<e2VFJ6`>!d0r8#=fMTV3s*iT#1*dDKUAP,<Sk\P1%B7c>8RWY13<bE+ii+F;,M>Xus^Yua6^['$,h5m-.Jf?eK-1k._A1ln]s%]aosFfcYc?"lU#;YMM5h6*KJsi3a9%N00DWOQ[NI/^c4$:H>e]7)VQ\XI#GDUdeC:\1EHBn684H_&@uq#AGm0:,#dA"1PI+GV-.'%TTMfF&L/mt'&";@+t_!2Gljh+[feUNZn1o@9,[h><-g,WDS7&8A/mOSCKXq%Z]oJ-W/-.9:6n`_?Y1TtJoW!ET\kRmBpcNTH(\H1%(DXDK9?;K10TACN2!Z%$d#q^%HR!b]AJuCs#Vnq<?ol\ch<Nh$P"'s4MUs&ieseD2`N_c^o'h0If]FB<Rl$s+`7^N:aNN"2ZHHpG%P4A5Nq^Ca!coWa$o1;sdYGI&7.(g@$)fKX_RcCTO7,[+mX%Xr&K4&ioEU(f9U#@uYgCrL%QZ9+fWD"H*(KSQN9:j9A3e,7K!JL'2%9U8:"HCYHZA6:)C\%l^&REd'[1RsT3^-m.^#/k<A@-B21!TOI.;8EH"dAWpW.FSln<KQi`:fLR(;_GCihcK<1@L?cad9`8ZX@u>W%j2pHQ]X(e?7*6A]?=(M!<*mS/9AU:[5^@ia:$&.uCXI..G"e"^pd)#ZJVL5(Q84IB'dR`BqI_ZPDS-B4;[MK?SVr"V$#V[U^)XP[%idqC&,`hUE?4#"SQ<J,)DdVDUE_1;IpC#jXcsHq(ib_[qB%Fs#,b[($"?,g'2CrGX>%=["XV'#,0Dk3DRIOPAA=^+n0_KP#OV)T=%Z8+$M#t@68>l5VH*cG/u+Q0WagVfCIMru`88Ks<gBQ9G?Z\__-m/:;2(Mc@CH/RZ<F8!6ok1>:Z4_XkV/kl&_I1P%EHfl3Z/s5p#%_s]M6!oMe'LiC#2&$W=D%<Ep5YV3,TnVDjT'NY:"Zk93=^MG-6jB$arCni$0llO<g$YerqT^-7sN;$Cq"N-7Wn2ZUa_mU.f2q<XJ%]K$9Y'Jdj67(UTV7l8HMm>@<7.T%L/^hMBG2QGQq,gBsQgZ_6jfWRcSbO$OF=;YNqI*3=Qr3ThF7gMo+<!D-13=55)3Ff>;2(.gF%4eDDkQ:b-)"FON5Z[F#G1B)jeR@r4ooj7&iI)h'8*C5`X8<+WL92!,'aL2ZiPr9R)(b2#Pp31B,ZYAhjj4X!:6s`P3.L7UiYA-3o%'?,3C2@Z?=VO8c+=7ULne1sf>+tpqbo>EA]A=^cZ\Zol.oRtWX`$(;G@k)3`13#FBXV9U`]#DP]oaPO1S@>+TKisBi3-sA,o5hEE%%%uIuW'\^:em"lV^4]XM*i"#fZPmhNeJNq6k/78"a)dWu;Me#/Mpnc"m<$/69OZKWQL-NAe%U>gpEQb04%IHU7dc7+lrYI6F)rm&%1D"/59=lrV$YLe@,/W<U9YeqEgPA]i,I,/&nGMCc!f9<kONFS+2GbZsqnF7/p:tL;$Tj*oIlj#rfPT5OI%sJR4hC[EkPY)e>;Hfp%MCjdDG&26D8-js.^B<&bq[tCd37ZbJ_=%uR!=0W1-4rge0q,Mn<^I"#NtCd32jg[gFuKp.OfO42NSXL*ALo*.c[V:K%r2R6hM#c8%6LONbSd8<9B=O;dK4g,XY7-NS=C]2PO8G1_jU3,daHmF\,H@h8E-c20$_?)MS;R/*YW!?/9tj*`:tVo7G.lVm]#Fq=fk2FkI6\P$%PDcM"`d+gaCWlNgSU3GC]NSqjPBDI,gEJU?['FgN=>>!u:%-=WB'ZO#cMER(We(i8"]+(u%1=C1rB#VmF0X&2EKMQtX`#c/iah,W%cQVYJ[m3^M#_taa!Vl4oR7&:)al]:eN7@Yli9b&8jssmC1&[K0H=?<`:Sol2Yb0-^g8R<(&1,T;S10ih3B?cPk_b:Xgi\UAS9bKP%.]G^/&&kho_Egmkr<%Bbk^EmVRm0geGAG;ch-h@EpG6B5)4`uic8_b_PZQ_IbrAb4d64r`Wbtb-LqEQY3#/"YO!Z@TXQ9$#mDVO"%nf\``ci^V6R!,R#l\'s,KXsq@07/8hLkM<mEY=4S+.5r&*R'h,PEAS%1Lhrp?KSUaB["Ar%%gZLdR\2ZR?b+@7be,U+Q3+3ZB5j`%f2>S<`kYKZ3K8TdBQY5G9@8_JNM-MKBacS.8m-*^102)C.#l&S7Tg-P7@TJX5pNYRAld2Hg75A)Y3:Gi8<%U'4!;Q,31Q67)*/RH%6.!Uma?9e14!NAqr"1.sp-:AKSqB&N\'T);5V/+TOtL-!CM,/_."CL]^a3]HCnogKBRTE)mGhF,7q-9q^?)hOMG<]#Ihp)%5ul.'%G_A@%)nu)0(It@m$*Oh5o0[F>7(#)j%8O5b2MjE%W6'DjZ8o/B\S'HQ.?guOlO!3iE=6kMQp%Fq&T!#K`/f^+OJp<7,Wrk4cXX%1%,3#Tf21FWOD,`Z&bp*5qgLs4a.`j5:ZY$X?_q2P<GXM+jm;a7MmMSb6VBB9Us#r@4$l%RB[L:8@_hkitF_bWe\nAg5:DGi$8`<'I%$j)<M!ehOGKbGbtWMGM5c2)#;aQ]FWn\At=K-'Jn(IM;UCX>SHmi9WjNQB#7MfCZPiLm4Ce\t,$-9!/ZE"Bm$V$j!e<]M(a8lSA$%E16I+ST]>JNo!")Co<D./+Vk[<&ik"_;&:JUY^L@aP\qdoDSED4J/Q%;h<pRUr])c[Y6)H7U,ZQ*c7Z:DimQmRE=JhWGJ#ZNtlSH%-7Bf;3Ntm@6t7T2JL@L9qL5N![)e2sN$t:!h[p;jI*>($TnoGJ*K`TCC5<UN[&/YR71tm((8k<GCned'`b$1'@Q)Yk_"R_L@0sKL%"4c;lJIm)g;&k%+N'KFd0N3YZ9iVdg2^]c\MTLi8e:F)f6`ml=CT8el<2,Q:i\]tfm1_k_Ohd<S?En=EWM5mglbLhfXscMqB1;X,%cP>PSRk)X@\>&n;F%,o8cP>R)nZ4-'cafeJ;um[-]P;'U*%E&^+uDTocGdJAqPFkrQfuAbhI!;c49,4QgYj470424#k!UJEdtFPN%&KD7.XZ0YdVGSgA8K2Z<ougBn,4b^dMp1gN4mga7]=;#PgUYJL:'Xj0g$/!P/N\e]FqQ/Gc0MdAMR?KDWn(X<<jc7,,go4uEg]pS%1!tPR=.[EjAJ9d<Edp+hliUY56(O4Y>PF:&LNuX\GS.b>AquuZ.Mdr1PE>ID?I+A;X>m.'2W_ea*XtRaliU<_<"`E*?8TjfTg-s"%M:-H'b7TTTD8#^n*>*$hc79*X!i6rc\]/u;U<&,rf$&i!S=ma0[_t`C7LR*6CD"]^SF4^.*Uf!-"7kOu8L5k-/O$A,fe2IND*t=h%[E]:Vp:6Jd$#t#l[dZ/5SECXI6o@CtS9,4Dk=!PuOg%V\AshjKonGIQA;l8r(0HPogVi?"6u"5t4<S&S84>#N9g4bQffhL'W(`8s%cto7ZMhI<!Obu8SjQQ((aAkc7,2##SU>G$S\0cqJ%:^=i&a$GE=lJmOV)0_<W@0_$9U]PYT\?6@*;Y4tqo"VaqdgcWAJ2:tY"R+9%om%Iich;WiZ.g,YD[>9B3tCMBkeKJ*1D2GI_b7NqnpN(ZlJf%o)?"q>(kJnd80fBN/Okq9ffn$->V1.a1R@E\jOu4n5%EQ(pYR0X%F9fMO$]2O6Y5Ht:I5MZYbQj;.7c_i&CNRJ5WR=f0E)lnMAKm8u-DQ?>[aN-BoBqr]`njg3djf49@!/kFKe"jr/mbEORu!k))&_,?%9FG(8]Sb1t"ZV6@Zq=OL&m9*-H>&YI'HcrG0:/d4MV1T@U*k5g:0=U&f8;PHf&7R)BMD[4Dj_fHj43uE;4kMdj&mliOL2`RLK7fB%jE92ILe9F\e#\rge2^!+[E@*G@+dl&T_Q]CN5p!W7'W,!K'-aEJ.59LoXB=nVgS?(Z+Z[u1#c+q`csD^N-KflU\U.871tm((8k<G%Ca?\rbl9f0Vid/&C5hSX,a(eM\Wc&'mHh@2!d7h&,f`n%h+_sb9Bu'6\6:@Z8TJg>ouhM..Ql<fH@]n/qb+EB03c<_Z>I'jkEi<9%kKC=&o?2=EY:gide&sY2oWj$<HJ'uMHJ'R)W$J]/c'i5@i,ll[bP$g)$_bYOH#k6Ia/5_p(?N\#2EnU/-u.VH4mG7!PWk"?@<o4>%$#/*7)6;QDLf<9P8)k>$O"?Qp,e5nZqUnU_JjTECRbj]=b][`CJJW5*&r%u'Fl"abme?KKmVrbVO.m%*W)btJifk#B!JL-@m2)'n%Sb0k`^%a^g2?D@+7R9Jbc"YbTFt3ES/[j,efhOUe>cfDQAum2mFZ"!kHHp%H_/:.2rf07"*Lf;-'l4T/84ZUT/7Xh#18bRQ0FbK?%;eDFcP]Qr$=Z]ieL>.UQZ_)'%Hc*>Q(Bp'8mYu/apJ*X8T5S8Ng@hhq^*VUDQFGjTO&0IQGifJTce]G$K=B,G-Z-(6NN">23PB0=%HRN:j%JBnI[^fF<>k$O0Ym]`;Y0f]jEg^pEkN5l=1D%R*HTO%2rAAJ[lsM+"eA35:8"A3DUE16h7s[-5JM/)\a[?c2HtM3?N?V2"%gm-iLd7.\M=G*_DIDV@X^FiQ.1Bi9!XSI%6^Ahpe.XaRiZ[,lHKK)hIN#?e[65&.m.8b#O!_QpSbu6VAl!uMo;`2GpZ]Y*=BrH_F%XH56NPs/+#CNu!S?bOG50:88,fR&9mCIb8eW=G0`6kn4nTd["I*O/OaC5B'>]Z)@9Op[T;#+o$SgZLoM_^E02BXWpo4,'=KdrMC!%;pqPc:?c:=lE/3(,HgAi`e$m*@aV'n;e]m-$CKlYT38L:*Q1'Ff(m*nqt,8C1/@:,1:EniUV"5bUaff0AE0&7C6MR_C'7iP'SK-(%Aj],>K5D%0-BWgMB^g;pl,>4?;:&ti"5+fqT/i<,9\:*%^Fk26^EYsfF&Rl33Q)k7*'%\-f)1%m6;HVRN?-+<RF.&]TL[b)6VJ[)%94EP&;n6_9kk]>Zgs7M?1f+-[b@I44i2t*\4hS+5E<0V1Lk]XLPP!X0V.cs)[a8gtl46$Y@?k:7#Zq]WS=YVc1h34kBg(`dT9p(0%Dk,,)Zercs!jaHPG3c4AU$9_o_>!WalusQ1W9N[C(p]T!4Lq7ca@V*,J>JYT`<DbI`Df`#S7\%&R[*i]<5A=JCmo]LIU3V#Y@0mD%pC&'+b<=F*,/Ul!0Cb@t>jGt^b8B9>mEAQ(4(#5t!@K%#[.l-op[7l]@c[T^g<2G#4;s;7+%[eV8T&Noe]el`Yf`3d(7MM+Kpq"9%#qHV'YriJLBbD=L[ZG1$]\*SD(mdhH)UY%mBSd!j)Jrn&.#B3!M(MK/EnO"KV'NH]bXTGM[(]GF0W:'X]R`7I`"RI-`eq3a&To3/%P<WLiVHQL^_L1jcJ&Z+=cRjNq`1_q#ON+9l.ZuW_P/QAPWg.EG^N7FCq?=r@.J8QhS@1Jq)E0aC?$TUi@n&Q'""P6I4'a@Yp^u'=%/jS>?UiHR#Yej+l3,RHjBY;TZ*D%P,8M3cEIb@%8EWC(0+&KD/%[a"1Ks;[++"hU6/[bpcN(+Id5h,/%Ce)mn5\6"T2P6QGUWqub%d39cCB=*dTVuEg#UR=![,P'q`6CFeJpcKD<g=\r\M-@@)SIf#(DrI#GY).`6@m&j1IZ5bo_+Cjca01d=OC;.FU)m2%`3)*4nL:Vo%`DJ9E_I5-ZV?:<D8MnkK>\;NlGuVPpT#)!hS#@lJXhT,OcrbMalP2Vgb5U!P;qO)OKk9anno2h&*O?#N`Q'jOWVF75:')d/N:VY`%eA$j`kj6RaLkM%4?pdoA7\")hZCR_s]'*PX'?bR9Onjp/kSJ&gON40a--<haC'9qda6Vq/M8U#=LYkg+G`5t!&qU+'_Tl6jbc)Tp%CA)m?_G28>W?f#6c2)!5754([L%t;[2X-DQ9V5ui_6:@:op9"]O@C^t%0M^aV&,H3cgFcJD`C3Z?[@PS.Z#`PZZ8jZ]^0QC+If;O%`F#?M!S^$dNLRSO<D#>3JrQU#]=3^+a,I2q<EplINMhZ0.ebbbMDoh=ZZ.4gd5GnZ-'P8Q[lD(dB)=E..'8FO5-_#>9#KLN^eP-+%_XqNtnR<Ubfg)F/o&_3nI;U_3l%M=[G`,:iCTbL2*I*Dd.Z#`P0:HJDZjk7tEUrp^Ab0a8'b_Jj`Y(0>HB"o8k6#4(L$V+TFC8q/%dFaD8W\U^Z5'kc\/n7$+ANi3`k0\QabVGTD;Oc.:>IMq>?:oO_-7E*^Li&Jb0U*mAV<B)Z&e6j,S/p>g,5C^=0hlddKF?NnE"]JH%ob+S$V%B8Q09/M+r-Cr3`NL*$kP0(#/)+XudF?F4fSnK=4C%;$*sk;5P)_pF"WNg#Yt&-Oh+bo8\Y*4ILj0utN.e.aa9snPOsEf(%mac>lDN\NC;:5W,B'jC\<jELK/ph'9dM8;m$BICXWVtmUIp1-rf,:KTL2\Z?&'d?J*@dosW-Zd3m.Ih<58PA89%XmaQkH#+T.#c/%ngK_k'%+\$)IW0:P:b66&UDk8dieatabp"(J(s1C)-c>h>s+7Wd`"7mW+r^bFrPh^f1^<t-AP)/e74&[^ViA(-b7-miW)B`)X'LY%.Z#WM%u%;\,1OLcmB:H4C`(\]E&fg7\mg])p55U==D0?g;]K,(:Y&d,W^l0S6[\gEHT;km\;6#<j[-#qe6OlP6n1i(:(Q/sUC2!K%9*(\'Z]/!U1)PEtL8-,E1ds?LA@XKqE$M+'j*0/M6uk]VJirh0_^%Ql#)gTs0qPIDFE/[a67Rmd7Lu?$EQ3d5*fd<s:c=<a/7uJP%1"Wh9>lBc'l4TC--,3p?@iZlCEdC/Ddd6VkMtBrbPbJd<-F#Ct1L6;<7$=$u*nn_*@]4+p"1!nEH_D#i1P/#?*smBF;X*3KO-3.<%_aN[ZPOKTD?V4'dC+Q%>7%PmF>3*SS\jphqh(kC5ZO[tE-JbtUNe:trZ"8Alfg9XPe;c@oBHu6mJWk^eUR`W7+Z1Mc$UZmIUfn?#%2CB`),=',m82P<QX3ibq)NlGH6m]soC"=rlksW!YDJ3YGBdL5D8Xr9aOsCL*PU)[Ias:[j.Vle<NtBWT0Tn,s+Yb(I.e.1iBO[B'%[CQ)R36f#t/ED7,&*T",:@+N-hq7O4$cTh>>DToSCa&/:P=;^&:A2Kk=ic/"Y:[+k?Yg,;g-+1WU6=<koW"DJZZ<O&`X_2IaL6rr%O0gPs(0e@m_u5,>o\I`cYbgL(K>Nr>aV,sNhI,?RjN.L?oAfooC9PId0sj?Lk72%Z4Ek*hbI564b9G[d^pY\2Cu(a/@;)\rf".1P%*M)$ATVJP&m^B'[\Nr_Pe2&=XkcBn+Xgi'5d@_`+6lLn62R@GW4S?KeMM(WE82a:([cR)S/n(L_s-TNB)WAVXZ[Y<YO^?\dJ%WH6%d],C4fL3!%3$e_+ob2L<(OgGjh%r$J+>Fq"0G-o\6m]soC"=rl-u)j:jY:?q>7(&\,UYqrrI[:7gn-t.iKc1cfWgLBp($k2l3<u:%=7qB3&:5A5lmRsZSI#^k4:]JD,0FalZZ`bhX&YA(n\AreSG25#Lcc/U/Nf'9>^V/WEK?,jI$;TjO)[tH2,e@a1D`/RGoK-Y4TocW%kXB0Tc+\q.&XDDlVcbNSVdS5<eIgB#Z"tF4Dd&$e(H<s7bmQCpU8ioN.oGh'%AM)TZdprbb?Tm_V'SN&onqX^.lA-;k(Pie,db)*%WnBcT7q":Z&80&gg6pDc92WR1J2F(9]u\uXilV?_>`)-LUR+YS=H+Fu$.2Wr/1i!\abpSJb=`GD16j+$VcgcN,qO9*g[W4fS^8R`%EA&SJk?b+WUtNSt;")AT]peX]eSXV;eU+kY/TVQQYST&m\UtKd_Hi0k/)CY*-;d?PEI-0[(2>u*fBdY(f[E/N"eIE<h6oF.hef?@%$J`4\MY`g+&09"j=Ie8DN8fM7)NCZ1P=VL3eDrBcp0o4h$.?FD@o!co/hrg0,j^>Q/XGRk`1sGmKdMsWA1B'I:-s+^@sPm[bEg)G%79c*8?=WSn,aG<k2W-FXpU!lHnX_-%`_NGHBu7%!>S&jTp@5PRe<dpadd?Ul&,Lp>SkjjfOsTW]W]lTDD\bgsrFM0dU.W0Q36f$G%)askne#q@,AIBqJQX2ShkO=AqN\p$4;ku.]Cl1(7AQ*,:0:UsYl"'tZQVF/C^2/Z`nn$PrB]R>@WVs-9Wg4).+5VG_=+boV@e6f3%;6M8--:-:EPjqB?Yi.XY[5U685Q[A:Q(=%*e$$PP?it4u1hE8<<TK(_W$&#)d>B^*(.hI<>F]<eZ@Uq[-adU27QTK0k?t&="WJ=j%E3O<e`tWCW5O6a$VJ:),bt3_dNQ)YX'IO%s2-pVK8h*\0EcIQ@Z^mHacLJmlZ^i`8e-eVF!\WPnDZh#.2EneZ&$KA<!kSDL't5-5%BSUqC7RGDHHsZjn8/mI]?T-s8F,WQGbD-6VOb=LF(VOXT'2GUXI0!lED8@"2fCUBu2sg6(U=TE!i9fn)f$_ON@@H50'+6:4Se*7m%\j\Pd\80]dGTX-0o<#]l8lV+HS0%N<$_\L&oZ(dfZCU:5qBd#sQokWH@?>]\>9hY>#>l]M;>$74YAk:#aTiD)mm3K-?t_M]+d*-g%(7T+]b%2e@/s/9")7,IPKlEOr7c`.QNXTqMD0V*.5aM3]1&OZg@ANBZ9m(o6iPXiU4LC5A*h,[]*T.j8.Lg6?8<riR:(PTcTaP1"%gTddB1#!ue!i`g`@o3rK/P%IlE30(]j&;PlbI[Ae`m%I13rkIC7T`u/N(%17Ur"jGQcdJsQ)H5o3Bd#Xej83foTII$[M/*._`:(-%7iW$*cQagoLE81PrdI@EZ'2'oqZ,hD7]O1KN"ioA);0<)04A^f%SVgb*$@qm2'+Q\9HmYcV;^>fBdMMU?5rSeoK"$q[S6l3I!.GW%3-*c9LcFm+DWa!R&jEq^eV_G%M#*%Xo%DiPkV2B3(26Zf_Qd>VVmF!,-4qP0K$crt(G!Je:u<T`g,9m#!Rtd<@;$5*a$9e/RRhU6%W&&,D7pi>e+Otca-L9bj#5'A;KhQt6I3TDPp6JB-O@E]2b<qV4$*Yq*^:[oNS+LK9UZ"k_>4cO64FOMAR,R=tMiKIA9N:>CR&lWE%JPGR)EO\'o:UfQEOp9Rkj!BO*.Z$bm%u%;t:rlKK"+"A.0G-tKNFE437:9CF`6*%%=QbKBRB@5CS$.X5OfE?Q7MJOdN9H_6K]+\j%`$t*^9>g9pYp9us,W==<PflN_UA;kLQrbgX$1=;+?]D<oGMD<cU7c^/6P1(3DX'7aRQ_t5i?T?e0)@HF;I)(f3NkqodB>tOQ,FH9%=ZIF8jm'.jiPHIX)TZ!3-O^f:>8giAD4,eu\2=qbZkk)7]D$rp>2%%$-\NI%*3TK@16G%8Mp8>.2@t1RUi4hCfgoB)h'P-jBPuTq%e!ZteJShG`-8AEL?g)o66u0/J&K<oP%[%-T^m8)qnSoI;m?*ShU.SU>dB$EX:LfGCF=)EFfflt`88fBNSl(BSXRO(OV"jg[IPa4.%b(/f<8@&$!,B+gCZ,3BLm0Km")>+_qY7KB`koD;BV$8+m,"AnR2A$g5H"D8PCnU'XOrTAEU_4Z)il"s/$9(<u`op7kD&<prTNXRp%nl\3?Z*:VD6uINQ@rN/@VoIdo'W8r9Q1P'S=gMq:*Bg/TK-i#$#PATi?tb2u"1Q-.$6C5#fqI-:#7UL0Ye1r0m,)@)D1If]*\oRh%_h$sf",%`?`saP`W$Ji3^$:pNUKS77P5`D*Ks7gED':#<or?Z;hC]Ob0<pE]J9>::F\T5`4+,^H5Y`7(aC,0ZbIgbr$qB0uLF"^<%UcrUeXI8HSQt/\Ik7t44FrjRUq]K>$#;mQIe39gOe)5XNJ(p<VI8F8qQC!#]&at@2B`fSTguE'-mt2l!BdC.>bf\U$p!#[6`j1`2%)EU9(N,eN-k6fJdqpqu>4$_]dF0*b5.U8dg8;IB?`Xl<4,6Zm]R,[]QLa8.O9P27[TS>^?hsAfW1M-a^MYep\AAo(52+7E2d<$=F%6j@RiB1!+Fj+i%Po3,Erh=&1jPfu]i<W(3G@FVLW*Z%3K2-s/Xcr,]mP)Iej?a^VDmdg.h$pC_W]"8ehIi$5Ec7P@9rEZLoWMmQl%#uT$6KX!1g3O*X`a)c_H9-l&Z/l&a%%kI=&5cN*=ALhK6f@JmLpC&"/4]P5u0pQ!MH#SIV%H\8&l=1#VeK6U7LT3ROfZ#atcEPi5%rg[[i[/4nKWl(GbE13'8-ITpB:<+ko"._W.^l1e'U,ZXEklUC*_`bI)9!ZZNgYGpD<6Zd(^aUEXo.[TtZ>NE"hraHtauh5?W$Jo5%c2-*_]G%UlG4B4hG.N&%KjnW1:<(F/S=RD3.au*&QXXNq/tNm0mH#>>OVnHc'J%?D6<rNW1CU/NFpH2=P_bJT?o2Y3/$[3AFli5t%PEj:B/SK05NQHmffQK\9m)eB@ab;m^0fISPq3;J^mCj3qf-qb_9Jqp&=%U<"\ca@LLK`@n;59M+f*TU>5tKa%=CY#CD\n&da=H0G%&4'Ccq,Rl3G1%@h`/BTdkFRZ5Y975kXKk?;mb&eHb$pR`6b.$-K;j)I_)#[JXfR!DHBb[:7;`79SQomsnY<NK/OpUm41-'!XQ3%_%Rh./A_R,,TPE+C<33Pf;8OS`2N#p]p8t@-KT;;4?fh-r?a4!sYfS)=^2L]8kc>)IMpu58aa1qqL1^h(_@O's`<&/WA!eA\D8YXUU%9dP]CWo?/L36fV!81USI)Kj:q2UE&j=U'_=1rOQ06&K5Dn>C*H_sE6lh<^9+&_5lo%N#MO$56u%i]H:%&-MKJ7?Jc#,pMRS2QqG[%1)lE><A+7QbLVg=a#75CcI$.&'`*`#[,AOKKhm!"9@p9Zr(`D+G#l(059K1?ASakl/[K0T_PNrp>'3sf&P6@bRaoRCnTUPmbDb+:%eQoi\/g_!B:rVjtmTbAOH\CikK^M^a8R,4FG!"iN&2$;h.b>/M@SsJP.pdoTQ)Gt=36h<Q:'I9DSuL`DHcBkLFsU$Z1F$^(<nQ5!%c-#ks51l5+V6=H_Mf("f;_f^DCh[L7NQB>!c,r/;>FJ\A;+YYFHIXTO#j!$idJCYM(@iK6#oa[c=rQ7HBpjB>VDU.E[3m%ZlO(gg%iM+N6L[d-\VCOHd9Z?*mOBS/dh6N$e0Z#sT+'>r`p7A<[r>OF0@^iQleJ9NYMjdO\4S2k-PDV192pC8*AC\e/@ge=`MGZTeH+#gR%OY7f>a@*"m()Y;rfgKXAec1=2dYp=`PYu/6R.I%;b_eu*B?m<@BW/SS#]]"Nf]mB3(bmE#d@<4\6m@f@@Pk-O9r'V6B$lRj6u6e,%.]A?3m^]PrQ>30&HYK;`lI$Vhm?rb^\]dU#$`GkYYB;O.A[FsKrNp,K<RM&0B'lmh.P$GAT09Ef<l0`bCfK%H?T,c)S8=u9gG[K3%/K8E?Q9DT_X2Qo]=gHFI>hr.YlZI85Bi%B90m_C:`BFOXk!nAJY[uI.-NtNM0iV9-]gq&"_B(ojkZHIDaAhLAA55H2F>V!6TfFit%kj]X7ZrEb\I&I[JB)QNhG$%@6`s7ptUpdl2U)g5<DZ&ASK$*#0e,:aIK&d`MZ*CL2lMWf>1)O@f4<OQs$/>D!!h\Un'h3!<U.H\/%*PV.cS7^T_NDB*ccprS;Z@rjefA9@1p3UW8A+,\bIZjS3fFZ,'C`6hZ$.7$qR(Q16P%UfbP5d#26j:,F=28FmC`RLWYb^L1<oLS>%?P\n\h!l*A[;#itUFN34;5,I@[mc9/n0]]M%[J;,\Z\""dIg3?_^/*8'/"l/j6=.R,aG;R\N%k1Aa?:*$Vp"<P&5l@=f,Mb0O["'%($A!NR+YP8C"A[=.,ktAA"g(c$"<,L#SX)t_ka;&F6_:2M+VfHe#RB>3]Ml6p%\d4[S]&8,)`?,![8gj:=hAA7\LeOCg^YUm&k.)%;0*l_(c@X70Xtf_?sIYpBu>f<r2a^"FAW[-6pcgTXI>,id.KF7?@6-9;-c@1A]GUG#cm7eq#\:iG]>>h"F@aV0,L9B\>6M(U0_dD%oQgfoIOW'h20^1gQ$SaR<0Wl"-I$?KEHCm/#F=b0&gV"m%IfTNA[`nT`$ju/Pg4%YG"se-].8`%&Y.H,^ge-hUFEC_dX_jaj;10m%PLHREffU47*]2Lr!B/0a]p#>=k'\C"cg$uh%[odENG.lff[,bZcYi.Y0m?C]$T3-'mgLpp0's').C:n\e60I@"P)Y*+XYO:Sa=fc%E\#5qo>%YsE,#[W-4R1PUmbqpP@S5@P14EUZ<)m]fIYmLN1f((Ja+<tCl0SE#'7ONM^0d//P[sfffUc<jn("Z#A3S3rC&c9Be59D%<d)m;U!(SZ)sM$JANpZ%(&$to+$]X9VD0-j1`mdMoOpFWBph@8WPrT&/_c*[[HO"(d*k>H:K:=,On^=t)KhX7bc*gl1_Wk\>tsg6%(W-/Nfo#;s[Y<@Zaqf#I.U,GCl$!</=5C01:oLnf$hhBAKod?q\BJ'.\Z4A00G%:<f#,n@WjWrm>#J8]b0Q*6).SWKHrOCk_&P#4%6m@f<@Phk4$Z/T.GZdUgD,XR[l5'-6fU0C^k$^ckW9!.q2uD12hP8sqLZWb&>1hMXi?d?ah<'Eq,J@3`Bt_Q,CO8]!Wp3Jf0Uh[W%Q;R5`\l'%igF"nHD<'@sV"!b$]^i2qmFne8,nfei\&VL`K<[-h-QsGc/gDn($1V0nhIs:8DjOuIQ/i^Y=5C09d%Fdqgdsc>bn855%6UX=EVqRWl/gUQ5;9=+tYGIh_EkQ8_=%;Vs<;-dK0NGn[Lhg<Q(:C1)`%6kfF4I=f&sY9ST3'9RR1d.!=qoGQTkkb*rQD30@iK.l%HhN-e(e6_ursq!r7aY\;SdXO8+Bj2/0c14"<O?FU6+*CH/Q%V.d2(:a=sB,#BQ9G?b6EPe=#I=6?oAV/mbCa(N<>/WB_PT]^Sc#*%03#sMCh-E'^rftKVM]7Wk(Dhs9`p5'B_5pY$^q*BUdZj;/WZhUZT-3uAIIJ,cg'+o`b_@)7u?H%)Ja:Bqg0!3P'2.kPt.0a3N.@\%`W7GaQ-?%KPX-<sT&E?=:H@1K^X+:7&>\!-0FDW.D/>JpDV@\,$-G0R&LaNENEmbt>al6mN>uu@4qiW4F"KQg'f>7b6mfl#UmPdQ%Fs&qa2EOgX*c"iOf`I"FpAl[]RMF$.62d^.FZ_>sk]""5>Vc2.?/*?XXr="'SP(`P[CU%#r!N=mM$c>u?E-6G4V[7oVcQ,7E-H[J%7lSX>Bgd)g(BR(4?FCASMiiG/O4c!R$+X'AZ"S,>U+&sDH85>XoTM?_pZopr>[)HXIioA,@&%@Y8iF]g`ob/[a<&TsOsQ9I,dS?4%Rb9<NR6%JJ^n)>,4(sk?)d?289nE/M[U>COB?Cj-l"6s\*%;_)B1Q/l0!)Nj\CP2dE^bDd7K\`G,SJ6N-F7175j1/@pj4l.fg$rS%0?P^_X2kM>Nm'%g*sq!,?6dgMS8t6p/;uedWl%S:KG<O4NGV2iS'd+8Ym+Et;RSh7P0dYpX-QIZEnKaE'=*0a?>?;%j:d8@i("aO%\EF27`K.Jm/iqF'nmfZ*OW"m5hK'r36?Khd_Jfam)<%%Z1n$%\:GRc!Ef8>H?+(>l.<o>^A(aK<kKi8k6lOAKO6`*NOsCrb*pgJQ%X*Hu1'e5LY:c7t8(Sg,qs(i`aXF00,B4+]c(Vmp'2%PdB,!+E,s1ka6=Y&7hnEh!;`Fd?&\Th]Ho(b8M,ntOKhg._Q3mqno#N%M9%$X0/4,_"3r:1W;qN_&c0P7WZX_aZDcD[b3!5]lDW[^7oO7jKX=A>#kR?ZHKKZ[US&%`Ip,Rk`TqXkkB\6tD6V(N&]nR6?nEF%5[h%4hYhF)Y>@"'0a$IK*\M0b^pQI*lhh2(5>d(R%,44ffU)FaM)EMJS"GGDKo1;L9V3L(2\$pEg1+abB:t/gSh$NR6dYZ-0/TI<T-Ee%U>EbW(=Zl>]LA))QASXES)Eqc0A?f0YcIVf4KrWLgr.L\%3mF6:]s'Q)8.KcKhOTZ2u9,6GJPrF2kd?T9:UsFFMeA70$K)N)'7&1%)jX&pP+.sgh.34VoEoVkYCLJbrYA40dM^eZO^(hWN!#Ek20HJiF<t3m`skr:1rWjS]-;M4*H"]6S)aFE't;A3J>t]p/;C*$>ERk9%:ahe9NMDt:P(7?]FRJci8B+]53\+:6($DJq2@<a#lL`Q^Yn^EL183YTfbdl)nm(U[=ER[Qqbh0/;>3\b4f`p7Jnf@V7rXo^Z[#U7%?!+l<^p9))hp>mX<]Fp*1(L;*,IW)MfgBTY[tt"E?f5M6(@b!c)&j"FP)L^i.An(G4#<nhrHYcM4eb@Xe]'-npq3VlN?`os$5"U1%)[;(pc9-H(nQ\=X?]7Xa#A:EH1ja2'ldG.9=g-#T#KW<GO%tOGp41QYfn7\"]YG`YSio.7V:kI?>W0sK/lHEW]OEcsFk2L!_MmkA%aQ3KW",FSDk*.!LKXK&R5u=[Y$%gXkPTZ$?ALor]F/h4ejmf@2KNTd%-#LG3f$ALPa'F,7+.2HFGh\kHH"5fgO#C\e-[aoG_8<ef%mEbO"p=ZTB[ITVMnBnT@H"1s6c%iI58$bEuR7&@#`G*oJ2Ccr1fV*e&:E--?WlB:t<"e^,Wl4Tc<TthKWc'd^Hq`'mo4t)t(%<[f%hnl$&:*POp\S)VGB'!?XUdM,/iFXV[$'dWsIh?+erm<@#KSkoEC94C04o`,M]\je4e],"!S:nE8^G*(\(FQW^f6F:Z^SEVbaDF,E%Rb9liMpJ++fE8I.G$fL=E,/*`%(:,Ne`U=n;HrF?J8f9sr=UaD3n7,:>Ouo7\CF\MOOS(R!i[6A.,8Qg7()opCN,^Wb6C"P2MElH%#:9Q?.p]_b^4rm#*l>Y,3UFAeiC2OoWc0,<FLa%aR\i.1TTYM$;nb`@i$"32Lhr#U43&Rds.,qu<RrKV4nQ(Oo^s4?nrmpsTme`H%X_'-L:&>3k&lLTdqgs.9<4R>HO/bfLFWJep'BL*?jf1%9S=1)n`?*?jX-Q@WP+8$`qT1Y-R`G4Dp]IjnFEYfNe/@<FEk>(Ti<$Sr%8%!G/h6-?SUsY;XYn>uRlAY7f3A]YHF<8\NeQF.p8SiC8Q*ZU;)GEVh0cN]>Vq_=*)#O$p](hl1IJ8nB/jj`#kCFpXl.D=^$#p4.%4WPZ'W1Z,L\$*eE*IoH$WR@IuE16ICG1,>-3qX$-G1+q37@@du'a`p63T:oJjh3]-b1-#h'KcP]DOVFe+[qf3@iKI.@^JR)fn4.c%4Bj#X88*"2<O7N[7Zq3"#A+Vi%OoOg_O+9Z=l$9oqp$tt.6G<9Uk#FhR_YGn"-9`bFm'FkM%`eU*_tsFb=%f:&OiplQ*ZV&Y%(J'%omtde/?VaqHt*T%mjupgTRLN.GDbPO/GV1=bJMLqLr9&.(kjmr7d<..j8#!5<0CLVB)QPD?&`2.MObnnkuaS6WJn*[e?R6RWV5Z2%Sa)MSl;"aZF*B)YmS7>PD5GG_SYnT?\l2`Ycrb+iGpm;=0rESZ_gL?R//no[V%mu>,9*A0#I!c9"VJ[_;4`VQ`grHKMJ,4Q;J\$B%Z6IM+A3k02I/:9d";!R1JM/+2a@)2[N$ce[+3D6sb&rGTSLm_eX#thT)nbfQ;t;4Sq(<RA1j&IRJ*(a&lIJiL3X6lSX5*Z4Kp-CL%$QOGQ\&dBl:a2&D@.UCbD6s(0.R.PVbgtHmQ^Lc=`gFiX&R:1.AC&YB-%[p>8*-!A+tC6F9oO`b,:#s.*-"lZLVosAOCU*YjYil:%4'P:SjVBH!&'S'8pnmm5PVJb:\js)62"krK7se%1[_J*6NtkWZ$]I%OnOY-=4MPE%4QGMmHkOS"M+Wqhe#Zob;n)q[WNZVnm=b5a%5tGLE*ZdqA_l5Y`nl?1i;!OSsb0Gp'&B>oQ0lgqsN%Sj!LEJ11La9>Ec)TGbAB4s&YCMURV,lZ0mW-GmNY!0X'+I#)i:jHH8*i9q%E9p8%Lhb70Fpp)ra/k.S"9(BJS=9>Pdg)1)<*/?R*h6P9YpBnC:)\TY"Ct0hZ4^d6O)tn*Ut:ZL%ni_V&)Y:A4T1E1@0'6:LBWXb%4Y4h+)`o7]/k4kpj`iA&'?d(+]gOVQ\qqa.bduIgq<A]J?ltbPFK3ZtHNb<tLVHb.e(Foo9PuPZB8=(%P7"cJ";>$5^mH!CmR3Gc%J',3L*l-#$/V^3%O87`+:e6?***LKO8+hGT0UF\`Mdk/Tee(ipZp@t0FhY5B>nrjC[+Q0oF$]TZUZY(NBjj.D1a:(D3k6,*k:<+l%A8M*7Va*PEo9J;llR!QV4A"+o*.2/&dDbDs0,9r_las2p,BdAZca0@+loNP4B2u4i/N,ZgLhLE[+>G(WiPN+?cDVBiUJ^@*4;a[)%HrqMR8.RJD'siHdm4c(\StU%n^\ccico/J'ob[BS[&:0EANjY*4G*59j59k3%DVYi[l8g8eQ?+ao@SA"XhSN;YWU&iC#37ThYd&u%KO&4q]!h9[`\q.X#EhQ$-cm=ogRGtWC92T^I^rg_qle=]r*"$34N9HchI,64J,IhaoG2a-6s49+1[hP1`Z%dHd'kr`q_a?fP34R>%MX$XS=Q9*NQ?Uuj2h1c`NA;t.`[`a#3dM)$*L93@-d<UsgRGtWRRZ6Za?P^onHal^_t#5EUj7T@Hh5irdjY0`Ac/9L[#'/4jY>W6%nco!br8Xt%@bJ9DoP`AA$LePKA%WE8$%70l[pLqg:1*r-'n4A2b_*QljULqNc!PtFR-%7O\MnbkH'EO$]YV=1r7sU1'mooORu`'%%T=.PqHhm;hO0*6\33J:s$6-CD27D:E5>jZR=L!\4nhA3e&U$4)='4=KIVRcfZ"r^ncJ<U@2Y_hpe#h"N3Ye@A`c7+1%6.'@]Spu@%3)$k?(2]WZ;hSB@f=HsV]gT=_)#%51\hOtpS_j=)2.BeRJ#t%J0\_QrPOuXkI.)e^`r`NK3/G!`.r92-L`1@dCiL30=o.u!M2;]U%po8_l1NXLd"O1H^[([H2JK9ZU`P&<#`_L!;4"9!ZO3""JS6#FP>l<,&`X[LmQ:<Fdl\CjYNQbC1U>&#sriHrA<.*iSpPFuW>uj\&%ZgfidR]_@UIGs+[3Hkt,`M@"Kk*/Po5LiJ)*?2ah?$$'f3tM7'2;&R[86m,u8HXl8m<=3i$cR:QSbSd0]t4L@O.Nq*l#)6K,KPm=%L98dqa`CcC/a@@kP2-s#;+>0`P<3TT%nan3\!NuF(!!r`;O#8^VcZss]3RD$=P$QZXAAFBm(/XgL&q30fe37bl_[6smBGd=*DPGL%#J6_PF'W4Q[;,.%WAP*lekA!a@dWpN)@K-DJDC<)&hRL&=g8E<GLLD>kAA"o`CG:*!`g'Si%uIOp,^d.'ml*$L)B4m0c8ikF<cZK%[mg1c"np^ec7q]C*A.%MFK>MYenr=b0]TV#T+N(-!%(BB35mhY?=c-l32:B1F@_#8:!6VKk>TTb:$Ym$@SA@\AR2O\*37ZuBLLtI%2HDJ?U#;Na:@(`d8Qf-[i8*Y/;N<Q^NA*]>&m`S%`@%plSDN!8ho(!.F',ZU"qIG`oL4[=LTlukU8<e.4*DlcaBGra]jSIWZ1=-B%a^V#EMC&\63j,<"6?VJb2fJ]WX"XD<QoH4s;G6Ts)`PBPX;QYBHesXt1/YH\gF@"'%C1(AA*q6b"@<8DA%L[&(+j%-OKLXLXS^W?%^6f^sFmLk!5@@bP>mM@((l%%[8#\t&QdD*.Fj3lo`Y#?Y<]G\s1#7_M*&Ck';TH1L_T)5MfRd\m+Fk%C8IgdD"cT#;X,G*PT=mUK%$t:MA#0jWX;e5/O?)uR1G$1uu$Q*(UfBNNuD0.kJ)iKR"]R[7aC<&<7fGQM-G\i)eYm)<RDAs[QJ^=`h4oIFWfn(Po[<W'gpU6)f%`a\N3EkgqOJAo"+QU_ZM-rVqX7=NL'kX/==(GRi)WQhI\]?Sj^d+R'=O?NM4^P_WkSbBHLC3uCe,9<+*L8?sEo*Sb)lHWCgLZ1D4%q8-Y"Fn[YG;pZOG%)pQI2paE]kD@fNmDN]/HWRm!$PVo6`c.BMmTRSOG-,6u434QZbbXi%*G\[C.(%W$a/*Lj>/_^&F[,@4^XA.M%MUhA?i,iC1H/6/7Z&ZD*U>r8Y?`&HkeM0f8QA!h\m3IEAaGuh2iq5FH=<ZkV+jMPQGLaTh'l06&aFqEK/nC;rC$rQn@QH,1#?NF?%+ES`<(%^hci+dr[EsF[1QrpJG(Fu?plf$BO.C4>I/Y"Fa'6T,;MYWE]4#/#?BC,+s`TVP0]N?m,gbI5#!a<4N_sG8-;W!!&l/+]'%oC/X/$ep^5$>5gCfX?J.rO\#HZ_&*6nBWng2o)n`J,8rn^\mY(5Q:;E5CN@l:I"d=]-%(Odso**T.f"j\Gu;]:VZfL5Q1AT^\mWN%c[YoZ?[_b@\$*RHiMZ-*kq>7!VjjnsI?+?upYUJpk>+>BeShWe^]"#\++F.Pe$"8rgL'sLmF+<!n5muEjZfX=rLa)aY<N3H\o7U'%h=&)X59S^`pAZ**f0B3*dgof<oY92]s0t8kr"l")fDkdDh60%lp8d)ZJ,+l7r8DkWrVQ=Rrr(`(r9S(rrOY:Cs,TBnpSU6*s5V-A%^O>j+^]3r^?iJK]r;Nno^O5n<O5GHal%^@qs7G\cJ,$L5gj_Z]TDe*urnDr$pjYQfb96~>%AI9_PrivateDataEnd