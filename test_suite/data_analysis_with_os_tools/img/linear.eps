%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: linear.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 266 194
%%HiResBoundingBox: 0 0 265.8369 193.6274
%%CropBox: 0 0 265.8369 193.6274
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 7048 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FF7DA87DA8FD7CFF7D285252FFA87D7DA87D7D7D847D7D7D847D7D%7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D84%7D7D7D847D7D7D847D7D7D847D7D7D7E7D7D7D847D7D7D847D7D7D847D7D%7D847D7D7D847D7D7D847D7D7D847D7D7DA87D7D7D847D7D7D847D7D7D84%7D7D7D847D7D7D847D7D7D84FD047DFFFFFF527D527DFF7D7DFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87DA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87DA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8A8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A852FFFFFFA8A8FFA8%FF7DFD1DFFA8FD1DFFA8FD1DFFA8FD19FFA8A8FF7DA8FD07FFA8A8FD71FF%A8FFFFFF7DFD08FF7DFD3BFFA8FD35FFA8A8FFFFFF7DA8FD07FF84A8FD6F%FFA8FD05FF7DFD08FF7DA8FD3AFFA8FD32FFA8A8FD06FF7DA8FD07FFA8A8%FD6BFFA8FD09FF7DFD08FF7DA8FD3AFFA8FD30FFA8A8FD08FF7EA8FD07FF%A8A8FD69FFA8FD0BFF7DFFFFFFFD047DFF7DFD3BFFA8FD2DFFA8AFFD0BFF%7DA8FFFF7D7D527DFFA87DFD67FFA8FD0DFF7DFFFFFFA87D7D52FF7DA8FD%3AFFA8FD2BFFA8FD0EFF7DA8FD07FF84A8FD64FFA8FD10FF7DFD08FF7DA8%FD3AFFA8FD27FFA8FFA8FD10FF7DA8FD07FFA8A8FD61FFA8FD13FF7DFD08%FF7DA8FD3AFFA8FD25FFA8FD14FF7EA8FD07FFA8A8FD5FFFA8FD15FF7DFD%08FF7DA9FD3AFFA8FD21FFA8A8A8FD16FF7DA8FD07FFA8A8FD5DFFA8FD17%FF7DFD08FF7DFD3BFFA8FD1FFFA8FD1AFF7DA8FFFFA8A87DA8FFA8A8FD59%FFA8FD1BFF7DFFFFFF7D277D52FF7D7DA8FD39FFA8FD1DFF7DFD1BFF7D7D%A8FFFFA87D7D7DFFA8A8FD57FFA8FD1BFFA8FF7DFD06FFA8FF7DAFFD3AFF%A8FD19FFA8A8A8FD19FFA8A8A8FFFFA8A8FD07FFA8A8FD55FFA8FD17FFA8%A9A8FD05FF7DFD08FF7DA9FD3AFFA8FD17FFA8A8FD16FFA8A8A8FD08FF7D%A8FD07FFA8A8FD51FFA8FD15FFA8A9A8FD0BFF7DFD08FF7DFD3BFFA8FD15%FFA8FD13FFA8A8A8FFA8FD0CFF7DA8FD07FF84A8FD4EFFA8A8FD13FFA8FD%11FF7DFD08FF7DA8FD3AFFA8FD12FFA9A8FD10FFFD04A8FD12FF7DA8FD07%FFA8A8FD4BFFA8FD11FFA8A8A8FD15FF7DFD05FF7D7DFF7DFD3BFFA8FD0F%FFA8FD0FFFA8A8A8FD18FFA8A8FD04FF527DFFA87DFD49FFA8FD0DFFA8A8%A8FD1BFF53FD05FF7D52FF7DA8A8FD39FFA8FD0DFFA8FD0BFFA8A8A8FD17%FFA8FFA8FFA8FFA87DA8FD07FFA8FD47FFA9A8FD09FFA8FFA8FD17FFA8FF%A8FD07FF7DFD08FF7DFD3BFFA8FD09FFA8FFA8FD07FFA8FFA8A8A8FD11FF%A8FFA8FD0EFF7DA8FD07FF84A8FD43FFA8A8FD08FFA8A8A8FD0FFFA8FFA8%FD13FF7DFD08FF7DA8FD3AFFA8FD07FFA8FD07FFA8A8A8FD0BFFA8FFA8FF%A8FFA8FD16FF7DA8FD07FFA8A8FD41FFA8FD05FFA8FFA8FD0BFFA8FFA8FD%1DFF7DFD08FF7DA8FD3AFFA8FD04FFA8A8FFFFFFA8A8A8FD07FFA8FFA8FF%A8FFA8FD20FF7EA8FD07FFA8A8FD3FFFA8FFA8FFA8FD05FFA8FFA8FFA8FD%27FF7DFD08FF7DA9FD3AFFA8FFA8A8A8FFA8A8A8FFFFFFA8FFA8A8FD2BFF%7DA8FD04FF7D7DFFA8FD3DFFA8A8FFA8FFA8FD33FF7DFD04FFA87D52FF7D%7DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87D%A87DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87DA8%FD04FF527DFFA8A8FD35FFA8FF7EA8A8A8FD3AFF7DFD06FFA8FF7DA8FD30%FFA8FFFD07A8FFA8FD3AFF7EA8FD07FFA8A8FD2BFFA8FFA8FFFFFFA8FFA8%FD41FF7DFD08FF7DA8FD24FFA8FFA8FFA8FD05FFA8A8A8FFA8FFA8A8FD04%FFA8FD3AFF7EA8FD07FFA8A8FD21FFA8FFAFFD09FFA8FD05FFA8FD41FF7D%FD08FF7DA9FD16FFA8FFFFFFA8FFA8FFA8FD0AFFFD04A8FD05FFA8A8FD06%FFA8FD3AFF7DA8FD07FFA8A8FD15FFA8FFA8FD0FFFA8A8A8FD07FFA8FD43%FF7DFD08FF7DFD0FFFA8FFA8FFA8FD11FFA8A8A8FD08FFA8A8FD09FFA8FD%3AFF7DA8FD07FF84A8FD0BFFA8FD15FFA8A8A8FD09FFA8AFFD46FF7DFD05%FFA87DFF7DFD05FFA8FFA8FFA8FD15FFA8A8A8AFA8FD09FFA8A8A8FD0BFF%A8FD3AFF84A8FD04FF527DFFA87DFFA8FD1BFFA8FD0DFFA8FD49FF7DFD04%FF7D5252FF7D84A8FD17FFA8FFA8A8A8FD0DFFA8FD0FFFA8FD39FFA87DA8%FD04FFA8A8FFA8AFFD17FFA8A8A8FD0FFFA8FD4BFF7DFD08FF7DA9FD14FF%A8A8A8FD0FFFA8FFA8FD11FFA8FD3AFF7DA8FD07FFA8A8FD11FFA8FFA8FD%12FFA8FD4EFF7DFD08FF7DFD0FFFA8A8A8AFFD12FFA8FD15FFA8FD3AFF7D%A8FD07FF84A8FD0BFFA8FFA8FD15FFA8FD51FF7DFD08FF7DA8FD08FFFD05%A8FD15FFA8FD17FFA8FD3AFF7DA8FD07FFA8A8FD07FFA8FFA8FD17FFA8FD%53FF7DFD08FF7DA8FD04FFA8A8A8FD17FFA8A8A8FD19FFA8FD3AFF7EA8FF%FF7DA87D7DFFA8A8FFA8A9A8FD1BFFAFFD55FF7DFFFFA87D277D52FF7D7D%7DFFA8FD19FFA8A8FD1CFFA8FD39FFA87DA8FFA8A8847D7DFFA8A8FD1BFF%A9FD59FF7DFD08FF7DFD1BFF7EFD1FFFA8FD3AFF7DA8FD07FF84A8FD75FF%7DFD08FF7DA8FD16FFA8A8A8FD21FFA8FD3AFF7DA8FD07FFA8A8FD15FFA8%FD5FFF7DFD08FF7DA8FD14FFA8A8FD24FFA8FD3AFF7EA8FD07FFA8A8FD13%FFA8FD61FF7DFD08FF7DA9FD12FFA8FD27FFA8FD3AFF7DA8FD07FFA8A8FD%10FFA8A8FD63FF7DFFFFFFA8A8A87DFF7DFD0FFFA8FFA8FD29FFA8FD3AFF%7EA8FFFF7D7D527DFF7E7DFD0DFFA8A8FD46FFA87D7DA8A87EA8A8FD07FF%7D7DFD0FFF7DFFFF59A8527D2EFF7DA8A8FD0BFFA8FD2DFFA8FD1AFF7DF8%5227525227F87D7D277DFFFFFF7D53FFFFA8FFA8AFA8FFA8AFA8FFFFFFA8%7DA8FD04FFA8FFFFA8A8FD0BFFA8FD49FFA8527D7D7D527D52A8FFA8FD05%FFA8FD05FFA8FFFFFFA8FD05FF7DFD08FF7DA8FD0AFFA8FD2FFFA8FD1FFF%7DFD09FF7DA8FD0FFF7EA8FD07FFA8A8FD08FFA8A8FD54FFA87DFD04FF7D%52FFFFFFA8FFA8FD05FFA8FFFFFF7DFD08FF7DA9FD06FFA8FD33FFA8FD23%FF522784FFFFFF5252FFFFA8FFA8FFA8FFA8FFA8FD04FF7DA8FD07FFA8A8%FD64FFA8A8FD0FFF7DFD08FF7DFD05FFA8FD35FFA8FD26FFA87DA8527DFD%0FFF7DA8FD07FF84A8FFFFFFA8FD5AFF7D27FFA8527D7D52FD05FFA8FFA8%FFA8FD05FF7DFD08FF7DA8FFA8A8FD37FFA8FD23FF7E7DA8FF5284527DFF%FFA8FD0CFF7DA8FFFF7D7D7D7EFF7EA8FD3AFFA8FD1CFFA8FD1DFF7DFFFF%7D7D525252FF7D5259A87D7D7D847D7D7D847D7D7D847D7D7D847D7D7D84%7D7D7D847D8452FD047D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D%84FD047D52847D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D%7D847D7D53A87D7D7D847D7D7D847D7D7DA87D7D7D847D7D7D847D7D7D84%7D7D7D52A8FFA8527D7D7DFFFFFD3BA8FFFD3BA8FD04FFA8FFFFFFA8FFA8%FD1CFFA8FD1CFFA8FD1DFFA8FD1DFFA8FD07FF527D527DFD1AFF7D52FD1B%FFA8527DFD1BFF7E52A8FD1AFFA8527D52FD04FF7DA8527D527DFD18FFA8%7E5252A8FD1AFFA8277DFD1BFFA82784FD1AFFA8525253FD06FFA8A87DAF%FD19FFA8A87DFD1CFF7DA8FD1BFFA87DA8FD1BFFA8A87DFD44FFA8FD3AFF%FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:56:42+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T14:24:07+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T14:24:07+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>188</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6n530X8xr3zfeS6NHqsW&#xA;lrBFxmgv4Y4LhaL9YtoYfrMBtmKBuExjZ/VP20jGKp9YT+c9M8ueW9NeWOHWNRvZrWSbUQ9+0FuI&#xA;bu7hSUxzxmWVIoI4nf1TVqtVsVTsWfnqgrq+lk9yNMuB/wBj+Ku+p+ef+rvpn/cMuP8AsvxV31Pz&#xA;z/1d9M/7hlx/2X4q76n55/6u+mf9wy4/7L8Vd9T88/8AV30z/uGXH/Zfirvqfnn/AKu+mf8AcMuP&#xA;+y/FXfU/PP8A1d9M/wC4Zcf9l+KqFlH5/nhZ5tR02BxLNGEbTbipWOVkR/8Ae8bOqhh88VV/qfnn&#xA;/q76Z/3DLj/svxV31Pzz/wBXfTP+4Zcf9l+Ku+p+ef8Aq76Z/wBwy4/7L8Vd9T88/wDV30z/ALhl&#xA;x/2X4q76n55/6u+mf9wy4/7L8Vd9T88/9XfTP+4Zcf8AZfiqGkXz+upQWo1HTWhlhmle4/RlxxRo&#xA;miVUP+n9XErEb/s4qifqfnn/AKu+mf8AcMuP+y/FXfU/PP8A1d9M/wC4Zcf9l+Ku+p+ef+rvpn/c&#xA;MuP+y/FXfU/PP/V30z/uGXH/AGX4q76n55/6u+mf9wy4/wCy/FXfU/PP/V30z/uGXH/ZfiqncW/n&#xA;yK3lkj1TTJXRGZIxplxViBUL/veeuKut7fz5LbxSSappkTuis8Z0y4qpIqV/3vHTFVT6n55/6u+m&#xA;f9wy4/7L8Vd9T88/9XfTP+4Zcf8AZfirvqfnn/q76Z/3DLj/ALL8Vd9T88/9XfTP+4Zcf9l+Ku+p&#xA;+ef+rvpn/cMuP+y/FVC8PnCziEk+taYoYhEUaXcszueioovyzMadBirfl3UfMza9qela5JaTC2tb&#xA;O7tZrOCS3NLqS5jZJFknuRyX6sPst3xVkeKpF5i/47Hlf/tpyf8AdMvcVT3FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYqotT65F4+nJ33+0nbFVbFXYq7FXYq7FXYq7FXYq7FXYq7FXYqhJdRUXYtLdD&#xA;cXAK+uFICxIf2pGPQ0+yv2j8qkKqlravCZHkmeaWU1YsaKoHRUQfCoH3nuTiqU2f/Kc6v/2zNM/6&#xA;iL/FW9X87+VdIvZ7G/1BI722tG1Ce1RZJZUtlkSL1CkSu27yqqrSrdgaHFUPql7De3nlK7hWVIpt&#xA;SkZFnilt5QP0Ze/aimWORD7MoOKskxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqLV+uReHpydtv&#xA;tJ37YqrYq7FXYq7FXYq7FXYq7FXYq7FWndERndgqKCWYmgAG5JJxVCM1xeCeFRJaQqQi3AIWR+J+&#xA;PgpB4rtQMdzuRtxYqoqKNYokiSvFFCryJY0AoKsxJPzOKrsVSKz/AOU51f8A7Zmmf9RF/iql5o8i&#xA;6P5kmMt9JKrmym08BBC6elPPBcMxjmjmRmD2iUDArSoKnFUsufKml6TZ+TvL0XOewttRlVfVKqx/&#xA;3H30n+6liRRyOyoqqBsABtirM4Yo4YkhjHGONQiLuaKooBviq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FVFv97Iv+Mcnff7SdsVVsVdirsVdirsVdirsVdirsVUZ7uCGSOJ2/fTV9GIbs3EVNB4DuTsM&#xA;VUI7OS6SOTU442kjf1IoULFE6ceVTxkZSKhuIoenjiqNxV2KuxVjWjWFpZeddZjtY/TR9O012FWa&#xA;rGe/FfiJ8MVZLiqReYv+Ox5X/wC2nJ/3TL3FU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqLf7&#xA;2Rf8Y5O2/wBpO+Kq2KuxV2KuxV2KuxV2KuxVBS3ktwJItNeNpopPTmlkDGOPrypQUkZSKFQwp3Ix&#xA;VXhs7eGaWdE/fzU9WU7swXoKnoo7KNsVVsVdirsVdiqRWf8AynOr/wDbM0z/AKiL/FUq82/mHL5f&#xA;1j9Gfol7gyWJu7W6eZI4ZJjeW1ksPwiWRFD3qtJIyUVegbeiqi3mdNUs/KOszWz25OrXMM9tCJLo&#xA;rLBZ39vII/TQPInqRniwQVX4qDFWbRSrLEkqhgsihlDqyNQivxKwDKfYiuKrsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVUWr9ci8PTk77faTt3xVWxV2KuxV2KuxV2KrZZUiieWQ0SNSzmhNABU7DfFUI&#xA;oub30Zg8trbg8zAyBZXKtVeRq3FGG5WgbxpuuKoyONI0VI1CIooqqKADwAGKt4q7FXYq7FXMwUFm&#xA;ICgVJPQDFWLeXtXsNV85azcWLtJCunaanNo5IwSJ78/D6ipyG/UbYqn19pGk3/L69ZQXfOGS2f14&#xA;kk5QSlTJEeQNUcovJehoK9MVSfVrOzsr3yjaWUEdtaQai8cFvCixxoi6XegKiKAqgeAxVkeKuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxVRan1yLx9OTtv9pO+Kq2KuxV2KuxV2KqF1d+gY0WKSaWU0RE&#xA;Gwp1Z3Pwqo67n5VO2KqcOn0ujdXMpuJwW9Go4pEp2oib78erGpO/QbYqi8VdirsVdiqDm1ayjkaF&#xA;GNxcKaNBADK4alQH41CV8XIHviqwtrFx9hI7GI/tSfvpvD7CkRoe4PN/cYq2NHtHYPdlr2QGoNyQ&#xA;6gilCsQAiUinVUBxVAWf/Kc6v/2zNM/6iL/FU9xVIvMX/HY8r/8AbTk/7pl7iqe4q7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FVFq/XIutPTk77faTtiqtirsVdirsVQYuprmSP6nwaydSz3odWBrUARA&#xA;cuRBFSW28OW9FVWzsre0iMcKkcjykdiWd3oAWdjuzUAFTiqvirsVQ91qFlasqTyhZX3jhFWkfenw&#xA;RrV2+gYqofW9TuNrW19BD0nujTY9GWJCWPurshxV36K9be/uHuu/o/3cO5rT00+0vtIWxVGQwwwR&#xA;LFDGsUSCiRoAqgewG2Kr8VdiqRWf/Kc6v/2zNM/6iL/FXeerTWrzylqVrojyx6nLGFt3t2CTD415&#xA;+mxltqNwrT96n+sOuKpBAnmK30jySl9aqusx6hIJbae5lcf8c++pznd7+Tlw3P7ySh25EfFirOoj&#xA;KYkMyqkpUGREYuoam4ViFJFe9B8sVXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqouR9ciFRUxyGm9&#xA;dmT6MVVsVdiqnNcQQcPVcJ6riOME7s7dFA7nFUIlvdXnq/pBEW0kHFbEhXqtQazNuCdqcV+Eb7t2&#xA;VR4AAoNgOgxVTuLq2to/VuZkgjqBzkYItT0FWpiqE/SVxOP9BtHlB6TT1t4ulf2gZT7ERke+Ku+o&#xA;3s3+9l43E9YbYeitK13erS191da+HXFURa2NnaKy20KRc6FyoALEbVZurH3OKq+KuxVbLNFDG0sz&#xA;rHGu7O5CqPmTiqw3UIuFt6kykVoqswUUJBYgELWhpy64qt+syMgaOCRqvwo1EIFaFyGIPH6K+2Kp&#xA;Doz6g/nbWjewxQONO00RiGVpgU9e/wByWjhoa12ofnirJcVSLzF/x2PK/wD205P+6Ze4qnuKuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxVSav1qPrTg9fDqmKquKoWW+BnktLakl2iFiCD6aEj4fUYdK/&#xA;y/apvSm+KugtUhAuLp1mukRg92yKhCk8mVafZQeFTt1JO+KqX6Ygl/3hjkvjSoeED0vomcrG3X9l&#xA;ifbbFXehq9x/fXCWaf77th6j1/4yyrxp/wA8gffFVW30yxt5PWji5T0I9eQtLLQ/s+pIWentWmKq&#xA;rXdqrSI0yB4V5yryFVWleTDqBirhcqzxKqSH1RyqUZQop1bkBTwp19sVa9W5ZAyQcW58WSVwp4V3&#xA;YFPVB9ht9GKt8Lv12JlT6uRRYwh9QHx5lyp/4DFWhajjF6kskjxGocsULH/KEfBW+7FVyW9uhcpE&#xA;imRuchCgcm/mPiduuKqmKuxVIrP/AJTnV/8AtmaZ/wBRF/iqb3l5Z2VrLd3s8dtaQKZJ7iZ1jjRF&#xA;FSzuxCqB4nFUi1a8s7298o3dlPHc2k+ovJBcQuskbo2l3pDI6kqwPiMVZHirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVUJWRLuNmKqqxSks2xABSp8KeOKpPP5hs7qOaNJJYoVZU9SH+9apoQdv3CtUB&#xA;XkZSd6U2bCqJW5v3VoY+FkkCAup5XVyEptVV+FX7r8UlfA4FXpp9q8sTzwzXxf4/rFzxKoRup9Fi&#xA;gRu3wR18cVRanUHSQMsUD1/dMGaYEV6stIabeBxVf6UhlDtM3HhxaEBQhP8AN0Lg/wCypirQs7YL&#xA;EGT1PR3iaUmRlPjycs1feuKqiRxpXgoXkSzUFKk9Sad8VXYq7FXYq7FXYq7FXYqkVn/ynOr/APbM&#xA;0z/qIv8AFVfzVoJ17Qp9MWf6rJI8M0M5T1FWW3mSeMvHyTmnOIcl5DktRXFWOSeV49MsvKWiz3Mk&#xA;5GrXM1xcwNJaFpZ7O/uJDH6UnOJPUkPFQ5ovw1OKsyjsYY41jVpSqBQC00rN8IoKszEn3r174q39&#xA;Ui/mk6Ef3snf/ZYq39VirXlJ2/3ZJ2/2WKtC1iH7Unf/AHZIev8AssVd9UipTlJ2/wB2ydv9lirf&#xA;1WL+aTqT/eSd/wDZYq19Ui/mk6Af3snb/ZYq39VirXlJ1J/vJO4p/NirX1SKlOUlKcf72StP+C/H&#xA;FW/qsVa8pK15f3klK/Ll09sVUZfqEMbGWcoiUjYtO4oTQgE8vtGop3xVxEPqSqqzvLGPUKhpQrGm&#xA;yozlYz8uVPHFUJcXdvAsKOHjmkNDbSXEhn9Plu0aQmZpD8u3cYqg7uXVZEmW3SSIuA9qS5FxQFVD&#xA;LAZHDj4hy9Qx0/awq1D5Y+sXVvPq9zc3U3ouGtRcSC1RiRyoielzqHp+85UHSndVNrTRNMs4VhtY&#xA;fQiQhljRnVQyilaA9fHx74FV/qkVKcpO/wDu2Tv/ALLFXfVIqU5Sdv8Adsnb/ZYq76rFWvKTuf7y&#xA;T9rr+1/tYq76pF/NJ0A/vZO3+yxV31WKteUnUn+8k77fzYq76nFxpykpSn97JXY168sVb+qxVryk&#xA;rXl/eSUr8uXT2xVr6nFSnKTpx/vZOnX+br74q39VirXlJWvL+8kpX5cuntirX1OLjTlJSlP72Su5&#xA;r15Yq76rFWvKTqD/AHknbb+bFXfVIv5pOhH97J3/ANlirvqsVa8pOx/vJP2en7X+3iqQaLYQWXnX&#xA;WY4WmdX07TXJnmmuGqZ78bNM8jAbdAaYqyXFUi8xf8djyv8A9tOT/umXuKp7irsVdirsVcSB12xV&#xA;Qa/tRE8iv6yxt6b+irTEN/KVjDGu+KrhMxkRVhcxuvL1vhCj2KsQ9f8AY4qtX68yRlvShcN+9Qcp&#xA;QU8Fb91QnxocVba3dhKrTycZegHFSg7hCqht/EmvgcVUp1021SGa6dEWD4YZriSvEtt9uQn4j0rW&#xA;uKqMd7Iy8dOsWKEkmSYfVYqndtmUykmvUR0Pjiq76hez/wC9l43E9YbUGBadquC0tR4q6j2xVSi9&#xA;ERSQ6GkCOJONxPxJRWFeTErT1XBFCOXXqfFVHw2lvDLLNGlJZyDLISSzU6CprsOw6DFWnA+uRGgq&#xA;I5BXeu7J9GKq2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIrP8A5TnV/wDtmaZ/1EX+KorzN5hs&#xA;fLmg3mt34drSxT1JVj4ByCQoAMjRoKk/tMB74qkGp+ZdKurfyfrss0dnp8+oPIJZp7d0UNpt6q1m&#xA;gkmgap2HCQjFWVx3sEq8oKzqYxLG0YqjqwqvCQ0jav8ArYquWS5ZoiIQkbV9UO9HXbaiqHVv+CxV&#xA;Y0N48XBrn03519SFAp4dlpIZR8z+rFVQwKZWkLPVl4cebBQOuyg0r79cVWrZ2i+lSFKwAiElQSle&#xA;vEncV74qrYq07oiM7sFRQSzE0AA3JJOKoH9LxSbWUUl6T0eIARUBpUTOUjah68WJ9sVd6Gr3A/fX&#xA;CWan/ddsPUfpT+9lXiR/zzB98VVbbTLG3k9aOKs9KevIWllof2fUkLPT2rTFVW6ure1hae4kEcS0&#xA;BY+JNAAOpJOwA3JxVQaK5u5GEpVdOdKLEvNZX5DfmTwKAdOI39/2cVRUcccUaxxqEjQBURQAqqBQ&#xA;AAdAMVXYqotX65F1p6cnbb7Sd8VVsVdirsVdirsVdirsVdirsVdirsVdirsVdirG9H1CwvfO2syW&#xA;dzFcxppumo7wusgDCe/JUlSaHfpiqY615Z0HWxGdTso55oQy210Kx3EPqU5mC4jKzQluIqY2B2xV&#xA;KbvSNP0ifyjp2nxmK0g1Ob00Z3kar6dfOzM8hd3ZmYszMSSdzirKcVdirsVdiqDl1azWRoYi11Oh&#xA;4tDbr6hVq0o5HwR/7MjFVldYuOgjsIj/ADfvpqH2UiNGHzcYq2uj2ZcSXPK8lU8g9y3qAN/Mse0a&#xA;H3RRiqOxV2Koe6u/ReKJInmmmJ4Ig2AFKs7GiqBX5+AOKtQWjrK808pnkZqxgiiRqOQURrvQ8WPJ&#xA;q1PyoAqicVdirsVUWp9ci8fTk77/AGk7YqrYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUis/wDl&#xA;OdX/AO2Zpn/URf4qnuKpF5i/47Hlf/tpyf8AdMvcVT3FUNc6jZW0gillHrsKpAgLysN91jQM5Gx6&#xA;DFVEXOqXH+89sLaM/wC7ro1bxqsMZqQR/M6keGKu/RCTD/T5pLyvWJzwh919JKKy+0nL54qjYooo&#xA;o1jiRY40FFRQFUD2AxVdirsVcSAKnYDqcVQbTXN000ECyWyp8P1xlA+Kor6SP9ravxMONaU5b4qr&#xA;Wlnb2kXpQKQCSzsxLOzHqzsxLMfcnFVbFXYq7FXYqotX65F4enJ22+0nftiqtirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVSKz/5TnV/+2Zpn/URf4qxbzTrn5ji99fTbS6stOl0yZ3tBaQ3F1bzx39r&#xA;E0vqQvexSy/VJJpIIV68fiVjsqqtBe+Z59H8m3N5D62stqlxxW9rZPJELO/WGSdUhYxSPbhXZBEK&#xA;MeNF7KsvisNQuIkOpXRDlR6lvZloYg1BWkg/fGhrvyWv8uKou1s7S1QpbQpCrHkwRQtW8TTqfc4q&#xA;rYq7FXYq7FVOW4ghMayuFaVgkSnqzHeijqdhX5b4qhPqkl/CP0lEqxcua2YYsKU2ExHwue5X7Nf5&#xA;qA4qj8VdirsVdirsVdiqi3+9kX/GOTvv9pO2Kq2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjej&#xA;vfv521k3kMUMg03TQiwytMCvr39CS0cND7U+nFWSYqkXmL/jseV/+2nJ/wB0y9xVPcVdirsVdirs&#xA;VQk147mSGx4TXMTKsvJiEj5AmrkA1IG/Ab7itAa4qvtrMRlZZmE94EKNdFFVipblxHEbLXoPlUk7&#xA;4qiMVdirsVdirsVdirsVUW/3si/4xydt/tJ3xVWxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpFZ&#xA;/wDKc6v/ANszTP8AqIv8VT3FUi8xf8djyv8A9tOT/umXuKp7irsVdirUkiRo0kjBI0BZ3Y0AA3JJ&#xA;OKoMSXF8kUlu72tvyJk5x8ZXUEcQof7CtvWq8qdKdcVRUMMMMYjhjWKMEkIgCrVjU7DxJriq/FXY&#xA;q7FXYq7FXYq7FXYqotX65F4enJ32+0nbviqtirsVdirsVdirsVdirsVdirsVdirsVdirsVSKz/5T&#xA;nV/+2Zpn/URf4qxTzb+W/mHXZ5bua9tp7u40i60u64Ge1gcy3ltPEI4JTqMcQ9K3dJHo3IkEqRsF&#xA;UZBoWp6dpHknSLueK1vrfUJEeXTo4EjQDT75lWNPQjh+zRSRAoO5Cr0CrOokZIkRpGlZVCtK/EMx&#xA;ApybiFWp9gBiq7FVC8u/q0QYRSTu7cI4ol5MzEE9dlUbfaYgYqsjtHkniurlm9ZF+G3V+UMblaMV&#xA;+GMvWtKuPlSpxVFYq7FXYq7FXYq7FXYq7FXYq7FVFqfXIvH05O2/2k74qrYq7FXYq7FXYq7FXmn5&#xA;h2/5uXHm/TIvLPqHyyxsW1AxyWsAQxXvq3LM7st0xaFFXgnwlS3U7YqxptW/PqK80/S+cja3PDNd&#xA;rbyjS/RdYG06Oc3Lxja3Ek90IBEfVoY+fRsVZNocn57v5LQyQaZB5o+vMGTW5RMv1D09iz6WkMfq&#xA;+r9nitOHX4sVei2v1r6rD9b4fWuC/WPSr6fqUHPhy3416VxVI/KWna/ZXPmEatdT3cNxqjT6VLcv&#xA;G5Fo1rbgIixBVjRZllAXiD3NSeRVTb1dW/5ZoP8Ake//AFRxV3q6t/yzQf8AI9/+qOKq8DXLKfrE&#xA;aRtXYRuXFPmVTFWP6PbTW/nbWVlupbstpumsHmEQKj17/wCEekkQp8xXFWSYqkXmL/jseV/+2nJ/&#xA;3TL3FU9xVCG7lmkjWyVJYeZE9yXBRODUdAFqWeu3YDepqOJVX2ljBbGRkq00x5TTOeTue1T4DsBs&#xA;OwxVEYq7FXYq7FXYq7FXYq7FXYq7FXYqotX65F1p6cnfb7SdsVVsVdirsVdirsVdirsVdiqRecdH&#xA;806rp0UHlvzB/hy9SYSS3n1OG+5xBWBi9OYqq1Yq3LrtTviqYfXrXT7eGLU9QhFwlu0000rJDzS3&#xA;VfXn4E0VF5AtTZajFWCfk5pENh+n5UuNJnluLpRMuiXzXsSGMvRZg8Ucgno37ySR3eQ7kgADFXoC&#xA;2s4jdTeTMzUo5ENVp4UjA39xirjazkIPrco4faIEXxb1+L93+qmKqsaMpctIz8jUBuPwjwHEDb54&#xA;qktn/wApzq//AGzNM/6iL/FUr8y/mho3l7Wf0VfWF+8zhRbTRxxenPM/HhDD6ksbsWaRU9Tj6Qc8&#xA;S4bbFVDVfOOi3Fr5T1+aQ2NgdVuI5/rRRGhlhsL+GSKTizrzWaMx0VjVulcVThfMmh3jB5NXsUsJ&#xA;Itrb14i7+ou/qEt8NK04r9/bCqMj8xeV4o1jj1OxSNAFRFnhCqoFAAA2wGBV3+J/Lf8A1drP/pIi&#xA;/wCasVd/ify3/wBXaz/6SIv+asVd/ify3/1drP8A6SIv+asVd/ify3/1drP/AKSIv+asVd/ify3/&#xA;ANXaz/6SIv8AmrFVCy84+WrqFpRqVrHxlli4vPECfRlaLl9ro3Co9sVV/wDE/lv/AKu1n/0kRf8A&#xA;NWKu/wAT+W/+rtZ/9JEX/NWKu/xP5b/6u1n/ANJEX/NWKu/xP5b/AOrtZ/8ASRF/zVirv8T+W/8A&#xA;q7Wf/SRF/wA1Yq7/ABP5b/6u1n/0kRf81Yqg5fN/ltdWtrb9J2h9S3nk9T14uI9N4RxJ5dW9Tb5Y&#xA;qjP8T+W/+rtZ/wDSRF/zVirv8T+W/wDq7Wf/AEkRf81Yq7/E/lv/AKu1n/0kRf8ANWKu/wAT+W/+&#xA;rtZ/9JEX/NWKu/xP5b/6u1n/ANJEX/NWKu/xP5b/AOrtZ/8ASRF/zViqncebPLUMEk36UtH9NGfg&#xA;txESeIrQfF1xV1v5s8tTQRzfpS0T1EV+DXEQI5CtD8XXFUl84xeW/M2nRWP+Lp9E9KYTfWtH1GK0&#xA;naisvpu/x1Q860p1AxVK/Mfl7ylrN9YXX+IrSN7awfSr6SR4ZZ7yzmntpZI5ZvUQ/FHbyR9D/es3&#xA;sVVXyFp+j+Wf0g155k0rUJ7104S26JZCOGLn6UAjFzPEI4g9EWNUpuTyJJxVk41zysEjT9L29Im5&#xA;KTeAkmtfiPqVYezbYq4655WIkB1e2/ekFqXgFKfy0k+H/Y0xVVXzL5aAAGrWdAKb3MRP3lsVSvRN&#xA;V03UfO+tPYXUN3FHpmmK8sEiyqG+sX54koSK07Yqon8p/IAurm5h0s2rXcQgnhtLi5tbcopLrxt4&#xA;JY4UKyMZFZUBDnmDy3xVJ9e80eTvLthZaJa6XFrOhwPfQ3hSaG7W2uNPs59QkhlSRpppLl/RavMV&#xA;qas1dmVTPyWNB1/T7mS58u6fYXdjcG0uIIViuYeXpRzKYpvRh5r6cy1+AUao7YqyD/DHlv8A6tNn&#xA;/wBI8X/NOKu/wx5b/wCrTZ/9I8X/ADTirv8ADHlv/q02f/SPF/zTirv8MeW/+rTZ/wDSPF/zTirv&#xA;8MeW/wDq02f/AEjxf804qhtR0vyTpllLfalaabY2UNDNdXMcEUSBiFHJ3CqKsQNzirH/ACdfeXvM&#xA;V/rNpL5dsbI6ZcPFAhiYyzQCeeCO4Ky2tvGEl+rFkMUko6gkEUxVlP8Ahjy3/wBWmz/6R4v+acVd&#xA;/hjy3/1abP8A6R4v+acVd/hjy3/1abP/AKR4v+acVd/hjy3/ANWmz/6R4v8AmnFXf4Y8t/8AVps/&#xA;+keL/mnFXf4Y8t/9Wmz/AOkeL/mnFWLebdR8ueX9Y0fTx5cs7pdSYevN6ccZija9s7AMiiGT1W9X&#xA;UYzxqvwhjWtAVWU/4Y8t/wDVps/+keL/AJpxV3+GPLf/AFabP/pHi/5pxV3+GPLf/Vps/wDpHi/5&#xA;pxV3+GPLf/Vps/8ApHi/5pxV3+GPLf8A1abP/pHi/wCacVd/hjy3/wBWmz/6R4v+acVQuqaN5Z0/&#xA;TLu/bRrORbSGScxi3iqwjQvQfCetMVSjyM/l/wAzaGNQm0CwsrpZDFcWSwszQuFVuEn1m1s5A/Fw&#xA;SPTp3BINcVZD/hjy3/1abP8A6R4v+acVd/hjy3/1abP/AKR4v+acVd/hjy3/ANWmz/6R4v8AmnFX&#xA;f4Y8t/8AVps/+keL/mnFXf4Y8t/9Wmz/AOkeL/mnFXf4Y8t/9Wmz/wCkeL/mnFWAX35k6d5a1DVt&#xA;P0/yxHa/o25mF7xkit/UtbS2triSeNYI5Q8jLfJ6UJILCtShqoVeo4qg9Q/Q3rWn6R+retzf6j9Y&#xA;4cvU9F/U9Lnvy9D1OXH9jl2riqG8r/4V/Q0X+FvqP6F5P6H6L9H6ry5Hnw9D93XlXlTviqa4q7FX&#xA;Yq7FXYq7FUl8vf4L+tan/hz9G/W/X/3M/o70PU+sVb/er0fi9SvL7e/XFU6xV2KuxV2KuxV2KpVr&#xA;H+Ffr+l/pr6j9f8AWP6F+uej631igr9V9T4vUpT7G+KprirsVdirsVdirsVU7n6v9Xl+s8Pq3BvX&#xA;9SnDhT4ufLbjTrXFUs8rf4S/Q8f+FPqH6G5P6X6K9H6tzr8fH0P3da9cVTfFXYq7FXYq7FXYqx3V&#xA;/wDlXn1ofpj9EfW/r8PH639W9T9I+knoU9T4vrHo8OH7fGlNqYq//9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:DF772B8551D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:E272445355D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -193.627 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 193.627 li
265.837 193.627 li
265.837 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
260.974 182.724 mo
257.823 182.724 li
14.3232 182.724 mo
17.4736 182.724 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 48 /zero putdup 50 /two putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A75CA669> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWEZ+Helvetica /Helvetica findfont ct_VMDictPut/DVPWEZ+Helvetica*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /.notdef /two 205{/.notdef}rp]DVPWEZ+Helvetica nfDVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf0 185.06 mo(-20)[2.33105 3.89209 0 ]xsh260.974 160.324 mo
257.823 160.324 li
14.3232 160.324 mo
17.4736 160.324 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEZ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEZ+Helvetica /Encoding getdup 49 /one putdup 53 /five putpop%ADOEndSubsetFont
/DVPWEZ+Helvetica*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]DVPWEZ+Helvetica nfDVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf0 162.662 mo(-15)[2.33105 3.89209 0 ]xsh260.974 137.974 mo
257.823 137.974 li
14.3232 137.974 mo
17.4736 137.974 li
@
DVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf0 140.31 mo(-10)[2.33105 3.89209 0 ]xsh260.974 115.574 mo
257.823 115.574 li
14.3232 115.574 mo
17.4736 115.574 li
@
DVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89844 117.912 mo(-5)[2.33105 0 ]xsh260.974 93.1738 mo
257.823 93.1738 li
14.3232 93.1738 mo
17.4736 93.1738 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEZ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEZ+Helvetica /Encoding getdup 32 /space putpop%ADOEndSubsetFont
/DVPWEZ+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]DVPWEZ+Helvetica nfDVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf4.28125 95.5054 mo( )sh6.22656 95.5054 mo(0)sh260.974 70.8237 mo
257.823 70.8237 li
14.3232 70.8237 mo
17.4736 70.8237 li
@
DVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf4.28125 73.1616 mo( )sh6.22656 73.1616 mo(5)sh260.974 48.4238 mo
257.823 48.4238 li
14.3232 48.4238 mo
17.4736 48.4238 li
@
DVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf0.390625 50.7554 mo( 10)[1.9458 3.89209 0 ]xsh260.974 26.0737 mo
257.823 26.0737 li
14.3232 26.0737 mo
17.4736 26.0737 li
@
DVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf0.390625 28.4116 mo( 15)[1.9458 3.89209 0 ]xsh260.974 3.67383 mo
257.823 3.67383 li
14.3232 3.67383 mo
17.4736 3.67383 li
@
DVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf0.390625 6.01318 mo( 20)[1.9458 3.89209 0 ]xsh14.3232 3.67383 mo
14.3232 6.82373 li
14.3232 182.724 mo
14.3232 179.574 li
@
DVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf9.25781 192.052 mo(-10)[2.33105 3.89209 0 ]xsh75.9736 3.67383 mo
75.9736 6.82373 li
75.9736 182.724 mo
75.9736 179.574 li
@
DVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf72.8594 192.052 mo(-5)[2.33105 0 ]xsh137.674 3.67383 mo
137.674 6.82373 li
137.674 182.724 mo
137.674 179.574 li
@
DVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf134.75 192.052 mo( )sh136.695 192.052 mo(0)sh199.323 3.67383 mo
199.323 6.82373 li
199.323 182.724 mo
199.323 179.574 li
@
DVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf196.398 192.052 mo( )sh198.344 192.052 mo(5)sh260.974 3.67383 mo
260.974 6.82373 li
260.974 182.724 mo
260.974 179.574 li
@
DVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf256.102 192.052 mo( 10)[1.94629 3.8916 0 ]xsh0.125 lw
[0.5 1 ] 0 dsh
137.674 182.724 mo
137.674 3.67383 li
14.3232 93.1738 mo
260.974 93.1738 li
@
0.5 lw
[] 0 dsh
14.3232 3.67383 mo
14.3232 182.724 li
260.974 182.724 li
260.974 3.67383 li
14.3232 3.67383 li
14.3232 3.67383 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEZ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B7F374CC52CC6AFA2AC69E2626E08155548B3F09D592996A164FA4C0B7A39FE024A3E562036F05B86028> |-/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C2021D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495ACA0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCDBE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553A431EECECF30F5581F5F0240E470E520EB9771> |-/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C0EAF> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/p <1C60D8A8C9B7EF321971A47DFE20E88A554AF6C7BF26D7DE21E7159091488A77474EFAE16E717C524A15C920EA73AA47F3FA5326288E9152C7B3C170946831BD532AD7339284A44181A5422DAA5A3944CCAFE4499DA2E6E45119A891F62D3E7DB19C997B84C7105E8154EEFB4DEC8858FC770AEE75D22C6FDC3AA98F517994> |-/s <1C60D8A8C9B7A73DF2FC7D734CFF3CEE44DEE08B4814311F759A12C668E2414B1F185B71CDFB81A4EFE4B67531A5BC3DCC468E7336CC99F93A0F8C9CAAC21479B9DF30E1F20CC55E079066616501132E6501EACD2121153832E7EB63F4284AC03D21E5D5BD534A816A07833E9E45AAF0AF784FB128B27EB090C038A83361862615D53FB49FC431C156AA9A7FD4E2EF50395549EA0CB64112DC> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEZ+Helvetica /Encoding getdup 61 /equal putdup 101 /e putdup 108 /l putdup 111 /o putdup 112 /p putdup 115 /s putpop%ADOEndSubsetFont
/DVPWEZ+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 7{/.notdef}rp /equal 39{/.notdef}rp /e 6{/.notdef}rp /l 2{/.notdef}rp /o /p 2{/.notdef}rp /s 140{/.notdef}rp]DVPWEZ+Helvetica nfDVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf193.992 164.412 mo(slope = )[3.5 1.55371 3.89258 3.8916 3.8916 1.94629 4.08789 0 ]xsh224.523 164.412 mo(1)sh0.25 lw
244.924 54.2734 mo
245.174 54.1738 li
245.424 54.0737 li
245.674 53.9736 li
245.924 53.9238 li
246.174 53.8237 li
246.424 53.7236 li
246.674 53.6235 li
246.924 53.5234 li
247.123 53.4736 li
247.373 53.3735 li
247.623 53.2734 li
247.873 53.1738 li
248.123 53.0737 li
248.373 53.0234 li
248.623 52.9238 li
248.873 52.8237 li
249.123 52.7236 li
249.373 52.6235 li
249.623 52.5737 li
249.873 52.4736 li
250.123 52.3735 li
250.373 52.2734 li
250.623 52.2236 li
250.873 52.1235 li
251.073 52.0234 li
251.323 51.9233 li
251.573 51.8237 li
251.823 51.7734 li
252.073 51.6733 li
252.323 51.5737 li
252.573 51.4736 li
252.823 51.3735 li
253.073 51.3237 li
253.323 51.2236 li
253.573 51.1235 li
253.823 51.0234 li
254.073 50.9233 li
254.323 50.8735 li
254.573 50.7734 li
254.823 50.6733 li
255.023 50.5732 li
255.273 50.4736 li
255.523 50.4233 li
255.773 50.3232 li
256.023 50.2236 li
256.273 50.1235 li
256.523 50.0732 li
256.773 49.9736 li
257.023 49.8735 li
257.273 49.7734 li
257.523 49.6733 li
257.773 49.6235 li
258.023 49.5234 li
258.273 49.4233 li
258.523 49.3232 li
258.773 49.2236 li
258.974 49.1733 li
259.224 49.0732 li
259.474 48.9736 li
259.724 48.8735 li
259.974 48.7734 li
260.224 48.7236 li
260.474 48.6235 li
260.724 48.5234 li
260.974 48.4233 li
219.224 63.5737 mo
219.474 63.4736 li
219.724 63.4238 li
219.974 63.3237 li
220.224 63.2236 li
220.474 63.1235 li
220.724 63.0234 li
220.974 62.9736 li
221.224 62.8735 li
221.474 62.7734 li
221.724 62.6738 li
221.974 62.5737 li
222.224 62.5234 li
222.474 62.4238 li
222.724 62.3237 li
222.974 62.2236 li
223.174 62.1235 li
223.424 62.0737 li
223.674 61.9736 li
223.924 61.8735 li
224.174 61.7734 li
224.424 61.7236 li
224.674 61.6235 li
224.924 61.5234 li
225.174 61.4233 li
225.424 61.3237 li
225.674 61.2734 li
225.924 61.1733 li
226.174 61.0737 li
226.424 60.9736 li
226.674 60.8735 li
226.924 60.8237 li
227.174 60.7236 li
227.373 60.6235 li
227.623 60.5234 li
227.873 60.4233 li
228.123 60.3735 li
228.373 60.2734 li
228.623 60.1733 li
228.873 60.0732 li
229.123 59.9736 li
229.373 59.9233 li
229.623 59.8232 li
229.873 59.7236 li
230.123 59.6235 li
230.373 59.5234 li
230.623 59.4736 li
230.873 59.3735 li
231.123 59.2734 li
231.323 59.1733 li
231.573 59.1235 li
231.823 59.0234 li
232.073 58.9233 li
232.323 58.8232 li
232.573 58.7236 li
232.823 58.6733 li
233.073 58.5732 li
233.323 58.4736 li
233.573 58.3735 li
233.823 58.2734 li
234.073 58.2236 li
234.323 58.1235 li
234.573 58.0234 li
234.823 57.9233 li
235.073 57.8232 li
235.273 57.7734 li
235.523 57.6733 li
235.773 57.5732 li
236.023 57.4736 li
236.273 57.3735 li
236.523 57.3232 li
236.773 57.2236 li
237.023 57.1235 li
237.273 57.0234 li
237.523 56.9736 li
237.773 56.8735 li
238.023 56.7734 li
238.273 56.6733 li
238.523 56.5732 li
238.773 56.5234 li
239.023 56.4233 li
239.224 56.3232 li
239.474 56.2236 li
239.724 56.1235 li
239.974 56.0732 li
240.224 55.9736 li
240.474 55.8735 li
240.724 55.7734 li
240.974 55.6733 li
241.224 55.6235 li
241.474 55.5234 li
241.724 55.4233 li
241.974 55.3232 li
242.224 55.2231 li
242.474 55.1733 li
242.724 55.0732 li
242.974 54.9731 li
243.174 54.8735 li
243.424 54.8232 li
243.674 54.7231 li
243.924 54.6235 li
244.174 54.5234 li
244.424 54.4233 li
244.674 54.3735 li
244.924 54.2734 li
193.573 72.9238 mo
193.823 72.8237 li
194.073 72.7236 li
194.323 72.6235 li
194.573 72.5234 li
194.823 72.4736 li
195.073 72.3735 li
195.323 72.2734 li
195.523 72.1738 li
195.773 72.0737 li
196.023 72.0234 li
196.273 71.9238 li
196.523 71.8237 li
196.773 71.7236 li
197.023 71.6235 li
197.273 71.5737 li
197.523 71.4736 li
197.773 71.3735 li
198.023 71.2734 li
198.273 71.1733 li
198.523 71.1235 li
198.773 71.0234 li
199.023 70.9233 li
199.273 70.8237 li
199.474 70.7734 li
199.724 70.6733 li
199.974 70.5737 li
200.224 70.4736 li
200.474 70.3735 li
200.724 70.3237 li
200.974 70.2236 li
201.224 70.1235 li
201.474 70.0234 li
201.724 69.9233 li
201.974 69.8735 li
202.224 69.7734 li
202.474 69.6733 li
202.724 69.5732 li
202.974 69.4736 li
203.224 69.4233 li
203.424 69.3232 li
203.674 69.2236 li
203.924 69.1235 li
204.174 69.0234 li
204.424 68.9736 li
204.674 68.8735 li
204.924 68.7734 li
205.174 68.6733 li
205.424 68.6235 li
205.674 68.5234 li
205.924 68.4233 li
206.174 68.3232 li
206.424 68.2236 li
206.674 68.1733 li
206.924 68.0732 li
207.174 67.9736 li
207.373 67.8735 li
207.623 67.7734 li
207.873 67.7236 li
208.123 67.6235 li
208.373 67.5234 li
208.623 67.4233 li
208.873 67.3232 li
209.123 67.2734 li
209.373 67.1733 li
209.623 67.0732 li
209.873 66.9736 li
210.123 66.8735 li
210.373 66.8232 li
210.623 66.7236 li
210.873 66.6235 li
211.123 66.5234 li
211.323 66.4736 li
211.573 66.3735 li
211.823 66.2734 li
212.073 66.1733 li
212.323 66.0732 li
212.573 66.0234 li
212.823 65.9233 li
213.073 65.8232 li
213.323 65.7236 li
213.573 65.6235 li
213.823 65.5732 li
214.073 65.4736 li
214.323 65.3735 li
214.573 65.2734 li
214.823 65.1733 li
215.073 65.1235 li
215.273 65.0234 li
215.523 64.9233 li
215.773 64.8232 li
216.023 64.7231 li
216.273 64.6733 li
216.523 64.5732 li
216.773 64.4731 li
217.023 64.3735 li
217.273 64.2734 li
217.523 64.2231 li
217.773 64.1235 li
218.023 64.0234 li
218.273 63.9233 li
218.523 63.8735 li
218.773 63.7734 li
219.023 63.6733 li
219.224 63.5732 li
167.873 82.2236 mo
168.123 82.1235 li
168.373 82.0234 li
168.623 81.9736 li
168.873 81.8735 li
169.123 81.7734 li
169.373 81.6738 li
169.623 81.5737 li
169.873 81.5234 li
170.123 81.4238 li
170.373 81.3237 li
170.623 81.2236 li
170.873 81.1235 li
171.123 81.0737 li
171.373 80.9736 li
171.573 80.8735 li
171.823 80.7734 li
172.073 80.6733 li
172.323 80.6235 li
172.573 80.5234 li
172.823 80.4233 li
173.073 80.3237 li
173.323 80.2734 li
173.573 80.1733 li
173.823 80.0737 li
174.073 79.9736 li
174.323 79.8735 li
174.573 79.8237 li
174.823 79.7236 li
175.073 79.6235 li
175.323 79.5234 li
175.523 79.4233 li
175.773 79.3735 li
176.023 79.2734 li
176.273 79.1733 li
176.523 79.0732 li
176.773 78.9736 li
177.023 78.9233 li
177.273 78.8232 li
177.523 78.7236 li
177.773 78.6235 li
178.023 78.5234 li
178.273 78.4736 li
178.523 78.3735 li
178.773 78.2734 li
179.023 78.1733 li
179.273 78.0732 li
179.474 78.0234 li
179.724 77.9233 li
179.974 77.8232 li
180.224 77.7236 li
180.474 77.6733 li
180.724 77.5732 li
180.974 77.4736 li
181.224 77.3735 li
181.474 77.2734 li
181.724 77.2236 li
181.974 77.1235 li
182.224 77.0234 li
182.474 76.9233 li
182.724 76.8232 li
182.974 76.7734 li
183.224 76.6733 li
183.424 76.5732 li
183.674 76.4736 li
183.924 76.3735 li
184.174 76.3232 li
184.424 76.2236 li
184.674 76.1235 li
184.924 76.0234 li
185.174 75.9233 li
185.424 75.8735 li
185.674 75.7734 li
185.924 75.6733 li
186.174 75.5732 li
186.424 75.5234 li
186.674 75.4233 li
186.924 75.3232 li
187.174 75.2236 li
187.373 75.1235 li
187.623 75.0732 li
187.873 74.9736 li
188.123 74.8735 li
188.373 74.7734 li
188.623 74.6733 li
188.873 74.6235 li
189.123 74.5234 li
189.373 74.4233 li
189.623 74.3232 li
189.873 74.2231 li
190.123 74.1733 li
190.373 74.0732 li
190.623 73.9731 li
190.873 73.8735 li
191.123 73.7734 li
191.373 73.7231 li
191.573 73.6235 li
191.823 73.5234 li
192.073 73.4233 li
192.323 73.3735 li
192.573 73.2734 li
192.823 73.1733 li
193.073 73.0732 li
193.323 72.9731 li
193.573 72.9233 li
142.224 91.5234 mo
142.474 91.4736 li
142.724 91.3735 li
142.974 91.2734 li
143.224 91.1738 li
143.474 91.0737 li
143.674 91.0234 li
143.924 90.9238 li
144.174 90.8237 li
144.424 90.7236 li
144.674 90.6235 li
144.924 90.5737 li
145.174 90.4736 li
145.424 90.3735 li
145.674 90.2734 li
145.924 90.1738 li
146.174 90.1235 li
146.424 90.0234 li
146.674 89.9233 li
146.924 89.8237 li
147.174 89.7236 li
147.424 89.6733 li
147.623 89.5737 li
147.873 89.4736 li
148.123 89.3735 li
148.373 89.3237 li
148.623 89.2236 li
148.873 89.1235 li
149.123 89.0234 li
149.373 88.9233 li
149.623 88.8735 li
149.873 88.7734 li
150.123 88.6733 li
150.373 88.5737 li
150.623 88.4736 li
150.873 88.4233 li
151.123 88.3232 li
151.373 88.2236 li
151.573 88.1235 li
151.823 88.0234 li
152.073 87.9736 li
152.323 87.8735 li
152.573 87.7734 li
152.823 87.6733 li
153.073 87.5732 li
153.323 87.5234 li
153.573 87.4233 li
153.823 87.3232 li
154.073 87.2236 li
154.323 87.1733 li
154.573 87.0732 li
154.823 86.9736 li
155.073 86.8735 li
155.323 86.7734 li
155.573 86.7236 li
155.773 86.6235 li
156.023 86.5234 li
156.273 86.4233 li
156.523 86.3232 li
156.773 86.2734 li
157.023 86.1733 li
157.273 86.0732 li
157.523 85.9736 li
157.773 85.8735 li
158.023 85.8232 li
158.273 85.7236 li
158.523 85.6235 li
158.773 85.5234 li
159.023 85.4233 li
159.273 85.3735 li
159.523 85.2734 li
159.724 85.1733 li
159.974 85.0732 li
160.224 85.0234 li
160.474 84.9233 li
160.724 84.8232 li
160.974 84.7236 li
161.224 84.6235 li
161.474 84.5732 li
161.724 84.4736 li
161.974 84.3735 li
162.224 84.2734 li
162.474 84.1733 li
162.724 84.1235 li
162.974 84.0234 li
163.224 83.9233 li
163.474 83.8232 li
163.673 83.7231 li
163.923 83.6733 li
164.173 83.5732 li
164.423 83.4731 li
164.673 83.3735 li
164.923 83.2734 li
165.173 83.2231 li
165.423 83.1235 li
165.673 83.0234 li
165.923 82.9233 li
166.173 82.8232 li
166.423 82.7734 li
166.673 82.6733 li
166.923 82.5732 li
167.173 82.4731 li
167.423 82.4233 li
167.623 82.3232 li
167.873 82.2231 li
116.523 100.875 mo
116.773 100.773 li
117.023 100.673 li
117.273 100.574 li
117.523 100.523 li
117.773 100.423 li
118.023 100.324 li
118.273 100.224 li
118.523 100.125 li
118.773 100.074 li
119.023 99.9741 li
119.273 99.8745 li
119.523 99.7729 li
119.724 99.6733 li
119.974 99.6245 li
120.224 99.5229 li
120.474 99.4233 li
120.724 99.3237 li
120.974 99.2241 li
121.224 99.1733 li
121.474 99.0737 li
121.724 98.9741 li
121.974 98.8745 li
122.224 98.8237 li
122.474 98.7241 li
122.724 98.6245 li
122.974 98.5229 li
123.224 98.4233 li
123.474 98.3745 li
123.724 98.2729 li
123.923 98.1733 li
124.173 98.0737 li
124.423 97.9736 li
124.673 97.9238 li
124.923 97.8242 li
125.173 97.7236 li
125.423 97.624 li
125.673 97.5234 li
125.923 97.4736 li
126.173 97.374 li
126.423 97.2734 li
126.673 97.1738 li
126.923 97.0737 li
127.173 97.0239 li
127.423 96.9238 li
127.673 96.8237 li
127.874 96.7236 li
128.124 96.6738 li
128.374 96.5737 li
128.624 96.4736 li
128.874 96.374 li
129.124 96.2739 li
129.374 96.2236 li
129.624 96.124 li
129.874 96.0239 li
130.124 95.9238 li
130.374 95.8237 li
130.624 95.7739 li
130.874 95.6738 li
131.124 95.5737 li
131.374 95.4736 li
131.624 95.374 li
131.823 95.3237 li
132.073 95.2236 li
132.323 95.124 li
132.573 95.0239 li
132.823 94.9238 li
133.073 94.874 li
133.323 94.7739 li
133.573 94.6738 li
133.823 94.5737 li
134.073 94.4736 li
134.323 94.4238 li
134.573 94.3237 li
134.823 94.2236 li
135.073 94.124 li
135.323 94.0737 li
135.573 93.9736 li
135.773 93.874 li
136.023 93.7739 li
136.273 93.6738 li
136.523 93.624 li
136.773 93.5239 li
137.023 93.4238 li
137.273 93.3237 li
137.523 93.2236 li
137.773 93.1738 li
138.023 93.0737 li
138.273 92.9736 li
138.523 92.8735 li
138.773 92.7739 li
139.023 92.7236 li
139.273 92.6235 li
139.523 92.5239 li
139.724 92.4238 li
139.974 92.3237 li
140.224 92.2739 li
140.474 92.1738 li
140.724 92.0737 li
140.974 91.9736 li
141.224 91.9238 li
141.474 91.8237 li
141.724 91.7236 li
141.974 91.6235 li
142.224 91.5239 li
90.8735 110.173 mo
91.1235 110.074 li
91.3735 110.023 li
91.6235 109.923 li
91.8735 109.824 li
92.0732 109.724 li
92.3232 109.625 li
92.5732 109.574 li
92.8232 109.474 li
93.0732 109.375 li
93.3232 109.273 li
93.5732 109.173 li
93.8232 109.125 li
94.0732 109.023 li
94.3232 108.923 li
94.5732 108.824 li
94.8232 108.724 li
95.0737 108.673 li
95.3237 108.574 li
95.5737 108.474 li
95.8237 108.375 li
96.0234 108.324 li
96.2734 108.224 li
96.5234 108.125 li
96.7734 108.023 li
97.0234 107.923 li
97.2734 107.875 li
97.5234 107.773 li
97.7734 107.673 li
98.0234 107.574 li
98.2734 107.474 li
98.5234 107.423 li
98.7734 107.324 li
99.0234 107.224 li
99.2734 107.125 li
99.5234 107.023 li
99.7734 106.974 li
99.9736 106.875 li
100.224 106.773 li
100.474 106.673 li
100.724 106.574 li
100.974 106.523 li
101.224 106.423 li
101.474 106.324 li
101.724 106.224 li
101.974 106.125 li
102.224 106.074 li
102.474 105.974 li
102.724 105.875 li
102.974 105.773 li
103.224 105.724 li
103.474 105.625 li
103.724 105.523 li
103.924 105.423 li
104.174 105.324 li
104.424 105.275 li
104.674 105.173 li
104.924 105.074 li
105.174 104.974 li
105.424 104.875 li
105.674 104.824 li
105.924 104.724 li
106.174 104.625 li
106.424 104.525 li
106.674 104.423 li
106.924 104.375 li
107.174 104.275 li
107.424 104.173 li
107.674 104.074 li
107.874 103.974 li
108.124 103.923 li
108.374 103.824 li
108.624 103.724 li
108.874 103.625 li
109.124 103.574 li
109.374 103.474 li
109.624 103.375 li
109.874 103.275 li
110.124 103.173 li
110.374 103.125 li
110.624 103.025 li
110.874 102.923 li
111.124 102.824 li
111.374 102.724 li
111.624 102.673 li
111.824 102.574 li
112.074 102.474 li
112.324 102.375 li
112.574 102.275 li
112.824 102.224 li
113.074 102.125 li
113.324 102.025 li
113.574 101.923 li
113.824 101.824 li
114.074 101.775 li
114.324 101.673 li
114.574 101.574 li
114.824 101.474 li
115.074 101.375 li
115.324 101.324 li
115.574 101.224 li
115.774 101.125 li
116.024 101.025 li
116.274 100.974 li
116.524 100.875 li
65.1733 119.523 mo
65.4233 119.423 li
65.6733 119.324 li
65.9233 119.224 li
66.1733 119.125 li
66.4233 119.074 li
66.6733 118.974 li
66.9233 118.875 li
67.1733 118.773 li
67.4233 118.673 li
67.6733 118.625 li
67.9233 118.523 li
68.1235 118.423 li
68.3735 118.324 li
68.6235 118.224 li
68.8735 118.173 li
69.1235 118.074 li
69.3735 117.974 li
69.6235 117.875 li
69.8735 117.773 li
70.1235 117.724 li
70.3735 117.625 li
70.6235 117.523 li
70.8735 117.423 li
71.1235 117.375 li
71.3735 117.273 li
71.6235 117.173 li
71.8735 117.074 li
72.0737 116.974 li
72.3237 116.923 li
72.5737 116.824 li
72.8237 116.724 li
73.0737 116.625 li
73.3237 116.523 li
73.5737 116.474 li
73.8237 116.375 li
74.0737 116.273 li
74.3237 116.173 li
74.5737 116.074 li
74.8237 116.023 li
75.0737 115.923 li
75.3237 115.824 li
75.5737 115.724 li
75.8237 115.625 li
76.0234 115.574 li
76.2734 115.474 li
76.5234 115.375 li
76.7734 115.273 li
77.0234 115.224 li
77.2734 115.125 li
77.5234 115.023 li
77.7734 114.923 li
78.0234 114.824 li
78.2734 114.775 li
78.5234 114.673 li
78.7734 114.574 li
79.0234 114.474 li
79.2739 114.375 li
79.5239 114.324 li
79.7739 114.224 li
79.9736 114.125 li
80.2236 114.025 li
80.4736 113.923 li
80.7236 113.875 li
80.9736 113.775 li
81.2236 113.673 li
81.4736 113.574 li
81.7236 113.474 li
81.9736 113.423 li
82.2236 113.324 li
82.4736 113.224 li
82.7236 113.125 li
82.9736 113.025 li
83.2236 112.974 li
83.4736 112.875 li
83.7236 112.775 li
83.9238 112.673 li
84.1738 112.625 li
84.4238 112.525 li
84.6738 112.423 li
84.9238 112.324 li
85.1738 112.224 li
85.4238 112.173 li
85.6738 112.074 li
85.9238 111.974 li
86.1738 111.875 li
86.4238 111.775 li
86.6738 111.724 li
86.9238 111.625 li
87.1738 111.525 li
87.4238 111.423 li
87.6738 111.324 li
87.9238 111.275 li
88.124 111.173 li
88.374 111.074 li
88.624 110.974 li
88.874 110.875 li
89.124 110.824 li
89.374 110.724 li
89.624 110.625 li
89.874 110.525 li
90.124 110.474 li
90.374 110.375 li
90.624 110.275 li
90.874 110.173 li
39.5234 128.824 mo
39.7734 128.724 li
40.0234 128.625 li
40.2236 128.574 li
40.4736 128.474 li
40.7236 128.375 li
40.9736 128.273 li
41.2236 128.173 li
41.4736 128.125 li
41.7236 128.023 li
41.9736 127.923 li
42.2236 127.824 li
42.4736 127.724 li
42.7236 127.673 li
42.9736 127.574 li
43.2236 127.474 li
43.4736 127.375 li
43.7236 127.273 li
43.9736 127.224 li
44.1733 127.125 li
44.4233 127.023 li
44.6733 126.923 li
44.9233 126.875 li
45.1733 126.773 li
45.4233 126.673 li
45.6733 126.574 li
45.9233 126.474 li
46.1733 126.423 li
46.4233 126.324 li
46.6733 126.224 li
46.9233 126.125 li
47.1733 126.023 li
47.4233 125.974 li
47.6738 125.875 li
47.9238 125.773 li
48.1235 125.673 li
48.3735 125.574 li
48.6235 125.523 li
48.8735 125.423 li
49.1235 125.324 li
49.3735 125.224 li
49.6235 125.125 li
49.8735 125.074 li
50.1235 124.974 li
50.3735 124.875 li
50.6235 124.773 li
50.8735 124.673 li
51.1235 124.625 li
51.3735 124.523 li
51.6235 124.423 li
51.8735 124.324 li
52.1235 124.273 li
52.3237 124.173 li
52.5737 124.074 li
52.8237 123.974 li
53.0737 123.875 li
53.3237 123.824 li
53.5737 123.724 li
53.8237 123.625 li
54.0737 123.525 li
54.3237 123.423 li
54.5737 123.375 li
54.8237 123.275 li
55.0737 123.173 li
55.3237 123.074 li
55.5737 122.974 li
55.8237 122.923 li
56.0737 122.824 li
56.2739 122.724 li
56.5239 122.625 li
56.7739 122.525 li
57.0239 122.474 li
57.2739 122.375 li
57.5239 122.275 li
57.7739 122.173 li
58.0239 122.125 li
58.2739 122.025 li
58.5239 121.923 li
58.7739 121.824 li
59.0239 121.724 li
59.2739 121.673 li
59.5239 121.574 li
59.7739 121.474 li
60.0239 121.375 li
60.2236 121.275 li
60.4736 121.224 li
60.7236 121.125 li
60.9736 121.025 li
61.2236 120.923 li
61.4736 120.824 li
61.7236 120.775 li
61.9736 120.673 li
62.2236 120.574 li
62.4736 120.474 li
62.7236 120.375 li
62.9736 120.324 li
63.2236 120.224 li
63.4736 120.125 li
63.7236 120.025 li
63.9736 119.923 li
64.1738 119.875 li
64.4238 119.775 li
64.6738 119.673 li
64.9238 119.574 li
65.1738 119.525 li
14.3232 137.974 mo
14.5732 137.875 li
14.8232 137.773 li
15.0732 137.673 li
15.3232 137.625 li
15.5732 137.523 li
15.8232 137.423 li
16.0732 137.324 li
16.3232 137.224 li
16.5234 137.173 li
16.7734 137.074 li
17.0234 136.974 li
17.2734 136.875 li
17.5234 136.773 li
17.7734 136.724 li
18.0234 136.625 li
18.2734 136.523 li
18.5234 136.423 li
18.7734 136.324 li
19.0234 136.273 li
19.2734 136.173 li
19.5234 136.074 li
19.7734 135.974 li
20.0234 135.923 li
20.2734 135.824 li
20.4736 135.724 li
20.7236 135.625 li
20.9736 135.523 li
21.2236 135.474 li
21.4736 135.375 li
21.7236 135.273 li
21.9736 135.173 li
22.2236 135.074 li
22.4736 135.023 li
22.7236 134.923 li
22.9736 134.824 li
23.2236 134.724 li
23.4736 134.625 li
23.7236 134.574 li
23.9736 134.474 li
24.2236 134.375 li
24.4238 134.273 li
24.6738 134.173 li
24.9238 134.125 li
25.1738 134.023 li
25.4238 133.923 li
25.6738 133.824 li
25.9238 133.773 li
26.1738 133.673 li
26.4238 133.574 li
26.6738 133.474 li
26.9238 133.375 li
27.1738 133.324 li
27.4238 133.224 li
27.6738 133.125 li
27.9238 133.025 li
28.1738 132.923 li
28.3735 132.875 li
28.6235 132.775 li
28.8735 132.673 li
29.1235 132.574 li
29.3735 132.474 li
29.6235 132.423 li
29.8735 132.324 li
30.1235 132.224 li
30.3735 132.125 li
30.6235 132.025 li
30.8735 131.974 li
31.1235 131.875 li
31.3735 131.775 li
31.6235 131.673 li
31.8735 131.574 li
32.1235 131.525 li
32.3237 131.423 li
32.5737 131.324 li
32.8237 131.224 li
33.0737 131.173 li
33.3237 131.074 li
33.5737 130.974 li
33.8237 130.875 li
34.0737 130.775 li
34.3237 130.724 li
34.5737 130.625 li
34.8237 130.525 li
35.0737 130.423 li
35.3237 130.324 li
35.5737 130.275 li
35.8237 130.173 li
36.0737 130.074 li
36.2739 129.974 li
36.5239 129.875 li
36.7739 129.824 li
37.0239 129.724 li
37.2739 129.625 li
37.5239 129.525 li
37.7739 129.423 li
38.0239 129.375 li
38.2739 129.275 li
38.5239 129.173 li
38.7739 129.074 li
39.0239 129.025 li
39.2739 128.923 li
39.5239 128.824 li
232.623 162.074 mo
252.573 162.074 li
@
DVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf210.711 171.412 mo( = )[1.94629 4.08789 0 ]xsh224.523 171.412 mo(2)sh[4 2 ] 0 dsh
244.924 15.3237 mo
245.174 15.1235 li
245.424 14.9736 li
245.674 14.7734 li
245.924 14.6235 li
246.174 14.4238 li
246.424 14.2236 li
246.674 14.0737 li
246.924 13.8735 li
247.123 13.7236 li
247.373 13.5234 li
247.623 13.3735 li
247.873 13.1738 li
248.123 12.9736 li
248.373 12.8237 li
248.623 12.6235 li
248.873 12.4736 li
249.123 12.2734 li
249.373 12.0737 li
249.623 11.9238 li
249.873 11.7236 li
250.123 11.5737 li
250.373 11.3735 li
250.623 11.2236 li
250.873 11.0234 li
251.073 10.8237 li
251.323 10.6738 li
251.573 10.4736 li
251.823 10.3237 li
252.073 10.1235 li
252.323 9.92383 li
252.573 9.77344 li
252.823 9.57373 li
253.073 9.42383 li
253.323 9.22363 li
253.573 9.07373 li
253.823 8.87354 li
254.073 8.67383 li
254.323 8.52393 li
254.573 8.32373 li
254.823 8.17383 li
255.023 7.97363 li
255.273 7.77393 li
255.523 7.62354 li
255.773 7.42383 li
256.023 7.27393 li
256.273 7.07373 li
256.523 6.92383 li
256.773 6.72363 li
257.023 6.52393 li
257.273 6.37354 li
257.523 6.17383 li
257.773 6.02393 li
258.023 5.82373 li
258.273 5.62402 li
258.523 5.47363 li
258.773 5.27393 li
258.974 5.12402 li
259.224 4.92383 li
259.474 4.77393 li
259.724 4.57373 li
259.974 4.37402 li
260.224 4.22363 li
260.474 4.02393 li
260.724 3.87402 li
260.974 3.67383 li
219.224 33.9736 mo
219.474 33.7734 li
219.724 33.6235 li
219.974 33.4238 li
220.224 33.2236 li
220.474 33.0737 li
220.724 32.8735 li
220.974 32.7236 li
221.224 32.5234 li
221.474 32.3735 li
221.724 32.1738 li
221.974 31.9736 li
222.224 31.8237 li
222.474 31.6235 li
222.724 31.4736 li
222.974 31.2734 li
223.174 31.0737 li
223.424 30.9238 li
223.674 30.7236 li
223.924 30.5737 li
224.174 30.3735 li
224.424 30.2236 li
224.674 30.0234 li
224.924 29.8237 li
225.174 29.6738 li
225.424 29.4736 li
225.674 29.3237 li
225.924 29.1235 li
226.174 28.9238 li
226.424 28.7734 li
226.674 28.5737 li
226.924 28.4238 li
227.174 28.2236 li
227.373 28.0737 li
227.623 27.8735 li
227.873 27.6738 li
228.123 27.5234 li
228.373 27.3237 li
228.623 27.1738 li
228.873 26.9736 li
229.123 26.7739 li
229.373 26.6235 li
229.623 26.4238 li
229.873 26.2739 li
230.123 26.0737 li
230.373 25.8735 li
230.623 25.7236 li
230.873 25.5239 li
231.123 25.3735 li
231.323 25.1738 li
231.573 25.0239 li
231.823 24.8237 li
232.073 24.6235 li
232.323 24.4736 li
232.573 24.2739 li
232.823 24.1235 li
233.073 23.9238 li
233.323 23.7236 li
233.573 23.5737 li
233.823 23.374 li
234.073 23.2236 li
234.323 23.0239 li
234.573 22.874 li
234.823 22.6738 li
235.073 22.4736 li
235.273 22.3237 li
235.523 22.124 li
235.773 21.9736 li
236.023 21.7739 li
236.273 21.5737 li
236.523 21.4238 li
236.773 21.2236 li
237.023 21.0737 li
237.273 20.874 li
237.523 20.7236 li
237.773 20.5239 li
238.023 20.3237 li
238.273 20.1738 li
238.523 19.9736 li
238.773 19.8237 li
239.023 19.624 li
239.224 19.4238 li
239.474 19.2739 li
239.724 19.0737 li
239.974 18.9238 li
240.224 18.7236 li
240.474 18.5737 li
240.724 18.374 li
240.974 18.1738 li
241.224 18.0239 li
241.474 17.8237 li
241.724 17.6738 li
241.974 17.4736 li
242.224 17.2739 li
242.474 17.124 li
242.724 16.9238 li
242.974 16.7739 li
243.174 16.5737 li
243.424 16.4238 li
243.674 16.2236 li
243.924 16.0239 li
244.174 15.874 li
244.424 15.6738 li
244.674 15.5239 li
244.924 15.3237 li
193.573 52.6235 mo
193.823 52.4238 li
194.073 52.2236 li
194.323 52.0737 li
194.573 51.8735 li
194.823 51.7236 li
195.073 51.5234 li
195.323 51.3237 li
195.523 51.1738 li
195.773 50.9736 li
196.023 50.8237 li
196.273 50.6235 li
196.523 50.4736 li
196.773 50.2734 li
197.023 50.0737 li
197.273 49.9238 li
197.523 49.7236 li
197.773 49.5737 li
198.023 49.3735 li
198.273 49.1738 li
198.523 49.0234 li
198.773 48.8237 li
199.023 48.6738 li
199.273 48.4736 li
199.474 48.3237 li
199.724 48.1235 li
199.974 47.9238 li
200.224 47.7734 li
200.474 47.5737 li
200.724 47.4238 li
200.974 47.2236 li
201.224 47.0234 li
201.474 46.8735 li
201.724 46.6738 li
201.974 46.5239 li
202.224 46.3237 li
202.474 46.1738 li
202.724 45.9736 li
202.974 45.7739 li
203.224 45.6235 li
203.424 45.4238 li
203.674 45.2739 li
203.924 45.0737 li
204.174 44.8735 li
204.424 44.7236 li
204.674 44.5239 li
204.924 44.3735 li
205.174 44.1738 li
205.424 44.0239 li
205.674 43.8237 li
205.924 43.624 li
206.174 43.4736 li
206.424 43.2739 li
206.674 43.124 li
206.924 42.9238 li
207.174 42.7236 li
207.373 42.5737 li
207.623 42.374 li
207.873 42.2236 li
208.123 42.0239 li
208.373 41.874 li
208.623 41.6738 li
208.873 41.4736 li
209.123 41.3237 li
209.373 41.124 li
209.623 40.9736 li
209.873 40.7739 li
210.123 40.5737 li
210.373 40.4238 li
210.623 40.2236 li
210.873 40.0737 li
211.123 39.874 li
211.323 39.7236 li
211.573 39.5239 li
211.823 39.3237 li
212.073 39.1738 li
212.323 38.9736 li
212.573 38.8237 li
212.823 38.624 li
213.073 38.4238 li
213.323 38.2739 li
213.573 38.0737 li
213.823 37.9238 li
214.073 37.7236 li
214.323 37.5239 li
214.573 37.374 li
214.823 37.1738 li
215.073 37.0239 li
215.273 36.8237 li
215.523 36.6738 li
215.773 36.4736 li
216.023 36.2739 li
216.273 36.124 li
216.523 35.9238 li
216.773 35.7739 li
217.023 35.5737 li
217.273 35.374 li
217.523 35.2236 li
217.773 35.0239 li
218.023 34.874 li
218.273 34.6738 li
218.523 34.5239 li
218.773 34.3237 li
219.023 34.124 li
219.224 33.9741 li
167.873 71.2236 mo
168.123 71.0737 li
168.373 70.8735 li
168.623 70.7236 li
168.873 70.5234 li
169.123 70.3237 li
169.373 70.1738 li
169.623 69.9736 li
169.873 69.8237 li
170.123 69.6235 li
170.373 69.4736 li
170.623 69.2734 li
170.873 69.0737 li
171.123 68.9238 li
171.373 68.7236 li
171.573 68.5737 li
171.823 68.3735 li
172.073 68.1738 li
172.323 68.0234 li
172.573 67.8237 li
172.823 67.6738 li
173.073 67.4736 li
173.323 67.3237 li
173.573 67.1235 li
173.823 66.9238 li
174.073 66.7734 li
174.323 66.5737 li
174.573 66.4238 li
174.823 66.2236 li
175.073 66.0234 li
175.323 65.8735 li
175.523 65.6738 li
175.773 65.5234 li
176.023 65.3237 li
176.273 65.1738 li
176.523 64.9736 li
176.773 64.7739 li
177.023 64.6235 li
177.273 64.4238 li
177.523 64.2739 li
177.773 64.0737 li
178.023 63.8735 li
178.273 63.7236 li
178.523 63.5239 li
178.773 63.3735 li
179.023 63.1738 li
179.273 62.9736 li
179.474 62.8237 li
179.724 62.6235 li
179.974 62.4736 li
180.224 62.2739 li
180.474 62.1235 li
180.724 61.9238 li
180.974 61.7236 li
181.224 61.5737 li
181.474 61.374 li
181.724 61.2236 li
181.974 61.0239 li
182.224 60.8237 li
182.474 60.6738 li
182.724 60.4736 li
182.974 60.3237 li
183.224 60.124 li
183.424 59.9736 li
183.674 59.7739 li
183.924 59.5737 li
184.174 59.4238 li
184.424 59.2236 li
184.674 59.0737 li
184.924 58.874 li
185.174 58.6738 li
185.424 58.5239 li
185.674 58.3237 li
185.924 58.1738 li
186.174 57.9736 li
186.424 57.8237 li
186.674 57.624 li
186.924 57.4238 li
187.174 57.2739 li
187.373 57.0737 li
187.623 56.9238 li
187.873 56.7236 li
188.123 56.5239 li
188.373 56.374 li
188.623 56.1738 li
188.873 56.0239 li
189.123 55.8237 li
189.373 55.6738 li
189.623 55.4736 li
189.873 55.2739 li
190.123 55.124 li
190.373 54.9238 li
190.623 54.7739 li
190.873 54.5737 li
191.123 54.374 li
191.373 54.2236 li
191.573 54.0239 li
191.823 53.874 li
192.073 53.6738 li
192.323 53.5239 li
192.573 53.3237 li
192.823 53.124 li
193.073 52.9736 li
193.323 52.7739 li
193.573 52.624 li
142.224 89.8735 mo
142.474 89.7236 li
142.724 89.5234 li
142.974 89.3237 li
143.224 89.1738 li
143.474 88.9736 li
143.674 88.8237 li
143.924 88.6235 li
144.174 88.4736 li
144.424 88.2734 li
144.674 88.0737 li
144.924 87.9238 li
145.174 87.7236 li
145.424 87.5737 li
145.674 87.3735 li
145.924 87.1738 li
146.174 87.0234 li
146.424 86.8237 li
146.674 86.6738 li
146.924 86.4736 li
147.174 86.2734 li
147.424 86.1235 li
147.623 85.9238 li
147.873 85.7734 li
148.123 85.5737 li
148.373 85.4238 li
148.623 85.2236 li
148.873 85.0234 li
149.123 84.8735 li
149.373 84.6738 li
149.623 84.5234 li
149.873 84.3237 li
150.123 84.1235 li
150.373 83.9736 li
150.623 83.7734 li
150.873 83.6235 li
151.123 83.4238 li
151.373 83.2739 li
151.573 83.0737 li
151.823 82.8735 li
152.073 82.7236 li
152.323 82.5239 li
152.573 82.3735 li
152.823 82.1738 li
153.073 81.9736 li
153.323 81.8237 li
153.573 81.6235 li
153.823 81.4736 li
154.073 81.2739 li
154.323 81.1235 li
154.573 80.9238 li
154.823 80.7236 li
155.073 80.5737 li
155.323 80.374 li
155.573 80.2236 li
155.773 80.0239 li
156.023 79.8237 li
156.273 79.6738 li
156.523 79.4736 li
156.773 79.3237 li
157.023 79.124 li
157.273 78.9736 li
157.523 78.7739 li
157.773 78.5737 li
158.023 78.4238 li
158.273 78.2236 li
158.523 78.0737 li
158.773 77.874 li
159.023 77.6738 li
159.273 77.5239 li
159.523 77.3237 li
159.724 77.1738 li
159.974 76.9736 li
160.224 76.8237 li
160.474 76.624 li
160.724 76.4238 li
160.974 76.2739 li
161.224 76.0737 li
161.474 75.9238 li
161.724 75.7236 li
161.974 75.5239 li
162.224 75.374 li
162.474 75.1738 li
162.724 75.0239 li
162.974 74.8237 li
163.224 74.624 li
163.474 74.4736 li
163.673 74.2739 li
163.923 74.124 li
164.173 73.9238 li
164.423 73.7739 li
164.673 73.5737 li
164.923 73.374 li
165.173 73.2236 li
165.423 73.0239 li
165.673 72.874 li
165.923 72.6738 li
166.173 72.4736 li
166.423 72.3237 li
166.673 72.124 li
166.923 71.9736 li
167.173 71.7739 li
167.423 71.624 li
167.623 71.4238 li
167.873 71.2241 li
116.523 108.523 mo
116.773 108.324 li
117.023 108.173 li
117.273 107.974 li
117.523 107.824 li
117.773 107.625 li
118.023 107.423 li
118.273 107.273 li
118.523 107.074 li
118.773 106.923 li
119.023 106.724 li
119.273 106.574 li
119.523 106.375 li
119.724 106.173 li
119.974 106.023 li
120.224 105.824 li
120.474 105.673 li
120.724 105.474 li
120.974 105.273 li
121.224 105.123 li
121.474 104.923 li
121.724 104.773 li
121.974 104.574 li
122.224 104.423 li
122.474 104.224 li
122.724 104.023 li
122.974 103.873 li
123.224 103.673 li
123.474 103.523 li
123.724 103.324 li
123.923 103.123 li
124.173 102.974 li
124.423 102.773 li
124.673 102.623 li
124.923 102.423 li
125.173 102.273 li
125.423 102.074 li
125.673 101.873 li
125.923 101.724 li
126.173 101.523 li
126.423 101.373 li
126.673 101.173 li
126.923 100.974 li
127.173 100.824 li
127.423 100.623 li
127.673 100.474 li
127.874 100.273 li
128.124 100.123 li
128.374 99.9233 li
128.624 99.7241 li
128.874 99.5737 li
129.124 99.3726 li
129.374 99.2241 li
129.624 99.0229 li
129.874 98.8237 li
130.124 98.6733 li
130.374 98.4741 li
130.624 98.3237 li
130.874 98.1226 li
131.124 97.9229 li
131.374 97.7734 li
131.624 97.5732 li
131.823 97.4229 li
132.073 97.2231 li
132.323 97.0732 li
132.573 96.873 li
132.823 96.6733 li
133.073 96.5234 li
133.323 96.3232 li
133.573 96.1733 li
133.823 95.9731 li
134.073 95.7734 li
134.323 95.623 li
134.573 95.4233 li
134.823 95.2734 li
135.073 95.0732 li
135.323 94.9233 li
135.573 94.7231 li
135.773 94.5234 li
136.023 94.373 li
136.273 94.1733 li
136.523 94.0234 li
136.773 93.8232 li
137.023 93.623 li
137.273 93.4731 li
137.523 93.2734 li
137.773 93.123 li
138.023 92.9233 li
138.273 92.7734 li
138.523 92.5732 li
138.773 92.373 li
139.023 92.2231 li
139.273 92.0234 li
139.523 91.873 li
139.724 91.6733 li
139.974 91.4731 li
140.224 91.3232 li
140.474 91.123 li
140.724 90.9731 li
140.974 90.7734 li
141.224 90.6235 li
141.474 90.4233 li
141.724 90.2231 li
141.974 90.0732 li
142.224 89.8735 li
90.8735 127.173 mo
91.1235 126.974 li
91.3735 126.824 li
91.6235 126.625 li
91.8735 126.423 li
92.0732 126.273 li
92.3232 126.074 li
92.5732 125.923 li
92.8232 125.724 li
93.0732 125.574 li
93.3232 125.375 li
93.5732 125.173 li
93.8232 125.023 li
94.0732 124.824 li
94.3232 124.673 li
94.5732 124.474 li
94.8232 124.273 li
95.0737 124.123 li
95.3237 123.923 li
95.5737 123.773 li
95.8237 123.574 li
96.0234 123.423 li
96.2734 123.224 li
96.5234 123.023 li
96.7734 122.873 li
97.0234 122.673 li
97.2734 122.523 li
97.5234 122.324 li
97.7734 122.123 li
98.0234 121.974 li
98.2734 121.773 li
98.5234 121.623 li
98.7734 121.423 li
99.0234 121.224 li
99.2734 121.074 li
99.5234 120.873 li
99.7734 120.724 li
99.9736 120.523 li
100.224 120.373 li
100.474 120.173 li
100.724 119.974 li
100.974 119.824 li
101.224 119.623 li
101.474 119.474 li
101.724 119.273 li
101.974 119.074 li
102.224 118.923 li
102.474 118.724 li
102.724 118.574 li
102.974 118.373 li
103.224 118.224 li
103.474 118.023 li
103.724 117.824 li
103.924 117.673 li
104.174 117.474 li
104.424 117.324 li
104.674 117.123 li
104.924 116.923 li
105.174 116.773 li
105.424 116.574 li
105.674 116.423 li
105.924 116.224 li
106.174 116.074 li
106.424 115.873 li
106.674 115.673 li
106.924 115.523 li
107.174 115.324 li
107.424 115.173 li
107.674 114.974 li
107.874 114.773 li
108.124 114.623 li
108.374 114.423 li
108.624 114.273 li
108.874 114.074 li
109.124 113.923 li
109.374 113.724 li
109.624 113.523 li
109.874 113.373 li
110.124 113.173 li
110.374 113.023 li
110.624 112.824 li
110.874 112.623 li
111.124 112.474 li
111.374 112.273 li
111.624 112.123 li
111.824 111.923 li
112.074 111.773 li
112.324 111.574 li
112.574 111.373 li
112.824 111.222 li
113.074 111.023 li
113.324 110.873 li
113.574 110.673 li
113.824 110.472 li
114.074 110.324 li
114.324 110.123 li
114.574 109.972 li
114.824 109.773 li
115.074 109.574 li
115.324 109.423 li
115.574 109.222 li
115.774 109.074 li
116.024 108.873 li
116.274 108.722 li
116.524 108.523 li
65.1733 145.824 mo
65.4233 145.625 li
65.6733 145.423 li
65.9233 145.273 li
66.1733 145.074 li
66.4233 144.923 li
66.6733 144.724 li
66.9233 144.523 li
67.1733 144.375 li
67.4233 144.173 li
67.6733 144.023 li
67.9233 143.824 li
68.1235 143.673 li
68.3735 143.474 li
68.6235 143.273 li
68.8735 143.123 li
69.1235 142.923 li
69.3735 142.773 li
69.6235 142.574 li
69.8735 142.373 li
70.1235 142.224 li
70.3735 142.023 li
70.6235 141.873 li
70.8735 141.673 li
71.1235 141.523 li
71.3735 141.324 li
71.6235 141.123 li
71.8735 140.974 li
72.0737 140.773 li
72.3237 140.623 li
72.5737 140.423 li
72.8237 140.224 li
73.0737 140.074 li
73.3237 139.873 li
73.5737 139.724 li
73.8237 139.523 li
74.0737 139.373 li
74.3237 139.173 li
74.5737 138.974 li
74.8237 138.824 li
75.0737 138.623 li
75.3237 138.474 li
75.5737 138.273 li
75.8237 138.074 li
76.0234 137.923 li
76.2734 137.724 li
76.5234 137.574 li
76.7734 137.373 li
77.0234 137.224 li
77.2734 137.023 li
77.5234 136.824 li
77.7734 136.673 li
78.0234 136.474 li
78.2734 136.324 li
78.5234 136.123 li
78.7734 135.923 li
79.0234 135.773 li
79.2739 135.574 li
79.5239 135.423 li
79.7739 135.224 li
79.9736 135.074 li
80.2236 134.873 li
80.4736 134.673 li
80.7236 134.523 li
80.9736 134.324 li
81.2236 134.173 li
81.4736 133.974 li
81.7236 133.773 li
81.9736 133.623 li
82.2236 133.423 li
82.4736 133.273 li
82.7236 133.074 li
82.9736 132.873 li
83.2236 132.724 li
83.4736 132.523 li
83.7236 132.373 li
83.9238 132.173 li
84.1738 132.023 li
84.4238 131.824 li
84.6738 131.623 li
84.9238 131.474 li
85.1738 131.273 li
85.4238 131.123 li
85.6738 130.923 li
85.9238 130.722 li
86.1738 130.574 li
86.4238 130.373 li
86.6738 130.222 li
86.9238 130.023 li
87.1738 129.873 li
87.4238 129.673 li
87.6738 129.472 li
87.9238 129.324 li
88.124 129.123 li
88.374 128.972 li
88.624 128.773 li
88.874 128.574 li
89.124 128.423 li
89.374 128.222 li
89.624 128.074 li
89.874 127.873 li
90.124 127.722 li
90.374 127.523 li
90.624 127.324 li
90.874 127.173 li
39.5234 164.423 mo
39.7734 164.273 li
40.0234 164.074 li
40.2236 163.923 li
40.4736 163.724 li
40.7236 163.523 li
40.9736 163.375 li
41.2236 163.173 li
41.4736 163.023 li
41.7236 162.824 li
41.9736 162.673 li
42.2236 162.474 li
42.4736 162.273 li
42.7236 162.125 li
42.9736 161.923 li
43.2236 161.773 li
43.4736 161.574 li
43.7236 161.373 li
43.9736 161.224 li
44.1733 161.023 li
44.4233 160.873 li
44.6733 160.673 li
44.9233 160.523 li
45.1733 160.324 li
45.4233 160.123 li
45.6733 159.974 li
45.9233 159.773 li
46.1733 159.623 li
46.4233 159.423 li
46.6733 159.224 li
46.9233 159.074 li
47.1733 158.873 li
47.4233 158.724 li
47.6738 158.523 li
47.9238 158.324 li
48.1235 158.173 li
48.3735 157.974 li
48.6235 157.824 li
48.8735 157.623 li
49.1235 157.474 li
49.3735 157.273 li
49.6235 157.074 li
49.8735 156.923 li
50.1235 156.724 li
50.3735 156.574 li
50.6235 156.373 li
50.8735 156.173 li
51.1235 156.023 li
51.3735 155.824 li
51.6235 155.673 li
51.8735 155.474 li
52.1235 155.324 li
52.3237 155.123 li
52.5737 154.923 li
52.8237 154.773 li
53.0737 154.574 li
53.3237 154.423 li
53.5737 154.224 li
53.8237 154.023 li
54.0737 153.873 li
54.3237 153.673 li
54.5737 153.523 li
54.8237 153.324 li
55.0737 153.173 li
55.3237 152.974 li
55.5737 152.773 li
55.8237 152.623 li
56.0737 152.423 li
56.2739 152.273 li
56.5239 152.074 li
56.7739 151.873 li
57.0239 151.724 li
57.2739 151.523 li
57.5239 151.373 li
57.7739 151.173 li
58.0239 151.023 li
58.2739 150.824 li
58.5239 150.623 li
58.7739 150.474 li
59.0239 150.273 li
59.2739 150.123 li
59.5239 149.923 li
59.7739 149.722 li
60.0239 149.574 li
60.2236 149.373 li
60.4736 149.222 li
60.7236 149.023 li
60.9736 148.873 li
61.2236 148.673 li
61.4736 148.472 li
61.7236 148.324 li
61.9736 148.123 li
62.2236 147.972 li
62.4736 147.773 li
62.7236 147.574 li
62.9736 147.423 li
63.2236 147.222 li
63.4736 147.074 li
63.7236 146.873 li
63.9736 146.673 li
64.1738 146.523 li
64.4238 146.324 li
64.6738 146.173 li
64.9238 145.972 li
65.1738 145.824 li
14.3232 182.724 mo
14.5732 182.523 li
14.8232 182.375 li
15.0732 182.173 li
15.3232 182.023 li
15.5732 181.824 li
15.8232 181.625 li
16.0732 181.474 li
16.3232 181.273 li
16.5234 181.125 li
16.7734 180.923 li
17.0234 180.773 li
17.2734 180.574 li
17.5234 180.373 li
17.7734 180.224 li
18.0234 180.023 li
18.2734 179.873 li
18.5234 179.673 li
18.7734 179.474 li
19.0234 179.324 li
19.2734 179.123 li
19.5234 178.974 li
19.7734 178.773 li
20.0234 178.623 li
20.2734 178.423 li
20.4736 178.224 li
20.7236 178.074 li
20.9736 177.873 li
21.2236 177.724 li
21.4736 177.523 li
21.7236 177.324 li
21.9736 177.173 li
22.2236 176.974 li
22.4736 176.824 li
22.7236 176.623 li
22.9736 176.474 li
23.2236 176.273 li
23.4736 176.074 li
23.7236 175.923 li
23.9736 175.724 li
24.2236 175.574 li
24.4238 175.373 li
24.6738 175.173 li
24.9238 175.023 li
25.1738 174.824 li
25.4238 174.673 li
25.6738 174.474 li
25.9238 174.324 li
26.1738 174.123 li
26.4238 173.923 li
26.6738 173.773 li
26.9238 173.574 li
27.1738 173.423 li
27.4238 173.224 li
27.6738 173.023 li
27.9238 172.873 li
28.1738 172.673 li
28.3735 172.523 li
28.6235 172.324 li
28.8735 172.173 li
29.1235 171.974 li
29.3735 171.773 li
29.6235 171.623 li
29.8735 171.423 li
30.1235 171.273 li
30.3735 171.074 li
30.6235 170.873 li
30.8735 170.724 li
31.1235 170.523 li
31.3735 170.373 li
31.6235 170.173 li
31.8735 169.974 li
32.1235 169.824 li
32.3237 169.623 li
32.5737 169.474 li
32.8237 169.273 li
33.0737 169.123 li
33.3237 168.923 li
33.5737 168.724 li
33.8237 168.574 li
34.0737 168.373 li
34.3237 168.224 li
34.5737 168.023 li
34.8237 167.824 li
35.0737 167.673 li
35.3237 167.472 li
35.5737 167.324 li
35.8237 167.123 li
36.0737 166.972 li
36.2739 166.773 li
36.5239 166.574 li
36.7739 166.423 li
37.0239 166.222 li
37.2739 166.074 li
37.5239 165.873 li
37.7739 165.673 li
38.0239 165.523 li
38.2739 165.324 li
38.5239 165.173 li
38.7739 164.972 li
39.0239 164.824 li
39.2739 164.623 li
39.5239 164.423 li
232.623 169.074 mo
252.573 169.074 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEZ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/slash <1C60D8A8C9B854D08E823E34E98D69F07852149357481CB22577590CC2367BB833216B> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEZ+Helvetica /Encoding getdup 47 /slash putpop%ADOEndSubsetFont
/DVPWEZ+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one /two 2{/.notdef}rp /five 7{/.notdef}rp /equal 39{/.notdef}rp /e 6{/.notdef}rp /l 2{/.notdef}rp /o /p 2{/.notdef}rp /s 140{/.notdef}rp]DVPWEZ+Helvetica nfDVPWEZ+Helvetica*1 [7 0 0 -7 0 0 ]msf210.711 178.412 mo( = 1/2)[1.94629 4.08789 1.94629 3.8916 1.94629 0 ]xsh[2 3 ] 0 dsh
244.924 73.7236 mo
245.174 73.6738 li
245.424 73.6235 li
245.674 73.5737 li
245.924 73.5737 li
246.174 73.5234 li
246.424 73.4736 li
246.674 73.4238 li
246.924 73.3735 li
247.123 73.3237 li
247.373 73.2734 li
247.623 73.2236 li
247.873 73.1738 li
248.123 73.1235 li
248.373 73.1235 li
248.623 73.0737 li
248.873 73.0234 li
249.123 72.9736 li
249.373 72.9238 li
249.623 72.8735 li
249.873 72.8237 li
250.123 72.7734 li
250.373 72.7236 li
250.623 72.7236 li
250.873 72.6738 li
251.073 72.6235 li
251.323 72.5737 li
251.573 72.5239 li
251.823 72.4736 li
252.073 72.4238 li
252.323 72.3735 li
252.573 72.3237 li
252.823 72.2739 li
253.073 72.2739 li
253.323 72.2236 li
253.573 72.1738 li
253.823 72.124 li
254.073 72.0737 li
254.323 72.0239 li
254.573 71.9736 li
254.823 71.9238 li
255.023 71.874 li
255.273 71.8237 li
255.523 71.8237 li
255.773 71.7739 li
256.023 71.7236 li
256.273 71.6738 li
256.523 71.624 li
256.773 71.5737 li
257.023 71.5239 li
257.273 71.4736 li
257.523 71.4238 li
257.773 71.4238 li
258.023 71.374 li
258.273 71.3237 li
258.523 71.2739 li
258.773 71.2236 li
258.974 71.1738 li
259.224 71.124 li
259.474 71.0737 li
259.724 71.0239 li
259.974 70.9736 li
260.224 70.9736 li
260.474 70.9238 li
260.724 70.874 li
260.974 70.8237 li
219.224 78.3735 mo
219.474 78.3237 li
219.724 78.3237 li
219.974 78.2734 li
220.224 78.2236 li
220.474 78.1738 li
220.724 78.1235 li
220.974 78.0737 li
221.224 78.0234 li
221.474 77.9736 li
221.724 77.9238 li
221.974 77.8735 li
222.224 77.8735 li
222.474 77.8237 li
222.724 77.7734 li
222.974 77.7236 li
223.174 77.6738 li
223.424 77.6235 li
223.674 77.5737 li
223.924 77.5234 li
224.174 77.4736 li
224.424 77.4736 li
224.674 77.4238 li
224.924 77.3735 li
225.174 77.3237 li
225.424 77.2739 li
225.674 77.2236 li
225.924 77.1738 li
226.174 77.1235 li
226.424 77.0737 li
226.674 77.0239 li
226.924 77.0239 li
227.174 76.9736 li
227.373 76.9238 li
227.623 76.8735 li
227.873 76.8237 li
228.123 76.7739 li
228.373 76.7236 li
228.623 76.6738 li
228.873 76.624 li
229.123 76.5737 li
229.373 76.5737 li
229.623 76.5239 li
229.873 76.4736 li
230.123 76.4238 li
230.373 76.374 li
230.623 76.3237 li
230.873 76.2739 li
231.123 76.2236 li
231.323 76.1738 li
231.573 76.1738 li
231.823 76.124 li
232.073 76.0737 li
232.323 76.0239 li
232.573 75.9736 li
232.823 75.9238 li
233.073 75.874 li
233.323 75.8237 li
233.573 75.7739 li
233.823 75.7236 li
234.073 75.7236 li
234.323 75.6738 li
234.573 75.624 li
234.823 75.5737 li
235.073 75.5239 li
235.273 75.4736 li
235.523 75.4238 li
235.773 75.374 li
236.023 75.3237 li
236.273 75.2739 li
236.523 75.2739 li
236.773 75.2241 li
237.023 75.1738 li
237.273 75.124 li
237.523 75.0737 li
237.773 75.0239 li
238.023 74.9741 li
238.273 74.9238 li
238.523 74.874 li
238.773 74.874 li
239.023 74.8237 li
239.224 74.7739 li
239.474 74.7241 li
239.724 74.6738 li
239.974 74.624 li
240.224 74.5742 li
240.474 74.5239 li
240.724 74.4741 li
240.974 74.4238 li
241.224 74.4238 li
241.474 74.374 li
241.724 74.3242 li
241.974 74.2739 li
242.224 74.2241 li
242.474 74.1738 li
242.724 74.124 li
242.974 74.0742 li
243.174 74.0239 li
243.424 74.0239 li
243.674 73.9741 li
243.924 73.9238 li
244.174 73.874 li
244.424 73.8242 li
244.674 73.7739 li
244.924 73.7241 li
193.573 83.0737 mo
193.823 83.0234 li
194.073 82.9736 li
194.323 82.9238 li
194.573 82.8735 li
194.823 82.8237 li
195.073 82.7734 li
195.323 82.7236 li
195.523 82.6738 li
195.773 82.6235 li
196.023 82.6235 li
196.273 82.5737 li
196.523 82.5234 li
196.773 82.4736 li
197.023 82.4238 li
197.273 82.3735 li
197.523 82.3237 li
197.773 82.2734 li
198.023 82.2236 li
198.273 82.1738 li
198.523 82.1738 li
198.773 82.1235 li
199.023 82.0737 li
199.273 82.0239 li
199.474 81.9736 li
199.724 81.9238 li
199.974 81.8735 li
200.224 81.8237 li
200.474 81.7739 li
200.724 81.7739 li
200.974 81.7236 li
201.224 81.6738 li
201.474 81.6235 li
201.724 81.5737 li
201.974 81.5239 li
202.224 81.4736 li
202.474 81.4238 li
202.724 81.374 li
202.974 81.3237 li
203.224 81.3237 li
203.424 81.2739 li
203.674 81.2236 li
203.924 81.1738 li
204.174 81.124 li
204.424 81.0737 li
204.674 81.0239 li
204.924 80.9736 li
205.174 80.9238 li
205.424 80.9238 li
205.674 80.874 li
205.924 80.8237 li
206.174 80.7739 li
206.424 80.7236 li
206.674 80.6738 li
206.924 80.624 li
207.174 80.5737 li
207.373 80.5239 li
207.623 80.4736 li
207.873 80.4736 li
208.123 80.4238 li
208.373 80.374 li
208.623 80.3237 li
208.873 80.2739 li
209.123 80.2236 li
209.373 80.1738 li
209.623 80.124 li
209.873 80.0737 li
210.123 80.0239 li
210.373 80.0239 li
210.623 79.9741 li
210.873 79.9238 li
211.123 79.874 li
211.323 79.8237 li
211.573 79.7739 li
211.823 79.7241 li
212.073 79.6738 li
212.323 79.624 li
212.573 79.624 li
212.823 79.5742 li
213.073 79.5239 li
213.323 79.4741 li
213.573 79.4238 li
213.823 79.374 li
214.073 79.3242 li
214.323 79.2739 li
214.573 79.2241 li
214.823 79.1738 li
215.073 79.1738 li
215.273 79.124 li
215.523 79.0742 li
215.773 79.0239 li
216.023 78.9741 li
216.273 78.9238 li
216.523 78.874 li
216.773 78.8242 li
217.023 78.7739 li
217.273 78.7241 li
217.523 78.7241 li
217.773 78.6738 li
218.023 78.624 li
218.273 78.5742 li
218.523 78.5239 li
218.773 78.4741 li
219.023 78.4238 li
219.224 78.374 li
167.873 87.7236 mo
168.123 87.6738 li
168.373 87.6235 li
168.623 87.5737 li
168.873 87.5234 li
169.123 87.4736 li
169.373 87.4238 li
169.623 87.3735 li
169.873 87.3735 li
170.123 87.3237 li
170.373 87.2734 li
170.623 87.2236 li
170.873 87.1738 li
171.123 87.1235 li
171.373 87.0737 li
171.573 87.0234 li
171.823 86.9736 li
172.073 86.9238 li
172.323 86.9238 li
172.573 86.8735 li
172.823 86.8237 li
173.073 86.7734 li
173.323 86.7236 li
173.573 86.6738 li
173.823 86.6235 li
174.073 86.5737 li
174.323 86.5239 li
174.573 86.5239 li
174.823 86.4736 li
175.073 86.4238 li
175.323 86.3735 li
175.523 86.3237 li
175.773 86.2739 li
176.023 86.2236 li
176.273 86.1738 li
176.523 86.124 li
176.773 86.0737 li
177.023 86.0737 li
177.273 86.0239 li
177.523 85.9736 li
177.773 85.9238 li
178.023 85.874 li
178.273 85.8237 li
178.523 85.7739 li
178.773 85.7236 li
179.023 85.6738 li
179.273 85.624 li
179.474 85.624 li
179.724 85.5737 li
179.974 85.5239 li
180.224 85.4736 li
180.474 85.4238 li
180.724 85.374 li
180.974 85.3237 li
181.224 85.2739 li
181.474 85.2236 li
181.724 85.2236 li
181.974 85.1738 li
182.224 85.124 li
182.474 85.0737 li
182.724 85.0239 li
182.974 84.9736 li
183.224 84.9238 li
183.424 84.874 li
183.674 84.8237 li
183.924 84.7739 li
184.174 84.7739 li
184.424 84.7241 li
184.674 84.6738 li
184.924 84.624 li
185.174 84.5737 li
185.424 84.5239 li
185.674 84.4741 li
185.924 84.4238 li
186.174 84.374 li
186.424 84.374 li
186.674 84.3237 li
186.924 84.2739 li
187.174 84.2241 li
187.373 84.1738 li
187.623 84.124 li
187.873 84.0742 li
188.123 84.0239 li
188.373 83.9741 li
188.623 83.9238 li
188.873 83.9238 li
189.123 83.874 li
189.373 83.8242 li
189.623 83.7739 li
189.873 83.7241 li
190.123 83.6738 li
190.373 83.624 li
190.623 83.5742 li
190.873 83.5239 li
191.123 83.4741 li
191.373 83.4741 li
191.573 83.4238 li
191.823 83.374 li
192.073 83.3242 li
192.323 83.2739 li
192.573 83.2241 li
192.823 83.1738 li
193.073 83.124 li
193.323 83.0742 li
193.573 83.0742 li
142.224 92.3735 mo
142.474 92.3237 li
142.724 92.2734 li
142.974 92.2236 li
143.224 92.1738 li
143.474 92.1235 li
143.674 92.1235 li
143.924 92.0737 li
144.174 92.0234 li
144.424 91.9736 li
144.674 91.9238 li
144.924 91.8735 li
145.174 91.8237 li
145.424 91.7734 li
145.674 91.7236 li
145.924 91.6738 li
146.174 91.6738 li
146.424 91.6235 li
146.674 91.5737 li
146.924 91.5234 li
147.174 91.4736 li
147.424 91.4238 li
147.623 91.3735 li
147.873 91.3237 li
148.123 91.2739 li
148.373 91.2739 li
148.623 91.2236 li
148.873 91.1738 li
149.123 91.1235 li
149.373 91.0737 li
149.623 91.0239 li
149.873 90.9736 li
150.123 90.9238 li
150.373 90.874 li
150.623 90.8237 li
150.873 90.8237 li
151.123 90.7739 li
151.373 90.7236 li
151.573 90.6738 li
151.823 90.624 li
152.073 90.5737 li
152.323 90.5239 li
152.573 90.4736 li
152.823 90.4238 li
153.073 90.374 li
153.323 90.374 li
153.573 90.3237 li
153.823 90.2739 li
154.073 90.2236 li
154.323 90.1738 li
154.573 90.124 li
154.823 90.0737 li
155.073 90.0239 li
155.323 89.9736 li
155.573 89.9736 li
155.773 89.9238 li
156.023 89.874 li
156.273 89.8237 li
156.523 89.7739 li
156.773 89.7236 li
157.023 89.6738 li
157.273 89.624 li
157.523 89.5737 li
157.773 89.5239 li
158.023 89.5239 li
158.273 89.4736 li
158.523 89.4238 li
158.773 89.374 li
159.023 89.3237 li
159.273 89.2739 li
159.523 89.2241 li
159.724 89.1738 li
159.974 89.124 li
160.224 89.124 li
160.474 89.0737 li
160.724 89.0239 li
160.974 88.9741 li
161.224 88.9238 li
161.474 88.874 li
161.724 88.8242 li
161.974 88.7739 li
162.224 88.7241 li
162.474 88.6738 li
162.724 88.6738 li
162.974 88.624 li
163.224 88.5742 li
163.474 88.5239 li
163.673 88.4741 li
163.923 88.4238 li
164.173 88.374 li
164.423 88.3242 li
164.673 88.2739 li
164.923 88.2241 li
165.173 88.2241 li
165.423 88.1738 li
165.673 88.124 li
165.923 88.0742 li
166.173 88.0239 li
166.423 87.9741 li
166.673 87.9238 li
166.923 87.874 li
167.173 87.8242 li
167.423 87.8242 li
167.623 87.7739 li
167.873 87.7241 li
116.523 97.0234 mo
116.773 96.9736 li
117.023 96.9238 li
117.273 96.8735 li
117.523 96.8735 li
117.773 96.8237 li
118.023 96.7734 li
118.273 96.7236 li
118.523 96.6733 li
118.773 96.6235 li
119.023 96.5737 li
119.273 96.5234 li
119.523 96.4736 li
119.724 96.4233 li
119.974 96.4233 li
120.224 96.3735 li
120.474 96.3237 li
120.724 96.2734 li
120.974 96.2236 li
121.224 96.1733 li
121.474 96.1235 li
121.724 96.0737 li
121.974 96.0234 li
122.224 96.0234 li
122.474 95.9736 li
122.724 95.9238 li
122.974 95.8735 li
123.224 95.8237 li
123.474 95.7734 li
123.724 95.7236 li
123.923 95.6738 li
124.173 95.6235 li
124.423 95.5737 li
124.673 95.5737 li
124.923 95.5234 li
125.173 95.4736 li
125.423 95.4238 li
125.673 95.3735 li
125.923 95.3237 li
126.173 95.2734 li
126.423 95.2236 li
126.673 95.1738 li
126.923 95.1235 li
127.173 95.1235 li
127.423 95.0737 li
127.673 95.0234 li
127.874 94.9736 li
128.124 94.9238 li
128.374 94.8735 li
128.624 94.8237 li
128.874 94.7734 li
129.124 94.7236 li
129.374 94.7236 li
129.624 94.6738 li
129.874 94.6235 li
130.124 94.5737 li
130.374 94.5239 li
130.624 94.4736 li
130.874 94.4238 li
131.124 94.3735 li
131.374 94.3237 li
131.624 94.2739 li
131.823 94.2739 li
132.073 94.2236 li
132.323 94.1738 li
132.573 94.1235 li
132.823 94.0737 li
133.073 94.0239 li
133.323 93.9736 li
133.573 93.9238 li
133.823 93.874 li
134.073 93.8237 li
134.323 93.8237 li
134.573 93.7739 li
134.823 93.7236 li
135.073 93.6738 li
135.323 93.624 li
135.573 93.5737 li
135.773 93.5239 li
136.023 93.4736 li
136.273 93.4238 li
136.523 93.4238 li
136.773 93.374 li
137.023 93.3237 li
137.273 93.2739 li
137.523 93.2236 li
137.773 93.1738 li
138.023 93.124 li
138.273 93.0737 li
138.523 93.0239 li
138.773 92.9736 li
139.023 92.9736 li
139.273 92.9238 li
139.523 92.874 li
139.724 92.8237 li
139.974 92.7739 li
140.224 92.7236 li
140.474 92.6738 li
140.724 92.624 li
140.974 92.5737 li
141.224 92.5737 li
141.474 92.5239 li
141.724 92.4741 li
141.974 92.4238 li
142.224 92.374 li
90.8735 101.673 mo
91.1235 101.625 li
91.3735 101.625 li
91.6235 101.574 li
91.8735 101.523 li
92.0732 101.474 li
92.3232 101.423 li
92.5732 101.375 li
92.8232 101.324 li
93.0732 101.273 li
93.3232 101.224 li
93.5732 101.173 li
93.8232 101.173 li
94.0732 101.123 li
94.3232 101.074 li
94.5732 101.023 li
94.8232 100.974 li
95.0737 100.923 li
95.3237 100.873 li
95.5737 100.824 li
95.8237 100.773 li
96.0234 100.773 li
96.2734 100.724 li
96.5234 100.673 li
96.7734 100.623 li
97.0234 100.574 li
97.2734 100.523 li
97.5234 100.474 li
97.7734 100.423 li
98.0234 100.373 li
98.2734 100.324 li
98.5234 100.324 li
98.7734 100.273 li
99.0234 100.224 li
99.2734 100.173 li
99.5234 100.123 li
99.7734 100.074 li
99.9736 100.023 li
100.224 99.9741 li
100.474 99.9233 li
100.724 99.8726 li
100.974 99.8726 li
101.224 99.8237 li
101.474 99.7729 li
101.724 99.7241 li
101.974 99.6733 li
102.224 99.6226 li
102.474 99.5737 li
102.724 99.5229 li
102.974 99.4741 li
103.224 99.4741 li
103.474 99.4233 li
103.724 99.3726 li
103.924 99.3237 li
104.174 99.2729 li
104.424 99.2241 li
104.674 99.1733 li
104.924 99.1226 li
105.174 99.0737 li
105.424 99.0229 li
105.674 99.0229 li
105.924 98.9722 li
106.174 98.9233 li
106.424 98.8726 li
106.674 98.8237 li
106.924 98.7729 li
107.174 98.7222 li
107.424 98.6733 li
107.674 98.6226 li
107.874 98.5737 li
108.124 98.5737 li
108.374 98.5229 li
108.624 98.4722 li
108.874 98.4233 li
109.124 98.3726 li
109.374 98.3237 li
109.624 98.2729 li
109.874 98.2222 li
110.124 98.1733 li
110.374 98.1733 li
110.624 98.1226 li
110.874 98.0737 li
111.124 98.0229 li
111.374 97.9727 li
111.624 97.9229 li
111.824 97.873 li
112.074 97.8232 li
112.324 97.7725 li
112.574 97.7227 li
112.824 97.7227 li
113.074 97.6729 li
113.324 97.623 li
113.574 97.5732 li
113.824 97.5225 li
114.074 97.4727 li
114.324 97.4229 li
114.574 97.373 li
114.824 97.3232 li
115.074 97.2725 li
115.324 97.2725 li
115.574 97.2227 li
115.774 97.1729 li
116.024 97.1226 li
116.274 97.0728 li
116.524 97.0225 li
65.1733 106.375 mo
65.4233 106.324 li
65.6733 106.273 li
65.9233 106.224 li
66.1733 106.173 li
66.4233 106.125 li
66.6733 106.074 li
66.9233 106.023 li
67.1733 105.974 li
67.4233 105.923 li
67.6733 105.923 li
67.9233 105.873 li
68.1235 105.824 li
68.3735 105.773 li
68.6235 105.724 li
68.8735 105.673 li
69.1235 105.623 li
69.3735 105.574 li
69.6235 105.523 li
69.8735 105.474 li
70.1235 105.474 li
70.3735 105.423 li
70.6235 105.373 li
70.8735 105.324 li
71.1235 105.273 li
71.3735 105.224 li
71.6235 105.173 li
71.8735 105.123 li
72.0737 105.074 li
72.3237 105.074 li
72.5737 105.023 li
72.8237 104.974 li
73.0737 104.923 li
73.3237 104.873 li
73.5737 104.824 li
73.8237 104.773 li
74.0737 104.724 li
74.3237 104.673 li
74.5737 104.623 li
74.8237 104.623 li
75.0737 104.574 li
75.3237 104.523 li
75.5737 104.474 li
75.8237 104.423 li
76.0234 104.373 li
76.2734 104.324 li
76.5234 104.273 li
76.7734 104.224 li
77.0234 104.224 li
77.2734 104.173 li
77.5234 104.123 li
77.7734 104.074 li
78.0234 104.023 li
78.2734 103.974 li
78.5234 103.923 li
78.7734 103.873 li
79.0234 103.824 li
79.2739 103.773 li
79.5239 103.773 li
79.7739 103.722 li
79.9736 103.673 li
80.2236 103.623 li
80.4736 103.574 li
80.7236 103.523 li
80.9736 103.472 li
81.2236 103.423 li
81.4736 103.373 li
81.7236 103.324 li
81.9736 103.324 li
82.2236 103.273 li
82.4736 103.222 li
82.7236 103.173 li
82.9736 103.123 li
83.2236 103.074 li
83.4736 103.023 li
83.7236 102.972 li
83.9238 102.923 li
84.1738 102.923 li
84.4238 102.873 li
84.6738 102.824 li
84.9238 102.773 li
85.1738 102.722 li
85.4238 102.673 li
85.6738 102.623 li
85.9238 102.574 li
86.1738 102.523 li
86.4238 102.472 li
86.6738 102.472 li
86.9238 102.423 li
87.1738 102.373 li
87.4238 102.324 li
87.6738 102.273 li
87.9238 102.222 li
88.124 102.173 li
88.374 102.123 li
88.624 102.074 li
88.874 102.023 li
89.124 102.023 li
89.374 101.972 li
89.624 101.923 li
89.874 101.873 li
90.124 101.822 li
90.374 101.773 li
90.624 101.722 li
90.874 101.673 li
39.5234 111.023 mo
39.7734 110.974 li
40.0234 110.923 li
40.2236 110.875 li
40.4736 110.824 li
40.7236 110.773 li
40.9736 110.724 li
41.2236 110.673 li
41.4736 110.673 li
41.7236 110.623 li
41.9736 110.574 li
42.2236 110.523 li
42.4736 110.474 li
42.7236 110.423 li
42.9736 110.373 li
43.2236 110.324 li
43.4736 110.273 li
43.7236 110.224 li
43.9736 110.224 li
44.1733 110.173 li
44.4233 110.123 li
44.6733 110.074 li
44.9233 110.023 li
45.1733 109.974 li
45.4233 109.923 li
45.6733 109.873 li
45.9233 109.824 li
46.1733 109.824 li
46.4233 109.773 li
46.6733 109.724 li
46.9233 109.673 li
47.1733 109.623 li
47.4233 109.574 li
47.6738 109.523 li
47.9238 109.474 li
48.1235 109.423 li
48.3735 109.373 li
48.6235 109.373 li
48.8735 109.324 li
49.1235 109.273 li
49.3735 109.224 li
49.6235 109.173 li
49.8735 109.123 li
50.1235 109.074 li
50.3735 109.023 li
50.6235 108.974 li
50.8735 108.923 li
51.1235 108.923 li
51.3735 108.873 li
51.6235 108.824 li
51.8735 108.773 li
52.1235 108.724 li
52.3237 108.673 li
52.5737 108.623 li
52.8237 108.574 li
53.0737 108.523 li
53.3237 108.523 li
53.5737 108.472 li
53.8237 108.423 li
54.0737 108.373 li
54.3237 108.324 li
54.5737 108.273 li
54.8237 108.222 li
55.0737 108.173 li
55.3237 108.123 li
55.5737 108.074 li
55.8237 108.074 li
56.0737 108.023 li
56.2739 107.972 li
56.5239 107.923 li
56.7739 107.873 li
57.0239 107.824 li
57.2739 107.773 li
57.5239 107.722 li
57.7739 107.673 li
58.0239 107.673 li
58.2739 107.623 li
58.5239 107.574 li
58.7739 107.523 li
59.0239 107.472 li
59.2739 107.423 li
59.5239 107.373 li
59.7739 107.324 li
60.0239 107.273 li
60.2236 107.222 li
60.4736 107.222 li
60.7236 107.173 li
60.9736 107.123 li
61.2236 107.074 li
61.4736 107.023 li
61.7236 106.972 li
61.9736 106.923 li
62.2236 106.873 li
62.4736 106.824 li
62.7236 106.773 li
62.9736 106.773 li
63.2236 106.722 li
63.4736 106.673 li
63.7236 106.623 li
63.9736 106.572 li
64.1738 106.523 li
64.4238 106.472 li
64.6738 106.423 li
64.9238 106.373 li
65.1738 106.373 li
14.3232 115.574 mo
14.5732 115.523 li
14.8232 115.474 li
15.0732 115.423 li
15.3232 115.423 li
15.5732 115.375 li
15.8232 115.324 li
16.0732 115.273 li
16.3232 115.224 li
16.5234 115.173 li
16.7734 115.123 li
17.0234 115.074 li
17.2734 115.023 li
17.5234 114.974 li
17.7734 114.974 li
18.0234 114.923 li
18.2734 114.873 li
18.5234 114.824 li
18.7734 114.773 li
19.0234 114.724 li
19.2734 114.673 li
19.5234 114.623 li
19.7734 114.574 li
20.0234 114.574 li
20.2734 114.523 li
20.4736 114.474 li
20.7236 114.423 li
20.9736 114.373 li
21.2236 114.324 li
21.4736 114.273 li
21.7236 114.224 li
21.9736 114.173 li
22.2236 114.123 li
22.4736 114.123 li
22.7236 114.074 li
22.9736 114.023 li
23.2236 113.974 li
23.4736 113.923 li
23.7236 113.873 li
23.9736 113.824 li
24.2236 113.773 li
24.4238 113.724 li
24.6738 113.673 li
24.9238 113.673 li
25.1738 113.623 li
25.4238 113.574 li
25.6738 113.523 li
25.9238 113.474 li
26.1738 113.423 li
26.4238 113.373 li
26.6738 113.324 li
26.9238 113.273 li
27.1738 113.273 li
27.4238 113.224 li
27.6738 113.173 li
27.9238 113.123 li
28.1738 113.074 li
28.3735 113.023 li
28.6235 112.972 li
28.8735 112.923 li
29.1235 112.873 li
29.3735 112.824 li
29.6235 112.824 li
29.8735 112.773 li
30.1235 112.722 li
30.3735 112.673 li
30.6235 112.623 li
30.8735 112.574 li
31.1235 112.523 li
31.3735 112.472 li
31.6235 112.423 li
31.8735 112.373 li
32.1235 112.373 li
32.3237 112.324 li
32.5737 112.273 li
32.8237 112.222 li
33.0737 112.173 li
33.3237 112.123 li
33.5737 112.074 li
33.8237 112.023 li
34.0737 111.972 li
34.3237 111.972 li
34.5737 111.923 li
34.8237 111.873 li
35.0737 111.824 li
35.3237 111.773 li
35.5737 111.722 li
35.8237 111.673 li
36.0737 111.623 li
36.2739 111.574 li
36.5239 111.523 li
36.7739 111.523 li
37.0239 111.472 li
37.2739 111.423 li
37.5239 111.373 li
37.7739 111.324 li
38.0239 111.273 li
38.2739 111.222 li
38.5239 111.173 li
38.7739 111.123 li
39.0239 111.123 li
39.2739 111.072 li
39.5239 111.023 li
232.623 176.074 mo
252.573 176.074 li
@
0.5 lw
[] 0 dsh
14.3232 3.67383 mo
14.3232 182.724 li
260.974 182.724 li
260.974 3.67383 li
14.3232 3.67383 li
14.3232 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWEZ+Helvetica*1 uf/DVPWEZ+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (linear.eps)%%CreationDate: 10/4/10 2:24 PM%AI9_DataStream%Gb"-6kB\=6djTN[J9q:NfOR%)*O&,\3G2jN[M`SjK_;MDIdCi7.]F.D2duEmqj]h8=W#ZRP,]d-;O%q+=*inEX53`Qo_pEGjh)4*%MT&sm/Hdju2%U8d[*Q+Q?(I4K=(G8bT.6d"oL;\L'oU$^HDT2>)h2YZdE/'UV@A=2?Df_!Q@bAsoBf1qgurlNW-Chur1f8*Db]3<%q7,>N['c4-b1:J(\^BhYNS`U*3=6O#&sUM\F(O.p[#W/`YM,W`bXa`B<hFBdQc%s@<XRjTUj0BGeets('@\8/[JPq)&)fhR)1Om&%7O*R;C03rRWZL$bMjT`\;C\:f8dbEab82q6N5%p:632K`8ocX6#:&tUg.-KL)DjtO?M?0HR_@(^qjlk?_dl`C>Ug[lMcoi9ht<ED%77(fI%T4ubbQRP5%!fk7X8UMur_j.F2W*6E;/c5$col*X&NXb<7d'1=6($hG-($>8V"AKYd0>rn2@pW?(!16H]p@6sMt"?<:(q:`%iW!H^.?b)Tc,#/n6?ApR)$>nq?pTss,;]`4c/76*&.fa>mVCX:hA,Hq;F0rskOStH/>HpFc`9>XLV[W"?p:VM,`@YuqsZKIRn)LZ%Jk#$Md/I^&9BZg?I+s9sMiSpJVZlXBH_2bnrtjr"Uk8s)d7ETg*CeMWHH>&9;X3bA1iVuAAluOq7YHqi6Elgb(/S'^BWShRk,=-j%PVND!?iLR9IZIl78a)eH_IkJ+T>`"%<i`T,<T1-]_GaHgVlE@\2B)'CGq556>.GXNb2o9s/dJe)\OM4g//FpSYm>L!67g".`?Ne]%(82LkK28FGX[9.)(#H#miCUEaFW(^6g1]Pfn91Q-cPm>a%d>_40Bj!]OZ\=Vl#RU0%JYT[J.m;s/\m3P8tH&Qn-O4;,PVDS.4*'I%J.m=I0>IiW!>;(>JIEC3-f>G`TbMHt2@264qbR[iJkr>oBL!FU+6Y_Y0qfeb&q#j$$0J&XV!k*tUikl]*@"a?r.A1'+++,814fXE%nr/MEr.S=)+!"cV(%O!8#G:JnYTr0=T;:XH!hW9sn:OLlMI`"a\ruc\761[HkB-^M0dHWA</4Y1DNlaVF4,F!3U%>oQU%G.7;C2!%:^=5"1D@!F[gCXH.GtH':lEP9^lQiq]F1?.#I"Shl--#?LJX#<5\;sG_fW'.f`jSe1PO$V\h<36'"X:`&ZV%<$/M9;F@7NpV!h-<%[SEKZpW7LIO7\sD9JW*ZQkS0b#S$]mb[8*<aZG&-?*/Kc;*+6X:M)PVpO)tVgO'LYQ-Mmf;ONRJoS?BXhWE=\IAQn=m1Qqi9j*eO%5PRm]U9+An'_6qW-3#_<nsfY*rrV.qQB^mRjBk)HIe1>8?_K`6(CIP:K)T\(M`fsJahLH%r8rLN^Hf;0,:37@q,ab`hu#/'-aA/S%T>T<t-Q-"VS,OU]&Um?LR`RH+q:\jMrbp<W<VWC)Z:\/31n^'qKDu8rnS]Od/t(cR]^8`E?[$kbVeu<;]=6Up8a&70:0,Kgi.%C)%Hm7k6s,hOYn6b&PA%MZ)\)H.Whqfiupqo<'"'-V?6VSo7Yl66&\n!-ZH2Vq=0@RAg+2EsFjKD`1n#BOe/u_.o04a!FXoWD"ZE3gb%IWJ/;T[;8cS@Jmgm938'8LcbfO;J+F<i6M%kI;<s*C9os+TM*0,3#>)H>GH09pf]!0:51=5/F0AG^1<9NPcu^(+;uTL,9=PG7*_e%h1e*2I0:f?DLaZm5L2f#Y@eiMS?+qR.1@ug,))8_?7-uGLV06rkg/l566(gRU+!Z-PM3O<AX!`73g9,VY*nI09O$2uhq$s<>pU=[%Oj4_F(b*DPns$F@<^f3%n[u#dB6:"Krk[OT3RfXo?SL+();cQ]ij[TE0R]k"8]7%F1f)]T<mbNN$T++$RrXOu60aT@"kYRP'3%jD%B!7K*=[k96pD:SA[Ec9USb5;q[/sc>G$8$(XN_r[H*Cmo.>:FK`fOna`4846Oeo]mm(('F6UQ*Rbm,[bGWB&R)7kiDPWR5hc)S,[%\cTir,1ZJbB<CA\[r?/3'MrRjMRuh%<a]7laLJD/R##ZOD#NWNb5so;jU)l*jC`;+1aj@%%Xb[Ra,K_ac6eR^8XA#3jG_=Y2<uK:%)eMafZ/pom$Wu//]=&Hrb)+UPYA*9ShR8Sk=C&eV(OJCj/"E6l?8B3eVG]%_>#?_[1Ls7B)+CC<FT5S.Rc".=#=(/Q7e"0fD(:C\%Fh#D$4rHSuABVhiZ!=/C_^I>;DHTJ9&a!`D0[DNjhP=]KAr0&!1<PijfX<0nFW5/!db1M,M",)`9[9('VSBIV\K^DG:r1MeBna[g%b-J/`[//$&<&1j2E`e0.>bnF=fIGi/&sF*J]0s@V$o0icVb,2`V`(_Drq9A[JA?C<iJQ!rhPu]j',Zs(lG#,SYKIKiM>[K:rKb6;%=Xu@lEg4V&1R7K]#+)m[)juSOLO`DnF@Dmp5\Z!nP^,F1'bqa8h/;Qb`H6CJkC=&/b7_]p)/<b8lTcZ[.]Z3.K/R2r@t><"HH;8V%8.nN`?;K(+KGE%1R\l`p25n6@a14M.,biIJ4].OJSuVO^aJ`9"O"5KB/3R$lbdAYYN(/,'?*MWI9tRfpcOsq7i[jA*MVG(B.;-d]%b]K'5m%Z\cQM8HMjUO<(1)'?VTt$%*RVU.(af2!<6DT<hB@IW(g^r=b_TB;f!u<uMWX(PVrWDf%c=[Zm^Bo#1DRKiE-5tJsf=N;\%4[jMm7KL.;8flPB_@OP>fg)tCX=D;-_d?:ob&:0mClN+`ckhRB<oGf#ZpP!lDI]#*eE3G?97tKT,-01sN[s;2=^?*A\d%)0O<''^%(h\@O6*V2WH\#f;:oobPh@0N\i6**X`n#`Ro27>HnPnZ8'"t1'kc2NV")L9(<R5?Fh'1DfV`X13+>Y!SJ%[dUT&N<'+?[aqKaaB7%ltpLVk]7M%9U,Ct:=6V,bUdci;h7u&gRu;MB>9V!T*bAC^to.-5-dG@qP+%[8UYF16^C`CHL1#BUN<'1#NG>O/!u@XYHX1C&`^54%BIa"8H,)OYqUu,\aV?R?H9(-*\/2Xb.4:?*j!hdjgP5Ra)ji_Nq?!8g$kiD4V/$7\f*:YgOo?]@f=>pU8J;!6DG:I#)L<G1L[3b3%m*Ll5e_W7OTFU5Ch8u>Al$\Y+loTZ:Y)UI"^jSI"VLQV!OZ%$"5<;uPQqMo;Rf@'*$^fdc[C$$]1/)Tqd,T6@9l%-uSS#IiHlJ-R%o[0VnBkcgA=tPiMA8a:rPpV6ODSEL`Dr^<\NqRD&am5&_Ri(o>"g6fC")3b-WX5kDm+!uph^3L"6Cg$8e&C5IkoQhY,B\?"h&`WO%,@)1NWaeqLbc:rr@og(hr:nVCkn`QWVPW/]^!jl]2Wt,V6gY=@NRP)k:.H8"qoo.<T`:ELDgXLUXk+&WdK"3Z,A=4O>He'Rd/Ne[%V+6/M9D`T:^=&efXLV<>2em'ql)f:.Gh?^?56J!ch\cs>gYFTf70!8;]'8[g\N!ur8,r8eX`k5*C3MQ1rnSR.NB?W^<bS4J^%J#&%2?Y:0^&N3'g:qQsju<9sAlnl3fg.9q\)'201q;+SI#QHLCYug&7sc?J?\B%qVpk&9k/2Z>9hTDe_:[0`S,T=Wm_Kn-[SW==g,K"`%-Scl##"j@VR.qIN-\\\r5Acc1N+e14\*VlHTLhV[4s'?8:[q%crPlT+\3To(N=a[=#AQ9T8+#qP0L>21o6'c\*,;R-p]mf[qWs2s%BSlr@>J_)V$fAG7bc%kneHor58boMK?$BGJ>uKpS<&tfQ;7qr]ND!10;?V&4*joCOL;S1<Gaf,[GOoYOo6m9oC<\]M+NT]m.lrdk%*-XW9KCO/`3?Fl:f^!9Zl*i!c05se/JIpMJkDS<o>:Tl<cpJEUK%X,:qppB"SPnsF"j70[1\YTiSE:PWUrC:n!JG\>"V][+oj5%a%hgI(q0BZko%0u"-RRX[2I`BVBqN4F[]C0DbN.)-b%.M:P&;/K$0V\%]+;\QjBP=*#g<EBnrViBXLj\7PQumi)CQ73_)e^IP,@G0j%I%cokrmj9%_15e7VU;E!72(oDq/is(?MIUj7BqrWBq8*WW5oj)VP4h!5?deK$S!##.X07pI6R]0rS$R"Vo`:/WeI+;,rC!=1d+,,%!`:%jUHUdh4J-`8kgB*s2t$-Xhg9n[VG-KT3Vj.b3bVe.UHuSPr!\`I;!C:C+,uM]RdGRR(#Hn0@X((ga035hB1+E="oR-N\389Q%!M-tk+Nkm0)2s?C_2DX'_tn"n`4Doaj&2iUhpKFMI\D,D-'YjHUfT7ZZo&^!f<p3F41B_]r\m3J2Na6?U:L57f7;+eee36d6">mL%F.i'tnPB#5a0`c8]06)SZV`,2!RC;fdE[4dQ/^O;>"sA4%DE"OiR3&H+0F#X$_:fS80eABRtJEoBG`)70jA=Fi:Y=9f_b)(N+MMV%Ze<rLG=S87>k?ak2"!34bs;o-1Q]D$d/6?1bfGr<)$?<2^+Ze+AC@"r:AdG@4Fq1ad;L9O!pTY9dY%%M?jYf=m@h7jO.+s00G-jJ%\%`NqVGF&H1&Cnp5U-i:i6?34@h4"`Ko5jCbQJH/pQ&4VKh?:/E4m3d)\Bqh"$n1QhU,]"2M2nCmkh*CSS$Eedqn181n4G*c0#"#%Z\?0BD"d<kWU/N1;VAf@V6YS`8nIUDVqJgAPDapefpq\YRf,="0DBYn?g`D*Qb#\`c#ICgkg;*[mgFP2TY6O]p3l[6G3C=)`fU&:%FYQ[Gm\JO`O:?kiHh-I"S*&KBkj:'3abVs&$_10uqm;b_1s#h&:*d7O4^;D6PuX-k,@Wn<R/]Z07Y"0d%`%bOdUXBXH[\`=he3M8%Y;UQm2$^n<n!h4IUL$U"ICL2Sr;5=7U;oi9PRcENj,l6YU8`jHD@Hfps#hLe!+2\tp=\l@#$RAC;1e%<6lG\45"<<'*.k)NjmMX6%TB9OkMH8:'#Wub>WrFn;@p0\kLCX!gBLS)!H;B9M?iPmZ#B;fL#@T[,[kFlFLGH5KipYn"g;]P9Z4Ga;j>ba\7i2PNr5@<1)ZCU'%+hLXh(]NgaCIdtPnNBD8s.k?TqT&>.LT5iL7K[sTj5Hs2rHC9TT::V4@2"kGOEkMrq43OqHsNDZr"jM;rsPlLq#6oc@VPb,QbfoT%Ieu@#(G!$I8afHIC!DYoY5`4F7\>-!=KhLD=g2.1;`Q.rn\XQiK+2T\B[N8u)6^^4L!m`MQJp^jKH2`)J^&*tf_ka'fH<"#]q,TM%YItOr"qJ$7&NS4R%p%8*rX0u9ApNRQn_d-Z7u$qad>nF[hsS@j2JT[^-8]L&MDOs9Z),&Rr6-de14K&u:i!JZha)_J#Pb_[]BqQL%-AAn9/'C6@i4tIr62b1#D%JfIBL?VNj9Cr=QN_i!2Ag8*(7HI"p^3].3!9;D6<9i)?u*4g4Of+X_6YIVLUI-eH^'2d\UskH,.k9B%*X+dLDCJOb,m3YsnYhKu\:`+=ZYEM_&pUB9(qoX3K3%IN%T<\VW;i+SMGS.HBQf10-5tFDhl$qM<cH^j+3c0(#f=uYcRKg/i*9=q%ReNmE$.o9$$$^WZeW^LFJZ$?B+"_`2rAtA;>O>;Z[G>PXI^;o#6!EI"6*pGCDLQ98P?sjkSXGV@3BE?%AufL3$/a"dQ`3cuIW&bs%ea0YcQC4WqfBThD3e?o9K]R`dQEB!$ep,\S1WDJlMnskKNu#R9rB9R*q(.[L.B#It"G01\GIEqE\>eORg=lm1qmG*kG2I,eQ1t]T%oFS#>*$N2rX#V./H='X#a:=Km3pf,r1)PE="sIN`fCaB`:T$JH+)T@0Y:7rrdFc/*"tcrg*Sb'!W&HIoQ::XnHQ6:ph8MPB%<7>\%$O7>IQP)^(keaJjCiJ2[+C<S158+XTo7]K1P)5=8,,8-M8'A^#8F:7"G(XK>+XMfjR@'$o2KH$NEpe[BJ`i/=%q*U)@L1],bL>7L%E@F6_c:"nf4k?O]\N$]Z>*3R6M++Fk;p0tHH-7..O3)%ej=ptX1tTFhBJF^%Yd7af@?e`W_bhf3+qX8aeoVB5E<d#Xl1MRep[_.p%oo1#:]"U8VDtsT4]Na_3\Nn7i<p]PcWAYa*Q@^5fIl0_ZSaF=GBWa2tg`FXO(&,:-Q"DSp>4i?irhoMi51E&.eNQ^X/2[=UHUTb3%[Qh>tK<erj&J+90Y"F%Am(KkiRZDd>iG3f4h<_aT-$9Dm[E;DEXYWM]ot#tXN^02IF;8OG2Z3sf!kQl%Zr4R</8Yna6,e&dLH^';%s"R,[F"JpT6s)@"#d'gBG+/BZVpB\h3;9QTnbn_>\i%oJrN.1>!a.d92#Y(>L2>?\Z11U==kd'i<RHs67P+=D*4t&t$`)U,ms.kO%#^a0)<O$`=g)LN,Ll3c-P%cMTRKWWJUG?<k53`JK_FJI*:#m:p6YacjfP;Ro=g*8''mf8B[Y_Ot`oOfp9!p_Y_0`BO[W),]'PLGJ%aDPr;iaE165LB)7W2^ti/N*RqVZpbqK&sUMbn!$T#h@D7&6El=U`-F,'O5:,K@XFD>eRE``Gmc8h[YFe/\c_3W:KiZrS*>+nVY$-%-e/A?5_:-1q8?k04;GN[?BIj7D!4ph+``$[I.@gXrhF_:.F=_158=!l5ga7h?)/Eq5f14)]*rh(X[8Z"ZD3'gGZ;E@=A*bN7Z^r2%Qs2*9qE%du[/U0d\M?tQITLV`36?XP[rdf4RXq;;8I1Tc&&8uk#;L&YS#ns;j6nOu"s;^M%+Y/D0K\Z;%H!TpNPb7fk9:d8V1.Up%\'*jPFl'\s2j0mrUNVE<MAufG&41t2l<n5m-,9_L=ke(en5I5df[^q#?R]$U4Wj')s(EES:A``Llbp2'=8P6Lq&_Q.J[6TWZ0P_o%,6RsadOs8b4E1>HAd^BZ>hEV[0MB\@o60sKimJ%?L(bq)MP$q?kk3h<ZkltUk^kjucl,^>#;s3_^4;(,(jFkb0a(ang$M\8't<uj%[6uX[b+*D.*SI/EK4*\B>sUqqrPBaOGnlPC`o82I[J2lnCO;;Mm=KFW`&^+f-3R9eI^T'o[-5)W=/Z=kR"M(:%1h60JdL<SBm-<-%lb,V/NWUF61pEf$WF9q%R>JdJ2iRilckR1,#iOsR5T7ea&g6htH$+>?OKE4N\H$Al,Q!XbQ`j`E;EB7DMjHXu.XY/MCSrJD4ZI$1%n:O`KHnhYNhM^,q4,[b;c.]dO]>:'gnb'6DB..dB>7)YdDf,[9;#Dnf&kXR3C+-g,(6[,3[h7Cp2H5[-AqnIt&9XfBPpmfiCoEVN%>0,O]^@0X909'<;>*W:hWO28u<<n/9Ap:k.p$9$VEd51'Q0?AOJadDW^+.VJ>N:%3](>D>a0tPE]`E7i)@T[C(I+V3kH>oiIlN[;%DVZOB&/s`*aNcI?"h,rRTGWQ)XS9VY.gW28IWV]Q]"Id>GI`!"dD*B]PqanjoJ$/p^7G!M<=jV1n?C:'?7:rqm?5t&Q8';u]OukP%iC<pV>StL?[R86.J-]t">J4?KHq-E146YMT)FaR33#J_,mfniR-c]+GEumWB&&%)LU3G^Sbg#<:_R@k4O33JmUH.F;3b6iU+:QN/%%\D,=CYZ"fdA'<UnZq%4Y\S?jplqg=27g,6RdXSA7K[',Y*nKJI.cn%d'h>U``'m^;5mFGhm@/U&4Xq,(72Ubkdip.1Ug.Xj8J2s%^<u>pg9SBcHstdnp5X0E)hh:+-*VF!EUeW"72,R+DB.3m_8CNX!#gi#a#%h;hKS$/C,FE"NM9IpW#eKo^aCW_VFIoFn)qD`UX+S5%cgHKSURTM5^9JsDE=nZdNBWV7cC>g/=]-KF&,)!cKcZ#-TA#^4;:Gqep9Yaopf[GWY\Q)0g*pku1n%WRr#+DRm2O=*hFik,[1h&I%*Nfd0mp\7t<'.L'<,2'ZH]F(<+!,4PVFI6o]ie(`5$bh--h,Nk'`L^3SYJ[GIIj19fmZup7W4J&;kr$<YOaQoq,+KkLTcF5f=MLV%@(3($UG3.R4't5J9Vn8aCK*@iIb.8Qi`>\`$]"DQ=/SN[UuTbj\UC7M.sLk>A=;(.H@DgTdAh<*ojBkfT5eQ:4sOA"Sjse>*KSJV%[dWh#d6LfIp.?72*?2]=NmaOpNUBD?:FdCXN?/d8!o^1Nkbr<UlZMc5fs/rjXiTe%;kn3o0!YDo)b%7BboZ7e^HukDLi&oJY7$,G%NII-R.shbc5*XGgIX9_jf].8t?g,PWR^?r(7D4O;2S*l)'MJ$e6&LL-+uC,n:;3CK\7O&-/"?'__V,rD[.Ikj8Ro;XV)S6NN0tRn%KR]TbhZMZ8ZEb(q0hRmuGc<X%6_atR9"dcNO5#G&W6rk`):SFZ?d]l6Q/cO_N3"]a/No:dUHFQ/HUb/[.b3jO%;7S0C32.Y$&;Qg%8H'A^g)-:t"jW`8?B]!Enp]$:keb<q`>NPm/RKP=LlEmZDFgaehOm`fK'AQsnEZs[(.4)LK`Y[=JHpgRS4_=qDq!0s;VZ\EI]C-L%-LIDi;@G!^]oM.-M"NA2*1ojr[8qlC4h$7/K?]s6`aQ<Z/.DO9m,H^[C$Xm*q<;=do>.&&-mfsHQ;Z"H+-40c3Bo[AJcIjt;k7CG%q.ID#r:\*4n(@0p@$FKd:tr^lXPU#$r"#^XK6a.^=!,tto@*$%P9lQn\VCH?C8KSUc=bDtmCV_5h"g3p=6/$%.AbZq,]i#Dp=%'G%k4fXIpPfXFVjXSrdtM9%HKtIWq.Z[maZ)LJg/*,K'U+T-8umtjQ^7N^B?-pDj`iXUT0<c:'FQK5DLBjpY@cW-;P`$Uj4!dlE_ph&%\pDrc'I1s$U.LbE?mY?%R=36_e*O=)C7=Ok?dugNC*gQ;*=174[Cu083IZES8;<GNkhGgQApUg^D;761>"BP_eF8A%`8ZZ6ah4!Y%YJ3QS'Nh:YBi$uLnBJe$ZEeqBe1!:\]Xg6<E8=Vq=0Ni>bahZ)rg#A+oO4H*Jo'\@0fF1d1#COK)F`)I,b*l/hQ3lT9!La=7Zjs>%5Dq]d1j]%,f4Z:#E*[/L<BFH.F(b%2d]q2bh:L-]D03B72S'Z]i^T?kc^ZYF"?spW6DL[Ej[J%iE$`9CVl=EE2#A/MPj^]27R8!F%$2c42C2A!cd7cPYMJWTR7WXJq3P9=ADo=MSqs;bpp/92H;6V$6NFHa0T1Yc=1n>OJF)J@(["%2m.-Ml[%YL3UK'*I6/ZC7)Z1YK-%H>6HcWs?-OC.^.adZtE"=Ae,6!aJS?nqM;GY38p77WE)*(S:RE`U0.pZ;R!3JM=+W8[ab[-\ROq10.t`^@$\AAS6BJ+eiSrHAP^L%_^!S;oW8>[IiZ"7@SNfsb7jMh)=61!N&Ep8BTnqO'XXGqX`D.TgL?]?8UK-0R"&rE,HV>ZhklDb?5[m-o7p:"psF&9/*Tj3(5<?q%-St&+lo]Y$KDV+m>[#fh";E<"Yu)%t+,Rn,A!b!f-_4u\>s#GB-SFK`I,'YZ)SKLu!m/WJqS%gI3lOL]j,`=sNSEN;po-oeqZgI&%_$:AYp5h7oi5u*C6-&MJom&-X@93<1:[-rp`sDMY5=taK?.mKK5hLoqDSV!6f+Ul%_I;f.HV^e/%_$)==`duPV?5`P:`cZ,NcYeb%-_pTd20D,DB*a0-R8<ci,A(ILFYi>lf_]&>g_'j<h^/O3!jXEt=c[`h=sck0Q$.;S`-4qh0s8[^nI":CLC$F3gO06)q5LMZN[t##%CtiAu&oX@aU>7.4Ak/t.3^)!SM[QLkU<@cj3HQOoB.M1D/%kTMQhAb8RI9a'>&n5.E%ADGEMg'RB](Sfn8[SM9[^PcE9g&\5hI_u%gn]$<U/.6N__afP3/$X2EaPg$(&+R.AmTW)L$^j+Fk!1B^,KY,G@GJsQ*G$KREeUK1>Q7f-1H]8"n>oOc*V.:4>1pi-iRNQAE(V;%b`7F3$];_X-#Ial[e/lcNB5/Zk/*hO3+::.^%f0=$Zd0uU*h]c8G'0(0.kC,lY14ZZ-'8)8M":7^H\8d(uMO6aB^?bW6"[qXQ,4"%s"p=*p9Y:2(cf!h=><\B3d4/"E9\(qr2`,33b>5;d4QH3Yr-;<5Gh^'7aOf)o0%Ok6,*+45rW7Y-/Bq9?m9!XM.RM.A_]f,JYf7I%AckYo-cP.l;G<K+`RJ$=VMf#6U*Xp,D_PE\G,3\]ZTb^=XAj(@!oG,Jbh85b?O*?HaL?K_Zmn:`N&#kY<B2N^H-J(%To=2:D5f;u%]:2q(+4OGbLcT^d6+CUQk=_GeJurL<E-_.Z`rSD1RDd%Mm78?.?1D%.IQCrd/WCcZ\tp3;4BAK812JS%[^go$[([RI\t6heO.0D0%K#fH4C'1iYn#N1[Uc],O7[#[ejOEt4CM-g,*QF+f3%^64iK'am\*]@(/aYSV-O,)XKs34Wh[]g6*(?/@ZhL#IY*Q7D%fLHbg*NeI%GoV9ZXCUq(FjT2nnV/1:/SCVRdeh25NB:bY(_%PlRiK]Pd=cC+_t]'h&eHQL2e%UOge1[OLh0cLo%oH]ESMLUWRr;^lmdS(9]F\$%hD6d(#7h.6,Qtu-ZX6uf7@%2<7__F3*nK4sGY!4lAA@ktqR[WQJ/L?Pe2!.hg`+m-qRpMWbEMgOco`-a9hGG[5hKt]lk(`HW/bJs%]AH,G@s`H9GXfFY,0P<^Ep)`R1]'EG(;5hk0)cb>.tCY/^':>fS[Rqep%OHGZpt4#Q$-7_jidGYN3qp>F"p5*`S)EKK!9@.iaYF\%r!5WB>&!^'dbd"+5S($Yd#kR!LfGSa51<Z$pUT@S*$IM0dG-G_]dXd`kqlq8G,g`ik!bZ-O5W"]Z@Y8PUlJ<=[AT$<>o'lK8@7cP%38CHSno\T#33_>Nal8f,k?UNoP]>l67+r7!Q+O[2?mQlt,lUh+[6rlo!,R'?,@@uAa.!e"4PAO,&#2%faCF#R"NP1H:9e@3:tYW>%>2Q]+gib/,PX*k/N`GXE0)+uY?LnZc7)4b!ES0E5R.O,B.f@^mmS(O%$Oo?mG+`sCFX"F*JAkbOI2qtU*0^_b"SG2U;>ml`BQR7+%n??pi<&PPQ#3.K:RX#^QC'gjnn."2pj\pd:?jC<(`!8f=PqN.(,W%#A]AsrKQF2cCbpQ#&?i'h9G)cch_mAYC\2X$3Hc9r_*6k_\%ElrTGluW7_#+c6kS!2(#F_L5`l\eEt,oX8aNSe!cCBJbW[a333-Z.X;1P=Ynjc"@V2A#RiZNuriG,\gq96i8o2Qb@T/EZfHK<<fo%p0R\Mk:92%P<YpPSmtj.W:gED@K6PY@&JY;hk5/bNaat#TgrE=\H*Dq0';;s#5kR.&>IY:Uu*C\QCcplX!1#Rj"A-;AYC7W<X7bO%T#0$[#bYK?NBZ!/-JGkuIQt@W6Xr-_91pB*3ClNe)cp2+=,I"uJ,6i!'P<2337CMfo74CKP:)]O8ZQpuk/JYS`Egk_V;_$]`MkDC%:*kS7@7U66^eqT$0I.hkq1<_FIB0)S?emS3hjQ/!oss:AoD;\H#hYKU&)@k6m6WNl9AIe%j>6UWi+nmqm@M0m8D1PVGr1au31Y&8%\Lg_&iZdFB.[XOt<l+DhS4G2^XE5.MeWdBjdSJqmdGB?ng:77OQC%>F\Xd6;/HTOA^2c*&`QWXT@.O<5Hor[X6XTh'Y$tM.&D9UO%m=K8Ip;@tN%#?9Mf(9D-6L9m6D?B6jcPb[WX/[f[U*h&Dm4A]5^0L[9r]OW#CL!EKVFQo(qVZ)dRHMr-B@$Z$Rn!sZHNkKS]42=2%FEWZ7$p*P<R5'KB4bJc,Us>Dra5i.q"s*H"ba(WZSjCE'"_Z#PF3gM#a;1:*LG&"`6-$;8B?Qu)Ni>%"NLno\CCZn^#+^ia2cC3W%NIk;Uh63=uLX&&8%dX%q!QiWT5jNi:UXp=bn!j]+S(r1k"8m?LYEu9$=heWXnBU9L6cUSk(>%_*=2=1eFeb.UVmg9(p/;LXq1;,,%P$^9CN.Tn5cKqbOn<j].hOTU#7Sn^8;R8?bVT7!sgh4i\Tc!XDn%h.]<9TKlk2UL.1Utb4Qi)*2>j16)A^3/.ale>Z5O:G.aG>tr%*XPePHXNG=+A@F$9nm8')cP7(c)r_S-oDOb-4^9b6pa5G>C6p;M2%icV5G,mh'Ud_EQWXA:%V_5IX`:H5SeF4KeGg3$(-L5)[O%X%1PT;VX@bmeiFS5MjN.imZZdUgQeTU+`^ECq/h*[$b)^6W)gV!b[QPh#b?hX@-4qJ&g`2(eX8i1"0Q9u=-JYjm=PYrTq>&8:@sNH.%C7"r_5+;gfUV6+\&'Q9u"X\,?GKFikVmUB#FYnora\iM)M_6aRI.7'q7N"@V2DO^8P7,VV9V:?XT?$,['/RI8^o&:ljShiggeqZR%%(q't*`;To;9Un1B#9"^,'S+'R-RTTh@qb+IRb>AVGJY:EqA@c2M1,7LOq\C)#IV*:4>j^HoZB^!5RV?&Wi8*2_tC%=P]73+6V2A%^=?ZK(#ACum+JFK4*Ku,m'ZNgiH[6e2\6,ZacJ=<SLWe_65r;D4E7.@A%sQ;`Q`2cgChDgQ0-hWRk.')N9`8,3%)rS&9:#+`+3,@%I,d[ZdUou[f</1UXO576SB8AV\p+(Ka4Y&5)9l1%N2ZU4h"7kl;:m+me]6f!dDpDXFRM2efu7%Z\g0ZTq4pr+jMSZ@RKBphX5-?1%12b3Mi/obHPs4B-[7ahafd+OA3]3<q`\BO1S/+%$SW"U-FfG/$2P8g1k7u8)cQf2;Pnn0\Fs`)Eqqdgj,@c^a7k84t4rtSpR_1Cs%"OZt8?]PW#/0*-c4CT>E4YhA1*:+ZncoaHH!FPYJZ[--`@3A6eo(3n,lI[KIQtN_><:eP[aIJ#h^'m*Dd]aAq]Tm'(bq2[N)$CGU%5I4:D<poFG>WOdWEM#uHKNc;IC+tjBda3@GmCB-U$#pcfjOO&4"V,e?e]iJZ=FVE%i2;Xfj+MDbeh"Gadg6B2a\THnM/I#7eVi)H%Un5mVkR8hkZ&H2<kJN_dr4Z\+-H_,83.Ga>q/ES3B3foAq/Cd-<+jC0j)KKV7bg[>frVrfZ3;W$LND/eR;Y8/aaGsX`6C@ccK'VK%>/PF-LGPM7+NU^rk//(Mf&ffPl13f7]=s=$@[j]q8cZt'<0)"@(\8^^H0HP#112<"@nbs[YF%l,[=?_r3P?K$:u#\/UaI/&@kIWI%n.I^E*+e-b)lCPLT?.7U>jQ&i87oYa)+&A7ZU;quSH(6.isG*DpTcD=<&X8%[.X,lI7,sfb(t(7kLk^@rg2To7%q_I&\@(+c*.U:%[IGH29cF<TT!2FR-7E2u!Fn*Q011Zj9&Rq+$o&GD>MB*[2].RYlu9"7DriYiR.IbeB,J2,/%pOq"?,-=!(gK%*f!D`g3q\(pmFcE%Wk@70dkPi3Wk@7?M:>m%Wk=F]flTO0engOf-HernSl8,Dois7MYNM.4H9J0be8,*)5^U&KWe%DI(hc:PJp5.rBc3A"J_"$kV3gTO%bi^a'8VP(0:m5JV9T][;.:uB"3MsZ%MLG=\dqYaZ31kZC),oK6mE2u:_E#a:q52#cVe>nMd@M["0&SZ@[q[rnfS(&B:P?3>aOSdV%-c-gb'X@n?NM7/<\]+ajF;U(;5fd8Q4ihRT*N#9oeid^falenle$Rms(Eib)7H=b2,2fq/5%fP^E1e7s^4,%l38<]!Nrcs;F8->>%G#+_tM6!P#.(Q0<Kp$f%H3bBB<VU_FpPE7ma!P%@^'FChf?UDc!>fblQe6g@S%>\N1ZY)9L2qM]Y$",H;J&3D'u^GY6OMJ_Z<OV=%.OiXZ6_j0/jl=jn;>kZS\5rL`.G=+6/_TNX>DCu2dCE\Pa-Zo4f4r&\2;3)o`N#F9NNue?Fs#V>`gNP]"UqQ&Asf$Nh/45P7H@`u%bHR0K7HqmedG3a0fsgP5PjIOp@5lE_iMn9;-!m_o)hkn75Flg$;m%!]NIqtd7L-iSNK@YFU!:X=KjdZ_U@.3bht]N*X*:[a;bc"m%:ZLoHB0CXsmo02IfX#2`;kJ9Fk_,b,LFn]69"d'DDj*-a>T.,8>EXAeg_r%PRiS7#Re]XBC%H#R!c'd*S]!Z!?^H4eh:(K4-$.:1%c)_%DSLW4[3i.,!S)iqK97_BD,j3Va=7_HGp.;14R%;(T*7m-g-#uae\<s$sl$\DYJ,GI9kJ6u7ch":?s./^$=_d5bafF?JJ"6Nk%$,.PZRjDph?%$>6H$FYuPYL>Y%l8uW3kJWX@gr8tZK^^P$\[]69kWia/adPlEft7MWA>W/hT!P_\'-_!cAjH+bC$Y\]M8a#:H"ac%M*-,C*UaWMRpE_Y;e=G2q,p6.lo_W=luM@W@XD_1VR'20%ClddaelDfV6`<d@A[j%44_P7be17Gm(.l3b?VC<>Vr9;B%,E^Vq;M9%f5*L[najJ'C=6oZ4&D.0n9SZpfn"1cYFIA;c@KGGcDI'M`B4l&GDaWiS'Gmj`TA08)7/SoEp7E.8=_K)c7YI/rlhNJZK[<`S)i"C%jB#*=9kO^H3Bh`BCcVYeT$o$9o";9mlr4nD[6JdlSUhXS`i5S/BVrI_NYB=mKYn\6l0P0,TMsMmQD)\+<$$gu.AHpRb7-_F.]6":%l\9d\_glCPI\cDBfL>2Eesh;;nm(XaoCBfCkIs!h>V(Y9;:MS1RH[*p1-r&3ai?N@^o*7j?@@">2_2+UaaC^jn)`od-%cE[IEIrc%SU<)&pTloS;[8_GM-6_'*a0XgDuYBa.^/Ul5Fsn*R_,PoTdIA5:7oX'.f%r^nVE2F`p9A2RBO.7m]Z7TUmp=:E#Lb'HI:QmfA'N>%V,rE11tUNN4GrhKh,t">kr![f1YGk)PFlXYVEG`5hjbWMbrJir1\G]EqDG5%nn!9h:TgW,V0h)_!8(X2%mhj/M\hZFo'B-iHY?$I%F%e&mG,<LmlDBL<'kJ]Pd.te6ouo(r"<DgDOm8`-_rZ:[j:b[7QnmsA^`uo3q*`J?O3(cBFO'EBk7asZ`uM*>7RJ>,o8A>aq4:L<%R55pJ!h9."5"<f=]b[f':H5V9H=NTG,iP5Qk(-OL=(IXV*'\Y2q24M??lfVuY*!LJ@k?D.1hr;'2]$Nt'bCD8Mh\/(bJ;@"h)+(]%b1<lXHr#dOIBTfQ%+`=`+VV'?^:e0f`#W?dYBi!;P`T*]4L"OOYrV`fAKK=V?o\)TF\e@Eg?0h*c]C2,ad%^NmMNP-S&jO%>E.Uc%HqM0`p+":8>;bi.o@7$60ZPM2AUo"4ajL*Z@Y]0H-F*\.nZ)![o]q&egi58?@[DVOI7/bWAa&`?4(%__c[<VNc[<+7j)2`X7gGT6%nsf3IaX=C+.<"okBYNGCQCIIChf.cH)oobVE5N^2n(%Dt]9s=JH1o^TO5hrW'>*&LS;GN3L$Rfs;KM3M*<fiW-e:KZn//'k1*;]D%&o52+\\`;tp1@_]B_5s#^X*qO5c9-N3.CJRm9EgaT+\jjDoV]uE?cCMU0nS%>!]!+=b[3_qiNZVo13AsOKoSj'Bhm2:A<$>RjE=,%6EteVD2pl$Z[Eb,V3,5tH.eHr/?esgWK'PDfKY+/:\9pljKhMA)'O;@VT<bZgtX5NMP2=Q_sZ#$IlX[86bh59qN8k.1LKl)l=1+E%06abDs)jCbQjkF(U9>Qgb0A"_0A;a&F$&u9O":bV;E\[=EJ=;RS4&r/le+A?'m45RlQ.d[Cu^biaq!C<#=G!SFO^oMPX;YR<>h^u%6!E/k..Q*(#fSF)Eq&H!kOo(rU#c2o<_D7sj`StWhYRqt8%hR8go6*N5$[%l/W'+I*\?4T<H\o-;Qha23l=*sOk6G90;iUR>]6-Z%8fIY<VDPqXmb"5\gu;45?%$lg_L"$q8pE,'LFna5DKL5PE6B.W-fHZVjMh^*WG.EEYY4EAl)&]dTJ8;U^=p,>9#Ac#`\t#1IGQBh%`IP"1mN3YBLZI*de9Kbg8iMF)[.%/nlI@?XYNaL![T%9`F>3XF>NCd,Hf)au]SFJ]V%\CnDOBiES&Q/.AeI$uZI+jm$$4mBX=;^^%?I\o&><#q")?'IC2$`1)YHT,r!G@>=8Ja"*2\@d$:2E*ShYhPDAoj]!gEctMbMT2Q+RV=^r>)`RH\dH:LVu4QB@HT,?Zo^a-\Is@%HUbRCbI4^_5c2/]j^d$h][Z#fL!b*:e;8%5p^'7X*4hDh\RhVJ7VkkdPnp!J:)oMk:+cZ#0dlm$Pa9YZ5o9Gs5.W#p_<of&k6p3r%F\1IbE;(#A81/2;(>lAX^9kXh_SiTp'4!E+o(Fg8]JJY-iLCbPgBUrT>;jo.h9Pr+3T8>?!IUAAQj>S(?(Um4:85EroXS=ECB#.3%VtmTe4jLI<cbm't3Io19E4q7Y+(9Q[Mg8JX!6gO(1ta$:bbN7bB&U*VUE7jNq7ZsR@@@Q_Ned1!A0X&"SABBH!W1OBL4hYOQoU'L%J=Zr3i)OJN*es.8A]IiJ5)aJs!'tDTo@*qNq?Z$M<H,[MGLAmbqiRF5,2SaI58DQ2k_0=`X<tM\`2-,%nt'@H\@4A6m#lqWRhGf)%'53V;`MG"^3A$[4l?q4^,+]+\ca(;M'/5JoN>I<?a1QtKh4ip8b++O*D36;(+mGQ@1BB1jS]f,'k&m<A6kn*d\V+h2Yd8Lda8sfP%bEQ.[IWGMVcQR9.1%gNP9^A/t$d`f%i3`LEa_oV7eLc2^!W(%AoXMla,7Dle#he?tqT].a&-S:=5h@P+cR_?MC%$#@q*\A9IWGL;%g;jc9DsfW9H>cnjhjI&c@[*8/V0l#sZH`,A5/1F6fe2@oK`,S*ZX1de\<60>?-;?EP;oa=q=#8GN]5n@lV]ofgr5nrPgAd+XSH5G%B6/Ra%%$OQ\n!k4`Mbq`rck4CS*osE)-Cr?)p7\W^Bl^,k&`MGnQ*EXcA(?QqTTXili19Uf;q'+GM.5ulSnFg:qlAjo/mt,0),4Q%hs)!h7XCAIrS0aU=iB-Tp\MENm"Pe?)=I0-mFg@]B>3\Wg3`eRj-alcb8fsCF2-7D7_^7]f?YHfY8]b)hWs?b&8l%hp\MGXlK:7D%dc4XupP:VH:?!f0B05#9-Y*Y1FK_=(;.@5hDp#.<bIrAmrWVHuW$]..cW-%+imFC9]mfBr.?iQ-2g`jIXS;Pt:i&PVFSG<"HEX2O%cH%j:qRL\SRBYQ'dbh`em^N&'A3Tk9')SMNgi+7#+A9rG?9e0grTqO8RX>"g!j:JtAo$8@2#$k"X`tn512BpZ^PuZ1It+>BrS0?C%"O96\]mcL*G5D(mp[S((HZ8L[9mNq7/X/9NA#1(2olGoJQHc*tE3GmpB\PQ&lXs=SQ<X<0I;D[%d-5Z6M6kX-MU/NO(n0Gj5NdJu%:=>VD)=$tmc)-Kt^":RdlZk,WqRPMK2rT14;qfY(%G#j/hdfgYR6d69e=$8A5B@UCnQ%m/bf;1#op_P69ldG0]:))^2kBnR5LqLB%>Q#m1[E85N^WH%QVnL^.rDp[9mc3nW>.`\42g[;B\^`@k\/-l&cBJ.-I_O*&pMmC/qlP<j*r'I;olImucW5otENc#3XaV>S>ku]k%EkU"!3#?J0Hi8?g/SD`JcZ(54-VmL"o0i'?RnNCHkIl?4MBVJoH/.`KXr%LmHo'UEB-F,1<^4dQaHZGq\aS1<Z>6APf?ZT$fT]Z'%ot>f4'[+*bCs%,'gnf;33@/iYP'd/_]>V$8B=ldA/0'U=&CXZ$LEDOo`D*XW]accV9%Le4RsXMSFj:hE&%jiu/N-9TXfCU&H3ndh%pUl.,`aX`1A(HJJ'aV..4m?s4ROh=WIG61r6d+NdFlbZ;b0KlHa%EBB#4"lmj7;^u&dijSRF"PtC4p'0o@&e!3^8S,G"S%p`qj(!%I_#Kh,1VbNWmiHJ2l4OSj,UL;(nXA)q9$BmE.@U/*QEg_l$RV"/"Jnk6+=N)p"GS3<k=pOeUdWC?1mrXV!ISe9mSr$g6WjNW>k)I%2qaI&@V9-6AaLp-(`Xi'#/dR`ggJc=hAqPJU\j"Z^[dso%glf0Zh'r9ZB8>t*F;d`8j3fH1fq&J`N-V/NMZ%ch,m]5cUTK=kG?&4%`SOfSIaL,Xff39dEcIBP\?_kme<B]\j^2[liXJG*983Z<a)q*dI<^LsI9TLNQsUbKGD`)=-Za%4!YXpbbX?C0CMV%T/[6ua&A$'5%b@0J]KP;QF_DT((Q9fF^jUJ2/ESZ_b(OIN^@H"eO1J(_ikXBk^S]#_L/s)UAHMpok0RW)d6J8*pA7Mo;\9>9bhA:9HU/'qOeq9^,%-Y(X>a_3dp`c*m!%CnYYEHlmFMBnZ!JM8A&m_Qpn>cN&^8u@rIJ8?0DgZATCV-/K>ENZl>Zl*_f=hnOTp"_\HDXCe<5K.Dpn@0(`%g"f*jkP%@(3I8H$<qL6pkV,ZF@?A>(ZBuoWk=5/R#X?d!'@-$IY\t,`_63sT+LkB`-UtCjOh=H)c\2;(RS(EB'XRP?46_"gl=L:t%o:VDQqNYg-R?j]A7OGu5qC&`qOV3(=MX^plrMd.n+)E;!"!l_52Xgg9@iLDlnE=liZq9.8OSAp_q<_&o0TCrADf<WUmDP=")p(@4%5Je<r.Qp<9acP@CQJaU0\@PZ;*hf3m$G_ZF^+q2'+ASqVW00Cfq(DNSS#!]-9N%3Rfg,tcp1+j3)B2Xp-3;GYd74Rnh@Qo+q4a?&%itkun7Bo]<V/LSJ8>9.bnuCR1m;WKBU/hV9@9%Z3^/mO?%A^m@3ebP)0I9j_-37_c?;4HJ!dg6A")@sqZNV]XHRWs=\]aYDFmF'n%oqhMQhsYJhCiurO\l($PYpV;jUMi*Y5^7AC+>c=sm6Y@tm6r#Zf)n3RRV7h\^/<Qd$AastKUsUfem,^WibsYJk:uP0Ei8?@U;',8%m,N>-f.7#`64^b^7[Z#^dc:f:Xo7J2>m.;)'uU*l-(Jng'1t[9(H)];I"/:_(Y<RMG]"YR[N]t1cm=(rVu&.3jq!+hhBF3&,SQ<g%UBmsTk>A"W*#A0X%l)>_0+AOXG+rLmhcG9r:\8Y]_ZW@3k@WoiNs;]a"L^NLWBaCn)5W-\h+j3oR!Bn+YJ+Z4*'j[MZqk9?qg\p<%W0KJKCE*)J^_Fj.g/sC@_R.M`KEHdJ!4_Bn"Q#L?=ARQBep7tk#?(8<+(Y;`/6(<*r8c5_HlSmd7koa*']3qGoI;i!+C&U]HBsp*%F_(3JQ'LHi\eSF2;JP*&VD#"CdrbK\#&-]pf(6(WS7Q:WbGnPuY8m>*5(*-.='jI<NZim8Wk>9q@s]Fpn>h&r.Bu_>!6o'P@Tc:`%PinTd<I%H5?KU&lhrW7TAW:;daN%EeQ0fCXq!*N8^HL1;OO5)[Yuk=1/'I<9,c]-7b"M]m&3H=tp\;6?Al%-A4Dh%?09</i^hPIW%hS,mBD!SPJW0b?SYL/TTcCY8#rcPZ/#:Fq%(a7'hM/MG_[Ve%AW+P/CKB#\fjle+r0$!7h8COb[;Kma0H/W"^ksi'%P,cseCL[J>%+^.8Fj(3%?fTFeN[<<k#)gRoa3H5cp6k"3B<pHsF^:]YmEk"tYnP(m@DN0*]abe*T3a<&LoJ':NJ##r[/b^KVX7B"fg/6%[V5!mR%ql\)r#<*CA"m@hbHf&6&S;LN(Gg#/nJCrcF0-mXecB.F;o!BY1Pg<\&G=@54S)mJLNqd4o0"jJd(=@XRY=e7bZ%H0t[J,]m2#:Cu%U$;K(XD\jK><-A%f\5l-EY(H?WQK/<=:Qq7SR]SK0A0oIp+%LE1I&O=[kH&Wo(J,d!0!nUe<7^1>.CTTB2]p8pIY;^]M_b$^Phu.%(_U9lf9Ld*IejB$k;](b!un9_K1+S1WN+//-+%cDUcOU+h@MFk;fj!]@jE<*R9Hmr#:F0pj#S8U/`'>:=1*F/-?6bQ(?pE3$`<^#%)o%RrXWgI-.sM-kS]#Us:Hs[XP\Bko6`I-<K\C)_/T'7!FM3sMBG(j@E]r$YCJX\dbZT"4:nI-)<N%aX*9*NOp%jpDgu!&tMJ-#(%*o*Q1MgqlmG5mJ`-m1S4Ys,TG-U'n%1\5rth`*0UK<1Iud@Waa-?k*]f?`b7W>4jP#(uS-j%2c!$!Z/^R45YW;S@>"n>1ubi971.%$K<@J"u1Qiq%6k3bBM+#5UTeP>/*L\>NT`9#S.-^nBu9q(A8j+SqnMp]nRDX\pI4<!.]+lJ=:7V@Qk@HU@Gkt>2ONM0;X`;LqN]Y%+i/G:;8'(,'@Y.=(?/_rB:8#;1AHX_>Vs6Ar)/^<L*O*pfS,'!)8Du1fG05b73gpkNkqWXL_,p(g?SDMo3=G!V\MD/$bEm!?"h6Q%a!0NQgk:"<3]RU`:q6b+oWZM6:jYG3E+U'^#+89H1/.?h`Ps'71djm&);["KSO1]e%<e']c>Pj?9S".>H^"f*W^)7,>3H,'!BnN"%3=/CB\WJI<6A!q\*(sgk[MpI.q#6WmiPnEA"=A^^$.R5K844gkZ[?T#2k`(XM4cdG&r4Cj"BuM'jh7?OpFFX>7Y70rpbB2Gl]Mms%AKIf3Mijf2ir&>5:'+uXM^3O/5.$daKYsm!F'\7Dno8D/PoN%#!5`!J!aqel#(g*J0LHp).h.McT705mOXdM^5e+>t6Ca3;Tn/7O%V%fC/%C2D^h$4dF#7r0LCq<2,!3fTD#Yt[L,0iff]%tsrE.6!qNem;T'8.A+EE5iT@3X^4'`6fN,E/NX!XN4@:5&nEQ$b-eX>Gl*%\b+FK+CaIsO<\foT%JY?+7VEG*G5MIPpTC<MYRm2HsTE,[I[ICCh2."0?PZ7e@;HI15]X\+3c[r*7H4+50lS[Z&4tsa:r\Hl@X)%%bd$B5N%6AQ&3;d]<Vf1;:QUE8L+pZB:/f)L+(C78a#M,p5a[qY7"$0j3@<%.Bgs>eB7q9SWI/\inZce@"Eo<2^U1AN.2g$>`-mZM%-HAKsn]I&8cbeZ]&N0AfS"215nt!_4DgdP=nJiiZ*6j1#]SPTiMrQ4CiK18EAH&LB-BI2ZB^4Fb"9XI59'A_VH?pO61Tr[DIV`Hp%I`OtcC_)s-?^0`E<W[3Ai6J=`b6>1AU@1+ic+$$k\A?_O>a;IX0NbCkAim2ujk=##p**heAB&@D4'LTk+B-m"HCgOK-]!P2LI]a2%LRf/Dn<feXo7R9NM")@K9s#m'lM1WiWHD:V`K=G=5CiDaJLs<W$Bi'6Z3p,5&Z^O]4_0jn$!Fh([^s+P5Jc=+A0AtEVZ@jU7="-7%j6\g7j0<WJFbhuR9Fm"B[pt5rge+D-h\QXben74"6e0WPNO&i$[L:.4/\hKlPETE4cTR0O'd^H`9>Wc?ba_l@WH(K%\iCMIgc&Yk%Q<YZHSiHT1.$5rLg8G<JURWrh+6Mm^!MQ,?-/,Bck`Og_?f\p=l2@n5j1,NAh\2X@hWS%+\f+(ajX%:>/LRRm(%@dVTTouN4`[(.%DQ\(C>?W=-n2GSjcXmif+E,F^BRsEs,W$dcSTOc&f9,us>gJ%LDGu#_GhUO#AQ_%1Fp4Z2NQ(jP[!/f^`I%c'j0bhG#/i5.CYB?:%6RJGM"0:GceipBa6Hbd&-+$M)>/4B.Lq#8.V$Us-A1j;A'uD#$>6Sj:6n*IBl002Kjss3,Y^JaKpA)uURe%KOWupnl1-"</])$CT%*o`cN@H_^-`n!\3h3^Q)9WsR!B,Z0f4OUisLed[7lOR/&4a99RcUIR8Vo?MrA*^LJ?eaHISKkB)4+kAhqJ32Q5JO.^,HX''nY5Sb%geE#"G6iET:2H]Gc&jHl'$bGH?B/%SmpN?nNlL`0,LU7PO`.fm%fRrp82(5q[fZ.XXK/qHkmS.N`pG@r@16(9gpA?eEq>R7UL@j$%WaK.uR"O$F(J0JNDio;D-t``t%+Z(Q/'+!=p<-Ur$A^2cC(\ejWgQ:=IR!9M.iSl(3'"U'X:e0EZUoRu0LT?/>p3A!Mlae8E#*LJ%C%#-t##gZ@j.q[qK[_:[^Nb)GaVQb&]kjgoYPmoq/&*JS@ie5$4/GL5cFQ/EhF9&-]aVqujH\os:d_@\gF"-<M>oM6L(3iH&gP=]%IF-tH-UdsGnrmGu'`IS.nI/F0!58$Mk!;\@YF[/0-N4f,)%o)G,2ahb!f%0bS3pC.H*hl*1;'<D?k3kX#"shDFW*V5R&AP/mtltH%7:3_WA%YiG%*LuM7#@3g=7L#lUQ<u),s+.jd^C7d?@V3:3B(<'^g*Ai7YeqRgKeLgpc\d$dud4a&Uhm#N%_1[#e0c\R"oKmKm$UR%&A-[lrU&pKB]F-q,`(ZZ&)1q*IW1f=eWr+D_Z4_s7?p)PQIetanZI.QbpXq#m=&hV>s<Qs'nZ!me:g.)1l3Ge#>Xg)K<C:k51nHh%?jqVu<b`Vmi#X0ecKH4cfE0.BP?YsoCuPN*7Efm6'm7dNM#FNBSII[R7FGKuH-F=CGKjB,V&\5:3F@ib:[iK#CH0nk7Q""N7G!rB%cp/G4b5+k:oj^q"LPg5#2O$A>a;ppt15IA!`3[n+gtY_m#D3Dk,$qT2_R?>kG5;qc5^_TpJe66r7Fmp`M$6<0lH1Dh*a#lU8^-VQ%Og<W!j>j]rF0$_J(R&nJ]O'Cg"\piB&N]'s/b&!6'Cq&Q\:ogNKj]c7jqfSJa>^R^mN\3q[iP6t)n1?G$u:M-a@^6,OJ<sSV&9>M%If_uJ@P]:P/3^h'aJbYo';]&rN$=*q<l"iGiD`&s<SE1(JqgE@h#1DD.`':OYR^nHTXLdc5`LiYh6<UACITr.Q$R90"KN`N;n@h\%B"\Hpcq(V^f?782$&%+dO87EKI#\f^A!7iPF#5nU?"mejGaf[M^F"`'Rp\!4k%JdCHf*-4.,Ia:Eo8'eK?:s2,cf>O?uj?ea\@cq%%<.(38lJDhXgPNiVUtfu-)Q\2KWT!.C1i8(_@@>R9gM0#`Q>,Jg3AUYBmi:5ZOR`O%S_s9Mlm/hkikbf9WC84!B*lPZ/%ZQO=H"A%2Oma3*3pQgZbjQsFSTBR$XsqqKS<Bj\lq,06!];A2:mu3+3G.E[$P[f54-F0\Z13:LkIBgk(2od@Le";NhB<2jX#4OP2;gcRn0$\%37>\uAn2G%ZC&E^EABP$&5I,2_C+</4]#C\o1A^g%s[`EoL\-3r3?Q+N1rIfR$9aEISB)/YC3$,M6B8'J&naC4cg(6%gFaEHO0CT%&2UWt6&-n>]?lj0OSg3_M1?nbO+_hlKJ+71hQK6\3Un*D<ZXbn*)R]ag8@#cMV:Xs$F-A.+qEdaY`&<7EYtN8aGHOSN0V;j3$\&/%67-nH\2tqp7HN.<J":/%di\U*/W44!A]u".Crh\mA.5"jF[@\'BajlJ$%;GaUd`9T`H-B>Lt8LEa+I(FI"bR@Z>e!D?s&ji!o#B4%(Rbp"Bug8S.2H+i0AP%%+#,6Q3Yu3O?^B,i_Pi:[]a]U;iNg)#T9eBW]8G-9H!/Njobg29XdKf;aI7@eY6Df6p15Me<d[>3/Qf(?%U'C$s"&gma+4PHtl>kmW<M?\YTsD$YIjb<o)"hK^?-clu;X=o5(#7D2["cag@T5%rjW??0f\6A#7Kq?\+H!t-2(7SQdF0(p$H?M%%CCR-!Pku<%?6Ze.X4Dg>hem7CQ@01B]am1B_EQ!5_(TrnI11P5g9d&0=KhaQN/+4?4Er:mq9KMsY(f(K,e*X,:?3?q2qbl0\9t4!%X.+D[Fh;/\i',,J$YCuPb6.abXYk6^^c!m5$`Ok$]-YRXg@/msYT&gfn]nc<K0\)[aQ^"lV-8=%AS_K4'i='!Ijd4,jB7T.M"i'M%NI[F586,@")mQssa4E7:IUaU)[\3#*mPM0\l;FUmDi0P$f*dV!E/fj=ig/4&6h8d>gdGtQ4KR1L%n:nqHMtZcHN7o1CAktmC]m-o%!#mDk,/$5Q_)s8X^%ZBUED\5F2jAWiHisim2D1dDFWHR'M`TYlR7F(NJ/qt`omdU;ZO53?e;!PL=t;kpc2hmJ.cM'1*+]i'I6Hh5%GA.H7Ne[GN"n=%\rkQNBH:rRp=]*&(UY7/Ai@$)IYor;a/*UVI+;)a,%_FdF37_P,Vl,C?;4>Bq7W<];"rfK?Cd8YgARX?uA?(1k%2$^JnKF;9BAGqf=]`_29YR,j".ZM%F6q8.lp*(g.VtAtf/Uk5k."-2=/fSU!9TQF/Q2]l#Ut8rr-<l"!2'=&14Rlel6c6-tlYL5?%Z#H^s#c6#"P_KAnXu$q)Gj!m>Feq.F:n!H=&I;1N.]-_jH6hQ^@8pQli_)0a$K,D<X,rH'qP_MS9Abo#<G8/62<ADOIRq*gE%6Db%/,&:L"'+ak#u5#eLtJ$e^7P&g\3sa-jJh\D+sN+R9F_#?7)Y<%&^:jJmm]^HbS4uP'u"7C:Vsmq@[lWU8b3LMZLFE[h#UDidKlkp%m1+:T_#t?LPK$C@iKSlUnX7'd_Cj?dOR/$/l:ZC=Fmem,0Ku(4\K$^:!_f:3-_Bl>=RNLY%>!+^_k+ls[M&O&?.2.m?S<qPbB9bB%oT@B"C20T=Vq6:`BL#>Pr'N'"-3o7@5P?Hk/[9p0./$.u/WCgj57hS//G?7(ieG.u58@oN2rA5a%c3Zu+sIr5Ys=?=I=.FlGpdf4%1?Hg-d=[9#+X`5pT%jBUqUbr@fj<(Z#8tY%1@PSnrL07T2QIB$;,kHn+jq)tXVtdia=`>"eZF-0*t*%VDJ/QVi/Y;^=@R_@dZCq&%E.hg)2O)cOPiuun]b+H&7B0X*MqjD`6UR$kQ=$8U[e+WBk8P^5m!V[,EV&bphj2N<Y6Fc@cfQX/B$07lc(<1R%DN71Ar,kNFu2VF%mAU%P<#e4NLd!`i?7:dDoE^_tRaT-$Tm.@K&!^89geqJ/_^=a0ZVPIcL:rYH.`];aaT5MZ%sHFhgTrB87IiJ'4n;I$+P&S^,KoJL%?"rd#TWI$&W*:K$[>rQ@K:q]k3RJq7;-@lT4#H'N&#<L\6i//[YOSne!1,p]+f_/LreEF#Yo,m&D?&OKW'jCOrBm9E2pDC_6\q!a%8Z3pqI<dS(`,(@6Y`Mgg6c@dhJ]u-4_$l/95nC-^B1&*5a-g9Y#<"pXI`js<a?a`QSfj.?N_G:F]+'jZd91IM9b'2R*88k;Tb4\`%=T''\05KkDiQ%Bi(XTja3iO!j%34Lj[j/ZTerRYY.9SWhHU.;K?;4p9'(Ka$T44/L*$(IKB:#J[LSf(e3&i`H-Q@,njr>D1JZt>2%1DF#A/*p'tcnn3eM"eQoa%hGQ'AF&[W%.Q?;'PaK<#'`6H88[0%X.H;0)if<_OT(69Z\5Y]9mC1L+.DcDXEqA2r`YMdPi9nEu/tD%28Za9U5rTB3suHh"R'"G89;=6R[:OSLfEt<oKKa";BcN!"CWP9/3'jb6mX%0WirTUc`PP(k!3[k[Bq5u5IJqGCm))NGoTt@b9lJ9%?Y]b97:<AZk&"tnPE!N]K0QY+9&_GIp;TMOL(Yrl0"G1*f!B5\UI:ub2NVOaWnWf&DgT:S$)=ouJ0sss4X&)8S%q)b4QEJYI1sK2%Df^f>ZL^fS=T_UA<uDKR'V,gBoWo:4!'K8"!1i$,N\F;_^_n71@i_lK%jp9E31Ig8!/5@:@.Zh]hG'Ao1I.1n]-h&/S3b[#rH]Y7%iXBjKGd8a?ID;A0aZ0I<<S#51Wi<BT2alW\UkpncoD6rtNZ7QTM4!'/JS4P,SqtMe&59h5pI%!]A=KmBq=1Co-EEFYIem?9['0A,%bn;D_QZD)##m.,Eaq0$$(cb82cM(XF\(VW%3t=(H%8j-2\86u@#;^:S@R#NpCW<"$&7tb9Irn$lq]Q#LT:UjQ;oJ3LW9@$KE^NfO%*0p6Qr=ClTO44gDVbJHHSd;fHH<pI\2Y!(s2af%`6NmD\L+(mg'mtFa%8lHZ#3$4HLo)52A+j;4ltJH'*tIErH<dr6gB`I`2*W:.%IBs-ohKtRENO?.rA;E(Nj?tkqR<!4uSuON#%FNQm-ujKQ(/"Ms&&?8HEoY%q+*m9(L)t9tTjk6.U+'(N9*Vl.@]\HNdE>K!]Bm+g%B7?sT]I]+T_3L/^=s.(*>^Rc@2O_sV>>B9M:jh:"K(/.l'AaQ_q0bP[nDlM4q7eTHA<ZXM&B=@^/gs]Q^jJ76GG]._E*$3DVEb/V%TOS,pj>]m%$``"[/>8]&14Fk-]iW[<k?i2jmKL*_ee[e?_tk3N*"R99?`$H]X$7P8S%/>iUH>siO*Vu&3P'5MQ^OVNr*q6DVK;Ct%4J_isDsnFt6Zm*[m7"ebBAE@#1DTdqXqU^W(M'5@_gK$j&YW:<gQdV#XM#Weol$Bo7K59[Ij.Rp*c4*1p?DYpacp-mSJ?NTg@1g#%!k5PcFWp+sn!WY$Nc]'tn=0Y!(12%(N'@>tbaF*9#mAm414N)Cleo<'fL`@:a*9VE/<L4-SX2YQk!9fk&fR6UA9hCnhknFYP[Tol%["Wp?86".6d)X<A<bS`a?E+jg1bask!`n-AhbGh+aU)^#B9`R)T.W&Q9'o<sr?WCCZh++p)]O(:!XsR2\FDd5^p*SHDO:5V!Xsu?%i_fW+!Xr!HbEkFB^j+/GT+k[4)um5G%#Zdgb+B;S;1jijXT3_%/GjS?nB?2*^n*G1P5qr&5@fpO@!X$\T9*>`E^=Spk;Mf4ZHGE>%No.b/)@CXhi[9KL%aT^%fhc!a/>aY3:a,"P)FVc$gM?]`ps,,K*B?t:WH."_A"?-#cZ.Rg]Z]?*c'#Wi\VO"kontiSK\7o?kHYYG%J$Nl+LTOpM4';YoH7S<J!dh*`NDRT\1P1FWQS['?<OARoD]*SI3T>FU4m\N"aH_]D1aBW#,X3B+>!h+>iZ&5)jTjm4q[rA(7&g(#%*lPu%eaP)9O:WL=at9cURr;V\BCAC.KB1JK-[gME#CQ7QdM\LT/1t8Splp)7&!A-GPdgN98>J=VhQA(0DsK[d.QI?$71<Kei]tXb%rMmrJV7_7O,@!W2%.C[d3p6gHC&Ra'fPglk_l9`PF*\/PkYr;8dE_>K^J6_VbQ.CK8.,:M2>i6rnCjG@QLjQgK1f)72.R8IRk*2]%D7?no@WAW]2_oNS>UX&'43rga@PosYD5kAU[]d^sJm,o5kOgU4cd12^8U`hT"mmN4H8"TJoCY].../Qu?G8<tr,'TP.bE,g:9M0,%k%Ne!9b@YE\peR*SXu?hME#GCWAa4OB";_EHLd[9;.>POP?mE$SN^VmP"le[*.tJ#'k<bskt\Bu/7/ei<'>DQ6)aRk]<l?3T8[^[%GLbg-;?_oZqQBMISHp.#5I#WEg-!aBPjnBt]_qAiR<du2DVlQjp!1B!&WH'%$I>7Fn`&cPo.ssf-U#U-cMOgb,kJ-/8BSnF+f4@)%#^_d3m:;,*3kk[L(B82'm.SP[a3k8F6hI^RU-buEAj0R!?mJc:TD;d=qbcl\EQ$qX^*koQ#B;(Lp64KgVnC"jUr<T;lA*`Dl%WTm%R#aXdZ@*U!,4S2<M;',?(42.[k?9+<@oFS)hFTV)Eo+;Y<F2<7%"m"g&Nm7F)0jCThn;9)bshi#ZI>$jRrVL[j!9$-K`&9"N.3=g%W4KU-l)fI"gI@^$;@.b9-s'l+S33]-5NVu[``(,&6I;UBhj`Nk/Zeo]hs\g.pD2asV@B@ZST0U]gt&>c,p3CNc`Dq1Psj$f?:)9b%*&RMA+ooUsr^*I6S-*/8Z3>0M-$APC8[XD^^Ge_3Amn$@,4!`7QeRgM2PiQ,Ylps_ft<[\YA?MkliEp[Wc7@pXq-kjUI3Ahlp6+%%EF`Qo&6`CB2eVT!mDul"4MU5GT"Cmj65m3);Y/#ej10NTIM'g=_,YWZF`lg=jpTFnbX7&#Jg[NToe85jM6F.%;;I5@ne3AlP.4gp%M?*\48a8MN1:h8jrN\8Sf(-!%C_N(Fdrk=gYi7b1Kh'Cal8j>m9aWMdb2$Ws51iR;0"n+3O"L4d=QXe'0$TN0/*nQFM/@04'8!D`%BR+q`"`,N?aS(.$8D#j#2+A,%Ld+X&%1P+:fjVE$g;V0OOq-N>B(DQ6UkiB=0Vjmg#r^dSm,L>qD\V3n.pmDkW.jG5.S<.[DLuD0%ZE?uK5"oPs2j*rrEJ!DjkioppeQ+2JCn6WRg@`)/$.t[_17(A&kOnO?A]@_>FQf"]9FJC+dPL9+VcC7uniBKXkV[tjq?ZWLf.rne%f6B=Mi1!?QR?C+aOa:L!F06-4flkdh;S4ImEH*:g$^g6AqI/+9LO'9/Cgp+gauCra=R0ZV_VF1UR&i,VKFn8]E-O!+Q)\":_J!%m%4g8!rYQ2@eJU\^@2j"Nr=U*S'8Q.LXrcZ(%;3V`d?mV5dWM&_>3*=YaqtM;Z2/0fNk=okjl2MFb'R%[sd+u\u\J]:0Be:iT^Es1R%Vgj)1`$a6E!JFo/hX8\BBro1Q]\T-b':q<JDg1C2&.dfn[n"QkW,W3c`s*$6\s[CCa)(qA/m1h+f9QMIAqU$@+^l-n)#l:7`D@)W%<>.b^Gkt-(4s7H6g"a8W+CF9iB63gQd0LpSA45YWhoJ70%*b+Q/Gk6r3&.lMqO&GhkOW2)!.CsC%0lfW7UJlda:DQNRn8u/;-7[Z%nVtJPmbQGho(lpLB^+@=I@qZ=/+*:Lo0F1VliZ!@M3ZDoNAhtT*!*FiO1NX</OQU.RarRt-2Y8\-6DH3r7+R8j_Lo.g,cY3bq+GA%?Q_Ba&^+DYCEnoo'XGPA[ZD#scc-uBE'.f`[(F.B?o=&&g6LdCDQDA+B\J16n#4fa)h2YZ;6Ua.Dk0sRG73)mp=="n_$&F\b?I_?%drfrdalu/LQeHe+qeKj7CqWtuQYnb+#"2GH=Uuh-.u8n7iYu6?E(AqP)#!.^ZU&K=jut.cA1aDOZ,N.iW/U'4_h2a;`G1:B7B0Jg%#H;0Oc1TX_[M5m0j.H(2QQtTS^V<oHTV$-o1*r@U+PPPpkG=><^#`(4m3i'M>X>Q/#T%"gV*g+'jsH>\L#T!<8"o]^l3JGq6cgpf%"lXkkU"I]N^hRHUP"E76mLRJd37`:kp4f>9&e0sf-^1JPnn2MH-mS<h.r^hHJZtmXRA3I(05U[+1+<d+j5,il9S1Loj5(=/khtCX%5%oH/#MLhX=PIVEO6sbRRB6A*:]K'rfe^@:072URaI">"obDhe@<tMVchk<1eD3@6B,h6m_2^DB"sr8`\=k_hM8J+fk2]:sh+-f5%7tZ5;6NY'.P`*sO3#cSfe1aPsbR`n?M(\*9pq]E(hrUCaKc+;mjn_pA?Jfo1(O;0ga0EtCj;@(.E2iW_WH8oe%J.lI:!+`A.`)6c%4E?_Te%qQ_>V:A8Ytn(8U6is1iJM(B_B.>T*U=L^itEJf^i!CHS7@tn&QHM#>^f@36nnrf5b_OC!JjgDb4R_SIL1oi8?#R6<!+aW%=P,$?9<E0B2AiOi@\UX@cdkFX5nm!t=je(kBbQ#dS!,E*!"rDcgC])<CqHIg:`,o&_eN(T?G2[;,H2tsCE/iqLM:"J`r%;TarZ>a%.TYHj6j!rIV7RcY0Z2_q.h&,tf]I=XM:TR2I5$+Q=7@-F%g(^'UjN^,=(WC7P#DQZ!j:u:j$IW\%uJo=2kED/cKsO7^[YSHS;l8k%QVjgsh8bre-K\fQiR]BM;nRZ"9dR(2`r1JFF?&C$qp[cIn0XKlRk=`&$UhKHW3;Ek-(,Di>.n]7;%fPYLa:%P9I-8e=X6=M8K^@1%qU6+!(Z:Nt4R_o3#mp5IE?YFLPr]NP<U(7R`m.,:jqIV=e4\C"#mQ[Lq`pM^+nE3dp>@V8U(Ms6iO.$jh,JCtJ7gW$a_Y]'!$LD6%J?40C&9/dB_JMG('7oYSBI&!+#_ZJLUh3%?/TAl^d?#=qPmIG66J-mOrIStgO:\9g+?\3>:;eJg%uA,*6-RJ[&d]3O7'R%g,E\M/%&#OHm7*<P`W10]IL^p.^4uNI5gJ)KX1#HY8;_B\O?r]O:TS241O\dHVg`g*1_hILVWek3L(pCL"<EDugRZ27)=H?5h?1-sA`<+G=%'rI@t;s>aNf*EL1U?pr^/8[J_mJtHFP@d8$Q=XIk_CsA/.oZ.mcS9"^'sBS-V^R[56'qn!Ef$kWlNR8g]]-2$>pQ_i.DNMU,^)aq%lX<HYKPk-eHu:8YiUC6mi<qd-aYDWY[4HP%DfDkOi7oPgb4$boSEh$m2+@;(dQ%ii'?0/K"G2clAZH]k&,>6.L.m`:*CMu6j:FU!%&80-K$%s>*:Ze$k6G.9mCJCOhr?(*VQ<@IRI*Y3*j?)suT[c-XJ96;.Q\N2O;;u:%S>dbd"W#g(kYY\]<GWnP,]JuL\pZA,l,S&q%8o`',nD5\["8a3B&maFt<Ou8*J)Hl<h0q/*?Enur@m*T!]W]AEULfgu=b#[$\@/ltPAo@ogP.D9*SSHf/4KqMj5C!Os0WG@%>8/J%iORf^M;&DhE#=k1CSPkk.V,/%g./c%d/:!T!cjD#-_^Ru1LCR58g1-DZfjmp8e551&R77C7tV&&nNNk[#,>B!D:IurRtKV7&es.A%*aJ-aJu'Thqi'gC"s^'*dPIn_*^sL5iu.OZ3?SL7d/Q')$&etk1&?'Jrne2VH8!X/hrr*%qXQ-bV6[r;"D'$,(qb?_Jh;69/0GaL%.9061TINS`-(iEb^JS,gQ-$'e?IfFQ#;W<B.N1po!u[r&.N%#sRW:\cablN%CRtc?QXn\PaGCInJn`lLJNY!+%fY#VeonYWm9fG]%I+0,5VS?17LqN`oAqGd=N)hHj$V$l,Rqi,[$q$]r;Ee+)aJ91`=bKF#T.LnAV.E,,Gtj=#=Hg54CJK\e4?$eN.A^Y;JdL+H2C0fL%OelVYA9gn0XB:[q`+r,(X>2_FZ\[I,bK/i;WJk:)=^#E*QIk3=MD]ZP]]OmgWcLNcO6BlVN,0+&S]r+8V.E,,Gtj=#=Hg54CJK\%%`](4&@:lVq-R;q/NEoE()[Vj.cstQ$B4V:a#rNUZ$oM0\6HofCQhpl<bKiejN/Y!c8>[8ka^e<&]Q(rr1*bb&9hm[Q-?"amS<.]D%GqH3n7S,$Hb:Lcs;FM6P@:_o=Gtj=#=Hg54CJK\%EGik[&A=!fO[U+e-=4R3N6(RY**KNnDi*)9<$]a`!QZAdM\ZM)curNZ.PcK8%]!/K1a8kH$OufGJ,L<Fl']kRJ0,@D,,d-P`RCksu'?UGo=fHqR:aTSnhk(tE=]GGJ/#T10`e^]G'p8?h(.;\e1'(NY.Ng7+$-;]3%Vao=Q$8;KW)c>pZEiQ46V(WWYUs$rI<?[T`Unab1l$/Ue3qiRFUpC[4Z]i[(f_Qgu5(c7VU)6I7CD?:oeOK!AfdAGrg#sJ5ONp>n%4-7_leVoqm("Ab1RfHS&98-RD:g"9;/(.01[Aoc<Y8(d`+:)&sSU4i[G.^q]4KX7`Yp"J7#+g7r&G6+o%:g"j1(*Xn)-BRY:G<df%'pT)Ug*d)aA#o+8A[j,l_@-"Pbt+7%:/OG"1C@f-f]&/a?,k0obipu^),(Z0;.`*D8hPnBngTDr;jElIQSEI#cI%OeZqR()b.qT[%qPsc0::J<<N.K098H<=)7EsbrK#6BhkOgSN2c+lI;D1P"?78bCH5X]'8AXCIAjm%Z8*?IKPW1WCZ_GC3;9ViS"%P(5AIKQt$jh1`%0!@3lar!6u)(K.c-t]DOLR2Y@'bq&d7R_f.U%%W;,=.ac1rsaf'\!<"N2">)#^MFKiaB,sQ8YdaE&g6]<5bFabZ#(4@@#m1(hOWq%Y"5&,:j</(=badDE6PU%?@cUPV=4g#ZRc?J;:qoX*5a>J_,8EsqJ&Ad%'uJL#>lAV%#0Y*l)hf.kX>ob49\gILug(q,"F1[_%kW3%/J]bI,$TE5!f+fM.r]_AZN>nP0e79`Ck`]c34eg@71P>e<ohVbq$cmj6#;C.b=NC(-r]_F`9/Coks80Ad>J]m]iq)ZFMnkbf'WL-%6kP&,##7Ysar%d-T"W>*l'No__VsaH5oG;F0S:PRNa\e]E&(^F$Bja:3143P;J7i+9VpZXNg\&+1!DBm>_Y/+!BumkAILB=cUf"l%/-C9bPVLCf^fO*1J[V'0n;=U//;:!@e?Td[_GJEQE!f)e8&6Wrks60hVrm6E$l[#7cbV?[nf/Xe/C2/o(%s84a"T#_GRQB9#V&`'%E[o*<9+b&k0uH=G0;?^#+[X<gAjm2i@TMR:(hQ2HNaa>.*#r+-$<D*;,)Va=EGuUH=lS?f@^=4od2=FW'OHNr4^"ZO14o0H;pdp)%^Mt,'/Z=Wf.oXiIb&i#B7;%XZLsB4m8euA;..#JHX[hoXOsQHg9N7-S%Z]MKEcCl,PZ82fB;/5"K?J:WWFS;+F<G-E=\ou'N(TBU%;dc8W_./jD3BW%!QG]JbAN;`)=dF]8$W73+5ZMeA`=,BT;T(9,Op0!K*&B-K8=;YWjZJ7:oG8q!ctWuo49rn<bB%V2Yl]^$VJUn%%UC0sPE-Met!f'9#.roS;ZQ]RnoG8o#Op.+Jbc#&<72.OHU<G@<0N4?L@1Ic8bL(XIrW6X7>*!-ia;c8?9T_=tMO>Z0GWKGobe_[1%WA)Fl@$iB:Z4n^!$Bm"ENZ"$3"cf"n_<EIG;)pIfR**6"`)I5,+dV*FkQFnQA7>=mU+j\ei0Z7@;WO3"a\lZ:0u:a!(F[JTC38\h%=UpI$QK-=?%omWi*5a>J_<EIGa`2!YLFRQZNZj_Oi##p&YiI*j(_nTIY.lAaYiI*j)&4]JM.9!Y93u(p;8IjA(hQaOjLP8a'KJ.1%=cl']Qk_V@MO>r6E;KK3,n>nA#F,X^]Z^pcWF/#''JYj[QFtEQ;lO0HF8\Om3BXnF<11Y!R&LFJVdlT%&V>lgAh"N=H*4l[<.s=D%L)Jb=P<!5SK]El.)&4<?Kk!S`8=lk8.[;0UN+&%2n/,aT%Zb%aiUA7-)%MZZ^&PRJ2qjZGa3H3-T\eY_1`um13uMQ38c)*hGlRjH%At\^"q8-gdj`Uao/toj>L>RGT7.OQ?Gtr&^WIVS5-hGO:59m\++1YJ&;`QTpPtP_eC1NVCd]8dACOt;E^!us>l.*`Cj5b!7`:Dra%<tjoBXUFdA7-f_ZSM'p:`84F:G>V:;=h_ns2jNK?N-pD,a`f/")mZ?FoYq>C;cn>jh\;C2b?L059k!;2I&D#NI]QJUbb6VBV)K$&%.4eh98Z\bmI#TGWQGV'U^9jV@12A<iSSe-`G%FTsA_'a]3aU"W[_:_VOR5k^A_%@AaQu``bc5^LWbkbD'Sf_S,I+6gM7(QeQ\hQC%FI+X4Kr&:AhQ`3pOkH^?1-:aGZW"EiO6on!R9chTfqf[V?-8;_V-K<>/X</V1J;<Dh9;fKh9;fKS]o)W?@-#;NkM!QhT[Uc=79Z8%gT,NSS'#`%:?C&tf;<:.(>GnMZlE^pYE%(Pa,[eb;p?3;X1Na>?g8rDZ`'57:+Ao<Q92G\Mp%HN_D94!/=@Jf[2^QJAMAn2'UEHF%'Ga_&-\Z-#(klOi=B1C"WcB@ce]Y(=2YG.mWCLPp]k#]Y,I8)MiUZ)(@2W0!B*ui/C3dJ?He'9B/S>F6@.eQ;YRFSdB*ui/BfRj.%8?==3@U6\&H=p;4\)&"WCM:,GZ+U?Bb8JoIBXO@M]nX^sF"!C!VJ9X"Pp<W7*19O_Z@$qfXnIF2f^3/@G:7am7b%#ZD3i4`HA>O%%O-R'rlP"3kBY>fSh9O>meOo*"Gh.e9d:;"F6b+fk9BI6upY5)BX;@#DJ^hj)`tc7"s$XW)$*Fu+U#g<kRbY/*]j.N`_hH="C,5Ed%*ol6<rJ-ufe^d4*^iR&lT.sTl4T<0SOmK&PZ9;42]Qp'j0m]a<lQ1G&N3<eLAIi?c\QmfT)9p+*M)$nhXq[)YP3#:j)7h>"MTO4N%\Pc**m`Lf(10h+i.42qYbEZNlE*'1VPG,U/V3h\IPq0gaY[Y.@9SP'`/&c%4Y4S'$8Z][k94Ijr?>dXZ;D4I2U0]V@7D4sh0?PTI%*i!M\AEbNi"*^T>Qjhf9SmjHs=*fbGcs>mkE`o^?WZIR.ouO577qPc7ACd!gXk-KFL@.Z00c@JO4iLsqY&oPX/!bW6\*gnXW^^G3%'?ue;1!s7j<0PU$e#=\\%NYLGO3FOL\gs=dK"KG[-8&F^`FP@h:bJ.FeM;XJTcBI0jjp!SVeRJ8Pp<Q5*/VqaJsn275=gN%QB<77%6[*,&#Kb=u))(Y`Atpc@$Zm*EEpJ^L'[2i)P+oE@;Gsl&7S4#gQ#WI]`QD:/ASS:$oD\7iO\pO"9hgmcl@+M/a$%oD4o%f2KgpNH%9MLe7h]WY3A`RLFe5R;[\_M/a<%^b5Wf^;1L.k=,Oe3dq;e>$6aE476niLAsWf0S61:u$\Z`[UilcS=L)dPHZlY@q40iaflC5'_[%rml1n1?*5s/675tTmZ[*r'TKdrqM0'PO,sr^#g0?jel\ug[\:LKmic0a-uasQWoT#q5N,c`r+>'@:OcG[]hDL?+@*l5M[i!?[h"C%YV#lkMSHp^rV(`;`MqTI;c4t.QC3mk.uCM]5IFMDQ(Qb[Cs,Uk't35%$Q$85VnNN8nl&nLIJJ`'_RBAaiPN&$FQ(*Fr5;ZF=+9G8%YU_s2<S3S/XBX>BTC*'2F4iBK>@hF8A880hCnAkk<gbK3G(&f2qipY+Z["<uD5$gEic35`=.(RnhUfus'gqG*C1YB247g!M^$Aeh%*U8'tXfN@clVQ+dLO/#>eXQNM<c%#+jqa;!lE&3/Q$F[bq[hC@8q5r5<+T]kZ?E3`c-IoN<OV&QQ/!inoCMZVT'ob6R\.p[AZckr%U[qga<c7T<*VEdM<OV$;hF_?tIbq+AhE19hEi\Jf>?-a>Wd<`,dp'ZZV7uNTA9N%;Dj/l!/O*"uM^5jpa2o=`Q6.LG=h^CV<qA@m%bHI*ibjAAjgb/9@m8EDsk?dG9gSGt%FnNhXX#KX\3TN&1m_LunVUoO"q0b#r\`NS-SE<9qRCNRgCT,kU2kB5rgJj6hVL%;]eQ_cU%/MHd[>?TM;5&HYAb,QfU\Y6/@l?QN1/$#+$Z1YAu-s(b%L0?>_X.%hKA6)_g\RW`4>OcngG@7l=mhhH5lB,5p;ne-We`[aNdd4s1%Z.so`N5&ku<n0iX9t?PCO5EFA:5OIJ@XL^!h<`LtBE!]0T<W"WRLT*T7_Yd@jEn$3WctQ9hIe:p?AJ?Z+"hbrI+Jmq4%?qcoFCH*%Pfld(\oM?4PtP^p2)=L?OkEQKXA9k:Ok>I0G"XD3En/*?jJn']kcpA_A+u,64%*ORKm?#,lb,UaKN;:FmJ1s:IH5a!rX%[uHuI:p%Tp=)RC]9/9V>&:5QhJ:/WUGiB-a`<ZpV-P=3S%R-]e08;P0J>TrWsm?pTFE-,+A\:1ET`H])#E.-sEEFht,eI90TDHg`[;6jeTRl%]$t5TP<5(p>1?;gC6:SPl;Xo,lcYjA[=%>?*dO=AOk?KOR9f*;I.!if4F$>C]1f=smio.\\]`KKjBT274gXI>>O<8q>V@lPR9VC$%)jstb1E4Ku?9>$1A2_s_ZPgGoAi"`rRFPC"mb@d?ek.CUA6*'[Xj$''[:E<rElkBujjr6gMeYhb;G-F[mb!st4,Hs08`pG_PS3\C%C8I.'1S^0C1S^0C198RZ$E[==gj$4VQctn5ACctiZ_lNhokIEb`2FR&`2FR&`9uC=Qr!)4='MqTXB=o(B1m]maR$&I.s<!"]pF&e%lr&kf\oKqUgQbED>r=D'9<PqOCb3-f1:+7HmKH?LFtC>t1:*YqR8*@qCoYMj\r&t&EU2.T1nOBgp$P7uIJK@Nro*0Sn9%IP<])>0%,huEX.517/X-s_=0l9pS;K=_)<DDo3f?1M'C/PD^c;p$!<G2Q8gktJa.k@rLTTp_Q%^\!8[KEY-;j#3HV6+M'*4oJE9/S.'q4sHA%lbE,+;G@ML8o:OSKdB?,Wf^1X/n<L.j[eZ9/sg<7e]U\>:A%./eYH/#9/S/`bYh,lCQt,o;I$!(Y$<aJWf^Fk'4RqQQ=<`oV.:CV%4mUhpeeF<G9l)5EGr+4EXY^\a0e'8*Z42<(EYE%,rf3,o<,Z?6D><h+P2BV"g[KD<o4GGin(>c6]C>2j9Wto@jc\;"PY5V$=VG7a%c#T\M'_[2p[c-[W1<VlZ*D:"tLVI?06F.2Pa"k>=,Q<^c>#d5T<TQcR.[U#bqs\fGh0@V-DpJaGp"!*+Eg^(1an)!0ICk`-igM1j%n99i8cF&OYIQOY*jsN^I=NO&1*D:#?"]AU3A0_)6OkHR91:pL1ZhskRh9>EtUp+CO2Z+R>Z2=YPh8G%g,W:nI$6AEnhTJ*1H[bCa%pJ1D&Cp%KVP?;RV/!_t;@rUI6.2a@5>q$YDUoopj%]d8>5$$nGGum9\$!d_6jDu'3P0R'h9'O&"ZuWoe#?j^^9$+Rj&)R*4R\Z.1%0hj#A_^3GoadD-Vad=DCad?[.a^BgC2:Z`B>tm>"3gCqhP`4X6<[emk99^O5NP6?pZNYj!;@To:J&a=N>aM(GHnXU&pJNWQhpmub%^0NVe9d)MR<N[%!6W5:8n4tSWRn@^7WalM:NfdHoae>\s4ns2.WalM:%V;2o4nq*.AlH7*=gm8W:bp30r#NsOAdeTpot2$I,aKJG%)jleF,s1T8>3.ad*!Ap;g7CWO\6R,kr#JFBfn7%LaXhf.mD(p-(Anj2]G7tN/D5Vn#PL`4i9q5FV2cPL-eX&h#HO-V^u$:J9-$$7%:U1(Pa"h4<$iZ0KfVr1paIYG5+7ro]9MZZhoMDguh[W>ECr,!P1.rWJ>cqTF^)ctsfn$n*A<o8skbM_ore[aQmAf9nb7=H^%sbj2%-q@`63>*:rEIeVm1=]nG^)boVIFXG^2l3]=EbM?B<C[Oc.V%"kgHTsr2-q[WWUW;)3K4hQ8SJm7Em'Go<Y?;SXlM9=+ZZo+`[W5=%%a%mrjD]Z*<ZO3m:W@rbd]"XW:<g0/iaejH*%XiS$H\ue1/^XQc'-P>,Gh8B0$'/IEk".JW?d8eae4g\Sd]?<m`@GRbH3ZTjiHdd%/t$"FOkHQNR<@WBSb=%kH"K4aP<m=;4;j@lc'(H8(_lI*a`*4pL3dAgeB9N81"Ap/;`QV&b%78%VK+2nq,/f49hL0.aeWIO<gf0\%(Ft]4Tm?4!Lj3Mpb`he#JoCYMBi9?(7J%><?quT9)aTZsi^V9WeB@J>&+u+WTc?(jQrNg2ZMAsiP&lLPeQ0fKq]1UHOM1BMQ;X'o%pEu8fD<d6d;if.kH=V3%$*ds4bS1^F&C4t]qdiqZ1W?0LU!+47Weln1pa;A']p)aqA6S!]&;bPk14,lGrf3+C="]hWHK+BqDT_Ui%h_?lZ26"/9l&!/baXkE,\n"B.r#I#g<D4lSb$;o]lD;^)9Ia)cH^F4BHJaePc+eI5jj[TiUfL+Tog3CfT^B.E8]=)Cn$]>p5&_7#%=u4:-f.&*^$`1NH[,1&[2mV;&Q-O`/l5_nrhA</e;c+a0'U)_F-cMlnL!m9MhC:%?Q<j2bRi/&ie7M<%-FK7?MFhB9d^%&Fa'/J&%Vg@EHWgCY!jiHddY30:Jjc\;n)O[FheC2W>9^6>(W@!m!b%(>k.n4-M-M94%<0MWsfha>i%HXb<>EL/:WE_3JWf^GA8\Mbj;bUq,%.kM_,G:8<Q_-ZY,)B8#Xn"d5+?<OQjG1\;a5&ZMVR0bTDhY->o,r<!^CWr!^%XVd/db&!3m.W>[fP;k@P`4>@N0;T5X=C^I3qh0@%2mKA&M,iY.X=:W9G[i8;Z=IZcV:TTsP`1`sk&1LnRJ$iQ;)27Z1q(g_9:!RuH6$O>WCCKdEb'>B\#rMMdOQi6++GU5`uc5slZM9T%H"2?;E_*%3_-X#A8KjMtA_u'IY8jlcm',*`<5T2mS`Dks,N$&o7TM$X;s#)m[](Jg/1nL"Q/a;F]Bba2.4s<?Q%_iRp3M(J;RY0r%/kX=dHG`-bfjA[f:g1<Z)f(\(rUkntd^$XE@\C)EY;cBCQL4@bnt]iD]k)?WripmtL$`G4.3soE[>k.X<_Op,Up3$rCp5kDf/>P>%>;<+S*a(AnP1HVfQ&e(n,I(1XA9OtBAgo"m0Jhpo=e.CXf@s_C.4":7Z+fA;FtdPM.4":7YnWA`$AJHOHeW;kj(ts/_p!j]a_WAl%R>(V4jt_YhoiB0cKqq^)9-J$"bbfFHb%,k4\Q!!a]j[Kh[auJ\8Rm7`@@fU)iA^)Rj[r5jBl*LU(U3SW`(ai[Yd_+iNW&O)Hd^PR%D_>,D?Z1qJ%b8YeK>bA1di5F`of(<KC0uu[^Mi/KeUIn[meE\OX`3G&KnR(u=0SY'Hc"U*?d5_N3pY(]A_eAsIt%Ehr263mmoPjB%KXr.X/86&bG?8H_P]ulYO1r?p^q7J=,k.t4qbZ-TiCL_r]4Yi`jDks?jK-)*]>D3(m]LN[?JJi&9pKpHn*1tmbDs1b*1%Ic=(pNU%GP>q)p+JMqY&L_)].5_sM7Y:.!Y]d%Dm/m6AZ+?!cDXCJ.l@)q]6e]lqj/=H=1CVNh3DS]3EBKH5q_Qm?MpnCEiQk#E%gR\82B7*%I?@^SWVRg4OCRrP)Bm/d$\u0eh;.sa/$g4r0:.17;`RZrVfH=6F7j+^!X:&M2?[E$GD1+dipQ5We,$,@;la^S^N=4UNS0XnXg7Km%d])?*S%-)9JbRTm<JH"NTjB@:ZtbkcSsNK[nj1EfGo`<L=3Fl&EHgMGE-Gl^=rMm_[FfQq*o,SV1$`kYra8K`GB[jS\f@_7m"XY!%rNSZNEiAsc1n8N`r`Q`''cM?8342,aoN#q.rn%3i3E,r/kP>N;\IInk,P?hO3?5"_19$)A4#T'&\p]VK`"jcKYu0-$Zh9iilmq_r%@QNlBKm%[m`XD2%aJ:$Hm]\hjf\Kt+$a@7\[TdEhpC>/7lr">5hPFI<9VL8_;TPNe*B(l']=Sl=?`1+C47g%CJ;7Gd$^9f-+BWPV%cdlOF.^6P&mSmkDLRkBjmVZOL0>4>+=%]DZ[lM5&.Y/3QK"7Q1*VP>A]0#?c"a?l^0(/.1KYG2.\@]Yu:2kEd:&b-m5eB+4CScBO%,k3MeZ4l[:Ti_lp%XU#uhW]9C]K>Jn"F52bP>6Ndkc+c2GM#7ho'TnsOa1#FOG%m\SSqom<EgPRhURsl2>)Q797<f507pj;:,a<a%WdT^Xmr#o6I3jEVX7dKa]R,s`nEo(L9U4iHjB]/P&EI,>\q,.i_g>qNh=g*E&CRpcSSg^L<?(ZthGpElLj*uo2\+r`,Mpt1b*\d&%gSnG7V.H]F=N(u@C:>2(]5%4,aLc1+*6>`A8I4B_FhRm%G?]gjbTPbBqs>Q`<S9SJn#G2W+Rc=(+-:\HILjN3l?i^*mPa1`Ihe&h%<<s,V]..b)k$8_)"7r[5+Ma5..Q%In?/5L1.5/.n[f.a*03.WRaLf#\qGLY"8/mq?Fi3[=lG4#oeK_KOQeQ7YJ!JNM.W>US?$0$G%H<19l!55GJ!ki@kJ@i9sH^S(&bN&T7^Imca'Cu:sXuWJs]PHM2JDNF:Dr5Ra023u*be$p"/EN]_WPH/^Z;k;h2('-3GAT^]V7\pG%FScF<]F9s-W_5EE%-Ci*;?;'p2B5rB7(8/\l6aTa[W0kr6QWI4?_R4iqH+?B[HD*HQ4hW5<']<JNHUU#Er-!?CkB<8:+@CTmXr8)%YuHh^gi)&<$IT'(5eLl!4@%a\JK5m%g1b/sHLTch6J=k?.3VF&#0=D'9`sN`PFM[FXuWJs]XuJu-aik?BhU!<o.JF]H.O0HJ@o[G%/jS8N@9arDRM6-sGKm)kk$8Wr!V<Hcq?2,ri(h)#CGI5EhDJpaTQa+R"OOdC<!2cq$&&A*f;>(CPa44K"i7i5jZC8j4.U(nhOUA[%JDQj#g_qm8:6>r=mnWcrTm%k?%EuF_X9-VXe!UF(h'juXkhTB4/;<2MK)kN2P\gElmUW0qH$>,s!-rdG-NJF9as)@]G?,>L>rcI@%J\4&J$Ga;9R;"qCST4cshOQD&5i/%5!'oD3NPn^q:4YeEmnULi+l8b/#VfW#VcY+(GNVFTg`H-mU%*BW6Sb.RI>>HsAcB((;%I3G%4mHJ9f(!P\:i>$o*ajM8c[&\p$HP:N_]\O<PdCP`mM,L&oBp]uJU)H3o7M>OK+ipph++g/Ihe>pk=4Om8Is)q5juu-[9&WGdDhq&%K[^"8o?d\-n"(3Jn#sU'*^2Q.aQ6TVH$@Eo"aYCO\%oYg,fIL2]C]<XhHe>S0^l.R5*sE43Mukj]B$F$]t:LQ@,>0u=^^)lg+>#I%0'3k0GF-*KOEV4*s';NfhHdEa@,>2A/KjM"5/(r(Nl5CT?-F`?mk2-s+Re`>jJuaA]Xn<0"F54M[Y/mLT.F>f%.WbKe/I?&`fCZ$%mLg3HjP>fQ?TA:8G<).GH$@6?"aTjHhUhW?TBHoH)WokP`tIOjKlO^\mh4HEGF/(YR!4nG$d?3jOt"Ja%Bp?5mLiA(o$1kYb.P?V%?=;Vq6G$X^D+JcAG8L0RR!4n:$d?4U0IY;[9B-3>h8UrMH?T\i"F@OCa+<)QK?IjoF-@KfHuO7[H$@B8!d_=Q_L^QL+uOr.?2?'J%mlJo*d(?Ho!q`WW]g09sg::&K*Y.oh#P>1bjoW6^g+,GW3n"J\]<7V2o58&K_n><H\NoUEp'T$UY+#gjY%t3@^$A?F0^lSj0$Lr1%]`Rf.lfQ'sle!^1n%*BhaLeUE$hA2q6c6S&g:8p+])E&\]C$X@oWD]e_S"WRc7n^uFtV.RY.Xo/Y&B7dd+fSd&2s:&/qhK/SI>%,%6RK^`lPk@.eYI,f_3C.tJH`Z3Uc-`_0:Hq0Z#bKQFmTp:GC@C.V4@/enMca1NdB;9FC4f2?%3%C?,t4oHIoQ+JDPDr'qfbVdh_6)%`r1U;f/I*oW[_;$-.oi->N#HK<`SDA;t%:2$J;s"BGZg]`_*1RA)l&jlJ9ff$2&0iQN4]<)epui7##ahd(?P+jRPrSi2Qdj]-4V`%:]e<L\ggPF#'1*t]<Pf"njDJ(bq?R)&/eZZ5jno[$I$,O%I75bS5q5c]++TDoPWmC!kfQ,.R<HWP6oaNJZT"Gm\."j\&R>EGdZF,%n+&+np25MeZ9:EoEQ:OH"g>D/</^2[V$adDo'&W\6Onk)7T+ph#"d?ZLAgqAMp)+t`\_7ZIXkK)HT*cdk!i7n70N@&ki/m65Fc?<%THCbTCsW^+'mAdG/hS+86YhAbqVa!C#5uofAV5HLI'Q%&FE-!,+*oI(cjsAd2X#qI$6/WTBnd)nTo0<RDIBTf^!jobH`+7qpPudR%m%#K+fK3^bZ$2YH@dgO%Uu#hF9"i\WOa>&i,P4_E=6Q4+MU4FZ>bQ@D.l-QMEFn!8ibluP9K*p]cK7<QG??@7nkSD2aLbP))tArZ%ToF;PM7XAgYZ<[ASLnssn*j@9iZ46*7_EMI#4V&c<YAVWG.\-oZg1rUh(u%Ch[ArAUdmu6SZQW.n"-<2J`&+CHf>4cfle_3c=V9O%GP74,]^'YP$bWfW?/XO[_YRLlJ:)&h&U7rtQbY\pb]htc<suf*>IF[kfeG,KmQ&o>OPQ&NOW2(tS#gek?!>3ji#T@F^q6t(I/r`!%gCCl#n)Z\293BCJ]Z]2S#N"QgfnjppD("3%HJ+.!d)k2['s8@8GIY(#nue(DaLf=^,4_n()k<XTlUBm*NQ<=4`43W4P(t7OmP)&K%>V6iOFuea^j7gA#i8"TD"(!7h7,ja?22QPM=,;(ooh)l<`fYL9_lgd:;'H)1jG!rQ_g^9pGG%tqiggOd'(7Mq2rkuQ%uGMn^\OIG%-`f\rh.:1@n"cG1]X+M9jIHa],4?Xg5eN:L$LuEp#3)2,;36!mN]iJJ&hZH+fe<d)%X8/u41Ut+n!mrshF[<lGt/r(a?(!)+Ra-m%"F152!ofcAPn<C2bXmY8Ou#+\?g*O25^njO^k)D-rfRBZ"XjK9nV[AO%chQt-P#3ar`8#aTd>g'q*eZm#P+LdBRQ(;\bma>'Zl<p%5^otD&Diu@D["u\kAT6g;h0'\9E>ChT,DEmPmpVZAfIP%.qF8HOW'=UNPda+$f1L.+@R7*:.S7]//tB5\^c[;PY7ijPbR5>2bMKi%]h@gI((9a%_$)DR0L[?*$d^sGi<m7Kc6F=O0/h=$.,RD%6LUL5\EgbW.D!aj:bS.CcoY%^9"cb#,Z*sPL'!$,eBJG!O^qq*GL&#!%V:X4d^3AfNEs#AubUo*TC]qIkmr""WEXVWE8-=Tn=/NN^HWR$@_S,O\Y2Hp)VHnLR4g(-S*k?uPpWUCbpT8YlAe"QR,JHFWo,t3s%]4Y;RH6M/dc7Y4ISqFQ=]7bS+bgu*nThG`K$fLHg\c)'Qi!8rCfV!1l:C)IYHG\nne@T5N\ck7%+l!E&iu@@@Z%:S[T%G0%5u5R+%$[T[(-IfY;_l+SHD2c*9<9'DRp?pQmBV6`C@c6)`!7&C:4U#;oJY!EX#5?CF\T7-KB,J.&L[[%.G94hjHZq^i"+,5s-3ec_=r>mR%&*1mH4.K^:hAmfTi8/;R%D[/m/2+MWLGX+_GDD,0^ipj@'mt3b^U/t`_*tZ7-ZUlINBNEIA7JDsg!62YXiTTr!IQ7oinW0"JE8]_%6tX_cK22WN[]q3C(u2_4lN$\);n$f9.YK7TGLa5-ls5ms%JEO*"4Xq4&IRgZ`_q>5kFl+bGL)u;pN-N2Y)8\OHhZ%'oi5ZAQ?3-$%mQ#I&^'j>F6C6WeH0eT"h/hq+I2Da6SPS2#4nWfC(]&i.<rh,@#B/4<\^^KdI-8=Ma`l(Ig\"k9%;t;tDfG;WTf6)#"nZ)C@KCmY%71=a]oAm%;]?3Jd7,QfjDj/pTO38j*_5F9/4kP$+m(4b.-g\IC5Q7c"pg*Q\%>!D"Vf!</m"JImPgJk]EsqrL3hq@W=2jHXIWtO]%YCo6WX$.XLoXjCp&44.4:*u[lH.j&3h:!ddZmo7i4M]i;B5NtPU^<Y`!<94uliHm*e[Ye_Sqh.di&rB6l-UX?A-)b7q-X2!G>DX3%hiH01.(GoLEd]Y2RKOHEGd^Po^hXmKNo"1u/hleK#+8+]C%>DWi7[HJ"KtDN^UD^%Eo'uT2n0m1_ZAG-Xi%&T71T%J<0#22hI/%1%X`o$MkL&W(;Jp7k(6"#R1@&050_@2JLNQRhi&)l".!SHZV/O&bQg^d*2paI/LNQRHi3ePJ7dmRA$5C/8*!6AJM+!&Lf<eMmi&0G%%;"0p6$5C/81]ms.PIP)kRM-,I]I#]\$srO./n"/e=>)(I9ihK*??<E'K'/P+0mF.;"U\QL=:PN'3HBK/FYg5EV:&?gZ*%=Y*&)UY%\J9bKI'<no]I(r3$sqCl!JB!oE5:D&0<^YjPZ*Vh(d*l7_SLRogb-!7;be^*E:BG$\*rbt&DhKbpAN!]n4m-?!TBU'.fnUSg(k7V%F4bYMXdX8kSHOW?/?[Qj=>f3i=pYN(3GQ1?`.8[1*GFR*#R^#\B=klGTG+4Z#q3H!!Of^3MTVp#!XnI=.Y3:tC9,.eo;&K>]]Z*X%qCX3HVmZp`]P!qH^<<JsWMOd.c6^9qc4+ubg2Ul.5f5[/R$BM@;d0DDhKaF,KKJ-q>B+ncP6j4]F$gG7Gb!J;i:'J`+9`8De5cU*%G<2.B_t1+74M4Ts"WlO"8IH'te5cU+GP]Z5J9[t]/O6ttkl`3%Vema>S_>Q4mlYIa/J7GV5421a4$P]O4g,6p/;<3@+F/`_hZ<70%LFWu*P'!&%E]MGG`4IpZ?0]RdQO=And`VfMGAS&*e.p<g$H0QpbGD:F:,_V2Xpl<d\C%]-i_ii1c!5dDf>`84?1B&?7(`m9/O6tl%.0h!P-!qE3hPJ*k&b"/kKnsqeZ9ZA",d'PJ$hu5;]M"^t+PnEp'd0*GE@'UMc8cI+0!3n?nN;j?'(:F^)C"$laT<(C!i?;;ch"Xh%nLc.-OEfB3)-^\6\oPuH`4LU_Knss3Y!Bq;Qt@K#H0,kfh?E-o7(`oj(*_UhE=3EJ$=-UThUP=J2<A:r&W,[j>EO.HCb:Hf(Tsl.%]PEm5;_A'Z<0U&@'gTE)_A,<u:YSL[].e(Jia#5%'(N,=AuR1!doI`#IsH14U3%PW+RqR3.h]$qg5<i7`@E2KV&(eI<0T!>$79(4%?6qtPn!J>@\.snq*4T;3,o*6ur_6<gT&okH]<D\#EE8mpFc9M'G[7B`]C6lPQ&>;U\UArDW-B=q74R0#c<oHTFi-#E@duK8M-.DC%c%oYMceQ[^Hd:ELmrG?sDH4AT05SOQkZ0BDG;`kK^5G*aa1\,-f$qn9_NoP`bUp5t4/Dqso@0mQ]^Dl<Q@%L[K;fmi1:PbnkLAnq%/h%jTRp1b?GA^j8h.*p4qr%@$g%fkUZsrQMI<Zp3WcT;H+<I_EoLi3K_jlL&j?/[e3_EE:EH@i6oo6#]C.eM6k[!LS!qXEXdC451%JbK3dDf"4@<E"X6]2_bK7^O[:_65@[_;8BRA`2N6`uB7Rd.,,1Rp.a]8<u?!qNd.#2IKeZGiLKM<0`#].irVFe@/Bl:Z@8P)q*M>%<CSjF<0a^sg/:p5M(9Wc35r*@5@gn$)t-@'q03!r)S>O7R9?Q4^q5kmkBU;-Gf(C'52J945Z1V%adin`Dk(&V.4X@7Z_:VN(j=q&%D^uoJ35Mg<5;'.''U<[+>)LJ4\5K2EA2]^rr5*'YkA:C`ND<be1Oe9@$HO1].K]/F0!9`;JW20&DrBX_aRd3LKY2l".j8gjO0BKd%L:O.X%'3\GGloSk60/!Bj%K=d+d]n<IjQ6*ph/UVI[+U@CL="<3ml6V.FHFN"[?l]]A>nFQY'm"L,?NfR;-_bSJ..FlonqC8]!hI%Lb<XiSKlkJloNt'ip?"AO_<9ePZsY`a2J^)f-QDr?J`[7H$3DN"7r'>SFZ#mRV([7oaP1";@]^/;%A=a;%CBE;(jo<U)ZG(6b+e'%*4.`[YVof+D-.c_(MJ"sL>N!uqM&"Nb!D/jb/$BEb'aN%lQY#NEe[DC8_6poW^[fUFNE[_g'DV=@82J-Y_YI`Z:d34N$bXjOO8_=%*AY41[MW:PP@<h#0k=QML9)oGO:C:gZCtTZCaccTn;q/$VK,lL\aOK\FtecZlgu*GZg2dCF'sI_FQ1+6ZeelmYT0#P+s8j!5:#CQ%_#2b0`I[j2(imF9%cu-2_h%Wg&blk/!g,R/K7d3iq[R95X9dEJ<9<&7<V8\6CW[MurCIt%O(Kp^0YlAtYp;dteqODleIuqX*(+m!%[k[,\mUF9$`qkM=/&j9kN^YT,34iUc4?0sT*=\OpZRQ0!LE&Z>eB<s$NFaIV34iV2#roO[(>dCd%c^N,_qq)R0q6=&Qoa<DWP+P>%R";R_[^gpp)ZTl2fmSNMS&[HE48\PsgdlUFmNfDQ.h*c9+_:Y:h6VfUY0cH-ZJu.Nh%4N,aDTWr%*<DQ"GC=[)+-'A[Ak37\Y^?K%[&2U_[mLWl>>n<9*HDSLW>l"c.L4br<:2i2h67J0P+DQ1OR.]](J&^:*!7IunU[WCEY>67faY.pOR._(er]5^A&rN*46.7!TcR]%%e]X=SjVY<<Q6Ce`PhiR_)jK10W<p^b5cTBGpCS=V.^67Rg.&23%IRCs%ObLX0*o'T3?VphEZj,8.l)/gfaW;V+k_:`C0h])>#fHm%gE?fnXXOK;NQNFG%$KEHeH<m1fEi)0cAkpkG+UMM15>q:)ko@nfaU".!SM=,Y^l(pKHNO'6d,cX]<,?SOPPFi#01V;"+aska+eVn%,F(^S)'HO7QjAf0J1guFDJRZ(A2coQ!O<Yr80HRpR/rE95%EeJX[<Thg.OFS@7<1!E()dCAOX;jk_aBleIL[@Ro)O2\/Rlt,M)HI%k[YA>a9SC)[Ph\nG!gip.(^Yl(6mY+c4%m6aHWHS87qs72hW]3ZJ/leEq'$&obb#6]o:XD>[&KpPhl*LPhl<04dkE`acP`eb&2aW%KOdSd#MH4Km@@`G2Hh/E7IU^.]-0'6OPSLK%ENEl6-7!K)q$%jfPS=[E9p&,%L$B%AD7*iqi&e4/lX[mMQPuZm"X"A3-IYg%NN*_%"W`]\A!?R#6>g;a+U<7o-jLOT:i;2b#8cf):Bhk\)k[[$-u2gC&85'(J8\H$_!U&ML_Bl$pDH&<?*^<4M"Q:/[l*,3Z5_`D+P@3l%6BLQB?@>@f6Sou8]-2M,Phgj0!m,<fFk%>KXr>41<SQ_\a>%4>mi@$(96]idVZt4[a=@:%\%r4jfmUle@i2+i)9/Wqm'N+"!5P6q%C`#)Z&RnW\fuZ&NA2cnI!jWaa!KOb^&aR(^Hnm)^1(jT?%I%l^'p2:Blo((0+M5Z->TZh.K035c$U(UA[k[B6,M&+6TQS=A?>JhW%RG/hr@DH`A#f^\56ni5P.oW>LP24W%JRnKmCO'4*0m.'mZp:qO?kSRfVG7LE];a6\b"h.',eL&)!m,=tLq]Q&@lBS+@d#P,;n\.M%</r]&at[L,3QQ4KAN+a8_QoXJ/OA',N/XFrVD_(DG+YJ;PU9%"G#OGJ-p)Df6.t(Vh@kb\<3ub,%<r\g)O0&FX8ut#J(\gb1QSGr%B(lnKng`:-<AhR*0I*A;6F30X0$rr+7*)o*,;4\KFt*__mSp=s]gM3LRb]$seB>(&at^&cEZ5:&a_A![Z^Y,Ld-N*p,[bd7e-)/p%e7&GjpDI1c#Ak8bG#O;&R%9<Q@!5J,"dn,q@KC)M_,Ps<9e@,oG#L<S90!hs0BKVZEWFsREo5:2k/Ni?l@kO)PhVjTml>Q+Ys>Xb%+.0Y6,V/m`SDD+mJS)BFWbNL2%Q,)?<AfSS<B6^e9te@4RW9@W%QW0W9fYacVfGuM4biK+:CuBO'=Cqmg!,Mu7mYO3!G49u=J4>A%//DW:F2RfrjVY;+g_O+7Jjk7DbmahI7DWF6Ag_alR,-8$!G48:IfZkhcQgYO@^3_SRp%AIlonp@I3?c8*n"KuAiI,"JD!XJ(0Ga$%,E8P$kcf_O2`4\=Z^Vno/9U&!'Wlo>%]!L2<MTW7/XY?'+o46ZXO(/Y/s/!&H%l>Ec#3)+>\SB-/n$C`G33pS0=A?"kRfo,q`91S%`R%ft*I2i!OQ>(X4-AiM0D3VdG,][4[nFCb\R"K+afVVqP?V+,MkSad>C^ng0j!5()kc$*>QJO4`\i_j47fcR:@6(2AiEdicjmCO%*4Q_q2`]80b\j;'8=&(%#W9t80@eY<,$B)Qo.dQ;`(A(VRlT[_b&2Z9l]>=@b!aoW3Y,cS9cY$PG'f1:P%-MHm&'1X>OrNRN$u<[%nN]rpF$o.kou>.U.L2ZL.Q<Po;f7LF3?#(hfhM;j7+og)G8=aK2fRZR*+O.Aa-[$A2`]6pZ0XM]#0K\b7?lUu$ou>4/&sVmp!.+!%e]X>&jVY=t*+LmkA'B[J,FK#611jHF6`;_u;`0;gRUX=N/3E`@L"Xl/-Hf0RLFbNIGA\rnS)AtQIDjK*@tHBr)Z=7#frlpLc6aB2%G4J+5fa.rrAk2<\/3E`AAD,';OCbo?pg%@(YUhk_q./0p:(h+cRR!+./UsM]KIhtcPE7!2c<b$YG.%d9ZMTHOQPLrGFtsXtg"G+2%b0K]J;0J+*7+p5q/]u?s78\5O'T'-mLnU/YWuYcl:i7[CL2BH6-+=n+(Xgo.]sLY%Q[/YT?Ku+WG*F$6ZjgTU`B`+m"9W3_M+3`#%!!uMGp48.-Z\;#9SJ3#?G4^]2-p)c:7G3+-d*#P6Z@bETZ0Z9_(L'Cnkiu+Hr0M>PG%,Rsg2W:%"5;F?.aZIq0S+CT1Z[6VT`o\I%lWp+<7N@(oB7$%/4"20?m-'fQB4i$L3'3]i^>\GFXI!R4CTKY1Nu32:ndX[tbb6#,^o?+D\3l:m%*pQ(cGeJiO:0?O,G53QpCW;4%G;q\+!9!2hV\Q"X`"f*+S-<P<#;A-LNOTaq*W7nem%b-,ZeIe]/SJ`2/`:IGmA-IqLAn/elSEU:rj>&KEes]`O,l]@Q`L9!dD'L#%jq.K,"2pbqD)(Z"]MlM'?\]\4FfEDh?0VHC]@:?'\p=ce:_>@;00nng@r%Nuft]?=Qeg75UOR]Bm`rJ*@2nJdDGr^<D5pY@h4_m!%:%\Lj^!teGkQ)EFWOK_4ci\5feD"ARkQ+m<l3/Z]3Vj3^aZ93a&3nIfJ&]9`!iA'/"0=spiI$P[]9f(a5j_n+G(A;[EMIZqci]Zd%e-g%0W81+&##MqX(j[.:%_]&U=]Z"p`[t$!QXFBtG-;?Y(oZ8k3GsE%]cOARXr)JDgSGtOf%&MakV8B/4iXV)2j;umO)YQWmWCR.%J_FsW<hOW>%C?tNh<T1<VKuJ54hmTgAn0`3k>r_Zp#ENt&#e<""0JE&Us0+Bh1g^peF#c#0MoC5`b-em5o;+c"Vb%"9&r5Dp=Y#F%#-a!u&@MZi!,31Md,6BO)u+;FMIKXPg:a:[_R+Z,+?>>%8*nIc$910/^tbL'_4WlTK=H+T\)Hi'b:m5ED>60QEk?n0qhu]=k]QP8%^96>c%FXYjA-Sjc93)0d]@TNsUS8$h!GV:k.07lb-,(%gh.I/0gjq0H?G^Peg2.C0R!(,D5D@h)jD=q*Hc`PnCA/>[$J"PjQj]qM%MbYq)G+Z#s_oft!C\JH/$J+VkkmOTK`]8chpQDQXfBsqo&?ah^EXuEe%?_.OmPBS=>dgLN*4i!g+LS*'`l))-)D,pq?5bD7m9Xft%i7bkd>2\,J,alKVqi%58.L=XD"$XW1H\lQmC\Q7lJSY#.C4U0piZO.a]9cP+>e?>-27Rh%1%Z=+U#*en6SB0->e?>'9=T-uaX?'$%]a!RN>eASlF%boY'FS0XQSqLHG'bXV@tVQ3Zr6,)[<lVmKPU=VI0d"3CP0Y6frh(;U6W..-"It3gd]sl6;k8$&<q$.E7>E3'tAFj%a^PFVh+$ddC\OPt8?UcAD[!<"l[s>8*[>g-[phRN(EFSo]@Whk!jsNt4V.J!NXJZF\`,mAMM;L8]Adl?JD+l<EM.JD_ZcuEJbBE!%mNZi7<<*A]C7t3RC2iU<EX_&/D\YEsG"#=5Ug;AI!GPUl<FFNt`,qAiT/#tKcliW_XXFG7/2^u@Y_0;5\gfE$$Ea_,]8b8Ld]Q,B%#&3fL6Oq%;<GuBtTbi_o<=T^H<UMrEh8Y3TBifCV5hZreX<?nf`X58Kce*T!h0ANFm>Ba-9Y7%0!n4<.:'564oN-Rs'b(qOG"%/i%WndleLMHQ$]CNPWTMY$5/dkXjU<NbiDM.";[4D));!j-($WO_IVB;gDd:N^8Y3<0EC:Am`[4<1GmY)EAYSUKIh-OcG-7`aq%4c)m%8LnIkTY"lgCHKmpUirE=L#-"'BRso"1fcrN/&+EYgE%I;eZS,:5d`++$ONihp7MGbG"#aAWnh:r^!o<GG%IH5Sa*'46+&6>.T#Mi%^'[iOpB(ojMP8(0?0\9I6+&3^Z*14;`H^#:UIb'VPX26k7:-4u?-u`)C01%-T\:-/'rZ:E?NmIcp/$LK4hQ>cgE59[%)%X$LL.u;%D@^[,\BXF"%Gt%MMS9Es]Bs#<Yj2Y1b-t?^d^#DDe?2>8"`!cLRs?$I[mR^pW-1VI"fbjZ^'`D.HT21.]-9ukWa1_i%G%]G[t(k:%o$Ad:HO."gFGCd9[\hbJVHYjOh?m5oK"1s4Y3<"g[4Br]5jaI.$<4X`(jZV[V-\[s?+CDFLKs7?TQWbn"fU8N&.b^_"eu7"?.!?e%C0-'d!k$cmPSN#@5jaFu9;$G3T-[;qT,Rj]Y&#5l(K(7K?:\oi]P%Jl&u])u2AN1HB.-r&k6bCcdgiaXRN6&BEBDO!YBHQB9s12o%%?7A3OTquEB5I(KUe+S>LjMiZaDk/o]G88+5#t+X?'2,jfrdl_JS\E!@s+fl?sW&71%Z=!90J%!;NCkEl7laI'a[!am7MTHW%-Uh%UT/E+D5bLZ%J@.HHE.ZN[OW;lE2psg:%^CG*dUZ.W%)lp8[^-IK-8n`]G8P3H`X0TdI)7T%CA$N#Mt>K]7RL9g!7Xs8@Em=A=okL%frj888@C$n/!B;B7RsNED)([Ui`5[&$:_=lO5Z4;=7B69gD.pIa`]kN8$ZF:?BK&*,V26iqi%X+FZPg&&4r&O^)-$-m(O90(<L_`%-:iSk_.NN5]BK0cg6Lo9G!Dfi]&Q/np3#JQ%HX8.%HYA4%eVaX*I?<beuiu#"fu"gM2Yj0I+Am7]CJ,:meNbr73Z:g8oVgW.)Ctf%j+'$S?60?)]`QdQLq<`=mas4>#>u]'%\u#V?)4o*Zo21FHDHNo^=8ALB18iV_*Jj9G/jgUCWZZnC[))!es+p>Gf[^C4-eQ0aF-Rd%4'iEQWEsI.2WTpY,^?;TgPlYfT0=RPmb!VR_:fq!fYuPb`=_-e5Td8&f7C[Ul7ls>4[s:eQ`6/Xq.#$t:A)?]g)\.@S*D_E;n^-%%O?YF("PXra.t[-ubS@s;LR^fKFpI/e@(QM^7Bi?/jUuBR@'0dD4"s_=gO7'[Y=ia^.>JI;2WPCmPm;,L+2drDig9\Ui,d9'+Q33<%,K.:ocF+,[>&9tsIBWD2Ys89Xs8;AUs86g8qNntpbocrD07Wcm:VZegIsq-:?UO4.IJL@%s3pH9qj5(olbAutrq;EQq"$.gq=<:4%s2Uc2bFcQIr?$Lghu<2M^AK)IlgBtes7@iAj3Rc#IU0LEJ,3/ppX=UtEe!cTqKW#:=#[;NQTtE4pL!pb\%hn-J,"g!n]/EEq(KLp%^Z#'DpZ^c=T?mK'c[Yc6c[U>Wo\Y/ss+e.hIXh+H++Eh5Is_1Xs6urdnoqkG?U+M[YQ+8+^\Q.SrO^teoH/SYh&lXn:VZhsq`k,K%s8D3*n,DsWqr</%a05O6jnHOfo]O!er6%lCrqtZ&rh"DqlW`rNhu)V$r*TKe&-!^s6ndB~>%AI9_PrivateDataEnd