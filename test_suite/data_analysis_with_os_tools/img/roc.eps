%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: roc.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 271 196
%%HiResBoundingBox: 0 0 270.7559 195.7368
%%CropBox: 0 0 270.7559 195.7368
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 6362 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0CFFA8FD7FFF27FFFF7D7D847D7D7D847D7D7D847D7D7DA87D7D%7DA8FD057D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA8FD3F7D7EFD05%7DFD0DFF7DA8FF52FFA8FFA8FFA8FFA8FFA8FFA8A8A8A9A8A8A8A9A8FF7D%A8A8A87DA8A8A87EA8A8A87EA8A8A87EA8A8A87EA87DA884A8A8A87DA8A8%A87EA8A8A87EA8A8A87EA8A8A87D7DA8A87EA8A8A87EA8A8A87DA8A8A9A8%FFA8A8A8FFA87DA8FFA8A8A8FFA8A9A8FFA8A8A8FFFD04A87EA8A87DA8FD%0CFFA8FFA87DFD06FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FFFFFFA8%FFFFFFA8FFFFFFA8FFA8FFA8FD1BFFA8FD15FFA8FD09FFA8FFA8A8A8FFA8%FFFFFFA8FF7DA8FD0FFF7DFFFFFFA8FFA8FD59FFA8FFA8FD0CFFA8A8FD0E%FFA87EFFA8A8FD56FFA8A8FFA8FD0BFFA8FFA8FFFFFF7DFD10FF7DFFA8FF%A8FD53FFA8FFA8FD0DFFA8FD06FF84A8FD0EFFA87DFFFFFF5952FD4BFFA8%AFA8A8A8FFA8FD0FFFA8FD07FF7DA8FD0FFF7DFFA8FFA852A9FD47FFA8FF%A8FFA8FD13FFA8FD08FFA8A8FD0EFFA87DA8FFFFFFA8A8FD44FFA8A8A8AF%A8FD15FFA8FD09FF7DA8FD0FFF7DFD05FF7DFD42FFA8A8FFA8FD22FFA8A8%FD0EFFA884A8FD05FF7DFD3DFFA8A8A8FFA8FD17FFA8A8A8FD0BFF7DA9FD%0FFF7DFD07FF7DFD39FFA8FD2CFFA8A8FD0EFFA8A8A8FD08FF7D52A8A87D%7DA87DA8A8A87DA8FD28FFA8FFA8A8A8FD1BFFA8FD0FFF7DFD10FF7DFD08%FFA853A827592752525227A8275227A8FD28FFA8FD1DFFA8FD10FF84A8FD%0EFFA87DA8FD07FFA87D5252527D527D7D5252527D7DA8FD23FFA8FFA8FD%1FFFA8FD11FF7DA8FD09FFA8FD05FF7DFD0BFF7DFD2DFFA8FD34FFA8A8FD%08FFA8527DA827FFA87DA8FD35FFA8FFA8FD1FFFA8FD15FF7DA8FD08FFA8%527D7D277DFF7DA8FD34FFA8FD37FFA87DA8FD09FF7D7DA87DA8A87DFD32%FFA8A8A8FD21FFA8FD17FF7DA8FD0FFF7DFD31FFA8FD23FFA8FD18FFA8A8%FD0EFFA87DA8FD2FFFA8FD23FFA8FD19FF7DFD10FF7DFD2EFFA8A8FD3EFF%84A8FD0EFFA87DA8FD2BFFA8A9A8FD21FFA8FD1DFF7DA8FD0FFF7DFD2BFF%A8FD23FFA8FD1EFFA8A8FD0EFFA87DA8FD29FFA8FD23FFA8FD1FFF7DA8FD%0FFF7DFD29FFA8FD23FFA8FD20FFA8A8FD0EFFA87DA8FD25FFA8A8A8FD21%FFA8A9A8FD21FF7DA9FD0FFF7DFD6EFFA8A8A87DA8FD0BFFA87DFD24FFA8%A8FD22FFA8FD25FF7DFFA8277DFD0CFF7DFD23FFA8FD23FFA8FD26FF84A8%52527DFD0BFFA87DFD22FFA8A8FD22FFA8FD27FF7DA852F87DFD0CFF7DFD%45FFA9FD28FFA8A87D527DFD05FFA8537DA852AFA87DFD20FF7EFD23FFA8%FD29FF7DA87D52A8FD05FFA852847D277DFF52A8FD1EFFA8FD21FFA9FD2B%FFA87DA82752A8FD05FFA8597D7D52A8A87DA8FD1DFF7DFD21FFA8FD2DFF%7DFFA884FD0DFF7DFD1DFFA8FD21FFA9FD2EFFA8A8FFA8A8FD0BFFA87DFD%1CFFA8FD21FFA8FD2FFF7DFF7D277DFD0CFF7DFD1BFFA8FD52FF84A87D52%7DFD0BFFA87DFD1AFFA8AFFD1FFFA9A8FD31FF7DA87D277DFD0CFF7DFD6E%FFA8A827527DFD0BFFA87DFD18FFA8FD1FFFA8FD35FF7DA85352A8FD0CFF%7DFD18FFA8FD1EFFAFFD36FFA8A8522752FD0BFFA87DFD16FFA8A8FD1EFF%A8FD37FF7DA9A852A8FD0CFF7DFD16FFAFA8FD1DFFA8FD38FFA8A8A87D7D%FD0BFFA87DFD16FFA8FD1BFFA8FFA8FFA87D7DA8A8FFA8FF7DA8FFA8A8FF%A87D7DA8A8FFA8FF7D7D52FFA8AFA8FD1BFF7DFF7D277DFD0CFF7DFD31FF%AFFD05FF27FD065227277D52527D7D847D27FD065227525252FD1CFF84A8%277DFD0CFFA87DFD14FF7EFD1BFFA8FD05FFA87D7D52275252522752527D%527E7D7D525227522752277D5227277DFD1CFF7DA85952A8FD0CFF7DFD13%FFA8FD1BFFA8FD0FFFA8FD05FFA8FD05FFA8FD22FFFD05A8FD0BFFA87DFD%12FFA8A8FD1AFFA8FD3FFF7DA87E277DFD06FF52A8FF52A8FF7DFD2DFFA8%FD40FF7EA87D527DFD05FFA8527D7DF8A8A853A8FD10FFA8A8FD17FFA8FD%42FFA852FFA8527DFD06FF7DFD04A8FF7DFD11FFA8FD5CFFA8A87D527DFD%0BFFA87DFD10FFA8FD17FFA8FD45FF7DFF5352A8FD0CFF7DFD0FFFA8FD17%FFA8FD46FF84A8277D7DFD0BFFA87DFD26FFA8FD47FF7DA8FD0FFF7DFD0E%FFA9FD5FFFA8A8FD0EFFA87DFD0EFFA8FD13FFA8A8FD4AFF7DA8FD0FFF7D%FD0DFFA8FD13FFA8FD4CFFA8A8FD0EFFA87DFD0CFFA8FD13FFA8FD4DFF7D%A9FD0FFF7DFD1FFFA8FD4EFFA8A8FD0EFFA87DFD1EFFA8FD4FFF7DFD10FF%7DFD0BFFA8FD62FF84A8FD0EFFA87DFD0AFFA8FD0FFFA8A8FD52FF7DA8FD%0FFF7DFD6EFFA8A8FD0EFFA87DFD08FFA8A8FD0EFFA8FD55FF7DA8FD09FF%53A8A87DA8FF7DFD09FFA8FD0DFFA8FD56FFA8A8FD08FFA8527DFF52A8A8%7DA8FD07FFA8FD0CFFA8A8FD56FFA852FD0AFF52A85252A8FF7DFD07FFA8%FD66FFA8A8FD0AFFA8FFA8FFA87DFD12FFA8FD5BFF7DFD10FF7DFD06FFA8%A8FD09FFA8FD5CFF84A8FD0EFFA87DFD06FFA8FD09FFA8FD5DFF7DA8FD0F%FF7DFD05FFA8FD09FFA8FD5EFFA8A8FD0EFFA87DFD04FFA8A8FD08FFAFFD%5FFF7DA8FD0FFF7DFD6EFFA8A8FD0EFFA87DFD04FFA8FD05FFA8FD63FF7D%A9FD0FFF7DFFFFFFA8FD05FFA8FD64FFA8A8FD0EFFA87DFFFFA8FD05FFA8%FD65FF7DFD10FF7DFFFFA8FD04FFA8FD66FF84A8FD0EFFA87DFFFFA8FFA8%FFA8FD67FF7DA8FD0FFF7DFFA8FD6CFFA8A8FD0EFFA87DFFFFA8FD6BFF7D%A8FD0CFFA8FFFF7DFD15FFA9FD58FFA8A8FD0BFF7D527DA8527DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87E7D7DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87D7D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%7D52A87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7E52A87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA852A9FD0BFF7D527DFFFD6EA87DA8FD%0DFF7DFD82FF52A8FD13FF7DA8FF52A8FD11FF7D7DFF7DFD12FFA852FF7D%7DFD11FFA852FF7D7DFD13FFA87DFD0EFFA85252FD12FFA8277DA8527DFD%10FFA8527D7D277DFD11FF52527D5252FD11FF59527D7D27FD13FF7D52FD%0FFF52A8FD13FF7D7D7D28FD12FF7D52A852A8FD11FFA852A8527DFD11FF%A852A87D52A8FD13FF7DFD28FFA8FDFCFFFD13FFA87D7DFF7DA8A8FFFFA8%52A8A8FFA87E7DA8FFA9A8FF527DA8A87DFFA8FD63FFA8277D5252277D52%A87D52527D2752525227532753A852527DF8525252FD63FFA87D7D525252%27277D7D7DA852522759FD045227A87D7E5227525227FD66FFA8FDC3FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:55:05+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T14:27:14+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T14:27:14+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>188</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWnUsjKGKEggOtK&#xA;ivcVBH3jFWEWL+b/AC/5Djju7g3OvHVTax3mo0uiYL7WTDDLIsDwBuNrOrBFZQNlotKYqnS2fnug&#xA;5axpZPcjTLgD/uoHFVG4bzZbMq3Gv6PCzfZEmnzKT8q6gMVUvrvmOnw+Y9Fc0qFSwmdj4UVdQJJP&#xA;YDFXG584b/7lLPbf/jh6h/2WYq2bjzgP+lpZ/wDcEv8A/ssxVQS7/MB76WCK4tJIEijdZ/0TcRAu&#xA;zOHT99fxfZCqdieuKq/L8w6/39n8/wBHf97TFXFvzD/3/Zn/ALd3/e0xV1fzC/3/AGf/AHDj/wB5&#xA;TFXBvzDp/f2Y9v0d/wB7TFVC9f8AM6O0nmtZdNklijd1hmsZUMjKtVRPTv5t2O29MVV/Q/M//lu0&#xA;T/pDu/8AspxVwg/NDvfaJ/0iXf8A2U4q70PzP/5btE/6Q7v/ALKcVd6H5of8t2ie/wDol3/2U4q7&#xA;0PzP/wCW7RP+kO7/AOynFVFx+aou44VudFaJ45Hab6pd8VZGQKh/0n9oOT9GKq3ofmf/AMt2if8A&#xA;SHd/9lOKu9D8z/8Alu0T/pDu/wDspxVfFbfmUz0l1HRo07stjdOf+BN4n68VVvqXn3/q86V/3C7j&#xA;/vIYq76l59/6vOlf9wu4/wC8hiqhYw/mJPY288+p6XbzyxI8tudMuCY3ZQWQn9ICvE7Yqr/UvPv/&#xA;AFedK/7hdx/3kMVU5YvO0TIsuu6RG0rcYw2mzqWbwWuo7nFVESedWEnpavp0pj/k0e7IY140Vzfh&#xA;G399u+2KtOv5k/VjMt/pMJUnmt1YTRgKBXlyi1CcUxVSj1HzvZ61o0WoXOn3Om6ncvaSrDYz2syl&#xA;bO4uQ6tJdzinK3C/FGDvirL8VdirsVSLzn/xx7f/ALaek/8AdTtsVdrt7ZW1vqOp6mJJNK0mLncW&#xA;yKXBCoJZZXjH94EjYELv0NATTFUfosuiXOnxX2jeg9jdKJIprYKEdex+EDFUdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVUJL+0RpE9QPLCAZYY6ySqDShMacn7+GKrDdzSLE1tbu4krV&#xA;pf3IUA0PJWHqVPb4PuxVcY795JOUyRQsCIxGlZVPZubEp9HDFVo09WhaOeea45kFmZ+BoP2f3IjF&#xA;PHbfviqrFaWsLBooY42C8AUUKQtS3HYdKmtMVdPcJEKULysCY4VpzalK0BIHcbk0xVakErkPcuGI&#xA;PJYl2RSNx7sR4n5gDFUp8xf8djyv/wBtOT/umXuKp7irsVdiqRec/wDjj2//AG09J/7qdtiqPsYo&#xA;57S5WdBIs81wkysKh1EjRAEb7emoXFUp0WztvLV8mhwx+npN6Wk0ttyI5QvKW2ZjUmqqZIyTWnJe&#xA;irVVkmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoSLVLKcuto/wBaZFLfufjQkfs+p/dhj4Fh&#xA;irj+k5olZDHZsWPJXX1m4dvssiq3j9ofPFV5sYnlkklZ5RIChidiYghFCvpiiH5sCffFVWC3gt4x&#xA;FBGkMQrRI1CqK7nYbYqvxV2KuxVDm5eRmjt15FdjMw/dgg0I6gsR4D5EjFV8FtHDyZatI/8AeSMa&#xA;s1K9T4bmgGw7Yqq4qkXmL/jseV/+2nJ/3TL3FU9xV2KuxVIvOf8Axx7f/tp6T/3U7bFUy0rexjk7&#xA;Tl51HgszmRQfcB98VVL2xtb2D0LpPUi5pIBUqQ8Th0ZWUggqyggjFXln5g+cfPnl+58wajYm6J0s&#xA;iXTdOex9TSZrBLNJJ7i4vViDrKk3qgRi4Unio4/FyxVAWvnL87J/NYjFiV0q4tYktpZNJuY7VZH1&#xA;lbL6zJE8i3KsbKtyYWnXgv2htyKqFb81/wA67bRtTa68pNNrCw6fJo0dtpWpNDI9xGst4k1JJOJt&#xA;1k4butWB9wFWf+RNd8+32r6vY+aLKGK3tCf0fe29pcWiShLy6tjUTy3AbnHbxzLxbZZB12OKs0xV&#xA;2KuxV2KuxV2KuxV2KqctxBEypI4V3DGOOvxtxFW4qN2oPDFUP69/cwhraL6qS327peVUpXkI0cNv&#xA;0oxUjw7Yqv8A0fC0plmZ5nK8Cru3p0K8T+6r6e+/au+KokAAUGwHQYq7FXYq7FXYqtkkSNC7mij6&#xA;euwAA6k9hiqionuKsxMUB2WMVWQ/5TNWq17Ab+J7BVXVVRQqgKqiiqNgAOwxVvFXYqkXmL/jseV/&#xA;+2nJ/wB0y9xVPcVdirzfVdN/MZPNPmO6slu5bG6s7iDSjHdRLCJJoLGK1aOGWakT20yXcssnp1Ks&#xA;KeoaKqqlo9n5xtPy1tbPzD6kerxazYiCa8k+syGOTVreSMy8bi5JCF+Cg3DMVUVYE0CrPtBWddEs&#xA;BO6yS+hHyeNSin4RSilnI298VR+KqV3aWt5bS2t3DHcWs6mOeCVQ8bowoyurAhgR1BxVVxV2KuxV&#xA;2KuxV2KuxV2KuxVRury3tYxJO3EMeKKAXZmO/FEUFmNBWgGKqQ/SE0kgPG2tilEYfFOSy/a3+BOJ&#xA;7fFX26YqvtdOs7VmeGOksn95M5LysB0DSOWdgO1TtiqIxV2KuxV2KuxV2KqUtyEkESKZJm34L+yD&#xA;WjOf2Rt9PauKrY7asgnno84+yf2U2pRAemx3PU/KgCqvirsVdirsVY35gS+/xJ5ZdpojZnUZAkIi&#xA;YShv0ZebmX1CpHXbgPnirJMVdirsVSLzn/xx7f8A7aek/wDdTtsVTLSP+OTZf8YIv+IDFUXirsVd&#xA;irsVdirsVdirsVdirTuiIzuwVFBLMTQADckk4qhBdXVxLEbRF+psFka7cgq6HcCJVNTUftNQDqOW&#xA;KqtnZRWqsFZ5JHoZZpGLO58ST0/1Voo7AYqr4q7FXYq7FXYq7FXYqhjLLcMFt24QjdrgAGvgI67H&#xA;3bp2Fd+KqtDCkS8UruasxJLE+JJ3OKr8VdirsVdirsVSLzF/x2PK/wD205P+6Ze4qnuKuxV2KpD5&#xA;1YLo0DMQFGp6SST0A/SdtiqaaSCNKswRQiCIEHrXgMVRWKuxV2KuxV2KuxV2KuxVQvL2C1RTJVpJ&#xA;DxhhQcpJG68VX9Z6Abkgb4qpmzlnkl+usstuzD0rXiCgCNyVmJHJnqK+A22qORVReKuxV2KuxV2K&#xA;uxV2Kqc9xHAgZ6kk8URQWZm60UDr0/jiqkbd7kA3a0j/AOWatV3/AN+fzH2+z89jiqJxV2KuxV2K&#xA;uxV2KuxVIvMX/HY8r/8AbTk/7pl7irz78tvzH1LzD+Zus6U+vLe2EMd48WjtayW1xbGG7WNPUWW0&#xA;tWQrG4QqZpTyqTx+yFXr2KuxVi/5l/8AKIy/8xmnf91CDEKyjFXYq7FXYq7FXYq7FXYqoXN2YpYI&#xA;UieWSZqUUfCqCnN2Y7ACvTqe2KutLV4A5kmeeaQ8pHc/DXwRB8KKPAfSSd8VV8VdirsVdirsVdir&#xA;sVUJLgsTFbUeboWNSidiWI7j+WtT7DcKrordUb1GYySkUMjUrTwAGwHyxVVxV2KuxV2KuxV2KuxV&#xA;2KpF5i/47Hlf/tpyf90y9xV55+UdlcTebb7WL/TW06/mtmZlOl61ZKz3bQ3NzSW/nktV4TsY+KIG&#xA;bjyWiDjir2DFXnOo6f8AmRF5t8w3lgtzLZ3NpPDpJ+sRm2WWaGxjtGW3kmAjNtOl3LM/p1ZGFOZo&#xA;qqpXHYecLH8pZ7fzGJRqg1KyMP1uY3Enpm+tqeo3r3pHx8tvXbb+X7ClXqtr9a9BPrXD6x/uz0q8&#xA;Ovblv0wKq4q7FXYq7FXYq7FUPc3MizRW8MTSSS1LP0SNB1ZmpSv8q9SfYEhVuzs0tYiis0juxeWa&#xA;Q1d3PVmIAHagAAAGwAApiqvirsVdirsVdirsVaZlRSzEKqirMdgAO5xVDq01yOjQQHuarIw+XVAf&#xA;+C+WKq8cccSBI1CIOijYb74quxV2KuxV2KuxV2KuxV2KuxVjXmD6/wD4l8s8/S+pfpGT06cvV5/o&#xA;y86/s064qxDyB5w8z6n+aPmTRtR1aOewsBcfV9MRYpDGBdcYX9W3g4R0hIUxy3LyE/EVXoqr1TFX&#xA;Yqxf8y/+URl/5jNO/wC6hBiFZRirsVdirsVdirsVQ9zdmKWGBI2kmnJpQfCqLTm7HoAKjbqTirdl&#xA;Zpaw+mGaR2JeaZ6c5HbqzUAH0DYDYUAAxVXxV2KuxV2KuxV2KqU11FEeJq8pFUhTd2+jsPc7e+Kr&#xA;I7d3IkuSHkrVY1r6aUNRQH7RH8x+inTFURirsVdirsVdirsVdirsVdirsVdiqReYv+Ox5X/7acn/&#xA;AHTL3FXj35IiytfzH1LShpsVvd2Fvfwy3du2n8eUV5GkkTLa6Xps+3wsDI/GlKKK0VV79irsVYv+&#xA;Zf8AyiMv/MZp3/dQgxCsoxV2KuxV2KuxVQu7yK1VOQZ5JXEcMSULux3oASBsASfAb4q60tmgR+ch&#xA;llkcySSHYVOwCrvxVVAAH31NTiqvirsVdirsVdirsVQ5uJJJDFbr8Kmkk7fYBHUL/M34DxrtiqpB&#xA;AkIbjUs55SOxqWagFT9A7bYqqYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi8xf8djyv/wBtOT/umXuK&#xA;vPvyc8xP5g8xarqVx5jt7ieQSSw6BBfS3hWC69G5jkYSTmJTa+r9XIhtowrVDM53xV69irsVYv8A&#xA;mX/yiMv/ADGad/3UIMQrKMVdirsVdiriwUVYgDxOKoSzRpit7cQ+lcFWSJTXkkTMDxbcgM3FS1Pl&#xA;vSuKovFXYq7FXYq7FVks0cS8nNKmgG5JNK0AG5O3bFVExS3LcpSUt9wsI2Lj+Zz1Hsv3+AVST8wN&#xA;K13UfKU2neXpXtdQlnsljlhkeApAt5Cbg8opbZ+Itw9QkisRsDU4q8yfTP8AnIHR7mS10lrq8suF&#xA;/wAXaaymi9Ui6jtHRtSuLq9VapbS8XmcDk6npQqr9Us/+chX1XTykl89rZX8nqy2kmjxiXTQ0sQd&#xA;0k4B7x4iHVWX0A3ElVYGiqb6XB+fP6VsJ9QuD9VD2Yv7RBp3oFANPW6IIT19/Vvn2frGnHYgMqo6&#xA;1ov5ohr2TSLfUW1j6+8/159URLCa2GqRTW0VvZtLKE4WSmOWqRftAiXlXFUqM/8AzkyLa0HoTmT6&#xA;vLFdN/uF5iQ3EzRzf3gRpRAYVCjinUmp6qoKLy//AM5FxJZat697Lq0KSCbT3v7P6uxnk1FpCV3g&#xA;aRFa09EshRSfs8Voqr0f8sI/zMa3v7nz3I0dwzxJYWAazkRIVhQtI0ltHGWlaQsH/ZqPgULTFWcY&#xA;q7FXYq7FXYq7FUi8xf8AHY8r/wDbTk/7pl7irFvKWtebpPzJ1XTtX1RpdKaO7fTdPksbm2NIblFD&#xA;xSy2NqjrHHKiNxuZuRPIbHZV6Nirz248x+eLLztrafUbu/0iCCT9G2KW/GCSUx2Is/TuhF9qa4mu&#xA;klLyFIlQM3BRyZVL5NQ84Xv5Pi480Wzw+YRqUKTxToluGCa0iw0WIyhU9MKAd6j4qsCGKr062a5a&#xA;BTcxpFOftxxuZEG/Z2WMnb/JGKqmKuxV2KoI+lf3DIQ3oWcqnkD8EkqgniRTcRkqag/aHiuKo3FX&#xA;Yq7FXYq7FVGa4ZWEUSerMRXjXiFWtOTNvQeHc9hscVbjtwsrTO3qSkcQx2CrWvFR29+579BRVVxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjfmB77/EnllGhiFmNRkKTCVjKW/Rl5sYvTCgdd+Z+&#xA;WKsU/KryL5g0fU5Nd1aytba41S3lmvHSS1kufrN3KtzKr8NLs7gKHLfC93IF2WjUDBV6firsVYv+&#xA;Zf8AyiMv/MZp3/dQgxCsoxV2KuxVDXszALbQyCO6uAwianIqFpzelCPhr32qQO+Kq8UYjiSMFmCK&#xA;FBclmIApuxqSfc4quxV2KuxVpmVFLMQqqKsx2AA7nFUOZJLn4YS0UP7U9KMfZAw6Hu1Pl4hVWihj&#xA;iXigpU1J3JJpSpJ3J274qvxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpF5i/47Hlf/ALac&#xA;n/dMvcVT3FXYq7FWL/mX/wAojL/zGad/3UIMQrKMVdirTMqKWYhVUVZjsAB3OKoezjkdmup4ljnk&#xA;qqCg5pED8KswrX+Y+5p2riqJxV2KuxVTmnSJQWqWY0RF3Zj4Af506nbFVIQSzMklzQKtGW2FGUMD&#xA;VWY0+IrSo7A+JAOKonFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkXmL/jseV/+2nJ&#xA;/wB0y9xVPcVdirsVY/55AOiW6kVB1TSAQehB1S2xVkGKuxVB3kZupUtVcCNCsl2nUsm/FKEHZ2Xf&#xA;2FO+KozFXYq7FUPJcs5MdqA8gJVpDvGhHXlQipH8o+mnXFV8NskR5VaSUijSuasf1AD2AAxVVxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvMX/HY8r/8AbTk/7pl7iqe4q7FXnGo+&#xA;ZPOlh5t8wiWK+bRLa0nNgtvp0l4gk9Gx+pyQejEr3EklxNdiSP1aKqAngPiZVD6fqPma+/L1LrVn&#xA;uLi/Ot6Z9Vj1K2ewuBGNStCiXC/VrZa8q1aOIqBsC5UkqvS7ZrloFNzGkU5+3HG5kQb9nZYydv8A&#xA;JGKtzzLDBJMysyxqXKoCzEKK0UDqcVUrGAxRF5ECXNwRLcgMWHqFQpAJ7KFCj2GKojFWndEUu7BU&#xA;XdmJoAPcnFUMpubmpobe3PSu0rjx/wCKwf8Agv8AVOKolEREVEUKigBVAoABsAAMVbxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksb8wPff4k8so0MQsxqMhSYSsZS36MvNjF6YUD&#xA;rvzPyxVkmKuxV2KpB53/AOONbf8AbV0f/uqW2Kp/iqFelxeKiyMFtG5SooIDOy/ApboQA3Ir48T8&#xA;1UViqlLcpG3ABpJaVEaCrUrSprQD6Tiq2O2Jb1bgiSWtVX9hPAKPH/KO/wAhtiqvirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSLzF/x2PK//bTk/wC6Ze4qnuKuxV2KpB53&#xA;/wCONbf9tXR/+6pbYqndxI8cEkkaepIqkpHULyYDZanpU7Yq1awelCAwX1n+KdkFA0hHxNvU4qsM&#xA;0szlLegjFQ9wdxXwQftEdz0HvuAqqQwJCpC1LMeTu27Mx7k/50Gw2xVUxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvMX/HY8r/9tOT/ALpl7iqe4q7FXYqkHnf/AI41&#xA;t/21dH/7qltiqYTy2st2plJ4WjgIKVDTuuwUD4mKIxPSm/iuyquI5Lg8pgUhH2YDSp95KE/Qv3+A&#xA;VRCqFAVQAoFAB0AxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;VIvMX/HY8r/9tOT/ALpl7iqe4q7FUDr0upw6HqM2lRLNqkdtM9hC/wBl7hYyYlPsXoMVYPpcXnfX&#xA;/I1yjO82pwapaXGk3GtQNp0k8FncW1031mGKBGi/eRyxrSLdQp71xVP7H/HkEaGfTdNnuAgRpW1O&#xA;foOtANPUDkd22qfoGKor6555/wCrRpn/AHE7j/sgxV31zzz/ANWjTP8AuJ3H/ZBirvrnnn/q0aZ/&#xA;3E7j/sgxV31zzz/1aNM/7idx/wBkGKqKT/mCL2WVtN0w27xxpHB+krj4XVnLvX6h+2GUf7HFVb65&#xA;55/6tGmf9xO4/wCyDFXfXPPP/Vo0z/uJ3H/ZBirvrnnn/q0aZ/3E7j/sgxV31zzz/wBWjTP+4ncf&#xA;9kGKqN7P+YM1lcRW+m6Zb3EkbpDP+krhuDspCvT6hvxO+Kq31zzz/wBWjTP+4ncf9kGKu+ueef8A&#xA;q0aZ/wBxO4/7IMVd9c88/wDVo0z/ALidx/2QYq76555/6tGmf9xO4/7IMVd9c88/9WjTP+4ncf8A&#xA;ZBiqi8/5gm9ilXTdMFukciSQfpK4+J2ZCj1+ofsBWH+yxVW+ueef+rRpn/cTuP8AsgxV31zzz/1a&#xA;NM/7idx/2QYq76555/6tGmf9xO4/7IMVd9c88/8AVo0z/uJ3H/ZBirvrnnn/AKtGmf8AcTuP+yDF&#xA;VGyn/MGGyt4rjTdMuLiONEmn/SVwvN1UBnp9Q25HfFVb6555/wCrRpn/AHE7j/sgxV31zzz/ANWj&#xA;TP8AuJ3H/ZBirvrnnn/q0aZ/3E7j/sgxV31zzz/1aNM/7idx/wBkGKoWW084ahrWjTX1lp9nY6bd&#xA;SXU0kF7NcSuGs7i2VFje0gX7VwGrz6DFWT4q7FXYqkPnm01i68uSw6SJ3uTcWjTQ2k31a4ktUuon&#xA;uooZvUg9N3t1dVb1F6/aHUKonynb6xbeVtHt9bk9XWIbK3j1KUnkWuFiUSktU8iXrv3xVNcVdirs&#xA;Vc3LieJAamxIqK/LbFXjCaT+a8Hkn9GT2Or3uqXF5C7TQ6pAkkSR2MEdw7zteRTNFLe+tNFDFKnw&#xA;0DNGv7vFXreixXMOj2MN08st1HbxJPJccPWaRUAZpPTZ05k/a4sRXoTiqMxV2KuxVg/5m6X50vv0&#xA;b/htrgen64b6rci19O6b0/qtxcVkh9a3ipJ6kPxcqj4TTFV/lWH8w38761qWvxLb+Xry0tRo9mLk&#xA;SNbNG8vKOSFAU9dlcNK6uy/ZVXcD4VWa4q7FXYq7FXk13pP5rx2fm2K1W8e51GXhpkxuo2RQL28m&#xA;aW3VrqNrdGsGtrdVUo3qivwjlLirPPI1vrlt5T06DXQ41SONluBLIZpPttw5yGScluHGv7199ubf&#xA;aKqe4q7FXYqxX8x7HzBe6JBHoqXUxW5V762sLkWV3Lb+nIOMNwZIAhExjdvjFVUjetMVY5pmm/mg&#xA;3nvy5fX/ANZGk2+mx2mtD14hbPdRJdpPP6KXDV9aT6u8f7lm4ndoirIyr03FXYq7FXYqx7zpp2v3&#xA;ltph0W6ngmttUsJ7uKB44xNaJdRm5SVnHIoIeRKowLdNweJVZDirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVeQ+cPzh8z+V7/wAw3s+mQ3Xl7RrxbCD4RAZJWtIbni139YmcSfvW4r9S4HYeoGNMVS4f&#xA;85JxWs2owahpsDLaNc/VryG4f05Ui1E2kcjxRRXMiQiE+o8o5VKsFTdRiqdah+Z3nee8sbnQdFW5&#xA;0ptE07XtQtWjV7hIrySYzReq11bFWSGA+nwt5Sz7EAEYqkr/APOR9xLqen6Xb6NaifULi0ghu474&#xA;3VvIZ7pYpPR4QxM6LFyDSmgWT4aNTdVQ03/nI7WItLkuNX0COaULDKk1nJMtusYsYbi7Mx9O4dPq&#xA;01zEjhQxHOlPgq6qaa7+cnmeTQNI1vy7p0QtrzStR1a8SeB7gIthNFCG5SXGmMsDeqW9QRu/GjCI&#xA;70VQd/8A85GzWvmvWdKOjwCx0GO8+tTG5lZ5ZILhbePiFg5R0IkeReDn0xzWvGjKvUvJHmiLzV5V&#xA;0/X4oDbR3yMwiJcgcHaOqs6RMyNw5IxRaqQaDFU8xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:83FBE94F51D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:B4E6D8BB55D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -195.737 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 195.737 li
270.756 195.737 li
270.756 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
267.838 174.324 mo
264.688 174.324 li
32.3882 174.324 mo
35.5381 174.324 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B854D00D> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWGN+Helvetica /Helvetica findfont ct_VMDictPut/DVPWGN+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]DVPWGN+Helvetica nfDVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf22.3491 176.662 mo( )sh24.2944 176.662 mo(0)sh267.838 140.173 mo
264.688 140.173 li
32.3882 140.173 mo
35.5381 140.173 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369E6> |-/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGN+Helvetica /Encoding getdup 46 /period putdup 50 /two putpop%ADOEndSubsetFont
/DVPWGN+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two 205{/.notdef}rp]DVPWGN+Helvetica nfDVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf16.5132 142.513 mo( 0.2)[1.9458 3.89209 1.94629 0 ]xsh267.838 106.074 mo
264.688 106.074 li
32.3882 106.074 mo
35.5381 106.074 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGN+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/DVPWGN+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 203{/.notdef}rp]DVPWGN+Helvetica nfDVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf16.5132 108.412 mo( 0.4)[1.9458 3.89209 1.94629 0 ]xsh267.838 71.9238 mo
264.688 71.9238 li
32.3882 71.9238 mo
35.5381 71.9238 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGN+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/DVPWGN+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]DVPWGN+Helvetica nfDVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf16.5132 74.2554 mo( 0.6)[1.9458 3.89209 1.94629 0 ]xsh267.838 37.8237 mo
264.688 37.8237 li
32.3882 37.8237 mo
35.5381 37.8237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGN+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/DVPWGN+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWGN+Helvetica nfDVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf16.5132 40.1616 mo( 0.8)[1.9458 3.89209 1.94629 0 ]xsh267.838 3.67383 mo
264.688 3.67383 li
32.3882 3.67383 mo
35.5381 3.67383 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGN+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/DVPWGN+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWGN+Helvetica nfDVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf22.3491 6.01318 mo( )sh24.2944 6.01318 mo(1)sh32.3882 3.67383 mo
32.3882 6.82373 li
32.3882 174.324 mo
32.3882 171.173 li
@
DVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf29.4663 183.654 mo( )sh31.4116 183.654 mo(0)sh79.4883 3.67383 mo
79.4883 6.82373 li
79.4883 174.324 mo
79.4883 171.173 li
@
DVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf73.646 183.654 mo( 0.2)[1.9458 3.89209 1.94629 0 ]xsh126.588 3.67383 mo
126.588 6.82373 li
126.588 174.324 mo
126.588 171.173 li
@
DVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf120.748 183.654 mo( 0.4)[1.9458 3.89209 1.94629 0 ]xsh173.639 3.67383 mo
173.639 6.82373 li
173.639 174.324 mo
173.639 171.173 li
@
DVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf167.802 183.654 mo( 0.6)[1.94629 3.8916 1.94629 0 ]xsh220.738 3.67383 mo
220.738 6.82373 li
220.738 174.324 mo
220.738 171.173 li
@
DVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf214.896 183.654 mo( 0.8)[1.94629 3.8916 1.94629 0 ]xsh267.838 3.67383 mo
267.838 6.82373 li
267.838 174.324 mo
267.838 171.173 li
@
DVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf264.919 183.654 mo( )sh266.857 183.654 mo(1)sh32.3882 3.67383 mo
32.3882 174.324 li
267.838 174.324 li
267.838 3.67383 li
32.3882 3.67383 li
32.3882 3.67383 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/P <1C60D8A8C9B64EDFA3F30AE4AB14FCCB57D446AF805F45D1BE197D47C6C20943FECBF4EB404456C629F1F5342EEA681381C7461EF00E178F4482E2C7F7B39C94B8CCFF41619BA5DC67957F7F81> |-/R <1C60D8A8C9B6079F1E4D8C18B43D708E4867E1D5DF87FFDFDA59C87E0DAAC2980D72F189A927C7607FB955553C4E4B82FD6E924592BF3E5BCF70BD67C10FBFCC049000E196CAB909156B2D7E5AD89BC25B1EEB84DE135A38029C2647CF918DD0728B39FA4A46AD6169BF8FCD9F6EBD7C686C8458E64ED665C52AFB667727503772603873AF92F5CB568DE59763334D0C676EEF504634735618AF2DDA86> |-/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67BA95C799E46FC7C8D88E9FFD990A> |-/a <1C60D8A8C9B7EF32A0B922DB529D708010F72F0E62F6CA36E98277AFD8C536E6814BFC8F2509E1B2B1B62A6BDA8D1A6ED67728D80620B28FE439D2F57DCEC5483105FEA93379701773DF23A415938C688874994BCC9880105CE27AC2270A13FA38E952045C5E8C52BEF83397E5FBEEFAB993BE33E385A5E36620F7427AB5E4423C6A4ED6DE24A89F54E52C8FAD8A45FAD4B8F6CFD50EB7D35BF120B079B932E0EE2F7685462C7EC6E9B818F0F9E1F7814D04F2B9AAFA6704B8B745452B73181F38CB34F1645F> |-/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C2021D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495ACA0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCDBE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553A431EECECF30F5581F5F0240E470E520EB9771> |-/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D72A7354004D800853CB28271AB7834CF7A2CB132BAFF26EF4E9D89B> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/r <1C60D8A8C9B81F2C150546EE4CBAAF688B47B2BE559294D5CB0899F2E804995909AC00E005B47DD0AC10879B5BC7D5032F4A9752992A333ADEB05A77287D04AF74FB420D308AD8> |-/s <1C60D8A8C9B7A73DF2FC7D734CFF3CEE44DEE08B4814311F759A12C668E2414B1F185B71CDFB81A4EFE4B67531A5BC3DCC468E7336CC99F93A0F8C9CAAC21479B9DF30E1F20CC55E079066616501132E6501EACD2121153832E7EB63F4284AC03D21E5D5BD534A816A07833E9E45AAF0AF784FB128B27EB090C038A83361862615D53FB49FC431C156AA9A7FD4E2EF50395549EA0CB64112DC> |-/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B5837088353D9095E679DCF29A> |-/u <1C60D8A8C9B7EF325758E576B7BAA1EFA82EFF7976BE67CE506354F22E3D1B078EDAE7715C61BE16B3CD4B647E2C68818E308CF0BE659E73BA193580128E99771A6AFDBFEB4E9486BE6CBE5D0A068E2F3382B692BCB6E47C62554398C9E56946239346863C679F19> |-/v <1C60D8A8C9B7A73DC53FF2C839B947F31C11DB63CB8CC0B0E0518E01B2A8090086BA063BC631F5BCB6255A1F02FF856D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGN+Helvetica /Encoding getdup 80 /P putdup 82 /R putdup 84 /T putdup 97 /a putdup 101 /e putdup 105 /i putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putpop%ADOEndSubsetFont
/DVPWGN+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 23{/.notdef}rp /P /.notdef /R /.notdef /T 12{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 5{/.notdef}rp /o 2{/.notdef}rp /r /s /t /u /v 137{/.notdef}rp]DVPWGN+Helvetica nfDVPWGN+Helvetica*1 [0 -7 -7 0 0 0 ]msf6.01318 117.802 mo(True Positive Rate)[-3.4375 -2.43555 -3.8916 -3.89258 -1.94629 -4.32031 -3.8916 -3.5 -1.55371 -1.94629 -1.55371 -3.32568 -3.89209 -1.9458 -5.0542 -3.8916 -1.94629 0 ]ysh3.68799 89.0234 mo
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B6079F22E07CDD698967474547499A046CA6108DBC03A99D050F43EC0939593DCBE2D36ADBBAFB7F4B6F674E545889C28BDF2C528A201492F729C5289E096795ACB3E8B74F794BD95CD345203B50927FB3BCDBBCBA8BBFF702C4> |-/F <1C60D8A8C9B7D8BE41A64DA557BA3801C50A6D0B90DD03689D1958230FDD078C54AD8D0DA7DD6F0C9EC4C6354485AE4B93FC66781C> |-/O <1C60D8A8C9B6FF867A21BA19EF0C570BB6C4AEDB905D3E548C322F786DA70CDAEFE3DEF4849E1D1588C3A22DCFB11573EC9A318A3B019A45D0FC4FCEE76BAD39BBA1E526700FB4A11015D71862856C2D89337A110F371091E0B563CCFD9E35D4> |-/d <1C60D8A8C9B7EF3272B02106CA005D490B9AADA17924914F2C970DE0CC49CEA15AE0636239F8F8972696F7F5932B166AF2D78F67482CC14B1A6381CFD7128F8DE76CDFCE15FA9EB575CCF12B456F3EB76367E9886C5281DF7AB34F68E50A05C60D95A0109B0EE1AC212C660640ECA54376F807195B77C533845305049FE68DE5BA8B1CD6F2147B0BF4B5B691FCBB3989ADBCB5DBED> |-/f <1C60D8A8C9B854D0A3953AFC308C88F2CB7B77611DE17001C91B65CE86C8891C39A4DBCDDE1373931B89EF13785E617F99570B386BE99D1A576D0D1701D2F253DF8B3192240780F3E221EB68A6> |-/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C0EAF> |-/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706FE45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC754258679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52DA81BBE025DB4544A719A686DB3A0393D2301EEF9A4AA3D42067FE37BAF> |-/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA563254EC441C4BC3817B6ABCAA45C3FADDF2A0C1F1BCD1456474D7370B95E3791CB0774B8A788FAD31DAB8E43BE1DDCC8C2722C438CA874C21003F548D691EAB87ADC2BE2D98ABE47C6EE8D76> |-/p <1C60D8A8C9B7EF321971A47DFE20E88A554AF6C7BF26D7DE21E7159091488A77474EFAE16E717C524A15C920EA73AA47F3FA5326288E9152C7B3C170946831BD532AD7339284A44181A5422DAA5A3944CCAFE4499DA2E6E45119A891F62D3E7DB19C997B84C7105E8154EEFB4DEC8858FC770AEE75D22C6FDC3AA98F517994> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGN+Helvetica /Encoding getdup 67 /C putdup 70 /F putdup 79 /O putdup 100 /d putdup 102 /f putdup 108 /l putdup 109 /m putdup 110 /n putdup 112 /p putpop%ADOEndSubsetFont
/DVPWGN+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 10{/.notdef}rp /C 2{/.notdef}rp /F 8{/.notdef}rp /O /P /.notdef /R /.notdef /T 12{/.notdef}rp /a 2{/.notdef}rp /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]DVPWGN+Helvetica nfDVPWGN+Helvetica*1 [7 0 0 -7 0 0 ]msf119.943 194.162 mo(False Positive Rate)[3.92822 3.89209 1.55371 3.5 3.89209 1.94629 4.31982 3.89258 3.5 1.55371 1.94629 1.55371 3.3252 3.89258 1.94531 5.05469 3.8916 1.94629 0 ]xsh52.3804 32.4507 mo(Optimum)[5.4458 3.89209 1.94629 1.55371 5.83105 3.89209 0 ]xsh150.138 99.8569 mo(Random Classifier)[5.05371 3.89258 3.8916 3.8916 3.89258 5.83105 1.94531 5.05469 1.55371 3.8916 3.5 3.5 1.55371 1.94629 1.55371 3.89258 0 ]xsh42.6382 18.7734 mo
41.0884 14.4238 li
44.6382 17.4238 li
41.0884 14.4238 mo
49.938 27.2236 li
42.6382 18.7734 mo
41.0884 14.4238 li
44.6382 17.4238 li
@
0.25 lw
252.988 3.77344 mo
253.238 3.77344 li
253.438 3.77344 li
253.688 3.77344 li
253.938 3.77344 li
254.188 3.77344 li
254.389 3.77344 li
254.639 3.77344 li
254.889 3.77344 li
255.088 3.77344 li
255.338 3.77344 li
255.588 3.77344 li
255.838 3.77344 li
256.039 3.77344 li
256.289 3.77344 li
256.539 3.77344 li
256.738 3.77344 li
256.988 3.77344 li
257.238 3.77344 li
257.488 3.77344 li
257.688 3.77344 li
257.938 3.72363 li
258.188 3.72363 li
258.389 3.72363 li
258.639 3.72363 li
258.889 3.72363 li
259.139 3.72363 li
259.338 3.72363 li
259.588 3.72363 li
259.838 3.72363 li
260.039 3.72363 li
260.289 3.72363 li
260.539 3.72363 li
260.789 3.72363 li
260.988 3.72363 li
261.238 3.72363 li
261.488 3.72363 li
261.688 3.72363 li
261.938 3.72363 li
262.188 3.72363 li
262.438 3.72363 li
262.639 3.72363 li
262.889 3.72363 li
263.139 3.72363 li
263.338 3.72363 li
263.588 3.72363 li
263.838 3.72363 li
264.088 3.72363 li
264.289 3.72363 li
264.539 3.67383 li
264.789 3.67383 li
264.988 3.67383 li
265.238 3.67383 li
265.488 3.67383 li
265.738 3.67383 li
265.938 3.67383 li
266.188 3.67383 li
266.438 3.67383 li
266.639 3.67383 li
266.889 3.67383 li
267.139 3.67383 li
267.389 3.67383 li
267.588 3.67383 li
267.838 3.67383 li
228.488 3.97363 mo
228.738 3.97363 li
228.938 3.97363 li
229.188 3.97363 li
229.438 3.97363 li
229.639 3.97363 li
229.889 3.97363 li
230.139 3.97363 li
230.389 3.97363 li
230.588 3.97363 li
230.838 3.97363 li
231.088 3.97363 li
231.289 3.97363 li
231.539 3.97363 li
231.789 3.97363 li
232.039 3.97363 li
232.238 3.97363 li
232.488 3.97363 li
232.738 3.97363 li
232.938 3.92383 li
233.188 3.92383 li
233.438 3.92383 li
233.688 3.92383 li
233.889 3.92383 li
234.139 3.92383 li
234.389 3.92383 li
234.588 3.92383 li
234.838 3.92383 li
235.088 3.92383 li
235.338 3.92383 li
235.539 3.92383 li
235.789 3.92383 li
236.039 3.92383 li
236.238 3.92383 li
236.488 3.92383 li
236.738 3.92383 li
236.988 3.92383 li
237.188 3.92383 li
237.438 3.92383 li
237.688 3.92383 li
237.889 3.92383 li
238.139 3.92383 li
238.389 3.92383 li
238.588 3.92383 li
238.838 3.87354 li
239.088 3.87354 li
239.338 3.87354 li
239.539 3.87354 li
239.789 3.87354 li
240.039 3.87354 li
240.238 3.87354 li
240.488 3.87354 li
240.738 3.87354 li
240.988 3.87354 li
241.188 3.87354 li
241.438 3.87354 li
241.688 3.87354 li
241.889 3.87354 li
242.139 3.87354 li
242.389 3.87354 li
242.639 3.87354 li
242.838 3.87354 li
243.088 3.87354 li
243.338 3.87354 li
243.539 3.87354 li
243.789 3.87354 li
244.039 3.87354 li
244.289 3.87354 li
244.488 3.87354 li
244.738 3.87354 li
244.988 3.82373 li
245.188 3.82373 li
245.438 3.82373 li
245.688 3.82373 li
245.938 3.82373 li
246.139 3.82373 li
246.389 3.82373 li
246.639 3.82373 li
246.838 3.82373 li
247.088 3.82373 li
247.338 3.82373 li
247.588 3.82373 li
247.789 3.82373 li
248.039 3.82373 li
248.289 3.82373 li
248.488 3.82373 li
248.738 3.82373 li
248.988 3.82373 li
249.238 3.82373 li
249.438 3.82373 li
249.688 3.82373 li
249.938 3.82373 li
250.139 3.82373 li
250.389 3.82373 li
250.639 3.82373 li
250.889 3.82373 li
251.088 3.82373 li
251.338 3.77344 li
251.588 3.77344 li
251.789 3.77344 li
252.039 3.77344 li
252.289 3.77344 li
252.539 3.77344 li
252.738 3.77344 li
252.988 3.77344 li
203.988 4.22363 mo
204.188 4.22363 li
204.438 4.22363 li
204.688 4.22363 li
204.889 4.22363 li
205.139 4.22363 li
205.389 4.22363 li
205.639 4.17383 li
205.838 4.17383 li
206.088 4.17383 li
206.338 4.17383 li
206.539 4.17383 li
206.789 4.17383 li
207.039 4.17383 li
207.289 4.17383 li
207.488 4.17383 li
207.738 4.17383 li
207.988 4.17383 li
208.188 4.17383 li
208.438 4.17383 li
208.688 4.17383 li
208.938 4.17383 li
209.139 4.17383 li
209.389 4.17383 li
209.639 4.17383 li
209.838 4.17383 li
210.088 4.17383 li
210.338 4.17383 li
210.588 4.12354 li
210.789 4.12354 li
211.039 4.12354 li
211.289 4.12354 li
211.488 4.12354 li
211.738 4.12354 li
211.988 4.12354 li
212.238 4.12354 li
212.438 4.12354 li
212.688 4.12354 li
212.938 4.12354 li
213.139 4.12354 li
213.389 4.12354 li
213.639 4.12354 li
213.889 4.12354 li
214.088 4.12354 li
214.338 4.12354 li
214.588 4.12354 li
214.789 4.12354 li
215.039 4.12354 li
215.289 4.12354 li
215.539 4.12354 li
215.738 4.12354 li
215.988 4.07373 li
216.238 4.07373 li
216.438 4.07373 li
216.688 4.07373 li
216.938 4.07373 li
217.188 4.07373 li
217.389 4.07373 li
217.639 4.07373 li
217.889 4.07373 li
218.088 4.07373 li
218.338 4.07373 li
218.588 4.07373 li
218.838 4.07373 li
219.039 4.07373 li
219.289 4.07373 li
219.539 4.07373 li
219.738 4.07373 li
219.988 4.07373 li
220.238 4.07373 li
220.488 4.07373 li
220.688 4.07373 li
220.938 4.07373 li
221.188 4.07373 li
221.389 4.02344 li
221.639 4.02344 li
221.889 4.02344 li
222.139 4.02344 li
222.338 4.02344 li
222.588 4.02344 li
222.838 4.02344 li
223.039 4.02344 li
223.289 4.02344 li
223.539 4.02344 li
223.789 4.02344 li
223.988 4.02344 li
224.238 4.02344 li
224.488 4.02344 li
224.688 4.02344 li
224.938 4.02344 li
225.188 4.02344 li
225.438 4.02344 li
225.639 4.02344 li
225.889 4.02344 li
226.139 4.02344 li
226.338 4.02344 li
226.588 4.02344 li
226.838 4.02344 li
227.088 3.97363 li
227.289 3.97363 li
227.539 3.97363 li
227.789 3.97363 li
227.988 3.97363 li
228.238 3.97363 li
228.488 3.97363 li
179.438 4.47363 mo
179.688 4.47363 li
179.938 4.47363 li
180.139 4.47363 li
180.389 4.47363 li
180.639 4.47363 li
180.889 4.47363 li
181.088 4.47363 li
181.338 4.47363 li
181.588 4.47363 li
181.789 4.42383 li
182.039 4.42383 li
182.289 4.42383 li
182.539 4.42383 li
182.738 4.42383 li
182.988 4.42383 li
183.238 4.42383 li
183.438 4.42383 li
183.688 4.42383 li
183.938 4.42383 li
184.188 4.42383 li
184.389 4.42383 li
184.639 4.42383 li
184.889 4.42383 li
185.088 4.42383 li
185.338 4.42383 li
185.588 4.42383 li
185.838 4.42383 li
186.039 4.42383 li
186.289 4.37354 li
186.539 4.37354 li
186.738 4.37354 li
186.988 4.37354 li
187.238 4.37354 li
187.488 4.37354 li
187.688 4.37354 li
187.938 4.37354 li
188.188 4.37354 li
188.389 4.37354 li
188.639 4.37354 li
188.889 4.37354 li
189.139 4.37354 li
189.338 4.37354 li
189.588 4.37354 li
189.838 4.37354 li
190.039 4.37354 li
190.289 4.37354 li
190.539 4.37354 li
190.789 4.37354 li
190.988 4.32373 li
191.238 4.32373 li
191.488 4.32373 li
191.688 4.32373 li
191.938 4.32373 li
192.188 4.32373 li
192.438 4.32373 li
192.639 4.32373 li
192.889 4.32373 li
193.139 4.32373 li
193.338 4.32373 li
193.588 4.32373 li
193.838 4.32373 li
194.088 4.32373 li
194.289 4.32373 li
194.539 4.32373 li
194.789 4.32373 li
194.988 4.32373 li
195.238 4.32373 li
195.488 4.32373 li
195.738 4.27344 li
195.938 4.27344 li
196.188 4.27344 li
196.438 4.27344 li
196.639 4.27344 li
196.889 4.27344 li
197.139 4.27344 li
197.389 4.27344 li
197.588 4.27344 li
197.838 4.27344 li
198.088 4.27344 li
198.289 4.27344 li
198.539 4.27344 li
198.789 4.27344 li
199.039 4.27344 li
199.238 4.27344 li
199.488 4.27344 li
199.738 4.27344 li
199.938 4.27344 li
200.188 4.27344 li
200.438 4.22363 li
200.688 4.22363 li
200.889 4.22363 li
201.139 4.22363 li
201.389 4.22363 li
201.588 4.22363 li
201.838 4.22363 li
202.088 4.22363 li
202.338 4.22363 li
202.539 4.22363 li
202.789 4.22363 li
203.039 4.22363 li
203.238 4.22363 li
203.488 4.22363 li
203.738 4.22363 li
203.988 4.22363 li
154.938 4.77344 mo
155.188 4.77344 li
155.438 4.77344 li
155.639 4.77344 li
155.889 4.77344 li
156.139 4.77344 li
156.338 4.77344 li
156.588 4.77344 li
156.838 4.77344 li
157.088 4.77344 li
157.289 4.77344 li
157.539 4.77344 li
157.789 4.72363 li
157.988 4.72363 li
158.238 4.72363 li
158.488 4.72363 li
158.738 4.72363 li
158.938 4.72363 li
159.188 4.72363 li
159.438 4.72363 li
159.639 4.72363 li
159.889 4.72363 li
160.139 4.72363 li
160.389 4.72363 li
160.588 4.72363 li
160.838 4.72363 li
161.088 4.72363 li
161.289 4.67383 li
161.539 4.67383 li
161.789 4.67383 li
162.039 4.67383 li
162.238 4.67383 li
162.488 4.67383 li
162.738 4.67383 li
162.938 4.67383 li
163.188 4.67383 li
163.438 4.67383 li
163.688 4.67383 li
163.889 4.67383 li
164.139 4.67383 li
164.389 4.67383 li
164.588 4.67383 li
164.838 4.67383 li
165.088 4.67383 li
165.338 4.62354 li
165.539 4.62354 li
165.789 4.62354 li
166.039 4.62354 li
166.238 4.62354 li
166.488 4.62354 li
166.738 4.62354 li
166.988 4.62354 li
167.188 4.62354 li
167.438 4.62354 li
167.688 4.62354 li
167.889 4.62354 li
168.139 4.62354 li
168.389 4.62354 li
168.639 4.62354 li
168.838 4.62354 li
169.088 4.62354 li
169.338 4.57373 li
169.539 4.57373 li
169.789 4.57373 li
170.039 4.57373 li
170.289 4.57373 li
170.488 4.57373 li
170.738 4.57373 li
170.988 4.57373 li
171.188 4.57373 li
171.438 4.57373 li
171.688 4.57373 li
171.938 4.57373 li
172.139 4.57373 li
172.389 4.57373 li
172.639 4.57373 li
172.838 4.57373 li
173.088 4.57373 li
173.338 4.52344 li
173.588 4.52344 li
173.789 4.52344 li
174.039 4.52344 li
174.289 4.52344 li
174.488 4.52344 li
174.738 4.52344 li
174.988 4.52344 li
175.238 4.52344 li
175.438 4.52344 li
175.688 4.52344 li
175.938 4.52344 li
176.139 4.52344 li
176.389 4.52344 li
176.639 4.52344 li
176.889 4.52344 li
177.088 4.52344 li
177.338 4.52344 li
177.588 4.47363 li
177.789 4.47363 li
178.039 4.47363 li
178.289 4.47363 li
178.539 4.47363 li
178.738 4.47363 li
178.988 4.47363 li
179.238 4.47363 li
179.438 4.47363 li
130.438 5.17383 mo
130.688 5.17383 li
130.888 5.17383 li
131.138 5.17383 li
131.388 5.12354 li
131.588 5.12354 li
131.838 5.12354 li
132.088 5.12354 li
132.338 5.12354 li
132.538 5.12354 li
132.788 5.12354 li
133.038 5.12354 li
133.238 5.12354 li
133.488 5.12354 li
133.738 5.12354 li
133.988 5.12354 li
134.188 5.07373 li
134.438 5.07373 li
134.688 5.07373 li
134.888 5.07373 li
135.138 5.07373 li
135.388 5.07373 li
135.638 5.07373 li
135.838 5.07373 li
136.088 5.07373 li
136.338 5.07373 li
136.538 5.07373 li
136.788 5.07373 li
137.038 5.07373 li
137.288 5.02344 li
137.488 5.02344 li
137.738 5.02344 li
137.988 5.02344 li
138.188 5.02344 li
138.438 5.02344 li
138.688 5.02344 li
138.938 5.02344 li
139.139 5.02344 li
139.389 5.02344 li
139.639 5.02344 li
139.838 5.02344 li
140.088 5.02344 li
140.338 5.02344 li
140.588 4.97363 li
140.789 4.97363 li
141.039 4.97363 li
141.289 4.97363 li
141.488 4.97363 li
141.738 4.97363 li
141.988 4.97363 li
142.238 4.97363 li
142.438 4.97363 li
142.688 4.97363 li
142.938 4.97363 li
143.139 4.97363 li
143.389 4.97363 li
143.639 4.92383 li
143.889 4.92383 li
144.088 4.92383 li
144.338 4.92383 li
144.588 4.92383 li
144.789 4.92383 li
145.039 4.92383 li
145.289 4.92383 li
145.539 4.92383 li
145.738 4.92383 li
145.988 4.92383 li
146.238 4.92383 li
146.438 4.92383 li
146.688 4.92383 li
146.938 4.92383 li
147.188 4.87354 li
147.389 4.87354 li
147.639 4.87354 li
147.889 4.87354 li
148.088 4.87354 li
148.338 4.87354 li
148.588 4.87354 li
148.838 4.87354 li
149.039 4.87354 li
149.289 4.87354 li
149.539 4.87354 li
149.738 4.87354 li
149.988 4.87354 li
150.238 4.87354 li
150.488 4.82373 li
150.688 4.82373 li
150.938 4.82373 li
151.188 4.82373 li
151.389 4.82373 li
151.639 4.82373 li
151.889 4.82373 li
152.139 4.82373 li
152.338 4.82373 li
152.588 4.82373 li
152.838 4.82373 li
153.039 4.82373 li
153.289 4.82373 li
153.539 4.82373 li
153.789 4.82373 li
153.988 4.77344 li
154.238 4.77344 li
154.488 4.77344 li
154.688 4.77344 li
154.938 4.77344 li
105.938 5.62354 mo
106.138 5.62354 li
106.388 5.62354 li
106.638 5.62354 li
106.888 5.62354 li
107.088 5.62354 li
107.338 5.62354 li
107.588 5.62354 li
107.788 5.62354 li
108.038 5.62354 li
108.288 5.57373 li
108.538 5.57373 li
108.738 5.57373 li
108.988 5.57373 li
109.238 5.57373 li
109.438 5.57373 li
109.688 5.57373 li
109.938 5.57373 li
110.188 5.57373 li
110.388 5.52344 li
110.638 5.52344 li
110.888 5.52344 li
111.088 5.52344 li
111.338 5.52344 li
111.588 5.52344 li
111.838 5.52344 li
112.038 5.52344 li
112.288 5.52344 li
112.538 5.52344 li
112.738 5.47363 li
112.988 5.47363 li
113.238 5.47363 li
113.488 5.47363 li
113.688 5.47363 li
113.938 5.47363 li
114.188 5.47363 li
114.388 5.47363 li
114.638 5.47363 li
114.888 5.47363 li
115.138 5.47363 li
115.338 5.42383 li
115.588 5.42383 li
115.838 5.42383 li
116.038 5.42383 li
116.288 5.42383 li
116.538 5.42383 li
116.788 5.42383 li
116.988 5.42383 li
117.238 5.42383 li
117.488 5.42383 li
117.688 5.37354 li
117.938 5.37354 li
118.188 5.37354 li
118.438 5.37354 li
118.638 5.37354 li
118.888 5.37354 li
119.138 5.37354 li
119.338 5.37354 li
119.588 5.37354 li
119.838 5.37354 li
120.088 5.37354 li
120.289 5.32373 li
120.539 5.32373 li
120.789 5.32373 li
120.988 5.32373 li
121.238 5.32373 li
121.488 5.32373 li
121.688 5.32373 li
121.938 5.32373 li
122.188 5.32373 li
122.438 5.32373 li
122.638 5.32373 li
122.888 5.27344 li
123.138 5.27344 li
123.338 5.27344 li
123.588 5.27344 li
123.838 5.27344 li
124.088 5.27344 li
124.289 5.27344 li
124.539 5.27344 li
124.789 5.27344 li
124.988 5.27344 li
125.238 5.27344 li
125.488 5.27344 li
125.738 5.22363 li
125.938 5.22363 li
126.188 5.22363 li
126.438 5.22363 li
126.638 5.22363 li
126.888 5.22363 li
127.138 5.22363 li
127.388 5.22363 li
127.588 5.22363 li
127.838 5.22363 li
128.088 5.22363 li
128.289 5.22363 li
128.539 5.17383 li
128.789 5.17383 li
129.039 5.17383 li
129.238 5.17383 li
129.488 5.17383 li
129.738 5.17383 li
129.938 5.17383 li
130.188 5.17383 li
130.438 5.17383 li
81.3882 6.32373 mo
81.6382 6.32373 li
81.8882 6.32373 li
82.1382 6.32373 li
82.3384 6.27344 li
82.5884 6.27344 li
82.8384 6.27344 li
83.0381 6.27344 li
83.2881 6.27344 li
83.5381 6.27344 li
83.7881 6.27344 li
83.9883 6.22363 li
84.2383 6.22363 li
84.4883 6.22363 li
84.688 6.22363 li
84.938 6.22363 li
85.188 6.22363 li
85.438 6.17383 li
85.6382 6.17383 li
85.8882 6.17383 li
86.1382 6.17383 li
86.3384 6.17383 li
86.5884 6.17383 li
86.8384 6.17383 li
87.0884 6.12354 li
87.2881 6.12354 li
87.5381 6.12354 li
87.7881 6.12354 li
87.9883 6.12354 li
88.2383 6.12354 li
88.4883 6.12354 li
88.7383 6.07373 li
88.938 6.07373 li
89.1885 6.07373 li
89.4385 6.07373 li
89.6382 6.07373 li
89.8882 6.07373 li
90.1382 6.07373 li
90.3882 6.02344 li
90.5884 6.02344 li
90.8384 6.02344 li
91.0884 6.02344 li
91.2881 6.02344 li
91.5381 6.02344 li
91.7881 6.02344 li
92.0381 6.02344 li
92.2383 5.97363 li
92.4883 5.97363 li
92.7383 5.97363 li
92.9385 5.97363 li
93.1885 5.97363 li
93.4385 5.97363 li
93.6885 5.97363 li
93.8882 5.97363 li
94.1382 5.92383 li
94.3882 5.92383 li
94.5884 5.92383 li
94.8384 5.92383 li
95.0884 5.92383 li
95.3384 5.92383 li
95.5386 5.92383 li
95.7886 5.87354 li
96.0386 5.87354 li
96.2383 5.87354 li
96.4883 5.87354 li
96.7383 5.87354 li
96.9883 5.87354 li
97.1885 5.87354 li
97.4385 5.87354 li
97.6885 5.87354 li
97.8882 5.82373 li
98.1382 5.82373 li
98.3882 5.82373 li
98.6382 5.82373 li
98.8384 5.82373 li
99.0884 5.82373 li
99.3384 5.82373 li
99.5386 5.82373 li
99.7886 5.77344 li
100.039 5.77344 li
100.289 5.77344 li
100.488 5.77344 li
100.738 5.77344 li
100.988 5.77344 li
101.188 5.77344 li
101.438 5.77344 li
101.688 5.72363 li
101.938 5.72363 li
102.138 5.72363 li
102.388 5.72363 li
102.638 5.72363 li
102.838 5.72363 li
103.088 5.72363 li
103.338 5.72363 li
103.588 5.72363 li
103.789 5.67383 li
104.039 5.67383 li
104.289 5.67383 li
104.488 5.67383 li
104.738 5.67383 li
104.988 5.67383 li
105.238 5.67383 li
105.438 5.67383 li
105.688 5.67383 li
105.938 5.62354 li
56.8882 7.47363 mo
57.1382 7.47363 li
57.3882 7.47363 li
57.5884 7.42383 li
57.8384 7.42383 li
58.0884 7.42383 li
58.3384 7.37354 li
58.5381 7.37354 li
58.7881 7.37354 li
59.0381 7.37354 li
59.2383 7.32373 li
59.4883 7.32373 li
59.7383 7.32373 li
59.9883 7.27344 li
60.188 7.27344 li
60.438 7.27344 li
60.688 7.27344 li
60.8882 7.22363 li
61.1382 7.22363 li
61.3882 7.22363 li
61.6382 7.17383 li
61.8384 7.17383 li
62.0884 7.17383 li
62.3384 7.17383 li
62.5381 7.12354 li
62.7881 7.12354 li
63.0381 7.12354 li
63.2383 7.12354 li
63.4883 7.07373 li
63.7383 7.07373 li
63.9883 7.07373 li
64.1885 7.07373 li
64.4385 7.02344 li
64.6885 7.02344 li
64.8882 7.02344 li
65.1382 7.02344 li
65.3882 6.97363 li
65.6382 6.97363 li
65.8384 6.97363 li
66.0884 6.97363 li
66.3384 6.92383 li
66.5381 6.92383 li
66.7881 6.92383 li
67.0381 6.92383 li
67.2881 6.92383 li
67.4883 6.87354 li
67.7383 6.87354 li
67.9883 6.87354 li
68.1885 6.87354 li
68.4385 6.82373 li
68.6885 6.82373 li
68.9385 6.82373 li
69.1382 6.82373 li
69.3882 6.82373 li
69.6382 6.77344 li
69.8384 6.77344 li
70.0884 6.77344 li
70.3384 6.77344 li
70.5884 6.77344 li
70.7881 6.72363 li
71.0381 6.72363 li
71.2881 6.72363 li
71.4883 6.72363 li
71.7383 6.72363 li
71.9883 6.67383 li
72.2383 6.67383 li
72.4385 6.67383 li
72.6885 6.67383 li
72.9385 6.67383 li
73.1382 6.62354 li
73.3882 6.62354 li
73.6382 6.62354 li
73.8882 6.62354 li
74.0884 6.62354 li
74.3384 6.57373 li
74.5884 6.57373 li
74.7886 6.57373 li
75.0386 6.57373 li
75.2886 6.57373 li
75.5386 6.52344 li
75.7383 6.52344 li
75.9883 6.52344 li
76.2383 6.52344 li
76.4385 6.52344 li
76.6885 6.52344 li
76.9385 6.47363 li
77.1885 6.47363 li
77.3882 6.47363 li
77.6382 6.47363 li
77.8882 6.47363 li
78.0884 6.42383 li
78.3384 6.42383 li
78.5884 6.42383 li
78.8384 6.42383 li
79.0386 6.42383 li
79.2886 6.42383 li
79.5386 6.37354 li
79.7383 6.37354 li
79.9883 6.37354 li
80.2383 6.37354 li
80.4883 6.37354 li
80.6885 6.37354 li
80.9385 6.32373 li
81.1885 6.32373 li
81.3882 6.32373 li
32.3882 174.324 mo
32.6382 145.423 li
32.8384 121.423 li
33.0884 101.625 li
33.3384 85.3237 li
33.5884 71.9736 li
33.7881 60.9736 li
34.0381 51.9238 li
34.2881 44.4736 li
34.4883 38.3735 li
34.7383 33.3735 li
34.9883 29.2236 li
35.2383 25.8237 li
35.438 23.0234 li
35.688 20.7236 li
35.938 18.8237 li
36.1382 17.2236 li
36.3882 15.9238 li
36.6382 14.8735 li
36.8882 13.9736 li
37.0884 13.2236 li
37.3384 12.5737 li
37.5884 12.0737 li
37.7881 11.6235 li
38.0381 11.2734 li
38.2881 10.9736 li
38.5381 10.6738 li
38.7383 10.4736 li
38.9883 10.2734 li
39.2383 10.1235 li
39.438 9.97363 li
39.688 9.82373 li
39.9385 9.72363 li
40.1885 9.62354 li
40.3882 9.52344 li
40.6382 9.42383 li
40.8882 9.37354 li
41.0884 9.32373 li
41.3384 9.22363 li
41.5884 9.17383 li
41.8384 9.12354 li
42.0381 9.07373 li
42.2881 9.02344 li
42.5381 8.97363 li
42.7383 8.92383 li
42.9883 8.92383 li
43.2383 8.87354 li
43.4883 8.82373 li
43.6885 8.77344 li
43.9385 8.77344 li
44.1885 8.72363 li
44.3882 8.67383 li
44.6382 8.62354 li
44.8882 8.62354 li
45.1382 8.57373 li
45.3384 8.57373 li
45.5884 8.52344 li
45.8384 8.47363 li
46.0381 8.47363 li
46.2881 8.42383 li
46.5381 8.42383 li
46.7881 8.37354 li
46.9883 8.37354 li
47.2383 8.32373 li
47.4883 8.32373 li
47.6885 8.27344 li
47.9385 8.22363 li
48.1885 8.22363 li
48.4385 8.17383 li
48.6382 8.17383 li
48.8882 8.17383 li
49.1382 8.12354 li
49.3384 8.12354 li
49.5884 8.07373 li
49.8384 8.07373 li
50.0884 8.02344 li
50.2886 8.02344 li
50.5386 7.97363 li
50.7886 7.97363 li
50.9883 7.97363 li
51.2383 7.92383 li
51.4883 7.92383 li
51.7383 7.87354 li
51.9385 7.87354 li
52.1885 7.82373 li
52.4385 7.82373 li
52.6382 7.82373 li
52.8882 7.77393 li
53.1382 7.77393 li
53.3882 7.77393 li
53.5884 7.72363 li
53.8384 7.72363 li
54.0884 7.67383 li
54.2886 7.67383 li
54.5386 7.67383 li
54.7886 7.62354 li
55.0386 7.62354 li
55.2383 7.62354 li
55.4883 7.57373 li
55.7383 7.57373 li
55.9385 7.57373 li
56.1885 7.52393 li
56.4385 7.52393 li
56.6885 7.52393 li
56.8882 7.47363 li
@
[4 2 ] 0 dsh
252.988 6.32373 mo
253.238 6.27344 li
253.438 6.22363 li
253.688 6.17383 li
253.938 6.12354 li
254.188 6.07373 li
254.389 6.02344 li
254.639 6.02344 li
254.889 5.97363 li
255.088 5.92383 li
255.338 5.87354 li
255.588 5.82373 li
255.838 5.77344 li
256.039 5.72363 li
256.289 5.72363 li
256.539 5.67383 li
256.738 5.62354 li
256.988 5.57373 li
257.238 5.52344 li
257.488 5.47363 li
257.688 5.42383 li
257.938 5.42383 li
258.188 5.37354 li
258.389 5.32373 li
258.639 5.27393 li
258.889 5.22363 li
259.139 5.17383 li
259.338 5.12354 li
259.588 5.12354 li
259.838 5.07373 li
260.039 5.02393 li
260.289 4.97363 li
260.539 4.92383 li
260.789 4.87354 li
260.988 4.87354 li
261.238 4.82373 li
261.488 4.77393 li
261.688 4.72363 li
261.938 4.67383 li
262.188 4.62402 li
262.438 4.62402 li
262.639 4.57373 li
262.889 4.52393 li
263.139 4.47363 li
263.338 4.42383 li
263.588 4.42383 li
263.838 4.37402 li
264.088 4.32373 li
264.289 4.27393 li
264.539 4.22363 li
264.789 4.17383 li
264.988 4.17383 li
265.238 4.12402 li
265.488 4.07373 li
265.738 4.02393 li
265.938 3.97363 li
266.188 3.97363 li
266.438 3.92383 li
266.639 3.87402 li
266.889 3.82373 li
267.139 3.77393 li
267.389 3.77393 li
267.588 3.72363 li
267.838 3.67383 li
228.488 11.2734 mo
228.738 11.2236 li
228.938 11.1738 li
229.188 11.1235 li
229.438 11.0737 li
229.639 11.0234 li
229.889 10.9736 li
230.139 10.9238 li
230.389 10.8735 li
230.588 10.7734 li
230.838 10.7236 li
231.088 10.6738 li
231.289 10.6235 li
231.539 10.5737 li
231.789 10.5234 li
232.039 10.4736 li
232.238 10.4238 li
232.488 10.3735 li
232.738 10.3237 li
232.938 10.2734 li
233.188 10.2236 li
233.438 10.1738 li
233.688 10.1235 li
233.889 10.0737 li
234.139 10.0239 li
234.389 9.97363 li
234.588 9.92383 li
234.838 9.87354 li
235.088 9.82373 li
235.338 9.77393 li
235.539 9.72363 li
235.789 9.67383 li
236.039 9.62354 li
236.238 9.57373 li
236.488 9.52393 li
236.738 9.47363 li
236.988 9.42383 li
237.188 9.37402 li
237.438 9.37402 li
237.688 9.32373 li
237.889 9.27393 li
238.139 9.22363 li
238.389 9.17383 li
238.588 9.12402 li
238.838 9.07373 li
239.088 9.02393 li
239.338 8.97363 li
239.539 8.92383 li
239.789 8.87402 li
240.039 8.82373 li
240.238 8.77393 li
240.488 8.72363 li
240.738 8.67383 li
240.988 8.62402 li
241.188 8.57373 li
241.438 8.52393 li
241.688 8.47363 li
241.889 8.42383 li
242.139 8.37402 li
242.389 8.32373 li
242.639 8.27393 li
242.838 8.27393 li
243.088 8.22363 li
243.338 8.17383 li
243.539 8.12402 li
243.789 8.07373 li
244.039 8.02393 li
244.289 7.97412 li
244.488 7.92383 li
244.738 7.87402 li
244.988 7.82373 li
245.188 7.77393 li
245.438 7.72412 li
245.688 7.67383 li
245.938 7.67383 li
246.139 7.62402 li
246.389 7.57373 li
246.639 7.52393 li
246.838 7.47412 li
247.088 7.42383 li
247.338 7.37402 li
247.588 7.32422 li
247.789 7.27393 li
248.039 7.22412 li
248.289 7.17383 li
248.488 7.17383 li
248.738 7.12402 li
248.988 7.07422 li
249.238 7.02393 li
249.438 6.97412 li
249.688 6.92383 li
249.938 6.87402 li
250.139 6.82422 li
250.389 6.77393 li
250.639 6.72412 li
250.889 6.72412 li
251.088 6.67383 li
251.338 6.62402 li
251.588 6.57422 li
251.789 6.52393 li
252.039 6.47412 li
252.289 6.42383 li
252.539 6.37402 li
252.738 6.37402 li
252.988 6.32422 li
203.988 17.2734 mo
204.188 17.2236 li
204.438 17.1235 li
204.688 17.0737 li
204.889 17.0234 li
205.139 16.9736 li
205.389 16.8735 li
205.639 16.8237 li
205.838 16.7734 li
206.088 16.6738 li
206.338 16.6235 li
206.539 16.5737 li
206.789 16.5234 li
207.039 16.4238 li
207.289 16.3735 li
207.488 16.3237 li
207.738 16.2734 li
207.988 16.2236 li
208.188 16.1235 li
208.438 16.0737 li
208.688 16.0234 li
208.938 15.9736 li
209.139 15.8735 li
209.389 15.8237 li
209.639 15.7734 li
209.838 15.7236 li
210.088 15.6235 li
210.338 15.5737 li
210.588 15.5234 li
210.789 15.4736 li
211.039 15.4238 li
211.289 15.3237 li
211.488 15.2734 li
211.738 15.2236 li
211.988 15.1738 li
212.238 15.1235 li
212.438 15.0234 li
212.688 14.9736 li
212.938 14.9238 li
213.139 14.8735 li
213.389 14.8237 li
213.639 14.7739 li
213.889 14.6738 li
214.088 14.6235 li
214.338 14.5737 li
214.588 14.5239 li
214.789 14.4736 li
215.039 14.3735 li
215.289 14.3237 li
215.539 14.2739 li
215.738 14.2236 li
215.988 14.1738 li
216.238 14.1235 li
216.438 14.0737 li
216.688 13.9736 li
216.938 13.9238 li
217.188 13.874 li
217.389 13.8237 li
217.639 13.7739 li
217.889 13.7236 li
218.088 13.6738 li
218.338 13.5737 li
218.588 13.5239 li
218.838 13.4736 li
219.039 13.4238 li
219.289 13.374 li
219.539 13.3237 li
219.738 13.2739 li
219.988 13.2236 li
220.238 13.124 li
220.488 13.0737 li
220.688 13.0239 li
220.938 12.9736 li
221.188 12.9238 li
221.389 12.874 li
221.639 12.8237 li
221.889 12.7739 li
222.139 12.7236 li
222.338 12.6738 li
222.588 12.5737 li
222.838 12.5239 li
223.039 12.4736 li
223.289 12.4238 li
223.539 12.374 li
223.789 12.3237 li
223.988 12.2739 li
224.238 12.2236 li
224.488 12.1738 li
224.688 12.124 li
224.938 12.0737 li
225.188 12.0239 li
225.438 11.9238 li
225.639 11.874 li
225.889 11.8237 li
226.139 11.7739 li
226.338 11.7241 li
226.588 11.6738 li
226.838 11.624 li
227.088 11.5737 li
227.289 11.5239 li
227.539 11.4741 li
227.789 11.4238 li
227.988 11.374 li
228.238 11.3237 li
228.488 11.2739 li
179.438 24.8237 mo
179.688 24.7734 li
179.938 24.6738 li
180.139 24.5737 li
180.389 24.5234 li
180.639 24.4238 li
180.889 24.3237 li
181.088 24.2734 li
181.338 24.1738 li
181.588 24.1235 li
181.789 24.0234 li
182.039 23.9238 li
182.289 23.8735 li
182.539 23.7734 li
182.738 23.7236 li
182.988 23.6235 li
183.238 23.5234 li
183.438 23.4736 li
183.688 23.3735 li
183.938 23.3237 li
184.188 23.2236 li
184.389 23.1235 li
184.639 23.0737 li
184.889 22.9736 li
185.088 22.9238 li
185.338 22.8237 li
185.588 22.7734 li
185.838 22.6738 li
186.039 22.6235 li
186.289 22.5234 li
186.539 22.4736 li
186.738 22.3735 li
186.988 22.3237 li
187.238 22.2236 li
187.488 22.1738 li
187.688 22.0737 li
187.938 21.9736 li
188.188 21.9238 li
188.389 21.8237 li
188.639 21.7734 li
188.889 21.7236 li
189.139 21.6235 li
189.338 21.5737 li
189.588 21.4736 li
189.838 21.4238 li
190.039 21.3237 li
190.289 21.2734 li
190.539 21.1738 li
190.789 21.1235 li
190.988 21.0234 li
191.238 20.9736 li
191.488 20.8735 li
191.688 20.8237 li
191.938 20.7236 li
192.188 20.6738 li
192.438 20.6235 li
192.639 20.5234 li
192.889 20.4736 li
193.139 20.3735 li
193.338 20.3237 li
193.588 20.2236 li
193.838 20.1738 li
194.088 20.1235 li
194.289 20.0234 li
194.539 19.9736 li
194.789 19.8735 li
194.988 19.8237 li
195.238 19.7734 li
195.488 19.6738 li
195.738 19.6235 li
195.938 19.5234 li
196.188 19.4736 li
196.438 19.4238 li
196.639 19.3237 li
196.889 19.2734 li
197.139 19.1738 li
197.389 19.1235 li
197.588 19.0737 li
197.838 18.9736 li
198.088 18.9238 li
198.289 18.8735 li
198.539 18.7734 li
198.789 18.7236 li
199.039 18.6738 li
199.238 18.5737 li
199.488 18.5234 li
199.738 18.4736 li
199.938 18.3735 li
200.188 18.3237 li
200.438 18.2734 li
200.688 18.1738 li
200.889 18.1235 li
201.139 18.0737 li
201.389 17.9736 li
201.588 17.9238 li
201.838 17.8735 li
202.088 17.7734 li
202.338 17.7236 li
202.539 17.6738 li
202.789 17.5737 li
203.039 17.5234 li
203.238 17.4736 li
203.488 17.4238 li
203.738 17.3237 li
203.988 17.2734 li
154.938 34.7236 mo
155.188 34.6235 li
155.438 34.5234 li
155.639 34.3735 li
155.889 34.2734 li
156.139 34.1738 li
156.338 34.0737 li
156.588 33.9736 li
156.838 33.8735 li
157.088 33.7236 li
157.289 33.6235 li
157.539 33.5234 li
157.789 33.4233 li
157.988 33.3237 li
158.238 33.2236 li
158.488 33.1235 li
158.738 33.0234 li
158.938 32.9233 li
159.188 32.7734 li
159.438 32.6733 li
159.639 32.5737 li
159.889 32.4736 li
160.139 32.3735 li
160.389 32.2734 li
160.588 32.1733 li
160.838 32.0732 li
161.088 31.9736 li
161.289 31.8735 li
161.539 31.7734 li
161.789 31.6733 li
162.039 31.5732 li
162.238 31.4736 li
162.488 31.3735 li
162.738 31.2734 li
162.938 31.1733 li
163.188 31.0732 li
163.438 30.9736 li
163.688 30.8735 li
163.889 30.7734 li
164.139 30.6733 li
164.389 30.5732 li
164.588 30.4736 li
164.838 30.3735 li
165.088 30.2734 li
165.338 30.1733 li
165.539 30.0732 li
165.789 29.9736 li
166.039 29.9233 li
166.238 29.8232 li
166.488 29.7236 li
166.738 29.6235 li
166.988 29.5234 li
167.188 29.4233 li
167.438 29.3232 li
167.688 29.2231 li
167.889 29.1235 li
168.139 29.0234 li
168.389 28.9731 li
168.639 28.8735 li
168.838 28.7734 li
169.088 28.6733 li
169.338 28.5732 li
169.539 28.4731 li
169.789 28.3735 li
170.039 28.3232 li
170.289 28.2231 li
170.488 28.1235 li
170.738 28.0234 li
170.988 27.9233 li
171.188 27.8735 li
171.438 27.7734 li
171.688 27.6733 li
171.938 27.5732 li
172.139 27.4731 li
172.389 27.4233 li
172.639 27.3232 li
172.838 27.2231 li
173.088 27.123 li
173.338 27.0234 li
173.588 26.9731 li
173.789 26.873 li
174.039 26.7734 li
174.289 26.6733 li
174.488 26.623 li
174.738 26.5234 li
174.988 26.4233 li
175.238 26.373 li
175.438 26.2734 li
175.688 26.1733 li
175.938 26.0732 li
176.139 26.0234 li
176.389 25.9233 li
176.639 25.8232 li
176.889 25.7734 li
177.088 25.6733 li
177.338 25.5732 li
177.588 25.4731 li
177.789 25.4233 li
178.039 25.3232 li
178.289 25.2231 li
178.539 25.1733 li
178.738 25.0732 li
178.988 24.9731 li
179.238 24.9233 li
179.438 24.8232 li
130.438 48.1235 mo
130.688 47.9736 li
130.888 47.8237 li
131.138 47.6738 li
131.388 47.5234 li
131.588 47.3735 li
131.838 47.2236 li
132.088 47.0737 li
132.338 46.9238 li
132.538 46.7734 li
132.788 46.6235 li
133.038 46.4736 li
133.238 46.3237 li
133.488 46.1738 li
133.738 46.0234 li
133.988 45.9238 li
134.188 45.7734 li
134.438 45.6235 li
134.688 45.4736 li
134.888 45.3237 li
135.138 45.1738 li
135.388 45.0234 li
135.638 44.9238 li
135.838 44.7734 li
136.088 44.6235 li
136.338 44.4736 li
136.538 44.3237 li
136.788 44.2236 li
137.038 44.0737 li
137.288 43.9238 li
137.488 43.7734 li
137.738 43.6738 li
137.988 43.5234 li
138.188 43.3735 li
138.438 43.2734 li
138.688 43.1235 li
138.938 42.9736 li
139.139 42.8237 li
139.389 42.7236 li
139.639 42.5737 li
139.838 42.4238 li
140.088 42.3237 li
140.338 42.1738 li
140.588 42.0234 li
140.789 41.9238 li
141.039 41.7734 li
141.289 41.6738 li
141.488 41.5234 li
141.738 41.3735 li
141.988 41.2734 li
142.238 41.1235 li
142.438 41.0234 li
142.688 40.8735 li
142.938 40.7734 li
143.139 40.6235 li
143.389 40.4736 li
143.639 40.3735 li
143.889 40.2236 li
144.088 40.1235 li
144.338 39.9736 li
144.588 39.8735 li
144.789 39.7236 li
145.039 39.6235 li
145.289 39.4736 li
145.539 39.3735 li
145.738 39.2236 li
145.988 39.1235 li
146.238 39.0234 li
146.438 38.8735 li
146.688 38.7734 li
146.938 38.6235 li
147.188 38.5234 li
147.389 38.3735 li
147.639 38.2734 li
147.889 38.1733 li
148.088 38.0234 li
148.338 37.9233 li
148.588 37.7734 li
148.838 37.6733 li
149.039 37.5732 li
149.289 37.4233 li
149.539 37.3232 li
149.738 37.2236 li
149.988 37.0732 li
150.238 36.9736 li
150.488 36.8735 li
150.688 36.7236 li
150.938 36.6235 li
151.188 36.5234 li
151.389 36.3735 li
151.639 36.2734 li
151.889 36.1733 li
152.139 36.0732 li
152.338 35.9233 li
152.588 35.8232 li
152.838 35.7236 li
153.039 35.6235 li
153.289 35.4736 li
153.539 35.3735 li
153.789 35.2734 li
153.988 35.1733 li
154.238 35.0234 li
154.488 34.9233 li
154.688 34.8232 li
154.938 34.7236 li
105.938 66.7734 mo
106.138 66.5234 li
106.388 66.3237 li
106.638 66.1235 li
106.888 65.9238 li
107.088 65.7236 li
107.338 65.4736 li
107.588 65.2734 li
107.788 65.0737 li
108.038 64.8735 li
108.288 64.6738 li
108.538 64.4736 li
108.738 64.2734 li
108.988 64.0737 li
109.238 63.8735 li
109.438 63.6738 li
109.688 63.4736 li
109.938 63.2734 li
110.188 63.0737 li
110.388 62.8735 li
110.638 62.6738 li
110.888 62.4736 li
111.088 62.2734 li
111.338 62.0737 li
111.588 61.8735 li
111.838 61.6738 li
112.038 61.4736 li
112.288 61.2739 li
112.538 61.0737 li
112.738 60.8735 li
112.988 60.7236 li
113.238 60.5239 li
113.488 60.3237 li
113.688 60.1235 li
113.938 59.9238 li
114.188 59.7739 li
114.388 59.5737 li
114.638 59.374 li
114.888 59.1738 li
115.138 59.0239 li
115.338 58.8237 li
115.588 58.624 li
115.838 58.4238 li
116.038 58.2739 li
116.288 58.0737 li
116.538 57.874 li
116.788 57.7236 li
116.988 57.5239 li
117.238 57.374 li
117.488 57.1738 li
117.688 56.9736 li
117.938 56.8237 li
118.188 56.624 li
118.438 56.4736 li
118.638 56.2739 li
118.888 56.124 li
119.138 55.9238 li
119.338 55.7739 li
119.588 55.5737 li
119.838 55.4238 li
120.088 55.2236 li
120.289 55.0737 li
120.539 54.874 li
120.789 54.7236 li
120.988 54.5239 li
121.238 54.374 li
121.488 54.1738 li
121.688 54.0239 li
121.938 53.874 li
122.188 53.6738 li
122.438 53.5239 li
122.638 53.374 li
122.888 53.1738 li
123.138 53.0239 li
123.338 52.874 li
123.588 52.6738 li
123.838 52.5239 li
124.088 52.374 li
124.289 52.1738 li
124.539 52.0239 li
124.789 51.874 li
124.988 51.7236 li
125.238 51.5239 li
125.488 51.374 li
125.738 51.2236 li
125.938 51.0737 li
126.188 50.874 li
126.438 50.7236 li
126.638 50.5737 li
126.888 50.4238 li
127.138 50.2739 li
127.388 50.124 li
127.588 49.9736 li
127.838 49.7739 li
128.088 49.624 li
128.289 49.4736 li
128.539 49.3237 li
128.789 49.1738 li
129.039 49.0239 li
129.238 48.874 li
129.488 48.7236 li
129.738 48.5737 li
129.938 48.4238 li
130.188 48.2739 li
130.438 48.124 li
81.3882 93.1235 mo
81.6382 92.8237 li
81.8882 92.5234 li
82.1382 92.2236 li
82.3384 91.9238 li
82.5884 91.6235 li
82.8384 91.3237 li
83.0381 91.0234 li
83.2881 90.7734 li
83.5381 90.4736 li
83.7881 90.1738 li
83.9883 89.8735 li
84.2383 89.5737 li
84.4883 89.3237 li
84.688 89.0234 li
84.938 88.7236 li
85.188 88.4238 li
85.438 88.1738 li
85.6382 87.8735 li
85.8882 87.5737 li
86.1382 87.3237 li
86.3384 87.0234 li
86.5884 86.7734 li
86.8384 86.4736 li
87.0884 86.1738 li
87.2881 85.9238 li
87.5381 85.6235 li
87.7881 85.3735 li
87.9883 85.0737 li
88.2383 84.8237 li
88.4883 84.5737 li
88.7383 84.2734 li
88.938 84.0234 li
89.1885 83.7236 li
89.4385 83.4736 li
89.6382 83.2236 li
89.8882 82.9233 li
90.1382 82.6733 li
90.3882 82.4233 li
90.5884 82.1235 li
90.8384 81.8735 li
91.0884 81.6235 li
91.2881 81.3735 li
91.5381 81.0737 li
91.7881 80.8237 li
92.0381 80.5737 li
92.2383 80.3237 li
92.4883 80.0732 li
92.7383 79.8232 li
92.9385 79.5732 li
93.1885 79.2734 li
93.4385 79.0234 li
93.6885 78.7734 li
93.8882 78.5234 li
94.1382 78.2734 li
94.3882 78.0234 li
94.5884 77.7734 li
94.8384 77.5234 li
95.0884 77.2734 li
95.3384 77.0234 li
95.5386 76.8232 li
95.7886 76.5732 li
96.0386 76.3232 li
96.2383 76.0732 li
96.4883 75.8232 li
96.7383 75.5732 li
96.9883 75.3232 li
97.1885 75.1235 li
97.4385 74.8735 li
97.6885 74.6235 li
97.8882 74.3735 li
98.1382 74.1235 li
98.3882 73.9233 li
98.6382 73.6733 li
98.8384 73.4233 li
99.0884 73.2236 li
99.3384 72.9736 li
99.5386 72.7236 li
99.7886 72.5234 li
100.039 72.2734 li
100.289 72.0732 li
100.488 71.8232 li
100.738 71.5732 li
100.988 71.3735 li
101.188 71.1235 li
101.438 70.9233 li
101.688 70.6733 li
101.938 70.4736 li
102.138 70.2236 li
102.388 70.0234 li
102.638 69.7734 li
102.838 69.5732 li
103.088 69.3232 li
103.338 69.1235 li
103.588 68.9233 li
103.789 68.6733 li
104.039 68.4736 li
104.289 68.2734 li
104.488 68.0234 li
104.738 67.8232 li
104.988 67.6235 li
105.238 67.3735 li
105.438 67.1733 li
105.688 66.9736 li
105.938 66.7734 li
56.8882 129.974 mo
57.1382 129.574 li
57.3882 129.173 li
57.5884 128.773 li
57.8384 128.324 li
58.0884 127.923 li
58.3384 127.523 li
58.5381 127.125 li
58.7881 126.724 li
59.0381 126.324 li
59.2383 125.923 li
59.4883 125.523 li
59.7383 125.125 li
59.9883 124.724 li
60.188 124.324 li
60.438 123.923 li
60.688 123.574 li
60.8882 123.173 li
61.1382 122.773 li
61.3882 122.375 li
61.6382 121.974 li
61.8384 121.574 li
62.0884 121.224 li
62.3384 120.824 li
62.5381 120.423 li
62.7881 120.074 li
63.0381 119.673 li
63.2383 119.273 li
63.4883 118.923 li
63.7383 118.523 li
63.9883 118.173 li
64.1885 117.773 li
64.4385 117.375 li
64.6885 117.023 li
64.8882 116.625 li
65.1382 116.273 li
65.3882 115.923 li
65.6382 115.523 li
65.8384 115.173 li
66.0884 114.773 li
66.3384 114.423 li
66.5381 114.074 li
66.7881 113.673 li
67.0381 113.324 li
67.2881 112.974 li
67.4883 112.625 li
67.7383 112.224 li
67.9883 111.875 li
68.1885 111.523 li
68.4385 111.173 li
68.6885 110.824 li
68.9385 110.474 li
69.1382 110.074 li
69.3882 109.724 li
69.6382 109.375 li
69.8384 109.023 li
70.0884 108.673 li
70.3384 108.324 li
70.5884 107.974 li
70.7881 107.625 li
71.0381 107.324 li
71.2881 106.974 li
71.4883 106.625 li
71.7383 106.273 li
71.9883 105.923 li
72.2383 105.574 li
72.4385 105.224 li
72.6885 104.923 li
72.9385 104.574 li
73.1382 104.224 li
73.3882 103.923 li
73.6382 103.574 li
73.8882 103.224 li
74.0884 102.923 li
74.3384 102.574 li
74.5884 102.224 li
74.7886 101.923 li
75.0386 101.574 li
75.2886 101.273 li
75.5386 100.923 li
75.7383 100.625 li
75.9883 100.273 li
76.2383 99.9741 li
76.4385 99.6226 li
76.6885 99.3237 li
76.9385 98.9736 li
77.1885 98.6738 li
77.3882 98.373 li
77.6382 98.0234 li
77.8882 97.7236 li
78.0884 97.4238 li
78.3384 97.1235 li
78.5884 96.7734 li
78.8384 96.4736 li
79.0386 96.1733 li
79.2886 95.8735 li
79.5386 95.5732 li
79.7383 95.2236 li
79.9883 94.9233 li
80.2383 94.6235 li
80.4883 94.3232 li
80.6885 94.0234 li
80.9385 93.7236 li
81.1885 93.4233 li
81.3882 93.1235 li
32.3882 174.324 mo
32.6382 174.125 li
32.8384 173.824 li
33.0884 173.523 li
33.3384 173.173 li
33.5884 172.875 li
33.7881 172.474 li
34.0381 172.125 li
34.2881 171.773 li
34.4883 171.375 li
34.7383 170.974 li
34.9883 170.574 li
35.2383 170.173 li
35.438 169.773 li
35.688 169.375 li
35.938 168.974 li
36.1382 168.523 li
36.3882 168.125 li
36.6382 167.673 li
36.8882 167.273 li
37.0884 166.824 li
37.3384 166.423 li
37.5884 165.974 li
37.7881 165.523 li
38.0381 165.125 li
38.2881 164.673 li
38.5381 164.224 li
38.7383 163.773 li
38.9883 163.324 li
39.2383 162.875 li
39.438 162.423 li
39.688 161.974 li
39.9385 161.523 li
40.1885 161.125 li
40.3882 160.673 li
40.6382 160.224 li
40.8882 159.773 li
41.0884 159.324 li
41.3384 158.875 li
41.5884 158.375 li
41.8384 157.923 li
42.0381 157.474 li
42.2881 157.023 li
42.5381 156.574 li
42.7383 156.125 li
42.9883 155.673 li
43.2383 155.224 li
43.4883 154.773 li
43.6885 154.324 li
43.9385 153.875 li
44.1885 153.423 li
44.3882 152.974 li
44.6382 152.523 li
44.8882 152.074 li
45.1382 151.625 li
45.3384 151.173 li
45.5884 150.724 li
45.8384 150.273 li
46.0381 149.824 li
46.2881 149.375 li
46.5381 148.923 li
46.7881 148.474 li
46.9883 148.023 li
47.2383 147.574 li
47.4883 147.125 li
47.6885 146.724 li
47.9385 146.273 li
48.1885 145.824 li
48.4385 145.375 li
48.6382 144.923 li
48.8882 144.474 li
49.1382 144.023 li
49.3384 143.625 li
49.5884 143.173 li
49.8384 142.724 li
50.0884 142.273 li
50.2886 141.875 li
50.5386 141.423 li
50.7886 140.974 li
50.9883 140.523 li
51.2383 140.125 li
51.4883 139.673 li
51.7383 139.224 li
51.9385 138.824 li
52.1885 138.375 li
52.4385 137.974 li
52.6382 137.523 li
52.8882 137.125 li
53.1382 136.673 li
53.3882 136.224 li
53.5884 135.824 li
53.8384 135.375 li
54.0884 134.974 li
54.2886 134.574 li
54.5386 134.125 li
54.7886 133.724 li
55.0386 133.273 li
55.2383 132.875 li
55.4883 132.474 li
55.7383 132.023 li
55.9385 131.625 li
56.1885 131.224 li
56.4385 130.824 li
56.6885 130.375 li
56.8882 129.974 li
@
0.125 lw
[0.5 1 ] 0 dsh
252.988 14.4238 mo
253.238 14.2734 li
253.438 14.0737 li
253.688 13.9238 li
253.938 13.7734 li
254.188 13.5737 li
254.389 13.4238 li
254.639 13.2236 li
254.889 13.0737 li
255.088 12.8735 li
255.338 12.7236 li
255.588 12.5737 li
255.838 12.3735 li
256.039 12.2236 li
256.289 12.0234 li
256.539 11.8735 li
256.738 11.7236 li
256.988 11.5234 li
257.238 11.3735 li
257.488 11.1738 li
257.688 11.0234 li
257.938 10.8237 li
258.188 10.6738 li
258.389 10.5234 li
258.639 10.3237 li
258.889 10.1738 li
259.139 9.97363 li
259.338 9.82373 li
259.588 9.67383 li
259.838 9.47363 li
260.039 9.32373 li
260.289 9.12354 li
260.539 8.97363 li
260.789 8.77344 li
260.988 8.62354 li
261.238 8.47363 li
261.488 8.27344 li
261.688 8.12354 li
261.938 7.92383 li
262.188 7.77344 li
262.438 7.62354 li
262.639 7.42383 li
262.889 7.27344 li
263.139 7.07373 li
263.338 6.92383 li
263.588 6.72363 li
263.838 6.57373 li
264.088 6.42383 li
264.289 6.22363 li
264.539 6.07373 li
264.789 5.87354 li
264.988 5.72363 li
265.238 5.57373 li
265.488 5.37354 li
265.738 5.22363 li
265.938 5.02393 li
266.188 4.87354 li
266.438 4.67383 li
266.639 4.52393 li
266.889 4.37354 li
267.139 4.17383 li
267.389 4.02393 li
267.588 3.82373 li
267.838 3.67383 li
228.488 32.2236 mo
228.738 32.0234 li
228.938 31.8735 li
229.188 31.6738 li
229.438 31.5234 li
229.639 31.3237 li
229.889 31.1738 li
230.139 31.0234 li
230.389 30.8237 li
230.588 30.6738 li
230.838 30.4736 li
231.088 30.3237 li
231.289 30.1738 li
231.539 29.9736 li
231.789 29.8237 li
232.039 29.6235 li
232.238 29.4736 li
232.488 29.2734 li
232.738 29.1235 li
232.938 28.9736 li
233.188 28.7734 li
233.438 28.6235 li
233.688 28.4238 li
233.889 28.2734 li
234.139 28.1235 li
234.389 27.9238 li
234.588 27.7734 li
234.838 27.5737 li
235.088 27.4238 li
235.338 27.2236 li
235.539 27.0737 li
235.789 26.9238 li
236.039 26.7236 li
236.238 26.5737 li
236.488 26.3735 li
236.738 26.2236 li
236.988 26.0737 li
237.188 25.8735 li
237.438 25.7236 li
237.688 25.5234 li
237.889 25.3735 li
238.139 25.1738 li
238.389 25.0234 li
238.588 24.8735 li
238.838 24.6738 li
239.088 24.5234 li
239.338 24.3237 li
239.539 24.1738 li
239.789 24.0239 li
240.039 23.8237 li
240.238 23.6738 li
240.488 23.4736 li
240.738 23.3237 li
240.988 23.1235 li
241.188 22.9736 li
241.438 22.8237 li
241.688 22.6235 li
241.889 22.4736 li
242.139 22.2739 li
242.389 22.1235 li
242.639 21.9736 li
242.838 21.7739 li
243.088 21.6235 li
243.338 21.4238 li
243.539 21.2739 li
243.789 21.0737 li
244.039 20.9238 li
244.289 20.7739 li
244.488 20.5737 li
244.738 20.4238 li
244.988 20.2236 li
245.188 20.0737 li
245.438 19.9238 li
245.688 19.7236 li
245.938 19.5737 li
246.139 19.374 li
246.389 19.2236 li
246.639 19.0239 li
246.838 18.874 li
247.088 18.7236 li
247.338 18.5239 li
247.588 18.374 li
247.789 18.1738 li
248.039 18.0239 li
248.289 17.874 li
248.488 17.6738 li
248.738 17.5239 li
248.988 17.3237 li
249.238 17.1738 li
249.438 16.9736 li
249.688 16.8237 li
249.938 16.6738 li
250.139 16.4736 li
250.389 16.3237 li
250.639 16.124 li
250.889 15.9736 li
251.088 15.8237 li
251.338 15.624 li
251.588 15.4736 li
251.789 15.2739 li
252.039 15.124 li
252.289 14.9238 li
252.539 14.7739 li
252.738 14.624 li
252.988 14.4238 li
203.988 49.9736 mo
204.188 49.7734 li
204.438 49.6235 li
204.688 49.4736 li
204.889 49.2734 li
205.139 49.1235 li
205.389 48.9238 li
205.639 48.7734 li
205.838 48.6235 li
206.088 48.4238 li
206.338 48.2734 li
206.539 48.0737 li
206.789 47.9238 li
207.039 47.7236 li
207.289 47.5737 li
207.488 47.4238 li
207.738 47.2236 li
207.988 47.0737 li
208.188 46.8735 li
208.438 46.7236 li
208.688 46.5737 li
208.938 46.3735 li
209.139 46.2236 li
209.389 46.0234 li
209.639 45.8735 li
209.838 45.6738 li
210.088 45.5234 li
210.338 45.3735 li
210.588 45.1738 li
210.789 45.0234 li
211.039 44.8237 li
211.289 44.6738 li
211.488 44.5234 li
211.738 44.3237 li
211.988 44.1738 li
212.238 43.9736 li
212.438 43.8237 li
212.688 43.6235 li
212.938 43.4736 li
213.139 43.3237 li
213.389 43.1235 li
213.639 42.9736 li
213.889 42.7734 li
214.088 42.6235 li
214.338 42.4736 li
214.588 42.2734 li
214.789 42.1235 li
215.039 41.9238 li
215.289 41.7734 li
215.539 41.5737 li
215.738 41.4238 li
215.988 41.2739 li
216.238 41.0737 li
216.438 40.9238 li
216.688 40.7236 li
216.938 40.5737 li
217.188 40.4238 li
217.389 40.2236 li
217.639 40.0737 li
217.889 39.8735 li
218.088 39.7236 li
218.338 39.5239 li
218.588 39.3735 li
218.838 39.2236 li
219.039 39.0239 li
219.289 38.8735 li
219.539 38.6738 li
219.738 38.5239 li
219.988 38.3735 li
220.238 38.1738 li
220.488 38.0239 li
220.688 37.8237 li
220.938 37.6738 li
221.188 37.4736 li
221.389 37.3237 li
221.639 37.1738 li
221.889 36.9736 li
222.139 36.8237 li
222.338 36.624 li
222.588 36.4736 li
222.838 36.3237 li
223.039 36.124 li
223.289 35.9736 li
223.539 35.7739 li
223.789 35.624 li
223.988 35.4238 li
224.238 35.2739 li
224.488 35.124 li
224.688 34.9238 li
224.938 34.7739 li
225.188 34.5737 li
225.438 34.4238 li
225.639 34.2739 li
225.889 34.0737 li
226.139 33.9238 li
226.338 33.7236 li
226.588 33.5737 li
226.838 33.374 li
227.088 33.2236 li
227.289 33.0737 li
227.539 32.874 li
227.789 32.7236 li
227.988 32.5239 li
228.238 32.374 li
228.488 32.2236 li
179.438 67.7236 mo
179.688 67.5737 li
179.938 67.3735 li
180.139 67.2236 li
180.389 67.0234 li
180.639 66.8735 li
180.889 66.7236 li
181.088 66.5234 li
181.338 66.3735 li
181.588 66.1738 li
181.789 66.0234 li
182.039 65.8735 li
182.289 65.6738 li
182.539 65.5234 li
182.738 65.3237 li
182.988 65.1738 li
183.238 64.9736 li
183.438 64.8237 li
183.688 64.6738 li
183.938 64.4736 li
184.188 64.3237 li
184.389 64.1235 li
184.639 63.9736 li
184.889 63.8237 li
185.088 63.6235 li
185.338 63.4736 li
185.588 63.2734 li
185.838 63.1235 li
186.039 62.9238 li
186.289 62.7734 li
186.539 62.6235 li
186.738 62.4238 li
186.988 62.2734 li
187.238 62.0737 li
187.488 61.9238 li
187.688 61.7734 li
187.938 61.5737 li
188.188 61.4238 li
188.389 61.2236 li
188.639 61.0737 li
188.889 60.8735 li
189.139 60.7236 li
189.338 60.5737 li
189.588 60.3735 li
189.838 60.2236 li
190.039 60.0234 li
190.289 59.8735 li
190.539 59.7236 li
190.789 59.5234 li
190.988 59.3735 li
191.238 59.1738 li
191.488 59.0234 li
191.688 58.8735 li
191.938 58.6738 li
192.188 58.5239 li
192.438 58.3237 li
192.639 58.1738 li
192.889 57.9736 li
193.139 57.8237 li
193.338 57.6738 li
193.588 57.4736 li
193.838 57.3237 li
194.088 57.1235 li
194.289 56.9736 li
194.539 56.8237 li
194.789 56.6235 li
194.988 56.4736 li
195.238 56.2739 li
195.488 56.1235 li
195.738 55.9238 li
195.938 55.7739 li
196.188 55.6235 li
196.438 55.4238 li
196.639 55.2739 li
196.889 55.0737 li
197.139 54.9238 li
197.389 54.7739 li
197.588 54.5737 li
197.838 54.4238 li
198.088 54.2236 li
198.289 54.0737 li
198.539 53.874 li
198.789 53.7236 li
199.039 53.5737 li
199.238 53.374 li
199.488 53.2236 li
199.738 53.0239 li
199.938 52.874 li
200.188 52.7236 li
200.438 52.5239 li
200.688 52.374 li
200.889 52.1738 li
201.139 52.0239 li
201.389 51.8237 li
201.588 51.6738 li
201.838 51.5239 li
202.088 51.3237 li
202.338 51.1738 li
202.539 50.9736 li
202.789 50.8237 li
203.039 50.6738 li
203.238 50.4736 li
203.488 50.3237 li
203.738 50.124 li
203.988 49.9736 li
154.938 85.4736 mo
155.188 85.3237 li
155.438 85.1738 li
155.639 84.9736 li
155.889 84.8237 li
156.139 84.6235 li
156.338 84.4736 li
156.588 84.3237 li
156.838 84.1235 li
157.088 83.9736 li
157.289 83.7734 li
157.539 83.6235 li
157.789 83.4238 li
157.988 83.2734 li
158.238 83.1235 li
158.488 82.9238 li
158.738 82.7734 li
158.938 82.5737 li
159.188 82.4238 li
159.438 82.2734 li
159.639 82.0737 li
159.889 81.9238 li
160.139 81.7236 li
160.389 81.5737 li
160.588 81.3735 li
160.838 81.2236 li
161.088 81.0737 li
161.289 80.8735 li
161.539 80.7236 li
161.789 80.5234 li
162.039 80.3735 li
162.238 80.2236 li
162.488 80.0234 li
162.738 79.8735 li
162.938 79.6738 li
163.188 79.5234 li
163.438 79.3237 li
163.688 79.1738 li
163.889 79.0234 li
164.139 78.8237 li
164.389 78.6738 li
164.588 78.4736 li
164.838 78.3237 li
165.088 78.1738 li
165.338 77.9736 li
165.539 77.8237 li
165.789 77.6235 li
166.039 77.4736 li
166.238 77.2739 li
166.488 77.1235 li
166.738 76.9736 li
166.988 76.7739 li
167.188 76.6235 li
167.438 76.4238 li
167.688 76.2739 li
167.889 76.1235 li
168.139 75.9238 li
168.389 75.7739 li
168.639 75.5737 li
168.838 75.4238 li
169.088 75.2236 li
169.338 75.0737 li
169.539 74.9238 li
169.789 74.7236 li
170.039 74.5737 li
170.289 74.3735 li
170.488 74.2236 li
170.738 74.0737 li
170.988 73.8735 li
171.188 73.7236 li
171.438 73.5239 li
171.688 73.3735 li
171.938 73.1738 li
172.139 73.0239 li
172.389 72.874 li
172.639 72.6738 li
172.838 72.5239 li
173.088 72.3237 li
173.338 72.1738 li
173.588 72.0239 li
173.789 71.8237 li
174.039 71.6738 li
174.289 71.4736 li
174.488 71.3237 li
174.738 71.124 li
174.988 70.9736 li
175.238 70.8237 li
175.438 70.624 li
175.688 70.4736 li
175.938 70.2739 li
176.139 70.124 li
176.389 69.9736 li
176.639 69.7739 li
176.889 69.624 li
177.088 69.4238 li
177.338 69.2739 li
177.588 69.0737 li
177.789 68.9238 li
178.039 68.7739 li
178.289 68.5737 li
178.539 68.4238 li
178.738 68.2236 li
178.988 68.0737 li
179.238 67.9238 li
179.438 67.7236 li
130.438 103.273 mo
130.688 103.074 li
130.888 102.923 li
131.138 102.773 li
131.388 102.574 li
131.588 102.423 li
131.838 102.224 li
132.088 102.074 li
132.338 101.875 li
132.538 101.724 li
132.788 101.574 li
133.038 101.375 li
133.238 101.224 li
133.488 101.023 li
133.738 100.875 li
133.988 100.724 li
134.188 100.523 li
134.438 100.375 li
134.688 100.173 li
134.888 100.023 li
135.138 99.8237 li
135.388 99.6733 li
135.638 99.5229 li
135.838 99.3237 li
136.088 99.1733 li
136.338 98.9736 li
136.538 98.8232 li
136.788 98.6738 li
137.038 98.4736 li
137.288 98.3232 li
137.488 98.123 li
137.738 97.9736 li
137.988 97.7734 li
138.188 97.623 li
138.438 97.4736 li
138.688 97.2734 li
138.938 97.1235 li
139.139 96.9233 li
139.389 96.7734 li
139.639 96.6235 li
139.838 96.4233 li
140.088 96.2734 li
140.338 96.0732 li
140.588 95.9233 li
140.789 95.7236 li
141.039 95.5732 li
141.289 95.4233 li
141.488 95.2236 li
141.738 95.0732 li
141.988 94.8735 li
142.238 94.7236 li
142.438 94.5732 li
142.688 94.3735 li
142.938 94.2236 li
143.139 94.0234 li
143.389 93.8735 li
143.639 93.6733 li
143.889 93.5234 li
144.088 93.3735 li
144.338 93.1733 li
144.588 93.0234 li
144.789 92.8232 li
145.039 92.6733 li
145.289 92.5234 li
145.539 92.3232 li
145.738 92.1733 li
145.988 91.9736 li
146.238 91.8232 li
146.438 91.6235 li
146.688 91.4736 li
146.938 91.3237 li
147.188 91.1235 li
147.389 90.9736 li
147.639 90.7734 li
147.889 90.6235 li
148.088 90.4736 li
148.338 90.2734 li
148.588 90.1235 li
148.838 89.9233 li
149.039 89.7734 li
149.289 89.5737 li
149.539 89.4233 li
149.738 89.2734 li
149.988 89.0737 li
150.238 88.9233 li
150.488 88.7236 li
150.688 88.5737 li
150.938 88.4233 li
151.188 88.2236 li
151.389 88.0737 li
151.639 87.8735 li
151.889 87.7236 li
152.139 87.5234 li
152.338 87.3735 li
152.588 87.2236 li
152.838 87.0234 li
153.039 86.8735 li
153.289 86.6738 li
153.539 86.5234 li
153.789 86.3735 li
153.988 86.1738 li
154.238 86.0234 li
154.488 85.8237 li
154.688 85.6738 li
154.938 85.4736 li
105.938 121.023 mo
106.138 120.875 li
106.388 120.673 li
106.638 120.523 li
106.888 120.324 li
107.088 120.173 li
107.338 120.023 li
107.588 119.824 li
107.788 119.673 li
108.038 119.474 li
108.288 119.324 li
108.538 119.125 li
108.738 118.974 li
108.988 118.824 li
109.238 118.625 li
109.438 118.474 li
109.688 118.273 li
109.938 118.125 li
110.188 117.974 li
110.388 117.773 li
110.638 117.625 li
110.888 117.423 li
111.088 117.273 li
111.338 117.125 li
111.588 116.923 li
111.838 116.773 li
112.038 116.574 li
112.288 116.423 li
112.538 116.224 li
112.738 116.074 li
112.988 115.923 li
113.238 115.724 li
113.488 115.574 li
113.688 115.373 li
113.938 115.224 li
114.188 115.074 li
114.388 114.873 li
114.638 114.724 li
114.888 114.523 li
115.138 114.373 li
115.338 114.173 li
115.588 114.023 li
115.838 113.873 li
116.038 113.673 li
116.288 113.523 li
116.538 113.324 li
116.788 113.173 li
116.988 113.023 li
117.238 112.824 li
117.488 112.673 li
117.688 112.474 li
117.938 112.324 li
118.188 112.123 li
118.438 111.974 li
118.638 111.824 li
118.888 111.623 li
119.138 111.474 li
119.338 111.273 li
119.588 111.123 li
119.838 110.974 li
120.088 110.773 li
120.289 110.623 li
120.539 110.423 li
120.789 110.273 li
120.988 110.074 li
121.238 109.923 li
121.488 109.773 li
121.688 109.574 li
121.938 109.423 li
122.188 109.224 li
122.438 109.074 li
122.638 108.923 li
122.888 108.724 li
123.138 108.574 li
123.338 108.373 li
123.588 108.224 li
123.838 108.023 li
124.088 107.873 li
124.289 107.724 li
124.539 107.523 li
124.789 107.373 li
124.988 107.173 li
125.238 107.023 li
125.488 106.873 li
125.738 106.673 li
125.938 106.523 li
126.188 106.324 li
126.438 106.173 li
126.638 105.974 li
126.888 105.824 li
127.138 105.673 li
127.388 105.474 li
127.588 105.324 li
127.838 105.123 li
128.088 104.974 li
128.289 104.824 li
128.539 104.623 li
128.789 104.474 li
129.039 104.273 li
129.238 104.123 li
129.488 103.923 li
129.738 103.773 li
129.938 103.623 li
130.188 103.423 li
130.438 103.273 li
81.3882 138.773 mo
81.6382 138.625 li
81.8882 138.474 li
82.1382 138.273 li
82.3384 138.125 li
82.5884 137.923 li
82.8384 137.773 li
83.0381 137.574 li
83.2881 137.423 li
83.5381 137.273 li
83.7881 137.074 li
83.9883 136.923 li
84.2383 136.724 li
84.4883 136.574 li
84.688 136.423 li
84.938 136.224 li
85.188 136.074 li
85.438 135.875 li
85.6382 135.724 li
85.8882 135.523 li
86.1382 135.373 li
86.3384 135.224 li
86.5884 135.023 li
86.8384 134.873 li
87.0884 134.673 li
87.2881 134.523 li
87.5381 134.373 li
87.7881 134.173 li
87.9883 134.023 li
88.2383 133.824 li
88.4883 133.673 li
88.7383 133.474 li
88.938 133.324 li
89.1885 133.173 li
89.4385 132.974 li
89.6382 132.824 li
89.8882 132.623 li
90.1382 132.474 li
90.3882 132.324 li
90.5884 132.123 li
90.8384 131.974 li
91.0884 131.773 li
91.2881 131.623 li
91.5381 131.423 li
91.7881 131.273 li
92.0381 131.123 li
92.2383 130.923 li
92.4883 130.773 li
92.7383 130.574 li
92.9385 130.423 li
93.1885 130.273 li
93.4385 130.074 li
93.6885 129.923 li
93.8882 129.724 li
94.1382 129.574 li
94.3882 129.373 li
94.5884 129.224 li
94.8384 129.074 li
95.0884 128.873 li
95.3384 128.724 li
95.5386 128.523 li
95.7886 128.373 li
96.0386 128.224 li
96.2383 128.023 li
96.4883 127.873 li
96.7383 127.673 li
96.9883 127.523 li
97.1885 127.324 li
97.4385 127.173 li
97.6885 127.023 li
97.8882 126.824 li
98.1382 126.673 li
98.3882 126.474 li
98.6382 126.324 li
98.8384 126.173 li
99.0884 125.974 li
99.3384 125.824 li
99.5386 125.623 li
99.7886 125.474 li
100.039 125.273 li
100.289 125.123 li
100.488 124.974 li
100.738 124.773 li
100.988 124.623 li
101.188 124.423 li
101.438 124.273 li
101.688 124.123 li
101.938 123.923 li
102.138 123.773 li
102.388 123.574 li
102.638 123.423 li
102.838 123.224 li
103.088 123.074 li
103.338 122.923 li
103.588 122.724 li
103.789 122.574 li
104.039 122.373 li
104.289 122.224 li
104.488 122.074 li
104.738 121.873 li
104.988 121.724 li
105.238 121.523 li
105.438 121.373 li
105.688 121.173 li
105.938 121.023 li
56.8882 156.574 mo
57.1382 156.375 li
57.3882 156.224 li
57.5884 156.023 li
57.8384 155.875 li
58.0884 155.724 li
58.3384 155.523 li
58.5381 155.375 li
58.7881 155.173 li
59.0381 155.023 li
59.2383 154.875 li
59.4883 154.673 li
59.7383 154.523 li
59.9883 154.324 li
60.188 154.173 li
60.438 153.974 li
60.688 153.824 li
60.8882 153.673 li
61.1382 153.474 li
61.3882 153.324 li
61.6382 153.125 li
61.8384 152.974 li
62.0884 152.824 li
62.3384 152.623 li
62.5381 152.474 li
62.7881 152.273 li
63.0381 152.123 li
63.2383 151.923 li
63.4883 151.773 li
63.7383 151.623 li
63.9883 151.423 li
64.1885 151.273 li
64.4385 151.074 li
64.6885 150.923 li
64.8882 150.773 li
65.1382 150.574 li
65.3882 150.423 li
65.6382 150.224 li
65.8384 150.074 li
66.0884 149.873 li
66.3384 149.724 li
66.5381 149.574 li
66.7881 149.373 li
67.0381 149.224 li
67.2881 149.023 li
67.4883 148.873 li
67.7383 148.724 li
67.9883 148.523 li
68.1885 148.373 li
68.4385 148.173 li
68.6885 148.023 li
68.9385 147.824 li
69.1382 147.673 li
69.3882 147.523 li
69.6382 147.324 li
69.8384 147.173 li
70.0884 146.974 li
70.3384 146.824 li
70.5884 146.673 li
70.7881 146.474 li
71.0381 146.324 li
71.2881 146.123 li
71.4883 145.974 li
71.7383 145.773 li
71.9883 145.623 li
72.2383 145.474 li
72.4385 145.273 li
72.6885 145.123 li
72.9385 144.923 li
73.1382 144.773 li
73.3882 144.623 li
73.6382 144.423 li
73.8882 144.273 li
74.0884 144.074 li
74.3384 143.923 li
74.5884 143.724 li
74.7886 143.574 li
75.0386 143.423 li
75.2886 143.224 li
75.5386 143.074 li
75.7383 142.873 li
75.9883 142.724 li
76.2383 142.574 li
76.4385 142.373 li
76.6885 142.224 li
76.9385 142.023 li
77.1885 141.873 li
77.3882 141.673 li
77.6382 141.523 li
77.8882 141.373 li
78.0884 141.173 li
78.3384 141.023 li
78.5884 140.824 li
78.8384 140.673 li
79.0386 140.523 li
79.2886 140.324 li
79.5386 140.173 li
79.7383 139.974 li
79.9883 139.824 li
80.2383 139.623 li
80.4883 139.474 li
80.6885 139.324 li
80.9385 139.123 li
81.1885 138.974 li
81.3882 138.773 li
32.3882 174.324 mo
32.6382 174.173 li
32.8384 173.974 li
33.0884 173.824 li
33.3384 173.625 li
33.5884 173.474 li
33.7881 173.324 li
34.0381 173.125 li
34.2881 172.974 li
34.4883 172.773 li
34.7383 172.625 li
34.9883 172.423 li
35.2383 172.273 li
35.438 172.125 li
35.688 171.923 li
35.938 171.773 li
36.1382 171.574 li
36.3882 171.423 li
36.6382 171.273 li
36.8882 171.074 li
37.0884 170.923 li
37.3384 170.724 li
37.5884 170.574 li
37.7881 170.373 li
38.0381 170.224 li
38.2881 170.074 li
38.5381 169.873 li
38.7383 169.724 li
38.9883 169.523 li
39.2383 169.373 li
39.438 169.224 li
39.688 169.023 li
39.9385 168.873 li
40.1885 168.673 li
40.3882 168.523 li
40.6382 168.324 li
40.8882 168.173 li
41.0884 168.023 li
41.3384 167.824 li
41.5884 167.673 li
41.8384 167.474 li
42.0381 167.324 li
42.2881 167.173 li
42.5381 166.974 li
42.7383 166.824 li
42.9883 166.623 li
43.2383 166.474 li
43.4883 166.273 li
43.6885 166.123 li
43.9385 165.974 li
44.1885 165.773 li
44.3882 165.623 li
44.6382 165.423 li
44.8882 165.273 li
45.1382 165.123 li
45.3384 164.923 li
45.5884 164.773 li
45.8384 164.574 li
46.0381 164.423 li
46.2881 164.224 li
46.5381 164.074 li
46.7881 163.923 li
46.9883 163.724 li
47.2383 163.574 li
47.4883 163.373 li
47.6885 163.224 li
47.9385 163.074 li
48.1885 162.873 li
48.4385 162.724 li
48.6382 162.523 li
48.8882 162.373 li
49.1382 162.173 li
49.3384 162.023 li
49.5884 161.873 li
49.8384 161.673 li
50.0884 161.523 li
50.2886 161.324 li
50.5386 161.173 li
50.7886 161.023 li
50.9883 160.824 li
51.2383 160.673 li
51.4883 160.474 li
51.7383 160.324 li
51.9385 160.123 li
52.1885 159.974 li
52.4385 159.824 li
52.6382 159.623 li
52.8882 159.474 li
53.1382 159.273 li
53.3882 159.123 li
53.5884 158.974 li
53.8384 158.773 li
54.0884 158.623 li
54.2886 158.423 li
54.5386 158.273 li
54.7886 158.074 li
55.0386 157.923 li
55.2383 157.773 li
55.4883 157.574 li
55.7383 157.423 li
55.9385 157.224 li
56.1885 157.074 li
56.4385 156.923 li
56.6885 156.724 li
56.8882 156.574 li
@
0.5 lw
[] 0 dsh
32.3882 3.67383 mo
32.3882 174.324 li
267.838 174.324 li
267.838 3.67383 li
32.3882 3.67383 li
32.3882 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWGN+Helvetica*1 uf/DVPWGN+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (roc.eps)%%CreationDate: 10/4/10 2:27 PM%AI9_DataStream%Gb!R&pO4SRcR=0YJ9uel,S15TUScJgHd>;-5S=\2KX.5`hES_is"&M%V@R7/ot4r)h^5#D\B'sebE<SM(OP1[Ze^$_pAW;Ajbt0Y%EnR+_.7#P`"iB6Sp3CFeLQbQ_8d6H]M+fCa6eH,tQcl5P/*1)Ir8$Xu:'\I%CH*m<3k`?`+"VU#NA'71[FZEBn8>;u:M\Hte:gC/%j*nblDDeOEKtYuW[G>OsH\:e`.%!Xu!0`]2ijdfY*fn'C>D%<"PL9G3T5i[g_tn^1+2m%CGd#lcN16qJe=oubmi+D2_Lp&grdN65%NDO7b`A21,l0.P#lq'Ah,r/Y!;UF<C-EF+$rZ\2E=nF!fagnbuN'*W>hV5rqTK[,b\rT]dm:GUqhl2Z?R#J&0:8EJV/d7mF]8h`Z%8;N8F640T1=tl/fa>6TJej&QQJ+CFNHDB::onFQa];P$#Ti5AR\nM*Sl?QQ6Jsi,qT]b?1CN.g@"(<o47p\:B2-V(AK\rnTl9GFX%s!P-KR35bc#Oec,RN&rc)#BU1AgN9r6DJL%s4nS)!^[&<rDrZuGE#h=VBG_G1)X&Y/?;qG<=LEl>^T-NAl<qDZ</!W%r]p+1MC#g%d7Bf:g@+EH*kajoY;U&Qq<2CS@$Z2uegIc?s#Kp?Bcu^,B[l>4%7\gGFMu@bUr:XaWSm=Lc*2*!N<gg\fjHEQbbCsKd9(V9ohc`l%>"pM\^A]'&rZ8nOP0cEnL!OiZ5'&aZ/<qV_<T1-]_GaHgVlE@\<ib^JGq5EiXE5A0V:0s[:'4NX?*2O1F#h%XjT#N?@Lh8?jT$ft%""a3OT7Bok!EQ0&DjF#bUf7DcC)*=@X6DIR?*2!8C6cG!>"mXCg-]U#:Z5%E>ZCl7p]N/3'79isoSN:+4G+]k-f@7Ni"Pr].7)gE%5/AWEJf_`UPXO_'8qnD'-hJAW!YkJ6FV8GPq>h!#"eU<DXTFHA&%%kRQr&oA#sQJ#V!"QHV!XspUipE3*@$G-rW*f,%mH[414l=R%j;Agip^:3N5<?Z7.can!++1pYkT(Ojp`qEr#^c[hoFF.-.$@_"kXt,q)X/5lQIGXsa,IBd:`ZbGh'cQ"cUmGrjeQ1X?;`O!07lLi%!=na^c:mFB]M3]HSjNJ8'<oRULAhdROE]XsE1hE+0V-m]G6m;$%:jY23DATCSSc_o1/l8!TR9&GPgGu.N_l:r9BZR3V^"P*7bS>S%[!#>.H(R2Hs%(<>B9LqA`gkD1PYf@!aSb/T:>Q;1.CX?CU3,C9T?M16n+lm6\+q#<SBaWm;ONRJ["qTmhWE=\D5HWrooa@;S$FU(%J+/dq79TYg.-(^79E&WDq9Ar&It;Pg73ML]q3T3bhu#/'Qd(]Nfds6eX8a[aa:nQ>r$rQ)DuQ+$$\Z]7!o\XN^Ij4Xk'tK;M>\[i%*6&IPagdMkoG@=]qPS!Q/QFAqLn9<:[@BNZ"[8rSEi,AWi7%P3OG2"G(qu\f;s7:OLV!JeQ;o?B!q3qZk\h>R6;OU1"h2;0J,EZ6%s+NDY&rD+U]D-<`q(LZ:2%^qeG'p&YE3+"^5KlY"K>45Tr&8=5rJc-%d4tt2d)_GbcS,ONG5\iJL4?":nr<\"s"DParGRSkQ#c""%`OGNF_]s"HX.7?&n"d)\>D;\gNLgVOV=ea0ZcH?<jpu3`6qR\$clB`o$>#Rs^Si+h+/hQ)$N?C7TfH!$MPT>;OYXH&pi"1-'7u?E%$9@`r7];g'7b-D>np^++,ZFcBVQlPe[p5`/Tggl*a^7aSl(R=U&CpD6oKMQmC=t;lAN@YW@p5TfEd5%>=u,r$3PG?RYm:,L4L1p[%GeOb"ANYQKXVg49Rl-@KbYUlA]MiPgX(5*goY1J-.2i%&s(/$lAUQ,gD:250E_]cmHMC7XJA8m4oU"Di@;Z4bZ9H.2bil2'S5PGF%$,*7gX_O(EW,@#!^mdrN[mNjrr'G0iYo7^:+`1+4)(M3LZI*$Q/2@kuL%4@TJoiCk1*9`\S5Jr,HCrB$ei[/YRT*"+3TDM:N#U:S%b]>!NiAZZg.e34sc0YN_1=')tXCO\43E(:)Zm7h6brCSk>>e(hP>4!d8i$9XM.nlcoi;m.oMdYQ3\ZR=,nik#7hEitN2rE$V99kr%D]!I]\WiG+WVRGUR?SFZ%>6V&8WN?CRH7C#!<8.i$FF=\\I*0WN45NS'Z.?G4U"kj1'\,UN/0ZT:g[(daCW5N_RhhF?(>A7`;'fA%T"up2Q:l<?k'YD<TX1<6,noMJim<j=X3Xe_0h/`Q#m2\?cl6/cYPtU[\U\Iol<K2/JLXU0(s>QR.$$Zt:$%ae>Le!\V<[\%l2Bb3%cpLd9Wip"WfjNVJb,">C`[,\#-*nbM7lDmi'lXTp;.[&!kY0Qj)27__W<P\<F8^^?D17p&'@!Ml9!TB<TI$\5A;6bfN)j6J.:?!j%9]d:B6=_l%Ysc-UQ`.B",;Yai+=Z#jr]^,crC3Co.eCdY!WNg<;R0QUa!t_rWCk1b\5r,<q-W&[pgokmN17pO"$KVU>8=hQBq<H>%:VO!ILhW5h/Y%g"<lJPVX!EhMH9E.WNY/B9V9h.l?21TmCQ`fM8sP>J"NaV,=!UX=5]+rGS2dipWH;.`:o\6@S:dE%UmsXK1s>`k%CO8SRUmOoqZnqY"eY[9l"_.j`SsMksKN#0*WFWjple9#pr@'C8Q5,8"6qu$77+m0fKjrF^b>LWr7oVC7f<M\WI:g/)]ud[;*8XPl%9^36_;QWBc#1K$a>XosD%d'4Y/W&1?Gmhfl!l5()@Wc5F9MP-,$V$P9BVVbAWM2u59Ck$*[Ph-kTpe/L(lk7X^hhu"+lM##:btq@%$8bOYbqm_4qO3Q(e#Hufd%(Tcd4FAr0JM$T`r1eo>d#_r]0@aK*>QT!gP;$BeetZXSM&>r/E6alK6;#TAQX#17%bGMq4F_m0)o"_%G&%!5qR.?OokgF1pqtBVN4<1G-bD=oDij8KMQh`a[?[i1F<d(*&b'_,XGo88R1(DoV\5=]a;SQQD>MtAhZLD\AN*dc,VJueF\@Hm%afYi_-'Q"m_4YXt-UbD!/]KbQ;A5`PDa4%mlBTKfSL&@l9Ak0$.bM[A:[$YhbUfLM17L^$f.(fo@Vl(]\;KpIXOT^GUUrJK'3j3k%pn(@j<^NfBUfeWB"EXmSq@H9YG@?.^ZB$7eKTliY9C%b<U_51X\C,62R0WOgl@$R<e<$8VS.9k9hE-#&^>gRWXjOX#GR17YjNk=p%C(8qRpJ*6+9./U%om^.aY*(=mgT:L&1/&Gfk]*oXBJnP8:-DaZ2o_Unnp&[P1gA'8MAA`hYrCqNV2e2Aef4!BA,Q;VC&OO&Euab"%*>dS*Kt$Q@JRj\Og(I_/Yuf\Upbos&$TN!Xe&B92P!+EO,Ifl;\&WH7Ua]f*3[Ue8NZ(HK)/ce[rn\P=S#Cn?<jI;?SK*YnK+@N_%fP82V>k3$ml*Nq%IXM21k^Ol*)rL=+o<j4L1r+m0W3g0BdHgfR[,4);ajHd<Cjjn??V/ZM<aDHS)`:i<a[.;!1@3MG*ruT2GK.Ph%G'D/mkhk:"DXr-j"pZ](oP\ZpHu#FMg>*Nls/lkOisu![#^$:%C]>9]L="%Smm#W=leb10rf+[eg!sui46QkAem#&-#1qRfpG!TO%eou&^Bt]N$01(LrVpk'$c\MIFUQmBl_'nN2:&e-`p0`o&S#Ap#ei3S\-Scl#/sQ>XA`@&::4UU_5Acc1N+e14GO4)=TM@t`1*6(,%9/3?KG2lr>\3TVeNB4.:%odVUO6Yse@=mFBk'Zl++1>8RnIL:6qWNooBSlqU"_!9hK^T("1FfJG'ge?P!oFZhlQ/FI,=j0bksQq\%pA9MN>S2oFZ'['4W!O\+*4D'JgLMG@l\tqhpHa_1eJjl!#YPhk%O=9Yh=pbRr8"?57u.\&h:>Z5;+L'Y/h?^13OSm73?3OXo"ei.%O;tK70idHrHJn@U%mDfD"2PT.+j%PlN^1mm0CMIu8G:G?Jq[h*[<;;Wh[2KeBj'WXTU\lCL_d+bEP7!RUm(36)rcS!Dh5g!rtkbC%aAs<N'Rg2GX:1&B(k'o:GFIp.[j:7[2g./Op'8:n\:MR`)jNAaJVK'.k)q+LXnR,q+QlWo`:^o&5rk9'f)+ZbJ+Zk'ZH7-f1TCZp%=jq"5iirGsFl-Ch7?[_^KBDUn`UE9I?KX=?rp"q6V!BHr_e2Bd;`#V9NZL1J_isHYBkNAGeHW^,J$8b#$Uc[[JuA:h8$LW3Ho6ie%FVsol,]=gh@JcZ4JL0UKIakd<b5liV]E_5=5ETJE0C&W;m:+il[CcmYBRjm6+BTVBLEF@U?E_9#B7.XdWIlo>nGbT835mOm:V)5-%es^[`F%qA)keF89K^E"HHMHB&HDup*)8%f8)g2tK4D-O6B+n6FmF2@mr]^<Qs8&+KR'YPbDa#*Da=0ZO7]1D!)lXP/hPHKADnWur%5W0%QFT6&tH@;KL%"ae@i(\XHG:OSd#t`>fiXj>[S;b/M5'X1500\\"(2iR(UP^cZHq`Qq]iuQ]0q8sbiWm_8,gVDnM835e.?OG$%kZ_84Q\cBjO<[Q:^MEH\/J!En5o8cOpd[$!qU"W'[O%"#hlU9KOM#7V,Df-e9#225s*K:mF@j='hrr*EqXTJ.rs<GVUYs%b'PnuW%m5`1u7CiNapj+'=<eiX+f;?idWrAQ([D,XWlL.]Ar]AYBr_BlS^Jf";Y>hPoJ#?KGmo91.pf@8RI&m2d^=E2mheIXrDmd?t\#I-[%\#I-[[jgG=G-qhd=s%rXNuf%"s1Zi=<4'-(rdjN]aq!gWg)*`F\1ZpCd%/`L/[Pc"XZ_+*dnFg>!OR"eYf%BK2?KdF<^3]u&l%p.%'djXKdQNOCNQN_Dj:U'15V`:/#GZlE5_m5L[aOXM@XEQ!dbe^J^ooXSRahYXam[uZ_rG(0Ac$F0)#<p<dm]>Ld&(p3IN=JQ_^LsW%#dl?'eGntO0o,<'XN!cBdi>a+"@ibFpCLog;tq4.L@#O7N@]:/ci;K"_f`mt(F-/S),^F5GK(=5i'Ra^0&fERVRL)Lq";Cd3_7],%Hk<1(COEOYIOIQ<j+"OFYAG9&-2ZmFRN*-Gd4t'BGQ1(t3=Z"IP`T0"iN*"GqJ3"jBB"8ulMi2#ci<$peH,=rcY2NK@ltb(^Ak>]%qfD?_5HKLC")Are0u)3-O7NNibC<Afra4U3iS/k]Mc\rRbQbs[]CEXA(+U8Z"AC2h>P4"t?iSSmN^!B"Y`AL&7Bi:T,r03rld`%s%(*$HRkn_89bPfT)?=!EZ(E<A@Nj+%^O5Bg.e!o6E]/OD"MS5TS2dUhUU^\<PhF8bYgeY,Tn,+!'r)i#coYuMQ$X^d?f9^rn5lL's%I()T<-IRQZD+AK`Ft>Oodt=:G,p;67+-'OLp@p_jDbpGgelB385]>*!$@B&uA-NP13>^2K.VK9CVh<R)2%&m`QUKL.^IKd_[S[M,%;(MDKXqTFk!foZ?U;ES-QO=kBL*+8'3d?Ffrs)bmKVl9qs4'R8g>7&gHmbhgJ>u4r_GA1H5!j3A5+P<F.=FbFV>=Tlg8baQ_$4.?%&X6/i.HqQJD)A28L]'7Pe])OWKQ].2D#[;SB9D,*UK='c1aVIHWsI7&U/"VQJ=6U')p9pH_a*-o0_hO\]PRO.$<EV_;>moYBod_L%;:CH1cDAF)pO-:rDZrp`I6)I^6*@*L8G;AoVJ.B)f8!_12@]PsOU8)FC$Qs!6V"<4D^TW.kn)@f!TTK_?Ec+)p"55.:@MMm?gf3d%(q.3"SN<B3Z6KPGkE8(A.JUomBn36fqkqs]+_ndC48!L/L9JNsd%gnJ`S_"6hB1m!2!BA8og<mfDKOT\e7@5$r>Pm+c!K#^NBWm7%]mj4<5$1OIcB#uJd2OoH:$^^APK1A!iNXr^\(fr^"l!><U>?IY=L^mU6$+PA1lO'H9'd#,/O@EMHH4@NNb:=]&6(D>P1O6OMW/:e%"<51[J[6:hHZ1DWP0P>#]R(k./#O2$h(cu5;XYcf3Htru]pLt-obpsNC2bMO(&(+g<Ysc&&nse]HkVF2HW/,?<UuH"?Tfa.iK2*e%&14sUPsijO+jSAfWJ%l7iXJDK7$EjkkAX(\!"ntbiADXJ0Aq<9kr6B)j%e3MU\[^BKbNbfHUDBa/J58F+!fQZJQ2cAK`,>>HFhaa%/#HQ+#CJb%8La);7$V@.d>HWXh#I$'hM/.p(YXWNbsKn*hCG>bYl3F\)jD(A6p.i[\gm*(fR%CX>!DH@_q4VG]A@a%,rc"->%PNf%F9[RkYD^?f#hDq@V?/(Xe$!`0RLAPVRHP*1[64d!Li5foIImaD@pGkT=Em7GbH`!RW"l_E;su(tI,b+bgp[4ZpK%F\eju;'a$9>&%_E`K*rOdc;Ct'N2nP:P^gK>&cLo!BK$apnmVY:[T[(C6>&%$n,[d/L%[@>eE@-Bp^N/1$UC*IO.jF[tR-6diq$:;T7[O<KNNp%%C%1,QGn#;U)&%pYgY5-Rbubq^Vah,0p"kmuWs>rTdj%hkU5%3W6uFbkeZ,lL![lQT;:rO$&4gJ87%_?I.3G*q`I`"9f7V%?^Jm8c*)%7hf4k&dQ[td)`o+*Q9`OeSg41kF*@I$**n]^43c:5*"87I8F4bTh&;,FZFH,\4?a@>-CIC6[S$/n5n]1k2c/92#*-kTr()/_YTtY%<s=IN]Bcc6_%K;7QZJ>k8(T6_Be2?Kd"75!j;bEmo4nKnAOs<gK<N%Bj[&bc+J,Y'7.5=gUP.+mDig8[X+/;8;QM,H,]!SP-.lWD%2RL_P607.q]M]3q]iR"Co8g-C[)X(ClCA\Bb7i35AL'hF:?/h,jMj0=ma-rh#\VZT0M@Pg_D;=]+:fGCm(F1=!>X1/9d]G\0I4(d%_so8EQ"hsB40=!9*EPi0g4nF?.n[;DNY^`+h"hJC*U/SiGFX[%o"RqhCd7D3rBKRALo>A,Q[L&/\Z!a)l"`g^)pB3qOrPp"Y"M*b%hf-tL0Z)25lPQ<UT#;+RHJP-CakAK;2LGf6N*YmqWR6Ulq(5^C'OGFl2mA;V-tX%!\5lOiEOUC2=\Cc4aaR_SOkB*s4Z:mb?,Cq)%Ul-GEq<g!]!,_M]m\?mQf4B421l0'i$sQQu^`=)snF]Z%Ng0FS<sZ`a+JaPm[WEc3<\p,2.,8sokYMOZ+c_:R4FIu9!aLBYTaM[5%]tJ6^gk*WOV8frA0:CJdokRGt`f=)0gE.XT^+%dU=^GYMcIb)R?sVU&*#6Y8\_>['iq[3"r$L6:Z):31o/us`MEIsmL#PV3GCa]]%eju<ci_$TmMX>55Uu^ZD"BUiqQ(hpF:`1=JL6TH[m?<kg[?st#l21,IrPmPa[?nF$V'^[Am68!OK>CU%>O,OD^(t(9c3f8M=+1R2%f=0l-CjE9GY*;Sk^E2Le6DgebTIrsfK9cGt:FQ54\I7d8LZ6Y)#LjR>NJgVDG8LS#>s^]uKjn8UrNKT9lIAp"]$X#BhZ)/r>X'n,%hd6#cEF0@#@Hn)G]BEHq;#^UU@CFn'<$Jlb-)nF+j)1CVQ489Phm99Dlo;FR$S?E$U11Gdok&XB%K3ANd(=L5g@<)>@'Di-+$?]u%Sk)H?,(`9+>0Es8n&iDPgQ07^D5E<^`EgMVe&l;YA63If%+W'%Ss$>t>cjjNj'm-#Wo#hDX)tlHPV,!s]"<*Nl!ECB"(=i0[HMID%]lA('>NnKI8TUt4WYQ+glm`Ht;75Z-V=#J;Bhr.(mRaFm*FIH#=po0ubPTVP[[#EePtP@2E2Ai8b5KoQ$a(1<m+7,7<,VuU``n3p%C",2@OZW60,=bV->)uaBC*B?u-rC&<Y,n!?9r5RrqbED?%j!sHQO];KeC0iNP)RFMXHli^[/G%5<9`h6)Hm)O?g1&DEObek3]C&r%C*D-!Q(hJI9AbMJQ,_B:q(7@odu0,Kj84d`V:saX<'Akn7CCe@FeSZ&$Z!fE1V68UC9P>>=R#D(8ZQI''Pc$rD+V.A`Huq5+5]WJ%YN5?[W\i0`1X/PZ=k,%9>Dnju:&THFS7B[%Wic3qWZ(_[^Ejogj]&1#e^Dq&YFgbSgt(gAPn(Rd>,Fo3/UFhXUWV&d;l*:<8a#0O%^=%Y!qh#%*RFkPdEMR1X=$$$IYbiFS%[B4kdcK=Se=k=\ki/i?OPuH/_EtZ^d\uP8l"00?q;G<;Sojq<Z=RD-@;[A&^5dl,[r)"g%ZZa%K=QrO'ZG,O%Bj800Da*\`;."ukO7uhMTuLic[aN4JKd4W1^[dq\I>:FED53NsoMj3(qg&lZkcZ2%[&rsh]o>!P\o@DNRcKaN%.OGLYcsT[5rIRXO(8a)hG%(j4N<ZC>s'q?dA%?rg=8J1d2,tP#s#ar.#ImrKALk'%>\QrCq;/%OQ,]qrHC526[#`L0V)q%c:FjJ6%8[!6C*CJjr'STt0l'X5bni4e\)l:uN<2j,&U!eUnd_Y])**R&F13]\FlI]&b8H.](%B4MT5$0U@\o>30H&aCT\$$8P`CcCm2l)[-%%B*73o^l>com'cu=@JMCLB:m?JHpg"N391Yhkm:p-+EX2r)@P"Xk>kf=#$M$ofA+O,LO+cE-s-82O\X^oYRmb+7AJZ0F:[i[KuZG%o?1d5Vp1Q_o@'I2kFFiF:eWpuQ4hJ]T8^NKSY'4nkAk`AFc&a,+-iSlgR%*:'?@#';-]fQ>4'VP^"6>R+&9(JAk%uehb.JBV`.8H%9.j#h^EWTTQ!u\a+(aWEmo'`OkGOAJOV>@)P[[E#mFM+#Vt[*Tj&<=tDf%L!eZRNh/ejL.'5pst:Q%5-F+/GJV=n.B-D14sf,`bo%0DBh>N_`$cYu6HCI3)K=(0WcQqP);Cc*B!u8EFd1Vm-]mYjCq&rOg9%7\9@n/Ys6'9&_kcp+75lAk-.YXkE.)AbetO'pJMRJT,n>%[=;'1Na5n%f0[YjoW<;JP8p]hWjfaC9sbfiPjs[1LrC*u/b<GW^%iR8;dc;N<eKd\KA7Ft-nCdbCHBFhMq<0N6=72;eJ5`Z,hnl;%l/@X1lf:pO]7Tb)[q!)(6,\$&YcAJ?#'nn/md&Eg3i]Q5jA7;Zlt"D:Nt.H3rN`I\&12g2W:j6'^?XID`VV1+8lt^m'CW<V>">Z9%,8A+^Z?9Nd=:tpfRSnf2S'0!5][Gb2AslFnePKuF,9#6aka3h'D-SIXUY&XXV$kh"_Qd"OGAsK;]a-]T(V];Vql8I8]2Vs<8ip)]%3sS]\=<#ki&niP5Vb5:+/'T+W>WZ!oqM7GSTPBhOH(9:ee!7&cc(m!T[3XGa6!k%fd`ZC>i1i]AW,ZMPVC7G:@:e4/I@%=+gKjZo%Z[XK,].GH^gX7,S7Pu.,[c3R^n53@n/[;FlDM:E]F3[L9W%#Y<Z!qWr9Nm"]Q!sPs_)7]M'<;&s'`D9krU+oq<^7@4PF:_F[%9HM%\_,=(@U/7kql+P%Ir+d&btD@"VM6X^N#K;!6Vn271u."untT1p_["VR)0K!I/:=B$%qW;c['Ij\-rPM0WtNuJi^Z/P-Gb/'1o`TY%D:G:"^QRXHnK?P$oQHc2,i=V]%SS/".4,ZJJ(/D[Hr"Y35BU]=i6\NSn,\/o/L6?$\?`n?cuJu65B"JWR'hFrVKD\%@g%4=T@E^R%?/*WM5hLoqDM8P7DC1h=7)ISNpRYW8*7e_i=`duP-N`9&:`cZ,NcYeb-_pTD.If+&A-dj*Khpg^euDU><6V(lp"kJfiB)%PpK`/S%+<YI*;=q4j'?`cmZdPuX47PI4CQ)No4C1=Zr@#s)B7$e3OIn#Fj1'>A0=Dn2P$%=W'CB[S@J6j@kKf1\ou2X70@=@T6OjQ^pDJ`H%pBpNk_6Q9$2UfA1X1U?3LN"hhI;u,?2DdslAb\6/*%'oE?FY&%9-ESf0Q*q50qqI4c(cQO3&(]lcfDf<][,t@=dYWCl3k!:juR6S%7,P&On=A4#=(Q1d8Z)+.YtVSBo5X]%90msV?o'D"$dT4;_hgUF4dh\B/[M3eOb.%N4&Tj9Q*dpa<K0&@qt5Xf`GraA5C0S/WtshQ%,XbF=Jro2+2(pQ*\*.PWjON7&e[-l9424"N;&J2om)XTX1/X1)-!A8)2?%;P([\1+[2:3tPut*H_X$!Qeq-haOQ:'An^AmJQ&[ce%jIGbAH2O%Q@2M9`Q-T.!jb3<Gf*Jr"l[$g(1'ApR/2>Pri^Fa2OnHSS;\itDPVc0nan)<q1/Ee,ZVX>&QM$(Mf-S1?j8-J?2-9(.%RC-P$GhWqn#*EE@>7#X?(i>%UX4L*Oq7^WLj/;(_dIraT*4'IGnS,-XF[fg6D-"FWFd=DLNZDt5?X!-c/"`:7>K%0Hjk59I"+H[o%aVN42+b;=(`Ii=31rQ1o)B6P89.u`YE2n1r=C2oqp];aTICn-R4is9XAhn?69AXif4?s>S:_GW3j`1&ZR\U!4UW2Jgh:A%Z0QuHn%M*W2<5E9NlD3K'UC"K:D#lpbMKRN7^r<Rqo;.OsXrOt)8ea;\G,QACG2T`PE4:XS<38$E0*AmRTHltt&b?63XoX==3lRj%V`f6%s%SfH#Sd=c+#_t])#,TrC22e%UPm^6)!Lh1%8H%3n<*4JCCb4WfPI?bp`-F)lbmi,Eb_*UI?$%]>:lrTPEOX8URUYeeb51\V>=@dh,%AA@kuqRa:R!H[ED\u%o.0lLIckkDf:=e=F:KBC#&\>9m#'F<HQQ@4O/5H<a%g>20AbcuSD1d%Ph#Ee+"+1ZU'opKY>L)msi3\L+E%X!iL%%(6A817beD!VHt^WjG8"=I"'fQgLj+if(81+7Nj'N/P),IM]m!fnth.&b*+<U9<TjkEl1!E=MQ%8e)::bDs7CK\^9%C[qL5%q'PPAT?1d7Qkm@a"@2r;A6eM$-[j3s0PMWHD:2u!IEY5&UFp=X*FHB/**!ShgN.AE&Ti'-Zg0T,i0\6!2hfMgKSE'>Q[E>O,F0kS%oaV>Pq]I#d\([f%JkUp92FfRGQ.l[o8Du.ah/2[9C(i7G9Nmn-0lA873&6%_)#mI8Dq]6e:+CK;JZr39es11EF\b6\24kFT<1)&a%%`c3oPJ.?(L!Nf:?"j!jTg;P=>uCIdFeX:#'Xm:Iki6X%kFb4n-`A[rMX%+A7&*unMhb<,+kU$F)N;l/CZ\R.P/X97+?+DcPtqi1%$9L(_:4,Shg[t^W3t9FadB9uIRt^UaW;2Zkm^s(lbV%;YF*Ml!!k2b_B<SfbUI6mX]q"Uk*'7FkoRSAWk%5kp*$*a;h"i4q]L67Q%[di,<Goa]OmeV;MmA,_gC1]/i[Z]$5a9KL&@MT^@HsGr<aASFb$Cc4f-no`(f.Ylq%lo"0bKe]TV^?m[_*#c@B2S%*V2,Tm7"_&5%*<-sm8*_QUa2R_m9-lM2KsciLfrC`qf!Q(%e*!Oa,<;'[IE,DUK&kL2!HVQT%=YO-@K-3S>g8.&eE`jV#!:'t]<TiR-XXj>=O(a2%dRScsX!)5;lWWLr'n^Q)l1]@tYama+BDU0*4CIUNjN1K@261`_p=?SdMPm24Y(k7)(Se;"3Y`GnLE68A$\l5uLER7$aViP&oW<eH%I<F-iI;?EmW/jA3P2?doUVab#D<MaBCDVm(@<&d$-(i<*"(-HDG'XLsOK^NHF)NI&G<4dVEaquTF-1H^?'nrReqN@2375#7CSg(.%<(]->,5lbh)>F$36T[)s*IE'-Q+K&&gS2PYhH-kLB/-^K^+fB@E'>&#f:ajE10633?ANDCPBP6\:1rPr.L,Y]3,AAF)'Lo[r\OX7%b3+_&o2X>/K':=3)>ftY+^Qemp@+@shcI!7G*8W[@:er8q93@4g`u#JNm/f'c96ahhq^#B(co9$Gm#.op<4@@k8loZ,>r06Tk!DH%D$1lgON\J-k8lq0UBP:gTlZ9fF,1U%3/0'J)F;E="_Wae1QJFpNfDoN12@;hHN]lN@5h*nSW/5(E]pUr.Yc53Je%,EXq&S!O[,Ca%mnL"5#MqHRk\dNbYRg6\,g7nfpMKl'6,5R;#7_cf>aSljcWC4SV:U]%*gYZgH*s8jkUmW5r07--WFoK"D>_V<H3'YS?l.Y@k[Z5:%fY<Y&7]YeNB6*Dr`kTkAqWm#lpFoI<8a__%b<8Ya5$q%TA%?WRPL#=N=$J"''=RIIcS7gWoGmQ1T^k,Go5k.E)XQ9`BP+S*mFn,a%oO[?bk0^TY>sU$5O:^aoRmUSXJb>nIoKoe:"NNDqENaTV^5L;*n%\tF@ZIea[1RC.b[ZtY#eLmbFMV.g.M;?Rf:Lcq9Wm)dHRIP>%ni_$,3`2!<98Mi5nmgZhUJ.7qDi]_9EgA;G8OQ>h2oD>$[GQIF#EJ)fKI9g!=1?IFIX\'-=<*s"g>tPZcc3lT\DR$&#NcWu!Y[N0%S)eh:e#XF8*=^3QA>+^f72I%j5'['9UPos^)]s=^_1cJ/VU+e=O5ohhM4%a,i*-a$li'S3\V8*9+*dg>H$Ik87PWM^R0hW5O5/'@%@]icUGZ2gsp`45MQs?2HipDqbg'Eup*t%^TC[@D@Sa;Z6nT+%d5QMobM83;?H7S"d&+2(,r]"u.qb`.E<-6alB$XcugU.\*Aui=@%&Y<(!n-suB4W.]u]L1dC7qc]%)CKFXo@UAQKXc<t^+D'5;/*a'EKeA_M10lm"jT\\JI]4tH",K4R;CnQ4jrK"o5i5..b;,SFI^I"%':O.CKu_k9$lQOTNY,-R`OY5CO/&pL:ofYp9qm^99k`C'%^V(qfJQ7i+S&+%o#QT3a#!s9/Q[:_>%HE?ft\eAfN7p>Qe!L/0sbR/%F(s-7()]X2FE:R>A99S1ACRI2=42J?a1dm!T0J6m\s-R+p"5\R9C7(U8rJYY#9Im1npDuDW,(tHbT910qgL+PA7sj<L?@I\k\ZI8%fDT+?&;K=]OU:f?c^WH/'*n\K;Nln!3)IXZ36+.FrIp^':IjP,eEs<@ZS)d"n\A@37bZYWP`nCp0F'BQFXV;1^gtluZ&SW;lCb:K%r,rN]Z;VU/:T$AMn1hcJ@[=Mb5H_d&n$orsmg\S)J.MSMrd((gm_YD]f6S?$JNB2J\X2NG-<Im:bt73>/.8$-AhXu42t(uNZ^p!_%:YeG/E$"b7bpa\DG^icVo8\Utl_-@D4<4+]'-lLKlBMhY9bf6>EBKc?aiJkiiCN=)3?i@tnSffom*lrFHT[hgQ2k@\RVP$Ud;!NA%[@Aijc?edA(b`<Rl`C:$HpmW5Vg'rr5*8o1Hm/Y>&j#kW?MX/Ko]5u:hTXsO+G=2f4Wuu3EP0l>rs:>-B9K;hS6Nmqpus$6TH';H%Zb[qDi6?uf>j#o7o+!-59PD)4*U-m22FOd+g!J=(;tAnti%$"o6(MXI:A\\Al\Sl10b_.;=O"X9SD'>:B@Fk/%?K8KTrAa0gOO9(%PI$ropI`SrR14-b:4$^TGMV1tHprfp'mm!7_1alk]6_&N)m.O=pe"q8('"X23qTpe_Un$NmFTZh,#[M+B:k3@,?!V,?U:Le,#[M+%D<@r.U3=^<k[q,Ve=/HeUu'<A,5#PC&ZI^1MFbGNIgrcO8ZNO2>H`T93%T<$/=G/;F:GT`$\D]q046uscm9A9HUCLCXYWBo*2])d%1$9A\LFMrUj%cYC6K*=G/S>KGF50jB2&+>Mh4JU6S9TCh^DQ?P6K%uprGkQ.CP5t]Jb;KWRh`JuR-d@f@jctD_.gSrKu.)C!Y%2L%LK>TdYIRtM3/J,D8ka#l[#X3g_UiX.DQX?YJ*=3!#r<d`[o#>%K`0mq/b#9[+`!V8FOnJ4-cd:ALXs%Lc_:.,;^JeO:nL'iqmf<)%D.$!*m1/]D?c'hn,Sf3lI,a8Z&pur2cJ0$Oct-.>ol#SpZb]HJ%n*!H6muaW8j4VKW#A"<(7*d.h%FM_HneS=gJHbQlmgPl@maGe%#H(t=HadCl:U^VA\)Rk6.??1d%+8lLS18Be`F9Q8KM#Au(<abmdGdL?*!->DVHH^>_/=IWPp5d:\jb7CeXUaJ:hb5ql24b2EXI!]%Lp.h5G(%nnh;U*>Ng2p`faju__Lu]X?1i0UZ-pJXC+J@IBkZ[LmF!\cXdj:la5?\X6qd:!D\K!"hUD83l\UD'rB=5!:HU@1+8WY!%QVIfIqGf3uU=;dKq)0h&d$O%M3D5MGQWp3hCNDi7:c@4112S!?m(fV2Agd,m_H5/=Y<6)#9euTNQ-Dqje=g>OY?RH.as:V4>mee#%PFPE!>hRkeg*`HB=7%nNc@11?,a!/R_Q>le/%q.fq=!40f0/W;qraA_^ji,,H^:+hA?m\0kE#5l,f(7,T39Unh:6-pSVO%c:=4/I%lnEL:VR)2W1]"o5,FZo\COtufUZnih.ED@W=&'B&2g+3AbfAB2k*EPIe(KieqD-rA3j0JhjqCJPB18CTRZ9=`n!dUbel,#dg"BMa%+7)+bl0MmDm!O.lMl*gZ$k9HJF,?d#Ml!bn=(.t>3]ka3--X#rl0Ojlf9a$;e%'-aF,[!&;bjS<B!0O'G2qbV@;=5(3kM+55N29m%VR%eq-,+EBBK?BUbrM51DA;\A%,E?jO(^Sd@hbDZi+J"GZ\tZdacSVo1n@o'Sc,*bZUE7[H(2b#H,NcZ&PZn>J?sar[*`t"MEE7\%p>gKfe(L]WNk@T!1nB17qSB/'>A0nY36-kaF2Qsqd<,*=*RLb7'PqI<!%O&If7\,G\ApOYN%:e8V!Eb_9Z)CYgO>sXam>aF@;F-(%13p%ulFcI;o>t'H(Q7Bo.Z,.P1,GIl6meiI5380P'_q0[n'u'GI#A&APK__AI'^.\P7/@[pFU#1FRm]#mWWe?UCO\='8oQEIV<e5%c2If2<F5YpIOoPLR_,Q4TdEBQVpAm$Q$e(%Imcd5j-AhGjtq9Kr^s@Z\f'o=Vk1f/M=+tNF(^c(?4hq@Uq&9a'^ZRi=U6ftRQK,h%m*#@L:R\n0mtEhWa2UnrcP=l%4\Uia2q7-d<G'3GXJcZ+qnV"gfO$0?l<89F.k3R@3LJ7hckK%6(f\HIPs,l2:$;C(Y*BPck9g>^%1VV5qFQei3eOb=HjF%]['3R+b)>.?uOXl`BUAD4:A2#TWcMj+G'ChW'%+Q?2Tho1ho7f=)SoV4p7m;5Y2Z&D[N1,BG/QN%IjfD5,%)Z/_G$"l;f8$Cpd4M/8LnWTHdQY.*Kjq2RqlFGJ)qSKp6UXk_!p2Z2&!i!QoU>bA(1'f[cR3inFfj%RJoAhmmHZ]d/Y[5<XOa)0G%j$!!/gsLoR\i4[u$-=s_d;/aoS&6m`iA"UB_r6rc4C'#@cYl"=+`uY".ha`#(qT8WaP_MNNQ[acQ@N1U<L>pR2/\CpC98MD@hXMN%J3SbK\Gr/[KQkDTZN;?@9'uiSCOnG*\=4YG9B`^q7tbe=oU4[`=5N511YhNA8,F9M'1P/Hkk('Ob*s`La=^EJltg@\E&UFe4T?;e%ghl)]YW67(j8!$KF55"[=NdJ3c@&rYi>L;0VWLQomjOuqRnCr1]6=qrRm""Lf+7UqRORfIbsu0Df0*3FS=-K^\.gdrZcc]hNN8gQ%^iqefj4irp>"4to:7!nLI(OV7%:N,LKVhoaF=qBcHM&t4Q=CtE9GUOg,CUWGkhYL[&Ri"*03Tb^YH,oF;1.+^NSW#RZ1P^&Q"V_P%rG5@PK:&lk$tiB.'uo=@8`gm6=r!ojE@p&(XdKkjMee('X\Je(>[N88dlmP1OmcmWpF,<:W1./^gEQ[^*mHkf:)69*0s8LMOUk['%0-01mk&c[.%i.JpB9.%dHur+VSiQ)h42r!mBp*S!QrLMC8mGp4pY*NY9msV<#@U5ueUqu^LZh$+haJsmgq4&t?5CuYm1dV7"i?t@%KBJJ`]`$":9@%5=95GZW/fA/s,0o^tg!c`BddqagJ3?k7*k%nO?X2k)H.X=E9BTYWC$o4^c989Im:3"I]OL`UU!iSm;HI.RFpc*5%10$qW1<[QN8i]sVWt"K!V</o5`LletQW%SO@j(+NqffInjq0G)VT%+J=&)&+WK5T#S(0^+'_TGl=6J4#7,W:2Yu7Rt\EaiH#Z5<p%YN5AW;s[lIV:(fsGH>m?I,A;lQ'/du@Mmt*`UoE/J`CW2h-2ds.BqqQY+A%VYL+K:ERPLu`&h+<q8$8pfaJbcr!o*Hnafga==0`f%(8[3M/p]Gt0eJr@qrF.Al/^X^7L-CJ"K0H#VUHZ*4.SNm=l8&S_o>%&*<3A*43NsrPM",fVotZ<mf&r_lujN#AS*r.p2DZBR<)g/%SH<q7$`AGYcod)$ARTIRBs&N3P=;=e-DD/,b*nM%'c*E?s-T.=:[^T9rZuqK8]\a8egT\an@k?eT-h)&M'o*_eOtgm=Ii^MB::N2%X1NW./?ZX&bW^*Fgr5fdUOCm).s$V<HE,V7Ir0'_oW\G2>?dJnCUU-'Pr[VfHPc-l]@PL*0o/WsZZ#QIf=E^Jb;.!9U()]i2F`1L%nJs:F\SHc5$pd=G?1PlaMC`KXDMp=9+k<"P*Dd&@?at6kP\6^REn/GPCj-i&O&Ks&\9%A3ZPWc-?-j'^Q)`kUpjPq\N%=R0N*./,%RPiDq(OYHld$Lr;F.V5["3DTRG5@#^1W=hlT\%^%'?"!IPZYl#8Yb[$8&'%^D;<bhK=j,J!X:!u.)0dq;hf<r1aUZHY'V@a$-(;3%^->P)*dN_]L&8p'$hMN8j&hO+*k>lc<G(NlG:_&CKmB1n:.?tAHo_p<XCWn.Cr:st[6m:iTYA-6)$T4_#13>j&r.[.cD\dj^8[h,%rPeh4CJUNQURnT*krT7!D[`:/(,M""5eeOS)_:28$IE3)Yf$OQ7bN#U!I@OgLKi"NM?<Dh"6afelu;g`*Wr@MLACM5S+J'tM)cmD%F3;Q^hkYXKX`1TmjU6b?BQLL,jYLFXqdW4ngeSRGQ';g:ET`\iDdH$2b^L@X-7PQm[]K9Pjg3'93C?\.;j0m6[huMcdN4Ir?rLAr%)M'c4]:g59qFqgK25e'[N*6*k],QXjop`qTeph!jf;Ld'\SSqMqTXCHPcq`KSp*QH-*Nqf<kj/=d^/$-F*Cbt*d9F&olF3e%3@nn%jRm$Ufk0n5kB`^XYFiEk'97R16XE"OXF;tZ/QlCEpKi,V!:cQ1cb2]UQ9"%!F3j.7420,fYFiGIR5lU6QA`)?Zhat?6Smis'-g,N%=oG4V9!dUOF13e^h`s&%?9_LSWe<ll%XJ$.cVc+3a#A@hqlG)AKMlWP]]o"W9q#/4/nSX_]RDJ-6<dQ1C$@:ST6jU'QcM\s;.?.L%Nss'[$)5Ano(on0os5U(C%D,23F"oeAo$2>1jT&d31daRbSlc/mpK6Whk)@$TDLp@+SfZmlc5uAVnZ#kO3_b"K8\i+b.N23V9C*D%<QgKUcb1%%BTCXHH2W,8gWgtGT7IG'=oEGjCeeg1FM%+^;/&u)B@oZ^9p+&R\QtMjoVQ%a4g3aZg:6%QI\'E_F33b2T%.brI!el\%V%"?E26YnJWVF\+R;UNB4g1J<$J1ZqcSk?6MS+DebHXY0qRNXejEB#*oD5_8fk0oHm+*NH]RH'`]hY'KcTS>d/G])=Dlqjen]`*`%:U9g#*7#fUMg9?hlK@L$F<>f,gp?k1=l?4"lfXkicZU%m,-RVc<^2XlY5H=&\RtLJmY.,ZYFeV&jc"K`*(SG'oAgT?:Gf94>eC;)%oD6!JL*4P!Ok7ob0bhq.B$0FP+f-?_TB0Tob.N2k-T7jcg8X]?\bcJuU2-[PlXrSiN!mV%bj4H+RKo?M@^d]+lf[+M*lU-D?9e&@%@(_)Yf((eJG;Li<&B=CS`&&rH*?/l<Y[Q-D@`[BqhAE\'24:gDU(-E7gbIo9#GmFU&/2m]'-Sh:Ah/#Xj7G1q6m;8@2nKi/*`m6:%2^&=9kjoXl<bX8?</Om]O*?^_\=:l4.s\*4>4#UcKp;MS;/Eq00?1FY#<T2kK9$bHEnj`mC9Fie<?E<,V-87o/feP]&(9FSI7$&!%*@@S?op(b`n[o=BjjiO0;n?<"IRr(GnrInKhd;Oa[U75+j2oo(oJfIu9$_j"?0Pqn4=n0^4@KL-j0b/gYje#$%"$0EK5lA40O3r\%h\,3_G-"2W^@tC3dOV#dX(#2Q"N$;t9'^ThqYkMNWB3XOQPJo`Gie$2T3\t^Dlgo1X/@IPB,dspN.h>9m'_@CehW$(T4gc)<=!qU%$OtgNam_n!kT$Z#[[(5S^,4R3j?g,3G%O8G$2GjSkZr"7@kDUl/5-K%h.>j4-urqbBcq6WCM^\XTsplc/ZF&A;jD*U^!jeOHdfoq%Ub"Lt1:ETU_mq0385*KhnsLI+J+_@n[V35)QuEA`Y-p7cK'l=^$/OHaQkReVN-ZZcNQ:<$Eb!shoU56ES(gbMXhG>P6]g\!I&o\5%c-t$CEqp$_[KY>BImGR/*&N^LeJ4h'Zpm,[4B@1)hVk\XE-(Ub/'#QfC1MO,&+)TrIoW,9%gRocmnuQ/=TSn^2V]sDCLm%IQ23@k%T1N;oVfl.o[g6O6l[UPmP3VD:P,M`p?H;#;>lRr!,iE<emIsPka]R[$Fr/m(9AR>M(JF.A;O3JM>(ed*;//QEH28Yuare]iVu-aI%YS611d.2@iKce)MgSuTR7uu].*W"'T`#jfcfCDf&BiM1E[M.].'5OaNf)fC[#]%oqHC,s.6aCkZ_/4-GFXd&J69hXf.!l]NPu1:0%ij9C%PW8N\FOAFJ2(D8=,]j@/%MRL(-Pa[9C_5N0!gtX8O!ae;-,ln=Qe_c^^Z\Q>MDp5ennnu!,c[[dYNqJ1SKr/+C,)c$f3;%u%\'ddXMKG4p-bG`\VBcPi,_[+[YGPSQ.eYu==0/At*%a-IYu_Pk2LW!$0,:XUf3_,lR=ftIZI$;$I&.N!<hIH,N](e0Jagt]@;(0<%g82q=g5@r=YD7MZe.Ilk^(K]o!Q9j_5YmVlX"R_]iGXPI(TZV$nQt#TVS>J:m,N>#cb'H#(HqC#)J(AunrjF]`;@sBqZu3V'dNe!%GoUb;)i@.p05UiB3Ie1q(H:e,G]'1W'd@n::_pe/e+8o:r<HR>n'EE></X;h;$=E&GuUmo7p2DM_5Fj:fn+a8h'a/_\!8'5'7J[/%0EKRUF!pU97g"!#Nq]05<1k\rNY5kqh2^Z.=El%?YHi(Z*'j[MHpD9Mqg\oQW0RkO[B3,%&.4)G[PhWH0Q$@]O[--4JA*!K"PFT@%hb9@12gQ+&#?'j[!7poI=[8r$J'r"LhG;LNj&O[F.*cjJZmn&6+C&U]HKLV&F_nLgD(EeD-1_%7Q4?MS9jLdMHc^GGVo6kf2X`JI%8&OV[ENb5$'._2uh><?,G*QE%F=NQ@kY=0SCDAU)qRkQQHEpF4?PBI<,F,Q=c'@CT>$+e*YR=4L]5.@s\idJe`WW(TAG<i)>s&e&%f%A^S&mnM&gRV7g<Ej7\p?C&/]XrUk@W/di]G?f#l/Q<d[T>lIa(;e.QO:lno(3Q)1%/f%g+8_)')[u(?RI^RH*s#6*aO0TPo$iQ%iabn#c7H]uQ-)R9+!t>uH7LXKV#Ap1k!YF;MrKBlasigCC[Y%6GrHnC1"5?2Rs,\F\o+slDk3IG&T)G]@p=j1Mon]Snd+"=D)Qq"%\@!t1aI`XHZ*UfuUueX(mFPedG/Hmh#F]*e*JQ@oKP"t2Ruk,PRSPFea)<>eR0?g!rt)qUct'(!Y!g`)<InLP;(FQJ8nIt51$)AT%S4NQWo_Vs#Y,&+=]MpQ%r6;8#k#+c&$p*/26gJ5ic"H%qd'cEQ>H!P%k@fRN.>Yd)?$S#l5+A'@61Xmng=>S=1cS89no":X0?6;Q%Wr2_"Ei>TV\IC+;@&Fst\;H#TB3Th5HC*Fm2@uI*B\C3#;C^s$$1SR;VDAW3ficNU[#P5=f+("Q=<(a"gfJffU%L.EqO*&K]TG9L%[U7o&61h<U1pfFNf!+$JlpltH$.oK"U.ucu!u#H@7P5El,Vca?/dN@#N36l&&]OYWm=XsB>1lrNHg1nGD%7#W]'":^$(.dd>H+to%g=oL5`uBf4d\qb`pWjkVr*@P#bpMb%jco?c*W]$T$f1DH8LZm*md'RG6sa=CSOF/!Fs"o$#g`?[^3^f7e4Z()Pa'\C7tZ@J4>Yd/%"SN"1\0b<FQ5eKZ@1H^JBG;>i!`"aL.1m64C+Z.H(=8X"gas$@S%VgAE3N>U@u].(Z2I4MjR-!m+QSQVE,hjN$YV)\DP2S*MFjKI%\U%JDR8p>empD0>O&1kJanF:c"WOa4a54[*5)!;B:tXS(AF`;.m8#Z!?EgkuokgkElFeP=A`Z7sLpF;bI4chHcQROP92$P\qk=d6%(Ouu!_LqC%V@k]?*EC.g,4km$jek9>+<&p^kSS,XBK5N!W0ri&h*@`oAT!uoXZ'":gc0""TN]-3A@uD&ashKQl6RtAcD*\qmK(dn%>nlu?BeESKZps+,\^*h9KLp^6Kb-Oq5@[*k(Q![r,8/rcgF&aWIb@R%&qi2109cTCP*5lQ>:+*hjM!s),&HGW\sNaW(QJ#b%k\MF%-.b>S!Q!KD%jGhMkj0CHpcJgr_hVeFo)NAXp8Z/3],3\=7+co]/::c$+sb_ZkCK3MKMXBVgJ&qUa'=P<*fb,,GSMq1MLm5:$q6hK%ngZ6,Kcffo3#*Si`+EdP4qd$`3F*5n`0ua)hu]"IZn:969?btHX*g(+.87!<-e6u#N\o.b%"umr.DG?bR@Ln.!i0_`<.I^us$c!<%X0YA7[&F>OCl@dC)KPa0(:Pe:&GFujHoIVnB[eu$Gld1t8'["+UN68]1Xi/:"sM"g+S*oM&cImR8P5<q&(RtoZmXlXL'tEF+tY"P%\G@mUItXh:`Lj)h=8e@D?<B9A^PI,i$`fMtGho-99OAE\oW%VLYT;U-k#h"V>FT>GCAkg4kb:*"[trk:S`H%%9'=jp>'2To@;/+*%:j-XWT4;c?o(j&lK&[;]m'SKB0q^iP)G:s/iUg<9ji6"d@S2[4$V6VIe#g\^D3g>63MI5VAE&![c1QgtgggGqkm[:,>75"jO(H0B%O+r.gW_H9sPH[njN)2n=;-16GT<qY@3=S,LLf/"!YnP_I=4(:OgsU]'J)Z4=&+QCXZ_pqRUU"jA5Y_O!'FsiA]3$AV+&+;h`3po(%38PL6D5\.?,]WE@B*&851-nNsU.\W\:+d#8@TVlJr-NYLWk)'TH:/cYl!H$[_8Tu!WLOh0_P-(2q+*V@_RBOb%Xj:?4FM:m]r("U%8W(t6r(5rFH-WP!a=&Ar-Q#TenOUQ0QhNa*?+>MkMIX0BF?!X5Z)tAG8(/Ze!b>Fl`k=DMk?.q3;*UPNs4iE1^%?(7Zq*.m/"U)i%iH#[]K0VE*HT)/l^Hs.?n[=NZ$Qjd+qbj,igNf(OD2F*9.BbmNaD53A6VRcS74#P;.H,n.7Yc,/qf2hBBY/9#!Ztil7r5;T^:$<s%#eS+sa0i"u)V*g7Ne=._f\TPG6_s\,mOb$ni"/r=*OA7u4&.)$Mb^20+W/V8+XfFI]Mu=TdQur8(E9sHR_4i:2>8g0LJ5Wmrh?D-%V7a,=<gn7;$JU[^B34EI6,(&^a5un"A8BJ"_[=[DoKY$pOd_F(4*'84'_N2l3lt?5PuEHZ%[h]TNZ"?[`!8ar-1RLC3ECM_*k,;=%,,0dagh%@4X&L/,J*ZY*[9Gk@8#*h[%j#3pkr=RD+W`:M.8N4\@V!UrD]]25fQNY1r=Z&#J9*`;=I.]:\BMf;S#2rJja"<Qa/=O!%EU*8J!]f,dbmfDKA9K`_KsOkFH3kCG-$lT_g0?8f=77bO3DCPD:VErCh?G0W%&T_>ZV[<"0)4Z6F@QJfjAelNEpdRM.l,mh9H5f[%f_3=3ODiuoh]Y0Is5BK!jr!':]p3`'QdYOD!_qkW[bM.lljFjV2TuY/i0Z<7+:N(4L+*=SShT^g/<4\\\p+dKp.mV?j>_9no/`a:%S&Kf(!@-PIK2j6\;Yhgmj]P83PJk)V+U6VYdqKE[l>t"mg<Aa&mZsF-5qIDq#C!ICTHUp,RK4\Xm2&>?A<m[DdR_\%7EM2TY:f4@%`T5d1Me!sIirL6OAC)eQb(fA:e9]rO66^shQ4<GJ%"drHX_b5,$u#J6!U$Y2BVAC-&FRG[>+g#-Osj&3M\REH<XW'C*(?hh3:5rs%""dm``VthmZp^4%r/K@KU"HlkdI$eNdF!rS6,V(08suqQ<a<n9bJZ>k\d:N\BG;h-=2aR'nuGcdZRrb\4j.DPe\YJRTmX'\\j45P%mLBG*S$1r@fYqEI44:d.Mn+fpK7\ddOVd3Ypqq.G.S@O\go=a!76IX89n$)gnnRFJ*[\cf=#R-*+C*:FXU58]3P?*%V1D2g6l]Wr%#cC$t[+#"*aRPnX5!Ga[/]?g*Z`+Eu'F,d2D-GHj->^n3ER755TK6>\.$`>8F1=%LaeaYC,;so+`1;%Op+\Ht$dh85G'LO"]PQpU%ir`D2qNf7>O]`S/&i`_!X4LbVs%AFi,11>fUhOr^</3<#UDB[.-%rZ;9as$Y6*L6\C6B>X9BJ>o#s2jPoOKF)&q8r]jO,5+KtNdX%>2[$A-^5F29+.uqS)m*,d9U'P/hMVJIERO:O8=9!-nV)-\3etR?:5:pdbFH[iC)sa8XU^65Bh7eUeF$\bj'lT1Qa^A[D)4$BFAbc%a[H_LkZb3E'fEAC>-5W_F$e2Z$C4bV+rn4T)16e*3M^<#Q`4`HglcHL_ZK$>3GJMo":BsBrF(0>hCF_;=]\3r/#ULM?G:s^0qsti%U-b/Q&"fk$/_Q,&s&DJKA6]h^.mJ#CVjsMYE6p4Rc?6B-NHF@):U9N;Pd!m!Y=0WHT#E&8cQ]VS+=HX,g*HT",X<\PDj(GYT>gPP%=<stsI<[QTZ5)'c@?YZ88Dkm)C6>1d8tS!JW+FN,d0i?3)(h&]7?aC[hGF2?Kq"afft]Ppfa/!:q>H5/.0TnM-r(m7F?u$.`LI'"%)K.H?$\u*@d)Kt/*LF+jh/Us%P26\<Rn@s=8\^Z4c,"`_dED8OKQm)l,CX()LPL0:jlS<+%SS`Z9;qnL8m?!1qu'+J`T5GKe^A^;%<$mbEP=l:244&ZO@WH16r@TF](R%K"UlPiQ@X!*A8dhN.Zp;:m7p]$JA9&&)/EnnLm;n;JTgZGt'`_mt$Eg^3o,<+/f,+@`XJ!/r%0r"W]78D!9n"B:8G"PiYn5L$B&%p[cQc6XhBe.[SK2hqhBQ>;*^mEp)g8^A!P"#P^;c6X`pKPY^c7Kea/?N4[k7ldj@HA##jZqNq%[U1,<R(\Aj7`?PZPJ+nN%Q92upb#Z=M8eIb(YgKOj4eX\AHp#8==fK1Zt2#m0nV?)hR6,Jbef/-RaRM$>=VE=9F"eaI:UJP#KrDj%PDLJ>E8P[IRI"=UJ/AdFQ:&$k7jU!Tq6F2Vf_,jeFr!N)J='J%"N!>*KI@lqGpa.6Lc+M1`!>-gP6cA#Gp']0X(pU)HOmf0Fs5Ks%/$$:T!N['!3`.AqbS&QPP`pDR$_*$B')b#K!#5WN%?$'cFnln((9Q1/,Zhi5<Sa8fm?(No:=QXt_Z<CkJJL^4AfpWB8Q_NqM.>V7%]1'RL`VE"TR!A6,Rmcn0=>3k\`)JW$P=7f@lkP$'M$I(>]1la(nUN'S+&6O6JEs6@(@`Lahf\I>p;l(l@V5/G\T0V,_-K0bo+smt%O\N:Q5'Lk__qUlN1i+fR5q*&8@1bW#c`oJ2a,KM/Ni45D^34[em?),mEk_`##l',cbp[#m4iV7#Cu$RLoK>Yd4GuqNmiFjj+H#9F%cNRati.hc`2T/[),!/MtjeGYt&WBouEG\a2G>p>VjJ:\iGJGN[P)26d3D>[+QmbjSY"]aCU6B'M1[IQ)gH4_;`YVRKe"p+4nc&2[%O*eS==p.u3LReTZ9o_FsmR,1,FToG'7j]fV%(7kGWoiLFK%,5:XrP4km8P!25<2$*=G`-d`tq&D$p8m"5&2`el.[cLG5Ska]nu]=%c.Pe;XNeMT);RD77)O8I)1tN[pXq,G49e5(q&[89,AqS<dF%DZV#k+9&"9d/%&qD>pE:.Ln)"@@+3eG4LfY\Q)fm_-;f^oGG?kmn%7RB=hLPcXHGcIBp+;NtL#\TiHlE\"5LDi4rWQX\*k'Tjgpjm,EF#QEVQ1\'e9(B]Ah_T:u(@bef,CAg'VA0Uerl%5i(r_+i\Tf7W%iZTFlMMJ"&GR/sc"iS^=.NZ;38i/]4JD-Oa+W_30b\"!L,p#=,RDN,fTm-irmJJ6"]HgmE^YP#fmsPB;bk@/[Ol(]s$IZce;?]XM%cRS(*2*;pt9)Dug""I_%GR#M<!U<<l)]UCbAdMD7X;0YYZsY+er"pK:KUL`VVk^;G+SfY7r,g_-i7#/\*I^%e1n^/F*IaH<4s)G=%?XlROXuRJN3c6dmHUla8:Qam!M5\7H6:-0u>oY;@];mPS:U6i'dJ::U@Xe]#lhcmKQIoPrH)UR_[@G6D!dgk8("CTZ%:WQuB$'QY%BbodL;SNQ:+E*D_]%fQ8([3QpN?%e<[/ka::S6_t-&5j<61Z>uP8r%49b;6A\N<r^jG%OoS%"TH8T*IbJ]T4Y6%'pb-GOhH5#,/+%W1D]d4)l@*_s3'BG%lIuDA^]+kNcjDE*bP;:Fe%VYSZpWP2l2GCX>&8fT!53(2e$@/TTltWMDq+<\%R/^E$l*,_qNQ#0DES+32"a%C]E4.:Lf\0#)`?cG:P4'cqYQP%dD<M>@G'.4hCZ\]+pVNJaab)\&*/1&2m(>h3TS:52>6(`:*Sd*31l/*34B2QRFlDF=Gml]e)e\%&MuN2U2a<50)eC\#Eb>$8e/UV"7n^B*5D=Sa^Mn;7?AL&O7BHJ7)(CYn;bh$DA_RI\Xl73OdBk^k)NU^4J'krj7#5Mn^9B2+**"j%#5i,i\qT@G5Np[Xq.2a:Q--G.gn<iOJ'tG\)ImF>dn#Ld<GiLH^qdBeg8X#$pg!PCG&d\.8b:c=fZ=Su?-L#a3IMnbjTa-X)W.$3%VZM;*P2ep3.2DO6aCVPaU:`d0TVi(!Yb>)kE^RU@p!8>L3S\I5K6r<IEs:F6rlItkIZjIR6cH9NL$kXL%2I@3E)Y'1bb8K#h:HuD%:pDs)+[;(s(-YHc@AN\(%`:m'U\&^5IRE%lBthQ'JoamrMnbHT_PpK0@?DKpkO*"l3_.0`>?W!uq#+aaFu&TX,H7\seW"'<6mZ>+%jWKR!AjYP4Zq;90AYZN4/oPQ*PO6iq/mKWQ`(,<e/a_.J9DT+i'0'0?qcqC`dDE^5nrJK^@J2GJjc<P!!jh/+gO;IRfF<W-FgM-t%=lUESq7P.2:9eEY.GX@3qqi2Cjq29E'/+NQ,H6Bl-e0,MIX;SqH#Pb<CT+T7e)r@3'Q22ee>Rr7CCh1\Jm1V#r5HV6\hc8W,Y..j%bG3b]+kNk\GEb_`hu^rgS$War/,mPDBP@*S;55-9?\6QkS8\?lIpfr%'Al3_*?&!s9%m2d>hE%@cLR$oj`G)'fY+6GQ52*R^&,lr%/=4Ltm3G3@6\LVMT>`<*0_]'Y\8>s7UiEWn9kSJ0gq8!.2glcjfj2tNr6B5N[<sOG\9iJkCOmJZP'bjcDt3[F7/o0]FnY;VaZR07%e91K[14.ugq*/qk4aoXYLchlI5Mb9]GfGNa#Zep"i2]hAQbOZ*#@,u'Qph)>"I41WP/N^?A#mJm&cu=[p`3Q)K*p49_PK)U0mj3P%?6#mbH+:jDI@2ioYi=R0NS5N.KasofY-d4Uk-5et1-'Z1&^huBh1NT!aR<//U>tAPSZ=\hI`o6!hVEk\FH[h_7JVC.-;Fa+`^rf&%f""[lG)#S_iJG(;<MK/!e!:lLLd^P&+V,H\/67V]0&U8d=r0Mg@7bPA5VcJBbM;[m,l\-3]jE)cS-pLN,@XCk#bp<_l\)bUJESr[%kQIPH+')!)EXYl)+UBsTnP^1)8?!oFDE&ZkC+M"f0/oSA1rZXUoKZO^hk'@`%P^\%"6KpRCKUg*,4@3=`8pI>iASEH>/-gnUt1\N%4g^(u.p!#[b8hk_Mjmpin!bXE7'>++kPP7=kXFE8`%G4DWs+m%Bi>UeMkb!#`*Ug^>9(*^hpK$E>"/nZlNp`![10Kqr4!,fM_E,M%9D#K<NE=BtD)o=6bq4C8c7pN#q'jQ&6((o!f=&Yhpa#]Z6qCo4M#*<9=!+-j0;N>s^EV<]M*qgJaSHP"(IF_h!WUA6J1GiqoUgo-%^9F>KeqhV-4\8nt`*=^fA.C_/ajt&tGYh`sD:/Zc2.8d%hHt-K#CB%I(;q!W"o@FNk0'ALrmBX09;57(XV;Qm#W:6-&r=Qt<P44f%MW*Mp*f$@to]VgHB9T6=ED5p)qUga@?9A<nmNA,]>gK25S4+VcD(\A>SK2TOS_LI=Ko>J!]5ldkKcFKeZD`h@R`jNN9)%&+R^aV\%B,YTg>gq<DZP)%aGE\ioo*1KYq?SIb2_pqm2gDmt@EF"oipYH8hfX-Ds0rfN/]dCEdf_o0#aoQBJtZI+7-EN-fUYaIZ*OlTbhY(^%$[g[IZ)>0?h]L_K$+FQn^?sr]"iCD4=sJJ42G<OT*j,V!J^BaBFmo'XG5:1^K(?5(gd"Nl71Not?X:f%[UC8eJ<raT[:_<s8f$f$%oO[[\is/P]4F6WMDqmOF05!eUh0BT>)M$/:jMn`0,C@2B`el(Nn*TUk#O=&S<G$@0Q/dY;'\l6bLXt'T'c'+R&TDGSM6;8-r@X,-%V9sK<O43+`hCjrUUPIjPdJ0Yd\Xg:;>PsGXU3!rpd'WQShGD5RY<&98o`7n4r3%psLR(lPW\KRb"9H>PY*KPE=31oCOPoag]h894%n]G^^m]FZlLQ*3cIGj3%It-@<j3OF@DD1VIPmdNLG)O.pG6i#F=KJIIgWSUTn"O!am%2pbp;i6LP<:=<$gHd#BLmCtItB9KK8:,`%0=i8\-!Yu]=ZO%d*(keM>_Ur;]3(CiI/\d%>\Ks',5QC3<)eIMb\D0'DQ;WK=2H\BfTuf:Sg.%c8nDN,"L\RC1qA@>GZ^A3RWs27%Gt=.u&?4A][1MdKn!=ht+7@RtV>`6%D'*/4<2";T>V5<>?]Iii#.":,WLHhsQpId?MjCKds!rJCe[sK+5.sWZpf)-I,9U$S"^qc"%#1u+RbcE%!+8G+Z^7IiD4a\[#nXkmun""qNr'r@]0^S^%``+&O.:uE0CILeNEaU8,5`&Q-Y,iiW7gXg@f[=nk0OCYc^RrJ+Nk2n&%O99i[9EZ!VE457b69$h9ZERT;<L*-HH:6bGb1h'Gq7R7YOUI>pC\:D`6kVKns5iqIrGY90>r@P;\,Uj*J=)6#?elSi6D8Q9Z.n";%_D]$\2:KZ(U?r3J=^l1\%]]3g7ek&.mUCa)Ij,Nlo^MM$[0qEVVfm#>O?^:02d\)jed(@*GIi8a&/uOS\hEEdWq`5$IUs$4mT"LR%,raL%;[1,up-963X=`gfcj.U%ZOS#WFU!b4j?QgCF81u-]<1*N1&kZH&,WhGAck#YYX/>j'*NJ!'6=7\8^>IBM\23*^'pNX[O+P4%-#tXGJgLb$,@,nAc6OBQ$u7KpW>F=!Iurn![i/agiOBq3Q-M1k>UGCn]q((#-(^#YdEO:NF!BLR=_^K+c4.N[]CPaQ[SrFSa-;Ml%aarq'2C7ZQ,ke*GjY11*C[iL'B?_R!qiAuVLT"J_;*DX6N]BMp15Or(bVb0SY^H3E^TBaJRnX'mWGEoK4<JcNK9JUu^"j.;"7(MK%@8E2m]$4Q(ctZjprZ.8NNU_4n3st,&ahgJ\D_IS0[i2ql.i9XXnmhlY(SV?%lG)WFLd[1]jgSL^CNo;rZX/*Em^=[G]%,V2a@1GN%E`-h/_CbQ`[Rh;)ZUutUn^B]qCa`Vo<u9&^6#g.d*?F!E<QGk7Rd.OdI`hE8'Z@?HVXiYqr.4RGa3$j5?tVQ]IQ#dH2MessLh`!W%-O'4R(bLN;)oik=iu2*,`qOFaPG*5CB1Gb)Ha[l%8Tg*Q_)CB0DMI.@\%A?aT>cB3goBQj(4uLeqYX$4oX'COPO@Z<qlHpPA-\9i%X]<,j=4fAiQsSrhGVu![)GRDV1q`*dO`mU'-c7I_5HdE6M9[JgV@q&Yja>B%mh*O]anj"4ZSHoKFZX2qmc>NQc55lf;%'u^?D:_N%`;e2.M0+A^fV%T4ZnBOKc-;?q9m='%ZdL=tk+G+(c\lnIWbXpfD..b(Src[0/mD\dP5;P8]p6rN?n[DOTllqX+KnS`<c1]!A+a#\%SLJq&9IV##QCTTtp1t8P]g:`35(%/[hN.^/:[Hc+aVCB6I;`)i9WjC;=T='=-0b9h9r5!Cch1r;<=g<(,1<=J0nTj#')Q`ZRg3.l%&]_qQ5W^PDcsWL$Z5[Cj#>r&&338fDeYI(h0h_U!&*O/4.6ZVl5M4EB39Vu'nlNUi7@JDk!KB9")=ftBgc8KcQcQ'uMlEIBA^"EJ%Q<q949sFD7MOfH=eZ>.lpo@j/"mf9!p=aO[XD[UU12Z'>MIu@hgVJ.Wp"S*'F\hMQ__C)8Ve:Ik[RhJW'iRWBgD*WfZ-q'D,t9(k%*ATjVFr(q&[VLo&,DQZWC,j5=(eUoa<74a]mHnV]7WZ-M2VSgrOTT<9A;7r,<IV'R_*1adJtsC,H(E:j4\B0#)Y<7tJNXL8<G^Tf%'+MT(Gnp^,-6sj'`&S.3kbDEm7[pcD/$)*aWZIIi0ZGj\P&+op%QOi*h-"b2P$=8%`MQ;h<*uTCF:sgn(Q8L36kYG#:5%De[mhR[%"<or:e5o6FSB+5K6F:jlI%hlWX;OP/\uUAbF=)o6=BuPqY[.+iM(Y`GdF6%ePJjP/fTb\\6)Vsi8FhUS9$c`\2^OJ,[ngr,UB#>@%>]c8U83E>V!I@4"f-4Zf35UXsU."1:W>j-N6:J&!/Kuob2j/d"S?a)sj.nFFJ7C!DMidlQiD;dEQr8M)<88L$SObliChnbLAsG(?%\>]IU7Qf(3`7H>SK/*,j90D0C1pGG\?:95=`)o:QDIW4=`.#9@:!$YqL*)a&.,gLOiX.7[]uZUW\5578R4+A+jd8\HFo>:[XF;Zh%4?c('F\end?4\^%_A"d`.QPKC)@K*'-p.5E9A5E0HN@`98[ETX<b,V*_QV<W.T<d,cS9!3N`Va+;d>GjM_G\*j=@OqX;CZlGf>;@%>ukM787QpX8G4A-liHFb:1k)\-P,u1[^htmfUY.gg@uZ6*pcWCCb;88SNYVr4;^gVk&U0'GOg9&@%Q];_q\#pCsO0hb%(EMF$"`Q%4*^hlqL$U1lqSUX'lKUU%l'Q;#EhGbSnARW-P(d=T0:ir?SW1aj4V=r+:LaKc]rBH4C/;H_[(;1)NFWEOErOfhV6l(qX;uX+:$#<%')E,&1V'0[A:mK(KmoftHMAD7@,.Cp%3?_0qj]2G7cef'eF%JFKAXL-J8UDXYP-,TI$!8M,M_s""LU^F7bHp%'[AP,;%&uu;Qt]N%^\pr9**=5VDs-?a>!UM?JY)d/5PEKkc_-Ln"of7#V;P5?iDBq?iP"i5,,kl+RoP'?S4fY6WGM&C_:"1)R[#n7'=\<]C,V2S;5XOj%9hcq^fhBPE.Hb^X3L^`q0*81UjNn+0M>AY)PAkUG7l[G+pfIF+[F]9(r[#<47_QWVqKkAUW;E3[(-Dr^?8ViL?mHZ']pYNefik8P%/<POC=@-p]$!!0\D`HEJC*K^S'a*,;bXaXPaiPl=ZALX$KOe#/PKfl'.64*`,fS9`CaP9C9J_@=N*YP4]W35'X,%uqfN!'#?-T5Z%WLS652+:)-R8cZB.YAVM.U]Qb)DGko!oel=e`P@]%C'D4P;9#<VU>e(`:j[Plmg':>no(s73$<aY,:@3<F?tE1660F8uRV]<%6&D%<K>25.Uo]@39#Ts:&b5+Q^L^hBu#`ho*d@T$l"G.1D=$e"K!kP-CZ/FRECae6hV&;/N5!3?l#_>3fU]q$#;n#8ncnZC*4LK)$ia+%,2jB_5WE*4["OYA0<,Mq7;T(U>/o(H>UGTUAi2qo)9gH3$5Ip2@#!P/18jQBc#Q$GDcJVo2+>\,H`Lmb,)oVTZ*t]"p6J!uhK#"9%>G99?HTUQ9YJU4[BVq3!k2\p"29o_B1\?u"`SNA;Tsq\YWI$_miig5sb%Q[;\+U.]Ko*LN?RI6qm&a+He@kOir_H@hbt@;[FIIr=%09sZt8LFbdm]1lB5Hp<]@meV'9mQH:+coVh%?NB%O'i]dZpZO1Q>t(p+Gp+5fjPW'X'\lfKTq2I9$3AjO_hA*4#G0IZfQk78u\J8%(ATMFg'T-:)JMg3oVAkb^C&^Q$.2/\!\]m0;J5Q_Z<=@Yj8VdgXkQB0<-)50eg/[l792\a,FW.@#t;\T;@qSTG^[`qON8Q.:ejm#%1kf5f@%t+F.?RQVN(Bi[R1*PncHOh3R0.k0.&\q^.N3b1e["Br/?o2@<FJ&8-lf+H.b1&P:m$3"5UrEMc'`T!^rQQdq\KG1!FV<H%.*np9@B"p5'l&_FIK66Q4:Ut@it:r2Kt=1XFV%\'dZOUQ@B?h*.0n"]6I<#;^]I13!bWdqEWh'+0V]s/r[&Zj6u_j/#,WLd/up+i%o)tL'X:#n,#Y7D8gQkEAM.S:.hIlNO6SMPG<i9OFmA:W3g+66JA@`]a(nkOW#(fg:dtroH)+F!q:+'XS+F6f?`?6!2OZC#<Wgr95%SX]sTb<ti)Tm0^</HT?qAi3Tk!b#gf&1*m+-Zod6."u4M2@p"gpAoj;%=gp8SA5Cf&WBG*R?CLDUX-FN5dXRG;NoE4"A;V)XPS@.%b>LIV/X944@mig@SXLId3=)K\1WB6p;JN)]S3Sd!RK?0Xe4e88Jj:5CA$j-H6jggG3Y34+VZ9@eHDWZ];j<q(2V:\m!)2iuMUI]@%de[KE+?C/J9W+chVUI??LFc0aR:=W:c;9*2?ogSPHtY=+TE6Z3n`Xq)3'A]=bK7k<5aKktJ2)AUM4Nc#A2>OPkpaD)MT9=)NmgpW%0nN:?''tROqCFuV7SjS(oV<-2_&,<Q9W%DE`?lg]+aU$10LS]eV:bu?YY<UTdg7M>'M?b0S$WHuAZ`0F`R?1i!pKjL+I1B=fma"!%WE,B]:BO:g-PGWV;i+p$V5F?kg>M309f'LK0V+p>/4D"VB"Xk6-q+S!7Ss3+.&o(bP(j9]"u1FE&0iQ6.0O/A'OZlk%$oiT7I*oV%LG=AfYd=i\,H/nJ(H,+:8$\Z/P]7:/c!"P7b`m+4/136+jZ&Y3QqHmjDH>CF-%^4n^d+nfV2>Of7&DN=8t=$*/7X=QR"1%u<S$PB%"qXr/%%ssBM\2/q%oqT,'O[pM*od8N5?*=MPJL3n9ED$Ei%]!3Jd-cC2(;)VeDq`A9b(XNUs]Ob(bl1rc@VDB;c\FR.8-KQ2P=5^%N1LHDk4B?qb_eq;)1q,F1r+3Z$Esr8VZEYM4FP)HCm?ckFFjk(/>]9GVV'gH".h];Z[sKVJT>?R[Rc5tSY"'(!3gRr$Hnk-1q#jk%?tQGj^_f56rh2oRSdZreH3u@V"tsP?a66*+1i*k*.nm4aA+UICN1^62;3]4D9r1eF!+Ri#@#Ura/8)fJ3)+OpYA'N&*0dm@A^+=+%:/;@/jJ4:.Jh_9Q0R\cj?u1fX^_@a#'Z8DQ9M9GI$8=qE#0Ut+$8=qE!QN20^_f)r3eOl>CrQi:7Sa')#V*Wq(;(V7.:&"A*2fb9%9A/67c$1[odo:iPRL1`<;gmn&8XuRr`$e5D1++ITBiZcS:(Ca_UaobDiRAQLN10*`h?s5$0LfR2m;1>^;`P3k0LfQ`A0MkcYlMsN%n2)a%";hdS!\@o8Qa+A:<2N<-.`KL\^bd"C[!iK3J?\E+"JsdcR/kZW/@nNQKOmc+0mYTWL=9(O0mX0\7Sa&N[GYUV&*U'A8m%oL%Lf'@g10,qq9+&g];K@k2`F?0Gl3=4-UEg#>,sGfB(m?<KN6tOR0j6?"b\8NAfNb=h79Wff";mm[K.3=V!fR^iJ2(dGY`&`]j`=^X%klf6d2$Lg<MAfk?)a%C5#V_7de,[s6nBs4>3_]c[MUI_n`R;sE@=[T!28F=&$Eu@`W<&mMi9<#I!7TQ5/Cfj1)(M@L&>LWY0nOFB%`ep$;@q@YX3J\92K@3dO7S9[pV/r/k!_g#<9AAAZ;GpUdihR8rWXU!oV#Y#$Ufpqkk-Ph1M@CW%V>t,e'OWp/T#(d`^_fKD(aCK[%n1k?CmL5t5RL1`<;ZW2m_.,<50TFO\J>kGO.2tB=;lVQa;OjTc9X2ED1_jDWV?/;]_+XA+0>JE!"W4#6!+Ri3>3H+n1)SFL1)Wi!%?!5E_30cKPD8jYdZ*Kn<*5j8L5q+=M/lF]c=is0p6F!K;Rpd'<",p)YJ2-=e=B=G2'k!J*+9=lP#6QAe`hF4S",P?e.a(t_'2j?l%/U.UMV#Y#4'OW@/]W;94jl@+`S=U^dZGC&CU^DBJjn*(;NRLgVBf:4#TE9pD<X)3:JKhlH8HfqUW;t+FnBu]]$SY%JWq0lPS>63;%CVe25OpWm4;?<)h_9:KhEKX4%<ZiiHBf:30!9bAYCmL9LJo[BU*2H`B(d0m8O])MH,Yh&D@`7=M7S=66R^$Beff=j[;S!afaaCK0%?l9nG7S!_^3$AHmAqS,1a^L^&'W)55j=ng_Nt[_p(cCR?-Dtj($8=qF!QGBp^p4`g'ITj[@l+p.N2?Y-@tVg8b$`*O,eu5U4=3;V%^+(M3:(3HI1_jDe%3D:D!95o4YcL)g%TEE-`m/JPQ6a)f:JgM!DAp+&;J4"!g/m*4#(aQZ-"2EY7+!Kn)H:":\n%MDpPHs.j-tC.%[W+UhN"`H@f>q2IAk'`:k"@cu7Di&<=7?n5:XSO.?J_gm:UcXNK*WZ7p,$IV1hciaSNXB(ib?c^Vfpri7JpRcqOnCImBa3RcU"n`%pT*>=Cbq5[QBX*A.6h&42\jG!WKIV'cq*qI$%"8sB<1?>X6M-`^QVDa-3gG4>M2D[@<Mu]IVID?g=\r2rB?hF8^$q/fu]o?8o"M^%KBCj)^\(@HD?e@/#46`DS+BR^T='iS>'jt-I;X6MpMm!)g/h&l>'jsBm$4q6G`%eog=<gkV75ikol6NE[CK-5eC%"%mHFjmHhp%?%*ppTInNkp$IaGO$+11@]Y/o'&g@k/kf%f\R;Pl@lB<B>*&)-aLK2u@5iMj1"4@MmrmHR>+4@R.dBg$]uL8S^0MKV/:%6aGHM_l_a%MI]5>`ogA=INmH?V#"mb5.*uf?6\&pV#"n=,E_>fU_=]0r1rcbNN(UMT\2bL.Cb1gNG/*C2BM6@:O:Bl&e-MA`hQfGDPCPe>((,:%?eX2\]ss5(`R:EEQZi'ZB_HO`pAs48^O2"M;T!AOKuS<ZBQcING2$3@m@`/"T\8_*NCUUspE4-m4(re!BQe_U!DO$4V-UoS[.;YJ%^U1o-XlUdPMH4';i@,\:8iq['B_eJFStb2CZkPVkZ_r07Bkm>uB`6=2o8O$E4UmiC%9e6qB2>WE4:PJ>C"H\Ffi)Z$:P4s?g=arJ%fi)Yq:P7fmra,Jj&sc_<d4P$!W$VAKKUnG*Zdn`Z<LB\GYgQEr[_g*;?,9$(q:Vc2>E)G@PTtEdaVO=;\>e0!T\2_K-S>TT]sP,,%6*l\>],p@VA/-qJ)79+cmWu5JP?#urB@,@*]CGBj?tn!WFGIH(n<aFi:SlV".9_%3LSng1MKV/:2'2F`i@,\:U0Wh'@7gkFSt`WZ%G2pt&9M%NsH91P;02t]kSm&bq1hc-M?%$F":P37TV:>ZDK4[o-/9*$%4TFMuV:k8*(U![=$^4T;lupb09=s_-(FH2Ug$PFqgob(k%g.SM'GosNCdS%4KdLNb6E*HKPDPQ/>)P3[/O*6dqR@rLf)P3[_8%UHX"V"8Tl:\bZB\-TRm<Eq1##E@,,2#g=)_,R[-W55uZC=BC%;ppAd8@B/Q:*PZnXkLUtNas)kllsmQga^NK8=qK(#:#hBqQgnPmamD`Jqn%$V&_1_@AC1LHpfJ<m;N[I/#@q'M4e9()K):/8%YuJ%&Msnb_bmf?ddH@6Hh"JVGT%>Cp1jHRm&@CQVa2gdmHeQ6m&@CDVa8KZmHeQ6m&@Cs-kS:_)DldZ[/RUA%gs%:9:ro_#G).eiFtNJ%T(_d?kr^'HG5DHALZOAciMj0u4@RFHmI1f!:Sm12.9_17LSng1.P32I":\/Sn.`">[(AN0qt<JW)Bn`,9=]7pEOrkD?!j+>02Atm%Vo-r9p+:TXV6"g0%U+<qB;^AoVl^Du%U+0mB;^AoVh9.Ug4e30B_F8rmA8Y3\_RNI<m^2IclSd=j6>efT:V)7l0/IH'78JFKR$3g%=@bqScW9gT#s0_ET3I",#pd0jKU%k+c`P'+KnPMQg9]?)gaYut89eh4@:=RffU`keVhJOs!pO-%=>SQ8d0T%L6*lD6Z\q,]*ppgJ%7*oa\d-P;i`hQh,U4Qu5K2u@5NR.!p0LZ/iL'Fco[-O?t\rN\dfD5(2$B#N_H['k-:J\1do^iJhPkMShY_!q'nRr^S-%^lLBR#Cm%*ppfY'f8$AX"Wl:9058$(08e7<aOM=.2ndM$gZk>.kg:]T!fG2qhqBN`RFhGBn,YPM\;A?hPYODqGFjfrM]CUG*g9?f!J3O;(J9m%mG3N;^\k=CrpgkC\'`?l(%dPjH"goG:XF!gUS^J:O'7!H=$O5T25<sKV2*f(qs=%+5.`tccYf(:M\7,>cYcPGZeJFUm-3$hoR7sU%e.Xr5.kg;D9058$<eI;`q5#+'U>`)Y(-G%/0CA6C%8Whni$fS9U>[P)Iqa*ig5QnEa,?kU`RFA:l1O'#p#>6/iou/ppGQhJ%kL/l%cW2q<aaQiCYnP5s,2#YcrbQ_*DO#/Ra[RJ^B.M^b.H;UMI^X";<Y#S]e&([_YWOKg:CHL;_TIoDd_iru['0`B2l,\S_*^%Q6u+IC%Y"-)FHpkkC[._oX/#@q[.VSXS?%$FBS^O\!-X(h1<ut\%R4)_Z:X]oIEO:M!l$.NCNi/f>I!V7,Vl/d,HCE.KW(TcZ:K,-Z]b`ji%HQ"_fC+[Xt5t`lul:X3c)Dlg+dg/bBLTamtC%i,/;palQd&omNb-rO-Fuj;[3b[R$0$I*WHTKthS8N]nXS!C-qhrr%`TdB]FFQ8U%dWk;(n8/Hbe'emk]pDnp\q6hnG`%6RB]F0GI.1tY)P3\^.GB$R$^4Q:n.`"=[-KC4n5NQuSt_L:G3uV;3B]OMq<;V=iOMI*Gae5^%VrbnHo&=A/n[,rR>/PEBp@P`Okro,&21$5uHYT\AC!b!q]Dg7(Sm(H))RT(`mNVi+f'KBDJYtfW0CA+?cp"3<Ko,\^ng/]eXS;`R%.;kaAgB9Keif\fZ!QE</WOK=DXEGP@Bi<a'q]u:)ed::aePs`?2CNHX)Kg,\k4uTl57_UH7DR]Ee81==(BI6[m2B1bA8U5kFhCHc%G:.(-PB7`%#/s;."5IU/o,sP&rm#jpa5cgN]-,2FT4$h#bVO$;6ge33WHF1\j<a^5ET5Q;28T*C]Gt2!OI:_o\RajlV-GeIi_jsr%gH&fppRg1Paug;K96PuoNfJ[;]A:]FXd^!5%YX3WhOM)up1n$=3,qmGonjDA[=,aJ`6Ddp\mBC9f(#kj^#HuTj&W`tJ`>7cXA>M!%FTcJemnP=!;R:I0kjr2I5/U-E>GnFl+a3G2e1Q0*SQ2mh8AUMEDK^N6/2IMQXN8W%#MV<do>m(ZfM9^u-_"Mah0r,'bPi2;pMHI(%d\ka.DsMe65"-2"o&Nj<m"0BJ#QWZYZkkMA`JL(I^.dP)bp,MGT40/a9MJ<p3-"PgNsU%mokdQepSZZS"mbfA5/kf!R%!K_N^20p%*drndJZKMIq@l!mR@<Q_:4/N9DLBDjIWhmhP+cDYM\A$,?1B4*0<Y)5T9l``R(.9NAm_f&EV":qp/mip.EQ(>iYK:O?a2S1;puJ>%'/pGsm&*1;\92Cp?_&ljl[2=qT=b("Wp-Jo->jQlfN5P7O*Ph8c`nm<;q#e=9\_[(!pf7IZhg.=9\_ZTU+=Vb<#\oEe)/`5OF8E:%qe_q`n<F\&iojX(AtmFR'I@W;j4IF2A`q$t<8$L<D2-!2,8sinD`c^ih:Ve"WVPsq.VetQ'I@Xf[7K`>e]c@]:48V0,P7MmbdT%s%ZgQ&HF^RP.FlR\siJ=;4\!sM`ZegJBT)TE_EDs1O4!ed8L625"VHWXgQT/t`dnc;iEV!.]^+\KaXV20?baPFJpO%VQjoGTF/Q1@b%VuZ7&4$>]Z:iTF_&44@<!snW4,/p[j"rcLHe"2^m\23$nW<*NJB>1JM"Ndc`4$2>2OlGMX^MFN3DB0.qmu]kTF!"c8UHifto+4"X%D/+A*"H&[qp4e05Ssk$']&K:[2RNO/]C"s4_8V:9HhP$]9iR\@Bu/f[:4.8t9C6PHAu`s&d,3T^\@'5g/_I/7.Hua5<nuD&hfhcc%<9L/`W496RY,c>Y1ctc,W;>H;\f>8g(+Lpi,dZ6B7k`ZH9JuRTp%NVFgtLrBh:PkLCJS/Y=#8C^e(u0`n(b,FlgAAoTu4Y8@`>J*%C4.j3<.h/RYdh6ar#$9:DaNq36Emu-(G/P;Tu'%5h[@9[f%0G@.:U9X)l:/!7BF#,dC_,$XLK8FX^]92_.4Zh>[CscH\`q3iB%A]%QZ'NDg"Q/+LT]B-*YjgsjpnR9'p7LQAlP4rW^4!=;V]t4VXHF-8OK;`4:&KOMHd^,lFU2=;[\#/g:=C6X-j-p^)IltG&on,i`;TR%qVJR/Q0>:%lJdRf\@ANkX,Z)+40>4FmHNE&h)=`8r$f2Bh@3U,ZFWDlY%H72mp!@D]a3U$Mjo'i!YG_S2`:4%1au]<*F-(^*JL"6%=PV[^2(qdidKR9_Ydh*=\s[r4$k526%HCUGVu-&'MHei5qiM[FDJjZiL;7XjkB#5Ff!_2]LC4kVpFkX?BQ6u*YS5FDVUYJAF/KH>%r[kdm_^d5+iXXfd9ST%kSAN*i(*bDKDLHu2`>tkM+K!*u-Qc'>g'=R$e)Cj)cjbmp&th7]C4Fe3d0,As4.;dME<d%s_rBf&LL=iM%g7Q!DqZ^bIruh"i/+2=-'eA\P+>-^M!OQ(4\,uf@=E+R*BsZe/':+W84*\"b.dl5-d&=GVC8t-N#EPr`ECY7a"l_O+i8_88@(-Q&%3t0ds/FG3M_m$YgWSc(^Nf1qGgEd*>QKH.,5"00lgqcp*?JNY$CgPoPB2$lo5>Q7rk/EnhJ=795(EnsLXEKkP\"RjTi\nT^\@JrU%O^E_1S:62%MjledDKVF/e$-fi'.`K]Q8U8]A7`rc\@K.@]A(WAhQVK+b_hm(f\P9[$S^0Oe5!*TZe0H-i_CP2Zf4^kok)16^uEUr%42J1k'mK4iCf]?Epj6JhSW1B3<nn"=frV]I#MuPl\YZ7N.otG!\^opY/8f>SG&,j]NdochT./C!gRaH#pF`lFh\.a4*.CpVN&t<5%_Sit55NO63SX5r`!TVJKInRGa6k!L1>Ts;.0.ueTDI-T-CLLOS3^(r\(RInLB&^cUIb`2+9;c]hH#[nJ@G>=!gs!J"eo!S4ncJ22%[G)0.(H59r];43+6ptKf>[e;m[(+$o?s6gX38gNlfaj<]EVFda[-]8K+Of?4,'(/YeP;It+tC5c)&APEOU[4A'NQn=0(GJf/2$I`%1+[=?>jG:p(Qo3+2_-MKZ>NXsgd]eY#Si\VB,_SP4KS`eSAY\k9Ak:oMbC^h)]+hL%Q,jk1&[IUQNCnt^pjNDbJ^mn<63.j`2$pU%>k6Lobdca+>*s;dl8<1n-0?X4it=#!B#\DQW%]tZ;p@qU\BN/CA6_=rpP"Qqb7pS2EGJ:_D<^b7Ao?r'Mo(ZR#1+W\q9GEGQWXYR%0eRg%1GE^L?"aMg;DX^[khBt:9]k2c)[q\Kb^'K5bq7)6B"++pl94:Kc!ALuo"_oJbX<jc>]r7Lj5T2.LCe.9`N=!1rRWkpAO8T@%ipqECX]l`ZVg-=n\@LmuX4%cJ=U?r<DJ"IorV$HUa[Cp(`Qc(j?(Z(UR@5;=`Qbe%?(ZX0RC=0ri\CZ^N/Pl=c_bRV9VhdMi\E_"%k/CnTY_I[J\b"KBN6B//6hAf41XThK1[a*Z=a_qhj"`h#Qfb9XNjAOg_T$0Dfe7@*1>"[@j)Uf2BqEKF0UNh==')g`-HB]8$m<U8%'pn<ea`2C@7=DR\T:Mq]3Gu":d.d8+hV#I:MB#^m]eDIL*/pqdC9Ge-p\&\]c)@heETLS5buEe8>YS4Ph[u(4f(RMZ.rnlT)-9be%=3]c_*&k?pk^.Y[''!`,Rd3#]hel6Q\rQW%gV+rQe[Blt:NB_!#KPo8R0Kk/,0(FIED2BCK\e&rQ-=:qEnoC?g=I]m>ff+SR[=G9%[7lT2r!o,72]%A$=6-lZ6Ee*I`t_oN9o^b'D1Wa/r7_?7Y#KZH3Ni.r'lmQ!I430V`P5K9j,/>i+NK`s%g"boe@gZGE*RCN,/A3;%"bQfq'c6*8**<'H!'.21["02u>`T&1>]JR4fQ"lQ4FkHeLHElCMJ>%7O":4'"!:Sam(eZ4SK"AX\7-L="M$:tP`:bTK.GU\\MAOU%HU4A7Y!Wk')-hqDX:d47,06$79%04sJO!du>_.K:Jm:$1_Z2^^rW/*2jK0=C=3.g+5d$2R@Xq]H\.m1hp#&`4oi;SE'Wk!/$FdX<%Ng\G8%uQP,WWOpLEE-d_i8^ipQGCO@084t<X+#[&+'6-Z$U1_br^IbI2qRTlpQY8MrQ>O3Y+?4SG9;X@?<RFQ=-K115-?r2"!:U.%SMEC3lAZ3u>]jmMk]'U@Bu&bDip)d)<Yb,?NiSS+dg<@k:q6OoEo3nSjZpl:lt]N@61sOajLCY,D9@=.KtF9?Jm*P=3aGbo2c9Bh%[J8I?s&KNZVBgasHu5=JC>mm2!EY2_:!4-Vi1#ame`ppKr`cN"VYmo,I;MS!W0M_0K4V4$#rA_bm]#a^Wd"!+`mr5N.Jp5nD\m:r%D-WY&#HEhU6&qFMUA$/qkdX3>k\aJPDSKccO/r2cRiYY#(*C?4<<oeuj/OR\JWHk7-j2`:qUaTr\E[."k]'Va=b+Om(FB/(=1pm"%4K`i[=K-5h]2QN*WY_I]a48!@/+p#j=ti%@1,#"8=,3t]q#khZ`L;\Li/4p)?C<:%NiNstXMhRS`6]5LnZ=j<rq8d?fXU3<`RMC)%!lrg#C,Ud>EKtp!6fTX6_hQ02jr$PH)X1ad`jN^FMXh20Japm:Rt-O%B",mARE*CYG49HdL2,Qr"rZ#&*cA*L2bupj`jLGgTdd!e%SJu$C48jRa0s5fh)e*&^MD?ohGnC'd>W_&ZJT8s#$39,K@_%4i\m+e&+MbML)T)R8RarS=`AJttoA\m])%E8ZKBB"!G]>>*.C=-P%4Ll=Gf9k?PMee/FTk(Wh0$t5&->8fCTk&c;):,\"`f+P6>g%L%jV#c@ILVuBW\FsO(=tYX)A^p[T0fL[/b:DJ9=<!A:o[`0DDX"a%C3l[4:Gm&F5`BJPQq#(Q:RFVk2-1!:))q@A)FBj0c&8W!j&TUP<joFWodjio>[nO,2f>?oddF,'K'&KOi4-eNC3!SN=tSsJ<dfIV%Nggt-HO-D,R\sARj44gAh,S.l'+V?5R)s>B-"R+t2.g6Kj#C<J33Hsc&T1i`;DpJ:0e&S2f9hfINLN!]qI%HkCJ<7?`\f)XF5p:9%o\ES_DsO(Jg:)hVf,>`*8Ha+t-FrS'FA:V9?_tIohUTi0CRreKRB!A,?%'2Y9^1]Z[E`E+rUI%s#&rT@o=VVRNHsC9\AgXLDHu5`%ceLKTZ,)E8bl-\D2;SV`NGF0mX7WkZ\<ff3QrkDTl?R+5H'SB[#5;$[Df'GH7H8)M$0K78_<9?0q8E3tEQsJY6k6*32+J/6ITBMO%"3e9pl_p4k%8`piE=GO6R;n4*_T]M*3+GR<j!5bk\42EcAm?S#0Jfl"H!t5g,IcON\BaEBO`B2cLP^#A2dR0X3h_@dES[=EJT75W%`5&m3!4:3sebrrn?<ej=0e][CSX:5F*M"#`f=c5+0!=dID-YlG53(W`0@e(]FeT`5iqgdaeoWdWI47d9lR)lbnZ<JWQl"?pfU*K,%Go\gtY+HQ("c:MT\rh"2_u\u5Fb1W$j#XC2VT-k4:lVO?WY5E$)qVcB$953S,Qcm`%['/=lNBXGa%^DXMV3"*-ZO[WFWr-\j!KR3%\SkQ]rEL0]f3'"G5->P])'@HN4II820j!RY4_'#*hWEt'Y!acQh9-.[a7\f>_XP'1N+I6=GDp*V>gIYhfrDCV@!5f$GbQL@mNi17%j*J]YA\<.P0r*d?QRPUglNL'@=*<t=6]PBkI.rn>;5--51H;NNSJ`F!=lM+pDJFJo1fa4#.@R8_iB^>T>A(4pi4/2'cJ5pd"4K',%FLPR27EZ>0@.O;<R]3kC4(I;3Oe&asSY^77j15a>JrT(ILDq2a=^3[>Y'UBqCg;/eBPLfH=]hVBSOFAoj15bZ6&k2j$4W!\hB2q>%f3)B<1i@'_-q!%+,=OEK3g$/)EP5eFB-\8Tc&CrtUU2Mu=faP<XuD<f&pa5.9UKh5iKVn>\rR#Cqk?Pl>\B2?bdcNrT,&q<>67:6%Fi%!#j#UsI7`KSS-(,V%]giDaXqRLt(tUkKBjIH[c,mc2hQ^%q\5(Cc?sN0QVfdja[41_,3h$fF`HC0BoAY):4&8i3hJ))aGJ)DI%GpfsV0!;gp.(Hdio<H[%\oW(g`H@n\e)EEh?`(ebYC7?)f=aT]/?ZU0*ON?%.[b9rh-8"ji]9.N#0(eOc:j2_hJrf<f@bF(1Tn>r%OI:*Z'fJG>3i,bKNU(E-(`V(4/&U#L:/)"8j&Wl]<P+rJH5KA:lX#<%3Na#g)]dPD*tCB8ZNk#c>k`90iGkFXg@Vn#g.#0,M2JDZ%oAb,s!GYc3K:2=!onJN;V%7qn@6"$An&u#agju0=`uQ"3HlTCOpc*Gq^rIHTC4+ffUW1=dY[>Dj*I^C0j5YM2+Q2:9i\0?P%bl@K%+%KiP546d8DSX:)g4PIX$%mbh,MWMG8%9'nc6j2*5)r\En8Y@S"s:ll)u)C!$c'ff\-Y@E-Q<+NNqWVEEU;/*O#umbpc)Rq^rN#@%Cj[3U&E)SnJH-d9idJdEHf+>BhA[QW9*P+#K[7ZYnY-%J0&a/,ECoC[!?]?G,5A[D;[hUE#&bU'a,PcH0!g_*RKPfln4$l7gdl\Y%1+U#6(_ScT'^aZ$l5_;j*B+UT`.V((c[_#pHCoa.2gj*XEnp.G%ck.YG9"\D;\Nlg3.&@5!0/")1^4pYr8%N8DYUmME88fe&)=\R%""nQQL>R^C`XTZj_2TBt#Qm#'kktd'h!k1QfXTm_Bs;Tpmn@-L7`KYYm'D*nphAV9IdSije@8BFh6bX_n#j9#m(5j_I^]@s2gfWN%B\Y#k$Q!+ug^B>4Msl@VVhKKVdORan%@D.1E%fG@0AHq2=['>$1[_$hgeJs9;c_;t"_QO<gn5$FI=j-lh*4mnj+^q!JAr$?8qIs?%r)*bXDYU%<DVXa?-,=N<LFj[iNTs_YFPQAT*pgDq2a-)=_Zr&m`sof^JWH:h5)8+jIes3i2gf9GK&!<=+%F>6*XP2Opi$rZ\Z!%I%9D(G'7W/"O&WYZ9_(7ilUN2DFT)'KGDXUP!=E:0VO'IF9EK:O;DqlR5=cIdh.B@0?JL3;opW.=NTR"[pgc(R.C"tYbm2PfE;jPNI%d,[[V^:=YFj1ZCK^Ksb.f"/Nb4`VF+VSl/AEhdW8/j'T34nX68nFZ$p>N;/!2mrV;9Tp\s(7O%JEAqQOU\hcn-9'M6Cu3n>[/7S*%-9%Hj%o"ZkSt>ks$VbO6n1Z]0Z/0`sf!_L4pWYP*d='nGP8erYL*ek>IXO+M:`m(3C"L&rp7[KW1qDQ]AnZ5&0?hf(L/7b6P8eh)%"su;,&e.NPpa$iGgdc4[<2k=/%?h``)shiC0AE_lL0qAtaUQ"$_ibsffnLgI;6+Hpqs/N#0BJkfaL)3u2uHP`8oFF#*0_FSbsBH?%/JO&t+c/d2'\S3d[gGu6[BlR<O!_tG]GQg%C]+<tq]J`ZG(3V8jAn.jHdj%8Z04+.:l[uR0aFl[^5Y/&A!%JJZ09Kq!4LK<2huE)%%uT038cTR9WU4V<%WM<<I4cKD7;d?q!/fS$nc0B7iU&QPEZ_\ch.D`F/B7f\DKm0&MAud@TZBu,!/b%269,h[$Kk6G`HO86mX99]%7F$*9:um6%T_h39S:6kN7F(Wd:um"R"%=hU:GUh"Vo[]$WIOs=%ptsr0B`?g:JTuU!0f:\/-+c5ABmHNN>-mjG6![[:_']65e5n]%P_6@E:_!a=6ojit!6UH'$W%?$P(@XMm)5(iZ='>1i7]%s#Bp3A*5EnWEj-B'b)t-Q;3#H`LiW!q+NajaSr%LZ[;D`s!0i,K##Pjg%#Xl6!Y,&5T9Q2-Zb,#/a9Ve6`hWnAYS^19B_fWVNN].Y]cBc);G]FsadQk?nln_Hj_&b=-/qKuV:bDpiR"05!_(.pa_##oc/q(OU%D*,kl2c;9(>8erWJ=.6'(Kc6#b0At)2a5,M\^VKtUn/:IAjXYBA4q($L-cb7;D&DlF@+,E#1W&jU0R8?&VtIOroMs9Un.`<ls&1m%#'cSmE[`^3"R8Qt!_ehO5^?%f$ZJHXj[)_>O`Hl6Bd;^p*%rPu1.2m&jlQlkrTFP:Q[uL\.2R"^NKdYXRXIgf"=:s/1K#h17%]Q]%P;@?*2,Q"'80p[7*9^ftb,t;1Fkt,++-hL-(Dr,Yb%8(%7`o;h6:T,Z`3;SNjZk%(;D%qjc'6BoLs2(k3Lsd)Xea8>@gFNMTur`O%QN7Pa.@3bt0iBV?7MVgK"1g6dDFPPVX!XSM)q7Eh*9_%PoW0mq^8:40"ii!dgrf20f<0:CGg)B[QqB0r1+4_AjYF1S6fi>u>X@JW%?UCI/ji4gIoZX)&l75V*L;[\K*%9%C4NI&#,$$=?F6NhsaT::sW@E*5/5bM@OHW(egK"if8,SqenB4Y=%/E[q\JuGoK$*0UHHba)%bMXs,jYD'\1Z_Y$W4QAN(C5$h.[Q!Q"I1Kj7tSkuU*E%e8mmSa.TZn:%$`>o4!pt4EHl#m>X3r\.TZWH(b.Ic619T^9Xt5<cqLu:%G\!],9Ej6X2,P(i,U;CX&X&8s$UUkrQ^X>]B(dYSP)43&l-i266@`UB>fdCip*g$*R;sSboYctE6qB>R:BMDN)sR^N8@_'?A>EHR%pY8<MiX!Xo\O)*_U0Jj21/Y267P[j/cL1U$PUcdhBD-'4W(*B`P+RPNJ\l/r**JaBjU*/oM/id^UPX";Yh_-9'ga/jj\"IE#q8p]%Oc5MT5XLHp/&Xtjb)rG*;m&)L1/b7d,FKu^LlooG.uoaNPe/_,Ko\#`esnQ?jbdOn'BK:'ejR&8N+A[<9"sXr17P`#eSJEMWgS`4%97V%?!9s]OX+X"Jb1-Kodo9<Jc57s2"3=5&\OqfkTNlVuA>!2ch\mnE"7Ju@<HX72TNhp349=On0p7*.eM354Eg7K`4Ln(CA=hT!%MnHZ:3i[j(`lV4I,kL(H+d.+kPn;&"\No=8:Tb<S)(8R[SJrtYM3/42X2IO5b#QJQ#0KqT,Qm.C^n7/Qe1m,2Eq>Br8(EPt*@$"0%U'@@I3_=_F;Zb*9ak)]p!%)_!:i;gVhHdHm-?'So/lr*%!Tb)B=>7#iPfmS[)CRPP:>`3t(O`d9"AU/`j\"GVU>46"ASt6?'b:-g%b!ii1-H`H3am-Cf,-#,t!Te>J2A/l)SQ+/BV:CBe#hZVN"\SKU*MDslfBq^sDi]-`lg1nu786[FfLS-8Fe78l]:'2?DD.\r$RiKE%3.D"PXY\8fX2TlaFL6U>R63P5jjp\LOg>N0Q&1M(PZo,?qJL8XUEf<i,266_\Z'jVbu)a5Oa(oW!WNm2/iTLL&`mm]FPkND-5.DV%.$kn#Obe$Ve#8_0)SqPdEk)c%#q37m;$3T*7%X+V7=Kgh'i6MAJg1<X1)XX-b2l*7,bSBF;%"d2[Jf`R-^Pe"Oa(nFo<:rD3][mK%DOnRD=%uPOkX[\DKsfcC]7Ae(;)Ld"U*J(Ho#epLfBjs%O^N2ALb5!!D?NJ(aXp&lqJ%aZ_+b\@DOoWbhb/D2*/Q(&2*\HON<k2S%&`kcn9d\"7lLsWrU>.fk/^ft4WTND85e2$[>?t#b8ou>Og^WW<>:K\t+*?>!&flfV2`6Sp3N<Z3#q2,Zd?/s"H)9r-li"I$!4[8o%\Pkm`4Lmud(Jep`Q+e2*9lMAL>UF%%4Ls5J<sg@bLuS'?%IHPR!m9>`n\1iqAfb!Z&U>kgafWJBm^g6kM,CZ!d><kdPae+2D$#%t%*Jl/1];).GUu+j+s$L2:/\q0FaU'E*cDKoGC>$6522NcK8_#Ln/pF$:1$.tsK@.-9N@&BQ;_IXh`K\Q:YXq[%9K%QtEd;4Ve1DQ3%IaHUNF]5`U(ss?HD5LS+`(-:GQTO0RB$.4hmCV7^M!.[EKp7LGFtr+0)0bfpC8M5=8@dN4NJ*O#kMCDaXdOB"ULCf`B2hT(*-X>>%DOlJ_?fUM[NeEY?*(Dkc/qW&;nb0mk_g$NA@[ef*V>VNp.@3-Td4j>sQC+%[lcB"lW\sBCSUk4Z4lOdBh;7+QLiU$>*f2;S:=dm:%Ze,eLW[78PV\`/^%n\kh-l8<E,I$P?I5a:e?s#"KF&^aV\TJ$^I5O_.iZeKc1.PpcPfpu7d0O]<5I6fT34Wdq>TSod0!jqnW73f;%4G]&OP?[s4GMR^G2WZ^KT(ki5\\-3ip+>*!hB4on9J-jm,JiG]+R][bQNuKsA[XbpNs(ZiS/jF[/s!lZ=u.8=8!i3.`(,F$Xb6ZG%h1cOb?&%*8`mln'*$C(aQNmPS=E8Zu+GhD2LBAfqj>&+!N0;A:!(eTL<>iSX\"U`1,0?sW!Hlq]q)\#p\)_!!RBG;jcDXo%+,!,c%alPg5,`l7PKLZ*cA^9'J,e%e%e5o9TKD7t[\]b?qKB-(I_1)$`'JYE)`0&4_#VeheV'*9`=#1l4(.N2,1:Wr=A)pZk_Wkln>c;OJ%MHmk8+.4<3[Cj+d)tsDl,)G$s;p`\'Wr0OrErH;7E[uW*cnN^D'ML2PDWN_=EjQTJ&I"BZVH2qC<,>u-bXT^V4GQ]\\Wu?>lB^k1%er,a`,0>Q8$V&7?e;)j['@i?b<>3pE\B-#,Pmu]T0$3$KDiib=ML*k@B(hU=*TDYb,*:U04J\jRMnDu>jApO2p!m6a<>\^,'K$s@%P+.o\h)P_6%YRDo;\K[-,e6_j_Bc[kR6mh%L^Wd.89.WBMaA]"R2g4nGPas4Ue#N)'2LqC\Q)]tI<S$5e,itE;EM_0p*m>96Xc;3%:5B;N-]F3m3>q6GDPnUXLa4o:A%bVt$Ah(p\Ws$XhfU>^V.g3:[M.Xem0]'<<pGG9C9"#"Kh6;8Fb@E2E<-Tq,q_;rQD#,4Af9l5%183c0.YkSN)%(8t/@iZ3"f(,ga%3Gq%[[Q7aW9LgQmHr97"Q_/J7UK0DACCJ+%#dB#7)[*j=$`'9lBsSd<AYcJ?<@Pg]:To4Ll[k%Xq$l1fEOIK!u-92EYRF3.!IrQdh/p=e9qG\Ne$e$Ekqe-:[)gg_"oK#mJpR(T%j@a:T4L&9HrNX%^OrNPG=WQ34T.DOE#:GC$N^[%*TWh3-[/P0<GDPg5N'X(,`J3?G>uR^C;Jl(qZ,^fd^`):F,:HYEX+&H#0Is^=rSl6R#>^Ng_&Ii8h?Wu#X#X":nCSD%[*.&P</g\%:O**K<'45d!J,!Wgd.sEH#a-M^ui`ZK41#OGPHRT[kDLWaW72E)CTfkNbb<C6(Y38Emudo.!NJ);gR4b_Q/6.#MH3`arSc(2,N]L%gc8rdS^:\:PWL+#Y,dtRis_/6@@8#^G=Hi4/oj6!VL`b8L_U$Rc4<a]gWu(28-@u!5_)cOge!$,T\N+FU4I>4&/,`=:*Lqsj\CnS%8qT2sgbVce)CkgL:/Gb!K0(63(asT[">Na@"L/^lZ$=c#M1r*3@WC#e-QEWfjN`9D;`_`dN+AO8#rogf\MLJ8PQl>Xr<T(O8W72Q%ge!H8T\KjC_F1pJ%Y]a[-S^d@E[UWo'BMt(T`?Kb&gA2AG<0@@T\ScCaZR*I"G;8GVc-Inb+0$)b`b-I,FBj&G"1"MFW,:.T%jX:%ffZfd0WNP-:2g:>b+2oC%$Wi1O:7@8]nuqhmNfj15e3'ia[E\'XF(]C>YbQsge!<4U>/=d]SU[N+d.CsM/7>KjUt_]-H[Wi8-[3_%j6-Nd-'H4VPY39Q)^q%Dj>KgeOgJtu>U&^l5e09L[=N@T6tlbb&dcnhas@[i%?sN(8-[3_@O)';<m@'_aP:s'+NZmZ"O+qP\WiXI%D4hl&C]MU(UZV[#V9HHlJ4hSL%$XC[?j.sF$KGl)8e?F[PY6^MPu!JIP73[K+F+B[99jL^!LF(U%$XCmjpdPJKLlBj-,Lo0jV!4c%UZ7NtUjJ`mq(E=0QN5YT.d*Nd0]`oZPaQQK#g,iOj9Wn!\HH["83'<)J<W]eTM1SC6r6@q,pF`^jc[G0-H[V9-mRgd,SVKb&ttJN%Ef!W79Y!QiA>WTU<&.B)"X'Emi$b]0<%\@$Su/Rl5Yi8:R97R-\I=V<:q6u<:D6b=`&hPG;/cc;>R"c;#qH6KSJ'k$^sOS3/k>Qh%Y&Zn.A>U>8G[S\U&$39H5U:=-1h5X_J5ZMS-<)a!/qZkP;_A_6R41X;*ggscnsU3LEhKLJ`l^I[!)kM&8lGq!%TkP^=?5lr1gstJ%AkITs&7nS#b5kH%MCdnlRjaU*A'>*Z#aL@5bCIGd@:^W/'BQOK]ckO0+seJq16I`^Eg]J?8@_EiA>WUdVe)`1-<)a!0#PU_;_C.2%1/j5(4YYtGhZHe04&dt6Np8b]jf%#<;_C.21/a.l4YYtGh?-\/)qJPq*4:,Yb2pI<R]NID"&^`b.2aS$_&SjlQ\gsNPfn#1c'6D)%8nQ4W67#"\W8.PTXq3*$.T`;@(b/&C*h[NW!fs$qeF!>e8*q@rEWm)9WH-MVJLX1W*iO,/mK"h.m2iKPKj`#)\O*N2X;nWpi5udd%-$//TbXcg:$Ghn9EeRoC>e'ptd9O4KY[jnAJ^nG:*-HQMaAJkugD;_fjU*M4k/nFF'[;o<GRn&i_EsHsElIB4A*"$uPdtf<J>'Mo%`C1l-Pm_/LN0Pmo/uZml"DXU>E[;7u`K_qSrMSb6&hng(X\-D'#qQl"n/*\m$Lel`=.na`/6<+@%$iCEKr=U#i\8JZ\H9@f@(B*L%a'cFjq/b:d_Ba3aap2<Z<]c;@`JIDoa'?/O=iXdX&r:@-SLB''VV.u"-oP-ZPgM3eXoo6'/$];nR7jggE1'A)3(u)/XqE(L.p(\b%)(\:'*-:4.GoUne.UeLNEn+T]\T/GMQFV%$0ZdS1H?rQBA0FQ#="Y3#0itLj-(-8bM3?)JX+j*[Q)d;E#0YQ@\?="AQt3F+,tp'r%Y%G[r@2@iJKB6i[>ZYNWS7Jd--rjc[>W"nTXrMRuN0OcnBoJ=X'Flp"NZp<Wb#RFH;roKKP,WJ$S2"!G&geJG=6j2tJDBj^0Zd/%%8sj.f>U<'!<3?i\)(J],j+bE%L=Cpo/0<Ds=\L:G.TZq@%$djn2@YqP/oq:tY!U(>6=gpbf0X2;9OF,u0bc4(AdP-@U36P[kL(md%I4<%-^7bgjTl$J1MoQ9,=?:k9L;f68"7H7A)CcP<WEc,*9;/Q4YSd-NlEL'*%<Yc8Xp_K;\=eEI!?1/g/-,t=67`0.k<^_SpO2q5%7]9Re7$jTf/o1SfXuUq4.b@pb$`I<Oqug!%"\,&.pAmHjhS%qsW,aK:i`r*%+Q(DT%kKZkB*jMT(MF,J2$<:L6-TR:TV/hZ9;%cb%5)UX3Y]?o>!EH9'%l74G+s'SB>4ngHcN9TZ<4Q$Ieb*(F7s0(mcrYtE;.0R*>Q[9'Wa#WXAZB!VTEJ8t3Db;Wf0D9_.b>XhJX(#A%EF#2*OV1X(#.)BM\H\#6<4QUcOJ-\(!0Emp%>p4?Em5jN1Z]N3*Acg2i1\\CeI8l@;NCS`+Q]Q`!)eig%3Xc2d/[(I!GaDfXoh`[%;Q_+#WsO[s$6\H/QN0q/[1OP(;$R,r*&S6Lb.3f=5WS*F!0le]Muo70VaiW54u''LX)?E74?;"(!%19B!,usArFJ7ARJ6`sa`S_m%B)pe8=A;g:/>[?,*SdH1EcC`ga`V!Q`lW?GO2f:a8<%7MhLgY@U>Dh-/Z*_gLhB!0?_;=Y4^\US=nR:ee7*_7#XL98!ub""<=^KB%/Z/8mkVMfoT_C8pomk36[+#0Z:Q+IVf"oIN:is_!JNsGf#O`Y&>S!blbtHm/&i_mbjP]+1K-bJW4]'E\0D0iKe"V,3YQR_(#EG26%V&mEZ0#TL^f7d<lE#C#.4r^"s#DQf/>^*Do+(9Qr916pF=-We8#J3#>jZl4bPk/U?^m&mW'ps#*/eFCj%\j)(mU09Uj]$=c+QXS3%"fC(sY\)%WX@bb#SW%<ZSAV1RP]O>;;(aT'O`H+J+Q\bV2,TBI$)/Ee&k"aS-&?S09-E>Hk(8gB=op-CZij9eBF1ISd1T,533kg2%#a^(a!H\JpkAUa)*8qN(3PqWjJV/8m2,k'u.8W%AV&V1f_d-"'1tTrF3Pm)0Em:?t.7^`J;Q_aSO`Ei_+Q\EF5fsZjJWqB_!\"@F%&u6N+&kG%"-'3-WQQXE_/jY^(KEtH#i=\Dd!$jB&2'<%0U`MLG>,-m)58-iqO&&F6j79-P;3(uFZgS"M0&YdlMXD3,2g8OT7df0K%r52$bS/_Is_NkRZn4a:C4TF9Mp8;j.rgR9mj0*t(e'J'e&&8#;%mU'`]:])_bCBL@Q$RiRp"t5uh7n@5j_t.pqXW6&r9KD.rVYcd%5Q9CZs63<drq6l;s6$#(p#SE_G4T\AT5XOL5Q:!)mVM.6\,)T_s7cM6^\mq,^Ae#[QX>7>o1sl2j6sb\o!cC4c0p,UDa40eO$A+Q%YOHG>Os'c%?i9;P5QCZA%sQM&o(E$$XtRQfeX-=/5JR#`hgY0Thu%Wqa1qK25Q/iNs7-%`J+4?4r8JOmj1F2us*$\UpP47orhj[`%s/5>bchCe\qr8d]E8U]]f73Veqk(V&e'C8Xo_k+@rUZ*M5*`<WeGL,tpoFGohnJp$%eun@~>%AI9_PrivateDataEnd