%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: scaled.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 199 194
%%HiResBoundingBox: 0 0 198.2305 193.6274
%%CropBox: 0 0 198.2305 193.6274
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 7278 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD05FFA87DA8FD7DFF7D5252FFFFAFFD0EA8FFFD1BA8FFFD2BA8FF%FD1BA8FD08FFA87DA8FFFF5352FD0D7D52FD0D7D52FD0D7D52FD0E7D53FD%1C7D52FD0D7D52FD0D7D527DFD06FF7D27A8FFFF27FD0DFF7DA8FD0DFF7D%FD0DFF7DA8FD0DFF7DFD0DFF7DFD0DFFA87DFD0DFF7DA8FD0CFF7D52FD06%FFA8A9A8FFFF7DA8FD0DFFA8FD0DFFA8FD0DFFA8FD0EFFA8FD0DFFA8FD0E%FFA8FD0DFFA8FD0DFF7D7DFD0BFF52FD72FF7E7DFD0BFF7DA8FD71FF7D7D%FD0BFF52FD72FF847DFD0BFF7DA8FD71FF7D7DFD0BFF52FD72FFA87DFD0B%FF7DA8FD71FF7D7DFD0BFF52FD72FF7D59FD0BFF7DA9FD71FF7D7DFD0BFF%52FD72FF7E7DFD0BFF7DA8FD71FF7D7DFFFFFF7DA8FFA852A8FFFF52FD72%FFA87DFFFFA852A8FF527DFFFFFF7D7DFD70FFA8597DFFFFFF52A8FF7D52%59FFFF527DA8FD6FFFA87D7DFFFFFFA8A8A87D7D7EFFFF7DFD72FF7D7DFD%0BFF52FD72FF7D59FD0BFF7DA9FD71FF7D7DFD0BFF52FD72FF7E7DFD0BFF%7DA8FD35FFA8FD3BFF7D7DFD0BFF52FD35FFA8FFA8FD3AFF847DFD0BFF7D%A8FD35FFA8FD3BFF7D7DFD0BFF52FD72FFA87DFD0BFF7DA8FD71FF7D7DFD%0BFF52FD37FFA8AFA8FD38FF7D59FD0BFF7DA9FD35FFA8FD3BFF7D7DFD0B%FF52FD35FFA8A8A8FD3AFF7E7DFD07FF52A8FFFF7DFD72FF7E7DFD06FFA8%27A8FFFF527D7DFD33FFFD05A8FD37FF7D527DFD07FF7DA8FFFF7DA8FD33%FFA8FFA8FD05FFA8FD35FF7D7DFD07FF7DFFFFFF52FD35FFFD05A8FFA8A8%7EFD34FFA87DFD0BFF7DA8FD33FFA8FFA8A8A8FFA8A97D7EA8FD33FF7D7D%FD0BFF52FD33FFA8FFA8FFA8FFA8FFA8A8A8A9FD33FF7D59FD0BFF7DA9FD%33FFA8FD3DFF7D7DFD0BFF52FD35FFA8A8A8FD3AFF7E7DFD0BFF7DA8FD33%FFA9A87DA8A8FD39FF7D7DFD0BFF52FD35FF7DA87DA8A8FFA87DA8FD34FF%847DFD0BFF7DA8FD35FFA8FFA8FFFD04A8FD34FF7D7DFD0BFF52FD35FFA8%A8FFFFA8FFA87DA8FD34FFA87DFD0BFF7DA8FD34FFA8A8A8FD3AFF7D7DFF%FFFFA8FFFFFFA8FFFFFF52FD35FFA87E7DA8A8AFA8FD36FF7D59FFFFA87D%7DFF7D7DA8FFFF7DA9FD35FF7DFFFD05A8FFA8FD33FF7D7DFFFF7D7D7DFF%7D52FFFFFF52FD35FF7DA87DFFA8A87DA87DFFA8FD32FF7D7DFFFF7D8452%A97D7D52FFFF5352A8FD32FFA8A87DA8A8FFA8A87DA8A8FD32FFA8527DFF%FFFF527E7D7D52A8FFFF52FD34FFA87D7D7DA87DA87D7DA8FD34FFA87DFD%0BFF7DA8FD34FFA8A8A87DA87D7D7DA8FD34FF7D7DFD0BFF52FD34FF847D%A8A8A87D7D7DA8A8FD34FFA87DFD0BFF7DA8FD33FF7D7E7DA8A8A87D7E7D%A8FD34FF7D7DFD0BFF52FD34FFA87DA87DA87D7D527D59A8A8FD32FF7D59%FD0BFF7DA9FD34FFA853A8A8A87D7D527DA8FD33FF7D7DFD0BFF52FD34FF%A852527DA8A87D52FD047DFD32FF7E7DFD0BFF7DA8FD31FFA8FF7D59527D%FFFF7D5952537DA8A8FD31FF7D7DFD0BFF52FD31FFA8FFA87D2752A8FFFF%845252527D7DA8FD31FF847DFD0BFF7DA8FD31FFA8FF7D8459A8A8FFA87D%52A8A8FD33FF7D7DFD0BFF52FD34FFA87D7D7DA87DA884A87DFD34FFA87D%FD0BFF7DA8FD33FFA8A87D7D7DA8A87D7DFFA8FD33FF7D7DFD06FF7D2784%FFFF52FD33FFA8A87E847DA87D7D52A87DFD34FF8459FD06FF52A852FFFF%7DA8FD33FFA87D7DA87DA87D7E7DFD35FF7D7DFD06FF7D527DFFFF527DA8%FD31FFA87D527D7DA884FD047DA8FD32FF7D527DFD06FFAF7DA8FFFF7DFD%34FF7D7D527D7DA8A8A8527E7EFD33FF847DFD0BFF52FD34FFA8527D7D7D%A8AF7D7D52A8FD33FF847DFD0BFF7DA8FD33FFA8A87D7EA8FFA87E7DA8FD%34FF7D7DFD0BFF52FD34FFA87D7DA8A87DA87D7D7EFD34FFA87DFD0BFF7D%A8FD33FFA8A87DA8A8A87D7D7DA8FD34FF7D7DFD0BFF52FD35FF7D7D7DA8%7DA852A87DA8A8FD32FF7D59FD0BFF7DA9FD34FFFD05A884A87DA8A8FD33%FF7D7DFD0BFF52FD35FF847DA8FF7DA87DA87DA8A8FD32FF7E7DFD0BFF7D%A8FD33FFA87D7DA8A8FFA8A87DA8FD34FF7D7DFD0BFF52FD34FF7D52527D%A8FFFFA8FFA8FD34FF847DFD0BFF7DA8FD33FF7D7D7DFFA8FFA8A8A8FD35%FF7D7DFFFFFF7DA8FFAF7DA8FFFF52FD33FFA8A87DFFA8FFA8A87D7DFD35%FFA87DFFFF7D7D52FF527DFFFFFF7DFD3AFF7D7D7DA8A8FD33FF7D7DFF7D%52A87DA87D527DFFFF527DA8FD31FFA8A8A8FFA8FFFF7E53597DA8A8FD31%FF7D5353FFA87D7D7DA87D7D7DFFFF7D7DFD35FF7DA8A8FFA87D7D7DA8FD%32FFA9597DFFFFFF7DFFA8FF7DFFFFFF52FD35FF7D847DA8A8A8537D7DFD%34FFA87DFD0BFF7DA8FD34FFA87DA8FFFFA8A87EFD35FF7D7DFD0BFF52FD%35FFA87DA8FFFFFFA8FFA8A8A8FD32FF847DFD0BFF7DA8FD33FFA8A87DA8%A8FFFD05A8FD33FF7D7DFD0BFF52FD34FFA8A8A87DA87DA87D7D7DA8FD33%FFA87DFD0BFF7DA8FD33FFA8A87DA87EA87D7EA8A8FD34FF7D7DFD0BFF52%FD34FFA8A87D7DA8A8A87DA8A8FD34FF7D59FD0BFF7DA9FD33FFA8A87DA8%A8FFA8FD37FF7D7DFD0BFF52FD35FFA8FFA8FFA8FFA8FFA8FD34FF7E7DFD%0BFF7DA8FD39FFA8FFA8FFA8FD33FF7D7DFD0BFF52FD35FFA8FD07FFA8FD%34FF847DFD07FFA8A8FFFF7DA8FD35FFA8FD3BFF7D7DFD06FFA827AFFFFF%52A8FD34FFA8A8A8FD04FFA8A8FD34FF7E7DFD05FF7DA87DA8FFFF7D7DA8%FD34FFA8FD3AFFA8527DFD05FFA8FF52A9FFFF52FD35FFA8FFA8FFFFFFA8%A8A8FD34FF7D59FD0BFF7DFD36FFA8FD3BFF7D7DFD0BFF52FD37FFA8FD3A%FF7E7DFD0BFF7DA8FD35FFA8FFA8FD39FF7D7DFD0BFF52FD35FFA8A8A8FF%FFFFA8A8A8FD34FF847DFD0BFF7DA8FD39FFA8FFA8FD35FF7D7DFD0BFF52%FD3BFFA8FD36FFA87DFD0BFF7DA8FD71FF7D7DFD0BFF52FD72FF7D59FD0B%FF7DA9FD71FF7D7DFD0BFF52FD72FF7E7DFD08FFA8FFFF7DA8FD71FF7D7D%FFFFFF52A8FF7D52A8FFFF52FD72FFA87DFFFFA852A8FF527DA8FFFF7DA8%FD71FF7D7DFF52A959A8A87D5252FFFF527DA8FD6FFF7D7D7DFFFFFFA8A8%A87D7DA8FFFF7DFD72FF7D7DFD0BFF52FD72FF7D59FD0BFF7DA9FD71FF7D%7DFD0BFF52FD72FF7E7DFD0BFF7DA8FD71FF7D7DFD0BFF52FD72FF847DFD%0BFF7DA8FD71FF7D7DFD0BFF52FD72FFA87DFD0BFF7DA8FD71FF7D7DFD0B%FF52FD72FF7D59FD0BFF7DA9FD71FF7D7EFD07FF7DFFFFFF52FD0DFFA8FD%0DFFA9FD0EFFA8A8FD0DFFA8FD0DFFA8FD0EFFA8FD1BFF7D53FD06FF7D52%59FFFF52FD0DFFA8A8FD0DFF7DFD0DFF7DFD0DFFA8A8FD0DFFA8A8FD0DFF%7DFD0DFF7DFD0DFF7D7DFD05FF7DA8537DFFFF2852527D527D527D527D52%7D527D5252527D527D527D527D527D527D5252527D527D527D527D527D52%7D5252527D527D527D527D527D527D52532E7D527D527D527D527D527D52%7D5253527D527D527D527D527D527D5252527D527D527D527D527D527D52%52527D527D527D527D527D527D525259FD05FFA85252A8FFFFFF7DFD71A8%84FD07FFA87DA8FD82FFA852FD0BFFA8A8FFA852A8FD0BFFA8FD0BFF7D7D%FFA87DA8FD0AFF7D7DFD0BFF52FFFFA852FD0BFFA8A8FD0BFFA8FFFF7D7D%FD0AFFA87D7DFD0AFF7D7D52FD0AFF5252FF5259FD0BFF7D27FD0AFF7D7D%52FF7D52FD0AFFA8525284FD09FF525352FF527DA8FD0AFF5252FD0AFFA8%27FFA852A8FD0AFF847D52FD08FFA87DA853FD09FF7DA87D7DFF7D527DFD%08FFA87EA87DFD09FFA82EA852FF7D7D7DFD09FF847D7DA8FD09FF7D7D7D%FF7D5284FD0AFF7D7DFD0BFF59A8A9527DA8FD09FFA87D7DFD09FFA8277D%A8FD08FFAFA9A87DA8527D7DFD09FFA8FF52FD09FFA8A8527D7D7D527DFD%0AFF5252FD0AFF7D527DA87D527DFD0AFFA859FD0BFF52A87D7D52FD0AFF%7D277DFD0BFFA8FD0FFFA8FD39FFA8FD29FFA8FD7FFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:54:56+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T13:54:56+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T13:54:56+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>252</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA/AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8r8+636f5j6VpVt5&#xA;hOnai4sZkhmvUs7OKD604mDW5kU3092imJI+B4UDVUkVVZf5r81alpOr6HpGmafDf3+uSXEcX1m5&#xA;e0hjFtAZ2LOkF0xqBQAJirYv/wAx6b6Ho9f+2vdf94zFW/r/AOY3/Vj0f/uL3X/eMxV31/8AMb/q&#xA;x6P/ANxe6/7xmKoLTPMfn/UUuHh0HSlFtcS2r89WuRV4W4MRTTTtXpiqN+v/AJjf9WPR/wDuL3X/&#xA;AHjMVd9f/Mb/AKsej/8AcXuv+8ZiqC1fzH5/0uwe9uNB0p4kaNCserXJassixr101R1cVxVG/X/z&#xA;G/6sej/9xe6/7xmKu+v/AJjf9WPR/wDuL3X/AHjMVd9f/Mb/AKsej/8AcXuv+8ZiqDi8w+f5NWud&#xA;MXQdJE9rBBcyMdWueBS5eZEAP6NrUG3au3hiqM+v/mN/1Y9H/wC4vdf94zFXfX/zG/6sej/9xe6/&#xA;7xmKu+v/AJjf9WPR/wDuL3X/AHjMVQekeYfP+qaTZanb6DpKQX0EVzEsmrXIcJMgdQwGmsK0behx&#xA;VGfX/wAxv+rHo/8A3F7r/vGYq76/+Y3/AFY9H/7i91/3jMVQd75h8/2dzYW8mg6SX1GdraErq1zQ&#xA;OsEtwS1dNG3CBhtXemKoz6/+Y3/Vj0f/ALi91/3jMVd9f/Mb/qx6P/3F7r/vGYq76/8AmN/1Y9H/&#xA;AO4vdf8AeMxVB2XmHz/eXN/bx6DpIfTp1tpi2rXNC7QRXAK0007cJ1G9N64qjPr/AOY3/Vj0f/uL&#xA;3X/eMxV31/8AMb/qx6P/ANxe6/7xmKoPV/MPn/S9JvdTuNB0l4LGCW5lWPVrkuUhQuwUHTVFaLtU&#xA;4qjPr/5jf9WPR/8AuL3X/eMxV31/8xv+rHo//cXuv+8Zirvr/wCY3/Vj0f8A7i91/wB4zFUNpHm3&#xA;XpPOP+GNa0q1s52059TiuLO9ku0KJOkBRhJa2hU1eu1cVZZirsVYd5rVT5+8jsQCyz6jxPcVsX6Y&#xA;qzHFXYq7FVOG3t4A4hiSISO0jhFC8nc1ZjTqWPU4qqYq7FVOe3t7iIxXESTREgmORQykqQymhqNi&#xA;ARiqpirsVdiqxbeBZ3uFjUTyKsckwUc2SMsUUt1IUyMQO1T44qvxV2KuxVZb28FvBHb28awwQqsc&#xA;MMahURFFFVVFAAAKADFV+KuxVZJbwSvE8kau8DGSBmUEo5VkLIT9k8HZajsSMVX4q7FXYqsjt4In&#xA;leONUedhJOyqAXcKqBnI+0eCKtT2AGKr8Vdiqy4t4LiCS3uI1mgmVo5oZFDI6MKMrKaggg0IOKr8&#xA;VdirsVYdIq/8rgt2oOX+Hpxy70+uxbVxVmOKuxViHmr/AJTzyR/xn1D/AKgXxVl+KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxViEn/k3rf/wH5/8AqNhx&#xA;VkV/rWl6fc2NteXKw3GpTG3sYjUtLKEaQqoAPREJJO34Yqhb3zZotnrkOhSvPJqk6RyrBb2t1cKk&#xA;UsjRJJNJDHJHChdGHKRlGx8MVSfzV/ynnkj/AIz6h/1AvirL8VdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirEJP/JvW/8A4D8//UbDiqJ80+UE1fXPLWrw&#xA;RWy3mi6h9YmupF/fm1NtPE0MbhS3xSyoxUkLtXqBirH9U8kec77zfFr8dxbWU7taxTXVte3yNHaW&#xA;d5LL6JtafVrr14JOLeoFEbFivLriqO882MF95z8lW07SpG1xfktbzS28m1k52kgaOQfQ2Ks0tbeO&#xA;2t47eMuyRKFUyyPK5A/mkkLOx92JOKqmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KsDsNItdN/NqJLeS5cSaBMWNzdXF2a/XIR8LXEkpX5DFWeYq7FWIeav&#xA;+U88kf8AGfUP+oF8VZfirsVdirsVdirsVdirsVdirsVdirsVdiqDj1AvcKnp0hkkeGOWu5kj5cqr&#xA;TYfu23r9GKozFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxCT/yb1v8A+A/P/wBRsOKsvxV2KsQ8&#xA;1f8AKeeSP+M+of8AUC+KsvxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVBz/U7e5WRLUS3koJrGsYkK&#xA;rRWJdyn8yjriqKhljmiSaM8o5FDo24qrCoO+KrsVdirsVdirsVdirsVdirsVdirsVdirsVYhJ/5N&#xA;63/8B+f/AKjYcVZfirGtf806jp3m/wAsaHDYc7LW5rmO51F2TinoWk1wsUaB/U5s0IJYpx4+52VS&#xA;zzzfQWPnPyVczrK8a3F+CtvDLcSb2TjaOBZJD9C4qzS1uI7m3juIw6pKoZRLG8TgH+aOQK6n2YA4&#xA;qqYq7FXYq7FXYq7FXYq7FXYq7FXYqtlljijaSQ8UUVY4qkKuk916s31hQksqO4Mysyt8SRxxIRKK&#xA;IULfABtU164UJ9D6XpJ6PH0eI9PhTjxptxptSmBK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWB2G&#xA;r2upfm1E9vHcoI9AmDC5tbi0NfrkJ+FbiOIt8xirPMVQd5pGnXl7YXtzD6l1pkjzWMnJh6ckkTwO&#xA;aAgGscrL8VevjirHPNX/ACnnkj/jPqH/AFAvirL8VdirsVdirsVdirsVdirsVdirsVdiqE1CTkFt&#xA;REJWnDbM7RrRaftqGYN8QIoPftiqQPp19KYdQtprhPXdLlruNkdxA8Kh09EqYmYuinaLoKirbEoV&#xA;NTg1OPQ7aKH1CkNVIMYdmRXCReqgR6j0quwCfaA6YqmHlg3f6LVLoxvIjH44BxiPMCQhN2BVGcoC&#xA;Ntu2BKbYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWISf+Tet/wDwH5/+o2HFWX4q7FWIeav+U88kf8Z9&#xA;Q/6gXxVl+KuxV2KuxV2KuxV2KuxV2KuxV2KuxVSu4EngdGijmNCUSUVTkB8Ndj3xViema/ro1J0n&#xA;SWaBpWhVZgkYVhM0Q+xEu393UhnArStSBhQnN35litFjSS2lmu5GdVtrbi5Pp8eRUuYuVPUUU617&#xA;bGgSmNhfWt/Zw3lq/qW9wgeJ6EVB8QaEH2OKq+KuxV2KuxV2KuxV2KuxV2KuxV2KuxViEn/k3rf/&#xA;AMB+f/qNhxVkd9rWjafcWttf39vaXF6/p2UM8qRvM+3wxK5Bc79FxVSvvMnl3T9QttNv9Us7TUb0&#xA;qLOynnijmmLtwURRuwZ6tsOI64qkPmr/AJTzyR/xn1D/AKgXxVl+KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxVbL6npv6VPUoeHKvHlTatO2KsNt9XubPU72PULa5mh9P1dQMsUHBIg0wV+Q4mQcIx8K8v2qA&#xA;UphQnGpweXLxYrWeT6o0DOtrNGzWxVt1kSKQcVavRlBI8RtilMrNLC0RNPt2RTEtRACoYAmpPAUo&#xA;KnsKYFRWKuxV2KuxV2KuxV2KuxV2KuxV2KuxViEn/k3rf/wH5/8AqNhxVI/zI8n+Y9W1XUW02z+t&#xA;Ra1o8WkR3IkiQWE0d205uHEjI5UrIG/dBm5RjbuFWtS0v8wJfPaa9plnc2JuUs7GXlNp8tp9TtL6&#xA;dpvrSMv1kGSCX1IfQcmrUenGmKpp55TUH85+Sl0+aK3ujcX/AAluImnjA+pPWsaSQE7f5eKs0tVu&#xA;Vt41upEluAoEskSGNGbuVRmkKj2LH54qqYq7FXYq7FXYq7FXYq7FXYq7FXYqhtTN0NPuDaCtyI2M&#xA;SjqzAV4g9i3QHtiry6O8uLbUWk1GCQWwcRRXFwZFjumDosiTvypVHSRkWRiF3qTTcoX6r5ltLnUI&#xA;XiSY3MUvNbK5i/0KKG7QPJM8skQkB5cyrEOOoCEHFWceWrJvqVqOfFLJ2jaIqzN6sKtA370kcl60&#xA;+GvY9KYpT/ArsVdirsVdirsVdirsVdirsVdirsVYHYRazH+bUQ1S6trpzoE3ptbW72wA+uQ7MHnu&#xA;a/eMVZ5irsVYh5q/5TzyR/xn1D/qBfFWX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FUu8w6dPqWjXVjb&#xA;yCOWdQFZqhdmBKsRvRgKGmKvLdK1NVnm08xaeBfD1/0TA7PFGZowhtCg9NlkcyKWCxbkeCmhQkWt&#xA;6lbafdxsV9OzuZmiWa9SRrD6kkpkVfSRYFkjB6cm/bBHGlMKvWPJHmMalo9s/wBVjiheWaC2mtVR&#xA;LaQRM4Dxxh3ZFYRmnUe5rgSyjArsVdirsVdirsVdirsVdirsVdirsVYhJ/5N63/8B+f/AKjYcVZf&#xA;irsVYh5q/wCU88kf8Z9Q/wCoF8VZfirsVdirsVdirsVdirsVdirsVdirsVYt5rvNUTR9SWFpUuHi&#xA;nihjSM8eRRhb8JONC0knprTl+1TYiuFXlX5T2Jj1y9uNUkntbONba6ltSkrGWeIhlnIjXisCcFbk&#xA;woOVAaYoVfzYsbnT9bVtLLQQxwR+lN65VkjrSqAsrPGOY+FeXwo3SmxVkfkWw8wNe215cLKL6WWO&#xA;8mueTGGaCdaP6iU4iQD1BWvb4SehCvVsCXYq7FXYq7FXYq7FXYq7FXYq7FXYqxCT/wAm9b/+A/P/&#xA;ANRsOKsvxVhvmL8xV0fzGNLGntc2Vt9R/TGoCUJ9W/Sly1racYuLGWsifH8S8V3+Lpiq/wA1f8p5&#xA;5I/4z6h/1AvirL8VdirsVdirsVdirsVdirsVdirsVdiqVeZriGDSJfURpGdlWBIwS/qg8kZKFfiQ&#xA;ryG4qR44q8gmtbKC49a2nZbb1prC4nufT9QvMsRSKZXgZVKceHKq14ni1DUyQr3OtXrSQQkxJFHb&#xA;vam9uiJYHvIXUEWkimNubKp4NuRtxIGKvV/LMUS6f6scAtvWIY25/vIzwXkkhNW5B+RoTUVpkUpt&#xA;irsVdirsVdirsVdirsVdirsVdirsVYhJ/wCTet//AAH5/wDqNhxVl+Ksa1ryBomr6/b61cyXCSx/&#xA;V/rNpE6rb3X1KYz2v1hCrFvRlcsvFl8GqNsVSzzzp2n6j5z8lWuoWsV5avcX5eC4RZYyVsnIqrgj&#xA;Y4qzS1tba0t47a1hSC3hUJFDEoREUdFVVoAPliqpirsVdirsVdirsVdirsVdirsVdiqQeeNGOreX&#xA;5bcMFaNllVSzR8ytRwDoGZC3KgIUmvbEK8c8uWd/HfSQfDE8ssP1bT5IvUZB8MgaV5gzpEGWI/yl&#xA;GNGJBUyQybzjBDplq8dtKltfSGNZmMmzNEhJktg7wRh1IRWJUtyoNzU4FZj+Xa6i2kSXd00rRXTh&#xA;7f6xKs0jBRw5llZ1oyquwbtiUsrwK7FXYq7FXYq7FXYq7FXYq7FXYq7FWB2GiaNpX5tRR6XYW1gk&#xA;mgTNIltCkIYi8hFWCBa4qzzFXYqxDzV/ynnkj/jPqH/UC+KsvxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KqF9aJd2c9q54rMjJyHVSRQMKU3B3GKvLNBF3eaiRbrBFb30a30sNk5uFUKqKILuERuokf1Du0d&#xA;AV6kpuUJfrBlnNlLFLHaqz/Xle3EsTw8F4BI2Y2wMPNgo9OUgfFSuFXpXk2+jk0i3t6GoErQtx4o&#xA;0ayfCUXkzKoSROIbsRQsN8BSyDArsVdirsVdirsVdirsVdirsVdirsVYhJ/5N63/APAfn/6jYcVZ&#xA;firsVYh5q/5TzyR/xn1D/qBfFWX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FUt8y3t9Y6FeXNhH618qc&#xA;bWOnKsrkImw6/E3TFXnfke/8zzardzyJM9mt5Asl4ZCkR9b+8QQs7B9pI/i416/FXqUMiu9M0Owu&#xA;YEtb82tyWaCGaZY/TjRSHZUJWJZCJYIwOTtxIA+zVSqn3l7SLSytEeMOZCCvN2JBUUUFU2VQyxqa&#xA;BcCU2xV2KuxV2KuxV2KuxV2KuxV2KuxV2KsQk/8AJvW//gPz/wDUbDirCvzC80+Yv0vd1XUdAuoN&#xA;OjfypYSTxJ9f1T60VdeFnPNHcAx+mvpSEkKWbgPtYVV/MHnCJvzLs5orl77SwtjaWWm22pXtlK91&#xA;+kJ4LmeK0iRYL5YWUCdXfiipv1pgVkvnm6ntvOfkqaC0lvpFuL+ltbmJZGrZOKgzyQx7dd2xVmlr&#xA;NJNbxyyQPbO6hmglKF0J/ZYxtIlR/ksRiqpirsVdirsVdirsVdirsVdirsVdiqC1OwF2iBo47hEJ&#xA;5W0/904Ipv8AC+47bHv8wqk1hq3le1nTT40je8sE9N5kiQU9EFZSD1+Eq1VHxHcgEBqFDBPzIkvY&#xA;tdkay+sPG8fpWoSFnhWZmnMzM/DbjWRjSpopKkcSMQr0Hyn5kl1qFpG9Nxv8UII4FQtUcc5N+TEA&#xA;1FeJ2GJSyDArsVdirsVdirsVdirsVdirsVdirsVYHYX91efm1E1xptzppXQJgqXLW7Fh9ch3X6vN&#xA;OPvIxVnmKuxViHmr/lPPJH/GfUP+oF8VZfirsVdirsVdirsVdirsVdirsVdirsVUb24+r2k0441j&#xA;QsvMhVLU+EEmlKnbFXl+ny6RFrfrXM8kllHG0tmJ+cPJLqQiY7SR0NSdip+0xegqwKE61rTvLWp6&#xA;usriST1HWG3lUc4/WV5HKxfai5vzf+9oB1FQcVZJoV5AY4rW3gWK2KytHRvjBjkCyCSPivB+bnkP&#xA;GuBKcYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWISf8Ak3rf/wAB+f8A6jYcVZfirsVYh5q/5TzyR/xn&#xA;1D/qBfFWX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FUNqcbyWM3pqzyoBLEiEBmkjIdACwK7so64q85i&#xA;tZrjU7iSOVZLjjBOsiJLbI8jGVJbX0TLGXUIo24sfj+Ig1YlCKbyYLu/UEs4UsXa4ml9OW9V2M0s&#xA;XwuFP+SCvKm6sFOKs40jTIdPtBDHGiMWdm4VP2nZwvI/E3HlSpwJRuKuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxViEn/k3rf/AMB+f/qNhxVl+KoO81jTLO+sLC5uFjvNUkkisIDUtK8UTTSUAB2WOMkk7dup&#xA;GKsc81f8p55I/wCM+of9QL4qy/FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUJZ6lFdMoEbx+onqxF+&#xA;PxptuOLNT7S7NQ74qp3GkQusjREh2JdEZiYwzNyfbtz3B9iadTVVU061e2jkVlSMO/JYYjVEHFVo&#xA;PhTqVLfZG5xVF4q7FXYq7FXYq7FXYq7FXYq7FXYq7FWISf8Ak3rf/wAB+f8A6jYcVZfirDbnyHcP&#xA;5k8s6297+krzRbm5kudRvo7dLxraezmgWCNrWCBCiyyhuJA7mpNMVUfPVm155y8lW63M1oWuL8+v&#xA;blVkFLJzsWVxv8sKsztYDb20cJlecxqFM0pBdqd2ICiv0YFVcVdirsVdirsVdirsVdirsVdirsVd&#xA;iqUWWnTW9/zRHX439SUyFojB8ZjijjLtw48k6Io2O++6qN1G0a5iRQEfg/MxSfYccSvFtm/mqNju&#xA;MVX2Vu1vbLESKgsaL9lQzFgq/wCSteI9sVV8VdirsVdirsVdirsVdirsVdirsVdirAtP0x7D82ok&#xA;e+ub7noMxD3TI7L/AKZCKLwRNsKs9wK7FWIeav8AlPPJH/GfUP8AqBfFWX4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYqlzWN2dSNwCgUyKyzc25iMIFaLhxoVZgT9qlTWlQMVdqWpS2svFfTXjH6irJ9qZ&#xA;t/3UW6/F8PvSo2xVMcVdirsVdirsVdirsVdirsVdirsVdirsVYhJ/wCTet//AAH5/wDqNhxVl+Ku&#xA;xViHmr/lPPJH/GfUP+oF8VZfirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVYhJ/wCTet//AAH5/wDqNhxVT1X8xIhrHl610IW+q6XqupPpt/q0FxDNDBKl&#xA;vLP6AEUhf1j6fLdeIXruRiqjr3nfUrDz7BorTRafoqw2Tz3s+nXlyss95cyQi3F3FJFb2xIRAry8&#xA;gWalDSmKt+etRsdO85eSru+mWC2S4vw8rdAWsnA6e5wqzO1ure7to7m2cSwTKHikXoynoRgVVxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVgWn63pOrfm1F&#xA;Jp1ylykegzK7JXY/XITTemFWY6hpGnahLYzXkPqyadcC7smLMPTnEbw8/hIr8EzihqN8CpO35deT&#xA;2vor5rFmuYpBMSbi4KSSLO9zG00Zk4TGOaRmj9RW4fs0GKoTzV/ynnkj/jPqH/UC+KsvxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsQk/wDJvW//AID8&#xA;/wD1Gw4qy/FXYqxDzV/ynnkj/jPqH/UC+KsvxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KsQk/wDJvW//AID8/wD1Gw4qy/FXYqw/zUR/jzyR/wAZ9Q/6&#xA;gXxVmGKuxV2KtKytXiQaEg033HUYq3irsVaZlUcmIUeJ2G+2Kt4q7FXYq1yXkVqOQAJXuAa0P4Yq&#xA;3irsVdirSsrqGUhlYVVhuCD3GKt4q7FWiygqCQCxooPc0rQfQMVbxV2KuxVoMpLAEEqaMB2NK0P0&#xA;HFW8VdirTMqKWYhVUVZjsAB3OKt4q7FXYqw+Qj/lb1uO/wDh+f8A6jYcVZhirx7zPY6rqfn3S/0v&#xA;pMmn3sRspf01Yx6jqsMEcF00ggs5o7KGOCWfdbl5SFEZUfFvRVmfnjyz5k1LVdA1ny9c2cOoaHLc&#xA;uI9QSV4XW6gMDf3LK1VB2xVYkf5wcRzuPL3OnxUgvaV9qy4qu9P83v8Alo8v/wDIi9/6rYq70/ze&#xA;/wCWjy//AMiL3/qtiqC0vRvzX05LhIrvQXFzczXT8oLzZp35sBSUbDthVG+n+b3/AC0eX/8AkRe/&#xA;9VsCu9P83v8Alo8v/wDIi9/6rYqgtY0b819UsHsprvQUjd43LJBecqxSLIOsp7phVG+n+b3/AC0e&#xA;X/8AkRe/9VsCu9P83v8Alo8v/wDIi9/6rYq70/ze/wCWjy//AMiL3/qtiqDi0j82I9XudUF3oJmu&#xA;re3tnQwXnELbPM6kfva1JuWr8hiqM9P83v8Alo8v/wDIi9/6rYq70/ze/wCWjy//AMiL3/qtirvT&#xA;/N7/AJaPL/8AyIvf+q2KoPRtI/NjStIsdLhu9BeGwt4raN3gvOTLCgQFqSgVIXFUZ6f5vf8ALR5f&#xA;/wCRF7/1WxV3p/m9/wAtHl//AJEXv/VbFUHfaR+bF5dafcPd6CradcNcxBYLyjM1vLb0asvTjOTt&#xA;3xVGen+b3/LR5f8A+RF7/wBVsVd6f5vf8tHl/wD5EXv/AFWxV3p/m9/y0eX/APkRe/8AVbFUHY6R&#xA;+bFndahcJd6CzajcLcyhoLyistvFb0WkvTjADv3xVGen+b3/AC0eX/8AkRe/9VsVd6f5vf8ALR5f&#xA;/wCRF7/1WxVB6zpH5sarpF9pc13oKQ39vLbSOkF5yVZkKErWUioDYqjPT/N7/lo8v/8AIi9/6rYq&#xA;70/ze/5aPL//ACIvf+q2Ku9P83v+Wjy//wAiL3/qtiqG8ueWPO3+Nm8z+Z7rTXZNNfTYLfTY50FH&#xA;nScu5nZ+nCm2Ks4xV2KvK/zX81i2mtbG8lvtEeRrmLTeWoWul217IEFLlr2O69WKG2+0UdAzllHB&#xA;txir0Py21w3l3S2ub2PUrk2cBn1GAgxXD+kvKaMrsUkPxLTscVTHFUi1+/117bVLPTbaWwnitHlt&#xA;NcmS3ntfUoDwWFbhLguATTkirt1PQqvNNb813DeQPIUM2rrDey2um3+uyXOo3emGWCXT5uImv7aO&#xA;WSP1riPY1+Jl4/tYq9T8qX66h5Y0m+W3ntFubOCVbW7d5LiMNGCFlkkLO7juzHkep3xVNcVSnV7n&#xA;WnlfTdMtpbeWeBmi110t57S3k3AWSA3ENw7bVHFOO4q3XFUs/Ku+v9Q/Ljy5e6hNJcXtxYQyXE8p&#xA;LSO7LUsxO5JxVlOKse89atr+neXb59C0u51HU3tbj6o9sbfjDMsRMTyrPLEzLzptGrt7Yq81sPNs&#xA;sHlrzXDpet3F5BNpkK6FfzT3F3KNVewnmvVjlpPLygESStGNo2qKL0BVmv5UatDf6JeRw85Vs7r0&#xA;WvxqVzrFtct6ETtJbXl2FkZBy4soUKrhqdzgVm2KrLgzLBI0Ch5gjGJW2Banwg/Tiry/8ltZ1fUJ&#xA;rsT6hd6lD+jtPm1V7x3drbW5TN9ftYw/92ECx1iXZNqAVxV6nirsVeQeUfNd/B54uf0pqlwSZNSi&#xA;8w2Vy7m2sn/SUVtoywofhi9eGT4eP94PiNeuKov8qNeubrzHqVjfPLe6iwvbm4vF1K9uo4B9fZY7&#xA;WewnSKGylWNgI1RfiRSdh1VeqYq7FWHSXWup+b1rZyXvLRJtCvJoNPRGRVniurRDJI/NhI9JCF+F&#xA;eIqO5OKsxxV2KsO813WuwefPJUdve+lo93dXkV7YojBpXXTrmVGkl50KKUBCcPtfFXYUVYnoPm+O&#xA;+/NOV0uX1O01K5RNHht9SvVNtafoxZPrEmllI7aS3kcN+/JNJGAG4xV67irsVeTfm5rqW3mK10y3&#xA;8xnSNXntElshNfpptja0uCGvLjlIhuy3HgtvwYUDE06hV6zirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVf/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:606F944851D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:616F944851D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -193.627 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 193.627 li
198.23 193.627 li
198.23 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
195.313 182.724 mo
192.162 182.724 li
16.2627 182.724 mo
19.4126 182.724 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 50 /two putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A75CA669> |-/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPVZI+Helvetica /Helvetica findfont ct_VMDictPut/DVPVZI+Helvetica*1 [45{/.notdef}rp /hyphen 4{/.notdef}rp /two 205{/.notdef}rp]DVPVZI+Helvetica nfDVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf5.83594 185.06 mo(-2)[2.33105 0 ]xsh195.313 160.324 mo
192.162 160.324 li
16.2627 160.324 mo
19.4126 160.324 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPVZI+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369E6> |-/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPVZI+Helvetica /Encoding getdup 46 /period putdup 49 /one putdup 53 /five putpop%ADOEndSubsetFont
/DVPVZI+Helvetica*1 [45{/.notdef}rp /hyphen /period 2{/.notdef}rp /one /two 2{/.notdef}rp /five 202{/.notdef}rp]DVPVZI+Helvetica nfDVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf0 162.662 mo(-1.5)[2.33105 3.89209 1.9458 0 ]xsh195.313 137.974 mo
192.162 137.974 li
16.2627 137.974 mo
19.4126 137.974 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf5.83594 140.31 mo(-1)[2.33105 0 ]xsh195.313 115.574 mo
192.162 115.574 li
16.2627 115.574 mo
19.4126 115.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPVZI+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPVZI+Helvetica /Encoding getdup 48 /zero putpop%ADOEndSubsetFont
/DVPVZI+Helvetica*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]DVPVZI+Helvetica nfDVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf0 117.912 mo(-0.5)[2.33105 3.89209 1.9458 0 ]xsh195.313 93.1738 mo
192.162 93.1738 li
16.2627 93.1738 mo
19.4126 93.1738 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPVZI+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPVZI+Helvetica /Encoding getdup 32 /space putpop%ADOEndSubsetFont
/DVPVZI+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]DVPVZI+Helvetica nfDVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf6.22656 95.5054 mo( )sh8.17188 95.5054 mo(0)sh195.313 70.8237 mo
192.162 70.8237 li
16.2627 70.8237 mo
19.4126 70.8237 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf0.382813 73.1616 mo( 0.5)[1.9458 3.89209 1.94629 0 ]xsh195.313 48.4238 mo
192.162 48.4238 li
16.2627 48.4238 mo
19.4126 48.4238 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf6.22656 50.7554 mo( )sh8.17188 50.7554 mo(1)sh195.313 26.0737 mo
192.162 26.0737 li
16.2627 26.0737 mo
19.4126 26.0737 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf0.382813 28.4116 mo( 1.5)[1.9458 3.89209 1.94629 0 ]xsh195.313 3.67383 mo
192.162 3.67383 li
16.2627 3.67383 mo
19.4126 3.67383 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf6.22656 6.01318 mo( )sh8.17188 6.01318 mo(2)sh16.2627 3.67383 mo
16.2627 6.82373 li
16.2627 182.724 mo
16.2627 179.574 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf13.1484 192.052 mo(-2)[2.33105 0 ]xsh38.6626 3.67383 mo
38.6626 6.82373 li
38.6626 182.724 mo
38.6626 179.574 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf32.6328 192.052 mo(-1.5)[2.33105 3.89209 1.9458 0 ]xsh61.0127 3.67383 mo
61.0127 6.82373 li
61.0127 182.724 mo
61.0127 179.574 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf57.8984 192.052 mo(-1)[2.33105 0 ]xsh83.4126 3.67383 mo
83.4126 6.82373 li
83.4126 182.724 mo
83.4126 179.574 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf77.375 192.052 mo(-0.5)[2.33105 3.89209 1.9458 0 ]xsh105.813 3.67383 mo
105.813 6.82373 li
105.813 182.724 mo
105.813 179.574 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf102.891 192.052 mo( )sh104.836 192.052 mo(0)sh128.162 3.67383 mo
128.162 6.82373 li
128.162 182.724 mo
128.162 179.574 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf122.32 192.052 mo( 0.5)[1.94629 3.8916 1.94629 0 ]xsh150.563 3.67383 mo
150.563 6.82373 li
150.563 182.724 mo
150.563 179.574 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf147.641 192.052 mo( )sh149.586 192.052 mo(1)sh172.912 3.67383 mo
172.912 6.82373 li
172.912 182.724 mo
172.912 179.574 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf167.07 192.052 mo( 1.5)[1.94629 3.8916 1.94629 0 ]xsh195.313 3.67383 mo
195.313 6.82373 li
195.313 182.724 mo
195.313 179.574 li
@
DVPVZI+Helvetica*1 [7 0 0 -7 0 0 ]msf192.391 192.052 mo( )sh194.336 192.052 mo(2)sh16.2627 3.67383 mo
16.2627 182.724 li
195.313 182.724 li
195.313 3.67383 li
16.2627 3.67383 li
16.2627 3.67383 li
cp
@
0.25 lw
103.838 144.724 mo
103.838 143.855 103.132 143.148 102.263 143.148 cv
101.394 143.148 100.688 143.855 100.688 144.724 cv
100.688 145.593 101.394 146.298 102.263 146.298 cv
103.132 146.298 103.838 145.593 103.838 144.724 cv
@
1 lc
102.213 144.673 mo
102.213 144.673 li
@
0 lc
111.277 146.884 mo
111.277 146.015 110.572 145.308 109.702 145.308 cv
108.833 145.308 108.128 146.015 108.128 146.884 cv
108.128 147.753 108.833 148.458 109.702 148.458 cv
110.572 148.458 111.277 147.753 111.277 146.884 cv
@
1 lc
109.612 146.923 mo
109.612 146.923 li
@
0 lc
102.397 135.724 mo
102.397 134.855 101.691 134.148 100.822 134.148 cv
99.9531 134.148 99.2471 134.855 99.2471 135.724 cv
99.2471 136.593 99.9531 137.298 100.822 137.298 cv
101.691 137.298 102.397 136.593 102.397 135.724 cv
@
1 lc
100.862 135.724 mo
100.862 135.724 li
@
0 lc
112.718 138.003 mo
112.718 137.134 112.012 136.429 111.143 136.429 cv
110.273 136.429 109.567 137.134 109.567 138.003 cv
109.567 138.873 110.273 139.58 111.143 139.58 cv
112.012 139.58 112.718 138.873 112.718 138.003 cv
@
1 lc
111.162 137.974 mo
111.162 137.974 li
@
0 lc
103.357 138.964 mo
103.357 138.093 102.652 137.388 101.782 137.388 cv
100.913 137.388 100.207 138.093 100.207 138.964 cv
100.207 139.833 100.913 140.539 101.782 140.539 cv
102.652 140.539 103.357 139.833 103.357 138.964 cv
@
1 lc
101.763 138.875 mo
101.763 138.875 li
@
0 lc
111.997 52.8037 mo
111.997 51.9341 111.292 51.2285 110.423 51.2285 cv
109.553 51.2285 108.848 51.9341 108.848 52.8037 cv
108.848 53.6729 109.553 54.3784 110.423 54.3784 cv
111.292 54.3784 111.997 53.6729 111.997 52.8037 cv
@
1 lc
110.412 52.8237 mo
110.412 52.8237 li
@
0 lc
109.357 123.603 mo
109.357 122.734 108.652 122.029 107.782 122.029 cv
106.913 122.029 106.207 122.734 106.207 123.603 cv
106.207 124.472 106.913 125.179 107.782 125.179 cv
108.652 125.179 109.357 124.472 109.357 123.603 cv
@
1 lc
107.713 123.523 mo
107.713 123.523 li
@
0 lc
110.678 114.964 mo
110.678 114.093 109.972 113.388 109.103 113.388 cv
108.233 113.388 107.527 114.093 107.527 114.964 cv
107.527 115.833 108.233 116.539 109.103 116.539 cv
109.972 116.539 110.678 115.833 110.678 114.964 cv
@
1 lc
109.112 114.923 mo
109.112 114.923 li
@
0 lc
109.357 117.724 mo
109.357 116.855 108.652 116.148 107.782 116.148 cv
106.913 116.148 106.207 116.855 106.207 117.724 cv
106.207 118.593 106.913 119.298 107.782 119.298 cv
108.652 119.298 109.357 118.593 109.357 117.724 cv
@
1 lc
107.813 117.724 mo
107.813 117.724 li
@
0 lc
115.357 105.125 mo
115.357 104.253 114.652 103.548 113.782 103.548 cv
112.913 103.548 112.207 104.253 112.207 105.125 cv
112.207 105.994 112.913 106.699 113.782 106.699 cv
114.652 106.699 115.357 105.994 115.357 105.125 cv
@
1 lc
113.813 105.023 mo
113.813 105.023 li
@
0 lc
111.037 112.564 mo
111.037 111.695 110.332 110.988 109.463 110.988 cv
108.593 110.988 107.888 111.695 107.888 112.564 cv
107.888 113.433 108.593 114.138 109.463 114.138 cv
110.332 114.138 111.037 113.433 111.037 112.564 cv
@
1 lc
109.563 112.574 mo
109.563 112.574 li
@
0 lc
108.638 126.244 mo
108.638 125.375 107.932 124.669 107.063 124.669 cv
106.193 124.669 105.487 125.375 105.487 126.244 cv
105.487 127.113 106.193 127.818 107.063 127.818 cv
107.932 127.818 108.638 127.113 108.638 126.244 cv
@
1 lc
107.162 126.324 mo
107.162 126.324 li
@
0 lc
112.838 73.4434 mo
112.838 72.5742 112.132 71.8687 111.263 71.8687 cv
110.394 71.8687 109.688 72.5742 109.688 73.4434 cv
109.688 74.313 110.394 75.0186 111.263 75.0186 cv
112.132 75.0186 112.838 74.313 112.838 73.4434 cv
@
1 lc
111.263 73.5234 mo
111.263 73.5234 li
@
0 lc
108.037 74.5234 mo
108.037 73.6543 107.332 72.9487 106.463 72.9487 cv
105.593 72.9487 104.888 73.6543 104.888 74.5234 cv
104.888 75.3931 105.593 76.0986 106.463 76.0986 cv
107.332 76.0986 108.037 75.3931 108.037 74.5234 cv
@
1 lc
106.463 74.5234 mo
106.463 74.5234 li
@
0 lc
114.397 95.5234 mo
114.397 94.6543 113.691 93.9487 112.822 93.9487 cv
111.953 93.9487 111.247 94.6543 111.247 95.5234 cv
111.247 96.3931 111.953 97.0986 112.822 97.0986 cv
113.691 97.0986 114.397 96.3931 114.397 95.5234 cv
@
1 lc
112.862 95.6235 mo
112.862 95.6235 li
@
0 lc
110.798 117.603 mo
110.798 116.734 110.092 116.029 109.223 116.029 cv
108.354 116.029 107.647 116.734 107.647 117.603 cv
107.647 118.472 108.354 119.179 109.223 119.179 cv
110.092 119.179 110.798 118.472 110.798 117.603 cv
@
1 lc
109.313 117.574 mo
109.313 117.574 li
@
0 lc
114.397 85.9238 mo
114.397 85.0542 113.691 84.3486 112.822 84.3486 cv
111.953 84.3486 111.247 85.0542 111.247 85.9238 cv
111.247 86.793 111.953 87.4985 112.822 87.4985 cv
113.691 87.4985 114.397 86.793 114.397 85.9238 cv
@
1 lc
112.813 85.9238 mo
112.813 85.9238 li
@
0 lc
106.957 60.7236 mo
106.957 59.854 106.252 59.1484 105.383 59.1484 cv
104.513 59.1484 103.808 59.854 103.808 60.7236 cv
103.808 61.5928 104.513 62.2988 105.383 62.2988 cv
106.252 62.2988 106.957 61.5928 106.957 60.7236 cv
@
1 lc
105.362 60.7236 mo
105.362 60.7236 li
@
0 lc
111.037 83.2837 mo
111.037 82.4141 110.332 81.7085 109.463 81.7085 cv
108.593 81.7085 107.888 82.4141 107.888 83.2837 cv
107.888 84.1528 108.593 84.8584 109.463 84.8584 cv
110.332 84.8584 111.037 84.1528 111.037 83.2837 cv
@
1 lc
109.513 83.2734 mo
109.513 83.2734 li
@
0 lc
111.997 90.9639 mo
111.997 90.0942 111.292 89.3887 110.423 89.3887 cv
109.553 89.3887 108.848 90.0942 108.848 90.9639 cv
108.848 91.833 109.553 92.5386 110.423 92.5386 cv
111.292 92.5386 111.997 91.833 111.997 90.9639 cv
@
1 lc
110.463 91.0234 mo
110.463 91.0234 li
@
0 lc
112.237 83.0435 mo
112.237 82.1743 111.532 81.4688 110.662 81.4688 cv
109.793 81.4688 109.088 82.1743 109.088 83.0435 cv
109.088 83.9131 109.793 84.6187 110.662 84.6187 cv
111.532 84.6187 112.237 83.9131 112.237 83.0435 cv
@
1 lc
110.612 83.0234 mo
110.612 83.0234 li
@
0 lc
112.478 100.324 mo
112.478 99.4546 111.771 98.7495 110.902 98.7495 cv
110.033 98.7495 109.327 99.4546 109.327 100.324 cv
109.327 101.193 110.033 101.898 110.902 101.898 cv
111.771 101.898 112.478 101.193 112.478 100.324 cv
@
1 lc
110.813 100.375 mo
110.813 100.375 li
@
0 lc
108.878 103.923 mo
108.878 103.054 108.172 102.349 107.303 102.349 cv
106.434 102.349 105.728 103.054 105.728 103.923 cv
105.728 104.792 106.434 105.5 107.303 105.5 cv
108.172 105.5 108.878 104.792 108.878 103.923 cv
@
1 lc
107.213 103.824 mo
107.213 103.824 li
@
0 lc
111.037 73.9238 mo
111.037 73.0542 110.332 72.3486 109.463 72.3486 cv
108.593 72.3486 107.888 73.0542 107.888 73.9238 cv
107.888 74.793 108.593 75.4985 109.463 75.4985 cv
110.332 75.4985 111.037 74.793 111.037 73.9238 cv
@
1 lc
109.513 74.0234 mo
109.513 74.0234 li
@
0 lc
111.997 106.083 mo
111.997 105.214 111.292 104.509 110.423 104.509 cv
109.553 104.509 108.848 105.214 108.848 106.083 cv
108.848 106.953 109.553 107.658 110.423 107.658 cv
111.292 107.658 111.997 106.953 111.997 106.083 cv
@
1 lc
110.513 106.023 mo
110.513 106.023 li
@
0 lc
112.838 78.7236 mo
112.838 77.854 112.132 77.1484 111.263 77.1484 cv
110.394 77.1484 109.688 77.854 109.688 78.7236 cv
109.688 79.5928 110.394 80.2988 111.263 80.2988 cv
112.132 80.2988 112.838 79.5928 112.838 78.7236 cv
@
1 lc
111.263 78.7734 mo
111.263 78.7734 li
@
0 lc
115.598 82.5635 mo
115.598 81.6943 114.892 80.9888 114.022 80.9888 cv
113.153 80.9888 112.447 81.6943 112.447 82.5635 cv
112.447 83.4331 113.153 84.1387 114.022 84.1387 cv
114.892 84.1387 115.598 83.4331 115.598 82.5635 cv
@
1 lc
113.963 82.6235 mo
113.963 82.6235 li
@
0 lc
111.277 90.7236 mo
111.277 89.854 110.572 89.1484 109.702 89.1484 cv
108.833 89.1484 108.128 89.854 108.128 90.7236 cv
108.128 91.5928 108.833 92.2988 109.702 92.2988 cv
110.572 92.2988 111.277 91.5928 111.277 90.7236 cv
@
1 lc
109.763 90.7734 mo
109.763 90.7734 li
@
0 lc
108.638 80.2837 mo
108.638 79.4141 107.932 78.7085 107.063 78.7085 cv
106.193 78.7085 105.487 79.4141 105.487 80.2837 cv
105.487 81.1528 106.193 81.8584 107.063 81.8584 cv
107.932 81.8584 108.638 81.1528 108.638 80.2837 cv
@
1 lc
107.162 80.2734 mo
107.162 80.2734 li
@
0 lc
111.277 81.1235 mo
111.277 80.2544 110.572 79.5488 109.702 79.5488 cv
108.833 79.5488 108.128 80.2544 108.128 81.1235 cv
108.128 81.9932 108.833 82.6987 109.702 82.6987 cv
110.572 82.6987 111.277 81.9932 111.277 81.1235 cv
@
1 lc
109.713 81.2236 mo
109.713 81.2236 li
@
0 lc
111.397 115.205 mo
111.397 114.333 110.691 113.628 109.822 113.628 cv
108.953 113.628 108.247 114.333 108.247 115.205 cv
108.247 116.074 108.953 116.779 109.822 116.779 cv
110.691 116.779 111.397 116.074 111.397 115.205 cv
@
1 lc
109.813 115.125 mo
109.813 115.125 li
@
0 lc
109.357 92.4038 mo
109.357 91.5342 108.652 90.8286 107.782 90.8286 cv
106.913 90.8286 106.207 91.5342 106.207 92.4038 cv
106.207 93.2729 106.913 93.9785 107.782 93.9785 cv
108.652 93.9785 109.357 93.2729 109.357 92.4038 cv
@
1 lc
107.813 92.3735 mo
107.813 92.3735 li
@
0 lc
112.478 118.083 mo
112.478 117.214 111.771 116.509 110.902 116.509 cv
110.033 116.509 109.327 117.214 109.327 118.083 cv
109.327 118.953 110.033 119.658 110.902 119.658 cv
111.771 119.658 112.478 118.953 112.478 118.083 cv
@
1 lc
110.862 118.023 mo
110.862 118.023 li
@
0 lc
113.438 89.2837 mo
113.438 88.4141 112.731 87.7085 111.862 87.7085 cv
110.993 87.7085 110.287 88.4141 110.287 89.2837 cv
110.287 90.1528 110.993 90.8584 111.862 90.8584 cv
112.731 90.8584 113.438 90.1528 113.438 89.2837 cv
@
1 lc
111.862 89.2734 mo
111.862 89.2734 li
@
0 lc
112.718 123.843 mo
112.718 122.974 112.012 122.269 111.143 122.269 cv
110.273 122.269 109.567 122.974 109.567 123.843 cv
109.567 124.712 110.273 125.419 111.143 125.419 cv
112.012 125.419 112.718 124.712 112.718 123.843 cv
@
1 lc
111.063 123.923 mo
111.063 123.923 li
@
0 lc
106.718 100.804 mo
106.718 99.9351 106.012 99.228 105.143 99.228 cv
104.273 99.228 103.567 99.9351 103.567 100.804 cv
103.567 101.673 104.273 102.378 105.143 102.378 cv
106.012 102.378 106.718 101.673 106.718 100.804 cv
@
1 lc
105.063 100.824 mo
105.063 100.824 li
@
0 lc
112.478 96.0034 mo
112.478 95.1343 111.771 94.4287 110.902 94.4287 cv
110.033 94.4287 109.327 95.1343 109.327 96.0034 cv
109.327 96.873 110.033 97.5791 110.902 97.5791 cv
111.771 97.5791 112.478 96.873 112.478 96.0034 cv
@
1 lc
110.912 95.9238 mo
110.912 95.9238 li
@
0 lc
113.438 81.4834 mo
113.438 80.6143 112.731 79.9087 111.862 79.9087 cv
110.993 79.9087 110.287 80.6143 110.287 81.4834 cv
110.287 82.353 110.993 83.0586 111.862 83.0586 cv
112.731 83.0586 113.438 82.353 113.438 81.4834 cv
@
1 lc
111.963 81.4736 mo
111.963 81.4736 li
@
0 lc
113.077 73.2036 mo
113.077 72.334 112.372 71.6284 111.503 71.6284 cv
110.633 71.6284 109.928 72.334 109.928 73.2036 cv
109.928 74.0732 110.633 74.7788 111.503 74.7788 cv
112.372 74.7788 113.077 74.0732 113.077 73.2036 cv
@
1 lc
111.513 73.2236 mo
111.513 73.2236 li
@
0 lc
111.037 94.3237 mo
111.037 93.4541 110.332 92.7485 109.463 92.7485 cv
108.593 92.7485 107.888 93.4541 107.888 94.3237 cv
107.888 95.1929 108.593 95.8984 109.463 95.8984 cv
110.332 95.8984 111.037 95.1929 111.037 94.3237 cv
@
1 lc
109.362 94.3735 mo
109.362 94.3735 li
@
0 lc
116.678 84.0034 mo
116.678 83.1343 115.972 82.4287 115.103 82.4287 cv
114.233 82.4287 113.527 83.1343 113.527 84.0034 cv
113.527 84.873 114.233 85.5786 115.103 85.5786 cv
115.972 85.5786 116.678 84.873 116.678 84.0034 cv
@
1 lc
115.112 83.9238 mo
115.112 83.9238 li
@
0 lc
111.518 101.763 mo
111.518 100.894 110.812 100.189 109.942 100.189 cv
109.073 100.189 108.367 100.894 108.367 101.763 cv
108.367 102.632 109.073 103.339 109.942 103.339 cv
110.812 103.339 111.518 102.632 111.518 101.763 cv
@
1 lc
109.963 101.824 mo
109.963 101.824 li
@
0 lc
110.317 124.083 mo
110.317 123.214 109.612 122.509 108.742 122.509 cv
107.873 122.509 107.168 123.214 107.168 124.083 cv
107.168 124.953 107.873 125.658 108.742 125.658 cv
109.612 125.658 110.317 124.953 110.317 124.083 cv
@
1 lc
108.763 124.023 mo
108.763 124.023 li
@
0 lc
116.077 69.3638 mo
116.077 68.4941 115.372 67.7886 114.503 67.7886 cv
113.633 67.7886 112.928 68.4941 112.928 69.3638 cv
112.928 70.2329 113.633 70.9385 114.503 70.9385 cv
115.372 70.9385 116.077 70.2329 116.077 69.3638 cv
@
1 lc
114.563 69.4238 mo
114.563 69.4238 li
@
0 lc
108.997 90.2437 mo
108.997 89.374 108.292 88.6685 107.423 88.6685 cv
106.553 88.6685 105.848 89.374 105.848 90.2437 cv
105.848 91.1128 106.553 91.8184 107.423 91.8184 cv
108.292 91.8184 108.997 91.1128 108.997 90.2437 cv
@
1 lc
107.412 90.3237 mo
107.412 90.3237 li
@
0 lc
115.357 122.404 mo
115.357 121.535 114.652 120.83 113.782 120.83 cv
112.913 120.83 112.207 121.535 112.207 122.404 cv
112.207 123.273 112.913 123.978 113.782 123.978 cv
114.652 123.978 115.357 123.273 115.357 122.404 cv
@
1 lc
113.713 122.324 mo
113.713 122.324 li
@
0 lc
111.037 74.5234 mo
111.037 73.6543 110.332 72.9487 109.463 72.9487 cv
108.593 72.9487 107.888 73.6543 107.888 74.5234 cv
107.888 75.3931 108.593 76.0986 109.463 76.0986 cv
110.332 76.0986 111.037 75.3931 111.037 74.5234 cv
@
1 lc
109.513 74.5234 mo
109.513 74.5234 li
@
0 lc
109.117 89.0435 mo
109.117 88.1743 108.412 87.4688 107.543 87.4688 cv
106.673 87.4688 105.968 88.1743 105.968 89.0435 cv
105.968 89.9131 106.673 90.6187 107.543 90.6187 cv
108.412 90.6187 109.117 89.9131 109.117 89.0435 cv
@
1 lc
107.463 89.0234 mo
107.463 89.0234 li
@
0 lc
113.197 78.2437 mo
113.197 77.374 112.492 76.6685 111.622 76.6685 cv
110.753 76.6685 110.048 77.374 110.048 78.2437 cv
110.048 79.1128 110.753 79.8184 111.622 79.8184 cv
112.492 79.8184 113.197 79.1128 113.197 78.2437 cv
@
1 lc
111.662 78.2734 mo
111.662 78.2734 li
@
0 lc
110.798 85.2036 mo
110.798 84.334 110.092 83.6284 109.223 83.6284 cv
108.354 83.6284 107.647 84.334 107.647 85.2036 cv
107.647 86.0732 108.354 86.7788 109.223 86.7788 cv
110.092 86.7788 110.798 86.0732 110.798 85.2036 cv
@
1 lc
109.263 85.1235 mo
109.263 85.1235 li
@
0 lc
116.077 79.9238 mo
116.077 79.0542 115.372 78.3486 114.503 78.3486 cv
113.633 78.3486 112.928 79.0542 112.928 79.9238 cv
112.928 80.793 113.633 81.4985 114.503 81.4985 cv
115.372 81.4985 116.077 80.793 116.077 79.9238 cv
@
1 lc
114.463 80.0234 mo
114.463 80.0234 li
@
0 lc
109.357 78.0034 mo
109.357 77.1343 108.652 76.4287 107.782 76.4287 cv
106.913 76.4287 106.207 77.1343 106.207 78.0034 cv
106.207 78.873 106.913 79.5786 107.782 79.5786 cv
108.652 79.5786 109.357 78.873 109.357 78.0034 cv
@
1 lc
107.763 78.0234 mo
107.763 78.0234 li
@
0 lc
110.798 126.003 mo
110.798 125.134 110.092 124.429 109.223 124.429 cv
108.354 124.429 107.647 125.134 107.647 126.003 cv
107.647 126.873 108.354 127.58 109.223 127.58 cv
110.092 127.58 110.798 126.873 110.798 126.003 cv
@
1 lc
109.162 126.074 mo
109.162 126.074 li
@
0 lc
112.838 78.2437 mo
112.838 77.374 112.132 76.6685 111.263 76.6685 cv
110.394 76.6685 109.688 77.374 109.688 78.2437 cv
109.688 79.1128 110.394 79.8184 111.263 79.8184 cv
112.132 79.8184 112.838 79.1128 112.838 78.2437 cv
@
1 lc
111.263 78.2236 mo
111.263 78.2236 li
@
0 lc
110.197 76.8037 mo
110.197 75.9341 109.492 75.2285 108.622 75.2285 cv
107.753 75.2285 107.048 75.9341 107.048 76.8037 cv
107.048 77.6729 107.753 78.3784 108.622 78.3784 cv
109.492 78.3784 110.197 77.6729 110.197 76.8037 cv
@
1 lc
108.612 76.7734 mo
108.612 76.7734 li
@
0 lc
111.037 114.363 mo
111.037 113.494 110.332 112.789 109.463 112.789 cv
108.593 112.789 107.888 113.494 107.888 114.363 cv
107.888 115.234 108.593 115.939 109.463 115.939 cv
110.332 115.939 111.037 115.234 111.037 114.363 cv
@
1 lc
109.412 114.375 mo
109.412 114.375 li
@
0 lc
111.277 113.283 mo
111.277 112.414 110.572 111.708 109.702 111.708 cv
108.833 111.708 108.128 112.414 108.128 113.283 cv
108.128 114.154 108.833 114.859 109.702 114.859 cv
110.572 114.859 111.277 114.154 111.277 113.283 cv
@
1 lc
109.713 113.324 mo
109.713 113.324 li
@
0 lc
109.357 68.4038 mo
109.357 67.5342 108.652 66.8286 107.782 66.8286 cv
106.913 66.8286 106.207 67.5342 106.207 68.4038 cv
106.207 69.2729 106.913 69.9785 107.782 69.9785 cv
108.652 69.9785 109.357 69.2729 109.357 68.4038 cv
@
1 lc
107.763 68.3237 mo
107.763 68.3237 li
@
0 lc
114.878 115.923 mo
114.878 115.054 114.172 114.349 113.303 114.349 cv
112.434 114.349 111.728 115.054 111.728 115.923 cv
111.728 116.792 112.434 117.5 113.303 117.5 cv
114.172 117.5 114.878 116.792 114.878 115.923 cv
@
1 lc
113.263 115.875 mo
113.263 115.875 li
@
0 lc
109.357 130.083 mo
109.357 129.214 108.652 128.509 107.782 128.509 cv
106.913 128.509 106.207 129.214 106.207 130.083 cv
106.207 130.953 106.913 131.658 107.782 131.658 cv
108.652 131.658 109.357 130.953 109.357 130.083 cv
@
1 lc
107.713 130.125 mo
107.713 130.125 li
@
0 lc
112.478 83.8838 mo
112.478 83.0142 111.771 82.3086 110.902 82.3086 cv
110.033 82.3086 109.327 83.0142 109.327 83.8838 cv
109.327 84.7529 110.033 85.4585 110.902 85.4585 cv
111.771 85.4585 112.478 84.7529 112.478 83.8838 cv
@
1 lc
110.963 83.8735 mo
110.963 83.8735 li
@
0 lc
113.438 105.843 mo
113.438 104.974 112.731 104.269 111.862 104.269 cv
110.993 104.269 110.287 104.974 110.287 105.843 cv
110.287 106.712 110.993 107.419 111.862 107.419 cv
112.731 107.419 113.438 106.712 113.438 105.843 cv
@
1 lc
111.912 105.824 mo
111.912 105.824 li
@
0 lc
110.798 119.283 mo
110.798 118.414 110.092 117.708 109.223 117.708 cv
108.354 117.708 107.647 118.414 107.647 119.283 cv
107.647 120.154 108.354 120.859 109.223 120.859 cv
110.092 120.859 110.798 120.154 110.798 119.283 cv
@
1 lc
109.162 119.273 mo
109.162 119.273 li
@
0 lc
111.277 88.8037 mo
111.277 87.9341 110.572 87.2285 109.702 87.2285 cv
108.833 87.2285 108.128 87.9341 108.128 88.8037 cv
108.128 89.6729 108.833 90.3784 109.702 90.3784 cv
110.572 90.3784 111.277 89.6729 111.277 88.8037 cv
@
1 lc
109.763 88.7734 mo
109.763 88.7734 li
@
0 lc
113.678 132.003 mo
113.678 131.134 112.972 130.429 112.103 130.429 cv
111.233 130.429 110.527 131.134 110.527 132.003 cv
110.527 132.873 111.233 133.58 112.103 133.58 cv
112.972 133.58 113.678 132.873 113.678 132.003 cv
@
1 lc
112.063 132.023 mo
112.063 132.023 li
@
0 lc
113.678 95.7637 mo
113.678 94.894 112.972 94.1885 112.103 94.1885 cv
111.233 94.1885 110.527 94.894 110.527 95.7637 cv
110.527 96.6328 111.233 97.3389 112.103 97.3389 cv
112.972 97.3389 113.678 96.6328 113.678 95.7637 cv
@
1 lc
112.112 95.8237 mo
112.112 95.8237 li
@
0 lc
113.438 93.6035 mo
113.438 92.7344 112.731 92.0288 111.862 92.0288 cv
110.993 92.0288 110.287 92.7344 110.287 93.6035 cv
110.287 94.4731 110.993 95.1787 111.862 95.1787 cv
112.731 95.1787 113.438 94.4731 113.438 93.6035 cv
@
1 lc
111.963 93.6738 mo
111.963 93.6738 li
@
0 lc
108.878 80.6436 mo
108.878 79.7744 108.172 79.0684 107.303 79.0684 cv
106.434 79.0684 105.728 79.7744 105.728 80.6436 cv
105.728 81.5132 106.434 82.2188 107.303 82.2188 cv
108.172 82.2188 108.878 81.5132 108.878 80.6436 cv
@
1 lc
107.263 80.5737 mo
107.263 80.5737 li
@
0 lc
112.718 78.7236 mo
112.718 77.854 112.012 77.1484 111.143 77.1484 cv
110.273 77.1484 109.567 77.854 109.567 78.7236 cv
109.567 79.5928 110.273 80.2988 111.143 80.2988 cv
112.012 80.2988 112.718 79.5928 112.718 78.7236 cv
@
1 lc
111.213 78.6235 mo
111.213 78.6235 li
@
0 lc
111.997 85.2036 mo
111.997 84.334 111.292 83.6284 110.423 83.6284 cv
109.553 83.6284 108.848 84.334 108.848 85.2036 cv
108.848 86.0732 109.553 86.7788 110.423 86.7788 cv
111.292 86.7788 111.997 86.0732 111.997 85.2036 cv
@
1 lc
110.513 85.1235 mo
110.513 85.1235 li
@
0 lc
110.077 92.5234 mo
110.077 91.6543 109.372 90.9487 108.503 90.9487 cv
107.633 90.9487 106.928 91.6543 106.928 92.5234 cv
106.928 93.3931 107.633 94.0986 108.503 94.0986 cv
109.372 94.0986 110.077 93.3931 110.077 92.5234 cv
@
1 lc
108.412 92.5234 mo
108.412 92.5234 li
@
0 lc
112.718 103.205 mo
112.718 102.333 112.012 101.628 111.143 101.628 cv
110.273 101.628 109.567 102.333 109.567 103.205 cv
109.567 104.074 110.273 104.779 111.143 104.779 cv
112.012 104.779 112.718 104.074 112.718 103.205 cv
@
1 lc
111.112 103.173 mo
111.112 103.173 li
@
0 lc
110.317 84.7236 mo
110.317 83.854 109.612 83.1484 108.742 83.1484 cv
107.873 83.1484 107.168 83.854 107.168 84.7236 cv
107.168 85.5928 107.873 86.2988 108.742 86.2988 cv
109.612 86.2988 110.317 85.5928 110.317 84.7236 cv
@
1 lc
108.763 84.6738 mo
108.763 84.6738 li
@
0 lc
111.878 61.4434 mo
111.878 60.5742 111.172 59.8687 110.303 59.8687 cv
109.434 59.8687 108.728 60.5742 108.728 61.4434 cv
108.728 62.313 109.434 63.0186 110.303 63.0186 cv
111.172 63.0186 111.878 62.313 111.878 61.4434 cv
@
1 lc
110.313 61.4736 mo
110.313 61.4736 li
@
0 lc
111.758 84.7236 mo
111.758 83.854 111.052 83.1484 110.183 83.1484 cv
109.313 83.1484 108.607 83.854 108.607 84.7236 cv
108.607 85.5928 109.313 86.2988 110.183 86.2988 cv
111.052 86.2988 111.758 85.5928 111.758 84.7236 cv
@
1 lc
110.162 84.6738 mo
110.162 84.6738 li
@
0 lc
111.277 97.4434 mo
111.277 96.5742 110.572 95.8687 109.702 95.8687 cv
108.833 95.8687 108.128 96.5742 108.128 97.4434 cv
108.128 98.314 108.833 99.019 109.702 99.019 cv
110.572 99.019 111.277 98.314 111.277 97.4434 cv
@
1 lc
109.713 97.5234 mo
109.713 97.5234 li
@
0 lc
109.357 111.843 mo
109.357 110.974 108.652 110.269 107.782 110.269 cv
106.913 110.269 106.207 110.974 106.207 111.843 cv
106.207 112.712 106.913 113.419 107.782 113.419 cv
108.652 113.419 109.357 112.712 109.357 111.843 cv
@
1 lc
107.713 111.824 mo
107.713 111.824 li
@
0 lc
112.957 116.884 mo
112.957 116.015 112.252 115.308 111.383 115.308 cv
110.513 115.308 109.808 116.015 109.808 116.884 cv
109.808 117.753 110.513 118.458 111.383 118.458 cv
112.252 118.458 112.957 117.753 112.957 116.884 cv
@
1 lc
111.313 116.824 mo
111.313 116.824 li
@
0 lc
111.638 69.1235 mo
111.638 68.2544 110.932 67.5488 110.063 67.5488 cv
109.193 67.5488 108.487 68.2544 108.487 69.1235 cv
108.487 69.9932 109.193 70.6987 110.063 70.6987 cv
110.932 70.6987 111.638 69.9932 111.638 69.1235 cv
@
1 lc
110.063 69.1235 mo
110.063 69.1235 li
@
0 lc
112.237 69.8438 mo
112.237 68.9741 111.532 68.2686 110.662 68.2686 cv
109.793 68.2686 109.088 68.9741 109.088 69.8438 cv
109.088 70.7129 109.793 71.4185 110.662 71.4185 cv
111.532 71.4185 112.237 70.7129 112.237 69.8438 cv
@
1 lc
110.713 69.7734 mo
110.713 69.7734 li
@
0 lc
112.957 51.3638 mo
112.957 50.4941 112.252 49.7886 111.383 49.7886 cv
110.513 49.7886 109.808 50.4941 109.808 51.3638 cv
109.808 52.2329 110.513 52.9385 111.383 52.9385 cv
112.252 52.9385 112.957 52.2329 112.957 51.3638 cv
@
1 lc
111.412 51.3735 mo
111.412 51.3735 li
@
0 lc
110.077 71.2837 mo
110.077 70.4141 109.372 69.7085 108.503 69.7085 cv
107.633 69.7085 106.928 70.4141 106.928 71.2837 cv
106.928 72.1528 107.633 72.8584 108.503 72.8584 cv
109.372 72.8584 110.077 72.1528 110.077 71.2837 cv
@
1 lc
108.463 71.3735 mo
108.463 71.3735 li
@
0 lc
112.237 98.5229 mo
112.237 97.6543 111.532 96.9487 110.662 96.9487 cv
109.793 96.9487 109.088 97.6543 109.088 98.5229 cv
109.088 99.3921 109.793 100.099 110.662 100.099 cv
111.532 100.099 112.237 99.3921 112.237 98.5229 cv
@
1 lc
110.662 98.5229 mo
110.662 98.5229 li
@
0 lc
112.718 81.3638 mo
112.718 80.4941 112.012 79.7886 111.143 79.7886 cv
110.273 79.7886 109.567 80.4941 109.567 81.3638 cv
109.567 82.2329 110.273 82.9385 111.143 82.9385 cv
112.012 82.9385 112.718 82.2329 112.718 81.3638 cv
@
1 lc
111.063 81.3237 mo
111.063 81.3237 li
@
0 lc
110.077 101.044 mo
110.077 100.173 109.372 99.4683 108.503 99.4683 cv
107.633 99.4683 106.928 100.173 106.928 101.044 cv
106.928 101.914 107.633 102.619 108.503 102.619 cv
109.372 102.619 110.077 101.914 110.077 101.044 cv
@
1 lc
108.513 101.023 mo
108.513 101.023 li
@
0 lc
116.317 83.0435 mo
116.317 82.1743 115.612 81.4688 114.742 81.4688 cv
113.873 81.4688 113.168 82.1743 113.168 83.0435 cv
113.168 83.9131 113.873 84.6187 114.742 84.6187 cv
115.612 84.6187 116.317 83.9131 116.317 83.0435 cv
@
1 lc
114.763 83.0737 mo
114.763 83.0737 li
@
0 lc
107.438 73.4434 mo
107.438 72.5742 106.731 71.8687 105.862 71.8687 cv
104.993 71.8687 104.287 72.5742 104.287 73.4434 cv
104.287 74.313 104.993 75.0186 105.862 75.0186 cv
106.731 75.0186 107.438 74.313 107.438 73.4434 cv
@
1 lc
105.963 73.3735 mo
105.963 73.3735 li
@
0 lc
112.957 97.4434 mo
112.957 96.5742 112.252 95.8687 111.383 95.8687 cv
110.513 95.8687 109.808 96.5742 109.808 97.4434 cv
109.808 98.314 110.513 99.019 111.383 99.019 cv
112.252 99.019 112.957 98.314 112.957 97.4434 cv
@
1 lc
111.412 97.5234 mo
111.412 97.5234 li
@
0 lc
112.598 101.763 mo
112.598 100.894 111.892 100.189 111.022 100.189 cv
110.153 100.189 109.447 100.894 109.447 101.763 cv
109.447 102.632 110.153 103.339 111.022 103.339 cv
111.892 103.339 112.598 102.632 112.598 101.763 cv
@
1 lc
111.013 101.724 mo
111.013 101.724 li
@
0 lc
112.718 62.1636 mo
112.718 61.2939 112.012 60.5889 111.143 60.5889 cv
110.273 60.5889 109.567 61.2939 109.567 62.1636 cv
109.567 63.0332 110.273 63.7388 111.143 63.7388 cv
112.012 63.7388 112.718 63.0332 112.718 62.1636 cv
@
1 lc
111.063 62.0737 mo
111.063 62.0737 li
@
0 lc
111.277 83.0435 mo
111.277 82.1743 110.572 81.4688 109.702 81.4688 cv
108.833 81.4688 108.128 82.1743 108.128 83.0435 cv
108.128 83.9131 108.833 84.6187 109.702 84.6187 cv
110.572 84.6187 111.277 83.9131 111.277 83.0435 cv
@
1 lc
109.662 83.0737 mo
109.662 83.0737 li
@
0 lc
113.798 115.923 mo
113.798 115.054 113.092 114.349 112.223 114.349 cv
111.354 114.349 110.647 115.054 110.647 115.923 cv
110.647 116.792 111.354 117.5 112.223 117.5 cv
113.092 117.5 113.798 116.792 113.798 115.923 cv
@
1 lc
112.213 115.875 mo
112.213 115.875 li
@
0 lc
113.197 84.7236 mo
113.197 83.854 112.492 83.1484 111.622 83.1484 cv
110.753 83.1484 110.048 83.854 110.048 84.7236 cv
110.048 85.5928 110.753 86.2988 111.622 86.2988 cv
112.492 86.2988 113.197 85.5928 113.197 84.7236 cv
@
1 lc
111.662 84.6738 mo
111.662 84.6738 li
@
0 lc
112.957 125.763 mo
112.957 124.894 112.252 124.189 111.383 124.189 cv
110.513 124.189 109.808 124.894 109.808 125.763 cv
109.808 126.632 110.513 127.339 111.383 127.339 cv
112.252 127.339 112.957 126.632 112.957 125.763 cv
@
1 lc
111.463 125.824 mo
111.463 125.824 li
@
0 lc
109.117 74.4038 mo
109.117 73.5342 108.412 72.8286 107.543 72.8286 cv
106.673 72.8286 105.968 73.5342 105.968 74.4038 cv
105.968 75.2729 106.673 75.9785 107.543 75.9785 cv
108.412 75.9785 109.117 75.2729 109.117 74.4038 cv
@
1 lc
107.463 74.3237 mo
107.463 74.3237 li
@
0 lc
108.638 105.964 mo
108.638 105.093 107.932 104.388 107.063 104.388 cv
106.193 104.388 105.487 105.093 105.487 105.964 cv
105.487 106.833 106.193 107.539 107.063 107.539 cv
107.932 107.539 108.638 106.833 108.638 105.964 cv
@
1 lc
107.112 105.974 mo
107.112 105.974 li
@
0 lc
113.678 53.5234 mo
113.678 52.6543 112.972 51.9487 112.103 51.9487 cv
111.233 51.9487 110.527 52.6543 110.527 53.5234 cv
110.527 54.3931 111.233 55.0986 112.103 55.0986 cv
112.972 55.0986 113.678 54.3931 113.678 53.5234 cv
@
1 lc
112.063 53.4238 mo
112.063 53.4238 li
@
0 lc
111.997 61.4434 mo
111.997 60.5742 111.292 59.8687 110.423 59.8687 cv
109.553 59.8687 108.848 60.5742 108.848 61.4434 cv
108.848 62.313 109.553 63.0186 110.423 63.0186 cv
111.292 63.0186 111.997 62.313 111.997 61.4434 cv
@
1 lc
110.463 61.4238 mo
110.463 61.4238 li
@
0 lc
109.838 79.4434 mo
109.838 78.5742 109.132 77.8687 108.263 77.8687 cv
107.394 77.8687 106.688 78.5742 106.688 79.4434 cv
106.688 80.313 107.394 81.0186 108.263 81.0186 cv
109.132 81.0186 109.838 80.313 109.838 79.4434 cv
@
1 lc
108.263 79.3735 mo
108.263 79.3735 li
@
0 lc
110.678 100.324 mo
110.678 99.4546 109.972 98.7495 109.103 98.7495 cv
108.233 98.7495 107.527 99.4546 107.527 100.324 cv
107.527 101.193 108.233 101.898 109.103 101.898 cv
109.972 101.898 110.678 101.193 110.678 100.324 cv
@
1 lc
109.112 100.375 mo
109.112 100.375 li
@
0 lc
112.478 109.443 mo
112.478 108.574 111.771 107.869 110.902 107.869 cv
110.033 107.869 109.327 108.574 109.327 109.443 cv
109.327 110.314 110.033 111.019 110.902 111.019 cv
111.771 111.019 112.478 110.314 112.478 109.443 cv
@
1 lc
110.813 109.523 mo
110.813 109.523 li
@
0 lc
111.518 78.3638 mo
111.518 77.4941 110.812 76.7886 109.942 76.7886 cv
109.073 76.7886 108.367 77.4941 108.367 78.3638 cv
108.367 79.2329 109.073 79.9385 109.942 79.9385 cv
110.812 79.9385 111.518 79.2329 111.518 78.3638 cv
@
1 lc
109.963 78.3735 mo
109.963 78.3735 li
@
0 lc
109.117 105.363 mo
109.117 104.494 108.412 103.789 107.543 103.789 cv
106.673 103.789 105.968 104.494 105.968 105.363 cv
105.968 106.234 106.673 106.939 107.543 106.939 cv
108.412 106.939 109.117 106.234 109.117 105.363 cv
@
1 lc
107.612 105.423 mo
107.612 105.423 li
@
0 lc
102.638 83.2837 mo
102.638 82.4141 101.932 81.7085 101.063 81.7085 cv
100.193 81.7085 99.4873 82.4141 99.4873 83.2837 cv
99.4873 84.1528 100.193 84.8584 101.063 84.8584 cv
101.932 84.8584 102.638 84.1528 102.638 83.2837 cv
@
1 lc
101.013 83.2236 mo
101.013 83.2236 li
@
0 lc
102.397 103.683 mo
102.397 102.814 101.691 102.109 100.822 102.109 cv
99.9531 102.109 99.2471 102.814 99.2471 103.683 cv
99.2471 104.552 99.9531 105.259 100.822 105.259 cv
101.691 105.259 102.397 104.552 102.397 103.683 cv
@
1 lc
100.763 103.724 mo
100.763 103.724 li
@
0 lc
103.838 101.523 mo
103.838 100.654 103.132 99.9487 102.263 99.9487 cv
101.394 99.9487 100.688 100.654 100.688 101.523 cv
100.688 102.392 101.394 103.099 102.263 103.099 cv
103.132 103.099 103.838 102.392 103.838 101.523 cv
@
1 lc
102.362 101.423 mo
102.362 101.423 li
@
0 lc
102.878 82.5635 mo
102.878 81.6943 102.172 80.9888 101.303 80.9888 cv
100.434 80.9888 99.7275 81.6943 99.7275 82.5635 cv
99.7275 83.4331 100.434 84.1387 101.303 84.1387 cv
102.172 84.1387 102.878 83.4331 102.878 82.5635 cv
@
1 lc
101.362 82.4736 mo
101.362 82.4736 li
@
0 lc
100.237 92.6436 mo
100.237 91.7744 99.5322 91.0684 98.6621 91.0684 cv
97.793 91.0684 97.0874 91.7744 97.0874 92.6436 cv
97.0874 93.5132 97.793 94.2188 98.6621 94.2188 cv
99.5322 94.2188 100.237 93.5132 100.237 92.6436 cv
@
1 lc
98.6621 92.6235 mo
98.6621 92.6235 li
@
0 lc
101.438 95.2837 mo
101.438 94.4141 100.731 93.7085 99.8623 93.7085 cv
98.9932 93.7085 98.2871 94.4141 98.2871 95.2837 cv
98.2871 96.1528 98.9932 96.8584 99.8623 96.8584 cv
100.731 96.8584 101.438 96.1528 101.438 95.2837 cv
@
1 lc
99.7627 95.2236 mo
99.7627 95.2236 li
@
0 lc
103.117 59.0435 mo
103.117 58.1743 102.412 57.4688 101.543 57.4688 cv
100.673 57.4688 99.9678 58.1743 99.9678 59.0435 cv
99.9678 59.9131 100.673 60.6187 101.543 60.6187 cv
102.412 60.6187 103.117 59.9131 103.117 59.0435 cv
@
1 lc
101.513 59.0737 mo
101.513 59.0737 li
@
0 lc
104.197 91.6836 mo
104.197 90.8145 103.492 90.1084 102.622 90.1084 cv
101.753 90.1084 101.048 90.8145 101.048 91.6836 cv
101.048 92.5532 101.753 93.2588 102.622 93.2588 cv
103.492 93.2588 104.197 92.5532 104.197 91.6836 cv
@
1 lc
102.612 91.7734 mo
102.612 91.7734 li
@
0 lc
102.157 59.0435 mo
102.157 58.1743 101.452 57.4688 100.582 57.4688 cv
99.7129 57.4688 99.0078 58.1743 99.0078 59.0435 cv
99.0078 59.9131 99.7129 60.6187 100.582 60.6187 cv
101.452 60.6187 102.157 59.9131 102.157 59.0435 cv
@
1 lc
100.662 59.0737 mo
100.662 59.0737 li
@
0 lc
103.237 73.6836 mo
103.237 72.8145 102.532 72.1084 101.662 72.1084 cv
100.793 72.1084 100.088 72.8145 100.088 73.6836 cv
100.088 74.5532 100.793 75.2588 101.662 75.2588 cv
102.532 75.2588 103.237 74.5532 103.237 73.6836 cv
@
1 lc
101.662 73.6738 mo
101.662 73.6738 li
@
0 lc
102.037 94.3237 mo
102.037 93.4541 101.332 92.7485 100.463 92.7485 cv
99.5928 92.7485 98.8877 93.4541 98.8877 94.3237 cv
98.8877 95.1929 99.5928 95.8984 100.463 95.8984 cv
101.332 95.8984 102.037 95.1929 102.037 94.3237 cv
@
1 lc
100.463 94.2236 mo
100.463 94.2236 li
@
0 lc
102.157 96.4834 mo
102.157 95.6143 101.452 94.9087 100.582 94.9087 cv
99.7129 94.9087 99.0078 95.6143 99.0078 96.4834 cv
99.0078 97.3525 99.7129 98.0581 100.582 98.0581 cv
101.452 98.0581 102.157 97.3525 102.157 96.4834 cv
@
1 lc
100.612 96.4736 mo
100.612 96.4736 li
@
0 lc
102.878 118.923 mo
102.878 118.054 102.172 117.349 101.303 117.349 cv
100.434 117.349 99.7275 118.054 99.7275 118.923 cv
99.7275 119.792 100.434 120.5 101.303 120.5 cv
102.172 120.5 102.878 119.792 102.878 118.923 cv
@
1 lc
101.313 118.923 mo
101.313 118.923 li
@
0 lc
102.638 70.3237 mo
102.638 69.4541 101.932 68.7485 101.063 68.7485 cv
100.193 68.7485 99.4873 69.4541 99.4873 70.3237 cv
99.4873 71.1929 100.193 71.8984 101.063 71.8984 cv
101.932 71.8984 102.638 71.1929 102.638 70.3237 cv
@
1 lc
100.963 70.4238 mo
100.963 70.4238 li
@
0 lc
106.718 52.8037 mo
106.718 51.9341 106.012 51.2285 105.143 51.2285 cv
104.273 51.2285 103.567 51.9341 103.567 52.8037 cv
103.567 53.6729 104.273 54.3784 105.143 54.3784 cv
106.012 54.3784 106.718 53.6729 106.718 52.8037 cv
@
1 lc
105.112 52.8735 mo
105.112 52.8735 li
@
0 lc
103.838 81.4834 mo
103.838 80.6143 103.132 79.9087 102.263 79.9087 cv
101.394 79.9087 100.688 80.6143 100.688 81.4834 cv
100.688 82.353 101.394 83.0586 102.263 83.0586 cv
103.132 83.0586 103.838 82.353 103.838 81.4834 cv
@
1 lc
102.313 81.4736 mo
102.313 81.4736 li
@
0 lc
100.957 92.8838 mo
100.957 92.0142 100.252 91.3086 99.3828 91.3086 cv
98.5127 91.3086 97.8076 92.0142 97.8076 92.8838 cv
97.8076 93.7529 98.5127 94.4585 99.3828 94.4585 cv
100.252 94.4585 100.957 93.7529 100.957 92.8838 cv
@
1 lc
99.3125 92.8237 mo
99.3125 92.8237 li
@
0 lc
100.718 76.3237 mo
100.718 75.4541 100.012 74.7485 99.1426 74.7485 cv
98.2734 74.7485 97.5674 75.4541 97.5674 76.3237 cv
97.5674 77.1929 98.2734 77.8984 99.1426 77.8984 cv
100.012 77.8984 100.718 77.1929 100.718 76.3237 cv
@
1 lc
99.2129 76.3735 mo
99.2129 76.3735 li
@
0 lc
105.758 72.7236 mo
105.758 71.854 105.052 71.1484 104.183 71.1484 cv
103.313 71.1484 102.607 71.854 102.607 72.7236 cv
102.607 73.5928 103.313 74.2988 104.183 74.2988 cv
105.052 74.2988 105.758 73.5928 105.758 72.7236 cv
@
1 lc
104.112 72.6235 mo
104.112 72.6235 li
@
0 lc
103.117 46.0835 mo
103.117 45.2144 102.412 44.5088 101.543 44.5088 cv
100.673 44.5088 99.9678 45.2144 99.9678 46.0835 cv
99.9678 46.9531 100.673 47.6587 101.543 47.6587 cv
102.412 47.6587 103.117 46.9531 103.117 46.0835 cv
@
1 lc
101.563 46.0737 mo
101.563 46.0737 li
@
0 lc
101.197 109.205 mo
101.197 108.333 100.492 107.628 99.6221 107.628 cv
98.7529 107.628 98.0474 108.333 98.0474 109.205 cv
98.0474 110.074 98.7529 110.779 99.6221 110.779 cv
100.492 110.779 101.197 110.074 101.197 109.205 cv
@
1 lc
99.6123 109.125 mo
99.6123 109.125 li
@
0 lc
102.277 103.923 mo
102.277 103.054 101.572 102.349 100.702 102.349 cv
99.833 102.349 99.1279 103.054 99.1279 103.923 cv
99.1279 104.792 99.833 105.5 100.702 105.5 cv
101.572 105.5 102.277 104.792 102.277 103.923 cv
@
1 lc
100.713 103.974 mo
100.713 103.974 li
@
0 lc
102.277 79.2036 mo
102.277 78.334 101.572 77.6284 100.702 77.6284 cv
99.833 77.6284 99.1279 78.334 99.1279 79.2036 cv
99.1279 80.0732 99.833 80.7788 100.702 80.7788 cv
101.572 80.7788 102.277 80.0732 102.277 79.2036 cv
@
1 lc
100.713 79.1235 mo
100.713 79.1235 li
@
0 lc
101.438 49.6836 mo
101.438 48.8145 100.731 48.1084 99.8623 48.1084 cv
98.9932 48.1084 98.2871 48.8145 98.2871 49.6836 cv
98.2871 50.5532 98.9932 51.2588 99.8623 51.2588 cv
100.731 51.2588 101.438 50.5532 101.438 49.6836 cv
@
1 lc
99.9121 49.6235 mo
99.9121 49.6235 li
@
0 lc
103.117 60.4834 mo
103.117 59.6143 102.412 58.9087 101.543 58.9087 cv
100.673 58.9087 99.9678 59.6143 99.9678 60.4834 cv
99.9678 61.353 100.673 62.0586 101.543 62.0586 cv
102.412 62.0586 103.117 61.353 103.117 60.4834 cv
@
1 lc
101.513 60.4736 mo
101.513 60.4736 li
@
0 lc
102.397 97.9238 mo
102.397 97.0542 101.691 96.3486 100.822 96.3486 cv
99.9531 96.3486 99.2471 97.0542 99.2471 97.9238 cv
99.2471 98.7925 99.9531 99.4995 100.822 99.4995 cv
101.691 99.4995 102.397 98.7925 102.397 97.9238 cv
@
1 lc
100.813 97.874 mo
100.813 97.874 li
@
0 lc
105.758 42.9639 mo
105.758 42.0942 105.052 41.3887 104.183 41.3887 cv
103.313 41.3887 102.607 42.0942 102.607 42.9639 cv
102.607 43.833 103.313 44.5386 104.183 44.5386 cv
105.052 44.5386 105.758 43.833 105.758 42.9639 cv
@
1 lc
104.162 42.9238 mo
104.162 42.9238 li
@
0 lc
101.077 86.4038 mo
101.077 85.5342 100.372 84.8286 99.5029 84.8286 cv
98.6328 84.8286 97.9277 85.5342 97.9277 86.4038 cv
97.9277 87.2729 98.6328 87.9785 99.5029 87.9785 cv
100.372 87.9785 101.077 87.2729 101.077 86.4038 cv
@
1 lc
99.5127 86.4736 mo
99.5127 86.4736 li
@
0 lc
102.638 87.3638 mo
102.638 86.4941 101.932 85.7886 101.063 85.7886 cv
100.193 85.7886 99.4873 86.4941 99.4873 87.3638 cv
99.4873 88.2329 100.193 88.9385 101.063 88.9385 cv
101.932 88.9385 102.638 88.2329 102.638 87.3638 cv
@
1 lc
101.013 87.4238 mo
101.013 87.4238 li
@
0 lc
102.157 83.1636 mo
102.157 82.2939 101.452 81.5889 100.582 81.5889 cv
99.7129 81.5889 99.0078 82.2939 99.0078 83.1636 cv
99.0078 84.0332 99.7129 84.7388 100.582 84.7388 cv
101.452 84.7388 102.157 84.0332 102.157 83.1636 cv
@
1 lc
100.513 83.1738 mo
100.513 83.1738 li
@
0 lc
105.518 87.1235 mo
105.518 86.2544 104.812 85.5488 103.942 85.5488 cv
103.073 85.5488 102.367 86.2544 102.367 87.1235 cv
102.367 87.9932 103.073 88.6987 103.942 88.6987 cv
104.812 88.6987 105.518 87.9932 105.518 87.1235 cv
@
1 lc
103.912 87.1738 mo
103.912 87.1738 li
@
0 lc
101.438 76.3237 mo
101.438 75.4541 100.731 74.7485 99.8623 74.7485 cv
98.9932 74.7485 98.2871 75.4541 98.2871 76.3237 cv
98.2871 77.1929 98.9932 77.8984 99.8623 77.8984 cv
100.731 77.8984 101.438 77.1929 101.438 76.3237 cv
@
1 lc
99.9629 76.2734 mo
99.9629 76.2734 li
@
0 lc
102.878 103.683 mo
102.878 102.814 102.172 102.109 101.303 102.109 cv
100.434 102.109 99.7275 102.814 99.7275 103.683 cv
99.7275 104.552 100.434 105.259 101.303 105.259 cv
102.172 105.259 102.878 104.552 102.878 103.683 cv
@
1 lc
101.213 103.673 mo
101.213 103.673 li
@
0 lc
104.798 67.4434 mo
104.798 66.5742 104.092 65.8687 103.223 65.8687 cv
102.354 65.8687 101.647 66.5742 101.647 67.4434 cv
101.647 68.313 102.354 69.0186 103.223 69.0186 cv
104.092 69.0186 104.798 68.313 104.798 67.4434 cv
@
1 lc
103.263 67.4238 mo
103.263 67.4238 li
@
0 lc
106.478 124.804 mo
106.478 123.935 105.771 123.228 104.902 123.228 cv
104.033 123.228 103.327 123.935 103.327 124.804 cv
103.327 125.673 104.033 126.378 104.902 126.378 cv
105.771 126.378 106.478 125.673 106.478 124.804 cv
@
1 lc
104.963 124.824 mo
104.963 124.824 li
@
0 lc
101.197 95.0435 mo
101.197 94.1743 100.492 93.4688 99.6221 93.4688 cv
98.7529 93.4688 98.0474 94.1743 98.0474 95.0435 cv
98.0474 95.9131 98.7529 96.6187 99.6221 96.6187 cv
100.492 96.6187 101.197 95.9131 101.197 95.0435 cv
@
1 lc
99.6123 95.0234 mo
99.6123 95.0234 li
@
0 lc
101.678 76.3237 mo
101.678 75.4541 100.972 74.7485 100.103 74.7485 cv
99.2334 74.7485 98.5273 75.4541 98.5273 76.3237 cv
98.5273 77.1929 99.2334 77.8984 100.103 77.8984 cv
100.972 77.8984 101.678 77.1929 101.678 76.3237 cv
@
1 lc
100.162 76.4238 mo
100.162 76.4238 li
@
0 lc
103.838 51.9639 mo
103.838 51.0942 103.132 50.3887 102.263 50.3887 cv
101.394 50.3887 100.688 51.0942 100.688 51.9639 cv
100.688 52.833 101.394 53.5386 102.263 53.5386 cv
103.132 53.5386 103.838 52.833 103.838 51.9639 cv
@
1 lc
102.162 51.9736 mo
102.162 51.9736 li
@
0 lc
102.157 127.683 mo
102.157 126.814 101.452 126.109 100.582 126.109 cv
99.7129 126.109 99.0078 126.814 99.0078 127.683 cv
99.0078 128.552 99.7129 129.259 100.582 129.259 cv
101.452 129.259 102.157 128.552 102.157 127.683 cv
@
1 lc
100.662 127.724 mo
100.662 127.724 li
@
0 lc
105.997 50.1636 mo
105.997 49.2939 105.292 48.5889 104.423 48.5889 cv
103.553 48.5889 102.848 49.2939 102.848 50.1636 cv
102.848 51.0332 103.553 51.7388 104.423 51.7388 cv
105.292 51.7388 105.997 51.0332 105.997 50.1636 cv
@
1 lc
104.362 50.1235 mo
104.362 50.1235 li
@
0 lc
100.237 94.8037 mo
100.237 93.9341 99.5322 93.2285 98.6621 93.2285 cv
97.793 93.2285 97.0874 93.9341 97.0874 94.8037 cv
97.0874 95.6729 97.793 96.3784 98.6621 96.3784 cv
99.5322 96.3784 100.237 95.6729 100.237 94.8037 cv
@
1 lc
98.6621 94.8735 mo
98.6621 94.8735 li
@
0 lc
104.317 93.6035 mo
104.317 92.7344 103.612 92.0288 102.742 92.0288 cv
101.873 92.0288 101.168 92.7344 101.168 93.6035 cv
101.168 94.4731 101.873 95.1787 102.742 95.1787 cv
103.612 95.1787 104.317 94.4731 104.317 93.6035 cv
@
1 lc
102.763 93.6235 mo
102.763 93.6235 li
@
0 lc
103.598 97.2036 mo
103.598 96.334 102.892 95.6284 102.022 95.6284 cv
101.153 95.6284 100.447 96.334 100.447 97.2036 cv
100.447 98.0737 101.153 98.7788 102.022 98.7788 cv
102.892 98.7788 103.598 98.0737 103.598 97.2036 cv
@
1 lc
101.963 97.1235 mo
101.963 97.1235 li
@
0 lc
104.317 108.125 mo
104.317 107.253 103.612 106.548 102.742 106.548 cv
101.873 106.548 101.168 107.253 101.168 108.125 cv
101.168 108.994 101.873 109.699 102.742 109.699 cv
103.612 109.699 104.317 108.994 104.317 108.125 cv
@
1 lc
102.713 108.125 mo
102.713 108.125 li
@
0 lc
102.157 85.3237 mo
102.157 84.4541 101.452 83.7485 100.582 83.7485 cv
99.7129 83.7485 99.0078 84.4541 99.0078 85.3237 cv
99.0078 86.1929 99.7129 86.8984 100.582 86.8984 cv
101.452 86.8984 102.157 86.1929 102.157 85.3237 cv
@
1 lc
100.612 85.3237 mo
100.612 85.3237 li
@
0 lc
102.638 123.125 mo
102.638 122.253 101.932 121.548 101.063 121.548 cv
100.193 121.548 99.4873 122.253 99.4873 123.125 cv
99.4873 123.994 100.193 124.699 101.063 124.699 cv
101.932 124.699 102.638 123.994 102.638 123.125 cv
@
1 lc
100.963 123.173 mo
100.963 123.173 li
@
0 lc
101.438 70.8037 mo
101.438 69.9341 100.731 69.2285 99.8623 69.2285 cv
98.9932 69.2285 98.2871 69.9341 98.2871 70.8037 cv
98.2871 71.6729 98.9932 72.3784 99.8623 72.3784 cv
100.731 72.3784 101.438 71.6729 101.438 70.8037 cv
@
1 lc
99.8623 70.8735 mo
99.8623 70.8735 li
@
0 lc
103.117 65.2837 mo
103.117 64.4141 102.412 63.7085 101.543 63.7085 cv
100.673 63.7085 99.9678 64.4141 99.9678 65.2837 cv
99.9678 66.1528 100.673 66.8584 101.543 66.8584 cv
102.412 66.8584 103.117 66.1528 103.117 65.2837 cv
@
1 lc
101.513 65.2734 mo
101.513 65.2734 li
@
0 lc
101.678 83.7637 mo
101.678 82.894 100.972 82.1885 100.103 82.1885 cv
99.2334 82.1885 98.5273 82.894 98.5273 83.7637 cv
98.5273 84.6328 99.2334 85.3389 100.103 85.3389 cv
100.972 85.3389 101.678 84.6328 101.678 83.7637 cv
@
1 lc
100.112 83.8237 mo
100.112 83.8237 li
@
0 lc
104.317 80.1636 mo
104.317 79.2939 103.612 78.5889 102.742 78.5889 cv
101.873 78.5889 101.168 79.2939 101.168 80.1636 cv
101.168 81.0332 101.873 81.7388 102.742 81.7388 cv
103.612 81.7388 104.317 81.0332 104.317 80.1636 cv
@
1 lc
102.713 80.0737 mo
102.713 80.0737 li
@
0 lc
104.558 121.923 mo
104.558 121.054 103.852 120.349 102.982 120.349 cv
102.113 120.349 101.407 121.054 101.407 121.923 cv
101.407 122.792 102.113 123.5 102.982 123.5 cv
103.852 123.5 104.558 122.792 104.558 121.923 cv
@
1 lc
103.063 122.023 mo
103.063 122.023 li
@
0 lc
105.397 88.3237 mo
105.397 87.4541 104.691 86.7485 103.822 86.7485 cv
102.953 86.7485 102.247 87.4541 102.247 88.3237 cv
102.247 89.1929 102.953 89.8984 103.822 89.8984 cv
104.691 89.8984 105.397 89.1929 105.397 88.3237 cv
@
1 lc
103.813 88.2236 mo
103.813 88.2236 li
@
0 lc
105.277 117.603 mo
105.277 116.734 104.572 116.029 103.702 116.029 cv
102.833 116.029 102.128 116.734 102.128 117.603 cv
102.128 118.472 102.833 119.179 103.702 119.179 cv
104.572 119.179 105.277 118.472 105.277 117.603 cv
@
1 lc
103.713 117.523 mo
103.713 117.523 li
@
0 lc
101.438 82.3237 mo
101.438 81.4541 100.731 80.7485 99.8623 80.7485 cv
98.9932 80.7485 98.2871 81.4541 98.2871 82.3237 cv
98.2871 83.1929 98.9932 83.8984 99.8623 83.8984 cv
100.731 83.8984 101.438 83.1929 101.438 82.3237 cv
@
1 lc
99.9629 82.2236 mo
99.9629 82.2236 li
@
0 lc
104.798 123.843 mo
104.798 122.974 104.092 122.269 103.223 122.269 cv
102.354 122.269 101.647 122.974 101.647 123.843 cv
101.647 124.712 102.354 125.419 103.223 125.419 cv
104.092 125.419 104.798 124.712 104.798 123.843 cv
@
1 lc
103.263 123.773 mo
103.263 123.773 li
@
0 lc
104.317 81.3638 mo
104.317 80.4941 103.612 79.7886 102.742 79.7886 cv
101.873 79.7886 101.168 80.4941 101.168 81.3638 cv
101.168 82.2329 101.873 82.9385 102.742 82.9385 cv
103.612 82.9385 104.317 82.2329 104.317 81.3638 cv
@
1 lc
102.763 81.3237 mo
102.763 81.3237 li
@
0 lc
97.3574 84.2437 mo
97.3574 83.374 96.6519 82.6685 95.7827 82.6685 cv
94.9131 82.6685 94.2075 83.374 94.2075 84.2437 cv
94.2075 85.1128 94.9131 85.8184 95.7827 85.8184 cv
96.6519 85.8184 97.3574 85.1128 97.3574 84.2437 cv
@
1 lc
95.7124 84.2734 mo
95.7124 84.2734 li
@
0 lc
101.678 83.5234 mo
101.678 82.6543 100.972 81.9487 100.103 81.9487 cv
99.2334 81.9487 98.5273 82.6543 98.5273 83.5234 cv
98.5273 84.3931 99.2334 85.0986 100.103 85.0986 cv
100.972 85.0986 101.678 84.3931 101.678 83.5234 cv
@
1 lc
100.013 83.6235 mo
100.013 83.6235 li
@
0 lc
103.478 36.2437 mo
103.478 35.374 102.771 34.6685 101.902 34.6685 cv
101.033 34.6685 100.327 35.374 100.327 36.2437 cv
100.327 37.1128 101.033 37.8184 101.902 37.8184 cv
102.771 37.8184 103.478 37.1128 103.478 36.2437 cv
@
1 lc
101.912 36.2734 mo
101.912 36.2734 li
@
0 lc
99.7578 54.4834 mo
99.7578 53.6143 99.0518 52.9087 98.1826 52.9087 cv
97.313 52.9087 96.6074 53.6143 96.6074 54.4834 cv
96.6074 55.353 97.313 56.0586 98.1826 56.0586 cv
99.0518 56.0586 99.7578 55.353 99.7578 54.4834 cv
@
1 lc
98.2627 54.4238 mo
98.2627 54.4238 li
@
0 lc
104.317 110.404 mo
104.317 109.535 103.612 108.83 102.742 108.83 cv
101.873 108.83 101.168 109.535 101.168 110.404 cv
101.168 111.273 101.873 111.978 102.742 111.978 cv
103.612 111.978 104.317 111.273 104.317 110.404 cv
@
1 lc
102.763 110.324 mo
102.763 110.324 li
@
0 lc
101.438 90.4834 mo
101.438 89.6143 100.731 88.9087 99.8623 88.9087 cv
98.9932 88.9087 98.2871 89.6143 98.2871 90.4834 cv
98.2871 91.353 98.9932 92.0586 99.8623 92.0586 cv
100.731 92.0586 101.438 91.353 101.438 90.4834 cv
@
1 lc
99.8125 90.4238 mo
99.8125 90.4238 li
@
0 lc
99.8779 113.283 mo
99.8779 112.414 99.1719 111.708 98.3027 111.708 cv
97.4331 111.708 96.7275 112.414 96.7275 113.283 cv
96.7275 114.154 97.4331 114.859 98.3027 114.859 cv
99.1719 114.859 99.8779 114.154 99.8779 113.283 cv
@
1 lc
98.3125 113.273 mo
98.3125 113.273 li
@
0 lc
100.957 124.683 mo
100.957 123.814 100.252 123.109 99.3828 123.109 cv
98.5127 123.109 97.8076 123.814 97.8076 124.683 cv
97.8076 125.552 98.5127 126.259 99.3828 126.259 cv
100.252 126.259 100.957 125.552 100.957 124.683 cv
@
1 lc
99.3623 124.673 mo
99.3623 124.673 li
@
0 lc
101.918 108.003 mo
101.918 107.134 101.212 106.429 100.343 106.429 cv
99.4727 106.429 98.7676 107.134 98.7676 108.003 cv
98.7676 108.873 99.4727 109.58 100.343 109.58 cv
101.212 109.58 101.918 108.873 101.918 108.003 cv
@
1 lc
100.362 107.923 mo
100.362 107.923 li
@
0 lc
101.678 109.205 mo
101.678 108.333 100.972 107.628 100.103 107.628 cv
99.2334 107.628 98.5273 108.333 98.5273 109.205 cv
98.5273 110.074 99.2334 110.779 100.103 110.779 cv
100.972 110.779 101.678 110.074 101.678 109.205 cv
@
1 lc
100.063 109.125 mo
100.063 109.125 li
@
0 lc
105.277 78.2437 mo
105.277 77.374 104.572 76.6685 103.702 76.6685 cv
102.833 76.6685 102.128 77.374 102.128 78.2437 cv
102.128 79.1128 102.833 79.8184 103.702 79.8184 cv
104.572 79.8184 105.277 79.1128 105.277 78.2437 cv
@
1 lc
103.662 78.1738 mo
103.662 78.1738 li
@
0 lc
104.317 71.8838 mo
104.317 71.0142 103.612 70.3086 102.742 70.3086 cv
101.873 70.3086 101.168 71.0142 101.168 71.8838 cv
101.168 72.7529 101.873 73.4585 102.742 73.4585 cv
103.612 73.4585 104.317 72.7529 104.317 71.8838 cv
@
1 lc
102.763 71.8735 mo
102.763 71.8735 li
@
0 lc
103.117 117.603 mo
103.117 116.734 102.412 116.029 101.543 116.029 cv
100.673 116.029 99.9678 116.734 99.9678 117.603 cv
99.9678 118.472 100.673 119.179 101.543 119.179 cv
102.412 119.179 103.117 118.472 103.117 117.603 cv
@
1 lc
101.612 117.523 mo
101.612 117.523 li
@
0 lc
102.157 128.164 mo
102.157 127.294 101.452 126.589 100.582 126.589 cv
99.7129 126.589 99.0078 127.294 99.0078 128.164 cv
99.0078 129.033 99.7129 129.738 100.582 129.738 cv
101.452 129.738 102.157 129.033 102.157 128.164 cv
@
1 lc
100.513 128.173 mo
100.513 128.173 li
@
0 lc
103.357 108.003 mo
103.357 107.134 102.652 106.429 101.782 106.429 cv
100.913 106.429 100.207 107.134 100.207 108.003 cv
100.207 108.873 100.913 109.58 101.782 109.58 cv
102.652 109.58 103.357 108.873 103.357 108.003 cv
@
1 lc
101.862 107.923 mo
101.862 107.923 li
@
0 lc
102.157 65.0435 mo
102.157 64.1743 101.452 63.4688 100.582 63.4688 cv
99.7129 63.4688 99.0078 64.1743 99.0078 65.0435 cv
99.0078 65.9131 99.7129 66.6187 100.582 66.6187 cv
101.452 66.6187 102.157 65.9131 102.157 65.0435 cv
@
1 lc
100.662 65.0234 mo
100.662 65.0234 li
@
0 lc
101.197 110.644 mo
101.197 109.775 100.492 109.068 99.6221 109.068 cv
98.7529 109.068 98.0474 109.775 98.0474 110.644 cv
98.0474 111.513 98.7529 112.218 99.6221 112.218 cv
100.492 112.218 101.197 111.513 101.197 110.644 cv
@
1 lc
99.6621 110.574 mo
99.6621 110.574 li
@
0 lc
103.117 89.0435 mo
103.117 88.1743 102.412 87.4688 101.543 87.4688 cv
100.673 87.4688 99.9678 88.1743 99.9678 89.0435 cv
99.9678 89.9131 100.673 90.6187 101.543 90.6187 cv
102.412 90.6187 103.117 89.9131 103.117 89.0435 cv
@
1 lc
101.513 89.1235 mo
101.513 89.1235 li
@
0 lc
104.798 96.2437 mo
104.798 95.374 104.092 94.6685 103.223 94.6685 cv
102.354 94.6685 101.647 95.374 101.647 96.2437 cv
101.647 97.1133 102.354 97.8184 103.223 97.8184 cv
104.092 97.8184 104.798 97.1133 104.798 96.2437 cv
@
1 lc
103.313 96.2734 mo
103.313 96.2734 li
@
0 lc
102.157 84.2437 mo
102.157 83.374 101.452 82.6685 100.582 82.6685 cv
99.7129 82.6685 99.0078 83.374 99.0078 84.2437 cv
99.0078 85.1128 99.7129 85.8184 100.582 85.8184 cv
101.452 85.8184 102.157 85.1128 102.157 84.2437 cv
@
1 lc
100.612 84.3237 mo
100.612 84.3237 li
@
0 lc
101.798 100.804 mo
101.798 99.9351 101.092 99.228 100.223 99.228 cv
99.3535 99.228 98.6475 99.9351 98.6475 100.804 cv
98.6475 101.673 99.3535 102.378 100.223 102.378 cv
101.092 102.378 101.798 101.673 101.798 100.804 cv
@
1 lc
100.213 100.875 mo
100.213 100.875 li
@
0 lc
106.478 91.4434 mo
106.478 90.5742 105.771 89.8687 104.902 89.8687 cv
104.033 89.8687 103.327 90.5742 103.327 91.4434 cv
103.327 92.313 104.033 93.0186 104.902 93.0186 cv
105.771 93.0186 106.478 92.313 106.478 91.4434 cv
@
1 lc
104.862 91.4736 mo
104.862 91.4736 li
@
0 lc
103.237 118.324 mo
103.237 117.455 102.532 116.75 101.662 116.75 cv
100.793 116.75 100.088 117.455 100.088 118.324 cv
100.088 119.193 100.793 119.898 101.662 119.898 cv
102.532 119.898 103.237 119.193 103.237 118.324 cv
@
1 lc
101.662 118.324 mo
101.662 118.324 li
@
0 lc
107.197 93.7236 mo
107.197 92.854 106.492 92.1484 105.622 92.1484 cv
104.753 92.1484 104.048 92.854 104.048 93.7236 cv
104.048 94.5928 104.753 95.2988 105.622 95.2988 cv
106.492 95.2988 107.197 94.5928 107.197 93.7236 cv
@
1 lc
105.713 93.7236 mo
105.713 93.7236 li
@
0 lc
104.798 128.164 mo
104.798 127.294 104.092 126.589 103.223 126.589 cv
102.354 126.589 101.647 127.294 101.647 128.164 cv
101.647 129.033 102.354 129.738 103.223 129.738 cv
104.092 129.738 104.798 129.033 104.798 128.164 cv
@
1 lc
103.162 128.125 mo
103.162 128.125 li
@
0 lc
105.037 67.9238 mo
105.037 67.0542 104.332 66.3486 103.463 66.3486 cv
102.593 66.3486 101.888 67.0542 101.888 67.9238 cv
101.888 68.793 102.593 69.4985 103.463 69.4985 cv
104.332 69.4985 105.037 68.793 105.037 67.9238 cv
@
1 lc
103.362 67.9736 mo
103.362 67.9736 li
@
0 lc
102.157 108.964 mo
102.157 108.093 101.452 107.388 100.582 107.388 cv
99.7129 107.388 99.0078 108.093 99.0078 108.964 cv
99.0078 109.833 99.7129 110.539 100.582 110.539 cv
101.452 110.539 102.157 109.833 102.157 108.964 cv
@
1 lc
100.662 108.875 mo
100.662 108.875 li
@
0 lc
101.438 99.1245 mo
101.438 98.2534 100.731 97.5488 99.8623 97.5488 cv
98.9932 97.5488 98.2871 98.2534 98.2871 99.1245 cv
98.2871 99.9937 98.9932 100.699 99.8623 100.699 cv
100.731 100.699 101.438 99.9937 101.438 99.1245 cv
@
1 lc
99.9629 99.0229 mo
99.9629 99.0229 li
@
0 lc
105.518 94.0835 mo
105.518 93.2144 104.812 92.5088 103.942 92.5088 cv
103.073 92.5088 102.367 93.2144 102.367 94.0835 cv
102.367 94.9531 103.073 95.6587 103.942 95.6587 cv
104.812 95.6587 105.518 94.9531 105.518 94.0835 cv
@
1 lc
103.963 94.1235 mo
103.963 94.1235 li
@
0 lc
103.838 97.3232 mo
103.838 96.4541 103.132 95.7485 102.263 95.7485 cv
101.394 95.7485 100.688 96.4541 100.688 97.3232 cv
100.688 98.1929 101.394 98.8979 102.263 98.8979 cv
103.132 98.8979 103.838 98.1929 103.838 97.3232 cv
@
1 lc
102.213 97.3232 mo
102.213 97.3232 li
@
0 lc
101.918 72.0034 mo
101.918 71.1343 101.212 70.4287 100.343 70.4287 cv
99.4727 70.4287 98.7676 71.1343 98.7676 72.0034 cv
98.7676 72.873 99.4727 73.5786 100.343 73.5786 cv
101.212 73.5786 101.918 72.873 101.918 72.0034 cv
@
1 lc
100.313 71.9736 mo
100.313 71.9736 li
@
0 lc
105.037 87.1235 mo
105.037 86.2544 104.332 85.5488 103.463 85.5488 cv
102.593 85.5488 101.888 86.2544 101.888 87.1235 cv
101.888 87.9932 102.593 88.6987 103.463 88.6987 cv
104.332 88.6987 105.037 87.9932 105.037 87.1235 cv
@
1 lc
103.362 87.1738 mo
103.362 87.1738 li
@
0 lc
101.197 87.1235 mo
101.197 86.2544 100.492 85.5488 99.6221 85.5488 cv
98.7529 85.5488 98.0474 86.2544 98.0474 87.1235 cv
98.0474 87.9932 98.7529 88.6987 99.6221 88.6987 cv
100.492 88.6987 101.197 87.9932 101.197 87.1235 cv
@
1 lc
99.5625 87.1738 mo
99.5625 87.1738 li
@
0 lc
101.918 121.443 mo
101.918 120.574 101.212 119.869 100.343 119.869 cv
99.4727 119.869 98.7676 120.574 98.7676 121.443 cv
98.7676 122.314 99.4727 123.019 100.343 123.019 cv
101.212 123.019 101.918 122.314 101.918 121.443 cv
@
1 lc
100.362 121.474 mo
100.362 121.474 li
@
0 lc
105.397 90.0034 mo
105.397 89.1343 104.691 88.4287 103.822 88.4287 cv
102.953 88.4287 102.247 89.1343 102.247 90.0034 cv
102.247 90.873 102.953 91.5786 103.822 91.5786 cv
104.691 91.5786 105.397 90.873 105.397 90.0034 cv
@
1 lc
103.813 89.9238 mo
103.813 89.9238 li
@
0 lc
107.197 97.6836 mo
107.197 96.8145 106.492 96.1084 105.622 96.1084 cv
104.753 96.1084 104.048 96.8145 104.048 97.6836 cv
104.048 98.5522 104.753 99.2593 105.622 99.2593 cv
106.492 99.2593 107.197 98.5522 107.197 97.6836 cv
@
1 lc
105.563 97.7236 mo
105.563 97.7236 li
@
0 lc
105.638 102.484 mo
105.638 101.615 104.932 100.908 104.063 100.908 cv
103.193 100.908 102.487 101.615 102.487 102.484 cv
102.487 103.353 103.193 104.058 104.063 104.058 cv
104.932 104.058 105.638 103.353 105.638 102.484 cv
@
1 lc
104.063 102.523 mo
104.063 102.523 li
@
0 lc
104.558 126.484 mo
104.558 125.615 103.852 124.908 102.982 124.908 cv
102.113 124.908 101.407 125.615 101.407 126.484 cv
101.407 127.353 102.113 128.058 102.982 128.058 cv
103.852 128.058 104.558 127.353 104.558 126.484 cv
@
1 lc
102.963 126.474 mo
102.963 126.474 li
@
0 lc
102.397 78.4834 mo
102.397 77.6143 101.691 76.9087 100.822 76.9087 cv
99.9531 76.9087 99.2471 77.6143 99.2471 78.4834 cv
99.2471 79.353 99.9531 80.0586 100.822 80.0586 cv
101.691 80.0586 102.397 79.353 102.397 78.4834 cv
@
1 lc
100.763 78.4238 mo
100.763 78.4238 li
@
0 lc
102.157 81.9639 mo
102.157 81.0942 101.452 80.3887 100.582 80.3887 cv
99.7129 80.3887 99.0078 81.0942 99.0078 81.9639 cv
99.0078 82.833 99.7129 83.5386 100.582 83.5386 cv
101.452 83.5386 102.157 82.833 102.157 81.9639 cv
@
1 lc
100.563 81.9736 mo
100.563 81.9736 li
@
0 lc
106.478 76.5635 mo
106.478 75.6943 105.771 74.9888 104.902 74.9888 cv
104.033 74.9888 103.327 75.6943 103.327 76.5635 cv
103.327 77.4331 104.033 78.1387 104.902 78.1387 cv
105.771 78.1387 106.478 77.4331 106.478 76.5635 cv
@
1 lc
104.912 76.5737 mo
104.912 76.5737 li
@
0.5 lw
0 lc
16.2627 3.67383 mo
16.2627 182.724 li
195.313 182.724 li
195.313 3.67383 li
16.2627 3.67383 li
16.2627 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPVZI+Helvetica*1 uf/DVPVZI+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (scaled.eps)%%CreationDate: 10/4/10 1:54 PM%AI9_DataStream%Gb!R&GCLeucS59G!PSX]+b;md$>i>1VO($'V@o7AC^:Tp\^'&]4J2SW>fN@!P^W8:h`\_A^uLPnfodXaZD5ffDqo3;]C4k<^W!E$%jhcnPKelUbSC,h_1qM:&f8!+D;JKO#;8l4$;/pG!V.j*K]i+5Ta'X.:F>i>?p#3.'lgtD!@^t3-1d?]7oj2iqMYHbg5Ph>7C^?(S%`r1@aXgdXs9)I<)HFos(H\8NA.'06j.$KqZo!mLiSW(<iog'1t.L3rX1WFi#CqT)Q0`Fh)pUe\q\>>gk(?qt"0D'Jp&+\'Aqh73P%U!=k#129bLq!LuF#qDeO`U;(Fp\&P_BT1ZYmUMd&^=9poS]44@Zr3`*.N;Er/:@$WZmP&CXsFl\Mo/[L'@,bsj;Fkhr_Hbu:GI7P%BXYOJhXH0il)`\d`$c'a([_5gh93o433Od,oR,HA#?T_>:_+@VjL+#S9CL4Or,03sJ<!7s5M>gr8VP@-i*@Fu$./!sTo[036'B;6%7-^PeDgamL":.d"HM=^hNEa#ljCHc.4O?Z#$g=W0<cT%)<XS#r'TjpjKD4>A"u_NuIti^<FO5JTGDkYo1.Jm.G)Hl.?3qFh#B"si%+T/FJs%*;i?Ul?S9,iiP9]_YZOegLs"[R,'JYl;Rd7/ePPlgs"JD*mjKAEXf7L_VO0;)JDDn,^l"B.fWs&9^sF#j$F2#+.O=K/=;%?WDfXWX;O%Pru2#iGJ-d/dJe)3V\l_6*4B%C?9L/3eODG:e0!-%Uq@+hUXN^V.ia6^;22HW`5WlV#kR9.e'63JNEHb4K[4V3I&/B%LZe=kH&&bo[$S.T?mJP,:%hg\dK)P*(A%nsTbd9WooqRk*l05RJKDWToUA^0]F0.>:\Y)VJkpnbkX6O\O5L]J%=b&cq?/ba2$n`1%"oX$KW)Kle)&jZ23MA1$,,#WsOuGtY8aAt&8_XMoBK7"V<eL=&>0oM/"A!&+8[$5l11K_hC-hmP#SX5"GG0NU$,<-WAGkDMZlD]r%'5Bi5i00*DR3dNh"@$:)Er]ChjprCedQU!?W(#pikX'Sj=q<24m36c]A2[bi#5\XJTQb3a6LWiLdVJCfq?NWhMp-,'+/'!d(I"N&%oI^hh1RmnETcCm6AiH3sCp("q"t_2YL!0_?(MlbOh+?o<eHoPK2eY2j&_8nhG,WBa'BnM*nsoV&/LR&[Aht<G65p!"NrP7;bIO1V%'8eP_jda<R`90=Ph/(s>q$1j03Q*nJO#!Ic*sZHkUEmLsWPR<2g<8su\E$@eQLI-69;J:Us!\;#_Z,dKR1/o9s,ql*BJrLUpg<SF%T-qDL?h1Bs+MS9fL:]_NPtL*Ds%E?VbN(V^9E'X>eLE$,J'#H/NVqpgaZmoB8)u[h*IO#i-,8+dne^spa](%KH<&,=l_Qq^=t8%&%q.dU7Y@a'$!d.+XoX'@qd9jFXr[R[r)AuFNPmYOck[.@ZDcW\a^i9'Q6\!X42&)<+:,NUVWg&,O.!Ykiahon__78tn^hkYZs+U06%l;U<X!'8?';PBlup`,%KhjX3sH.uR[?cC[?W:pQb*`4Os@jRA>19#t30%;C^SElSYdGC)g[oY`B6d:.Y=_kiuHaf$Z$SmmA6<9d)%MVfWV-?[rs4C7Y#J=)\m1Q@Z_>!R:b>9bEsA$/S"Z'o>g$KQEF7c:Nm_)F3C"8C7#a&&#Y<3p,Re?ZJGI6sNkbbKd^1!b'_nZe,b%Dn2=W]d-D]p0K^e!1NNQ_1/8/Zu:4Z@=_`B`^(oH0/=RMW^Ae4Q\aBNS3.Z,#)Vk'V3O[93LSp/D-<WNp^K.(j9^O!>Dd*#6_tY^%D4h?>(B(;MW3^,;0&cKBs7(RWHc&NKd*$*LD7o+"ag.c#)Ne[B7!!q\:MC8*E^F\3;(G-EEsjC\@5XV0L$)X1e`TbG1sB'JJb]RT%:@SU>3HXI8IZ)Q"7k$qg&\*KZ1?O/-qC7LW+!nr$"?2XL-B*UIUo!uNHDZMe(G[*Rn/S)4?j1!3fXktLNDWQ/']T'\heN?!QWf>k%UfZW,.ocn2>3X2pnoDouAVcS$&Mk[KCR`MKLKRABTKp4ig#<:.[=Q,JSn9k:GPK.eKT6aq-`ch30Ni1MQO,k6L/jhPLou_^m]$aI%KIW0'"aJuH6?D]JWu=.18RhB7?r6E1Ck,.Y2j$c"9cN743)OOPo,=]?'VAm]bTgH8OKi1h"KE?f8/siL1G-tQ7T.=3\L+slK6B&.%F'R((ng9TaR;K#n.Vkk8_O023I*EPWfiU,*jb+uA$0`HJ2.9f.3`J\4ku]F`H,e]ps"N'S8;fJ+3@.7&3m[*rIp)'kBN_*?<?k:!%DPrUPnXIFr6+KAu-%HMMAsm2H.oDSq/#)C7XhGZ"j2cUVo8@9e<nLs$q'od(>]Xen+WlYL\8a^[^?OClC;=D@K3Vi+QELWuUZJ4F%B?UY1$l7]rH9tZ^p6]A+[6;7lE*=uDN'dn_b]B/r?q(G2XbJ+8`aoEi3@[tP]I^3GI"c!,J^"BUf3iIB\/*6`B@U'KXr)PZ14@Dq%]k+Pq>]8V&3dU#WXB<q,-4]md332:g1]>Nd[W-1>nUPA5Qj\#o8]$lj1CqZp%%dVA&$Kj/(gG1o<p?>_MuOHX2;8J>=_cWh5]opQ%:]?LhUN@eC[]%7#[;)c^,L*_n,VkWtJjq'6mp[4^60Da!O@nRB[i;88_XqE$r0gan'D4/U44pN*F>HRj9i_C)_d$YVV+!Jc;/^$9%a)jc,!o(rK"B\f^fi"slHDJ1Oj(,Vr/(W$ej7:$$6!J.u0$t)3XA6d0<&!ACK``pieh2mld4DfJ6aT\#b[FP3Tg@CK<.>8jCY43N%"AV,^O\<@#"AZ@l-0\i&fBcNYo5Po.n4dElOHPBs6nT/;c#jk@qm5#C4mo)M52kBIeP*A>NWdH5ckWS*Rf=aY#oR%G;nlu+D9k.@%V<7K1^9(.jQVu)?`>Xprn;BjQ4==^-WE:t#F$$Zm/LE7DCu$Ab:SPKQPrXo1pS<s`Y17B.f_]gOD>Y0u-5Zm`:'k;>D1^)#m,KV$%\$K%pAPf$`mYutY;OK/S>)2(a]&</kqF,fmppjg3j12-DH(M3[XVoB)Wjbl4_D4re&cJ7m"'c10BaZckK^(.bX_+SaN7!SBCBA>Y%L-3p"0n.%?_#-*R`mtgsSSR@Wb>"4/et6@]&5$\R'UcX$T"n$R2@)+4c;tVQX3eV,\nX]Mh%o?EP&HWB(Mjcrfad,sT\&GAP@qmZ%r8^0dNVfFHOK,.la1[U!Cj4buH<A@ehZo-jFP,eNQWe6SJ=[1uV#bn4Xu,fP]@1JiCQ7J$Uo.!Xm7p;MT<`4*oTer9K2cPmB^&!m%4_TkjhE(MJkm"=YhJZf[9a4kCDhc\$GuYYeeW!Yb"FQ]gBa](;7\).9+%l8uh&`QM'C,:M\inK+0r[2\<QDae-p9KR[MnW'qB4T\%%Fk&m'@Am)*9i(coO=aX@;e:,3pq+^;7bX%!!W3@C%TDHUYC+^+=[h>U]?"t8iM+qhh1Y"a!a(h1g9`WA+5m5D(s>5]"Ls6InQ,C%l-j(=1&M:p7K(MVpsnemGpW1Y\)'i/NNL/C><V\h2e]nh#ZSF:_tU@SYW;-e%p#BTasm&QYs*h9[X.u<VY,G.S]2KFMIor%g$#(F%N47Y)4Z'\BB"X2P;!VK%;+H*TnR$q^HDf6[6dLPd7T3*LaC(7rA>=WhkoS'2D@8<NXaf:oGTn@FA"`/nJVemHE`1P)s3l]/@M$eW%q47'CD9sCM=rRuu\>>QkN-=5g(gJKfej^[WdfX#RpCX!'$RQ-#CX-RrNM15H&H>!q7j#G7&5A9`\g0tsRde!YAk($Y>`FhWT9Sf&%drjQHZqi0BP"MVR4P&t";WEYa\.ZV_O[gu?WSt(P(>^A?n^V:_@(m.n;Q\?b$pe!aE-*N,1%)b7#32m^@m!)*f^%gpl"1%2(V6^,%G`V4-oAsrhV&.#skTPe/_.'FqD>#+)W#0tA!e5k7T_gQ!:@ef<T]GYk!JFu*!u!;pHE[2,n%KjSQZFqDiNShRdtee9pUJU:5B?"3%pC6Z0kdS?9d!o:$#tV`1,76Y%E^9n!6]=3D2`e)7gKPS=j9nHYV>GmOCYV<eTT((S5bK:i"YG0!V8"t++^*!c&_@-6KOla-DY2<a%s3aq]Klg>`N#H+ncHqu:3:).em^jN@1(mRSTXjrInb_X[f6L,T^GL1jF?N91pl&m4L'@d4>=']cGZ&cMl\s5dh*Gu7hs\;P68;0%%n6'8n&MA8=?Oc%(>"3sqaW%2NW;VcPb#44B5OJjHEWDe*n);aI?UurHQY?L#FtmlqFFQOl9o.C=KZf#<n0<>6lZJ0[R3*<kUrBhX%lMl(d35[Ck:V2;.G"f8p'iSg#qQIegC:dt@&-&,m<uPb;_+Sj]l%Hk2\UfT"RfHU)dhq<HIJf<-%59@gB=EY'Ho;<XB-;Jg*W=tV%;CT?XTiLcphV_$L)_S78s3WpA^<fEG">*4(S&V,i"WE+%8^%t0&BrIjN4lDY`/B@'4rShi2g=mka#,LO9]JmCgDGT`\H*>]&":7(%Ss`"[.5QKd610Z*Df*a'->MTJ`))JC,AA5l+*NcMK7AQ4W(Ged6Bs`KI-KU#."0MB63<N;Q,9H_s7[(_S!:e!^X8)Eo]6l=qG0'a%4q?I79&UO8]fjF/DUD?XqQV(K,@UV,r]8sGX30<cX8X-HRD4A4qfgELrXRZ[ha(KA4(u%:Ji4kP*OPCp62Pl%<9EX?WQa7^;OP9E%V)!Nj8nJ!^PfinE.@']j;C_QfUf@'V8?(t5O]'lI,Gh^Gc_],S.W(,+UIQEEjM+L_m6&>XN=H%L7WrJSf&DhGcZOJ>6f>&nd?,l:%)fbQiE_GSI-4N>N,d4OdkcASC@B_(51QE#+O_hHii!Rrc1U9Ci&RuEgr-u'j!O<EN!2j[Fq.F61iAo/3UX=a%D<rB^%"=Dt\&Uud%]pA*]E'53<pT)b3O4P;Fd@gG!*pLR%RO"hHBeX5u^B$%opd2+F8%[4gkZq(V$)dM0AW3PV1&;?V00G4GGDFNE1^:j?`#fd?n<06@%rmU(i=^<Et]%$$ihBLK`989<Ns%B>DA<n9e0V)PA;f;i5%',fo]D[%mj,@,$5i9rL\Bm_n\.el?'5Pp.ph-CUlq*%!rGOW$4*m!F%mlRQLRi&j6:LI4YWdf:`6hd&0iMcMDG9tq7Rtnsk"4S)go+6f`SW82i02PmPMjj5:#;.%2rTCq?2?(d80^Q09s4_+iX;/g]'^9\P%d;eX@J(h$P8!"=[(&tEBQ8LOb;t:g@?@D#KS.MK#XQJF-(Ruo5e"qNrZ/K'Y#Wig@V`2ACo]Go*mLAGN\_$H:`bTLG["0J#D+)\5%#gt7#49#I758JM\^%%bpj.gMkqU1E?W5%/A07D>`+\cY$G%`\?A$JI.%mafo:`7#qJ#p-5j0(.$_?RYP=5A$5]ucq4p167#3&klA%A=/r'UCY4S"+@,/_VF(4(gGqm(rC52@;(Vln1016i,BJp$<`2lK@7IL51YK2iU[7A!k/+6H^'2\H%Q(_,.k9B*eiLnc8\d',nods%nYhKuG_==RZYGd9$,"b)N*^jj5qC`Do7=b6C-NrV,#fKj)Vni:JO['C)`=>F$4knkUB^o.!ETt`<ll`npUZ64hRDbq?jFn%i7hA/%VJI.V4:MMpki#25hbgo7C6'::m7r$#gDDdTdQX"X)Vt.-j'<1fp%iLgXFa\7<ks0Ze[!DPYK$(\d\^Hf2mUqJFP9])k1Rh`qX"tC%&1p2]*#RI/g(0OiURj2Mlk<V3pD\P!"N0rb\C9BB89UgPI4bg/Ohu#@2[qI@[=@i2#Z:K,d:m]l%X]S:JgNX6V1qKrnA/iL7t]YG%><cYbb0<\nO.$I]hnNS*cg>k'hWV9pd/-<ToYG<Xkko,\R_;![DqP@SS3H1s9TNbI^>0h8(N+G:Mg@`1:ZEV7"OX'!d4fm&/$V%C%D?W(-TcH?64.bVo6)p*)OhN0;<>J*J,hPZT>mP8"Bb0/i7+,4kO+2*/E:*#/X#hYr8+7S9QpYs4i5P%s`G9's^u.rjHehU]XY.P+%-.7ZM$VW*Lh4Im5Y*-9lqs$!59\VFjKeUboY;B_N%LHr19dSS+Z/0HL8[Sgl4GS&/!FjpDiAFf20Ao.Ql*nCRj%_OPU\_+.^km9Y%GXF);nr"7[rB[Fm`rr7^+?WcN;3-T_39/>kk()2rq5iR]Q`/>e8@2H86J_\6hVO"`aKO<QV4*C@^O!)>VSi+S[p`08*%U$BIANsN%DoLR;];#V0f,2617ph7iG?%OR?rsCF[@<^QWnH\^nN2?qe>'!>dh(!3E0-ndh*ERA)ZX[N&.0o$+Z]2B)uPbBQ+#8\.tS&M@1WGi%C14$f:ONAIpQ'[UqX7d`.AU/mD)N72i"lY$n^.d9%N;WMHXr(b9$'->HDl^')?d>'MfET[+#-<uqptA<2A#S*IB$cDk-Zo\H4Ulo%6mU5cLmnPC&>6<P+p-7/KLC@EU6s$4<eiN-Tt/\S.N>K":fh=QJD(dtAfHrCmO6WNoET<JXr$-lLFLTK#*?sd3Q/fLP('(iF\u.I%rO(2R\"=R@KaV5ESSGkD&OWK<PsS`pF^!=?4eglG6QEH;6SnJZ:)(b!R!q+:\moW,V3pi.r;,e,qfp*:k_&+$/g+RGVfLcHFcd$g%kc[N'6T0$:r"-KM3B__FL]:5!e.b.rX<3<U.SqtU?'!MFQ9ZY-gm\^pW)c3^Z0]%g$Sj38\^hDLY;)i>+lUuZ^]"^E#OR"kGb2bc%^#'Qq&oR$M8Qr^-rjk[sfLZ@6YR_k<@#&=Ge2G>NQ&i]W8i:kf?d2E<Ig!+,\^n"<ki`G@D`s/HO]:UiR_M!42m1Wr%_YDjlAXF;%_c,X-n-gHcaJTL`p3mD%J-g"h-51Z>)A:(O_so8CQ0Knj48M0fa&CF#[_Y#pXO>YVdA$Q"=2.&,,MfWj?)Jp"r,8ed3tFGEs,TVW%Z6qfRAY06$/h6HfqAPOF-F\`!,Y*`akE=3X2a+Ma>[cjDF^1UtT#;.SH/4s@akAK;2?O6g>eADN18bkrq/*N-.D0OXhnV<O@Pu&2%in@[(Ao%@n[[-J6(B9B=7H/"Nq\[o0?,F#XdRB;^I.s!>:i6!\mN^2Tl`n)h29<?L%!=ftn?*'EHt/s6On,1>$;";OKJ_)lOcH5l%h$msB$BNLi#8BL'8>%,VB?rnY-l5O,d%uZCrdH"peR<J!eAPD]-(ii(ISEK"`:7SOqdZG=2^Pg#USo(AIMgu3K6;>6E`B3UBtL!a%Ms$RhlC2n)ANWs*S*.>C8F1eJ.?Zg-]aI7RM.Z$(P#U_387H3V,,I6e@Mi*';MkFp%$fd+C.S"RZ[M\UV3VL(+nmeeolFX1V;BDQ%W)AO<Q1ggBb$_I(kjEVsJ%_.TNdm9cafbOYMQUm@f7iL!CL!o@p)Y::ePa+S&ZA@OoO+MFq&N%Ur7Zes7jH.=eii:+lGc7<[PplH%_-KYrdNXOMc$kmd6+u";a#EjnaTl1[ac5mIrUt99NVel2&$t0WgI:"#"naM_*>[qr9-pIk/P3'U)0b,*[qtOfHnQVdKlLR;2mUX6%LqjdLeXQ6N2tV1#KAO;BZAp"9#D;^.cb\Z<fr:4]>f>"Q6Ye\coWJ+R\c"K[3[0!"0CQFqbpgEU&LXBJ.%ku/4J`]M(p+838NFM0%eaFJ<+WW1!jiVI3pU5P3]@Rm6-u/'`-@VFdDk8"3,$h-3AR(?ip%%(%'@K\kU!5/AFU.G2B*)`6Stu5;ab;P!h8mUAI.2OJLidi:%\\q$i/+!I?IVrH*@&.IF^XgW(H8Bd_D]Jl,\:%%\GNsTHN[(?f*_2*lOAS0((kL"6<\-eJfrsSQ)q*ocj%&jl"mJc,Q`i'aG[*YD%"R4D/bIJS?]d5PErnr`W,P!g!r6WbA8.cVhp.$FCotC!?jFf@phC3?Q+O)JjIZK!@SWROPm\Td=`YlYQeCTENQPRi9<.?kNQ0Q'V%JLf11j&:BXJeYFc[(<XAA+?HQJPU0Zk\'bg![5h_X\?(,qlE\kGAAo@dd6_k`As7^#]8tfZYo'ocRnBp?W.!iWi`1GTATH<Grt&>%<''l%dk+*F(5fP>>^Ld>6i&(!G"s]\OWL\'4A6pA`"D7QZ'n0fl.4I]h99<I"mLG)]%k&V]-&,T/rk,Do,MHm.\OJ@7Vu5&Qhj;M%_[YkEFT&SPjc&h&>7!a%A!)sla1gE3>q`f6]d^qO(Yt1]V4YlS-]So676l4*YQ'J:=(@7]+(#hE?'0RO4"COg80>:f9R_:;AXrXD%RTSdW,+`mEqP)id>`gYo4ftSA;HUn+!>-1Xl=Z`>1gsm_;e7>]:tTG*Ur@8Q9H)+1CPqa_>I>R_7DGJd?NZ6f=kS]"R9,i`7'S\N%!Rdd7;_QVIe+W;l6Fnt[p9]"kQRL;0FomY]=VO?%V.[Y%b2]FF@$XDLUg!/c%S0M6UkA211pWjrnok@RI;D1VP!?X'6dT_oLMI[$%$^V*bk8:20I<BWW,#q+gLf,*J!NBVql*^BWlaFC0MNAlI6;]7a#D633Xf?#@QDY<`gOF9oW]'V'S=\//$n5StNpGFjoI^YZT1ZMN%<g#VZYV"$g4+$^VK\=&I$2C:eb@cm6Xd>p^e)O!^SNjMZ9KLHMV;0rl*In'/IsQ)D!He%5P[`([8$2.Wp>pSgeFi'6PZ6;0[X2ZI%hWq6?2lG;\Q-lDnpWD.el-7Z0P/l&,6]=7;;s\,bU[%jPcg6(srTW?Tm*t8KUY&KrF6ii!e,,?sq@kOM>?gMk1Y6CO%uSJuWOFDP%Ve%HDEIW;?V=m#"-D,`'f3R8d0)'_=Y"p:cM+X'sI3.#h(0N]TqIIoZXg0US8C]BFVhklEW9WnprOgE)7\9?CP;8??9&dBip+;b-%ZfA3dBstKr=oFR8jn-A`-sBp+%kam:M2TQo>%Do;^?qNZUdlr#qX$Y`KiWh[.Xht\=Boi"R2=?>c.=qD!Xglm)Jl%8jQ9i9=kPoA%UD+Y"?Jh:[IGJ(+=0Ni>bai5)rf.BPoPpS:Jo']+0fF1d1#=gYOJ:9u-sP8NMO*P+dd"(F;Io.Tcf:'=8FIUiOG9L*Y7($;lI8mM%mO\@ME^dRFs-e7H89[->dZ$d;,;n'Nbf,`9i3TL/+Di\`063l+Q2ED0VQ'r:p*1X5^@,0cJi6@1r$_9hN-(cM8@]q`[Y"t9g`fi1%07;S7pGI$dm"'8&.Hc^*/-cP\XGt]."<'kL%I(Dbd_a,b[6%:57naO"Tj<958`SPD<OPpedt-e`(!3EroYjd.H<Dhc!^O\])OD5t%MTV#>m#8PCXe[OcDs8(0rEJ"DD+.U\QM,k`Wms\LQ)l9cO360k`A$ta(CHFuF)F<4bp%U.P^C:]dL,WK$KcgIA%%1?K`:6FrEKPR%GJ)'0&-^eIk5#*^:S1XtfV,_j(OORr2B([!>Q%[iP3UfGOi8iGL@0GQ.OI@uDK%W7Ti\#YJb3K*3ic!s51G5^Wn^][feWm^;LWD^%(8W+pj.:%M^tpGuWXh63[4!E+j<T-.MuFXKY#Bo4gTfJ+L#eJ-,15pNj0m*IEi8o99C%@'If4m0(`_lcE?2l\"[7O@is5L-,FW'7%raDGIfiN\9$o!-nr_("LR\-:P)mR&+%6nbXRd<GZ3)0.=>^IIYc8)`Y]NS*bU@Y'@<fLAK*f<]^q6ru]IWEOAME2*:g;DLA=nL4F%U;uJG!7A\9EM3&3EaU)ad:BTIdEb_66n,IkXp13e^83]!Y'_:o+PD461hc'^YCJ)eeWe*oq9W8\]5T(dk1M-9h:fa4?/%"232Z#"%#H;(ibF"&i)NsG+*9Q*.bkm1=FS$TNHgRN<2KOX-QFjjjdg\2l8XO)a3-QAiktPKoF!XI-)O)p^X)p?k-dCdnRWY,[KUc[q?Rc$)%%]0A@jgrIKD?=l"o-g@%oi_&bCsB"9[Z%#Uo<Y\q[hjror'@/%hJ7(t(6+%2"omQ"+,3"J\?TnWUMc9I,-W(Z+'k^[m<Vdm0'dsr%iE1)jYj%3T@ahK6Gmk#,'+I5uoW_[d/M+-iC$j'Dj^3/RZ@r2S_/r.THp7u`mq'U-7:S!m5/*uc:ZK!!:V2.r/?/$T=qqi[pEo,4%DG<H\he5fI7QIGiX@]>Q#1$Jncd4:<,Nu&R"Wfm&=C2,hTGOl9f=WIuBHgi`M.RM.A_oqS^sZ-_Er[N2P@F)F.Ak=Q@d5KYUWYE`%BLs]L9nr!2T%$qXe7R9lQ1AcbO;gTJ\XO5WHna97"BM_^\FP'o]Z*anQ)!^m^H#m^PjrXo,BZIQD_imXJ3(je;9+MOW%WJWq'r&B%i2@Ke^-);^E@=@V-8G$1)\S#p;g_\+84+r>V7@b(DWsY)+&94IL5go7/mk7SX`"`^Xs^Kr',DCnYiKZAWWU2tpD$P(;BCV^UIc$,%3Al9Q4.4ZS%c\fug_f*lq!GZ44#Vpf9;b8(8H9l-+WAGY%jCup8$V0tm!X)PX4u6ma2'&[CQa*oGoV;.E3aW;\nL[3GXISWQEs=9%l##PZelsn_b_D1:9o`icBL92&C&C@L$&Fk7)mMd8pKK.b`3QVWHnaV4Na&82C&P<UXqE#(,_!G1"#GkIGY"2L+V]'frT[98[cD-Z%"uRk?Yl5]Z6P@0\qfQ;thlU/l=Zbfp[7kBPpBL>OIN;OWjiRHbBHE,W-Df(_:t03dS3*NpX0-'A\)0]C@g@6oGXfFY,0O1Fp=%LB%BD$hC/:'*p4T%'[;#j]l^':o!S[Rtfoaf<IZk!5>9"XT9p/PRA7b[MGq(bL\`SR2Z$XrSG8q7ck$F15;XqbU4Qi<\(%J5cT/e*Z[%Y.Y02]k=q(j?pZP:#7$WPL80j/:(5#JDuWGH*pT,oJ&SIj8ob!7@+b]0f*sr\u[]1!pR"p<CNX!cc+j4V3CMA;o_0,-S-%j'L(sm%)Q&J&j<L]GnQ^@CG6"]]J:PSqlD/S/1)YUZNb4M+[hj:Q_I"X:qr2&6-=66OBk`-.2C,3Q1'&d-s"UWo=u]hM'c]gol3GADnkHjd%d2cQZ%cKgkb\hFQk)EO9:%0Y1dSo!h,H(tZ5Y4_DW:`36h$(Sp4Z7^np@qmW#`&Tm6qU>TFHgHt.q.tP9/KU+(Pr@V1AmYf(U%9U%WA)F'lF@8#_#pndX)Sb;U,fA0!:26lX$jSZ&oAE@8#$hrU3Z>o^mSK&60.P%3X'EG4SE)9*4&$hD8#l*]/WQsJ/AAaL<Rh4B%f:f%p:0ca<dBNLS:'A+fCR^Hh7`,q1YPPBpXRJq3#s<?PE65BIDdZ<k.Y+><6-h_N.=W<1^_H3H['KdHcY&Z:j0R]"Z6Gs$J%4\4c=&n%Jg(Ca&.NeD35H&==77Plit6UuVimN7@I7NA^1ul(I4^-9oJu118<0NZ\+hFDOPG.8@.%g(.1VXF$Q`+&kuIp`YD[!7lnfCC`_!q;%Hkf"Y3O;A:NrC#!6e!%#[4peo#&o1YpJ+Nn9,tj;IPnJBR(#;*o$q^(mbGCe[B,)AY3;[^iUak&W@Wd!-&'EKfDaZZUMeCh846?r%L32=$X!"dQhATs59c&BW=:?DLK5`aNp?Cs3\&DNt:b2m1HPr/t-9i"Bn[[9>.Bl.]a`Yk'TmXcBbgXan8Su[?`l3"-H6(]UVUscp%b7^nAXp\/SjmJ!7'"MV_pKr\NDEoTCnt.CUF,[Or^b!l7T#S+(=mlbm5!59pLZERpaIg[V%!r\_0p67Ki*3ZRE>K>liX+BtIFF,d%S)h5OJ/]5B7X2nP;PkR_nkn8sZ7tC`jkoL`o$sB*l\h>+W-hP`4Dd:R*'3Ns3fmkCaJ&4NTYkDdbTVbe#q=2n1V>k,k0SBdd'8PZ%=``ecou/Y<NdF</bG"OQT]=^WZfTPZB@+2"$Vm3ZQgi4lj4T$jjj9F9e=+Ft:2ZIWLX%u6:<9Z/.>Q27_5qnL=&,#JkFFnoFahYe%AG8cjc+^s?CQ<sicNLg`gNBb'Ji=#-9?#Ye?Si(6p[l7pCQs_hf,$,B_!:1WU6CY9[q]49V]NF-"eRcNTQKIe(OCirZf>@??o$A'%G;;4I5md6Xe`O6-^42I,5'-]2lX@$s4a<l]$;L*:HsH+8#58:9;@q0>#Ftpnb^%2W"e;g)LOIbg))60a-\9EY&'QsH`6_o\eflo^%NEOm$XKF4s-oIX"9caXNMhHao\&97!'2>PeV5G,mh'Ud_EQ`^B9D1Mjra6ZT5Se.,73Ft9%@E3A)iAqD1P]A?g6II`h9RDY.$Nsl%B(&,W0=R&_onei*4]4s\Q#@$PRq;/$[QPh#a'Q4<-4qJ&]Gu\E]Dql:0Q:#>-JYjm]t/@DndCliB&rLXWEm@3p`(K:c1ZVU4><E*%(RV]ehB^]YT%:&)f$Uiu:6o(^/UG@No>(g#)eJ_N3lJf=:+io"0E[?-Eupr\:<Wj)!M=sO>5)Y2k*7,X@c2k@o80K>N+/A=1D@3t%)#H<PMKp7si(l(cj*.m'D$b>_b-t/1C*Ru+![u]rX`70LGOo&8k0&%&!!#21M83;?Ft;S`+7:c=I_0[1pK!&l=*-+*Z0/3Gm5^".%X4Q&9K^[;:gcuFX-WA<HJ#]%-#]1#6o>Jm3O#(!*MOP^V3tfGoPnr#.Rk.')N9`8QE,M*PFNF@#'8pjAnVs%28;H$H?i,:TZ">f@%FXHQQkhZW3*p8nFA2[Lp1SSWBF48/N7o>nSec;2/6m(0Ud(SJ2AsZV>C6B,o'Tc)?;#p?NAI:DCY4a79aET#;JOd^j<sG1]p*TSi%ZXjmCB[gQ6);"(oCKfM(F>A2Re0XK<D*>Mk^b;-0Qq'VO.P<\MlqA+ip2r'c8&cSPO#Uct4rtTk20icq#bnMTTH4t[=h(?&q8>>j%HXmV"*:+Znd!Ru3Tg8F!Z[-.K;'8PUo(3n<l8U0S=D)ZY<:f,&aI7mqI2-mcV(k_-n5kp<2Rb[-A.U$1iQP%;<k3]nEToIX`WJ8E%:tK/B]*:(E/Ia:>d%5IXQk4Hr93tnc:uIFb?JWigL@l'##(HDn4\ci4@;TQ,qDpon3r(58Qfsa$:q`76:?oeL$_?Nm0I%f[hYD+k%5C_UY\r$":I*Nh';a)2jriF?,T+;_p6?T_a3$-[!B#MsD.gQ'C.U-lOHoSU+Onn.WOk_m27bkZJi@I1FWAQg,HoU^H!Q*PJf6fQa%f@h-X3F+h=IFm(.?YjB+;[FTBM!5Lhq-q0M,-M'd7#!6<FH)-i$5=0<bPTo)RFCIf#UKOA6MeQ=4k:hP%PNAha\aDQXYH(8kqfjM%NecG,$HW_PZQUUG\N@b-dg6R!RSRTe\sJrs;;&m(kihE5"GgduPS*#Oc5S-+#A:s?M*dC\'7/bBc+o((g6`1Ze&Gf*:HGbS"cD2O%^_kAXChU.]$(RF:&4:HDV1YC_KAcsU%_!t^FpWeP\So+VL67t=dOY)`@-]BEOQ:QFF1=W2h5B(an$uu)ap[Vl*><(]apWc`8:tKL%apXW*9c$37h(e/+ZAd;&3G##CbU"M,Akj5C2fm,4]a9,r[%C!l&rPD(JMmZ_pdZl<f[+XI1rY&=YIk[UJ8FG3$AYCM-Hju.+r(Sd%baFi>9SL@uqZq/<eP)r]!WA<?VS]mtQ#fZRF'JD%RgLO7SfK@PH^[pD:sc`-MWG[`%oH_!&`-qbY,#Yk&`2;7+^8p>-s?Y=B2"si%L[g3.K^:SBK+'-T@4J6jh37PpHqji+:!5&/!V-aaQ98SFKRu*3i/DV]*1-u&o.Sl;k;]$s(uPcWL[UA5mZ6O%o(o=$=Y$IIOgP:n%(-r-u"hrg/IH$U_Ylg>M+2E<aeaj,q^kJ<4OtiWQQ6t(!VS'7O:lZ#RSi((-AJUN)-:Xr&;SX'6]oq2LCZ9^r+\cc$mm!>(dbD%c%>4$[GA@J1;a_nl+1@3jm/kil>jqKMZ<kIUN[,mR2<PB$+)S&tiI=*+t(Q-cX0XtlOkc$GmmEQFq,4DC1L7M;qU_=Q?\](E:0BL;-%g!(n^DO>G/.nt1[^0J8oKtCk[gi<^"Sf)_EUD6k+KAk?]`"cuskAfn;1o@iRrVZFP+,G1'BC!`=e$7cYpoE^b&)[*X<4b<dXdT-\%o8YGoOEC+kZ7)Hk9,%3./>pj]qUkb4U];RIAe!="LZlHe4]>qG4;tH>l7Qs%ER,iUV-e]GFLa6M)KSod.`#&]MUhZ#BqFQ93@F8n%BHB+S"n]Z3rF;c.dV4-[al%3#l^QlH3B&VHWiKFiIu.G"riQ!e"!>%&^3:"hDcGZ9;G33)?3UB+j+93]n-(i0/En#>)DIZ+a4!,J%Cq9UqQoS^+3T\\WA)QO4:$:$6:itRIFS:Gg'>aAm-cr6T3qI@RD/=T?b?VC<SB(b[R;Y!Sh[(ItaefHO,0uiTa.($7Al#W'<7u@g%IMNP$43q_(Vd)9\fUgd%l'rGT;f9HWZK[m"koA#LQmnNM8[NLE1TtUUV^CBqAZj^.*h(LsZg"!E;s]:-CGqa4q"`f$2/+t>'<'#s%Gl=r4S3VA\=&,/Xk<cF6B@G+b@_R_n2oXpA:$8mCic#D*N7i;J\TA=*Us>?%kEJX&HtLt]flUi_-Fn4^q3=lhdl@GJO&)?*S'FEa%kHr4#4KiQ^-^D]:pSZ<61D,7WS-D!-B%e3e3&)CJ31M^mc8iH<)O6kF%F#*Mni2"kR16r[D?(S[3GfsG2\KL:L4$o4@l7V*(UXW@%D[r)TF1nd&cOVh(qs'\lZ!;H@;570(VA%(m"LTGH*:oR"*s(eV%G7VpU;5V2lg8_Dg"EQ#-4RcjPVWh2"_MB8ZT=dW8"#-h7Ae`Z%g)Sdas+-sq^\FQHSiQ>0];_R!-G&?"c=Al!r*])?6rs]TGL>6jfA$],=8F5kc#>!hM]DH'k\fNumd/BM0>hatC[N_p7H]TsCkS5K%RQJi`*%:_6a>J1jSdTaUc&J@XS1CD'qR@Gr)V"'G<IQ5bY%Rg3qp7D)3*7dDl<8QN0.PZ:3Lhkud#pr_RT*hMPlWP:RkFD9>UptQ%/k?2JDgnB3kg8LQ<&Xt!0(58PT?)K!PZe"i)7a5"-Ybd@9Er[,k8nPe0bN<Rk"s;W)@?M7?Sp9cf9E>,2=o3CYW5hJA)*O.C\'"Y%KX3^:CRh`',^e(g4F38$'\VRY-ck+SJKh]+QqtSiBB37R*"2KRO5!aMgWMUK$Aa5W7Dknf1't9p2bgfFZF-dDhim)DhlCB>KDdK9%aM]TTDspg\ERu&mle]i'-01@0T3_cKfGo?$$BOFh0H>NG\u3`,p\DqO1SbLcEFiUV4,0ni-8Ki7<b"*FT+Z+$]aD+'<fL>DI^R`:%bcqIP)'GM;Ej`Z[f\p+ULoc,#]S\WKK6lHMGMLH)fHp1C3?fY$)[<t60$q;^1Z*/l1EW1V\=52Dd7't*r2.,@nqilSb+"q2XZ,%[%E`6<6)t(@eiu$DgDRea$]fP%j2fiF[c[IncE'/kn@[EFM1XWb.E1Pc`C6$cRUB#-(`7fub*of(Uk2TWq`*0osXtZB6]ic0Z)ZA@N%0=8_Tcm]YG:=/o^-^U.PVhD7sRk_Z`gk^]l-t#@L(0!=22FP6i+1]QLT/7l6.>tGRJR7^0FT7<(=b7H,'V!_%jp2Y[gSaRGROOPl%QX,HfniDShlC,YErF>Wr`'A$1!LmVj&Y`?8MB(7=mG44"0slXH31\b;/B@F+)"bD[+=m$=bh#"8qAAM[VmfeCr45C6b_DTW0i3mG%q0!If(EH&%\XWE+7jAKZ;E\[=EJ=;Rgm1'<f!Bjd.r*KXf0*S@3Q<LfPo[_WO+n/>W9OV%8s.ZAFW%+@6!E/7,l-6,N3$?OEq&H)%kOsV(OgW*iXH^HtbgWD$ZhGn,O*R)9\Pk6WI(7$r=q^)q4BTB2Wl@2<9>/'Le=#`5MnLa6J%Ap,kBZ+Ce!erSAkBljk>#<Ejqa;p%lM@hk'&JfU.?V`l4`$7^44;s@_4?/,RY80FSJsf'V5?D1U)pjp5Batl"O3o[M=o/Z>7t99@s-sH[Eju0^6nc^T)49Kr%>N(Q0OEW%DWun;Pns<l?ba26r\Zg"mRfoLUk@Y'_'2BAmX5btn/`?d=)J.9HM)B0feTG?RVNa'a[TWI8XSP(CJD(jl(T5phSSMh`9cZ2WAte[%In#-'')HEC3Z6tPGEXc)dYZ3rf=RYMcQ,c&n@F;2D#)8[)oR0&Zeo6CpC?_4n;t0Cs6Km&jiaVp`lVV$bJ$jA_6U25/<K+6AiX)h%#qr]rF(+^s&p75JB0el2I"uTN@;]4^Se9_@AYg\"U([cC^QT$+9?sMd7[-rhkWt:/V#iJF\:`P:;=579#AOn-:%7ii:Ilj[PSW/]%3k]RJBu2'smZLkV\FTAK#J;kS0'SrE*S:U$Rp.f!;pEG^FZA>6J,t&,[P1S1*-Z[CF#]$M0%oE:Xf;8/OIm<,DY?*B\i()F1?8EZ%"2XRe`aFH+S1j#?[/_mZ;UK$1r"pJD,AS&iM_jZBopP81?kT?AE9hfucU9[3h8pQ$F;f+K?#N9DF,u`q3<Ii9cn8Xi]'Ef"6!\X<%=41MNfE2C_]=t0q"O]f50:rFBH[7&6,eG-Ykp,2Y.D\p`rJk3O+NJ5kMa]as1tk-4N>qWD`m%45aa7eI?t]V$nl&b]16p=c.A=b*%]eAB5@/Oj<q_J9E\^u('3.K-oR,9JVY+VllaLel\AYr6!kOM:Hb\-*Z15bn`V_\q(F@Re=QnIa.*L_!Kl2!/H(1>K/5j*2Z>X1u2%URn1P9pGl!1^@u'J+@,/l8e-qJ[5?/joG85@cijX(j(ENF%$1D!P0fb[N%QY/0!It5lYQeEiSq'=b&eZ!!Crr0"Z&Y3InIo7U4i]%7=R'@0rI\?ghpYln"kCt]l:;`aqop>dH5&SPg=FrgE4%lc[.$Z?C16A1[\Ld^mirPI+Gfc5BA9Gdqr7Z^Qd('rlQ*2jg-ecEcR(@%HRA.M8I`,`lc1cbk&NAElb.`\Aoc/\CaenWI^>RS`UEJh-/(9P]mcPUG6.0<n\<[ok-L`_h<X6N2Ul""p%,oJ0-lMK/GK!dLFa>U%G;J+AkH1tX,)Bj@f?_7qGcRJ0Y30Nfp%+2V_YGj+\C]((<kfONQH$UehS&Kl!@6mBIbl*^=QXS+TD,I:Jb(C?me-1334%`mc>mm4%qlP<6`m@ERqM?(9p07KmbY#4tlf[YBE'JngZ?uO4or&3=rAi[!kIm3;aaJQCkIf,eYFbg6@EG#,5/'VWeTAqORH@g?O!Z"`emDSb%]@YC+<^2Yha5C*0^N?(eN^FIjM0[qCkC'D'e$r(mYFen32;H&bc[2&A?9]ftkFj90Au,[c(`)i>B=c^@H_X5qr%m0pa/SI%^JAnm%?dQFj&'rdjp\Hm:RDV0g]'3NcD^\rF*;Tg4q?;\`S\r-i-8r6el::NP3O,:4l,jZPV+h\siKu>V`P$`gmBW:Y2[p_SHi7R*`e3.6%kF;-,Q[A\DDtTUh5/&I_Bp/a:^XmD0X8&ch/19`,I]oA$$eKd,T4@$D'_hGu0?5EMf?[[G+fCgTI]oBk0#q2p-9JWWrEd7\nm86-%f?a=p^KL!b$Z9-pho@[&1-E+t0BB\\0j2ecpT8mqc;"mhYFkQkISLsZC$tZc^=CPL'q=2h5OVhTI*T80T(D#gX.O>`ge@J="nZ$E%Gd!b*8D6k2S0I-Qh<R"dkX"*QrO`k4OCRmlf?[YU'__<6]%>7t9%0nk[[iO0n+H;/Z*@ik:49=<G<E)U]6<Idr>[5OpRp0'p\K0=%jrsJ`fW@a5p%*&6cf1J^?9dc8?p910@<ij,]=J`$#ikb%@N(U"JIT*_fWjb61#s@"DbaN<>?k>Hd>.B-m9&e%#Go\$+XVf/&g8k=%Ah/5Zj7K]\U6,8\='1A3O)$]9Rg:LUkjocE]eUF@.cme5a1GG!g<F7S.n-EY=m]MmLa^6#j2?8A=AE[L%X&IdLEA$EmA-pXFfi(s%eK5n-Utt,,>WU#on"lfVT2"QpFdS=EelT0*`Uc"OQ<1h->LN1:pHuMUP/!jZrkXb>Zi+'m*`#!2V8lHu<dNV0lUih2k>CJTj!d//%S?/h$L8DrG@+\]?+,l,Qqr)#!r0C6A$=fOXq;+3fb,n'lYKB]g+,\&V/,IrYp!:g`V=#I3?WJr.-S$hd`PTLR6$"Vt=[--DqQZaW%&k4A/b+AT/>K\*?s$B)9W'f:n>%H!/9Lhn5a6-R\GP(Nbq5*V)7uJWRR3/:V+Q5N+9`-NJZ*@>O,Sh^2lL(tMEZFsbl"MP\l"abA%R6baagKRSSntn&,0)!Qp_no+UB9F1TTpLV\oGYH%Ee39senVtJKAf19*Qf.7-Q<^OiS)i5Am`oUM)ms$X[ehi-Y(^@a_3ffa)F!"%/\+&$H$jZPM6/WN6;^:Z4b/T9\5`&NZBegG!jZ[ZD4;&TQ)4c1j&1#RBJ]KuVgugfo[Q#AQ4@hNSeBRaFBjmomI):soBW+L*5=^+%*.=/"3m84-(h@U#/?TTFF"@,AKV)s.KX6"U`jZf?i7A!:&6u6A[n<rTd<_@:T1SmcP"NR:P[X#npX4oPp$Eg-k<[q<m[#Hk7Tu,+%>FCl+cpt&MM\Xoti[TF#f:Ij=m(lG[5=!EHd2%02F)7nK&fs2rT6AjK7hU:oU>IQBTr2lBoBoA*dn[io>@.b,q'2t<UXGno=W,Z"%V\5L(QVa$UY7^VVV#]j^,ZdGR"`[R75a<VkaEQ%XrA>op`[#[5PoZ]?CelsGYH^@sk7YjP)1AmMk:H_8DI7QcAGkF[WAldCV=`S-%*_D$],-Oq@GGcmK74f>*_Rf^\J#dtXl:?[ZG7'63@7hI&Qirf0HF6kG#jcij$*4:Yc5)oUm$5N*k,pV#Q."4RqFfopJ(QD[QF]#B%YE\VVl4]T-n`F[M'\unVM@@j"]2XcHp*,OhlOfaI%E,'A03!+d!b*H!TdNUL2&<@Hn2Ec5McK>Mr);DRVS>J:m,N>#hms#\(HqC#%)J(5qMN\DJ`;B(gT/":S.nBZ!M`BUC09V94?TJGmli"A9/oKObnD$97/&h"*@4ZfRBDX@H`]&PphB=-%//+5qUDRt;o;GtoNXM*=%+f8EBV*i,??CZu8gWDJSM*C?RR"399gke/Qd/`$!@f$h&$8eU6;2Uajm:7r&KdTdsC'RMZ&N!lCLLc\f+7S1q@EBa#gWIP?Tg3j9%CGQQ[Z6gY+#mAf[o]7bQaM-a4B"E;md?CdsOKu'FYf7d-6C$BtG7G)-q^Hi1Z>0"bNc-p8HPKdb&?`A?4c>%%F^k$GD(Ed5[BuAa%P'>g\MRon?I\b_B[n'Fq9@(?k#pV5F=]VZ)Q#kkrqY9#r;r1/=\b'lM[%kQ`EWnt:O;Y%1/&NC,b)>ht/gmhI'tG2f3P^&OQan/b%J`cYnF<G)6n+-Mgip5&7)W-/^je[-GN8;/Wp4AZCF!)K(f61$aP9\"PY??.[hqD%r:EG#0#H;3d.RI>'QdjI.jXKJ;;NVWbq_dU/%bES66al=%K)j_+lfS9>#oId2fX0mAOjB$MlV]cUL,l&f-d("b?<^]mNk%6b)da/tGdHf3UQ?;V":EZGPa)m!=Xgr_DJN#@6Z7rm^%Y[_MN2>OldUEQJgB2<mFhY-c'P;OWhTe*CMmN?!e^EXc=U04:31f3)=_%1$A4(k?s@7@Y6>]N>'NqSMVV4M"93O4'dUh.7gmiF'Z%8>SCRQenlHO8^QBkc_rFP2<qrb'fM<%X&L)lLNlraco>Y*:oC(%-^LfI9]bqN3b2u;HR9Q&4d5ol)&Q)llT_WUb:Ph&*;krUumOk%1m8WL84U-n9"_"OOm]KT3$H7eo"7@D62FWp8+bT8Sai:<Ng3[QkCE3g*R/+OF`5GGH8VP12QS'&;H:Aods!_=/uZ0dhYGl/gg216%HYZK<.kbZ5eCjG,b2<61=%e1`,LWt[,IO&5c1e.KdW53H=F#a:q_KIN("oXk#1<apUj+@0*_hY/T61g;^`9?OqL5iS]UYK3"@-_Z%'qGtOF/`$"PEeVf$)o)gjtW,\;Pgu!^*+N>E-!9kMT4b=c!QJF8P@!lofk3]3DrKsf@PYdgcjD^chulq*DU=glEG-7g1kc!ghQ(\%fUTbf3([JuVYODPb<jTik+qi@C.5a7<.0i>Bo>8nCgRGjp)fGH1Ph*oX63L8!&u&0#0QGXFBfWlU6OU\5#$sGcB`r0#D,91Hpo!P%*5i@LM".2F?uL<d1_;DYjO>V@/rRf`8tIGMO>X>dP'[N1Q86V27[\qD?$q9M0rQro^GST?V1)UL5]UI<F<g?CO*u?-`0PZA\8.V#%p4*p4bV"3p9I4[b`kH,A1@[l=0I+N([^#gS/u@m[&aZ8;Xtfga@GK_[j&1mZ)NM_Ka4.u0/*o&[85j<Vo86`cO)<cuXLG!8MQ-F#%:[4lW`\R;9+Y;s(dpjhTW\:UM#\U9A$:MBGW3;-c7@B>^?MW9#@O+4@&P7MV-U&W+U&b'^,_GUd_]ZflOU.mC[Tm3Y&i;LA0F?)G%KD)8<*P#Rk.8W9%]p4YK#bE;4n[X,gl(r1JVhBj[.,WhcRg2#b2R1:7:4c#KGe\'Vi79Xo/0=RB5*[2EVNM[I$,B!]#lknBi#o1L%;mq7LCQ1^)VWJ/-0Xc$A^^h*S)u*OmWCb4W\"'Q>qT-8XKO6jRnM/"Y1'-T,E"'hs+O7.cUiPX8/G\,3qs:I%!/)/=L]4@fk3Vou%\IJ6MJO\Ob'!Hp*]:fc2=:g?MN5k.G!+NS2h(sWWn<m7Ai<78@mDe=62DK:(Mcf2Y-l/1/c3=Xb`8)5JK=#iMf+dQ,4W$!<mQmY9%q'8Y4q:moB.gqRf94EEXh<BPpkLeV20IUMgk1JMQAE.G1d,h&",Z8H1D@@^&M%#/"FuN`pNE':lqegI+0Skc=f[[VY^O?A.;!65N%m>d]-)2\X]pt+s`fsMo2>EGWI"Dk5Om@JHp[i\,+2c!c(gESUhKt-APD&W]tX+p;)PW$+B;La^jh3>pr!T#4sYUV#?%#75!llIaS%O:??)^d"+TmJVRGq+t9ec5I..^c+mC-#*bXOfJuN#N'(<#'Q^l9"sl/f1P%.*8EMrqeC[ua3a4U]@.IR<A<m<Fa)E5lQlrTl\F0=%CMUKWZ[R+dcnb/_H0Tf1o/:!4B)h#(AKukS80m3q7M].3[pi7W&&-+KN=jXuFBl2XIoaBlCYo%e[+P5cIAa/_Sps,2D[:/.^/U3T%rKVL2AW,5(\<6/#i-DHJc*bg/SGZ3-WC(K9AWI65fk"aaOEQ0u.PJJ@]^mN;EL+qSO0Nh;H(aQ\N?O7ePY-G</JQ^_7mDX$imR4r%o=Ap/(_6.AJ-iN4[.1Q&RV-O5c*@shqBb)p7Uo2sX4ru9F0_oc%U?:3rd8R8Cp;naVitYg+R,Z@*mE\BHVI6NJ&,OuLC%LeCV,tB%b0'GC/e.m%]@DH-hJ';cH&8Whb/qeS)=KF2Z1kFHV>@T$<0u.KK601Z>UP[-[s73M]F$k89cd(=Y6&N"h'1^cC.[>Zhb1HI:.oP&%XGVHZPpQC8Z:T5foO%G2Z"VV>9Up;/#9&]*!SRW>a,$)"'J8D8_!^#+:58'Jl/h%jTe(@sH#me_4VW^e3/fu&<0``NL$D&fXuP,8%TH)uol_?S2r<4(q;9;Qf#p]Q'$0LZ@Xk6sAI:Tr0KC.@XDgp83ZidCt1'`0%`L)\1hPV"DhH;f">rau->LI^;J%koV)u@%9M]c1B%j=pAiF7X$T\UKei*g2XS1l;3B9=fqpqjR]8)j3ptYQi8^STEE!PCZ6%,8k5D_?q<)n5l#;k;;p#?eQ]01UClrUp7U)*??KY24DXa%?,IYFYl+p^2'd%OrER7IA`E!OOP%]](T\%%Knig6cj-V,-'C+sa)Z]$JTQ&k8Yn\T\E:`OL>,F5@>f5Rr-CP7ZP$"=+VVrJg?]^a%L*[BI%qF&(fd=FX,E8Lc]FN]B=Y.(YK4!G=4Fc%$;9/`*9i'a@"cEe!LY"pPe<f0Lh#)/GAFf'c\m![NYDG)=NG+-o8,)e'YQs'0%caSu9cdd$rn7U&Ep8-8rS_oR&"+BsT@\RLaPtP+QaWN]"kDVC=C.*2i26p%-/I7[afXLR.2adfpF0U>m&,TcB/(ENJ3:O">"U&:?%,"%k&&^\)p_b%R&YIN3Ai_H5?#brnaJH`@<$QQ/l!/AIE4ca::Z>tnW(=aJu17h2_PB68H_@NcQ>;,rRgfG$\,8UXPk2'LM[J="^%:0_%)[puP4E`pj49c=M(8`t\<g$Gs*MA'APWD9\EB:(HRo]4QFrD/dc5Ip9j9CYE:"m`sAQbX,EG?"-s?CPIrNCLa76dt*V\#aQe%Zn@r:dJQ,VfK`^6@GO_IiSf/=-h6.D=/lTOH8/i7#a7phChI&K)"'o6)gFuf<SjK"B,35O*q+Z3U+ts<a:!obWO6jqb&LnM@+A(k%f$j"TGo\)/55I9`;*e+T7^5%%YY4Bi!R#<&aeM7ib)!q0&iP:u),[',<;66#RZ3>[Jo$<LnQ/jSPZsf(]k4(XidFN^pcMhLYVi5B%ls>sF;M(2n,OuBT8NJ<cBLr0>m>$LR?X:o`PNZ5Z24WZ[dsF1RnT=B:OiCT>U.c&il*D5k2!EkU0d\-*]9Eb#oi8;ZZN.BmJO8G6%mcH";.P1PP1,QtGa-pf5IK2At<`3P9&:QpGDlf9N;@/,F84`!abl_emmMW`4M2H%oEO_.@=s"I9].6tUNEW2L7-dJFC)OnH/gF$>%r$\lK,Iq_R99"`S;[B'W8EGVrifrO]L?ui(SIE!U,2\\!Z8kZJN^.)L[_Dsj3Es#R.[GosPpFph@.tl5)07*r(6t>7A":\\UcB;-%?u;E9`.sge3Mc1i8.*.+-?A#Qipa)a+9`813&sVVo)oi;o]f2hl3Z>c0s"H_:A&C6Dp)VNOMr%<P*P=Xg4?:.68BOb;q3ES+Gp.2%Nfku;[AhYVpWg8lU+W(.'G/<cFX3&,[n1lQfaVFZGC!>M[\T?ih-X%L]D1_Yp,9!m7f6cO,Zi;_S1'Z&OKT8?pui*R>c/(WMOg/X%$Ed6Fho/8M7GLJ4i6/+0O$%?OJnl'oW38sihG:+Ld%GhE6=a>udja@l[naas$6inP3X*B0M'dfCVjpY%X[;)7>XKc/Cu]%LDk2LO%/ClF#cmdg\Vq%G$"kP0\-Ir/X"X\2-SHA$fYFsi.)*q'H,>nSt<cCp'6e0]J>-<G[CACC+LFf?M>7_:$FFh'%4h6u]4;n\:J^E>c%;W884GZmE`L6_oX727]A[K^3C,eZ>MGEA3&4J;e*;i(`7a*\#CRs6n#.NYNQfip_c/07=d[uZ',=Zino<DNYS.itLYhVu@p8q<+U%QsMn:[Ba_hom$iLRs=]ZoPNUH/meToq9V\qKVAJM`6@4lSTNpA+D)B"r,bk'5SObWs4VNp+s>bKIcA9I*jnXNG-<-%3Vg>!X#uDO%H0I#+\rKs".21RiO@EBV+CUr)"J:?-0%D.SYl:;]2JNE-KX"Z!OCMk22s+dj,d^83)e!`j2s+soco<>0]eOG@KC&,2m>ZBq)ke[g%2u^&QP3;9q3\Q]G4"h`t`g177)1nX^FrOnLAYehX%WQ$/;#S474CE*R*:sJSnR,IHTA&Quq?*/u3u)<anoN!eTlQ'n'&tTEik-O>%SG/%SX7![QjQ'1][,\Et#-,MZ.H93T9rjsrb(\J:g;A=R_2Dk9^JH$7=qu3C'W&68hOh7^1DI5[Eq<Z_j8.iOD-,5ocMk<@MA@CV%@sGFAmB3Bj?(,A,'WkZ[K5#Nudg>?CW(Sn*EC0L!G==CRmAcQQ1V9BdM0DC4&(>Q?HXF$>0<`MF-\NeD90E=W:lu7L7*\UAp9>JZ%2trY2Ln9U;fl(RJFmL.A.^`/!b/hD3V(B;[Q`ssDK;S)6VP/kM&J'\)-J@DJ&J*'Q]k8__@*7AN'+csX#AT*B$](4i"/;0tJ=&Yc%e8KOIGT3#oe5JWV/073/1/_(%LJ@of?T^jhi^$D6nU@=,J='J%!#AoB0sc+43?t*s!nk:HP$0nq;B>HhI_n!+BKZkn#HLNu9<1r*%Z8nj:ToL$%Z=/)%#se="K]L)a9cg,,K-c)t,%7_LYe>h:&=\@CNgQ20]S,CRPB=nZ0eo;F$,S@`&JObmQa!!!BT&7F:V;@#Y(BTj%`,.l4O3%DXfdgOKc/_DkA9+?2//fOj&n&ti(3O7M=ZJp7puQLD,*N+5(4XbDM+nJ#idmFl@NHj$Yq-<Y_\Ouc6oO;sk\3\86+2F%%jH/Zkp=XlE@WESc8MiKZp5ld:QE\bF0fb=AF&c8@kA"CqJnl&1QGpd'KtkaGo9&4>;fI`5A;SW8Vr/Hs4],iU3ea@_AB%@k7k"5s%F:(bE=C2um\LG!RiS>6p%1^adMm-6J2R_f0U2ZA54F1rV/dbYj-Kt@@CiKU5i5hpp(M'PYW';mgfb!V1>9$16CF:WD3VenhE8';Z%/rHQ4-3!RI_n*Yb7Z=tr?)c;*JCt,3M7&r<%]Ih\#NR3[_t,nVJ3%Od:p->K%]GS['8k(^#LmI?,8B6D*6M`/_e4m;apei:;@BeL%&W]`V_2QEKrk>GpJb_QV3I*^*PB0@._\T:,\RQh6h*H:8-HCe;h/SMC%SST)bJVK^U>96dEC[VCT/^lb[&5OcQaXH^P$/oWWedI-%Zl^Dg4/guO:=KReW@]cQ^LefO3U"SKP6Ye,0KI4JYUnscWZ^\c9FgRc9HL!XHEU%REX:i5Q&T:HK*5o#L1ldg2pK&CC0C=Y-fFKr%Cs6q^&SPEL*,c./#cHq\h:4+apbTs)Et?ALOkN+]ZpQW<C6Mf]+/d@.]6$V>(9d!mGSeh1DEk<r[PF"ZP'KE:(Q#_N).L3:jCEbM%NQSVVK_\A38lC'>M37NqHJX>oD(Qo0ii/2$D2=Y+b__@82'aq]E%jde7O3<6<,1q-K)M7pQ!^/T9(YA^QZrfVd62u%K'%Mnp(PNq%IVH*Y`/-E7-F,_3r=WeM"'_-kfc;V-H/d)/M<k`%(G1ggX3p9I`Q@]?[l]`Rljer,Z)<*q:=c;M44(U?[aTehG2+JrchC*+,Dg$>%4*]!"eD]*^ljiNF:@G)G$[mI;Hk%$LX\lU^VFh=IJ?trFm]&j!8:."gPjh7T(<I`gjWep?i4af"l7=m<a'O>P^jRAh"56]/<0mi\%/Wf!Wdd:k""2#IpM1C03Y(79VCsQXCgIJ:X`DFp[S!dcp]j`D\I5-1eQC)OX(^f7uShao)**M]G*Jp]j\3t/f:XM"7;F+g$D%YN9%rpj_rbI[-aDM=/8n3&nY3'*%PD:>h/jqG8l)Rf#M%5i.`G,e'a*1*mH@Nu9C%f4c/VBO`t6Gp/FU;YZT.e<#:6k1P2A%meEIt&1G%4geeLoG$Xp*#@YK<D?jJ8JZo_8qpZ]O7^$TMVMIZK/_itNQ05hEsGiXokNJB]4O\?o1oNWlTUj7T)S3M>pTG/pb(XJbM)R;^'g,G%26H=VD$Jn:RZm2L)m,CIbW8L"FHRH(9+)Bc24;+E>[$(a(["2I3Mq(P+3$%_,7Y>5?\C4NEu#Jma^;$A]L4Xfgf4bBDj$_NM'Ied%gaSkk5C/gRTKQk=)CGPZ'>L*#q;cjhm?^$Kb`+cVVS;tb?uG#;nJQqh+"tf5!MkEop>C=N\`5+k/Z`1p5[L8Qd\=b;(.be2Q>61c%"am]nMhRX=N.p<.'Z0g6F,I5AnoW<)IaL%\*eG]*CGr<Q=bXaCIN2kh!obid-i;?.ld7UF@V?%5RFIsaaWQV1+mrgI(-o,Y7B-4t%`F:i)`^fnWRI3`E'5e0rfen&6k2b9n6=9_NgB'Gg+>7HW(sU1393JurUYFcVZT5GJi[C!'j2_)C(]H3&h/daDQm90ibQs[`iM6)K%Z8d,Q\:qojns`8E9<*=e&O_`-;f>A/c(qGZhOeP'np)Yl&n\k,$Ep!4c]jKY'0_4BER)i:>Jc.Y[sB[P$B(s:`?tn6<pVF,"`RMp%,J'dG0Xj+o5/sb)UXZ4&jfJ6]`aQt\q0i]ho/LnQ?Ja*)T_gD6G#h`?R%+aCD3fHDir_DFT>aMM,qcB+_CIkPKDU;'r_6DKK<+bs%l>lg0@$)CKo)3tQ$&YoRO.?k5j\:m_"!K9Y8H.,&60/<EfUkbN;gp;Drl`Tt1,]C;MpJpp]iSf+kDJ&I3TE,$84bj'Z>?6>h*Qge%VE%JCq3]B8jjd2.h)A3/gd4G73QWW5PZt*9%mssV"G^8/eC)N7d5b3#oP0PY&)cdaG5$RO?Vi[hH_ds".O?i&?;2rD"oC_`*drT)%Bl%4MOj/@N,6?Z04,$C[(9com8KnVg:T#nQO(nL/H>!1=FUG9KKVF$>MJTI[\PBtPTWquaV+u#Rm;p2\Zc/Gq\:RYa/NUjJ$dJ:u%Yi`Ltip+mt@[X,h_)2SHq#fpsj8cF"3X)$W\W7ZA*eUC1CQ*u/FK8pf<Bo;OVd!;+]O+.fiE(k6dE+\*`!Gd(A_Y=U61X8`6V\C9%]0T^:Ila<Ni4\_j^L?D'*)&ZE;O_t#_qUO"i\"j!q_7h$eN8[Bdl:E;`k;n$?RFBhP3g]6.J>rgX#==^>2FmV_[W\9iu=k3hTU9B%1(?BlrqU#[M=\]003=CllJXbOd@t?E[+O_n.?D@We\:X;KUn0'NbB5SS)ef9mO0scn/-^.(0r2@89q8kGYqI#Va@LGg+RM35h#(N%T5XS:`O-T[1[4'<f;<hSDf4h&(>!.H)W4G0Flu7G2N)@7q37c""d,#&-qHal-16@*M20qo2<TQRGhdN)le6H:lC@;DRb5#^?MFKL%@9<6\2ih2T/5,*\X*tNL[+W3EFFiQcI%Gc.mU%*)+GA,.ej#Z&Ed.k@Tj,s]E+H:^-JfgJhOcBE1Irhue+s%1@99V02p?Do'MFg=%kS.U1r*n&&\44<[meE!$>pY\hDE3\OOgOEg0V'#(8lR$I)?lSOInZcu)?mN"r^[O1a[7gN/dQYu=K_0M1\_PM&G>T?!27!7.&\8.%Z<u1W;H5;%5Ft1o>2IdqJbSp%S:aS')`AMuA'gEDb6hfiiJRO/o/!uYriF.N(0X"en*aJ4WLs/p+PoD3l%*OD2kFN6%q*r/I053=%XujZgM_S=Jp=AHRUC7=rG#]M:=3\ItY:2ujH)/i"RdMiLECr\2[Pef9e`MjfasMI3=lU%>r4Ufr&,+KMJ\&5f?=FF?A`LT?[U29:%lu&us;A&M<,q1qf0^nEshK!WO%K&Qp$WNqArYhO:k;*$nPa_sTH+&>RAq5-G*ZJ'^a6qPZ-HrK^l1X6igi.I:5V.+?5ZLS.^gV0^%m.V.hH%j);P/0_^h5ff#Mbb'M1>j>.=<t=WJn\+QS1lTCOnj(#RVlpm)uc:5/m_blj-G%/Pp6aGX'=Nph,D4"hD:>qhc\>[X8B$D%LloH%G:U#1HE$CLk`pDUH'(ju]10g(A4)kZYGYnK5m5DUdEejMS`6i^P5KX5+%P5VA`FcLf-b-&gK2b3]J`aeNG-APi"1l'GQ7bR%.5Wtk<s:?XYUh!TG%4<8,);DV71G/PoWd'sQ3EpJ&2,f'F,I5@`]6+r0MCE@=$I@&am/ulQ%#%VTI5<mUYUiPOj]L(4a>\+TGFp)%Jc4]PPn,hUkqLCs$n<^1ojP^N0]KZtIE8_pQG\_V$b&^\f0`[(&#I3Frd(d=nl]]N1TXqqr8O)([KQG/JLDIJfe*/pX\c`.aG()U%69^o'+*[@nl(J"3mY6q!oh`6,0?[GQ<j+^6oh58@;75!qJ*Gcd\/7u-/h6bqKksb-p0)c%8`jbo;!?"V6gZ>Qc-RY]+4W;epN(9C%I'Z[uPO>l\k#u$GgPi51=--`)8Sifm5h,*C3'8kPB:W;``&DaR]2!VEY:`lK6$Z^.*$=!Eou43aL$Y>`2mRM_7b?'p[Kn%N+8=l`%'BLEf\?h_o5FZG!8fE^2d2hSV.:S9WZlFp@S7J93f?ie4lH<)5OH(UH4$-8b&4ue%3/JoLW=sN\*EanlX[r$XFt^/t]f<6sDh1q2%FrKOclVGmX#;Ra*?[m[15([UC@f6VEqB.=FX?T!P+0rX>mJ7K<oa+(Cer:F!Xs*hLY=.75&36"+0Z3s,P1,:&MU$QCEa"U@U8Mc>%oj2$_0&-enAl5cX(h^8^hVKAqli95X$1B7Vqkq_UDo`[9p46.hYY7Nd._,E-@!YB]KXuS1CJ\YJj#KR&UZ#YoIJB5+atdRKGp/1G%<I"8TYeT-lk[R#^CaFc>qt)c\2-.7I[YW;*HCF[K9N(r7"&W',q?l63$sM\/mgtu-@R\;M7GNli>^M)"I;kD/SdpiDLICRG=VEi[%G_^!A2-eQn46=aS[k=j9m=2>icMffAa#aSP:-c0YqfGTfY(SmG=eHPZRp99Zb[,A?284^4Sr\m*klh"g/gF[-HB%[,_bK'/nJ^k,%]4M)*W%;f;&gUZd05F0R]2L:_Q7je*D==b<bBp;LJdF&^KmK<.(V/CJIX?EB+opQVN6QOijI"Tecl!08<-q_S;jZ,)AL'gH8U:%Z%"hSNiBj?D4r&R9h*f&&k<o2Is"0[i+!Y!WeVn[q3`TY[hlH[XhKAT.i0^bSD7H+778!dGY'C<$].<#*s96Lc%9m7P%@pq;^8PgF6%(aO>;8MIkC`?aA#+:CS.#Xk'B2Y-d]639'/K3l+!*NK[k]VA"($0[J\OT;SMPR,(WC%!S*4m,,":MbCt3PUJ7kcOLIQp=+3`V'<4%O;j>AZ[`#UX53j?:%"Sq&cju/M]^s#:it9+X9AS8ML'kFc.\/a+>'MXL?(Cp/-$eJg_kbb'SHjEUbJW3dAaW;\N5jt5SD'H@TEef%h6/"&HqW9`UQJfN]FEA#Ck,%[(_++i7R8l>:X&mf:(nRF/9!PD.@Ei]>F/VD&X55;$3QAojNKJdfKH<<.$e3$24(o>qAHD<s&.)6%p]R;V*i1Do&8f+t'XKVG4iR2b!Mh92SU?Ho*QQbNJ<aTlXPIh0)-FKV.Q#SrP\o?"9UV1+(&-Z$=(G)<ecD=h7984:Jm]S%popg>%MG-A[Q?S)%/m0bhPXJ=2mS/Z(e(eS<HR`o0/*U%%;JZ($F3Sm*1q*A@m1cu,N$&+8Rc/2c\VmpjLc`!;Yg^M%ebCNJ3m@#nOe7\%%4\<&$F_P@GKc#tk:HS$")(%6u.<T!V#HQj:9(^YYO;&dAaY!DjO8`Q[I.Y/KB"T>p%kK%K[QBRnf.b>[6=j\E1lV__q1V?;+q3Lg%&ZL1&@ETM5J:h8m+\'!>q@keps%&5$YC.:#nrGXqeQcSXhYp'no,6J((4c!D_O@^agcNJ>.G3e/H^X^Zmck+rjccLfijiNV+Z0FX%.\2K2/ZH^]6;\N0@5gQ!4I=/kD:l+[Bd\^3nE^`r/eB>,ZTE23=.,7Mrim1_)lN4u(D5fS\Q?9c.hq*o98S^6T<.?;_IQNDH^hhJ%2e7(^eXu`We#cT=VcikuF/@6%j812:h,'"gSqYYAns8*ri;!P4c-XcufGhoM+I4L2%9LGKK"-$3ohE^f_;<X#n[&SI<3kHnN4'CF%Uteqc2Y%_@MT6\5l1XKm7IsQC`<;JB3+moO_>#/9rEeK&/@JVG5O_E-[GNO,=6q$`g.\^t+"!ssj[r9.n6\3jXWD<N,kTBEA8FWS%+qH[<1b?Y'=QA07^&PDR=q=&1MrD4tD2I!TTkG.*>j.r&+"CfnbPHRtHdqhm%mk<(r$S3<i%qQjAYfr=Z<?fE$`-@sTbspOQK-pK%,^>s1V89+aDN<GaDI`/t>_Jj+j.i[RC:G*-Fe;Oeol(>I7X@P3dA&\fBfr.+5)5qQ$2oANT?oR)3_&#PdJpg%M7*IKq2KhCTJ+'s%;CWXb:KWq"a5Qnc.GTOLc9mJ`Um.C4&$*"#;Y&L7p^<?u;]/`[nZkpR,*\4O+Y,'GZ)4N9;K>Npbr$6HOHOYHRMV[J/$`pmj?t#R%_J.Z7JNY"&*W2u.V=/V4qS2+c`Mb`jc$ljO&:+9hc@h6G\6H(3/f]e)Df8>*2L6c.6-?+4N(f\U40'j1>Wu@GFdA;\43MF1cAFJ>%-=1c1cH:4oX=C'rN*NT/2OdE4MIg=$RCTZ:-L\$<P@NT0-g[oi\'ARt]f"Qck4>R2@Mr<LB'q4RaZD$(jHt2:#s535Xg<:@Dp:2G%R[,EOft=;jXN]I&?B]S6XN<3eRM0j&'=bBb@:nm\-R>4:`_M`gB#8-+(YQ\*7[]*P6;<)OVO@]9U#q#]bKXggA7RN?)9FX,17:fc%RlAY+UWhLr?B]S6XN<3eRM0j&rs*.-@FeSEaWObuCpPCR95,/E@[*8ea(o_4M)@:???8HMBlfai3AboJD3bmCP\Q=,7[^fn]I**K%=Hd7S2()ZBK.?p8!-MCW-R;suNLik5QrGH.9GLS@7j8m`3C0)Nmn;r1WfoR:$B'XGc)[cLP+XiZL<nsLSa]9''0FB0`Qn$0Z*VII%ds#ut'fIQS/]-;t>WsIUQD*DO@W,DKfNVZ/p==J<qVDE`@U4;LQVt+u*Eps5Zb$/_QAM/DV.+(_RFk[&rTQE0YkClD=Ug4mN-/f6%=\]^5Adg=+H>Ab&!frZS^#e]YhqR']^]ZnC(>D*M;rp\&Y=_q*l-t[2gA;N+7+/><O`\60,b=K)oV?P1r[4-_Wi@5AY$!fTc)%]]%,??3+43L78cLN`qZc;mkG;crL0S)s\YhB;V>SaSi_)>*[Kp3ogjp<[S8]OFldd])TFN42VP>7Orc;k=/.l*E9ioCjeb#AVh;s:;Z%Q?08oB'=&M/RSXQ%]aFhb%7AB9!QJO3F)5XN<HGJS]i)ZJp&-l3L:2+S.]Q:Jqf^3;C,j7WHg>1R=[/+H'st]1DsjiqP#0b"!rZ&%%-q,K[[!+76f<#`2)Qc4b,'-4Hrbo2PYcbsSl(6$<[jr$"\?1'*bc-/5$HAC$*>st)(dci=o6gh,B+42&7pPX;%[X"F))Xe9*o@V%H1X.2LBs4tB5qdn9IjZ#MCTo;QNoq]i@!oUS4--SradBM]ZLpf;^Jdf.(GBD+JAq5,HoM#/@*uMEgQqqQ;'gaOc]]ia_29e@l2ni%@dTUM+p9QSod9<!aqGE@ap\n+ii*h)@lDZ2P#57f'7b3DPo,^\TE%A\!^iGOBj"FOCI*%5Z3\Q#an)KBPi^O#0Har[,Vee"q,B+Q%Q/r[>[bQCDm2qrm#\"92'RFXKj&;q=b0,&eD6k+erh:#"'$ITE2)GM6,0=jHj3Qj6'p"QK_+m[-6AAR`Wu80C(9P"?N!RNRU%k'"%;]/I#%7!I+bFfShFL7h]&fP?2&irA[=aS2%;r6M;rGj=HZO+aT/8_)V&r%(C1c?\ZO(9e_Z:mYV*XsbU+Tb,sko?A(:j8bK#`':)%Cud0GUnTc1GtObYWD$(86sR*p)%p+`e1t4P!*QqR-P?JOI+LX./FKj@8<cZ6Q3U2#12\r.K]-JtZJ;c(_VCT3$hD(LBUgjcP&RLQ%c@mfmR'A\CXCUmI&W0FPED\0>b>_SLEqqBoU`p^*ZA=L*1da`jGU:pS%`m?]5)4/d?dU7N5A;Y.,g'"Ok7D/UQ_j82PTcMma^oP'%F(E3cM3aKaV+\gnPsDYj3r6LT6KSLX6jjhineNZ(U_%+e0F*6Sidub"Q6B`aKXR[J]U$q["-U'5S4Eo0?H(9T9HMHg08D;X,ddF1%o?`PM_.[9qi=CSNN<kb^P_Dqj/7BX6Ah]Y^q@6%.?;%->jcG-.`bN.;:KW8Pb#'eNk]-m2nO=D(N.s,Rf%u7ARuA.=Get7UF.%G+%jg3`i2Tg&^8`EYt8!bekQ#an(`i"tsMbPK"&1bg?9:JeCU$E9qUXD#X,?'SeNAntXAMi.lAF5mHQ&(,IG2$24&4r!5S-#.fH-C0=%#d"J:h,#BN+RkY,EJ$+%CfWl')U^WPX$HN"!&=le1@c&.OeaO2SLB_-$L-IP&Jm#bYONC5>%0u-,\u!kKeuC2oKZp1Ah=[M[\SM6%/P)iL>)oQ.VI^$gPTbsiW^7X>]%j"\b2e)"=U>tuXJQ]M>%h:N0\8<-UP,?d]LL$TO(NGn,2EPN2!YN0b1d%@.j:nsDA9:mg<BY$%HRCQfnGp?<\mo+uj&A?d<eVm_OCFhNjSok9OK(ce9MG]Q5n[$p-":>IbqE*a\45'!N*&_B[X2<q!#YqS>;IOh+YB^U,LW.b68G9#%=du.\-%re8;+<.4h$,-?mmM%<g/'D7m(V5s6p20P2R*.Fbu+S^aqRNJ'sdluOtp\TbGmrE41ZA%9Bb;c_'RUR&u/-N`(Ck1,(XGG%>0W2@)<R#g&MM3,3a+fDPdJQ2@s#ZiA*oeb7T+JU-'O`CAh"Il&tY6dfr/bPTp7Et-%Zfm2Y:"l@POPf"u&ZjSA8qbe<1(f$%RsI%M@SK!b0Yg*0V:$iLfg+!WQjq;&i,emUNe)[h$,!;ml6R@J3q#QAR'1Ie?jdD@p5@g'j0WUC*[L3,=$gK;QPQ8GJrG![IVfqj,f4_%4=?=iQ=ITa+CuDo%")2Q-DOSB(2l3cAEt>8;h:BOkQtFA)%VQmU8F1,^]6k4T:o!uAN?Ukk"*PpPYad\XcnX*k9WNB,C:O`el#GW%9Kjsn1.niWTesnI9Fis&WE`N#pf+Cn)Qbc0)(dci=o0S(Dj;pMK(q6jfk+.efe*on<u9&e$l144gbRMk&kCP%&S@5'Mp;t:P#-c#%$*u(5XZ.k/$qP'fO^o%E.1kX);27*"J['@C1mP:L:?]-gN)(dr]k,#\;F$)e."@C(,k<`oWWcuL>_)H7Z?Dr'^;*BtGferN2kq/`%]TDh:!9,:=)tBNI1)\S,ic_,Z,bupL3GIEH,ubDoNA;ugAfG\??/lVci./.-S[Oj;FJTC\BjN\+>Uo5>>79,CTds[c*(?(%lG<l2%9o7J!R7&s+YS)[`:m>AQ'f'mm-@dB26-1</<l,RtTp!e8"-Bp+-:J6%!Ba5XgpWO%I/oE3ekOHN"$gFd`:sEcD@+Dp)%0teQEq4O%$c$O4".oZ.8h`<R%3Wc#EFf;4J0]-8N8g&2mD^&U<&30E!4)=Dj9?`;QU/HRR2`q@-7VUpm-FiQ[&i5*,A")?.s+M.WX>.c=d>.!%pOE):g6QT=j18U%s5EbtO<B!/Y<=\`-]'f*&1#m<aZ$Q-2mP^&'ruJ9s*^cV:7ZI;qbdh(n%%__Y*s^7]AC/2mLkAsF?R5LSR7_q%)(K0]81k_YN7`.e"GWQ$lWs\gZ.0JDLD2M#b&dZZ;*08"/QCJRd8T<bInK1eZ(@(-r=nrdkf49bV<`P>?f_!nKt6q/mBCF,NK^5"%$;'cZ'3dQMab'k"M?a9#ICCMImbm]N&'J.(/KjS:+:kG"1HCG`q%F**Xo>WfJ_i\18\VgQdl^OJ$OjpUFF7AtogPJ;<%bG`lq=B_%";6(F]/^\*>2N,fas^#>[.V9="U7bhN*]<O['eV;,%o9@_=*UIs8Am\q]_.0H%/uYMtGZ7=0I\15/X$kTp^nHr03Vo'E=/^%B<]G%2Ad=K'7ZA5N>%r]re2#XB>_\%5ECjN\R\RdDWk)ipZ`Z/\;%[XZ"^DE;2/`N[d*_@\aD;5T<8'?NqZi2ek*fgC88WmClF1gC:7&B%BK=6,`>G.C5]+[Fd8"OHV?n(K](lT^*_6)NUE_#W_4s/(*tUN_.\cZ^VHH=]n!$sC5Eo.><QU*=6*j,7T&pGAD/&NZ]hN)NV'6X#%-`9hV%o2Nhb;MDh^c]nc5-SCS]cbT)W5a;O)t8;?GPt`FJX3\N<;kCMe]S"#Mg%>Yh5KUVH!It$&e`BA[K.t=r?S.QjHLEJbN0@n%:g42OWYCtn7dW=fp;H.+crV0Z.:6:r#JNgKBOE&H=qSIo/VQebq-#"0-Is"GOb#*CL2euCl-.]%^8=S^]l"uP)3*AGT%)1Wm2+H:%4Z3Jtg.Rn^2R-Q-E=6Nh(\+aq>65RQ'+H.!`eMP])k5KKVD/sjBg-UG<Ala(+r/('AZb^L9l[W890T-`RpW#7q't3i</HZW[5Y(6%lt?(%9uPm6&`l(u7RU]CJ!"&NM1C$F=Yd)'`>439,nd1N'/1>Hle\BODUas/c\VBAMYP?eSj1P`?Q66$F3dfZ$e/G-qlSjfMf;E8%Tkjj[7!0V+6q.<`)DY*>U!VR3]rq6e^Bg,-&e>:8Oc"1Ce#8g%V)t/]ORO*\.>(U7lgo[a7-sj^$LGg!Ml>OuHGTGl)%.XS5r,I]%%N2#EYaT-bT&rL3g*tGp2,o>T[E+@.nGEl410Gk\ULmI$W;][FT)Uo?Zi>"c[#YK`ZB)lXY8P)3OMWG;`*EpOV0a@\6k1,+#/RGc%UKn':QJ:4\Jl&6u?,11$Y&cm4['BTQ$`V2=OIl2;Csf.d)`FrGGM;r[[3LVFS+.4%'8U;n4=s6h2"(Zg2fJRiBEcJ[%@c"9gFO4Z%MK`I99cGuZ+r/'DVboH5O2,beL-9!eJPE+%ah,fCJ^(SjTo!Me?6kDW=n.Z2(YFNn94u0lO^-3?Cs!b/9Us8kC>A;9@_G1B_F@MS%L7Ca3r&GoHANoC8GmH2#4S?o]GJkVTePd9`k`G!si\bXeDX4h8&lH`sN`=8p]+3jH"RAJj'%e*;GK+@=!YMTEW/?7+Oc#<ce#8lD%,1.a82Ra"i&/cp'YQaC91+Pg<mTPM0HUT,aFG*VPHsA/R!`H[=MqGTad0<?'rk9Ad*fr!<67UFgS4<I)F,K8Ca$SK)2K)>J34@g,%&_k%6*oq4.;mkp4QmM8K-fWmEW,h&5-R)[=pS[aC.L2OYp88fl5bnuR#EWhQ+r)COVbo\Ym[ahJT,YJ'*qSR%>_je5&#^/B;3(c;%GJ@>9jdLp#ND[&raXVAr[9rXpG,k-k>H6@,:5S%X.%T$&/U=c;:GXu\a@BE#Z!JXES3e]&;&aNop%.@"kf>!LEl@*LM>(4_7$?37%E?(PM=DCEK(Qo<E6V=/r)@1=+E[rJ.m)hk.<_C$G\p+:,LfI''LdI<QW*5O&/(c],A/ZT0!OaCoWnqi89Yqie-efP>;D$XC_<5^D%<(+SZD\Z?JWgWSj5!CkO,.BHW_dY\NVks*J09<6%aEQN4.T)Tli&'`>Vc5Zg(n2to&b?h'>d)S9L2D]35j[=p(Baj.Fc?L]??+IZ%a*%_S,l_V/>uD^3TBFpu'+q=$KPt6+rZ?0lTD(^,PoAs7o%c6f8lV%FS4<JTD0k47>]nDQQm]CN?=C4:#u9]Hi>`$ZYPlB&j)q#"%Os]u$m9CZ/ori;sPJBoi>6p1"0R7LYf[[N1+pci'>=W7>d#RQ/e+5Rr?!D2Lh]q:@)`HsZh(/$H&UX8,jc&sL2X]2&?;Zf7N>i.$%c*;79<SKam`grWQ?p,4D"nl+Yi=;(#.gdcmYZq1u[6^[cU"IJ!;GJ=gJu5^FQW*_X*qPa3ZZ]B^"`1A6Q2!`krV(aVqjRI\D;,7-%7NO=AUfoS/84KY#P#f98S0Y/E^hKon=duT""@7\f'T!=],[%e1CZiELPT_]L(N9!!>Uk"J)Bc+Bn],LSP1R=RPUEOFP^!9">"MR7%]gG6l//iK6=rD4*Z74&I5AdYn]NC=r'UtU>jZJ28A]X<nHq5LU+ff^3WRk7b<Q=%#o0`'!0bnWo;t8H<Tm1@FMRSVFGjG9(]N)u2%X_TEC)R]I0=?8VkQA-$]>-rZGI\5kA@Rk%,O*h\gbZrbIln0DE\G&76SEN,5bB5lk,.l:XL*8'A:0V>5F1G$0m6dKNLeJWIaa<Ed%&$DR_Ja'WUF/+)1>,:c:[RBK+h5"Z4[eRICa/N(5c/:2-QYPJ+rnsHLR4r0N^kp.+I>QUJgBfn-\`IeD?2G82+r)COVboZ;\l$Id%GjqNLVBWKaQdIf:G,IuaEjBFqdHtU9B1/iBc)=IQAt4Z^E__FUF=G;QK"5!e$g'c*;Gm!/2lG9R^UhLq/JmIF"#O3`eNLSM9;!UZ%>+1nXD@<1^Q9ZX3$':$W4?5F=KK$.f;q9s9Z@!,)XdS[E9M%UVPKfnn>6<IA2L]Z[2FkD]CNLf@p9]d'[sS?;VMKIEiXp*++i#[!%$!<[d+G;esAr#!3`HM))&rBSb$94$fFmV,U\$^X`a6',E@_j@"$jgM@B"?IT(IapPGYtH=Z<UA!LfeW<Y\<#@UGMfF\D4'$5RKq0%;^U6+HgSE<S#gCT<)VF[+"IH'HWt%]GAlR#D>-L0^"^5_cR4uX#(Vn;#&s=FaoLkdi+0GYf'@Kt84>#/$im2&^Q4W\(,G,/J"(Ba%'K$%,]<\!rbk'n)`ube^Md:m\SkM_^kM\if7#JPWG9)?Mjs-WG,ILeD:ct'g*U4[+i=&JVEpgq9<Efq4jUjF\F'P[k']1R=M_!=i%QKT@3-CcC\1H+2Co&A;T6Rm#X#t@=eS;3DF8hmphd=bF?0;8tj_?",>,nX!l1)dRl:Tg*im?]E2PoV^U]3j)L0,]*Elu$C@nVj3S%r)WK-FJ.MtIG:4?8WmrWifZj8ANB51DKMBuSuBI$*p9t4,*qgY.OmbSUM<`U]<s:A>1-pPnQ,V]0qhfaM=h22Xc*SB7/V9C'ojn$%9&LO"]%%&S'=nqC'"SDEiC4a.]T3A)XYl\emk<hap6[c?7!2pd?'1.f$s(f.)TD$f@`SdcN/>=SDO$6V\kif\=X*nYQ:qoY41?&t%?Vb%pr0e*J`+ctZ?Ms[l.<fYiN"b%%,P7ZeH"3e4d&nQVptCLtB^j(RL"b0W9WIG?-DL]%`nH(g6q/eEL=*N^WaHbl,*aUoWkqN=%%t2P=X!Is`b.1O(@9qP[60u/0h;5GA/P#E*MRqobLfhsIW/s_0:56.K/E^')Q0n(0jQ[8o1lY`MJ7[M(6a=aF<3Am(L&_!K4#?JF%%Sc2r>4fon2mHS$mZuL?IC#@(Np;3a/DXo;8>I+N,+$a5`/<!ui,gHnNV-%BF$hET;0$[qp$:%CmF8/N-o'4]+54/H*G++*PXcT0%UeVtBkb:-*-pt&ca[.t0A)0-2Ja>G@Li#2r^hD2*L=J1HbTIOt-oO)Fb0:.aKl-e7+0Z:KP(uhs!-Y6Ya4eHF7Ni-V:E#6rjET+]%6lG'bBbEZ@T-hC;8m$G^B1ml=CMbgG.F=r+&hNV71l5PH&&j^PLLSB1lF)#jD3R:gjJ`_q27FlD'"g:EI'=QR$PGa"Fdm:lWe)ic%E?_^0;_osEXCP:#P3#)t==t2=$CXec11c'bW1E[jTn$ZNNb$)jVt<s1(uYXAB8.r@H>8)fC/P0'B1/1f?>PF*0n2U;CFbb2cfdB)%$Ea)<5l;LVMIMduW16)JQlPYKQ8E(Bf);u/*ISZ()^hq+kH5(o6s7$-F%KKj5Ur(5O]-.s=O&kn>)0DK_`$q\boF""$mNE*Mi,*-%e"GMr-II:pfHnsU;o;<[pc(&e#AATOc7G<af%L]N_<Buei.<m5XIWtp)&52HN"_=U0#H=mC7-hhDLg.*)Fk'6@6#I_bX*^U;/gOo%[-JWKZFPM![Nd]\\d^5)^oV+A<D.Hd'<S-HBUNP!='a!;X3U!6-@g1i'>U\\!h??'!pat\'9L@?-6Tk,9_A1(JWU[eKjA9C%XmQ)%[%K<3L8)"#OjRq;/Qti;h2PI-N,0^V&[@]]0h.nZaeI<fcXPTWPgq-KDDE-<S(_dCUcgt\-:QFnG%@UW&D3F3Z4l3Wg66gAeW(Jf%,-Z;q+Bh_`K%8jKA5TcE=PXCI,QjsU]5S*D>E9%@okRd&$Bc@+;*U*_+UtjSN//OEX%VnO[I/n%C.)2!-r750/JKp_`EOa5[,N[%%6RJQ2E]($P^$i%!:I_hDDT-X?=1]26M2Jm+e#6P2^2:jESpOsaBobub,gGSaQpq/N=9DTim'*mp<Ho'P/Vt'.Tnr51i7=cid$6[a%E[eQPE2fQ`M#rfs6=8:Seu:Q-PI,Mh4PrWP2l/J7p/U]gLi#.pjhb.uS,%9@g2Z*tK(*J9QUGuSlk1ZiX6-l&>B94*EnVSYB$'-7%`1@YuObR>/c)@0$8MRo#[p$lco7qFYfA423`;')AhJEJ]8A$/.l[%1S`o!OPYla/\^27HGhaes#2f\rZ.mQl'RUA:*R4)(_.1"$K%F`R0Oq/]`m&&,=B[`@NTm;r-I"K^Z7OQ"T%Oli%'#biYT&R,iY0NO-gSGk,AH_8o\k?qfl>$X'Rg/nf?LMTCJ\]JO7D@Y@NqIZ!b%o[k.+]2s\[Li"$na<9)m+;g98YXCV?-7Zs``$g1:!L&2&N,ilpgQRa2:2tUp0B!U(;Gh7N)O6coDtiP1gcad)>`JQf@<=No<Y4EB%hJENh%;TF+m1kgOLjURK_l1kJ3F[pUiLjCa*)T@(RUV3:2!Hne3Z*#JRE9!db>1#iZ7-hil7r=eU9/ChXW7u"Tm"68:TWOP',q)B%b;n)_GbWee<!W7C`JMZRrIBQe*8h&k>IOBJ\]l&p+k3BD5jH4@^eQuKNg;6kP:>0No>$@[L\7H!%.)'=,DTK&?2&SW;3V,)Skto>%6'@b5+YH0e(2@pnHb[!.AlS8Fc^0S:?nEM+?UGr6;.q^'<V$G0h3$Hp@+'jj+'BVhR['\%2O/d#8NXta\OF1(7-l-S.XXG"LrcSW%;IW;MOcn0+2548laZ<=WPU%\6R1+E;7trIp/*kmoBQci$56SURM@*B[L?t\4F_>:uFg!kO[crU0AlJLVfFV39jgM.D!ki;Y[&Dq#%X"EUWUI_11lK_im>d%DqLD9B)j<GS9knC+1jIr4dYZ#Vog)F<.DYRXbmtp6Q1Eq32`eXndZ`gGOgs&"qUH1(7*D'?BLj`i(7CgNR%e?59T'-'a8&c3+[krpn2p73?:@36D^(#=Y"R"g$&LjRd0#,M.CJD#\^:AW>AS:>468RECS[SO#,DJB8i^KBMiLJ;,[og5;Bll?&V%jUf[YFKtT7n$h`QL]apNc)BjSP7nP0f/`irqbguL,rdJZ)p7gh<KL+Y7:VR\c,.\"Vk8HX@9,Lk=9&#^fDO$EbrT'<SGlJPe0mE#%#uU/X++C)JOa=b(fE9XV52iYZMUY!8QW:JG:`BcpS.<N7Ck`W-&sXmYN$d)fiXbJC__S>#e#TigLRa>L9h^1-2[$QHCii*RgIIDZ%#],D+QEG4"`(,t'j"/U=[-"mG>]/(_dZfSF</#-Xjh.,uXaUd>mK&cXC\Q9j.[o&Eh>oWEC$rR!Q8Z#FEa^nb&WtO4[K<4J78Dur%@6O52;CE0Sf]4ie2P'f;P;ZnLK\H?jY$6f$H`XB;,\)7)=3R/u]!Y.(V<N<;g>j147)Z[ELp=uM3I)]IXQSDC.@$h[3B<)qFo-@M%4e/rD@e8Qe^O*saK`:_t\6)La7(,)%MMe>lD%cBV9iQCSM%^K&kD*9$";TEf#H+\i^3$(K7/V9C<D"l=UOMh1pAVq_d1Q8;g:$O$%S9r-OQIA`JZ6*\YfY3o/=%L9_/;kDuONFr%gG!I"RGGU-q1.h?NW3L3RoH6m(ld6l\$nc0kj]#7*qPUA$40\4jVWc]U*P:i=EbN5%=KU/>jUJ"8=TWSW(*!q;C)%\=S$Q5&i8XC::obm^ZBe/$GgW#9/*6T\(hI?f=p$UjNd(tqfV9Ej<3Rj`R&q>LK?T&\O&STfX>gfs%(aLgD6\CRk(U7<:*#k[t'dY6*;89Ya`++lR2B?YrnpNSB9Dl9&Utj\3j/>PfO#BksTd</r0&O'f(%'`5FDBFIHDbrR'^F2F*F]iP%fpum6dFQatV(5""Z+3l8SH18Z"nnm*2#Q?6MWh`P$&$,-%9=[q-7gkqEiWf:fVP=ii7&7D<NG)n&TLuO+.b?b&Gf;LBWp.FVmYAe%@q:A>ZiB@A$[EbL@D"uRk3V!7/fKS(PXOLK`QWd.j]m:T15+8A&1b7ZKT+3H<m0T"NO5NYUnZe$pR:a.FYh,`Q$2D8U_0)rD!IQO%[&=U!QLrm.daBc=aarj,M4]USfbbGrBT,k6\XjPi[$uHKUG4aqQNjn=HAPatNDWOlEZ4V?WfcR"Vl";)fUVa*F)8WC`th_h=c*[_%(3M&aghpXO2V`gn.5i;SM@GrLfRf<`fODBD`R[G_$lal.$sTph4<;!3U8]_-k'I`1;>>rB[A2*4i6Y25c_6hU7_=CmJne4/%D>!7%dI8"cgZ31%du"CGj]4Pib*4^sHdebXQ#kiTSN7+dFjPM)P)i'ZAn-ft5fUX\-o0grjLj"k.Iu1;nK;;9Obp1Y6NTFkHH`d51c"0t%!QpMWL+N(fc.=2nB]K2_#:/-m.JL1'mNY>i=;Y>Q7t,&)Yin:,Xc9STU<:kRi^<q8=g<.p^<s%dV_pV<Y.)QUV,XMn>"HBLZ0h4R%#=uVE=?*V,VE#p(a_@Y5"mjGU+sqcG`ha)#[^dMK&:M7=@1Fb\(bncR%YZ-am28D>V]DI#0"3VV8XXaV/0Qq)N64j^8><RD$^!Ma%ZB4@6a5/@VGICJe*iX$8gTIR$6GP,t,D,;mN/1a(bp$2oV2Cd8[U&!87BK^WWMk@UEg+nLSKIkXO8AHWjK-E"Wm/W5g!pAHGc=!B%+CiHRe<^#7/-_%9a\js52/(:*a@\@If\HhMnk'!>ijB"rc0e&o8>;h.j>8@Lf-;o\#Q]t<K['7Rf'@8+dbdRk]N0+N[X%K-;b%KS%INN8Jhq<FRU<8rp`@6pSmlS.BoZ"[WEN5eFO6UP#]gTT@qaa.ED9-G@cgN*<#r_J$f6sGXju7.s'tNe4OF*A!X]g7A>le3Nq)'[b%=7R^/SQu7IWk@+gS;=8j,mde;![=O'&AP&u\6^B:fbM;sU?(AllK;4KA$FP,O)Di4I6tn*Veumb=kWJ]NmcgTVd1$?:qN2q[pO8T%7SKg\V8hF]KN#>dEE4t8ELo(TZ`2[n8lR7L3"=U;7i)uKe.#jH8(V6s80r2L=L)UEd#(`e2I0jO5s%r(]c7nh=BW":kB]>('@iKn%R$J+L7$aq-:8eqW7\r!;eCr7t`m2PZ`1ob%P#N`KOCU33VFO&=3LG2IoRO(qNk_rD?WKK8HZ$q\qhNo]C@NB`h+&7I-d?'WrP=60%V6-4haUOSq8oDdVX_@$t84=I[`$VBZ3B\Rne[/\(lQ.e<Os69tCSZroS4)t_Z4WASF';:R\_@9qB5,a&&Y4`.L_15YZuIW@Xl>So%C:Kd'g.3P'R4_l(C?OImmrHR4m=`S^=u'ts08)i#P1WfrV7!F[#iJa)'0("ke8R>l2Jtnr8TeU_Odq58^%cfehJM;gh<g2#Rh'ou%Qe!Ao)g@K<<0B@(:&=\*NL].R>+5iiNI*h/[ttr/K(n(aqmWQ;T@)6)9fW:2hkjs&h^0K%gI)H'!BK[=alVl+U.cgf?,1.'cHUml%KD]R)1&pBT,LXK=M:f8t4)ehle=u[?PuN[uVLih=&s]Q>,,7PH\bKgQmX1G<BYEtBio$P(mo%:R.dB>iUNZX]JYSZs-HtADBdTg`%S0hFc8"WAaP\DIY4`J!#UijIR5Ef'&As*ME;520'j$n)IT1KBHN9D<qP"r%QMZedD2X_6I5.>hhj;;95(P_\HX'PaR%/@g=:V].Q%,Jo4HN//0C!>]k0N7&MPoU^3GHIus4lt\C$MOf,ah7AYa`K<_JBuD?&Z42VVj[h"DA8/O'oN(&#d^gZ4`hZJ&3V.ck%*<=TYW]:'%@^LPHIB>*,D%\4FVnDio8#86c19,%_h%?-igMQP#N-2,t`_ap+hucT$'7bG=UcDF9$T:BeE>+XX1,2u(qr):jIq0+)eQ2s[=++Yn%ErH839Vdt$,&B>Le+!'Sl[:[-'3hfn)Iq2G'&D3-V4IYoAhM%%)bnUg(E4M*41:"5:GuB(UDh/@-FXYFYRCjO8<mYBe#8e'g;K*1%q?or53bWPMI3,r'S0FOWUaD)!UZqBkdiC<GU6met&^`^]@6$cHS2b5Qle+C@8gPrZ:/7R5SR]8Ud)4+A`8#!@27r<KPbU,FHI<sN%Ktjg2'dGQlD^:3m'8aU5]nN99;.V:JL?,"e`0r(&-=e[/_RlS35F5"c*c2T:,tUDu&Xa&R\MLPS*@.&[SM5OUW3b!Ugqp5L7nOP5%hV;jBe9Q*s3jS62C%eV;,o\$sgX3/V>\kTpFQQ&6Wh5X4;,Ppu/H^/#F(=O$o7r!2g6,=f&^k9uU5Q"rrmo&k^t,T&=O@XZ2oDSB%=O8pj8A+cG>=GR'A[_RgEY>\A524"jqRb98OAi8,>11I$nMam16qSc*Pan6jrNmXufR,U58N&i?=*sE@5XB[8+!&Ft?1)pYb=o^B%=qRUC.RlgN"/&$)dJ:.>Xn6cQ3W\th7:_j;d@a_,d^F5f.%O#c@3-G'/mlkoA94lW,C3h"S^Mo+H6_C&[m*"!7,h\a5?(VT17m&>%Q&H"8Cp"M]Td<`u2RL_D\W+kA&rKYQS")t8r*r*mJ'ZM5,NRu!`iqUD3td1bG@aua?8:.`J5@ajg[R[ehBLD\e(Ge1N^V*5"GS)J%aX=5/j[se-.>>V,PkM!9fW3MUZLc5d/;on"l-Zl>eAH><fR`boPbq.j]Q.A<;EoMX:6bV.986>/1*X$1cX5=Zp3\XTMo!s1oq>'T%U>099C,\;P2Girorf@b]!g'fuLjhOm6gf6L6b`n3Gf0`A=:!?R&7%+f7!:Te`4#<aa_=HkT'NNLoI8=jGQ9#H'S#E@o8i6pI;EP`%G(;bE+?-bM)7P7;a(X@m<ag^c&"/H:)]j$/)-`mM$Y4<+(>,&[+#toe']sFo/4[jiaDushX";:t]+5Lpc(k5#2Q,3!P@K[pj&UgI%>JYi"V:Z-q+=kE#.]1inm6sE`%'m*iHP%+^fSm&ccHQXSm+@7>n%m8I=3<``g^RORo(0eDeml$`F=t.ph([W`T'")(k.U(pUa4qh%&ZKI3OHUo74$0_-_56GX<)&."[Ye0?&N>S8Q'.?[UgIaK[I@>t,n#f(bVpdUjsVd<'R$19nbj&P7rHg<f"b>q*k>Dg=jnuXG_B%C%NYruf,)'$Z_G8T:MUNFhO':tqZ:N*%1_cEq7cf"VK!StgUCmBbnNU/;,-7Hq6g=7O,nEVb?S%.4Wh*0`kE?RAPGKM@%b,l^dh-.7%>40J[&]p7o'Uro.jZ[5Q:W5^kC_$(rc^;b&@'spUoeA/!?HYH4AGfZm4TQ)cM^Usf@['D9kCNVYAPp;6+.SdhO7U+<Q[f>;77:G&%B[k?%V))m0mYr98O86L(Kf\m[]lI<Y<3kn=6,??\$o.FR$;)SPV'm>seW',DEY<D)"1pqJFtQ5h>19n7Ta#ZIPuOp0P4cJYG'Z[i%Nr&T>5,8d[XX&,eM4)hRXt_s8kU^eQ+5LQg"8un0]+jH6;EW;:baa,918c4pF\Y.h3YeWIf]4k=f9o0TPtBgI0k#,;]<AFF9Q`'-%2HK3=7[Ca)-A0WN@2&0FYHS>/YHS&I\sVQSg6l3l.r8*5YHWR9<ajJCkPN\n0$(a]T\X+LW/Wkd2J`.6<n,>1[o[D!crZE3m>d*!%D1D65BfBIVlG@BUj<R-1J&2]F`er4djg/-.B8J3O!fb,^e6U`Xk?hK42)j:&8'D(h;.Ng64EMMkYU=?6>u@b-0,of'8/Dt_-3CGV%\r0P<ltPRTj<Wg[gIQm$\r@Do8k,kl?;XCc;AI0X+o.th8:1<j>`',Lop73_*jI^nnm'=L'>$%,?'J]/U7,50VR$fpl9U]o%rie6%.@k;mZI%Z31/lHjMXoGbWi1T&g47YNh]*o@^KfQaHH`![Zk2jk3&'+'EB3%'<%[N-]Id-AWtDal8*>Nni'=jo*8%5i/JqVU(9;R>%3(1%m*+IY4hCIct!:I*FSjhqL3CQhE4^"t"(d*^M7_DJS]oVrI'CccnW&"/l:57+c+h"2-P+6:]8*NnsM0OnG<0Vcm\'s[+.?\p&%obXGqH>Ll@Qd\_k?q%K!O[+@-ermHmErqr^(/\\E`JDV"#9C$9V53%VX->H,gV&aa1@7-c+SVRNY1IP@+fW4Y-#&FNAJm'Kmi0'&%A7BoZ&[0U9EZEbI]V,3L&S)\^Nsr!kIIM@s,9`QCDdmLNc/c6DX"i41eW?:fObe$*UIdQ)^nVmTrk]pG#>GAbD2@`"C_BAMO`4kl%ie*aPCDNPdgTmt:8Z_Ip>_q0-gCh,[CaG]9]<ml!3!hu&$;F!bC/][oqdo(#,SP3.WQh1,fuQgHVoX_7miN:`?9.]RrPN.;Kk;R=%&Z6YsKaA[Y'7^N]-Bci:_*eBdF!VodSFY<7A?*JNaFds9'ql-.@9di'I)EtnJ5[%t@O2-*G7I-Q13e61E.gjrmOO&;>`+/DliB*Y%3>LO#G$&2u3$!l_A%b5aDG!>I8kr-VIVs19:c."Z&XqUNqqt0^KO2Z8*ZY2lpT)WNDYBDk7.63Li<9gc"C`s0LL+M*D'if!Vg$=L%G'^W\-`L@1?o0@a]gLb+:u`/a&14s#^4tSNf%2#in^'%KYf1+,&OIEIh-WW9=C)*jo(!],7>;Bk'cBKG=RkYp#ZOc/"/1XQCO4O.%qQ*HV&Y$XSeQpP^%-UmeLQ?oAHHg3=)poCjLdg'W$?7o_PR*S]?s@\Si[%2dY=jDT.$mTF_JMbR\q&8&h,K!UIRpqk`9%oY[co1b%[c\fu!Ju-9d,e+4!$3@.9h%@cL<-6uN7aRh&/d'F9Q@I/LD`N)'u_Mt;)rhf^iACC2F)=%BsVQ(@P$!SPg/p+;(MMA+7%BB]>#6c%,!.&&6n[rW!`mgK"\)P4+,a:(56W5CKdNQl[5j#L>m_d8f^,ND'&Cr2>;5J2:=0]@6-++No"k[C=%PaiN,0-K`S=7)@EEPXT@W:X%@E7sDqn+V7,)M2WOOL.5kGRG*lW*gZO%fj_9a9(P-:WVIXeO@)B$;;Pdi)8LLgUsS:BG-0-Ub:%\Z?-?F3GN>g5gu^dIr=A1oj-s%VDBeZi&mo`bTG5X?EkGjJ;n!Y+L\O*;<*OkL\pCYDhel,#M4.PgnqsCp[>aT-UUuP6#9s^0c7Tnk@n_>s,70sil(;K(]Sq^b(FIh%C31uLKXkaHEgek+c45#,-P#Hc5?>C9Uu4@b,'TJ@4IVRA(!Rcp=0W?XkfbE_l_k#_4caZe[e%k484b,4PLH=t5GWWp3f8XW,N]LC%(B^8Z5X4e#J<fCTKXZgh#"s7W:L6FkjEfUkXg#l2_1dWc8-kO!Mmqf]<*RA8)l()-(;$aS,b>WZ8h.rRN$dri.H-0%di1Q!lpGAq%q2cIsVp*4?Ak'3h1U<".O`eg*/9>F!r[%Hc8DQ6%bX`q,lAI.2(8k$?&"/R!)q]IQMYPflRY/TnHbW>"/m`RGeUeCm)1j5F&V$Re%E_]YU,*M7p`4oK-dIB_%jh_^OY*Xs`r'_oKP1-5a'_JTDC`?`Y*rBoZfmm*b&<Mk50p8;5FkC@m.o2sH\aMZ#QlaR@N&g9`F#T5>%:+cp\eQ@[7=X?hgAu3G9brY,I3Vu"0Fi*dUmC8"ZP2P2,@1R6+Y*YcO\8Nd51g\`o6iI]r`Er-'CJqQ=k&a?dDVf^km)!VYjA_aX%]@!#3,uXbK8gPrZ:/7R5H;8TDnqLN"L`E[\7V'e3E[*?:(s.S=eX[1#;Y,u\7Ztp\88p=G1?Tgk*>qe7gl@=b7rCiZ4=%B\6"P3b%30!dF*Qe*^4%oT7aM!_GGOd;2RttAG%c"S0o"=QW\T#`',4XX1<LBL1\1U^ML_RNs`6N`8aQ^qCK^51TRj]#N-oj;IqK9WLk0TX;%?'68XF#m1O[,3A4,PG7"=k#to=k@k.-.SaT^KQ?$44/eG/28>hX8%b.Pr3nr[$N?0bLI4kBVifr.`tITUNR]U7@*%9mV'O&"PG[B%ZQiKU]H+IOfj8[A@s^-HO0Xlr6YPPE^o!j.KN8gl"db[l=\iB38/Gl2.LDZ)-Iq6\mCc6K2mM%:>-*UGfWMq3(a`9+$M26Z887-)%HJMs7OV8<W,:1@pcblmoba1^6$Qe)hFT#S_RmQ[G]hH+g?'$>5ChmW%1&p1Y3N1]PM=I2,>$;pm)_2.7TWUZRD!I,E2I7\D[]Bu_%RmcVSEFF,c3#V65ENWpJNDh*";&+*iQ1OGR/W^LHBUuB49reHk1'O)mPDM[!7+GCFjq]]>nkfTHS#\rB%9R)HCZ$NqOLmu",&p.K%-'O6lY:'RB65?=GF.+FKFun0b:9?F1UAg;VaV"-jXVn;9_$aEQS[_\-<U$S>b:.=8XXDQ%h*M[$]sc+`C9cbuS.h$;pTlp3*fLs'%\9V)tmC]&k6BOm?"J7t;5QCJj?('Lk,<"4H6[oP!p"..?\D-j)@_CLPogcq33q'6Y=4@"]!-J/s^t9Ah7b/]5jgtF0#\ErlOPBVI%HL3aDWF.&W`q'FK$3ScX=^"D6:=qJhEn?`efKW0?FVItM2gR\ZFD#sA.<CDa,rCd&23u%b8Og=n+0;p"7ZpG:-+T5eUn)jM(j^.G%JRjhdSm-'S>6iJk>I3'??)?9Br,eN7,3HFm#[Wqo#[l+p6;+b6VW[ZG+-`AO_j4/GDP3-1a^rn9p>"pd>F23]BSu\6-qTdpJ7<&Z%U-oTOmik=/fGbESqSn>IKp%6HPXJ9*-09.S,tTEk3'hF;)R\mcBf+km6V/NrTrR7BlEtDMagE6]c`3Gc"7n8a!(0`qLoc=8N3%VC%XOjW:0i'7'*O2X,oa3<U%_tn@"!Yl^7\b-*]ls9ABso)SG7"#Tfs+#*VpV'%f($\io$TQ\f1K@QB;]*A84Q,UfVp2G%O6#!isKST%Tgjl0AXWas;)NicmcdgmYrSSm?1W`Am2dYQCsOfoB7&bI5MIthp^n_pf0&#)]>b.A>8\dcCh94-,9kTJR..FV'p6/JbUOf,lpGi2%]lG%Y9@f9;]fY-gCLk\0eu[q+`%+>HA^.U?A?E4U4g,j=o-/!jWg@;#]<;IX.n<#saiS8HYH&WpB\:Qk[3occg+FJEO"JiQZ"9Fh%[X=H+[S5/jQ>-3JnmVCI1//ip`p%!VLZr<l1js2.VN3<YF8FOp>D5cVblR6&Td4'5N2-_*5IZTI#WP&X)bCX-IOsCkTkeZ]@\G&V%/HCGIRDI!s6s/o"1C6r*PpB.#PC@BrKnK)$-u$U`eCn")f,Aq5*EnUA"k01lal9dG8Ks9S+G#Xii:&I(#nDncQJ4)KS)lOD^1Fha%M6+4A<b\bnLN8m]6b1H$oY2Fh&&sT@mD#kg/,$1E]BrbO?h1D4ZhD/FL[bk9lH&^QS;;!]r?o%J@UGW@X*NLI\AD\f8nGseOIVh1%rVSZEdn'FK9?3i\V@JG$Ipj9&1!ZF^01*jLmV)*KE9ab+m91*D,usY&Lm&BEZPU'Ks!'QMSqemAd3.smRXOm"OG75.c)@.6f-31c%(IjJ<1rc\%X*jGnSX?at?t<LuTs;9F=Q2'9I>Q'e,f"(S@mS&=gr+B*YO[@#*Ac?Ud`tGOP(lr#R#FMJV?(k2`ZsVI[%Y1mdAW@:%UDGYbA]pd099*aiF(jX/bA<Ia)S'OS$cbPb'+h=%QS5R)#HTK05&t?C$ee*'NG@.PI=tS3)IIa6H`s'&Nku47V]/O_@3787LKE72%9:%uU;S!mmW1%eE]ITtKRl)i(aPfQH^s&\V-i+ig:Ypr(8h*E(S0n44J6Se_?_sP#jKXk+1U+</Z.%G]h"A%m35gfIrD-a8CAn/k%"sSriMHP^Dj9YY_M:MTR1q%tarq/[F)p8BrO(_&"@3^o]a^nAPZN-`Rmo8VoLs8\4/`Oa'2NGa61it/7'3E_[f9q.N\KXZ?<K%@.%qeUrQE=ImED:pt6X)7.*Th(ZaE$0>p)0MDf8"-K&\mpoMLQTXbc4N+C7$ckgo<.FR=qIqaM,A9J0f]j!=_qjb8n?$ln&j4%\kuZu%D(<Z(0!,$>[$rO;g5Ut-.iGUkCV0"V(`k!e_9=8a81ut>MJ^k$VFRoERT*tA(+17aVahWCThgYFCEU^7:i/3:hl1Bq<3Al5)R\nB%[WBZ+qBQ18@?CHbH!F3g,HPEI&I6ur.U^FSe6/3X1%lE!h_Cb;W5&]F(5')?j/llU&JuO6Z?*E@k<DBrFT+Yo6g&s&SAupa0:LT>%2WdPF^iRSZ["3!uN[1Js,#H^N(.9]D@T:Et(agNNPTsnKJ2_#7K2Wf#[Omdj+_""UUQR6;1apse8QJON>Vr"Za6$=&RudWk-7%sV%k^u!/'(J=`<-___5QVN,82(;O'$/,u,[e0#5f2AP;/f5h+/./#51TN*#X()bP3`beU1P^Ra@gk<XN8TZCflgdp?WP?1/:70N"!QZ%,,7MP2O6FPc\>8Op2'$"/07BO+4?"fFoIIlCs#7S/$DAcKV4N,Ihs-19FtNNf9f#A<G!/gM9*hDOb><rbD;\2KDU\=?6Yu&'NGK8%7Y>`&7e1<.=XL.qlpG@T`XSmtnLZ`Q:^2=.?Gg726TYoRMFlo@`u-60Z=ufa$l]L5Xh!&&]p1[BUe3,g-9+`rI4.kI2*>Zm558um%LA_c9(q(b%WF-j<r2@K;D=Y,+7?<CtLn#I>-7h66`@8EW[@V]+,o*C-3B<)q\_kuPYPO1QD*@%M;tMt2bA1!pl5$VuO)Z9#rC#03%2;H&KC:0SA4h;drQWqKFWG6tV`a*Ds8I3m7)"ts/6Od;DRj_dR37geKShG#i"BA&h:6U,J-\2J[mNNUT\QtpD4XX]?C<-=,>>G5N%%(DfA],XA,N=b);V!'fN47bIpPDrtjH8_^m;B:(PO?>NtqRO:mL:3iTBuHk\G;TJ?e*MXVRV!X'6+q@ma$[mrOU.]XD-%;aL=[:j%,)8qq"Lb@c&"L'ZcJj/>9"6;"VGYg(I+K&#op]i]C;4GF7$#TDmaWXU(l%hs%!:6_L^8+W+Gj#[4s8kO/M])7K-Y8"(WJ[AK50T4%''KDQcf!t)UJ\WUQ^`3!R:Y&]EsT83`u0(l$+b*I'-k$SQ?9J770GO]O5Q1YYuu)[;L!s2TbB@LM:$n/TsWUk4/=,9W@0_d%GGq<%DH<"AAH$G_n;tAs+7>JFs(6VkMC:U#GqTE-(cC27e$pB04$R3P[t"7imka[hDuSoY^\Hu!s5p5Os6CcAqtZ:;rp];Ns7,28^X-bb%IeiY$I/iT+^ARO\^O*]mma$CYnY`"or:\0\qr(o]qW/gupkO@tq,^r&;l-NIinpX2V]YpOFDKS/2V%92s$'ocbP/3hrpNoqIf5<l%s7F>Rrp]$9^]!P<^AI?Urqm9krqpVu0F5/Nr;WnrgE1qEq8Y])l$n!YpW`<kQbWCf^]2nE^]3[[^\H(Bc@>ij+9(Brhu:[j5Q0Eq%IIiA(r/YdrnGPTMo^*b#o_hSCr8Fj:rnm1ZI/CelFh-u@o)A4A%mPLBf:RQjl2*,`rRW.k]cuo08b-6dipZpEJ,AC.!E),6jo~>%AI9_PrivateDataEnd