%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: bivariate2.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 265 186
%%HiResBoundingBox: 0 0 264.6504 185.1494
%%CropBox: 0 0 264.6504 185.1494
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 6188 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD047DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87D7D7DA87DA8527DFD7EFF7D7DFD7EFF7D7DFD7EFF7D7DFD7EFF7D%7DFD7EFF7D7EFD7EFF7D7DFD7EFF7DA8FD7EFF7D7DFD7EFF7D7DFD7EFF7D%7DFD7EFF7D7DFD7EFF7D7DFD37FFA8FD46FF7D7EFD37FFA9A8FD45FF7D7D%FD7EFF7DA8FD7EFF7D7DFD7EFF7D7DFD7EFF7D7DFD7EFF7D7DFD7EFF7D7D%FD5FFFA8FD1EFF7D7EFD5EFFA8A9FD1EFF7D7DFD5FFFA8FD1EFF7DA8FD42%FFA8FD3BFF7D7DFD42FFA8A8FD17FFA8FD22FF7D7DFD5AFFA8FD23FF7D7D%FD3DFFA8FD05FFA8A8A8FD15FFA8FD22FF7D7DFD3DFFA8A8FD05FFA8FD39%FF7D7DFD3DFFA8FD17FFA8FFA8FD26FF7D7EFD54FFA8A8A8FD27FF7D7DFD%35FFA8A8A8FD1FFFA8FD26FF7DA8FD2EFFA8FD07FFA8FD20FFAFA8FD25FF%7D7DFD2EFFA8A8FD27FFA8A8A8FFA8FD22FF7D7DFD38FFA8FD08FFA8FD0E%FFA8FFFFFFA8FFFFFFA8FFA8FD0AFFAFA8FD17FF7D7DFD39FFA8FD06FFA8%7DA8A8FD04FFA8A8FFA8A8A8FFA8A8A8FFFFA8A8FFFFFF7D84A8FFA8A8FD%06FFA8FD18FF7D7DFD3CFFA8FD06FFA8A8FFFFFFA8FFA8A8A8FD0CFFA87D%FD0DFFA8FD15FF7D7DFD3BFFA8A8A8FD05FFA8A8A8FD05FF7DFD0BFFA8FF%A8A8FD0CFFA8A8A9FD14FF7D7EFD3EFFA9FD05FFA8FD11FFA8FFFFFFA9FD%23FF7D7DFD2FFFA8FD0EFFA884FFFFAFA8FD13FFA8FD09FFA8FD11FFA8FD%0AFF7DA8FD30FFA8FD2FFFA8FD11FFA8FD0BFF7D7DFD2FFFA8FD0AFFA8A8%FFA8FD05FFA8FD2EFFAFA8FD0AFF7D7DFD32FFA8FD07FFA8FFA8FD05FFA8%FD09FFA8FD1DFFA8FD13FF7D7DFD31FFA8A8A8FFA8FFFFFFA8FFFFFFA8FD%0EFFA8A8FD1BFFA8A8A8FD12FF7D7DFD34FFA8FD2DFFA8FD1BFF7D7DFD34%FFA8A8FD0BFFA8FD17FFA8FD05FFA8FFA8A87DA8FFFFA8FD16FF7D7EFD1A%FFA8FD11FFA8FD05FFA8A8A8FD0BFFAFA8A8FD07FFA8FD0EFFA9A8FFFFFF%A8A8FFFFA8A8A8FD19FF7D7DFD1AFFA8A8FD0FFFA8A8A8FFA8FFA8A8A8FD%07FFA8A8A8FFFFFFA8FFFFFFA8FFFFFFA8A8A8FD07FFA8A8A8FFFFFFFD04%A8FFFFA8FFA8FD05FFA8A8FFFFA8FD12FF7DA8FD1AFFA8FD13FFA8FD0DFF%A8FD07FFA8FD05FFA8FD0FFFA8FD05FFA8AFFD06FFA8FFFFFFA8FD11FF7D%7DFD23FFA8A8A8FFFFA8A8FD05FFA8FD15FFA8A8FD0AFFA8FD05FFA8FD0F%FFA8A8A8FD05FFA8A8A8FD0CFF7D7DFD24FFA8FFFFFFA8FD06FFFD04A8FD%05FFA8FD0DFFA8FD07FFA8FFA8FD17FFA8FD07FFA8FD0DFF7D7DFD2FFFA8%FFA8FFFFFFA8FFFD04A87DA8A8FD05FFFD05A8FFFFFFA8A8A8FFFFFFA8FD%05FFA8FD05FFA8FD20FF7D7DFD2FFFA9A8FFA8FFA8A8A8FFA8FFA8A87DFD%07FFA8FD06FFA87DFFFFFFA8FD05FFA8FD05FFA8FD21FF7D7DFD11FFA8A8%FD15FFA8A8FFA87EA8FFA8FFA8A87DA884A8A87D53FFFFA8A8FD0DFFA8A8%FD04FFA8FD2CFF7D7EFD12FFA8FD17FFA8FFA8FD05FFA8A8A8FF7DA8A8AF%A8FD43FF7D7DFD29FF84A8A8FFFFFFA8FFFFFFA8FFFFA8A8FFA87D7DAFA8%FD0BFFA8A8A8FFA8FFA8A8A8FD08FFA8A8FD22FF7DA8FD28FFA8A8A8FFFF%FFA8A87DA8FD07FFA87DFFA8FD0CFFA8A8FFA8FFFFFFA8FD09FFA8FD23FF%7D7DFD1DFFA8A87DFFFFFFA8FD08FFA9A8FFA8A87DFD07FFAFFFFFFFA8FF%A8A8A8FD07FFA8A8A8FFAFFD30FF7D7DFD1CFFFD04A8FFFFA8FD0DFFA8FF%A8A8FD08FFA8A8A8FFA8FD0CFFA8A8FD2FFF7D7DFD1DFFA8FD05FFA8FFA8%FFFFA87DFD05FF7D7EA8FFA8FD05FFA8FFFFFF7D7DA8FFA8FFFFFFA8FFFF%FFA8FFA8A8A8FD30FF7D7DFD18FFA8FD07FFA8FD04FFA8A8FFFFFFA8FD07%FFA8FD05FFA8A8A8FFFFFFA8FD07FFA8FFFD05A8FD31FF7D7DFD17FFA8A8%FD06FFA8A8FFFFA8FFA8FD05FFA8FFFFA8A8FFA8A87DA8A8FFFFA87DA8FD%0EFFA8FFA8FD32FF7D7EFD22FFA884A8FFA9FFFFFFA9A8A8FFA8FFFD0BA8%FFA8FD07FFA8FD13FFA8FD13FFA8FD11FF7D7DFD19FFA8FD09FFA8FFFFFF%A8FFFFFFA8FFFFFFFD05A8FFA87D7DFFA8FFA8A8A8FD06FFA8A8FD06FFA9%A8FD09FFA8A8A8FD11FFA8A8FD11FF7DA8FD18FFA8A8A8FD13FFA8A8A8FF%A8FFFFFF7DA9FFAFA8FD15FFA8FD2DFF7D7DFD19FFA8FD13FFA8A87DA8FF%A87DFFFFA8A8FD0BFFA8AFFD0AFFA8A884FD2CFF7D7DFD26FFA8FFFFFFA8%A8A8FFA8A8A8FD0BFFA8FFFFFFA8FD3DFF7D7DFD13FFA8AFFD10FFA8A8FF%FFFFA8A8A8FFFFA8FD07FFA8A8A8FFFFA87DFFA8A8A8FD3CFF7D7DFD0EFF%A8FD09FFA8FD09FFA8FFFFA8A8FFFFFFA8FD0DFFA8FD09FFA8FD3BFF7D7D%FD0FFFA8FD07FFA87EA8FD07FF7DA8FFFF7DA8FFFFA8A8FFA8A8FFFFFFA8%FD0FFFA8FD3CFF7D7EFD18FFA8FD08FFA8A8FD07FFA8FFA8A8A8FFFFA8A8%FFA8FFFFFFA8FD0DFFA8FD37FF7D7DFD21FFA8A8A8FD06FFA8A8A87DA8A8%FFA8FFA8FFFFFFA8A9FD0AFFA8FFFFA87DFD36FF7DA8FD28FFA8FFFFFFFD%04A8FD04FFA8FD0DFFA8FD3BFF7D7DFD09FFAFFD11FFA8FFFFA8A8FFA8FF%FFFFA8A8A8FFA8FD05FFA8FFFFFFA8FD09FFA8FD40FF7D7DFD08FFA8FD11%FFA8A8A8FFA8FFA8FD05FFA8FFA8FFA8FD0DFFA8A9FFFFA8FD41FF7D7DFD%09FFA8FD11FFA8FD05FFA8FD05FFA8847DA8A8FD09FFA8A8A8A9A8FD0FFF%A8A8A8FD32FF7D7DFD28FFA8A8FD08FFA8FFFFFFA8FFA8FD45FF7D7DFD23%FFA8A8A9FFA8FD10FFA8A8FFA8FD42FF7D7EFD24FFA8FFFFFFA8FD11FFA8%FFA8FD41FF7D7DFD27FFA8FD11FFA8A8A8FD42FF7DA8FD30FFA8FD09FFA8%FD43FF7D7DFD31FFA8FD4CFF7D7DFD7EFF7D7DFD7EFF7D7DFD7EFF7D7DFD%7EFF7D7EFD7EFF7D7DFD7EFF7DA8FD7EFF7D7DFD7EFF7D7DA8FFA8A9A8FF%A8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9%A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FF%A8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9%A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FFA8A9A8FF%53FD7F7D7D%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:59:04+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T13:59:04+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T13:59:04+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>180</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAtAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7l5I8keS5/JegTTaBpss&#xA;0um2jySPaQMzM0CEsxKVJJxVOv8AAXkb/qXdM/6Qrf8A5oxV3+AvI3/Uu6Z/0hW//NGKu/wF5G/6&#xA;l3TP+kK3/wCaMVd/gLyN/wBS7pn/AEhW/wDzRirv8BeRv+pd0z/pCt/+aMVd/gLyN/1Lumf9IVv/&#xA;AM0Yq7/AXkb/AKl3TP8ApCt/+aMVd/gLyN/1Lumf9IVv/wA0Yq7/AAF5G/6l3TP+kK3/AOaMVd/g&#xA;LyN/1Lumf9IVv/zRirv8BeRv+pd0z/pCt/8AmjFXf4C8jf8AUu6Z/wBIVv8A80Yq7/AXkb/qXdM/&#xA;6Qrf/mjFXf4C8jf9S7pn/SFb/wDNGKu/wF5G/wCpd0z/AKQrf/mjFXf4C8jf9S7pn/SFb/8ANGKu&#xA;/wABeRv+pd0z/pCt/wDmjFXf4C8jf9S7pn/SFb/80Yq7/AXkb/qXdM/6Qrf/AJoxV3+AvI3/AFLu&#xA;mf8ASFb/APNGKu/wF5G/6l3TP+kK3/5oxV3+AvI3/Uu6Z/0hW/8AzRirv8BeRv8AqXdM/wCkK3/5&#xA;oxV3+AvI3/Uu6Z/0hW//ADRirv8AAXkb/qXdM/6Qrf8A5oxV3+AvI3/Uu6Z/0hW//NGKu/wF5G/6&#xA;l3TP+kK3/wCaMVd/gLyN/wBS7pn/AEhW/wDzRirv8BeRv+pd0z/pCt/+aMVd/gLyN/1Lumf9IVv/&#xA;AM0YqkvnfyR5Lg8l6/NDoGmxTRabdvHIlpArKywOQykJUEHFU68hf8oN5d/7Zll/1Dpiqe4q7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi8+/wDK&#xA;DeYv+2Ze/wDUO+Ku8hf8oN5d/wC2ZZf9Q6YqnuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvPv/KDeYv8AtmXv/UO+Ku8hf8oN5d/7Zll/1Dpi&#xA;qe4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhdOj1BImF9Ksshb4SoA2p7Ad+g/E4qisVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdiqReff+UG8xf9sy9/6h3xV3kL/lBvLv8A2zLL/qHTFU9xV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpF59/5Q&#xA;bzF/2zL3/qHfFXeQv+UG8u/9syy/6h0xVPcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVWTTRQ&#xA;xmSVxHGvVmNAKmg64qvBBFRuD0OKuxV2KuxV2KuxVZOsrQyLC4jlKkRuRyCsRsSO9DiqnZR3Mduq&#xA;3DBpBXoS1B2HIheVPGn9Sqr4q7FXYq7FXYq7FUi8+/8AKDeYv+2Ze/8AUO+Ku8hf8oN5d/7Zll/1&#xA;Dpiqe4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVC4vbW2aNZ5AhlNEqDTqBuRsBVgN8VXXFtDcI&#xA;FlWoU8kYEqysNqqykMDQ02OKqNjeWsjvaW6MgtfgC8aLxUlPh9gUIFfDbbFUXirsVdirsVUL3619&#xA;Xb6t/e1HSnLjX4uPL4eVOldsVVIfW9GP1+PrcR6vCvHlT4uNd6V6YqvxV2KuxV2KuxV2KuxVIvPv&#xA;/KDeYv8AtmXv/UO+Ku8hf8oN5d/7Zll/1Dpiqe4q7FXYq7FXYq7FXYq7FXYq7FXEgCp2A6nFXAgi&#xA;o3B6HFULfagtoYgUZzKSBT2psPFjX4V6nfwxVFYqskghkZHkQM0ZqhIrQ4qvxVoKoLEAAsasR3NK&#xA;VP0DFW8VdirsVS+9ttWknJt7hI4eNApBr03G3cn9uu38vcqqul3Uc9qnGb1mUDk9CKg/ZI5AFhTo&#xA;3fFUXirsVdirsVdirsVdirsVSLz7/wAoN5i/7Zl7/wBQ74q7yF/yg3l3/tmWX/UOmKp7irsVdirs&#xA;VdirsVdirsVdirsVUrq3S5geFyQrjcqaHY1H+0dj32xVu3gSCFYkJKr3PXfc9KAfIbDttiqpiqFZ&#xA;9Q+voqov1Oh5vUV6H3rWtNqUpU17Yqqw3lpOaQzxykjkAjKx41pXY9K7Yql+qanqVpe28dvYvc27&#xA;isroKnr8QBqFUovxfF9r7K74qitN1GO9idlADxtxdVbkPmpoCR2rTqDiq2XUlhu2hkjKQoheScmg&#xA;VQpYsa7cBShNevbviqna6wl5cRi0QzWjg1uFrQECu9Rt2FD8W9aU3KqtYXN3N6n1iAw8SONRTfeq&#xA;9Ty4/wAw2NdsVbhbUPr0gkVfqnH4GBHWo407+PKvtTvirH9cuTo14zQRSmO8ABENFPN6IFU9Duop&#xA;9khmADDlhQm0c91BY2f1ZGu1lHIyEcTRviVeJNUFGoC3SlDgSmmKoW8bUBLB9VRWjLfvuRAoKj8K&#xA;cum9adq4qiEkjcsEcMUPF6EGjDehp0O+KrsVdirsVdiqReff+UG8xf8AbMvf+od8Vd5C/wCUG8u/&#xA;9syy/wCodMVT3FXYq7FXYq7FXYq7FXYq7FXYq7FUPZX8F4jPEGAUj7QoSCKqfpG9Dv4jFURiq2VI&#xA;5InjlAaJ1KurdCpFCD9GKoEadbWolu7aIzXJBdQzkl348eVWP2ioC18NsVV4J7l7H1mhPr8WKxfY&#xA;LFSeOzfY50BoelcVQGk6a63k2ouGiknJ5R0IqPkxYqvIluP8xJrviqazQxTQvDKoeKVSkiHcFWFC&#xA;D8xiqnY2NrZQCC2TglSx7lmPVmPcnFVfFVK7jnkt3SBxHKR8LH57jbpUbV7YqhZ9KS8so7e9dnK1&#xA;5FT1DAqVNRv8Lca0r8sVR+KqEd9bvdvaqayxgk+G3EsPo5r9/wA6Kq+Koe1sbe2eR4gQ0lASd6KC&#xA;SFHsCxP04qiMVU57iG3iaWZuMa0qdzuTQAAbkkmgGKropY5Y1kjYPG4qrDoRiq7FUi8+/wDKDeYv&#xA;+2Ze/wDUO+Ku8hf8oN5d/wC2ZZf9Q6YqnuKuxV2KuxV2KuxV2KuxV2KuxV2KoO+kubaIGzgWRmYl&#xA;lpSpO9NunM7cu3U7YqrSXltHOsDvSV6ELQmgJovIjZeR2WvU7DFUNqcV7MYoIkDW7keswIBA5Dc1&#xA;7Ab0o3Lodq1VdaabNbXClLhjbItFjYk1qNwR9kfFVqgf5IoopiqKu4pZbd44pDE7DZxseu4r1FRt&#xA;UbjtvirdtHJFAkckhldRu57/AO10338cVVMVQrtqH6QRVRfqXH42qK1ofprXjTtSte2KorFXYq7F&#xA;XYqpyG2h53EnCPYB5mouwOwLH54qqAgio3B6HFULeSXTWyvY0kLkHkpUkoR1Svwnt1PTFURH6npr&#xA;6lPUoOfHpXvSvbFXSxRyxmOQckbqP8++KtoiIioihUUAKoFAANgABireKpF59/5QbzF/2zL3/qHf&#xA;FXeQv+UG8u/9syy/6h0xVPcVdirsVdirsVUrqSaO3d4U9SQUovXqaE070G9B1xV1rJNJbo80fpSM&#xA;PiQ9sVVcVdUVp38MVdiqC+t3SXM/rxhLOFC/qgEn4aHtXlUV2AqKd64qpzy3t9aB9OkEEoYhhKOj&#xA;Dx48gwU9Qp36chviqlZaVem+F7fT+pIhIjQAGilQOJICqQGqwPANv16gqptiqFF/XUDZ+k2wr6nb&#xA;pWtP5e1fHbFUNqtlqk1zazWVz6SxMDJGeh3/ABBGzA7/AMpXeqqLF/bG7a0DfvV2Phy4huPz4sDi&#xA;rV/cXEEIeCIysWAIAJoKHeg3NTQbdK16DFUQhZkVmXgxAJU0JB8NsVbxVC2dxdyyzrPAYljakbHv&#xA;uduprsA3LpvTqDiqD1mrG3uYFe4MMpVliboVNSNuj1XhXwJBpXFUTBLfXMVzHJGbV6FYpaAlSwI2&#xA;BJ5cdjXofoxVCNHz4aVdCWRnDOtyrENGSGIKP9qiD4S5PUgUo2yq7SfLdnpunzWCMzwTAqy14gLT&#xA;jQAd6dT1PfFVTR5mDT2jLQwNyJYjmTIzM3Id6/a5ABfioOmKojT783iM/pNEFNPi/wCInpRl6MOx&#xA;2qcVREUsUqCSJ1kQ1o6kEGhodx74quxV2KpF59/5QbzF/wBsy9/6h3xV3kL/AJQby7/2zLL/AKh0&#xA;xVPcVdirsVdirsVdirsVdiqFi06GO+kvFZzJKOLKTVd6e1f2R1O3bFVn1W1TVPrDTUuJVokRYAni&#xA;KGn7RUD9npXfr0VRYkjLsgYF0pyUHcV6VHvirG4tRktraGd7+L6tHIAUVWBYEBiyrx+yyBiB9lAS&#xA;3KijiUJrN5i0eL6v/pCuLoc4mQ8hwrTmSOgrt88CVC71S7hvLmAPCXWPnBbq6tOwFD8EdeTNTnsQ&#xA;BXiPE4qo6D5nXUZ/qjxEXEYYO6kMp4GhYFaqV/ZLA05VA6YVT7AqQ6lBdah66ratFLC4VJxQM0dW&#xA;Hw8uAYjZ1PL4a13I4sVTyIymJDKAJSo9QLuA1N6e1cCpQNRbVZLi30+X0ZLOTjIxqOpZQ3QV4shb&#xA;j0YUqdyAqiiqR6tza7NZFFLemwBFACfsgEqStRWtaGlRiqKu7gW9u8xUsEFeK/On3eJ7DFUPpFvb&#xA;RWitAjIslDRjWgUcFAPdQqgKe4xVfPfNFeQ2/oswl/3YOnWmw706t0oPHFUVirsVQ8VhbRXLXCLS&#xA;Rgw9hzIZ6f6xUE4qryRpIjRuoZHBVlPQg7EHFUBaaLbWt491Gzc33bkasTxC7t148QPh6V364qmG&#xA;KuxVIvPv/KDeYv8AtmXv/UO+Ku8hf8oN5d/7Zll/1Dpiqe4q7FXYqhdQ0+K9jVJGZQpqCp/zofBh&#xA;uMVRWKuxVzMFBZiAoFST0AxVqORJEV42DowqrKagjxBGKt4qkusPIuo24trYy3LBayHpxXkVPElQ&#xA;/BvtVYceQI3pRV1nYaXpl9c3RmcXMqF5o2Yuqj7b8aKCzbV+KrUHhiqhFe+WtYM2kCIB+Th4mRQP&#xA;VSnqAUJV+II5Uqv7J8MKtN5SjbSZLVmD3BkEkUr1PHjxHHlSu6pQVB41pvjapBq+hny/b2t8iSaj&#xA;qwYLFIfsqVAqUU/bncj92tQvLoOqlQy7Trm8WZbe7twLpkU3E6UoW41BOw5AfZ5bVbooGBKYiWIy&#xA;NEHUyIAWQEcgD0JGKrsVQGq6obFoB6fMSk1PgFp1p9kb/bb4R3IqMVQ8GoRNOjWNo7JcODNKRT4W&#xA;oVP+SCrmTeny5NiqIhIuNRkaW0KPBVY5z4A7V7GtSVpWgrXiTuqj8VUL26+q27TceVCBuaKKmnJj&#xA;Q0UdSaYqqQyerDHLwaP1FDem4oy1FaMOxHfFV+KuxV2KuxV2KuxV2KpF59/5QbzF/wBsy9/6h3xV&#xA;3kL/AJQby7/2zLL/AKh0xVPcVdirsVdirsVQ9rf29zJLHESWiPxV7gllqP8AZIw332+WKofUtGS/&#xA;krLM6xGMxtGmx79D4GtWFN6L4Yqo2FparpLafp9zvESWkU0NXcyNSnRXJYAr0HTpiqIe7ayNrbSc&#xA;p3lopl8TUDbrWla7mvEE1JG6rd5cXkFyshCjT0TlNITuOtdvtV+zxoDXevbFV0I0+YjUAqhlDBpG&#xA;24lKo9d6VWhUn8aYqkFhY3SNdX99BBaymgtJ4KPyA5cOKoCWUB2KbVqSaHrhQyDTJA9mh9dLkitZ&#xA;I25qKmqryqS3FSByO5698CULc+YbSC7ktCpMyLyoTQDcAl/5F32J60NOm6qC8wf4hKQX2kFwOCmS&#xA;Aj41BYcv3RIVjwZtjuGUAdSQVRFotxBPazS2bG6uEH1ll3RGkIMnGgp1UFixFf2RWoAVH6hfiyiW&#xA;QxtIGanw/KtO+5pRR3NBiqA1LV7OLU47O4s5ZmRfUSRF5GvUAKN3BIptWhpUAfFiqnp90dUl9S15&#xA;WsdtLWVVqEcliWYU4hufE1rX4WDbGowqnuBXYq7FXYq7FXYq7FXYq7FXYq7FUi8+/wDKDeYv+2Ze&#xA;/wDUO+Ku8hf8oN5d/wC2ZZf9Q6YqnuKuxV2KuxV2KpXd6qLC+EbWrCCWrPMi9SFFXJ6GlAvHdz2F&#xA;BiqaYqh/qFsIZoowYhOCrshIYVBHwn9mldqdMVQuj6Tcabp72oujNISxjkdaqpI7JXpXfiCBiqIt&#xA;YLoWrxXUgZ35AEUYqpFKFiqhj/sB4U8VUG1ra6dpTwXcnqW5aqKo4hAoDALyY048C9WbxxVJ/US7&#xA;gup7WaQ2KlRCweiE8gatIu8deJfkvxDlXwXChDTK2jaQuraXdNMsqJGFkXiA3H92ZeNQETcBaDZv&#xA;td8VRNhpU7yadfXKz3E7yCVXkqGVSQAXA+FZAN3YUBHwCtdlWSW0eoLczNPKrQMT6SgbjfbsONBs&#xA;d2r1+HoQlFYqgbaS4mvpJo7hJLMfD6YrUbDtTx+INXcGlOhxVHFQSCQKjofDFUKx1D6+gUL9T4/E&#xA;ajwP08uVKdqV70xVbFq1jLeNZrJSccuKn9rgaNT5EHr9G2KozFUKkN8NQeVpVNoVosVDUbD9Rqa9&#xA;60psMVRWKuxV2KuxVC2UV+jSm6kWQMRw4/TU0oOIO1F3p/MeuKorFXYq7FUi8+/8oN5i/wC2Ze/9&#xA;Q74q7yF/yg3l3/tmWX/UOmKp7irsVUru5W2tnnYEqgFQPc03PYeJ7Yq1FOZ7UTQCjOpMaybb9q0r&#xA;tXuPoxVbYfXfQP1unqcjxpSvH/K47da9O1O+KqUWqafcX8lgrcriEF+JGxKEBuJPUoXXl4VGKo3F&#xA;UJfarYWBjF3MIjLXjWpoq05O1PsovIcmOwrviqC8w6hHa/VkNy0Ekr0UKOtKfEen2SRRf2ulDiqL&#xA;1l3TTpGR2jaq0ZSQB8Q+0w3Vf5mHQb4qhLGykuNP9HUpfrEVyqGNJVo/Jfj5FTsGBA+EVA41qa4q&#xA;qaJ5etNJs5LSNjNFIaESAGq0pQjoaj7Xj4Yqj7a1gtkZYV4hm5MSSxLUAqSxJOwAxVStJNQa4nW4&#xA;jVIVb9ywO5FTT5/DQ9t9t8VQqW+qQ6wXVvWs5gS5bYrUk0O9PgoAvFdwTy8cVc9zd2EztcsZ0nf9&#xA;0EB2FT4/tUZVCDrxr1JxVHW1nbWwKwRiMN1A8B0A8AOw6DtiqtirsVQ7afZNdfWjEv1igDSDYtx+&#xA;zyps3H9mvTtiqIxV2KuxV2KuxV2KuxV2KuxV2KpF59/5QbzF/wBsy9/6h3xV3kL/AJQby7/2zLL/&#xA;AKh0xVPcVdirsVdirsVUY7G0jupLtIlW5lAWSUD4iB0xVUkkjiQySOEjXdnYgAD3JxVLtX0830lp&#xA;wETGF/VBcBqHbi1CDVfFRSppuOuKou7isfguLsIFgIZZJCAoNRStdvtUIr3oeuKoHVnS9DWUJP1l&#xA;PjiJH7suErxPjRW5DtWm9RiqQ3VlrVpqkWpS27SwxRkysXqeCHkDIyn7cfENxUUb4hXfiChP4o11&#xA;aG3uyz200RIZRTkjAg7BqhW2HUH4SQfYJb0i4kE09nK7yyRszc2qeIBC0PIsy8j8S8juOmwxVFWl&#xA;pcQ3E8slw0qStVIyTRRUnvWlK028MVRBliEixF1EjglUJHIgdSBirpWkWJ2jT1JApKJXjyIGwr2r&#xA;iqFhkv57FyVWC5IIjYggdNm4tuv04qrWa3S2yLdOHn35MKeJp0AFQOu2Kq2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxVIvPv/KDeYv8AtmXv/UO+Ku8hf8oN5d/7Zll/1Dpiqe4qhU0+NdQe95sXdePCu3QD&#xA;7vh2HiSe+yqKxV2KuxVbLGJInjLModSpZCVYVFKgjcHFUJFpVuln9VYll5c1IovFhuCgGy0p0+/q&#xA;cVdDpNtDcxzRFlEShEjB2ACcAK9ePEfZ6V364qqypZ3gaIsHaJt+DUdGoR1U1U0JHy9sVSG6g8wP&#xA;qDW9tDHBYALDGwXpGhHFOQ4txZasxrQD4KFjUFDI4I2igjjZzKyKFMjdWIFKnAlRuZUsbSsMI4JQ&#xA;Ki/Aig9zQHiv0Yqh9UutUGmpPptvyuXKFoZQOaq25+HkAWHSnID3xVD2U11caqn1gtDNFFWaBasn&#xA;KgBFdgFJao2qxHWgxVHm1sp7sXQo8sJ4Eg1AZK0DU7rzb7/liqKxV2KqN4Lk2zi2YLNtxJAPfeld&#xA;q06V2riq63EwhQTsGlA+Mr0r+H6h8h0xVUxV2KuxV2KuxV2KuxV2KuxV2KuxVIvPv/KDeYv+2Ze/&#xA;9Q74q7yF/wAoN5d/7Zll/wBQ6YqnuKuxV2KuxV2KuxV2KuxVQt7G2t5JZIk4vKasfpLUHgOTE/Ti&#xA;qyy0+O0MpRmb1TU1Ph326se7Hc9ziqKxVCpfO2oPaGFgqiolr12BrT+XegNeoO2KorFUPfC79D/R&#xA;TSSorSnLj348vhr88VW6dYJaQgAASMqiTjXiKD7KV/ZBJpiqKxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxVIvPv8Ayg3mL/tmXv8A1DvirvIX/KDeXf8AtmWX/UOmKp7irsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSLz7/yg3mL/ALZl7/1Dvirv&#xA;IX/KDeXf+2ZZf9Q6YqnuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxVIvPv8Ayg3mL/tmXv8A1DvirEvLv6c/w/pn6K/xR+i/qkH1Dl/huv1f019K&#xA;vL4vsU674qmH/O3/APfz/wDhs4q7/nb/APv5/wDw2cVd/wA7f/38/wD4bOKu/wCdv/7+f/w2cVd/&#xA;zt//AH8//hs4q7/nb/8Av5//AA2cVd/zt/8A38//AIbOKu/52/8A7+f/AMNnFXf87f8A9/P/AOGz&#xA;irv+dv8A+/n/APDZxV3/ADt//fz/APhs4q7/AJ2//v5//DZxV3/O3/8Afz/+Gzirv+dv/wC/n/8A&#xA;DZxV3/O3/wDfz/8Ahs4q7/nb/wDv5/8Aw2cVd/zt/wD38/8A4bOKu/52/wD7+f8A8NnFXf8AO3/9&#xA;/P8A+Gzirv8Anb/+/n/8NnFXf87f/wB/P/4bOKu/52//AL+f/wANnFXf87f/AN/P/wCGzirv+dv/&#xA;AO/n/wDDZxV3/O3/APfz/wDhs4q7/nb/APv5/wDw2cVd/wA7f/38/wD4bOKu/wCdv/7+f/w2cVd/&#xA;zt//AH8//hs4q7/nb/8Av5//AA2cVS/zF+nP8P6n+lf8Ufov6pP9f4/4br9X9NvVpx+L7Fem+Kv/&#xA;2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:4D71EAD851D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:4E71EAD851D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -185.149 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 185.149 li
264.65 185.149 li
264.65 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0.25 0.25 mo
0.25 184.899 li
264.4 184.899 li
264.4 0.25 li
0.25 0.25 li
0.25 0.25 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
0.25 lw
129.585 97.1396 mo
129.585 96.2705 128.879 95.5645 128.01 95.5645 cv
127.141 95.5645 126.435 96.2705 126.435 97.1396 cv
126.435 98.0088 127.141 98.7148 128.01 98.7148 cv
128.879 98.7148 129.585 98.0088 129.585 97.1396 cv
@
1 lc
128 97.2002 mo
128 97.2002 li
@
0 lc
144.825 56.5796 mo
144.825 55.7104 144.119 55.0049 143.25 55.0049 cv
142.381 55.0049 141.675 55.7104 141.675 56.5796 cv
141.675 57.4492 142.381 58.1548 143.25 58.1548 cv
144.119 58.1548 144.825 57.4492 144.825 56.5796 cv
@
1 lc
143.351 56.5498 mo
143.351 56.5498 li
@
0 lc
108.345 124.02 mo
108.345 123.15 107.64 122.444 106.77 122.444 cv
105.901 122.444 105.195 123.15 105.195 124.02 cv
105.195 124.89 105.901 125.595 106.77 125.595 cv
107.64 125.595 108.345 124.89 108.345 124.02 cv
@
1 lc
106.85 123.95 mo
106.85 123.95 li
@
0 lc
102.585 102.66 mo
102.585 101.79 101.879 101.085 101.01 101.085 cv
100.141 101.085 99.4351 101.79 99.4351 102.66 cv
99.4351 103.529 100.141 104.234 101.01 104.234 cv
101.879 104.234 102.585 103.529 102.585 102.66 cv
@
1 lc
101.1 102.75 mo
101.1 102.75 li
@
0 lc
159.465 75.0596 mo
159.465 74.1904 158.76 73.4849 157.891 73.4849 cv
157.021 73.4849 156.315 74.1904 156.315 75.0596 cv
156.315 75.9292 157.021 76.6348 157.891 76.6348 cv
158.76 76.6348 159.465 75.9292 159.465 75.0596 cv
@
1 lc
157.8 75.0498 mo
157.8 75.0498 li
@
0 lc
190.065 72.1797 mo
190.065 71.3105 189.359 70.605 188.49 70.605 cv
187.621 70.605 186.915 71.3105 186.915 72.1797 cv
186.915 73.0493 187.621 73.7549 188.49 73.7549 cv
189.359 73.7549 190.065 73.0493 190.065 72.1797 cv
@
1 lc
188.5 72.25 mo
188.5 72.25 li
@
0 lc
77.625 126.66 mo
77.625 125.79 76.9194 125.085 76.0503 125.085 cv
75.1807 125.085 74.4751 125.79 74.4751 126.66 cv
74.4751 127.529 75.1807 128.234 76.0503 128.234 cv
76.9194 128.234 77.625 127.529 77.625 126.66 cv
@
1 lc
76.1504 126.75 mo
76.1504 126.75 li
@
0 lc
116.025 153.54 mo
116.025 152.67 115.319 151.965 114.45 151.965 cv
113.581 151.965 112.875 152.67 112.875 153.54 cv
112.875 154.409 113.581 155.115 114.45 155.115 cv
115.319 155.115 116.025 154.409 116.025 153.54 cv
@
1 lc
114.55 153.5 mo
114.55 153.5 li
@
0 lc
170.865 101.7 mo
170.865 100.83 170.159 100.125 169.29 100.125 cv
168.421 100.125 167.715 100.83 167.715 101.7 cv
167.715 102.569 168.421 103.274 169.29 103.274 cv
170.159 103.274 170.865 102.569 170.865 101.7 cv
@
1 lc
169.3 101.8 mo
169.3 101.8 li
@
0 lc
207.465 91.6196 mo
207.465 90.7505 206.76 90.0449 205.891 90.0449 cv
205.021 90.0449 204.315 90.7505 204.315 91.6196 cv
204.315 92.4893 205.021 93.1953 205.891 93.1953 cv
206.76 93.1953 207.465 92.4893 207.465 91.6196 cv
@
1 lc
205.8 91.6499 mo
205.8 91.6499 li
@
0 lc
156.465 112.979 mo
156.465 112.11 155.76 111.405 154.891 111.405 cv
154.021 111.405 153.315 112.11 153.315 112.979 cv
153.315 113.85 154.021 114.555 154.891 114.555 cv
155.76 114.555 156.465 113.85 156.465 112.979 cv
@
1 lc
154.9 112.899 mo
154.9 112.899 li
@
0 lc
154.665 72.1797 mo
154.665 71.3105 153.96 70.605 153.09 70.605 cv
152.221 70.605 151.516 71.3105 151.516 72.1797 cv
151.516 73.0493 152.221 73.7549 153.09 73.7549 cv
153.96 73.7549 154.665 73.0493 154.665 72.1797 cv
@
1 lc
153 72.25 mo
153 72.25 li
@
0 lc
73.7852 144.3 mo
73.7852 143.431 73.0796 142.725 72.21 142.725 cv
71.3408 142.725 70.6353 143.431 70.6353 144.3 cv
70.6353 145.169 71.3408 145.875 72.21 145.875 cv
73.0796 145.875 73.7852 145.169 73.7852 144.3 cv
@
1 lc
72.3003 144.3 mo
72.3003 144.3 li
@
0 lc
102.585 133.14 mo
102.585 132.271 101.879 131.564 101.01 131.564 cv
100.141 131.564 99.4351 132.271 99.4351 133.14 cv
99.4351 134.009 100.141 134.715 101.01 134.715 cv
101.879 134.715 102.585 134.009 102.585 133.14 cv
@
1 lc
101.1 133.2 mo
101.1 133.2 li
@
0 lc
119.025 126.66 mo
119.025 125.79 118.319 125.085 117.45 125.085 cv
116.581 125.085 115.875 125.79 115.875 126.66 cv
115.875 127.529 116.581 128.234 117.45 128.234 cv
118.319 128.234 119.025 127.529 119.025 126.66 cv
@
1 lc
117.45 126.75 mo
117.45 126.75 li
@
0 lc
68.0254 116.58 mo
68.0254 115.71 67.3193 115.005 66.4502 115.005 cv
65.5806 115.005 64.875 115.71 64.875 116.58 cv
64.875 117.449 65.5806 118.155 66.4502 118.155 cv
67.3193 118.155 68.0254 117.449 68.0254 116.58 cv
@
1 lc
66.5503 116.6 mo
66.5503 116.6 li
@
0 lc
137.266 116.58 mo
137.266 115.71 136.56 115.005 135.69 115.005 cv
134.82 115.005 134.115 115.71 134.115 116.58 cv
134.115 117.449 134.82 118.155 135.69 118.155 cv
136.56 118.155 137.266 117.449 137.266 116.58 cv
@
1 lc
135.7 116.6 mo
135.7 116.6 li
@
0 lc
156.465 115.62 mo
156.465 114.75 155.76 114.045 154.891 114.045 cv
154.021 114.045 153.315 114.75 153.315 115.62 cv
153.315 116.489 154.021 117.194 154.891 117.194 cv
155.76 117.194 156.465 116.489 156.465 115.62 cv
@
1 lc
154.9 115.649 mo
154.9 115.649 li
@
0 lc
116.025 130.5 mo
116.025 129.63 115.319 128.925 114.45 128.925 cv
113.581 128.925 112.875 129.63 112.875 130.5 cv
112.875 131.369 113.581 132.075 114.45 132.075 cv
115.319 132.075 116.025 131.369 116.025 130.5 cv
@
1 lc
114.55 130.45 mo
114.55 130.45 li
@
0 lc
81.585 140.58 mo
81.585 139.71 80.8794 139.005 80.0103 139.005 cv
79.1406 139.005 78.4351 139.71 78.4351 140.58 cv
78.4351 141.449 79.1406 142.155 80.0103 142.155 cv
80.8794 142.155 81.585 141.449 81.585 140.58 cv
@
1 lc
80 140.6 mo
80 140.6 li
@
0 lc
133.425 121.14 mo
133.425 120.271 132.72 119.564 131.85 119.564 cv
130.981 119.564 130.275 120.271 130.275 121.14 cv
130.275 122.009 130.981 122.715 131.85 122.715 cv
132.72 122.715 133.425 122.009 133.425 121.14 cv
@
1 lc
131.85 121.2 mo
131.85 121.2 li
@
0 lc
105.585 116.58 mo
105.585 115.71 104.879 115.005 104.01 115.005 cv
103.141 115.005 102.435 115.71 102.435 116.58 cv
102.435 117.449 103.141 118.155 104.01 118.155 cv
104.879 118.155 105.585 117.449 105.585 116.58 cv
@
1 lc
104 116.6 mo
104 116.6 li
@
0 lc
241.065 82.5 mo
241.065 81.6304 240.359 80.9248 239.49 80.9248 cv
238.621 80.9248 237.915 81.6304 237.915 82.5 cv
237.915 83.3691 238.621 84.0747 239.49 84.0747 cv
240.359 84.0747 241.065 83.3691 241.065 82.5 cv
@
1 lc
239.45 82.3999 mo
239.45 82.3999 li
@
0 lc
159.465 122.1 mo
159.465 121.23 158.76 120.524 157.891 120.524 cv
157.021 120.524 156.315 121.23 156.315 122.1 cv
156.315 122.969 157.021 123.675 157.891 123.675 cv
158.76 123.675 159.465 122.969 159.465 122.1 cv
@
1 lc
157.8 122.1 mo
157.8 122.1 li
@
0 lc
183.465 77.6997 mo
183.465 76.8306 182.76 76.125 181.891 76.125 cv
181.021 76.125 180.315 76.8306 180.315 77.6997 cv
180.315 78.5693 181.021 79.2749 181.891 79.2749 cv
182.76 79.2749 183.465 78.5693 183.465 77.6997 cv
@
1 lc
181.8 77.7998 mo
181.8 77.7998 li
@
0 lc
41.145 109.14 mo
41.145 108.271 40.4395 107.564 39.5703 107.564 cv
38.7007 107.564 37.9951 108.271 37.9951 109.14 cv
37.9951 110.009 38.7007 110.715 39.5703 110.715 cv
40.4395 110.715 41.145 110.009 41.145 109.14 cv
@
1 lc
39.6504 109.2 mo
39.6504 109.2 li
@
0 lc
204.585 97.1396 mo
204.585 96.2705 203.88 95.5645 203.01 95.5645 cv
202.141 95.5645 201.436 96.2705 201.436 97.1396 cv
201.436 98.0088 202.141 98.7148 203.01 98.7148 cv
203.88 98.7148 204.585 98.0088 204.585 97.1396 cv
@
1 lc
202.95 97.2002 mo
202.95 97.2002 li
@
0 lc
140.025 138.66 mo
140.025 137.79 139.319 137.085 138.45 137.085 cv
137.581 137.085 136.875 137.79 136.875 138.66 cv
136.875 139.529 137.581 140.234 138.45 140.234 cv
139.319 140.234 140.025 139.529 140.025 138.66 cv
@
1 lc
138.55 138.75 mo
138.55 138.75 li
@
0 lc
130.425 136.979 mo
130.425 136.11 129.72 135.405 128.85 135.405 cv
127.981 135.405 127.275 136.11 127.275 136.979 cv
127.275 137.85 127.981 138.555 128.85 138.555 cv
129.72 138.555 130.425 137.85 130.425 136.979 cv
@
1 lc
128.95 136.899 mo
128.95 136.899 li
@
0 lc
54.585 139.62 mo
54.585 138.75 53.8794 138.045 53.0103 138.045 cv
52.1406 138.045 51.4351 138.75 51.4351 139.62 cv
51.4351 140.489 52.1406 141.194 53.0103 141.194 cv
53.8794 141.194 54.585 140.489 54.585 139.62 cv
@
1 lc
53.1001 139.649 mo
53.1001 139.649 li
@
0 lc
131.385 120.18 mo
131.385 119.311 130.68 118.604 129.81 118.604 cv
128.941 118.604 128.235 119.311 128.235 120.18 cv
128.235 121.049 128.941 121.755 129.81 121.755 cv
130.68 121.755 131.385 121.049 131.385 120.18 cv
@
1 lc
129.9 120.25 mo
129.9 120.25 li
@
0 lc
191.146 113.7 mo
191.146 112.83 190.439 112.125 189.57 112.125 cv
188.701 112.125 187.995 112.83 187.995 113.7 cv
187.995 114.569 188.701 115.274 189.57 115.274 cv
190.439 115.274 191.146 114.569 191.146 113.7 cv
@
1 lc
189.5 113.8 mo
189.5 113.8 li
@
0 lc
227.146 127.62 mo
227.146 126.75 226.439 126.045 225.57 126.045 cv
224.701 126.045 223.995 126.75 223.995 127.62 cv
223.995 128.489 224.701 129.194 225.57 129.194 cv
226.439 129.194 227.146 128.489 227.146 127.62 cv
@
1 lc
225.5 127.649 mo
225.5 127.649 li
@
0 lc
92.0254 138.66 mo
92.0254 137.79 91.3193 137.085 90.4502 137.085 cv
89.5811 137.085 88.875 137.79 88.875 138.66 cv
88.875 139.529 89.5811 140.234 90.4502 140.234 cv
91.3193 140.234 92.0254 139.529 92.0254 138.66 cv
@
1 lc
90.5503 138.75 mo
90.5503 138.75 li
@
0 lc
197.865 71.3398 mo
197.865 70.4702 197.159 69.7646 196.29 69.7646 cv
195.421 69.7646 194.715 70.4702 194.715 71.3398 cv
194.715 72.209 195.421 72.915 196.29 72.915 cv
197.159 72.915 197.865 72.209 197.865 71.3398 cv
@
1 lc
196.2 71.3496 mo
196.2 71.3496 li
@
0 lc
123.825 113.7 mo
123.825 112.83 123.12 112.125 122.25 112.125 cv
121.381 112.125 120.675 112.83 120.675 113.7 cv
120.675 114.569 121.381 115.274 122.25 115.274 cv
123.12 115.274 123.825 114.569 123.825 113.7 cv
@
1 lc
122.25 113.8 mo
122.25 113.8 li
@
0 lc
125.625 103.62 mo
125.625 102.75 124.919 102.045 124.05 102.045 cv
123.181 102.045 122.475 102.75 122.475 103.62 cv
122.475 104.489 123.181 105.194 124.05 105.194 cv
124.919 105.194 125.625 104.489 125.625 103.62 cv
@
1 lc
124.15 103.649 mo
124.15 103.649 li
@
0 lc
130.425 118.5 mo
130.425 117.63 129.72 116.925 128.85 116.925 cv
127.981 116.925 127.275 117.63 127.275 118.5 cv
127.275 119.369 127.981 120.075 128.85 120.075 cv
129.72 120.075 130.425 119.369 130.425 118.5 cv
@
1 lc
128.95 118.45 mo
128.95 118.45 li
@
0 lc
141.226 50.0996 mo
141.226 49.2305 140.52 48.5249 139.65 48.5249 cv
138.781 48.5249 138.075 49.2305 138.075 50.0996 cv
138.075 50.9692 138.781 51.6748 139.65 51.6748 cv
140.52 51.6748 141.226 50.9692 141.226 50.0996 cv
@
1 lc
139.55 50.0996 mo
139.55 50.0996 li
@
0 lc
73.7852 140.1 mo
73.7852 139.23 73.0796 138.524 72.21 138.524 cv
71.3408 138.524 70.6353 139.23 70.6353 140.1 cv
70.6353 140.969 71.3408 141.675 72.21 141.675 cv
73.0796 141.675 73.7852 140.969 73.7852 140.1 cv
@
1 lc
72.3003 140.1 mo
72.3003 140.1 li
@
0 lc
129.585 85.6196 mo
129.585 84.7505 128.879 84.0449 128.01 84.0449 cv
127.141 84.0449 126.435 84.7505 126.435 85.6196 cv
126.435 86.4893 127.141 87.1948 128.01 87.1948 cv
128.879 87.1948 129.585 86.4893 129.585 85.6196 cv
@
1 lc
128 85.6499 mo
128 85.6499 li
@
0 lc
122.865 125.7 mo
122.865 124.83 122.16 124.125 121.29 124.125 cv
120.421 124.125 119.715 124.83 119.715 125.7 cv
119.715 126.569 120.421 127.274 121.29 127.274 cv
122.16 127.274 122.865 126.569 122.865 125.7 cv
@
1 lc
121.3 125.8 mo
121.3 125.8 li
@
0 lc
161.266 105.54 mo
161.266 104.67 160.56 103.965 159.69 103.965 cv
158.821 103.965 158.115 104.67 158.115 105.54 cv
158.115 106.409 158.821 107.115 159.69 107.115 cv
160.56 107.115 161.266 106.409 161.266 105.54 cv
@
1 lc
159.7 105.5 mo
159.7 105.5 li
@
0 lc
108.345 130.5 mo
108.345 129.63 107.64 128.925 106.77 128.925 cv
105.901 128.925 105.195 129.63 105.195 130.5 cv
105.195 131.369 105.901 132.075 106.77 132.075 cv
107.64 132.075 108.345 131.369 108.345 130.5 cv
@
1 lc
106.85 130.45 mo
106.85 130.45 li
@
0 lc
234.345 100.02 mo
234.345 99.1504 233.64 98.4443 232.771 98.4443 cv
231.9 98.4443 231.195 99.1504 231.195 100.02 cv
231.195 100.89 231.9 101.595 232.771 101.595 cv
233.64 101.595 234.345 100.89 234.345 100.02 cv
@
1 lc
232.7 99.9502 mo
232.7 99.9502 li
@
0 lc
104.625 126.66 mo
104.625 125.79 103.919 125.085 103.05 125.085 cv
102.181 125.085 101.475 125.79 101.475 126.66 cv
101.475 127.529 102.181 128.234 103.05 128.234 cv
103.919 128.234 104.625 127.529 104.625 126.66 cv
@
1 lc
103.05 126.75 mo
103.05 126.75 li
@
0 lc
188.266 72.1797 mo
188.266 71.3105 187.56 70.605 186.69 70.605 cv
185.821 70.605 185.115 71.3105 185.115 72.1797 cv
185.115 73.0493 185.821 73.7549 186.69 73.7549 cv
187.56 73.7549 188.266 73.0493 188.266 72.1797 cv
@
1 lc
186.601 72.25 mo
186.601 72.25 li
@
0 lc
169.065 71.3398 mo
169.065 70.4702 168.359 69.7646 167.49 69.7646 cv
166.621 69.7646 165.915 70.4702 165.915 71.3398 cv
165.915 72.209 166.621 72.915 167.49 72.915 cv
168.359 72.915 169.065 72.209 169.065 71.3398 cv
@
1 lc
167.4 71.3496 mo
167.4 71.3496 li
@
0 lc
53.625 123.06 mo
53.625 122.19 52.9194 121.484 52.0503 121.484 cv
51.1807 121.484 50.4751 122.19 50.4751 123.06 cv
50.4751 123.929 51.1807 124.635 52.0503 124.635 cv
52.9194 124.635 53.625 123.929 53.625 123.06 cv
@
1 lc
52.1001 123.05 mo
52.1001 123.05 li
@
0 lc
160.425 114.66 mo
160.425 113.79 159.72 113.085 158.851 113.085 cv
157.98 113.085 157.275 113.79 157.275 114.66 cv
157.275 115.529 157.98 116.234 158.851 116.234 cv
159.72 116.234 160.425 115.529 160.425 114.66 cv
@
1 lc
158.75 114.75 mo
158.75 114.75 li
@
0 lc
183.465 105.54 mo
183.465 104.67 182.76 103.965 181.891 103.965 cv
181.021 103.965 180.315 104.67 180.315 105.54 cv
180.315 106.409 181.021 107.115 181.891 107.115 cv
182.76 107.115 183.465 106.409 183.465 105.54 cv
@
1 lc
181.8 105.5 mo
181.8 105.5 li
@
0 lc
99.8252 131.34 mo
99.8252 130.471 99.1196 129.765 98.25 129.765 cv
97.3809 129.765 96.6753 130.471 96.6753 131.34 cv
96.6753 132.209 97.3809 132.915 98.25 132.915 cv
99.1196 132.915 99.8252 132.209 99.8252 131.34 cv
@
1 lc
98.25 131.35 mo
98.25 131.35 li
@
0 lc
161.266 107.34 mo
161.266 106.471 160.56 105.765 159.69 105.765 cv
158.821 105.765 158.115 106.471 158.115 107.34 cv
158.115 108.209 158.821 108.915 159.69 108.915 cv
160.56 108.915 161.266 108.209 161.266 107.34 cv
@
1 lc
159.7 107.35 mo
159.7 107.35 li
@
0 lc
219.945 100.02 mo
219.945 99.1504 219.239 98.4443 218.37 98.4443 cv
217.501 98.4443 216.795 99.1504 216.795 100.02 cv
216.795 100.89 217.501 101.595 218.37 101.595 cv
219.239 101.595 219.945 100.89 219.945 100.02 cv
@
1 lc
218.3 99.9502 mo
218.3 99.9502 li
@
0 lc
116.985 153.54 mo
116.985 152.67 116.28 151.965 115.41 151.965 cv
114.541 151.965 113.835 152.67 113.835 153.54 cv
113.835 154.409 114.541 155.115 115.41 155.115 cv
116.28 155.115 116.985 154.409 116.985 153.54 cv
@
1 lc
115.5 153.5 mo
115.5 153.5 li
@
0 lc
134.385 79.6196 mo
134.385 78.7505 133.68 78.0449 132.81 78.0449 cv
131.941 78.0449 131.235 78.7505 131.235 79.6196 cv
131.235 80.4893 131.941 81.1948 132.81 81.1948 cv
133.68 81.1948 134.385 80.4893 134.385 79.6196 cv
@
1 lc
132.8 79.6499 mo
132.8 79.6499 li
@
0 lc
89.145 113.7 mo
89.145 112.83 88.4395 112.125 87.5703 112.125 cv
86.7007 112.125 85.9951 112.83 85.9951 113.7 cv
85.9951 114.569 86.7007 115.274 87.5703 115.274 cv
88.4395 115.274 89.145 114.569 89.145 113.7 cv
@
1 lc
87.6504 113.8 mo
87.6504 113.8 li
@
0 lc
131.385 57.54 mo
131.385 56.6704 130.68 55.9648 129.81 55.9648 cv
128.941 55.9648 128.235 56.6704 128.235 57.54 cv
128.235 58.4092 128.941 59.1147 129.81 59.1147 cv
130.68 59.1147 131.385 58.4092 131.385 57.54 cv
@
1 lc
129.9 57.5 mo
129.9 57.5 li
@
0 lc
106.425 102.66 mo
106.425 101.79 105.72 101.085 104.85 101.085 cv
103.981 101.085 103.275 101.79 103.275 102.66 cv
103.275 103.529 103.981 104.234 104.85 104.234 cv
105.72 104.234 106.425 103.529 106.425 102.66 cv
@
1 lc
104.95 102.75 mo
104.95 102.75 li
@
0 lc
91.1851 112.02 mo
91.1851 111.15 90.4795 110.444 89.6104 110.444 cv
88.7407 110.444 88.0352 111.15 88.0352 112.02 cv
88.0352 112.89 88.7407 113.595 89.6104 113.595 cv
90.4795 113.595 91.1851 112.89 91.1851 112.02 cv
@
1 lc
89.6001 111.95 mo
89.6001 111.95 li
@
0 lc
91.1851 142.5 mo
91.1851 141.63 90.4795 140.925 89.6104 140.925 cv
88.7407 140.925 88.0352 141.63 88.0352 142.5 cv
88.0352 143.369 88.7407 144.075 89.6104 144.075 cv
90.4795 144.075 91.1851 143.369 91.1851 142.5 cv
@
1 lc
89.6001 142.45 mo
89.6001 142.45 li
@
0 lc
159.465 74.0996 mo
159.465 73.2305 158.76 72.5249 157.891 72.5249 cv
157.021 72.5249 156.315 73.2305 156.315 74.0996 cv
156.315 74.9692 157.021 75.6748 157.891 75.6748 cv
158.76 75.6748 159.465 74.9692 159.465 74.0996 cv
@
1 lc
157.8 74.0996 mo
157.8 74.0996 li
@
0 lc
237.226 100.979 mo
237.226 100.11 236.52 99.4053 235.65 99.4053 cv
234.781 99.4053 234.075 100.11 234.075 100.979 cv
234.075 101.85 234.781 102.555 235.65 102.555 cv
236.52 102.555 237.226 101.85 237.226 100.979 cv
@
1 lc
235.601 100.899 mo
235.601 100.899 li
@
0 lc
148.785 122.1 mo
148.785 121.23 148.079 120.524 147.21 120.524 cv
146.341 120.524 145.635 121.23 145.635 122.1 cv
145.635 122.969 146.341 123.675 147.21 123.675 cv
148.079 123.675 148.785 122.969 148.785 122.1 cv
@
1 lc
147.2 122.1 mo
147.2 122.1 li
@
0 lc
161.266 122.1 mo
161.266 121.23 160.56 120.524 159.69 120.524 cv
158.821 120.524 158.115 121.23 158.115 122.1 cv
158.115 122.969 158.821 123.675 159.69 123.675 cv
160.56 123.675 161.266 122.969 161.266 122.1 cv
@
1 lc
159.7 122.1 mo
159.7 122.1 li
@
0 lc
226.665 97.1396 mo
226.665 96.2705 225.96 95.5645 225.09 95.5645 cv
224.221 95.5645 223.516 96.2705 223.516 97.1396 cv
223.516 98.0088 224.221 98.7148 225.09 98.7148 cv
225.96 98.7148 226.665 98.0088 226.665 97.1396 cv
@
1 lc
225 97.2002 mo
225 97.2002 li
@
0 lc
113.145 93.54 mo
113.145 92.6704 112.439 91.9648 111.57 91.9648 cv
110.701 91.9648 109.995 92.6704 109.995 93.54 cv
109.995 94.4092 110.701 95.1152 111.57 95.1152 cv
112.439 95.1152 113.145 94.4092 113.145 93.54 cv
@
1 lc
111.65 93.5 mo
111.65 93.5 li
@
0 lc
128.625 127.62 mo
128.625 126.75 127.919 126.045 127.05 126.045 cv
126.181 126.045 125.475 126.75 125.475 127.62 cv
125.475 128.489 126.181 129.194 127.05 129.194 cv
127.919 129.194 128.625 128.489 128.625 127.62 cv
@
1 lc
127.05 127.649 mo
127.05 127.649 li
@
0 lc
122.865 129.54 mo
122.865 128.67 122.16 127.965 121.29 127.965 cv
120.421 127.965 119.715 128.67 119.715 129.54 cv
119.715 130.409 120.421 131.115 121.29 131.115 cv
122.16 131.115 122.865 130.409 122.865 129.54 cv
@
1 lc
121.3 129.5 mo
121.3 129.5 li
@
0 lc
81.585 122.1 mo
81.585 121.23 80.8794 120.524 80.0103 120.524 cv
79.1406 120.524 78.4351 121.23 78.4351 122.1 cv
78.4351 122.969 79.1406 123.675 80.0103 123.675 cv
80.8794 123.675 81.585 122.969 81.585 122.1 cv
@
1 lc
80 122.1 mo
80 122.1 li
@
0 lc
100.785 133.14 mo
100.785 132.271 100.08 131.564 99.21 131.564 cv
98.3408 131.564 97.6353 132.271 97.6353 133.14 cv
97.6353 134.009 98.3408 134.715 99.21 134.715 cv
100.08 134.715 100.785 134.009 100.785 133.14 cv
@
1 lc
99.2002 133.2 mo
99.2002 133.2 li
@
0 lc
218.985 96.1797 mo
218.985 95.3105 218.279 94.6045 217.41 94.6045 cv
216.541 94.6045 215.835 95.3105 215.835 96.1797 cv
215.835 97.0488 216.541 97.7549 217.41 97.7549 cv
218.279 97.7549 218.985 97.0488 218.985 96.1797 cv
@
1 lc
217.351 96.25 mo
217.351 96.25 li
@
0 lc
129.585 105.54 mo
129.585 104.67 128.879 103.965 128.01 103.965 cv
127.141 103.965 126.435 104.67 126.435 105.54 cv
126.435 106.409 127.141 107.115 128.01 107.115 cv
128.879 107.115 129.585 106.409 129.585 105.54 cv
@
1 lc
128 105.5 mo
128 105.5 li
@
0 lc
120.825 103.62 mo
120.825 102.75 120.12 102.045 119.25 102.045 cv
118.381 102.045 117.675 102.75 117.675 103.62 cv
117.675 104.489 118.381 105.194 119.25 105.194 cv
120.12 105.194 120.825 104.489 120.825 103.62 cv
@
1 lc
119.35 103.649 mo
119.35 103.649 li
@
0 lc
150.825 144.3 mo
150.825 143.431 150.119 142.725 149.25 142.725 cv
148.381 142.725 147.675 143.431 147.675 144.3 cv
147.675 145.169 148.381 145.875 149.25 145.875 cv
150.119 145.875 150.825 145.169 150.825 144.3 cv
@
1 lc
149.15 144.3 mo
149.15 144.3 li
@
0 lc
164.266 112.979 mo
164.266 112.11 163.56 111.405 162.69 111.405 cv
161.821 111.405 161.115 112.11 161.115 112.979 cv
161.115 113.85 161.821 114.555 162.69 114.555 cv
163.56 114.555 164.266 113.85 164.266 112.979 cv
@
1 lc
162.601 112.899 mo
162.601 112.899 li
@
0 lc
104.625 114.66 mo
104.625 113.79 103.919 113.085 103.05 113.085 cv
102.181 113.085 101.475 113.79 101.475 114.66 cv
101.475 115.529 102.181 116.234 103.05 116.234 cv
103.919 116.234 104.625 115.529 104.625 114.66 cv
@
1 lc
103.05 114.75 mo
103.05 114.75 li
@
0 lc
55.5454 129.54 mo
55.5454 128.67 54.8394 127.965 53.9702 127.965 cv
53.1006 127.965 52.395 128.67 52.395 129.54 cv
52.395 130.409 53.1006 131.115 53.9702 131.115 cv
54.8394 131.115 55.5454 130.409 55.5454 129.54 cv
@
1 lc
54.0503 129.5 mo
54.0503 129.5 li
@
0 lc
185.266 65.6997 mo
185.266 64.8306 184.56 64.125 183.69 64.125 cv
182.821 64.125 182.115 64.8306 182.115 65.6997 cv
182.115 66.5693 182.821 67.2749 183.69 67.2749 cv
184.56 67.2749 185.266 66.5693 185.266 65.6997 cv
@
1 lc
183.7 65.7998 mo
183.7 65.7998 li
@
0 lc
92.0254 135.06 mo
92.0254 134.19 91.3193 133.484 90.4502 133.484 cv
89.5811 133.484 88.875 134.19 88.875 135.06 cv
88.875 135.929 89.5811 136.635 90.4502 136.635 cv
91.3193 136.635 92.0254 135.929 92.0254 135.06 cv
@
1 lc
90.5503 135.05 mo
90.5503 135.05 li
@
0 lc
124.785 122.1 mo
124.785 121.23 124.08 120.524 123.21 120.524 cv
122.341 120.524 121.635 121.23 121.635 122.1 cv
121.635 122.969 122.341 123.675 123.21 123.675 cv
124.08 123.675 124.785 122.969 124.785 122.1 cv
@
1 lc
123.2 122.1 mo
123.2 122.1 li
@
0 lc
102.585 120.18 mo
102.585 119.311 101.879 118.604 101.01 118.604 cv
100.141 118.604 99.4351 119.311 99.4351 120.18 cv
99.4351 121.049 100.141 121.755 101.01 121.755 cv
101.879 121.755 102.585 121.049 102.585 120.18 cv
@
1 lc
101.1 120.25 mo
101.1 120.25 li
@
0 lc
210.345 92.5796 mo
210.345 91.7104 209.64 91.0049 208.771 91.0049 cv
207.9 91.0049 207.195 91.7104 207.195 92.5796 cv
207.195 93.4492 207.9 94.1553 208.771 94.1553 cv
209.64 94.1553 210.345 93.4492 210.345 92.5796 cv
@
1 lc
208.7 92.5498 mo
208.7 92.5498 li
@
0 lc
114.225 107.34 mo
114.225 106.471 113.52 105.765 112.65 105.765 cv
111.781 105.765 111.075 106.471 111.075 107.34 cv
111.075 108.209 111.781 108.915 112.65 108.915 cv
113.52 108.915 114.225 108.209 114.225 107.34 cv
@
1 lc
112.65 107.35 mo
112.65 107.35 li
@
0 lc
170.025 131.34 mo
170.025 130.471 169.319 129.765 168.45 129.765 cv
167.581 129.765 166.875 130.471 166.875 131.34 cv
166.875 132.209 167.581 132.915 168.45 132.915 cv
169.319 132.915 170.025 132.209 170.025 131.34 cv
@
1 lc
168.351 131.35 mo
168.351 131.35 li
@
0 lc
68.0254 117.54 mo
68.0254 116.67 67.3193 115.965 66.4502 115.965 cv
65.5806 115.965 64.875 116.67 64.875 117.54 cv
64.875 118.409 65.5806 119.115 66.4502 119.115 cv
67.3193 119.115 68.0254 118.409 68.0254 117.54 cv
@
1 lc
66.5503 117.5 mo
66.5503 117.5 li
@
0 lc
54.585 140.58 mo
54.585 139.71 53.8794 139.005 53.0103 139.005 cv
52.1406 139.005 51.4351 139.71 51.4351 140.58 cv
51.4351 141.449 52.1406 142.155 53.0103 142.155 cv
53.8794 142.155 54.585 141.449 54.585 140.58 cv
@
1 lc
53.1001 140.6 mo
53.1001 140.6 li
@
0 lc
217.065 92.0996 mo
217.065 91.2305 216.359 90.5249 215.49 90.5249 cv
214.621 90.5249 213.915 91.2305 213.915 92.0996 cv
213.915 92.9692 214.621 93.6748 215.49 93.6748 cv
216.359 93.6748 217.065 92.9692 217.065 92.0996 cv
@
1 lc
215.4 92.0996 mo
215.4 92.0996 li
@
0 lc
146.025 127.62 mo
146.025 126.75 145.319 126.045 144.45 126.045 cv
143.581 126.045 142.875 126.75 142.875 127.62 cv
142.875 128.489 143.581 129.194 144.45 129.194 cv
145.319 129.194 146.025 128.489 146.025 127.62 cv
@
1 lc
144.351 127.649 mo
144.351 127.649 li
@
0 lc
157.425 96.1797 mo
157.425 95.3105 156.72 94.6045 155.851 94.6045 cv
154.98 94.6045 154.275 95.3105 154.275 96.1797 cv
154.275 97.0488 154.98 97.7549 155.851 97.7549 cv
156.72 97.7549 157.425 97.0488 157.425 96.1797 cv
@
1 lc
155.851 96.25 mo
155.851 96.25 li
@
0 lc
127.665 158.1 mo
127.665 157.23 126.959 156.524 126.09 156.524 cv
125.221 156.524 124.515 157.23 124.515 158.1 cv
124.515 158.969 125.221 159.675 126.09 159.675 cv
126.959 159.675 127.665 158.969 127.665 158.1 cv
@
1 lc
126.1 158.149 mo
126.1 158.149 li
@
0 lc
101.625 98.0996 mo
101.625 97.2305 100.919 96.5244 100.05 96.5244 cv
99.1807 96.5244 98.4751 97.2305 98.4751 98.0996 cv
98.4751 98.9688 99.1807 99.6748 100.05 99.6748 cv
100.919 99.6748 101.625 98.9688 101.625 98.0996 cv
@
1 lc
100.15 98.0996 mo
100.15 98.0996 li
@
0 lc
191.146 73.1396 mo
191.146 72.2705 190.439 71.5649 189.57 71.5649 cv
188.701 71.5649 187.995 72.2705 187.995 73.1396 cv
187.995 74.0093 188.701 74.7148 189.57 74.7148 cv
190.439 74.7148 191.146 74.0093 191.146 73.1396 cv
@
1 lc
189.5 73.1997 mo
189.5 73.1997 li
@
0 lc
100.785 67.6196 mo
100.785 66.7505 100.08 66.0449 99.21 66.0449 cv
98.3408 66.0449 97.6353 66.7505 97.6353 67.6196 cv
97.6353 68.4893 98.3408 69.1948 99.21 69.1948 cv
100.08 69.1948 100.785 68.4893 100.785 67.6196 cv
@
1 lc
99.2002 67.6499 mo
99.2002 67.6499 li
@
0 lc
101.625 148.02 mo
101.625 147.15 100.919 146.444 100.05 146.444 cv
99.1807 146.444 98.4751 147.15 98.4751 148.02 cv
98.4751 148.89 99.1807 149.595 100.05 149.595 cv
100.919 149.595 101.625 148.89 101.625 148.02 cv
@
1 lc
100.15 147.95 mo
100.15 147.95 li
@
0 lc
183.465 61.1396 mo
183.465 60.2705 182.76 59.5649 181.891 59.5649 cv
181.021 59.5649 180.315 60.2705 180.315 61.1396 cv
180.315 62.0093 181.021 62.7148 181.891 62.7148 cv
182.76 62.7148 183.465 62.0093 183.465 61.1396 cv
@
1 lc
181.8 61.1997 mo
181.8 61.1997 li
@
0 lc
139.186 93.54 mo
139.186 92.6704 138.479 91.9648 137.61 91.9648 cv
136.741 91.9648 136.035 92.6704 136.035 93.54 cv
136.035 94.4092 136.741 95.1152 137.61 95.1152 cv
138.479 95.1152 139.186 94.4092 139.186 93.54 cv
@
1 lc
137.601 93.5 mo
137.601 93.5 li
@
0 lc
89.145 120.18 mo
89.145 119.311 88.4395 118.604 87.5703 118.604 cv
86.7007 118.604 85.9951 119.311 85.9951 120.18 cv
85.9951 121.049 86.7007 121.755 87.5703 121.755 cv
88.4395 121.755 89.145 121.049 89.145 120.18 cv
@
1 lc
87.6504 120.25 mo
87.6504 120.25 li
@
0 lc
178.665 70.5 mo
178.665 69.6304 177.96 68.9248 177.09 68.9248 cv
176.221 68.9248 175.516 69.6304 175.516 70.5 cv
175.516 71.3691 176.221 72.0747 177.09 72.0747 cv
177.96 72.0747 178.665 71.3691 178.665 70.5 cv
@
1 lc
177 70.3999 mo
177 70.3999 li
@
0 lc
191.146 53.6997 mo
191.146 52.8306 190.439 52.125 189.57 52.125 cv
188.701 52.125 187.995 52.8306 187.995 53.6997 cv
187.995 54.5693 188.701 55.2749 189.57 55.2749 cv
190.439 55.2749 191.146 54.5693 191.146 53.6997 cv
@
1 lc
189.5 53.7998 mo
189.5 53.7998 li
@
0 lc
129.585 75.0596 mo
129.585 74.1904 128.879 73.4849 128.01 73.4849 cv
127.141 73.4849 126.435 74.1904 126.435 75.0596 cv
126.435 75.9292 127.141 76.6348 128.01 76.6348 cv
128.879 76.6348 129.585 75.9292 129.585 75.0596 cv
@
1 lc
128 75.0498 mo
128 75.0498 li
@
0 lc
69.9453 124.02 mo
69.9453 123.15 69.2397 122.444 68.3701 122.444 cv
67.501 122.444 66.7954 123.15 66.7954 124.02 cv
66.7954 124.89 67.501 125.595 68.3701 125.595 cv
69.2397 125.595 69.9453 124.89 69.9453 124.02 cv
@
1 lc
68.4502 123.95 mo
68.4502 123.95 li
@
0 lc
164.266 118.5 mo
164.266 117.63 163.56 116.925 162.69 116.925 cv
161.821 116.925 161.115 117.63 161.115 118.5 cv
161.115 119.369 161.821 120.075 162.69 120.075 cv
163.56 120.075 164.266 119.369 164.266 118.5 cv
@
1 lc
162.601 118.45 mo
162.601 118.45 li
@
0 lc
114.225 90.6597 mo
114.225 89.7905 113.52 89.085 112.65 89.085 cv
111.781 89.085 111.075 89.7905 111.075 90.6597 cv
111.075 91.5293 111.781 92.2349 112.65 92.2349 cv
113.52 92.2349 114.225 91.5293 114.225 90.6597 cv
@
1 lc
112.65 90.75 mo
112.65 90.75 li
@
0 lc
148.785 100.979 mo
148.785 100.11 148.079 99.4053 147.21 99.4053 cv
146.341 99.4053 145.635 100.11 145.635 100.979 cv
145.635 101.85 146.341 102.555 147.21 102.555 cv
148.079 102.555 148.785 101.85 148.785 100.979 cv
@
1 lc
147.2 100.899 mo
147.2 100.899 li
@
0 lc
119.025 110.1 mo
119.025 109.23 118.319 108.524 117.45 108.524 cv
116.581 108.524 115.875 109.23 115.875 110.1 cv
115.875 110.969 116.581 111.675 117.45 111.675 cv
118.319 111.675 119.025 110.969 119.025 110.1 cv
@
1 lc
117.45 110.1 mo
117.45 110.1 li
@
0 lc
102.585 81.54 mo
102.585 80.6704 101.879 79.9648 101.01 79.9648 cv
100.141 79.9648 99.4351 80.6704 99.4351 81.54 cv
99.4351 82.4092 100.141 83.1147 101.01 83.1147 cv
101.879 83.1147 102.585 82.4092 102.585 81.54 cv
@
1 lc
101.1 81.5 mo
101.1 81.5 li
@
0 lc
60.3452 150.66 mo
60.3452 149.79 59.6396 149.085 58.77 149.085 cv
57.9009 149.085 57.1953 149.79 57.1953 150.66 cv
57.1953 151.529 57.9009 152.234 58.77 152.234 cv
59.6396 152.234 60.3452 151.529 60.3452 150.66 cv
@
1 lc
58.8501 150.75 mo
58.8501 150.75 li
@
0 lc
103.545 120.18 mo
103.545 119.311 102.84 118.604 101.97 118.604 cv
101.101 118.604 100.395 119.311 100.395 120.18 cv
100.395 121.049 101.101 121.755 101.97 121.755 cv
102.84 121.755 103.545 121.049 103.545 120.18 cv
@
1 lc
102.05 120.25 mo
102.05 120.25 li
@
0 lc
223.785 87.0596 mo
223.785 86.1904 223.079 85.4849 222.21 85.4849 cv
221.341 85.4849 220.635 86.1904 220.635 87.0596 cv
220.635 87.9292 221.341 88.6348 222.21 88.6348 cv
223.079 88.6348 223.785 87.9292 223.785 87.0596 cv
@
1 lc
222.15 87.0498 mo
222.15 87.0498 li
@
0 lc
130.425 149.7 mo
130.425 148.83 129.72 148.125 128.85 148.125 cv
127.981 148.125 127.275 148.83 127.275 149.7 cv
127.275 150.569 127.981 151.274 128.85 151.274 cv
129.72 151.274 130.425 150.569 130.425 149.7 cv
@
1 lc
128.95 149.8 mo
128.95 149.8 li
@
0 lc
143.025 79.6196 mo
143.025 78.7505 142.319 78.0449 141.45 78.0449 cv
140.581 78.0449 139.875 78.7505 139.875 79.6196 cv
139.875 80.4893 140.581 81.1948 141.45 81.1948 cv
142.319 81.1948 143.025 80.4893 143.025 79.6196 cv
@
1 lc
141.45 79.6499 mo
141.45 79.6499 li
@
0 lc
128.625 106.5 mo
128.625 105.63 127.919 104.925 127.05 104.925 cv
126.181 104.925 125.475 105.63 125.475 106.5 cv
125.475 107.369 126.181 108.075 127.05 108.075 cv
127.919 108.075 128.625 107.369 128.625 106.5 cv
@
1 lc
127.05 106.5 mo
127.05 106.5 li
@
0 lc
144.825 104.819 mo
144.825 103.95 144.119 103.245 143.25 103.245 cv
142.381 103.245 141.675 103.95 141.675 104.819 cv
141.675 105.689 142.381 106.395 143.25 106.395 cv
144.119 106.395 144.825 105.689 144.825 104.819 cv
@
1 lc
143.351 104.75 mo
143.351 104.75 li
@
0 lc
112.185 126.18 mo
112.185 125.311 111.479 124.604 110.61 124.604 cv
109.741 124.604 109.035 125.311 109.035 126.18 cv
109.035 127.049 109.741 127.755 110.61 127.755 cv
111.479 127.755 112.185 127.049 112.185 126.18 cv
@
1 lc
110.7 126.25 mo
110.7 126.25 li
@
0 lc
82.4253 139.14 mo
82.4253 138.271 81.7197 137.564 80.8501 137.564 cv
79.981 137.564 79.2754 138.271 79.2754 139.14 cv
79.2754 140.009 79.981 140.715 80.8501 140.715 cv
81.7197 140.715 82.4253 140.009 82.4253 139.14 cv
@
1 lc
80.9502 139.1 mo
80.9502 139.1 li
@
0 lc
88.1851 100.979 mo
88.1851 100.11 87.4795 99.4053 86.6104 99.4053 cv
85.7407 99.4053 85.0352 100.11 85.0352 100.979 cv
85.0352 101.85 85.7407 102.555 86.6104 102.555 cv
87.4795 102.555 88.1851 101.85 88.1851 100.979 cv
@
1 lc
86.7002 101 mo
86.7002 101 li
@
0 lc
125.625 111.3 mo
125.625 110.431 124.919 109.725 124.05 109.725 cv
123.181 109.725 122.475 110.431 122.475 111.3 cv
122.475 112.169 123.181 112.875 124.05 112.875 cv
124.919 112.875 125.625 112.169 125.625 111.3 cv
@
1 lc
124.15 111.399 mo
124.15 111.399 li
@
0 lc
185.266 100.26 mo
185.266 99.3906 184.56 98.6846 183.69 98.6846 cv
182.821 98.6846 182.115 99.3906 182.115 100.26 cv
182.115 101.129 182.821 101.835 183.69 101.835 cv
184.56 101.835 185.266 101.129 185.266 100.26 cv
@
1 lc
183.7 100.35 mo
183.7 100.35 li
@
0 lc
75.7051 118.5 mo
75.7051 117.63 74.9995 116.925 74.1304 116.925 cv
73.2607 116.925 72.5552 117.63 72.5552 118.5 cv
72.5552 119.369 73.2607 120.075 74.1304 120.075 cv
74.9995 120.075 75.7051 119.369 75.7051 118.5 cv
@
1 lc
74.2002 118.5 mo
74.2002 118.5 li
@
0 lc
200.745 44.8198 mo
200.745 43.9502 200.04 43.2446 199.17 43.2446 cv
198.301 43.2446 197.595 43.9502 197.595 44.8198 cv
197.595 45.689 198.301 46.3945 199.17 46.3945 cv
200.04 46.3945 200.745 45.689 200.745 44.8198 cv
@
1 lc
199.101 44.75 mo
199.101 44.75 li
@
0 lc
126.585 75.0596 mo
126.585 74.1904 125.879 73.4849 125.01 73.4849 cv
124.141 73.4849 123.435 74.1904 123.435 75.0596 cv
123.435 75.9292 124.141 76.6348 125.01 76.6348 cv
125.879 76.6348 126.585 75.9292 126.585 75.0596 cv
@
1 lc
125.1 75.0498 mo
125.1 75.0498 li
@
0 lc
143.025 72.1797 mo
143.025 71.3105 142.319 70.605 141.45 70.605 cv
140.581 70.605 139.875 71.3105 139.875 72.1797 cv
139.875 73.0493 140.581 73.7549 141.45 73.7549 cv
142.319 73.7549 143.025 73.0493 143.025 72.1797 cv
@
1 lc
141.45 72.0996 mo
141.45 72.0996 li
@
0 lc
139.186 71.6997 mo
139.186 70.8306 138.479 70.125 137.61 70.125 cv
136.741 70.125 136.035 70.8306 136.035 71.6997 cv
136.035 72.5693 136.741 73.2749 137.61 73.2749 cv
138.479 73.2749 139.186 72.5693 139.186 71.6997 cv
@
1 lc
137.601 71.7998 mo
137.601 71.7998 li
@
0 lc
170.025 113.22 mo
170.025 112.351 169.319 111.645 168.45 111.645 cv
167.581 111.645 166.875 112.351 166.875 113.22 cv
166.875 114.089 167.581 114.795 168.45 114.795 cv
169.319 114.795 170.025 114.089 170.025 113.22 cv
@
1 lc
168.351 113.25 mo
168.351 113.25 li
@
0 lc
209.385 92.9399 mo
209.385 92.0703 208.68 91.3647 207.811 91.3647 cv
206.94 91.3647 206.235 92.0703 206.235 92.9399 cv
206.235 93.8096 206.94 94.5146 207.811 94.5146 cv
208.68 94.5146 209.385 93.8096 209.385 92.9399 cv
@
1 lc
207.75 92.9497 mo
207.75 92.9497 li
@
0 lc
108.345 126.899 mo
108.345 126.03 107.64 125.325 106.77 125.325 cv
105.901 125.325 105.195 126.03 105.195 126.899 cv
105.195 127.77 105.901 128.475 106.77 128.475 cv
107.64 128.475 108.345 127.77 108.345 126.899 cv
@
1 lc
106.85 126.899 mo
106.85 126.899 li
@
0 lc
133.425 119.7 mo
133.425 118.83 132.72 118.125 131.85 118.125 cv
130.981 118.125 130.275 118.83 130.275 119.7 cv
130.275 120.569 130.981 121.274 131.85 121.274 cv
132.72 121.274 133.425 120.569 133.425 119.7 cv
@
1 lc
131.85 119.649 mo
131.85 119.649 li
@
0 lc
103.545 115.38 mo
103.545 114.511 102.84 113.805 101.97 113.805 cv
101.101 113.805 100.395 114.511 100.395 115.38 cv
100.395 116.249 101.101 116.955 101.97 116.955 cv
102.84 116.955 103.545 116.249 103.545 115.38 cv
@
1 lc
102.05 115.3 mo
102.05 115.3 li
@
0 lc
179.625 61.3799 mo
179.625 60.5103 178.92 59.8047 178.05 59.8047 cv
177.181 59.8047 176.476 60.5103 176.476 61.3799 cv
176.476 62.249 177.181 62.9546 178.05 62.9546 cv
178.92 62.9546 179.625 62.249 179.625 61.3799 cv
@
1 lc
177.95 61.3496 mo
177.95 61.3496 li
@
0 lc
146.025 98.3398 mo
146.025 97.4707 145.319 96.7646 144.45 96.7646 cv
143.581 96.7646 142.875 97.4707 142.875 98.3398 cv
142.875 99.209 143.581 99.915 144.45 99.915 cv
145.319 99.915 146.025 99.209 146.025 98.3398 cv
@
1 lc
144.351 98.3994 mo
144.351 98.3994 li
@
0 lc
82.4253 135.3 mo
82.4253 134.431 81.7197 133.725 80.8501 133.725 cv
79.981 133.725 79.2754 134.431 79.2754 135.3 cv
79.2754 136.169 79.981 136.875 80.8501 136.875 cv
81.7197 136.875 82.4253 136.169 82.4253 135.3 cv
@
1 lc
80.9502 135.399 mo
80.9502 135.399 li
@
0 lc
71.8652 150.42 mo
71.8652 149.551 71.1597 148.845 70.29 148.845 cv
69.4209 148.845 68.7153 149.551 68.7153 150.42 cv
68.7153 151.289 69.4209 151.995 70.29 151.995 cv
71.1597 151.995 71.8652 151.289 71.8652 150.42 cv
@
1 lc
70.3501 150.35 mo
70.3501 150.35 li
@
0 lc
107.385 87.7798 mo
107.385 86.9102 106.68 86.2046 105.81 86.2046 cv
104.941 86.2046 104.235 86.9102 104.235 87.7798 cv
104.235 88.6494 104.941 89.355 105.81 89.355 cv
106.68 89.355 107.385 88.6494 107.385 87.7798 cv
@
1 lc
105.9 87.75 mo
105.9 87.75 li
@
0 lc
120.825 108.42 mo
120.825 107.551 120.12 106.845 119.25 106.845 cv
118.381 106.845 117.675 107.551 117.675 108.42 cv
117.675 109.289 118.381 109.995 119.25 109.995 cv
120.12 109.995 120.825 109.289 120.825 108.42 cv
@
1 lc
119.35 108.45 mo
119.35 108.45 li
@
0 lc
155.625 122.58 mo
155.625 121.71 154.92 121.005 154.05 121.005 cv
153.181 121.005 152.476 121.71 152.476 122.58 cv
152.476 123.449 153.181 124.155 154.05 124.155 cv
154.92 124.155 155.625 123.449 155.625 122.58 cv
@
1 lc
153.95 122.5 mo
153.95 122.5 li
@
0 lc
97.7852 145.62 mo
97.7852 144.75 97.0796 144.045 96.21 144.045 cv
95.3408 144.045 94.6353 144.75 94.6353 145.62 cv
94.6353 146.489 95.3408 147.194 96.21 147.194 cv
97.0796 147.194 97.7852 146.489 97.7852 145.62 cv
@
1 lc
96.3003 145.55 mo
96.3003 145.55 li
@
0 lc
140.025 94.7402 mo
140.025 93.8701 139.319 93.165 138.45 93.165 cv
137.581 93.165 136.875 93.8701 136.875 94.7402 cv
136.875 95.6094 137.581 96.3145 138.45 96.3145 cv
139.319 96.3145 140.025 95.6094 140.025 94.7402 cv
@
1 lc
138.55 94.7998 mo
138.55 94.7998 li
@
0 lc
100.785 145.859 mo
100.785 144.99 100.08 144.285 99.21 144.285 cv
98.3408 144.285 97.6353 144.99 97.6353 145.859 cv
97.6353 146.729 98.3408 147.435 99.21 147.435 cv
100.08 147.435 100.785 146.729 100.785 145.859 cv
@
1 lc
99.2002 145.95 mo
99.2002 145.95 li
@
0 lc
121.785 151.38 mo
121.785 150.511 121.08 149.805 120.21 149.805 cv
119.341 149.805 118.635 150.511 118.635 151.38 cv
118.635 152.249 119.341 152.955 120.21 152.955 cv
121.08 152.955 121.785 152.249 121.785 151.38 cv
@
1 lc
120.3 151.3 mo
120.3 151.3 li
@
0 lc
119.985 143.22 mo
119.985 142.351 119.28 141.645 118.41 141.645 cv
117.541 141.645 116.835 142.351 116.835 143.22 cv
116.835 144.089 117.541 144.795 118.41 144.795 cv
119.28 144.795 119.985 144.089 119.985 143.22 cv
@
1 lc
118.4 143.149 mo
118.4 143.149 li
@
0 lc
87.2251 153.899 mo
87.2251 153.03 86.5195 152.325 85.6504 152.325 cv
84.7808 152.325 84.0752 153.03 84.0752 153.899 cv
84.0752 154.77 84.7808 155.475 85.6504 155.475 cv
86.5195 155.475 87.2251 154.77 87.2251 153.899 cv
@
1 lc
85.75 153.899 mo
85.75 153.899 li
@
0 lc
110.385 132.66 mo
110.385 131.79 109.68 131.085 108.81 131.085 cv
107.941 131.085 107.235 131.79 107.235 132.66 cv
107.235 133.529 107.941 134.234 108.81 134.234 cv
109.68 134.234 110.385 133.529 110.385 132.66 cv
@
1 lc
108.8 132.75 mo
108.8 132.75 li
@
0 lc
86.3853 158.819 mo
86.3853 157.95 85.6797 157.245 84.8101 157.245 cv
83.9409 157.245 83.2354 157.95 83.2354 158.819 cv
83.2354 159.689 83.9409 160.395 84.8101 160.395 cv
85.6797 160.395 86.3853 159.689 86.3853 158.819 cv
@
1 lc
84.8003 158.75 mo
84.8003 158.75 li
@
0 lc
146.025 76.7397 mo
146.025 75.8701 145.319 75.165 144.45 75.165 cv
143.581 75.165 142.875 75.8701 142.875 76.7397 cv
142.875 77.6094 143.581 78.3149 144.45 78.3149 cv
145.319 78.3149 146.025 77.6094 146.025 76.7397 cv
@
1 lc
144.351 76.6997 mo
144.351 76.6997 li
@
0 lc
115.185 106.5 mo
115.185 105.63 114.479 104.925 113.61 104.925 cv
112.741 104.925 112.035 105.63 112.035 106.5 cv
112.035 107.369 112.741 108.075 113.61 108.075 cv
114.479 108.075 115.185 107.369 115.185 106.5 cv
@
1 lc
113.6 106.5 mo
113.6 106.5 li
@
0 lc
95.9854 95.9395 mo
95.9854 95.0703 95.2798 94.3652 94.4102 94.3652 cv
93.541 94.3652 92.835 95.0703 92.835 95.9395 cv
92.835 96.8096 93.541 97.5146 94.4102 97.5146 cv
95.2798 97.5146 95.9854 96.8096 95.9854 95.9395 cv
@
1 lc
94.4004 95.8994 mo
94.4004 95.8994 li
@
0 lc
88.1851 152.58 mo
88.1851 151.71 87.4795 151.005 86.6104 151.005 cv
85.7407 151.005 85.0352 151.71 85.0352 152.58 cv
85.0352 153.449 85.7407 154.155 86.6104 154.155 cv
87.4795 154.155 88.1851 153.449 88.1851 152.58 cv
@
1 lc
86.7002 152.5 mo
86.7002 152.5 li
@
0 lc
119.985 136.979 mo
119.985 136.11 119.28 135.405 118.41 135.405 cv
117.541 135.405 116.835 136.11 116.835 136.979 cv
116.835 137.85 117.541 138.555 118.41 138.555 cv
119.28 138.555 119.985 137.85 119.985 136.979 cv
@
1 lc
118.4 137 mo
118.4 137 li
@
0 lc
110.385 110.58 mo
110.385 109.71 109.68 109.005 108.81 109.005 cv
107.941 109.005 107.235 109.71 107.235 110.58 cv
107.235 111.449 107.941 112.155 108.81 112.155 cv
109.68 112.155 110.385 111.449 110.385 110.58 cv
@
1 lc
108.8 110.5 mo
108.8 110.5 li
@
0 lc
101.625 114.54 mo
101.625 113.67 100.919 112.965 100.05 112.965 cv
99.1807 112.965 98.4751 113.67 98.4751 114.54 cv
98.4751 115.409 99.1807 116.115 100.05 116.115 cv
100.919 116.115 101.625 115.409 101.625 114.54 cv
@
1 lc
100.15 114.55 mo
100.15 114.55 li
@
0 lc
190.065 75.7798 mo
190.065 74.9102 189.359 74.2046 188.49 74.2046 cv
187.621 74.2046 186.915 74.9102 186.915 75.7798 cv
186.915 76.6494 187.621 77.355 188.49 77.355 cv
189.359 77.355 190.065 76.6494 190.065 75.7798 cv
@
1 lc
188.5 75.75 mo
188.5 75.75 li
@
0 lc
57.4653 130.979 mo
57.4653 130.11 56.7598 129.405 55.8901 129.405 cv
55.021 129.405 54.3154 130.11 54.3154 130.979 cv
54.3154 131.85 55.021 132.555 55.8901 132.555 cv
56.7598 132.555 57.4653 131.85 57.4653 130.979 cv
@
1 lc
55.9502 131 mo
55.9502 131 li
@
0 lc
121.785 124.5 mo
121.785 123.63 121.08 122.925 120.21 122.925 cv
119.341 122.925 118.635 123.63 118.635 124.5 cv
118.635 125.369 119.341 126.075 120.21 126.075 cv
121.08 126.075 121.785 125.369 121.785 124.5 cv
@
1 lc
120.3 124.6 mo
120.3 124.6 li
@
0 lc
108.345 154.979 mo
108.345 154.11 107.64 153.405 106.77 153.405 cv
105.901 153.405 105.195 154.11 105.195 154.979 cv
105.195 155.85 105.901 156.555 106.77 156.555 cv
107.64 156.555 108.345 155.85 108.345 154.979 cv
@
1 lc
106.85 155 mo
106.85 155 li
@
0 lc
21.9453 150.66 mo
21.9453 149.79 21.2397 149.085 20.3701 149.085 cv
19.501 149.085 18.7954 149.79 18.7954 150.66 cv
18.7954 151.529 19.501 152.234 20.3701 152.234 cv
21.2397 152.234 21.9453 151.529 21.9453 150.66 cv
@
1 lc
20.4004 150.75 mo
20.4004 150.75 li
@
0 lc
122.865 87.2998 mo
122.865 86.4302 122.16 85.7246 121.29 85.7246 cv
120.421 85.7246 119.715 86.4302 119.715 87.2998 cv
119.715 88.1689 120.421 88.875 121.29 88.875 cv
122.16 88.875 122.865 88.1689 122.865 87.2998 cv
@
1 lc
121.3 87.1997 mo
121.3 87.1997 li
@
0 lc
126.585 105.78 mo
126.585 104.91 125.879 104.205 125.01 104.205 cv
124.141 104.205 123.435 104.91 123.435 105.78 cv
123.435 106.649 124.141 107.354 125.01 107.354 cv
125.879 107.354 126.585 106.649 126.585 105.78 cv
@
1 lc
125.1 105.85 mo
125.1 105.85 li
@
0 lc
103.545 130.02 mo
103.545 129.15 102.84 128.444 101.97 128.444 cv
101.101 128.444 100.395 129.15 100.395 130.02 cv
100.395 130.89 101.101 131.595 101.97 131.595 cv
102.84 131.595 103.545 130.89 103.545 130.02 cv
@
1 lc
102.05 130.05 mo
102.05 130.05 li
@
0 lc
118.065 128.1 mo
118.065 127.23 117.359 126.524 116.49 126.524 cv
115.621 126.524 114.915 127.23 114.915 128.1 cv
114.915 128.969 115.621 129.675 116.49 129.675 cv
117.359 129.675 118.065 128.969 118.065 128.1 cv
@
1 lc
116.5 128.2 mo
116.5 128.2 li
@
0 lc
90.105 153.78 mo
90.105 152.91 89.3994 152.205 88.5303 152.205 cv
87.6606 152.205 86.9551 152.91 86.9551 153.78 cv
86.9551 154.649 87.6606 155.354 88.5303 155.354 cv
89.3994 155.354 90.105 154.649 90.105 153.78 cv
@
1 lc
88.6001 153.7 mo
88.6001 153.7 li
@
0 lc
96.8252 145.14 mo
96.8252 144.271 96.1196 143.564 95.25 143.564 cv
94.3809 143.564 93.6753 144.271 93.6753 145.14 cv
93.6753 146.009 94.3809 146.715 95.25 146.715 cv
96.1196 146.715 96.8252 146.009 96.8252 145.14 cv
@
1 lc
95.3501 145.1 mo
95.3501 145.1 li
@
0 lc
187.306 68.5796 mo
187.306 67.7104 186.6 67.0049 185.73 67.0049 cv
184.86 67.0049 184.155 67.7104 184.155 68.5796 cv
184.155 69.4492 184.86 70.1548 185.73 70.1548 cv
186.6 70.1548 187.306 69.4492 187.306 68.5796 cv
@
1 lc
185.65 68.5498 mo
185.65 68.5498 li
@
0 lc
136.425 135.54 mo
136.425 134.67 135.72 133.965 134.85 133.965 cv
133.981 133.965 133.275 134.67 133.275 135.54 cv
133.275 136.409 133.981 137.115 134.85 137.115 cv
135.72 137.115 136.425 136.409 136.425 135.54 cv
@
1 lc
134.75 135.6 mo
134.75 135.6 li
@
0 lc
102.585 134.58 mo
102.585 133.71 101.879 133.005 101.01 133.005 cv
100.141 133.005 99.4351 133.71 99.4351 134.58 cv
99.4351 135.449 100.141 136.155 101.01 136.155 cv
101.879 136.155 102.585 135.449 102.585 134.58 cv
@
1 lc
101.1 134.5 mo
101.1 134.5 li
@
0 lc
143.985 132.42 mo
143.985 131.551 143.279 130.845 142.41 130.845 cv
141.541 130.845 140.835 131.551 140.835 132.42 cv
140.835 133.289 141.541 133.995 142.41 133.995 cv
143.279 133.995 143.985 133.289 143.985 132.42 cv
@
1 lc
142.4 132.45 mo
142.4 132.45 li
@
0 lc
95.9854 108.899 mo
95.9854 108.03 95.2798 107.325 94.4102 107.325 cv
93.541 107.325 92.835 108.03 92.835 108.899 cv
92.835 109.77 93.541 110.475 94.4102 110.475 cv
95.2798 110.475 95.9854 109.77 95.9854 108.899 cv
@
1 lc
94.4004 109 mo
94.4004 109 li
@
0 lc
85.3052 127.62 mo
85.3052 126.75 84.5996 126.045 83.73 126.045 cv
82.8608 126.045 82.1553 126.75 82.1553 127.62 cv
82.1553 128.489 82.8608 129.194 83.73 129.194 cv
84.5996 129.194 85.3052 128.489 85.3052 127.62 cv
@
1 lc
83.8003 127.649 mo
83.8003 127.649 li
@
0 lc
214.186 70.5 mo
214.186 69.6304 213.479 68.9248 212.61 68.9248 cv
211.741 68.9248 211.035 69.6304 211.035 70.5 cv
211.035 71.3691 211.741 72.0747 212.61 72.0747 cv
213.479 72.0747 214.186 71.3691 214.186 70.5 cv
@
1 lc
212.55 70.3999 mo
212.55 70.3999 li
@
0 lc
92.9854 123.3 mo
92.9854 122.431 92.2798 121.725 91.4102 121.725 cv
90.541 121.725 89.835 122.431 89.835 123.3 cv
89.835 124.169 90.541 124.875 91.4102 124.875 cv
92.2798 124.875 92.9854 124.169 92.9854 123.3 cv
@
1 lc
91.5 123.25 mo
91.5 123.25 li
@
0 lc
158.385 152.58 mo
158.385 151.71 157.68 151.005 156.811 151.005 cv
155.94 151.005 155.235 151.71 155.235 152.58 cv
155.235 153.449 155.94 154.155 156.811 154.155 cv
157.68 154.155 158.385 153.449 158.385 152.58 cv
@
1 lc
156.8 152.6 mo
156.8 152.6 li
@
0 lc
110.385 94.7402 mo
110.385 93.8701 109.68 93.165 108.81 93.165 cv
107.941 93.165 107.235 93.8701 107.235 94.7402 cv
107.235 95.6094 107.941 96.3145 108.81 96.3145 cv
109.68 96.3145 110.385 95.6094 110.385 94.7402 cv
@
1 lc
108.8 94.7998 mo
108.8 94.7998 li
@
0 lc
139.186 71.3398 mo
139.186 70.4702 138.479 69.7646 137.61 69.7646 cv
136.741 69.7646 136.035 70.4702 136.035 71.3398 cv
136.035 72.209 136.741 72.915 137.61 72.915 cv
138.479 72.915 139.186 72.209 139.186 71.3398 cv
@
1 lc
137.601 71.3496 mo
137.601 71.3496 li
@
0 lc
92.0254 151.38 mo
92.0254 150.511 91.3193 149.805 90.4502 149.805 cv
89.5811 149.805 88.875 150.511 88.875 151.38 cv
88.875 152.249 89.5811 152.955 90.4502 152.955 cv
91.3193 152.955 92.0254 152.249 92.0254 151.38 cv
@
1 lc
90.5503 151.3 mo
90.5503 151.3 li
@
0 lc
120.825 155.22 mo
120.825 154.351 120.12 153.645 119.25 153.645 cv
118.381 153.645 117.675 154.351 117.675 155.22 cv
117.675 156.089 118.381 156.795 119.25 156.795 cv
120.12 156.795 120.825 156.089 120.825 155.22 cv
@
1 lc
119.35 155.149 mo
119.35 155.149 li
@
0 lc
128.625 134.819 mo
128.625 133.95 127.919 133.245 127.05 133.245 cv
126.181 133.245 125.475 133.95 125.475 134.819 cv
125.475 135.689 126.181 136.395 127.05 136.395 cv
127.919 136.395 128.625 135.689 128.625 134.819 cv
@
1 lc
127.05 134.75 mo
127.05 134.75 li
@
0 lc
78.585 157.859 mo
78.585 156.99 77.8794 156.285 77.0103 156.285 cv
76.1406 156.285 75.4351 156.99 75.4351 157.859 cv
75.4351 158.729 76.1406 159.435 77.0103 159.435 cv
77.8794 159.435 78.585 158.729 78.585 157.859 cv
@
1 lc
77.1001 157.95 mo
77.1001 157.95 li
@
0 lc
34.4253 138.899 mo
34.4253 138.03 33.7197 137.325 32.8501 137.325 cv
31.981 137.325 31.2754 138.03 31.2754 138.899 cv
31.2754 139.77 31.981 140.475 32.8501 140.475 cv
33.7197 140.475 34.4253 139.77 34.4253 138.899 cv
@
1 lc
32.9004 138.899 mo
32.9004 138.899 li
@
0 lc
76.665 125.939 mo
76.665 125.07 75.9595 124.365 75.0903 124.365 cv
74.2207 124.365 73.5151 125.07 73.5151 125.939 cv
73.5151 126.81 74.2207 127.515 75.0903 127.515 cv
75.9595 127.515 76.665 126.81 76.665 125.939 cv
@
1 lc
75.1504 126 mo
75.1504 126 li
@
0 lc
218.985 75.2998 mo
218.985 74.4302 218.279 73.7246 217.41 73.7246 cv
216.541 73.7246 215.835 74.4302 215.835 75.2998 cv
215.835 76.1689 216.541 76.875 217.41 76.875 cv
218.279 76.875 218.985 76.1689 218.985 75.2998 cv
@
1 lc
217.351 75.2998 mo
217.351 75.2998 li
@
0 lc
119.025 28.5 mo
119.025 27.6304 118.319 26.9248 117.45 26.9248 cv
116.581 26.9248 115.875 27.6304 115.875 28.5 cv
115.875 29.3691 116.581 30.0747 117.45 30.0747 cv
118.319 30.0747 119.025 29.3691 119.025 28.5 cv
@
1 lc
117.45 28.3999 mo
117.45 28.3999 li
@
0 lc
96.8252 115.859 mo
96.8252 114.99 96.1196 114.285 95.25 114.285 cv
94.3809 114.285 93.6753 114.99 93.6753 115.859 cv
93.6753 116.729 94.3809 117.435 95.25 117.435 cv
96.1196 117.435 96.8252 116.729 96.8252 115.859 cv
@
1 lc
95.3501 115.85 mo
95.3501 115.85 li
@
0 lc
124.785 161.22 mo
124.785 160.351 124.08 159.645 123.21 159.645 cv
122.341 159.645 121.635 160.351 121.635 161.22 cv
121.635 162.089 122.341 162.795 123.21 162.795 cv
124.08 162.795 124.785 162.089 124.785 161.22 cv
@
1 lc
123.2 161.25 mo
123.2 161.25 li
@
0 lc
102.585 106.979 mo
102.585 106.11 101.879 105.405 101.01 105.405 cv
100.141 105.405 99.4351 106.11 99.4351 106.979 cv
99.4351 107.85 100.141 108.555 101.01 108.555 cv
101.879 108.555 102.585 107.85 102.585 106.979 cv
@
1 lc
101.1 107 mo
101.1 107 li
@
0 lc
171.825 107.46 mo
171.825 106.591 171.119 105.885 170.25 105.885 cv
169.381 105.885 168.675 106.591 168.675 107.46 cv
168.675 108.329 169.381 109.035 170.25 109.035 cv
171.119 109.035 171.825 108.329 171.825 107.46 cv
@
1 lc
170.25 107.55 mo
170.25 107.55 li
@
0 lc
194.025 96.1797 mo
194.025 95.3105 193.319 94.6045 192.45 94.6045 cv
191.581 94.6045 190.875 95.3105 190.875 96.1797 cv
190.875 97.0488 191.581 97.7549 192.45 97.7549 cv
193.319 97.7549 194.025 97.0488 194.025 96.1797 cv
@
1 lc
192.351 96.25 mo
192.351 96.25 li
@
0 lc
144.825 74.8198 mo
144.825 73.9502 144.119 73.2446 143.25 73.2446 cv
142.381 73.2446 141.675 73.9502 141.675 74.8198 cv
141.675 75.689 142.381 76.3945 143.25 76.3945 cv
144.119 76.3945 144.825 75.689 144.825 74.8198 cv
@
1 lc
143.351 74.8496 mo
143.351 74.8496 li
@
0 lc
120.825 122.34 mo
120.825 121.471 120.12 120.765 119.25 120.765 cv
118.381 120.765 117.675 121.471 117.675 122.34 cv
117.675 123.209 118.381 123.915 119.25 123.915 cv
120.12 123.915 120.825 123.209 120.825 122.34 cv
@
1 lc
119.35 122.3 mo
119.35 122.3 li
@
0 lc
94.9053 135.54 mo
94.9053 134.67 94.1997 133.965 93.3301 133.965 cv
92.4609 133.965 91.7554 134.67 91.7554 135.54 cv
91.7554 136.409 92.4609 137.115 93.3301 137.115 cv
94.1997 137.115 94.9053 136.409 94.9053 135.54 cv
@
1 lc
93.4004 135.6 mo
93.4004 135.6 li
@
0 lc
171.825 132.66 mo
171.825 131.79 171.119 131.085 170.25 131.085 cv
169.381 131.085 168.675 131.79 168.675 132.66 cv
168.675 133.529 169.381 134.234 170.25 134.234 cv
171.119 134.234 171.825 133.529 171.825 132.66 cv
@
1 lc
170.25 132.649 mo
170.25 132.649 li
@
0 lc
116.985 130.5 mo
116.985 129.63 116.28 128.925 115.41 128.925 cv
114.541 128.925 113.835 129.63 113.835 130.5 cv
113.835 131.369 114.541 132.075 115.41 132.075 cv
116.28 132.075 116.985 131.369 116.985 130.5 cv
@
1 lc
115.5 130.6 mo
115.5 130.6 li
@
0 lc
110.385 108.42 mo
110.385 107.551 109.68 106.845 108.81 106.845 cv
107.941 106.845 107.235 107.551 107.235 108.42 cv
107.235 109.289 107.941 109.995 108.81 109.995 cv
109.68 109.995 110.385 109.289 110.385 108.42 cv
@
1 lc
108.8 108.35 mo
108.8 108.35 li
@
0 lc
200.745 93.7793 mo
200.745 92.9102 200.04 92.2046 199.17 92.2046 cv
198.301 92.2046 197.595 92.9102 197.595 93.7793 cv
197.595 94.6494 198.301 95.3545 199.17 95.3545 cv
200.04 95.3545 200.745 94.6494 200.745 93.7793 cv
@
1 lc
199.101 93.7998 mo
199.101 93.7998 li
@
0 lc
64.1851 118.02 mo
64.1851 117.15 63.4795 116.444 62.6104 116.444 cv
61.7407 116.444 61.0352 117.15 61.0352 118.02 cv
61.0352 118.89 61.7407 119.595 62.6104 119.595 cv
63.4795 119.595 64.1851 118.89 64.1851 118.02 cv
@
1 lc
62.7002 118.05 mo
62.7002 118.05 li
@
0 lc
123.825 113.939 mo
123.825 113.07 123.12 112.365 122.25 112.365 cv
121.381 112.365 120.675 113.07 120.675 113.939 cv
120.675 114.81 121.381 115.515 122.25 115.515 cv
123.12 115.515 123.825 114.81 123.825 113.939 cv
@
1 lc
122.25 114 mo
122.25 114 li
@
0 lc
104.625 163.14 mo
104.625 162.271 103.919 161.564 103.05 161.564 cv
102.181 161.564 101.475 162.271 101.475 163.14 cv
101.475 164.009 102.181 164.715 103.05 164.715 cv
103.919 164.715 104.625 164.009 104.625 163.14 cv
@
1 lc
103.05 163.1 mo
103.05 163.1 li
@
0 lc
154.665 121.859 mo
154.665 120.99 153.96 120.285 153.09 120.285 cv
152.221 120.285 151.516 120.99 151.516 121.859 cv
151.516 122.729 152.221 123.435 153.09 123.435 cv
153.96 123.435 154.665 122.729 154.665 121.859 cv
@
1 lc
153 121.95 mo
153 121.95 li
@
0 lc
107.385 107.46 mo
107.385 106.591 106.68 105.885 105.81 105.885 cv
104.941 105.885 104.235 106.591 104.235 107.46 cv
104.235 108.329 104.941 109.035 105.81 109.035 cv
106.68 109.035 107.385 108.329 107.385 107.46 cv
@
1 lc
105.9 107.55 mo
105.9 107.55 li
@
0 lc
187.306 127.38 mo
187.306 126.511 186.6 125.805 185.73 125.805 cv
184.86 125.805 184.155 126.511 184.155 127.38 cv
184.155 128.249 184.86 128.955 185.73 128.955 cv
186.6 128.955 187.306 128.249 187.306 127.38 cv
@
1 lc
185.65 127.399 mo
185.65 127.399 li
@
0 lc
116.985 109.14 mo
116.985 108.271 116.28 107.564 115.41 107.564 cv
114.541 107.564 113.835 108.271 113.835 109.14 cv
113.835 110.009 114.541 110.715 115.41 110.715 cv
116.28 110.715 116.985 110.009 116.985 109.14 cv
@
1 lc
115.5 109.2 mo
115.5 109.2 li
@
0 lc
94.9053 108.899 mo
94.9053 108.03 94.1997 107.325 93.3301 107.325 cv
92.4609 107.325 91.7554 108.03 91.7554 108.899 cv
91.7554 109.77 92.4609 110.475 93.3301 110.475 cv
94.1997 110.475 94.9053 109.77 94.9053 108.899 cv
@
1 lc
93.4004 108.8 mo
93.4004 108.8 li
@
0 lc
106.425 142.5 mo
106.425 141.63 105.72 140.925 104.85 140.925 cv
103.981 140.925 103.275 141.63 103.275 142.5 cv
103.275 143.369 103.981 144.075 104.85 144.075 cv
105.72 144.075 106.425 143.369 106.425 142.5 cv
@
1 lc
104.95 142.6 mo
104.95 142.6 li
@
0 lc
95.9854 142.5 mo
95.9854 141.63 95.2798 140.925 94.4102 140.925 cv
93.541 140.925 92.835 141.63 92.835 142.5 cv
92.835 143.369 93.541 144.075 94.4102 144.075 cv
95.2798 144.075 95.9854 143.369 95.9854 142.5 cv
@
1 lc
94.4004 142.6 mo
94.4004 142.6 li
@
0 lc
89.145 108.18 mo
89.145 107.311 88.4395 106.604 87.5703 106.604 cv
86.7007 106.604 85.9951 107.311 85.9951 108.18 cv
85.9951 109.049 86.7007 109.755 87.5703 109.755 cv
88.4395 109.755 89.145 109.049 89.145 108.18 cv
@
1 lc
87.6504 108.1 mo
87.6504 108.1 li
@
0 lc
109.425 118.979 mo
109.425 118.11 108.72 117.405 107.85 117.405 cv
106.981 117.405 106.275 118.11 106.275 118.979 cv
106.275 119.85 106.981 120.555 107.85 120.555 cv
108.72 120.555 109.425 119.85 109.425 118.979 cv
@
1 lc
107.85 119 mo
107.85 119 li
@
0 lc
143.025 145.74 mo
143.025 144.87 142.319 144.165 141.45 144.165 cv
140.581 144.165 139.875 144.87 139.875 145.74 cv
139.875 146.609 140.581 147.314 141.45 147.314 cv
142.319 147.314 143.025 146.609 143.025 145.74 cv
@
1 lc
141.45 145.75 mo
141.45 145.75 li
@
0 lc
139.186 121.38 mo
139.186 120.511 138.479 119.805 137.61 119.805 cv
136.741 119.805 136.035 120.511 136.035 121.38 cv
136.035 122.249 136.741 122.955 137.61 122.955 cv
138.479 122.955 139.186 122.249 139.186 121.38 cv
@
1 lc
137.601 121.45 mo
137.601 121.45 li
@
0 lc
163.186 71.6997 mo
163.186 70.8306 162.479 70.125 161.61 70.125 cv
160.741 70.125 160.035 70.8306 160.035 71.6997 cv
160.035 72.5693 160.741 73.2749 161.61 73.2749 cv
162.479 73.2749 163.186 72.5693 163.186 71.6997 cv
@
1 lc
161.601 71.7998 mo
161.601 71.7998 li
@
0 lc
192.105 68.5796 mo
192.105 67.7104 191.399 67.0049 190.53 67.0049 cv
189.661 67.0049 188.955 67.7104 188.955 68.5796 cv
188.955 69.4492 189.661 70.1548 190.53 70.1548 cv
191.399 70.1548 192.105 69.4492 192.105 68.5796 cv
@
1 lc
190.45 68.5498 mo
190.45 68.5498 li
@
0 lc
97.7852 141.899 mo
97.7852 141.03 97.0796 140.325 96.21 140.325 cv
95.3408 140.325 94.6353 141.03 94.6353 141.899 cv
94.6353 142.77 95.3408 143.475 96.21 143.475 cv
97.0796 143.475 97.7852 142.77 97.7852 141.899 cv
@
1 lc
96.3003 141.899 mo
96.3003 141.899 li
@
0 lc
203.625 81.7798 mo
203.625 80.9102 202.92 80.2046 202.05 80.2046 cv
201.181 80.2046 200.476 80.9102 200.476 81.7798 cv
200.476 82.6494 201.181 83.355 202.05 83.355 cv
202.92 83.355 203.625 82.6494 203.625 81.7798 cv
@
1 lc
201.95 81.6997 mo
201.95 81.6997 li
@
0 lc
88.1851 147.78 mo
88.1851 146.91 87.4795 146.205 86.6104 146.205 cv
85.7407 146.205 85.0352 146.91 85.0352 147.78 cv
85.0352 148.649 85.7407 149.354 86.6104 149.354 cv
87.4795 149.354 88.1851 148.649 88.1851 147.78 cv
@
1 lc
86.7002 147.8 mo
86.7002 147.8 li
@
0 lc
111.225 124.979 mo
111.225 124.11 110.52 123.405 109.65 123.405 cv
108.781 123.405 108.075 124.11 108.075 124.979 cv
108.075 125.85 108.781 126.555 109.65 126.555 cv
110.52 126.555 111.225 125.85 111.225 124.979 cv
@
1 lc
109.75 125.05 mo
109.75 125.05 li
@
0 lc
125.625 84.1797 mo
125.625 83.3105 124.919 82.605 124.05 82.605 cv
123.181 82.605 122.475 83.3105 122.475 84.1797 cv
122.475 85.0493 123.181 85.7549 124.05 85.7549 cv
124.919 85.7549 125.625 85.0493 125.625 84.1797 cv
@
1 lc
124.15 84.1499 mo
124.15 84.1499 li
@
0 lc
149.625 103.859 mo
149.625 102.99 148.92 102.285 148.05 102.285 cv
147.181 102.285 146.476 102.99 146.476 103.859 cv
146.476 104.729 147.181 105.435 148.05 105.435 cv
148.92 105.435 149.625 104.729 149.625 103.859 cv
@
1 lc
148.15 103.85 mo
148.15 103.85 li
@
0 lc
112.185 147.06 mo
112.185 146.19 111.479 145.484 110.61 145.484 cv
109.741 145.484 109.035 146.19 109.035 147.06 cv
109.035 147.929 109.741 148.635 110.61 148.635 cv
111.479 148.635 112.185 147.929 112.185 147.06 cv
@
1 lc
110.7 147.05 mo
110.7 147.05 li
@
0 lc
93.9453 126.54 mo
93.9453 125.67 93.2397 124.965 92.3701 124.965 cv
91.501 124.965 90.7954 125.67 90.7954 126.54 cv
90.7954 127.409 91.501 128.115 92.3701 128.115 cv
93.2397 128.115 93.9453 127.409 93.9453 126.54 cv
@
1 lc
92.4502 126.55 mo
92.4502 126.55 li
@
0 lc
196.905 105.3 mo
196.905 104.431 196.199 103.725 195.33 103.725 cv
194.461 103.725 193.755 104.431 193.755 105.3 cv
193.755 106.169 194.461 106.875 195.33 106.875 cv
196.199 106.875 196.905 106.169 196.905 105.3 cv
@
1 lc
195.25 105.399 mo
195.25 105.399 li
@
0 lc
129.585 113.46 mo
129.585 112.591 128.879 111.885 128.01 111.885 cv
127.141 111.885 126.435 112.591 126.435 113.46 cv
126.435 114.329 127.141 115.035 128.01 115.035 cv
128.879 115.035 129.585 114.329 129.585 113.46 cv
@
1 lc
128 113.55 mo
128 113.55 li
@
0 lc
142.065 85.6196 mo
142.065 84.7505 141.359 84.0449 140.49 84.0449 cv
139.621 84.0449 138.915 84.7505 138.915 85.6196 cv
138.915 86.4893 139.621 87.1948 140.49 87.1948 cv
141.359 87.1948 142.065 86.4893 142.065 85.6196 cv
@
1 lc
140.5 85.5498 mo
140.5 85.5498 li
@
0 lc
115.185 64.2598 mo
115.185 63.3906 114.479 62.6846 113.61 62.6846 cv
112.741 62.6846 112.035 63.3906 112.035 64.2598 cv
112.035 65.1294 112.741 65.835 113.61 65.835 cv
114.479 65.835 115.185 65.1294 115.185 64.2598 cv
@
1 lc
113.6 64.2998 mo
113.6 64.2998 li
@
0 lc
121.785 108.42 mo
121.785 107.551 121.08 106.845 120.21 106.845 cv
119.341 106.845 118.635 107.551 118.635 108.42 cv
118.635 109.289 119.341 109.995 120.21 109.995 cv
121.08 109.995 121.785 109.289 121.785 108.42 cv
@
1 lc
120.3 108.45 mo
120.3 108.45 li
@
0 lc
116.985 110.819 mo
116.985 109.95 116.28 109.245 115.41 109.245 cv
114.541 109.245 113.835 109.95 113.835 110.819 cv
113.835 111.689 114.541 112.395 115.41 112.395 cv
116.28 112.395 116.985 111.689 116.985 110.819 cv
@
1 lc
115.5 110.75 mo
115.5 110.75 li
@
0 lc
122.865 108.18 mo
122.865 107.311 122.16 106.604 121.29 106.604 cv
120.421 106.604 119.715 107.311 119.715 108.18 cv
119.715 109.049 120.421 109.755 121.29 109.755 cv
122.16 109.755 122.865 109.049 122.865 108.18 cv
@
1 lc
121.3 108.25 mo
121.3 108.25 li
@
0 lc
100.785 124.979 mo
100.785 124.11 100.08 123.405 99.21 123.405 cv
98.3408 123.405 97.6353 124.11 97.6353 124.979 cv
97.6353 125.85 98.3408 126.555 99.21 126.555 cv
100.08 126.555 100.785 125.85 100.785 124.979 cv
@
1 lc
99.2002 124.899 mo
99.2002 124.899 li
@
0 lc
177.705 96.1797 mo
177.705 95.3105 177 94.6045 176.13 94.6045 cv
175.261 94.6045 174.556 95.3105 174.556 96.1797 cv
174.556 97.0488 175.261 97.7549 176.13 97.7549 cv
177 97.7549 177.705 97.0488 177.705 96.1797 cv
@
1 lc
176.05 96.25 mo
176.05 96.25 li
@
0 lc
59.3853 96.1797 mo
59.3853 95.3105 58.6797 94.6045 57.8101 94.6045 cv
56.9409 94.6045 56.2354 95.3105 56.2354 96.1797 cv
56.2354 97.0488 56.9409 97.7549 57.8101 97.7549 cv
58.6797 97.7549 59.3853 97.0488 59.3853 96.1797 cv
@
1 lc
57.9004 96.25 mo
57.9004 96.25 li
@
0 lc
107.385 94.5 mo
107.385 93.6309 106.68 92.9248 105.81 92.9248 cv
104.941 92.9248 104.235 93.6309 104.235 94.5 cv
104.235 95.3691 104.941 96.0752 105.81 96.0752 cv
106.68 96.0752 107.385 95.3691 107.385 94.5 cv
@
1 lc
105.9 94.3994 mo
105.9 94.3994 li
@
0 lc
121.785 70.7397 mo
121.785 69.8701 121.08 69.165 120.21 69.165 cv
119.341 69.165 118.635 69.8701 118.635 70.7397 cv
118.635 71.6094 119.341 72.3149 120.21 72.3149 cv
121.08 72.3149 121.785 71.6094 121.785 70.7397 cv
@
1 lc
120.3 70.75 mo
120.3 70.75 li
@
0 lc
73.7852 140.58 mo
73.7852 139.71 73.0796 139.005 72.21 139.005 cv
71.3408 139.005 70.6353 139.71 70.6353 140.58 cv
70.6353 141.449 71.3408 142.155 72.21 142.155 cv
73.0796 142.155 73.7852 141.449 73.7852 140.58 cv
@
1 lc
72.3003 140.6 mo
72.3003 140.6 li
@
0 lc
190.065 96.6602 mo
190.065 95.79 189.359 95.085 188.49 95.085 cv
187.621 95.085 186.915 95.79 186.915 96.6602 cv
186.915 97.5293 187.621 98.2344 188.49 98.2344 cv
189.359 98.2344 190.065 97.5293 190.065 96.6602 cv
@
1 lc
188.5 96.6494 mo
188.5 96.6494 li
@
0 lc
189.226 92.9399 mo
189.226 92.0703 188.52 91.3647 187.65 91.3647 cv
186.781 91.3647 186.075 92.0703 186.075 92.9399 cv
186.075 93.8096 186.781 94.5146 187.65 94.5146 cv
188.52 94.5146 189.226 93.8096 189.226 92.9399 cv
@
1 lc
187.55 92.9497 mo
187.55 92.9497 li
@
0 lc
83.3853 149.46 mo
83.3853 148.591 82.6797 147.885 81.8101 147.885 cv
80.9409 147.885 80.2354 148.591 80.2354 149.46 cv
80.2354 150.329 80.9409 151.035 81.8101 151.035 cv
82.6797 151.035 83.3853 150.329 83.3853 149.46 cv
@
1 lc
81.9004 149.45 mo
81.9004 149.45 li
@
0 lc
163.186 128.34 mo
163.186 127.471 162.479 126.765 161.61 126.765 cv
160.741 126.765 160.035 127.471 160.035 128.34 cv
160.035 129.209 160.741 129.915 161.61 129.915 cv
162.479 129.915 163.186 129.209 163.186 128.34 cv
@
1 lc
161.601 128.399 mo
161.601 128.399 li
@
0 lc
163.186 87.0596 mo
163.186 86.1904 162.479 85.4849 161.61 85.4849 cv
160.741 85.4849 160.035 86.1904 160.035 87.0596 cv
160.035 87.9292 160.741 88.6348 161.61 88.6348 cv
162.479 88.6348 163.186 87.9292 163.186 87.0596 cv
@
1 lc
161.601 87.1499 mo
161.601 87.1499 li
@
0 lc
79.5454 100.74 mo
79.5454 99.8701 78.8394 99.165 77.9702 99.165 cv
77.1006 99.165 76.395 99.8701 76.395 100.74 cv
76.395 101.609 77.1006 102.314 77.9702 102.314 cv
78.8394 102.314 79.5454 101.609 79.5454 100.74 cv
@
1 lc
78.0503 100.7 mo
78.0503 100.7 li
@
0 lc
67.0654 149.7 mo
67.0654 148.83 66.3594 148.125 65.4902 148.125 cv
64.6206 148.125 63.915 148.83 63.915 149.7 cv
63.915 150.569 64.6206 151.274 65.4902 151.274 cv
66.3594 151.274 67.0654 150.569 67.0654 149.7 cv
@
1 lc
65.5503 149.8 mo
65.5503 149.8 li
@
0 lc
124.785 112.14 mo
124.785 111.271 124.08 110.564 123.21 110.564 cv
122.341 110.564 121.635 111.271 121.635 112.14 cv
121.635 113.009 122.341 113.715 123.21 113.715 cv
124.08 113.715 124.785 113.009 124.785 112.14 cv
@
1 lc
123.2 112.149 mo
123.2 112.149 li
@
0 lc
92.9854 144.899 mo
92.9854 144.03 92.2798 143.325 91.4102 143.325 cv
90.541 143.325 89.835 144.03 89.835 144.899 cv
89.835 145.77 90.541 146.475 91.4102 146.475 cv
92.2798 146.475 92.9854 145.77 92.9854 144.899 cv
@
1 lc
91.5 145 mo
91.5 145 li
@
0 lc
108.345 106.979 mo
108.345 106.11 107.64 105.405 106.77 105.405 cv
105.901 105.405 105.195 106.11 105.195 106.979 cv
105.195 107.85 105.901 108.555 106.77 108.555 cv
107.64 108.555 108.345 107.85 108.345 106.979 cv
@
1 lc
106.85 106.899 mo
106.85 106.899 li
@
0 lc
110.385 143.22 mo
110.385 142.351 109.68 141.645 108.81 141.645 cv
107.941 141.645 107.235 142.351 107.235 143.22 cv
107.235 144.089 107.941 144.795 108.81 144.795 cv
109.68 144.795 110.385 144.089 110.385 143.22 cv
@
1 lc
108.8 143.149 mo
108.8 143.149 li
@
0 lc
44.0254 136.5 mo
44.0254 135.63 43.3193 134.925 42.4502 134.925 cv
41.5806 134.925 40.875 135.63 40.875 136.5 cv
40.875 137.369 41.5806 138.075 42.4502 138.075 cv
43.3193 138.075 44.0254 137.369 44.0254 136.5 cv
@
1 lc
42.5 136.45 mo
42.5 136.45 li
@
0 lc
115.185 127.38 mo
115.185 126.511 114.479 125.805 113.61 125.805 cv
112.741 125.805 112.035 126.511 112.035 127.38 cv
112.035 128.249 112.741 128.955 113.61 128.955 cv
114.479 128.955 115.185 128.249 115.185 127.38 cv
@
1 lc
113.6 127.45 mo
113.6 127.45 li
@
0 lc
165.226 102.42 mo
165.226 101.551 164.52 100.845 163.65 100.845 cv
162.781 100.845 162.075 101.551 162.075 102.42 cv
162.075 103.289 162.781 103.995 163.65 103.995 cv
164.52 103.995 165.226 103.289 165.226 102.42 cv
@
1 lc
163.55 102.35 mo
163.55 102.35 li
@
0.5 lw
0 lc
0.25 0.25 mo
0.25 184.899 li
264.4 184.899 li
264.4 0.25 li
0.25 0.25 li
0.25 0.25 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (bivariate2.eps)%%CreationDate: 10/4/10 1:59 PM%AI9_DataStream%Gb!R&kuo%Lc7&VHJFC;_%^XudgJ%a&ac&dsKEOUS@_`!GfYf[`n+HZ>f7$=L8Cc7CgVZ(!^L,QuJ6&^N;N3.8<Me,5qk\FVhn%WW%s*M:i#B%qsS>,2tMI*Dc.$\uEO.4rNS8ul`WXLU1=+/8UfN[b/Q`"GrGLU>62nRnjp1(_`>qU"W2Qe,/V=d"OZ@;i+XLC8eNF"=j%>6)"#bDhkca.)fV:KPfdEm_4n!-U$kf;IHED0*8/rtaP+f(J(H:%O1gCu4MAZ.E9+&R=nA:R\s<j-19n1O_7>SKI(.0W=nfp>WT-%Hf+45)SQ#klhd3FrMfVbr7L3j\Y-**/c.sqo\h1r/MWY5U,lCN=[bRIMF$0WG>nsp^[@Tk=t[O)>i3#:mI$O,l0/+M<5s6^GB3^J%9Y@Cm'SFaEd,UJ5B'6ODhd\ul:aeMSf=kr_8eD$2rn%3:/cMB%5Abu@WR87np/pXg+(%:Qj^QK?`%+m=LQ0'<*DoI+^k_)blVm[:%kB=tHg.[k6lH*WY+^bcI<&o6].L*U<aOU`On)8%N2IMf"`1#^RkPk1h[EQ>rD7%d&^S)t]S754ji7sZ7gAdlC?SKQ3mIco"aY<$:%S*u/nAX2/DL]TcrZ#8'+gp;mDSQ[aY`#1'EXK>]2NEu^e\lL?L2ZI(<pq$boa(#'R(OfDcn1tL3kN8Xn\h<o(?$P\HnCDa$gNjmS%(11(BJ5r_g;mcs7eLFs,X7a&u)2<YTL4BrCJ+.Rt!`g->(An>#!Gc`iYVnH!bKWb+ZagB%ofBaff;hpH\mC0dot'ofE%Lc!r.l!)%>PM+0GMPRlIKC;+"?unpA5\SJG9@Lq"<<L/IY-@T-H*A9'E!M2O9g::,uIHi1.VO46#QH,:ll"+'X]C4#:trEIKE9X%PZEs^q$CR%;2_07i2??J81qCg]F3Ral+jiE,D@<?!>``]5Cnu25p<X\-X$q-!uAtU>$0:3p_MqCTC<!3M=u^sJocIX:V[&-i2:6Wd7Zm@MXmH/%eH^VGeULPf$3!>p".#lE<A-[Z_*)`ip_)Zqb,W,XLAD-7+J%ec+<>h]U_[l7555FdU47fCU/&Y9n.Tb+\jB!]Cc-B(c&!'$moFj=%obH$3J90+:6sidN6FEekGJTiKF]#<?2rIrKLltL%%To`Q6!\jkhMZl8F"oF=D\d1Bl:+UKo7*M7dV'HS'M<,Id`>>Z7"&G7DUn3T%s2!=:LX\km<`ZV%m/S-*RY7lD2AE?P?WF8%/&&B-MuSFe@TKkt5K=@SkdU?MH/b6@MgpGDmgBF"(B8tO4O\6=Y>u=_[@/SW-NC3O%M`:94r7fj8ch(H>/!RKN"GD5^J(r`;R=:'D(B,!=3OBh)'^[BAeW]dQjE%t.c`_7i?EghD$b#!.]YE,T2;f;Imm:a@0E6m7f5&)6%Ct6"Hm<Td\=b"9>#i1NU?a&Sj3qAUVeEcV+=&kJF,igXd@'S+@X-D\[i+kf<QXV3>r\d$m6\K<E=I]Hu7O%clDC@'^iElYXjP=g;%_RbE1<49Cb@$WI[j'VZFQNE*7(kg3YqHGLJI#BlEHUQNne2M37ek<+1?h(n>-!s7O2Eo^2?TsD]5t,01b*&48]7a;OpU7.\r_NR=%hla##Cuj+Ujh!#?L9bAr8BLLe`GYp8J&,11;suth6&!^i+oP-+IZu'['#tP8AuXMXnbWb)duXJ;n#[$b%7VaCPPr\BSdff[;@D6f%<]_IDY5/U.h7BUZpg*JNNqgb^Do)bpOF(9@X_Z$:W^h'1N>VV:_5Z__MDsD[L`pQMM=_VoT@]Ok8(A['inBNdA+g8f*.+*Ue[/%6%b`c9\g)KZRE3?"ca/,#S^ZG-_C'-td]rpG9)U_i66e$ZN8iW`Bia0';?/mqESD!5L=$8%J_I[b'A',cA3`Qh(7L#(t)-9#pD5obu%f/g;Fa4q;tCJr8T\*=Q/FZ!X,Xe;98I."MLnOS)_8'&8EL2*tqI;`T`oV//`(Eg&c24rq`q]iOt5WF(NO3L@g.aBt:L\O@;lTNdZ%8cuDs7R&``=R1IdhPsToN$L7Eg=VI&*2-?4nF^sh50OZ!0Ak=6@uJ(0e0s%hrpN6ibo?b,;(q7@[s0_kZ!K%T9Bs"-+m9eYG1_W&%aZ?RBlaWPU^EW9^l7M"dW51a,r$I]+eYSdm*1,52HOJSZn7pH^U4kT"3lrSc[lFLu>e&GSp*TK-7<_E)RUj>ThF*dt80suVW1GJM%Q0Sje3+CG"p[OYOolJ*e`il,1qBE)IaF=b,%Eu:@EdUWMH>9,G2/T1LF%pG\*-kH1F_ruIhme^3Wt+U!Ehs9m5G?[)XH.)]=:h%p%n2G?fFH2IJ:<fa@;6ti;bspSj15`h53N%UbTuO5bGJ0m=?UD.<PfdT_5XV#2`QB"Y>CA#*?gJ6/EA,=9SQ:!46`?-^-1jHc<NTbn%Ptu1:QV)H:?/&9EW-YJXqF"C92.C-(6nY./oifgK_ru5IOnYf8o=bthPE-@U[p&B;m8l'+h"8!IZXQ=peba`9[56AHjO$E0f!2VD%XfB-)T;N:$-ue!]S`Ju19f4s^Wa<e:M+==B.iU>j?;kuPbG;BUD)$*$dHfK'Gsc<?[]Q[hZ*B;7>>cY:cbjbC3&`\Gkh9,0E&GXt%,kcjk?([6be.*L6-Y"4Y-)27E\B)5?^sZtOn*K+?A*>"d;`2%G/5DkQ(HcrPN[ZPba8p_61N[(1_6K*8Rq:p<J9u4f?UH\4i(>rt%D_X$W9Ar*>2UdAg!]a2D[Tb]K71arc[\(@YdoHC$UJC]kI4O15hu(_jZhO#A*$tOYnpR!9hm^CL;0^FEe1Qe'?eDEM:Aa-uYP"r%%QsII@?T!a3NS[r\j0@:Kl-:"i9KX*0(CYV7s&W.7b)Q;]\P.=A3oGt./Uk5+h7W0\O!T>U3dJ:)2>\%J\H\*gVmt-"l/!.>[G-b`%?h>)=.DZu2q#;@G*:XPC+'PD9j!@8"Z_[7hn%Z">L7MWPHhlPmIC&J=G^nI^4Q"t%-P_a4*_R.7"t6SPf]Y0VHiBsmkNJ4]5@(Z=%n%2BF)`>]6UXQiiIVbVRh<d(lqGZ-`rb?YKZteXJmFGXha7cjZ,XNEOS)Tc(k;eGW1t/Z*edWQAHot=b[\'/-SR4LiCHOO9]=kg;%a#qJkN?9+A7]4>d8.qdAeplA#(7gTk%#OhICgtnl^87[m3AD4d^e<P]qm"g+<"<+!J$o&=EOdcM_.p.Co%<h'=00&Q4>i%TL!%O9%dke%NM..2a'J/JkIpdaH(R29(TV,QP<q5Npp9;mBpru)(.XK'X`Ja1cnV0?UNXOe.5.`7CKRg66`<n,]rT4MDM28jZ1*/:oRr"=1%-B>59Bs@rZ;R[3q:cQ$=*,T(,MUin-Gf[tjeJ=@",7N%#[O#7:E<'PK57(qT$t'E^af>c?&F8[o76S!.KW"]_W/X:0Dt/5KmdPZ%%VO@5MF`I-4:QI+$HATnKSboIS?B_LbMh&CqkqrCsO;J(J%I<lYrpcl7C^D)Z=P71AK5]^=mr'&nn94M*X*aYDUXOY9`lAC\c;slL%l<fOk(PN7dD@0^.N@f].3U'#)rg222X5.OQW0kX!ogA<t:X(<3`W*#E=8+gXbK_7MlPrSUIF!W20;"7fVWJu*-LAsFa<gk7j6En;%VrRMgec/>GIJL)%6QK#'_`\pV]70#<g/%b%RI$R3LWeKXW%G79Yp#FB49":#K(8D=`6/*%7VVVK^]'-mj8\U&kW[j1s)4NfSZ4%=%U+=:/`acT]s15u0h;r?ZM>3^6K'f"6[_8oK<-QUagUfRh#%IRejU0dl,5jUT0`4]SJcY[qV"m*51k5P'V-t%Z7_>37``9Xk["6-W%YFZ"RcQcHfS,\)*T20_[m?c+@P:'N2a-V7`5lIT`G\Zpj2bXl'Q&flP5,N4nkoijkdZF:F([meOpFf<2b.dp,eS4@KRXM06Xmaqd%&If`892Lk0%a@c=W71)kHUZY-=__(.mo4kWHWEJ.f.:6Z#Cp%LGq8ZURLIdA_W&1>pTAbrkk:I9qu>Uj-&o<+ndd=\YAM&HMRUId%-`3@=nII:dB82LB^?YTu0:N).C34c'm7-99GR_bH7@WhNWnu.MHC[O+qqPS]HMod4iVo_,^&O^::6N)WVWnW)j#OMh>Xp<Y0BsZj%43AhqQW_86,7VK$60GF`nPf&:^#Jb1IBRX5s*3Gu)d?%"N;'0d7dKcEESE#c[@^IJR1m,hCW:GUk/QTk:Q=dp_,L*=h(u8RO8!\;%$rkF+4PuK:"\Au`Z@eo`IBU0[dVE?RM0JHnptU++K:mSko^^Y-?=]tbTR:Zl'k.o-iFqNGU6bdn?M@Q=?SrlDXm:X[V16?CrSr=,%=mWDNc\L3@FkR@@rNK4^Y935*)9]8Cq_r<_>:*RH0:l/[B`HWL4G2/uFahnbfBpjXo-W>(`QJ($0CmiJlaPCkElInkkG[4uY(DTM%9UiV`,&>2Wkt7:sj)0J,Ro8`c?1<@KL-QIoU[hQpeqW$bOble?mrTI,pX&<D1EpElA+Jk;NEt='3lr!^1?XL7&#%7anHJ%FiG"Ss%*Qh2FH6pLL5KI_bU3A-$XoqqraqEq:CF^m7po;*1I6(`R?"5F=("0cFCbS(33MAuFiZd]5h;2Z;7Sr/o\1)'@fkg6KRDc!,4O5t4%2c&f5@k0K:cSrCk$gSRW@FnKOl\Nm5Sanr)\<\5)&t9E<f9Xn":Reh(bRX$\!oM,>'rj)cM/h$\_#7@3f<9(uf+78o5`=1Wn+IKs%e*d0OWtA30&eTE<?:e/.04Oh1rF7Vg?DDjihg9*#B;5g(:0aoY@:)6Bb1H"rRso^gSn>26QoIfI5ot.QDWdnPm_I3;;c/)?Mp4V5%mEY`"=(r>+Y6[1kKLUVm)2F94kOMnR]YDm?HbOoS-o9\JBs[WT&-"m'+DT.`hlnHnh=n/PbDr4IlN*7[Bpa]6>>-O4cYS-e[ska^%TQN*KDBDi\h-;fuh2KM<Loeaf2f(<bo0X!uS0E"3C6M$qCjhbNVP6:43Y1$pf/\qTlQ!DQf/^'paXu'j^KS>Ac/Wm.=1a_TE1aaR%d&>T5d*6IfDOJauT^0!&Wj_oH0`V)Vm[01G?f.&$Dt?Xi$r>/8UuE`'C4mrKgiSFERnbn'HL7LHk@dK&m<6rO^4%O^jnJW9n#X'\%&DOl[V$j)\KS<[V';srUEq)foMQ(-&%t.CS2LG#V_pPs(ia5G&2$F?:edj.=-r;bg>8aI\/:h:(8nT#\UfJYNZ(8HmCNEGdVIJfP%f3+u;Z,uC1GkH9#X)n:W<*n_JahD]X7Z"MF5;HH?Xo?SdPS1/d5iO\P>SB1M_\(`<(K>/LoTcFtgOD(j3.GYsc=F$EFlTa+B_B?f%=;_:joAfN$)4d8W>dq:I<Q]9,pQ&u:8mQ\Q&/*ItLJRXB(9igfXHQa%o4b!l&okK9=%Xr$GohBMrmcD?S8#1p@<[lkdV@XE7JX,<%\RB)_\mm60kL#%[^S+b)DKqQImi".0Nb1+=`/6/Y6'At%B'G+S,Aec?MI5M/d!i^ScsA[u2a_\IE:Yi@*RsjHHN8u3j/$mhCI6t3%NE/[iX_?$&_pW2Vf4]O6lc?ZS/A`/]D@29hej%.);F3,)2_bt;if:e"`]@6J^3="s.%<891HGZ3FW^%Dg")m_Z+L-ALCLF^[g<4^%Z8#bqhrlq]WcGk&"nAB;'cF!'`-N+7EANtb.28Bl%4D?[7%b]b=76J2JEmcFkk1.a]tKlLeV)3O<#8U6T>ACukGsJ?=a2m?Y]eW>%i@i5uo5WI&(E`0#ro1>tp8PO+odegCfUY'0Bl*aRc<'P<Z`nIT]pkC1G?6,W.Po,!d_s#f_jcK\dls.$]_d*YO7ff*(pZA,SkEDA%Sc6]'p=;G*>d\a)m]QXu[>!/rr7"cRZgk?7nF#ehf"p4]M0cf,:p+p=?2sG0qp3jF]"cE<@b4s>D65DF?#9Fdn!jLcDq>cXj7O$P%hg])W*c:IGr/&\/B.<)f\L1M9BQr?l^SIZ\h+l#F]!j/%%fr@<8gIj.>N<S1@an^"<d,lsH!R?F:2s=hEF-q??EqPA8*f<fq3FeL%Fn`!/I;\AA<UigrFho`#S*\=PYH3s[B6g(sBX`NH%pG[a:TI^!L&)nILJD$H5<Id&oM2A^<f15Mk#M)aZ/d/Gg9#e.dgFq(_UA9J%EhRCu?PQ2hRHaEdP,t4@TB5=jX6JY_8VL>jC[FhgU"-.,g?W)h(!:j.hJVN6XSSiSO,4T6=asa1ICOcNS65"#<;SAWcpDGYs3Q+Z%<l(])DqE8u'KR%Ke]BI^am[KYcb+G&9p_bZAYDUM1TXlVXm1<AFrkq&pAFd;G-oWbSaW2SN`-9j^@Y3>DC\;4(.t,>9:t'>YstEQ%jk%UJEhRCujuV>[Kl1q)8&5`)m-\hT(Kr4)`HGlpcg?r`rO]V.NTNuVU#,UU<=c5+8VOH62Hdd(VN7@>%nX'1p$^f(.>:g#8e8%J%Rq[R7XI[>&T6[-Wa,I1.A$+'6B7ofo<p`U5Y/s#VQY)4CZhE6[q'HI)rq90d6<UpB]WZ7T_dLT@@cq6TmP`g7U^#/BUk]an)_$JA%Vh0\nq@?nGTk"iFKl1&^k.c\nL$nnBIf$bKr]%10PLhU.;PAdW0D;&ai`\pZZ9g41XHUi<alGc!G+7qR^<XtM(A`<RFit/H<@fcg%ak]HIs!AGk@spOcIZn%#Tj'R[^O<Ft'Zs#[`BN`dVH33LbFQa]>+m%>05Cesab@H5h7igWnb`&I.8e[b+!1,R$iPMAhpbR3rDp8=%G9<016<Pb3f_<.QT0@oc2mL`Q]qnbETq0WR_F."ikGQo)rR3q\,tZ\Aqk_Dk\)3O\=eX#gbX(i@)-k<NYM;-Jd*-o$Cs;K;SXJ$]%?!\qD,%WpEIa0UM6_TFCQ0.Z3T3(acjX4*m8gh'[[9p&W6@3JUL85K!R@iN.&hA.cgtmraKo;Mil08Bc>)odCHV6uZc(7er_X$%"%W[Mu65$6funl"OJ\G5F(s2bXkVjB=QU4l?d3fU0U'Pa&!G1N."eUR<@bh:VJ]tD0NV'pN_A(dg=a`d:=-aC<A)jf+=m(@]Al:61]%p$MQFqrooM2-)I3N[\A4QaEsbf[RP+.ci6tK3&GM-2I7Y1Pj:0eXCocq!L>qN3B:a]?.D/\&$JKo!d,X2.up`B;(RhriYd$-M?c;%oBPXalJ'41es\sEN>c<qY<Ml1Sbi#7am6"`Pde'V=1`BG]Ai4]R6P,]`_I?<?iQG\mE&plp?C-,8LsK$kH+oaAL>(g;S&l%W#A<T%s(uOs-2$ZOdZ7csp$M5)dIT!(NRc\!B4p77lISfBp!k-uD]-G7?i*E57?*T+*H1U%p$:qpe]D7RgK,&lp:eeL^>3+FGL]BjYughJ%g8(;5G(%5qSm+s8lgJ$3/+ZBqjk88JW8(\RoWc"Thf"h<(iMY;gmMMFH[@\9]r%%QkZ_A'm/>Yi[ib8:hVp7`80>g2Df]WAe%1sX%fMpV>d\FN6X'b]@>;N09/bYI!'2/5]3UA7\_2gA/>YZhf*H/fU0<i]k`nd\_@:XYCisdkaFs`cJQ(oY9)VCl]ADLU`EbG.g;J^R0%ek@#YQ$9Xe%,4=E^$tD!/+;(//8qP/^N)3Pk-iBKf^(.X->U:k<luBEp7jNOl\/B;VG<a*09Q_9cG-4lb*J^X[^#8d`EMqAmnZgh%Ka%'/XjA$#;"%q`$>%q9mJY%]-L8pW=&W(3GNu>VN.ni4ore:^IR6VM*[?BaSPu4K]9nUXn;<E5.,R+^'ZtT_D!1:4WDKaWT79Y%%PuVeT9.q"Q%]P0!cJaf7rMZf9-H]JF*mUPsb4Umm6KQE%)TemJX#<=F4TA&4`8'M,S#8An5@0pbqUeT[XA8`iZ$l>>01Gn9p,b9=%CbV9lXn+2Zi1fVukNil3cEUu]>-5P]jQ,msjK1/r/,)ucMtCNPH1pBah!-C?eEZY\RqL/$hp$0SX5WL=DpH=:\9"po-Eb?HPjCl:%-7F=c]-MkW^2(mn\,pN7\JR8![$Bf@8K^GqCjaskW8'8>9).FKf=.S"lN8>L5q+n,\B7^h(d:*7Z2aD19E6a;Wcj'@0;i;SJtlDp%$IikJg@n5drW>4B(PAR*IU=f%&FQAM"l.>+Y5<+aR9?liaBg+e;I+uX\b#c2j+(4AZGIng3rG)`M`l?;HnuErj=?$nI9Z2OZ@DaG%TmZHdHrB,DSVjD\V\tbb^\ukUs!7JDC1UrfZfa8rf5l'-6N>2S]ej9GMQFmnBC1*D1J5o-p!-O3Y=?3(]*qg5cGnIT5OZgH[YsqA%"5h>AVk,!bdAD&-9Ke*>N?)24qqGFIY<ZVY;Lu$ie<=-]5IRhCjf".0Zad[sI`T)67b;n@SM*^5:>9KXP$@Mj76@+]75WSZ5ra)U%o;?g2Wd<jd(%?XA_T::pW`2k3nY:A/IO/2_2RdV2;EhRF'Sq&jlT8o=Gc#J3_bfgb5Nc?-p<L*ERVD<FDG8CC)V$%_b(2%^8meF`%g']F2k?q*"Ep$>Ins2EuZ*[@e0D2Tk\80S!+*WRS2C?aVeC[Q2b:.f.e6[eM(CQ\8+kA6tbW*4_OPQG:m^!*DgNe/l1\lu4:abtq%,I4-8`FS6#,d.#ef(rJ(ZjuuaCA(CQ0eFrO8JW(peN2,(2`puFYe3o\6`j#;7uipeF@JT/g<;u=F'0-X>:B/_h]8YZh,1O,)Z)HT%1fL;Of"3gl]GW9nf(N%oaq)OUT0+SD@gQ/H(e`M'fRDU6T%\d4Q_16ZjDDXuM)!o1<lsrn:KCU[7o)^PKFTdlZ'3a(I.8+J,o0c_%L)1J+J*6`TCc.N[eI>YkQ^ok^=EI"O:rqgu*Th"]M/?LEX5/oGA)LscD[#5Pepf34\3N+pB6P"Le8#mSCn)l6b21k5fLFuBfq7NF%2Tin+Rnu1^p;(08h/KJLBC23b^<4(`0^8j"-.^k]/GIsO,V+V]WKVol?IDt"7e1He$qA`A>dDdj(<FHc7(79dFNZjjdV%2O42V4r%LP[W\\%?%Z^)16R/mOiUi]\]8cM-a,=gZA!jC]#"r:U*oU_ktV-9.-]_^%u!.0F+aTA#u@.eL'S0W(^:ScE0,KH^*'<uTF`Q7?7Y%"H^=S:R?!3TGa55IHd#gU+<&4g,)P'pE$B?B(t9-3',SjceeZXh+=%Q$DlgC:Wf9!p&7$sYiQ=o8k.XT.r2@4SmGQIJEL5hA!IcL%ipLp`:l,\OI2_%dC7Vm#mVcB?]ll0'Kd=j-Y]#t@9lBNiAGKF)ZldiV;`;Vn9sRI"R3^2@f["7YfnYrLGCuAD,1b.!HiGD'/.Z1`%@K#,F@gI`OMa7J$f@7NXT;5KRBcgTtk9JZ.TN_3HqM_BrZD3K3:,Q*Keg:L+2&OImj885%WCjLGON3a0aigr]VG&)!I[))ADY[e!%f#hNPnnQ&0g1`7)g*6s$5o.<>F!2N<]I\Q&b>HfXrVReHph='+r7:)p"*<;a0+_;$,CLrNkRB<KXIYZ)6Q[8Q@P2^=l,>t:I,YOu%[:AF+rRRZQ>uk]4i2iBpj#94Q#0YI5qJTe$q&[(/XNas@F`rq]g@9uT]Il`EXM;G+akE1?-NgWI#+s`gfq9K)7HU,1eQ7$sj^%Gq%4I/_i\rdtu)i.92E<HVd&j-msV3%0Ae93n*\eeND3O+BqE%k`uZT+`o/C$^?;det]+P4i"PLkJra[9-dPaGmBL1-,(#)G;$JUMnp%8d%P6cKD3":&WRS2!i>!<5RWL(Rrg`&*XS:*&F&?0!&O=rY]iJ4&)0kU:]%T1YV(Y1R`"U[&k#R)gt3Qgb+g\G.[<GbF[+%NdXB0%PSm3_?T=V(B/H8:]'kp5am]KdDTngkVa;U5=0["6AJrU3f:cVmPOrCY(WBUa4\s9[%^<2t@)3"Qm\c'=f??/+3<.@KSn*P90@)Ju%LjblY5;OQ[ZDR)5F6)Ni(sJV3]eoJB$pL1aWu42tR8d)](sj."[83S"!>#i[HrrFX2q3P/FQ/ua\Q/4Af]U2mAuc.3(2,:!o,**4%NCU`rqtX_X5[a(%hq=@4X]_)]0h,t=rB?&PPVW)Mq!ClN>*s4CK2rr1UntR"kk[H?P->]3\r(JgRJM=EQ"Ur2U,2RZR+bs$p>c6U%6b`M[YD!AhCS@Vb&&0#8ch<45.O5/FUrn2?a_2=#.S].@pW."-YuM000Xc&Hr-:d+=n^KCMRCa.Z!?R3Hp="FPF#q*\]/oLpN2VL%kN<3FLm[9R7l['U;N;g7UM`taQaneeQC#fi)M;%1m436/9[:Z2c-%MtCQ\QZj37,tUf:oc_0+9K?aMBrlgMG_lV!k#H:H,LIXQ/p%%LWTDZ!]7#,N9Ss[cD![UF2PL;?m#DB(0Z57qgb4/>dI]L^XYf`!X!=^M>.`/7]^hI(A\4`)>p]ji$0A+57H%lg>;)S(l66TIZ8H%P=(\-6,td9`fNQSSO$=*N@0K64+ki"(*#Aj/j"]g:`<+>?$6Dmhsl[LLFtZ@Nh>,^L)dd,Tofbp=LR.L3HWplFHlY\=q4h]#+_@'%4%^!R;GNE3kV=\7"6Im@B@'*6adE1O)/4"Z1\L*/Y8IG7SdCW"m#luID>1Wl5B(s5?[?,9$op3>aE]B5>NXd#d5[66dX/56?1!Da%3m_90!?4DXe*Hg#GE(aBiYk%N-Q0#]]D4I*4V=Zhr<j1[Nl0!mh\*oDVa]%qPg?R=-*U@iRCi=,P$7*1=GgWQp9@k6ePgY6SBU'Z%B04Dh@CK0&6)'LZr=Z&T6\^32G'p'PND7f>8"1Bmejm*DWP!Csa;%EFG)HNV$u-Vi/Ik-d<(eki]CgC&'QPJ2jk68<k5b'NdXsj0%NC`1iA32Y59>i4@+;PF&ZK!!q/*B^Cbf>*P<hnNtrLU=ZNQ:asAN<NlAY'Ub`oK59R$1%mgU#&Fn7=7jbR+_LU?O5^E;37V2U!H5%gXA@N0Y'>I4'?<"^FV'EKB7AdIFYLUH$h:D@c.L4j1EIZJ!o:C/(0X1;q'0Y@.L01WYkN!Q+O"PVVWYrBVr7Gh\c.D[agk<W!0M'%qdns\eN3YL@e+XGO9LH"/OQn/PTge6=U[W5O<3;_`fb@SL9@eqBqkEW9KEMhJ/U5LB/\&\Q_L2H];`=sW/p%=Y[]TKPeh7=n@IG]%J%f/3M$SZf`03U]bX^ioo>?;)5;Ph(mQd7)^=>mLMVdd`hX%'O0Ob`O+OTXk'P_8h*DNPtrqWmK>NjN#^V2+]-@&]YMHaC36e]6e%ZI8SeiWdPf';I=j3jLRY-;_H%:R",$[dg:;\_N0uo$;4H#2*UcpZ14YK:-p=e)N2>L5]7_4X6tn\sa/.O6mB?i`#NThg:!DGLFt,%bQsr:lfg%2V'4T6om:UBMbFIN9H.V<3<SrtFI(>ZF4r+0;,?',/1&Op1+dCbHAYm:b0m:$Z2[#TO2W<LDcgP)MGdrQnFSs])86b[%8^Ef20#&<_7:q#h&O_SnCpn#2S7uZ3=_)'Oi92nCOG9'9Obm\Gp<1eRL:#$8(ARiZdW;^WF!*n)1>pT,Ek_$+\=g`s.a&'oZCDUf%Sjuq,f1m-Z#3lUg1X,I,O@GdoFKLr>43TrZ*@BM2Cpn#24DAIR#I$Q(r+RVY9WJ3Ba"kpLe$9/Sjjf?0DOB/Jn[uGaj7VC`<(]h)%NF`Ik2hE)]*`A7_HDA'J)6.lppS7k,i.We's0=ZQI(2!ps*4.ont&'(>!<op60fD.6g%UJjMMFsB/*@L>Wf0Mdi!3jgh>AmH1Tu%%I?V1\OUnAO,AS0:g;k.)5+JjpQl0o(cA,%Q-"+smE.u5h\FJXtR<u1q[glrSNLF!'o#8VE8H?$FR)l4DR3s?PF$!GsAA>D,I;h\V%"#c,=M.*a<3M".%gn]:A2rb,D&'N4"1:].b)2oF-^(J[R\Lu\\QBb4<r0:m4o?<j&=N'gTT0<^Hl<?-I4_LD-0auC#NBrqNicOTs%aGAq?<i5<l<'Y9h@2RJ5TtZ<<05;ME4Jr4$3l;H"83Sf(P:%Ha5<!1r_[pJ:Ch=aqS8t'!>*sI18Dq4[9r2!h73:@G67dj'P0`,l%lG5F/@/m9d@iiO_Ki?Nl!A[OlPF":m898C=2C>U31DqI:$X^o;Oo"IkGVW0JcKH.FO=rMPN)ZH+Nf6r1POB@P<0J*NPkY5M5;[N@%+JZIn)MD9CBB'nbnPhJr*ZHq?-\!V9VST._#KMo5(TF[E-+]PEE.cjrUG\>r's@#>E\+2/4QbpMHK<q-;W6!&cp-!$KN'qe5*dkg%%MGD^'uT)GiA4Nq=Fe>_H$)u4CpVo0>Eh(n$V:*lC+QOh)2RB7fe/U$'0B`L=QdQS3VQY;ET(H!cHE*UX<m>Q7npTd?QSk-AXrFa%0:Z%KN]uds`]J0UggX0,Z46R4RB%FtFrik,0"7]q?FK1Yo\1J\:TI"?D_&Mhc2+?Gi-aj+rVTTf[.SRRo6,PkqItG#UO9bc\PYA;%CC!\,eT+W8N3Xud:=3=JN3'?E',UR!cBPuJg;i;"]mE23h-OH<Gc)LQ[6ji(q9kahG$9WkGCGjClul<!/X0VBSPgkHfYOuLNO36*%T,E@N/;79$AhM[*65L#Pj7i)7h&X4)8HG<Nbt</cbGg34I=/5jdPC0h;cA1G0Ak3@h(H!NDL9OOY\SabPZm:O_rfcL>+s4-qtN@H%V93Oi^VADm.C?NFh/Zk0VA8q^RUO6@Pmpj;!<5^co]93@-f_nc`e./Wg#!9\;=s"2"J/jZ&$$"oW#E2=QUec[7Wtt<[c8>N[o!TX%Tg^"H>ka:c[7A?6;%r66<rWG*ds.:0O4BkR=A"R`@SHG&:<f3ga0a_f0ip`t,aZGI@/qNjhj`]t>2_*BqSl@pXJa,pT-LKls!;\G%XDfCh,1fm[](`>aAKuK^l[RMOmRlqlc\TD8RT1NOrGfANCA.MZ/=@@C3qrl#8XA5\ZKVRu_[N/3B;k5\QS)HOj2e)j&e09KA':`B%g;8a;1<s^I,_60CI*@dKQXl$+=6/m^dj7G#Bt!OdA^fa)+_7Bb\q*oCTsO!HEp<-tXTutF9D4='4.@iOQS()&B;fXX,fMGl[V)CP%\tiTBluNnraeh^/D@0n"VFtAI]"X+JRk?.VcIA(Jc_a?5:,P]5R'Pt>g(/=nZ";B1jjK.HiD%Fk9-TWG^N.,+\pcLpSnu!6>e8<t%XKQ*#?"5*idj;P%@Q,*=,AXf*\d/=N.b8?N9\FMZ\TDj\*b.*6C(1#BZg#n]YN*m)9<&SA:EF:0?/#-1hJBd!aoH@sGdHXt1V(Mr%9p_Z=)Y`bZqqOToIflWp>ZHdQqo/E.<Td&OMf&Nioj0$UOSJIGhdG%d?ao/cn$3hOI<C^LaDH'VG*nE[X%V`MKg&Zu@qoFaaEi_3%6:+FZ?c=4%(J))l2NmagT;h1Xl;CbW]j38d'&(0)dc+Y)Xf$WWcPeT5(/pXpcf?NRm>!BJgYVB;4!Jl0I-qYtPfGNafA)?,%@-+F%4$6H<O%MUi20[(-Elf-R%458q20TB$=8#@ab7u.^*M8jDdG6Kn's[##h_LC0V&Jil]+g04oV/sHOX#:X\]`Ne8&"+<,PNd^oB?!X%%-Lm+CSu?a!B#@u`PL1nPb&DK!e:O"j^FmcbRJGY27u%j6/;OGLWTK.dcdDs71&k6>`!QT75QBpPm<^C*;T'j_k=o[GGM)acqlea%P$eX]j4CqPC\R#AN1!HELSj39kkb1qG)i.`:@*T0?5o5Zik]\+6SVJej2Z116SW%q,.d[DYt[FVN?Rmj3C7\t$qhrmVj=7q8q#q4%GdhH$'g="+49@N%)4BhpVJqQ7Z]i3=CUL\BKZ)T.QFZPeCj`,^!jV9#AB]=Qa_\2N-;po8;g)0<h"R6P6TlOKd6f6e<WmQ^:-:+_%]%MKK94j',o'oPFKHbR6P"3"*PHi59*9B/![GTV$*V,ri84S<Va3iEDIXPF4,"#+D289?5oMYeoSPa=+(0'9pCXFa`="6RJJE0L:%aPl*K>=]TcT*Iu!aKWJO47:+Nf_(ri-R'c70[)YZGd)OqLV;Y!T(t@#@2QW8DM4MM#0817\g_QN@Am+5K5`A#jn6=GY)kG(A@*<D%iqL,Un$p8?]Y:Cf^/N9"qe>]@g2DJ(e=>LC*<fo)W&_L<V^aabrf!@L$aoA_-hHk6T609Zk?N!f,L)_KN!Q(4Eek@+P.5ptn&>.O%8^E)b9k$FP3S%_66ftj*3MO@e[QM/=)huPBI2X;B'%7^?KW4QFEZ.l&9$YZ'O7^W35T^pfN<t:)@lmE=[\pOVnn]q*:7``.jk5$V%1=%7O1FoSL'k4Cqjk5_e9Mt[(gn'n$`\`K\GXf=67'"2_3NhHH`UKB3_t6lso&[B!QIFm\BIZjA?1_?`YI[)-pR%n?SWE6Na)a!X%BA[?a-cbmBa3dk3FdT5tOOlY8ia@&3kK#ZdnM#o\XQTRCY)K3I4[QK8-7f\U!X&sP(aPHG<'SHKgKjW^ojD]U<;+(C9f;Z@[al3h%5-;2A/lW3)p@ljpaR2.e<kiWd<[YA0rl7aFRdF5V'hQ8h^NQ[p)Tdd#:45;jMV'P?He=WC0@!MeiTARPn2`3eQgLS8=cJ7h0l&s)%pTHV8*?<CR:J8S%QBh:?lpgkS2"tp$lK`/!Teh$sjkI.hf]J>pdg@C(_+25*&SIo:F_?;-FH<)1A3%r[Y$F/e?#qB2SC?W]BGt2%%4nm:&+1sU+.C;-9o%n<`1^^(\[.DJ"gqTEEC3lR8+/ciM'O'8QM3To%RV@#e=n`1CHql>:Hi(/kD:<4e'0f[]IqqWC0Cp\/"#Ch@%h6_4\Yo<L"^V$-?F()W8gSSPFaaENE8gcZ8N2;_.gmr:ofSOV2Pk,Lh<iQ('e/Pb@:'8c^314o_ek16t;i68S4oZl[Zmq?;p^L0n%l^NO'2C5PR8$BMDq-udI<Z)+teA/(N%SP5NhU&:PVNZ?]<kug"+_Y"]G6rh#6Y<1fM9n)+':Y1ALaC)U%5&`e1Ai_^&XG2HZjNX\%R-K%a8MWs$8OluFij<a4KVk2k>;INhZ.N/g]%[.l3Zjoq[Sq%e"5]H_B^b%BqRV^sp;cm:ZB<G!-B&gSphZark2gD4c]@IU:SQqU%`f4jXgWnc`c>g#[O6r&]bM6a8pcS+%d+N'N)>Rb?FtN6jic6(1UYB4O5pH[gejb)/q[UgfVEVFOEhdNt0Z/7N+lP%@bECUD1Ysn3%Wkp7/Yk&B7Z4f)2[AnJ$@K?TB[E^1ohN>FBAld4*SV)P@P/Zjq)#BbTS"73[9R6'1)sEfE7$dWEEjLs@479//7p&@leX--bTW*GP%dfZFeEmI9[.U^"ANH;R9gqQ&TZ.+,[[<6s!@f:2l0hJ5(,;WfKW\Rb;p!)U?04^O7Ei9oBH_8SK20S239-G'D(J`KjGn-M:=:L`'%Qo>8ScT*8!Z2jd&dOET."(_LF:<^=iHh),YJ9c29$`-_+!;#=Qk.JYa4mah&%Np)SLWT\BRff$2b9jVXEomA!T5'rF$SZK/+OcQE%a9%=)Pb&!P<b2]Y)gRs?o(BVWD*40U5u548GOnU86X@h^XU>*tV0pBDZAn`Z^9i0%]U/2'-Q`2<Qh%-QOoO*-q(cm3)V_*9)>@3m%E[b@[,r72'HAi'kVdF1XJtkAMX5C-o6^d]F%@P<qi4XTm\,)*KCoI;PS.4$K?GAUB8u(;0\!hTChZ.:VA_ua>s(nW2me,$j?fp$<%,Mh[PS_1mTQ".>U03_j\NZ]8<?GF"[qQ53\2Pi_.ouh6p_O0cab8-*3j>#HUQ[PoAmMeFfh!::Y&?TE:h<Uu8,A*K]T"e_=4#ktW%$[SUqrU_Rshs)RGf[90\98^Khn5d;$ZdSE4Kl`bLQ0Vbkm&dE+"[1;IIT5&n6Z8@hpr8Ee530D+M,\H9)soi']FL3cSbPJEqXm"D%Ik:?j;.,0EE2t'f/&uV4T,<;s\,'h%OGn:b?a_I_ls<2sf.T5D>)pafn+Fj4\3:XQ8Yb2/Qe`Gcq)+#QHi:5j>tMT$_qaPoCX^A,%IO![h2kO1-m;j@VmX+o<DtP'uI=-Ht:VLY*rqH8#]8.]Z[a!e"oh3`okuPQ49^hKFqISRL2fr*S5k,`)PVLtZfCoEJZ/"Z3IB275%p[RpE4EKE#2hl*&'5mI^p--4,P*hD.DhuGK%!EAXH)k;,j_E-UFY[k-bKP>Ri*O1gA>St2f.U@QM=e%bme)M0F_.)943Z9p][q)C%][m2Qouj#VIJAuYq?,O=QVAdhI=*7d_oi][ZLVr>bBZ^meSh[ue'mdY_bq+couj_X%re^ZMAi.k@Ulq"0=r]&FSb4qqIqgQY\d/s%(N,Uer<BZ67Vch)S>XGc4I1?mZ>]CT0R>GG?GC<q0J\]WWo3sPqIM138Y3k/me+c;eM#`71>'9hfsgemeB0u7]meZ)^hMK0KAPp\%IB-]r?W*JBrN[G'Z0^2/n_*A;^[/o_+cCE?Hi;A.LPjShUW^R,/@WZTe*KFqQ"g!<4Ah6EPmj+!g<C,?2prHdmKcZ7@)Kit_3JZ8%m\J8XMjfW)6Fff*@oY]LX&u"_,<O;jDPuN:mj?\]Z<o"S/6oi[[OPo#JO"g7WeotaX*\Dn[P^pm^3KA,cJ<qtp$mD(nT95'l"P$I%j3NIfHi&8?lHdXCFlHWc`asYuHs?/WYBO?eqs`e$s7:2Y&bor+](W:U<\BUHb+/k=E6%jdEVsdeG'!5WqW7-Do=b1eo5+$MoU#52%DsR/YVrNDbji9;mmH3,=ld'/3Vpp"HWkP,#npYFfg7@'!Q@<-+mEN?"9jN#2Dp;kMYWT75p%6_TB-p8siQ'[ZkP!6bKfAGD>H>JX%Y[Q(3?11uZeQ9e^cHgI<e#e&OlV@DW??Q4IM^(n!r3W\+=o)$>&&Uu(p@c,Hl$dEcATQfEbofkVD^<*ip".+)E;fXn1G#GK"XMkN%q=;uec*+lFgeXq$?5ZGlhQ'DlSY"c&(.r;HhT[rjRR^;K^OB@WDKRH%=,qM%1A,lJE<DW)q^OUJiaqZ5HOoX]mohh$EFQW\ku5]m%DVd)";;44dpt=#sQtT!Z>1+DD>;ag\[$FZ%X4>Y\bLY9ko8I%K=X\-9h`3m$^>HSkHs>jKfmd5jhRp"H;\)CQ?f&@Y=LGP;G9/u@%I9YU2:0]M7TDp=Fiqgl%Hf6,u<6"MODdOS]FLY<9:[Q'fqSALOQODQ?cZT[BpmVS;oN6jDh*nTN?hM`,I-5$?HF"0BE7km\EQ'TW%W5%\%DEDHQ'"$;$0[I(Sfn?^+bT9h$q'0+_/ip4dnMeYV_g8/nmC]JSZFe])emdm?5.eG9B.qQc>q/;Sk4BHuYCS>BoG<8jfD#F6%A(mt*5ndU*oG>iC\+mhk?L2M+JaA!_o/c5[p.?LC?fWjI-2HiW]>7Q[I`%km48m`^-"5Na?)kO+_IbT$qn_,p4,1e:3pj!&"fU+8%MZW!d3`q\h(QX9&m^6J10<NlW<.V]Y-i84,&$##l,^]L[P`pfsei-N(h[>NMba5/?B5YfnmJkWJ($a#F]mU?d]EWTSEM9c0=MC>5%5J$i:\95#7EC*qDdkNeV)qUlkkCte%>CT"N%AJ0ErIAEC*j-X=%DR*Dh;%i*[<B02nhPX.rUo<o!r6ZG-Tg3mI_=LLDcCPRErNsV%*UT&g<Pm<jJDKA2'!Fo?lf0=nL0lEF!.84^YJ.n+D-q+Yq"e?nc_:ku]Ag$X)AlcP?:?1@*1qX,J3o)g!IOrNrr/TS]DZ=$h>YFL%@gB=,X1K>*<r#[A!\j)hSIp9iI_EbI>+JT$*4;&cKIpR>U9e[+rTIFMLWOSuIe)]f3upNX/8M]Lh7e@5'CoSXA"'seO?Io2]Hut4%Df=TSH%GYehlAH*(O9d]>C9pfI(&f&Bt);$'Smn]o.@A`o:l^uk1rXeEFd\<?Lg_S)f3aD65\l-HdQU,`,Q30Eq'aH\64-D/?ceL%1D"@7NrQ?(H5Yn[n':[qe\fDeA?-43J[MocVJS&P%lU0[&<.pAJt80P/g$GAr;pnE?/^^?+M%WK.kSIQogm8ZR9RqJ_nsR<p5O2n%C2J)S/(^usooiakr8uoF/`k:?V^mfB*Y*glFPeMK5>)336E0QsFnCHke$U!c^:a=-lt\X%LJ=k?5I%A5g]Q[$1igM8-q)qfO\W]1%f*qdT]5[KsLr;mWb#i#XRTMl@QSZqBdma=@fIZ>2[heV^3=0L!R?t.5aTZ?B+$81N,gm_^$E<i0%s2magFr.-emTB[lpZ2VO+[49%#@(D:S.uA$E)A>1HbaQaQAWu)lc7KK_!!&V3ffm20MCeR2US[D$gj[pEIOSq$`8ti9cnjpCSeLM>aNZIbAph;fZOC33[$!*lX%5U%HC@[.>VHm#\^Asr/#TMLi2sU&\\.bdY6&D9T3d4$!Vgre&fCCh!MU48\gLSdht/CC\bL\T@%=d4.!HH[Q/KCT3'/W@Ts=;7*Z5De%+:FaeRj:l8o'?jm'#ZX7]_??g*FL2[IP4Lr50_Ic6pMTmG;o<dJ1"2R0=G0nf,rkGo`KKV[G]fMr>7O\,FO(-C\`qG)tT1G#`'3S%8q=>K5U:TWF2EaS*Y2G-.VOMt$_rNOGK:&@kbu]N_(Xph=:?c&Ad7CgngItO(%@n`S]^.ofTS*_7/Q)]]lKFb0\A%6);VWFY=p+T%AB?*jpWK7Ti4W%==G0*!esP!7AJPg'qC,ZG^J&R*[H310+u!@Z$"0rIZ4,9_Ad@Ud@dKR0W*a.9A_*#7^!bWj3k<\am:f!DkG[uT%ohQOJmJ1r>&,V`!pLMND7/L(U`Q[Q[f._VhNcu'$A&C.K>jB7=&CC8UN.a*/%4)4$&CAIPR5F'S3_1G*U5p0sb`=gNbSsIbos"Ng%BK]h7'mZAtNT!A)Hr?$H[j#lDH1Q6d,53C.@$Ar_?TAL7a1#ctQ@%Qd-/)=Yg4b^D&"bu=Mmp0rHrhd,4g=[5YAs#4iK)pnSX"^'%DM!RQG>=CsCZZ-I[Cs0p+.$V+RG(r0HSNU;PpCgL0)*jbEmLIs(u#Dl6HSG+0Lmd<$!(+CZkn_dbn^3Z>(:[98__^2Hp(b6hs=A,%Kff80G$Vd8[Wo#RB"L-Vkp>e7/f%(5.kI1'g+1)=1s^p=[fsLVAn13%$[Zl0o1+#lFFlXs]d;C!Eq=ZXk8R@`Mp2^Aird2C%<b,s%f"F7h(t+0HFSA4)^n5?7Gfn.RMoM_9?+?/D-P)m(Ip13X5<#dgCp.u18Cd90Q1D6cm8EnoZrLhQH*r%SRQ7Lbg%Kl1`X8s[h)Y?L%o6NKR+lfW2am!>7OoG;Y3pMel:1nIZp+`Z9eDJP.5AffDXA$]qI=>e'ji5]m=-&\H]H]`.T/SkHZ_;T>Wt.kYQ7;Qn=/Qed`NRQ<%qs&-=Nr=*/95EV=%qdcTA,E+F<Q!pJ$-O8eRu6Ll':1PIlp&T&l^)[%Zo'3)q4b<j:tUk=IA74:,hNHQlb_B`fgXP'd,>1.5,7Z>%qGs14-I`])Nh#4a5AK8l?/hd._79?QYe'U4>%jBqJXdV10Y9l7pA4IBm5K1*'`EP`@!&LrfNT/FWE$5$?!;C(J.ji+kZG1hWrk%d%*H5din9K6LkJR.U]Cu&G6]IGo3S;utj5(_U4#L6lh9P8$ND3ij+/BoorVrr7Jm-DPf)/]JX;nu;2EN!ApUBn!iaUkhTsDCFgS_0C%G.l@@IVSko\(/3AH"sd6`T:Q?rFBtfYNBa\YM2"\,!Tbkru'1r/,PX>^Z_huLg`ai)n19M3tJr%a"*.O?e5%QB"$YSs.$^519jfH%3<iR3lGK*J;U[gs=M4NZ!fqK/@21\n`3V=Hn"66+C3DLA[MRd@IPK'MI&H6o?>]_qqHEX0\@LoY_g._q(E5Tr4"%k\gU0KDGeGB6%V!pH6]R6/l.bU6?HSmPPk.M"/Hj6a_Qn6]j[E?GIgtT:<h4IgE3;J#4iO\q.?E?jPXh-M*Msnr7-g(G&Fhf>&)ef3/A%GM5LY!XI%#QYD7kk`1%K=3o?1[>R$+\^Yji;1>m+7<tE-eBHSDA5]W/&t=oh8!\B'iHj78gLn3Gps66-:q8MX\/W7RKW&(\LN_/HrCPb@D,2R%p,FOC%XT&IDo=cH%mSX`fO+RJr#p@<j1HRkIH;2N'\)^JXsM'^d$totKpe2>^9[8h\c2.*C!oZ$]dupq?2Lq`@*@d<^V^SP@_8u%%hZ^7u?qK.EQUBQ"X>jEW(CT$5Lebl7mP<fT7Yjl#e!<%[#3=Ada`1L#51!:EV6@+clLCu:)eQF_bA-Z%F"q:om2n8'XS%-UE'c0s%s.f3O6lh>q)R9h%UMr4E:%-o3lYm?I#oiT`iFH*6\+=co0:7(49Y/94_QX]J&Coh-;oCaD!ZKp9qn:eE-<]gc-9'O(d=2*UjoTM5%F1M`enUB48Ycp.$V@H]E^5CV5gbjHoPEW%_43CXPSi;$3h8suV6q2="3U'TR!bZ.9l[f+QV,m"s,HeMH8(g8'Ksnb0??0Dd^9H9Y%ZF't0-kSbb@GnIA$eY4AV9@CJe^6!r\s$`Fj/uh3UYl:6RZK60.h3H<$RIK!Io#VKYi6I&UNm0k(L(!O6^c$eg<\3,!Xi0X>]eaO%m?DLiKXo@22a:7V0Q-M4!'NA@"f`s9PqYG)<PmJPT=4/6R,.$9mOcihZa*<:rVJl,eQZ!$jmX)&S2I@t,'WQ&FJWf/e(i_,,V6V+%/sUr(qq351Ef>gUnM%FS.#f^r;@Wb^;C77kW+)^0]Fi)do"#ssjth^E4c1&>&QmPo<1u.uk['c$BR8T39p<Mo1X+jQ5sQKp5<s!8%/e-*Y&MU[rcI!P5maT3J;TIoWQ<Oc5aMC<c+YDCs23E*!/38YRFc$B)GB2kSe#9Oo4CM!ogt,']IY&ppMFS[TY'[Hdq19HIMV"63%<+UmZN=mWY2*6%)X!G,l2?C/(XAQr-S2.TtOa#6P3(*7%IEWRO`&m5.WNXC2,g6H5Hpr5,on%Q9hWZh$1KJ$-beuD_DnBIc1;Eg*%?+5LTI$k`G1t`;HIk8?s];,t^QJ;qA4g94U\_Ol$KO*i*fF5XR&&'[>^#/'"O$&t1>I1:HT'4=Lb_.tjK?Q_OWJKa.h_'c+n(m-#%eAg>/2fF/&NT@8bD^in/B/CMcVSCb7@BAY.UAj0%(6P3$oaf4AX4rnHpl-?<C2EG8^4Yh@0T>\<*lc?G)]4Y24rVGPo=PLVpqEI\%fC(:'$+a>(KP#Tb2W=A[NtTn?\0+VNSo*]5+.#gSA39>3=ZFLk,E.$_;-McY3ZfrV$/=(D+8DTVHi<WSQ?J/Wq?!+57*)Aa='`fW%fM?'UMD[=uZ^f("de7-0pS1Q2qqCm/S[]+D>P+;j)Y^M/.S1><kc$p[qGO[WMKWR2qe"gZFf2fslFgO8^>I/WT[U(l'?ZbbiK,4`%:nmC>be;do?jQ"k*a?4f!b;7'=b`2jh%Q)lBC#DH0E6>\FlZm_(I,Dea4[&">]O/)'eV2Q1=Di$E\8o:CdbAr&NHu*`Q>GS@DcnI%7W3X['YTL7Or5<($-.l"DK>(-S?TA6`mjU'=UqgJ'Aqnbg>mVA,IT%MH*^S_5O4S';!.`9ncGF8h!*GFqaTk39Z;#'5/0<Y^'aZ<%?C]1:RpgU(p9E/5"i^%`%$5)=YadEH.YX#mh`S9m&Rbfc=+u]d7s?KZk/=Vrn[n2gZW_TZ."R<8Ek?Ih],(gN&qc]2HS<]qi*U@Y%DspncNPCsRJmB)j=mSBJ)2(H5W>-H2B+I0k&$H>H*4KV-'bB!9HWaM?oX=1kHhZo.U[r\L)*hj'%Sui-MT\G>Hc^56(M=UEeg84G%YNEWuEQL2Q/6Kl6pA`g\$8:bt1&HHu?qD+Npi#l1ci3]F[*!jf?U`^!^+3N;[u*-6d;cu4gp5rV]in5Br8NodFtL1>>?80,=Rb+=%lrfX@#a=./)Kaubh1>gVs!kOE;tb".K[;4#Wf4l[#-uF''11r,\JBk"aNuA_XtLo`D7Ke[AtN4;gLL.(bR$Z3_^7to6l'uP+BU3H%LS=)LM%YG#2;cg(;\1?QECEumE?\p!G?m1:SRN\TjhMuICKt?9nWDd4J7AiGR`!3mY$L`@;)JJt=IC=BO[3eFZoKB?5n(BJX'.YB%:2Rc4euV]gn]KCtX6F^;,"mRW&B9$SDq0_5aU--J%qM!&WTWRKEC;e-2:=3j_jY$+>bBP0J)a`CQeI+l3c\tYg#YY%h/ZW(TZ_((%O-S%%F)"adl@P*tT9\jM74/Aa5sWbt(Bh-dBJIUcS6FSUI9312&6YIs%Ulfj,ge$FIV>uf=IOVL?P,d88!cWjM92X[#jBfdkVJ/R%bMukV%`:=7I+^#QgURr"JQUscN'C,2jD$]^I1D@p>l[,b=,dN?j/?B2M;Y]k#<kJA=7u\'.M^(8je1m?os,hG^-dVd96#oD%&p1G%4IDE;*tI`N"p>/Jlhb!']!oq=KdR'A_;$g3k_rBik5mjNLfa:e&;Kl;=pWq]6!1$t0[!mA6s-PbZf0nXPR&JVA)HN).tF<ZPZ[fa%U&CrQ$%_Z//&]l3Od&Q8E0.VNY2O<[+H+(?Sll$!WglSONEXn4:HGR\Y1@!DAj+i?6\#;NQNPlJ%2g/i?sHc9[s)YXE;YfA-DH(l%=VU`=5p#M!is;W/A]KG7VP5==b!LOg$[G36VIWdrN2#6^08#BW**>Do+TtdI$UG7E'-=@frKob>6,N\g&"Qu-=C:gT"B)Q-%>QO4%!U!Ms_.O\l(;VO^*fpf2/hpn@/-UUn'LR\1*%O@Q<&h,7\$ceT5C4UZQ3![^R?d-CC3<f?>-!$G7L0E(2AVieNHP/\ET^BGQHM=n%_fPuE\K_7>aXS7k[]O&EQ=>iH&Q/U8(4;kWDV5QR37*I@j]]p0ks\/LI"i%Q(,Cl6U4Qh(0R>pdC'GJi:]u:na^\6M+07//b-djL%Cu)1ICu&J1gCFI@9B*4:&E4r#gE']Z6OeYW?CUJd&OD4($9ghEcfSg&/4@Qh)A;?H=I+?K/njSo%^M%89YkZjEI+>>_\,mB%#,M8%ejVc6Z*b/X%6c'O/78Pt-4*dM@IaLkkef)^CG)5'&]4<T0KtV6=FliU2+e.:jhZ-H@nVaidLde6/m2MRQR<sG*HJ!\LiZ!6-6LeP%UWB??rWX//VZ[jf'3d?t*OZAset/V?)V=5DRcGl),9R,LS3ZYI+KttP;ED[par2Bp)MB?QG6mg$1dI;\ZKHd:7--uGI"trM(35G"%9_koa(r_ST5M-phrHLqb;*>*EC=SBH>R45#%[/-=dZVNiXVtOOES5B"hVbX#,94G==*5\mTnSD4C:tcWC/(GNB]W,#+cbP!aV[oQ%j]&WFM]QhHp8[5)mo7qa%E)Z(@#WnkRfEIu"jlNU@lIdIm(a]$4i9VG1$'+6%)R"P8dhamF:]WhKC9AkAm*`?jUEY!A_ZaS0_'Bn%d.gHTa>+A_"f#(UXV7#^7R]4D0jWK,e8CL9^>))MEp?`f4qgpu"k!!S_G\N1;*p(o]2=0j@M>_<ElC4@/'h5-;2m*E;N)hD6b'YK%bhgDmBcMkM`4"9,&_-FoJdJ!%D7IPoWg"F1]+lhK.6_Q&(!Eo"@4O$=bTmXF,ddkC8m+FuW6\j;Rb!,H&/Oi;.)i"!g*,%4hIAfa%GhJ6L^m7uiXhmjpN%_7B>D!)4J_Z/FDCDIf\79a<)O$**Rtr@lH:\;_AP)BN!m+.p&ZNW:S5&?LP_-^7;@F]aZ)f@m"N/Aj'SW7`%D_*VP@PBQO=Cha&?`P:Y-8Z5@^(*$J?)q#/L6e`=&5tX.e>H`+fthlg%R),`)GD"mOH,Kq8u"EkSe-gi7[&QU)]=!;@[>F,-k8mP%g=ZZW&9UAp@?/g':ncV,$a!<Wo]91aiK>eWi3OsbZE2eYBd#NR,AR#d2*sVRb;s)Uf1=#J/R_e+KWXDd!>aR#pjpr(&\tdK+L8ai%A)7P:q[3STpD8K/G7R)4!MCiXHbnk;.dIr*p4CQTTbH*c.#>UN+=uRk.7M14mk+Skbrmcum7KMrbJP)mc9V`9n[X9(#\'c@cXLp'%&@%lV#\2M2jK_-T[To78*IJ?9&gCFXc5f<nQh(TMk2S!\4<^#")@7:5@Jt.f,/EG5J&G2qYuR1+WE.-dN3GPbRb>i"LThSu.7:G>%b\B!j1kRs:era42")3E";H7M7#4n+*=:t+h!?"Q%aio]++VsX.KM:WDmQl_1Z8S1+;L`GUMRE*b6"8XV!ng>Y0JSAs9l9]83sj<s%K]UC+U$1Dj/RS][lOM@Z[0]LT<\WTkYS>PWa:O;0T-1F]l&ViF5joIh,1[G^gLpRF=&ul7mRgt&>>P#V!`h-dP#@D-!ncdkiJOij%@G;tm$K1LnJ=\nY7qa_]kCGPC8s0b\%/E1?j;BC8`)8J0an_Hs?`mR[,8u?VCoG!">#?4gmpB'3%a%r]"2kRTO]455KP38C_G\r^%U-oPqSn:=nR-!%>;5;&f(QNB#7>PPCeZ^lE,UHC'Qjkns\I$0"JmEo2`EHa>nYF'=0\Ub\B:u?;@Zg3%oIFcC%#"=_J`A3n16OqZ%/.=^@0IrAG)^GQtLnhC%]JKeCmhAEJV:[+eVJoX/C@_FDPk?C._s)sL8DE`iF[b`4&/<8M'C4<mhh-P1L$u'EkO\lE5d55%`N"Nh%=+QBC8Ni1a+f'k)07j@JdtEr&7-ptY49^<)'N]sa(e6oIE&\"UH<"kT;!+@I";l;-7aL^n,"VN&fsFlam>Ch<$t<ApP!o:I0U>-)%V-n`aIh3oZTEgZgkiP9*kR#6!1k-rp79G-"0/\G.l^0>Q'"ZOK#,?$i/+k;D<'+'2q%bnBYSri(R$_;fgK$q9-$Q;\dS%h[iijIW%L7Fp1*`Xq(V]\5^Z*,Dk9I8YE:F\n$THqJc@A+*#acq[1VRFhPi=4\<RLiAL>cB.H2VJU_R'?9eN`8$+mNsK:i9TMTK7XAY44ddE%acZu@&^hfECe-6Q)Z(3l`iH<K@VH0i>p,^E$i*7YVKA9A?1o$,7Tg110V!og!;0p6"!\A\:WKFaFYsk;.tC0e2H1VLa&1lKYWSa'%90+,ne8dpP_#glYdcaZLek.HpW]"6':P]aY`[hE6K&I]f^(o3?GU'Y(E>\?m[U.O\iiLA("KP+X-u4fW^_PH4XJS2M=#HHtSe<6A%-piuAb7VoM4"amcOV0t^1p.Imb3IOn0cH3Q<>nW3]IFh$M(?M2cB48=+8$jKDFpla5fSJ=e!*Z&@L?,<*eO4992ifP_aiIJ>[2Za%i)a=jP1-M<I`Y"caWSMhB+Mg`\P*Y[7lk[h1^Di"`"HN&gITF#Nr5c5U&`Be4pjQGRYTPj65V`&1`/0P\NDQ9HBO!\,-4@b'nl)r%##ZqfW_1AJ*IP<Bb(27TnJAV?Ur.BT_L@'4.0t=!GZ$6T>#C1#L:%*t"^%3QU&^^65lEMT0S5/#`rW#:?bdXp\EF"V5iq;>QrCEc%"UlJe73RatG)1lVR]%?4^k`rHnr3f(/eq,GN2!OgW!1CuOSWGn7jIc@<(.TJ(n9A%BnG=s9@'c?=X&N9-U'm^Y6igYL(aje.+'2o%/.K<\(t4F2Ba,-%R!^U"Wj9S'F[9M-@M$SC7SG?O:n\^dr/E?D^)2fFo2QB(V9M%>9MQB(Z#+Af'f-1qp%Ueg3QDFh&a)S"0Q$Zh%:';_"#A>eO;eUjFCk?6WN2*Y1363l'0a/fn]VL<]NX;E%WJS]NRYT'IK(p]'G`$ck7*V&+2M6f.$3cRink]_2nmse8U4^c50'`X]%j_@J2*4]HUBauc]`"QT/VNHr`(tD>'2'[>jQh;1HXrObH("E]p9,L#f$O^cZ_'!#X5r?iJOHe$\KG9*+V5o<Sl@XKdWNZED%Am*h%K'6qm@A+B+-mD_t-NpZO!\k-$m3u.UK"_PrY%kREYaRCEf[(le6sk\S[FJ"^+kKs\%r/PRA'(1f-m9j$6\c/X>jc]!8l]TBT^o*r%kTI#>99VhC1?G:eKd3TA,.S"QE%rTG#*[JL0&9?kHI1ss.W^^6(e,Ke*[;\Y+P.2B2r\M8V#4=5erdraib4KG3i6^"?=loH'1N'u%KEZ_h[gI.AO=MPS<-0k(i,Q.o`?6BnMg7c/7Pc88%H==R'+LgD1IR)3D]HGQ$.34R2(Z^+&i,-hA"G\W#.NfW1e%9sNi;6iqLpV)%/Nl;!V]pRcXA0g\q8l.3&;dnD`.3,"L$8pg#]XPV6C=n+*@,0p[7QZqdJAR`=L?(>QB@1V(sUI"lmD3kX^EK7m&clO1=dEW>,OYk%&J<($e[W)Oc1!i/%]l&7Vl:fUqH7mT`(=(>oSsP1KK(149nV(B-;L=GM7>RJ1eU9hBfmOSnr8m.ZB;!6OhT84,M&\>+<CrO?9n^e%1JbtqUVBUEAnsRrN8Gs%(#t9q#U6s6"AmB+,,6-,W[Q+@M!Ud5&6VK#?pq#>%(PF6N592>'eggo,V;i4nf"SVinM9W+kV@M$D26S%R!orU5!c=Zi'7i8?Gc9/n3dR+JVm`o^j(OE7]@l3i3i-U.TTm9$F)F%,UHAQFCtSBd8t'4<^%!<#?VNFks^\i8dVLe82$>kNK@Jn%OWu$_?o$8"HKgi,>6nh<Lq=8IMe-V=/]\K3"\)%d.2?tLjB[JJ(_AH8fOAYd@_`S11#S?7ja);5T*hr53nQF0HpK_L0r8PLi!@`)%^_*H<i/!I%PbZ[60Q:Po$Po(F@i2^)*;M6Sn9=+oFU!LcHQ=[\^5?p5&uIROSumUmeY^g%<9QA[9po05"5FV,;[Z#&]HW"/g6a'T%mO=!MgiZLl\2,F['TPNmnXN3F/rK#'AC?gQ1QB5lVHT75cr7Ij"S,!5"P>`rfW'hM8V"nM-m?Gk.Rt:a\SC=N-%pLmocXCC!mp+d%Ot2\D[.7IeC8#X$=<reMA-b\K<F=HVX.DqjLr3nG#A$8Wq'`u]_*"m+]!qk6KMTJH]:pbVKHlaXJqSdR01c;=?1_A5b`NA?,%F9D%"I3Pnlb_2\KG"Yq7S9Oc['kSt<lH:H):(&+.;:pJ;7_X*<0BG?gmPb)UR[noQ?8(#PRsRr*eGeGL$0q5L.W\mLNl-:j;TO:AW+)o%;<s&?BZY:jA]2WG7t^@-_W@Jg_T(TY.E)UHER`$Ca+;Jq\()T2gB@t3%alL+:'V\2bS_<B0rn\bC>R@j;&IBZU1&pJMj>WCZ]5>`%:mN]'P9Xh?_t-#f20IDbM[HOQF#'c+Lo%/hJeCC$R["Tr[(ju=oOS6b;_F@_!P5^u3/VLI@Z$JE/R(1da'`"<+f'kWMV=7(PNj,Q%*&ht2jT?$u0]\=)#_#l_#JhKuZP[G1#_IA+"NIi0+s[meXY`ub24b@PP=6*>V'AXGX\qtl/W@U>Gf-at-8\:"jroFpro?^.VCL-=%So#f2JS#tFB<%85Y-6;O!6f(R!6dc-1b_c5$e!IkO<#pD8[>Fo1[/@G^`iGE?nN*UOTgC%DDb3XKqJ_S@A0u8</%Lb+OZ#'$]c8o%Y.<_Wqs?3k:CJt;&jg?#VaI[RR3%Gf<EU]R]IMSgO=S79cB48=+'C<``SadZ)OW?S(ccUV)>$5WGQ]H_3k#]75!T?Peu0,+!Sq'M%Th$0<B(u?`#he5EVX3M78D2^r1pY1998KFS<eO/gaHpD9ckWk-a'^W'18KY_Q(9%6coX@I5e:bT=^A,^b-?j9c&o)98JeX$#pGU>%fb*4sE]llQ%\'i8(DoeD&C$39@4ApI;H1)l':Gc9lTSh[TTq[)G&'6^)dtMf\gFg<9ZmpA%7!SBXpRNWU/[tdVeG"pQFVu/9Xn,&%>hWf4P-i/EA-]B$@3fB@V$1@$lT:q\7j0^l5]`:J?fh5"X=Ei7_,2)kW%=([c['GnY7(a^3d]f,#VV$Gb8s'9&E73^^CCnpqaAPi%=oD<kLUmH''k1n*84ob,1qXe?J]U9\4If<DY]r<V,'6fe<2D#Og$rTL.P^=!kUMEY=A!t8KFe_lWW?YSWCFmm"tqIM7C*i9KNQ;R%;Mn!\Y9!\5eY?LY-NLZ]kZ';I7&*gl:Fp[NP`bF0;hsr;'c,p)HUdWWQ5;O^^m2&>U?!0=WsFQP!8n^AWu<9_^4[."gfX1u_C,K>%'$_ZIUL`"Z"NI4M@(#-7-IAB06l<"\@bt1JCMn=V/h7B(Ft&E6#*FIA)QYD.Ql78XKS4($q'p>Wj%<_lkDE/24u+52KXlm(PTk&t%%\qf"><7SIQsbMS$o>E`6<fLl(@d&]/@6EiQPJN4i6I9L<>1$pTll`Y?m\Jqb#t!!OjM#Yib4J\3\f;9G=T[C7\hqNnP,Dm2iTMM%(frdAMATFL,X#UAmA1(]D7B/iEs\ODdU=oV)_#L+i3GHs@N;pF/57$SacnHm1Q08q#KcWQL-3RZ&+i;P$I9/sj\QKGA^<K.=:b"W%>^(r.3$FTpRqZsU6=IS6_rt@$KE8_fSegH=Gp46M1m'Kqe"WT]n\+cDmDQ"km0mtZV?"?WnJm!)JJ:^oYro#EL>"i8Q$P,mWC0(I%KFlpr+U#8N8-cV,=IQZ96_4i^Z)o$ETa=1m0i-).U"YJp!2N->B_,:sK*W+@&I>9GAkWpe`uo']a4Q\SR7(oR:p,qaK#b=LaA7Al%/IJ@ai.qk4dpZro1`c-T=H[A,b;0;H/K20tE4Ql;mT='IM2jrb;!tu=5Ha2`jQfhE7e[-\*9At'3XD_,IRB2^2E0(SX0P7:ZIH5K%=!epJ)<jQNML1WeRcl\-5V--$VBc5b)3f15e1=61Ho)X<Sf_C?>X5$:&=a[a0G.n_PiOBrQ%sFc`YDsF/<Z)<>U3fUQe7;D^Q<Ul%eiWg]!/+bf^FR2koJD'</k1j&YiQ3c30jtM+Z]nVNWMH_B(.#k9_+OHBa4Y]7u2e&CI\_"AYUiE$oj%_"^o2\NO#A].C@JQ82*QF%o>%LEJ>J9KH4f-G$2!"\V'*V`aK8X%"@bc1fB=?m7^!qd//c$Y<%R;$US9=3#nfU]KhO!`1!s[&P&h"<5)$g0$8LRgaD6>,j_CGE%"?eMDaQ(XgBgLnoH>:mE1CIJGkodoAP7BpDX+BI_G6F1#:(-%fYnYq`-mDdS<(#cL^qXRjG,7W7O2")M%%MF9?[tHnS[&[N`$NQl%h?Cd$U]Wq\_.P@t&n)V7M0(GU;O4-_?Qq^jK,c*V;_FMlAU%-!r6g8Gk!@CgP=d[!4B)J,r,b@iGf=e.f5rt[W9Q])_Qh$NNZ&pk%i/&m$9V/;Z;%cC&?t&>>(6'DiJLi#X;_Zoc3&27L(YOJhc66"Z&3BGSLP_NG\#Og'l8U$?<t6!,oS@5GdL1\0SoW=',n6TSQO'IK%.O%LM3$To6%Qu#=&.:Kg8u@!CF7A:O;`jV"#)`YiO;F<M?8RI,3f#6O".dLII=aF.5Xc:$B/^mMU0PGO);>R/+XaS8ODP-*&0XE@%GS#dR,+B.$6"$^R-VoR18g$EanchTg\=ofLG]4X$^pe!Q#)_37WfH1N`/>o%@sEp!NtJ%,2^F"O*>YJcJ]JC2+k&t2.N!j]"Jg,9%16#!1OFOqj"(9d>_sCoe\LO^@OJ+Lk91NCZGT4]BlssH-jWKR:j*$4e66+-C7[U;uMNNuhH,m3IMmAP/-,`-YOch.5\_*rlL4M:N%SSZ1&8NAsU(TP=4+eMqAN]d85bKKE0L4p7]&<!j),p<H-_`N"&LcZb8ne=p&0K^jb@gTCs;'[Gd\9MnOO(X0d@C4)\0aj?Q;u6R9%EsQmR%cfrE/RYfhM-@]&$R>:PU4X$2:ZsL;%3S8XVk?YWh#q_N3.YK=Mp"QtI5PU;Mo0"ZN)B9oJRlnJ*Ts9I,3dH-8tMiR_$E[S%+%DJ+K#rri9VspeP[msn<ZWS`C0VpJO./R0a:KtQaI#Sj1a-rHUaq'X+_=+aHqgiF4Kt8gA0NQ=;u)f,.Y:/*jI./3.7-]7bE?;4%6jY##*dpa::S.#CP[&J<'U@k@8Q!D@@Njo*acm;`Um`m;Jac.#b8Z(r/I^uc;C!"Q6SKCB_N-&Wp2:hY!nJc6--,Kj0Im;aX/9BP%b2//C&:uVa"I"Bc6qE'8:h^d'67a:?iYne`U6._MRE+f_3(uPUQ-NK0;44S1aqBcinaJ(0N69)V!%9>G_p\T>.T7>mTEl]+MolHJ%*>J%.84>sPg2pG]MTU&)X=/XP/1W3I>SNH;bIsjX7:hplKG3[Iq`SuLRo!Yf'C1=SURtYd1a;n:3f-9qe-SIq!Hg^R;Lke>Qtn)#%eYK?8-e?gE,GGk;'G`H`PRPA@cDqVmG68C@!e=%ndZWeP"=$OJ=6F'j;EgYG7B-0?V5=*23a0,03XLXNlL6<uUX$oSdc_AsiX)k(%dn%Ok/E$j73_Cn,,Kl,o_Lc2s;SEQk.GmcM']I$h3fqIE2%bJ"&=>6U&ZDd>M+@f0O91LS7fs'1-]q9O)(LSM35gusdR=b4@`$Lq%?'CU^BO]"iPV]8`F475]";>Bm>Fc.WApHJ2dj8"QPc`5u,:msSJ0[Kp"/loX"[Z-K&j^:p(8]^FOWhTYA*K)<.2X?=#'-`kXR\(_%mH?,>(Tc:#$)['<:+1`ecnl"o2o=KBp-V?)ph<i][!iQ4KTHM&@*8+3Pa$HTas/,TEM]mqF%%N)+'CdhU,!o2&2GG5_Hk1(;a!m,%^gUT8.=RsDSXiY[Ah=^#/jY/W7elEX/"eC%:c$/X$W*VL?r@Y=PShkI>?9i7LbM($XqXQr76!q7iCK^Rjilb<U0=-$@&-YH1'&<Z%#XP/I$kC,7-AG>g&!h6"onQL:&=C\d'ng/A8VniE8<)n*LP\&Y8i9U==C.!P#e;-1P!p!=KHlK1<LMX2fHr.m+:1H2.#0RoU`TY6%s*t4^\ODTmKHNZEP!m3NVi>AS&;!(M%0iC0rCdiS#_+RoLHZ0,/&Xd"Och/#oLol-QDTWi+Qi1p@tG,(eR5gZVcE^2J-bbQnA4%h%k4-i<Ub>65K+JF>EY2n65:TR:CEck\Q):-1O,o$j\0a86Cb^t]Ij5"uj070,F$knu;]qs'a_PorT4U]_]Lk]eHj.nf)I]U"7$JBR%'rR*L#*Tkk-q\AO?+?ZP;\4AQ&JiJ4#oUV!7iLCr0AJ9jn[&373bssflA/8!=O3s\Vh"@e0*Ta!q]dY7O<7=d#TYfq0OKhNU86'H%V=NiW;;qqfOE74.aqm;1&)J]rU'W(;#hmPTJiPZDN5=G-V$20%#99Zh!X:*B"&<,04RTUU=B6jM5Y;1L<9u8)>ijR(3\jGt.h/76%1nG6dq,W^gfgn?5Ut&ekEu9F0i4*AD6BJM>@$EQQIk[0mZOpWa2e$2p3)Uq+fn]p29KPX6=b!A4Z4R[MLntqiKM:@aZ/]LB1*AEn%Cj?1N+HrSMF%mXMb"k."nd/.F-ePc<BE9p&q:S*o3X1;Wp13a:#"=:i,5k[Ia:)pFN%YZFeI(ouOfZV8in/>`"XarqM2%86+n?o0%aCBU3G<Ie?'?ledG?dOAj/as=ckgklp(LoS-8Gksd!SVCo;j[&`YXAT.a:9N4gBZBaL6BFQr[O(?$D:7`Xi\CDF;%u$UO&q/j.bf%n*e-R0=4rtn;n%^UOtB;,n31qHQ=I$js!F_r[o[]DYYKZ&;t(]KFHf`a),MAHg-T%r_`Jgg@]^o;qKlO4OZp7/e>$6+s0Ii5gPWc%>DV?l/^O/J63O"Zo5p@%KoqJ.)NRLc$hT6&`6r1YKM:Xo\/&Xsdk9"*_;]oVFY4:eC=R;njPEm,*g%,'c:&pY0k-h<)(@"j3Z*\R%l9$::K4c66@G8goa:_pT*(VM&=kqi7SW"88`QcaQ*5WiL.Y=prU'40ug3gf,]^8'(D'_G+66hMr/e]+UaMN$<1gBq?[3/#]#C!JU%QR3le)4IdkD5:\L(H4`L=KET!6OQFI.\*6r,;=D^P)@(VEUbMRRptP0Q5afthAb_C&/DT<0H'D`;=`6`9X6LI/o!_5&-oaHFCMPp%UV\I#4q<KX.ML/08d&)54lJg^JN=DNY@7h%i$c5P#-l[k0h;QNFDR0G')QPjUJ?K:_W]c'@L9:r;5Cb@'J=jDN%VOF1ED74\1!=/%#RFt^Z?";XNe4LP.lSM91q005jf%dDO:jm[dTTEX?Q.USN[L"J[*h(%.];fi=Ggr@'G2nY1'Dj?@jh=Z0<QgdaC4\.MKg:HNCU%Z%atY9)a`&AP-GW,RM(Ep[%q6q/TH\s5!=$1J9[+DB`g<AMW[&\(?&0B:6$ABN.2;S3e2_cVRX#;IFdT1f$di8)#X]--%hU.rW39?Y%]P,#k:PHG(Q7FWb6p_6RH(#HRrPM/qF#;(W1e0@-KNQ;R;DNs$IY4PCTW:'[+ZG-<d1+AW;n=-gCoJD/<A>*&H"B<&%/K^=p^AmR%nr,R<`taf@7L((P?3%%DKLVjf6)'$/qF#&m/<Vg-e4_ij,a+0:)b%"-.YGl1r@eG6*t&Cm5[>ObYYZB,N!D'eLF8\E-ir&4OGKWk%*$Hd;WSp._":O:V!9mJE$,okE(!eT]L(F`\7REtcn\ZO/NMTTf"%JT8WgM`;FEiD:,^-[[)jUh'FD'>6H*7FK_o#oB2;?]e**unh%+U+NLGQauSFs<]ego3!MKdW/t$eZ$2D%m_FN#>0KEoCN4=GdI('Bo6@22BH[Q*tXuc4-$SEu-W00sa9a./QD0dNH!>6m[@0o1+oO%;\J0-TrKdMd1]Ib96"gJdm\Dain5b/D$1E^j;k&Tr&j3t\J)e0ebKr]5+Il]Y$K*2CV&S4_i`Q[CNL+39=lfi0Shcor1ZZ;M.V;N%99girY6u7=LkAqW*E0E!-1C=m?<@bmd,r33BtdU>&8Eo`f5l1S\TD27[>C"XG.T5M#U+Of,Td\c3\#Y.+TsrO)GL##1eQ3jVj3#Y%6B*M66I(^V.3Iq1>a60T4bP/8Ed2slMg9D_$Gk57-X_]EQTD&q;'=@b*#D-^Va*LSc.8!s3VsF4K[@C]"B3pC-pjN:&-Y_ukh6a3%M6N([,\0NFAb!k;fW/_c49g`qWj]!Cg4_t'I.u^k1\:5YB!?T=QDK!HfLA=,':..DM38@24!P1]pJ2\R\]<.@_k!17Q,4`j'r@:F%<)92Kr?pN'Ucl`C`X]"n9.GMpH(QUY7*W/;im(UfY?F6ae$03P-,^HCKN.JR=G$A>;HKURMgJg13+(JN90=XC`ALOJ,`<b)c/)DO%j)Af<MhO\hos,?SoFPa##$";,Olg(![L1@gV*gP9Zlj&lb?$&]+XMf_o!BfZB_5INK?,;a<``:.02;MS(hpiQ[ZQLt>V&:38([P"%bDO0XSd;f/o%?]=ap=[,>7Mb,ThdR#JCnbh;?eL#ZVDV+=PU"Ak`ccL)QtuJZu6NoAHS^EaAPJY&JiN?PTl9Q+YceZ^.R;hJ?CJ3%;`CcXT#[0aEGY`neFF#c992:B^-%75X2P?q]*)rSK%G)q9:hnDF:]Wh'6b!Y(bF!V;'Vl;E%6n!H,UEU+Oc4,.2gspjG9?J]Fg(7%!MRU_1_''[6F2!_0[Kp?1skjaCDc990`uh]_*D?b%.kGa'f8_J;.r+4Kihd55T^Z"k+A)!Arr9A%Z>6[ZiaD:VG9lTI9mqsMX!/A%^kt2U`0#BOU7qX0r$m<JRAiSCSZ>@OdHR^M%q6^.8BI)I^;$m$g+ESf\W];hjTQl2+Pg,AGmb1t#ur$Q"jl&HLnd)O7"ugaoR[\!%=8PW9j@T@eQ0+bVN*&CtA6Vog#oE1]_]-!^NPXTTd/c1g]9.VW[UrQ'*k:0B7SVdlUQcK]%u<\+[BW4g#`tls!RX"N_q$',+^9lN%YuI*DkV:J<Kkqt[;n.'O1q`?'1!p%haTmhcq2Ims<lLY2LP8JO6N>"V;INR;Rm=9\/X$])"=DGk%!f^!&.ps`P]R0a:OFNuE+HD9%SX5SrZH(FWWB:Kt/neK5(36Q+`T3fH<f8'5)G3r];[a:'BYB;4WC:3'2%6juemWV7BEt32BDnoS_GLQ;,97fA9@Jr+LTQhWq8LFS%mCpIK35q*;q/bW,FbN1f.loE<i[:mE;TE/O(Ck4]ZRT6K,4/Z\\Z[cFiSD.W2,gse.hn>Q:6AL\\iU(tB%ifoB^?@RclT(A"0AS9%a:Mfp[j4U5VJ$:F%G0f;%MKVe:,BSVlH%%&KL$Ca?-PDNaReH6@&tK^FdfP1jd?B'J1OF$:.*U31dt%e9^VJb:bPI.FQ52d+kMU5%.9bLb*B:RXMSWuXiUG*M`t+Q'&KhDpJ6W,9)[R[N+%!p,*<`fI";)ip:\\OZYgg'17#<$d`O,pAbMn<o,fI2.8Z,[\KNo<MV@ZDj%XlpUrBb<!bp#0i=QG\BpA*dtSB)!JW%[,q13>g6eWbV\koNacT.!rgo@5()?!`Wl;S:.LdEc[<L*$\\Z[A"p3&$e\F'LP_PjbeiG%f0Zl`NPjbq+eSTM_-FMo-f^:92sk,qno/B*`Z[`JAfi4M&-mFQ"LI3]*!t;-dnYVMC1C$Z.3)k:WL0F!/OR7)>Pf7rG-.>u6cXo9%(blO5XB&q#gu4S*M:6^b=lJt.':5?DURjnRME'.AE,9gj&(*\!/FC$A_:Yi)oDL"6Jt$jjN_uXpkNd`>&`Oqb8B6sS[]ZbqLr.-%%I2k^L^*V)\"`K>EEt&^nMf:UW%cu*L[YX4"AQ^(i.j<O(:eu()04G+M-srd'&6YV":9$aVkj:nIi^9`;:W4cuFTHbS*5sguM$Z\Y%[Bq.K2o:aqKu?bG#t!uHF>AXu)kYChZ"4/;B9(WsM<J1W`5/cQOH+pkde"2Jp`Z`oa.Xn9M!,te2"drBE'cN4$.:P>Mk=r$@&-U=%7Y*6N]^S36eIeb&Haa[dhnH71f8en$IKBK-]F^0TR$q7*-$bXb#7r"#Ja=M)1Pfm;(*JbA7E=oTB34i=e9'.o@+_f/Z+>7R4YtpE%X&cX[7Qok8m*ec^fPhJIU>CT\6!G)fs3Zn1$d7<<`^3r-@Blt*F%NQFOqiV8UMaNf_<gM9fCW-+^e:AXS])@Yiu"iMP.3u:1A:R%%5*3+S,>iioe!Y"^G!g%OI(`&i`u(7i,sN&bD`H;nD&gS`)b3Rd_n8\9^"=?B@B&jSN?,^9QpoWS48(R*r.3?dqh\9T.(.b5n45^U%Bu>tenfe'$4l"RLIbM3MK=sCV>a=L>Tn#7'=)V:lApNZS2KnbR:Um[uYu.Z?K6g^e.uTDWFIc"+/Au\n]&-]d)lhLmY08efIm`]]%q,^NcbAq/uaD4Krad'g\IkR9]_f_7qZd%cB&cD9B)s,5:9aqIdHHa_!%=V>0V\=5]T5\Y'BZ3S(Sq".`MH84!)-:H_Ri/QA+!FhH%-EO>$PG<`C":$I2D`Alm-tp3VBBCT6ML0)4-TaJWBm<AFCf>X.@E@``[n,m<YT`NMo4fajS'j[o5,qLs14$)tlQ%?;!gKiBKUe(9%+RPAI;K=/h,V'$M8,^s8(!S/bh)<k'p6a/<-SRm=9kf-:[A66bl>Z6)CLX&8S!Z_tEY%Y=D0;3`$r71<qSUsC["UXp88WUa70sMq%74Ul':W*+CW]k2Z.*]@k]NSRF`%"fj2qCsk6Rh&G\n*,`c<.[n.G(1*ep"EfYQUa8?!Fns(_u6$L8skebM)V!86-(#T)+<>\:/>G%:%??BmXlDINpM@YjW`g(fSX.DqWFp,6tpPc3T<ii@O;_;clFpKeP:)kGp:,qg:m`52R8'#/OqnfnT[IU!HsCD<go"1p%.bckeK-_%Yg%BI%(l?q=*achf=\/FZOsk=:S'0iGi'T***DjIhg%s_Rt?h4Gp.^3]VQ-EE4i#kPHsm<=6U)a]D?'7R,t<>fs%Z`B1Y5#kV:t(%-]e.;[:oY,(=[Vk2*e%g\W^6*51NfW5`eth90o/&J59a,Hn)ZM;p'`\:Z[[SV6K(G2Da5u4&l,8i>^_<o4e0NBa;s/@5[En8:+j.%Ii4/PBp)LB(<3sC8RYSo8I@Zdl<oZSL?=eB\!O(*jjR$>F8%++=e/S9Kqj*3?;2NkTNM+ilEQHYZYC_NYe#HBj^c=ObJ]WF4#,2c%Cdj3hr:jHBUP*%XQ2G$NPt'4t/B("-7nldsgdW4+MI%-D?sEe&?5#`#N&>pBQ5jH:"\9"7,&%K3,HbtG-NR`a$(=-Hd2M3Mqo<KF%9,o+YJRkUMjf"g*\-=GSD>@,m0>,gGMrGRhC,UBp*n7gLX7ibINaBf8i_,biFDY"t@hc8S+6q[,1ooUq-<Vd4H0XQN^=Ws?'i)P@%)'A#NH`i9Vrbp7M;?cno=E^s<d%oZ[`N1FhZ/XT2KWH`M&@/O;6@NOF,^Hb">"XfH<X`2mDA*t)if@(Yp]5GmlH2#Z$hK,[>L>oJ%?eCB\AQ@[4Su!t/LN-@M`hp+hhT;nm.3/^sR*[WG>E&i)VOA>q@nfK8VLW?TR,t3;RHmf72[H+SIe'=.=$iJcb4'f2A?7p>6>NIl%OY#Q4L0DeYbsiaSb]I%NCikbF-:\C$j2Mq8KQ9JhTgpmdd4s%kERW;h40))Hbf89-Dn[4#lQJ34gT-*#@j?;@CE+OXN==[Pcb.PM%Fk^jODEgHg&B4l),`KpkN26o;R^KeJ33lE&noL;N\5/0SBNB`XfQ[J4Y56g^%.=t'GK8ICrZZ;.cKfiZD]9`/b"kM%X"aglk2^6r%%t^S$qU%8Hg,NjD)<NiK^p!(kn9su@q"ZI.dB@?%&loCNijoj8UXEq<0=k0@Z5RP.rjbZgjpPf:ntBiaB-dsT>kWb1Y;DEB_,<7u%;S[>&:Q&RPG\jQu<eL(dciYMQ/sH\U2TH-\kq3fMa9;K[m7a5>LV$q>)g&S\IY:DWpp(FMFci6<4r@.XYnXU^^uZe`_2nh)?J%h6%Z(VUrHicTs&aO^u<<G&&*oA=ND\b),C59F%-K@j9kQ=C=`+2<5,^U/Ui=ZYUp,)/Qb+@l;W9!K!,T^F#@c2:V9lAl4`[<PP!XENe%D3VpF5eH-U+l#GB7(F`66Qu\r9\Q`$.a`'H#uNN`!^MJcgER_U.JlY+>P^Pk8QKOTnC16OUhu>`ABb/H%r$cK@'MJRY[(FJ';PnX%C5kAXr_9VY8?5D?QYFcH7oMU9,6Gi1A-kR[1Yi`PNG5V[,hj0!XR]=ec.l+?9BG(o#L(I:GJO+%k;%$lGsgG$JdUq+=F"1R9:*(K%.+V2[Zl3X?_L8'MA5u_h-Vm2ih.O`.g`H0ri"#=&Ms`Ak,qB0P8)<7=8"YpI=Aq$.*qOStV)AZ/l7o`A(+1M<p%3F^:p1OXK];<@%\q_=:ZIs4qCd16%eas]J;2SjZ1Wji"g8pGY7jK$B/O03hr#MJE0L"HT1LT'=4FaJQn/2!b'T*YA=p$.oIMXj#gM(Y<)qHKm2<ddp%QH0Y1Z9$_0Hh'RXj0a@Am)3>:49^)A/n?d[OgZ9E;9?teTr2=Jk"$Z+?U$!>7_*$k,$pA)/8@Qt7%J!d1OpUAFeEGm8Y'O<0n<Z=%RfNX^],<l\g"O^NJ^2iL.Pl16d9*@Yc09g;==NOgJmEY6-6h"rmtt"!o8X5gm*GHpdh#KF+r3=k?FOI!UsY#E9nd+HO`gM'XPh*_%L9Uo=#lC$PXRKo0;AtQe<X`/l\quD5lt*l2.Pr8L*$AB`aCn/thO#_!1plsSif+MkF6(.IEa"(&hst/1>*7j.*s.-1'16!aU"IQ>%W%)M[NJ*T3OK9/'*;*6O'#$'iV>d_E2WgHhbA#R][1b[!G#.b^E<;Luau.oZH"?e,^k4m<-Vs3h-#ur-/_<ZAkF-7aT]N,Eg6cY>%Y$7@jH0I,f1S.irW.E9(X>LWlh+P7\Y$@5?/6cJEmVu)$T$Ph@gD'R;kXF*@7jq'u#j$i9`Z31=a,\1uN7`UUGr`JFFi,JP4CYHK%3*_eJP=#O&4Ep4p$DBFbkR5X[^f+,\MS35JM6&U9Tub^FlBQsNUuIY?`,7MuVt4;^Y]E@@3a@sP:Ucb&\,a!5f!67!ghN\aq"@ED%<FZ2;e%O[P]]0//SPIn"S]IT!.bWs#KS)Pe+g>[U.VQd:;dS%`$2$h>2l[@C2MtUCqK_n6$MDFHZV@n]X[>"AFMl-W$#@JgFlK[2%W,WU\7Fjl"4&Ja^/+k_!JPOgR5US,QhV^oR3/qMOSR\CZUSaqtDPkchpJ=(_GMsS^cR;I$9,K'`4qRc$bf9o3MYV'S2H-WuBl8T[%]9P'(]TOMD^sZoUMPZDFV6K'\TA4Z^@BS7=IBc[FSG?,5=-b<OTs?NSh-I\UXr&d2UK&q4CS#RO**MmD=KW:nm0HE>4IR0u3$d4R%6FfRTn#,lu3]WK@%+s5!.8e'COlE4_8tpm9s&(&!WCrGWd)a=h#ad(g#S\q=+UcM(R4IEUA>Q6hW1Verl7$_l#&Ig4LNk2W@_u/d%`Q0\Bq9HtpCE-kkB?%8paCVe%+cFEN`b(CHjCpLaXH#3./>e56UT!:PTA.G3IXWKH=H<o[2oY&7Jlo/B-HHm=EN<Wl];12(^f&Wm%GY3bp<tY^?QK3lkh&amrhi:<0%%R/HrT$H<S&3>:%e2T"DOZl5&nt@m%'F;\s6<o<FOVc^2<8mm1cHOmFh=krP1<%@Cj@ckM7"fa%(eBp/.SnGlY;0!5*g'PV1+HKOE&m22kI'<&%G,>TnH%*_o\?uLb(Z=DN4$pH[!T:;p((*,]F-Y9e#&*`N&Jkk^emG.bqR0)!?H%4%6"mXMq[CGSX2AC!E7E3/hpR/Zn(YL%bXFYX._hJGPFtCr#u-cgR@qR_Gp9A-`GX,M`]!S"g*,]m:C/35`u+V5p-_Z:a#!>-;9=]H%b>C2Y(\+"TE8MJQD<Q"RdMtd'CpIelD9"O!M-MS(fajo3EJ:noZ]3=^fmX(&-Hcr-\*TrVG,:='rft?oN?Y6d@9u<Vk1biAClf^o%$8ajJ`3sNdA06VTDEHrN.+0R*@GOdb5uZ9n#S]gqkaFOWne#LA$]9Gf844L7*DKS'`9HmY1p'&`1gk.<7Vp:8+0I(I`bGM8Hk06d%+>8,PW^++)gG$BY5=/UT@#WV9p;DghNom>C7jK$B/O03h`[pc@'<qQW>@&qof0R7`Y$]gh13g*ANRO=mo(nJP?J:.Y/F>sKmWFVq%_Y&gL's;O1>4FXE&]mL>b>1@3Z/oPEdVbO911XK_e*.JJL&pn6-])ldHCe`t.5u"B`TO)ePRqgLKTQNf:C#!^)XfAV:/T]%J]gnL%\M;9RcF4eZR1p7.[Xe%%V02&:&d5kgMaihA'A?Y5rmV:cF:E'qFu"it9Mn%M&Q6Yq]J<A8,gk[Won(eUk2<0SXOiM7NlO&IWrq>D%4tisU+S&*:(*2CuSV'p>D@C-9mC]%:#1Q_Zjk!g@L#p<^O\9Dr>-_=3c36]@g_NQpH[49RqgE`DG6N%YZ;T?Ge5+AKYl[gk\q5(G%TGnb%?4':BlZFGQZ:l!kC.aMt::cS0#)\MaNt;[k)1rQd*Sk9OFe*%fPDt0kRsnt%C1R9r489j9\#7QUOPNcnmHA8ac/=WA@W!$.%S[YN*iPs>qKG=)K27BoqVKT>S^8Drd@qSbr6OQ=V+8rRdSa#_Zd<g2`DtX_Y8+HLH^,QZDjTRDHq+NL!`pK#:B7c7AGV3s<CrKbE%4UJqb>s`LrQi,dS09)i-_%`*7'Xp3\kN;O8c@[+-$]`m7FES6p_V4<T:I>gEnU[PM-9kF?_8e06kZT9$#t*ZKEeE?sNMHWQ'T?iB%Y5IpUl6"<J8@bQaS7B6WH:CB2J<L-](YS>FQbk_^]=_N8E1V9a5,FhFaU`s_%6FgdfF[@[\gX^/_)TD6-]1AoQd7Con4o0f@eG,t%L?J$e%X`gHn+(s:.be$f=/Gjf"Xa<N-&c][Up<.?$Z?&rbb8s/qjD*SMYf1KT+V-lZOa+TlA)9dIUD$R?Z*s?@tP>%,gkr7pjL.I%fn&ErmE8B&PZ/tDP(XC1'dO9Q+!DIQ#pIm]5_7Pu4Fu"G`Y8#81!)m^b>1@35mjlGJdpspR1k$G'A-%QKH9E=\*bfD@fO*KYi*Z0%p=>47=gB5o_k)\Nm]r1a`f61[Sc/.:hX3"CMTSt62Xo5Bc^bLP'ojrPlit[Ppmhf=9f\i)[8]l!aL83Y5s"0YDkIZbPYY+B:XkNB%B'$I"IM0M^O0KFf)LGYLbi*5n&jD=H2S6HJnC,_.YBfot5i9P7[p)AGat@H#BaDC4KBLmM]?:[VfFqs*=sAq\fb294g5o":-R%cd%RBREZ07-%cc8;-(I&<iQ`PCT6S"-rlo!c.GC6)MRj?PnGB3)psd?5)AWM?R'CUt^m;5A4dWDRlb$hS"=[C,FAacDOSBnh;+QAeA+%[[+-gj)%J*-mmV$BY!@SQ@qdYLhu\MEmXU/Fu1Ap7TrNA>>7cYGXH4O*a;LRa.<dUdgC5KoM2G+8c.IYe"_1]lBl+Y\E0]ZgE?!L%2PhWV&.Vq3:h)3sS(hACW-sf2Kch<?J3jn-0NfEn[_U@#EXN'(KE\In4N6G2Q;MY_kM_4B^7hYC3#rI7)sE%L'1e,mfXO+-X@I2f%1@eV5SWoSpdd=C_4kFm9g-pUFT3W-Z5(Ec56_7Tob04Y"_d`6FaArXONr#_t$cQ4$Oo'M.`dLpcN$Sm30CEl)#30#<;oZ=WZB[hO%jXD?^N<p9QMk8,uj*6tN`i(Z)%$A_35JM44(%S4a?1'G^`\*hjTj$'`Nm5C[qKT",+.dK:&;ls9A(O9eN(?IH,9`n#1CS*P*luN^%*JB2O[EieWZ;T%iFISVh6O3K(LugC$,O^_$NWIEs*'_\P9Yg;^O=k2k&.7f[!59@WF$ao`3I;`q1QFq*MHGmVP8`\?l'iQpTl4hu%L37ocj!M>2c&LGEHf&'PO46*i<pGJk:I7%r,PB<@f>tXDDVQN3^:?WQWGerA3#=X@-TCbD4^;n\@"(9mQD%=K@)>`&39/''%9'o,%gJ=D3HhZ+g6:Pr>;k4[Aq1L.@0C33n*KK,T]4'"nh:TX,K8doQMm[4q51n3,O(`gOYdi*B+L<*q(C?'->:g`@ZFh,)b#BZ7OCZpZ%dj3G,(BTMJ`WXPP#D8A"&n2boZI"uuOd0CI/R`[lfc[WX5'_E<+CiI[h0QHJ5\>%dm%$#.lCtsrOB0''AYjk2nmo[j[)O46CIb$[%V;Xh$8jUQkJ]#kh]<Q-qIG!L[d:;<Qm\:?,0e16LFn$eHs4h#V6M0Tt$.277ls5G(LkY&P;*Nis-o(2</4ArgA@92:K]n35\SLOi%$IKBOQdR2&UrpAoLR9Q/K$G/)<j'RO5$Cosjk?9(Xkr*bgfC)+-Vm-.m>`o$gsD7cE]@C*h,..[dVS!DT:ZX><f.U%G%\V)TFAA8%FZa*Z8=(+P_3H/8)@s"eV<KBIks"NAG7)`4;-7gT!'G+'#@:)ZF04Y^B]H&UB:.Eie0.!@!HV.YDc5"\BEW/Y5mL>>"bP6$#h7:V%"gZZH,0@;[gtGdZoWRXRa=_H=@m$s$Vl_C<Gdrau&rqf,N*9Q!R5q%P5nJD61M4El_4PRb`MG8'mRge5jG6r4fcHqWZK.(K.-DgN%7OFI,9([nE],(?*;+t]OT@5*Q')agrQjJTkH5bp)MZ.FU2B;n^Q-fg']047c,Rc2u'e4Mk,nhJThY+f%<f".U<TLJ$]7/L56DXT*%/.!N9e*L'F`_4_eMFpp,>b:ffH#9q<o!mMXBKDsX'Xg`:<nN!^XGbbsX8\3ae@CLQ_gTC<K*G`*NK@/`CL^$'+-RZr=?(Z77E]J%%,V)>98);CD:1<gZ!mXc+3OuYm+lqeH,,)lL+QW%p6/iG"qEc72>rGkldV=LT^HEIfP[62T1+t%O$WDg!DfL)#;9=]Hb>C2Y-Q$Jm%&*"<Cc4AR[eo=XGh1VJ/XrAd,9?W[5bp&9?C?oQ6`=F5=>5UWpc_l^ra1S:XN[q^+HG!7kG9)sNdVRj@TAS;PELV?Vop?iV4(LS8%VV[Fi!OD32I><3k^@M385\,O=bP@A2"gK-^96-7cQeJKIaMair\1&4ih`2I7Q;qT1fh,,bd=#VUo93.[cdmg<0s;cSA=H=M4cQ-a%5s9M)Y#ZL>D'uW'k-i:4@n/6nXEG0Gm7E,uXiAFU[3q&;4e)e\NeoY$>Aj;ZGmSbZ!lf%mLU[=mC&G>J"2det!AQ-O-T@4C%e<_X%n2DiP/rJ==OY@"kap8obNh-lh+ersd"Z=MQ(=:)ag*2]JA!.SEQD<3Q;W$UDEF#+g]o+I=m$\]6CDO@aamoZ#YA%Pijq[`#P6BKI%ce(Y(Cc+/B0fpS`\6Cb_R6?ktAmuio%5tb$ZU0h?_Nq*KEo+`(Fa(Y!Epg`9/@mD`4'a1LC],]Yj;Io$WdL3+5(u*M/t/l7C6q$h%=kS0X@?D,#[;YWCe1R&$\-8EU;bXPqfQ,G:DU93%T<O!Oa$spOh!T`\gGD_;bcMkRAlrsF5[?,!:j^E8Lu`^i_UPH6SoQ?:jj*Nq%7(1K:jJSX)-rQAc4nRACc@HH3*TmNh<j^ptQP5'I5+FW5rhL2I)>VniIXL@sg*]0J8tY1@5eYf;'knXL+B^.,3U3NnT*$)JJPMPa%&6I.T$WD(K_H0>p6Q7O%W?n0J)bOr"&!<*P2TFOX4=U5fd8Gj*&_TW0Oe7)?K,.NO\tbj(7`Ja=BcE?mjH\CY5T;7r(J(#LFWdp5%A>MNc8VlrdPNDh+T:RY7#;5d<q*4Dg=3LW[B!qQ/R-44SNP,b#Je0\#4m($t',o:GL9rZJS'.%0cVZJu'@2LT*HbJl6a!PO7MN-A%,GmsM,HKLhaF*]+k""$RB]+."A=/YHM&5k9U.0?_ku.tjUtmf_(`U/lWE3Q@F4Q1Jfkq\B>ccbYeT/47]6Q0kQLVuIkhVi_%,U$T%A\=e$Pp3-(@=G(L9cu(X46hrjl>])l`kW@d8onHf>a3KTF!Z`[\cYn$)6D!AiTY<LI(9hP/rF,l%>?T$R,p1G'!3-34l'a/niVN0%`LEpKL:;LTGTf;DYS6-uI$Y%8'a!+TQC$jlD@=+aP7o)Ep#$LlU[m<&8lM&-=G?&3.3."hAGPI;2S@c0-RHO[J[j-KB@bWhd)MN%%oCEmR?OAncdWbEXUUDgC(0NOG1X5E`CPtFsUNEj@:u7UM=T[=IaC]Ya)1MF-\]V33o5#K;J.5DsnLGo(g_a?9ckW]MnhZGP<K%GR%Ou\g;'TD9DQa:qsJgSjXjl<mZBp<QG6mS`O-S*.d:]7B_1<1+6Du:+?HO5,]E1T,VAut[CNIP3^R-L*?KC%)j2c@.uoY$S+3TTmu%&U)__`dYGk`1FL\c^f2!Q)kZ[4Uq#S2`.dTPC)U*Qtt]*p&[6?__Z=AX'H((K\M1IGhMT!,k>V#&*m0E<\#J$j@RFL9tQMij>m#B%\X6!ndqD.<lB7uVR[)luVu,8>V?]JpiM_S$Z/L3jrclpG&[o#G-VlP!;A=7hE%^LKT0*uc<\"]JjbZNJf2#mifI9;o/Nksp;;4m#%,TG!]?M^W1a/`uqgWom>c_)X3=;-FrW"49R"h!YW(+,2?Tl%aNApY/bK]`f6NiMZfn*!+'e6gY#"KT9`>G^#g;a8%e(j_X<X<01S%C^UqacU3"E`qY_"/OqI\]8'QW'::rUY&=@O]5=/*e&F/;(BK<@JctTID(c&J5TZpr/BIA&8hnLf5;V251O.=;$.t+;k1BQb#QLen%ed4\OlD5Q@V2k";oK02DR?`c5KD47KBOugZ.!m,1`mTUgI6)X>L[$^\qH0Y?B]YWGBpb;)dO.J%:7W:5fN8-&'_,IgmGOtDgc@Ji%XJl2if=:n:2D"7(+!F(+=(<2*WqNfNbf\<k&RHK?C_X;ToQ(rZ^lMqJS/rUah)91h1F@fCcic9@>!XLj9OrYhRuJ1BNGEtOLrDVm%+c1bVAo\_Fe83.*!g8h#?HetR:TY:QgDUH^s*rPf:PJ<VlSSNFoA3I>F'UnnpME8mQ0[EC12-HpS=Q6Vn_Q`.<Ukr;2NE*0dqST<%Fn$15O)ua.@QcW8eYR_J`mdM?"`/'6a>16SO&3f7[UR(C4UF\3$&,XLTKTR9TZ;+P6:W=P74qC7r5Q%Re<FpfoKCGM.5,@pAUlqV%AlbcFpA(/&X@D7gF@`L)F[[H('Z/T:!V?HB2&ge^a2TH5)Mq#_1WEoT`@OfoC$E6tb8ZD$V;`L4H_e2W,@N"+E)/5)@^pKIb;J)4%bZ=(]Al$Ar8'8=J6^<?GYn4gj\Qm$<fnt@(;*V[t<>me6n%XBuWH_n0Ea%YX)"i0LJ,"uQ9<19[Tp[:(/`#,ub#X5-V",eL;SU4"%d;)OBnb%,BqfPlD;WRDucd,6Q0K8;QWb@NBa7)7*4MS=k^V-(s=qnZ@8'A-qHC^:mh,]]f^OY;#rR1KZYCColT<DT$l'lTUIK%ij%+.n&^pu1V<^VB^<'7/M*0Al^&md2Y\?[_hMp%&(Y?U'#9r:8[a^OGtLD_F?Sr6o":J,Sq6@J>-cQ[`iIa,dtn]6Rc_Z.0BRrWhl*%HENOuJ%gC-jq"(KrVYWPQ`n.#mb>eBYO?u=q"\bpfF29Onc+RFh8dj65JD'5s76*VX6\lJY@%;+^L$m.h5f/bIUE*Hq[\2UiU,O[%IJVdg?G1gd+)cXTpW$'JJ,\QcVcQ+]p@a!n]tF=5+bk@<lgp=,T0BscmIS@omp:J?bK%@$o)'jlJ,T6<s8Hr?rXVIMNKa~>%AI9_PrivateDataEnd