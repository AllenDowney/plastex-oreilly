%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: bananas.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 265 159
%%HiResBoundingBox: 0 0 264.6504 158.9502
%%CropBox: 0 0 264.6504 158.9502
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 80 8%%BeginData: 5734 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD047DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87D7D7DA87DA8527DFD7EFF7D7DFD7EFF7D7DFD7EFF7D7DFD7EFF7D%7DFD7EFF7D7EFD7EFF7D7DFD12FFA8A8FFA8AFFD67FF7DA8FD15FFA884FD%67FF7D7DFD15FFA8FD68FF7D7DFD54FFA9FD29FF7D7DFD0DFFA8FFFFFFA8%FD37FFA8FD09FFFD05A8FD26FF7D7DFD0EFFA8FFFFA87DFD35FFA8A8A8FD%09FFA8FFA8FD27FF7D7DFD11FFA8A8A8FD2DFFA8FD07FFA8FFA8A8A8FD07%FFA8FFFD05A8FD22FF7D7EFD12FFA8FD2DFFA8A8A8FFA8FD07FFA884A8FD%05FFA8A87D7D7DFFA8A8FFFF84FD1FFF7D7DFD0DFFA8FD31FF7DA87DFFFF%A8A8FFA8FD05FFA8FD05FFA8A884A87DFD04A8FFA87D7DFD1EFF7DA8FD0C%FFA8A8FD31FFA87DA8A8FFA8AFA8FD05FFA8FFFFFFA8FFFFFFA8FD04FFA8%A8FFFFFFA8FD1FFF7D7DFD0BFF84A8A8FD31FFA8A87DA8A9FFAFFD05FFA8%FFFFFFA9FD0FFFA8FFA8A8A8FD1AFF7D7DFD0BFFA8A8FD2DFFA8FD06FFAF%A8FD1FFFA8A8A8FFA8FD17FF7D7DFD39FFA8A8A8FFA8FD21FFA8FD05FFA8%A8FD17FF7D7DFD0EFFA8FD2DFFA8FFFFFFA8FD1FFFA8FD1DFF7D7DFD0BFF%A8FFA8A8A8FD2DFFA9FFA8A8FD3DFF7D7EFD0EFFA8FD57FFA8FD17FF7D7D%FD0FFFA8FD23FFA8FFFFFFA8FFFFFFA8A8FD28FF7DA8A8FFFFFFA8FD12FF%7DA8FD0EFFA8AFFD24FFA8FD07FFA8FD29FFA8FD04FFAFA8FD11FF7D7DFD%0FFFA8FD23FFA8FFFFFFA8FFFFFFA8FD2FFFA9FD12FF7D7DFD38FFA8FD2D%FFA8FD17FF7D7DFD09FFA8A9A8A8A8FD27FFA8FFA8A8A8FD2BFFA8FFA8FD%16FF7D7DFD0AFFA8A87DA8FD26FFA8FD33FFA8A8FD14FF7D7DFD0BFFA8A8%84FD22FFA8A8FFFFFFA8FFAFFD30FFA87DFFFFFFA8FD10FF7D7EFD0CFFA8%A8A8FD27FFA8FD35FFA8FFA8FD0FFF7D7DFD09FFFD04A87DFD23FFA8FF7D%FFFFFFA8FD33FFA8FFA8FD10FF7DA8FD0CFFA8FD23FFA8FD04FFA8A8FD47%FF7D7DFD33FFA8FFA8FD1BFFA8FD1DFFA8FD0EFF7D7DFD32FFA8A8A8FD17%FFA8FD05FFA8FD2BFF7D7DFD0FFFA8A8FD22FF7DAFFD16FFA8A8A8FD23FF%A8FD0CFF7D7DFD0CFFA8FD3FFFA8A8FFFFA8FD1FFFA8FD0DFF7D7DFD0AFF%FD04A8FFA8A8FD1EFFA8FD1CFFA87DFD04A8FD1DFF7DA8FD0DFF7D7EFD0A%FF7D7DA8FFFFFFA8FD3DFFA8FD1FFFA8FD0FFF7D7DFD0BFF7DA8FD3EFFA8%FF7EA8A8FD1DFFA8A8A8FD0EFF7DA8FD4CFFA8A8A8FFA8FD1DFFA8FD0FFF%7D7DFD4BFFA8FFA8FFA8A9A8FD2CFF7D7DFD4AFFA8A8A8FD26FFA8A8FD09%FF7D7DFD49FFA8A8A8FD23FFA8FFFFFF7DA8FD09FF7D7DFD12FFA8FD3BFF%A8FD21FFA8FFFFFFA8FD09FF7D7DFD12FFA8A8FD19FFA8FFFFFFA8FD16FF%A8A8FD05FFA8FD20FFA87DFD0CFF7D7EFD0EFF7DFFFFFFA8FD19FFA8A8A8%FFA8A8FD16FF7D7EA9FFA8FD23FFA8A8A8FD0BFF7D7DFD0DFFA8A8A8FFA8%A8A8FD17FFA8FFA8FFA8A8A8FD16FFA87DFD06A8FD21FFA8FD0CFF7DA8FD%12FFA8FFA8FD1BFFA8FD18FFA87DFFFFFFA8FD2FFF7D7DFD0EFFA8A8FFFF%A8A8FFA8FD2FFFA8A8A8FFA8A8FD33FF7D7DFD0EFFA8A8FD36FFA8FD29FF%A8FD0DFF7D7DFD0FFFA8FFA8FD33FFA8FD29FFFD05A8FD0AFF7D7DFD10FF%A8A8A8FD33FFA8FD2BFFA8FD0BFF7D7DFD11FFA8A8A8FFFD05A8FD2BFFA8%FD29FFA8A8A8FD0CFF7D7EFD12FFA8FFFFFFA8A8A8FD57FFA8FD0DFF7D7D%FD17FFA8FD27FFA8FD07FFA8A8FD24FFA8A8A8FD0EFF7DA8FD1CFFA8FD23%FFA8FD07FFA8FD25FFA8FD0FFF7D7DFD17FFA8FFFFFFA8A87DFD21FFA8A8%A8FFA8FD2BFFA8A8A8FD0CFF7D7DFD18FFA9FFA8FFA8A8A8FD21FFA8A8A8%A9FD2BFFA8A8FFA8FD0BFF7D7DFD19FFA8FFFFFFA8FD23FFA8FFA8FD28FF%A8A8FFFD05A8FD0AFF7D7DFD6CFF7DA8FFFFA8FD0DFF7D7DFD1FFFA8FD06%FFA8A8FD0AFFA87DA8FFFFA8FFFFA8A8FFA8FFFFFFA8A8FD29FF84A8FFFF%A8A8FD0CFF7D7EFD1CFF7EA8A8A8FD06FF7DA8FD0AFFA8A9FFFFFFA8A8FD%04FFA8A8FD2DFFA8FFFFFFA8FD0DFF7D7DFD1BFFA8A8A8FFA8FD06FFA8A8%FD0FFFA8FFA8FFA8A8A8FD2DFFA8FD12FF7DA8FD22FFA8AFA8A87DA9FD04%FFA8FD07FFA8A8FD04FFA8FFA8FD2DFFA8A8FD12FF7D7DFD22FFA8A8A87E%7DA8FFFFFFA8A8A8FFA8FD05FFA8FFFFFFA8A8A8FD2EFFAFA8A8A8FD10FF%7D7DFD24FFA8A8A8FD05FFA8FFA8FD09FFA8FD31FFA8A8A8FFFFA8A8FD0D%FF7D7DFD23FFA8A8A8FD07FFA8FD0BFFA8FD31FFA8FFFFFFA8FD0EFF7D7D%FD7EFF7D7DFD69FFA8FFA8FD12FF7D7EFD68FF7DA87DA8FD12FF7D7DFD67%FFA8A87DA8A8FD12FF7DA8FD7EFF7D7DFD7EFF7D7DFD7EFF7D7DFD7EFF7D%7DFD7EFF7D7DFD7EFF7D7D7D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7D%A87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D%7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7D%A87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D7E7DA87D%7E7DA87D7E7DA87D7E7DA87D7E7DA87DA852A8FFA8A8A8FFA8A8A8FFA8A8%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:59:55+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T13:59:55+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T13:59:55+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>156</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7l5I8keS5/JegTTaBpss&#xA;0um2jySPaQMzM0CEsxKVJJxVOv8AAXkb/qXdM/6Qrf8A5oxV3+AvI3/Uu6Z/0hW//NGKu/wF5G/6&#xA;l3TP+kK3/wCaMVd/gLyN/wBS7pn/AEhW/wDzRirv8BeRv+pd0z/pCt/+aMVd/gLyN/1Lumf9IVv/&#xA;AM0Yq7/AXkb/AKl3TP8ApCt/+aMVd/gLyN/1Lumf9IVv/wA0Yq7/AAF5G/6l3TP+kK3/AOaMVd/g&#xA;LyN/1Lumf9IVv/zRirv8BeRv+pd0z/pCt/8AmjFXf4C8jf8AUu6Z/wBIVv8A80Yq7/AXkb/qXdM/&#xA;6Qrf/mjFXf4C8jf9S7pn/SFb/wDNGKu/wF5G/wCpd0z/AKQrf/mjFXf4C8jf9S7pn/SFb/8ANGKu&#xA;/wABeRv+pd0z/pCt/wDmjFXf4C8jf9S7pn/SFb/80Yq7/AXkb/qXdM/6Qrf/AJoxV3+AvI3/AFLu&#xA;mf8ASFb/APNGKu/wF5G/6l3TP+kK3/5oxV3+AvI3/Uu6Z/0hW/8AzRirv8BeRv8AqXdM/wCkK3/5&#xA;oxV3+AvI3/Uu6Z/0hW//ADRirv8AAXkb/qXdM/6Qrf8A5oxV3+AvI3/Uu6Z/0hW//NGKu/wF5G/6&#xA;l3TP+kK3/wCaMVd/gLyN/wBS7pn/AEhW/wDzRirv8BeRv+pd0z/pCt/+aMVd/gLyN/1Lumf9IVv/&#xA;AM0YqkvnfyR5Lg8l6/NDoGmxTRabdvHIlpArKywOQykJUEHFU68hf8oN5d/7Zll/1Dpiqe4q7FXY&#xA;qsnnjggkmkJEcal3IBOwFTsMVQq6zp9E9WUQM5K8JfhKsGKUY/ZHxjiN9z0riqNxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvPv/KDeYv+2Ze/9Q74q7yF/wAo&#xA;N5d/7Zll/wBQ6YqnuKuxVSubu2tkD3EgjVjQFvv+4DcnsN8Vaub20tuH1iZIfUNELkKCenf3IHzI&#xA;HfFVG70fTrtYlmhFIP7rj8PEUK0FP8kke3amKoxVCgKoAUCgA6AYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FVJ7u1QuHmjUx09QMwHHlsvKp2r2xVVxV2KoIaxaVnB5r9XIViRTkS5jAX5uOIrSvyxVFQzRz&#xA;RrJGeSNuDuPoIO4I7jFV+KuxV2KuxV2KuxV2KuxVIvPv/KDeYv8AtmXv/UO+Ku8hf8oN5d/7Zll/&#xA;1Dpiqe4q7FUPcrZTSJbz8WkPxJGTuR0P0EVqO4r2riqF1vRLbU4o+a/v4XV4nDMjfCenNd1qO/bq&#xA;N8VR1tCYbaKFmDmNFQsFCAlRSoVdl+QxVUxV2KuxV2KuxV2KuxV2KuxVbLIsUTyvXjGpZqCpoBU0&#xA;AxVjsXm1bvWYrC24xitHEjLyNCA1achQgnhxJ5MCDTicKpimpPBd3Md7IiotTEq7mm5AFB14UPE7&#xA;15U+GmBW00/Tb2l3GpVyW4spoUepWUAbqCSKNTvv13xVAwDzFb3tvDC0Nxp4YRyspqV4mj8qkGOi&#xA;7qo5b7EjbCqeR3EEkjxo4aSP7ajqMCpDq+p6g12LbTbQXEfxm5V0UrKVIRgSTsqhSKncmgFRhVB6&#xA;bf8AmCWAHUiunEArDCiPyA3ABQLT42HGOvE7bVJOKEc+uXFpoH1sp6jxyGNnYs8aqTUfGoLSBaiO&#xA;o3Lde+KU5sLsXdlBchDH6qBmib7SMR8SN/lKdj74FV8VdirsVdirsVdiqReff+UG8xf9sy9/6h3x&#xA;V3kL/lBvLv8A2zLL/qHTFU9xVxrTbr2xVJ9G0vUkZrjWJI7i7Vv3MiV2WhqduK0qzFRQlQacj2VT&#xA;jFXYq7FXYq7FXYq7FXYq7FXYqo3k0sNs8kUZkkFKKBU7kAmg3PEb0G5xVSg1KGRo4ZB6Vy4+KI78&#xA;X48ynLpy4/FTrTemKpPd+VIZNSivrB0haGi8QW4jgGCqFBoBGz81HbdejHCqem0gaQSyIHl48S5H&#xA;UUp06dzgVVjjSNFSNQiKKKqigA8ABiqhZ2FvZhhDWjU6mtAv2R9H3+OKrorO2imeaNOLvUsamgLG&#xA;rcR0Xkd2p1O5xVUWONWZ1UBnpzYDc0FBU4q08ELypK6BpI68HI3FfDFW5I0kRkdQyMKMp6EYqlyv&#xA;FeWfo6dKYghDdSvJGrRuQ+KjH4uXem/fFVkb6zZxRpOPrru1GkQeAHgBx57kV+FehbpiqbYq7FXY&#xA;q7FXYqkXn3/lBvMX/bMvf+od8Vd5C/5Qby7/ANsyy/6h0xVPcVWTxCWGSIsyCRSpZDRhyFKg+OKo&#xA;GXSIm09baSYqkbGQsNlHXYKSaKvL4ak8SAe2Ko23lhliV4X5x9A1Sem29d6/PFVTFXYq7FXYq7FX&#xA;Yq7FXYqsjnhlDGJ1l4Eq3Ag0YdVNO+KqGnXVxcws88PpMGKgfLqN/wCVqqT3pUbHFUNpmoW9/e3J&#xA;Fv6c1tRBKftMjFqUJA2+GoIqu+x64qirLT4bMOIizcyKljXYdBsB953Pc4qicVdirsVdirsVdirs&#xA;VWxxRR8vTRU5sXbiAKsepNO5xVAatrcGnNEjxs7ykBT0UV2qTuaePEHj3pUYqjo5Q8KykFAyhuLj&#xA;iy1FaMOxHfFVOzvre8jMkBqFIBrsdwGU/wCyVgf171GKq+KuxV2KpF59/wCUG8xf9sy9/wCod8Vd&#xA;5C/5Qby7/wBsyy/6h0xVPcVUru5W2tpJ2FVjFT2FPEnsB3PYYqltl5k0XUm+qCRWkkUh4WFVIrxI&#xA;3HRuQ41HxA7d6Kpnb20NvHwiXiCakkliT0qWYknYd8VVMVdirsVdirsVdirsVdiqBsl0uOSW2tiB&#xA;JSjAFq8UNOKN/LGWpRfsk9icVUdDt57f6zE8bIgccGY9afCBTofhVSWHUmn7OKpjFBDEztGgQyHk&#xA;5ApUnviq/FXYq7FXYq7FXYq7FXYq7FVC9+tfVz9W/vKitOPKnfjyovLw5bYq3FMQsMVw8Yu3SrRo&#xA;diQBzKA/EVBxVUjijjXjGgRSSSFAAqTUnbxxVdirsVdiqReff+UG8xf9sy9/6h3xV3kL/lBvLv8A&#xA;2zLL/qHTFU9xVC6hcTQqgjtzcCQ8WUCv+x79fFqL4kYqkKWjjzX6VvAkUEKgtNQ1biFdg25Mh/eU&#xA;HKgT9kk1XChlGBLsVdirsVdirsVdirsVSm5ZP03GwSV5EjJCJ+0QrGgqQAhrRiTTlw98VWi6WRHZ&#xA;EWz1Cc8EZ+VGFRuCyqU504gsoPIdGoMVTS2WdYEE7B5gPiZen8K+5oK+A6YqqYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYql82hWM2qR6k/MzxgUXl8JK14k7V+Gp2rTvSuKqTLr72zEyRW8itUs24oAa7gH4A2&#xA;4rQkdaYqmcckcqCSNw8bbq6kEEexGKrsVdiqReff+UG8xf8AbMvf+od8Vd5C/wCUG8u/9syy/wCo&#xA;dMVT3FXYqoR3do9xJHGwa4UfEAKEhDQgE7NxY0NDsTviqzT7m5uIma4gMDq1ADtXatN/5T8Neh6j&#xA;rQKorFXYq7FXYq7FXYq7FUNczNLYSy2bh24sY2jo9SvULvSu1PniqW+XbS6a1WbUW9a4RiI5CSwI&#xA;BJ5KzBWI32qopTYYqneKuxV2KuxV2Kpda6oxuHt7xBBJUemN/wBokAE9Oo+FtuR2HTFVS7hF3cIk&#xA;N36UlsayRpQkcqEHrs1Olaih3BriqNxV2KuxV2KuxV2KrJoY5onilXlHICrqe4OxxVA217Zw3Sab&#xA;bgvx5c2BrRzV2r9P2vAlR32VTHFXYqkXn3/lBvMX/bMvf+od8Vd5C/5Qby7/ANsyy/6h0xVPcVQm&#xA;qWtxdWUkNvM0ErA0dWKHoR9pfiXfeo/EVGKpZ5RstUtrST9JxKtzy4iQUBYACvwqWAWvTffwAphK&#xA;ppaWC20s8gdn9duRDdtyd/E/FSv8oUdqkKisVdirsVdirsVdirUkaSI0bqGRwVZT0IOxBxVStbSG&#xA;2RliB+NuTsxqxNAKk/IAYqrYq7FXYq7FXYq7FWKeZrqzXVYAYpvrqALFKgairUHl8ILqjM4SsfxM&#xA;SV2pUFCb6RBYxsQrF71VYSliSVLNydV3Zdm+3xJ3+0Sd8CU0xV2KuxV2KuxV2KoXU5J0tGEMbSF/&#xA;gbgWDKGB3HD4uu1R0rXtiqjo2kWum25WFSrSULA0+ECpCKF+EKtTsO5OKphirsVSLz7/AMoN5i/7&#xA;Zl7/ANQ74q7yF/yg3l3/ALZll/1Dpiqe4q7FXYqp3FxDbxmSZuKVA6Ekk9AAKkn5YqvjkSRFkRgy&#xA;OAysOhB3BGKt4q7FXYq7FXYq7FXYq7FXYq7FXYq7FVG9W5a2cWrcZ9uJ26VFaVBFaVpXFUDFDPaA&#xA;3OoTi4aq8EA29VzxHANsn2uIpTbdvZVG20do3+lwKP8ASFDiQAiqsKg0PSuKq+KuxV2KuxV2KuxV&#xA;ZO7pDI8aGV1UskYIBYgVCgnxxVBWuqGdTCV9K83UB1YJzoWWvdSy/FxO9PvxVbodxqssEg1GIxyI&#xA;1EJABp3U0+E8T+0uxFO9cVTLFUi8+/8AKDeYv+2Ze/8AUO+Ku8hf8oN5d/7Zll/1Dpiqe4q7FUv1&#xA;yPVHsCunSpDNyBd3NBw3qOVDx7VNK0rTemKtahFe/otEZ0eRQpupto/srUutahKOA3iBWnxUxVVt&#xA;r+z5Q2qOhYqFUxD91UJy4rSo+yKgeGKozFXYq7FXYq7FUrudKvri+MrXZS3G6ota1NKUHRWSho3f&#xA;luNhirnju5ddBKyJbwps1PhJ61DdKNyKsOvwj54qmmKuxV2KuxVpmVRyYhR4nYb7YqxPW5NR0vzD&#xA;Fqcl0zWMvw/V0ViQq8Qy+B2+yvUsa+2FCcXz6rFLITCt3aSfD6PEEUO42A5dirVqNw3SowJTRfsj&#xA;bjt9nbb22xVvFXYq7FXYq7FXYq7FUpudDafW4dRacgRAAKBvxBB4DsByFS3WhK9OiqbYq7FUi8+/&#xA;8oN5i/7Zl7/1DvirvIX/ACg3l3/tmWX/AFDpiqe4q7FVC+tjc2ksCtwdx8D9QGG6kjuARuO+KpWs&#xA;9vp9nDYak7EMQEfqVBb4DyUJ0fpwX4BStAK4VTOG2s7ZFdVVSo4iY05EO3I/F/lMa/PAqsZYhKIi&#xA;6iUjkI6jkQO9OtMVXYq7FXYq7FXYq7FXYq7FXYq7FUBqrWUnpW1wzKXdSrLT4Sx9NeQaoIYvxpQ9&#xA;a9qhVGCCIRpGVDLHThy+Igr0NWqa++Kr8VdirsVdirsVdirsVdirsVSsz3ls92/qLdUcUhUkmMNU&#xA;hnChmUceK0VT05bVYhVMonZ4kdkMbMoJjalVJFaGlRtiq7FUi8+/8oN5i/7Zl7/1DvirvIX/ACg3&#xA;l3/tmWX/AFDpiqe4q7FXYqpXNpb3KqJk5FDyjYEqytSlVZSGU0NNj0xVSvNOgubVbephRKemY+I4&#xA;0BXZWDIRQ9CpGKoXTNKt4ys5m+syxEqsgZnA4gp1Yu1QC3Vu9OwoqrrrOmtffURMPrJqVQggEKxU&#xA;0anE0YFevXFUbirsVdirsVdirsVdirsVQtnfi5lnj9NkMLUqe+5G/gfhrTwIPfFUQ0cbOjsgZ46l&#xA;GIBKkihoe22KoezlvnmuFuYljjRqQle4qfffahrt1p2xVFYq7FXYq7FXYq7FXYq7FUPf3UltCJEi&#xA;MpLBaCu1e54hj7Cg64qp2cFktxLJEAtwd5YiylozL8ZBCk8eR3PjiqMxV2KpF59/5QbzF/2zL3/q&#xA;HfFXeQv+UG8u/wDbMsv+odMVT3FXYq7FXYq7FUufR0S1EFo5i+MOxJPxBV4KpKlWooApQg7da1OK&#xA;tPokLX8F6HpPGFEkvBQ7lf2iV4irAlWqp+EkLxqcVTLFVssscUZkkPFF6n/PvirUE8U8SyxNyRq0&#xA;PuDQgg7gg7EHpiq/FVssscUZkkPFF6n/AD74qstrq2uohLbyLLGdg6moxVdPPFBE0srcUWlT7k0A&#xA;AG5JOwA64qtju7aQRlZVrLyEak0YlPtDiaGq0+Idu+KpLqei6al6b6a7kglkGxrUABuRLEfFw34s&#xA;aiifDULhVOrSAwW6QlzIUFObfOv3DoPbAqrirsVdirsVdirsVdirsVdiqUDX1k12TRkhYSrGWM1Q&#xA;ePwghmTshrQGu52p3xVBLa6ha3n1eJka6nDOjlj8CO/Kbi1NuTLyO3VxQfCalDILdZlhRZmDygfG&#xA;w2qfw/UPkMCVTFUi8+/8oN5i/wC2Ze/9Q74q7yF/yg3l3/tmWX/UOmKp7irsVdirsVdirsVSmTSN&#xA;RfVZrn9ISpaSxsghUkcSygbD7I4kcgwHLtiqJ5LpmnVkYyiPuAFUcm2AHREWv0DFWP8AmrzNZ/oS&#xA;4TjIjScAqMFViCQSGDV4bb/EDyFSARhQnvl5EXRLILWhiVjUU3bdqL+yKnZe3TAlELqFmZZI/VAM&#xA;QZnJ2WiGjkMdjwOzU6HY4qudLa8tuLASwSD9RqD4ggj5g4qgrf8ARmmzx6ZbQNF6w5jjUrvUdSeX&#xA;7Hbp7YqhJwNIC24QT2k5q6uRyYkhCBVlAoKE7HkTvxFSCq0aa2qSwzFPqttDxa3KjiSoPKPYndl+&#xA;0DQBTtRt8VTya3gmCiVA4U8lr2OBVTFXYq7FXYq7FXYq7FXYq7FVO4l9GCSUKXKKSqDqx7KPcnYY&#xA;qgtNaymna5EYivXU+pHyrRSRVgNtm4qeg7YqiWsLZrtbsr++QbHtUAqD8wrMPp+WKojFXYqkXn3/&#xA;AJQbzF/2zL3/AKh3xV3kL/lBvLv/AGzLL/qHTFU9xV2KuxV2KuxV2KuxV2KpU/l+3mvXuLmQzoxD&#xA;CFh8Jo3JQ9aghD9mgG2zcsVTVVCgKoAUCgA6AYql91pbTXomVlSJwonUCjNxPiOtRQVO602xVGW9&#xA;vDbxCGFeMa1IFSd2JYkk1JJJriqpQVr38cVQ1xp1rcTrNKnJlABHZgp5KGHeh3GKonFXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FULqFlDfQmB5GQj4gU4kioK7q4ZSKE/aUjFUNp2kJCsk3rGS4kqI7jk0nEFQl&#xA;V9QvU/DXevhUgYqi7C3nghKTSmVixIJJNAewLVY+O5706YqiMVdiqReff+UG8xf9sy9/6h3xV3kL&#xA;/lBvLv8A2zLL/qHTFU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxVjN75Puprp7iLVJozMzeooJFFelWDKal9qDl8HH4QoG2G1T+ztI7WH00LMCSzM1Kkn2ACj6B&#xA;gVXxV2KuxVIvPv8Ayg3mL/tmXv8A1DvirvIX/KDeXf8AtmWX/UOmKp7irsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSLz7/yg3mL/ALZl7/1DvirG&#xA;tO/wD+j7X9Hf4j/R/pR/U/Q/xL6Xo8R6fp8fh48acadsVRH/ADqH/fz/APhzYq7/AJ1D/v5//Dmx&#xA;V3/Oof8Afz/+HNirv+dQ/wC/n/8ADmxV3/Oof9/P/wCHNirv+dQ/7+f/AMObFXf86h/38/8A4c2K&#xA;u/51D/v5/wDw5sVd/wA6h/38/wD4c2Ku/wCdQ/7+f/w5sVd/zqH/AH8//hzYq7/nUP8Av5//AA5s&#xA;Vd/zqH/fz/8AhzYq7/nUP+/n/wDDmxV3/Oof9/P/AOHNirv+dQ/7+f8A8ObFXf8AOof9/P8A+HNi&#xA;rv8AnUP+/n/8ObFXf86h/wB/P/4c2Ku/51D/AL+f/wAObFXf86h/38//AIc2Ku/51D/v5/8Aw5sV&#xA;d/zqH/fz/wDhzYq7/nUP+/n/APDmxV3/ADqH/fz/APhzYq7/AJ1D/v5//DmxV3/Oof8Afz/+HNir&#xA;v+dQ/wC/n/8ADmxV3/Oof9/P/wCHNirv+dQ/7+f/AMObFUPqP+Af0fdfpH/Ef6P9KT656/8AiX0v&#xA;R4n1PU5fDx415V7Yq//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:E9FE4BF851D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:EAFE4BF851D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -158.95 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 158.95 li
264.65 158.95 li
264.65 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0.25 0.25 mo
0.25 158.7 li
264.4 158.7 li
264.4 0.25 li
0.25 0.25 li
0.25 0.25 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
0.25 lw
234.105 76.1201 mo
234.105 75.251 233.399 74.5449 232.53 74.5449 cv
231.661 74.5449 230.955 75.251 230.955 76.1201 cv
230.955 76.9897 231.661 77.6953 232.53 77.6953 cv
233.399 77.6953 234.105 76.9897 234.105 76.1201 cv
@
1 lc
232.45 76.2002 mo
232.45 76.2002 li
@
0 lc
160.665 34.1201 mo
160.665 33.251 159.96 32.5449 159.09 32.5449 cv
158.221 32.5449 157.516 33.251 157.516 34.1201 cv
157.516 34.9897 158.221 35.6953 159.09 35.6953 cv
159.96 35.6953 160.665 34.9897 160.665 34.1201 cv
@
1 lc
159.05 34.0503 mo
159.05 34.0503 li
@
0 lc
229.306 121.96 mo
229.306 121.091 228.6 120.385 227.73 120.385 cv
226.86 120.385 226.155 121.091 226.155 121.96 cv
226.155 122.829 226.86 123.535 227.73 123.535 cv
228.6 123.535 229.306 122.829 229.306 121.96 cv
@
1 lc
227.75 122.05 mo
227.75 122.05 li
@
0 lc
215.865 53.8003 mo
215.865 52.9307 215.159 52.2251 214.29 52.2251 cv
213.421 52.2251 212.715 52.9307 212.715 53.8003 cv
212.715 54.6694 213.421 55.375 214.29 55.375 cv
215.159 55.375 215.865 54.6694 215.865 53.8003 cv
@
1 lc
214.351 53.7002 mo
214.351 53.7002 li
@
0 lc
213.705 48.04 mo
213.705 47.1709 213 46.4653 212.13 46.4653 cv
211.261 46.4653 210.556 47.1709 210.556 48.04 cv
210.556 48.9097 211.261 49.6152 212.13 49.6152 cv
213 49.6152 213.705 48.9097 213.705 48.04 cv
@
1 lc
212.2 48.0503 mo
212.2 48.0503 li
@
0 lc
223.545 133.72 mo
223.545 132.851 222.84 132.146 221.97 132.146 cv
221.101 132.146 220.396 132.851 220.396 133.72 cv
220.396 134.59 221.101 135.295 221.97 135.295 cv
222.84 135.295 223.545 134.59 223.545 133.72 cv
@
1 lc
222.05 133.75 mo
222.05 133.75 li
@
0 lc
235.785 102.521 mo
235.785 101.65 235.079 100.945 234.21 100.945 cv
233.341 100.945 232.635 101.65 232.635 102.521 cv
232.635 103.39 233.341 104.095 234.21 104.095 cv
235.079 104.095 235.785 103.39 235.785 102.521 cv
@
1 lc
234.2 102.55 mo
234.2 102.55 li
@
0 lc
237.705 124.84 mo
237.705 123.971 237 123.266 236.13 123.266 cv
235.261 123.266 234.556 123.971 234.556 124.84 cv
234.556 125.71 235.261 126.415 236.13 126.415 cv
237 126.415 237.705 125.71 237.705 124.84 cv
@
1 lc
236.05 124.9 mo
236.05 124.9 li
@
0 lc
236.266 116.561 mo
236.266 115.69 235.56 114.985 234.69 114.985 cv
233.821 114.985 233.115 115.69 233.115 116.561 cv
233.115 117.43 233.821 118.135 234.69 118.135 cv
235.56 118.135 236.266 117.43 236.266 116.561 cv
@
1 lc
234.75 116.55 mo
234.75 116.55 li
@
0 lc
193.065 31.2402 mo
193.065 30.3706 192.359 29.665 191.49 29.665 cv
190.621 29.665 189.915 30.3706 189.915 31.2402 cv
189.915 32.1094 190.621 32.8154 191.49 32.8154 cv
192.359 32.8154 193.065 32.1094 193.065 31.2402 cv
@
1 lc
191.55 31.1504 mo
191.55 31.1504 li
@
0 lc
234.226 135.16 mo
234.226 134.291 233.52 133.585 232.65 133.585 cv
231.781 133.585 231.075 134.291 231.075 135.16 cv
231.075 136.029 231.781 136.735 232.65 136.735 cv
233.52 136.735 234.226 136.029 234.226 135.16 cv
@
1 lc
232.65 135.2 mo
232.65 135.2 li
@
0 lc
137.385 30.7603 mo
137.385 29.8906 136.68 29.1851 135.811 29.1851 cv
134.941 29.1851 134.235 29.8906 134.235 30.7603 cv
134.235 31.6294 134.941 32.335 135.811 32.335 cv
136.68 32.335 137.385 31.6294 137.385 30.7603 cv
@
1 lc
135.8 30.7002 mo
135.8 30.7002 li
@
0 lc
136.065 33.4004 mo
136.065 32.5308 135.359 31.8252 134.49 31.8252 cv
133.621 31.8252 132.915 32.5308 132.915 33.4004 cv
132.915 34.2695 133.621 34.9751 134.49 34.9751 cv
135.359 34.9751 136.065 34.2695 136.065 33.4004 cv
@
1 lc
134.5 33.5 mo
134.5 33.5 li
@
0 lc
188.745 32.6802 mo
188.745 31.8105 188.04 31.105 187.17 31.105 cv
186.301 31.105 185.595 31.8105 185.595 32.6802 cv
185.595 33.5498 186.301 34.2554 187.17 34.2554 cv
188.04 34.2554 188.745 33.5498 188.745 32.6802 cv
@
1 lc
187.2 32.6504 mo
187.2 32.6504 li
@
0 lc
231.945 79.7202 mo
231.945 78.8506 231.239 78.145 230.37 78.145 cv
229.501 78.145 228.795 78.8506 228.795 79.7202 cv
228.795 80.5898 229.501 81.2949 230.37 81.2949 cv
231.239 81.2949 231.945 80.5898 231.945 79.7202 cv
@
1 lc
230.351 79.8003 mo
230.351 79.8003 li
@
0 lc
177.945 23.5601 mo
177.945 22.6909 177.239 21.9854 176.37 21.9854 cv
175.501 21.9854 174.795 22.6909 174.795 23.5601 cv
174.795 24.4297 175.501 25.1353 176.37 25.1353 cv
177.239 25.1353 177.945 24.4297 177.945 23.5601 cv
@
1 lc
176.351 23.5503 mo
176.351 23.5503 li
@
0 lc
129.825 40.8403 mo
129.825 39.9707 129.12 39.2651 128.25 39.2651 cv
127.381 39.2651 126.675 39.9707 126.675 40.8403 cv
126.675 41.7095 127.381 42.415 128.25 42.415 cv
129.12 42.415 129.825 41.7095 129.825 40.8403 cv
@
1 lc
128.25 40.8501 mo
128.25 40.8501 li
@
0 lc
226.425 48.7603 mo
226.425 47.8906 225.72 47.1851 224.851 47.1851 cv
223.98 47.1851 223.275 47.8906 223.275 48.7603 cv
223.275 49.6294 223.98 50.335 224.851 50.335 cv
225.72 50.335 226.425 49.6294 226.425 48.7603 cv
@
1 lc
224.9 48.7002 mo
224.9 48.7002 li
@
0 lc
225.705 141.88 mo
225.705 141.011 225 140.306 224.13 140.306 cv
223.261 140.306 222.556 141.011 222.556 141.88 cv
222.556 142.75 223.261 143.455 224.13 143.455 cv
225 143.455 225.705 142.75 225.705 141.88 cv
@
1 lc
224.101 141.851 mo
224.101 141.851 li
@
0 lc
185.385 29.8003 mo
185.385 28.9307 184.68 28.2251 183.811 28.2251 cv
182.94 28.2251 182.235 28.9307 182.235 29.8003 cv
182.235 30.6694 182.94 31.375 183.811 31.375 cv
184.68 31.375 185.385 30.6694 185.385 29.8003 cv
@
1 lc
183.75 29.7002 mo
183.75 29.7002 li
@
0 lc
170.025 33.4004 mo
170.025 32.5308 169.319 31.8252 168.45 31.8252 cv
167.581 31.8252 166.875 32.5308 166.875 33.4004 cv
166.875 34.2695 167.581 34.9751 168.45 34.9751 cv
169.319 34.9751 170.025 34.2695 170.025 33.4004 cv
@
1 lc
168.5 33.4502 mo
168.5 33.4502 li
@
0 lc
128.025 49.2402 mo
128.025 48.3706 127.319 47.665 126.45 47.665 cv
125.581 47.665 124.875 48.3706 124.875 49.2402 cv
124.875 50.1094 125.581 50.8154 126.45 50.8154 cv
127.319 50.8154 128.025 50.1094 128.025 49.2402 cv
@
1 lc
126.35 49.25 mo
126.35 49.25 li
@
0 lc
146.505 32.9199 mo
146.505 32.0508 145.8 31.3452 144.931 31.3452 cv
144.061 31.3452 143.355 32.0508 143.355 32.9199 cv
143.355 33.7896 144.061 34.4951 144.931 34.4951 cv
145.8 34.4951 146.505 33.7896 146.505 32.9199 cv
@
1 lc
145 32.8501 mo
145 32.8501 li
@
0 lc
163.785 29.0801 mo
163.785 28.2109 163.079 27.5054 162.21 27.5054 cv
161.341 27.5054 160.635 28.2109 160.635 29.0801 cv
160.635 29.9497 161.341 30.6553 162.21 30.6553 cv
163.079 30.6553 163.785 29.9497 163.785 29.0801 cv
@
1 lc
162.15 29.0503 mo
162.15 29.0503 li
@
0 lc
233.625 66.7603 mo
233.625 65.8906 232.92 65.1851 232.05 65.1851 cv
231.181 65.1851 230.476 65.8906 230.476 66.7603 cv
230.476 67.6294 231.181 68.335 232.05 68.335 cv
232.92 68.335 233.625 67.6294 233.625 66.7603 cv
@
1 lc
232.15 66.8501 mo
232.15 66.8501 li
@
0 lc
207.226 36.04 mo
207.226 35.1709 206.52 34.4653 205.65 34.4653 cv
204.781 34.4653 204.075 35.1709 204.075 36.04 cv
204.075 36.9097 204.781 37.6152 205.65 37.6152 cv
206.52 37.6152 207.226 36.9097 207.226 36.04 cv
@
1 lc
205.75 36.1001 mo
205.75 36.1001 li
@
0 lc
210.105 36.52 mo
210.105 35.6509 209.399 34.9453 208.53 34.9453 cv
207.661 34.9453 206.955 35.6509 206.955 36.52 cv
206.955 37.3896 207.661 38.0952 208.53 38.0952 cv
209.399 38.0952 210.105 37.3896 210.105 36.52 cv
@
1 lc
208.601 36.5503 mo
208.601 36.5503 li
@
0 lc
110.025 72.04 mo
110.025 71.1709 109.319 70.4653 108.45 70.4653 cv
107.581 70.4653 106.875 71.1709 106.875 72.04 cv
106.875 72.9097 107.581 73.6152 108.45 73.6152 cv
109.319 73.6152 110.025 72.9097 110.025 72.04 cv
@
1 lc
108.55 72 mo
108.55 72 li
@
0 lc
104.505 96.4004 mo
104.505 95.5303 103.8 94.8252 102.93 94.8252 cv
102.061 94.8252 101.355 95.5303 101.355 96.4004 cv
101.355 97.2695 102.061 97.9756 102.93 97.9756 cv
103.8 97.9756 104.505 97.2695 104.505 96.4004 cv
@
1 lc
102.85 96.4004 mo
102.85 96.4004 li
@
0 lc
200.266 32.9199 mo
200.266 32.0508 199.56 31.3452 198.69 31.3452 cv
197.821 31.3452 197.115 32.0508 197.115 32.9199 cv
197.115 33.7896 197.821 34.4951 198.69 34.4951 cv
199.56 34.4951 200.266 33.7896 200.266 32.9199 cv
@
1 lc
198.75 32.9502 mo
198.75 32.9502 li
@
0 lc
119.865 54.7603 mo
119.865 53.8906 119.16 53.1851 118.29 53.1851 cv
117.421 53.1851 116.715 53.8906 116.715 54.7603 cv
116.715 55.6294 117.421 56.335 118.29 56.335 cv
119.16 56.335 119.865 55.6294 119.865 54.7603 cv
@
1 lc
118.3 54.8501 mo
118.3 54.8501 li
@
0 lc
226.665 62.2002 mo
226.665 61.3306 225.96 60.625 225.09 60.625 cv
224.221 60.625 223.516 61.3306 223.516 62.2002 cv
223.516 63.0693 224.221 63.7754 225.09 63.7754 cv
225.96 63.7754 226.665 63.0693 226.665 62.2002 cv
@
1 lc
225.101 62.2002 mo
225.101 62.2002 li
@
0 lc
153.825 25.48 mo
153.825 24.6108 153.119 23.9053 152.25 23.9053 cv
151.381 23.9053 150.675 24.6108 150.675 25.48 cv
150.675 26.3496 151.381 27.0552 152.25 27.0552 cv
153.119 27.0552 153.825 26.3496 153.825 25.48 cv
@
1 lc
152.25 25.4004 mo
152.25 25.4004 li
@
0 lc
118.905 46.6001 mo
118.905 45.731 118.2 45.0254 117.33 45.0254 cv
116.461 45.0254 115.755 45.731 115.755 46.6001 cv
115.755 47.4697 116.461 48.1753 117.33 48.1753 cv
118.2 48.1753 118.905 47.4697 118.905 46.6001 cv
@
1 lc
117.4 46.5 mo
117.4 46.5 li
@
0 lc
96.105 94.1201 mo
96.105 93.251 95.3994 92.5449 94.5303 92.5449 cv
93.6606 92.5449 92.9551 93.251 92.9551 94.1201 cv
92.9551 94.9893 93.6606 95.6953 94.5303 95.6953 cv
95.3994 95.6953 96.105 94.9893 96.105 94.1201 cv
@
1 lc
94.6001 94.1504 mo
94.6001 94.1504 li
@
0 lc
134.745 31.7202 mo
134.745 30.8506 134.039 30.145 133.17 30.145 cv
132.301 30.145 131.595 30.8506 131.595 31.7202 cv
131.595 32.5894 132.301 33.2949 133.17 33.2949 cv
134.039 33.2949 134.745 32.5894 134.745 31.7202 cv
@
1 lc
133.25 31.75 mo
133.25 31.75 li
@
0 lc
231.945 113.32 mo
231.945 112.451 231.239 111.745 230.37 111.745 cv
229.501 111.745 228.795 112.451 228.795 113.32 cv
228.795 114.189 229.501 114.896 230.37 114.896 cv
231.239 114.896 231.945 114.189 231.945 113.32 cv
@
1 lc
230.3 113.351 mo
230.3 113.351 li
@
0 lc
164.025 29.5601 mo
164.025 28.6909 163.319 27.9854 162.45 27.9854 cv
161.581 27.9854 160.875 28.6909 160.875 29.5601 cv
160.875 30.4297 161.581 31.1353 162.45 31.1353 cv
163.319 31.1353 164.025 30.4297 164.025 29.5601 cv
@
1 lc
162.45 29.5 mo
162.45 29.5 li
@
0 lc
185.025 28.96 mo
185.025 28.0908 184.319 27.3853 183.45 27.3853 cv
182.581 27.3853 181.875 28.0908 181.875 28.96 cv
181.875 29.8296 182.581 30.5352 183.45 30.5352 cv
184.319 30.5352 185.025 29.8296 185.025 28.96 cv
@
1 lc
183.45 28.9502 mo
183.45 28.9502 li
@
0 lc
226.186 135.16 mo
226.186 134.291 225.479 133.585 224.61 133.585 cv
223.741 133.585 223.035 134.291 223.035 135.16 cv
223.035 136.029 223.741 136.735 224.61 136.735 cv
225.479 136.735 226.186 136.029 226.186 135.16 cv
@
1 lc
224.55 135.101 mo
224.55 135.101 li
@
0 lc
183.226 24.1602 mo
183.226 23.291 182.52 22.585 181.65 22.585 cv
180.781 22.585 180.075 23.291 180.075 24.1602 cv
180.075 25.0298 180.781 25.7354 181.65 25.7354 cv
182.52 25.7354 183.226 25.0298 183.226 24.1602 cv
@
1 lc
181.75 24.1504 mo
181.75 24.1504 li
@
0 lc
199.065 31 mo
199.065 30.1309 198.359 29.4253 197.49 29.4253 cv
196.621 29.4253 195.915 30.1309 195.915 31 cv
195.915 31.8696 196.621 32.5752 197.49 32.5752 cv
198.359 32.5752 199.065 31.8696 199.065 31 cv
@
1 lc
197.55 31.1001 mo
197.55 31.1001 li
@
0 lc
138.825 33.04 mo
138.825 32.1709 138.119 31.4653 137.25 31.4653 cv
136.381 31.4653 135.675 32.1709 135.675 33.04 cv
135.675 33.9097 136.381 34.6152 137.25 34.6152 cv
138.119 34.6152 138.825 33.9097 138.825 33.04 cv
@
1 lc
137.351 33.0503 mo
137.351 33.0503 li
@
0 lc
101.985 75.1602 mo
101.985 74.291 101.28 73.585 100.41 73.585 cv
99.541 73.585 98.835 74.291 98.835 75.1602 cv
98.835 76.0298 99.541 76.7354 100.41 76.7354 cv
101.28 76.7354 101.985 76.0298 101.985 75.1602 cv
@
1 lc
100.4 75.2002 mo
100.4 75.2002 li
@
0 lc
139.306 29.0801 mo
139.306 28.2109 138.6 27.5054 137.73 27.5054 cv
136.86 27.5054 136.155 28.2109 136.155 29.0801 cv
136.155 29.9497 136.86 30.6553 137.73 30.6553 cv
138.6 30.6553 139.306 29.9497 139.306 29.0801 cv
@
1 lc
137.75 29.0503 mo
137.75 29.0503 li
@
0 lc
237.705 72.52 mo
237.705 71.6509 237 70.9453 236.13 70.9453 cv
235.261 70.9453 234.556 71.6509 234.556 72.52 cv
234.556 73.3896 235.261 74.0952 236.13 74.0952 cv
237 74.0952 237.705 73.3896 237.705 72.52 cv
@
1 lc
236.101 72.6001 mo
236.101 72.6001 li
@
0 lc
235.306 75.1602 mo
235.306 74.291 234.6 73.585 233.73 73.585 cv
232.86 73.585 232.155 74.291 232.155 75.1602 cv
232.155 76.0298 232.86 76.7354 233.73 76.7354 cv
234.6 76.7354 235.306 76.0298 235.306 75.1602 cv
@
1 lc
233.7 75.25 mo
233.7 75.25 li
@
0 lc
140.745 36.2803 mo
140.745 35.4106 140.04 34.7051 139.17 34.7051 cv
138.301 34.7051 137.595 35.4106 137.595 36.2803 cv
137.595 37.1494 138.301 37.855 139.17 37.855 cv
140.04 37.855 140.745 37.1494 140.745 36.2803 cv
@
1 lc
139.101 36.25 mo
139.101 36.25 li
@
0 lc
112.425 57.6401 mo
112.425 56.7705 111.72 56.0654 110.85 56.0654 cv
109.981 56.0654 109.275 56.7705 109.275 57.6401 cv
109.275 58.5098 109.981 59.2153 110.85 59.2153 cv
111.72 59.2153 112.425 58.5098 112.425 57.6401 cv
@
1 lc
110.75 57.7002 mo
110.75 57.7002 li
@
0 lc
125.265 38.4404 mo
125.265 37.5708 124.56 36.8652 123.69 36.8652 cv
122.821 36.8652 122.115 37.5708 122.115 38.4404 cv
122.115 39.3096 122.821 40.0151 123.69 40.0151 cv
124.56 40.0151 125.265 39.3096 125.265 38.4404 cv
@
1 lc
123.7 38.4004 mo
123.7 38.4004 li
@
0 lc
114.345 66.04 mo
114.345 65.1709 113.64 64.4653 112.77 64.4653 cv
111.901 64.4653 111.195 65.1709 111.195 66.04 cv
111.195 66.9097 111.901 67.6152 112.77 67.6152 cv
113.64 67.6152 114.345 66.9097 114.345 66.04 cv
@
1 lc
112.8 66 mo
112.8 66 li
@
0 lc
110.265 63.6401 mo
110.265 62.7705 109.56 62.0654 108.69 62.0654 cv
107.821 62.0654 107.115 62.7705 107.115 63.6401 cv
107.115 64.5098 107.821 65.2153 108.69 65.2153 cv
109.56 65.2153 110.265 64.5098 110.265 63.6401 cv
@
1 lc
108.75 63.6504 mo
108.75 63.6504 li
@
0 lc
218.985 143.08 mo
218.985 142.211 218.279 141.505 217.41 141.505 cv
216.541 141.505 215.835 142.211 215.835 143.08 cv
215.835 143.949 216.541 144.655 217.41 144.655 cv
218.279 144.655 218.985 143.949 218.985 143.08 cv
@
1 lc
217.5 143 mo
217.5 143 li
@
0 lc
237.226 90.2803 mo
237.226 89.4111 236.52 88.7051 235.65 88.7051 cv
234.781 88.7051 234.075 89.4111 234.075 90.2803 cv
234.075 91.1494 234.781 91.8555 235.65 91.8555 cv
236.52 91.8555 237.226 91.1494 237.226 90.2803 cv
@
1 lc
235.65 90.2002 mo
235.65 90.2002 li
@
0 lc
228.585 132.76 mo
228.585 131.891 227.88 131.186 227.01 131.186 cv
226.141 131.186 225.436 131.891 225.436 132.76 cv
225.436 133.63 226.141 134.335 227.01 134.335 cv
227.88 134.335 228.585 133.63 228.585 132.76 cv
@
1 lc
227.05 132.75 mo
227.05 132.75 li
@
0 lc
243.465 87.8799 mo
243.465 87.0107 242.76 86.3057 241.891 86.3057 cv
241.021 86.3057 240.315 87.0107 240.315 87.8799 cv
240.315 88.75 241.021 89.4551 241.891 89.4551 cv
242.76 89.4551 243.465 88.75 243.465 87.8799 cv
@
1 lc
241.851 87.9004 mo
241.851 87.9004 li
@
0 lc
135.825 42.7603 mo
135.825 41.8906 135.119 41.1851 134.25 41.1851 cv
133.381 41.1851 132.675 41.8906 132.675 42.7603 cv
132.675 43.6294 133.381 44.335 134.25 44.335 cv
135.119 44.335 135.825 43.6294 135.825 42.7603 cv
@
1 lc
134.25 42.75 mo
134.25 42.75 li
@
0 lc
214.425 38.5601 mo
214.425 37.6909 213.72 36.9854 212.851 36.9854 cv
211.98 36.9854 211.275 37.6909 211.275 38.5601 cv
211.275 39.4297 211.98 40.1353 212.851 40.1353 cv
213.72 40.1353 214.425 39.4297 214.425 38.5601 cv
@
1 lc
212.95 38.5503 mo
212.95 38.5503 li
@
0 lc
231.465 61.48 mo
231.465 60.6108 230.76 59.9053 229.891 59.9053 cv
229.021 59.9053 228.315 60.6108 228.315 61.48 cv
228.315 62.3496 229.021 63.0552 229.891 63.0552 cv
230.76 63.0552 231.465 62.3496 231.465 61.48 cv
@
1 lc
229.8 61.4502 mo
229.8 61.4502 li
@
0 lc
236.025 108.28 mo
236.025 107.411 235.319 106.705 234.45 106.705 cv
233.581 106.705 232.875 107.411 232.875 108.28 cv
232.875 109.149 233.581 109.855 234.45 109.855 cv
235.319 109.855 236.025 109.149 236.025 108.28 cv
@
1 lc
234.4 108.25 mo
234.4 108.25 li
@
0 lc
128.025 47.0801 mo
128.025 46.2109 127.319 45.5054 126.45 45.5054 cv
125.581 45.5054 124.875 46.2109 124.875 47.0801 cv
124.875 47.9497 125.581 48.6553 126.45 48.6553 cv
127.319 48.6553 128.025 47.9497 128.025 47.0801 cv
@
1 lc
126.55 47.1504 mo
126.55 47.1504 li
@
0 lc
237.825 121 mo
237.825 120.131 237.119 119.425 236.25 119.425 cv
235.381 119.425 234.675 120.131 234.675 121 cv
234.675 121.869 235.381 122.575 236.25 122.575 cv
237.119 122.575 237.825 121.869 237.825 121 cv
@
1 lc
236.25 120.9 mo
236.25 120.9 li
@
0 lc
241.065 119.32 mo
241.065 118.451 240.359 117.745 239.49 117.745 cv
238.621 117.745 237.915 118.451 237.915 119.32 cv
237.915 120.189 238.621 120.896 239.49 120.896 cv
240.359 120.896 241.065 120.189 241.065 119.32 cv
@
1 lc
239.55 119.25 mo
239.55 119.25 li
@
0 lc
234.465 119.08 mo
234.465 118.211 233.76 117.505 232.891 117.505 cv
232.021 117.505 231.315 118.211 231.315 119.08 cv
231.315 119.949 232.021 120.655 232.891 120.655 cv
233.76 120.655 234.465 119.949 234.465 119.08 cv
@
1 lc
232.9 119 mo
232.9 119 li
@
0 lc
157.545 25.7202 mo
157.545 24.8506 156.84 24.145 155.97 24.145 cv
155.101 24.145 154.396 24.8506 154.396 25.7202 cv
154.396 26.5894 155.101 27.2949 155.97 27.2949 cv
156.84 27.2949 157.545 26.5894 157.545 25.7202 cv
@
1 lc
155.9 25.7002 mo
155.9 25.7002 li
@
0 lc
215.625 47.5601 mo
215.625 46.6909 214.92 45.9854 214.05 45.9854 cv
213.181 45.9854 212.476 46.6909 212.476 47.5601 cv
212.476 48.4297 213.181 49.1353 214.05 49.1353 cv
214.92 49.1353 215.625 48.4297 215.625 47.5601 cv
@
1 lc
214.05 47.6504 mo
214.05 47.6504 li
@
0 lc
105.225 64.2402 mo
105.225 63.3706 104.52 62.665 103.65 62.665 cv
102.781 62.665 102.075 63.3706 102.075 64.2402 cv
102.075 65.1094 102.781 65.8154 103.65 65.8154 cv
104.52 65.8154 105.225 65.1094 105.225 64.2402 cv
@
1 lc
103.7 64.25 mo
103.7 64.25 li
@
0 lc
180.585 30.04 mo
180.585 29.1709 179.88 28.4653 179.01 28.4653 cv
178.141 28.4653 177.436 29.1709 177.436 30.04 cv
177.436 30.9097 178.141 31.6152 179.01 31.6152 cv
179.88 31.6152 180.585 30.9097 180.585 30.04 cv
@
1 lc
179.05 30.0503 mo
179.05 30.0503 li
@
0 lc
144.825 28.96 mo
144.825 28.0908 144.119 27.3853 143.25 27.3853 cv
142.381 27.3853 141.675 28.0908 141.675 28.96 cv
141.675 29.8296 142.381 30.5352 143.25 30.5352 cv
144.119 30.5352 144.825 29.8296 144.825 28.96 cv
@
1 lc
143.2 28.9502 mo
143.2 28.9502 li
@
0 lc
222.585 143.08 mo
222.585 142.211 221.88 141.505 221.01 141.505 cv
220.141 141.505 219.436 142.211 219.436 143.08 cv
219.436 143.949 220.141 144.655 221.01 144.655 cv
221.88 144.655 222.585 143.949 222.585 143.08 cv
@
1 lc
220.95 143.15 mo
220.95 143.15 li
@
0 lc
105.705 93.1602 mo
105.705 92.291 105 91.585 104.13 91.585 cv
103.261 91.585 102.555 92.291 102.555 93.1602 cv
102.555 94.0293 103.261 94.7354 104.13 94.7354 cv
105 94.7354 105.705 94.0293 105.705 93.1602 cv
@
1 lc
104.05 93.25 mo
104.05 93.25 li
@
0 lc
228.345 124.601 mo
228.345 123.73 227.64 123.025 226.771 123.025 cv
225.9 123.025 225.195 123.73 225.195 124.601 cv
225.195 125.47 225.9 126.175 226.771 126.175 cv
227.64 126.175 228.345 125.47 228.345 124.601 cv
@
1 lc
226.851 124.55 mo
226.851 124.55 li
@
0 lc
233.865 88.1201 mo
233.865 87.251 233.159 86.5449 232.29 86.5449 cv
231.421 86.5449 230.715 87.251 230.715 88.1201 cv
230.715 88.9893 231.421 89.6953 232.29 89.6953 cv
233.159 89.6953 233.865 88.9893 233.865 88.1201 cv
@
1 lc
232.2 88.0498 mo
232.2 88.0498 li
@
0 lc
237.226 93.8799 mo
237.226 93.0107 236.52 92.3057 235.65 92.3057 cv
234.781 92.3057 234.075 93.0107 234.075 93.8799 cv
234.075 94.75 234.781 95.4551 235.65 95.4551 cv
236.52 95.4551 237.226 94.75 237.226 93.8799 cv
@
1 lc
235.7 93.7998 mo
235.7 93.7998 li
@
0 lc
118.905 51.1602 mo
118.905 50.291 118.2 49.585 117.33 49.585 cv
116.461 49.585 115.755 50.291 115.755 51.1602 cv
115.755 52.0298 116.461 52.7354 117.33 52.7354 cv
118.2 52.7354 118.905 52.0298 118.905 51.1602 cv
@
1 lc
117.4 51.2002 mo
117.4 51.2002 li
@
0 lc
199.065 30.04 mo
199.065 29.1709 198.359 28.4653 197.49 28.4653 cv
196.621 28.4653 195.915 29.1709 195.915 30.04 cv
195.915 30.9097 196.621 31.6152 197.49 31.6152 cv
198.359 31.6152 199.065 30.9097 199.065 30.04 cv
@
1 lc
197.5 29.9502 mo
197.5 29.9502 li
@
0 lc
98.7451 93.1602 mo
98.7451 92.291 98.0396 91.585 97.1704 91.585 cv
96.3008 91.585 95.5952 92.291 95.5952 93.1602 cv
95.5952 94.0293 96.3008 94.7354 97.1704 94.7354 cv
98.0396 94.7354 98.7451 94.0293 98.7451 93.1602 cv
@
1 lc
97.1001 93.2002 mo
97.1001 93.2002 li
@
0 lc
188.385 28.1201 mo
188.385 27.251 187.68 26.5449 186.811 26.5449 cv
185.94 26.5449 185.235 27.251 185.235 28.1201 cv
185.235 28.9897 185.94 29.6953 186.811 29.6953 cv
187.68 29.6953 188.385 28.9897 188.385 28.1201 cv
@
1 lc
186.8 28.1001 mo
186.8 28.1001 li
@
0 lc
225.465 129.88 mo
225.465 129.011 224.76 128.306 223.891 128.306 cv
223.021 128.306 222.315 129.011 222.315 129.88 cv
222.315 130.75 223.021 131.455 223.891 131.455 cv
224.76 131.455 225.465 130.75 225.465 129.88 cv
@
1 lc
223.9 129.8 mo
223.9 129.8 li
@
0 lc
181.065 28.8403 mo
181.065 27.9707 180.359 27.2651 179.49 27.2651 cv
178.621 27.2651 177.915 27.9707 177.915 28.8403 cv
177.915 29.7095 178.621 30.415 179.49 30.415 cv
180.359 30.415 181.065 29.7095 181.065 28.8403 cv
@
1 lc
179.5 28.8003 mo
179.5 28.8003 li
@
0 lc
138.345 36.04 mo
138.345 35.1709 137.64 34.4653 136.771 34.4653 cv
135.9 34.4653 135.195 35.1709 135.195 36.04 cv
135.195 36.9097 135.9 37.6152 136.771 37.6152 cv
137.64 37.6152 138.345 36.9097 138.345 36.04 cv
@
1 lc
136.75 35.9502 mo
136.75 35.9502 li
@
0 lc
138.585 33.6401 mo
138.585 32.7705 137.88 32.0654 137.01 32.0654 cv
136.141 32.0654 135.436 32.7705 135.436 33.6401 cv
135.436 34.5098 136.141 35.2153 137.01 35.2153 cv
137.88 35.2153 138.585 34.5098 138.585 33.6401 cv
@
1 lc
137 33.6504 mo
137 33.6504 li
@
0 lc
150.825 32.2002 mo
150.825 31.3306 150.119 30.625 149.25 30.625 cv
148.381 30.625 147.675 31.3306 147.675 32.2002 cv
147.675 33.0693 148.381 33.7754 149.25 33.7754 cv
150.119 33.7754 150.825 33.0693 150.825 32.2002 cv
@
1 lc
149.2 32.1001 mo
149.2 32.1001 li
@
0 lc
178.186 31.96 mo
178.186 31.0908 177.479 30.3853 176.61 30.3853 cv
175.741 30.3853 175.035 31.0908 175.035 31.96 cv
175.035 32.8296 175.741 33.5352 176.61 33.5352 cv
177.479 33.5352 178.186 32.8296 178.186 31.96 cv
@
1 lc
176.65 31.9004 mo
176.65 31.9004 li
@
0 lc
160.665 28.1201 mo
160.665 27.251 159.96 26.5449 159.09 26.5449 cv
158.221 26.5449 157.516 27.251 157.516 28.1201 cv
157.516 28.9897 158.221 29.6953 159.09 29.6953 cv
159.96 29.6953 160.665 28.9897 160.665 28.1201 cv
@
1 lc
159.101 28.1001 mo
159.101 28.1001 li
@
0 lc
202.065 40.6001 mo
202.065 39.731 201.359 39.0254 200.49 39.0254 cv
199.621 39.0254 198.915 39.731 198.915 40.6001 cv
198.915 41.4697 199.621 42.1753 200.49 42.1753 cv
201.359 42.1753 202.065 41.4697 202.065 40.6001 cv
@
1 lc
200.5 40.7002 mo
200.5 40.7002 li
@
0 lc
242.505 86.7998 mo
242.505 85.9307 241.8 85.2256 240.931 85.2256 cv
240.061 85.2256 239.355 85.9307 239.355 86.7998 cv
239.355 87.6699 240.061 88.375 240.931 88.375 cv
241.8 88.375 242.505 87.6699 242.505 86.7998 cv
@
1 lc
240.851 86.7998 mo
240.851 86.7998 li
@
0 lc
228.345 121.96 mo
228.345 121.091 227.64 120.385 226.771 120.385 cv
225.9 120.385 225.195 121.091 225.195 121.96 cv
225.195 122.829 225.9 123.535 226.771 123.535 cv
227.64 123.535 228.345 122.829 228.345 121.96 cv
@
1 lc
226.851 122.05 mo
226.851 122.05 li
@
0 lc
220.785 59.2002 mo
220.785 58.3306 220.079 57.625 219.21 57.625 cv
218.341 57.625 217.635 58.3306 217.635 59.2002 cv
217.635 60.0693 218.341 60.7754 219.21 60.7754 cv
220.079 60.7754 220.785 60.0693 220.785 59.2002 cv
@
1 lc
219.2 59.2002 mo
219.2 59.2002 li
@
0 lc
184.065 30.4004 mo
184.065 29.5308 183.359 28.8252 182.49 28.8252 cv
181.621 28.8252 180.915 29.5308 180.915 30.4004 cv
180.915 31.2695 181.621 31.9751 182.49 31.9751 cv
183.359 31.9751 184.065 31.2695 184.065 30.4004 cv
@
1 lc
182.5 30.4004 mo
182.5 30.4004 li
@
0 lc
219.945 142.12 mo
219.945 141.251 219.239 140.545 218.37 140.545 cv
217.501 140.545 216.795 141.251 216.795 142.12 cv
216.795 142.989 217.501 143.695 218.37 143.695 cv
219.239 143.695 219.945 142.989 219.945 142.12 cv
@
1 lc
218.4 142.05 mo
218.4 142.05 li
@
0 lc
117.225 61.48 mo
117.225 60.6108 116.52 59.9053 115.65 59.9053 cv
114.781 59.9053 114.075 60.6108 114.075 61.48 cv
114.075 62.3496 114.781 63.0552 115.65 63.0552 cv
116.52 63.0552 117.225 62.3496 117.225 61.48 cv
@
1 lc
115.7 61.4004 mo
115.7 61.4004 li
@
0 lc
105.465 59.8003 mo
105.465 58.9307 104.76 58.2251 103.89 58.2251 cv
103.021 58.2251 102.315 58.9307 102.315 59.8003 cv
102.315 60.6694 103.021 61.375 103.89 61.375 cv
104.76 61.375 105.465 60.6694 105.465 59.8003 cv
@
1 lc
103.8 59.75 mo
103.8 59.75 li
@
0 lc
240.465 104.92 mo
240.465 104.051 239.76 103.345 238.891 103.345 cv
238.021 103.345 237.315 104.051 237.315 104.92 cv
237.315 105.79 238.021 106.495 238.891 106.495 cv
239.76 106.495 240.465 105.79 240.465 104.92 cv
@
1 lc
238.9 105 mo
238.9 105 li
@
0 lc
110.985 69.1602 mo
110.985 68.291 110.28 67.585 109.41 67.585 cv
108.541 67.585 107.835 68.291 107.835 69.1602 cv
107.835 70.0298 108.541 70.7354 109.41 70.7354 cv
110.28 70.7354 110.985 70.0298 110.985 69.1602 cv
@
1 lc
109.4 69.1001 mo
109.4 69.1001 li
@
0 lc
221.625 58.8403 mo
221.625 57.9707 220.92 57.2651 220.05 57.2651 cv
219.181 57.2651 218.476 57.9707 218.476 58.8403 cv
218.476 59.7095 219.181 60.415 220.05 60.415 cv
220.92 60.415 221.625 59.7095 221.625 58.8403 cv
@
1 lc
219.95 58.9004 mo
219.95 58.9004 li
@
0 lc
110.985 50.2002 mo
110.985 49.3306 110.28 48.625 109.41 48.625 cv
108.541 48.625 107.835 49.3306 107.835 50.2002 cv
107.835 51.0693 108.541 51.7754 109.41 51.7754 cv
110.28 51.7754 110.985 51.0693 110.985 50.2002 cv
@
1 lc
109.4 50.1001 mo
109.4 50.1001 li
@
0 lc
109.305 69.4004 mo
109.305 68.5308 108.6 67.8252 107.73 67.8252 cv
106.861 67.8252 106.155 68.5308 106.155 69.4004 cv
106.155 70.2695 106.861 70.9751 107.73 70.9751 cv
108.6 70.9751 109.305 70.2695 109.305 69.4004 cv
@
1 lc
107.75 69.4004 mo
107.75 69.4004 li
@
0 lc
192.105 27.8804 mo
192.105 27.0107 191.399 26.3052 190.53 26.3052 cv
189.661 26.3052 188.955 27.0107 188.955 27.8804 cv
188.955 28.7495 189.661 29.4551 190.53 29.4551 cv
191.399 29.4551 192.105 28.7495 192.105 27.8804 cv
@
1 lc
190.601 27.9502 mo
190.601 27.9502 li
@
0 lc
222.825 143.561 mo
222.825 142.69 222.119 141.985 221.25 141.985 cv
220.381 141.985 219.675 142.69 219.675 143.561 cv
219.675 144.43 220.381 145.135 221.25 145.135 cv
222.119 145.135 222.825 144.43 222.825 143.561 cv
@
1 lc
221.3 143.65 mo
221.3 143.65 li
@
0 lc
238.785 92.9199 mo
238.785 92.0508 238.079 91.3447 237.21 91.3447 cv
236.341 91.3447 235.635 92.0508 235.635 92.9199 cv
235.635 93.79 236.341 94.4951 237.21 94.4951 cv
238.079 94.4951 238.785 93.79 238.785 92.9199 cv
@
1 lc
237.2 92.9502 mo
237.2 92.9502 li
@
0 lc
31.5454 61.2402 mo
31.5454 60.3706 30.8394 59.665 29.9702 59.665 cv
29.1006 59.665 28.395 60.3706 28.395 61.2402 cv
28.395 62.1094 29.1006 62.8154 29.9702 62.8154 cv
30.8394 62.8154 31.5454 62.1094 31.5454 61.2402 cv
@
1 lc
30.0503 61.2002 mo
30.0503 61.2002 li
@
0 lc
95.8652 131.8 mo
95.8652 130.931 95.1597 130.226 94.29 130.226 cv
93.4209 130.226 92.7153 130.931 92.7153 131.8 cv
92.7153 132.67 93.4209 133.375 94.29 133.375 cv
95.1597 133.375 95.8652 132.67 95.8652 131.8 cv
@
1 lc
94.3003 131.75 mo
94.3003 131.75 li
@
0 lc
43.4253 15.4004 mo
43.4253 14.5308 42.7197 13.8252 41.8501 13.8252 cv
40.981 13.8252 40.2754 14.5308 40.2754 15.4004 cv
40.2754 16.2695 40.981 16.9751 41.8501 16.9751 cv
42.7197 16.9751 43.4253 16.2695 43.4253 15.4004 cv
@
1 lc
41.8501 15.4502 mo
41.8501 15.4502 li
@
0 lc
32.9854 24.7603 mo
32.9854 23.8906 32.2798 23.1851 31.4102 23.1851 cv
30.541 23.1851 29.835 23.8906 29.835 24.7603 cv
29.835 25.6294 30.541 26.335 31.4102 26.335 cv
32.2798 26.335 32.9854 25.6294 32.9854 24.7603 cv
@
1 lc
31.5 24.75 mo
31.5 24.75 li
@
0 lc
39.9453 106.24 mo
39.9453 105.371 39.2397 104.665 38.3701 104.665 cv
37.501 104.665 36.7954 105.371 36.7954 106.24 cv
36.7954 107.109 37.501 107.815 38.3701 107.815 cv
39.2397 107.815 39.9453 107.109 39.9453 106.24 cv
@
1 lc
38.4502 106.25 mo
38.4502 106.25 li
@
0 lc
35.625 49.8403 mo
35.625 48.9707 34.9194 48.2651 34.0503 48.2651 cv
33.1807 48.2651 32.4751 48.9707 32.4751 49.8403 cv
32.4751 50.7095 33.1807 51.415 34.0503 51.415 cv
34.9194 51.415 35.625 50.7095 35.625 49.8403 cv
@
1 lc
34 49.8501 mo
34 49.8501 li
@
0 lc
52.7852 116.681 mo
52.7852 115.811 52.0796 115.105 51.21 115.105 cv
50.3408 115.105 49.6353 115.811 49.6353 116.681 cv
49.6353 117.55 50.3408 118.255 51.21 118.255 cv
52.0796 118.255 52.7852 117.55 52.7852 116.681 cv
@
1 lc
51.2002 116.7 mo
51.2002 116.7 li
@
0 lc
142.186 118 mo
142.186 117.131 141.479 116.425 140.61 116.425 cv
139.741 116.425 139.035 117.131 139.035 118 cv
139.035 118.869 139.741 119.575 140.61 119.575 cv
141.479 119.575 142.186 118.869 142.186 118 cv
@
1 lc
140.65 118 mo
140.65 118 li
@
0 lc
165.465 96.4004 mo
165.465 95.5303 164.76 94.8252 163.891 94.8252 cv
163.021 94.8252 162.315 95.5303 162.315 96.4004 cv
162.315 97.2695 163.021 97.9756 163.891 97.9756 cv
164.76 97.9756 165.465 97.2695 165.465 96.4004 cv
@
1 lc
163.95 96.4004 mo
163.95 96.4004 li
@
0 lc
152.985 112.24 mo
152.985 111.371 152.279 110.665 151.41 110.665 cv
150.541 110.665 149.835 111.371 149.835 112.24 cv
149.835 113.109 150.541 113.815 151.41 113.815 cv
152.279 113.815 152.985 113.109 152.985 112.24 cv
@
1 lc
151.4 112.25 mo
151.4 112.25 li
@
0 lc
84.3452 125.8 mo
84.3452 124.931 83.6396 124.226 82.77 124.226 cv
81.9009 124.226 81.1953 124.931 81.1953 125.8 cv
81.1953 126.67 81.9009 127.375 82.77 127.375 cv
83.6396 127.375 84.3452 126.67 84.3452 125.8 cv
@
1 lc
82.7002 125.851 mo
82.7002 125.851 li
@
0 lc
29.625 74.2002 mo
29.625 73.3306 28.9194 72.625 28.0503 72.625 cv
27.1807 72.625 26.4751 73.3306 26.4751 74.2002 cv
26.4751 75.0693 27.1807 75.7754 28.0503 75.7754 cv
28.9194 75.7754 29.625 75.0693 29.625 74.2002 cv
@
1 lc
28.1001 74.3003 mo
28.1001 74.3003 li
@
0 lc
170.266 74.9199 mo
170.266 74.0508 169.56 73.3452 168.69 73.3452 cv
167.821 73.3452 167.115 74.0508 167.115 74.9199 cv
167.115 75.7896 167.821 76.4951 168.69 76.4951 cv
169.56 76.4951 170.266 75.7896 170.266 74.9199 cv
@
1 lc
168.7 74.9004 mo
168.7 74.9004 li
@
0 lc
166.425 90.04 mo
166.425 89.1709 165.72 88.4648 164.851 88.4648 cv
163.98 88.4648 163.275 89.1709 163.275 90.04 cv
163.275 90.9092 163.98 91.6152 164.851 91.6152 cv
165.72 91.6152 166.425 90.9092 166.425 90.04 cv
@
1 lc
164.9 90.1006 mo
164.9 90.1006 li
@
0 lc
34.4253 100.601 mo
34.4253 99.7305 33.7197 99.0254 32.8501 99.0254 cv
31.981 99.0254 31.2754 99.7305 31.2754 100.601 cv
31.2754 101.47 31.981 102.175 32.8501 102.175 cv
33.7197 102.175 34.4253 101.47 34.4253 100.601 cv
@
1 lc
32.8501 100.7 mo
32.8501 100.7 li
@
0 lc
63.7051 127 mo
63.7051 126.131 62.9995 125.425 62.1304 125.425 cv
61.2607 125.425 60.5552 126.131 60.5552 127 cv
60.5552 127.869 61.2607 128.575 62.1304 128.575 cv
62.9995 128.575 63.7051 127.869 63.7051 127 cv
@
1 lc
62.1001 127.05 mo
62.1001 127.05 li
@
0 lc
33.2251 94.8398 mo
33.2251 93.9707 32.5195 93.2656 31.6504 93.2656 cv
30.7808 93.2656 30.0752 93.9707 30.0752 94.8398 cv
30.0752 95.71 30.7808 96.415 31.6504 96.415 cv
32.5195 96.415 33.2251 95.71 33.2251 94.8398 cv
@
1 lc
31.6001 94.7998 mo
31.6001 94.7998 li
@
0 lc
84.3452 123.88 mo
84.3452 123.011 83.6396 122.306 82.77 122.306 cv
81.9009 122.306 81.1953 123.011 81.1953 123.88 cv
81.1953 124.75 81.9009 125.455 82.77 125.455 cv
83.6396 125.455 84.3452 124.75 84.3452 123.88 cv
@
1 lc
82.75 123.8 mo
82.75 123.8 li
@
0 lc
154.425 93.1602 mo
154.425 92.291 153.72 91.585 152.851 91.585 cv
151.98 91.585 151.275 92.291 151.275 93.1602 cv
151.275 94.0293 151.98 94.7354 152.851 94.7354 cv
153.72 94.7354 154.425 94.0293 154.425 93.1602 cv
@
1 lc
152.75 93.1504 mo
152.75 93.1504 li
@
0 lc
128.505 128.8 mo
128.505 127.931 127.8 127.226 126.93 127.226 cv
126.061 127.226 125.355 127.931 125.355 128.8 cv
125.355 129.67 126.061 130.375 126.93 130.375 cv
127.8 130.375 128.505 129.67 128.505 128.8 cv
@
1 lc
126.9 128.8 mo
126.9 128.8 li
@
0 lc
82.665 130.96 mo
82.665 130.091 81.9595 129.385 81.0903 129.385 cv
80.2207 129.385 79.5151 130.091 79.5151 130.96 cv
79.5151 131.829 80.2207 132.535 81.0903 132.535 cv
81.9595 132.535 82.665 131.829 82.665 130.96 cv
@
1 lc
81 130.95 mo
81 130.95 li
@
0 lc
27.2251 76.6001 mo
27.2251 75.731 26.5195 75.0254 25.6504 75.0254 cv
24.7808 75.0254 24.0752 75.731 24.0752 76.6001 cv
24.0752 77.4697 24.7808 78.1753 25.6504 78.1753 cv
26.5195 78.1753 27.2251 77.4697 27.2251 76.6001 cv
@
1 lc
25.75 76.6001 mo
25.75 76.6001 li
@
0 lc
137.025 117.4 mo
137.025 116.53 136.319 115.825 135.45 115.825 cv
134.58 115.825 133.875 116.53 133.875 117.4 cv
133.875 118.27 134.58 118.976 135.45 118.976 cv
136.319 118.976 137.025 118.27 137.025 117.4 cv
@
1 lc
135.45 117.45 mo
135.45 117.45 li
@
0 lc
28.1851 36.7603 mo
28.1851 35.8906 27.4795 35.1851 26.6104 35.1851 cv
25.7407 35.1851 25.0352 35.8906 25.0352 36.7603 cv
25.0352 37.6294 25.7407 38.335 26.6104 38.335 cv
27.4795 38.335 28.1851 37.6294 28.1851 36.7603 cv
@
1 lc
26.5503 36.8003 mo
26.5503 36.8003 li
@
0 lc
83.8652 131.561 mo
83.8652 130.69 83.1597 129.985 82.29 129.985 cv
81.4209 129.985 80.7153 130.69 80.7153 131.561 cv
80.7153 132.43 81.4209 133.135 82.29 133.135 cv
83.1597 133.135 83.8652 132.43 83.8652 131.561 cv
@
1 lc
82.3003 131.55 mo
82.3003 131.55 li
@
0 lc
47.145 98.4404 mo
47.145 97.5703 46.4395 96.8652 45.5703 96.8652 cv
44.7007 96.8652 43.9951 97.5703 43.9951 98.4404 cv
43.9951 99.3096 44.7007 100.016 45.5703 100.016 cv
46.4395 100.016 47.145 99.3096 47.145 98.4404 cv
@
1 lc
45.5503 98.5 mo
45.5503 98.5 li
@
0 lc
50.0254 108.76 mo
50.0254 107.891 49.3193 107.186 48.4502 107.186 cv
47.5806 107.186 46.875 107.891 46.875 108.76 cv
46.875 109.63 47.5806 110.335 48.4502 110.335 cv
49.3193 110.335 50.0254 109.63 50.0254 108.76 cv
@
1 lc
48.5503 108.8 mo
48.5503 108.8 li
@
0 lc
170.025 82.6006 mo
170.025 81.7305 169.319 81.0254 168.45 81.0254 cv
167.581 81.0254 166.875 81.7305 166.875 82.6006 cv
166.875 83.4697 167.581 84.1748 168.45 84.1748 cv
169.319 84.1748 170.025 83.4697 170.025 82.6006 cv
@
1 lc
168.5 82.6006 mo
168.5 82.6006 li
@
0 lc
33.9453 94.3604 mo
33.9453 93.4912 33.2397 92.7852 32.3701 92.7852 cv
31.501 92.7852 30.7954 93.4912 30.7954 94.3604 cv
30.7954 95.2295 31.501 95.9355 32.3701 95.9355 cv
33.2397 95.9355 33.9453 95.2295 33.9453 94.3604 cv
@
1 lc
32.4004 94.4004 mo
32.4004 94.4004 li
@
0 lc
110.625 124.36 mo
110.625 123.491 109.919 122.785 109.05 122.785 cv
108.181 122.785 107.475 123.491 107.475 124.36 cv
107.475 125.229 108.181 125.936 109.05 125.936 cv
109.919 125.936 110.625 125.229 110.625 124.36 cv
@
1 lc
109.05 124.45 mo
109.05 124.45 li
@
0 lc
27.7051 79.2402 mo
27.7051 78.3706 26.9995 77.665 26.1304 77.665 cv
25.2607 77.665 24.5552 78.3706 24.5552 79.2402 cv
24.5552 80.1094 25.2607 80.8154 26.1304 80.8154 cv
26.9995 80.8154 27.7051 80.1094 27.7051 79.2402 cv
@
1 lc
26.2002 79.25 mo
26.2002 79.25 li
@
0 lc
58.1851 118.36 mo
58.1851 117.491 57.4795 116.785 56.6104 116.785 cv
55.7407 116.785 55.0352 117.491 55.0352 118.36 cv
55.0352 119.229 55.7407 119.936 56.6104 119.936 cv
57.4795 119.936 58.1851 119.229 58.1851 118.36 cv
@
1 lc
56.5503 118.351 mo
56.5503 118.351 li
@
0 lc
139.065 117.4 mo
139.065 116.53 138.359 115.825 137.49 115.825 cv
136.621 115.825 135.915 116.53 135.915 117.4 cv
135.915 118.27 136.621 118.976 137.49 118.976 cv
138.359 118.976 139.065 118.27 139.065 117.4 cv
@
1 lc
137.5 117.4 mo
137.5 117.4 li
@
0 lc
162.585 80.7998 mo
162.585 79.9307 161.88 79.2251 161.01 79.2251 cv
160.141 79.2251 159.436 79.9307 159.436 80.7998 cv
159.436 81.6699 160.141 82.375 161.01 82.375 cv
161.88 82.375 162.585 81.6699 162.585 80.7998 cv
@
1 lc
161 80.7998 mo
161 80.7998 li
@
0 lc
122.505 133.24 mo
122.505 132.371 121.8 131.665 120.93 131.665 cv
120.061 131.665 119.355 132.371 119.355 133.24 cv
119.355 134.109 120.061 134.815 120.93 134.815 cv
121.8 134.815 122.505 134.109 122.505 133.24 cv
@
1 lc
120.9 133.2 mo
120.9 133.2 li
@
0 lc
101.145 132.76 mo
101.145 131.891 100.439 131.186 99.5703 131.186 cv
98.7007 131.186 97.9951 131.891 97.9951 132.76 cv
97.9951 133.63 98.7007 134.335 99.5703 134.335 cv
100.439 134.335 101.145 133.63 101.145 132.76 cv
@
1 lc
99.6001 132.7 mo
99.6001 132.7 li
@
0 lc
165.705 80.2002 mo
165.705 79.3306 165 78.625 164.13 78.625 cv
163.261 78.625 162.556 79.3306 162.556 80.2002 cv
162.556 81.0693 163.261 81.7754 164.13 81.7754 cv
165 81.7754 165.705 81.0693 165.705 80.2002 cv
@
1 lc
164.15 80.2002 mo
164.15 80.2002 li
@
0 lc
62.9854 126.76 mo
62.9854 125.891 62.2798 125.186 61.4102 125.186 cv
60.541 125.186 59.835 125.891 59.835 126.76 cv
59.835 127.63 60.541 128.335 61.4102 128.335 cv
62.2798 128.335 62.9854 127.63 62.9854 126.76 cv
@
1 lc
61.3501 126.8 mo
61.3501 126.8 li
@
0 lc
136.425 113.8 mo
136.425 112.931 135.72 112.226 134.85 112.226 cv
133.981 112.226 133.275 112.931 133.275 113.8 cv
133.275 114.67 133.981 115.375 134.85 115.375 cv
135.72 115.375 136.425 114.67 136.425 113.8 cv
@
1 lc
134.801 113.7 mo
134.801 113.7 li
@
0 lc
40.1851 25 mo
40.1851 24.1309 39.4795 23.4253 38.6104 23.4253 cv
37.7407 23.4253 37.0352 24.1309 37.0352 25 cv
37.0352 25.8696 37.7407 26.5752 38.6104 26.5752 cv
39.4795 26.5752 40.1851 25.8696 40.1851 25 cv
@
1 lc
38.6001 24.9004 mo
38.6001 24.9004 li
@
0 lc
83.8652 130.12 mo
83.8652 129.251 83.1597 128.545 82.29 128.545 cv
81.4209 128.545 80.7153 129.251 80.7153 130.12 cv
80.7153 130.989 81.4209 131.695 82.29 131.695 cv
83.1597 131.695 83.8652 130.989 83.8652 130.12 cv
@
1 lc
82.2002 130.101 mo
82.2002 130.101 li
@
0 lc
156.825 98.2002 mo
156.825 97.3311 156.119 96.625 155.25 96.625 cv
154.381 96.625 153.675 97.3311 153.675 98.2002 cv
153.675 99.0693 154.381 99.7754 155.25 99.7754 cv
156.119 99.7754 156.825 99.0693 156.825 98.2002 cv
@
1 lc
155.2 98.1504 mo
155.2 98.1504 li
@
0 lc
155.625 94.1201 mo
155.625 93.251 154.92 92.5449 154.05 92.5449 cv
153.181 92.5449 152.476 93.251 152.476 94.1201 cv
152.476 94.9893 153.181 95.6953 154.05 95.6953 cv
154.92 95.6953 155.625 94.9893 155.625 94.1201 cv
@
1 lc
154.05 94.2002 mo
154.05 94.2002 li
@
0 lc
156.825 97.2402 mo
156.825 96.3711 156.119 95.665 155.25 95.665 cv
154.381 95.665 153.675 96.3711 153.675 97.2402 cv
153.675 98.1094 154.381 98.8154 155.25 98.8154 cv
156.119 98.8154 156.825 98.1094 156.825 97.2402 cv
@
1 lc
155.15 97.25 mo
155.15 97.25 li
@
0 lc
81.2251 133.48 mo
81.2251 132.61 80.5195 131.905 79.6504 131.905 cv
78.7808 131.905 78.0752 132.61 78.0752 133.48 cv
78.0752 134.35 78.7808 135.056 79.6504 135.056 cv
80.5195 135.056 81.2251 134.35 81.2251 133.48 cv
@
1 lc
79.7002 133.55 mo
79.7002 133.55 li
@
0 lc
31.0654 33.4004 mo
31.0654 32.5308 30.3594 31.8252 29.4902 31.8252 cv
28.6206 31.8252 27.915 32.5308 27.915 33.4004 cv
27.915 34.2695 28.6206 34.9751 29.4902 34.9751 cv
30.3594 34.9751 31.0654 34.2695 31.0654 33.4004 cv
@
1 lc
29.5 33.3501 mo
29.5 33.3501 li
@
0 lc
49.7852 17.3203 mo
49.7852 16.4507 49.0796 15.7451 48.21 15.7451 cv
47.3408 15.7451 46.6353 16.4507 46.6353 17.3203 cv
46.6353 18.1895 47.3408 18.895 48.21 18.895 cv
49.0796 18.895 49.7852 18.1895 49.7852 17.3203 cv
@
1 lc
48.2002 17.4004 mo
48.2002 17.4004 li
@
0 lc
122.385 128.8 mo
122.385 127.931 121.68 127.226 120.81 127.226 cv
119.941 127.226 119.235 127.931 119.235 128.8 cv
119.235 129.67 119.941 130.375 120.81 130.375 cv
121.68 130.375 122.385 129.67 122.385 128.8 cv
@
1 lc
120.8 128.8 mo
120.8 128.8 li
@
0 lc
158.266 86.4404 mo
158.266 85.5703 157.56 84.8652 156.69 84.8652 cv
155.821 84.8652 155.115 85.5703 155.115 86.4404 cv
155.115 87.3096 155.821 88.0156 156.69 88.0156 cv
157.56 88.0156 158.266 87.3096 158.266 86.4404 cv
@
1 lc
156.7 86.5 mo
156.7 86.5 li
@
0 lc
125.625 123.641 mo
125.625 122.771 124.919 122.065 124.05 122.065 cv
123.181 122.065 122.475 122.771 122.475 123.641 cv
122.475 124.51 123.181 125.215 124.05 125.215 cv
124.919 125.215 125.625 124.51 125.625 123.641 cv
@
1 lc
124 123.7 mo
124 123.7 li
@
0 lc
164.505 81.6406 mo
164.505 80.7705 163.8 80.0654 162.931 80.0654 cv
162.061 80.0654 161.355 80.7705 161.355 81.6406 cv
161.355 82.5098 162.061 83.2148 162.931 83.2148 cv
163.8 83.2148 164.505 82.5098 164.505 81.6406 cv
@
1 lc
162.851 81.7002 mo
162.851 81.7002 li
@
0 lc
113.865 130.84 mo
113.865 129.971 113.16 129.266 112.29 129.266 cv
111.421 129.266 110.715 129.971 110.715 130.84 cv
110.715 131.71 111.421 132.415 112.29 132.415 cv
113.16 132.415 113.865 131.71 113.865 130.84 cv
@
1 lc
112.3 130.9 mo
112.3 130.9 li
@
0 lc
79.0654 130.601 mo
79.0654 129.73 78.3594 129.025 77.4902 129.025 cv
76.6206 129.025 75.915 129.73 75.915 130.601 cv
75.915 131.47 76.6206 132.175 77.4902 132.175 cv
78.3594 132.175 79.0654 131.47 79.0654 130.601 cv
@
1 lc
77.4502 130.7 mo
77.4502 130.7 li
@
0 lc
160.905 71.3203 mo
160.905 70.4507 160.199 69.7451 159.33 69.7451 cv
158.461 69.7451 157.755 70.4507 157.755 71.3203 cv
157.755 72.1895 158.461 72.895 159.33 72.895 cv
160.199 72.895 160.905 72.1895 160.905 71.3203 cv
@
1 lc
159.3 71.3501 mo
159.3 71.3501 li
@
0 lc
36.2251 71.5601 mo
36.2251 70.6909 35.5195 69.9854 34.6504 69.9854 cv
33.7808 69.9854 33.0752 70.6909 33.0752 71.5601 cv
33.0752 72.4297 33.7808 73.1353 34.6504 73.1353 cv
35.5195 73.1353 36.2251 72.4297 36.2251 71.5601 cv
@
1 lc
34.6504 71.5503 mo
34.6504 71.5503 li
@
0 lc
125.145 130.84 mo
125.145 129.971 124.439 129.266 123.57 129.266 cv
122.701 129.266 121.995 129.971 121.995 130.84 cv
121.995 131.71 122.701 132.415 123.57 132.415 cv
124.439 132.415 125.145 131.71 125.145 130.84 cv
@
1 lc
123.55 130.9 mo
123.55 130.9 li
@
0 lc
172.905 68.6802 mo
172.905 67.8105 172.199 67.105 171.33 67.105 cv
170.461 67.105 169.755 67.8105 169.755 68.6802 cv
169.755 69.5498 170.461 70.2554 171.33 70.2554 cv
172.199 70.2554 172.905 69.5498 172.905 68.6802 cv
@
1 lc
171.351 68.7002 mo
171.351 68.7002 li
@
0 lc
79.0654 134.681 mo
79.0654 133.811 78.3594 133.105 77.4902 133.105 cv
76.6206 133.105 75.915 133.811 75.915 134.681 cv
75.915 135.55 76.6206 136.255 77.4902 136.255 cv
78.3594 136.255 79.0654 135.55 79.0654 134.681 cv
@
1 lc
77.5 134.601 mo
77.5 134.601 li
@
0 lc
35.625 103 mo
35.625 102.131 34.9194 101.425 34.0503 101.425 cv
33.1807 101.425 32.4751 102.131 32.4751 103 cv
32.4751 103.869 33.1807 104.575 34.0503 104.575 cv
34.9194 104.575 35.625 103.869 35.625 103 cv
@
1 lc
33.9502 103.05 mo
33.9502 103.05 li
@
0 lc
27.9453 36.52 mo
27.9453 35.6509 27.2397 34.9453 26.3701 34.9453 cv
25.501 34.9453 24.7954 35.6509 24.7954 36.52 cv
24.7954 37.3896 25.501 38.0952 26.3701 38.0952 cv
27.2397 38.0952 27.9453 37.3896 27.9453 36.52 cv
@
1 lc
26.4004 36.5503 mo
26.4004 36.5503 li
@
0 lc
30.105 62.4404 mo
30.105 61.5708 29.3994 60.8652 28.5303 60.8652 cv
27.6606 60.8652 26.9551 61.5708 26.9551 62.4404 cv
26.9551 63.3096 27.6606 64.0151 28.5303 64.0151 cv
29.3994 64.0151 30.105 63.3096 30.105 62.4404 cv
@
1 lc
28.4502 62.4004 mo
28.4502 62.4004 li
@
0 lc
52.4253 110.2 mo
52.4253 109.331 51.7197 108.625 50.8501 108.625 cv
49.981 108.625 49.2754 109.331 49.2754 110.2 cv
49.2754 111.069 49.981 111.775 50.8501 111.775 cv
51.7197 111.775 52.4253 111.069 52.4253 110.2 cv
@
1 lc
50.9004 110.3 mo
50.9004 110.3 li
@
0 lc
140.266 123.76 mo
140.266 122.891 139.56 122.186 138.69 122.186 cv
137.821 122.186 137.115 122.891 137.115 123.76 cv
137.115 124.63 137.821 125.335 138.69 125.335 cv
139.56 125.335 140.266 124.63 140.266 123.76 cv
@
1 lc
138.601 123.75 mo
138.601 123.75 li
@
0 lc
131.865 126.28 mo
131.865 125.411 131.16 124.705 130.29 124.705 cv
129.421 124.705 128.715 125.411 128.715 126.28 cv
128.715 127.149 129.421 127.855 130.29 127.855 cv
131.16 127.855 131.865 127.149 131.865 126.28 cv
@
1 lc
130.2 126.3 mo
130.2 126.3 li
@
0 lc
30.105 64.8403 mo
30.105 63.9707 29.3994 63.2651 28.5303 63.2651 cv
27.6606 63.2651 26.9551 63.9707 26.9551 64.8403 cv
26.9551 65.7095 27.6606 66.415 28.5303 66.415 cv
29.3994 66.415 30.105 65.7095 30.105 64.8403 cv
@
1 lc
28.4502 64.8003 mo
28.4502 64.8003 li
@
0 lc
27.4653 57.8804 mo
27.4653 57.0107 26.7598 56.3052 25.8901 56.3052 cv
25.021 56.3052 24.3154 57.0107 24.3154 57.8804 cv
24.3154 58.7495 25.021 59.4551 25.8901 59.4551 cv
26.7598 59.4551 27.4653 58.7495 27.4653 57.8804 cv
@
1 lc
25.9502 57.9502 mo
25.9502 57.9502 li
@
0 lc
108.825 124.12 mo
108.825 123.251 108.12 122.545 107.25 122.545 cv
106.381 122.545 105.675 123.251 105.675 124.12 cv
105.675 124.989 106.381 125.695 107.25 125.695 cv
108.12 125.695 108.825 124.989 108.825 124.12 cv
@
1 lc
107.25 124.101 mo
107.25 124.101 li
@
0 lc
163.785 76.1201 mo
163.785 75.251 163.079 74.5449 162.21 74.5449 cv
161.341 74.5449 160.635 75.251 160.635 76.1201 cv
160.635 76.9897 161.341 77.6953 162.21 77.6953 cv
163.079 77.6953 163.785 76.9897 163.785 76.1201 cv
@
1 lc
162.25 76.2002 mo
162.25 76.2002 li
@
0 lc
64.1851 115.48 mo
64.1851 114.61 63.4795 113.905 62.6104 113.905 cv
61.7407 113.905 61.0352 114.61 61.0352 115.48 cv
61.0352 116.35 61.7407 117.056 62.6104 117.056 cv
63.4795 117.056 64.1851 116.35 64.1851 115.48 cv
@
1 lc
62.6504 115.55 mo
62.6504 115.55 li
@
0 lc
149.266 100.601 mo
149.266 99.7305 148.56 99.0254 147.69 99.0254 cv
146.821 99.0254 146.115 99.7305 146.115 100.601 cv
146.115 101.47 146.821 102.175 147.69 102.175 cv
148.56 102.175 149.266 101.47 149.266 100.601 cv
@
1 lc
147.7 100.5 mo
147.7 100.5 li
@
0 lc
42.3452 90.7598 mo
42.3452 89.8906 41.6396 89.1855 40.77 89.1855 cv
39.9009 89.1855 39.1953 89.8906 39.1953 90.7598 cv
39.1953 91.6299 39.9009 92.335 40.77 92.335 cv
41.6396 92.335 42.3452 91.6299 42.3452 90.7598 cv
@
1 lc
40.8003 90.7998 mo
40.8003 90.7998 li
@
0 lc
24.3452 63.4004 mo
24.3452 62.5308 23.6396 61.8252 22.77 61.8252 cv
21.9009 61.8252 21.1953 62.5308 21.1953 63.4004 cv
21.1953 64.2695 21.9009 64.9751 22.77 64.9751 cv
23.6396 64.9751 24.3452 64.2695 24.3452 63.4004 cv
@
1 lc
22.75 63.4502 mo
22.75 63.4502 li
@
0 lc
37.1851 76.3604 mo
37.1851 75.4907 36.4795 74.7852 35.6104 74.7852 cv
34.7407 74.7852 34.0352 75.4907 34.0352 76.3604 cv
34.0352 77.2295 34.7407 77.9351 35.6104 77.9351 cv
36.4795 77.9351 37.1851 77.2295 37.1851 76.3604 cv
@
1 lc
35.6001 76.4004 mo
35.6001 76.4004 li
@
0 lc
33.2251 43.2402 mo
33.2251 42.3706 32.5195 41.665 31.6504 41.665 cv
30.7808 41.665 30.0752 42.3706 30.0752 43.2402 cv
30.0752 44.1094 30.7808 44.8154 31.6504 44.8154 cv
32.5195 44.8154 33.2251 44.1094 33.2251 43.2402 cv
@
1 lc
31.7002 43.25 mo
31.7002 43.25 li
@
0 lc
130.905 124.84 mo
130.905 123.971 130.2 123.266 129.33 123.266 cv
128.461 123.266 127.755 123.971 127.755 124.84 cv
127.755 125.71 128.461 126.415 129.33 126.415 cv
130.2 126.415 130.905 125.71 130.905 124.84 cv
@
1 lc
129.4 124.851 mo
129.4 124.851 li
@
0 lc
26.9854 43.3604 mo
26.9854 42.4907 26.2798 41.7852 25.4102 41.7852 cv
24.541 41.7852 23.835 42.4907 23.835 43.3604 cv
23.835 44.2295 24.541 44.9351 25.4102 44.9351 cv
26.2798 44.9351 26.9854 44.2295 26.9854 43.3604 cv
@
1 lc
25.5 43.3501 mo
25.5 43.3501 li
@
0 lc
28.4253 79 mo
28.4253 78.1309 27.7197 77.4253 26.8501 77.4253 cv
25.981 77.4253 25.2754 78.1309 25.2754 79 cv
25.2754 79.8696 25.981 80.5752 26.8501 80.5752 cv
27.7197 80.5752 28.4253 79.8696 28.4253 79 cv
@
1 lc
26.75 78.9004 mo
26.75 78.9004 li
@
0 lc
55.7852 108.28 mo
55.7852 107.411 55.0796 106.705 54.21 106.705 cv
53.3408 106.705 52.6353 107.411 52.6353 108.28 cv
52.6353 109.149 53.3408 109.855 54.21 109.855 cv
55.0796 109.855 55.7852 109.149 55.7852 108.28 cv
@
1 lc
54.25 108.25 mo
54.25 108.25 li
@
0 lc
147.705 106.601 mo
147.705 105.73 147 105.025 146.13 105.025 cv
145.261 105.025 144.556 105.73 144.556 106.601 cv
144.556 107.47 145.261 108.175 146.13 108.175 cv
147 108.175 147.705 107.47 147.705 106.601 cv
@
1 lc
146.05 106.55 mo
146.05 106.55 li
@
0 lc
29.8652 57.04 mo
29.8652 56.1709 29.1597 55.4653 28.29 55.4653 cv
27.4209 55.4653 26.7153 56.1709 26.7153 57.04 cv
26.7153 57.9097 27.4209 58.6152 28.29 58.6152 cv
29.1597 58.6152 29.8652 57.9097 29.8652 57.04 cv
@
1 lc
28.3003 57.0503 mo
28.3003 57.0503 li
@
0 lc
161.625 85.4805 mo
161.625 84.6104 160.92 83.9053 160.05 83.9053 cv
159.181 83.9053 158.476 84.6104 158.476 85.4805 cv
158.476 86.3496 159.181 87.0557 160.05 87.0557 cv
160.92 87.0557 161.625 86.3496 161.625 85.4805 cv
@
1 lc
159.95 85.5 mo
159.95 85.5 li
@
0 lc
75.4653 130.601 mo
75.4653 129.73 74.7598 129.025 73.8901 129.025 cv
73.021 129.025 72.3154 129.73 72.3154 130.601 cv
72.3154 131.47 73.021 132.175 73.8901 132.175 cv
74.7598 132.175 75.4653 131.47 75.4653 130.601 cv
@
1 lc
73.9502 130.65 mo
73.9502 130.65 li
@
0 lc
41.625 25.48 mo
41.625 24.6108 40.9194 23.9053 40.0503 23.9053 cv
39.1807 23.9053 38.4751 24.6108 38.4751 25.48 cv
38.4751 26.3496 39.1807 27.0552 40.0503 27.0552 cv
40.9194 27.0552 41.625 26.3496 41.625 25.48 cv
@
1 lc
40.1001 25.5503 mo
40.1001 25.5503 li
@
0 lc
118.905 125.8 mo
118.905 124.931 118.2 124.226 117.33 124.226 cv
116.461 124.226 115.755 124.931 115.755 125.8 cv
115.755 126.67 116.461 127.375 117.33 127.375 cv
118.2 127.375 118.905 126.67 118.905 125.8 cv
@
1 lc
117.25 125.851 mo
117.25 125.851 li
@
0 lc
68.2651 126.28 mo
68.2651 125.411 67.5596 124.705 66.6904 124.705 cv
65.8208 124.705 65.1152 125.411 65.1152 126.28 cv
65.1152 127.149 65.8208 127.855 66.6904 127.855 cv
67.5596 127.855 68.2651 127.149 68.2651 126.28 cv
@
1 lc
66.7002 126.351 mo
66.7002 126.351 li
@
0 lc
41.625 95.0801 mo
41.625 94.2109 40.9194 93.5049 40.0503 93.5049 cv
39.1807 93.5049 38.4751 94.2109 38.4751 95.0801 cv
38.4751 95.9492 39.1807 96.6553 40.0503 96.6553 cv
40.9194 96.6553 41.625 95.9492 41.625 95.0801 cv
@
1 lc
40.0503 95.1504 mo
40.0503 95.1504 li
@
0 lc
25.4253 77.0801 mo
25.4253 76.2109 24.7197 75.5054 23.8501 75.5054 cv
22.981 75.5054 22.2754 76.2109 22.2754 77.0801 cv
22.2754 77.9497 22.981 78.6553 23.8501 78.6553 cv
24.7197 78.6553 25.4253 77.9497 25.4253 77.0801 cv
@
1 lc
23.8501 77.0503 mo
23.8501 77.0503 li
@
0 lc
97.5454 135.4 mo
97.5454 134.53 96.8398 133.825 95.9702 133.825 cv
95.1006 133.825 94.395 134.53 94.395 135.4 cv
94.395 136.27 95.1006 136.976 95.9702 136.976 cv
96.8398 136.976 97.5454 136.27 97.5454 135.4 cv
@
1 lc
95.9004 135.5 mo
95.9004 135.5 li
@
0 lc
162.105 94.8398 mo
162.105 93.9707 161.399 93.2656 160.53 93.2656 cv
159.661 93.2656 158.955 93.9707 158.955 94.8398 cv
158.955 95.71 159.661 96.415 160.53 96.415 cv
161.399 96.415 162.105 95.71 162.105 94.8398 cv
@
1 lc
160.5 94.9004 mo
160.5 94.9004 li
@
0 lc
153.945 94.3604 mo
153.945 93.4912 153.239 92.7852 152.37 92.7852 cv
151.501 92.7852 150.795 93.4912 150.795 94.3604 cv
150.795 95.2295 151.501 95.9355 152.37 95.9355 cv
153.239 95.9355 153.945 95.2295 153.945 94.3604 cv
@
1 lc
152.351 94.2998 mo
152.351 94.2998 li
@
0 lc
31.3052 57.8804 mo
31.3052 57.0107 30.5996 56.3052 29.73 56.3052 cv
28.8608 56.3052 28.1553 57.0107 28.1553 57.8804 cv
28.1553 58.7495 28.8608 59.4551 29.73 59.4551 cv
30.5996 59.4551 31.3052 58.7495 31.3052 57.8804 cv
@
1 lc
29.75 57.9502 mo
29.75 57.9502 li
@
0 lc
167.146 77.0801 mo
167.146 76.2109 166.439 75.5054 165.57 75.5054 cv
164.701 75.5054 163.995 76.2109 163.995 77.0801 cv
163.995 77.9497 164.701 78.6553 165.57 78.6553 cv
166.439 78.6553 167.146 77.9497 167.146 77.0801 cv
@
1 lc
165.5 77.1504 mo
165.5 77.1504 li
@
0 lc
43.0654 99.8799 mo
43.0654 99.0107 42.3594 98.3057 41.4902 98.3057 cv
40.6206 98.3057 39.915 99.0107 39.915 99.8799 cv
39.915 100.75 40.6206 101.455 41.4902 101.455 cv
42.3594 101.455 43.0654 100.75 43.0654 99.8799 cv
@
1 lc
41.4004 99.8506 mo
41.4004 99.8506 li
@
0 lc
62.5054 115.24 mo
62.5054 114.371 61.7998 113.665 60.9302 113.665 cv
60.0605 113.665 59.355 114.371 59.355 115.24 cv
59.355 116.109 60.0605 116.815 60.9302 116.815 cv
61.7998 116.815 62.5054 116.109 62.5054 115.24 cv
@
1 lc
61 115.15 mo
61 115.15 li
@
0 lc
41.8652 107.8 mo
41.8652 106.931 41.1597 106.226 40.29 106.226 cv
39.4209 106.226 38.7153 106.931 38.7153 107.8 cv
38.7153 108.67 39.4209 109.375 40.29 109.375 cv
41.1597 109.375 41.8652 108.67 41.8652 107.8 cv
@
1 lc
40.25 107.8 mo
40.25 107.8 li
@
0 lc
42.3452 27.8804 mo
42.3452 27.0107 41.6396 26.3052 40.77 26.3052 cv
39.9009 26.3052 39.1953 27.0107 39.1953 27.8804 cv
39.1953 28.7495 39.9009 29.4551 40.77 29.4551 cv
41.6396 29.4551 42.3452 28.7495 42.3452 27.8804 cv
@
1 lc
40.75 27.8501 mo
40.75 27.8501 li
@
0 lc
26.5054 55.96 mo
26.5054 55.0908 25.7998 54.3853 24.9302 54.3853 cv
24.0605 54.3853 23.355 55.0908 23.355 55.96 cv
23.355 56.8296 24.0605 57.5352 24.9302 57.5352 cv
25.7998 57.5352 26.5054 56.8296 26.5054 55.96 cv
@
1 lc
24.9004 56 mo
24.9004 56 li
@
0 lc
64.665 118.12 mo
64.665 117.251 63.9595 116.545 63.0903 116.545 cv
62.2207 116.545 61.5151 117.251 61.5151 118.12 cv
61.5151 118.989 62.2207 119.695 63.0903 119.695 cv
63.9595 119.695 64.665 118.989 64.665 118.12 cv
@
1 lc
63.0503 118.15 mo
63.0503 118.15 li
@
0 lc
163.785 74.2002 mo
163.785 73.3306 163.079 72.625 162.21 72.625 cv
161.341 72.625 160.635 73.3306 160.635 74.2002 cv
160.635 75.0693 161.341 75.7754 162.21 75.7754 cv
163.079 75.7754 163.785 75.0693 163.785 74.2002 cv
@
1 lc
162.25 74.3003 mo
162.25 74.3003 li
@
0 lc
48.105 16.3604 mo
48.105 15.4907 47.3994 14.7852 46.5303 14.7852 cv
45.6606 14.7852 44.9551 15.4907 44.9551 16.3604 cv
44.9551 17.2295 45.6606 17.9351 46.5303 17.9351 cv
47.3994 17.9351 48.105 17.2295 48.105 16.3604 cv
@
1 lc
46.5 16.3003 mo
46.5 16.3003 li
@
0 lc
83.625 127.72 mo
83.625 126.851 82.9194 126.146 82.0503 126.146 cv
81.1807 126.146 80.4751 126.851 80.4751 127.72 cv
80.4751 128.59 81.1807 129.295 82.0503 129.295 cv
82.9194 129.295 83.625 128.59 83.625 127.72 cv
@
1 lc
82.0503 127.75 mo
82.0503 127.75 li
@
0.5 lw
0 lc
0.25 0.25 mo
0.25 158.7 li
264.4 158.7 li
264.4 0.25 li
0.25 0.25 li
0.25 0.25 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (bananas.eps)%%CreationDate: 10/4/10 1:59 PM%AI9_DataStream%Gb!R&kuo%Lc7&VHJFC;_%^YE1D3@-aA&]c>KEO%B"&9th9l.00?LNqrmAEp[P,d9mmImd@^!E&</>1O.Q"lI].]KFIg1ij[Y&@OZ%[bCaf/)$\$FR>ab\Wrm*qLqg]n+M19RtO_K]W+5;_fF[>*b*aT=&0@O<q!QI^1qi'g[4l]Vn6!b\o1j0'hXtmr^HeZ^0,Au*ZD_$%[;5lfFtU4pDXXdd4?Zq-4)7:2$39F!aKJCONF0r<UAS5HpKL_n:Y3j$6*kjMrubWliC.u7s#t/jH@f'mW%IetIXQZYnfjb%hu&i8%c!Rs9?Dl2_D7@52.,#c3&!-IE?;jnS[=Y\kFK7V'jM):*e3c*KBEYC"=1r&[HKlN[6M%D8k.fK)Y8^QPX^8VdUZurKH_hWjZdV"H%r?"nM^ikTDePX]f:\W,ZC$W2T.Nq)Xp"A[)Fn6Y?o%X"h""J'-s(qOG.teFmcEChUoNqFo$0o$$XB:d7-(=\/nTV=7=pYO\qq,_5%BRc9%XuLta.MG-1fjZ(WU;NNeP4u(fk[Qoe=VuMs?Ycs@B`)Af*H+$K^M[7kiX=:,]:I\lm\8&W<n%Z%ICWhb?e,0,#";gE]k.Wi%(1UtR2:Jh3o'6rh^kWj`N*;3Fd878M&QLGa"=m]NY?SD(YH_.#6e<jV2?-t;qRZtW`tJDW(OcPhr2`rXkOu?=\h<o(?$P\HnCDa4%gNjmS<aQ"2?j-Qn"T`!7!FQ's]rl'MX+4-N!_ubnK<M=U^oCE9$iYaMJ@3'"=PMU"jn:UFg"lq'H6(knlTkMXfB_q??<?#4NYT<d%+'#%]$X`2nY$3<j:V_QC_,%ju3pE*5G>KOZ#rka+p^-WE/YTn43l+U:Jf;I$TVU:5;2-"*:T-5M"t7t-b#GLBap0Jr(]4E+H6$D)%It2Uj`i9bR/&>$SV5h)c?Lb1C;l'TZ\rS\&q?L,!5PPPL<"H!4X*:Sai&>%0rH&RN<`.a@rST%c61%YO_b\635i="t62f`>l:!R&%<4f1$TgV$JJ9*l&FIt#]<3$+eC,as$Wof1ci*>fKb#O[KIjkg)%re1bH=TA0i+l>.obQft564E:DlB:C'D3sT"<=@GTqk2eSi`t6%<!d;]lS5K]MB6WM\Jco3/EhAQqc'u8i_Hnm.Ta"sE3=OUf1kcF=LrTC?%&p5X+-"J2)Ecr<dh.)7T$,-IqnoPCffL.8p[r:bgPms%@pb454mmUn_:Lf(oM"FSeud0p!$(6hKWhpD1p<?T?*9p&^9h`Mre'*#.ba[DERYs,Xo<U;HKO,M?_QQX$GsR.^G&X5r*0-#<7Guc%U<B^t^WfLGL4?7R>?gB\J#e'Q;QZf=r*0-Sfhp)n>Q(nlT9ABaGOSQ(X*W>mlF3^aj)'-l]k2OuD6jl+i4lq>KpiqN$hJS92!UG-%7+n%Eh[+)k>.@M7""`akpmRj;k'Pj^f/G4L(&>1BY6?)^&^N>h#?\sGMm!jpi_-5cX([=X#tVI1F/g-feKg1Q[j`kYHHcoL<u-bh%RcVHE:-eS9)B\5jY^OJ(@#7`X<H$tXb_OG&:(=1X)H4JS&8%Z4XNP^-$`JC;DflG$)ANe+7SZp`l^"R&TiD3tdJDF!>I>JZ_FQP_%qW;]b?[h5g%'7p<DL6/'ENZ:@rmnbn:rG8hhh%S;Et`/)\coa9FHJ>cEEuLsZK8Qi=06eU:$kZ=<il6%TH_RFAX`"$;pW#)kSqQ#%gBPD&@q.lm&ZLul>r2:Roo=uh.^`b\pV!HgLJco9UgeafNgnP4nkDRG;M5tob/V0Md<!G",3)SH&F(M5SZTF=@kG#t!QQ7d*GS1%%Ji+P2B"P$g=/dc\F2Q\j=]Hm'4;Tr%<2_f,gWn?W\%R%d(J6A#*0MP8DeK1'_E#jmAPk*sli&g;_mtiq<&\TfAd^`c(6UgMP[0Wj%<2HO]'PUR;+7PUEV$"0%q<\rY/DZqSjV[SSb8-Q$d%\T5Ntp>Lck:M0[(VAB<H<lP+J3PBgX.#(<mBtS3Dr#rT1X.FhqM=hb-s>l%N:3Ir2g)gYdH/qgj[E^7U>bNRkn*8j\L]nKSRfo]a6%i1Bdu7mE-V<>3#1gIXl4+8XVL&'>#juFY8V7R>o0Rokoq_B>qI)(]O?X7%_j)3CA'u\HH-ZA*;-Rt.OsMm;M+a/t37i=3X6.Jkg,t*6H:aH?LQPU^HH8SfOf-sF28oE9'#o,A4uXMMo,Sm+VB0e&;I.V[fJbZH%@!ROf]G@%WOVo\>["c"[^Y"i)4+`CGF%[C:!:0G4*2t?-Z$!%<FF2NJ5,8WEYOJs%-+A=>d`hEJ7_VUFL89I!TIg.YA)3K?#:\>B%/Q8Xf\,,m'@Gd2QKH*iNLp*lWARBf'`jTBu51"/X^\`@'cm,Pd-BZd`Gap9Y@c5iIIS>/n<Ao[gf$'`>f$\.D/I\0.8jZKO8j\;r%FH>/a#-ZgVF\NN^W&ZoL?+"3bFP3VYYh,\9j@/rmP;E`WX0s#XmHoun$$Xa>0ZTrf>9`+WJU,8AhdVul)3^p=77lO.1IZ@fA!n6t%7!cdiRGSqM\\kb,<tg-nX4q0##8M(l7p@)Aok6X<b%Th/=#J!):b&W514J80/-fe8Dc-4a?iFu.%;S=@$qGb:Cuh:>P=-IK_Z,)<%n5X2#FUe=_p"+Ba!VQc0g,"04C#?CLWH\!DHuma&4Zt82]6q>;dh^TF/T?(RhT.X@MrX[^nS5P^IX9dfrG3;42m:u&c/N`<G>m;.%Dmlg\$Uo`Ja.iDs5`]g_C+<>rEVm8-8af"O[P<4Ghd6;"?M27W#iNHmSo/o"_1YRd^mEq-DKVP^2oQ<pp-%p^I77rr=@*&g^S?`t%q*F=`9=8kk8Vdp2BsZ:cY:E%LVjAN4r\md5DVX.,rou<]Df2bA$:oD;-)l)U'NVteFIN-@I+5oP%*QC-0&--0h$5!\#3<;Al.o\%%2c'G@p6lMEWR[G%gRSSEfd([;oiLb!rFdlVO@JQIpo2YdbT[MPo^fM6/S9g/ceOKHLI]u&/tUiT*h/>KhG%9bT&^a.pPi4K;j;5F%$0"I6?Qmai,"]V,W.,rnUFH%?<jH:G<P<t^e_]3Xc#-t_Ygr_S90O'A$M.Umb;GmZHf#TrX)Amec/NbPp#Pi*;)CG1=N.`Q$b'1*%`*_s@HCOT3TJp)Win<5KiB[>2>Cc]QoSTi1?bT[^CB6SF?[s0FZg5K.Wo3J8EE*]'IS0l6NL7D1FZaQs2oR>79H7CTdWVmHV/DuF%Du9=0E4eVnBNi<\i/o-p2HsN/,f1s8AR"GbRKl+?s$O"5'Eb3D7pbks]@+#%X85uk-9U*j6#/;<J#hb=f10c5f?M7#c\qDpI^j<Q%f.01rG&At*H;1)#QN;68dqSaKOI-#r"7,77pAVYPCag@%\@O=sL>Ke.hVU#fiU-QL<qkUW7]6,gb`<E'?"j0Bl<fPJ-]JN'D@0]C%bUnO'S9,uOs,XT`X5.OQBUJ\jeQqc-:WmFqjo9/1/oP<cO.E%`@W2V%oSorji;/ko'C,QO>Je[%M-T_gD-YpVo*kPJ^&%cW6sogA%pJ_CIs6ti!l<QPqHgQUgX<d]+`o1+1!G2`'4>FhG%`a'H?3jm:McffT_^t3Sr7?G'2Z=4_KC8^*ec4s@fEjYT9"Xr6fsjh]lb@>@%HT-4r(_QeS,1uT>jf35ZK5,PX]_uu:7qN=pJ%/gY4/bdOc8?(2dhSQQmK'`k4&9_mr_M-8#a2<54/3^\m@LNdNg`1Z.Ps.]Xnog.%0@9VpjINZM3`f#nT)Tm6rB`gKVce7Xp);Q"&fR*tlBltC>bgU.cfd-Gji:_72m7.l*f:rJ%pl9bf'Sat;H)?*\*YA"392\X&OYWK%S`4XefkpG?]\p*f[#j20!fOO^KLW.J]S%:*l,d!NgX<rHF2(n+h<`u4h`&-[B'8l;UdrO7/X-*<9<;p`:VGa@jn+br`ek=Wqp]s,%#he8@hfjM8')8EQl!:_:Sa58MUdYu7_7sl6a$As5)QiF;6hKZohh$R:lXKV^J!rAhrou?5B^d%gWMJQ87e$RXLEYF"/qJSt&uH]6%#WW;SIl3-+RfDdjGHPk2NQ^)RgYUi;CIka\/0-TO^Rc@YR`4=\U[G_'+EmqDPE1^hle"aQBQW]P4EVb#]bjf1rY@q7W-dt/n[=Ac%KFh#(%aC<arSls<Y>$7=It1UYO,ZXa$+dSV:\P;>7<WDRid8j^&?GSiAlD28[IRDjW[D!IZ>nc8>p[]Fo+NkBmr)FT@S\h.50RoJ%e%X<-_bNM3]"`Y-/Am).hkJSLM7O/ki_^5;p0Z(i,Bur)jqiGiea?[$YPUDj\GE)YMnHLCp2.4*>k,6K3GNd"<^DHC1IRR.']#-"%Y0>Tjghj"b2HKah=n.S$L-elBA+cV^XY$lg,(`NtmrfW$[kR/WB1,>&R.(tu)nWV$I$.L#Ls/fZ*^QF9`YXjiVe<ZtkZ!9LdMnl%%pFQlU'6@9DD5GU"2jQcPgfi+*WilWYFhlpnCtHT>i@<SgX(!jA2^P0=:m+g:n[cF2o!P2?a)D\<^jJ%cp^H[qJ`ljknbPPa^2N+F%lL?noETQ#N05RrS9uP)m:AG[2,KohuLs:_.CSTO;eAb2+%^3o>hoWl<VDO.JIafm`rE&mZcYg'J#jisnf%6e6gR"X/]=5OYNJOj&%La]n/&l%VAM!^hDpWX\&NUGnFn"K9=NN-qYrFT%Op=4ShI+<*@n_4.oR_^I]P*it:%,;9Hc?6\RJZ1f*T`FV\O@(tocMp;?F<!qg%"HukQ-UOea_u%G`q'IKG?g53drd)()$enieZh`aEr'3t!m`dlOLbA#Lp8J#7Nh8;r!EDg-&B';V-C+6o0gT\]5MH:e3l^%E!*![g%>W+Y!N5h-=U</kU@Q#+p+U9cZL`EpZON;uiMMWGjrLqWLlUJG1JP9>3^brXIJK5DAI=:[meLP"a5B_La>?MX6Z!.Ej8k=SPFr,AG%6Mc88f+P$:rp@W$pLC`I(G8V#-Xm"s,DH=B8g-*4PI)7g.0DN"@ct>ONQtilWPp0P[Vre6oTHC!b1cX(HMBQpp+^$gGGB#+'U#-1%;,3XI:WgXPbtDK.M)FpJna$+pVmj]R(Q*]&"3_H-d*Nk0E`$4XgpSuF)lQ"J^!^$f*4.27(u)#.g5o0?2&4;V^Wm5!9F/,nioT(:%>3GT4BY7$t.DB_g:5Lh++-Dk'g:nL;.K)sH8C@a)9<a$eNpr@5:q?VT2-&hk?u760r\Be1a]RB"`dLe7)Mj`R)&:T[rRKdCK3R>?%[CTL8.WB^CpZ*bq<BOOm#o\==L&E+tf$V>qM.Iu/,@-Igds\gW[;qJmk^E'+k'a,&]tB'L8L@'1q+E-t^U!,6P$Q_#X_aMS)ruK9%Z^fh@+T63sf?K?71e>QB.Yoe#?5$3timpYajMLE0<!hs4Wsn;_,'5W@/eP7YL@Ko950oh98p<D*Y&XgOM;;jQ[*soar-_\E'Rig&%2t2iDC<RkQEVj$-dFJ)K5$c;Z1&jt?M^3;]5@@oj>U?q(&[nVLS\Hoa"JBo+DBHjGU6VEY!NdTD=/Xf+JihYQY_6reRRp5!d(Y0X%dZfKFZpA._.ZAg8=M.Kj4u4*R#cssi6QiSi'ik?Q6D1#2:U^#l.t4T,K+"V1Xnt?"V2^P&X4HRalc#][S":";3So[<CG*;F7t8Vs%ceXQk]rg#7lL*Kbbkm`dg/%$^S_cD#0Ad!n;[`$MbGgcW\bCg+eC+3LMlBV'5+Gfjq0`=*os/pD'n<lD/9tNFp73bfgN`U*h:haG%YQ9,OQI^]-R9Hr'osD'tqWLlFE.@.@^TH=W=1eI'It,$#VtR[hmtleOo@HUBNMW*t><gt(-fO$bNFhX)[3Es.*lNiSgThNCC4"nO%C\mVW;_2jp]5Q2+=OX$_VrQ<FXjsbiOAQ?2Y$pL/j,5:b;0c>Khjo)UFe.r9bunW0GrktF.3<^%Xm9W_23[CumTJ`-6LD1glCH.g%'u+F"M_CD\Mc-FC[70VZh#_KO)MNW%%;MkrqX<4O:0O>U3oBr/::X1uMHT<>AamF=iZo;nXaIG'$Jk<RV9QX56=3DN/!RVdZgGf/%\osZoP\9/4BA\25.b(J&)_Y(r%;'3&c[T!+:be-XIQRREeN[l`95NPNqVtcDmHs66M1tBC[#\)m/X5B-NkEtX%=Hn*HK?,3TaUh4%3rR/Pq7SfYRFglme$[kO/G+1):@q2d=1o.'m_(1$?JN3KM&,rioBkT"qijG!0)X2a?`QbP(.t.d.j*VeZ*?X5eXn41ab@Hr>3L([%QFb1l*f&XdZ^[_$=_OKC/%.OKIVu%tlJF/:D)HO$$h_fkXa8NDP>nItA(1*XiU$FHkA=+&XnoMFooqdqRF5C,olaN4%;U1`a%'8\%N3V#3g9ij%Re,K`@^#K;Q8c%po9K.(UtL"Q^&4l;h>)@uk<_VPFM,pQXJ9aRL11tr$JfL+oh5f:j#'!ro!sl\BJ:+V?.Zj7649Vl%Yu#,YHG0*URU#(UT=%b84)`t'(4,P!c:odq:m/d=2G[R.WNMuB0.YVq`PQ_;Tne!>2d\a%bU42&EN\t-((+6H^TJqCmnj!1'Y8(.%4FDO=>j.;S3j$/CnM4.D-q+mJGVG]B^`P4QVgE-3^9p.A*7g8\ID*@9nbq:QDhV(u?,+(dgJ9EnpUPcZ:FYpO`VS0!?\oLI8l<RA%q>L*X[T[Ya$bb2"Br)U!.@i"aV%e6)C@0e?*/ILUl<8J>1-P<qgWGO)FR;kOdQCfg(Kfmt]+CGg$_NIuMm?/lDLHt0((-mG?&u'/%MeeeYk]3;m\bQ-dR=0&E5ns1$e#2'VcX((S]oAjj9rEZ5?]^S:.!Fq3hN*Q2j\GPlI0p<5pM65r'j];U?EDMMkBk[/.WiQl>`j`_%;G\&[5C.6sa?n_9[I(kFTsL:bj0AiB>4J&)2OePHILi=8db"N4[O#O^.X(2b3S)!pmH0H?9"d)$(I;"]n!uZ>hHij'HiD<>prIA`%>0O_n#$C+=mHY]7H>Ci)hMOLA[^9>W\%eD@T7dM#p4_Y@HWQ&P*OK^]cViYTa89XZ;r:WG`V2S(V=aL@NULqfD`=5"T<D/M*\FcX%*.AiB1%G86mEasp?b`/G]%fr(>M4A3pYrQ\hYs&B;seA*e"tg^^[]!#]b[AkH?jJX8q$TA[\U%LKX[RGQ`F&r`KK)-Xf]91IJ]f3%4e,5pqn%(M\ArOb>3t[PZh5sDl\E+KqY.A+K&Lq"rM6p&`C^Aq[sjY>oi:>Kj='E_Z`.U7?PcYumVKVOCo4\oZNFiMg.m",3T\I;%XJNT&pT0pPMn72Lo?ZI'Ec:3[]C#m;h_)["^&@G1GB#G+mEOYWL,Od]De4i`pD]`3]f"\obO7_>]i-Gqm?PY-l[&!B[U/Zmm`hS2%rPHl_RQ8&a[BA;V=uiOQ_n,C@r$]b-jj\><rAOTK"O#"l>.lBlKB4uIDeZc8R<I_!*j;4pYY1OChHumpkN!OZ/U,.]ba;2,Y:H_8%Z&h(pP04kChTm!;hTY9PbKC&4gST1&Z*P&Ten1VMPS_WKGD<Uc$Op][:*8r>,T#a:InhRpW1`$k9^eIi>4nM+:/VH'KmAqakd=Ql%G;@?q$>[<FB'[C6lh.Ss1L+U;k,.sG$?]k']DcI:JSMcC+";<jS-r?J`GD?$?TP0?b-aT/Tjfl.<Y"#N$C03;q7"kbM?`Kpl%R".%+gk-K3S^jqO4O!C<&q#+UUel@V*0u@-q\rm83TFf[9;&!bJ18+(:HG75NKZXrq+PmkC*bM0_=K)cIps''`AsjG:5&O7%M)1atJ#!%P4.DNqua=OHc&jk?@V75E-ZWt.Q6<gDeIXeq8`?lr:L;"l>&'&qW#GN8%(!VcV"o:e\0YnP)K"um['@R>`BaPfo:e7."6TBKKkc0%\$5pI5f_YbJf@RpQ]Hi`6Ai;*UtFF*]kQ%io]*W!DkeQC/Kr`=P[1W,g/B=85!=Y2s5Ot&J>Yil3m-STEGX._pfXs)c'GgKr)-,c%J-#Hp`_p?\YF)o%m\_fDgrtVKqg-q`gT^D)?\<ajTd#u]q=_1<.%=Igi=[(MIN\5s9qG1r\Z$SA/#ZeWHgkQlE<"0Zr>&o96^qEl%.Ui1FAi*QfrbKQo-i:q^)_6Q.]t!aISn"u@"uk-)Pn?Me6mJap[JTXC3%]'U].f4.a4d*]A]U0][Q[b'nk',W?1\LHph$4,oR,PQ%G-.6$oG%.Mm*H\5?hZWo!tre>#(3:9:NG3<hkB2O=kV-Io$4Q;JSh<TY5N3]^+ts'[aSibo]@H#m<j5MWeliHQ#elJIX"#SWHSlF%!T3?E(o]*`edC`;IPd,/c`m0@AG_B8j^WYU$LpY&@n/'ScO;F>)Of^aa20XKhH;G,S!G/``pDJeXBCdj*3*GKF=hpi?@&S@%ZTOB%G9M)SfBhIQV9QS?[)XB^Y#-9ihBhaHQp,lFF$HKSBC+_YHPq9[=Yf[hqM']cN:T,dg"f5G?Z[^ncMM7[W*`4*R`+'s,F/bP6sY,N%M0cohHN1:?2IKlpc/.]"T,![>,tgnRCE;Z&leOj-=C0Br=6];F_>,jNc,duCRebCT<(j68$`1]<]*iJ]2idRLF8pQQ-$;gi]l(19%c![N[EKI1NhnDU0nsFNN,r4`]=JDsnrfb(de/f=)r(P!PDuUPEK)&HU8Y1-TMT4@5IRkZZCm^oQS[=.29=@qPZ)Bu,]opb>]B>4g%CU%ENDT!=&kY/5"U(V=a8j5`C0L*ELhnle1hAt?3#&a.q;@p7gi2&i9Jp+TJDPhHAf.^RM4AVQ6]oD95c-!/p5I86ZPgsYh6L/I?%LIXpQ,H\\MX`H])/FVRCei%%fM=)^u4E.QeC`)T:$3aqRUpIpsjB^ca(ssjRA7^9*aMg]g[WKr6b5lH8@+rY%L.d71'3.oEp:thL%AV`4Sg<sLJpNre#I-Y+)<PQ0iIeI3omgN&YMGllEJl<OF9VV;QR3;BZbRVlq@?@BU0JtYp!!$^>;smkn1o.$#[=/D`+FCeo?GF%E%,dsrRdMk?g<_+1;BpS\cIF2NKmbOd4%'!LWhYGaY9p,p=;Y%[PAPFdHs,B+1H@r*3W13e+)K(G12jTul\TMIj@n!<*4'TC&NDAsF%T&A=<S[dr+ls17!Ful7N,g2Nn&9l79\]O#tQ+HPF+DS`j/;a\EA4>&2P,a7X5Gt"3!+HjQ&+AA2GXj^ZK;YYO*l7:i`k``E<[$2'%(oBW>SN>-dPGH/=%Ua)IHn<#C1s996?VD/%<qOej$$)#96Ptog+_FCU^0a%B9kc<lni.:/H(=bG`q3\e?Y+o!>C0F\?(&o4?;&r,%3">%K7ms%-N$:BC/&IG2bM'R^*)2tac4Bf:T<ZS'h])N=(tX+e.mtGtaOl>!]hnpJ`bEPUfjc6bbXE!h]i&re:OFV)F^hfG+?bs*%bG(g9RoONAr!(YC_"%ng_+WEt\OJ34lLWT73]kI7Ftt6cmhV]A2V?oUjD@VSaZs[<a_-W&0kklj,#]h$NE+YIGu^H!A*J*0$cu8V%Jb\:\B;"62@Ae^V'QVZZqG)gpHP*qEM+)RnLEdRWMaKPAnpD]="m1gREm:+7H!P+<13AdQ.1)1p%<JHe+QeoDhW%6`+s7M?0iq9l%k,0ZUBI)nH$-HbO:SN"#dPpZ982RY[7)Q\61Tj,-9p02;eSBVjFukjU;n\g3PQG=S9=0cI6>>e'=4qBB&hW;%(NdZZBR9V$l&7:C%JBIY6YEDZ#DU@t*4RM.0o#r7/f&(%A:,6nV0]m@BH5PkbnWmY/e)qYTfL.W*@10_1a;Q.:R;Ik-rjJ.FACV`.*\f1$I@M3,)%qX>%I.)3)m-"\AbTC>1Bt6#Tr,`^f((4m"UlmdYJBkBrI3KC3J;@=fUXC$iTJ#<#diWn#gE_j(I7\6a^1sV(''hk9`rpKq1A8C`cbGMG%#RnK-48UkI2p:\=p(87g^/#pVV2VSe^])@+L&&(mo\)8W/[P2l\*kW."C4!g(6`hqmJA.Yd4A$eB6\9\g0r\6j<:q)>lOK`63.0o%BNX;iCW!RU!HD4qKKu!UqHn>"]#8F-GjQ0raCg_,<@^s$[rY+>4L=o9HYt4M>%b3E/p"LO4d[pdfB18ek'=u7l*b9OO/kAeqE.h>%_WbM\jVSRbl6^(g`>-jFGpU0q'<p"llcL3)ak8_eIMsSS/[F4LSAk4';OTA]jLX\Q0%q(s%Gn_EqIMoW]ccI_5!M/uKSMt&=?)h-%&_S%Xp>eY&@jK*OV+gUSbi%6sLbNucZC&cp+u28G&MMqNs14K*ZG8Ycq/Y:u;_+to(K8L!^[FjuCqALIDf-paK<A%>9Fb?O#+`sT%RQq?gFp;6G1mo>pljUI-[c#4eFP.ORL!jLPkd!#.jGIjW3HWplFRndY$09J+'cP2elcU%`0o%ACK8t$1`lk(!cCct7GfRq"e&H*B%#$lt=A>gKZljUI]5<1MB3@!qYGcmXOk`*WuVe6(-#.rr(a]Q7-"p]$!k"?5da$WV^CZN."r*"JbS*1j5kNVqCMe`,d]+-CEBY_X/%mIYc\10gTbU86i4o-ArGIlBUSD'pZq[!i$bfl:-ilaO_cn7e#,3U7LQ>U?URaI0[:Ho8=ZF0HA#HlV(Tb%dj@PW?tK)WX!*2.1W+%6U@H/_h/T#H6\/roW@o.E>us!7P!3:.('(U>FEV!=,1&.oOPGF@$"e;K;-CplAb,oKk.[/gGXa*a_lCTVqF(\ZBXuhOSD-fEuD9I%R\-G9PB.:nL1&^54#WGNT0\m+q.*O$5%sgVA^T6SgEY3gSe0%,.Ai*hf60h7O0Q,0NKpc8]t?5+4=#cdZXh,8?0*g'-5#.,%S2As%]jnI>ATeO*!])E1R0PXsm)km>pG=9&IY^,#bO#.n)<nG94#oG]/NjCeDebu+JY.:71R#i.X/$HSo_odH"/">WHG(9j?k2D8lo`!S%B2D>s^;0el!Fc_c&FCa>a@,bRL*8J!L`b,U8NARO\(JJQdJT8'3XT;O(5lbMCn7-#6pp;7;KHKl*m82(p\B28-@8G(RsrPsq/V<;%+p@<H:D,B<+.XM!G8l#/aIM(56S8#m;D3/oo[dF;`Ek$F=H)5F,R,9K_YpRKUIf;X3.H*Z%p`:iont_BP,AJZ\E.igUoc-j.rF2g%DQ"O82(MUp,Kk*>'cM2TM69[LD`hc)Y''V.q<)P,@@!>G,Ph*5E:0:@oXN,(TpX>$c\Uk_C@`V9Z2NWoI&]@'H[e$L:3r@74G%8-%G.Pf_Bup!QrSAXE,Ep!-Yf6iFc;<OVSY`^8S>O7\g;t;*V'HA"BlPB+;q*$j7^#.ss8-ah&Wb.%bTeoAPa\h0B8?'!aH_!BHHtk\%q:S.u1'a#!+;+h>Z`@-JR>*Vk7g?:'a,f231pg5C9Jdu::k"upU.<5m^`NuMSs,G0""APY$(!Q5o7cYL"W^Xn=?_Z_b=Q^6H&Q<Y%j)f!IW54Q@@3,qLFQt-ICX$Gc@>8gfLoRT%B323s-OjqZ!-X0L5:r_(Bf/<T=N7m[7^h6J]XfiC%FZgkR9)=h]O$'uPnI"cq_Ej1%4$aB5&#i0k]i!N>*iaG>^QT#/TbUkmqIP$%q/C%srlO<?jZS*0]R2]!Ji5FE7aA>2abLfrcXN\t\Gj!%8S>p9E8tL;k08Z3$r#ZL%6p@-'O)/@F))GnLq/FIe'@2K(F?WsP.01+-LFXW^`(_R#0"r)ogX^pL[W++h<PI+=/.!Gb)A=!r/b?nKIVe2)M&\AH]6E\QB#&R@%5[r5ZF@g+*0/r,W]\EAi!KYCJ6o);.,8jrFn,jo,ATD(f6S'aY5jqdo,G+)t/G;Lpci"a.&ZL,X0lPCka%8tBo>fK/9K7#QpG<T&%EZQ_en,t3`2Z,DuZc8]P7pRbd")Tfk!D>JK:7k'@ZCmC/++#\#n`Y]>cFV]S4q]j:1p+,=li&,[#G*i=k*8tmI*5020oV3Af"\"%%IR+GB^XYos0fiJte]\mT,IK7SOX#]>B1?WGqJnQ^6%ZZ:BegR*?iNeH,8KF$T90KV@["l("Zhjg8-M'MNe'rJBsCH*:6>*8;hki<%>$0`TBU!NqWG1"W$>7Md@C(+IVns;eCmoim!i^.$(7SF#CHN>L=MJFS`U]nC%9ut0,Sa(o>^];,gm^te*-i8'B:=jC$>94UnqGmc%i`!EsR!^**L.:S=O;KmZ/o$GaQNo("ncjC@.=Y0Pj`M[JYrjDgjg&=k%N-=1F5cIjmTAT(_T=j0=,?DuQ1t!C@9o\0#BP./cMGg&%c>%So+3j2m)g,rOE`.28#P*JjosZllpE(=j[@-?YSU,GPebAoqp#DTEX1c(2qM1("]_8mbrh3/gIGX5$g>!'"*,KPYYI:pL<Y+.-%Js/^,N_9%CQI4_,c,IiH3dWUS7Gc"OP'9rP[ruQtY@t5ro;f@(:$8i[W.2-UH83rFbHUT`ca&_iY#eO0Q'Z6`'FG_$E34:./_TM]%7\RFE<MRoc0%S`SQO7m4n)HLA3I79[!]E36Q0`+L;[\<Vpms^GA_7/B1Ok"SYA)*r?a=QeHcXL:COc,@>3N;fk08$PU!;s$pthR<%f%&K"o49kWd)t3]bC+i%<p7//L7R[20k$1Fq%o(`[D(Kn`d=;:#GnB)^E2L2kUdc)4B.kA6%U8[-Z8nI?E2Jql8?b/S0R)QC;DO1%G__+Irpd>g3-d>aTRNjLN_k]s0@TBpqD/gYWA.J+WBnA"3OAX:ofF;YC4r);P#s1BiT)#(P?_EIgm?a1)![XY'N+H^iqi4Q,+$1T%2o[.a"7+#%^(%Yi,]EVch_gM-d0JJ`&n<B8X,uB@\D/VmHNS/O9FQ+crW9YV:[`P]FMml^7aIriRI2hs0%scuaJMV1)XWAW/=S8+%$*343,dZ`u.PtDmA"IMJ,[\3`OXH>eQP?uApr4\G9pba1OKl+UL=4-fB@A0gdcL((&!K_S]JD>-Cq?EI]$/fuOg=57%)^$9T!>Tc%P&ffmcW(f.RkDgm.82jn/r?F'I[NS^>uE:\geo%TRkDfB2*APcb,.hs5I+]EQ;*^19/jj#Db;on&uclHPs]04%;N/iACDjddZ)jf%!tE07()nKf/nl9$n)e(hArW*N(En=3@\^mhPYIL/98=F2K%Y7F1%5k$VFt.,:,\RoWC<UIH(ru6C&2DHflTfF!P8Z%c)+.ZjI10K%?'7bt]8s-Ui$R0o$UA4B<O[ds?YiPBFj<CdkQ3HlmY0(#M,/U*9m3l59lEf!/t5Gf=,/=qDQ?G&_i/_F?./L!%'[#@;bM0V[SnFa%&oo`4)AY>g5fu6sOf[`^9P%R2Qc`4km;g=8cjnBb&I1C83t8cL2C;k<R*,&N-AtR2*hj'\qk+m4&\56u`rY^#Gs$.ec/&0B:jK4S%UGGmSR,m:5Eu2Go0);6RiMr2_c!A3bPlh]aEWo!Ea!W6?F>lg!7=;]2\'/B/WJ8(J0#aS&^$'?1jN,,PmW+<JZ*1^]aF27@H1Z>@%JTJ!LNDhpnJXSgLic&?M8rna!!Ph(bnqa<Z>Su=U)VaA)$gNJ&4\QohO@C$\.S<fEk";Eg/tt@'<utrXETFmDO+Il5hN=795XXku%8:i:dcenL,>C/SHk2Q2)E+itr75oHuD"m^5m)1Ndn$R-i+<EXh1mB+?0RbQs1mB,K-_bt'(u(@^DZZ>fH6\+*bG]M<Eb_"7TeqkV%OE\;`;3<VZlkq4^aiJ!O150e&S"0t[=DPj7-R@97[,RMb@$<Ye&;X'C,%J_F#d`K-RRh;<&(s[FEo1Y5%/"*0MB4PCZ6H4\<oRgJ%eBRF;6o%^#-QeC[8SD!l:O-d"4;jXJ`Gpn?<sR"Kdh+75NXRbcHlV%6OOpsQ-8OZ;Xd7SSNIOQNU,24SeV[!!eQTUXb*C*\R3;;=%)05*5/hA;B_iI/211YXfjW/Q/8F1ZW)\<UDIi;o?<BT'MeYCu?f:VjuJSEb\_qc.gjUI>JP]]p](t6j-+su8:DTWoC_d+EuI`Qam%h"BS!)SP0kEq'@&deQWqL[:r/'5PA^8MY?V4*MBp%:ePAOdp1MI/PjE@P+sq5FKa9f)sHpo:0kJl&6oInVdaH1NnS;Ulr68l<fGY%Um%AXS!q8`G&grVXc/Y)T!T(=]5MKVbC.iYD14`?j@j#DPER\#N[:SXV5NCu^&4IN3>gCY6_lG&,mX3?PEtTMrN\>RbFatGM.pfj%hlP%C$.mtU<k8Slgq*&m`$D4YIgg3jbY2Lb`\9O8eT[`h@JChoEe7_EcA#d(WD32/>dqo@EHWl?oQ_7*2"G4%`9SHXmBQ9)?2&Th%mc3[2/Fql3T'&)%.^';&fcBUoa1aN8RHceUNba+]7Rku#i#Gh7;U,k_GXiFs"+#Kj,EBY%o!IWd)/jjT5Lf,fmB+ok:UQVQ_+AKR%l/]b*p5c&C:_J9H*inYAZ`j%;B5W./VX-P3g,48upfA^In'/k!Zd;6,>^,>jq/O>s&\Eg8D>VM%8j;#sH4jQIl,T6`<2aIbPpL#o%VWId\1UH';Kl:ZsG[Id4ruU"[(lRPUmEU)C9eCI)s0DPQm2i]iUsub<#oiZl2_sB%WG12!n/:+.kf0nJ(ZmZjgo"G!Vf&"\A9'L9%YE>FRB@RN"*2aJhb`ob![3)Y?3@jLp+sZi#G;_uFFSFV8kEJ:`HSVjhV.DaumsWbMJqkGs$f0JrX[i81<pked0?_+i,g<1*Q`Djb%A3>(jb(1pDm)S,>Ae*%][<?JDeYK/8\JI1cBsT.`3b?7cfli+BQrZsB0-Lmdl7YPLK50[.i7rmI=Vkhd9M]IsnW9R0s($gaV6\U#%_pm].p2I!*aa3FN=Z:O'fZ9ad0o'X]?r\A*-`NCjZmrKLE%NCD3#O%G/M$->+g>_"XL&!?RdncNA9%mZj>a:#lNa8FI`l2RV2Qh)%6>7jF#2XZhbYnA7UKW[;XkYIiX!ZfV%-4<>2DunbG.t+47`EnQWfMGH4&Z:Lr>\=7&+IDahjIG%deV$b9Yua[NKho*SA!,;I:qo1%B]Xebj86l?EbnnA37n$(cIe_"\S&2F3;,)Rfk8:Co#1g8>5HR&bB:mel%b*"N?i>F2X2ODG7^)ponff5)tg^o)1C*U'(.NV/6qnf%j"8`m.\a1WIf<b\G,iNU?5;p)?N@oJV)(lFGNA1i\X-snRtJU)P4dXD1%I=0f=Q;aRI]-A2q0hmM(D6sEkRt(4!&'p7p&@leOOt&%fMoYufqD;(jj$D#.c?sMNH=i$s8N!7`)?%]2Y?t[`!5%l'.9'6O"?++[*!VF2DCIFIjNQe/k9Z]JbSC;eRD&*f+_\Bl,'FNU!*O:%4'&+g!TqW-*,lD0J1SLPVK>FPqG:=FR=]^fhk*#7(1>u=^d;b*/ASnYJ2qO&92BoXPljQ=miuBEk03qNQXuB7*'&'?dn_jIP6I=4%#>eMp@q5U0=A$m?I&/WRqE&tcQgtTsO_lk?o"dl2FSG>6Y)t?u6a+?kHmrFnNGOfmPV5ak:%hIKj2?S"n5;Gu5Oq$c.:;4S=VJE3%0B<&SEA$@2Z4tVXMB8N9q&,D8S?PlHGH9W"B1'Z,oc#WLCWLl$Z>]E*d+M5#P;jLrn@a9rifqHtf5EhD<kfg'L<@0\0E9^%j4rs5%%_g/nTuO[q00?F1Xt(l=Y@"`SSfC$Qr4RRXeMV:<9CjSAH`pe":DP:!Y?uJ'j@GlX]meYDqW5ElAAGm-fbIsJ2Vu,r7QP#0WTO!q%B"3K"j(CZ=Fg%Fj7/aUk.1:=sHi9,eD_/KMDqqG$Hu@m_-W&p9f.VKMCICILFfumrG1+kZjZ^BbjLgOuY?rIg;L.<Ya-V!;-"A5b%e@g;5cf^qA]m^sR@3s^o-["MRme'N-0^Vn*iuF5eme+c[MH$Y.naH.o%_0M]3VL.8R/tp;.PGN6Hi:7j@NiK4Oa4-;p-r+]Y37;.%qXsMqjAs%#mc.NqC[M\BO"^7@IbD4,:$=dT!RiE'2TOa&rN`ng,LNsEdI6a$ZK1g^^M$=0kkFpbhs*.@<n^C?)7#J5h!6og"KI=6%l^*%#hf/>[%1o,An)KnQ[?q90qMfeChf).\aeq)ia(c$,'jpl>^C8H=YUA^Hh!15oq)H=+IZqlG)g&8j[[@dH@q4<[f?`&[lic-A%Q7h]SrC5"X*V*OO$nC)F:RSm\`4^WQ<-$j92eFg-Se.'MLHAbd;rXp._k!?iI]jiYP'F$7V?_R+Hi6jd!)neMi*O1bVGtt-j5908%Zrk2N4m?4];==)reo)FCZ#OfU+rY_Np\JIYl8N8G@-YFSfnNp'Nl=`1+n#$H2@Pdm&kBLa0DeeboUV-'me+c;eZYW'qj@-SA]FnN%A_.E=Y@%"*IX1XMo%`Pt]n+Y!?(3T6#Mn^4XW.tZ3(LR3024I.U'2K9&"g2:4l2cB+(D6U]/T6n'rA&IcudlWG2Rd"D)&=:TiqSH%=HkE4o$M,41to14q+)`pgY=L6lJ#o9mJ/*7&j>N'3_oE]8gosW6>:3!bF;XMp$=;18<?V)2>_]J^MM0(VH0n74F1o.k+KG;s/l.c%FE)ck@:='>c^)!5lcnS9T;Sf!l>,G6'n?1,<UqZdpR]'IqrbZmkO/7@ka/u`b3Sn,\PP=<GGb;5?15hbqn(=:l]]r:Vje4A2u]G1%o?Eo6T/ILug@+8:mgnm<mU)KlRiCt$58W:N;Wh%1GVf$Wc,SP?422`!IX]u-?[0/Mq;Sfs2V2K[b080(dgmfJ7:"&/hd9)<^]&Uc%HK!/_ZKbYL>?:^ceUb+I4F>uMr2@nb\s6(gh3m`JA_4]pE_NH_+-p69Y'__28(D=Ep@`j@e,A!TbN>f\/4$#%hFN+[o?ToCe]k.=%O.]84$:q[&o'(p8>24LJFHG!SZ8"aiHd=_nGBQU0ZqsAqlcjfeY'E/$nahP/fiDanrljn]4jDbh:L-=7l%)S>SU+Igo\MjGg?Y'K%8Y"M9J+ujGAt.BRG2/+MD#>-VY!gg#[uI1Dp9tr?'4NPm*S,kkp/C@"]m1s.cRb<h^[8a"$f5],:VU*#]f:8Eg:_rAYKkoDmsKHC%IM^8[>2R$nGkQ9$0:9<bF?]]OAC^@@oCgU<#cWdGhd8N2Rd.stD*G=f\snJI5$]`,Hp$.6Pi-IWiT'ej,jd4bAc92ihN9<9CUH)3%d0LOO-&G_%nso^&SsR0$d3`9p4GJbLlW4@^rC?DQE`kR5/bZ"ClPG&_X?Weiep!Y9'g[#h>,j0@T'Gooqtp*Xgs(OboPhWo;=-7)%`KL&VB^(C\J:Gdfof[->X&\c1j7Y-P@2gkC\,JX9_4*k,Fuk,POl%_5(PNL9qW2#3X0TCsd,(7?AV!I@[J*_e0"eEB,\l5iHQ2G4%nXW8Ko%+M]m(6h_E]"f=U$RrIE%nr5m&QD<2B]+ghU7%)[BU7ep(#2N]fVKi+fY.R%(,aAj;(Cr2!Z]oG[UK"=Q)T;KoK0[Tp4`E%h>P&ag:As;>226SqKZ%%gn-Xd+\CpcgX1^jd].B3=kKdi@'VM]Au,BeAD\E@,dLX'ms):OqsAIdfB13(m-W*]lXL=fB:C.!q=aIZ%eb3iie[AN)^UnfbIIN1bW,72ECd+uBVK?SA[Qtj]>1F;EPG!@"%;onWA>A,LJ&4@,2Z2sB^S3bCWq;lO"9?]mJHDK@Os3-uJ@0<6%g[dM![U(%l/_kOmgHO9Eg9JdBq?9.^rnKLk()Jn[nuU@F?&dmQp5fO`[\O,Nf%Kf#[<ac;?G2mnIcepV+*s51?gd>eh>O=qBeNtb%V;kB7H4.#+m@CGai,NU*N;_Z"0VatGDa7ZW'jl?qj=4lI/.E;L+XtS\[CuIN$qo`reJ.2fSjfF8R5$V<S=PEhc9M$.ebVT')"-IJ%1LbXAoS>'%^QK38Q3csZLrXh0AD]?/>PI]+l[HEF#C0_-%UQLoJb%A=PjbVnPZ=sbE`(C`f&b/>lsJ6"MjPWa!Fcs!IQZnXeO2O/%=q6=aQR=lHeodrllZ?H>4Yuc/]PRD_i?q[fcM!#dNt!-:K:?siCB?^m0`m&,kNVR4O3l@@-Y:"Sqs5:>2OoFp]f^cU6g9"0N1\S?%&I2\TH0<3p!P_p$&J3NI]DmRVS4'Q>oi81E%8ss.Eu#h*6En>h`;o^F_>%8#=Q@^O_X=:fT`9BXB\/A;H_@<P/J!3dS"!c5>&8uq%]2TS"at%KRoH/6!NQ(")PopSR(%\[8nj[=MFI&NUT=t=qVr?0Oo^%?Ym[(8Zp?I[D/im5"?aO5bm#fKEpKrWWoQF`r,thrTDX/'b%RY!l(<!.L'0@-;^VXu;R_SdX99_8/0C$R*jjXrtSYPo]7!.+[#\&s[1r7i.r%._%2eHiSN#rTS$ZO*5;]VQs2S[l"a.uWa`E*p;J%T>sE7CqT.rN.r[p6Dr$[M)57)h%=Q.FcCtmrEBYbe-LEYb1"+$F,U29&16/f%H$$i8JKI6D)T8]gXg0"!)L+*Hoo+"78D3#-4mr"%I*N^kq+/F0.#f/l+F8Mc&i/'!@7FeR#9uPMXMWeiEN3FWa9[@\XNVq50BO1a)Fcj5*6=]A37SQYn8=Kr<GY4R8BrIm*LB-Sb'>FE%BO$QQ]B@F9R6j0g-'O!B/k=neN_8,:&JBA9A)82j=Zet<Vf9K41;,V)f'Z_1^g\`fJ4?B6b=I8#I]-,Ck'ig'O3<KZbYi^K.]pD<%ae`up:Fh=5^k9t5J(Pr_cbIHhBT/YA_j6jNNj4Ot=YL$2-t@'Z%M0OgUNFdJWo/aH0ZI3:#t&Zk<"0lk@#p9k1`"LD80SRZN5`;/%**;DV`^C#lYouXT,@WKh]Z<ELZl-WG1a;L)AEbCYrbemu\qCQ0;E!u"B*hXeg\,\n"4o3IVfLQFPk9:sjO%<5okRj99$u#gCHqT_%epa[j&[m/OnZUhEn;uugW:GD_rIL`PpQk;gD'"Y8]bOe15pe1Hpj'I%dgO9GMjIj].GUsJU[-k?^G'H-rc6,*d?ra=.:5@/YA^T]%CV$XoV]5K%rDe=*c9D99WF*T0Gd(![X#l'(-1>_)(J;[t.U0R>08"XU'N=VhP$D7M3VN>A]QeA<7sF!88j"00@bMX.GWr:RKdhu"%jqb,p_!t]]'i@C.YI>O'oQCt(qm%X.c`D@RQ"1\2kH#_SEE?M>gjs2>@EEKf>X'`s[FY-c2p2_;b)Zo%9CR5'[b>urD!b;>m^2t&%a89^5/(?=rpZu2CY.&IO'n!Et-(Sj%\A+Y.7ir?lkq!fRhGl)<oiH4Z&%2B%QW#lJcd-Fugc22.lMb6^%OC9:o7fccCm[TSo'M>,%A`C;lnoPV%puRoT?QSSfLqg[Vk`*7Qm]9La`Hl7kZJis@PiiLE9h0=u_1g0uK*V=YI^,PX>@[Lp.^^R^,,USA)eJLa_,Bc<(Z)=#%?UR#2*U,hS&l"tLp[U&u69XjXk,ci-d50t9MEH:sk1/Xkp#V7uTktj+-lKr[qiVf`p%/']YPNu&rW04<l+3>ADd?8D<mC1oo]h;?%VgKuA\RtZ(LZ$67Phr#$j50Kj]?P,8j5]0cShFjeYcrI+GAfn8<,C*.];P68+i8]A76fMgs&h".Q&8qMpm&(nqYo`nfm2>_rH6jE%/f1)q<]Bbiqm:M%Y'6>Z&']UuC@/("LM!Sg>UuspSo!la=8Z7nWdW\Sb(Ean+!Jg5**_WV0t3_uNZ$qpXSo6ghX/S#J(^e![*I84%[uHXM$gulpWKl#EpTPC>IeR<Oe?faaQ>_5E^ggY%=HsCFnSCo[qA3dZc-FnhcI2$R:GMUE>cISoQTK\3TBe[#2u!5-3,eENbLV_5%c:N9UC1CC/?EL.LWV.>V]6qWd<:XX%n(H4-M`2\Vj!/MK'6T_F<E?#`(LFcVkeYcs]BM7Q93:46n7#mBA^e>a>(1n.2mrEnV?9#M%b#%q)cKR[[+4`[I&HWmM;>h^eK:s@c)>tde.+e/WW.1W:OdjVqV#HL&UJOS3*-2_*6.%MMUh2#LKZj&$'M$YE\.uqcko\;EYW\%N%M)WA^bodcVMTfd1ZSL^NLUm@MaftsCZ(^=Znt3t3ajZjB$;UKKB2U0lp%Q%OeTfhR<1=8:02JBUP;9]JF:W*6.knUe8]'<Y[*oTO%oS^B"%lVE#k2h%.`(kh1EGlGe\37Oje5j:7ao+Z^6sPjYAo`eA+r&<2<N";rr;(/KS<f6AVQ$<W'erWM\MP,OCjph-ce^N^NHom6%qt1cQqnOt'6E\E.8)/ZODEP3_'FUjd[H4VJ]731PLC:JYY\!8E9p`,6]<@Nr_DHmWdW_3A$p,U>;*W>j7!>J-5f5,:^W.X<Op?JO%H@'_%r:_<1[K)icK"2&hI(L%:Yd?R*Tat7,HPQ/&F#UO/0g34aZ)dUKg5E5LMXGT"?=KhDeXZ>7@g(*&N].[R=A$9>SW@U#mG?k/%Kc\tDqL$81pABh#"A*GJG+qq=R=rDJ<E[/PFY@!6^?L2ld5*^qL3N(**-iNoTXH1$#2uDr%e;pmSC6;Xp'F.W9<I`-$-nlAe7'Z5%aRf8Sd[^G47O*<F\<k2ah:)]<gRk[alR!1uQq[R(FJK6882_DqERnfVNU8rIF-g:KeerqGa:-;8G3KJX#HOi97>4X"r?@>+o0t7Q%/Y7WhPeH%_YV6OnM_;b;-(sCL2Mn7M1EpTu/1_T0j&TY9#D#2jP=0]OC?Vn70re[Dh1??!cP.#c34kQ0^p5\j$Diksp[[<?i^%Hs%`^u+>@@!6i"Rp[7+aRXDAU#8*!HZHG*5.KBS[uJ&1pCPLjfX=qioK+ZOI#9uQH2-HQ5r[BR,Q0;S_cNbNj[O),%Jp,gul`SIY%eP%MT5f%ocCQC</>t1Ot@GZC3>4/N=mY[>'BZq[[Pj`f`^:dArU#S7$/XpMnDAdeJXJS*b3L*1Yt^l:/`BMP)+>Gn/BtO[gVcOG\=g6%c-XNeQq8jq??Of0A9%5,VWeECrA:_EC%`G4Hs_5OX/*5L(9WD<mXuR$0(uH7@9'n5(5&jbK<NJ.p,eh2Of*8HBf7ap'4#12R<"'\%OI:tS<Uj>nWtk=&XkR)MCYYJ/n`#=-8H/PdMShPN7\as5k)8U>`HiRXRkINR($R/os0-=RqXsD,I:L:&`g1jih'#gC'ZU!h$tC$Q%%>mZ''+JI-I9_DBI']ghf5E2T$+^om5rZMTMfARaH\lFN>>cl9O#DsXG:R3=MO!u54<3GV%d(K_-k3V9c9"[&_Y2O:>PX(cY<IH@%d8+ag?Qtht$<_KeJi*mdrD6Ok=:;GMbIKhdm4;<T^)'DFSm*:L':5D-M;IEtVKM6\eKg#Do^j:^""@CX7=00SqdSg^Gpc]Yp"jM>%hlc,skk+JgPkO6eES-CR..QeI(7q\t."l]qN%Nk4$$6,F)8f'2mjh2C;nIAAj'VPY%fZ.njh(0I3'.M-$d#I?_M,7#)0Dgi4BJ+N%0dAU<$s_<"ioC\K`&(]8k\Y70UUS?H1+/hEi>@^7:$FfH:nAH?R<m^Bj$\5OoaPQ_[Tk%!Mad0bMuD2\ZX-c<A_o&C/P0[8c9C,G%Lo()Y.ZV.2n]dcaX2#hHiY:!_1!comO0-0%dOZJLJ@(\ujb3H==t&Y)bp/-),%?,ZJ_FUqdG;B_$VIL?r,2E3X;@HE9!H9RZ.$9B%[hfCJP(9&ZHV]]Qi*U:XJ).Pn)Lj\-"hU`4Zc%@_1TV@/Vc%Va?Te)`4h<2g9AH8T:coABpL89Oe#V;2okrNd7d'7")M$+>+._iO%MJGY7HQd@#(Ztr\eqLmTY81MAj$I^0;6YqIir??7'qW@IpYu5/JqY`]nDE6a5lC/aBU/PU^P]I"HsQ[@bpm&;8+-h/ka!7(k_3>'%oSX7VfsQI<;ls)XpBAkPbFW9jM(nkq5";IM\Qc;rq-O<O$Hok()T8aYb*B27'nmR1C,tpd7F)=`ibq-?ZHAd-gYraYm(8S,O=Tjh%<t5;d2R2%X(&hT-"MiID1BV7BOsUf^X's\h]TA$r#^hD$)-B@6OA``7=+q;B/.N"PdISq[^'UJN*thuU!aBbK_0'&"O_?u*dZ)0f%>?9!kST6S!O,g5%4BiOdK-47T)nYGr<bPs!EFAZp6&#B*ju<F+ojU7*<RmXudh):LZ,AV,$R?CdQ>R^7c'-@Ujf2AkAVK.uh)_.h%L]Vs$JF<gZfocQ8C/l;%'6`'4$>s*UFKY!mEg24YM'7I\0hs2!$uQLVM!b'l;i3gCWqm&G:>$,ZC=/\aQbC28R&(r/7M,)X=N!-r%MV!j.Ns.<Gn>\0Q*r7!9Ft-tb"]/XJ0&'CVQ4+Fd)H6n+!b2%,"UX9]W.\W/o<YB.,q+,#<AedoEbGR89SX`m)LP%/X"4I=W%_)S%X5s<a$l4SY<s@`A0Sj9a'!E,]+$n0E"U_n^eE#nME<?C+ciS4G">F.(9Lr9g3)pn7((V-'"CN4-qUgB&6\&OIli]!e(s=N.^)re3%#U0Y.Y7-4eKdji[r3CRGR&(rop4S91n;fu32<&fLbDp-o$BET8%n>qa%EcBi]e!]H;\=*n9UHZiSs4\Q\KV0BKN*=0A=Y(T'ncho%;oB?$&3>fU>Tl9s1bpA/@!V5^_1YLkV/4YGKNOA%jRP,1^=-=A(3**6iq9'i&mn:/,N&:%hGFQ:*[.L5+=BK!;8]Ce-R-A0o,^Ff%!O4s.!CHfh5,nt1GXcg"&5=.Z*4XA39SX`mg/Yt>fg95#&nXa&:g1TVV;_#G_;L,gLhi^uY8[kA:lQ@g7Z3luN7u@]YR>iZC^1<:%@<U=EK]!CQq%1+Y'O=^KSfio%3AV)F:sC%._@S9`Wk^<l.V0%9n\e,'pdSZt\11$]oP7nN^[J352bOkjM0NN1V'tS`n^%m/!["4f%V(?_aO4X^?SV]_SpH_:PTJX>IehO+TDUB"QGUea@RTMl/Q3rR"&Hp9Uh]YZM;CF+4:!!oB\l*elUA@2r`E:&=;2WuO*'R8!<Qr9h%6:_4_6D=Xtk\AEY#YL179^$-p"@jR[Tb$:Z-iS&gS\Qb&<KLo#&-=!dVM52m+lN\iC&94l%D\^r,7P8PWsUV;W<f1tnH-$FKYV6=%%q-'r6n)Fu&jCoAYO!7<>k+%Fl@\UT'%>.rPrP!@n%jO"0N=>9m+YMd=Zr\p#RqmP'EQ@&%P,orKHoPS#\/LcBRh^-I>+mt\Jg(V%,!%@#1G:Ehdh"D+'M"*N'd63>WgUj_;QQ>,Eth)r85*-b.&![^=(sgP$12InpP[uKK[imc.Q44/0utl^H=r&t>/=.fZTSspE9[4j%8VnQlT)&q*6C*B\!18ooNF8M@"b<e4-cBH%24;2$d5\FN&L$&)&_%&\7KPTH`ZlCu%jju+oDi]7nNDnK=4jFDF[S*+r$)?s%`Bn!%;i@o.RRft?"0aWW8qXLIb[cB'F0MdO0SE[G%$h0WfHs5\b&JX4Br/VN_Yh=r#SonDRe!V@,)BX$Je]-B!b/-@;3.@g^h,rai)@d,%X26h_fEo8ZK*XiK./8a/2D,K-OJnc6"_MHS\LJ.XKL7;+3dh`Q$"T`$#]I'QMSiNt$1l>meW6qsS.I%m_#e3'!CR>l"f_:2>`+FO%C_P`!Y1e7*!pcVc$9cO2#_HWe<><;4A_8^X(X6>?bLIB&_%:#edmPTj23pM1>"udO>ZCC6BFO^&U>s'VcW0:TL;=5#WpC&6OU"NB%:uYl&8A5BS3YopP'-u-IWr>\J+]o_37PIL"B-QEQ>1F"?dPU$b^cW2Eo;r>leW'hH:m>`JG_>=A4rB2#Tc5#V-!Uu3IM/,Y^,#3Y%@b]>5i.DmQo3IgGoF*JUKHd?G%26$B85eACdkMtIg/Yt>\O&DNa[).2BamsK%[r7Z58o/V-6hu;Z1pV"*fP"t/7K/sN)diS=g"G#%;IU%B;>#J"aKFNk;lZaqpd6W[6W.B&3`R]'Bc'JS%7*67-%Z8q`#.X3p0gRb;G^VgVj/+jUiD3-+qq."YJc*[Pb(;k+=5SDj$p&A%BeGk2G/R4+Lr-/,3T4CL.!V_;b+Y_lIgs5?aqXtfq7)/e+pLFNV&#U-F/7EPl.EMojO+S`gW)])DNR?"7V9j%3nRHLnK@qQ&u]9l%46QfV=Fe[9@Cr;J&YOa]m!E<."QTdXKqe::EZlu@>;nsl2ln3F"#8"e%h;NYQ'6u]F1!6KH."Ye[Wmm-]Q2LmJmPAa3'DLq&8E=R%h/Zuu&&Yd-U/[t)=>j?RReDe=\phW,%4n_k6du#X!8B^@dT-a>d?Y4X`qBqL6s.Ac;2SG8-+'d+*`'1>'Yq$-7LEVMl@g(m!aJ'C%[$83/0`m7a&?(Ip"FuGbAMjf?KbLJ4CFTb^ou`(VSm";q<'7S,15bX9+iaF&bhs?fp")mH%8_/CL6QUENT1RV@8qq1"m,$#(L5'&%'.+Esk]<5PD_[E'(`'QAA?HY&7.;a8<hQ@@_?r]1^2Hn)+L4-)NaP2+fQ)V!-s;EBUHF4FGJk5)&a)P2?9]>m[b>-9g<4m)c&4j_%O^QU;D;;fI)#OD(Mh"?ZPimU[%t,a'[:;>:'_.E#bJ8+_pWK3s&1m4K&:muugj(#7n;#eh^s_`JWaKd63(?W(::tJWKcsuhD^bu`%>8V>s)ps3NDULQ,U,f2=<MbjA$]>"@<8.CM>9Xu[lrq"FQd:?HQG!j<DjV/'.U(^JYY]%FK2SANBt1YQQ+Okr`mJ$)Puu;T7D*@D%nHR$05E)0*Q?!1Si#Y]iH@f,D^E-F@;aCn)l%9KsasfRedB-iU*#&TXW14\/-%]+C;f>!ePF^pI+ZeV^1_#$)1f&d9ecah%dCR^:%'(eHQ$#$08VG.K9XlHF07X3smm1+_I@D)lW%h<KOJthbr%Y]n3W#B\&>?,O7&sfJIg`L*"%$@Bc=s>4kc=<^rAk:I8p"#sR#aD33%@P$N.-q3IARi-B0!+SO9ok$Z5VH_-@BGG2@CA\n[=7s.'dAg0)HoWsPMH75*,'6[NX(B-T;0*Bo!][2E9n;SNK8?XaKi+):#EQ\4%@2[T\9$rNYp4DH#V'"9R[5B#);8a%>7469@Maia.X+IGTeI.UrJ3K7\N*$45*cW"u<V2Qb0sEde81#JhW+[]76(p&6QjcYJa7G8,%1^$"k/27pF9pFY&US\V;/(-^k<]^ed\HSZ7JKI:E]*VCc3HUKUSCKOaUK"X@Mon2iP]ts!ZBPUNTO^<pEbCb?a\5:,D(^m74**hm%`&U\Pf8o$S>t1U>6L-<0Tn-0cG]OYnQN=FXg&["7rW5Kf-8AZQ*j`!!QWPs-4_B[PWJ^?n/BWeZ6S,?<(hQj7iaGHr_?&2_$cC#c%!qSbrRUmfYY8CK!2Rq]['<&YA@HR,dW^kgk%Vl87&-OWBTrVua,si"aOV&<6\<?/>'m;l&!CgZT&V=C^C-@J/>M4K1+UI-/6]+N(%Lg%>j!u"1G9OqV?il,V#/OUiVNPh]7S,iL4Skt`W+2e^4r%B`S*8%4l@gr)-^`htM)]\2Or@I^Y2SF.^0TKf^O@9?o%8g]Q<s1h^%c#c);dDINSZLm`gJb`^oWWge,er*^%;le>=1Buf`A`N3[;ZT=d#8tBdK2#&a\`s>`2>#DF(Fs!b+_lURJXfg\Wrg:o>koKc#%207%)8SY9^(!D*4j\[`*($e8##g1DHtu?&[H#A?@6b\u;ohR$!7X15=L:]`?sFCu<'ZW\<%q"HJh^%rJE7G4YT&,g.YC>!bK$h@,")Eg%<f4[D>>,>M'OoQ*(Dft['Jm^1>SA@sWuAC*TI4Oqj?n4UqdI-V%sb2W^%2HP_pAblZ!:Q!JEn6L?L6&0#b^m(E8NtA#lCMLLGt>=%Lo^L9#0[+OH;HF(g$%5NdVOg!@$V'Kj:)Km'X&K<<Wb4Q>`@Qr4SNc""L`>+R9LJYd%+L>@Vf<Qn27AIe:*"((n2>#V"Z1&&4*N[%F8$l_d.Kh\KFY7LF/MDnbhWZH,//n1]QWH*L%Ki92p-?s&**>0W4b\bm9VIt^eG&B_4r)%`/P)TfA<NhFt^eF)gtnCjeCLf#\efb%Rhl4uE6EgS\@=-,Kt4R9_(606Yt^JBPqs6G8C:MNK2I0`>,A*Xd>&<iMAc%RDOeM.gF*(]NeAec.5_TEH.4fEL]K"!O9!"`63\#t%"VhqEGrkTE@#2$:g^m"*=u"L*MY$s*%/XG0j^Ur'_#XlO_pAIh%:k-S%R'jp7BQP;5QRsR:tQ6^N[W%-!YcKe!<WN7_[;ck%R&ae%3'`$T@P"Mb;2SH"FO!PZWI.VjkBmu`,:LA#^T^UX'/@^3Q%OONNWe6:eV=]9l"rZcoW!g%$,U]0CI(o*?r7RLbQH$RDD>of&Fq(s%:PEKg%Thb0+Y:kp;i4Y98!+2`QZ1_hN^7mjk"rjS>_DO@R+9V,@<;@-+%i/Z`;r4:!^#CANW;sZ64<)j+@V(enq.8Q"PKpd\>jTA%O5-oob!F*K_;L'P*00\hPftWIEm$4iI'gd=%V)-;Xc5sm*F]Fsd#B=oBV`6'lEW"D#IQY;WbQ$Fj&d%5&8O<8Z-aS(6Bi.Al!Qmd%Q"?(6N;4V:UDA_^XBt7-[W(+@i#YDY6t#B7&A#%HMuP7u*J2C(Bu)4uUt#H;(oE39QGU0%YGI6].qm6e:]u-JDpV>,<"=;M5nu6`%1^sH+Gs^U(7!V*E1BnWFJI'51`@_T9ZSJNp&_.EPZ%G@(VFR4dg66F7AeBCED;7rCII\/.\hfY+iUBNt+mbCO@EOq^PdJ2rb@@_<%F%'2#D%rh\qO+)a[A>U49LrO?.bJ7ZV.r8#jTpPo;&KD4_K@SlPTWH>We#lOW(_jf:)WX)#\&JH+rs>P8WD.Lm7gUIBE[Hu'8b8\%$sQ^>F3Dshb^PosnZ3?9W^acI_Xspk23=A>l!V@.Hd^o(6Q`qpih/[s,)?R-N8\ZiE)I5fRQ+960tiAf",eWqPi>^'-A$bo9-o(@%546^`&>!&X/kK:VH[%5Q@XVU7Kp(igkU]4Bs'icA"IFe?JPL2kLh1!G(t0W6Q?H7^?l4g<PQ\pZfR#(X!ETHL&Rc6o6mQ(nSl6,Z%'t9nU-OsQ4]We%Ll(irB%(0DSR-5AWQkN66_gi="WOgMVi@="A6'Q<#>-UdI#GY4b&4*N[obkUJV7N(V0;OkTqGV)6J^9-"_BQ^N%:qUu<Mg)"VYsTOd&;RL-#=bVp[S<R\p;)Cg$1!CI!,RE@\#sCO)`BSp@FQdiYD.Q87SF4\Fus..kXK/V"MsZYG6mdT;1fK0+R-D4%ndqNRl&dL5,0l$C]RK5<_$MFFTMrQ8`Zn&3Z0//JMq^5pWTrjj_4rM$R$QUS&Y0a/Zg-/BAQ;GEY:PW9f;(bFgn'EhE#2!mYsQ-&%UWTl/hTaIG0TK!<U_BjHO!)gPQAV]_8OJR$(7/c?gZI0X0S_$0l6QJIM5*!>1dl2$W?,\']`l6:#\*Dt,+,3>Kr--L'5*=X:IEX=%<*V-nEDDbXoeZ?R6KOQRE7Hq$=/.ZW:p*NY&&TBo=(%pKXJuClY:?l6FOH8*^uf3.R<=/c$#*fB&KLr*AG-i_@B72@R\jPf3Q"9g%AFqQCKOn+N&aHD8Y=9\g=)]H9X8b'e*>N1iA__nE")gLp`>kh,rCW`i&WBQJk11*?AQA4aA)Y/46&?_U<[7mn`V;`r"JKY'DjH0?%X+J0Q`a[4NV7uf2<[WbGV\-jUD"uX4^/M+j*"UM!1s"3u($M_&8B(;P3^Li@$:?LSe<A!n#a=*L\IY\h)%\>/I1e.ZaC.1e;6hnR%Jr6l_7"]a431=WYdT84\aV;)<*9B\M6[0.GkXMS*3q>$-P<kC1H2;P/\Y9-U@3\F!@;-"7Z,0Ob/DnAY[^$?0Rjf3dN/KN#b1Xs[%Hkfq$Pih<$97nV/,/017]Pc4_5Yi:gif-_.l@Z>l^7rMq*=Cb:R-o3TI$&2Tf/5<WI"#*&()W<13'Khb,9;@qS:s9`>A'W@,n%%U%YV:uU:l$3Oo2HFI6mQ(n1VEjbV&c+7_9X+7&n:X>;"NDWbchZW_N<7s9e_BmOfm`%O&K:N<$&3"87jC`/O$%"OFUT[%.hk&b`k6^%*clTJq3[R#_BR9^;S7Hj6EX#5Q>\`+2[V@M.o_tI)!SbeRhZ5!eG^dG/*1`)E@poM@0J"`4[IS0Kq'%cQE;Kp6&?_%)70;Jih/5l%l.B_ee0rSmH_gpBKLL8%V.e[e"Q<stKR5,Bj"N9e;S&qQ]h[lKL4re5<L!(o4FEs$0I`m9\h$[<F9B^Q^35-j"pD$L1e<ZB-KAl1%7YUZ>aG;.Z,.<>+]Q.UNV=O6]JR4p;+UN/$+k]'gX(Ztl`Q_GK:WJ9oX_Q1C&VE_Y3_U=r0d+smM$]?j)M:_VC`B.RJ1MgT$"8sr%TE?WL3AZn$76a)X".G$o0[h5/ndL-#+!Qcg:CId`';Z(!eEO/#5@]aT[,X@"M6o#VSELe$["@dEqMB3f.O+(LVLlnHCbVW(Qsi_0%XHDcAER[1(OfW@c\3W7=Y(jOOI8Ye'\@i4F(ED>:\YQZ!`U&nf4$eC&><1(?/5,im%71ukdl&Y+4P\_&1*1=`Ea^#+P;5da7;NX6%Gi`&@41Je\@fU`n@V4TY/fH`L%2cZBV9_]$)LeVc$rU8"K1&(k"Arb=@sMb?0I;=4K/3Rm.ft>9\k7tQaJ!?f79E#rOA``?Ae_FB%`Y#jl!&$M+#-rrK'l4Rm$j+7m$\J[(FLoR'+L#mWME9?T"!Hku`t/hXW6U/PaCpA^$pGn<"X=8.&ELgPkQ35.6f:&N&n,c[1o7q/%EL9N*o9A=P!NOk%0_:YI)(."\,o]C-.b\i-\HWZ_NLLJHZ8G%<,V!]$Z$_MtAkE14f`WL$TFD^3jKiiYjnW]o&QaX^)(.bUb*aWb%+MEk7:&A>2WrnqVoEen@M?1%<Ifog;jh<!V"$hT4(nd"B!#;US<m\UTE.$FDAMOCn-kD#>i#Io:-q">'jt[O&9%/m&!jfgIRVeo9%Y8hKKBK)=4X*Ei\n4p9icE-Ltg_1r`O'?lr8]]F)CsK!H4opd=7Y8G,Y-$9?#*u+:Sd$KmGdo296I]TgdrBBFO%XP.>EF+S/?T3j%MH#NnOm,OfO#D+V@-j?np"#jte1`$q^d::7Y#!#EfR](]dr?;7cgcRBj6>r-U16GfU]s2.J-FEL5o@0a%b+m8#`!XO3mi8Y@m87"%gDm0>#@lAQYIjk4B2!s!1$5/_JK85A3ZJRK=OfjD"CjIU\R8#4@GdFY6_>,k,/4qZB6_IQ/&L;W+JDp!fJhrmeJ>gFJI$ZX;ZJ70%:pG:MR:$MB#n)#\7AlC(1CeEZ*s!jA?)<8gNm&Md$n;CaH"WOQQ3oo4kZE/_QjU0EDj`R//7P%r`N.#<8))Y<WVXsH0jS=ir?9t)%MK*21ZQ[Ijq5C)2*$@!L<UQQ7GW6V]X3+^.$]e+OXGZS['.!a4jf.\_%"`3DR=1NeLOKR_:ICA99Q?n;bdjV#?U#T$<V6-<$ri#9%oY\mh0,[b"$C2/b,ZmTm*m,/C5^CeOLJF,,Q-C[dg^P6)S[HIJ#S<@n*YM.9Ri6s-54[&TT(0$-`=UuFoftS.R[Jo)3Zgu,Td/m_%YQUl2c2L*5VS%HGrcQRdaR38fr/'c4-7j0r'.!aTrJ:q]JLj1oEk8o>$X?%mQS`,*hhk09h+WU2g/Ji+AA^MT^_27:>nTU8o9:*N%3,Dq.)@k?l[4pTrDT(M,Dkt5MQ\5sg*"5VO3Y%#b0$GJI`#K@)0s)nt<@o@Lgnd9&5$1_H(`GdNd<5r=CM@".UUo)%in,oD7H%[D%O:b6bllcJ(X;E:Y%37'Ybop\TY`*=)nmSn7OVfhg#bs2!+okYSGkap"OV,g2fHs7K6rHnu=raWb!^)HsE.Wt)pEh?u?q&'hXaZWI%W@07?:h7KV@1gtaaPp3070^$F(5DJI+K7?E4SX\l8'm$o1/(8@#e%b%#uCW>nN;&L!JtNHUr@Bb#cj]G69mjG+MeqHW<6(e&;jkj%3"j^F;]<i\Mk\^&41;,h3[$VY0Z6/BH/s]89>MP.,<#m_Ve(PFA+0PJU.0[)#S"UP?0SP#/0B9Y9Z_f%kADEde)tTk*EO>`6)D,>%mKW4Bo&1P/\#0boLt7R9I@s:A?OQ.J(pD(E4]qkJfS3fX*c0lKHJ4.!Y`8*bi=OGb2SQ:^#[pjaAVcEP"T#JC#5NKh%?p=H@E`;.%qICOW8E4qG4-<4LB'.5E=fBcSbQ+#=XNKcqH//nVg"83OAt6,CT`JfgF^*p1YrIhFKkV)EL/^-oPoppbWp*@"2O.n8FV@Q(A_)N$%=j=PJY#n\8EE>_(`uo![W+@VNF>+!<0RsgA4_(Dp5]D]W!?ErN;Q[kpQ;u>5F\R]9'OY@b:fB(p(IL'i4I6+1Qn-2)N,(cMar*L6%$Ack[o9"(u>n2&/)28RKfoQ8%X(RhSkr=!?N@C-Qc"h9P@Hh>a&[=;:>,P=T9]n_t+e:6bbMn1IAqt>1,MH;JM-#Z7M%1WDV?M#_%N.m:oOqXK0R$M2H0Up!Y8Ik;&9H0<Z.TfY;e;7Zj@D]g[W2'ctA3uNmK-:`iEMd5]\Or^OS=)]+Be8CN;i9,M4DtY7'O8>Ld1>P-%<1W\DJ\pWEl<8&rU$A`7q+u4NU@ZgNpn?uSgeCo;:j#[j>T>8<bnAuS/RjL8`tc4eUG<:th?RQ>fgjF"8#>Ec"G6G)A(6e.qc*er%Mf]4cQ[2%e<#3&C2N22tI7/2LZ_nI&)<C)T8YY4CN)HE%8*?E]*"`r@9pFX;A+SA*.k\3D4pp60WK6<9@M,CPC(./C6a0s2#nKc2%"lcM`F>_6!7.!k1_$PeVW2"_K8d*!$XpP@a`'kG?_D>9'\,_T=13h5,`&<a7=,o5X>TMR.<'(R_n-7:Fr!!:bjX4DsESs%WJrF48%aVR?IjS>KZq$i,po`Xfir.\!=aVN@s7*"j;r[BsqTD59nq4i(*n,q(Sr;A<-Sm=HA#_J.[RQSCfS^Qud3CFE[/@5<rGuPA>Wpi8r%RLrt1Gi0/I+c+J-!YET)$2m95dlIG1QH,m)&3GP4//+S!`OLK+_D8/3LTqI"H't^SjVd4@@;:8,.sQ3nRd]hT?D#@E@n3`\D8"2s%X^WR:dXkbsb!mN*\1L%NiRN3h>aS0^Z8#"*'ljp(;MnP9NG$#m8*_,qnG$uW_q0$%Ke^eOb,=N4Wj%Ro8j?<upn3A?Z/D)o.?.lh%JYp<bLQn/4P7BjTA#"M4_JIY/bS">%2*jS!]($?;0t,%Yk#`VC?8>/lX'sA>!PqS[E*V@^+bi@8EsoGc.;0&tZZ4<QYk4Vc9Sjl/%`ah=geB+A9iD<!X'JsCjUp6;*9ds+%Neae$m6R(Jl2+lNVM5o^.QeAGCBb2CF9J4##'&V$O0J@$(=b<1e@p\!fHucbA&a<960P[F%",:GL1*Lf*UJ[CB):IG6it0[--!iHM:K9j1gV/P>N'g_!];R5H9:u4tJ]Ui;jImpKRfLLua=JZ/A<]7_%8jqpatpk9(A]YNOo`Dj%GSh2qPrR?:^l]s>k+g?]6s0eQ-cXS^CHD!sZ)Y91<JHg@YjlBR*+2+0:JO<4"mA!jFcp<lc=KKn=bc!f[P>m%UKEmoWG1R/T=rPh%jD!e`VW"4]ON[18J&ohF(@b%NijIc[je/5KL='C\73'=afg>k"SN[2)Xr>r,PbAc!p?$mKQ+PX+qg@=l+rQ-O=>knK0I;=Tf8!eg%?c/,TV8L97gP:(&3$)4[80q:m;n8sU<LE-O])#h5_oJJ?HNWC\_hG]2!rkT.r#icl5D4W@K8F8lVp,eXToI8a>\2J'"hE@^0t8AX%ig:"jld\4MjQWGE!Mj/Z4u/$rAN5he-Wm$X(<L_7Z\m8CCDFpZj_$])0#0G!4I]&Xh\$rapj>+A_*!.E)H$'i>skH6g@d6\+roTG%e*3nP[unhR2<u69Y_1fQK)rY^*Pq[cKdhdsi9=_^AMuhCT$W)0*[9Z;hXlB>*YOcu7iF-/"!Yq#.Msjqgp#;A,"N%3$&nF'lbMG9%Y_[@p'X&T#d-osKLL*M(`'0P+fV,ae?!CYmA&'(,4cDM1hT#.g<7G#MH,90[&e-<1Q#RcP=_0VsZ1YLX##(X,:R!!?:2UnYC&1uC%obBuU6X1:qGhlI;iL4'+Qo_Gr%V$f'j'>.iLR#LQ6e-#5X[s7oe[K$NX8QCJq\%l'0!W'_M<L<<Xl:419@_7./?QRi/;k6*nRJgA%J3;T?:l*\\'tgC;hW]:"IMg0N35s"WA,mWqa"Y.ma0F]CXYT9S<1S^^\f)]eK;C_+KO[AgVFa2Yk[ke=@<R2f"g?Q5MP?#R%"8J?%GU?&QRZSj.?csi6q$-Lj+,l7)_qXB_3sg<[#0]Hp2lJ-i#nZ@fJYTh"c9aarZcH)s#35LDE'o6f6!WfP0jp%4j;=+tAKgBVCi)Nq%58o/V-6hu;R4"-=iso@CbZ5]MN<:V/1,[d`1[c.r=K$gZq(Hf'KN(rd8gREh$kY%C;laAs81pe-0HgnQ`Mq/p<^@b%$-@7K5YY*i%)?QOFSf!CN6A4@+UD@<r<LphO&*$7DUZ(/&.@L[oVdEVP(C<@V$(7*nYJfUF1bDd31Q:BCH\^j!!$@r76(U:>;H*,TJ4qH7UI-kp%*Q$2D1R33uG`$cXjM9@[76g@qd>iaM6DB6D&5c;U?GY,I=NO+=@V`^\!h_3o2ka)Vf<+=b"r2kl=S<:W7$42-#_8'f<0i8D'pp/a%,,U2n]P9QJCedN!0m>>X%iQHlmH\<fK*&^O`0(_dSqO'>:b7R`,7%85U:gk+7YKMC-%bo6CC7sA[6QDoWN]['3#@o!##?.-F%oVC%2<.Q/_O:%qX6(Wa$_5Qs'q^PT<=^FXWbu&CLesc0^:fEf$3B[mP1@m1;9)*obW*J0EM[05kR[kiKC9)#q-F9%5_Z.5C&!'U0K:6r%igT)LlUEH.oV;PDck05[I5'M`p@8&9?QE(^O*D_3&68!,1q863L;JMB`Q#gS0[g>'qbRNt0p[HIXt_5Wi$\::W!ju)Ll\HGED\oj%Xi1\\(,8OJN*>b;ZAXik^-7[5*dKtHLO8NqcismhZ%`>_0jiS]Q[@rS&j?b/hAtOAVd[L-J`tZ.8d(giWXTddA'L81;:f%o+,J0H%0c"b(PiDArSO!\!N79s"j/mM>kHNI`GC_Hl<MEG6BcH=@(n>j/T^L/,[3%$I4s1Q9IgdM>i6\$R"O[c5,%BRQ+'an%2h<YAKLHjo%Tm47qkM=V?PRa:('8)D!naZMeH!)P!JHUTU5c+/9#C;0I64;,+VhNL(&-P1g-t;+Z*:8],4H=R8<Zo:0BYY3+865d1%h$9FpdXjB%(fUqg'!E.o*2"Y?Mc\FF&bX%D>rd-MKZ,jW#2/4BZ#!AKE;3D2Q3^*2+99oHV(\`C+<-J56[df+O>.lDp;7FM2W^147M>iZo'#;c%#bi(WOsL3'EGZ8EeVr%DX[3HX`Zk92qdAPT7-ZaTMqlPhQoZMLU[qB"4@n>(;cRWpDViit`&!]CT7n^3&:N?HL<8/L@lTS`Cn[lR%@9jp?XpW+4JVBU5PiD?lmikXk'UH_c)fZ]fCV2Gsk34CQ71^K%X,j94c#-mZ!ih<fdL[_*AYQqjKbp9tPR+"9HVK;r[?M^t3]_/F%9B55Bk)$=$RNSG?h,mG4c"@%.a,9T,GcHI4=X%?"'Xe&6<=T2bC5SVpK/:<7_lF=sKEEcH==Y7[G[>tfL`i9aN\Fl)"(OZB-_=2(%UN8-uSd:8L-:77VnU)R='Z\T3UK2C;ID)sT1`hqHi]tkJ9V-el&28#&U/Gea7'Q$(qGq=IE\U^P.5=5>6B@fq>mqp.)?<6(JMr)g%L'W^)-;$b0W*t4DN-,>kVV4#sL[jj?eE3J^@FV^@#0c35!N'8_Xk_:@R"@VJGJcI>DL!.&/gjmH-(!(4n6TsdL%=YKVA!!Ld@^jT%/$uP-*"e3C=qc`obZp1V1$VqhpVH]K]h^X<&X`2/)nI)s:Is)9L5M\j$-2(2-_t6;0GlfZ&P0<(RN?NG8C^XfMP9>Ba08>`b289A%V`60l?05L.gEm89)_ohTN:I>bR*#hfq[l@5b2\@"TB.@?C$^'q<#(E/.7Aji'^otU0Isr3K:)g2@?b,,E(!gH1f9-3c+MXO<&6gQ%'#l'V0c]Ir)D@cYEJB0lM5%F(jQ3Ml"B<Bq_[ps)WJ^O]XGXSg7h]>s5\;3kHo1>[N8!)Db4>11N6I@b)*B.3rgK6fE+"&Ue[ZdA%PKR%*%=uPuS!4g6"2<i(pT(;$1+:B:F`r^u^i4Kt:o/a)5iAJU;DKA\1;4(SWdlaTNh]WP7VRkm*A_pa/Bp'bMH#P4QA6TZYKTM&%a;F=Gk*<XiKOO-Y&$U#<poEC;+*LXsWE&1@&A*fS-jH!_FsB<VT\DL+DdCu',KGpO^L7%L?3j)PG?"<pr?T6q5_&hRnf%5VJs`CF%"@S88c?caFn'6`1M9_h$n=`Ut6q2?$AS&mC7)@7"U*r@#O#!6:JJ=m3%E*Fr)ouT6r,.rm1rR53H_e)r:PtZbf0S!?JV/.SXT[<P%oA=).o#&_[e]#2+r![)#g6142M?rS:@SV_!ZrXNlAF@8lS_n8sV//%I>p`WW]gLh_7\1F?[o$[3-^1Udbed,dLREo\UQ8g[&MmX\%aE.=lbHP%sk'^0,6.>t?@-A8+1hA&N1>F3`ZY\@RCR3X8IEh`OHl%q6VpV4#1$jdCrRi1`5gZlG9*RHsK(-mN!R^Uc7tbGbd'Tn]%#f9,EFuT_QAqtF=`[oc,_9Sch9LCYjaIm7P82?YZ3mc@%XhN^.^Hib/'sisD8@%10>d]08@.s;aO(SsMG%4*14!'46m\["$M(QWL%=/jq_.]<HN8Vj?\NKIW"RY$39WT+"nIj_9F-,Z^\T:B3Y8)?&l8U0Cd!.R):l+0+s=YTL$DI-c`J*k>]3DFPdmpqAn`WSetV8cG=%A>r,87M83YCPF3oRV]rK`aZRJ@M!*]ZdeV'Zi:nK#3-B0j"K&]kAn`V^]CiN1Q)+`i&D@5U3_?,OG,g/kH^r2:YCU.9HjiUK\hq^%%2lK7fYI)m0hG7u>FPE1h=k0gS+@Xs%q$7q3foI&WFB_:FW>[qM)\FD[VeP4m/WBu-mEpJ?Rlg<W=umU-k_-jE,Ibr[#R7o.GEO"%EEUIu7.U89@%=$+[h\SBX696LXgY;8"H+p8bp(?>i;SlBEG@)q,.r+MVr&+,ihfuZ*OTqcn,up0J@EmoK_S1Q[W$-4ZuH!_Dt1:^%X"4FlXf.^obp7r?K*'44XDT$,)fVt*h@PFUg[/R>IYBR>F#P54%k"u5O!bhX=D!=%_eOk'Tm"8f^fhGG20Tp4%D7TjD"DMMfa@X4%\ba=laO^at[N;[e#ePhZVrLPfg[X=MK>V,CK1r2\@D%RHCh/FQiG_n61:$.&1:H2o\#'m!LrW_B)qc]5flCi=bg.dtG!PR(]_<5D%2@]ah?J/Znj0j1Pah#N`1HE,:p=CZ0r5pWS8cH*3-;aEfKXAL[R^."S@,>8F,Y?*omB?E/eZL(]@s=duJ:5kH11kg3(UW0u5Ei1I%h1AcM84k*NcV]Lc`(-+;3Kc6+=a8FKfSfpC2'HAdi?k/^D%gJ]V$B@\2`&(AQi$$59:'%foEgI[IZ."B]f9/_en?^?HH%to!AQB_%j(*k5A>U`[A4$`U;$e4o#-8Zm114,P:kKB?ClbB&ZS_>2ZaXGAB>[sf(Tb%qMTr$/`=7CF3SO;ISs?D9d8t#%?@t>YIDl-:;?QX6%eg*Y:hZZA"9@9!BcXf)!6Pl4?6`[&[S!aX<-MUTq-R@a9Yo9+`ZHog2@n?4*+n6V2'"HN7A3*Ke#ha$-!LGQW2VKSuKID&V?nA4_%,%Q7kd?H/Qejr'G8kD7D)Who=]EpIK*qR"%@I*%%c!u^Qq&*mM%E\KVAsf(o65%IDKb/+1*Wh+7*C2c9F(rH>h';/0Df[<OMl!8B%QfApb`coK@%8RiXbe@*^e$dZ<<acYiXUNC\JGpU-)UJNn8afDBY:RU?TG7bN[43+7kU)"Xon4QTK)s%P?!8Kk)(dH=e11"b&Tg)$%'APnjbUI]kS0mP5#?kIYEn.[B_su/5_QA#g91MYD%$Ac;9,EVb#.Sr[aU%kK/-4E%=\1-AO6Dma,*LW%?jVo/NOG]>X.!-,92)[*%?m]WLIDZH"W55^C2&cYPjg(S(0\nLRq?u&#,8n%9W2=fnfO)-tfbW4tAonOF@'dEPgE=V&GsG.iZg%Y84n><io+c>>kJR\:;3I)t%6eHj7\<"l)cW'oB!6`@og&AJa7;ikC87Fs2J<^DnbekT?-%CX`XlS-M=K?^,A<(22ZLmc&X1Z1BA[I=\#'tU>?Vk>hQ58#*ZEs0s%\oK[#DFh4hE/X#F3$*iI97a>!M?KkloGs6_[8Os*diQddWbmus4;0..VWMefjq#0THL)T[d-c9:@0]`IoUDCB(;nIE.[s,H4=,)j%84g@kPYbCu.jT^<dDf]ON3t[>9]emCgb@+(:TWD>q)4:0E)0HO/'rmH895E'n3[SQ>1molO#+K_,U`-#UIJ?V>8KcIC+M4dSmtJ]%0OF`!YQ9HudPRSu3-d.:&]rQRXg40BQ_o4\?ABliOH&s&pK0"D5r&=OVie1iK`T*XZMZ6p(a^'fZbiAH92/eGL(sHiUklgb!Wt`%%>$9>`-lqebK*i$'P,)Ws2"d'=Y:NhaU1O(UA@_ip)*NP4@GT&`?a-=$MrntJ8+LXM9aGY9k.I6S?`,D8.3^#nSseeY4[sTml5+80%`k%mYHV+9jj^n:_@1OYpZBXtpX1me.Q12?_MUaNJI)MM_7&P_fOM9cu-.^q5=id447)#Mj,N085;_n.`9gVHG?C6?8d_qfkL1=&o%fL-UF/N*Lfl7qtQi(f\`O80JJ,+J$\)"B'-R=UeTcH@cS+bMdl+[iKk^lV>rn;pKqW<6:YdU_EH&>ihsPY+kaO_qoSO%0>#94=*]%CcO@Yk2upF,R`q#c/A&Ag:rcQkBO!k'o7;0cJ@@@m&bL"p-u@jhmqDZ%B5W,B5(Q:T8qm9H_W^Qff)]qRTm<c.isaBp19@F)H)?\%cVW+cc?BlaSa#;cQbIZeUkG<q^RBa+TV.dZfkO(+eBQd1&]k]33cHXXJ.0PgKZpg3@-eV;9e;P$GU'tm@[3a"\MX!No5U@Y7a2gd%j*ZnJSl%E.9Y3C/OX$(ONY6T^KXsO%B-uFT-1D>2EoqnDEkl)2h,/dO/RQeLVG*rK:_QdqC^h[_KK3$(PH'To&RAEVROdOV&7)Z$%;d,/8':&<)Y_GWU.W8`=2kq<Hg_?9OPZm!LQ6H@TBGJHJ<3'H1WX!T7X%ebAbbh8\jLc3/JTq`iiZYpAQ.IY1PAaY5]^#s6j?#F#%_WR=%q!fDd'(-kB,Eh,28a1&j<fOka<KiN4YMb",q4]L1VPaPRgk>EMZ&(4k>AF#V<I2:P*o`APoQKtrpPUErDp7RW;QqJ%UpLak%o^-&S7dJI/K("=0*\C[n@)JP"g=Rc@RY8n$JPn16Am!NLX]3Gf,9*d"X!B"7V5^(oWLfm)R6B`9=FHm>s4465+>+l$:+n:;RZi_<%b&VU,oI!:HU!Hl1KQoL4Q>;?M@'T60>**P4AIa"7Vt9F6X4i7e6XOCb\mS9@=Eu]?/Kl6;G%5k7#6oNohUSar'?`u(q$B/Rg&moV%b"R25UdbUob<uJ@.oug%>+TV9c`N33jS>L:,Uo-5:&X.C^_"62ltscZg'.AnRQ[S^e(BH`8hZ8NW[tiBNiL(j@S8/Pa&F<l:aIH^%)1CVJVYT/FaARX&WGAr=BXTa'-<Jf8=Maa]*RNF,cMLR5GGFXNr1ts.NP^GkV%C1_,>q-XM\NXOen!jH<:)RnWiR)BOo[aH%lMH"%C4dd#S#+2)nuAI*_GR]G(T\r76ukiAb?L@:!2T-o`-bBT*XCjc1/C\&ZmCkA$YtG?@J*kA.k4'uL@!P\p2iGj9rme%DF,D&89t9a%,%AN+.-bGGEtsiBW8WZ?'CRZ*5P%hIY+(Z$-YPtbpAt(XNE@EHl3?;r#t^Vq/Vl667F&jZ;Rt.ROGV#PJtW[UBH#7sh;\rZ&oXfr%7Dkt#Rp7P@bJ')*'Dcs"XB'jaJ^A"T.:[-SQ!8Afi]c:\RV#M+D5*A3D(1LMLeJ6?8;e#m9Go'0Pk:&!b%$iJap(F07S?TC2*3r<%@W%el!O'P6cGAeYG$<)9@DO:4''AWoICeFGae)02#f#C6DCJTu>*G%F9s'Ba80jCr[S1U^2um)HSi0/0AkPi_3N$qW8X1!^`+cqQ%*'7DMDE6?F[U<aVJSdq!Ip)kIcs[Ehc-UTkk"Rg'=_?_L96u72D"(U^ee1SR/,!_[@Q>@1T-%m3ARr4@oQ,*CE+ZK?i(\=4Y%uEm%!X_0?W9r#35E]2:CVsfe$EYGdmT,b&<02[4&B<G$2lS%#Bj_AeLDsJG7[kY*X0&4fff'\@6&_3JXM2nD67JM34"T[/g*FIG#mR^/%c2m%'Gfh4KIN#96:?G5!.L9_*$3kN*.g#`Q),2Yn`?o!3DCE*AY*NpTq+iPQ=3Q,SOY(;_-nAC(\0A1u`);h.eEj01lQiTRceOUr%iL_-eF%JtR5`r*//4642ZlfFi_%oJ]Cli5N4AsL:AsMZl%Q4Mp42be.%?@@[1QebFfEn#B%F!&`2b>@m27^X0Zdg^J\m&bNnX.f3%36YE10[S$2;.P8*'7C:dCTq1L5FH**4J8UE=nS8X$d3Fk=[eh^ZST;b<00dUbEdt2<pQY)M3?VLnCP;sSWZMZnn-=HV%t=g=q_L.%Q[]5KohX/GmKe;V4<i)^[`VL:NAU>"X!PG%1-$'p]3pZ+:3\(r,.q=QHHhSVIr6n4Nc#['!d7$-gklL!/M3sl`1(##N6%bo0[fJq%'7=;$4F,;2<K`O,e9%+NrV$ELp%ngjr>jfiQkd$4a.d)o@k2=H(=^\hIXiuiR%qrmf9r=q[CDNj:p"Lr65CAS#b-q^APH+c8o_(l%fi5D8&i*T^qM@3WL>e^kBq/7`?VnC,R\'4B`ZDd##`jundYuou+sNsqjK\Qm]j+C8>\$[V>kA;!i3QesNttFqTkZE<=c5_3Ok%n/%ccrZ!8/Df,0=#rC2pd(F[093b8T*ngp^Uq_k;%Ib*>q?gU*Id:805/p(!9E9()^m#Ek#jOfZmq6BPPVm/Z6W&P"]N!'M6H5;q#<,%h@pu$hE2=@c?eio0!NRF#rX]($50cEX`m95[\;QM5iEK_$qLJX)BmB52TB96.q6B!7rqk<9p1abQDT+OQ!kg29P3urm1:@&i95'*%!I.oYL@&qI@^?qVRlN5:iDpbXLPTmV(9&IH2\o+S`/7qR\s5K`c]VLE&%6F]D2TZ,UT(&]R*QeG6CulSrR3\ZY='a?"`I`fT!X)D%q0YTL8'hq+mZ)OHg(lM*%#LW@V=>O/BM0[?lQItQ[Pp&(ZXGFQ5!EPVJIbm<85_3HMYa=&4Z/1#<!ci\>2u(n!ddLX8T3Me2a]BI%L\E?j&Oc3"&KV;f*H5ai;+9sj\--l0FY)c1/-@Kt.a"98?:C7j7<`gQI^:H\'B+1sfH53CUUb5(b85!@1O)mX"TR>%j>hXWp=Rse%]")K4CjdnAK'Ua/KPWbV(C\^KU1qkn\jfnLQ7j"F7TN/X5;tZWp=M,Z4I2JKCMsVa6a[rk(^`@80c]2i]=l:1hbNVH=k%#^*P(c>%@c[$M:tX&VTepW=m<Q@hHbuH^fNp&<bfUtL1tl`;Y[-i(X.3b[.>]kSL+Fht7hS2n+`[)c/E</S#M\W,S\@ShqD8m;maX&c1=/s]%rCNS]+[J(boP@)BV6Mr,9GMn";e?%np[bEQNB'(/Zm1F_)u#_\VVhM9FS6>hikQ7*gINYSEMs3KnHC?V3-n"LZ3.'BO?s2)U5?sb%UJSct4X!N)%TOS=d*^$;=c.9_U2G!/g75F+p'F(1"jjrhTE@d1=>6U?"8*j</ctm?ggr$I:R!&&R\<&FBn`RO"_#PVTHY^-GVl<L%fHs23DCOj`VgE)cCo;]E8^^\a]4Q/LBWf]EJ,i[V1tEOWE!!1)QB.j$?@@&?g#'YE,=hg:M+A-Mr(mqG\><ikd<nHZ&UAi09pXd$%V!)]*our]nIlElPp^;7ZoNb$7Ko$5$IC2cdamRoK<g#VW/]Bp1eg.'<8fAp!Ubn2j;T"o);Dq*9;k]Z'jD(`6GhYb>fcbgc,&_D$%DYet$]fn$l!2L!OR[GO:8,Y9RPrM<\-,kg1BegmaH,8EH[jF/p4e>sP[RsH+S=2)%Zi>epM!^5?[rfI_a/gT.a27!E/[Fr..+#e)%h22Q*Q?T$,?V#IhMA.,+U59/2/!!jf"0BE!7kG'4QMOts.?@Ypnm%idRp:BoT^QF)`YJ*MinuG1kEf/P,NfgSinU`oSq8c@f/N,4%JNS^O+Lf&t>.H_\+sB%m^;If[/)#%;A[IHS;6`\jAM-g/cd!Koc.i8^!U(SG_<R+f'3Z^c&,X50+mZUA;tjZjMsQBnUqc<!U.^-#%kNkJg+K5H@q\-#&Ta1WgH[[Y:(4N6NO"Bhp?ppS.Cm(SV'l(<Rc5dGJ5]Y/ZIL"@hn7^WU\.]7i,PR.`VH=FC[4!nV@bY!Q6^]-P%VDCZ)&0Kb_-1.E!J/?UcM*'*#8VT]58O"qJLg$_+W!sr%oGukb`g,)M@,T^O89P7a@7dM0l<-h"WS\_s8`PEJIY:`I6kgQZ84Fdl%j=Bb6Ai6hfQKhUIY-Y1iJ2?Eo)-":W[@AQ?,Lr/i_3,IP5V#'Q"5B,jT52AaMB'IkW%oU/3a#6E&Ap#c,(7n8BHTcC`3<>h)-JOS%rS2-FbJ)PP@?3D>0%cTC\k3bIMef,&c/?Hs"h6_UBH3gJ3k3XoEN2p4Q*M_[=uYoSI$n(M<o>a)f'-WYV<VlYR,?69ce7iQ0M;rF%J_G,j1Xl%tm%bB>?bV3t,0+QX^c^=!p.nXCP+OQL/-b.IUo$hbZQ]K^-P[>dSViRJ[t][,FT^;>8]bZ0kpKNDXe`.>?aXIX@'sl9%\Js*u*b]!:!'Z7-/.gR'hW:/)&HK+O5)T[l"3(X_!PkD7C-J<n:1J"K+mE+[:dbkd%!sP%Gt:juZVie*+Ep-EZ>L:20;LH5@Q[36%JMY0a%$T8&,gI!3Ate]47G<m'@Mrda=HAPLB+8>i%LL^njuJ$GXZU=M*_OLa.Hr3\GDP2lgM6ej,+&(4krEsCiF+u6:>OtBZ7?sY%'\+]hM#7uN"l[%/N9dH#ER!TY?C,MkA7W+?oQ.(jc]122-o:4OlBI?6D[C>#gp'1tDKTLbIVE6I&NQ8!UC.+QBR:_Ve.thR;.LfJ%<"0h,Cc/c%;T\;0&q$c%M?la(_]VUoBPG&MR((>5?bbP*L$Gt@-U`tu.p>>QMkE3h;PMnMW227`V<(GT]dsc"Ak\k`K%'jr=t()g%.CH!]R?D#J/(.H\goBEN)^QrZ"H'diH)91rd^FG3l*3m-95+c2Y`[utb&<]dh_P#u0"ZfMaBL)cKFDI;.4HqnB2Niq8HK]=\")T)%;0Ik.8k+i.@dYVpA[dnq&3]$g`L(@QX!>c=(^?Rn<o/.qAZ.S9ben8X3LD9P/^@6U;WjjtL]bf>'F(G3<M<l^[lU05X!B"/WMlGZ%f:;F=0G<a?JP+=PS9_T?qA<fuF<kth/&0J5TXOCaMHlKaJV&jsOQ>UjSYW&n1AaY,&.Fn:m_H7>pD$D<7Nfiu5b9'T<Ka*8;UeFD%P&rtHNo"IjK(%m-'cm5N@GKmk[bS;f8VEG^o;H,XQD'lhV/Kc:]3dW_fB]UNs7PmDcTh@&jn2tF5/2Poq>B[(59Bk#"uQmV++AM8%maoMJIf/GXr9;[K04/$-hnK$Uo3]3qrpoTs?XLQtr21mnMJ[fLnkUpRV;/RT^G#9Oqu;A]mr#&Lq"OaI&-)J%jl>M7O5IX!qr@;>%h`h#0o(oLlR"E08p%oZb^:_1oHqMe9\c%";+2@^PnULQ8iTIZ\DgqUurUV*qs5iEfs*4S*%tAhKoB&9oI<bdi0CM+(qYn[ULTg1G%n,;:Yc_&s2mshrto(_1eqld1V?f""rrThYa)fkfhMSFH.a++,uL]7UP=pX0~>%AI9_PrivateDataEnd