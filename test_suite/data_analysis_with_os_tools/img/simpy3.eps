%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: simpy3.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 273 196
%%HiResBoundingBox: 0 0 272.9473 195.7368
%%CropBox: 0 0 272.9473 195.7368
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 7430 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD08FFA8A87D7DA8FD7BFF527D525252A8FF7D7D7E7D7D7D7E7D7D%7D7E7D7D7D7E7D7D7D847D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7EFD077D7E%7D7D7D7E7D7D7D7E7D7D7D7EFD077D7E7D7D7D7E7D7D7D7E7D7D7D7EFD07%7D7E7D7D7D7E7D7D7D7E7D7D7D7EFD077D7E7D7D7D7EFD057DA8FD08FF7E%FD0452A8FF53FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8A8A8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFFFFFA8A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA87D7EFFA8FFA8FFA8FFA8FFA8FFA8A87DFD0A%FFA8FFA8FFA87DFD0EFF7DA8A8FF597DA8FFA8FFFFA8A8FF7DA8A8FFA8FF%7D7D7DFFA8FFA8FD37FFA8FD0DFFA87DFD0FFF7DFD0EFF522759FF7DFD04%52277D525227522E7D2752FF84FD05527D27A8FD06FFA8FD2DFFA8FD0FFF%7DFD0EFFA87EFD0EFF7D5352FF5252527D7D52527D2727FD04527DA8597D%5252F852522752FD05FFA8A8FD2EFFA8FD0DFFA87DFD0FFF7DFD0AFFA8A8%A87E7D7DFFFF7D59A8A8FFA8FFA8A8A87DA8AFA8FFFFA852A8A8A852FFA8%FD35FFA8FD0FFF7DFD0EFFA87DFD0AFF527D52277D2752FF525228FD0552%28272752525227FF7D52277D275252277DFD05FFA8A8A8FD2CFFA8A8FD0D%FFA87DFD0FFF7DFD0AFF7D7D7D527D527DFF7D27527D7D2E595252275252%7D527DA87D52525227277D277DFD06FFA8FD2DFFA8FD0FFF7DFD0EFFA87D%FD0CFFA8FFA8FFA8FFA8FD05FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA87DFD%37FFA8A8FD0DFFA87DFD0FFF7DFD20FF7D52597DA87DA87D7D7DA8FD34FF%A8FD0FFF7DFD0EFFA87DFD20FFA87D5927F8272827275252FFA8A8A8AFA8%A8A8AFA8AFFD2AFFA8FD0DFFA87DFD0FFF7DFD21FFA8A97E7D7DA87DFF52%A8FD34FFA8FD0FFF7DFD08FF527D525252FFA87DFD29FF7EFD35FFA87DA8%FD0CFFA87DFD08FF7D527D2753A8FF52FD5FFF7E7EA8FD0CFF847DFD08FF%7EA87DA87DFFA87DFD5FFFA87DA8FD0CFFA87DFD0FFF7DFD5FFFA8FD0FFF%7DFD0EFFA87DFD60FFA8FD0DFFA87DFD0FFF7DFD5FFFA8FD0FFF7DFD0EFF%A87DFD60FFA8FD0DFFA87DFD0FFF7DFD5FFFA8FD0FFF7DFD0EFFA87EFD60%FFA8FD0DFFA87DFD0FFF7DFD5FFFA8FD0FFF7DFD0EFFA87DFD5EFFA8A8A8%FD0DFFA87DFFA8FD0DFF7DFD5FFFA8FD0FFF7D52527DFD06FFA97D7D7DFF%A87EFD5EFFAFAFA8FD0DFFA87D5252A8FD06FF7D522752A8FF7DFD5FFFA8%FD0DFFA9A87D2E2727A8FD05FF7E275252FFA87DFD5EFFA8A8A8FD0DFF7E%7DA852527DFD0BFF7DFD5FFFA8FD0FFF7D7D537DFD0BFFA87EFD5EFFA8A9%A8FD0DFFA87D7D27A8FD0CFF7DFD5FFFA8FD0FFF7D522752FD0BFFA87DFD%5EFFA8A8A8FD0DFFA87DFF7DA8FD0CFF7DFD5FFFA8FD0FFF7DA8A87DFD0B%FFA87DFD5FFFA8A8FD0DFFA87D7D53A8FD0CFF7DFD5FFFA8A8A8FD0DFF7D%FD0EFFA87DFD5EFFFD04A8FD0CFFA87D84277EFD0CFF7DFD5FFFA8FD0FFF%7D7D2752FD07FFA8FFA8FFA884FD5EFFA8A8FD0EFFA87DA8527DFD06FFA8%525253FFFF7DFD5FFFA8FD0EFFA87D7D527DFD06FF7D27522EA8A87DA8FD%5DFFA8A8FD0EFF7D7DA8277DFD06FFA87D7DA8FFFF7DFD5EFFA9FD10FF7D%A87D7DFD0BFFA87DFD5EFFA8AFA8FD0DFFA87DA8277DFD0CFF7DFD5FFFA8%A8A8FD0DFF7D525252FD0BFFA87DFD5EFFA8FFA8FD0DFFA87D7D847DFD0C%FF7DFD5EFFAFFD10FF7D7D7DA8FD0BFFA87EFD5EFFA8FFA8FD0DFFA87DFF%7DA8FD0CFF7DFD5EFFFD04A8FD0DFF7D7D277DFFA8FD09FFA87DFD5EFFA8%A87DA8FD0CFFA87DA8537DA8FD0BFF7DFD5FFFA8FFA8FD0DFF7D5227277D%FD0AFFA87DFD5EFFA8FFA8FD0DFFA87D7DF87DFD07FFA87D7DFFFF7DFD5D%FFA8FD11FF7D7D7DA8FD06FFA8275252A8A87DA8FD5DFFA8FD0BFFA8FFFF%FF7D7D7D52A8FD06FFA8525259FFFF7DFD5DFFA8FD0BFFA8FD04FFA87D7D%2752FD09FFA8FFA884FD5DFFA8A8FFA8FD0DFFA87D7E27A8FD0CFF7DFD5D%FFA8FFA8A8A8FD0DFF7D7D527DFD0BFFA87DFD5DFFA8FFA87DA8FD0CFFA8%7D7D27A8FD0CFF7DFD5DFFA8FD10FFA852525284FD0BFFA87DFD5CFFA8A8%FD10FFA87DFFA8FD0DFF7DFD5DFFA8FD07FFA8FFFFFFA8A8FD04FF7DFD0E%FFA87DFD5CFFA8A8FD06FFA8A8A8FFFFFFA8FFFFFFA87DFD0FFF7DFD5DFF%A8FD07FFA8FD08FFA852FD0EFFA87EFD5CFFA8FD07FFA8A8A8FFFFFFA8FF%FFFF7D7DFD0FFF7DFD5BFFA8A8FD08FFA8FFFFFFA8A8FD04FF7DFD09FFA8%525252FFA87DFD5AFFA87D7DFD11FF7D7DFD09FFA8525252A8FF53FD5BFF%7DA8FD11FFA87DFD09FFA8527D7DFFA87EFD5BFF7DA8FD07FFA8A8A8FFFF%FFA8FFFFFFA87DFD0FFF7DFD5BFF52A8FD08FFA8FFFFFFA8A8A8FFFFA852%FD0EFFA87DFD4CFFA8A8A8FD07FFA8FFFFFF7D527DFD0BFFA8A87EFFFFFF%A87DFD0FFF7DFD4DFFA8FD09FFA8FFA8A852A8FD0AFFA8FFA8A8FD04FF7D%FD0EFFA87EFD56FF7DA87EA8A87D7DFD09FFA8FFFFA87DFFFFFFA87EFD0F%FF7DFD56FF5252A8FFFF2E84FD08FFA8FFFFFFA8A8FFFFFFA87DFD0EFFA8%7DFD48FFA8FFFFFFA8FD04FFA87DFFA8A82752A8FFA87D7DFFFFFF7DFFFF%FFA8A8A8FFFFFFA8FFFFFF7E7DFD0FFF7DFD47FFA8FD04FFA87DFFFFFF27%52A8FFA8522EFD07FFA87D7DFFFFFF7DFD09FF7DFD0EFFA87DFD3EFFA8FF%FFFF8453A8FFFFA852A8FFA82727A8A87D2727A8FFFF2752A8FFA87D7DFF%FFA8277EFFFFA87DA8FFFFFFA8FFFFFFA87DFD0FFF7DFD21FFA8FFFFFFA8%FD04FFA8A8FFFFFF7DA8FFFFFF7D7DFFFFA852A8FFFF7D277DFFFF7DF87D%A8FF522752FF7D2827A8AFFF2752FFFFFF7D7DFFFFFF527EFFFFA87D7EFF%FFA97DFFFFFFA8A8FFFFFFA852FD0BFFA87DFFA8A8FFFFFF7D52FFFFFF52%7DA8FFA87D52FFFFA828A8FFFF7D2753FFFF7DF87DFFFF522752FFA827F8%A8A8A8F827A8FF8427F8A8A8A8F8277DFF522727A8A852F852A8A8522752%FFA87DF8A8FFFF5252A8FFFF7D52FFFFFFA8FFFFFFA8527DFFFFFF7DA8FF%FFA8A8A8FFFFFFA8FFFFFF7D52FD0BFF7D52A8FF52A8A8A8F8277DA87D27%F8A8A8A8F8277DA8522752A8A87DF852A8A8522752FFA852F87DA8A82727%84A8845227A8A8A82752A8A9A85252FFFFA82784FFFF7D527DFFFFFF7DFF%FFFFA8A8FFFFFFA87DFFFFFFA8FFFFFFA8FD05FFA8FFFFFFA9A8A8FFFFFF%A8FFFFFFA8A9A8FFA8A87DFD0BFF7D52FFA87DA8FFA87D52FFFFFF537DA8%FFA87D7DFFFFA852A8FFFFA8A8A8FFFFFF84FD09FFA8FFFFFFA8FD05FFAF%FFFFFFA8FD11FFA9FFFFFFA8FD0BFFA9FFFFFFA9FFFFFFA8FFFFFFA9FD07%FFA8FFFFFFA87DFD0FFF7DFD6FFF7DFD0EFFA87DFD6EFFA87DFD0FFF7DFD%39FFA8FD13FFA8FD21FF7DFD0EFFA8597D7E7D7D7D7E7D7D7D7E7D7D7D7E%7D7D7DA8527D7D7E7D7D7D7E7D7D7D7E7D7D7D7EFD047D527E7D7E7D7D7D%7E7D7D7D7E7D7D7D7EFD077D7E7D7D7D7E7D7D7D7E7D7D7D7EFD077D7E7D%7D7D7E7D7D7D7E7D7D7D7E7D7E52FD047D7E7D7D7D7E7D7D7DA8597DFD11%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD11FF7DA8FD11FF7D7D%FD12FF7DFD12FFA87DFD12FF7DA8FD11FFA8A87DFD1CFF527DFD11FFA852%FD11FFA827A8FD11FF277DFD12FF277DFD10FF7E52597DA8FD1AFFA8527D%FD11FF5252FD11FFA827A8FD11FF5252FD11FFA8527DFD11FF527D52FD1C%FFA8FD13FFA8FDFCFFFD1EFF7DA8FD04FFA8A8FFFFFF7D7D7DFFA8FD70FF%2852527D5252277D52527DA85252215252527DFD6CFF7D53522752A85253%527D277DFF7E52527D7DF87DFD6DFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8%FFA8FD30FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:54:02+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T14:25:32+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T14:25:32+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>184</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXifmLy1+cEim2s&#xA;JdXe6VtVa31dNQtkiXndzmxElus1sp9SFo+bFHESgCONWrRVmtnP5q0TyJEZAYtWk1Jbe1TU2a+k&#xA;gtb7VhDbrcOk5Mzw2s61pOdx9o9SqnK2fnug5axpZPcjTLgD/uoHFW/qfnn/AKu+mf8AcMuP+y/F&#xA;XfU/PP8A1d9M/wC4Zcf9l+KoTULvzJpsayaj5k0Syjfnwe4sZYgfTRpXoX1BfsxozHwAJ6Yqhdc1&#xA;fzLos2nJqHmLQ7RNQuPqyPc2ckG/pO44c9QHNi6qvEfzYqmNsnnC6t4rm11zSZ7adRJDPFp07o6M&#xA;KqysuoEEEdCMVaQeb3uZbVNd0hrqFUkmgGnzGRElLCNmUahUBzG3EnrQ+GKqWn3HmbUoTPp3mLRb&#xA;2AFQZbewllQF0WRfiTUCN45FYexB74qt1S98w6Rbrc6r5l0PT7d3WJJrqylhRpGrxQNJqCgsaGgx&#xA;V0Evna5uIhaavpNzZOtwJLyLT53RJreVYjF8N+Ry5Fwd9ihGKoz6n55/6u+mf9wy4/7L8Vd9T88/&#xA;9XfTP+4Zcf8AZfirvqfnn/q76Z/3DLj/ALL8Vd9T88/9XfTP+4Zcf9l+KqCQ/mAb6WBtR0xYEije&#xA;Of8ARtxRndpA6U+v/sBFP+yxVX+p+ef+rvpn/cMuP+y/FXfU/PP/AFd9M/7hlx/2X4q76n55/wCr&#xA;vpn/AHDLj/svxV31Pzz/ANXfTP8AuGXH/Zfiqhbw/mBJNdJJqOmRpDKEhc6bcH1EMSOXH+n7fG7L&#xA;9GKq/wBT88/9XfTP+4Zcf9l+Ku+p+ef+rvpn/cMuP+y/FXfU/PP/AFd9M/7hlx/2X4qo3kXnq3tJ&#xA;7j9K6W3oxtJx/RtwK8VJpX6/7Yqp6ePP9ykxm1HTYHinliCHTbg1VGIR/wDe/wDbSjfTiqK+p+ef&#xA;+rvpn/cMuP8AsvxV31Pzz/1d9M/7hlx/2X4qg9TufOulpbXc+o6bc2zXllbTwJp88UjJd3cVuxSQ&#xA;3sgUqJaiqHFWU4q7FXYqkXnP/jj2/wD209J/7qdtiqe4q7FUr1jzHp+k3+k2V0spl1i4e1tXRCY1&#xA;eOCS4YyyGiIOERoK1PYUDEKvFfzK8+eRPN+kC7mhv7IaPbXEt1e/VLaZ4bbWdLeO15f6VGwW7W6j&#xA;dFUn4lCyBOoVVvOdpoln5N8oQR6vIbR0vbaw1WOz9AvFOykXBZ7zTuUrIAaEyrckmT0X2oVYhd+W&#xA;fykuvL5GoeZXtZptMs+V/Lo07SQIlrpTRubiP1YuYig40WU8TdcK1NHCqvmjy15MuLu4i1Hzr9Tn&#xA;jqZr8aPO9uLiTU9UZpIeM7ywNbztKnN24gKDybl8KqW2vl38t7zy/P63mmXTLcwQqz3GizGW3j/R&#xA;lr6ckbQTTJAblKCUt/vQaog6MVWf+dbXy5ZfltYvZ6k8OgDVdUWGEWL2gtjcyXTND6b3ekS2xtl9&#xA;WEL6gElePpNyUYq8+8w+W/Kn6F0i6tvM0kqwXqwRabd6K7/WA2uXQLSNCTs4M59BSpnEI+EGOiKv&#xA;Tfyb0LypZed9UudE8zDVLo2Sx32mrp89n6RJhKjnMzBFg48Et1AMQbi24xV7TiqXaUtkJ7lraV5D&#xA;IVkYOrgcWLFWBYAPXcch1AHhiqY4q7FXYq7FXYq7FXYq7FXYq7FUJq//AByb3/jBL/xA4qrQV9W4&#xA;rWnqClelPTXp7Yqq4q7FUi85/wDHHt/+2npP/dTtsVT3FXYq7FUi85/8ce3/AO2npP8A3U7bFU9x&#xA;V2KoS+0qwvprKa6i9SXTp/rVm3Jhwm9KSHn8JFf3czrQ1G/jirFm/Jv8uGgMB0ljC6NHJGbq7o6G&#xA;IQqjj1fjWKNFWENX0qD0+NMVR11+W3k660220ySzlSxtI7iCGCG7u4B6F24ee3YxSoXgcqP3TVQA&#xA;ABaADFUJJ+UH5cy2f1OTRle1MaQmJprgqY41tVVTWTcU063H+w92qqh7z8kvyzvI1jutJkmojRGR&#xA;r2+MjJJLLM4eT1+b8pLmRm5E1r7Circn5J/llJA9u+jkwSqEli+tXnB0WJYY1dfWowijjURhvsUq&#xA;tDvirCfMuv6LYXl5Za95YMOmabqt7DcXmk6xdrdBr2xbWLybiqWLNE8bcpIvW61Cq3FaqsX1e4/I&#xA;DVrdTpWk3dveaPKs0d1Zyh2t7GK8+uTzKqXyenG5aRQu00fKqxilMVZ/+WF5+Wlz5lSby9oV/put&#xA;3OnGdmvJTLSxlS0mSZqXVzHW69aMhh8bMj89waqvTW1K3VipSeoNDS3nI28CEpiqFtH0u0Z2giuV&#xA;LqqHlFdOOMdeIAZWoByPTFUfBcxzhigkHHr6kbx9fDmq1xVVxV2KuxV2KuxV2KuxV2KuxVCav/xy&#xA;b3/jBL/xA4qqwBRLc0pUyCtDXf0064qrYq7FUi85/wDHHt/+2npP/dTtsVT3FXYq8U1/zJ+dltBc&#xA;CyiuptSia/XToodOH1a6MV9cxgzFo5TAkdokMlv+9Hqk0LPirLDea9c/l/az6gJZr/8ATVqts99H&#xA;9Tmmt012NbSSeNYY/SeSBY2YekOv2R0xVndu1w0KG4RI5iPjSNzIoPsxWMn/AIEYqqYq7FXYq7FX&#xA;Yq7FXYqgLvy9oF4ZTd6ZaXBnYyTmWCN+btD9XZn5KeRMH7ok/sfD0xVB/wCB/JVCP8P6bQ3H1wj6&#xA;nBT6yP8Ad/2P7z/L64qv0vyrpOmaxd6paJwluba1sY4VSJIre1sw/pQwLGiFVrKxPInsPsqoCqcY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FUv8AMczw+XtUmRebx2k7qniVjYgYqg/Keqz6lbX0s3pM0V28&#xA;SywrIquojRgaSANUcuP0YlU8xV2Ksb87veixsljiia1Op6V60rSMsin9J29OMYjZW+lxirJMVdir&#xA;sVSLzn/xx7f/ALaek/8AdTtsVT3FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FUJq//AByb3/jBL/xA4qq2pJiapJ/eSdf+MjeGKq2KuxVIvOf/ABx7f/tp6T/3U7bFU9xV&#xA;2KuxVIvOf/HHt/8Atp6T/wB1O2xVPcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVQmrb6ZcoPtSxmKMeLy/Ag+lmAxVVtaek1BT95JtWv+7G8cVVsVdiqRec/+OPb/APbT&#xA;0n/up22KvNPy0/Nt9Y88XWk6zrsQuZWu1i0hpPSWGVbkLFbrFcaVp07SLGeIrcuxoSyA/ZVe0Yq8&#xA;p/Nz82PMfk3W4LHSrK3u1exN2sMyM0s0nKRSkZE0T/AIwx9OKU7/ABemKMVU3PmK81r8v7XVJ1iu&#xA;5hrVrDHLYgJDdJa67HBFPAJJZAEnSIOtZSN/tEb4qzu3leWFJHheB2FTDIULL7Hgzr9zHFVTFXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhNU/3mT/jPb/8AJ9MVVbMg24cE&#xA;FXZ3UgUBV3LKfuOKq2KuxVjfne4mSxsoVtpZI5NT0otcqY/TSmp2+zBnWTf/ACVOKvNPI0mj67+Z&#xA;+saZf2Esb6dcX95ZpxvEtf3OqBvUglbUpoZOc8SySpHZopkX4t03Ve34q7FUi85/8ce3/wC2npP/&#xA;AHU7bFU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVB6swW0Vm6LP&#xA;bk99hOnhiqItlZbaJWqWVFDFutQO+KqmKuxVIvOf/HHt/wDtp6T/AN1O2xVKdB8u63F5uOt3Oh6L&#xA;owlt7hL+fTZ2uLq7llkhaMzO1lZtRPTbcudz0xVmeKuxVIvOf/HHt/8Atp6T/wB1O2xVPcVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSrzTL6Wh3ElC3AxtxGxNJVNB88&#xA;QqJ0zURepOw9P9zL6RaGT1UPwK9Q3FP5/DFUZirsVSLzn/xx7f8A7aek/wDdTtsVeZflvohtfzs8&#xA;zXsV5DOssV8Lq3rpyzRM97HJGCLW9vLqWvJ/iuYkKgKoC7IFXtWKvPvzF/N238l6mLOTTXvUjsX1&#xA;C6mDyRqiVdYkVhDLHykeIj946duPI/DiqK1DzE+q+S4tSubU2s1vrdra3VvCXuQJbHXI7WT0mEcb&#xA;yqzQkr+7BI7V2xVmdvOk8KTIHCOKgSI8bfSjhWH0jFVTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYqgNb3s4hUVN1aUr7XUZxVH4q7FXYqxvzveQx2NlbMspkl1PSirLFI0Y&#xA;pqdufikVTGnT9phirzn8tdW0y7/NvU3sbEpDeWt9cW9+9vcwpNAb2N1ks2fUL2CWCV5HdpI7eJS3&#xA;uxXFXtWKpfqHl7QNSuYbrUdMtL25tldLee4gjlkjWQUdUZ1YqGGzU64qlXmTT7DTvLdlZafbRWdn&#xA;BqWkrDbW6LFEg/SluaKiAKoqewxVkuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KpXrjyxvp7wrzmWeQxpSvJhaTkD6TiqI0y4up0nNwPsS8YmEUkPJOCmvGQlvtEiuKoz&#xA;FXYqkXnP/jj2/wD209J/7qdtirB/y8v/ACm3n270GzuNWvNR8vWU1jZ/pE2RhtrSO4SJ4o/q4W53&#xA;aJOJugXKCoNGqyr1XFXYqkXnP/jj2/8A209J/wC6nbYqnuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KpNr9w1vc2U61LQi5kVCKqSluxFe+FURouoyX0d00m/oT+kpMEt&#xA;uSPTR90m+Lq/XpgVMcVdiqRec/8Ajj2//bT0n/up22KvJ/K+l/mTqX5r30d5canpug2V1e3dvdSS&#xA;6s8dwiajGY4HWaZbCjQh441iQj0zy4seLhV7rirGfOX5ieXPKL2seqvK012lzNHDAgdhFZ20l1LI&#xA;1StF4QlR3LHYU5EKoPWPMljqvk+HVQr2UMWsWMF1FdGNXgltNZhgnSRo3kj+CSJt1crTcGmKsut7&#xA;i3uYUnt5UmhkFUljYMrDxDCoOKqmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxVLLmJJ9bjhmXnF9VkbgTUVLBDt2+FyPf6MVRttaQ2wcRcv3jc3Lu8hLUC1q5Y9FGKq2KqbX&#xA;EKzLCzgSuKqnc0/2j9x8MVY/53vrKOxsrSS4iS6m1PSjDbs6iRwNTtySqE8jSnbFXm/5Um/j/N3z&#xA;Xatqsz2MLXzx6P8AW57m2jee/wDV9VI4w9pbsQ28bTGWpJ4qCVVV7ZiqQ+ZPIXkzzLNFPruj21/c&#xA;QKyRTyoPVCMjoU9RaMUpKx4k0DfF9oAhVCa5o+n6P5Ys7CwRo7aPVdNcB5JJnZ5tXglkd5JWeR2e&#xA;R2ZmZiSTirKcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSW6umhvt&#xA;Ru0USSafau4QVqwdVdUqfAwt/wAFhVf5b1ifVILt5fTJt7gwK8IdVYelHJWknxdZKYFTfFVKS0tp&#xA;J0neMGWPZW/VXxpU0r07Yqk/nQgaPbVNK6ppIHz/AEnbYqkPk78tLry15qv9Yk1Z9aivonRZdQVn&#xA;vYC0vqMscwb0vTkJ+NViTdVO++Ks7xV2KpF5z/449v8A9tPSf+6nbYqnuKuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpbpdZL3UJ2apEot6UptFVgful4/RiqZYqh4b+Ca&#xA;5kt05c461JGx4kBqfInv17VxVqW6uEvYoFgZ4XFXmHRev0bUHXrXbpiqRfmFb2c+iWq3RAT9J6Wo&#xA;qxWvPUIFYbEfsk4qybFXYqx/zH5+8peW7hYNavvqjmL12b0ppI44iSqtLJGjpEHZCqcyORFFqcVQ&#xA;2uaxp+seWLO/sHaS2k1XTUBeOSF1eHV4IpEeOVUkRkkRlZWUEEYqynFXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqoX19bWNsbi4LCIMifAjyMWkcIgCIGYkswGwxVB+WpRca&#xA;Nb3oJb6+Ddh2ryZJzzjLVpQ+mVFO3TFUzxVCW9vdpezyyOhhk+yAPiNPs12FOIqOrV6/D0xVdLJq&#xA;AvYlijRrRh+9cn4gd/f5U2NfbFWJfmzZWd35es0uZhCo1PT9yCaq13Ej9OwVuR+WEKzbArsVYj5z&#xA;/LbTPN15FPqWo30dtFbTWh06E25tmW4UpJIVmhmZZSjcRIjBlH2SKmqqnrHlux0ryfDpQZ72GXWL&#xA;Ge6luhGzzy3eswzzvIsaRx/HJK2yoFpsBTFWXW9vb20KQW8SQwxiiRRqFVR4BRQDFVTFXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqoW19a3LyJBJzaKnMUI6kgEVG4qp3GKq+KuxViX5oa&#xA;nbWXlK4WYMxnkt0AjDsyKbmJTLSN4n+AsKfF9qgPXCFTfyjLDN5U0WWGP0oZLC1eKL4vhVoVKr8Z&#xA;Zth4kn3wKm2KoWBdQF3MZnU2x/ulA37Up3G1eVSa9qd1UFd65NHq0VnBbtPEQBJIoAHIkjiGZkG3&#xA;HsG3qDxpiqTfmFbGXT7K5j02Ga7g1TTFiuJxHyQG/hpwYcmHJqKemxOKswxV2KuxVIvOf/HHt/8A&#xA;tp6T/wB1O2xVPcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirSOjorowZGAKsDUEHcE&#xA;EYqo2z2DSTfVWiMnKtx6RUnka/b499u+Kqf6X039JDTPrC/XyvMW+/KlK18OmKvPPzh8+J5au9Mh&#xA;jSG5nngvGeF1aSRAph4svD+7b4iQzUG3XCFTH8wtNvE8n6hfXX+k6jLJackjcxwwol1GaIxVm4oK&#xA;lmI33NB0xQyXyarr5Q0NZEMcg0+1DxsalT6C1UnuRgSmMWoWE1ubiG4ilgBK+rG6svJTRlqCRUEU&#xA;piqEt79L+5lgBkiSOvwUKO3EgElvtJ16bH8QFUJe6TeP5i0+6tyY7O2i4cF2UCp5AUPFQRxqOJrQ&#xA;U405YVUPP97BaaLatNyo2p6XTiCfsajA56f5KnbArJMVdiqyaaGCGSeeRYoYlLyyuQqqqirMzHYA&#xA;DqcVY75k1Cw1Hy3ZXun3MV5Zz6lpLQ3Nu6yxOP0pbiquhKsKjscVTzUtT03S7KS+1O7hsbGGnrXV&#xA;zIkMScmCrydyqirMAKnrirWmappmq2MV/pl3DfWM9fRuraRZYn4sVbi6EqaMpB98VQuh+avLOvic&#xA;6Hq1nqgtiBcfU545/TLVC8/TZqcuB41602xVd/ify1+mv0F+lrL9Njrpf1iL61/d+r/ccvU/u/j+&#xA;z9nfpiq3UPNXlnTdUtNJ1DVrS01S+KrZ2M08aTymQlU4RsQx5MpVTTdtuuKqXmvzj5b8p6aup+Yb&#xA;1bCyeVYElZZHrKyswULGrtXihPTtiqIPmHRh5ePmM3I/QotP0j9cCsR9V9L1vU4gc/7v4qUr7Yqh&#xA;/KfnLy35t019S8v3n12yjlNvJJ6csREqqrlSkyxt9l1PTviqD0H8xvKOveYtT8u6ZeGXV9JaVby3&#xA;aKWP+4kEMpRnVVcJK3A0PX2ocVWzfmV5Mh84r5Ok1Djrx2NuYpRGrGH6wqNMV9IM8VWUcu1OtAVU&#xA;P5z/ADX8leT1sW1i9PG/d1iNuj3AVYePqu/pB+IT1F999gcVR3mvz55c8teXrvXb25Wa1tFRmjt2&#xA;WSRvVkEScVB3q7AVxVvyt568t+ZdCtNZ0+6VLa75BIpysUqujmNkZCag81I9+2Ksf/L/APOzyd50&#xA;ivHt3bTHszGTHqDwRF0lDlGTjI9dom5Dtiq3QPzw8n6z5t1Py5CJYG01Zm/SEph+rzfVphBJ6ZSR&#xA;3+04KfD8S1O3dVLvN/566boPnzRfLNvbJe2+pG1FxfLMB6f1udoBROLFvTC82p4gbYqu/Ob80bry&#xA;v5Zs77SYJTLcX8drI9zDc20YQxSyGjtGrH4oxTj1GKpjP581C5/K59cj0q5fUJtCfUODxfuPVNoZ&#xA;eLMGjJUn+XcjpviqC/KDzx5x8yeUTe3min1hcyR2929bOKdfhZ5GWQzSD947gsistVoPAKsW/ITV&#xA;PzC1C88xQ6jdmSS2FjGGvnaZY+LXSyC3ROAVar0J2p3wqhR5X8xyf85HR3F8He3ctctdwtLDVBpn&#xA;oqQI2jYRiReHIbE/CSTtirI/za/K6+16TQItJjgghtWuUnWCL0wPrHo/HQP8TUi/a28cVZv591PU&#xA;NF8r3d/aTyG4QxIlVSg5yKrEsFHEcW3btiFRml3Goan5WtLudk9W9so5ZUMLVrLCGZSiyKa1bsRg&#xA;VjX5OaTLZeXbk3X7ydrxyjkkgKIYkHGoA2CcagdB364SgI7y5a30fnXWJpqfV5vU9FlJo3F0/a6y&#xA;Fa0PL+7+yvwnFWSXF9NHqcFqqqY5RVmJ37/dTjsP2q7fZOBLHfzP1aXTdBtJY7Ka85apptVhFSPT&#xA;voZQPm5Tgv8AlEYqy/FXYqlvmbRI9d8uapoksrQR6paT2bzJuyCeNoywFRWnKtO+KsZ1Ly22meSY&#xA;9Muro3M1zrdrdXdzAJLUGW/1yO5l9ILI8kSq0xC0kJHjXfFUy8yfl9o2v+X5tDubrUIbeYxN68V7&#xA;O8ytDKsyMrTtMpIeMfaU/fiqH8r/AJXeVfLuhwaRarcXEMCyr6087iRxNK0rhhD6Mf2n7INsVS3y&#xA;X+SHk3yml2tpJe3ovPRDfW5wOC24cRhBbrbjb1T9qprvirY/JHyb/jhvODSXrX5PNLU3FIEcwLbl&#xA;1IUT1KJ3lIriqzXvyM8kaz5i03XZjeW9xphi9O3hn/cyLBMZ0SQSrK/HmTXgy/fviqZ+ZPyo8l+Y&#xA;dPWyvredUjYPFLDczpIhCsmx5kU4OyUIIocVRI/LTyR+h/0MdMV9N+rm0EDyzPSExejxVmcsD6ew&#xA;YHkPHFUP5a/KjyJ5d042FhpoeN2Mksty7zyu5VVLFpCeNVjXZaDbpiqnpf5PflxperXuq2eixpe3&#xA;4kFyzyTSIRK4lcLE7tGlXWvwqKdBttiq/wD5VH+Xn+JU8yjSFXV03WZZZljr6Xo8vRD+lX09q8ff&#xA;riqp5k/KvyD5lEA1nShcfVvU9HhNcQUE3HmD6MkfJT6a7HbFUXrXkHylrWlzaXqWnrNZXAUSxh5E&#xA;J4PzU80ZWBDb7HFV2j+RfKejabBpum6ckFlb8vSi5O5HNi7VZ2ZmqxJ3OKqflf8AL3yf5WhuItA0&#xA;9dPW7bncmF5AzkFioZuVaJzIUdsVVNP8i+VNO12912x06K21bUAy3d3ECkj83DvVlofjdQzeJGKq&#xA;uoeTfLOo6raatfWCXOpWFDZ3UhdnjoajieXY7jwO/XFUZfaLpl/D6F7D9ZhDcxHKzsvLxoTiqqlh&#xA;bJEIk5iMUAX1JKAAcafa6U7Yq1Bp1pBFHDArRRRLwjjR3VVXsAoNNu3hiqlbaHpdrJcSW0PoSXbB&#xA;7l43dGkcftMQQS3viqv9ThJJrJUgivqSVAJqafFtvirf1WKteUnY/wB5J2/2WKtPY27oY35uhryV&#xA;pHYENsQQW3xV31KArxJkK9wZJCDtShq24xVTttKsraMxwB0Ukk/vZCSSKVJLV6Cg8MVXrp9qrvIo&#xA;cSSBRI4kcMwT7NTy3piqxtJsnlWVlcyKoQMZZa0Xp+1uR2PXFUj86abbmys7rnP6seqaVxUXE4jN&#xA;dStx8UXP02691xVk+KuxV2KpJ50gt5vL8rXGpQaTFaz2l4dQuwDBGbS6iuF9WskA4s0QU/GOuKqU&#xA;MPnOeGOeDWtKlhlUPFKmnTsrKwqrKwv6EEdDiq/6n55/6u+mf9wy4/7L8Vd9T88/9XfTP+4Zcf8A&#xA;Zfirvqfnn/q76Z/3DLj/ALL8VSzXG8waetne6t5o0bTYILgelLcWUkEckskUkaxlpNQUGockL1qM&#xA;VTP6n55/6u+mf9wy4/7L8Vd9T88/9XfTP+4Zcf8AZfirvqfnn/q76Z/3DLj/ALL8Vd9T88/9XfTP&#xA;+4Zcf9l+KoO6tPNkWo2dxceYNKhlkEtpawvp8yiaSULMVVTf1dwluSAP2eWKoz6n55/6u+mf9wy4&#xA;/wCy/FXfU/PP/V30z/uGXH/Zfirvqfnn/q76Z/3DLj/svxV31Pzz/wBXfTP+4Zcf9l+Kpap8wp5i&#xA;ktD5n0b9Lz20bDSzZS+r6MLyH1lh/SHOhMpBalNhiqZfU/PP/V30z/uGXH/Zfirvqfnn/q76Z/3D&#xA;Lj/svxV31Pzz/wBXfTP+4Zcf9l+Ku+p+ef8Aq76Z/wBwy4/7L8VS2x/xCNX1Gwg8z6NPqfJLm7sB&#xA;ZStNArRRxpWIahzRGCBhUbk4qmX1Pzz/ANXfTP8AuGXH/Zfirvqfnn/q76Z/3DLj/svxV31Pzz/1&#xA;d9M/7hlx/wBl+Ku+p+ef+rvpn/cMuP8AsvxVJ9JvNWMyabZ+btDu7y4WTUIbdbR5Jnt7iVpPVRF1&#xA;HkYqvxVgKU74qnH1Pzz/ANXfTP8AuGXH/Zfirvqfnn/q76Z/3DLj/svxVD3mhebNQW3hvtWsGtIr&#xA;q1upUg0+aORvqlwlwEV2vZVXk0QFSh2xVkuKuxV2KpR5q0KXW9I+pwXItLmO5tLy2neMzIstldR3&#xA;UfqRK8RdC8IDDmNuhBxVV8s6JHoXlzS9EilaePS7SCzSZ9mcQRrGGIqaV41p2xVMsVdirsVYp+YH&#xA;k7UvNNnaWdrqFtZW0TyNdx3Nm1366SRNCY1kSe1lhDRyOrmNwzK3GoUsGVZWoooG2wptsMVdirsV&#xA;dirFPMnkJda82+XvMn6VubWbQJWeOyRYnt5FkR0kFGTmryc1DNy+yKABqMFWV4q7FXYq7FWHR/l4&#xA;8f5jy+cU1NxFMg9TTSshBkW3+rAhjL6QXiOX9zzr+3xJXFWY4q7FXYq7FWIaX5ANh+Ymq+cBf801&#xA;OIxmw9NhwZo7WMt6hlZKAWIPwxKx5fEzBU4qsvxV2KuxVZPBBcQSW9xGs0EytHLFIoZHRhRlZTUE&#xA;EGhBxVgHlL8pT5e1LSrgat9ZtdLihpD9X9OSS6hsBp3qer6rcYTCOXo8D8fxcu2KvQsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirz78yLTz/PrejT+Wbe4khsSJXEVysVtLIZ4y0d2n1m&#xA;0fgI4yA3CcUd/wB1yCnFWO6d/wBDFSad9ZvV9C/s/WuEsPU0x47xonsuFtJIsY9OOdfrnplSrIOH&#xA;N2IqyqHez/5yH07ThBDJPqV5E8jNLHLpaJOrX10ZmL3SSNE7WxtzbBU9NPiDpsFxVNvM3lX8w9S0&#xA;zTb6Ga+i8wf4du01GO01Oa1t/wBNelbi1pDHPFB9sz7qvH+b9nFUqe2/5yPttFjuUupdQ1Rp7ZJ9&#xA;PJ0eAC2azSW6eKX0SqzLd84Yy/NablGG+KvWfLh1k+XtLOuBRrX1SD9JhOPH616a+tTh8NPUr9nb&#xA;wxVMcVdirsVdirsVdirsVdirsVdirsVf/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:F2D4982351D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:5801456C55D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -195.737 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 195.737 li
272.947 195.737 li
272.947 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
271.338 163.673 mo
268.188 163.673 li
32.3882 163.673 mo
35.5381 163.673 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B854D00D> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWFO+Helvetica /Helvetica findfont ct_VMDictPut/DVPWFO+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]DVPWFO+Helvetica nfDVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf22.3491 166.013 mo( )sh24.2944 166.013 mo(0)sh271.338 136.974 mo
268.188 136.974 li
32.3882 136.974 mo
35.5381 136.974 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFO+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/DVPWFO+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two 205{/.notdef}rp]DVPWFO+Helvetica nfDVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf18.4585 139.31 mo( 20)[1.9458 3.89209 0 ]xsh271.338 110.324 mo
268.188 110.324 li
32.3882 110.324 mo
35.5381 110.324 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFO+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/DVPWFO+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four 203{/.notdef}rp]DVPWFO+Helvetica nfDVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf18.4585 112.662 mo( 40)[1.9458 3.89209 0 ]xsh271.338 83.6738 mo
268.188 83.6738 li
32.3882 83.6738 mo
35.5381 83.6738 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFO+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/DVPWFO+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]DVPWFO+Helvetica nfDVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf18.4585 86.0132 mo( 60)[1.9458 3.89209 0 ]xsh271.338 57.0234 mo
268.188 57.0234 li
32.3882 57.0234 mo
35.5381 57.0234 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFO+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/DVPWFO+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWFO+Helvetica nfDVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf18.4585 59.3569 mo( 80)[1.9458 3.89209 0 ]xsh271.338 30.3237 mo
268.188 30.3237 li
32.3882 30.3237 mo
35.5381 30.3237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFO+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/DVPWFO+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWFO+Helvetica nfDVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf14.5601 32.6616 mo( 100)[1.9458 3.89209 3.89209 0 ]xsh271.338 3.67383 mo
268.188 3.67383 li
32.3882 3.67383 mo
35.5381 3.67383 li
@
DVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf14.5601 6.01318 mo( 120)[1.9458 3.89209 3.89209 0 ]xsh32.3882 3.67383 mo
32.3882 6.82373 li
32.3882 174.324 mo
32.3882 171.173 li
@
DVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf29.4663 183.654 mo( )sh31.4116 183.654 mo(0)sh73.938 3.67383 mo
73.938 6.82373 li
73.938 174.324 mo
73.938 171.173 li
@
DVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf71.0132 183.654 mo( )sh72.9585 183.654 mo(2)sh115.488 3.67383 mo
115.488 6.82373 li
115.488 174.324 mo
115.488 171.173 li
@
DVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf112.568 183.654 mo( )sh114.505 183.654 mo(4)sh157.039 3.67383 mo
157.039 6.82373 li
157.039 174.324 mo
157.039 171.173 li
@
DVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf154.115 183.654 mo( )sh156.06 183.654 mo(6)sh198.639 3.67383 mo
198.639 6.82373 li
198.639 174.324 mo
198.639 171.173 li
@
DVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf195.716 183.654 mo( )sh197.662 183.654 mo(8)sh240.188 3.67383 mo
240.188 6.82373 li
240.188 174.324 mo
240.188 171.173 li
@
DVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf235.326 183.654 mo( 10)[1.94629 3.8916 0 ]xsh32.3882 3.67383 mo
32.3882 174.324 li
271.338 174.324 li
271.338 3.67383 li
32.3882 3.67383 li
32.3882 3.67383 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B64EDF9ABAB3D6B19B5B82CC49C93A7CA17E50CDDB377C52588B81292225BD4FB078DBAFD3981F1169229379F45CD94A50BD016A1B4BBDB2608F6EEE5C> |-/L <1C60D8A8C9B7EF3257710D8E45FDED8109BBDA794C5EEC6C4DCFCB68A628CD21FC17F8D9EBEE> |-/Q <1C60D8A8C9B6FF867A21BA19EF0C570BB6C4AEDB905D3F2E866CC9FA3DA4DB89001662F38F30D2728652C8D9051E873F01CEDD591FAA86E8C1453DEE96F53B577E5FE82E4040A1EC5612925AD2ED28EE5688259CE391C8DBDFBB13899901DA44441379ED058835C290B2F76FB9E066CE7DD0195123BF3B64F660719E609ED50A6A832670AE106AE26BCAB9CA2F09AEAFFCD19F08E6066987FFD9E9B7165DB32A2631FD5F71F415FAB717C14FD4> |-/a <1C60D8A8C9B7EF32A0B922DB529D708010F72F0E62F6CA36E98277AFD8C536E6814BFC8F2509E1B2B1B62A6BDA8D1A6ED67728D80620B28FE439D2F57DCEC5483105FEA93379701773DF23A415938C688874994BCC9880105CE27AC2270A13FA38E952045C5E8C52BEF83397E5FBEEFAB993BE33E385A5E36620F7427AB5E4423C6A4ED6DE24A89F54E52C8FAD8A45FAD4B8F6CFD50EB7D35BF120B079B932E0EE2F7685462C7EC6E9B818F0F9E1F7814D04F2B9AAFA6704B8B745452B73181F38CB34F1645F> |-/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C2021D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495ACA0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCDBE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553A431EECECF30F5581F5F0240E470E520EB9771> |-/g <1C60D8A8C9B7EF326F0C168637D7A49AFFC209EC4BD7378EE8A777DA14ED0433ABB575BAA4A098791F7EC46D250F5BCBA737E6ADD6E1EA28A72C69A1D2534789ED43F588B444BB33EF91B59EF2C4FE743D22BB1490B1C3D985CEC86DB4CAEC82645FBE79A010F5150478D7CD822F749944770C7A9AD08A4C4D068AD8C66DD4250133C698BF087BA2E532A8750CA7F12CE9EAE477EA1DDA085AAD3B0D4A0456D044E2A177014C879AB81F36C957A614E7A4A934> |-/h <1C60D8A8C9B7EF327C10274A017D50D0B79D52072757441F46A9E30449754F52968402CD3736F71D6E09A15E2046342DF42A864D37373E0A213DE941C6F011296A017FBEA0AE0137A10664047E> |-/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA563254EC441C4BC3817B6ABCAA45C3FADDF2A0C1F1BCD1456474D7370B95E3791CB0774B8A788FAD31DAB8E43BE1DDCC8C2722C438CA874C21003F548D691EAB87ADC2BE2D98ABE47C6EE8D76> |-/r <1C60D8A8C9B81F2C150546EE4CBAAF688B47B2BE559294D5CB0899F2E804995909AC00E005B47DD0AC10879B5BC7D5032F4A9752992A333ADEB05A77287D04AF74FB420D308AD8> |-/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B5837088353D9095E679DCF29A> |-/u <1C60D8A8C9B7EF325758E576B7BAA1EFA82EFF7976BE67CE506354F22E3D1B078EDAE7715C61BE16B3CD4B647E2C68818E308CF0BE659E73BA193580128E99771A6AFDBFEB4E9486BE6CBE5D0A068E2F3382B692BCB6E47C62554398C9E56946239346863C679F19> |-/v <1C60D8A8C9B7A73DC53FF2C839B947F31C11DB63CB8CC0B0E0518E01B2A8090086BA063BC631F5BCB6255A1F02FF856D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFO+Helvetica /Encoding getdup 65 /A putdup 76 /L putdup 81 /Q putdup 97 /a putdup 101 /e putdup 103 /g putdup 104 /h putdup 110 /n putdup 114 /r putdup 116 /t putdup 117 /u putdup 118 /v putpop%ADOEndSubsetFont
/DVPWFO+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A 10{/.notdef}rp /L 4{/.notdef}rp /Q 15{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h 5{/.notdef}rp /n 3{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]DVPWFO+Helvetica nfDVPWFO+Helvetica*1 [0 -7 -7 0 0 0 ]msf6.01318 125.201 mo(Average Queue Length)[-4.39063 -3.3252 -3.89258 -2.2627 -3.8916 -3.8916 -3.89258 -1.94531 -5.44629 -3.89209 -3.89209 -3.89209 -3.89209 -1.9458 -3.89209 -3.89209 -3.8916 -3.89209 -1.94629 0 ]ysh3.68799 89.0234 mo
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/S <1C60D8A8C9B64EDF7B9A268599F9CD8C4143A0D599CA838C6F6EFB82E6187B34759773BB4D8C1A41E190DEFABB354DFB531C99308891FC3B7E87957393F9CD35CA8C07371CAABAAF32C24CDAE22C826F234EC2B15BA06DFB54FFCB46EDDF1D277ED530855C8BB0880980568C5F76DE693CEE6004D84A502F3C6B0F55A55095F8FAF71FCF3869AA0D55975A515D287103786F2BEFCA3E30833F771676F4E4B0C078830B99B254F2B4> |-/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67BA95C799E46FC7C8D88E9FFD990A> |-/c <1C60D8A8C9B7A73DE7D498F17521D6359F9ADD96B62202C43AB7E2B6A506D4DE60506EB0B21A851A7E637BA285607D05D1170907CD76EA31977E70CEDA0DED90924EF61C48FC884B70C05F0A56FF474D664DA9646860BA> |-/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D72A7354004D800853CB28271AB7834CF7A2CB132BAFF26EF4E9D89B> |-/k <1C60D8A8C9B7A73D80CF7109CC0D215EA22A4157ED6B6A0BB4695F10BB5E2589EDB37AA550821B636F98A3BF7A038C31B1E52387C42DDA8515D72DB884FC3D981AB6> |-/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C0EAF> |-/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706FE45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC754258679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52DA81BBE025DB4544A719A686DB3A0393D2301EEF9A4AA3D42067FE37BAF> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/p <1C60D8A8C9B7EF321971A47DFE20E88A554AF6C7BF26D7DE21E7159091488A77474EFAE16E717C524A15C920EA73AA47F3FA5326288E9152C7B3C170946831BD532AD7339284A44181A5422DAA5A3944CCAFE4499DA2E6E45119A891F62D3E7DB19C997B84C7105E8154EEFB4DEC8858FC770AEE75D22C6FDC3AA98F517994> |-/s <1C60D8A8C9B7A73DF2FC7D734CFF3CEE44DEE08B4814311F759A12C668E2414B1F185B71CDFB81A4EFE4B67531A5BC3DCC468E7336CC99F93A0F8C9CAAC21479B9DF30E1F20CC55E079066616501132E6501EACD2121153832E7EB63F4284AC03D21E5D5BD534A816A07833E9E45AAF0AF784FB128B27EB090C038A83361862615D53FB49FC431C156AA9A7FD4E2EF50395549EA0CB64112DC> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFO+Helvetica /Encoding getdup 83 /S putdup 84 /T putdup 99 /c putdup 105 /i putdup 107 /k putdup 108 /l putdup 109 /m putdup 111 /o putdup 112 /p putdup 115 /s putpop%ADOEndSubsetFont
/DVPWFO+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A 10{/.notdef}rp /L 4{/.notdef}rp /Q /.notdef /S /T 12{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]DVPWFO+Helvetica nfDVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf131.419 194.162 mo(Service Time)[4.66895 3.8916 2.54004 3.5 1.55371 3.5 3.8916 1.59766 4.27734 1.55371 5.83105 0 ]xsh62.9429 12.6616 mo(1k Simulation Steps)[3.89209 3.5 1.9458 4.66895 1.5542 5.76221 3.89209 1.5542 3.8916 1.94629 1.55371 3.89209 3.89209 1.9458 4.66895 1.94629 3.8916 3.89209 0 ]xsh0.25 lw
44.3433 162.964 mo
44.3433 162.093 43.6377 161.388 42.7681 161.388 cv
41.8989 161.388 41.1934 162.093 41.1934 162.964 cv
41.1934 163.833 41.8989 164.539 42.7681 164.539 cv
43.6377 164.539 44.3433 163.833 44.3433 162.964 cv
@
1 lc
42.7881 162.974 mo
42.7881 162.974 li
@
0 lc
44.3433 162.964 mo
44.3433 162.093 43.6377 161.388 42.7681 161.388 cv
41.8989 161.388 41.1934 162.093 41.1934 162.964 cv
41.1934 163.833 41.8989 164.539 42.7681 164.539 cv
43.6377 164.539 44.3433 163.833 44.3433 162.964 cv
@
1 lc
42.7881 162.974 mo
42.7881 162.974 li
@
0 lc
44.3433 162.964 mo
44.3433 162.093 43.6377 161.388 42.7681 161.388 cv
41.8989 161.388 41.1934 162.093 41.1934 162.964 cv
41.1934 163.833 41.8989 164.539 42.7681 164.539 cv
43.6377 164.539 44.3433 163.833 44.3433 162.964 cv
@
1 lc
42.7881 162.974 mo
42.7881 162.974 li
@
0 lc
44.3433 162.964 mo
44.3433 162.093 43.6377 161.388 42.7681 161.388 cv
41.8989 161.388 41.1934 162.093 41.1934 162.964 cv
41.1934 163.833 41.8989 164.539 42.7681 164.539 cv
43.6377 164.539 44.3433 163.833 44.3433 162.964 cv
@
1 lc
42.7881 162.974 mo
42.7881 162.974 li
@
0 lc
44.3433 162.964 mo
44.3433 162.093 43.6377 161.388 42.7681 161.388 cv
41.8989 161.388 41.1934 162.093 41.1934 162.964 cv
41.1934 163.833 41.8989 164.539 42.7681 164.539 cv
43.6377 164.539 44.3433 163.833 44.3433 162.964 cv
@
1 lc
42.7881 162.974 mo
42.7881 162.974 li
@
0 lc
44.3433 162.964 mo
44.3433 162.093 43.6377 161.388 42.7681 161.388 cv
41.8989 161.388 41.1934 162.093 41.1934 162.964 cv
41.1934 163.833 41.8989 164.539 42.7681 164.539 cv
43.6377 164.539 44.3433 163.833 44.3433 162.964 cv
@
1 lc
42.7881 162.974 mo
42.7881 162.974 li
@
0 lc
44.3433 162.484 mo
44.3433 161.615 43.6377 160.908 42.7681 160.908 cv
41.8989 160.908 41.1934 161.615 41.1934 162.484 cv
41.1934 163.353 41.8989 164.058 42.7681 164.058 cv
43.6377 164.058 44.3433 163.353 44.3433 162.484 cv
@
1 lc
42.7881 162.523 mo
42.7881 162.523 li
@
0 lc
44.3433 162.964 mo
44.3433 162.093 43.6377 161.388 42.7681 161.388 cv
41.8989 161.388 41.1934 162.093 41.1934 162.964 cv
41.1934 163.833 41.8989 164.539 42.7681 164.539 cv
43.6377 164.539 44.3433 163.833 44.3433 162.964 cv
@
1 lc
42.7881 162.974 mo
42.7881 162.974 li
@
0 lc
44.3433 162.964 mo
44.3433 162.093 43.6377 161.388 42.7681 161.388 cv
41.8989 161.388 41.1934 162.093 41.1934 162.964 cv
41.1934 163.833 41.8989 164.539 42.7681 164.539 cv
43.6377 164.539 44.3433 163.833 44.3433 162.964 cv
@
1 lc
42.7881 162.974 mo
42.7881 162.974 li
@
0 lc
44.3433 162.964 mo
44.3433 162.093 43.6377 161.388 42.7681 161.388 cv
41.8989 161.388 41.1934 162.093 41.1934 162.964 cv
41.1934 163.833 41.8989 164.539 42.7681 164.539 cv
43.6377 164.539 44.3433 163.833 44.3433 162.964 cv
@
1 lc
42.7881 162.974 mo
42.7881 162.974 li
@
0 lc
54.6631 162.964 mo
54.6631 162.093 53.9575 161.388 53.0884 161.388 cv
52.2188 161.388 51.5132 162.093 51.5132 162.964 cv
51.5132 163.833 52.2188 164.539 53.0884 164.539 cv
53.9575 164.539 54.6631 163.833 54.6631 162.964 cv
@
1 lc
53.188 162.974 mo
53.188 162.974 li
@
0 lc
54.6631 162.964 mo
54.6631 162.093 53.9575 161.388 53.0884 161.388 cv
52.2188 161.388 51.5132 162.093 51.5132 162.964 cv
51.5132 163.833 52.2188 164.539 53.0884 164.539 cv
53.9575 164.539 54.6631 163.833 54.6631 162.964 cv
@
1 lc
53.188 162.974 mo
53.188 162.974 li
@
0 lc
54.6631 162.964 mo
54.6631 162.093 53.9575 161.388 53.0884 161.388 cv
52.2188 161.388 51.5132 162.093 51.5132 162.964 cv
51.5132 163.833 52.2188 164.539 53.0884 164.539 cv
53.9575 164.539 54.6631 163.833 54.6631 162.964 cv
@
1 lc
53.188 162.974 mo
53.188 162.974 li
@
0 lc
54.6631 162.964 mo
54.6631 162.093 53.9575 161.388 53.0884 161.388 cv
52.2188 161.388 51.5132 162.093 51.5132 162.964 cv
51.5132 163.833 52.2188 164.539 53.0884 164.539 cv
53.9575 164.539 54.6631 163.833 54.6631 162.964 cv
@
1 lc
53.188 162.974 mo
53.188 162.974 li
@
0 lc
54.6631 162.125 mo
54.6631 161.253 53.9575 160.548 53.0884 160.548 cv
52.2188 160.548 51.5132 161.253 51.5132 162.125 cv
51.5132 162.994 52.2188 163.699 53.0884 163.699 cv
53.9575 163.699 54.6631 162.994 54.6631 162.125 cv
@
1 lc
53.188 162.125 mo
53.188 162.125 li
@
0 lc
54.6631 162.964 mo
54.6631 162.093 53.9575 161.388 53.0884 161.388 cv
52.2188 161.388 51.5132 162.093 51.5132 162.964 cv
51.5132 163.833 52.2188 164.539 53.0884 164.539 cv
53.9575 164.539 54.6631 163.833 54.6631 162.964 cv
@
1 lc
53.188 162.974 mo
53.188 162.974 li
@
0 lc
54.6631 162.964 mo
54.6631 162.093 53.9575 161.388 53.0884 161.388 cv
52.2188 161.388 51.5132 162.093 51.5132 162.964 cv
51.5132 163.833 52.2188 164.539 53.0884 164.539 cv
53.9575 164.539 54.6631 163.833 54.6631 162.964 cv
@
1 lc
53.188 162.974 mo
53.188 162.974 li
@
0 lc
54.6631 162.724 mo
54.6631 161.855 53.9575 161.148 53.0884 161.148 cv
52.2188 161.148 51.5132 161.855 51.5132 162.724 cv
51.5132 163.593 52.2188 164.298 53.0884 164.298 cv
53.9575 164.298 54.6631 163.593 54.6631 162.724 cv
@
1 lc
53.188 162.673 mo
53.188 162.673 li
@
0 lc
54.6631 162.964 mo
54.6631 162.093 53.9575 161.388 53.0884 161.388 cv
52.2188 161.388 51.5132 162.093 51.5132 162.964 cv
51.5132 163.833 52.2188 164.539 53.0884 164.539 cv
53.9575 164.539 54.6631 163.833 54.6631 162.964 cv
@
1 lc
53.188 162.974 mo
53.188 162.974 li
@
0 lc
54.6631 162.964 mo
54.6631 162.093 53.9575 161.388 53.0884 161.388 cv
52.2188 161.388 51.5132 162.093 51.5132 162.964 cv
51.5132 163.833 52.2188 164.539 53.0884 164.539 cv
53.9575 164.539 54.6631 163.833 54.6631 162.964 cv
@
1 lc
53.188 162.974 mo
53.188 162.974 li
@
0 lc
65.103 162.964 mo
65.103 162.093 64.3975 161.388 63.5283 161.388 cv
62.6587 161.388 61.9531 162.093 61.9531 162.964 cv
61.9531 163.833 62.6587 164.539 63.5283 164.539 cv
64.3975 164.539 65.103 163.833 65.103 162.964 cv
@
1 lc
63.5381 162.974 mo
63.5381 162.974 li
@
0 lc
65.103 162.724 mo
65.103 161.855 64.3975 161.148 63.5283 161.148 cv
62.6587 161.148 61.9531 161.855 61.9531 162.724 cv
61.9531 163.593 62.6587 164.298 63.5283 164.298 cv
64.3975 164.298 65.103 163.593 65.103 162.724 cv
@
1 lc
63.5381 162.824 mo
63.5381 162.824 li
@
0 lc
65.103 162.724 mo
65.103 161.855 64.3975 161.148 63.5283 161.148 cv
62.6587 161.148 61.9531 161.855 61.9531 162.724 cv
61.9531 163.593 62.6587 164.298 63.5283 164.298 cv
64.3975 164.298 65.103 163.593 65.103 162.724 cv
@
1 lc
63.5381 162.724 mo
63.5381 162.724 li
@
0 lc
65.103 162.724 mo
65.103 161.855 64.3975 161.148 63.5283 161.148 cv
62.6587 161.148 61.9531 161.855 61.9531 162.724 cv
61.9531 163.593 62.6587 164.298 63.5283 164.298 cv
64.3975 164.298 65.103 163.593 65.103 162.724 cv
@
1 lc
63.5381 162.824 mo
63.5381 162.824 li
@
0 lc
65.103 162.724 mo
65.103 161.855 64.3975 161.148 63.5283 161.148 cv
62.6587 161.148 61.9531 161.855 61.9531 162.724 cv
61.9531 163.593 62.6587 164.298 63.5283 164.298 cv
64.3975 164.298 65.103 163.593 65.103 162.724 cv
@
1 lc
63.5381 162.773 mo
63.5381 162.773 li
@
0 lc
65.103 162.724 mo
65.103 161.855 64.3975 161.148 63.5283 161.148 cv
62.6587 161.148 61.9531 161.855 61.9531 162.724 cv
61.9531 163.593 62.6587 164.298 63.5283 164.298 cv
64.3975 164.298 65.103 163.593 65.103 162.724 cv
@
1 lc
63.5381 162.824 mo
63.5381 162.824 li
@
0 lc
65.103 162.724 mo
65.103 161.855 64.3975 161.148 63.5283 161.148 cv
62.6587 161.148 61.9531 161.855 61.9531 162.724 cv
61.9531 163.593 62.6587 164.298 63.5283 164.298 cv
64.3975 164.298 65.103 163.593 65.103 162.724 cv
@
1 lc
63.5381 162.724 mo
63.5381 162.724 li
@
0 lc
65.103 162.964 mo
65.103 162.093 64.3975 161.388 63.5283 161.388 cv
62.6587 161.388 61.9531 162.093 61.9531 162.964 cv
61.9531 163.833 62.6587 164.539 63.5283 164.539 cv
64.3975 164.539 65.103 163.833 65.103 162.964 cv
@
1 lc
63.5381 162.974 mo
63.5381 162.974 li
@
0 lc
65.103 162.964 mo
65.103 162.093 64.3975 161.388 63.5283 161.388 cv
62.6587 161.388 61.9531 162.093 61.9531 162.964 cv
61.9531 163.833 62.6587 164.539 63.5283 164.539 cv
64.3975 164.539 65.103 163.833 65.103 162.964 cv
@
1 lc
63.5381 162.974 mo
63.5381 162.974 li
@
0 lc
65.103 162.964 mo
65.103 162.093 64.3975 161.388 63.5283 161.388 cv
62.6587 161.388 61.9531 162.093 61.9531 162.964 cv
61.9531 163.833 62.6587 164.539 63.5283 164.539 cv
64.3975 164.539 65.103 163.833 65.103 162.964 cv
@
1 lc
63.5381 162.974 mo
63.5381 162.974 li
@
0 lc
75.543 162.484 mo
75.543 161.615 74.8374 160.908 73.9683 160.908 cv
73.0986 160.908 72.3931 161.615 72.3931 162.484 cv
72.3931 163.353 73.0986 164.058 73.9683 164.058 cv
74.8374 164.058 75.543 163.353 75.543 162.484 cv
@
1 lc
73.938 162.523 mo
73.938 162.523 li
@
0 lc
75.543 162.724 mo
75.543 161.855 74.8374 161.148 73.9683 161.148 cv
73.0986 161.148 72.3931 161.855 72.3931 162.724 cv
72.3931 163.593 73.0986 164.298 73.9683 164.298 cv
74.8374 164.298 75.543 163.593 75.543 162.724 cv
@
1 lc
73.938 162.625 mo
73.938 162.625 li
@
0 lc
75.543 162.484 mo
75.543 161.615 74.8374 160.908 73.9683 160.908 cv
73.0986 160.908 72.3931 161.615 72.3931 162.484 cv
72.3931 163.353 73.0986 164.058 73.9683 164.058 cv
74.8374 164.058 75.543 163.353 75.543 162.484 cv
@
1 lc
73.938 162.523 mo
73.938 162.523 li
@
0 lc
75.543 162.964 mo
75.543 162.093 74.8374 161.388 73.9683 161.388 cv
73.0986 161.388 72.3931 162.093 72.3931 162.964 cv
72.3931 163.833 73.0986 164.539 73.9683 164.539 cv
74.8374 164.539 75.543 163.833 75.543 162.964 cv
@
1 lc
73.938 162.974 mo
73.938 162.974 li
@
0 lc
75.543 162.724 mo
75.543 161.855 74.8374 161.148 73.9683 161.148 cv
73.0986 161.148 72.3931 161.855 72.3931 162.724 cv
72.3931 163.593 73.0986 164.298 73.9683 164.298 cv
74.8374 164.298 75.543 163.593 75.543 162.724 cv
@
1 lc
73.938 162.673 mo
73.938 162.673 li
@
0 lc
75.543 162.724 mo
75.543 161.855 74.8374 161.148 73.9683 161.148 cv
73.0986 161.148 72.3931 161.855 72.3931 162.724 cv
72.3931 163.593 73.0986 164.298 73.9683 164.298 cv
74.8374 164.298 75.543 163.593 75.543 162.724 cv
@
1 lc
73.938 162.824 mo
73.938 162.824 li
@
0 lc
75.543 162.244 mo
75.543 161.375 74.8374 160.669 73.9683 160.669 cv
73.0986 160.669 72.3931 161.375 72.3931 162.244 cv
72.3931 163.113 73.0986 163.818 73.9683 163.818 cv
74.8374 163.818 75.543 163.113 75.543 162.244 cv
@
1 lc
73.938 162.324 mo
73.938 162.324 li
@
0 lc
75.543 162.724 mo
75.543 161.855 74.8374 161.148 73.9683 161.148 cv
73.0986 161.148 72.3931 161.855 72.3931 162.724 cv
72.3931 163.593 73.0986 164.298 73.9683 164.298 cv
74.8374 164.298 75.543 163.593 75.543 162.724 cv
@
1 lc
73.938 162.824 mo
73.938 162.824 li
@
0 lc
75.543 162.724 mo
75.543 161.855 74.8374 161.148 73.9683 161.148 cv
73.0986 161.148 72.3931 161.855 72.3931 162.724 cv
72.3931 163.593 73.0986 164.298 73.9683 164.298 cv
74.8374 164.298 75.543 163.593 75.543 162.724 cv
@
1 lc
73.938 162.673 mo
73.938 162.673 li
@
0 lc
75.543 162.484 mo
75.543 161.615 74.8374 160.908 73.9683 160.908 cv
73.0986 160.908 72.3931 161.615 72.3931 162.484 cv
72.3931 163.353 73.0986 164.058 73.9683 164.058 cv
74.8374 164.058 75.543 163.353 75.543 162.484 cv
@
1 lc
73.938 162.423 mo
73.938 162.423 li
@
0 lc
85.8633 162.484 mo
85.8633 161.615 85.1577 160.908 84.2881 160.908 cv
83.4189 160.908 82.7134 161.615 82.7134 162.484 cv
82.7134 163.353 83.4189 164.058 84.2881 164.058 cv
85.1577 164.058 85.8633 163.353 85.8633 162.484 cv
@
1 lc
84.3384 162.574 mo
84.3384 162.574 li
@
0 lc
85.8633 162.484 mo
85.8633 161.615 85.1577 160.908 84.2881 160.908 cv
83.4189 160.908 82.7134 161.615 82.7134 162.484 cv
82.7134 163.353 83.4189 164.058 84.2881 164.058 cv
85.1577 164.058 85.8633 163.353 85.8633 162.484 cv
@
1 lc
84.3384 162.474 mo
84.3384 162.474 li
@
0 lc
85.8633 162.964 mo
85.8633 162.093 85.1577 161.388 84.2881 161.388 cv
83.4189 161.388 82.7134 162.093 82.7134 162.964 cv
82.7134 163.833 83.4189 164.539 84.2881 164.539 cv
85.1577 164.539 85.8633 163.833 85.8633 162.964 cv
@
1 lc
84.3384 162.974 mo
84.3384 162.974 li
@
0 lc
85.8633 162.964 mo
85.8633 162.093 85.1577 161.388 84.2881 161.388 cv
83.4189 161.388 82.7134 162.093 82.7134 162.964 cv
82.7134 163.833 83.4189 164.539 84.2881 164.539 cv
85.1577 164.539 85.8633 163.833 85.8633 162.964 cv
@
1 lc
84.3384 162.875 mo
84.3384 162.875 li
@
0 lc
85.8633 162.724 mo
85.8633 161.855 85.1577 161.148 84.2881 161.148 cv
83.4189 161.148 82.7134 161.855 82.7134 162.724 cv
82.7134 163.593 83.4189 164.298 84.2881 164.298 cv
85.1577 164.298 85.8633 163.593 85.8633 162.724 cv
@
1 lc
84.3384 162.824 mo
84.3384 162.824 li
@
0 lc
85.8633 162.964 mo
85.8633 162.093 85.1577 161.388 84.2881 161.388 cv
83.4189 161.388 82.7134 162.093 82.7134 162.964 cv
82.7134 163.833 83.4189 164.539 84.2881 164.539 cv
85.1577 164.539 85.8633 163.833 85.8633 162.964 cv
@
1 lc
84.3384 162.875 mo
84.3384 162.875 li
@
0 lc
85.8633 162.244 mo
85.8633 161.375 85.1577 160.669 84.2881 160.669 cv
83.4189 160.669 82.7134 161.375 82.7134 162.244 cv
82.7134 163.113 83.4189 163.818 84.2881 163.818 cv
85.1577 163.818 85.8633 163.113 85.8633 162.244 cv
@
1 lc
84.3384 162.324 mo
84.3384 162.324 li
@
0 lc
85.8633 162.964 mo
85.8633 162.093 85.1577 161.388 84.2881 161.388 cv
83.4189 161.388 82.7134 162.093 82.7134 162.964 cv
82.7134 163.833 83.4189 164.539 84.2881 164.539 cv
85.1577 164.539 85.8633 163.833 85.8633 162.964 cv
@
1 lc
84.3384 162.974 mo
84.3384 162.974 li
@
0 lc
85.8633 162.484 mo
85.8633 161.615 85.1577 160.908 84.2881 160.908 cv
83.4189 160.908 82.7134 161.615 82.7134 162.484 cv
82.7134 163.353 83.4189 164.058 84.2881 164.058 cv
85.1577 164.058 85.8633 163.353 85.8633 162.484 cv
@
1 lc
84.3384 162.523 mo
84.3384 162.523 li
@
0 lc
85.8633 162.724 mo
85.8633 161.855 85.1577 161.148 84.2881 161.148 cv
83.4189 161.148 82.7134 161.855 82.7134 162.724 cv
82.7134 163.593 83.4189 164.298 84.2881 164.298 cv
85.1577 164.298 85.8633 163.593 85.8633 162.724 cv
@
1 lc
84.3384 162.824 mo
84.3384 162.824 li
@
0 lc
96.3032 162.003 mo
96.3032 161.134 95.5977 160.429 94.728 160.429 cv
93.8589 160.429 93.1533 161.134 93.1533 162.003 cv
93.1533 162.873 93.8589 163.58 94.728 163.58 cv
95.5977 163.58 96.3032 162.873 96.3032 162.003 cv
@
1 lc
94.7383 161.974 mo
94.7383 161.974 li
@
0 lc
96.3032 162.724 mo
96.3032 161.855 95.5977 161.148 94.728 161.148 cv
93.8589 161.148 93.1533 161.855 93.1533 162.724 cv
93.1533 163.593 93.8589 164.298 94.728 164.298 cv
95.5977 164.298 96.3032 163.593 96.3032 162.724 cv
@
1 lc
94.7383 162.724 mo
94.7383 162.724 li
@
0 lc
96.3032 162.484 mo
96.3032 161.615 95.5977 160.908 94.728 160.908 cv
93.8589 160.908 93.1533 161.615 93.1533 162.484 cv
93.1533 163.353 93.8589 164.058 94.728 164.058 cv
95.5977 164.058 96.3032 163.353 96.3032 162.484 cv
@
1 lc
94.7383 162.423 mo
94.7383 162.423 li
@
0 lc
96.3032 162.363 mo
96.3032 161.494 95.5977 160.789 94.728 160.789 cv
93.8589 160.789 93.1533 161.494 93.1533 162.363 cv
93.1533 163.234 93.8589 163.939 94.728 163.939 cv
95.5977 163.939 96.3032 163.234 96.3032 162.363 cv
@
1 lc
94.7383 162.375 mo
94.7383 162.375 li
@
0 lc
96.3032 162.244 mo
96.3032 161.375 95.5977 160.669 94.728 160.669 cv
93.8589 160.669 93.1533 161.375 93.1533 162.244 cv
93.1533 163.113 93.8589 163.818 94.728 163.818 cv
95.5977 163.818 96.3032 163.113 96.3032 162.244 cv
@
1 lc
94.7383 162.224 mo
94.7383 162.224 li
@
0 lc
96.3032 162.964 mo
96.3032 162.093 95.5977 161.388 94.728 161.388 cv
93.8589 161.388 93.1533 162.093 93.1533 162.964 cv
93.1533 163.833 93.8589 164.539 94.728 164.539 cv
95.5977 164.539 96.3032 163.833 96.3032 162.964 cv
@
1 lc
94.7383 162.974 mo
94.7383 162.974 li
@
0 lc
96.3032 162.724 mo
96.3032 161.855 95.5977 161.148 94.728 161.148 cv
93.8589 161.148 93.1533 161.855 93.1533 162.724 cv
93.1533 163.593 93.8589 164.298 94.728 164.298 cv
95.5977 164.298 96.3032 163.593 96.3032 162.724 cv
@
1 lc
94.7383 162.673 mo
94.7383 162.673 li
@
0 lc
96.3032 162.964 mo
96.3032 162.093 95.5977 161.388 94.728 161.388 cv
93.8589 161.388 93.1533 162.093 93.1533 162.964 cv
93.1533 163.833 93.8589 164.539 94.728 164.539 cv
95.5977 164.539 96.3032 163.833 96.3032 162.964 cv
@
1 lc
94.7383 162.875 mo
94.7383 162.875 li
@
0 lc
96.3032 162.964 mo
96.3032 162.093 95.5977 161.388 94.728 161.388 cv
93.8589 161.388 93.1533 162.093 93.1533 162.964 cv
93.1533 163.833 93.8589 164.539 94.728 164.539 cv
95.5977 164.539 96.3032 163.833 96.3032 162.964 cv
@
1 lc
94.7383 162.974 mo
94.7383 162.974 li
@
0 lc
96.3032 162.724 mo
96.3032 161.855 95.5977 161.148 94.728 161.148 cv
93.8589 161.148 93.1533 161.855 93.1533 162.724 cv
93.1533 163.593 93.8589 164.298 94.728 164.298 cv
95.5977 164.298 96.3032 163.593 96.3032 162.724 cv
@
1 lc
94.7383 162.625 mo
94.7383 162.625 li
@
0 lc
106.743 162.484 mo
106.743 161.615 106.038 160.908 105.168 160.908 cv
104.299 160.908 103.593 161.615 103.593 162.484 cv
103.593 163.353 104.299 164.058 105.168 164.058 cv
106.038 164.058 106.743 163.353 106.743 162.484 cv
@
1 lc
105.088 162.474 mo
105.088 162.474 li
@
0 lc
106.743 161.884 mo
106.743 161.015 106.038 160.308 105.168 160.308 cv
104.299 160.308 103.593 161.015 103.593 161.884 cv
103.593 162.753 104.299 163.458 105.168 163.458 cv
106.038 163.458 106.743 162.753 106.743 161.884 cv
@
1 lc
105.088 161.875 mo
105.088 161.875 li
@
0 lc
106.743 162.484 mo
106.743 161.615 106.038 160.908 105.168 160.908 cv
104.299 160.908 103.593 161.615 103.593 162.484 cv
103.593 163.353 104.299 164.058 105.168 164.058 cv
106.038 164.058 106.743 163.353 106.743 162.484 cv
@
1 lc
105.088 162.523 mo
105.088 162.523 li
@
0 lc
106.743 162.244 mo
106.743 161.375 106.038 160.669 105.168 160.669 cv
104.299 160.669 103.593 161.375 103.593 162.244 cv
103.593 163.113 104.299 163.818 105.168 163.818 cv
106.038 163.818 106.743 163.113 106.743 162.244 cv
@
1 lc
105.088 162.273 mo
105.088 162.273 li
@
0 lc
106.743 162.484 mo
106.743 161.615 106.038 160.908 105.168 160.908 cv
104.299 160.908 103.593 161.615 103.593 162.484 cv
103.593 163.353 104.299 164.058 105.168 164.058 cv
106.038 164.058 106.743 163.353 106.743 162.484 cv
@
1 lc
105.088 162.523 mo
105.088 162.523 li
@
0 lc
106.743 162.724 mo
106.743 161.855 106.038 161.148 105.168 161.148 cv
104.299 161.148 103.593 161.855 103.593 162.724 cv
103.593 163.593 104.299 164.298 105.168 164.298 cv
106.038 164.298 106.743 163.593 106.743 162.724 cv
@
1 lc
105.088 162.773 mo
105.088 162.773 li
@
0 lc
106.743 161.283 mo
106.743 160.414 106.038 159.708 105.168 159.708 cv
104.299 159.708 103.593 160.414 103.593 161.283 cv
103.593 162.154 104.299 162.859 105.168 162.859 cv
106.038 162.859 106.743 162.154 106.743 161.283 cv
@
1 lc
105.088 161.375 mo
105.088 161.375 li
@
0 lc
106.743 161.044 mo
106.743 160.173 106.038 159.468 105.168 159.468 cv
104.299 159.468 103.593 160.173 103.593 161.044 cv
103.593 161.914 104.299 162.619 105.168 162.619 cv
106.038 162.619 106.743 161.914 106.743 161.044 cv
@
1 lc
105.088 161.125 mo
105.088 161.125 li
@
0 lc
106.743 162.724 mo
106.743 161.855 106.038 161.148 105.168 161.148 cv
104.299 161.148 103.593 161.855 103.593 162.724 cv
103.593 163.593 104.299 164.298 105.168 164.298 cv
106.038 164.298 106.743 163.593 106.743 162.724 cv
@
1 lc
105.088 162.824 mo
105.088 162.824 li
@
0 lc
106.743 162.484 mo
106.743 161.615 106.038 160.908 105.168 160.908 cv
104.299 160.908 103.593 161.615 103.593 162.484 cv
103.593 163.353 104.299 164.058 105.168 164.058 cv
106.038 164.058 106.743 163.353 106.743 162.484 cv
@
1 lc
105.088 162.574 mo
105.088 162.574 li
@
0 lc
117.063 162.003 mo
117.063 161.134 116.357 160.429 115.488 160.429 cv
114.619 160.429 113.913 161.134 113.913 162.003 cv
113.913 162.873 114.619 163.58 115.488 163.58 cv
116.357 163.58 117.063 162.873 117.063 162.003 cv
@
1 lc
115.488 162.074 mo
115.488 162.074 li
@
0 lc
117.063 161.283 mo
117.063 160.414 116.357 159.708 115.488 159.708 cv
114.619 159.708 113.913 160.414 113.913 161.283 cv
113.913 162.154 114.619 162.859 115.488 162.859 cv
116.357 162.859 117.063 162.154 117.063 161.283 cv
@
1 lc
115.488 161.273 mo
115.488 161.273 li
@
0 lc
117.063 162.484 mo
117.063 161.615 116.357 160.908 115.488 160.908 cv
114.619 160.908 113.913 161.615 113.913 162.484 cv
113.913 163.353 114.619 164.058 115.488 164.058 cv
116.357 164.058 117.063 163.353 117.063 162.484 cv
@
1 lc
115.488 162.474 mo
115.488 162.474 li
@
0 lc
117.063 161.523 mo
117.063 160.654 116.357 159.949 115.488 159.949 cv
114.619 159.949 113.913 160.654 113.913 161.523 cv
113.913 162.392 114.619 163.099 115.488 163.099 cv
116.357 163.099 117.063 162.392 117.063 161.523 cv
@
1 lc
115.488 161.523 mo
115.488 161.523 li
@
0 lc
117.063 162.244 mo
117.063 161.375 116.357 160.669 115.488 160.669 cv
114.619 160.669 113.913 161.375 113.913 162.244 cv
113.913 163.113 114.619 163.818 115.488 163.818 cv
116.357 163.818 117.063 163.113 117.063 162.244 cv
@
1 lc
115.488 162.224 mo
115.488 162.224 li
@
0 lc
117.063 162.724 mo
117.063 161.855 116.357 161.148 115.488 161.148 cv
114.619 161.148 113.913 161.855 113.913 162.724 cv
113.913 163.593 114.619 164.298 115.488 164.298 cv
116.357 164.298 117.063 163.593 117.063 162.724 cv
@
1 lc
115.488 162.773 mo
115.488 162.773 li
@
0 lc
117.063 162.244 mo
117.063 161.375 116.357 160.669 115.488 160.669 cv
114.619 160.669 113.913 161.375 113.913 162.244 cv
113.913 163.113 114.619 163.818 115.488 163.818 cv
116.357 163.818 117.063 163.113 117.063 162.244 cv
@
1 lc
115.488 162.273 mo
115.488 162.273 li
@
0 lc
117.063 161.283 mo
117.063 160.414 116.357 159.708 115.488 159.708 cv
114.619 159.708 113.913 160.414 113.913 161.283 cv
113.913 162.154 114.619 162.859 115.488 162.859 cv
116.357 162.859 117.063 162.154 117.063 161.283 cv
@
1 lc
115.488 161.224 mo
115.488 161.224 li
@
0 lc
117.063 162.484 mo
117.063 161.615 116.357 160.908 115.488 160.908 cv
114.619 160.908 113.913 161.615 113.913 162.484 cv
113.913 163.353 114.619 164.058 115.488 164.058 cv
116.357 164.058 117.063 163.353 117.063 162.484 cv
@
1 lc
115.488 162.474 mo
115.488 162.474 li
@
0 lc
117.063 162.244 mo
117.063 161.375 116.357 160.669 115.488 160.669 cv
114.619 160.669 113.913 161.375 113.913 162.244 cv
113.913 163.113 114.619 163.818 115.488 163.818 cv
116.357 163.818 117.063 163.113 117.063 162.244 cv
@
1 lc
115.488 162.173 mo
115.488 162.173 li
@
0 lc
127.383 161.763 mo
127.383 160.894 126.678 160.189 125.808 160.189 cv
124.939 160.189 124.233 160.894 124.233 161.763 cv
124.233 162.632 124.939 163.339 125.808 163.339 cv
126.678 163.339 127.383 162.632 127.383 161.763 cv
@
1 lc
125.888 161.824 mo
125.888 161.824 li
@
0 lc
127.383 160.324 mo
127.383 159.455 126.678 158.75 125.808 158.75 cv
124.939 158.75 124.233 159.455 124.233 160.324 cv
124.233 161.193 124.939 161.898 125.808 161.898 cv
126.678 161.898 127.383 161.193 127.383 160.324 cv
@
1 lc
125.888 160.324 mo
125.888 160.324 li
@
0 lc
127.383 162.484 mo
127.383 161.615 126.678 160.908 125.808 160.908 cv
124.939 160.908 124.233 161.615 124.233 162.484 cv
124.233 163.353 124.939 164.058 125.808 164.058 cv
126.678 164.058 127.383 163.353 127.383 162.484 cv
@
1 lc
125.888 162.574 mo
125.888 162.574 li
@
0 lc
127.383 160.804 mo
127.383 159.935 126.678 159.228 125.808 159.228 cv
124.939 159.228 124.233 159.935 124.233 160.804 cv
124.233 161.673 124.939 162.378 125.808 162.378 cv
126.678 162.378 127.383 161.673 127.383 160.804 cv
@
1 lc
125.888 160.824 mo
125.888 160.824 li
@
0 lc
127.383 161.763 mo
127.383 160.894 126.678 160.189 125.808 160.189 cv
124.939 160.189 124.233 160.894 124.233 161.763 cv
124.233 162.632 124.939 163.339 125.808 163.339 cv
126.678 163.339 127.383 162.632 127.383 161.763 cv
@
1 lc
125.888 161.724 mo
125.888 161.724 li
@
0 lc
127.383 162.244 mo
127.383 161.375 126.678 160.669 125.808 160.669 cv
124.939 160.669 124.233 161.375 124.233 162.244 cv
124.233 163.113 124.939 163.818 125.808 163.818 cv
126.678 163.818 127.383 163.113 127.383 162.244 cv
@
1 lc
125.888 162.324 mo
125.888 162.324 li
@
0 lc
127.383 161.283 mo
127.383 160.414 126.678 159.708 125.808 159.708 cv
124.939 159.708 124.233 160.414 124.233 161.283 cv
124.233 162.154 124.939 162.859 125.808 162.859 cv
126.678 162.859 127.383 162.154 127.383 161.283 cv
@
1 lc
125.888 161.324 mo
125.888 161.324 li
@
0 lc
127.383 161.044 mo
127.383 160.173 126.678 159.468 125.808 159.468 cv
124.939 159.468 124.233 160.173 124.233 161.044 cv
124.233 161.914 124.939 162.619 125.808 162.619 cv
126.678 162.619 127.383 161.914 127.383 161.044 cv
@
1 lc
125.888 161.023 mo
125.888 161.023 li
@
0 lc
127.383 162.244 mo
127.383 161.375 126.678 160.669 125.808 160.669 cv
124.939 160.669 124.233 161.375 124.233 162.244 cv
124.233 163.113 124.939 163.818 125.808 163.818 cv
126.678 163.818 127.383 163.113 127.383 162.244 cv
@
1 lc
125.888 162.224 mo
125.888 162.224 li
@
0 lc
127.383 162.484 mo
127.383 161.615 126.678 160.908 125.808 160.908 cv
124.939 160.908 124.233 161.615 124.233 162.484 cv
124.233 163.353 124.939 164.058 125.808 164.058 cv
126.678 164.058 127.383 163.353 127.383 162.484 cv
@
1 lc
125.888 162.423 mo
125.888 162.423 li
@
0 lc
137.943 162.244 mo
137.943 161.375 137.238 160.669 136.368 160.669 cv
135.499 160.669 134.793 161.375 134.793 162.244 cv
134.793 163.113 135.499 163.818 136.368 163.818 cv
137.238 163.818 137.943 163.113 137.943 162.244 cv
@
1 lc
136.288 162.173 mo
136.288 162.173 li
@
0 lc
137.943 162.244 mo
137.943 161.375 137.238 160.669 136.368 160.669 cv
135.499 160.669 134.793 161.375 134.793 162.244 cv
134.793 163.113 135.499 163.818 136.368 163.818 cv
137.238 163.818 137.943 163.113 137.943 162.244 cv
@
1 lc
136.288 162.324 mo
136.288 162.324 li
@
0 lc
137.943 162.363 mo
137.943 161.494 137.238 160.789 136.368 160.789 cv
135.499 160.789 134.793 161.494 134.793 162.363 cv
134.793 163.234 135.499 163.939 136.368 163.939 cv
137.238 163.939 137.943 163.234 137.943 162.363 cv
@
1 lc
136.288 162.375 mo
136.288 162.375 li
@
0 lc
137.943 162.724 mo
137.943 161.855 137.238 161.148 136.368 161.148 cv
135.499 161.148 134.793 161.855 134.793 162.724 cv
134.793 163.593 135.499 164.298 136.368 164.298 cv
137.238 164.298 137.943 163.593 137.943 162.724 cv
@
1 lc
136.288 162.773 mo
136.288 162.773 li
@
0 lc
137.943 160.083 mo
137.943 159.214 137.238 158.509 136.368 158.509 cv
135.499 158.509 134.793 159.214 134.793 160.083 cv
134.793 160.953 135.499 161.658 136.368 161.658 cv
137.238 161.658 137.943 160.953 137.943 160.083 cv
@
1 lc
136.288 160.173 mo
136.288 160.173 li
@
0 lc
137.943 161.763 mo
137.943 160.894 137.238 160.189 136.368 160.189 cv
135.499 160.189 134.793 160.894 134.793 161.763 cv
134.793 162.632 135.499 163.339 136.368 163.339 cv
137.238 163.339 137.943 162.632 137.943 161.763 cv
@
1 lc
136.288 161.724 mo
136.288 161.724 li
@
0 lc
137.943 161.044 mo
137.943 160.173 137.238 159.468 136.368 159.468 cv
135.499 159.468 134.793 160.173 134.793 161.044 cv
134.793 161.914 135.499 162.619 136.368 162.619 cv
137.238 162.619 137.943 161.914 137.943 161.044 cv
@
1 lc
136.288 160.974 mo
136.288 160.974 li
@
0 lc
137.943 161.283 mo
137.943 160.414 137.238 159.708 136.368 159.708 cv
135.499 159.708 134.793 160.414 134.793 161.283 cv
134.793 162.154 135.499 162.859 136.368 162.859 cv
137.238 162.859 137.943 162.154 137.943 161.283 cv
@
1 lc
136.288 161.224 mo
136.288 161.224 li
@
0 lc
137.943 160.564 mo
137.943 159.695 137.238 158.988 136.368 158.988 cv
135.499 158.988 134.793 159.695 134.793 160.564 cv
134.793 161.433 135.499 162.138 136.368 162.138 cv
137.238 162.138 137.943 161.433 137.943 160.564 cv
@
1 lc
136.288 160.474 mo
136.288 160.474 li
@
0 lc
137.943 161.763 mo
137.943 160.894 137.238 160.189 136.368 160.189 cv
135.499 160.189 134.793 160.894 134.793 161.763 cv
134.793 162.632 135.499 163.339 136.368 163.339 cv
137.238 163.339 137.943 162.632 137.943 161.763 cv
@
1 lc
136.288 161.724 mo
136.288 161.724 li
@
0 lc
148.264 162.964 mo
148.264 162.093 147.557 161.388 146.688 161.388 cv
145.818 161.388 145.113 162.093 145.113 162.964 cv
145.113 163.833 145.818 164.539 146.688 164.539 cv
147.557 164.539 148.264 163.833 148.264 162.964 cv
@
1 lc
146.688 162.875 mo
146.688 162.875 li
@
0 lc
148.264 162.003 mo
148.264 161.134 147.557 160.429 146.688 160.429 cv
145.818 160.429 145.113 161.134 145.113 162.003 cv
145.113 162.873 145.818 163.58 146.688 163.58 cv
147.557 163.58 148.264 162.873 148.264 162.003 cv
@
1 lc
146.688 161.974 mo
146.688 161.974 li
@
0 lc
148.264 159.724 mo
148.264 158.855 147.557 158.148 146.688 158.148 cv
145.818 158.148 145.113 158.855 145.113 159.724 cv
145.113 160.593 145.818 161.298 146.688 161.298 cv
147.557 161.298 148.264 160.593 148.264 159.724 cv
@
1 lc
146.688 159.724 mo
146.688 159.724 li
@
0 lc
148.264 161.763 mo
148.264 160.894 147.557 160.189 146.688 160.189 cv
145.818 160.189 145.113 160.894 145.113 161.763 cv
145.113 162.632 145.818 163.339 146.688 163.339 cv
147.557 163.339 148.264 162.632 148.264 161.763 cv
@
1 lc
146.688 161.724 mo
146.688 161.724 li
@
0 lc
148.264 161.044 mo
148.264 160.173 147.557 159.468 146.688 159.468 cv
145.818 159.468 145.113 160.173 145.113 161.044 cv
145.113 161.914 145.818 162.619 146.688 162.619 cv
147.557 162.619 148.264 161.914 148.264 161.044 cv
@
1 lc
146.688 161.125 mo
146.688 161.125 li
@
0 lc
148.264 162.003 mo
148.264 161.134 147.557 160.429 146.688 160.429 cv
145.818 160.429 145.113 161.134 145.113 162.003 cv
145.113 162.873 145.818 163.58 146.688 163.58 cv
147.557 163.58 148.264 162.873 148.264 162.003 cv
@
1 lc
146.688 162.074 mo
146.688 162.074 li
@
0 lc
148.264 162.244 mo
148.264 161.375 147.557 160.669 146.688 160.669 cv
145.818 160.669 145.113 161.375 145.113 162.244 cv
145.113 163.113 145.818 163.818 146.688 163.818 cv
147.557 163.818 148.264 163.113 148.264 162.244 cv
@
1 lc
146.688 162.224 mo
146.688 162.224 li
@
0 lc
148.264 161.523 mo
148.264 160.654 147.557 159.949 146.688 159.949 cv
145.818 159.949 145.113 160.654 145.113 161.523 cv
145.113 162.392 145.818 163.099 146.688 163.099 cv
147.557 163.099 148.264 162.392 148.264 161.523 cv
@
1 lc
146.688 161.574 mo
146.688 161.574 li
@
0 lc
148.264 162.244 mo
148.264 161.375 147.557 160.669 146.688 160.669 cv
145.818 160.669 145.113 161.375 145.113 162.244 cv
145.113 163.113 145.818 163.818 146.688 163.818 cv
147.557 163.818 148.264 163.113 148.264 162.244 cv
@
1 lc
146.688 162.173 mo
146.688 162.173 li
@
0 lc
148.264 161.763 mo
148.264 160.894 147.557 160.189 146.688 160.189 cv
145.818 160.189 145.113 160.894 145.113 161.763 cv
145.113 162.632 145.818 163.339 146.688 163.339 cv
147.557 163.339 148.264 162.632 148.264 161.763 cv
@
1 lc
146.688 161.673 mo
146.688 161.673 li
@
0 lc
158.584 162.484 mo
158.584 161.615 157.877 160.908 157.008 160.908 cv
156.139 160.908 155.434 161.615 155.434 162.484 cv
155.434 163.353 156.139 164.058 157.008 164.058 cv
157.877 164.058 158.584 163.353 158.584 162.484 cv
@
1 lc
157.039 162.474 mo
157.039 162.474 li
@
0 lc
158.584 161.523 mo
158.584 160.654 157.877 159.949 157.008 159.949 cv
156.139 159.949 155.434 160.654 155.434 161.523 cv
155.434 162.392 156.139 163.099 157.008 163.099 cv
157.877 163.099 158.584 162.392 158.584 161.523 cv
@
1 lc
157.039 161.423 mo
157.039 161.423 li
@
0 lc
158.584 162.964 mo
158.584 162.093 157.877 161.388 157.008 161.388 cv
156.139 161.388 155.434 162.093 155.434 162.964 cv
155.434 163.833 156.139 164.539 157.008 164.539 cv
157.877 164.539 158.584 163.833 158.584 162.964 cv
@
1 lc
157.039 162.875 mo
157.039 162.875 li
@
0 lc
158.584 161.283 mo
158.584 160.414 157.877 159.708 157.008 159.708 cv
156.139 159.708 155.434 160.414 155.434 161.283 cv
155.434 162.154 156.139 162.859 157.008 162.859 cv
157.877 162.859 158.584 162.154 158.584 161.283 cv
@
1 lc
157.039 161.273 mo
157.039 161.273 li
@
0 lc
158.584 161.523 mo
158.584 160.654 157.877 159.949 157.008 159.949 cv
156.139 159.949 155.434 160.654 155.434 161.523 cv
155.434 162.392 156.139 163.099 157.008 163.099 cv
157.877 163.099 158.584 162.392 158.584 161.523 cv
@
1 lc
157.039 161.423 mo
157.039 161.423 li
@
0 lc
158.584 160.804 mo
158.584 159.935 157.877 159.228 157.008 159.228 cv
156.139 159.228 155.434 159.935 155.434 160.804 cv
155.434 161.673 156.139 162.378 157.008 162.378 cv
157.877 162.378 158.584 161.673 158.584 160.804 cv
@
1 lc
157.039 160.824 mo
157.039 160.824 li
@
0 lc
158.584 160.804 mo
158.584 159.935 157.877 159.228 157.008 159.228 cv
156.139 159.228 155.434 159.935 155.434 160.804 cv
155.434 161.673 156.139 162.378 157.008 162.378 cv
157.877 162.378 158.584 161.673 158.584 160.804 cv
@
1 lc
157.039 160.724 mo
157.039 160.724 li
@
0 lc
158.584 161.523 mo
158.584 160.654 157.877 159.949 157.008 159.949 cv
156.139 159.949 155.434 160.654 155.434 161.523 cv
155.434 162.392 156.139 163.099 157.008 163.099 cv
157.877 163.099 158.584 162.392 158.584 161.523 cv
@
1 lc
157.039 161.474 mo
157.039 161.474 li
@
0 lc
158.584 159.843 mo
158.584 158.974 157.877 158.269 157.008 158.269 cv
156.139 158.269 155.434 158.974 155.434 159.843 cv
155.434 160.712 156.139 161.419 157.008 161.419 cv
157.877 161.419 158.584 160.712 158.584 159.843 cv
@
1 lc
157.039 159.923 mo
157.039 159.923 li
@
0 lc
158.584 160.324 mo
158.584 159.455 157.877 158.75 157.008 158.75 cv
156.139 158.75 155.434 159.455 155.434 160.324 cv
155.434 161.193 156.139 161.898 157.008 161.898 cv
157.877 161.898 158.584 161.193 158.584 160.324 cv
@
1 lc
157.039 160.375 mo
157.039 160.375 li
@
0 lc
169.023 158.283 mo
169.023 157.414 168.318 156.708 167.447 156.708 cv
166.578 156.708 165.873 157.414 165.873 158.283 cv
165.873 159.154 166.578 159.859 167.447 159.859 cv
168.318 159.859 169.023 159.154 169.023 158.283 cv
@
1 lc
167.438 158.273 mo
167.438 158.273 li
@
0 lc
169.023 161.283 mo
169.023 160.414 168.318 159.708 167.447 159.708 cv
166.578 159.708 165.873 160.414 165.873 161.283 cv
165.873 162.154 166.578 162.859 167.447 162.859 cv
168.318 162.859 169.023 162.154 169.023 161.283 cv
@
1 lc
167.438 161.375 mo
167.438 161.375 li
@
0 lc
169.023 162.244 mo
169.023 161.375 168.318 160.669 167.447 160.669 cv
166.578 160.669 165.873 161.375 165.873 162.244 cv
165.873 163.113 166.578 163.818 167.447 163.818 cv
168.318 163.818 169.023 163.113 169.023 162.244 cv
@
1 lc
167.438 162.324 mo
167.438 162.324 li
@
0 lc
169.023 161.884 mo
169.023 161.015 168.318 160.308 167.447 160.308 cv
166.578 160.308 165.873 161.015 165.873 161.884 cv
165.873 162.753 166.578 163.458 167.447 163.458 cv
168.318 163.458 169.023 162.753 169.023 161.884 cv
@
1 lc
167.438 161.875 mo
167.438 161.875 li
@
0 lc
169.023 160.683 mo
169.023 159.814 168.318 159.109 167.447 159.109 cv
166.578 159.109 165.873 159.814 165.873 160.683 cv
165.873 161.552 166.578 162.259 167.447 162.259 cv
168.318 162.259 169.023 161.552 169.023 160.683 cv
@
1 lc
167.438 160.673 mo
167.438 160.673 li
@
0 lc
169.023 162.003 mo
169.023 161.134 168.318 160.429 167.447 160.429 cv
166.578 160.429 165.873 161.134 165.873 162.003 cv
165.873 162.873 166.578 163.58 167.447 163.58 cv
168.318 163.58 169.023 162.873 169.023 162.003 cv
@
1 lc
167.438 162.074 mo
167.438 162.074 li
@
0 lc
169.023 161.523 mo
169.023 160.654 168.318 159.949 167.447 159.949 cv
166.578 159.949 165.873 160.654 165.873 161.523 cv
165.873 162.392 166.578 163.099 167.447 163.099 cv
168.318 163.099 169.023 162.392 169.023 161.523 cv
@
1 lc
167.438 161.625 mo
167.438 161.625 li
@
0 lc
169.023 160.683 mo
169.023 159.814 168.318 159.109 167.447 159.109 cv
166.578 159.109 165.873 159.814 165.873 160.683 cv
165.873 161.552 166.578 162.259 167.447 162.259 cv
168.318 162.259 169.023 161.552 169.023 160.683 cv
@
1 lc
167.438 160.673 mo
167.438 160.673 li
@
0 lc
169.023 160.083 mo
169.023 159.214 168.318 158.509 167.447 158.509 cv
166.578 158.509 165.873 159.214 165.873 160.083 cv
165.873 160.953 166.578 161.658 167.447 161.658 cv
168.318 161.658 169.023 160.953 169.023 160.083 cv
@
1 lc
167.438 160.074 mo
167.438 160.074 li
@
0 lc
169.023 162.003 mo
169.023 161.134 168.318 160.429 167.447 160.429 cv
166.578 160.429 165.873 161.134 165.873 162.003 cv
165.873 162.873 166.578 163.58 167.447 163.58 cv
168.318 163.58 169.023 162.873 169.023 162.003 cv
@
1 lc
167.438 161.974 mo
167.438 161.974 li
@
0 lc
179.463 159.603 mo
179.463 158.734 178.758 158.029 177.889 158.029 cv
177.02 158.029 176.313 158.734 176.313 159.603 cv
176.313 160.472 177.02 161.179 177.889 161.179 cv
178.758 161.179 179.463 160.472 179.463 159.603 cv
@
1 lc
177.838 159.625 mo
177.838 159.625 li
@
0 lc
179.463 156.484 mo
179.463 155.615 178.758 154.908 177.889 154.908 cv
177.02 154.908 176.313 155.615 176.313 156.484 cv
176.313 157.353 177.02 158.058 177.889 158.058 cv
178.758 158.058 179.463 157.353 179.463 156.484 cv
@
1 lc
177.838 156.574 mo
177.838 156.574 li
@
0 lc
179.463 160.324 mo
179.463 159.455 178.758 158.75 177.889 158.75 cv
177.02 158.75 176.313 159.455 176.313 160.324 cv
176.313 161.193 177.02 161.898 177.889 161.898 cv
178.758 161.898 179.463 161.193 179.463 160.324 cv
@
1 lc
177.838 160.324 mo
177.838 160.324 li
@
0 lc
179.463 162.003 mo
179.463 161.134 178.758 160.429 177.889 160.429 cv
177.02 160.429 176.313 161.134 176.313 162.003 cv
176.313 162.873 177.02 163.58 177.889 163.58 cv
178.758 163.58 179.463 162.873 179.463 162.003 cv
@
1 lc
177.838 161.923 mo
177.838 161.923 li
@
0 lc
179.463 159.603 mo
179.463 158.734 178.758 158.029 177.889 158.029 cv
177.02 158.029 176.313 158.734 176.313 159.603 cv
176.313 160.472 177.02 161.179 177.889 161.179 cv
178.758 161.179 179.463 160.472 179.463 159.603 cv
@
1 lc
177.838 159.625 mo
177.838 159.625 li
@
0 lc
179.463 159.843 mo
179.463 158.974 178.758 158.269 177.889 158.269 cv
177.02 158.269 176.313 158.974 176.313 159.843 cv
176.313 160.712 177.02 161.419 177.889 161.419 cv
178.758 161.419 179.463 160.712 179.463 159.843 cv
@
1 lc
177.838 159.773 mo
177.838 159.773 li
@
0 lc
179.463 159.964 mo
179.463 159.093 178.758 158.388 177.889 158.388 cv
177.02 158.388 176.313 159.093 176.313 159.964 cv
176.313 160.833 177.02 161.539 177.889 161.539 cv
178.758 161.539 179.463 160.833 179.463 159.964 cv
@
1 lc
177.838 159.974 mo
177.838 159.974 li
@
0 lc
179.463 161.283 mo
179.463 160.414 178.758 159.708 177.889 159.708 cv
177.02 159.708 176.313 160.414 176.313 161.283 cv
176.313 162.154 177.02 162.859 177.889 162.859 cv
178.758 162.859 179.463 162.154 179.463 161.283 cv
@
1 lc
177.838 161.224 mo
177.838 161.224 li
@
0 lc
179.463 157.683 mo
179.463 156.814 178.758 156.109 177.889 156.109 cv
177.02 156.109 176.313 156.814 176.313 157.683 cv
176.313 158.552 177.02 159.259 177.889 159.259 cv
178.758 159.259 179.463 158.552 179.463 157.683 cv
@
1 lc
177.838 157.724 mo
177.838 157.724 li
@
0 lc
179.463 159.363 mo
179.463 158.494 178.758 157.789 177.889 157.789 cv
177.02 157.789 176.313 158.494 176.313 159.363 cv
176.313 160.234 177.02 160.939 177.889 160.939 cv
178.758 160.939 179.463 160.234 179.463 159.363 cv
@
1 lc
177.838 159.273 mo
177.838 159.273 li
@
0 lc
189.783 160.324 mo
189.783 159.455 189.078 158.75 188.209 158.75 cv
187.338 158.75 186.633 159.455 186.633 160.324 cv
186.633 161.193 187.338 161.898 188.209 161.898 cv
189.078 161.898 189.783 161.193 189.783 160.324 cv
@
1 lc
188.238 160.423 mo
188.238 160.423 li
@
0 lc
189.783 160.564 mo
189.783 159.695 189.078 158.988 188.209 158.988 cv
187.338 158.988 186.633 159.695 186.633 160.564 cv
186.633 161.433 187.338 162.138 188.209 162.138 cv
189.078 162.138 189.783 161.433 189.783 160.564 cv
@
1 lc
188.238 160.474 mo
188.238 160.474 li
@
0 lc
189.783 158.884 mo
189.783 158.015 189.078 157.308 188.209 157.308 cv
187.338 157.308 186.633 158.015 186.633 158.884 cv
186.633 159.753 187.338 160.458 188.209 160.458 cv
189.078 160.458 189.783 159.753 189.783 158.884 cv
@
1 lc
188.238 158.923 mo
188.238 158.923 li
@
0 lc
189.783 160.683 mo
189.783 159.814 189.078 159.109 188.209 159.109 cv
187.338 159.109 186.633 159.814 186.633 160.683 cv
186.633 161.552 187.338 162.259 188.209 162.259 cv
189.078 162.259 189.783 161.552 189.783 160.683 cv
@
1 lc
188.238 160.673 mo
188.238 160.673 li
@
0 lc
189.783 157.683 mo
189.783 156.814 189.078 156.109 188.209 156.109 cv
187.338 156.109 186.633 156.814 186.633 157.683 cv
186.633 158.552 187.338 159.259 188.209 159.259 cv
189.078 159.259 189.783 158.552 189.783 157.683 cv
@
1 lc
188.238 157.724 mo
188.238 157.724 li
@
0 lc
189.783 154.683 mo
189.783 153.814 189.078 153.109 188.209 153.109 cv
187.338 153.109 186.633 153.814 186.633 154.683 cv
186.633 155.552 187.338 156.259 188.209 156.259 cv
189.078 156.259 189.783 155.552 189.783 154.683 cv
@
1 lc
188.238 154.673 mo
188.238 154.673 li
@
0 lc
189.783 161.164 mo
189.783 160.294 189.078 159.589 188.209 159.589 cv
187.338 159.589 186.633 160.294 186.633 161.164 cv
186.633 162.033 187.338 162.738 188.209 162.738 cv
189.078 162.738 189.783 162.033 189.783 161.164 cv
@
1 lc
188.238 161.173 mo
188.238 161.173 li
@
0 lc
189.783 160.564 mo
189.783 159.695 189.078 158.988 188.209 158.988 cv
187.338 158.988 186.633 159.695 186.633 160.564 cv
186.633 161.433 187.338 162.138 188.209 162.138 cv
189.078 162.138 189.783 161.433 189.783 160.564 cv
@
1 lc
188.238 160.625 mo
188.238 160.625 li
@
0 lc
189.783 159.843 mo
189.783 158.974 189.078 158.269 188.209 158.269 cv
187.338 158.269 186.633 158.974 186.633 159.843 cv
186.633 160.712 187.338 161.419 188.209 161.419 cv
189.078 161.419 189.783 160.712 189.783 159.843 cv
@
1 lc
188.238 159.824 mo
188.238 159.824 li
@
0 lc
189.783 160.324 mo
189.783 159.455 189.078 158.75 188.209 158.75 cv
187.338 158.75 186.633 159.455 186.633 160.324 cv
186.633 161.193 187.338 161.898 188.209 161.898 cv
189.078 161.898 189.783 161.193 189.783 160.324 cv
@
1 lc
188.238 160.324 mo
188.238 160.324 li
@
0 lc
200.223 157.443 mo
200.223 156.574 199.518 155.869 198.648 155.869 cv
197.779 155.869 197.072 156.574 197.072 157.443 cv
197.072 158.314 197.779 159.019 198.648 159.019 cv
199.518 159.019 200.223 158.314 200.223 157.443 cv
@
1 lc
198.639 157.474 mo
198.639 157.474 li
@
0 lc
200.223 161.283 mo
200.223 160.414 199.518 159.708 198.648 159.708 cv
197.779 159.708 197.072 160.414 197.072 161.283 cv
197.072 162.154 197.779 162.859 198.648 162.859 cv
199.518 162.859 200.223 162.154 200.223 161.283 cv
@
1 lc
198.639 161.273 mo
198.639 161.273 li
@
0 lc
200.223 160.564 mo
200.223 159.695 199.518 158.988 198.648 158.988 cv
197.779 158.988 197.072 159.695 197.072 160.564 cv
197.072 161.433 197.779 162.138 198.648 162.138 cv
199.518 162.138 200.223 161.433 200.223 160.564 cv
@
1 lc
198.639 160.474 mo
198.639 160.474 li
@
0 lc
200.223 161.763 mo
200.223 160.894 199.518 160.189 198.648 160.189 cv
197.779 160.189 197.072 160.894 197.072 161.763 cv
197.072 162.632 197.779 163.339 198.648 163.339 cv
199.518 163.339 200.223 162.632 200.223 161.763 cv
@
1 lc
198.639 161.724 mo
198.639 161.724 li
@
0 lc
200.223 159.964 mo
200.223 159.093 199.518 158.388 198.648 158.388 cv
197.779 158.388 197.072 159.093 197.072 159.964 cv
197.072 160.833 197.779 161.539 198.648 161.539 cv
199.518 161.539 200.223 160.833 200.223 159.964 cv
@
1 lc
198.639 159.974 mo
198.639 159.974 li
@
0 lc
200.223 157.083 mo
200.223 156.214 199.518 155.509 198.648 155.509 cv
197.779 155.509 197.072 156.214 197.072 157.083 cv
197.072 157.953 197.779 158.658 198.648 158.658 cv
199.518 158.658 200.223 157.953 200.223 157.083 cv
@
1 lc
198.639 157.074 mo
198.639 157.074 li
@
0 lc
200.223 160.683 mo
200.223 159.814 199.518 159.109 198.648 159.109 cv
197.779 159.109 197.072 159.814 197.072 160.683 cv
197.072 161.552 197.779 162.259 198.648 162.259 cv
199.518 162.259 200.223 161.552 200.223 160.683 cv
@
1 lc
198.639 160.673 mo
198.639 160.673 li
@
0 lc
200.223 157.923 mo
200.223 157.054 199.518 156.349 198.648 156.349 cv
197.779 156.349 197.072 157.054 197.072 157.923 cv
197.072 158.792 197.779 159.5 198.648 159.5 cv
199.518 159.5 200.223 158.792 200.223 157.923 cv
@
1 lc
198.639 157.974 mo
198.639 157.974 li
@
0 lc
200.223 161.523 mo
200.223 160.654 199.518 159.949 198.648 159.949 cv
197.779 159.949 197.072 160.654 197.072 161.523 cv
197.072 162.392 197.779 163.099 198.648 163.099 cv
199.518 163.099 200.223 162.392 200.223 161.523 cv
@
1 lc
198.639 161.625 mo
198.639 161.625 li
@
0 lc
200.223 144.484 mo
200.223 143.615 199.518 142.908 198.648 142.908 cv
197.779 142.908 197.072 143.615 197.072 144.484 cv
197.072 145.353 197.779 146.058 198.648 146.058 cv
199.518 146.058 200.223 145.353 200.223 144.484 cv
@
1 lc
198.639 144.574 mo
198.639 144.574 li
@
0 lc
210.664 160.564 mo
210.664 159.695 209.957 158.988 209.088 158.988 cv
208.219 158.988 207.514 159.695 207.514 160.564 cv
207.514 161.433 208.219 162.138 209.088 162.138 cv
209.957 162.138 210.664 161.433 210.664 160.564 cv
@
1 lc
208.988 160.625 mo
208.988 160.625 li
@
0 lc
210.664 158.884 mo
210.664 158.015 209.957 157.308 209.088 157.308 cv
208.219 157.308 207.514 158.015 207.514 158.884 cv
207.514 159.753 208.219 160.458 209.088 160.458 cv
209.957 160.458 210.664 159.753 210.664 158.884 cv
@
1 lc
208.988 158.974 mo
208.988 158.974 li
@
0 lc
210.664 157.683 mo
210.664 156.814 209.957 156.109 209.088 156.109 cv
208.219 156.109 207.514 156.814 207.514 157.683 cv
207.514 158.552 208.219 159.259 209.088 159.259 cv
209.957 159.259 210.664 158.552 210.664 157.683 cv
@
1 lc
208.988 157.673 mo
208.988 157.673 li
@
0 lc
210.664 160.564 mo
210.664 159.695 209.957 158.988 209.088 158.988 cv
208.219 158.988 207.514 159.695 207.514 160.564 cv
207.514 161.433 208.219 162.138 209.088 162.138 cv
209.957 162.138 210.664 161.433 210.664 160.564 cv
@
1 lc
208.988 160.523 mo
208.988 160.523 li
@
0 lc
210.664 158.404 mo
210.664 157.535 209.957 156.83 209.088 156.83 cv
208.219 156.83 207.514 157.535 207.514 158.404 cv
207.514 159.273 208.219 159.978 209.088 159.978 cv
209.957 159.978 210.664 159.273 210.664 158.404 cv
@
1 lc
208.988 158.474 mo
208.988 158.474 li
@
0 lc
210.664 154.324 mo
210.664 153.455 209.957 152.75 209.088 152.75 cv
208.219 152.75 207.514 153.455 207.514 154.324 cv
207.514 155.193 208.219 155.898 209.088 155.898 cv
209.957 155.898 210.664 155.193 210.664 154.324 cv
@
1 lc
208.988 154.273 mo
208.988 154.273 li
@
0 lc
210.664 159.603 mo
210.664 158.734 209.957 158.029 209.088 158.029 cv
208.219 158.029 207.514 158.734 207.514 159.603 cv
207.514 160.472 208.219 161.179 209.088 161.179 cv
209.957 161.179 210.664 160.472 210.664 159.603 cv
@
1 lc
208.988 159.625 mo
208.988 159.625 li
@
0 lc
210.664 154.083 mo
210.664 153.214 209.957 152.509 209.088 152.509 cv
208.219 152.509 207.514 153.214 207.514 154.083 cv
207.514 154.953 208.219 155.658 209.088 155.658 cv
209.957 155.658 210.664 154.953 210.664 154.083 cv
@
1 lc
208.988 154.023 mo
208.988 154.023 li
@
0 lc
210.664 159.843 mo
210.664 158.974 209.957 158.269 209.088 158.269 cv
208.219 158.269 207.514 158.974 207.514 159.843 cv
207.514 160.712 208.219 161.419 209.088 161.419 cv
209.957 161.419 210.664 160.712 210.664 159.843 cv
@
1 lc
208.988 159.824 mo
208.988 159.824 li
@
0 lc
210.664 159.843 mo
210.664 158.974 209.957 158.269 209.088 158.269 cv
208.219 158.269 207.514 158.974 207.514 159.843 cv
207.514 160.712 208.219 161.419 209.088 161.419 cv
209.957 161.419 210.664 160.712 210.664 159.843 cv
@
1 lc
208.988 159.824 mo
208.988 159.824 li
@
0 lc
220.982 159.603 mo
220.982 158.734 220.277 158.029 219.408 158.029 cv
218.539 158.029 217.834 158.734 217.834 159.603 cv
217.834 160.472 218.539 161.179 219.408 161.179 cv
220.277 161.179 220.982 160.472 220.982 159.603 cv
@
1 lc
219.389 159.523 mo
219.389 159.523 li
@
0 lc
220.982 156.484 mo
220.982 155.615 220.277 154.908 219.408 154.908 cv
218.539 154.908 217.834 155.615 217.834 156.484 cv
217.834 157.353 218.539 158.058 219.408 158.058 cv
220.277 158.058 220.982 157.353 220.982 156.484 cv
@
1 lc
219.389 156.474 mo
219.389 156.474 li
@
0 lc
220.982 155.763 mo
220.982 154.894 220.277 154.189 219.408 154.189 cv
218.539 154.189 217.834 154.894 217.834 155.763 cv
217.834 156.632 218.539 157.339 219.408 157.339 cv
220.277 157.339 220.982 156.632 220.982 155.763 cv
@
1 lc
219.389 155.824 mo
219.389 155.824 li
@
0 lc
220.982 157.205 mo
220.982 156.333 220.277 155.628 219.408 155.628 cv
218.539 155.628 217.834 156.333 217.834 157.205 cv
217.834 158.074 218.539 158.779 219.408 158.779 cv
220.277 158.779 220.982 158.074 220.982 157.205 cv
@
1 lc
219.389 157.224 mo
219.389 157.224 li
@
0 lc
220.982 158.283 mo
220.982 157.414 220.277 156.708 219.408 156.708 cv
218.539 156.708 217.834 157.414 217.834 158.283 cv
217.834 159.154 218.539 159.859 219.408 159.859 cv
220.277 159.859 220.982 159.154 220.982 158.283 cv
@
1 lc
219.389 158.273 mo
219.389 158.273 li
@
0 lc
220.982 157.683 mo
220.982 156.814 220.277 156.109 219.408 156.109 cv
218.539 156.109 217.834 156.814 217.834 157.683 cv
217.834 158.552 218.539 159.259 219.408 159.259 cv
220.277 159.259 220.982 158.552 220.982 157.683 cv
@
1 lc
219.389 157.773 mo
219.389 157.773 li
@
0 lc
220.982 153.603 mo
220.982 152.734 220.277 152.029 219.408 152.029 cv
218.539 152.029 217.834 152.734 217.834 153.603 cv
217.834 154.472 218.539 155.179 219.408 155.179 cv
220.277 155.179 220.982 154.472 220.982 153.603 cv
@
1 lc
219.389 153.574 mo
219.389 153.574 li
@
0 lc
220.982 150.724 mo
220.982 149.855 220.277 149.148 219.408 149.148 cv
218.539 149.148 217.834 149.855 217.834 150.724 cv
217.834 151.593 218.539 152.298 219.408 152.298 cv
220.277 152.298 220.982 151.593 220.982 150.724 cv
@
1 lc
219.389 150.625 mo
219.389 150.625 li
@
0 lc
220.982 156.724 mo
220.982 155.855 220.277 155.148 219.408 155.148 cv
218.539 155.148 217.834 155.855 217.834 156.724 cv
217.834 157.593 218.539 158.298 219.408 158.298 cv
220.277 158.298 220.982 157.593 220.982 156.724 cv
@
1 lc
219.389 156.673 mo
219.389 156.673 li
@
0 lc
220.982 155.763 mo
220.982 154.894 220.277 154.189 219.408 154.189 cv
218.539 154.189 217.834 154.894 217.834 155.763 cv
217.834 156.632 218.539 157.339 219.408 157.339 cv
220.277 157.339 220.982 156.632 220.982 155.763 cv
@
1 lc
219.389 155.824 mo
219.389 155.824 li
@
0 lc
231.303 160.324 mo
231.303 159.455 230.598 158.75 229.729 158.75 cv
228.859 158.75 228.152 159.455 228.152 160.324 cv
228.152 161.193 228.859 161.898 229.729 161.898 cv
230.598 161.898 231.303 161.193 231.303 160.324 cv
@
1 lc
229.789 160.273 mo
229.789 160.273 li
@
0 lc
231.303 156.964 mo
231.303 156.093 230.598 155.388 229.729 155.388 cv
228.859 155.388 228.152 156.093 228.152 156.964 cv
228.152 157.833 228.859 158.539 229.729 158.539 cv
230.598 158.539 231.303 157.833 231.303 156.964 cv
@
1 lc
229.789 157.023 mo
229.789 157.023 li
@
0 lc
231.303 157.683 mo
231.303 156.814 230.598 156.109 229.729 156.109 cv
228.859 156.109 228.152 156.814 228.152 157.683 cv
228.152 158.552 228.859 159.259 229.729 159.259 cv
230.598 159.259 231.303 158.552 231.303 157.683 cv
@
1 lc
229.789 157.773 mo
229.789 157.773 li
@
0 lc
231.303 161.044 mo
231.303 160.173 230.598 159.468 229.729 159.468 cv
228.859 159.468 228.152 160.173 228.152 161.044 cv
228.152 161.914 228.859 162.619 229.729 162.619 cv
230.598 162.619 231.303 161.914 231.303 161.044 cv
@
1 lc
229.789 161.125 mo
229.789 161.125 li
@
0 lc
231.303 160.083 mo
231.303 159.214 230.598 158.509 229.729 158.509 cv
228.859 158.509 228.152 159.214 228.152 160.083 cv
228.152 160.953 228.859 161.658 229.729 161.658 cv
230.598 161.658 231.303 160.953 231.303 160.083 cv
@
1 lc
229.789 160.023 mo
229.789 160.023 li
@
0 lc
231.303 158.884 mo
231.303 158.015 230.598 157.308 229.729 157.308 cv
228.859 157.308 228.152 158.015 228.152 158.884 cv
228.152 159.753 228.859 160.458 229.729 160.458 cv
230.598 160.458 231.303 159.753 231.303 158.884 cv
@
1 lc
229.789 158.824 mo
229.789 158.824 li
@
0 lc
231.303 151.564 mo
231.303 150.695 230.598 149.988 229.729 149.988 cv
228.859 149.988 228.152 150.695 228.152 151.564 cv
228.152 152.433 228.859 153.138 229.729 153.138 cv
230.598 153.138 231.303 152.433 231.303 151.564 cv
@
1 lc
229.789 151.574 mo
229.789 151.574 li
@
0 lc
231.303 150.244 mo
231.303 149.375 230.598 148.669 229.729 148.669 cv
228.859 148.669 228.152 149.375 228.152 150.244 cv
228.152 151.113 228.859 151.818 229.729 151.818 cv
230.598 151.818 231.303 151.113 231.303 150.244 cv
@
1 lc
229.789 150.224 mo
229.789 150.224 li
@
0 lc
231.303 150.964 mo
231.303 150.093 230.598 149.388 229.729 149.388 cv
228.859 149.388 228.152 150.093 228.152 150.964 cv
228.152 151.833 228.859 152.539 229.729 152.539 cv
230.598 152.539 231.303 151.833 231.303 150.964 cv
@
1 lc
229.789 150.923 mo
229.789 150.923 li
@
0 lc
231.303 160.083 mo
231.303 159.214 230.598 158.509 229.729 158.509 cv
228.859 158.509 228.152 159.214 228.152 160.083 cv
228.152 160.953 228.859 161.658 229.729 161.658 cv
230.598 161.658 231.303 160.953 231.303 160.083 cv
@
1 lc
229.789 160.173 mo
229.789 160.173 li
@
0 lc
241.863 159.125 mo
241.863 158.253 241.158 157.548 240.289 157.548 cv
239.418 157.548 238.713 158.253 238.713 159.125 cv
238.713 159.994 239.418 160.699 240.289 160.699 cv
241.158 160.699 241.863 159.994 241.863 159.125 cv
@
1 lc
240.188 159.125 mo
240.188 159.125 li
@
0 lc
241.863 154.683 mo
241.863 153.814 241.158 153.109 240.289 153.109 cv
239.418 153.109 238.713 153.814 238.713 154.683 cv
238.713 155.552 239.418 156.259 240.289 156.259 cv
241.158 156.259 241.863 155.552 241.863 154.683 cv
@
1 lc
240.188 154.673 mo
240.188 154.673 li
@
0 lc
241.863 157.443 mo
241.863 156.574 241.158 155.869 240.289 155.869 cv
239.418 155.869 238.713 156.574 238.713 157.443 cv
238.713 158.314 239.418 159.019 240.289 159.019 cv
241.158 159.019 241.863 158.314 241.863 157.443 cv
@
1 lc
240.188 157.474 mo
240.188 157.474 li
@
0 lc
241.863 154.083 mo
241.863 153.214 241.158 152.509 240.289 152.509 cv
239.418 152.509 238.713 153.214 238.713 154.083 cv
238.713 154.953 239.418 155.658 240.289 155.658 cv
241.158 155.658 241.863 154.953 241.863 154.083 cv
@
1 lc
240.188 154.125 mo
240.188 154.125 li
@
0 lc
241.863 160.083 mo
241.863 159.214 241.158 158.509 240.289 158.509 cv
239.418 158.509 238.713 159.214 238.713 160.083 cv
238.713 160.953 239.418 161.658 240.289 161.658 cv
241.158 161.658 241.863 160.953 241.863 160.083 cv
@
1 lc
240.188 160.125 mo
240.188 160.125 li
@
0 lc
241.863 155.044 mo
241.863 154.173 241.158 153.468 240.289 153.468 cv
239.418 153.468 238.713 154.173 238.713 155.044 cv
238.713 155.914 239.418 156.619 240.289 156.619 cv
241.158 156.619 241.863 155.914 241.863 155.044 cv
@
1 lc
240.188 154.974 mo
240.188 154.974 li
@
0 lc
241.863 156.964 mo
241.863 156.093 241.158 155.388 240.289 155.388 cv
239.418 155.388 238.713 156.093 238.713 156.964 cv
238.713 157.833 239.418 158.539 240.289 158.539 cv
241.158 158.539 241.863 157.833 241.863 156.964 cv
@
1 lc
240.188 156.974 mo
240.188 156.974 li
@
0 lc
241.863 157.205 mo
241.863 156.333 241.158 155.628 240.289 155.628 cv
239.418 155.628 238.713 156.333 238.713 157.205 cv
238.713 158.074 239.418 158.779 240.289 158.779 cv
241.158 158.779 241.863 158.074 241.863 157.205 cv
@
1 lc
240.188 157.125 mo
240.188 157.125 li
@
0 lc
241.863 162.244 mo
241.863 161.375 241.158 160.669 240.289 160.669 cv
239.418 160.669 238.713 161.375 238.713 162.244 cv
238.713 163.113 239.418 163.818 240.289 163.818 cv
241.158 163.818 241.863 163.113 241.863 162.244 cv
@
1 lc
240.188 162.273 mo
240.188 162.273 li
@
0 lc
241.863 154.564 mo
241.863 153.695 241.158 152.988 240.289 152.988 cv
239.418 152.988 238.713 153.695 238.713 154.564 cv
238.713 155.433 239.418 156.138 240.289 156.138 cv
241.158 156.138 241.863 155.433 241.863 154.564 cv
@
1 lc
240.188 154.474 mo
240.188 154.474 li
@
0 lc
252.184 155.044 mo
252.184 154.173 251.479 153.468 250.607 153.468 cv
249.738 153.468 249.033 154.173 249.033 155.044 cv
249.033 155.914 249.738 156.619 250.607 156.619 cv
251.479 156.619 252.184 155.914 252.184 155.044 cv
@
1 lc
250.539 155.125 mo
250.539 155.125 li
@
0 lc
252.184 140.404 mo
252.184 139.535 251.479 138.83 250.607 138.83 cv
249.738 138.83 249.033 139.535 249.033 140.404 cv
249.033 141.273 249.738 141.978 250.607 141.978 cv
251.479 141.978 252.184 141.273 252.184 140.404 cv
@
1 lc
250.539 140.474 mo
250.539 140.474 li
@
0 lc
252.184 158.644 mo
252.184 157.775 251.479 157.068 250.607 157.068 cv
249.738 157.068 249.033 157.775 249.033 158.644 cv
249.033 159.513 249.738 160.218 250.607 160.218 cv
251.479 160.218 252.184 159.513 252.184 158.644 cv
@
1 lc
250.539 158.574 mo
250.539 158.574 li
@
0 lc
252.184 131.523 mo
252.184 130.654 251.479 129.949 250.607 129.949 cv
249.738 129.949 249.033 130.654 249.033 131.523 cv
249.033 132.392 249.738 133.099 250.607 133.099 cv
251.479 133.099 252.184 132.392 252.184 131.523 cv
@
1 lc
250.539 131.625 mo
250.539 131.625 li
@
0 lc
252.184 152.404 mo
252.184 151.535 251.479 150.83 250.607 150.83 cv
249.738 150.83 249.033 151.535 249.033 152.404 cv
249.033 153.273 249.738 153.978 250.607 153.978 cv
251.479 153.978 252.184 153.273 252.184 152.404 cv
@
1 lc
250.539 152.375 mo
250.539 152.375 li
@
0 lc
252.184 158.404 mo
252.184 157.535 251.479 156.83 250.607 156.83 cv
249.738 156.83 249.033 157.535 249.033 158.404 cv
249.033 159.273 249.738 159.978 250.607 159.978 cv
251.479 159.978 252.184 159.273 252.184 158.404 cv
@
1 lc
250.539 158.474 mo
250.539 158.474 li
@
0 lc
252.184 156.964 mo
252.184 156.093 251.479 155.388 250.607 155.388 cv
249.738 155.388 249.033 156.093 249.033 156.964 cv
249.033 157.833 249.738 158.539 250.607 158.539 cv
251.479 158.539 252.184 157.833 252.184 156.964 cv
@
1 lc
250.539 156.974 mo
250.539 156.974 li
@
0 lc
252.184 161.283 mo
252.184 160.414 251.479 159.708 250.607 159.708 cv
249.738 159.708 249.033 160.414 249.033 161.283 cv
249.033 162.154 249.738 162.859 250.607 162.859 cv
251.479 162.859 252.184 162.154 252.184 161.283 cv
@
1 lc
250.539 161.273 mo
250.539 161.273 li
@
0 lc
252.184 126.724 mo
252.184 125.855 251.479 125.148 250.607 125.148 cv
249.738 125.148 249.033 125.855 249.033 126.724 cv
249.033 127.593 249.738 128.298 250.607 128.298 cv
251.479 128.298 252.184 127.593 252.184 126.724 cv
@
1 lc
250.539 126.724 mo
250.539 126.724 li
@
0 lc
252.184 155.283 mo
252.184 154.414 251.479 153.708 250.607 153.708 cv
249.738 153.708 249.033 154.414 249.033 155.283 cv
249.033 156.154 249.738 156.859 250.607 156.859 cv
251.479 156.859 252.184 156.154 252.184 155.283 cv
@
1 lc
250.539 155.375 mo
250.539 155.375 li
@
0 lc
262.504 158.644 mo
262.504 157.775 261.797 157.068 260.928 157.068 cv
260.059 157.068 259.354 157.775 259.354 158.644 cv
259.354 159.513 260.059 160.218 260.928 160.218 cv
261.797 160.218 262.504 159.513 262.504 158.644 cv
@
1 lc
260.938 158.724 mo
260.938 158.724 li
@
0 lc
262.504 132.724 mo
262.504 131.855 261.797 131.148 260.928 131.148 cv
260.059 131.148 259.354 131.855 259.354 132.724 cv
259.354 133.593 260.059 134.298 260.928 134.298 cv
261.797 134.298 262.504 133.593 262.504 132.724 cv
@
1 lc
260.938 132.673 mo
260.938 132.673 li
@
0 lc
262.504 147.843 mo
262.504 146.974 261.797 146.269 260.928 146.269 cv
260.059 146.269 259.354 146.974 259.354 147.843 cv
259.354 148.712 260.059 149.419 260.928 149.419 cv
261.797 149.419 262.504 148.712 262.504 147.843 cv
@
1 lc
260.938 147.773 mo
260.938 147.773 li
@
0 lc
262.504 111.125 mo
262.504 110.253 261.797 109.548 260.928 109.548 cv
260.059 109.548 259.354 110.253 259.354 111.125 cv
259.354 111.994 260.059 112.699 260.928 112.699 cv
261.797 112.699 262.504 111.994 262.504 111.125 cv
@
1 lc
260.938 111.074 mo
260.938 111.074 li
@
0 lc
262.504 147.125 mo
262.504 146.253 261.797 145.548 260.928 145.548 cv
260.059 145.548 259.354 146.253 259.354 147.125 cv
259.354 147.994 260.059 148.699 260.928 148.699 cv
261.797 148.699 262.504 147.994 262.504 147.125 cv
@
1 lc
260.938 147.023 mo
260.938 147.023 li
@
0 lc
262.504 141.363 mo
262.504 140.494 261.797 139.789 260.928 139.789 cv
260.059 139.789 259.354 140.494 259.354 141.363 cv
259.354 142.234 260.059 142.939 260.928 142.939 cv
261.797 142.939 262.504 142.234 262.504 141.363 cv
@
1 lc
260.938 141.423 mo
260.938 141.423 li
@
0 lc
262.504 150.003 mo
262.504 149.134 261.797 148.429 260.928 148.429 cv
260.059 148.429 259.354 149.134 259.354 150.003 cv
259.354 150.873 260.059 151.58 260.928 151.58 cv
261.797 151.58 262.504 150.873 262.504 150.003 cv
@
1 lc
260.938 149.923 mo
260.938 149.923 li
@
0 lc
262.504 162.244 mo
262.504 161.375 261.797 160.669 260.928 160.669 cv
260.059 160.669 259.354 161.375 259.354 162.244 cv
259.354 163.113 260.059 163.818 260.928 163.818 cv
261.797 163.818 262.504 163.113 262.504 162.244 cv
@
1 lc
260.938 162.224 mo
260.938 162.224 li
@
0 lc
262.504 125.044 mo
262.504 124.173 261.797 123.468 260.928 123.468 cv
260.059 123.468 259.354 124.173 259.354 125.044 cv
259.354 125.914 260.059 126.619 260.928 126.619 cv
261.797 126.619 262.504 125.914 262.504 125.044 cv
@
1 lc
260.938 125.023 mo
260.938 125.023 li
@
0 lc
262.504 143.763 mo
262.504 142.894 261.797 142.189 260.928 142.189 cv
260.059 142.189 259.354 142.894 259.354 143.763 cv
259.354 144.632 260.059 145.339 260.928 145.339 cv
261.797 145.339 262.504 144.632 262.504 143.763 cv
@
1 lc
260.938 143.824 mo
260.938 143.824 li
@
0 lc
272.822 128.404 mo
272.822 127.535 272.117 126.83 271.248 126.83 cv
270.379 126.83 269.674 127.535 269.674 128.404 cv
269.674 129.273 270.379 129.978 271.248 129.978 cv
272.117 129.978 272.822 129.273 272.822 128.404 cv
@
1 lc
271.338 128.474 mo
271.338 128.474 li
@
0 lc
272.822 159.125 mo
272.822 158.253 272.117 157.548 271.248 157.548 cv
270.379 157.548 269.674 158.253 269.674 159.125 cv
269.674 159.994 270.379 160.699 271.248 160.699 cv
272.117 160.699 272.822 159.994 272.822 159.125 cv
@
1 lc
271.338 159.173 mo
271.338 159.173 li
@
0 lc
272.822 120.484 mo
272.822 119.615 272.117 118.908 271.248 118.908 cv
270.379 118.908 269.674 119.615 269.674 120.484 cv
269.674 121.353 270.379 122.058 271.248 122.058 cv
272.117 122.058 272.822 121.353 272.822 120.484 cv
@
1 lc
271.338 120.423 mo
271.338 120.423 li
@
0 lc
272.822 152.164 mo
272.822 151.294 272.117 150.589 271.248 150.589 cv
270.379 150.589 269.674 151.294 269.674 152.164 cv
269.674 153.033 270.379 153.738 271.248 153.738 cv
272.117 153.738 272.822 153.033 272.822 152.164 cv
@
1 lc
271.338 152.173 mo
271.338 152.173 li
@
0 lc
272.822 129.363 mo
272.822 128.494 272.117 127.789 271.248 127.789 cv
270.379 127.789 269.674 128.494 269.674 129.363 cv
269.674 130.234 270.379 130.939 271.248 130.939 cv
272.117 130.939 272.822 130.234 272.822 129.363 cv
@
1 lc
271.338 129.273 mo
271.338 129.273 li
@
0 lc
272.822 135.603 mo
272.822 134.734 272.117 134.029 271.248 134.029 cv
270.379 134.029 269.674 134.734 269.674 135.603 cv
269.674 136.472 270.379 137.179 271.248 137.179 cv
272.117 137.179 272.822 136.472 272.822 135.603 cv
@
1 lc
271.338 135.673 mo
271.338 135.673 li
@
0 lc
272.822 141.363 mo
272.822 140.494 272.117 139.789 271.248 139.789 cv
270.379 139.789 269.674 140.494 269.674 141.363 cv
269.674 142.234 270.379 142.939 271.248 142.939 cv
272.117 142.939 272.822 142.234 272.822 141.363 cv
@
1 lc
271.338 141.324 mo
271.338 141.324 li
@
0 lc
272.822 131.283 mo
272.822 130.414 272.117 129.708 271.248 129.708 cv
270.379 129.708 269.674 130.414 269.674 131.283 cv
269.674 132.154 270.379 132.859 271.248 132.859 cv
272.117 132.859 272.822 132.154 272.822 131.283 cv
@
1 lc
271.338 131.324 mo
271.338 131.324 li
@
0 lc
272.822 160.083 mo
272.822 159.214 272.117 158.509 271.248 158.509 cv
270.379 158.509 269.674 159.214 269.674 160.083 cv
269.674 160.953 270.379 161.658 271.248 161.658 cv
272.117 161.658 272.822 160.953 272.822 160.083 cv
@
1 lc
271.338 160.023 mo
271.338 160.023 li
@
0 lc
272.822 159.843 mo
272.822 158.974 272.117 158.269 271.248 158.269 cv
270.379 158.269 269.674 158.974 269.674 159.843 cv
269.674 160.712 270.379 161.419 271.248 161.419 cv
272.117 161.419 272.822 160.712 272.822 159.843 cv
@
1 lc
271.338 159.923 mo
271.338 159.923 li
@
0 lc
140.584 10.3237 mo
140.584 9.4541 139.877 8.74854 139.008 8.74854 cv
138.139 8.74854 137.433 9.4541 137.433 10.3237 cv
137.433 11.1929 138.139 11.8984 139.008 11.8984 cv
139.877 11.8984 140.584 11.1929 140.584 10.3237 cv
@
1 lc
138.938 10.3237 mo
138.938 10.3237 li
@
0.125 lw
0 lc
[0.5 1 ] 0 dsh
42.7881 162.923 mo
53.188 162.875 li
63.5381 162.875 li
73.938 162.625 li
84.3384 162.724 li
94.7383 162.574 li
105.088 162.224 li
115.488 162.023 li
125.888 161.673 li
136.288 161.574 li
146.688 161.724 li
157.039 161.273 li
167.438 161.125 li
177.838 159.625 li
188.238 159.474 li
198.639 158.273 li
208.988 158.375 li
219.389 156.173 li
229.789 156.773 li
240.188 157.125 li
250.539 149.724 li
260.938 141.974 li
271.338 141.773 li
@
DVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf55.1538 19.6616 mo(100k Simulation Steps)[3.89209 3.89209 3.8916 3.5 1.94629 4.66895 1.55371 5.7627 3.89209 1.55371 3.89209 1.9458 1.5542 3.89209 3.8916 1.94629 4.66895 1.9458 3.89209 3.89209 0 ]xsh0.25 lw
[] 0 dsh
41.2134 161.349 mo
41.2134 164.5 li
44.3633 164.5 li
44.3633 161.349 li
41.2134 161.349 li
41.2134 161.349 li
cp
@
1 lc
42.7881 162.923 mo
42.7881 162.923 li
@
0 lc
41.2134 161.349 mo
41.2134 164.5 li
44.3633 164.5 li
44.3633 161.349 li
41.2134 161.349 li
41.2134 161.349 li
cp
@
1 lc
42.7881 162.923 mo
42.7881 162.923 li
@
0 lc
41.2134 161.349 mo
41.2134 164.5 li
44.3633 164.5 li
44.3633 161.349 li
41.2134 161.349 li
41.2134 161.349 li
cp
@
1 lc
42.7881 162.923 mo
42.7881 162.923 li
@
0 lc
41.2134 161.349 mo
41.2134 164.5 li
44.3633 164.5 li
44.3633 161.349 li
41.2134 161.349 li
41.2134 161.349 li
cp
@
1 lc
42.7881 162.923 mo
42.7881 162.923 li
@
0 lc
41.2134 161.349 mo
41.2134 164.5 li
44.3633 164.5 li
44.3633 161.349 li
41.2134 161.349 li
41.2134 161.349 li
cp
@
1 lc
42.7881 162.923 mo
42.7881 162.923 li
@
0 lc
41.2134 161.398 mo
41.2134 164.548 li
44.3633 164.548 li
44.3633 161.398 li
41.2134 161.398 li
41.2134 161.398 li
cp
@
1 lc
42.7881 162.974 mo
42.7881 162.974 li
@
0 lc
41.2134 161.298 mo
41.2134 164.449 li
44.3633 164.449 li
44.3633 161.298 li
41.2134 161.298 li
41.2134 161.298 li
cp
@
1 lc
42.7881 162.875 mo
42.7881 162.875 li
@
0 lc
41.2134 161.349 mo
41.2134 164.5 li
44.3633 164.5 li
44.3633 161.349 li
41.2134 161.349 li
41.2134 161.349 li
cp
@
1 lc
42.7881 162.923 mo
42.7881 162.923 li
@
0 lc
41.2134 161.398 mo
41.2134 164.548 li
44.3633 164.548 li
44.3633 161.398 li
41.2134 161.398 li
41.2134 161.398 li
cp
@
1 lc
42.7881 162.974 mo
42.7881 162.974 li
@
0 lc
41.2134 161.349 mo
41.2134 164.5 li
44.3633 164.5 li
44.3633 161.349 li
41.2134 161.349 li
41.2134 161.349 li
cp
@
1 lc
42.7881 162.923 mo
42.7881 162.923 li
@
0 lc
51.6133 161.298 mo
51.6133 164.449 li
54.7632 164.449 li
54.7632 161.298 li
51.6133 161.298 li
51.6133 161.298 li
cp
@
1 lc
53.188 162.875 mo
53.188 162.875 li
@
0 lc
51.6133 161.25 mo
51.6133 164.398 li
54.7632 164.398 li
54.7632 161.25 li
51.6133 161.25 li
51.6133 161.25 li
cp
@
1 lc
53.188 162.824 mo
53.188 162.824 li
@
0 lc
51.6133 161.25 mo
51.6133 164.398 li
54.7632 164.398 li
54.7632 161.25 li
51.6133 161.25 li
51.6133 161.25 li
cp
@
1 lc
53.188 162.824 mo
53.188 162.824 li
@
0 lc
51.6133 161.25 mo
51.6133 164.398 li
54.7632 164.398 li
54.7632 161.25 li
51.6133 161.25 li
51.6133 161.25 li
cp
@
1 lc
53.188 162.824 mo
53.188 162.824 li
@
0 lc
51.6133 161.298 mo
51.6133 164.449 li
54.7632 164.449 li
54.7632 161.298 li
51.6133 161.298 li
51.6133 161.298 li
cp
@
1 lc
53.188 162.875 mo
53.188 162.875 li
@
0 lc
51.6133 161.25 mo
51.6133 164.398 li
54.7632 164.398 li
54.7632 161.25 li
51.6133 161.25 li
51.6133 161.25 li
cp
@
1 lc
53.188 162.824 mo
53.188 162.824 li
@
0 lc
51.6133 161.298 mo
51.6133 164.449 li
54.7632 164.449 li
54.7632 161.298 li
51.6133 161.298 li
51.6133 161.298 li
cp
@
1 lc
53.188 162.875 mo
53.188 162.875 li
@
0 lc
51.6133 161.25 mo
51.6133 164.398 li
54.7632 164.398 li
54.7632 161.25 li
51.6133 161.25 li
51.6133 161.25 li
cp
@
1 lc
53.188 162.824 mo
53.188 162.824 li
@
0 lc
51.6133 161.298 mo
51.6133 164.449 li
54.7632 164.449 li
54.7632 161.298 li
51.6133 161.298 li
51.6133 161.298 li
cp
@
1 lc
53.188 162.875 mo
53.188 162.875 li
@
0 lc
51.6133 161.25 mo
51.6133 164.398 li
54.7632 164.398 li
54.7632 161.25 li
51.6133 161.25 li
51.6133 161.25 li
cp
@
1 lc
53.188 162.824 mo
53.188 162.824 li
@
0 lc
61.9634 161.148 mo
61.9634 164.298 li
65.1133 164.298 li
65.1133 161.148 li
61.9634 161.148 li
61.9634 161.148 li
cp
@
1 lc
63.5381 162.724 mo
63.5381 162.724 li
@
0 lc
61.9634 161.199 mo
61.9634 164.349 li
65.1133 164.349 li
65.1133 161.199 li
61.9634 161.199 li
61.9634 161.199 li
cp
@
1 lc
63.5381 162.773 mo
63.5381 162.773 li
@
0 lc
61.9634 161.148 mo
61.9634 164.298 li
65.1133 164.298 li
65.1133 161.148 li
61.9634 161.148 li
61.9634 161.148 li
cp
@
1 lc
63.5381 162.724 mo
63.5381 162.724 li
@
0 lc
61.9634 161.199 mo
61.9634 164.349 li
65.1133 164.349 li
65.1133 161.199 li
61.9634 161.199 li
61.9634 161.199 li
cp
@
1 lc
63.5381 162.773 mo
63.5381 162.773 li
@
0 lc
61.9634 161.199 mo
61.9634 164.349 li
65.1133 164.349 li
65.1133 161.199 li
61.9634 161.199 li
61.9634 161.199 li
cp
@
1 lc
63.5381 162.773 mo
63.5381 162.773 li
@
0 lc
61.9634 161.148 mo
61.9634 164.298 li
65.1133 164.298 li
65.1133 161.148 li
61.9634 161.148 li
61.9634 161.148 li
cp
@
1 lc
63.5381 162.724 mo
63.5381 162.724 li
@
0 lc
61.9634 161.199 mo
61.9634 164.349 li
65.1133 164.349 li
65.1133 161.199 li
61.9634 161.199 li
61.9634 161.199 li
cp
@
1 lc
63.5381 162.773 mo
63.5381 162.773 li
@
0 lc
61.9634 161.148 mo
61.9634 164.298 li
65.1133 164.298 li
65.1133 161.148 li
61.9634 161.148 li
61.9634 161.148 li
cp
@
1 lc
63.5381 162.724 mo
63.5381 162.724 li
@
0 lc
61.9634 161.199 mo
61.9634 164.349 li
65.1133 164.349 li
65.1133 161.199 li
61.9634 161.199 li
61.9634 161.199 li
cp
@
1 lc
63.5381 162.773 mo
63.5381 162.773 li
@
0 lc
61.9634 161.148 mo
61.9634 164.298 li
65.1133 164.298 li
65.1133 161.148 li
61.9634 161.148 li
61.9634 161.148 li
cp
@
1 lc
63.5381 162.724 mo
63.5381 162.724 li
@
0 lc
72.3633 161.048 mo
72.3633 164.199 li
75.5132 164.199 li
75.5132 161.048 li
72.3633 161.048 li
72.3633 161.048 li
cp
@
1 lc
73.938 162.625 mo
73.938 162.625 li
@
0 lc
72.3633 161.048 mo
72.3633 164.199 li
75.5132 164.199 li
75.5132 161.048 li
72.3633 161.048 li
72.3633 161.048 li
cp
@
1 lc
73.938 162.625 mo
73.938 162.625 li
@
0 lc
72.3633 161.099 mo
72.3633 164.25 li
75.5132 164.25 li
75.5132 161.099 li
72.3633 161.099 li
72.3633 161.099 li
cp
@
1 lc
73.938 162.673 mo
73.938 162.673 li
@
0 lc
72.3633 161.148 mo
72.3633 164.298 li
75.5132 164.298 li
75.5132 161.148 li
72.3633 161.148 li
72.3633 161.148 li
cp
@
1 lc
73.938 162.724 mo
73.938 162.724 li
@
0 lc
72.3633 161.099 mo
72.3633 164.25 li
75.5132 164.25 li
75.5132 161.099 li
72.3633 161.099 li
72.3633 161.099 li
cp
@
1 lc
73.938 162.673 mo
73.938 162.673 li
@
0 lc
72.3633 161.099 mo
72.3633 164.25 li
75.5132 164.25 li
75.5132 161.099 li
72.3633 161.099 li
72.3633 161.099 li
cp
@
1 lc
73.938 162.673 mo
73.938 162.673 li
@
0 lc
72.3633 161.099 mo
72.3633 164.25 li
75.5132 164.25 li
75.5132 161.099 li
72.3633 161.099 li
72.3633 161.099 li
cp
@
1 lc
73.938 162.673 mo
73.938 162.673 li
@
0 lc
72.3633 161.099 mo
72.3633 164.25 li
75.5132 164.25 li
75.5132 161.099 li
72.3633 161.099 li
72.3633 161.099 li
cp
@
1 lc
73.938 162.673 mo
73.938 162.673 li
@
0 lc
72.3633 161.099 mo
72.3633 164.25 li
75.5132 164.25 li
75.5132 161.099 li
72.3633 161.099 li
72.3633 161.099 li
cp
@
1 lc
73.938 162.673 mo
73.938 162.673 li
@
0 lc
72.3633 161.099 mo
72.3633 164.25 li
75.5132 164.25 li
75.5132 161.099 li
72.3633 161.099 li
72.3633 161.099 li
cp
@
1 lc
73.938 162.673 mo
73.938 162.673 li
@
0 lc
82.7632 160.898 mo
82.7632 164.048 li
85.9131 164.048 li
85.9131 160.898 li
82.7632 160.898 li
82.7632 160.898 li
cp
@
1 lc
84.3384 162.474 mo
84.3384 162.474 li
@
0 lc
82.7632 160.949 mo
82.7632 164.099 li
85.9131 164.099 li
85.9131 160.949 li
82.7632 160.949 li
82.7632 160.949 li
cp
@
1 lc
84.3384 162.523 mo
84.3384 162.523 li
@
0 lc
82.7632 161 mo
82.7632 164.148 li
85.9131 164.148 li
85.9131 161 li
82.7632 161 li
82.7632 161 li
cp
@
1 lc
84.3384 162.574 mo
84.3384 162.574 li
@
0 lc
82.7632 160.898 mo
82.7632 164.048 li
85.9131 164.048 li
85.9131 160.898 li
82.7632 160.898 li
82.7632 160.898 li
cp
@
1 lc
84.3384 162.474 mo
84.3384 162.474 li
@
0 lc
82.7632 160.949 mo
82.7632 164.099 li
85.9131 164.099 li
85.9131 160.949 li
82.7632 160.949 li
82.7632 160.949 li
cp
@
1 lc
84.3384 162.523 mo
84.3384 162.523 li
@
0 lc
82.7632 161 mo
82.7632 164.148 li
85.9131 164.148 li
85.9131 161 li
82.7632 161 li
82.7632 161 li
cp
@
1 lc
84.3384 162.574 mo
84.3384 162.574 li
@
0 lc
82.7632 161 mo
82.7632 164.148 li
85.9131 164.148 li
85.9131 161 li
82.7632 161 li
82.7632 161 li
cp
@
1 lc
84.3384 162.574 mo
84.3384 162.574 li
@
0 lc
82.7632 161 mo
82.7632 164.148 li
85.9131 164.148 li
85.9131 161 li
82.7632 161 li
82.7632 161 li
cp
@
1 lc
84.3384 162.574 mo
84.3384 162.574 li
@
0 lc
82.7632 160.949 mo
82.7632 164.099 li
85.9131 164.099 li
85.9131 160.949 li
82.7632 160.949 li
82.7632 160.949 li
cp
@
1 lc
84.3384 162.523 mo
84.3384 162.523 li
@
0 lc
82.7632 160.949 mo
82.7632 164.099 li
85.9131 164.099 li
85.9131 160.949 li
82.7632 160.949 li
82.7632 160.949 li
cp
@
1 lc
84.3384 162.523 mo
84.3384 162.523 li
@
0 lc
93.1631 160.898 mo
93.1631 164.048 li
96.313 164.048 li
96.313 160.898 li
93.1631 160.898 li
93.1631 160.898 li
cp
@
1 lc
94.7383 162.474 mo
94.7383 162.474 li
@
0 lc
93.1631 160.898 mo
93.1631 164.048 li
96.313 164.048 li
96.313 160.898 li
93.1631 160.898 li
93.1631 160.898 li
cp
@
1 lc
94.7383 162.474 mo
94.7383 162.474 li
@
0 lc
93.1631 160.849 mo
93.1631 164 li
96.313 164 li
96.313 160.849 li
93.1631 160.849 li
93.1631 160.849 li
cp
@
1 lc
94.7383 162.423 mo
94.7383 162.423 li
@
0 lc
93.1631 160.949 mo
93.1631 164.099 li
96.313 164.099 li
96.313 160.949 li
93.1631 160.949 li
93.1631 160.949 li
cp
@
1 lc
94.7383 162.523 mo
94.7383 162.523 li
@
0 lc
93.1631 160.798 mo
93.1631 163.949 li
96.313 163.949 li
96.313 160.798 li
93.1631 160.798 li
93.1631 160.798 li
cp
@
1 lc
94.7383 162.375 mo
94.7383 162.375 li
@
0 lc
93.1631 160.849 mo
93.1631 164 li
96.313 164 li
96.313 160.849 li
93.1631 160.849 li
93.1631 160.849 li
cp
@
1 lc
94.7383 162.423 mo
94.7383 162.423 li
@
0 lc
93.1631 160.849 mo
93.1631 164 li
96.313 164 li
96.313 160.849 li
93.1631 160.849 li
93.1631 160.849 li
cp
@
1 lc
94.7383 162.423 mo
94.7383 162.423 li
@
0 lc
93.1631 160.849 mo
93.1631 164 li
96.313 164 li
96.313 160.849 li
93.1631 160.849 li
93.1631 160.849 li
cp
@
1 lc
94.7383 162.423 mo
94.7383 162.423 li
@
0 lc
93.1631 160.798 mo
93.1631 163.949 li
96.313 163.949 li
96.313 160.798 li
93.1631 160.798 li
93.1631 160.798 li
cp
@
1 lc
94.7383 162.375 mo
94.7383 162.375 li
@
0 lc
93.1631 160.849 mo
93.1631 164 li
96.313 164 li
96.313 160.849 li
93.1631 160.849 li
93.1631 160.849 li
cp
@
1 lc
94.7383 162.423 mo
94.7383 162.423 li
@
0 lc
103.513 160.699 mo
103.513 163.849 li
106.663 163.849 li
106.663 160.699 li
103.513 160.699 li
103.513 160.699 li
cp
@
1 lc
105.088 162.273 mo
105.088 162.273 li
@
0 lc
103.513 160.75 mo
103.513 163.898 li
106.663 163.898 li
106.663 160.75 li
103.513 160.75 li
103.513 160.75 li
cp
@
1 lc
105.088 162.324 mo
105.088 162.324 li
@
0 lc
103.513 160.75 mo
103.513 163.898 li
106.663 163.898 li
106.663 160.75 li
103.513 160.75 li
103.513 160.75 li
cp
@
1 lc
105.088 162.324 mo
105.088 162.324 li
@
0 lc
103.513 160.75 mo
103.513 163.898 li
106.663 163.898 li
106.663 160.75 li
103.513 160.75 li
103.513 160.75 li
cp
@
1 lc
105.088 162.324 mo
105.088 162.324 li
@
0 lc
103.513 160.75 mo
103.513 163.898 li
106.663 163.898 li
106.663 160.75 li
103.513 160.75 li
103.513 160.75 li
cp
@
1 lc
105.088 162.324 mo
105.088 162.324 li
@
0 lc
103.513 160.75 mo
103.513 163.898 li
106.663 163.898 li
106.663 160.75 li
103.513 160.75 li
103.513 160.75 li
cp
@
1 lc
105.088 162.324 mo
105.088 162.324 li
@
0 lc
103.513 160.648 mo
103.513 163.798 li
106.663 163.798 li
106.663 160.648 li
103.513 160.648 li
103.513 160.648 li
cp
@
1 lc
105.088 162.224 mo
105.088 162.224 li
@
0 lc
103.513 160.599 mo
103.513 163.75 li
106.663 163.75 li
106.663 160.599 li
103.513 160.599 li
103.513 160.599 li
cp
@
1 lc
105.088 162.173 mo
105.088 162.173 li
@
0 lc
103.513 160.699 mo
103.513 163.849 li
106.663 163.849 li
106.663 160.699 li
103.513 160.699 li
103.513 160.699 li
cp
@
1 lc
105.088 162.273 mo
105.088 162.273 li
@
0 lc
103.513 160.798 mo
103.513 163.949 li
106.663 163.949 li
106.663 160.798 li
103.513 160.798 li
103.513 160.798 li
cp
@
1 lc
105.088 162.375 mo
105.088 162.375 li
@
0 lc
113.913 160.5 mo
113.913 163.648 li
117.063 163.648 li
117.063 160.5 li
113.913 160.5 li
113.913 160.5 li
cp
@
1 lc
115.488 162.074 mo
115.488 162.074 li
@
0 lc
113.913 160.5 mo
113.913 163.648 li
117.063 163.648 li
117.063 160.5 li
113.913 160.5 li
113.913 160.5 li
cp
@
1 lc
115.488 162.074 mo
115.488 162.074 li
@
0 lc
113.913 160.599 mo
113.913 163.75 li
117.063 163.75 li
117.063 160.599 li
113.913 160.599 li
113.913 160.599 li
cp
@
1 lc
115.488 162.173 mo
115.488 162.173 li
@
0 lc
113.913 160.449 mo
113.913 163.599 li
117.063 163.599 li
117.063 160.449 li
113.913 160.449 li
113.913 160.449 li
cp
@
1 lc
115.488 162.023 mo
115.488 162.023 li
@
0 lc
113.913 160.548 mo
113.913 163.699 li
117.063 163.699 li
117.063 160.548 li
113.913 160.548 li
113.913 160.548 li
cp
@
1 lc
115.488 162.125 mo
115.488 162.125 li
@
0 lc
113.913 160.548 mo
113.913 163.699 li
117.063 163.699 li
117.063 160.548 li
113.913 160.548 li
113.913 160.548 li
cp
@
1 lc
115.488 162.125 mo
115.488 162.125 li
@
0 lc
113.913 160.5 mo
113.913 163.648 li
117.063 163.648 li
117.063 160.5 li
113.913 160.5 li
113.913 160.5 li
cp
@
1 lc
115.488 162.074 mo
115.488 162.074 li
@
0 lc
113.913 160.699 mo
113.913 163.849 li
117.063 163.849 li
117.063 160.699 li
113.913 160.699 li
113.913 160.699 li
cp
@
1 lc
115.488 162.273 mo
115.488 162.273 li
@
0 lc
113.913 160.449 mo
113.913 163.599 li
117.063 163.599 li
117.063 160.449 li
113.913 160.449 li
113.913 160.449 li
cp
@
1 lc
115.488 162.023 mo
115.488 162.023 li
@
0 lc
113.913 160.548 mo
113.913 163.699 li
117.063 163.699 li
117.063 160.548 li
113.913 160.548 li
113.913 160.548 li
cp
@
1 lc
115.488 162.125 mo
115.488 162.125 li
@
0 lc
124.313 160.298 mo
124.313 163.449 li
127.463 163.449 li
127.463 160.298 li
124.313 160.298 li
124.313 160.298 li
cp
@
1 lc
125.888 161.875 mo
125.888 161.875 li
@
0 lc
124.313 160.599 mo
124.313 163.75 li
127.463 163.75 li
127.463 160.599 li
124.313 160.599 li
124.313 160.599 li
cp
@
1 lc
125.888 162.173 mo
125.888 162.173 li
@
0 lc
124.313 160.199 mo
124.313 163.349 li
127.463 163.349 li
127.463 160.199 li
124.313 160.199 li
124.313 160.199 li
cp
@
1 lc
125.888 161.773 mo
125.888 161.773 li
@
0 lc
124.313 160.199 mo
124.313 163.349 li
127.463 163.349 li
127.463 160.199 li
124.313 160.199 li
124.313 160.199 li
cp
@
1 lc
125.888 161.773 mo
125.888 161.773 li
@
0 lc
124.313 160.298 mo
124.313 163.449 li
127.463 163.449 li
127.463 160.298 li
124.313 160.298 li
124.313 160.298 li
cp
@
1 lc
125.888 161.875 mo
125.888 161.875 li
@
0 lc
124.313 160.199 mo
124.313 163.349 li
127.463 163.349 li
127.463 160.199 li
124.313 160.199 li
124.313 160.199 li
cp
@
1 lc
125.888 161.773 mo
125.888 161.773 li
@
0 lc
124.313 160.398 mo
124.313 163.548 li
127.463 163.548 li
127.463 160.398 li
124.313 160.398 li
124.313 160.398 li
cp
@
1 lc
125.888 161.974 mo
125.888 161.974 li
@
0 lc
124.313 160.298 mo
124.313 163.449 li
127.463 163.449 li
127.463 160.298 li
124.313 160.298 li
124.313 160.298 li
cp
@
1 lc
125.888 161.875 mo
125.888 161.875 li
@
0 lc
124.313 160.349 mo
124.313 163.5 li
127.463 163.5 li
127.463 160.349 li
124.313 160.349 li
124.313 160.349 li
cp
@
1 lc
125.888 161.923 mo
125.888 161.923 li
@
0 lc
124.313 160.349 mo
124.313 163.5 li
127.463 163.5 li
127.463 160.349 li
124.313 160.349 li
124.313 160.349 li
cp
@
1 lc
125.888 161.923 mo
125.888 161.923 li
@
0 lc
134.713 160.148 mo
134.713 163.298 li
137.863 163.298 li
137.863 160.148 li
134.713 160.148 li
134.713 160.148 li
cp
@
1 lc
136.288 161.724 mo
136.288 161.724 li
@
0 lc
134.713 160.349 mo
134.713 163.5 li
137.863 163.5 li
137.863 160.349 li
134.713 160.349 li
134.713 160.349 li
cp
@
1 lc
136.288 161.923 mo
136.288 161.923 li
@
0 lc
134.713 160.099 mo
134.713 163.25 li
137.863 163.25 li
137.863 160.099 li
134.713 160.099 li
134.713 160.099 li
cp
@
1 lc
136.288 161.673 mo
136.288 161.673 li
@
0 lc
134.713 159.898 mo
134.713 163.048 li
137.863 163.048 li
137.863 159.898 li
134.713 159.898 li
134.713 159.898 li
cp
@
1 lc
136.288 161.474 mo
136.288 161.474 li
@
0 lc
134.713 159.898 mo
134.713 163.048 li
137.863 163.048 li
137.863 159.898 li
134.713 159.898 li
134.713 159.898 li
cp
@
1 lc
136.288 161.474 mo
136.288 161.474 li
@
0 lc
134.713 159.949 mo
134.713 163.099 li
137.863 163.099 li
137.863 159.949 li
134.713 159.949 li
134.713 159.949 li
cp
@
1 lc
136.288 161.523 mo
136.288 161.523 li
@
0 lc
134.713 160 mo
134.713 163.148 li
137.863 163.148 li
137.863 160 li
134.713 160 li
134.713 160 li
cp
@
1 lc
136.288 161.574 mo
136.288 161.574 li
@
0 lc
134.713 160.148 mo
134.713 163.298 li
137.863 163.298 li
137.863 160.148 li
134.713 160.148 li
134.713 160.148 li
cp
@
1 lc
136.288 161.724 mo
136.288 161.724 li
@
0 lc
134.713 160.199 mo
134.713 163.349 li
137.863 163.349 li
137.863 160.199 li
134.713 160.199 li
134.713 160.199 li
cp
@
1 lc
136.288 161.773 mo
136.288 161.773 li
@
0 lc
134.713 160.048 mo
134.713 163.199 li
137.863 163.199 li
137.863 160.048 li
134.713 160.048 li
134.713 160.048 li
cp
@
1 lc
136.288 161.625 mo
136.288 161.625 li
@
0 lc
145.113 159.798 mo
145.113 162.949 li
148.264 162.949 li
148.264 159.798 li
145.113 159.798 li
145.113 159.798 li
cp
@
1 lc
146.688 161.375 mo
146.688 161.375 li
@
0 lc
145.113 159.898 mo
145.113 163.048 li
148.264 163.048 li
148.264 159.898 li
145.113 159.898 li
145.113 159.898 li
cp
@
1 lc
146.688 161.474 mo
146.688 161.474 li
@
0 lc
145.113 160 mo
145.113 163.148 li
148.264 163.148 li
148.264 160 li
145.113 160 li
145.113 160 li
cp
@
1 lc
146.688 161.574 mo
146.688 161.574 li
@
0 lc
145.113 159.849 mo
145.113 163 li
148.264 163 li
148.264 159.849 li
145.113 159.849 li
145.113 159.849 li
cp
@
1 lc
146.688 161.423 mo
146.688 161.423 li
@
0 lc
145.113 159.648 mo
145.113 162.798 li
148.264 162.798 li
148.264 159.648 li
145.113 159.648 li
145.113 159.648 li
cp
@
1 lc
146.688 161.224 mo
146.688 161.224 li
@
0 lc
145.113 159.849 mo
145.113 163 li
148.264 163 li
148.264 159.849 li
145.113 159.849 li
145.113 159.849 li
cp
@
1 lc
146.688 161.423 mo
146.688 161.423 li
@
0 lc
145.113 159.599 mo
145.113 162.75 li
148.264 162.75 li
148.264 159.599 li
145.113 159.599 li
145.113 159.599 li
cp
@
1 lc
146.688 161.173 mo
146.688 161.173 li
@
0 lc
145.113 159.648 mo
145.113 162.798 li
148.264 162.798 li
148.264 159.648 li
145.113 159.648 li
145.113 159.648 li
cp
@
1 lc
146.688 161.224 mo
146.688 161.224 li
@
0 lc
145.113 159.798 mo
145.113 162.949 li
148.264 162.949 li
148.264 159.798 li
145.113 159.798 li
145.113 159.798 li
cp
@
1 lc
146.688 161.375 mo
146.688 161.375 li
@
0 lc
145.113 159.75 mo
145.113 162.898 li
148.264 162.898 li
148.264 159.75 li
145.113 159.75 li
145.113 159.75 li
cp
@
1 lc
146.688 161.324 mo
146.688 161.324 li
@
0 lc
155.463 159.449 mo
155.463 162.599 li
158.613 162.599 li
158.613 159.449 li
155.463 159.449 li
155.463 159.449 li
cp
@
1 lc
157.039 161.023 mo
157.039 161.023 li
@
0 lc
155.463 159.199 mo
155.463 162.349 li
158.613 162.349 li
158.613 159.199 li
155.463 159.199 li
155.463 159.199 li
cp
@
1 lc
157.039 160.773 mo
157.039 160.773 li
@
0 lc
155.463 159.298 mo
155.463 162.449 li
158.613 162.449 li
158.613 159.298 li
155.463 159.298 li
155.463 159.298 li
cp
@
1 lc
157.039 160.875 mo
157.039 160.875 li
@
0 lc
155.463 159.5 mo
155.463 162.648 li
158.613 162.648 li
158.613 159.5 li
155.463 159.5 li
155.463 159.5 li
cp
@
1 lc
157.039 161.074 mo
157.039 161.074 li
@
0 lc
155.463 159.25 mo
155.463 162.398 li
158.613 162.398 li
158.613 159.25 li
155.463 159.25 li
155.463 159.25 li
cp
@
1 lc
157.039 160.824 mo
157.039 160.824 li
@
0 lc
155.463 159.548 mo
155.463 162.699 li
158.613 162.699 li
158.613 159.548 li
155.463 159.548 li
155.463 159.548 li
cp
@
1 lc
157.039 161.125 mo
157.039 161.125 li
@
0 lc
155.463 159.648 mo
155.463 162.798 li
158.613 162.798 li
158.613 159.648 li
155.463 159.648 li
155.463 159.648 li
cp
@
1 lc
157.039 161.224 mo
157.039 161.224 li
@
0 lc
155.463 159.75 mo
155.463 162.898 li
158.613 162.898 li
158.613 159.75 li
155.463 159.75 li
155.463 159.75 li
cp
@
1 lc
157.039 161.324 mo
157.039 161.324 li
@
0 lc
155.463 159.5 mo
155.463 162.648 li
158.613 162.648 li
158.613 159.5 li
155.463 159.5 li
155.463 159.5 li
cp
@
1 lc
157.039 161.074 mo
157.039 161.074 li
@
0 lc
155.463 159.25 mo
155.463 162.398 li
158.613 162.398 li
158.613 159.25 li
155.463 159.25 li
155.463 159.25 li
cp
@
1 lc
157.039 160.824 mo
157.039 160.824 li
@
0 lc
165.863 159 mo
165.863 162.148 li
169.014 162.148 li
169.014 159 li
165.863 159 li
165.863 159 li
cp
@
1 lc
167.438 160.574 mo
167.438 160.574 li
@
0 lc
165.863 158.898 mo
165.863 162.048 li
169.014 162.048 li
169.014 158.898 li
165.863 158.898 li
165.863 158.898 li
cp
@
1 lc
167.438 160.474 mo
167.438 160.474 li
@
0 lc
165.863 158.25 mo
165.863 161.398 li
169.014 161.398 li
169.014 158.25 li
165.863 158.25 li
165.863 158.25 li
cp
@
1 lc
167.438 159.824 mo
167.438 159.824 li
@
0 lc
165.863 158.898 mo
165.863 162.048 li
169.014 162.048 li
169.014 158.898 li
165.863 158.898 li
165.863 158.898 li
cp
@
1 lc
167.438 160.474 mo
167.438 160.474 li
@
0 lc
165.863 158.849 mo
165.863 162 li
169.014 162 li
169.014 158.849 li
165.863 158.849 li
165.863 158.849 li
cp
@
1 lc
167.438 160.423 mo
167.438 160.423 li
@
0 lc
165.863 158.798 mo
165.863 161.949 li
169.014 161.949 li
169.014 158.798 li
165.863 158.798 li
165.863 158.798 li
cp
@
1 lc
167.438 160.375 mo
167.438 160.375 li
@
0 lc
165.863 158.699 mo
165.863 161.849 li
169.014 161.849 li
169.014 158.699 li
165.863 158.699 li
165.863 158.699 li
cp
@
1 lc
167.438 160.273 mo
167.438 160.273 li
@
0 lc
165.863 158.798 mo
165.863 161.949 li
169.014 161.949 li
169.014 158.798 li
165.863 158.798 li
165.863 158.798 li
cp
@
1 lc
167.438 160.375 mo
167.438 160.375 li
@
0 lc
165.863 159.048 mo
165.863 162.199 li
169.014 162.199 li
169.014 159.048 li
165.863 159.048 li
165.863 159.048 li
cp
@
1 lc
167.438 160.625 mo
167.438 160.625 li
@
0 lc
165.863 159.048 mo
165.863 162.199 li
169.014 162.199 li
169.014 159.048 li
165.863 159.048 li
165.863 159.048 li
cp
@
1 lc
167.438 160.625 mo
167.438 160.625 li
@
0 lc
176.264 158.148 mo
176.264 161.298 li
179.414 161.298 li
179.414 158.148 li
176.264 158.148 li
176.264 158.148 li
cp
@
1 lc
177.838 159.724 mo
177.838 159.724 li
@
0 lc
176.264 158.798 mo
176.264 161.949 li
179.414 161.949 li
179.414 158.798 li
176.264 158.798 li
176.264 158.798 li
cp
@
1 lc
177.838 160.375 mo
177.838 160.375 li
@
0 lc
176.264 158.048 mo
176.264 161.199 li
179.414 161.199 li
179.414 158.048 li
176.264 158.048 li
176.264 158.048 li
cp
@
1 lc
177.838 159.625 mo
177.838 159.625 li
@
0 lc
176.264 158 mo
176.264 161.148 li
179.414 161.148 li
179.414 158 li
176.264 158 li
176.264 158 li
cp
@
1 lc
177.838 159.574 mo
177.838 159.574 li
@
0 lc
176.264 158.099 mo
176.264 161.25 li
179.414 161.25 li
179.414 158.099 li
176.264 158.099 li
176.264 158.099 li
cp
@
1 lc
177.838 159.673 mo
177.838 159.673 li
@
0 lc
176.264 157.449 mo
176.264 160.599 li
179.414 160.599 li
179.414 157.449 li
176.264 157.449 li
176.264 157.449 li
cp
@
1 lc
177.838 159.023 mo
177.838 159.023 li
@
0 lc
176.264 157.599 mo
176.264 160.75 li
179.414 160.75 li
179.414 157.599 li
176.264 157.599 li
176.264 157.599 li
cp
@
1 lc
177.838 159.173 mo
177.838 159.173 li
@
0 lc
176.264 158.949 mo
176.264 162.099 li
179.414 162.099 li
179.414 158.949 li
176.264 158.949 li
176.264 158.949 li
cp
@
1 lc
177.838 160.523 mo
177.838 160.523 li
@
0 lc
176.264 157.798 mo
176.264 160.949 li
179.414 160.949 li
179.414 157.798 li
176.264 157.798 li
176.264 157.798 li
cp
@
1 lc
177.838 159.375 mo
177.838 159.375 li
@
0 lc
176.264 158.849 mo
176.264 162 li
179.414 162 li
179.414 158.849 li
176.264 158.849 li
176.264 158.849 li
cp
@
1 lc
177.838 160.423 mo
177.838 160.423 li
@
0 lc
186.664 157.5 mo
186.664 160.648 li
189.813 160.648 li
189.813 157.5 li
186.664 157.5 li
186.664 157.5 li
cp
@
1 lc
188.238 159.074 mo
188.238 159.074 li
@
0 lc
186.664 157.699 mo
186.664 160.849 li
189.813 160.849 li
189.813 157.699 li
186.664 157.699 li
186.664 157.699 li
cp
@
1 lc
188.238 159.273 mo
188.238 159.273 li
@
0 lc
186.664 157.349 mo
186.664 160.5 li
189.813 160.5 li
189.813 157.349 li
186.664 157.349 li
186.664 157.349 li
cp
@
1 lc
188.238 158.923 mo
188.238 158.923 li
@
0 lc
186.664 157.699 mo
186.664 160.849 li
189.813 160.849 li
189.813 157.699 li
186.664 157.699 li
186.664 157.699 li
cp
@
1 lc
188.238 159.273 mo
188.238 159.273 li
@
0 lc
186.664 157.599 mo
186.664 160.75 li
189.813 160.75 li
189.813 157.599 li
186.664 157.599 li
186.664 157.599 li
cp
@
1 lc
188.238 159.173 mo
188.238 159.173 li
@
0 lc
186.664 157.699 mo
186.664 160.849 li
189.813 160.849 li
189.813 157.699 li
186.664 157.699 li
186.664 157.699 li
cp
@
1 lc
188.238 159.273 mo
188.238 159.273 li
@
0 lc
186.664 157.75 mo
186.664 160.898 li
189.813 160.898 li
189.813 157.75 li
186.664 157.75 li
186.664 157.75 li
cp
@
1 lc
188.238 159.324 mo
188.238 159.324 li
@
0 lc
186.664 157.398 mo
186.664 160.548 li
189.813 160.548 li
189.813 157.398 li
186.664 157.398 li
186.664 157.398 li
cp
@
1 lc
188.238 158.974 mo
188.238 158.974 li
@
0 lc
186.664 157.798 mo
186.664 160.949 li
189.813 160.949 li
189.813 157.798 li
186.664 157.798 li
186.664 157.798 li
cp
@
1 lc
188.238 159.375 mo
188.238 159.375 li
@
0 lc
186.664 157.798 mo
186.664 160.949 li
189.813 160.949 li
189.813 157.798 li
186.664 157.798 li
186.664 157.798 li
cp
@
1 lc
188.238 159.375 mo
188.238 159.375 li
@
0 lc
197.063 155.548 mo
197.063 158.699 li
200.213 158.699 li
200.213 155.548 li
197.063 155.548 li
197.063 155.548 li
cp
@
1 lc
198.639 157.125 mo
198.639 157.125 li
@
0 lc
197.063 156.5 mo
197.063 159.648 li
200.213 159.648 li
200.213 156.5 li
197.063 156.5 li
197.063 156.5 li
cp
@
1 lc
198.639 158.074 mo
198.639 158.074 li
@
0 lc
197.063 155.648 mo
197.063 158.798 li
200.213 158.798 li
200.213 155.648 li
197.063 155.648 li
197.063 155.648 li
cp
@
1 lc
198.639 157.224 mo
198.639 157.224 li
@
0 lc
197.063 156 mo
197.063 159.148 li
200.213 159.148 li
200.213 156 li
197.063 156 li
197.063 156 li
cp
@
1 lc
198.639 157.574 mo
198.639 157.574 li
@
0 lc
197.063 156.199 mo
197.063 159.349 li
200.213 159.349 li
200.213 156.199 li
197.063 156.199 li
197.063 156.199 li
cp
@
1 lc
198.639 157.773 mo
198.639 157.773 li
@
0 lc
197.063 155.298 mo
197.063 158.449 li
200.213 158.449 li
200.213 155.298 li
197.063 155.298 li
197.063 155.298 li
cp
@
1 lc
198.639 156.875 mo
198.639 156.875 li
@
0 lc
197.063 156.548 mo
197.063 159.699 li
200.213 159.699 li
200.213 156.548 li
197.063 156.548 li
197.063 156.548 li
cp
@
1 lc
198.639 158.125 mo
198.639 158.125 li
@
0 lc
197.063 153.398 mo
197.063 156.548 li
200.213 156.548 li
200.213 153.398 li
197.063 153.398 li
197.063 153.398 li
cp
@
1 lc
198.639 154.974 mo
198.639 154.974 li
@
0 lc
197.063 156.548 mo
197.063 159.699 li
200.213 159.699 li
200.213 156.548 li
197.063 156.548 li
197.063 156.548 li
cp
@
1 lc
198.639 158.125 mo
198.639 158.125 li
@
0 lc
197.063 157.25 mo
197.063 160.398 li
200.213 160.398 li
200.213 157.25 li
197.063 157.25 li
197.063 157.25 li
cp
@
1 lc
198.639 158.824 mo
198.639 158.824 li
@
0 lc
207.414 153.648 mo
207.414 156.798 li
210.563 156.798 li
210.563 153.648 li
207.414 153.648 li
207.414 153.648 li
cp
@
1 lc
208.988 155.224 mo
208.988 155.224 li
@
0 lc
207.414 154.349 mo
207.414 157.5 li
210.563 157.5 li
210.563 154.349 li
207.414 154.349 li
207.414 154.349 li
cp
@
1 lc
208.988 155.923 mo
208.988 155.923 li
@
0 lc
207.414 152.349 mo
207.414 155.5 li
210.563 155.5 li
210.563 152.349 li
207.414 152.349 li
207.414 152.349 li
cp
@
1 lc
208.988 153.923 mo
208.988 153.923 li
@
0 lc
207.414 155.648 mo
207.414 158.798 li
210.563 158.798 li
210.563 155.648 li
207.414 155.648 li
207.414 155.648 li
cp
@
1 lc
208.988 157.224 mo
208.988 157.224 li
@
0 lc
207.414 156.199 mo
207.414 159.349 li
210.563 159.349 li
210.563 156.199 li
207.414 156.199 li
207.414 156.199 li
cp
@
1 lc
208.988 157.773 mo
208.988 157.773 li
@
0 lc
207.414 154.648 mo
207.414 157.798 li
210.563 157.798 li
210.563 154.648 li
207.414 154.648 li
207.414 154.648 li
cp
@
1 lc
208.988 156.224 mo
208.988 156.224 li
@
0 lc
207.414 154.5 mo
207.414 157.648 li
210.563 157.648 li
210.563 154.5 li
207.414 154.5 li
207.414 154.5 li
cp
@
1 lc
208.988 156.074 mo
208.988 156.074 li
@
0 lc
207.414 154.798 mo
207.414 157.949 li
210.563 157.949 li
210.563 154.798 li
207.414 154.798 li
207.414 154.798 li
cp
@
1 lc
208.988 156.375 mo
208.988 156.375 li
@
0 lc
207.414 153.898 mo
207.414 157.048 li
210.563 157.048 li
210.563 153.898 li
207.414 153.898 li
207.414 153.898 li
cp
@
1 lc
208.988 155.474 mo
208.988 155.474 li
@
0 lc
207.414 155.5 mo
207.414 158.648 li
210.563 158.648 li
210.563 155.5 li
207.414 155.5 li
207.414 155.5 li
cp
@
1 lc
208.988 157.074 mo
208.988 157.074 li
@
0 lc
217.813 149.75 mo
217.813 152.898 li
220.963 152.898 li
220.963 149.75 li
217.813 149.75 li
217.813 149.75 li
cp
@
1 lc
219.389 151.324 mo
219.389 151.324 li
@
0 lc
217.813 148.349 mo
217.813 151.5 li
220.963 151.5 li
220.963 148.349 li
217.813 148.349 li
217.813 148.349 li
cp
@
1 lc
219.389 149.923 mo
219.389 149.923 li
@
0 lc
217.813 154 mo
217.813 157.148 li
220.963 157.148 li
220.963 154 li
217.813 154 li
217.813 154 li
cp
@
1 lc
219.389 155.574 mo
219.389 155.574 li
@
0 lc
217.813 151.349 mo
217.813 154.5 li
220.963 154.5 li
220.963 151.349 li
217.813 151.349 li
217.813 151.349 li
cp
@
1 lc
219.389 152.923 mo
219.389 152.923 li
@
0 lc
217.813 154.398 mo
217.813 157.548 li
220.963 157.548 li
220.963 154.398 li
217.813 154.398 li
217.813 154.398 li
cp
@
1 lc
219.389 155.974 mo
219.389 155.974 li
@
0 lc
217.813 150.048 mo
217.813 153.199 li
220.963 153.199 li
220.963 150.048 li
217.813 150.048 li
217.813 150.048 li
cp
@
1 lc
219.389 151.625 mo
219.389 151.625 li
@
0 lc
217.813 152.199 mo
217.813 155.349 li
220.963 155.349 li
220.963 152.199 li
217.813 152.199 li
217.813 152.199 li
cp
@
1 lc
219.389 153.773 mo
219.389 153.773 li
@
0 lc
217.813 152.398 mo
217.813 155.548 li
220.963 155.548 li
220.963 152.398 li
217.813 152.398 li
217.813 152.398 li
cp
@
1 lc
219.389 153.974 mo
219.389 153.974 li
@
0 lc
217.813 151.75 mo
217.813 154.898 li
220.963 154.898 li
220.963 151.75 li
217.813 151.75 li
217.813 151.75 li
cp
@
1 lc
219.389 153.324 mo
219.389 153.324 li
@
0 lc
217.813 145.599 mo
217.813 148.75 li
220.963 148.75 li
220.963 145.599 li
217.813 145.599 li
217.813 145.599 li
cp
@
1 lc
219.389 147.173 mo
219.389 147.173 li
@
0 lc
228.213 143.699 mo
228.213 146.849 li
231.363 146.849 li
231.363 143.699 li
228.213 143.699 li
228.213 143.699 li
cp
@
1 lc
229.789 145.273 mo
229.789 145.273 li
@
0 lc
228.213 141.949 mo
228.213 145.099 li
231.363 145.099 li
231.363 141.949 li
228.213 141.949 li
228.213 141.949 li
cp
@
1 lc
229.789 143.523 mo
229.789 143.523 li
@
0 lc
228.213 140.599 mo
228.213 143.75 li
231.363 143.75 li
231.363 140.599 li
228.213 140.599 li
228.213 140.599 li
cp
@
1 lc
229.789 142.173 mo
229.789 142.173 li
@
0 lc
228.213 140.349 mo
228.213 143.5 li
231.363 143.5 li
231.363 140.349 li
228.213 140.349 li
228.213 140.349 li
cp
@
1 lc
229.789 141.923 mo
229.789 141.923 li
@
0 lc
228.213 144.048 mo
228.213 147.199 li
231.363 147.199 li
231.363 144.048 li
228.213 144.048 li
228.213 144.048 li
cp
@
1 lc
229.789 145.625 mo
229.789 145.625 li
@
0 lc
228.213 146.648 mo
228.213 149.798 li
231.363 149.798 li
231.363 146.648 li
228.213 146.648 li
228.213 146.648 li
cp
@
1 lc
229.789 148.224 mo
229.789 148.224 li
@
0 lc
228.213 135 mo
228.213 138.148 li
231.363 138.148 li
231.363 135 li
228.213 135 li
228.213 135 li
cp
@
1 lc
229.789 136.574 mo
229.789 136.574 li
@
0 lc
228.213 135.099 mo
228.213 138.25 li
231.363 138.25 li
231.363 135.099 li
228.213 135.099 li
228.213 135.099 li
cp
@
1 lc
229.789 136.673 mo
229.789 136.673 li
@
0 lc
228.213 149.75 mo
228.213 152.898 li
231.363 152.898 li
231.363 149.75 li
228.213 149.75 li
228.213 149.75 li
cp
@
1 lc
229.789 151.324 mo
229.789 151.324 li
@
0 lc
228.213 147.849 mo
228.213 151 li
231.363 151 li
231.363 147.849 li
228.213 147.849 li
228.213 147.849 li
cp
@
1 lc
229.789 149.423 mo
229.789 149.423 li
@
0 lc
238.613 100.699 mo
238.613 103.849 li
241.764 103.849 li
241.764 100.699 li
238.613 100.699 li
238.613 100.699 li
cp
@
1 lc
240.188 102.273 mo
240.188 102.273 li
@
0 lc
238.613 30.5986 mo
238.613 33.7485 li
241.764 33.7485 li
241.764 30.5986 li
238.613 30.5986 li
238.613 30.5986 li
cp
@
1 lc
240.188 32.1738 mo
240.188 32.1738 li
@
0 lc
238.613 73.2485 mo
238.613 76.3984 li
241.764 76.3984 li
241.764 73.2485 li
238.613 73.2485 li
238.613 73.2485 li
cp
@
1 lc
240.188 74.8237 mo
240.188 74.8237 li
@
0 lc
238.613 116.048 mo
238.613 119.199 li
241.764 119.199 li
241.764 116.048 li
238.613 116.048 li
238.613 116.048 li
cp
@
1 lc
240.188 117.625 mo
240.188 117.625 li
@
0 lc
238.613 88.9985 mo
238.613 92.1484 li
241.764 92.1484 li
241.764 88.9985 li
238.613 88.9985 li
238.613 88.9985 li
cp
@
1 lc
240.188 90.5737 mo
240.188 90.5737 li
@
0 lc
238.613 29.1987 mo
238.613 32.3486 li
241.764 32.3486 li
241.764 29.1987 li
238.613 29.1987 li
238.613 29.1987 li
cp
@
1 lc
240.188 30.7734 mo
240.188 30.7734 li
@
0 lc
238.613 97.3984 mo
238.613 100.548 li
241.764 100.548 li
241.764 97.3984 li
238.613 97.3984 li
238.613 97.3984 li
cp
@
1 lc
240.188 98.9736 mo
240.188 98.9736 li
@
0 lc
238.613 114.648 mo
238.613 117.798 li
241.764 117.798 li
241.764 114.648 li
238.613 114.648 li
238.613 114.648 li
cp
@
1 lc
240.188 116.224 mo
240.188 116.224 li
@
0 lc
137.363 15.7485 mo
137.363 18.8984 li
140.514 18.8984 li
140.514 15.7485 li
137.363 15.7485 li
137.363 15.7485 li
cp
@
1 lc
138.938 17.3237 mo
138.938 17.3237 li
@
0.125 lw
0 lc
[0.5 1 ] 0 dsh
42.7881 162.923 mo
53.188 162.875 li
63.5381 162.773 li
73.938 162.673 li
84.3384 162.523 li
94.7383 162.423 li
105.088 162.273 li
115.488 162.125 li
125.888 161.875 li
136.288 161.625 li
146.688 161.375 li
157.039 161.023 li
167.438 160.423 li
177.838 159.724 li
188.238 159.224 li
198.639 157.474 li
208.988 156.125 li
219.389 152.574 li
229.789 144.074 li
240.188 55.1235 li
241.639 3.67383 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWFO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/y <1C60D8A8C9B7A73DB586573D0157E99900164D3426B7076627BC2EECA01286D768DC747555489A92E6150F2562090A782510749223A2D01B0EE6374EEA8FB8F18250484D2C6B565CDCA8D95B100B7B1E0289ED25E0E350438F56B28A332ADDF034CB8EDC264C3ABAA85278C66F3E4B6419> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWFO+Helvetica /Encoding getdup 121 /y putpop%ADOEndSubsetFont
/DVPWFO+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A 10{/.notdef}rp /L 4{/.notdef}rp /Q /.notdef /S /T 12{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]DVPWFO+Helvetica nfDVPWFO+Helvetica*1 [7 0 0 -7 0 0 ]msf103.005 26.6616 mo(Theory)[4.27686 3.89209 3.89209 3.89209 2.53906 0 ]xsh0.25 lw
[] 0 dsh
269.838 174.324 mo
269.889 174.324 li
270.139 174.224 li
270.389 174.173 li
270.639 174.074 li
270.838 174.023 li
271.088 173.923 li
271.338 173.875 li
231.139 134.273 mo
231.389 133.423 li
231.639 132.523 li
231.889 131.625 li
232.088 130.625 li
232.338 129.574 li
232.588 128.474 li
232.838 127.273 li
233.088 125.974 li
233.289 124.625 li
233.539 123.173 li
233.789 121.625 li
234.039 119.923 li
234.289 118.074 li
234.488 116.125 li
234.738 113.974 li
234.988 111.625 li
235.238 109.023 li
235.438 106.173 li
235.688 103.023 li
235.938 99.5229 li
236.188 95.6235 li
236.438 91.2236 li
236.639 86.1738 li
236.889 80.4238 li
237.139 73.7734 li
237.389 65.9736 li
237.588 56.7236 li
237.838 45.5234 li
238.088 31.8237 li
238.338 14.4736 li
238.438 3.67383 li
206.289 156.824 mo
206.539 156.773 li
206.738 156.724 li
206.988 156.625 li
207.238 156.574 li
207.488 156.523 li
207.738 156.474 li
207.938 156.375 li
208.188 156.324 li
208.438 156.273 li
208.688 156.173 li
208.889 156.125 li
209.139 156.074 li
209.389 155.974 li
209.639 155.923 li
209.889 155.875 li
210.088 155.773 li
210.338 155.724 li
210.588 155.625 li
210.838 155.574 li
211.039 155.474 li
211.289 155.375 li
211.539 155.324 li
211.789 155.224 li
212.039 155.173 li
212.238 155.074 li
212.488 154.974 li
212.738 154.875 li
212.988 154.824 li
213.238 154.724 li
213.438 154.625 li
213.688 154.523 li
213.938 154.423 li
214.188 154.324 li
214.389 154.224 li
214.639 154.125 li
214.889 154.023 li
215.139 153.923 li
215.389 153.824 li
215.588 153.724 li
215.838 153.625 li
216.088 153.474 li
216.338 153.375 li
216.588 153.273 li
216.789 153.125 li
217.039 153.023 li
217.289 152.875 li
217.539 152.773 li
217.738 152.625 li
217.988 152.474 li
218.238 152.375 li
218.488 152.224 li
218.738 152.074 li
218.938 151.923 li
219.188 151.773 li
219.438 151.625 li
219.688 151.474 li
219.889 151.324 li
220.139 151.173 li
220.389 150.974 li
220.639 150.824 li
220.889 150.625 li
221.088 150.474 li
221.338 150.273 li
221.588 150.074 li
221.838 149.875 li
222.088 149.673 li
222.289 149.474 li
222.539 149.273 li
222.789 149.074 li
223.039 148.824 li
223.238 148.625 li
223.488 148.375 li
223.738 148.125 li
223.988 147.875 li
224.238 147.625 li
224.438 147.375 li
224.688 147.074 li
224.938 146.824 li
225.188 146.523 li
225.438 146.224 li
225.639 145.923 li
225.889 145.574 li
226.139 145.273 li
226.389 144.923 li
226.588 144.574 li
226.838 144.173 li
227.088 143.824 li
227.338 143.423 li
227.588 143.023 li
227.789 142.574 li
228.039 142.125 li
228.289 141.673 li
228.539 141.224 li
228.738 140.724 li
228.988 140.173 li
229.238 139.625 li
229.488 139.074 li
229.738 138.474 li
229.938 137.875 li
230.188 137.224 li
230.438 136.523 li
230.688 135.824 li
230.938 135.074 li
231.139 134.273 li
181.389 160.273 mo
181.639 160.273 li
181.889 160.224 li
182.139 160.224 li
182.338 160.224 li
182.588 160.173 li
182.838 160.173 li
183.088 160.125 li
183.338 160.125 li
183.539 160.074 li
183.789 160.074 li
184.039 160.074 li
184.289 160.023 li
184.488 160.023 li
184.738 159.974 li
184.988 159.974 li
185.238 159.974 li
185.488 159.923 li
185.688 159.923 li
185.938 159.875 li
186.188 159.875 li
186.438 159.824 li
186.688 159.824 li
186.889 159.773 li
187.139 159.773 li
187.389 159.724 li
187.639 159.724 li
187.838 159.673 li
188.088 159.673 li
188.338 159.623 li
188.588 159.623 li
188.838 159.574 li
189.039 159.574 li
189.289 159.523 li
189.539 159.523 li
189.789 159.474 li
190.039 159.474 li
190.238 159.423 li
190.488 159.423 li
190.738 159.373 li
190.988 159.373 li
191.188 159.324 li
191.438 159.324 li
191.688 159.273 li
191.938 159.273 li
192.188 159.224 li
192.389 159.173 li
192.639 159.173 li
192.889 159.123 li
193.139 159.123 li
193.338 159.074 li
193.588 159.023 li
193.838 159.023 li
194.088 158.974 li
194.338 158.974 li
194.539 158.923 li
194.789 158.873 li
195.039 158.873 li
195.289 158.824 li
195.539 158.773 li
195.738 158.773 li
195.988 158.724 li
196.238 158.673 li
196.488 158.673 li
196.688 158.623 li
196.938 158.574 li
197.188 158.523 li
197.438 158.523 li
197.688 158.474 li
197.889 158.423 li
198.139 158.423 li
198.389 158.373 li
198.639 158.324 li
198.889 158.273 li
199.088 158.224 li
199.338 158.224 li
199.588 158.173 li
199.838 158.123 li
200.039 158.074 li
200.289 158.023 li
200.539 158.023 li
200.789 157.974 li
201.039 157.923 li
201.238 157.873 li
201.488 157.824 li
201.738 157.773 li
201.988 157.722 li
202.188 157.673 li
202.438 157.623 li
202.688 157.623 li
202.938 157.574 li
203.188 157.523 li
203.389 157.472 li
203.639 157.423 li
203.889 157.373 li
204.139 157.324 li
204.389 157.273 li
204.588 157.222 li
204.838 157.173 li
205.088 157.074 li
205.338 157.023 li
205.539 156.972 li
205.789 156.923 li
206.039 156.873 li
206.289 156.824 li
156.539 161.673 mo
156.789 161.673 li
156.988 161.673 li
157.238 161.673 li
157.488 161.625 li
157.738 161.625 li
157.938 161.625 li
158.188 161.625 li
158.438 161.625 li
158.688 161.574 li
158.938 161.574 li
159.139 161.574 li
159.389 161.574 li
159.639 161.574 li
159.889 161.523 li
160.139 161.523 li
160.338 161.523 li
160.588 161.523 li
160.838 161.523 li
161.088 161.474 li
161.289 161.474 li
161.539 161.474 li
161.789 161.474 li
162.039 161.423 li
162.289 161.423 li
162.488 161.423 li
162.738 161.423 li
162.988 161.423 li
163.238 161.375 li
163.488 161.375 li
163.688 161.375 li
163.938 161.375 li
164.188 161.324 li
164.438 161.324 li
164.639 161.324 li
164.889 161.324 li
165.139 161.324 li
165.389 161.273 li
165.639 161.273 li
165.838 161.273 li
166.088 161.273 li
166.338 161.224 li
166.588 161.224 li
166.789 161.224 li
167.039 161.224 li
167.289 161.173 li
167.539 161.173 li
167.789 161.173 li
167.988 161.173 li
168.238 161.123 li
168.488 161.123 li
168.738 161.123 li
168.988 161.123 li
169.188 161.074 li
169.438 161.074 li
169.688 161.074 li
169.938 161.023 li
170.139 161.023 li
170.389 161.023 li
170.639 161.023 li
170.889 160.974 li
171.139 160.974 li
171.338 160.974 li
171.588 160.974 li
171.838 160.923 li
172.088 160.923 li
172.338 160.923 li
172.539 160.873 li
172.789 160.873 li
173.039 160.873 li
173.289 160.873 li
173.488 160.824 li
173.738 160.824 li
173.988 160.824 li
174.238 160.773 li
174.488 160.773 li
174.688 160.773 li
174.938 160.724 li
175.188 160.724 li
175.438 160.724 li
175.639 160.673 li
175.889 160.673 li
176.139 160.673 li
176.389 160.623 li
176.639 160.623 li
176.838 160.623 li
177.088 160.623 li
177.338 160.574 li
177.588 160.574 li
177.838 160.574 li
178.037 160.523 li
178.287 160.523 li
178.537 160.474 li
178.787 160.474 li
178.988 160.474 li
179.238 160.423 li
179.488 160.423 li
179.738 160.423 li
179.988 160.373 li
180.188 160.373 li
180.438 160.373 li
180.688 160.324 li
180.938 160.324 li
181.188 160.273 li
181.389 160.273 li
131.638 162.423 mo
131.888 162.423 li
132.138 162.423 li
132.388 162.423 li
132.588 162.423 li
132.838 162.423 li
133.088 162.423 li
133.338 162.375 li
133.588 162.375 li
133.788 162.375 li
134.038 162.375 li
134.288 162.375 li
134.538 162.375 li
134.738 162.375 li
134.988 162.375 li
135.238 162.375 li
135.488 162.324 li
135.738 162.324 li
135.938 162.324 li
136.188 162.324 li
136.438 162.324 li
136.688 162.324 li
136.938 162.324 li
137.138 162.324 li
137.388 162.273 li
137.638 162.273 li
137.888 162.273 li
138.088 162.273 li
138.338 162.273 li
138.588 162.273 li
138.838 162.273 li
139.088 162.273 li
139.289 162.224 li
139.539 162.224 li
139.789 162.224 li
140.039 162.224 li
140.238 162.224 li
140.488 162.224 li
140.738 162.224 li
140.988 162.173 li
141.238 162.173 li
141.438 162.173 li
141.688 162.173 li
141.938 162.173 li
142.188 162.173 li
142.438 162.173 li
142.639 162.173 li
142.889 162.125 li
143.139 162.125 li
143.389 162.125 li
143.588 162.125 li
143.838 162.125 li
144.088 162.125 li
144.338 162.125 li
144.588 162.074 li
144.789 162.074 li
145.039 162.074 li
145.289 162.074 li
145.539 162.074 li
145.789 162.074 li
145.988 162.074 li
146.238 162.023 li
146.488 162.023 li
146.738 162.023 li
146.938 162.023 li
147.188 162.023 li
147.438 162.023 li
147.688 161.974 li
147.938 161.974 li
148.139 161.974 li
148.389 161.974 li
148.639 161.974 li
148.889 161.974 li
149.088 161.974 li
149.338 161.923 li
149.588 161.923 li
149.838 161.923 li
150.088 161.923 li
150.289 161.923 li
150.539 161.923 li
150.789 161.873 li
151.039 161.873 li
151.289 161.873 li
151.488 161.873 li
151.738 161.873 li
151.988 161.873 li
152.238 161.824 li
152.438 161.824 li
152.688 161.824 li
152.938 161.824 li
153.188 161.824 li
153.438 161.773 li
153.639 161.773 li
153.889 161.773 li
154.139 161.773 li
154.389 161.773 li
154.639 161.773 li
154.838 161.724 li
155.088 161.724 li
155.338 161.724 li
155.588 161.724 li
155.787 161.724 li
156.037 161.673 li
156.287 161.673 li
156.537 161.673 li
106.788 162.923 mo
107.038 162.923 li
107.238 162.923 li
107.488 162.923 li
107.738 162.923 li
107.988 162.875 li
108.188 162.875 li
108.438 162.875 li
108.688 162.875 li
108.938 162.875 li
109.188 162.875 li
109.388 162.875 li
109.638 162.875 li
109.888 162.875 li
110.138 162.875 li
110.388 162.875 li
110.588 162.875 li
110.838 162.875 li
111.088 162.824 li
111.338 162.824 li
111.538 162.824 li
111.788 162.824 li
112.038 162.824 li
112.288 162.824 li
112.538 162.824 li
112.738 162.824 li
112.988 162.824 li
113.238 162.824 li
113.488 162.824 li
113.688 162.824 li
113.938 162.773 li
114.188 162.773 li
114.438 162.773 li
114.688 162.773 li
114.888 162.773 li
115.138 162.773 li
115.388 162.773 li
115.638 162.773 li
115.888 162.773 li
116.088 162.773 li
116.338 162.773 li
116.588 162.773 li
116.838 162.724 li
117.038 162.724 li
117.288 162.724 li
117.538 162.724 li
117.788 162.724 li
118.039 162.724 li
118.238 162.724 li
118.488 162.724 li
118.738 162.724 li
118.988 162.724 li
119.238 162.724 li
119.438 162.673 li
119.688 162.673 li
119.938 162.673 li
120.188 162.673 li
120.388 162.673 li
120.638 162.673 li
120.888 162.673 li
121.138 162.673 li
121.388 162.673 li
121.588 162.673 li
121.838 162.673 li
122.088 162.625 li
122.338 162.625 li
122.539 162.625 li
122.789 162.625 li
123.039 162.625 li
123.289 162.625 li
123.539 162.625 li
123.738 162.625 li
123.988 162.625 li
124.238 162.625 li
124.488 162.574 li
124.738 162.574 li
124.938 162.574 li
125.188 162.574 li
125.438 162.574 li
125.688 162.574 li
125.888 162.574 li
126.138 162.574 li
126.388 162.574 li
126.638 162.574 li
126.888 162.523 li
127.088 162.523 li
127.338 162.523 li
127.588 162.523 li
127.838 162.523 li
128.088 162.523 li
128.289 162.523 li
128.539 162.523 li
128.789 162.523 li
129.039 162.523 li
129.238 162.474 li
129.488 162.474 li
129.738 162.474 li
129.988 162.474 li
130.238 162.474 li
130.438 162.474 li
130.688 162.474 li
130.938 162.474 li
131.188 162.474 li
131.388 162.423 li
131.638 162.423 li
81.8882 163.224 mo
82.1382 163.224 li
82.3882 163.224 li
82.6382 163.224 li
82.8384 163.224 li
83.0884 163.224 li
83.3384 163.224 li
83.5884 163.224 li
83.8384 163.224 li
84.0381 163.224 li
84.2881 163.224 li
84.5381 163.224 li
84.7881 163.224 li
84.9883 163.224 li
85.2383 163.224 li
85.4883 163.224 li
85.7383 163.173 li
85.9883 163.173 li
86.188 163.173 li
86.438 163.173 li
86.688 163.173 li
86.9385 163.173 li
87.1382 163.173 li
87.3882 163.173 li
87.6382 163.173 li
87.8882 163.173 li
88.1382 163.173 li
88.3384 163.173 li
88.5884 163.173 li
88.8384 163.173 li
89.0884 163.173 li
89.3384 163.173 li
89.5381 163.173 li
89.7881 163.173 li
90.0381 163.125 li
90.2881 163.125 li
90.4883 163.125 li
90.7383 163.125 li
90.9883 163.125 li
91.2383 163.125 li
91.4883 163.125 li
91.6885 163.125 li
91.9385 163.125 li
92.1885 163.125 li
92.4385 163.125 li
92.6885 163.125 li
92.8882 163.125 li
93.1382 163.125 li
93.3882 163.125 li
93.6382 163.125 li
93.8384 163.074 li
94.0884 163.074 li
94.3384 163.074 li
94.5884 163.074 li
94.8384 163.074 li
95.0386 163.074 li
95.2886 163.074 li
95.5386 163.074 li
95.7886 163.074 li
95.9883 163.074 li
96.2383 163.074 li
96.4883 163.074 li
96.7383 163.074 li
96.9883 163.074 li
97.1885 163.074 li
97.4385 163.074 li
97.6885 163.023 li
97.9385 163.023 li
98.1885 163.023 li
98.3882 163.023 li
98.6382 163.023 li
98.8882 163.023 li
99.1382 163.023 li
99.3384 163.023 li
99.5884 163.023 li
99.8384 163.023 li
100.088 163.023 li
100.338 163.023 li
100.539 163.023 li
100.789 163.023 li
101.039 163.023 li
101.289 162.974 li
101.539 162.974 li
101.738 162.974 li
101.988 162.974 li
102.238 162.974 li
102.488 162.974 li
102.688 162.974 li
102.938 162.974 li
103.188 162.974 li
103.438 162.974 li
103.688 162.974 li
103.888 162.974 li
104.138 162.974 li
104.388 162.974 li
104.638 162.923 li
104.838 162.923 li
105.088 162.923 li
105.338 162.923 li
105.588 162.923 li
105.838 162.923 li
106.039 162.923 li
106.289 162.923 li
106.539 162.923 li
106.789 162.923 li
57.0381 163.474 mo
57.2881 163.474 li
57.4883 163.474 li
57.7383 163.474 li
57.9883 163.474 li
58.2383 163.474 li
58.438 163.474 li
58.688 163.474 li
58.938 163.474 li
59.188 163.474 li
59.438 163.474 li
59.6382 163.474 li
59.8882 163.474 li
60.1382 163.474 li
60.3882 163.474 li
60.5884 163.423 li
60.8384 163.423 li
61.0884 163.423 li
61.3384 163.423 li
61.5884 163.423 li
61.7881 163.423 li
62.0381 163.423 li
62.2881 163.423 li
62.5381 163.423 li
62.7881 163.423 li
62.9883 163.423 li
63.2383 163.423 li
63.4883 163.423 li
63.7383 163.423 li
63.9385 163.423 li
64.1885 163.423 li
64.4385 163.423 li
64.6885 163.423 li
64.9385 163.423 li
65.1382 163.423 li
65.3882 163.423 li
65.6382 163.423 li
65.8882 163.423 li
66.1382 163.423 li
66.3384 163.375 li
66.5884 163.375 li
66.8384 163.375 li
67.0884 163.375 li
67.2881 163.375 li
67.5381 163.375 li
67.7881 163.375 li
68.0381 163.375 li
68.2881 163.375 li
68.4883 163.375 li
68.7383 163.375 li
68.9883 163.375 li
69.2383 163.375 li
69.4385 163.375 li
69.6885 163.375 li
69.9385 163.375 li
70.1885 163.375 li
70.4385 163.375 li
70.6382 163.375 li
70.8882 163.375 li
71.1382 163.375 li
71.3882 163.375 li
71.6382 163.324 li
71.8384 163.324 li
72.0884 163.324 li
72.3384 163.324 li
72.5884 163.324 li
72.7886 163.324 li
73.0386 163.324 li
73.2886 163.324 li
73.5386 163.324 li
73.7886 163.324 li
73.9883 163.324 li
74.2383 163.324 li
74.4883 163.324 li
74.7383 163.324 li
74.9883 163.324 li
75.1885 163.324 li
75.4385 163.324 li
75.6885 163.324 li
75.9385 163.324 li
76.1382 163.324 li
76.3882 163.324 li
76.6382 163.273 li
76.8882 163.273 li
77.1382 163.273 li
77.3384 163.273 li
77.5884 163.273 li
77.8384 163.273 li
78.0884 163.273 li
78.2886 163.273 li
78.5386 163.273 li
78.7886 163.273 li
79.0386 163.273 li
79.2886 163.273 li
79.4883 163.273 li
79.7383 163.273 li
79.9883 163.273 li
80.2383 163.273 li
80.4883 163.273 li
80.6885 163.273 li
80.9385 163.273 li
81.1885 163.273 li
81.4385 163.224 li
81.6387 163.224 li
81.8887 163.224 li
32.6382 163.673 mo
32.8882 163.673 li
33.0884 163.673 li
33.3384 163.673 li
33.5884 163.673 li
33.8384 163.673 li
34.0381 163.625 li
34.2881 163.625 li
34.5381 163.625 li
34.7881 163.625 li
35.0381 163.625 li
35.2383 163.625 li
35.4883 163.625 li
35.7383 163.625 li
35.9883 163.625 li
36.2383 163.625 li
36.438 163.625 li
36.688 163.625 li
36.938 163.625 li
37.188 163.625 li
37.3882 163.625 li
37.6382 163.625 li
37.8882 163.625 li
38.1382 163.625 li
38.3882 163.625 li
38.5884 163.625 li
38.8384 163.625 li
39.0884 163.625 li
39.3384 163.625 li
39.5884 163.625 li
39.7881 163.625 li
40.0381 163.625 li
40.2881 163.625 li
40.5381 163.625 li
40.7383 163.625 li
40.9883 163.625 li
41.2383 163.625 li
41.4883 163.574 li
41.7383 163.574 li
41.9385 163.574 li
42.1885 163.574 li
42.4385 163.574 li
42.6885 163.574 li
42.8882 163.574 li
43.1382 163.574 li
43.3882 163.574 li
43.6382 163.574 li
43.8882 163.574 li
44.0884 163.574 li
44.3384 163.574 li
44.5884 163.574 li
44.8384 163.574 li
45.0884 163.574 li
45.2881 163.574 li
45.5386 163.574 li
45.7886 163.574 li
46.0386 163.574 li
46.2383 163.574 li
46.4883 163.574 li
46.7383 163.574 li
46.9883 163.574 li
47.2383 163.574 li
47.4385 163.574 li
47.6885 163.574 li
47.9385 163.574 li
48.1885 163.523 li
48.4385 163.523 li
48.6382 163.523 li
48.8882 163.523 li
49.1382 163.523 li
49.3882 163.523 li
49.5884 163.523 li
49.8384 163.523 li
50.0884 163.523 li
50.3384 163.523 li
50.5884 163.523 li
50.7886 163.523 li
51.0386 163.523 li
51.2886 163.523 li
51.5386 163.523 li
51.7383 163.523 li
51.9883 163.523 li
52.2383 163.523 li
52.4883 163.523 li
52.7383 163.523 li
52.9385 163.523 li
53.1885 163.523 li
53.4385 163.523 li
53.6885 163.523 li
53.9385 163.523 li
54.1382 163.523 li
54.3882 163.523 li
54.6382 163.474 li
54.8887 163.474 li
55.0884 163.474 li
55.3384 163.474 li
55.5884 163.474 li
55.8384 163.474 li
56.0884 163.474 li
56.2886 163.474 li
56.5386 163.474 li
56.7886 163.474 li
57.0386 163.474 li
128.988 24.3237 mo
148.938 24.3237 li
@
0.125 lw
[0.5 1 ] 0 dsh
256.289 163.673 mo
256.488 163.673 li
256.738 163.673 li
256.988 163.673 li
257.238 163.673 li
257.488 163.673 li
257.688 163.673 li
257.938 163.673 li
258.188 163.673 li
258.438 163.673 li
258.639 163.673 li
258.889 163.673 li
259.139 163.673 li
259.389 163.673 li
259.639 163.673 li
259.838 163.673 li
260.088 163.673 li
260.338 163.673 li
260.588 163.673 li
260.838 163.673 li
261.039 163.673 li
261.289 163.673 li
261.539 163.673 li
261.789 163.673 li
261.988 163.673 li
262.238 163.673 li
262.488 163.673 li
262.738 163.673 li
262.988 163.673 li
263.188 163.673 li
263.438 163.673 li
263.688 163.673 li
263.938 163.673 li
264.139 163.673 li
264.389 163.673 li
264.639 163.673 li
264.889 163.673 li
265.139 163.673 li
265.338 163.673 li
265.588 163.673 li
265.838 163.673 li
266.088 163.673 li
266.338 163.673 li
266.539 163.673 li
266.789 163.673 li
267.039 163.673 li
267.289 163.673 li
267.488 163.673 li
267.738 163.673 li
267.988 163.673 li
268.238 163.673 li
268.488 163.673 li
268.688 163.673 li
268.938 163.673 li
269.188 163.673 li
269.438 163.673 li
269.688 163.673 li
269.889 163.673 li
270.139 163.673 li
270.389 163.673 li
270.639 163.673 li
270.838 163.673 li
271.088 163.673 li
271.338 163.673 li
231.389 163.673 mo
231.639 163.673 li
231.889 163.673 li
232.088 163.673 li
232.338 163.673 li
232.588 163.673 li
232.838 163.673 li
233.088 163.673 li
233.289 163.673 li
233.539 163.673 li
233.789 163.673 li
234.039 163.673 li
234.289 163.673 li
234.488 163.673 li
234.738 163.673 li
234.988 163.673 li
235.238 163.673 li
235.438 163.673 li
235.688 163.673 li
235.938 163.673 li
236.188 163.673 li
236.438 163.673 li
236.639 163.673 li
236.889 163.673 li
237.139 163.673 li
237.389 163.673 li
237.588 163.673 li
237.838 163.673 li
238.088 163.673 li
238.338 163.673 li
238.588 163.673 li
238.789 163.673 li
239.039 163.673 li
239.289 163.673 li
239.539 163.673 li
239.789 163.673 li
239.988 163.673 li
240.238 163.673 li
240.488 163.673 li
240.738 163.673 li
240.938 163.673 li
241.188 163.673 li
241.438 163.673 li
241.688 163.673 li
241.938 163.673 li
242.139 163.673 li
242.389 163.673 li
242.639 163.673 li
242.889 163.673 li
243.139 163.673 li
243.338 163.673 li
243.588 163.673 li
243.838 163.673 li
244.088 163.673 li
244.289 163.673 li
244.539 163.673 li
244.789 163.673 li
245.039 163.673 li
245.289 163.673 li
245.488 163.673 li
245.738 163.673 li
245.988 163.673 li
246.238 163.673 li
246.438 163.673 li
246.688 163.673 li
246.938 163.673 li
247.188 163.673 li
247.438 163.673 li
247.639 163.673 li
247.889 163.673 li
248.139 163.673 li
248.389 163.673 li
248.639 163.673 li
248.838 163.673 li
249.088 163.673 li
249.338 163.673 li
249.588 163.673 li
249.789 163.673 li
250.039 163.673 li
250.289 163.673 li
250.539 163.673 li
250.789 163.673 li
250.988 163.673 li
251.238 163.673 li
251.488 163.673 li
251.738 163.673 li
251.988 163.673 li
252.188 163.673 li
252.438 163.673 li
252.688 163.673 li
252.938 163.673 li
253.139 163.673 li
253.389 163.673 li
253.639 163.673 li
253.889 163.673 li
254.139 163.673 li
254.338 163.673 li
254.588 163.673 li
254.838 163.673 li
255.088 163.673 li
255.289 163.673 li
255.539 163.673 li
255.789 163.673 li
256.039 163.673 li
256.289 163.673 li
206.539 163.673 mo
206.738 163.673 li
206.988 163.673 li
207.238 163.673 li
207.488 163.673 li
207.738 163.673 li
207.938 163.673 li
208.188 163.673 li
208.438 163.673 li
208.688 163.673 li
208.889 163.673 li
209.139 163.673 li
209.389 163.673 li
209.639 163.673 li
209.889 163.673 li
210.088 163.673 li
210.338 163.673 li
210.588 163.673 li
210.838 163.673 li
211.039 163.673 li
211.289 163.673 li
211.539 163.673 li
211.789 163.673 li
212.039 163.673 li
212.238 163.673 li
212.488 163.673 li
212.738 163.673 li
212.988 163.673 li
213.238 163.673 li
213.438 163.673 li
213.688 163.673 li
213.938 163.673 li
214.188 163.673 li
214.389 163.673 li
214.639 163.673 li
214.889 163.673 li
215.139 163.673 li
215.389 163.673 li
215.588 163.673 li
215.838 163.673 li
216.088 163.673 li
216.338 163.673 li
216.588 163.673 li
216.789 163.673 li
217.039 163.673 li
217.289 163.673 li
217.539 163.673 li
217.738 163.673 li
217.988 163.673 li
218.238 163.673 li
218.488 163.673 li
218.738 163.673 li
218.938 163.673 li
219.188 163.673 li
219.438 163.673 li
219.688 163.673 li
219.889 163.673 li
220.139 163.673 li
220.389 163.673 li
220.639 163.673 li
220.889 163.673 li
221.088 163.673 li
221.338 163.673 li
221.588 163.673 li
221.838 163.673 li
222.088 163.673 li
222.289 163.673 li
222.539 163.673 li
222.789 163.673 li
223.039 163.673 li
223.238 163.673 li
223.488 163.673 li
223.738 163.673 li
223.988 163.673 li
224.238 163.673 li
224.438 163.673 li
224.688 163.673 li
224.938 163.673 li
225.188 163.673 li
225.438 163.673 li
225.639 163.673 li
225.889 163.673 li
226.139 163.673 li
226.389 163.673 li
226.588 163.673 li
226.838 163.673 li
227.088 163.673 li
227.338 163.673 li
227.588 163.673 li
227.789 163.673 li
228.039 163.673 li
228.289 163.673 li
228.539 163.673 li
228.738 163.673 li
228.988 163.673 li
229.238 163.673 li
229.488 163.673 li
229.738 163.673 li
229.938 163.673 li
230.188 163.673 li
230.438 163.673 li
230.688 163.673 li
230.938 163.673 li
231.139 163.673 li
231.389 163.673 li
181.639 163.673 mo
181.889 163.673 li
182.139 163.673 li
182.338 163.673 li
182.588 163.673 li
182.838 163.673 li
183.088 163.673 li
183.338 163.673 li
183.539 163.673 li
183.789 163.673 li
184.039 163.673 li
184.289 163.673 li
184.488 163.673 li
184.738 163.673 li
184.988 163.673 li
185.238 163.673 li
185.488 163.673 li
185.688 163.673 li
185.938 163.673 li
186.188 163.673 li
186.438 163.673 li
186.688 163.673 li
186.889 163.673 li
187.139 163.673 li
187.389 163.673 li
187.639 163.673 li
187.838 163.673 li
188.088 163.673 li
188.338 163.673 li
188.588 163.673 li
188.838 163.673 li
189.039 163.673 li
189.289 163.673 li
189.539 163.673 li
189.789 163.673 li
190.039 163.673 li
190.238 163.673 li
190.488 163.673 li
190.738 163.673 li
190.988 163.673 li
191.188 163.673 li
191.438 163.673 li
191.688 163.673 li
191.938 163.673 li
192.188 163.673 li
192.389 163.673 li
192.639 163.673 li
192.889 163.673 li
193.139 163.673 li
193.338 163.673 li
193.588 163.673 li
193.838 163.673 li
194.088 163.673 li
194.338 163.673 li
194.539 163.673 li
194.789 163.673 li
195.039 163.673 li
195.289 163.673 li
195.539 163.673 li
195.738 163.673 li
195.988 163.673 li
196.238 163.673 li
196.488 163.673 li
196.688 163.673 li
196.938 163.673 li
197.188 163.673 li
197.438 163.673 li
197.688 163.673 li
197.889 163.673 li
198.139 163.673 li
198.389 163.673 li
198.639 163.673 li
198.889 163.673 li
199.088 163.673 li
199.338 163.673 li
199.588 163.673 li
199.838 163.673 li
200.039 163.673 li
200.289 163.673 li
200.539 163.673 li
200.789 163.673 li
201.039 163.673 li
201.238 163.673 li
201.488 163.673 li
201.738 163.673 li
201.988 163.673 li
202.188 163.673 li
202.438 163.673 li
202.688 163.673 li
202.938 163.673 li
203.188 163.673 li
203.389 163.673 li
203.639 163.673 li
203.889 163.673 li
204.139 163.673 li
204.389 163.673 li
204.588 163.673 li
204.838 163.673 li
205.088 163.673 li
205.338 163.673 li
205.539 163.673 li
205.789 163.673 li
206.039 163.673 li
206.289 163.673 li
206.539 163.673 li
156.789 163.673 mo
156.988 163.673 li
157.238 163.673 li
157.488 163.673 li
157.738 163.673 li
157.938 163.673 li
158.188 163.673 li
158.438 163.673 li
158.688 163.673 li
158.938 163.673 li
159.139 163.673 li
159.389 163.673 li
159.639 163.673 li
159.889 163.673 li
160.139 163.673 li
160.338 163.673 li
160.588 163.673 li
160.838 163.673 li
161.088 163.673 li
161.289 163.673 li
161.539 163.673 li
161.789 163.673 li
162.039 163.673 li
162.289 163.673 li
162.488 163.673 li
162.738 163.673 li
162.988 163.673 li
163.238 163.673 li
163.488 163.673 li
163.688 163.673 li
163.938 163.673 li
164.188 163.673 li
164.438 163.673 li
164.639 163.673 li
164.889 163.673 li
165.139 163.673 li
165.389 163.673 li
165.639 163.673 li
165.838 163.673 li
166.088 163.673 li
166.338 163.673 li
166.588 163.673 li
166.789 163.673 li
167.039 163.673 li
167.289 163.673 li
167.539 163.673 li
167.789 163.673 li
167.988 163.673 li
168.238 163.673 li
168.488 163.673 li
168.738 163.673 li
168.988 163.673 li
169.188 163.673 li
169.438 163.673 li
169.688 163.673 li
169.938 163.673 li
170.139 163.673 li
170.389 163.673 li
170.639 163.673 li
170.889 163.673 li
171.139 163.673 li
171.338 163.673 li
171.588 163.673 li
171.838 163.673 li
172.088 163.673 li
172.338 163.673 li
172.539 163.673 li
172.789 163.673 li
173.039 163.673 li
173.289 163.673 li
173.488 163.673 li
173.738 163.673 li
173.988 163.673 li
174.238 163.673 li
174.488 163.673 li
174.688 163.673 li
174.938 163.673 li
175.188 163.673 li
175.438 163.673 li
175.639 163.673 li
175.889 163.673 li
176.139 163.673 li
176.389 163.673 li
176.639 163.673 li
176.838 163.673 li
177.088 163.673 li
177.338 163.673 li
177.588 163.673 li
177.838 163.673 li
178.039 163.673 li
178.289 163.673 li
178.537 163.673 li
178.787 163.673 li
178.988 163.673 li
179.238 163.673 li
179.488 163.673 li
179.738 163.673 li
179.988 163.673 li
180.188 163.673 li
180.438 163.673 li
180.688 163.673 li
180.938 163.673 li
181.188 163.673 li
181.389 163.673 li
181.639 163.673 li
131.888 163.673 mo
132.138 163.673 li
132.388 163.673 li
132.588 163.673 li
132.838 163.673 li
133.088 163.673 li
133.338 163.673 li
133.588 163.673 li
133.788 163.673 li
134.038 163.673 li
134.288 163.673 li
134.538 163.673 li
134.738 163.673 li
134.988 163.673 li
135.238 163.673 li
135.488 163.673 li
135.738 163.673 li
135.938 163.673 li
136.188 163.673 li
136.438 163.673 li
136.688 163.673 li
136.938 163.673 li
137.138 163.673 li
137.388 163.673 li
137.638 163.673 li
137.888 163.673 li
138.088 163.673 li
138.338 163.673 li
138.588 163.673 li
138.838 163.673 li
139.088 163.673 li
139.289 163.673 li
139.539 163.673 li
139.789 163.673 li
140.039 163.673 li
140.238 163.673 li
140.488 163.673 li
140.738 163.673 li
140.988 163.673 li
141.238 163.673 li
141.438 163.673 li
141.688 163.673 li
141.938 163.673 li
142.188 163.673 li
142.438 163.673 li
142.639 163.673 li
142.889 163.673 li
143.139 163.673 li
143.389 163.673 li
143.588 163.673 li
143.838 163.673 li
144.088 163.673 li
144.338 163.673 li
144.588 163.673 li
144.789 163.673 li
145.039 163.673 li
145.289 163.673 li
145.539 163.673 li
145.789 163.673 li
145.988 163.673 li
146.238 163.673 li
146.488 163.673 li
146.738 163.673 li
146.938 163.673 li
147.188 163.673 li
147.438 163.673 li
147.688 163.673 li
147.938 163.673 li
148.139 163.673 li
148.389 163.673 li
148.639 163.673 li
148.889 163.673 li
149.088 163.673 li
149.338 163.673 li
149.588 163.673 li
149.838 163.673 li
150.088 163.673 li
150.289 163.673 li
150.539 163.673 li
150.789 163.673 li
151.039 163.673 li
151.289 163.673 li
151.488 163.673 li
151.738 163.673 li
151.988 163.673 li
152.238 163.673 li
152.438 163.673 li
152.688 163.673 li
152.938 163.673 li
153.188 163.673 li
153.438 163.673 li
153.639 163.673 li
153.889 163.673 li
154.139 163.673 li
154.389 163.673 li
154.639 163.673 li
154.838 163.673 li
155.088 163.673 li
155.338 163.673 li
155.588 163.673 li
155.787 163.673 li
156.037 163.673 li
156.287 163.673 li
156.537 163.673 li
156.787 163.673 li
107.038 163.673 mo
107.238 163.673 li
107.488 163.673 li
107.738 163.673 li
107.988 163.673 li
108.188 163.673 li
108.438 163.673 li
108.688 163.673 li
108.938 163.673 li
109.188 163.673 li
109.388 163.673 li
109.638 163.673 li
109.888 163.673 li
110.138 163.673 li
110.388 163.673 li
110.588 163.673 li
110.838 163.673 li
111.088 163.673 li
111.338 163.673 li
111.538 163.673 li
111.788 163.673 li
112.038 163.673 li
112.288 163.673 li
112.538 163.673 li
112.738 163.673 li
112.988 163.673 li
113.238 163.673 li
113.488 163.673 li
113.688 163.673 li
113.938 163.673 li
114.188 163.673 li
114.438 163.673 li
114.688 163.673 li
114.888 163.673 li
115.138 163.673 li
115.388 163.673 li
115.638 163.673 li
115.888 163.673 li
116.088 163.673 li
116.338 163.673 li
116.588 163.673 li
116.838 163.673 li
117.038 163.673 li
117.288 163.673 li
117.538 163.673 li
117.788 163.673 li
118.039 163.673 li
118.238 163.673 li
118.488 163.673 li
118.738 163.673 li
118.988 163.673 li
119.238 163.673 li
119.438 163.673 li
119.688 163.673 li
119.938 163.673 li
120.188 163.673 li
120.388 163.673 li
120.638 163.673 li
120.888 163.673 li
121.138 163.673 li
121.388 163.673 li
121.588 163.673 li
121.838 163.673 li
122.088 163.673 li
122.338 163.673 li
122.539 163.673 li
122.789 163.673 li
123.039 163.673 li
123.289 163.673 li
123.539 163.673 li
123.738 163.673 li
123.988 163.673 li
124.238 163.673 li
124.488 163.673 li
124.738 163.673 li
124.938 163.673 li
125.188 163.673 li
125.438 163.673 li
125.688 163.673 li
125.888 163.673 li
126.138 163.673 li
126.388 163.673 li
126.638 163.673 li
126.888 163.673 li
127.088 163.673 li
127.338 163.673 li
127.588 163.673 li
127.838 163.673 li
128.088 163.673 li
128.289 163.673 li
128.539 163.673 li
128.789 163.673 li
129.039 163.673 li
129.238 163.673 li
129.488 163.673 li
129.738 163.673 li
129.988 163.673 li
130.238 163.673 li
130.438 163.673 li
130.688 163.673 li
130.938 163.673 li
131.188 163.673 li
131.388 163.673 li
131.638 163.673 li
131.888 163.673 li
82.1382 163.673 mo
82.3882 163.673 li
82.6382 163.673 li
82.8384 163.673 li
83.0884 163.673 li
83.3384 163.673 li
83.5884 163.673 li
83.8384 163.673 li
84.0381 163.673 li
84.2881 163.673 li
84.5381 163.673 li
84.7881 163.673 li
84.9883 163.673 li
85.2383 163.673 li
85.4883 163.673 li
85.7383 163.673 li
85.9883 163.673 li
86.188 163.673 li
86.438 163.673 li
86.688 163.673 li
86.9385 163.673 li
87.1382 163.673 li
87.3882 163.673 li
87.6382 163.673 li
87.8882 163.673 li
88.1382 163.673 li
88.3384 163.673 li
88.5884 163.673 li
88.8384 163.673 li
89.0884 163.673 li
89.3384 163.673 li
89.5381 163.673 li
89.7881 163.673 li
90.0381 163.673 li
90.2881 163.673 li
90.4883 163.673 li
90.7383 163.673 li
90.9883 163.673 li
91.2383 163.673 li
91.4883 163.673 li
91.6885 163.673 li
91.9385 163.673 li
92.1885 163.673 li
92.4385 163.673 li
92.6885 163.673 li
92.8882 163.673 li
93.1382 163.673 li
93.3882 163.673 li
93.6382 163.673 li
93.8384 163.673 li
94.0884 163.673 li
94.3384 163.673 li
94.5884 163.673 li
94.8384 163.673 li
95.0386 163.673 li
95.2886 163.673 li
95.5386 163.673 li
95.7886 163.673 li
95.9883 163.673 li
96.2383 163.673 li
96.4883 163.673 li
96.7383 163.673 li
96.9883 163.673 li
97.1885 163.673 li
97.4385 163.673 li
97.6885 163.673 li
97.9385 163.673 li
98.1885 163.673 li
98.3882 163.673 li
98.6382 163.673 li
98.8882 163.673 li
99.1382 163.673 li
99.3384 163.673 li
99.5884 163.673 li
99.8384 163.673 li
100.088 163.673 li
100.338 163.673 li
100.539 163.673 li
100.789 163.673 li
101.039 163.673 li
101.289 163.673 li
101.539 163.673 li
101.738 163.673 li
101.988 163.673 li
102.238 163.673 li
102.488 163.673 li
102.688 163.673 li
102.938 163.673 li
103.188 163.673 li
103.438 163.673 li
103.688 163.673 li
103.888 163.673 li
104.138 163.673 li
104.388 163.673 li
104.638 163.673 li
104.838 163.673 li
105.088 163.673 li
105.338 163.673 li
105.588 163.673 li
105.838 163.673 li
106.039 163.673 li
106.289 163.673 li
106.539 163.673 li
106.789 163.673 li
107.039 163.673 li
57.2881 163.673 mo
57.4883 163.673 li
57.7383 163.673 li
57.9883 163.673 li
58.2383 163.673 li
58.438 163.673 li
58.688 163.673 li
58.938 163.673 li
59.188 163.673 li
59.438 163.673 li
59.6382 163.673 li
59.8882 163.673 li
60.1382 163.673 li
60.3882 163.673 li
60.5884 163.673 li
60.8384 163.673 li
61.0884 163.673 li
61.3384 163.673 li
61.5884 163.673 li
61.7881 163.673 li
62.0381 163.673 li
62.2881 163.673 li
62.5381 163.673 li
62.7881 163.673 li
62.9883 163.673 li
63.2383 163.673 li
63.4883 163.673 li
63.7383 163.673 li
63.9385 163.673 li
64.1885 163.673 li
64.4385 163.673 li
64.6885 163.673 li
64.9385 163.673 li
65.1382 163.673 li
65.3882 163.673 li
65.6382 163.673 li
65.8882 163.673 li
66.1382 163.673 li
66.3384 163.673 li
66.5884 163.673 li
66.8384 163.673 li
67.0884 163.673 li
67.2881 163.673 li
67.5381 163.673 li
67.7881 163.673 li
68.0381 163.673 li
68.2881 163.673 li
68.4883 163.673 li
68.7383 163.673 li
68.9883 163.673 li
69.2383 163.673 li
69.4385 163.673 li
69.6885 163.673 li
69.9385 163.673 li
70.1885 163.673 li
70.4385 163.673 li
70.6382 163.673 li
70.8882 163.673 li
71.1382 163.673 li
71.3882 163.673 li
71.6382 163.673 li
71.8384 163.673 li
72.0884 163.673 li
72.3384 163.673 li
72.5884 163.673 li
72.7886 163.673 li
73.0386 163.673 li
73.2886 163.673 li
73.5386 163.673 li
73.7886 163.673 li
73.9883 163.673 li
74.2383 163.673 li
74.4883 163.673 li
74.7383 163.673 li
74.9883 163.673 li
75.1885 163.673 li
75.4385 163.673 li
75.6885 163.673 li
75.9385 163.673 li
76.1382 163.673 li
76.3882 163.673 li
76.6382 163.673 li
76.8882 163.673 li
77.1382 163.673 li
77.3384 163.673 li
77.5884 163.673 li
77.8384 163.673 li
78.0884 163.673 li
78.2886 163.673 li
78.5386 163.673 li
78.7886 163.673 li
79.0386 163.673 li
79.2886 163.673 li
79.4883 163.673 li
79.7383 163.673 li
79.9883 163.673 li
80.2383 163.673 li
80.4883 163.673 li
80.6885 163.673 li
80.9385 163.673 li
81.1885 163.673 li
81.4385 163.673 li
81.6387 163.673 li
81.8887 163.673 li
82.1387 163.673 li
32.3882 163.673 mo
32.6382 163.673 li
32.8882 163.673 li
33.0884 163.673 li
33.3384 163.673 li
33.5884 163.673 li
33.8384 163.673 li
34.0381 163.673 li
34.2881 163.673 li
34.5381 163.673 li
34.7881 163.673 li
35.0381 163.673 li
35.2383 163.673 li
35.4883 163.673 li
35.7383 163.673 li
35.9883 163.673 li
36.2383 163.673 li
36.438 163.673 li
36.688 163.673 li
36.938 163.673 li
37.188 163.673 li
37.3882 163.673 li
37.6382 163.673 li
37.8882 163.673 li
38.1382 163.673 li
38.3882 163.673 li
38.5884 163.673 li
38.8384 163.673 li
39.0884 163.673 li
39.3384 163.673 li
39.5884 163.673 li
39.7881 163.673 li
40.0381 163.673 li
40.2881 163.673 li
40.5381 163.673 li
40.7383 163.673 li
40.9883 163.673 li
41.2383 163.673 li
41.4883 163.673 li
41.7383 163.673 li
41.9385 163.673 li
42.1885 163.673 li
42.4385 163.673 li
42.6885 163.673 li
42.8882 163.673 li
43.1382 163.673 li
43.3882 163.673 li
43.6382 163.673 li
43.8882 163.673 li
44.0884 163.673 li
44.3384 163.673 li
44.5884 163.673 li
44.8384 163.673 li
45.0884 163.673 li
45.2881 163.673 li
45.5386 163.673 li
45.7886 163.673 li
46.0386 163.673 li
46.2383 163.673 li
46.4883 163.673 li
46.7383 163.673 li
46.9883 163.673 li
47.2383 163.673 li
47.4385 163.673 li
47.6885 163.673 li
47.9385 163.673 li
48.1885 163.673 li
48.4385 163.673 li
48.6382 163.673 li
48.8882 163.673 li
49.1382 163.673 li
49.3882 163.673 li
49.5884 163.673 li
49.8384 163.673 li
50.0884 163.673 li
50.3384 163.673 li
50.5884 163.673 li
50.7886 163.673 li
51.0386 163.673 li
51.2886 163.673 li
51.5386 163.673 li
51.7383 163.673 li
51.9883 163.673 li
52.2383 163.673 li
52.4883 163.673 li
52.7383 163.673 li
52.9385 163.673 li
53.1885 163.673 li
53.4385 163.673 li
53.6885 163.673 li
53.9385 163.673 li
54.1382 163.673 li
54.3882 163.673 li
54.6382 163.673 li
54.8887 163.673 li
55.0884 163.673 li
55.3384 163.673 li
55.5884 163.673 li
55.8384 163.673 li
56.0884 163.673 li
56.2886 163.673 li
56.5386 163.673 li
56.7886 163.673 li
57.0386 163.673 li
57.2886 163.673 li
@
0.5 lw
[] 0 dsh
32.3882 3.67383 mo
32.3882 174.324 li
271.338 174.324 li
271.338 3.67383 li
32.3882 3.67383 li
32.3882 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWFO+Helvetica*1 uf/DVPWFO+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (simpy3.eps)%%CreationDate: 10/4/10 2:25 PM%AI9_DataStream%Gb"-6kB\>a&h&'5J9M"Jf]5e<gL.;hc8hB@[]rCNXL2[?37!%Q;?q?n6%h8)p\gE@)kagn.]F[n;O,Dn0+OlXG,P@;*;l#n$H\6.%bbVrB\EJobiZ>ja^N1QZXieT#UmOIPKif[nP#,jAQH<YMk`t_32=8Naak:@SP/lV2TK=!MZef0#dJB^]<sS[1]"Kb@s,nb#<eG^?%3?8UA*P"=;Ui;E?X`h9rFYN)<-JhFTLO4XJ>+BcIm?;7f.?Cdk31klYdOU'#4`5Yg=YKbKDBJLTh.^(W6S4JU#<h^($kH7>q"LUI%R@qhL^]J7Ll1k76mRc!Qa&;F90;@oG.NOiYr.@e@e*';V(G\Ru)gK#W5<@iHW%mNFqThG/p.F`^]8_Z+d4"P,=McS"'(Dn#<_B)=%&nIcBi4Xt@gm^pTaYOsNnm<F5n#Z8ndH^?OKCL>RmTHGVn5L6!/j')!4\lEZ2jFush2>uK*aSM%J671L6XDhq[,nH2$bop52?3tE%r[2BO!\&*=(k'I=1cGWp.J,@\:%LJmKLVZlpa(t,!Wg+$;!q["DK'Bd,/R,*PsU`BJs8_h-*N]SeL,T[.\QhTBOL<n]WG5(6K<*@%7d>*Fq<7IWkRB:p[8Ej(O'YHNVTB'\I4S+kc`$k8"&WDQ'=k;'(eppVZ!Isea,VeZJ?)I&_to?&6BiUi]bsd0C.](tFhc_!1_@m@%`2!/)O14n"!gAL3J!'r,aWu7G1@SErWHTWp^*O)W8eO7O,kA<GKt#0.aX!*C-K-GBKMoo;PY*:'<OL+G#0LI3:^/Mi%(r.Q5cIE]%9#31UKMnWZPU_sVbu+k>PY+cL>(rm)C,-*6=0(i'=s`X!(6eHTp(3&@.D2WDQR%V65+r\_#sP$soL\F!Gm6E`:FH<.JktU>M@&i+%oEd_?$@2iI:_UYYW>U!bT?qNOL:be[J4Zt:i'SsW(OSQ;C)-09ir^k\3$q`Q=Fs?>-L!O)4_Zul)hAJN=3!i`62mMkoFF-Z-8L1K%fAmee1&-K$cp)Z+$!,-Zcp.;Y/*IukJ+t9@LHFu3V4`>-8Oeid&qX0d+!@S)!*ZPN+*GduqZtcH'Z$8r(XdBQH>#<Q(P,4o<l^,_%;#d0soM1sFcoZKAoU7mrrkTtH,4ccM7rUfOKhj*!^%;$LRB<V4JiNm`b\hP5X)g_#D:!;Y;oi3?f7c8_"Ri./"R?1C_&Kad*>,\t%V!UuNKhcA1muuqqO0kFY9JW*ZQkS8:)QNRnb[5e+PBT-<Fg^Kb9?!)YpW;c&kIj(Zi,*lPW@M6rAJNDb3'`C$9Z#OF2Uo18m8`,.%HHDY.^uIZS-<*i=r^;l2dD*e14AN'PDt<)]-PGL#r_<Ai.<;P?PJ;4.>c6%#m'Q=b.$,hQ2u+s>agM+Br]L1#RG?3)a^:l2Y4Z`(%a(p0XT#93s-Q-!+X^7-.e3>ZoMC5E85$b9+dY2eCS15?'eT.ZlXX:tc3?c7(FJfIA;AK,/I!beR4/m6]DS2S>7^,e[NSen1iUkn4%[XAVK3^NTGr<1d:=.Jn5+[OHAs2,pd7_]0ad]"Mf[em8B%IJ.e>L5jXlL!:)\=ZO(Pkfq$D1&O][j7*P33&uA0Xjq#0s-JAPTo"4%=f\_5muVi/U6nP`P\XAokaK^DFC,a0keMDMRZ>;\^haZ_\@*Z^<@fZ.<s`\@.tU\sgRXGaI54<dA`R&hM((3od!Fmj^d]X!.VsX5%oWTlID#7$OAWSm;-?H/DT-Q2aa:[d5:CV4rYM^M0%?FUo9'AF3qOt\IlO7`"n:=f3-91Pj`AI4BoF^bs8s^j=o\SO*Pgl;pAMW-)%5*8\f:n^[\0"<90&fDES!1T4')H?J719S`.Pj#j?2--06NCmEG<Y3c4,cd0d%s'BlT&>1D=Rogq>Z)PRM`%s%4kuM8_Be&>_l\g2%6C!Kgq1Xo1((5<W6PT#o))=.l8d2;qXY@+*:"*%C4g6sslMQ/nFKDH[OYK,'PjfS[F#O,B<`0Z;IgO\e=r**"7E($c8#!$7D5^TO%(O9c#`mCn7DqB(,/bL-s9'1S\XQCe3:aYnFi(6?X22jEc9s(#?[g@IZk&*YbAn6<?oi2BSFsu,V^Hknlapln42:rcp032IMWUi5P%d:\fN`C^Lm(G)AiFqq,_%<P?n9!oAX4Ct*7D:Ri_ah$pJjX]V3bhO7k5CK]YetV\tU/"o*.^u'SJnM-`%]\E>3Z(=!-oO4Ydr@cg%.b<u0S4Mm?MP_Q49@R;4&-0U/bp(pc+]ZcCXJ3+/.nu[m'pZpOXHi&HakEY,U-a^dg7d(k[4LgChrHd\%SD'Wo1l?kA=REl%M`/&%;j22I&Xa&BJe?I(<RhkaFON@a9^ArUAh)=THHaO--JW5(?H1VEdVjGZd?mHcA83*aF:S\u_6]urgrh18QRV<*`ID$e/V7Bo0-2XL%55!;tW9l7<*/S'_bR4;3N;JPD_seGYMV8EU^WA%O(hT^-K8b5WR+?1YQe1G@fB/tpm[?g=j&fS5`]=i>n6.J5/:Zo,.ImT!>i72J%Wd:51\[L416DH!pTZ\QOXX@+K7b0R`:Z53FCT;KE->fS>#,tTSA#p>O'0K."(:@21V00K%)2^K=1qTF*-uB0fATdAG;%j@*>pY)q%oh-a59$Xs>7?,G.g96OG"]hikB%;?9l86r=G_qkJe4:Hi%rRH&$Q:2.%4dj2<E`5Gn#4m6?pjsWUjoA$W`/3UW&%'A"Ve\N;5PV$%IRuQ)JnLs7G,8WFU<[i0?:-`$%?e2"^9,ig$rOq<m&U>hNl"9.>Us]#$>)psR@ds-9Rl\[AX$Gq$9_>:E?a/">"EKuMSKi.OXDh>%@in7b0petVCYrQ3&U@B)6?HTRVu$:*qpkBO5,clY1uVr%L*tuYC#!$kQ,["3jK#[C<Dcqkd:\$e.K_mkZq[ZfkTq]"aBaIQ[,+Q;%ZRb(3[M!OZ<MfS72,3QIE^hpgh]l%3MLV?XP$_%D7b8?!qJ=\d8G>TG#O6P<cF't3DhZA6<?770Ls,tnG1q1BPt+E(k]SGc,ap0R%9cedF%bq;\P?O2p1PCc;GYFeg=4O7&[SFn;26B)ADl]=ELT`L[BeinW)DWf0cm<"`g)<HrW2cR*;/8drP;FU@V8ucG7VTCc!>I:g%M'@)EhcI"dS]Pb,-*-0.SZJ4%+>#LH5UKMY]E\&<5_$2N@]B&:Q$YLE]Ae(R.f*Gt"W+GFO_Y-/<QPT>X7=l@Ud'B@HRkBO^PZsi%J(D*2CL_YE)Xa-"'kor57C]!5OqAHd$%gs[V#oarM-'o1]7bZthaD(/ha@j&)O+SOZWC,L#J)OdF@L\JkQL$okdrlT@Zc2LBJQkK%:TIl10+/Lh:,-_qbmmiN@;E3Jkch']MHgb9+pt?(%]tkVC:>G;#P9_.TdkQ.I1paK5$><83IM%\Q:j?62#^+^%Jup]=)$$6rTg`"%F*]__F9`oKRJ%Ra\WeJjU$'fJA[nAs?m:XnrK",Jbp9i\;<';Ip0bEt]-EB`P;-,UTuUE;-+>tlDM+uH>18>PSP2*#[`k;B`B;q`%p-sZKC#I^T7]S=[9mc>7q&cc5QQbfVE9/[ZEZ)XViFMMZ9YDokYBEJ0*E&b%Q0DsnqRCh^2]uZ:V!NU]44)+[85lC]k`cdPl:!kk%<%H^@I!j![Y)O>Jb?PG6Ri>/a;&=O5Q<US)cS_WVXutZtN=fQ+prT3gHB!BcfgT!]@0[!9>FTC;L;-3KO3\+k))^,gY;,n98/jC)%Z2S.ZQJ]5>Kf^<!)rj_TG&,a$NdI>r<%k%rs-!7aDed#RR45%_%n>r1)-,5ObOE-q(q6AJ\53Pid!Z)ocVtrQ-ej9gqjdR[X4ujs%T4iCj>)b.\6$qq24$\E[gPh1B)JZfAQuqHaM1.lI+a:Ph+nU.ECp[`U5R+!V9K)"5_@9n5o\6<9SD;"hGTn@Hj%@i0;CB3,mus7.%c<hTZ+<&ZbSDS+shFA#1U6XtVJ6Rn4MUlZmKrafamiBndAU5K?g^q:>ZseREZ.@N0ZS@cR#3$"iFRhGZNmSR2E!:!6<iFmZ1,CC`%j!k0h#NYjb4^AT*63j=5.4K@2eYi-<Pa&[)-*HKIY0!FsN7<+-iMa6-5kGts&^:!39St]2GX7E;9ieWVqjd@E)P_#MgR(a_3ZReR%Dm%VUms2&cfF9-Hpj+fhp>i=L"?e$U31*B>qQ0e.7qKB;R]@(_[.MH([lM,%nT26e+;H'RVcMh0Zj0>$lISl+4:4YG=i4Ph-#j2,%o$=\j72JOudsjl'@If=[@F0L/!"hc4!@%pf*[*,N6:2-/dV3gXSbI=<Feje`PITRbd%7ZW)<d_3-U?$Tp#um/g64`>?B:1>E+me>%U@ASY'\=1r(]I98O\'V*\N=MM73ShX<4'OA,POE5Y8HGrE#6dTf?7O7k+MUoO`/4:LibdGE;5<0HA2V,Hu;%o6[4cC4mPkjUY9B8%*?Ok1#G(q8N;'D.q=GH7BO-UM?KE6=oTD/[h0S6;RG<]X3l@V#I9.Z_T_e/L2STf76n^&LoO!s6c9uiZkctA06mHVi1`_'lY6KW^%eir+=XdR=KHl's*GJH2U0D&';"Oj]=PQGGfL!etr%LO\&%fnikDm$e'5[4N"k"a),JAlR=&pZA?Y\LX%P4eS>V>AFj/b.!ON-kD;%V!a`Rj_8l!b?mf9kdf;GQJVqB*ecM"\'k:LmLFtN,IKUh-$aDJUS1W:0MI:3[a>GulWHa<TJlua=7>6`@jpC":-P_gj<_]#mPap$%OVcp,WW_mFjtEHA7Zp1-BpC#qmaIsb)Khp6F2*e[:V[cgndD]-%sQMnEY,tSAl0ZH"4T6sUsYC>&J'*=kokqd539JUkl6E.p&F*d%GJDMD+o:__DZ/s^H]Pk$cb-`HmbV7-Ed(&4+<BA5GS,.E8)G(9]lE#WJ//(m=R".^NW0m#M*D)#q.IKTrWq/pT:&T65;T,KIqD;!%rlgU!V#CeToUc0]B,4=,s"e'_%-("[)9/$@1K5k"s-u\EU:ZD!GOk)%R/HhN^JNJKO[M^`m1aBjM1n2?2<lBYWuQE9kfQHh_Q>t:%Z8C#Mn-#j6HY1-fc<?gGU'=s.1QMN?8(H#.T'7:KY_])+nDk2/>G.Gb:UuH71>T=:>\U5WTg_Z3YFKoujoAY/YcY&_qF.RUNpA'F%[VYbYgDfpcfBo?R;5=S\3mHnW*XC*B6:D9W;<.[N'e?5T.b4C^FPA%N:WeK"mJpZbHO:jY?_E+he%fRFr;'K)1u:^&l>cq14(H[Q%)VqAr(@I6#b4X/>,fQ"6N"&kgUY%ks:1cabGL62PgFS^h91Jns^R?/_DCR@4%8DjUH#eKuiSHf1oSSBQ8PBDMQsf3/VpXkR//-o`%<<&:#HM0#SV%,ron;N+i[AN!+T_E(Jg$bDcfl7+I*T23VM6TgrhnC^>>Q0PLo)FJF3e%,+^R,u?iFO_2G$=q3Zrg"Yj@fgH6>go4%qtbN74o&V+@AVnS-,Dnp&PG^;Zs0^tA_8ACl'>ND&,.TBEU2%;9Zup$G=4Mk`2,E-=F0T):\P&*P2]m-d#I0qJu!t/r&u:%=KqF4%p7;3bcAtQRj^:,aanVBn5L0*;KDO%kkfK#X)bEB>[Ni+h44`/Dl%*Dh;2+P`O2l:Q1[TJ\6XIR:FkuMnd$nceK`aX1C'G17Yif"]%;isT,Z]RA9-XL*;imhUkhbsQ%3s\/_,(#g;Z%5%kn0fQ,Po(2F1>ZMdr9:n.J5]Y75M2\u29iE&mlo08#LeP(K5At&;2I52IQF#.%;$#kFPDOsW:kf*ZC5aLa6"AF<[bq9/YCP?1U0aXQ9h(-AGh>9VgA6MlctRjISc?ci<J'\#!^7dI`O(%rOTOuTFIm5;W_("6Z!'`8%0G&IIN;f!R=7SQhDl)9X1n'tQBC\\725SIK\Q!M>5GjDNfm>UoW^CDGjAJkra^Lt#2U-n]A,L1Yds*j>QqB6I*JJ%$e<+MW4#$n)%arT!TOg\F##N!=>1=0XWlibXZLQ*H\"QN6qg26&[8?g(+nslTh_L(1JeMP.9U4::e$,Ukld;AM[(@-j,"\j=4ORu9Zin6qa-_nMe%b!-#u_Q@]gLme_Zh`kH:'HQgOhAE7k@.9LF)M6L=PPNVY[0ED7gn#Nk06]1=(`j&AIes5\3cCpW>;R1,f+&#m7Zf=NMh]W1>g^7$%AP:D?P1&k.]&P5f@?@3o@W48:[#4Kh)$h01>lu01R.fI[67AC]ppg&fn5dgeS[r=(Gm&"*`Z,t`!%qTLB"5jW$kVcf0O+6MR9#[H%[%_P/MD6?6'R.T`Z)cq;pV+445/S_.M%Od>m)>[;ga,/8L8fj<9U?\o]!4/m&^OlgT`>,VlJXUs][";qhANbKk]+)Xgo+YN\T208%dbYNl7>icX*0+JK3+FTG^<(1;-Nf(h_^Thj,tGO1Q:ctYAVhh;Oi5qI/L^Mji;J'T:Y^hURYoAJoP;fA3$!3,q@/(]@Ta6QD,V%C%>mh/!4'e8J>[uRU9R;\lF&>hI1b2VOP\tV6Z.>S/aR99,WC'UXUdh5NE!iC.fhjgh(r=XD5nk#\7s*s90`$im9:JR_N^23-0o,fE%[BSC&`]b9`rFOlpiCE>uL1G'Fc*FGnquU"dqIm1IK8+3jR:tV&',-\<*f?[<%>:+S`Rm(sL_`OZs#tBN2PTng?&E+UVV)fG*KZ0e%,*^2d[$iE>^ee,X&I`5",/I*E-5/u*iXc\X2R]'JYh!QDZ;dkB8t1Xkba?';-a@i=3-l\=SJLX4*!;%4"@3c_6TgAPl3FV$*u1XI%mnCiQL9Zl/\7#;R<Utcr%&%\K(",NU/$>b9,6G#rNMH2\Cg=Z*'uk5J<PBK7m3/rb0ie!comSpK5/#l^nu9b52H9f'=6RSFln[_:%Q((;i6TT>Dq\6QQ4["-!HN+U``"W2BnIO"c'F5VJ^&rQ](.bBjI?U@`,#p&?=Kpo6'TG^rCeN1<f)UuW&92K4S%lVt;<KStSg3bn%n+UOkKH:(O:eNn<0,mI)/./'^[K/&oG$r4B[TP@bIJiIme`aoAS"VTe;/3"OWH"udQ.<HNb;jN2;J=^"rGn:\\4iqfG![W-1[0!=%99Cgd)1tSD9,UFih&+d8-.Z*k-M5eA,aN#]e#(hLadS65jhKlZ,Gf7#5W`s:d[*00;uXt>ha#kWm+?M7dhRE42q00Y%m3\gcUJiT%q&IK;O:Y'U<2QbX2+48MAdpgoNW_R:Q7s/a*2FBU@-l6_>bF6N`suj1h0B#7hD+E,Qj<aGh<=T5UQr"Rc]k0'n?uqV"7&KD/a3ER%GLdI=eCLg8Gc>#fAA=NeO]ZAr/rI&ZQa#n0A5P`U59)!Q'H;OGL.J`940Vd7"p(BlYmc.Qc6Yc1DbO[l<#uO<&H?6m8-9>QnOQ9r%R_d3=d9S\j%Y`7Dib/VJX3WmJgo'T@U'm<aK7e9?/ApP#>/Rnh>:Q/XBlZ<P4q<;<T+_N[M=I/.XJA!=f7)Z`gJ\#c;CoRqC>\pS%(V>[t4+EmOSr2L_Mr^chn/0mK7?6j)4apbJ'g)"U`+mC1hV7Sjh!TRjK1bo2_=RG(*$:r1PeZ8Se$kiH9M=X26aHHj'7Hnk;R[:r%et;O1YB">6au0%'m`eh>pi_$k-q*pKZcBhO(N.[_p%Gaj0'tkd$_]neY5jYB(?rZdnES%1q>As%pA99#fCgHS$gPa.0<d[$^lA5Y%<6t?V\_WrdJV&35)[:M@W6'fXV9+^TU@RX;0TZ)Dj2Qoto]pNW;Zud>iub2"r@9Ua\_l?"Rf`#tWSXr.e+b/I+K)-r>g9aW,7mkE%Y"?+WlgO&Cej]&aQdq,Ja.q&UpgNg-I<NbSn]LnNI;#_m(;24\`U?"V&PJeC+2rY4TLn[3o2u+ep]52PoYQ<#1"[A:-cP$?orqZ0%!]jY;8J^]DmcVkor>Q0pj.GRO4Eq\!DOhhQ!aVk@`,1(re`+uJ'i9r5JPE:coLH`'CBV]H?hip`ae^lARVuh;3./EF"BsOrY:rdT%Q*U`3+*(G$(atj*c&-L?Db!UP>TJ>!B?)iJ00OK4+9EH'kWf^o19,J'7I]!]Q3h4Kd<cnf!IYtOJ+g'^JF5:XWTo4ga+X^jJA1+%%0'n,VDb,HH-YoA:^?>%_VgMnSMP(NbkG;SSB;8P;!ZKq`AofjqPO%O!dta/Fd.mPa?Tm+'6Vsl\\lS30r:-!A\J7rT3p7R;!o5t&%Q"q_>!(?o=o<n2_#AXI7h"(G_mcG,_9b#@*AukVT.7!?s!>EhuchHN)VYg^9jlsBlkj(TrY9.:#!#h<jl2LEQ.UL?>Xap!8hRdS*%MP2G+e&R`?VB+#"rj7#uBas]Jles7H1_WNTQcDu2X\-4>enafN\.-g*3.H'i)70E*SQs`]O!u*Ja%q9"i?oXMTNC[jpLsm)JA6B_%b#nhKB=9r%Rt0rQDqWaskfotVd+^lpHef0FLOY-H^?@gZ?RW-+#P+4b'ae%EI;Z2.gB.?!G..ruJ3N)B9R_79`3&o_)I=A;d$h<E%qBk#%Ck8bF^P"Qe-u^o05kmgDlIe)r%F6So;fOJ'QJQ=!T\1DC9puFf)[5GL-=d2Cnc-8!H6Wi!gr]foNL],^S/k9Q!&QIC;Qi([%C$56m!Sn]aHWiEInd<`85)dM#8.,=n`[b1Kiq"FBBV\8`I&1jh"e[R`d*_L1n(X!-WI"cT3]-pAb0NLp$.un0'K#ns]/mU9^d+ao%FhLNP'dnF%=IQSs-pQ20)sQVQY.PE75S&8a^DXk_;'i;ae[(k3WDC_X]\>Z9=pIp*V[=5-!na/]q_fY3Rj6[cHtB2r;4h1?YiY`<%rhDqkC,[pO^4((plL;1Zf!9dOm-B,a:M2B$+3-<Lp2?Qu^VB--?J]3J<_jHhnX#l5UA`hJ(P>Z@VkZgO<1-qWIV/90>c3$mN'3RF%)Lq?URbC!>h)O/.Gaa!ekYGhGG.[cW[X\/tnJJ]aqYV?n[<ei^lm34XZ[_l6j$gD)MV*8.BE'f;'5]^:9\>?<?e[dsB&[h-V^FK=%i.*Q@oI%7fqf[.(3-_iZlIu`6''drtd1"$B)ooL-om,"[qg9Spmb'c5mtgYB_pe"2WfAh)Hq:<&nH]mC0/U(Te"E-MpDm8?rS=OF%[nnPpLUS=SH!NVH/Eap;=6ZZ%F,GFscM"ci<iLE><,EjtYZAasU+4a'/6(bSY-ZjkU+*<I6/3T4@A'*b20!F+/?3)o]RFpO7eJXJ%/o>#cP,LIqdc8#9XL[A5IgbMhG>kU0+Cr.R=91kG+=iiS^&h>t;>JSD%8`keUb78F2F-`'XFPWpUp"RaTk)\T7GV*r\@)RPFjQ(q%W'G-()X*27Lk0;g5CU./,PWf5;F'!+S*N,^nQ'C'T;IbPB]:fba?OiB5X?;i&H#5reHg9!g5+D``O^[2d,[6$%W=Dc2tf+Xs69Tk%[ZRp%$CZSR.$hl<W<<i*_[bma4j`iCd>^:cO@K]n#(bT\k7R)_<"ZQ*],Xa0WPi#+K>&0pno(4<JY>OaW9Me59Mog#`pCRu;RE6)%Aq/hKci.1HG#o<co)&M27PYq)EfitIqC"d",u)okXAJ-;Kt`ue;A3`WKStKQ$#'S><<i-2Jg$US'*<Z3L+YDNhjoL$!(;>qRCUU/%l5?Tj0)$&c9IG2b@D_Kb5B=Y,qb!![<C<'Y(c?F(LD2Jqd;X_rgo"EN_Zu?g2=-!t/:=B$O(G#iZ*gbYON)Z#=7Id_OlM"0P<e"Q%NN/!Z)mq:dY([./4OWpAV-Tu5b4C2,OU:+V`b;1.O2bI.f?(/k-Z*ZAe_U',+##\,6=N$.>AO'@g5[8VcWaQ^S*_<+.@p,K7Z_'V%Gkk"HZ'q:+^E'VM.N<lpc8F8]Ks@*7"/59JXt;H9e9SGBoCuC>Gq9lein`Xe&+f7df]2mo_;i!M5*`$Na@LV,B%!IISq6OtRQ07&%4u+l9:i!A!oZ1[M9d5hHiiW?OpjoD%``;gqh*SLI325BWEaJh^I]8.Le)HKIfsY%K`0rVHdI*cFbBGP14[3!BMZ^!:Jt$uofeas0%e5hrbYOL71g/LQ!@_,X4b0d%IKV@03l'\\+6N`%qKT?Mq@H-0u[<l,bGl4Y!ET5EcJ21h^O#aW.`#rSRPD<W;+`k/$A`d"E=K@/G%W`(L,k]_0;F[rp<.8ES^WQG)'=E9u*C]o59<"SLU=A4Xmg?Y4)E8hDQSkRA\1UEi;6Nu_sp3:k'c-<Vr.0XS`IUhbI[%4GVk9.E!%.totl$'>lY6:g1BR[Y#29R>DM+]SB>Rb/7]o<ZPteG+Kj-dHPMKLK`2Bm+l$j'SZ6Oe-:f`CQt@OVOT.YC2Vq27k1Yb-/4.V,:8;%S_Bmg$Z4.Wa%qmO$mXs_dP6eiL>jj[,Nsf^S#GphnB=m8Cp'2&=(U/W<\!,FXN[CgI[(``<f&PNPo,^N_3i**Q&-8R.)/&frRg;f%>E-eRd]loeCK#>-cnTlI_Km4rnig[Ug29o>ll16Jii@*_hf,&p1Q!sEc*bL8`:'d>Go3cl3>Zk?E.e!22dW[*Pm'gs&G>/8AK?,"%RPKq]BA!iW+.D2pFBKMkOtDY&d:>m/S@GY"ZY%ilS()Na77hq)fQ99;:*)<]\1*`1&!TRtJNoH68P+:NIn\u*?t\!a3j;Ma2&XDk%I+U$4kOFTbO1/qg67o;X[3>[&,R$Dr^<]+GSgT*6q=K)^UeCNQX(-=1XYsmZ^H@QA>un7Vf%N[c#C&U4PqA>n<;cXEc^ck'n/)l^%)k@tnrlL[B7DnoJ=qVr.^+s6H$f$_Cc61<;`.c+6^;P#,UlET;C=9.2$8[`KYBOYbi\hPbeWSk\>KqV2,9,9S<#So)MF/r01K[0b%9X;?!U\o#tR`F2DS$'^4bEt5mFgQ@+B$9f#IF(*D)HBD06QX"mBN]O-o-;qgdEZnWC5s=oXl1Sn4pWb/ft`68Xj:ec0kg2Klo<X5%Ak<"g1"[D'_DF3`#;eOuMUF*WYUF@p?Ll_,od+T:4OVn*)40%MYVO)^q%gl,n?=T5e@"Z6lXb<OjFJp_aeg51_7!Dd^[k.NRXCoP%^A0jdcX\kV9MB@*!g#S>)7c;K-]be]-HRss-<ZXta,JY*b-KUN@?P21X,;/V?I6TLm`rT8X?$h:3,I%<(9i(NcnNG0.3IMl`,at`%n"?s;!s4=meOo2$BJNPq4'@`Lgg/o6$?qs*Cl='GS"&MReC%<W;3>*kb62S-et4Gb/R"4a:5*#4a7!'T/E`LpmjU?2jrM=L.PmO4%@@K2`OuL4Wn0Q,FM$C!e%BAEiW`$4U\b%MQ/EF&"A$a3g,=I&0-ke(En^EYqWN-Z!a"0YHpJsW.?sL_/9CLl*Am?eoF@3<<0hUq3%=l$0L0MjT!rW8@Uq3Ijjf/c?)B'l?jA#*e`CEMhESt^f!nFA=<DTs[)??&+tMItLe3S/IpXCM@c#G)?lPEF(nF_GW3)q%C@/Jtq%%NSiQnC'1nf5Le4s4)*JM15"PmUl8>Bf&LrtZ`#YVm8?t/X3tNXfqM(`[?rI?:R5`+fm@:9c8ROS9l*564ND?*&a^%8cjgUTJmGH!%G(nZ$3f<6CE'84TaUM6Yl!e54C?XP+0*Lb9(!63+NcE6XHmM0Om[P/^4YJYe_((_TqboJC'qqYi]$U_oa@*YJP4.Ss@V@<Z2JFV8%^B/;/>3![3=h,C!_^=8FeY6d;\=U[MTm=GDmE+s@_s"1AlgE':$gCsEH+Do"aMFfK]1tdCcXGT-hgqJ=he#Dm<9ak>IeTst^c%`0%8nLX2<V<oJ6MXbb2lc6!fnM]NC[HX,Q6ksp>j=-@Fi:Z4ST[e;.E&;]f=Eo*X#lklH9!S*RDhV7`K;l4a0U`(3M)-\!O&kA9Vn,i%.?_Ykc)C(ia&Ze;X6&G,<UNrPD2Tl"H!`Q]cZE^2F_/EeI5Me'k*X8^XG[q%?AR<+E`UJpG'i4,+pRfUfLu'q)*p4'H8bj`MK)*F%q5Pp&K#l(,PdP+3LmLcJ5JF&<&(R/m4`40!=%4jTYBgVJEs*N1YuS`h3ChHTZTD2!6Y?R%O.at'4\NfA3ChGq&ZNsnctWEs14i91%O=V28k8Zdc7ggpc6g#FTB+ljVG77d00nN/](0iJHc8_]`3&^HjQ=XRiS0R6r#eQpBkUZk\P2h#Q68<T-&Th.;GB?BaNs+/W\gtH`%+*dZRT_iEI7LrmF&md4;B=33E5iD%I"37iV/t-,hA#t46dd)Q6(JA]"bj?2f]#urI5:'>m%?-8&_U%Rni*d#u]Bmk!-Y$/@r_f=B%=tSSqPB3?Nr^H2t>Q::b_aLIN3Cc8N%U>S%R$ts&\T5J!A&t18T+^1;XZRWVL<.`5__(shDL5coXrs/9HQVo4D)PG,G&K9e=aI'X%FDZJ.O;Uhb#^-TZ+>D3IoG4h+6Eo2agGX4pYP40QK?VZMi;dOGa&t)F,'K6^BXo2!F(IfWXO+$[dAXY@jGYq+C8LXLV=a%6EhbZs%OJtU'BiFpaX^`SMSklgcaE#qVVTgBnVi$\s0Ks9es%\Vk`JHU!XAH+gm'lmpUVO5r4u]a)4c[k*_q:pVZc@X-`4s++%HpNlh;rA&%N4t;V2E>,X@:n?3#@8K7[b*"'"k1<nSiO=-Cr'X%5O19m\!WOC-3HF8_8,f3Wlun[LA8Qj=6ALB59Ilb@qOk>=#TQP15n47L#@tG%PMp_Kq_>WBM8d(C(U4Q'<t#0(,WB:?lumPFf6B==.\Hj0P=0q&T%s_J_e!s,msaV)\+<XUGuo*[?.lP"`V-FTK@t#,<e]ke.(Y!q%8Pb).&bf*^f+H/b*TP(t3fis>J.OZK[;Um1;cF[A&iX0V*:;?jA8l^T$ZsJca:jbXA[7:7j[b<ccE@>ZW*#g`BfhLhjtuP2Ku[=c%$lRSqgPDfNqT@m(kDA(BW0Le4PK75=F..=>_sG6E<_];NL`#Y]ShQOU9N/aTEcj(>7E-dD%4j7=]omAAc8Nd]0q5\?6_ieMaOkg:%S&=7J_irIl,Agu*3V1oELMksrC_dn&,J.RPYqq`5>46DrMp/754Bab7X0Ka=XpJ<*HP#i[=Y2BsZ`jm+F7FBp\&]O=I]t=.6Z]ZV%GaRL^QF4eYr.(0Qr8BXofWbq31!aC=;"O&,`#OQ$^\6FZdV(!L\-pJNRTj-<1/J\IBPF6%>'P:&1?hon`YjasW+uFbY/*f?$U\EG%g2d`GU\la1M5t-+"noIHeLc2ef^K/oi"u.>dh1V6XL77q=!K,$-ahmt-*jAh<A.abPBsbJUGJDKVFAG*3ZcR_k@aLfRk#Q*jnu@u%`P]OG?ZttMa2>0.W%JksVu-/7&TLJ:b$t<$'J2:g4Ik6QaD0bo8F2g+,&Ys$E$cOj_@iG]4Ikr+!/c!&1`jqU[5PX#/f"sV]Ba5O%0=J@VW<<c[Urj9mnRCiKOk1"*OWG/CD1*V3R=$2afDa$&l0s!A6=E>Z8Cr0(O0rBQi?e0@F-MN0CG[2`nOP:2a$FW%\7Bp@QQZL`%fc.lb_[4[61nN'SA?XZtM!iO$$n\SE,mLOWVMHW>EF(_HRXH(1biP:P(SOcdeIp&%a#77Wb=Ua0_]r4*cr>qXBu%6Mq3U'!p.FUQ%H5Y^GluZt8ZYj_F9[Vh*K)I6S_3N\l]=PS9)m.Ompdee6('"X2Wk06'_6j)=Hhpl:7&mJ'n'a"87&mK2'L^(ZOXdHOQW@B'[UmXT%S,"7+Dc[X8HFo>reCt^,Uu&7&,5%9#(hbjl<lsBo4U0WuYi+rSA6O_bA"XPbkjGi7"(PSj%\[jo)f!*#SHV@=0ZL2V\\_0&N3Q05%1TcrMKk%Jo/f>"/X&lG\'[Da-Y;R)T5!>Ae7XL7o3"N&sDTR!ZYQH>A4V?P&,F;l_SHs0#,S_o@W#%$cRA3QN6&'CL$A@V#a+Ff`%O^Uke7Eq%&,P`6f3_df>FTLJ4*EX@?,<W&e@[n%]bX&YPlg#@m``Z&LAINO0bjgHAg-:)[7;cE]^1]fYnO3sE'd$=]9(;-fnqg_i%`uZK@5D4FDjbjb!5XNc?L,P]oVC!h.$uopTZ/?_OCXs&j'OMN[);7I.&-B;KknNJ"Mph49!&V>5I[jUC<O-+%>4"hl@(-B=@(.ee%#eThp9>`BC0a%p5C:EP[[[gm4MO,#R/J_"&a7h%K7*utU#-"K-Ssk;fmVRM!o^4b/f^[K#IprL:\\<(2'4:*Xh-;/j`c8&n.`$"b%[i8PEOA#;r/s\3R(h$LJDqP14NN[Ce>G/^DkNJ1>9]_4BkJt@1JI%P_g-&A+bAo8b?Ji.1cM%-5\N=pcRJ9bDS\dE2kif!R&k#_M%9qZ-.VpLdqe36M<K?LAoK!j5SH7YQ3<*;&<"uNQaNS00FZX?E%jd)gfVFbBlX0Pk6?8tocl?5ek;OQUIX@o-bA<LH0_Nir*W#>-4%*O8SQm/?br80V\ZKaZT!Q0q6)f_ZJ-3sV@fJ$-<dfGhfr=__]7af=9j5E<EKPV's;Z_XG0.q:E,MktVdd<#e?Qk`$<=iJf,IGe0=%9kW!6O+5^-FL)E*LY;AOkD?'?3:_(RD/=T?b=\PoXO%#s=`$!dgBf%(M5FeAaNI*&ktTV!Ak/op6IBmUFr''B]?4eJX&qD5hk&r(%l)Y"T6YsV3U?Sagkq(.\==TcbMR;X_Al[6#<_^I/AYmdr%[,6IUZnk5;f%4lBf)C2ppk%)RQ$\\WiGl=Gho+YXK$;sY?WcMc3@c/%Ni$"u``r[7B8ir:Ra,Xe`Sqm4-)9_+@d,FaUb3NZB,+'PI:h(dd<*C99k*?li[Yh$VR*;<hEQ;5BK?5b?9+34Gu`76<[*Ojg0Zh.%c@?=7j-8X>RRK$Xl,^(giGcnP3c"0oBN/GlAS>$C`TM4sAlJa@F9PKFQ&>jpomI7td,XE"+/l\%G$;J][,tbb][D1MDK_DtjK#VE%`Nn/37?-#))G_V&'>t5I3p&1$4rNq)1,b#X'[/JWS6_/#3P./j+9B!EEoqm"k/H\7<[T`(*e0WJA/b-7h8sL,*seleo06]hbgC.m%(A<KO/'XV?PO1d/_tj6CD(1EJU:[8Ngemkth#ci,3"oQi*-P"t[re(N=_d1:@CSjs4-N+\3mlal@cgC+k;\Zngn.]sgb!h)glXTT%IZ\]SOC[WcC1L>CV>PINM^;Dg60LLQFoZ-4j[!/[/n7<r]0&RkqAu(,l"l!01qf&,6/?"a^GN-I(cmrg=P*>b)5fig*3")_1aMOZ%,G&R,_j"$t"WFp/'2R,&FdWXb7VD1.GraKfZ]1Y^Tf3[cCj"T2B>"JZSN68g`Nbg_nhFefm[^U40\-o+X#8JU:HZpE[#/0YQor"9%lX@n0`oPeVQ+7%Q3I7h;NP9@M_;Hm-]=V8*WIUqQPt6-l]*uW:/^oA).bgGeI@_FjI'8R(%'t^D6R6!hH$dl=M;.l'h[Gg2-m;`*%>^FX9YrVfl,T_kT0H>QujlpegqteFT98!d[lb^S<3JO\>!u[VQX)U9qT+Z*uXU<6aX2_9H:T_#0F)6k5#4SPKD>!?$G'LJI4=_Ne%YN1X-<XZP`a5%AZ>u[Gu4X-8[+_-6gVS(GPB=QD8+0BV>bo-=j,Lau2.;t>n,-+C_b:c5(L:_"PjfrI.F1.(gb#XV_:=&ZLS`=VP%^fintl%7l=%+i9I-S]8:F%7CEgd5J1e[_GOg%'^%:HuFOdo)<h;22ki[r\]k4\K"cE%PbqQ`%UF)Fm:F%s'n8na0@(/Yc#HVor:"%^7F,:L9N(.KI/,2mRicglIFq5SrU@71!Q@H)dm[X;U8*^NsJt0H#X$uX#erS<Mcb`MqBV@(e_#(Y=)lG_kNs\"u0Q`(s\_o'ZS)D%,kHtfXU5HS\/+Q$UF*fr`\k[!e0_U@fB/GXh'3:t^0`qW,;"tMDLO[J7I97[bs!(i(.G);fAbV>_%t9@_qZo9mSWS.Ki$+W@pC0!%SK5m07m4K)\=t=pPO9$Xb0j'W(YQX<[Q_-MVhfd5VW8+*D$r<k&&S/qI?E.TPqR5Z8A_Pd*8BZHqk?Ta$(ed+:+<8WGOS<c:UMem%A#BD%nSm_KNi2FC3a0EBW`gIPNPU]gFbW"pJ`atk[p>Faa,G'm;58Q`'S][_T%X0=Y&Es/m8pnB]GD5X6Bef>CqbQccrt:.Y5pKc%iN<,*Vb_K0C!Rj86gW_+*h>gJ(n)5smU"WOi?^ZTHaf]B%M\TTcr^+s5D7r*hA.MHIGVF@2h\+ds#5/N[#=lu2up)N=^.Pon]0V"%%[?%&UVlSmes"^/#`^n;oO--)VQ_nP(d*XEO/bL5e$a*b]%lP]bYi?GFOt04o@oKL9jb[6'Usb>cNp*,_F<o_![cKTeL0,,:T#!E%-TX45+ZS6CR<F4)gZe93b_FCq*YoM(qtQdHjt'k?:!uc@454lMEbC<=ZI1uRbKP"8l/H#a1?ZO<gBHkq$>1nBBWa_3[C3B>1e3Vo%q4c<SF5]]oC,RFUW[tHMrb5\BN8B0srJNBeM9<[%e0t1sn4ZPSFq^D5`,jpPek8ZnYr]S,c88rR=8.ikR9[;WQl0tBgdg]5UR>u'%Q'Fc_]i;)_?],R-)&2$+kh99IZeXZAXPbAXqoDUCCFs?EKD78=^"MLPlcL\.b7Fc3'ElHmN,4;YNYcce>+dW<:sjZGr+Hj7/SZ%r%M_iL!eYVjXW"c,6G%Z.McWiMOe]J_FFW)sOXu?L=g&'"<(]r3nTP^b[<SPF\=\X(nW`4^-4R58ZY.:.8^a+t+?bY"_H$\W_,^Z%`%aWkoQ'_Y?g\"ac%Lp<C!Z%tc2-M^#5^N"I3gt3kS]f-/tHKL;;^G?f:L2tR18uV9.k<qFRN8MkYr_f#lj>C8Ac6%,2bUna5D,o_C%jOt#D=fR\RYrm),k-B%g+3*+,l-+i9foes0L'ua/LP?X2Ktf/U"iqSaBRLAI9be%KeC15-Kq\QM@fR=Q-dS,VcVh2^NWNaN!HcFm%jq7j=3^T.;U<HJb2N2#j#1,*I`\e+MIG3GGC-G]5+DVB.UQ0/sqrSk#W3f%clanjm:DtQ\Pa'KH,MQsso!)BWQ:oB`nZtc-b9l=,%A7YRS8bnm#&m(?_&"diSRfRG-8bpSZ(V_=HT2i>$eL0IbaBuJG;Ee$C9II:dV.\3tQdB,=?9^:KCF*U\g#hss1QlNBB1!QCqCQnL%Pb-KF)/iaQ]RGl<GDs(Kh"1@oI5Vd<?9d&JTiR?.cT/%uLDoDgo(kAY/8?5M9BPng(>'';6qcV6e)4A@oeYcW?8SjXZTf+`Ip#'D%5Nf+s9A1u*]RJ/>Em"I"Rb,lr6Q!rQo(k@Zoja#cFNNk3lu?Wt8R1E9D#:;_<5d-]H2Zr_P1cpc$V$u;jRmT&0A)m^2.'ZS7ldT&%7t1\frLEU[k/kZQI*DJnH2X[F/6Lb<q=s*sX(`;)Z:J:dLF+/Zet$!Mjn3]?lK8`Sa;uZ$-+d\Ip<4*pk*4KD3NJe&\1EfpccP,a%Z7sVE4Y2cJcYCGbXs_C^V6OkG;u?Gbjn3]Okb9L*;L/4_Cg5$MMr`o.NI,WK>V2>pca&iOjKXjWH2X7KEJin?kK)u0i,-)X]RGTH%30VlgOiLM0%.-ekSi\E=+o_toLnP"CqUr>njs7W/QD'JnD`MO%26WWfeFQ<'qDi3]Rkl/DK"A<TJt:0P2d\$uF&f(NFdCA>B9'hd%B(`KhHs@ethr8`oT"KNt@LbESFSWRu>.Z>lqTX5!PC6cPq;P]sc0OP_eSgk'I-dl@F$@>"KAfC&5EG2<`-a:8c<:+5c;&#nlfXeg%ccQ=(87"ODXF?I?Ck96Jc<:*NcFIDFH#h-o8"C$s<*hdY]B,3$rG4uEp>j=!@\2)^IOjq0FNs.7//SF/>=Dj_B>K\`j'+":h[CtD%=oDrU7Ma56kIb;7MQU5EYFi-cYUR/,iOjUT(eZksCr*c5cJ72b*tk'4-a0.`POp9Kjmr89R=k#8@MR&Wpqt[a\47=;gEEF[Ib(d_%mL^C]m3@@U*UetrMcGs4X$k^HhY^YXSp(b"1`p0nQk^kL.E(9[B*00H-;>1`htGMrhr_:d>J0X&H^@)_`_%kC7_<+aGPun2nG2s\%\8Nn@=+-dYjge12?64m2]@gXQ[l`:O?QX]6nWf<3`)ea[4hgdj][,1RdgNm].R*Fra+kF[*#clmbO)D7J,,N<g%,!?g#d4]qOd[[%?23AsL5-`GD8'08T234_pub68Ndj3JpA)2EKqEkLGmTL#-df'D\F?".N<bpXUM4oB3*m[Bhd]PI4]N[f56bc2jHf90]''r/*e0if%-(h<s4C$u+qBN/S.E5^j[b`XCl*[S0<]#2(4kn,Mn&WVT((.RZ00`I2WVY`n)No%S_VV$$;<OA=T6?5JYdeUcl)!E5K:Qo"([f;h%%4NDCT4C'/+5Y\-AhB.!Ob(*UahJi$c:pIppe?/GDn"`iD*FTPX&lc1^:$3b)i`=UD&c-I"c$E<GI]-I7Cbls&hB5#DDZe\Cr<sZ%R?NWP.ab)nh!U8eSV]>"fN[YZH;DO/-^)l%Y"g-!jrI$c)*,FEo*(kJ23/i2C_,K7)j4s-q4c[,$_T'Vff#HFQ"C5hVc2+t,0e2m%]ege26>o[B(QNBO?c(o\Ip*<J*ulF%ZhIFI%6bi,'n)\s1<]r!(o2,cX[e6=R7fZ%iK@,qE+4;iq\=ViIU0/]5uO9P&;g6Pr&OnG%&`p;4Mnrsue+XOQ>e"fq[h%kOP4CQL@]@i7"J3fU"'S'aq0!mB<?Ga=q?*G^P2/tWlp^OOLqV>[p]8UD>W"u6HChk;WUJ>^r;dAA%Q46/VK/DZC?<G5g%CoN!HMmUa/5`1SFcLDFY'.t*BlIKp,L`-TbA.^T%O&D=aXC/ZQ,6?CJj*(\FEnEtBuuTm/tmXb)#!>g6uX%`%FQ7rXROt1n2I,+$C8Li.5=WXG\.K*XV3'm.&+E+6-m`;+!IB56_bd.<>"W_V0>[D2B<mD*Qsr"fSu/B\(61s91MX*?XV4]]_-'cR%WY@r2c;j6hY?.4+hT_>nf:1N5V9dZ=Y]*V+hr8c)(*>msA0qOcG9)`oDnGEVTo!q=BbTln*pI9BT/I.c87Of)mihtWMEjF&OSijp%h*gcdK`'")q,Mg(p0lA+,74'h\oV9AJOZMlhEdp<&qK?H"9>S&i5n=dXnXJ9!2`m=Dnkb!"S5\1"MgNl=.+uYpAmB8:tH$T4C?Sa%HoY1#?b")d\0BcS-/^<qi42DZ<pf4K=qQhEb-D8EB),)SJ<0XO)9MWT++/o/mKXS[8E&@q4laq?[3*6]-UnhA8p?I9;5lX>C`!g]%,l1LNXc+K<^eTp2/C?Z>_)6h-6>J0>$;s9CXJ+Eef]-&&Hpf@oBEunNUDQGs+s4F%q/Bu^@sYp<RRb0RNs)IRXn\)JKCa)?*h7nj%rWR;-;km@/7Kh+m(;OQ`';81F[^EcXR1o`F04k-]1lb4u;R+5ac5O`:>`JmbLThP^NAR\Zft;@`P3^nQ*:rXNfdOE_Q,VZf12U_?%1')gZ+!N^J/71doYeL@?G,dP(Mi-sI&\;*S,G:HQmdiSAPR=U$NMV1EUcr9q%7'`;Y*7Kg.2pV%I2q+"A*MUDb%'JX]!U/TSfpua%7hL>Zp(:$UcX4=fao%C(`252?n<pm:#dsMtKUVh('AlRA:DGC\.o;;a"EkBMflis:%pW'J"a:`\q+Q-V?eKrVlWg?2=$l@njH8*b%Qkrs*X[B`LeF`l1$VJ2p]bc7o&7283o]#7@34HW.0"t>gNq(DGL$GY,eIKtPr@3\i;#V<ErmL^Q/\D0&)a0_T?rmjqqiOD7-.kD]%6R'Z4)UQX@&G7Es<t1D".KJ+-5n#*\'uZ<)M%p(LmtoMAPp[A0=?f7?V/h=AbALIaD"h-)02fS&$UG,W@QF:`/^cY1!e4@'$3l(R%[VJcLeBKcLopFj+7=i/ope'O]HREY6<7*3t9CF),UA&#A@_#Pc5QPAQO")YVZmlHWN@OsW'=I2mC4I6$/]C7Io!eF`Zl,%&'`sqc%ZS2ARU+3GpU%U2TQN7F@kcuEmK6k++(>m&sD'AJl=,#e_<aFC*F^d+`SUZ*7c^j.^Gr2B[-d#EZ8]SdC1dd:f;`.$*Ip!I6)Ta14%1:_-0"M1B?q+7;<H[Bn8paQ._H7sbTm.,pqa/YB=c=T<_'<_(_r>;0FU8[Y.meruV/K8nOF-52[ZocMQ?[cY,2lV%:D)nMa*I<bH%-2X&7g`?Kq&;4ZoH4S$imJ!`L?ilJIQX,:fL%s(OnrZ,+Am]<jg3UVpCA!a1#LtDDiSD[LRrA3$jj@bNANWouN,C^I[u*Td(Df_G%c+#rgn3&`WlWC:Kc#9aog-#8+XC@Y0iZY_\n3,[sI1PdJ?;*g5EI;U_c3p,Ama()H&qd3p$L-KRVc@\-.Sr"?"OU16M#f$Tf.A`0%/#IRZ<"92AQOb-t<XUDO)F#D,hY11jX8rW%bAA1l;/cXWoQg;!'uG^S],D7(o+\@%8$OJNHK%H25lS$(0OI6M`-Skuh7M$mAC%i8%$m-/fc!80;3o_Z%!IA#=HipN<cCGjgmpWiq\??q(p4VLqGR_%bBkm:GL^d=B9mm#k7o1'F5AgOgHiWdKT5p6#[lClkK]L/U'a]4"%K`qF9mnH5:SC:>C3]`;fSjL]#00A:cV;W7O%11M(;[j%W7O1A=:a#.r#6G_G*rfp-aIaB4O<#iB:k8E++]4A0O+P#`3*,0j0mKKb%(UuWSZ*gcNL3Xp'Y9pn;M,U>0$4=_N5bjupH>K#T'SY5WQ3!i<ilAV&<19q@WdpOrL'l#cZW'5r1G%)]U:i$(b:gRR'W2e[2B[sh%G=/!c$_e9sYIooKdg`U$jOa[d(WTR<&@]1t'ib:Y8d/^_<=tm:V:4.QdC3H<!IA')6664)XB_","R&u[=("$5&;@C)"?eCSC4e]#%nQ5e2/4LkVrU-^dK`'s^W*.5#YrsmC\Bdh2)55AK*=i9_bY1g1QMc4-ZDjBkff,3)lB@:4?5:dDN5b7XbpBbXVJn^&ZTcB8"n`2-%kSssk'/#S2(0m/E"mH>F3h^&B]c6eN@3lfR3>Suj,4i/bA4:VH`gEg"=kOd3TK$tJ-5qf$7S'-`-<(mCZI=[A/NP,@a;"GCjqRDJ%mEn:>WGIet-cV^>)*O#ril`A0$tDldY<;/#)_'=h+PB;"X<$<n)cemq:4ftsig`iGYJn;='ulSReio*Bh1oei/,Bg'H69;'&J1u%%A)V_&6agc<'?[]*,JNTT,Bs:q2\'Q%CLee^g"B94r&fGg2HkTKS%mXleREMPd;?<Nb7E/#X)KC,T44KnDZcE8"pOM5]E^b[52EbS%FfO*Od`3?fPAJW[mMrSMaNW4<$*1Z62INulOMAj8@i%AVlW[7G+5BEY_SOe]Gd.E'bi2,`UHQ]92T(OdH26+CD=M-Za9J]=51CD=%D,A->Ian('n`&[JDh"/rAG5Jii5&QPEM)]8BrUS^N+7W&0Z[>'jC$WXD[e&7NY(kV.?C@>mhWn#`YX^1(H"p))]6^$fhp?9AMWXI%]t]BkOM+Z\j)bojVg3R9J-/o6O9@)@ncp@V$@hj$^V^-a-CU[g?U"kPcgF3_%mcsT&GDmL%"BN291&73A"T-^bNHQ%Z/"IPn1`i"%3j?Dh:jn<1]iArG+OtX5nk[<1+jiIVb>h.?J+)b2c/DdA>CLr]E,e[^%d!6TQB!/\9;Fm8Jr!E88Bil`8/iP&kQc9$Rr=%>0=KrX%j9'<p+I4>b=;lB.&5/2lAV\m*5g2Y<`'EI6_aGO[s"S-fYr$`&W28W]@n@d_a[=F,4<1+VS'!7i7783D\@<3.V9&g-%Cd%,V9&gk%i^+dUDgA=$r$'CK#Ol-V*L<rT&==gecsk;PpnPW7)-ab-B)SPQQ6.n3]_6RC\^#MD?`8Ck!KXq,Yj^JLOtBHn&:;d5S^gGI,DF85%$G>.VW'XgHP_m6W_s_mKQ.G\*##U%uOR</C5H5`X`A]5EA#Ba"?'7*+A#hJ1l/N,fk1CLAa%sk@i`9s!bdnQis$gl>ej_nN"il%F%>+E_Ye`TPI0+!efaPbTl6NR=Pe&F.P=:rKtGGmZ!gUS,6F:9Q=+a.63eEI>!m.nEs9N=#9`2JX7MSkDUUr.MhMU;fg>9E<eYI@$T%O8d^QFf,ioW1*M4n9Pb<=KXp_Reeqg,6tSW&N36"gjb:&Bn]CII^#8tPWko]AC$'@ot9>:27b!"OeC*"@\fn;mb-;WORb*nZT=Up%l#87(@VV<e@=qFmac!sm\j4tgpDog,nKr*A2m<^#5uL$>"`U1D)VEqb6m2QPCt*b;/%Z;6!eBrql&W-684_3Nn+BML`!!n4X\D3?%4ABQq576n8B=e_^d$M]&l%Pr>!HdZh.puB^o]]6+[h`:n`F)oMU'Y$;KugKb(Z0U<%8`HZ*D0o<_tuOJ/'AoO*=tZ(W;Y<STf'$U%@8VE#gaE6+6*d?JDtV7>mCLOEXZ>B)#QA#.:qk*YO]"7o<d^<m&s&1e!h/RUd*Rb.io>aH<SXM8QqAScIV84+]+5.@JN2NXD4Wr^%^9pjINQQo`YoqTq(O\TLDUr#[IL$\:fO>auM8n46+W>%2Os8K68P!=19,R]WV=Cd@h;8(^\iB#F,%KO%<`rq,BmTGiQAJ\5l6,pa%;'f=03q5224NU$74p;JGkF$Fo=u\/uQB)N'Q`/WorR!%&gFVO*QWN9rT`#uq?gTrn#cbY?9LEr4D'k:(QC4tD].,T;O,rTG!(*XV%p]+dbK2,Z`;%O\FUJEc[W>0Dr:J"Ul``l;Fj5;V9__.NplGCjDYXJ3Se8^n/<%LQgi:Maa8B$166Ap2%,8EOUlSITq-r;K^<f#8G%#t:SE#Y5aFU)O@$DW#(:TG2LE_rUHCMH&%qWTY@114o^oH<,F*]`R@!rXd7Z9(9tSNI[G@7O8hI&WI=.p0"B51,K&@N0-^`6R+!R%gkA?O6R+^BPtGR.SZ0O_1rA9sV%UXAp%+`D7_i'#1"1f48d*W$5#R[R48G[5&=5bG6=RqQc`QGdJY6C!peb0^8C*"s!I,-FQAMo?%&:f/FL>-4#1q9M9!$&%WU-G4551*^m.NSW,i9+oiD,o9>-YF?V6CRV36\>=AB2i^8YQBL=[\k8T*?_dSlm4dSgfPX6^m!d[49/=.%An[sT+4a<mPt'6>P6I?d`4&RML/;i<M$X>h0,1Ak'p2f8.3Wa)OoiY1+4,WUd#`2Yg;^Jl'@B?V`gK<?g+FrS5`"Gf-=5?_/)+\\%V,+<LD+(gtSTe*>E#ecUoc1mEV%@gu!k]\=i?V8PZZ8'd'6eJ4T/E0mC#YkghO$%gKVJWC&1mqO_>N/u2P5k`ak;DRH[]XW.IdRc%hs3O4)^I@JjL+X\U);PTdh@p&KQ[h\S6\F+G0R$g8/]b\!8t2APu%jL(**Q.5m91jD*=P[N-]H34I8!IMAg)7]W%)aIMX(c2WK't%S@ZQ8@33P,_[7,bUtH^r14SiRk%'d*=OIrR%KKRZ63[(+n5]dii=#f'3&IaIcsDt`OAMJD.;j'u:\P_XRi'7\dG4W&Xo4d3!Wm`k%8N'HiPh\2*/R/$I%941#Or.N#)3`Y$6HM8d'`r_kq;EI@+(a1eTiS2^@&GV3Gi>]4T<#u'X\=<,X=qLI^*!*cm2%3&Q"6"A&q0Yq%FXlnN;*]&9n]k`?XB3i)bS?O#Oet;4D2([q/63>8ni$mk=KK;="W"ouZAe??m$>C`YUGk3T:Y:Gbusd$B"R2;`mi=4U[:Q\nQn1W%b`!F/2.J!!i6uK/M/T7(bKpNUT9W#":*\a_KNGHU$)7C2#HE%m,.-YoKHeJdBiJ*K!fIfGDJ9Gc366UO;2-'6!XKQg;W7>#\>UWE%jNBmjd5,@3W$(@N^:#hq\-Q9rfc?codF533.I9,7:4`[Nd.J2kdTiJ3P</5Aer*QdB_$)N@r=TK,-7;Qq)\]e"<aqP8';c5<.BO.%J].t**M#R%BRD)g&hGFq=:d$,8';5T;(KHaM\R;JX'btRKW];O=qlrBa\_\nJ"L,"8HqQl/4;>W+rR&gYRlf?WJP;U8]FVA>Vt^i%3m$<B$tH8rd$R<9c<L95f1)ts_TU2&%TO8o1?]nbA+OCZm(/#J[2(ZjGVBB9R%IOnc,*0e_<3d37+^-i$U"Rt42%#N=sU=:bae;l%V&&.A'GbFL0P3a,@^bpGQ!3NL9[j-eaWGf?!4Wc#)!$p3YfUXpC(UP@IGt0Q,)1JgJ59U1cutP`mi0&Of0CC#%\OsMjQo/=#n1<3%!'Y^!TQHtqJZ&p<dVp9unA+Bd#d'$`D43R(&cLGT(&@Up`Yg*6ip2&s#Wnk[BiE_M^cRC:%+(aB$B5dt#KG4e%0U,XEPb*bE,<B@%lkGK@_/Kn+lGNuBH1:Ub#t0/Tnt:rb@c@O28fhZHJk@0ZVR$l?p7\K;jFNK7(r_>#a9+u;/E4U<j?]^NG6a5.3.T*QR`Q7pQn_G<%O2'GuU'2(<:*R:T!"/YOp-o3_Mm"U:qqs?>b9)0lNXQ+!Ufhe[V*'!G7<_[B$<*lk$])[T'eCaAZ_s'`!7]f3Mjl+s*&6u`r(Wb`%\t>81.t<>PQ0r8g[_CidXgZi+GqD4f2,IE9Z<<Tn'nI_k?B^7Q3L:Nc-:dS!Q79UHLt&VP'Mg5H]W/"#rshgTh9UtKW:P?uX`QcX%]=lhM&]a$i)&,@?fR^paP6U0Q7`c_qV#dl4%``jj[I':$+aT$0Q,D>f(gRs8DBH/dFC5Y"I]$d$D#Q9Os(W=-BGTU"eh"7qn\KmW%(7cH(r>3KV+QiC$ZLd9dXacV$dtI"_L1_+1J(53qj[X5lM[e&H5":M%Q]NS=3G_Q?/7=MFo+E^0G)d0&%4>u6K+ZM<m-u.,fG<?o%'aRf&_`h-+l!r6j957PXhIO/8pIgS#!HW8T9B5Rt\6k]N:7p3Y=c*$Pa)?"6S9;S?qg;Va_imOF09s2E7L.0,I.!?/RfS/V"S!G'%opC9B&17)0]nFmn9'Gs]K\Yp!l@g+umnk`Gs+T-0\Zk`-T0_OOIgCUK:qJdjigDUf"rY'Z!Ke6ip=9I61kMHsg-B(3;A(+4VC/ST%&[in%*75b76H&K7,jB,nTMK<.>)9Bt+Zue>,&B[RCq3`+&96=CfSU4]rsFGc>7gp@HbQNg$5!ig(c8a9>G%u"1O3OuKWPO=nZPcF%YSA=3M_-,@Pjq_IKS]BN\0R@NU/e5t:AV7J'i*%+oE;Jgq1o=`s'G^*=3CmE>a9KNb"aIJkYE8I+%5<hCI3A[.7Ed?,aR<_r3PS\%]S,KPn@eb5:7"R0a#m+`7dZ_f2o=UIb;FW4h[&_\<*ciLotbpk+Df<_FD3G6R%,cp'5)=0%]YO)$Z'5S,Dn<Qqao`;+4gZQcQ=dF%-6pH\-4#Ff>=CBIZO)6YO"DF_l>2%P.i^91R#d3$oE=01rEfLb^d\ND)l3kgZkSZ,$M0hE'Am]"Y?#/.Zm#hmd2]UBTT/^>K#-H8%&,^>T(5FoY=rX<'Kp&n9Ze6bU4ud\#4sqgscXJ1Y9!kb0XXo^0n%7=&dG#8.NUhoj.Q-ds7o(B>8*lN1&Wp+Sfqpn?2qRE#Q".8&%6/+J5l`gaiY1^0l2P*?RNnMA%Qf^@'?^C\W66n>ndu"?iW>K/efFPj+`5/u.,F0GI\nQ_ZPOjX2Tb<NLIIMm1)!$d7-jDlL%X>O0%]muhCl!c1;K@&;.DX1N?[8L'_Lii06XHbhR-h1Z\_-2-9TY./ChWsX8<pGQsG2fm/C+S=YM9hcM(_dG@KMh4[ZoDQ;`JOkidJ^\Y%Q+E]@,pcT-j\8i,]\Qa?)F\/Sp_-j$T`ZJ/j/ZQkMS5]?4[I4l+o]*.Ldj@AA$%R0k%]uEY.p'?dG(XfU_&UepK9"h>GY3*`7E)d%gAS%(`BCu`>%p0orV'DEF^(]_Df;a_-<T%g!u&%3pDhaVGqrHC(Ql]pCSbk@Q9peAYp6t_:?i3J6VpU.UGE$R!NalO8t@-0TL**$%DG[O+,K"Dsq<2AL'(>4E'jlY74(G%!&2I/&Xq7ffC61eZ"/6MU=CfWra>/X-AfG)6?GkagR6TgG@>L'Dn+;E,qh46?D/E.2M!tbY%NU(CuEK:Ct2J:GrO?e/5J<,sRaUsu-oNQse@5hV;P([,F30>fU4')K_"``B5/<5ej-;c@,USDpQJTIWa8lBYM.rQe1(f!c&$,ng4%^ZWPE;!#K\:k7qBELR(]U%%i.6cL7`cNtlraeN4jF'nG1D&;W2/!lr=!(?38,R:rOhoMe9=o=$G-a7oX]`b:)`"d-CctTV^YHKqM%PD?MGNU"7u_FP%q"VRHJT@cOM_pS]WNg-<uf=-uD684r)ZE\R,,YJ;R2hJSrj7l5$e[AZCZr7*P3lfUukGt&.l6o1fa@mN+K/!7s%*c>[&d!DB-]qf3+&P#&&Q9MY\VYik+1-!dslTeB#HkO7+O?>uRIDjmoUDV;CL*Xo)StLBo>(tG3:BY]7H1T"Yp#%rkAJh+$'S&TB%8$t)-+9=Xh?;/K=-+&g]n.IqJOU,)2$*F/)Hq@j3U%Rn'W4C*O@5p(cJ6kYYXYZBq>%fKqHMgOmiG]]4.t,>c@+o37oD"mJO0'c+%)#0+PjWChM4pK4\0ctbKN_/<h?hX$uZaZ8ahSA"5[ig_<m/j$(SI7F0.j9XpR5.@G]K5aU19`8;Y#bRcIZ'p/IGt(fH-SG&6#EQd%Us7Zc["Yqn!>f+mh.^=sg(^_hOD6fdlNQ*0GSK1o'.#R+2ElF4Do8XsU:KfIaCm9@.DE6j.<PA(2e_%?>;OESq6(bkJ);C^]m_"+%SXc5(eAJ1=,s_Cbi=GCG2dp9Ecb52]*7jhs[l[dpD4/<@QE(?YYdM]#r7_bT!`uoaV-]'ua1%n^^@Z]b4oMmIQe1??_1/!\O_>gR%m;>dCf_c+RoU\ZWGq/P'1W\C]`-('8!IXG`F0a,bP0R!%pkLN/!Ecl/;<>))<t#+#aIQ^`Qrb>*.6$K*R&1jP3^:sXL8bE;NRG!+%TG46NH57U*o6SF&"--"?\Zu*1:u=8JoLtg5&:k%@9'f,8Y*C3\!t')9+GQk,":d)2$KL)7il'F_4h;4"`Njhojn=AOP,l[ll)[U)%r7"l@F6qa+l?-FjS[JHo573b+NDAT/I0Q[CY67N!4FYNRkkqLU09Re;?,cKI.[KZT:&)7Fo1:L*QQS6-/Z6n?>?#h<),*`5JiYc-%Q+YWLpaqV8k$@3)rGYn8PlS6A3Li\-BL'Su@FOG>P(ramJsp.cs.&C3+h&Rh](;C3iK]sreN(Kb&MK`$4B5^5Y#B[-&m?5'DH?L!%bY_r.8AMh68YJceZb[p8K_f1T):RU:A8N-Ud.ZTl&mSM=hr1?^1.X^D-jm*JCS^<.?ZPAj@ir=k8qih<&tG(,d!fml51Jcn\4Gu.%Ro3oAT0rm,IOTPqn/0f3=PtIAe&IsrN.+c.BP=i5ZE\J/D-iHaOb6lVpPpQ<j.>[3cNi9H27'Q2V6'(&DSDQBs#qr/)a=io#@p&;%gt==IbQ38A]C<U(B^(]e<H$X2GT\LAoIRr`=ZIVuLKTuLZ>r3(`tmfgX;hd@IrQONaoR>HjJ"buPlmI,MY$@'<XoC^I#IS]2\((U%dpG:>1r(%!U"Y`)4O=r9JWnghce/t8Hhf4_F&:?7c7s9'o/Tk\4>9.HYOhNtJT[2/(ehDhZ#-2WL^9QZ.l9aST"Y)Q<'5%=<L\f=%?U:=Z<rUeV"YkY>@;nrp/2skjn_OgW:amcLlW@@ZQT<I3)F<C6h<g$7!sp&L_p_-+K^pKqkPh^fX>L)4(\sJO2FGk1_I>&d!6EF@%P]ff^#TGQG0c8Y+,-a8CiM<!oLST:pc5Il+G2%rGQ/)*=AqW](S/tb8o's=TDGmPPhbH(*Z%""XTD`#'5P\-ZN#qDaiVth)N_!cF%=j<OsE[m`f/$jU&U=,Lj^..QuFda&j$WA4MDtA#,CP2uRBI%oU\+(A5IZ;*0KNEmBDCDSTa=8@"E/4k4N+r3Te#*@d,g4./'Z4_l%!a51^Q7snb=Zk1"4gu6$pu5>gSl6_1A(1U<''JNo>Gf63&]3lD1d2q'D(eTQ71+(;WcR5;Zp(Z`k['fYL\m;@1(u!Jj3I@?[ekq@%k:s0A@Q>^0HK^[0\^#(+gR6KGHC^cKcV?L;/!2g(JM+,4cW.#oPVe;4(hYkJXARedX%*cA<3U9K*RJ&:29[so046pEiek4Nd3`qd%nWQ<)\K+L+l,0>n&X)Q(7D4E'`m2l!@T8o,^GW0-YZctHrEYdd[kWS<4rahr9IRAF'?[NH[Aa"l5/%R9?R=?L2>Jf`SVi\W&Y)#/%G=J[]MZ=5N28q]"bmU>T]_W,S;@#c)eoOFjg,[H7`OZnU/)h1S`00`g**j/KR#c^7Hs!K:'G&-k:pQta:l90%3MB$t+af:L#$u#b%_olO;:]mo64+M(TPr-<h?5Wh%B;@iR6RVCH)L3W"4\FM15W\h`GieYkj&/3+nFif$>M<jFBIq-rYshV\=%0ANU&3i>mpZb3VSf!#%[OIKHZ-dnBB0dVj'gRG[c`?("rCGn%P<^ZmLKML'e6d3Yg^hZ<]`DG@AF#=Ja,.JX\U5IAMZ0oX'0Fi1dJ*6G4Z:1Ohm<X\VI$(Z%f/E;^,4pM'Trmd@*l[>5+1q!q47oC]FQ;:XgBJr"/i\i(]6u(!IV%mmVPu'n`r4'60FKAWM5Eh9n72cC5?Z$2IWQ*h+(7FrGsp<i%gdkukC(WHI&BC&:F;I?-F&(I]bTD?:Fft(%[a)(-o:8Mgk>Uu4,Gd+5#GQDWV<j2%:9;B0am)ja3=c(AX[-M-)>NRTQ@)[rB^bdS%?0qPccnn(ODI`E`?"K%U343Nm=V.%"A<TheZCBI91-_7P][3`%J.0=Q*sH4r2IFC-k!2?+ZIt?/09[cSpcQ[`kCkZ]rDM%N5il@&%k2Lpr%er)+q!i_)$[.uA$eU([Rh6i2BkMl9aN=PRWIQK^-_97Iq*67#So;`ZIu*-6pYiK`KZ3q!%<_SN`5Y^Fm1q-ULqdJC<e`"e%NmnG#DACYl4iD4>+"qsZ.m&Fu9(T8DZb/C\h4A1h)*#PkO9=d$1rJe2*@!)8@_K&p60@s"F,#B[UAX4G@=<I$4=L9peLq"kpcGn&%U>=nU\hQRZS3kn#oTL;4(J)\U"tpR$*td&l@Tb>rB-.]pb*$'Tc9<FejJ0giA3YPe/OSetKHAnDQRDGB`GY#E:#+<H*@j49eIMl8%SAWWj]a(uQh-mG5WkSL5M^!CL,n(!%DNi-q$j'c=cPZ##"iQj2>d/)r%E8./*,,jZ->;>RQ4VFq$,jH._p5<-TkWgAMWYIUD2?]4%hC6.<*<jtm:fU8aWl2qNiR6@.YB''h-N<M5O)f61O#gl.4lDnUc+j45Rga'e8sUWlR\gge9ASs$hS'A73:F:[m&p#^=MXM&.1sb?%3>Ym<'FPN#:WNJ_k=MN!$#_ke:3jC.Bic@HN]J8Q^,P')p2G]f6+H?l#M"qf?ci=Ab(J9P-hf"FXHtGBQ4=DQM6bnTZt1lsLODfm%IR.LP'ojft3TlN]=an]H^A$54FrTOer]XugC^s)7]=o]&Kh+'\/FN<2Z>]pV=I3u0"bGH!fsbSC&^6,"lXb?@S6!MIoioms;Jl/n%TCP>aS3@;WM(HRpIm+Y*:;k?*d9]"g/mD2s)K\J;HM?%J2\IM&R;D_O4"#%3`XT;dN;BhW:34-?E,Q9T*r<b:CF@%N'0XEhhdtOY%3PO8BKmqTCZ]5o4f[aIcXLTj-Lku\"jr_,oNG`*D.*T1a"j:TL%4]rr.E^/I^]kP>p(T4^cF#qQ7,jt[C1W%([D3C+p_DK?Cb0N9%#\.GKZ*UG*07N.IlSBH6JVr^'#&7S]Ut99[*sqIGY0gC!Z.3,Zj4m86(L,]!"C%YpK"'^Ta\TBB15%gD/pg^T4+rV7'(9VKp*2f>%;sS"ud1qWuZ8+mOqhqdM<lX@n0>e]2)5CY#=cbMH1.I>^(aM.Ak4D@Dn;E]e,to7<MV`;\Qji"<;"LT";U`n/TLp4UK's:9qtS,5%MVf7+gQO+=\-f'a8>fps+C*XA=2H5R!bQ50;-D=Q4n-.m[9UGc\,H9rBXBi,d0p[HT[p,CZDBoH]]?I'B<'nXm]8Z'J4!.V3rsuO%7BNW7:`,nKdrn^EgjTqK+Xops\-'A6`uMgK`r%/QmQHV<-*1:M'+MTC<P0gd/^hNWn`(U'@X$;K-m!a?k.aA,Cq!0#@3)GcK6m^g%'^>g\rs\;NL)O_gXAqa=[p9TL+oK.9%gMTcM!M.]CZpll1Ir/;^,dlF+-APP(rXIUS%s8s!;$aBX=LF;?Ct&HK9J<q(b5fOYU"d^%q&EW9\jgoO<tWe]'_?4t*b\8La#mHr_?pXmj%Bgb:G`EUO/Efu!/7e86:.&+_W+1%W^t2<3YI%@L\?X`JlpNQK%.kp!d,j=8-j'/%8B@-H#5$S/Jb"W@3s@#uJMJKo.)<Jn5m#@%5_)J+dr,Bri`'<U#Fmu_msG5?6;T?chENJb\/9%T\T..M1Co'<$B+m(hj`.qZE4,Q%jBuqp.\MBTEs6+A4'*#+=:n<o5rf!ZWGY*A.e*3RX,&@^%?@0K$[.03SQ)HnE;5,u'`r.c2AJWY.HU(Q[(7KU\]=lI0XFb1949"V%;[(guJ$.1T7-AK@.0W!_`\8=ZhK^6:<7/dZ)CsaI-8rj\F#Wjt(ROPn&eSq6_7DNKU09j'?!gjs[G"L"KJ>*TQe^dtgLj.#C/6[P%djKsgpCth\L,dX4N%n8+\-9n(=@(/ag%jeJB0!]O'pp_q0A?q/P(BG;<hdEe$ar?nA)adE?F1eLRNjmp@33ek3O3<O(U1#dd:KjL%E+C7#G]RdsoTE&0W=[W>Q#j@f!2K9CU1:(QG_X:="Bjsg]=lFo]mM%'2[6:>h+N5DOpSjQ!LUAAc`3\M4-fe2l`jN]<K1&PB`[sG%2(n!h"j*1'>d[VmW21KgDq]DJGI^,b/?J4-`<5u9Sn9K=X*9_ZFJJDnN30!D@VMNpW?fD&(>>AK=]nHFX<X?+E&93!\XUO%@oX`+%0W#W\O>PAim=QC-G(oZkaXkk(n.D"ErarIK@f'8F2lnq58D-<sb:mP5r]#tRI(1ujZ'-E)BHD`P_n>YT&]2:(,\0XD+!:EQS7gU:%LFn849#")=06mDDFQZPn9SZFenQM/A3rOBbQTXgE?Lj.Is55\unHraZ.jbnm+ouoR9htbUoa4!'*>..0XtZ</40;(ecu4klH*_JU%m^R^o;"eM7V!KT]]Bp'#f'olA1jTjh4cNOm_H.9:/YN,fIs\&ackQGi5lYU@?>0RhndA_CU*!`K5*k^;m1jm7Z1mdVpU9%o$]i@R%oe`3T]op=S,V^`oHg"cuQB9OHI]r(JoYfeR6:.6;9#d],9Lu&o`f`Xmm\]6#Q_)P]fsCcrU42Z>%^p7_$O?>/?T!0#6,,#O6`r'i%K@)@FHJ=(VqmSNP4ndf?[67*"+R$MNSYJqg[SBb,1^5gJl+I[-YtTm"^!Y5n8B#g.&N?@W]k9a&?;a94>uCd#(Ru.U+u@qX\seGq%Or5E\l=sL[,u]Z-Tr[HA@or>dH<9?o)Bc`OS6_C\e^ZMA?!Ko>],DJnjsEuJ=1*C0Y#6RRXr9p4J>e'@Fu@".Y/Y`LJQ&GK9$(0^%PnXX4<UUg;WgD5I8se$-klp8:C1:1KQ-]Yo$\G@Yak7!%h(s433BMd$,rIs0743%p<F&>9"QmrB3+F[o1R8\6@kiNj<YII!kQFY_%WiKj7#qQB#I8naDU)6P(m)U(ol9/+ETT1L%VmtZhVLJ^2at1WE@,rUtR7,li.3]QE@i6_4^mfYnJ2ZL9NA^Bp!GP_cMrIG*/aRp`%IP8\SZ#h0-2dn9YO2]R^aac;:ScNcp>oI_:4Tjj=3Yt7+43O7k;@DX0L-!hr31lFoW'_b:N0c:$NB7"ZNB6GZKf]/RNB4)bKi,n9%=6HO3JqGeO:(l$\%-k&/F3.B4.A]rIb\?e[QrEJ%R+(I@0W3O50]q#5f,U&ZE!\GHV9hZJ9]b8]7ZfcTeEQ^@e7j,@:8m!D;+K0I%0^@<dK6;+m69N787+4O9]Ob_6VdZ8l8a.#b.*b%]TColP@":`V&5ica=O)lkink`SZ!_YEM$[5P-'=7bEGp,bN9'n?'g$cJR\"LB%-72-aR*!:pl?Mj_QM5<YR#tjW1l,bN*]-C1/9m\#b=%n+lelIp;NT7ZKS[,`+<$`b('48<"t7+i90c+CGpo@.JcL"J==T00#0NJP%H4OFKPKqOOpm@/*icIoE*=S"AVqaX(d+[&$&i6e;P0Zt_e3!/gg*jY!eo8#@F73:Wr>^-&Kk]=k5u[#\mK"?dETqtXoIlO0`R;M'%qA2g)j&enZM51_V+qeqUBc9WBN6_cD)GA3n".$;l>5u"!-nJeO-7gJ'ab17#)'nGad=gtUd%lo#d%o0%m[kesii-J:N$j#Ahq@Yj%RemmoIfrCgdKG_r@)*D'O7Wl1YaGXNG>nC"mdTI_gjg[_W?,Rp:+M#T'1!8qR]&:tQLoMrkHp,RrbLF?/8:*l95+i:.l-io_\.9`%1f[&/q:<;?qA2[%iogp4#]*iP'T'(o4=SW*P%*s7+OVZ9mMJcrQ-q^seO6):^_nhZg;YKq'T0]BJEPB<39:X0,/"\M&Q4glG?-+i%HYpFemj.aRU&?khM(,:js)%4AHZdGild/ums'^Bh+9g%kGE^8fqi_0'JH,rL6=[n7N$&sNc;b";1LlB`=8'C)GI(Tk=_geW,u/QV%*PdKVRbH<2<Q-.b?-NUdg7ImrF4ALKbT&de_N@C*9G:.9dIY#)UHFnHP3OsMCdf,&6jcHt:$_Qk9A4s(6LU'/526('Eg6.\^<L:&%JB#+%ALdA0U$I2u7nXL_Q[$(0-ig76)T9QO,0H!W1,)X;A%0JZ6Y;QUWSORe)4L):X%UW%,[cQS9h,D%%RGh=SjA)f)^.QmARdYn%^lW.QA8($8UhJg,Ue%g(;C#.8OXOB;7lcaa71jn0aS;uJYLkp,mr@uT`6g;3OTBglkWOt*Xn'm:b5^@'q;3'9BBYCc.-K2<cgTHo%d[+E'h5r]47PnGAh6!L7@E;fZ?.d_46)j0HfHh2f-:@_(RUc1lbV\"21OC1U?8JWe8e!^JbM\=(D1t^`DJb(E6^kB4ToicS+jImL%OQU@kaJ=>0d0'klY"".8MFE7h(.O$8=!L'VjU@!?AT3U%2!Sf`nfC)H9E]&F!bgX)N1c;?0S2+h@0DE$n0+5#d4BqZ4kToD)YjOC%dO^%SM3JZ1oIN@>r+H^HU%]F:o1>rr/+h,Kd]kGI5_L.8.&lC_(P^(Pc:R5GqE?:##?d4O8-)"D&b,BSCuM;";LtHeY-ck(Jfm91%jnsq/AS@$po`Ge[hBV6FM4d(/LAm8co]Nd5T/A=p5fV0=?X$[eeK!&#?-%Iim:p9[4ke>eFrmi4TA%i@.fo!8]:'tiO^gF/dq#5_%k5e(bPtRP,VJ.'CZ#njUZ40It0rA-ihKbPL3Fu\70ZoSs*>'5P53GL]L!GnN*M"RA!`h]&+M)bbSt8(edPQ-$8<`H^OX?1lRYIPZ%FHiV]YdD*M['6nZk=X/3;3#aD_\kC6-0/a@>f`&1Doe&3_2K%%^lbd<aO++UOJK.%+\B8Z+\<j],\?Z:4?h%gNL=M;"h_n(*u7M\%fu@-?2T_?!a$(E*\*g[ZH&EAidSL&Tl#%FX)Ok8=V#+hTSF<oB.$F^i7+41Xb#'=E<8JkaIk#[Bq<eBmKG:Zbr;?l_mrH.>9tOa.%\1Yb*CV8d.`j8p>r@[V^f'Rd48[%f#%U<V4RiMe_&\?UTKlBn"LcfSQSRMCm?U3!rg:_]TRK3(hR7S_.6Q(4$Yo-'@^*KUQST=h,%*,-rI7jA)j+H7#?g-`u;AjX:q-iuRhPT8-P0MN<.qDa9VZcRpFDH!p&Nj&ZH?89TcAgV&&j:dKJO`MY.1biDaM%Hm:ML[!I9ZYXQ%-cj_,3P^g?-"KT#J0e("NfLE@#Msu.Q:`WLAa+TrGEJ_3htk:>""Z![&?mF;J>MFK$VRmtAY*jFg!4<K4hri36jQm-7I0.c94dIV%<etdlq^(=eg#aDG@j_Bnl#m@^&g<o]kQ-E[]7^TP9b&p82F>3@mZrqX&H[\Td5j2.:aNHM^,aqi[l!3Y0t/;RNI;B!,i("[:(e_o%d[G"]dEN<0o^$R:ZAi]49K(]WiFETF+DL%Ba$r(HH$e?t^#s5c;?lJNP)PGbk+hmWI.ZUDd/.)F+.?t&`6n5>^RhVd00:H"FCTA8%>H1fkYLe&mbWDVH/c!(;'Y9V.54+FOnK!d&]!3ta[e\=k_%+S'EZqdD'Wn,dN\6%6J+#8MJ.\)"J*pgT+kBlC1J?&ZT#f=^/1cVh%YU#)+GoeoLFLh;EI*4BaY@l_NC#e*lObj&]U1G>`U$0jFZpO4i"<jNDJ:LL_F;'K^4e"Y]C$Z@],i(j48Kn9_%6_LhDBb4<Z1l-Y%)Z)mX,2GXr(l8fC,`:0X;3'oR3NC,(*5+kjs%"F"dPfA2B16j,FO`.4HtdYf9F0+n:kZq\Q8W8fX@UF\=LEZ*?.tAd&H\7dd5j>2%dQq@,GU&N7f6SAkZ'8S@G+V9qV0psWo54DPi^cLSn>6@[H_.Y+m$>t3\m>3DCU!:^!N,*n69p>T>),SrG)9qFn?dUn$[1qg6-mMu%'1$9B2i,8r""Y.C&9&nPE2C/g2fWqhU@p8I*2RiI&:pS]=?$p:(sAe:SOZ11P#%*>k^BJI[*kC[^u!NuVW]812"s\No(lVE$AE>L%ZlIo)IJkVN2kso#=4]cIqnC!fDclsU=-2n!I3Y0hn\R1n:I3\LC!G?RkETmCb+sD56dIMEA'!2+s5d?8o2R=sj;H\p9snktA7J\R%);BqC1,a)M",(C.7X@OuF[_aXd<JC=DN[RO+/3Ed)'S4JrDC@4#jFGRc!tp)#`T^T+f+]<6V+#'&^^`/kWEo[Vh\ul.HIrqqa<6@%>Y5Ga7EaV&&F"0d?n@+U.g85'L-$N6[W?5*'KsMM7Nr"U,as7kkAa-7Q*'1oT(QsDo/qA]AY+aC;^.*b_9k6J@BUN+,<^p7k2uku%@5JH3(e/fc_(ZKN+Cll%2Y8DL;)D#ZaNunX+@CGj6&%eMUIZ(N6_dMSjm7LPL325VL;muqf'&!ON9e(D,;UdA82L?;]'^e5A%BUI%2O8HTBtEfo9G8l<8/*Y.UDt9t)m)3g5PliQ%)%e,s%F690[5WeVqLs!p>9*$r_04mP;br31PU4d*%XU5,@(X@+dQI/mC^Hicdu(V%"`<#_pVf;1[S;(0*otr!<S]f\'Y;R%.:lIhLcfSQR:+X/[++-T'j]cp[KE-KaSfa`P=_1uVJ%!@Z#jb$5:L2GY"+GTjM0"#f\J]_%40itb2jf6JcbGSc&[7Ce$=N4Gd)=8<$Jn"4ibC)-[lZYK8V0Y6QkZbJMUlbZIUL)E7elLaKMNOI"J]Yk)2oca7M&!4"QL:e&2BW4%*7Gn%MCcs'di]Hp9eL"#S"b%IKI&k%#)l%!hTrPud8ofpfCG3spF2+*6'b1M@S%9mm(4@K`7"8BfG35%)uGXk'4ctHP="^J7I0/N%/B,/chOJA2^)9N:blORq:7!lgr@CN2dTEo=,[K/T,S:)Mb+,AWBuBa)<[?U:XBEW,Y&)1A8ATZe7I/UiI#D-Am6X9+F:X4j1j4@.%hjt9$:,gio_JC/8&4WAt37C#9dPeO_0\OJ.&1<rb+`XfE'G)IGetLJFMA.'q5`lhfOeP^&7Z'Zp)EH5<2NT1N^f&Wl@k;=;)mN,J%<0g"1)HkKT2R4T+0G[NmNfLEpjiegNpW7"\X+l;7T).?R!8]IL0P)\Mja%%jpCh!\!cHpe'jae9m5bal=Y1q_dWY$BHTP(S^"/c?%O8dlrl]AUuZq-"gZRh3R,*OdW:")-[V<HKTkXFKO,)Or677r@7Lg%SB7FHEC;=sJg:E2M\`=kbiGs$'l;U1CQEg!41(eK%bKdW%T%NoGm@krYJ-&h+qp1p)Dj,X$'Z"%4T$h:+j?;`k20Uqd7:>8\'nAl;Bd-ut3@/;P""h]"C0>$^cUGn&1rE[dYP1p)D*'M0#p@YCO-%:[VfVkW2hQo0A>]bPhsq<b142UicO38:g:bV!,tm\b)5Fl0!i^-@\/!'La>P!te8Ncj3!q,bt!D1:"g=V#!)=9Jc&rB1t*U%O9Fr%'.G$<..Xm2_Z<6XF+Tckg2kE(At#5YVO8c/&2^+q*?66enCb-WPU+pM:*_ueJjlt0"M8La$)9:*-V5"48[><_kh5c_)VH.J_e]hi%-CGPV75V-!UQHfr[1T/Za^J^(l"kFd*[cr(UN%-=-lOkdOD&VpjD]WXoUI$NL7V>``/pKX-AFnq_FQMc,GS[H8Jou:_C3+[FIm8/%\kK8J3nj;@cKXOYQ?4BMSrQ4$Zh?Lu%\pAc^TNJ?[5,e(+:CabKo>KJZjr+Nd7M4=Ho$`<'@Ig+Bs4^18`OV8:&Yh"o]E'baD\@2%l/,;6FV8A4*TCZ)IdQ6@]Q!d<Y5^_[-:"Bs*jF%_mu"K'h]M#urbdrnRGk/Z*M'Irp?RJF!MUQ*:CU^[$3M8>]*p*pVAeC6Uho\#%$!A4,/ebZX^DC[CUg40GB2(6kPY&]!L8&g4KHpA!1h)-7CiSXj.D%f'k`cONCHQGQl%:c@)o$)B,hkf:Z)#->%5Bm:Lc>Il8Rd(*%PZ_mmf's?D@,rh-Gk/4p:E.siUM1tnN$_7l(el1X%#?6d025+W9d?9<3/sG\iM;kJ_b$XHH:64C4rR4ZVmeIGDj?E^Z,:R>F;'>O%lW2+tB2ZO/BEFcIZ\6u`j1$Gl#@Z?5h3(uR;D9$:[#U4<1g3BOoU_P&F_UZ0(hH8H--4M5i'<Gp#m<iJ64&f#;F&Z,"FOm^"P:.\%iBWPq'a.+V=p^?;;R"6!VKI!FV&Et$;O<mjOm]Ad`]_"Kdu8YMeYX33?#A&L'.K;gU'ZX>5-p*XV\s@2l029=G`o5<M'nDe<^bCt%5!%_ELo+[23Va^j:n.sHq`6Z):'s*(o7tEOW7Ol\Wq2h_OqRce#?TK3<rk7aD09T.:WKk!8o9a&NZ0D^<+Le"k5gbZ^2).P^H^%O%#+/7?Uh6*fASB*1XY+a1Ocl8H^`l.;Q422H@LQt^EJ?S)3C>-)@lHilR3j4jD57frV!5mkk=NdS1*J#5oIN?S$m#2I,[r<ZoFM8S%3-goHH8ou(r<VTH1+='P-iuetE#:sgaU:IL*6p6koEY[F,XNP=6d7A?)F8Cm>9ObH>#'\E)0I'XT;PM=i?Q;eN1M0p_'<,+GdNuo%FH%c3/(.%P5L&LcAs!B[(SYO[(C_F"+-"qMo_QJ'QSg!J,V;F*d*lP_0dNkl'13sT@lHilR5>/nM>TB9?jo287T0^e1D7]h#f4Y=%oIN?S$s=rU`82@E2Y8sJYkM:t1FasIa'6abI1KSNA*=oO-9((7X_F868<AZOPHqH_,)E8^BbNl.m<!K#R?kasD,UiLJde'/4'(u)%6R*"Fc4"th0K.,Hbr9<bg1$2<A)ZSVll=4H&f&37[(9!EoeaT^gcS<;'0"?CMqj,M#E.eK#"@]V=dSn?^V`h6nnT/+U2.DO7@*+9%?dm[*f<Kp7s!?is%(H_['V+hFQ)i,O@X(:7MZTfYnHNQ-RU&RPe_;12D2EI`9Zh00:$]lZT3Gfg_Ps^/!@&!nKV9(sat#h>16`T0%d`ToK);50[HXLM7%./V>4YX82K:EDL:-Cjq+$\8Mk3";`k3-g@NV5`Q&'^o?OJ0_Jcm-4iH4G-NH<0cQq2*r[1+>$51p'+i"F2Xp%^h="q'f?Zugak7$o\;VdE?obX9H8nRF!QV_OBZ4V\*%LoM5:%BR>I\Y6d8$HO9%O5brRTu6@0-7SVPSRpV#XUT50=nF,HZ,0RZY)%&$ekaOn'J:ML=,@:IBR@eHiL_k.?_+Zg9uD=XI$3Lkr6e,8;FSG6ElM1G)_hdmf`CK4pLD0o32ENBngf:4Ob`Ls^6#5YmL[@qaAc%0o32?NDUs!0Tr,C*?(J]>-/8OSS,N8SEM&/&)q9h"#5gX[to#L;@k`R&Hn*['nN*a`C#[*/eC%kXWhd2;F$(P=pIQqg:1'45jqY=%O.0n8Z\BHZ<\l[*]@#DMmof7uR?Vb<MOYpU=T`2VR^j4$7e:8<c^J'K;D8[0Zj_pL'PCTqF/Jn=-6n#B+#'H<\(=lFZ)LC04O_``%lNm$&U?6dh/EE2GlZPEUQb0N73c^X:@G>pZ7]GttaDmq$6f`Oeh\gV3ptT,aVMj2=9DCV8m_:QY9ZenF:$_S5Vd!Z2nm=jM=s:a\%[48n#9rdZ":R;F%>MZEAmpe.&)o$)BUfnerYp/l8M=7?15C#]_plk0$PZ_mmf's?<WkCG$(u`StYipXX!(Dg+F1-B7@W>q>"@S75%J=+_OXCHSO`&J[u;iDqa`*s^CPhBlAer^Q!@*C,j)"NnJ4mg?:DNQ7b\(aiEO3XP_JYC0s:J-F+ai"p.^@B6h<cXs/$3i:#XeR*l%*EEIQfR$Zq,I<Q"e<$M($:C+K\I;WhU)L<_;S\H/!g^3lL+J<n(pZ!`A]U#MeW;)>!gZ7'3^1]L2YRH8ntba#&0()OOJhVd%!g8[%BZQB.!@slN&:K1c4RHp!)DB-m-@LN$1l2pn[*P-h0/(_7&`!`rN3M@XUa^>Vg5d0ueKMEU.S)`[Q,0FVe3KbV)A8pD;>P9$=s!74%GnJ.m1+>a]U1kVf9ha8.'/2aNZ%E?8T&Vrl(0*A8\D>[F-9aJSJn8:G_4n,'':bG"l\L4T;[7V;cR.j:Ob.*eRb%!@Sr12k#oK4R%qHXk#D1#+?()?Z)b3^hT?'^PsUjrKn"B/(1beg:t+&q3N3Bk$kAQ:t>_SoTP?lFiuFaS;Z<K`g5ZL->Jj&MO#QN0]<3u>3ena%=D%=^R5l_g^j_]JU`Q!`sD77me#GpjU=>h;u-fh$Mc0I(SIjR#kHeMUlbb5I\L?<tUIP5end4qBZ:81Ho23I`=;V^lX!NJK0LXYU#*V%-2eMZ=W1X$\0h0s_&hd36F]`:">#D(F`a-"8_jCl/=fhP7;NZCh4c)N=YmZliRZ%]68j9k"Gi@]OipUDF\QT"AaO2'9=Jf$ML]J2%b;qIHd:k\bJC-X1`/RP3l.-<l>*0]i"XP7X$,POg&Hn9ZD%*5&D)%,A7YX1V[#KV^64c\^BH8*&,V:GKN3H7e9/WqQ=-b=EW<SZ'%@&X^'cG3=a=iuDo**>6(9C(U"N;2BJ0Z$_K/EL_[ksB!J'L7sh8B:1VN0-k;C4W4mZ;_-'26bR39DqSN3f0^4Ah75G65jdt0M^qW%mdlC\qr6B9=D"'/_>Fp7\<s,_d`o&_3*P`SHZ@%GAQgMc=D"'/RGF`R*?ASQYVt3c]e=>lK>ooqKa:1tcGeI":8c1\35GYdHH\g<%6jW@C.)KdQa'@\B*):LS1_-ao<ROeuDO!Tq(_K4&kQj]3HF*bI^6P3Y]OJlVl*&-IN2+A@rV[$WWFVmS?I-<Fp[!7<bq8UrjH^gs%ln7B\(\WM[f?p<6#rNSEcPq?]f\J30-[41,YMI_LOT%@.m_:QY9ZenF:$_S5Vd!Yo6^;O9"%IP+3e1^dJ4GNh1Hq6ZFT<E9OKmc6%)FM.Ii0^+m?'1`JrFoRCE0Eu<bVi2]i!;p2<#[MXP,E0;1u#T1RZZEDceCWEP;3>9'/6>0)n?pP(3pfI)0sZKNBE%3YTfOenI_?*%$)[B+Jsu?_&_&tXm;S!Uq[^0j^Cp(aR1ukLRXc(M8d+0gI,!VKo_T/KSpr'G<gaZ?PA".?8)m1MPQ<!kH&30=;-:b])T>4*-S82)%4GacjP@t"c99^*ZGNO$:>(#t_H&9t/1+@<aRHEI3U3&l;6l@\I_W?b9B(5>b)Dh/5Q]2kfhfrW8(FdG`U'WTb]^nU+]W+H0a6RR6%M8&UOc\W?p75QTkU\S,$H3]D+-9[om"3.#9oCk4h?ins?$"e.=K#$'o\P,=QT&;FFV[?*lj5bcj8^AcORR@K0QtT[D7oPVC:BF"<%8a?VF$h?;P\P(=qpUn#lJkS:p'ZSGFKV<HODqPX@gU,C7]<0a6@3`#C!lj-$K;(XGB3KS%VKn6N7/U.]_4&c"KEc4Q&roPZ0P#9Z%pOK7/AkAJM0Q3!V,g>#sVM'5!U`aT6VKI8CDp,t-Kd'1#>?cVdk9_kRc(9!C(]J$S,05p?l1ePJ,5OE4.5uO?Djk^3(]O+j7?Ag^%ZI,&:FaT=JlbDL<,q3FgeUB*CH(T7QNp.U_[b!.6_daX-!F)Vr+h(eTqn:sb2tbn?mKp@.Nqd5.1#:j!-J\n%o6dlT7[]@kD2Qol%),&R+HCGGU.muAf)D5KooP3N%Fk1F')Qo.FUho\##S=,s,*SeulC+M6l]8@rY*l(0i)nC4%ZM$A>#G\ETua9uNbMA<m*WD>g[*H^%+.,XQi(]=W?CaL<`cC./[.*;*oCA[pAO=1h-sB,2==Ub^"mgZC_9C=R.q!J1SbGK9c1.(BST#a<p2YAi?n=I^&kaDPOX#`+DP"m#%e*T/$:9h/Hq`2^FK?USG6Ju-H[#U0l\<G.Ho8OX>XhnOLhP;9i#3Gf_(n&Y/hoLmOkf@%`ERCncjB.UDORpqs>ibf>.k2E$-=il*%7I.Gh5MaH^!@.MeT+Z0/\r0t!N<UYuCYGY=F%rGQAjd6V5&!s4q)=b#>a%&gq=D6nac%tuQs$.s*?AQ;a+Z+[[BOd:Zsa6"UDAO0%3/q>Xl'W!u8>IAi6kKQbSCnGl-S::PE>l_SdPDi\OU/co7+!bJ)Fck8UH[S84V=e"D@E:;Q\I14V/$Ja/T>2:M%kW*."X/$!]Pk]%W(UV;NS67EO]Jt8N'mrg8//2$ULBr%mXW!WoEVYNY2F%bSl1_]RRo-mW:CP9a>U06k"Y9(e=>%RlT)]"1o\*NAQ#=SB-`*dO16+Q%2?#:*88aS^RG"HO*Lr8Amac)$)X6N/0LCrsF$$7)fPZgpC:i<Ycg@J`.4)bD.H'%;#&+J=`:\0mRlhmm[`NGTb02b<lei%?eJA18%&X&U5DB8%@ECH$[<>J0Sg+AI5;G)HgEn7U<$bVI>X/d[IP4aSF/)7^--3]WiVKHj2Uh8(-@"b?AeD52<8\.[8AX[J&SpFa2i+<?P%EF_s2rh7Abk'7_?FH/-7'M$3KcKkd=i^fjf7u4$bBS<*h4d,mk'`#f(W-c/`Ef9"rCcC*4hY+4RN"[C=S.9t<";tse"*-!i=ggQ;%5MgR19F?rDBNdnq)"N`s"%Io6&%3<Cj#i2-NAE(_UaKC-8>JA*7$4gQk??e\S48X:EFMA"oN7"sM%ic1Rb#=&0KK8,Aa/244kF!n%/8Y's@U@\>A6IP!6'>JF#]N3>CiNnL@:<q[@;BC^CLLZ;lb_eF>=lF*McSO57S*)C9,u,q\#PXVjo/7-.GHGV:6J0t-`0FcA9YC!%FNDG$aS!&j'g89m[%cGGb02b<lei%?<bP\\](QAdmef7IF?=?:8<G30cP3o6T7&4YGBI;jkfsSm7>`WVH_JM<Xb3Ba^D;q5p:g8#%!Gd2AY.;-c$PB@u!2f-=rL2aeY&*@ib5TZ"D7aWP=/J0.G)7_HTCS":F;X!h2i_UMN9el/)Ln(IgpfM!J^'o<Nm&?O2)`">72NC_%&Vd="et0,91>4<po"s,JDY@8g7qY`>J8#'Q?Y_`(`nP1&Hb?RPQfr4%FPDG!iBpH^*FYr"nNUE7-!U?rh.+uYK61OGZ[MZD_3l!V%,+=#oh#KF3laCTW[G@J<3rl`^0X+e=`UQfsNY"q.%Ub/m\MAJge8`kl=u7ja7_A?9BH3R6_&O+_0Z3P*BZ.nZc`ThmKD+L(Q-jK7%@+/d19lYQ6-bD-[KkOL*osQ:uNAB0$h0jIL?OJR4PT^408MgHb;K,!:eB'C#NER64-7u`9ApU[q/<?Y^3guGqPY5pi3IBL=@H/Z%%)l,.8gh_Jrk(>H=QqX4\&:NAh>`KV3Y"@KHq;^gaS(fcmagmJ$3&j7QC$T!=,"_M=CqN=@/BJ8B1[*O-NgE.G[3A/)9BkqOP9G^p%8oea72aFN[PIEsZ]Zjb/\Q+64je=2a0CkA+_WZL^Ss%q^"]ugi6FfC[g`#9dT6@].&'gu0!*'07l0VBigpe'@'ch=7PX"T?l_WAb%_'Vnu9lY9.V.=.fJ5MWL?Jr\d]tcedGqYi3&l$PU^bl-*p&au5VnKnE8n$Qa-o02WYBp:I'LtYrdQXFV]k;90eG@Q\^l5)fT%!8b%+CdD7kW0\H=n"cO;bdSnh!^fUFZ.U;`In*b,54,ckY3p%W4phg^/>u/*#VParsGE9He*)bF!n;riPPfoobV#!9&W<qU319EdB.B>%C\VJf.msZK09dI*%u]3_rV4Hnp.pohA1j[12apJsI51q-dqtaU<->*P'\O9p5`n\7=B&-7*T>)R:l6)uahA#\9`"P#,3eb*]BtLV%+.NYjpf3G$et>5r>8^\G,3e`TVqLeE@$=2kr"o%o4?C?BI1HlD)G?6U0U/.k!hgmCAg*E*"g3WD#sfsK72SWA6VNT;&LUd<%<t;3%dH%b[Kd.Imf!3Uf$BqU,2;(kM8/!RWF05Xkb4^CW.m^&ROVA*o.mZZJkTC!KJY3\_8oG<+,!kHFJsr7bOSL97:YFqlO\OM"c>Ar.%6jTMs.)O1Qa/B<._j4p[3KHHaP#L,"NJ8.-ALIn\UHu8@H.M0H[OLh3rWocA=#3;<Zh'So?hQuL5su!ad85LPCfmPC20LhgO(BZ[%.OB.LQ^K,H'?3L$We@/D-:dd<D:2_N@6X5MpLnVo(iS0+*&<1tO@Khe+n*1CI,.:nGD_t.BbNr+\o"0T87B7#]$AN0U\Qsp[IVmR%Z[6Qj)u%h,qiL]>1%//_=_-77$m?S&k]+CUScrrZ",,smoSd2hZ\r_;,aEDN<DaSP@;+8mAAm\hVWV,fd[nqO[%oi4enI^>F"K"Y%+p:Qm:kT]YNgWg0P/F6],<;qo5*Ak3P`LP5AtPbFN/m%q\F0*&h*:W!^SEVrD9"Kd*ntJ5EqUO\H100k%p=7o[dqaGR4`WYcQlkc%9E$lgdl(ZuD,ld4A:5N[D6qB\E&9p\(n^>?C%SkqEkGMIaO6K`Ntef\g-=Dbo,K?VDRC\0P"Y'79p6en4$*J,cP/[o0mZ7HH&";@%JlO;^QE-l:^<"`:*s+oj7+:sXNUNC4l)s[@!^,9ro(6Gno<'4WP=o&KW$Y$qGuHP*CpoK\RaSUWR\ElG.@O5Y/QYYTHmG.UXX-Ce%nl4tn)o1NU)7QQc-T,dcYn(c#F=sBuQmP>i6Q!W"EuE=MT@C[Jm)'dH8u:<`eJ-">Gq/[L9n4E\G:da(Fa&7OSom&qZVHW32l1ZJ%R3kGt3:$"=b<5)CA=7Rt+A4'CQ>c)joB35,j^%;e%hP:QJL,/-T5s&1OuKpIH$<]=1uXr4/89#`BZ_huhW,/Ijcq.@'ZNZ+>f]WT%QTOF$SMt"f_sA0'VV:G2S[X[*Ul5?/_ZQW;De*p]BsM#epY39%n*NTD'KUK2=^(RVcA:r&"%HCuHN=,1&,IZgh(;foF%72$'ELS@%#-Vb]Z1%;cPHXdJOaQ[0:U>BK^a,1cZW0p@*$NGl"c+!ehpu$6R.Q%sU6N(u8>k$D!_M">/2=1P8$(SM0^/oF:!u$'ca3T`YY(bI%En(lD8(+l-4CE8P)2"ol_/q!C3LBqO[['Q?oajfV"B,cG<'r?>&kk.c;[pRmh@-7sZF<(gdJZ.`>O'[taYDW7>_f*.98C4-rHjNZ%]X60/dtMXO.k#N\Hd?fnhTHJf0f`kC*7JGF+a]gLR+s0VEm%H](n\'TCXc_%Yt;<3Of)uUU!erA1/Z8i$Q5/MlrF77E[bS81c_kr%P]LZiM5$HaY*2GLV[2j(;Js$[$KI%,?2m?oh#WErjeAAC!%-CU/\5l:]YBDE]+mW'>Y5kf9o]qdTE29<I.dQ/o(Y$CSsT-I$*[$u%giCpZ`YWpCen#K!aA^Po$\4DQ'/G2DQM3j\[N\8+9.9n=acSsJ/g3&X$Fum:?6&e$G'gp`7]@)^AS>7;(J24;K3U/D0cE_98U!kP%,i,r+c6Oho`DTo31//TY.nTK3XtrZD]CVF97A`mB=-?8+3]\0N]uEU3RnQN#FdeUhDuiVll<;70H!G7qR3LrC\<'K[8dR1GNZ<?o%/R\Ic\e[-ij*FpShQE4'JlO;^QE-l:^<"c;^V:X@&kkmc`!7iSS*VNC4h'6CmZfm(V]ZO"$P_.P8CC`--g\Ri*Y]XT[X38STm,LK%;(@9PGnbt[O_D%-#E0MQ%sV[;0r`7R_E3X`\3+P<(Dh(RZ@uU!3T-`>a0[&VMR7-aO7V).)l6GM[qZ8F,J+!ROo'rsh1/QY*Re2e%=]DdMBm*R]>2&1Fb1:j=Ii@<H9>mXWB_r.;8)!CKX-UIi;(3L0ckOJiFos>Y-H/Mng9e\CRc.%Lp65`Pf'Onf8;$Z$;+(bscHtXn%VENNbkPFDdT%8LkH[ApNUrRgc=,)sc1"?uX7rm(U4`CuhT(;ilpW#6SBar$9XaFBp^=R?5)qC)J1m4=1\(R*b[<3%l\,=jG!u*cT%,o"D,nDThC3+@s?$B!SK6>!\V$DTDCm^F"Yoo6p@-io5WH#JR-g.,WW=g*fg%K/7E1_[1RRj(A(+U9/n_bH9eg=Xle+id;4+W/<t%[#Q_9FT2U!IKqE%<0McO$<S?VMRl+H*$:B5eI!Eh-=k"Q7?/Yl#SaLQHn#Jlp@1/B5Ao(k:;J7j1:pO`(gU[Og3rE%M_*]a@pBo\%fJ2gjFc3CKoskUcbZ4^H1*IUO.<8tN>C6J+`a-?PBcHdIqr9TJ1`1$a+gYAfL!`>T*g).&`CNn4?WWVmZ3IHW!;YFRcP#s3$BRkZ%BM(R#.R=-aIALFFGCubaIQ#"aB>:PK2OTZ[Xbt!Z85cbN<esjgl"p44+CKVFkN<VOI=)B8Ah/B_R?3Ec'KOV6'0a4sps9O.Q16T%%5Ha2dK4'lLRGFkkN%VDXs-GU/'I,.L0p_0>i>1N$QJd_]A'8X=q.[m2,K>n=/54O,`"F%egnoLZ,uYLI7p%h=j/mio)<\tWN8.9D%`$P/W7Dc>]j[rdh*tb#66]30qqfYX`euhQEg@d3RIChclA4EVo0JkQ@#Y!iLMS'B.Qd4!ljpS>8\CmnK?#[N"Wt6oP6]iVE#)CRh%??8QhiFYmW2E3Y;KO?&md5j1k#I(C,,"B%5>(XY?dO:V/8#*Qu*,,Qd3>t5o:Qem&Ybi-p,Y@955glU5!D-IF6]shC-lIoZkibcU%>PA,33U!?B5JJ&-S)<LJd/?8kI6#L%T&6*bmJ^R8J,]EE2SB1,^Ab!i+0]sWqaW?hN`lk]cRKsacRN5Jo>0M[1dUQE;i==?D)OQ#%\?,N)HGFUuQq"_t6I3jKr$_7,?iKRVPJ6B:s*8teqMSjunm.Hkpk@Yd\3K3p2m/.4Ys*'_-2gR3!F7d\SqbU:_1%nu8O0FiPsY@f%0?s?b:"g>BCT"^#]tRM-mP8Dg3Jm[/kPH']A9s6#k6ffkAE;Hgd?jR=DcqO`<1\Gn^M_5A[cs\`7jefBJ\:69Ho\4B24f!k_K>J(%Gl'7E'J8&lp_9E:[@">Z_415$A!kDFnj7J&B>"$;3rF;$-!otQGW"*IEUi-,5Q07gpAOGDr6+gfIsK#N:]KRh%j1fMS$0STq2=dH%Y<IC0`A_.Rpm:=(a78`L0>IP\]73i=YJ.O+mIr:0jZgHVj7@rkAUF7'f3ac/+91E`=9!7<o9\)/rC=8+hek_lc:)g2L,o8^!I4Rf%0#+F`>_)\XY`")\[.Z#WT$F\Ck[/``RQ1#QBBmjZ&"$spG:VRQr6r,qHhL3uPtrQ60f3;7\#WeQA'EM$lA6@com(,Z13tmJXe`+e%rp<4MO(6,ZrHWr8TQf;nDt3du/u-J\>'>k1:Ok_f*d>HZD?4/_6t=Ta0sPlSG-R#DZh%G(<8XC7!?6O!g;=M3hq1j1khX+*.gt70%nX[dG-N>`.o)=K&,&>cY0_PgWUDk.r8OVqUR/ZJCU5ren.3@]LodsY.f'PK49t'=JN4&pas)tg9D2d./CA/<ekOj<PYFh#\mkO=W%lT;<MbBV:DT?6piFo[8&Ft#@o^[3XhCV]R\58&Aa'3gg'o-[Fkrg`B2`lT(b*'4Y;E^B?d<dW]CLlLG+Dh+dO)PN@[&ri*G.gFB<%oPlEcWWB[tT.uu,<k_f6DWMsLjjU"K?iB@iq)%GeD'o)SbccFj43-u358&Aa'2.jYV_gA&N8",U9"iq.bY5IJR/ZJCU5rg&<r".+%@a*ER9MNrKB#(Q6S#qPIA9NrN7O%Qomrs8rg[tfsO3]6:ro@q0^YCB-4$EZL3Mr=McUH1`Jd`="ED.q&c5Fkf!W1Y(PrF8SD3IEC%C7h$BK+<nrqrAc*^o2Z"T+dD$Moar\5pQYO*$^baF9[\-H:TV/R.TPZSIq%"r(+27N*&,)7h<sZl1&upro`WpO2F2Ra*Qqe8j4^#%K\0n_X647qDBgKXqiU+&R+OHBAP0os@+<anqdc\-)3^ltHiESGd)?Q*UU2mJm+o[*)unu99N"5H.lH(TPnB4p?0Ce5(n9D\6m\DV%`7?J^TZPb@=F.,nB%[q'>oY)4b4f]aqttN4XHR=u/rF=X`-bPnqDcK(<Mmh=RAKYS*I?"W,TYMge67-GIP$+:C%Ul=H3bY%:#5hi%g'u\IBV!Eg1iUYP0Q-u>NW`&r,?F*B#oMi%:-!!a4jWL(:pSB<TT*H?:H@NumlqY]nfD^i\BIimp^/>5HO\[g`],!BnQ+k[[e!:A%p1QW["#Y:TJH>>c*OKgF=K:%:@.,o8h^gO0ZK%7Z()jOt/,d3Oiosr\=L,E]X#:<AQ2%2D1`!5*ZVo76=?2O)g:/>ub?%CP$5Rr2%%iDWM>@508m;bKC,F5DM@b!pk_PHn="RL3<oCId^c\5*lC^'1TS:YoR/6TaUWf9?`:AncN@%XXSotq]T17/o'4@ACZ)e(q\2&dRZ%=#GKu(8gJ>^om2l:?I(DlCIe[Du3t"La@K.(\Me7GOc>)I+,/].ig<YX3`l[HEN!oX-LP$eAO(NV>_<;^o3OH7kuk=bZp:+Y>q;L%NY+AGf;\pBm*,=_CpHuGP"h63/8I*llJi_d<Sj67m'F0$hP/9'WZTX>J7Yj47"$%"[`Ws(LbW+81Mu]7R1WXIP5LNs,sMl3DD_.4%Z]],g-<i(:J?9EiI7;Z+0kT_`rB9O4k1h]:6aP87H0FmN-(eDB5)uoG1k(O3L!8!$HFpLa$j#+"-LCEu.&jq3AZZ))I2innnQq2P%0anW$<-+75Sql)NL3XgIqD^qqe_CimB'X3/:(&m7@X54*rfc!2o0$KO6Wr*YgP_g/F#'5:(61-3A5s-W[8>^f9^udN"n<G7X>QiQ%O(6+/rR'PRIAUgQ.:Hi[$s]C)SPgbi\i<1GeDJIZfOs[GcR34[.+i5o&+#6Weqf]90n`\3@n)pD=Jk-Xm4e>F;5nO:[TfOJ<PO<#%=OqP5eAj;K(%6+).VH\uXh"U#>BRE+[RMh&8g!\F/D-D-#8/_*X-=AH>E'T+2.G6^HU/aoLomG`&0N"pX-l"odEIF.E<;[g&V,.4%f$&Ya-A-kIrL&'TYUjG572J<.K6=RVc!Pcm>,;-]e$qhb7kAEj/F)74iNq'UV%YBKP8;F8BW5T/Znu6`eUp&G&PG"1#E7A_"OHPT%o+BGf\`dK.Z*=GXs'YhRT07\Rm($&sr7pZkkl9FTB7Bk7k:V['`#`,Z9DGF;jnAj(gT:^>fjuNP1eph*BO&JNMoq]RA&MD2nH=g)%=r/+E?72t7@Ae?mdD_2T@l?OVm'GkRcPF=[6>!GuFr`jVa-_R$[Km_X;"qfiF5?G^cQdU:Fq=F/7Vn?<n-W#cjc0:NWA+L@7dRJs%1[*j9YuKTU8*mQo2-Z&U8tF^O'uR?'YZ2dcLo"#0>+s9hdeidUMKht`Z&[LC7F//7m<O0`4)Kf]qD]gfi`3BiNsur6<?i5qeYkl?%,N_i@oPlG7C6?(oe5Gs(>,o;+9-\VKYCf$!&QZmNnP8"MBlLbr%uh"MiaMCR@[6@L!lc+B3mn_/B8F\dYU?@BTSm<=4fKY0N:CQ2%"NRV("mf]#Z'0.Ra"_&(<YGO(D9[W1klRJ.?'4-TYIZ\_lth@(p'.Fm]k;D&G9<8Z$p/n*YPL4Jk'7H,VWBr[N]H6t7.Ll+$HYLs%L_3r\:<IM<,i.@oN*<+-b,+N$Jej@Y/p2X[0XL8]qn[D=gnG9\j8](9*UU#lE3,"NjK+1<@NXHbXs_DC;>YH:LF+JmBO\o;mGNR[%NY,K<<u3Q*X*.I8XljH_\QYtT`1Vrs_914f.K]=s1TK+AD*7rs/)lsPki*Ga;mU,P5'p%c0]ht\4'<K+U--c5(d`&gH<7oW9Th1o%>,g%EZnc+0WXhB;a4Pd&1OQttT<]B/Xh+(rXV(/i-g9S-j&OmF5bFaHj_blaT%:!km?jNd97K+uUVD@;Mi"*f@q)G;8r*DOE.Eb@%Ff_2FGcBCk@TXZ:^oW@m_7J+Hc[\k>[1\NoWo&o[Lc%,<e]0D]UfQIW`b\qKCkTod[DeU0:L[B8*1#\kKT=D<JnU[WctH\&Wgu&#%5)p4Zoo3@pW5&"b+So<g2sB^d26/Y=I2iX'<dc4&6Bp"[a"s.0%'*o&ruadC;4-D,)fn,[[MmPk0rl#;^\p^qE@b5GD)D[QkKN4^%#F<l-S/8Mg@7;XWM_9_q$h[dl^s'f%j></]bFXIE5K"g'UA!2;)$sERDr79QNesn;b>?HhB>C7DWS?[T0fbH.T`MB%CSN5:&M*PH%&MV)c:9894;(Ib&B[I?#X-FLE_+MZPQ]:e=,^sB.Ma%,K/217`hq(jAj&&l*a*]1R],9Z\;:*?<@]QY,!M_@fGqF\:L3:Al%q<B+%8pII&0V?Y@:jX#r)R1pB4)#l=YtoRe!MfAQDB;O%SNE8WZ0qOmqD^r\Q/2?Fd4D;9AC4;WY+qfobBD?(eAj;,TCe+Z_!'!,f4c<i%bcnN:q$hkuT]l'SGeFhPLLojREPsq;>(>p8`rsAg2eCCU&@'W3O>)$j9#-7BVr`0DNkpI>'7eR&;p`If@&<hAB>fUkgLT5j_E/RV%(m_Ya)Y25)Y5>#?/F4fTloH>;RR,`7(!$Vgl3FT0hG2_XhdS6]gCkfc\lV9,,A+]V'(p7'0WKKZJ.Y9L3t6.nX`E?'K)%>C5p+.g%glXOJ.mtrED(TrIRX<F!,Zsd7g-Hh$Ju+s=jT2-b`X$7rgB>]Ho_&f*`7>J#MU=GlABcX56AB%'pre^a(IO"<0l(ZFB$FqqDTm5n%aHA(%XKERcE@faFXO\CGZa3^nI@ZkX\dch_le9r8jG%Q,STZkYeAj;KeU@_s)MQbR"%I)im&d/>g@Ph$fLiBs3uW]7Nif`rUX6K=%!@,&,Kb+n.O1-J@=2a!:#@/;WG1rJu&YjO7qLj"r1P:s]Z%=<_"Y9P`iIF?IF17\.=OG=tSnFErDB&7gN'sZ+r"UEA<]^sTAm^:C%<=Gq:&InRr(+_W99GB2?q`_XJRZ,&0%-t6\aZkEeX6l;V7dOm@\UqiOF#@f'Cu.Zf*$]X(0R)g1\MF!RS3:^NFmpluFK`FB@S$!n%n(n.9Cb4/Di)lG-8a@AMf6R;3=KjJ`cU,Fs_RsU/Gdk;U!4.TRo"NqhGLnc-]<s*Qj4LTdIrrBYm7n6$[c[-kh2\r+Ep)p4c(^<t%j[Z&)@uI1ogc>;6BW5Ffdc8&/@@mtalb37cc!m(<l,T`^6E?Z(f:$NoUA++Do#U0Jg%SJ6Bo5p8fMNa2<psCnq2s>4'H,`Pf56up%h4?8.B(dW2rq'^M7\Q*pc+ZH!(l;,eiXN,iP1o)TA=0\CoPlEMl19&P5"DS[AF>crIad)]/q@Z-8$#hV#(7I!F8tJ+kk!RGN's[G%3ru\1-:B/tXGRngE@aMX<BDGfG8ZX-_fKZj!r@Sso9$r^C%J1Z]Gm\-eg,GCD%tEF%'D%&:Rc,YCo^LM`6O_:H&)1lQ[cZWQ2AaS%hHmqY^WddJc^"HD*r04ep*1(6WbloB/%Le&>dm+=BcnMlZ4BpfB,[joHZ&fp$sslFa`FK7%XY+2O(8Q!M7Ze5I>2(+qGrN-m.5mX%/[rifQIk*!iMgTJ5+]onX09;9iho$<`P2B.LO].!jY&8/s7C6Dqs`S5^\R`\QbOC;qWcOb?[VJ<LOZl6IAE4%IeirOhu0SWJ+^bq%6be,m0E::"h-PR'obZ`Oa$4kFeN[==r8mU$s&#E'DjL_lrn<b$D*7gTrU]\(KF"gJr]5ADTORY7Y3C3BEnn"%5;.0Bm=s9Tp[->s%QnSiK#s3uK$ZbJ=LF6an$(;fr3'uhf;K\8I;-2>)5tHSFTc0d(.Wn3dk7tLD5tY@D^;q"V_h]RJg)tTq6#DmeYPTeLUTOsL0Z\Yc%:]o;fPbM.(eY4R?F@D7.mEr%!\tTF2>Z5Zc`<DZ6AV/g,.0JpWa#RZ,m>uj0,$0Sj3Q85?]`M:[EeVS'IE=VSR(3F*PK:-SQ\iHC%mK)\F:KasGfaDu[h@A0M\3Gh2:?&%t4`4@Fq?lai+[.Bok7r@slf!Q.50)GKNk(2bCZ'9S&s75W3T`M'XFlQR911Dtlej#(Y/?+n%aK^B=SOCbOjI#g8YoS5Q==/&ch[VhJm"dj:Yi)8a.mu#T9@66G(4:44k&]3SgfPN!@/tq*"ISujY`m/9+EnHHVu$`Ro+>@fa;+H[%]ain+r`]?Fmf2CtK38BY%H]ghb^4m5+BL]E!7M)b+C-]&lDmmj2%uXUWtEB0T<*ci%g9Z\O`SRb#5S8S]!Pkss4gYcHYF[E6/V?"%D=o`%#PU3$&@n"G0n&I2`=?jJA!tD<,%m+_YiLu_YY=*bOc0&kprG2aO^j*d[30Z+IAct@aDpKe(HKuGWT"D3aSb([\]:DT8l^)D%6U=drf/R<4EN$'=c2I!j\]#``MF2fWlL&/;K!+M_EQB+Dd,!'3!gKFDlPc[d)fpKW[Y$pe9181nEgA`q4$7WeFqD3Ja>&,2(r[,4%`j&4u.ZoYc13ghoGE66faRpY\1BoOWO^mMu/K%f\3S^juq>`;n!G4LsX9H0"4pT;Z"ISujYSuSkq])i=YIT\o1EQYKK3WVm!uCQP%pCUfq,K7sQI1DY?>fn<N-=r>HZRq/:blg0L*PXi(T$tI24V@`F7*[rn(fV(I9181nE`!oX&HK-W$J7r2.Zneu.0cUO^bV%Y88)1S%K5-!HVsS-tdN&c^,t_;W(^<nH0QRe5KugYE=,FZV%Kaio"BZ%P:g3oNl>,f1^s#*!6%)$KOse`q*&@7JjPDVi02_u=$P';M0$*1R%6gbnETX`oVN`&.Z<#-1"_Lb-(8sLf95*8b+?2ZXQ!1&Gr8`ZV[m-,0;9:pa*7'7._o8@$R<<+Q`\OtqW^>dE=be+%F\Yj69*3'@#%5udq>o+5<l,/@BDK;nu\mN]d-7uju"#?:rCU:q+$Em/qW=G<aV@,gc`gXU18oM(^dI/p@X'sjpWKOl>T5+41q&R\X>R'99FU->X'%!G5>c#tm[hR%1m-Z$?Hh]R^)7&\4+H7=A4-RkXT!@jdD>MqjYVc7c&p<>=Ap$[BrOpRG`YaB9e0S$#rHG@+@n$&FfgdheDfoJCcY%6fotUg+(Y/pC7@4h*'k]3D,sQ\_j5@i5X"0JCt;p^s"$XmHtS%%O)_^mHtS%g`q[smU<mdOYaI+A5cFa>INTk'<k0k$B[.5*<+sG%g]LY&EeVS'IAa[_0QRh6-]p3Gb6uSXkJQZBX^gK;^eQ(TK3\)K%[ad40QRh6Q,rV@f8.0'512B:XgsJmlTq\ccN,gD!G4LsXK?Mk%F.WOMo_$IW"IT#+Yha^[n!a+@/pGC"VaHb3'ft,7%NSCrkW7KZ%[h5L9(!UQbgZFRUVgks^s"ThAbQU@RE-*eB:^jEFO'rQLg2*D%Y"pqo]sq\T$Z-Be\>K@C6*:iKe_L=pq$4,BjI1E70QW@WR<rus!EP%^%s"6)lg?"5bX[3V74rGHq]%<]Og\n=S,::<(aJnA_-6X"%h'2s)plsSt#FKe^YerU/QplW!Sp4086C(%T8tM7f3hk+AV9EQ^REH;emP0JJ!2QQZ]I..)F=UkJBmU_JEg/%N.d/AM'u8$D;I<&Q%RP8/%aPHHep(^4L@OI:R6*:fJGC?V)2eYk2h4fuT<eFZ/<hp$Xmf;LbEU$XPEoq0e<$^p3QnW5uRP<ujR]mjoG3O+<Z)DTmHJaBI%]hdCmdcaY4TbO?I5n9<4'M@d7LJj?l?#mNj0lr@`fpr5t60(cba7Pd@$p39*g5G)V$56HsS2nWoim%QU'00idPLErdH5'D]Wcod`%gbWAmaL*.''558$7J<]PH?p8Leq.-3I?'/F-L=D<X"(S#G>hdn=qh$[6n**e6K0)?qC6'!KL67n2jT_O^s"ljocSIW[jTDlai=A#%bWC?CG77.4D86dHMu&T`8%U(>mY$BB,'O[1g?Lk3G9&t'fc6of4!A(r,57q,*RIRmAha:8D2pER\E<ju0T^0NDbNF;r2*;5[lK\J%eG:[pl):c/Yi\[_ba\l>+`\>$Z9M$X1Eg/g1r.=LJ@/B0D&rhkT1^l;!&O?L<eK2qF&[?epHc#PbhN;fq$4,Fj:6CCm#\k7!MQp1%ph<B'T]Ft\4jDH@&2Ebe@-/QKZMOk\o=+-\7TVplbWgiQmN96ghn$:Ag(GTAr\5u'*lrEULs"sgi+YoA==&"M+2b,UVq!8Yq8]0I%V>;[lgcrA$5OAah.n%\<D6;kQIfM;)!*4oGpcI1"34]e*QLra2^r/GNB"-7SZM3u?6nAq\dsl>8$7,%ZkeNf:;Wrp7iZ.j_O;el%%9NVgG<`60ZBM.-V0O`t5$1$<rYD^KNUCa\(jGNN2.6hJ>O("s`#I%`Z,KrW8_?u]T'IrMjLWh]G\"EYQLp\@,FhtGST$u/\&@#0q%1s\Aa#n\un(tRJ,p?=tdrr?)VSEVO:.c&q@&H%356KW)YJkpI)Jj%?bJn]6e2g::1;AdeW%q\"X^U=^#oJW-O!bQ<PbhT(pltK3s%Z,<>%%P:Ip6@`m(C-jrlT:pucT;$kh*7a+k_P@77lLup"<4k'h0InSG=>i0ZpmKZN'@uOUB?$D9F=%-(rE5TP9%4V2nP?SM0R=B6%Q:t'P;q0\<[U,8LIg%+sRBYbe8PfRO>Cb:s#e7Ws(B7'qpa=fA4ftY:@9)E26D!$+!G;>Yalg>D'5%60WTMG3#*mHhUGK#gmN96g%5<=;:k2&"4GCB0beaEFaGu8bZ%q+O<=jbFOmWQ[aUN<(JmN.A^EkJP>2irns($pP3<33/T@H&B@)#VCl5GtZ<`QAMn*@@W<A_3e6%>HB#-@H*m-@b,l?:5_p:;4''-c`$qKXJg)A0GZ/gS/-@gM@(#/l88!&;>6RrAAsE5':)TmUC8c9["t`bcD%5IIk5o7qZj?(jXb_Z%VJo_;FSCiM8p:MC=EJ`u@,gT`@8X/(:b4/te`;V-5dd=QYo*!0"M=(TH%3\beX@Q'k"d_h<i[_bokh+B!^^1heD9e:D<fhi-+Wml%7sV+7'oKQ,>#h8p)lj\gm#0=lPH.V@<\)ALpFs`7XJfNNjeQW["hVT&<@]O5o0p%nFCf5Ffue?cI;u9:WqkXRG?=f45,+YjbT:47%Z<CPA)-O)=;"]5)XU3OW[us(#lAM^LcV(C=TGI[,C.3jA1g<tR3mC]+W(s>:.f3DW>#h7WbOHXX<3<1IS5H=:1gReqe`iOoA4;47%4BYOT),F:3Yl!3RZT2U+%,RA]V^X"<8d`g&Bi\-9CL0ro?(H#aXB*r3J7^)2],WeUT0h/GHCKNBY`QLlU"`tEQ0Ppj[TQ1q>6$L\%.<M%lc&)ka7qRsbqoGk;d-Wo*X!r.[.nsddIU?l*>#VpAT_\pGeD5>7kp*R4O>e,4Q5&oPma71ahTS-\CX_ch>#EA1)6=!q]Xbj^%:rp8RY4[Ha*=k(eS<J0':!3jr?S>T86FI\>et8'&m>CQaA1uk"XiP',/2s[ZA1s!%XXMi@FK&t?+a\40l.#7HA+"-R`&V-(Bj+?S%Ib8RB:rn*1DH]lXqFbPsPqCu85JqWG-Y,I*FKHp$5;mVc-Y1tuG:b1Qh[=W[a(=.ZFtG(PhtM8q-Y2,"FY,"Ph[=Rt4SQBi7\LQN%qcnOt<)ordPW6:B]in1P`H5fO/f3!5`J!T99\3`?Y&9XC'='"PY/Q'1=$bW/pr:cnf4%)?`7D>`i"rPmY/Q([J89XM;lA[5MK?AJ%8_8:*l'&Vm6/f2sOAa\^_Wc-CCGG71$O`tZkHriT:OduO'P7AB`S%0@!5$OJdq^L\42?iDa]_J"ZT1S"#q*ZJQ4m$NCj%DNSaLAI%-_/.-d<`Y9:=Fg3FeUXc[%MBl&ocaL1`UV0PdGZHd8/fjVT3PmB[3(_'T2Qnj@p!h75Mi0?-VkB8H93t'g!]':!3j^.!TX@)030l%b+"\1MQPVl2S<)%4[SH@e[jQ-VY,W-`b@H,g(?Me>#)#o1Ss2dWgel^m0RWN6aW</r!?P#BQaZnZ/N#ih)Hu5oF9o:c['bh[@5J2%9nbop\n?Qdm"14$2XWO(j-GZDH^p;gQc<#ZW@$E0/]e_gH';u05+5eXF(:8Xo%40sp:)L-F1rF''^'I30(p&6CQh*!2ajZAG'!7,%+>86C`H+u!j7M.[fm'_KXEN>AA1LCC[R8,:RbfW3A1LCCIP".VrX:)7lV_cU[NSjhqUk.9.K8/\hfjY,TDd2BAiBFE#B'O.DZfh1%J)E3ra8Fd"a%dg[K3Tc"n4F84r([gD.Zs$_mNhYe?4_nY@M"=k.Krn+30XL5L%qPWs5<PmN^\A]pnnc)1udsnr8!1C7f:_lIld+D%-iWPP5<\jU\gt_(i,?7Z">K_k__CkW#I$n_$BY][_TP7G$U2GN63)r?;Y1Q-('7V-&RH5^==3lboFYCF!gnBk@Mi>c!a,*B8UPUm%+.^@5L$1&*7tp`:&>*%`o1JXTihK+ne;2EinN!"-GZfi2SbT,sT6I$57j$]$+b1S$0)5>eo*?uW0l2n7_TP7GMu*/2,J5Q1Yi$b=%/-N2U01?uAAKcR-TAsK+L66b7Q\>DTI"[i?(j6O?-h5SUHup!n(ZP$!oR/`,'V[Yn]I3p^3dRrj8>mdHC03d\U(Dk+'bi8-!@[/H%`+^eu<4jU^YS[LR@c9a!MPVmcmJ`_G0'Gr4>X6aZ(XTP0jIGqRJ>Sn&$gtih63%D]`f!.`$PNn$$3;\O<4jU^Yc'3F+5oX3J-DS*%73RDV7,LR`F:o[d`92jLI%<SGkM&<'Ma"/ZkEY83`(-*fW"P^]iq#Wee;0/(nPLYtmmLM153gNcG^0R&_<6&k#[kJ=G^Tj*_<6&k%#[egDiq4IFL#e3ELB,?d"Wu^r+b0`gj7ORG7=@2m#d4a>/GL3g%l'$e,J62CYiqjGpq./dL%qSX*u3f,8pjs%O"0Zs,sH(^kDe\@%`(,g^W"C+oiq#q;FlK/;I>$4-!#BsBf7s>A2EBWPK,Y$-5"%=<k?<'(3+!a/=Rb*;apodJ4.N,5E0@NE8]hMj.6F&qlu8,n_b"Il%8]hMj.6F&qlu8,n"'coLd(7O`A(:U`%l'#:Xcq6T:/Z9q8_r>NFU,QC"L.)4;Kk)lh;KW%#J<5'Yim3-G;r1Mi?V@f,^"m+e/\mq%3ttS:^fs2,$U-&9mSHI1TociQ+a&Q,l4/Nt*=Ac-'JbLPWB1elG:99T:e9CCY7gpfUshZq%Y`CQ$CO;9e/\mq3ttS:.&?9]f80JC%I73?1L"%+MWB1el^FQ,J:e9E9OLde&o;Ib^6QpT-6L#&7e/e$>&\s!Z.]GL/;Ko(8mSHL2TouuS-$=u8l40*'UIse]Q.-g(WB4'W%GGq<d=%V5AP.F",Fb`TO;'g@?9'QnOe/^$<4&f+mX/,/[8_p)'\jMI"LG/0Y&`5?C;UqhDmSHL2Tp!!>h'XsDlOmB2fqHEk6]GZ4%8d]m0e/^$<4&f+%W2/iX8_p)'\jI]b#JXJR_SQB.8DTu%\jI]bLIUP=N>2"'WB2q7GA*f?@!@N&:me/?PT:Yk4#BiYn@M*h,@uX"%apsDq*?$@g1fDY8V!QH!fqFP66X+3M8%`&:_P2rZftm+mRBYm!;Kc`Lm*J;VTolWJ,@uX"apsDq*?$@g1bt%/.6B@aG3Gagi-1)Q%=R]08AVX%'%\8h)r-"2/$b<X.Z9p!NLJGu%SWrS(.6DWLG3Gagcq2oaPO`!,AVX%'%\8h)3giL/PT;e64*4ADkbRRl8boNQZ9p!N%LJGu%SWk-U.6DWLG3Gagcq2oaPBkYLfqFV86RQH#:<F';Pj^X^47lWuJ6PJiD"SCq-Sf,2O1ln'-bO!nr]6>ci0KK3><S<D[mM@q%%Z,9h^c`om`NhiTh%#9`42>,H'=N3>O`#qB\fDFJG4=fe!")_]'RLiulubk(f)`#nRBYnH=EI*0f`A5pR5!lGT!4F"[34(W55R*K%_PGM'_J51=:E(W3\gJ76&nuM[UtHoRAd>h`AAY.kH,=lhZYpd0/F(tWI1WP#!UL*b6+ClE_LdjHaq;EeoT<KA11=$eME^T87j]e^%gi"4$0W$N"-l*g9Bm*%Cf`>t2!NZhS(#kuTHsVWC8pjTpO"0[F,sE^JaDW)eYiqiOI,9^o:41QJO*^G\?TU#O6/N94GDS.<,gu%@%8@&ER4YgH^7t11<?q9k"h`W`'_+/tK#[f+Xh!Z;PYc'3D+8O_;',Gu`GE5FbI/48=h*!N%#E_*)goBg9]R.RU$qDl5V'?`r&nuM[%UtHn3A9ReA,81hU=%OZ:U9>0T2<)/94P*+LFJ>rPcZS6X*[;hF0bP+e?"o5'2/R?Aq?8,X(A5Y0*aCrc@DV-&iusPF#Io@r_LdjH%&s<P/5#5^4V:\BCQ]OmCn@;mm11AR#-h5S%II<G`9N^pa+[.Bo7tp`N:jp_]Z1O,Ka$V$k%uGBj^dTL^(4F\gcPuC7R7D]<ab3))%p#pJ3Lh+ASO8L2b#n&rkMb#0GlJ&(pr$E&lNp(Q!Me'\VO)cd7,gu4E8B4(A*=m*,ab0g>q.1fb(4;^q4S$Zd!'?$ucKK>aNF]o#%NsbDS+[.BokCr-#`(-*fW5_ie0-lsikbD7+8>P8hOcG2b3Zd3KOpR%1lGVjKqV:NbRBYToddcfQ5sO>!,k0Ej%g)/ERBYU0^QSf)%,=[8l8hsg`[ed*OJ>F(hIOiNn"j`a8oKYGY''XX3UuMJn-(2"$\W_:+N03&mP"]!M;'A+Q,SE_>XXBNB-`K>#V#G=rqSPni%t6=V%KLHuFqSPni%k">@S>?-LRN<)UH:Xjr!U_;&Yi)9Cl48Tu*t"u3pt[2/(49(PrLo>L6Qu'"OSV<fonPm!%u&LTr-"50$U-&9r_Q/a%Tof+<+XK8!oT2Vm6R#58E'MHt73@Zg6Qu,X6L#)15m^qpr_Q/aTof+<+n^UWl48Tu*t"u3'N0E/A0)I`Ijh,l:e:PYP57NlFhC?3%&#AG5OerAnUL_5nO".+n<)S4EV#F1^*NtY&6RDD\9'QqPe/p0>j&K!,W20Dh8c>?GGuR?Uc`\dcYi'T;OT]k;!W@]GPY?QI4\+cJ%V!0%bV?aW0">E`'W20Dh8c>?Gfi:WBTp#7>-2!$cl49.ZpF<.,<)S4EV#J`^ltW?qcq+,/OnqEionQ#:H]?Ms8EW>aSI^R!5/;:e%',GuF8H#6EqElL6X-*6G,P?g]l48m(*u_-H2,\p;V#J_3rLoAM6R28Z7d:MDe/oU.5;Y-V)Q>r_eqZXs*ti:9n7tZ.,P?g]l48m(%*u^P;NRT$gWBW4;IqYYWcq,8(/hWQsi1j'4&"V2l3iV.^;Ldo+rm478Tp'cO8c=4I4s\SQO@\\i?XGQu_+1'G+$-AcFAdVPV#J_4%rLoGO6RVP^:?GD$onQ<-&"V2l3iP>c;TJ+!rm478_(IF0Z03E1Iitj(M6oGlde_l\Qlnl`&"V2l3iP@9=F]h`8nMo4d?b"7"BUu7%J%\='hdJ9MX69BnP8RRL_(RO2Z.3oEMogp[Ol4iYbZN@2lOTDj5%N+<O@ebj?Xtp%X69C)'?"AY_/;#2YiqiaJ$>D9(2Ss5]?+U"%U5rd^+d;n\9_oiK/G^dG+#<)1aJAhZPQ$=VMa!$kLJ7Od1?j:uZ/DB?efQ[3J&nGc+d;n\]Z3(iN<LDdreF2D+#<)1\?Xs:df5D#%s$J.3%lY8O[)`#1-N+ICoKQm7s);Ja7sh=%ACCL>8cQ\f73BMF6RMaBRIi^Sdf48rd7:J@O@fI>-N+ICoKV,5oMM\SACCL>8cQ\f%73BMF6RMaBRIi^Sdf48r_+."s5@i4BO@fI>-N+JNM"QNsqB%KWJ&nGc+Wk59*O5U*8cM.)r=>=g5MTB1d1P[TRIi^Sdf48r_+."s%5NF'?+7^$0&,D%SLG&u1l+s+W@f7I6reF2D+#<)1\?Y8.=F\DfrumU*LDu/CMtMj!qB%KWJ&nGciPqVT@f7I6reF2D+#<)1a=5[^%DCe1BMY2`D$^$Ollq4P^O@fI>-N+ICoKVCNX*Zc@HpmfQ1?j;0M9N+:lOTEU5@i4BO@fJiN<LE#=F\DfrumU*LJ7OdDCkW4efQ[3%J&nGciPqUQ@f7I6reF2D+#<)1\?Y7m=F\DfrumU*LJ7Odr3e]*@f7I6reF2D+8iQ/^iHM@ACCMI>^*Y?GMPD@h9C0!g#[XSi8-Q*%U<aMd$nhO;qDe2\0E1s/+8qOurp78cs8'4>rr0CaIe2*6s8);Q(R385jeolknC>RG+91[DrT+ifror2+^45tS\,ZBNf=u\.j_oY?%?bcW_b?s%FpW<8KahR`HT8)-MNVuSN^]![%M7Od9*'XDk-SI^_o)%m)qos%cIf/f0s6S@Pro[(lr:^#kD@;6Xr?9)i4SS$rIfKAU%T8)Q:?2sXfJ,/V1?@MPX?i9<;^\H4&IW>@Rs7":bJ,@d2Ie`?gs8+HuoV;H\X5A="]C3K1mDfapIIWfaIJ*ViGkpWoDskYopo!Gm%]_pp(&&8#@g[@>=r9h=Kqth>Cr^=_ToV;HUs8:+Xrs^5gf_t~>%AI9_PrivateDataEnd