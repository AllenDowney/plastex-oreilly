%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: levy.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: SamreshNarayan Singh
%%CreationDate: 10/5/10
%%BoundingBox: 0 0 261 194
%%HiResBoundingBox: 0 0 260.9385 193.6275
%%CropBox: 0 0 260.9385 193.6275
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 7570 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFFFFF7DAFFF7DA8FD7AFFA8527DFF527DFFA8597D7D7E7D7D7D7E%7D7D7D7E7D7D7D847D7D7D7E7D7D7D7E7D7D7D847D7D7D7E7D7D7D7E7D7D%7D7EFD077D7E7D7D7D7E7D7D7D7E7D7D7D847D7D7D7E7D7D7D7E7D7D7D84%7D7D7D7E7D7D7D7E7D7D7D7EFD077D7E7D7D7D7E7D7D7D7E7D7D7D847D7D%7D7E7D7D7D7EFD057DFD04FF527DA8527DFF7DA8A8FFA8FFA8FFA8FFA8FF%A8FFA87EA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FF%A8AF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA87EA8FFA8FFA8FFA8FFA8FFA8FF%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8FFA8FFA8FFA8FF%7EA8A8FFA8FFA8FFA8FFA8FFA8FFA87DA8FD04FFA8FFA8FFFF7DA8FD0DFF%A8FD0DFFA8FD1DFFA8FD0DFFA8FD15FFA8FD04FFA8A8FFA8FD0DFF7DA8FD%09FF7DFD5DFF527DFF7D7DFF52A8FD0FFFA8A8FD09FF7DA8FD5BFFA87D7D%FF527DFF7DA8FFA8A8A8FFA8A8A8FFA8A8A8FFFFFF7DFD0AFF7DFD5DFFA8%FD05FFA8FD10FF84A8FD09FF7DA8FD5FFFA8FFA85253FFA8FFFFFFA8FFFF%FFA8FD05FF7DA8FD09FF7DFD04FFA8FD5BFF2752FF5284FFFFA8FD05FFA8%FD06FFA8A8A97D52FF52A8277DFF84A8FFFFFFA8AFFD5AFFA8FFA87DA8FD%0FFF7DA8FF527DA87D7D2853FF7DA8FFFFA8FFA8FD5DFF7DFD0FFFA87DA8%FF7D59A8A8A87DA8FF7D7EFFFFA8A8FFA8FD59FF527DA8277DFFA8FFA8FF%A8FFA8FFA8FD05FF7DFD0AFF7DFFFFFFA8FD5CFF7D7DFF527DFD0FFFA8A8%FD09FF7DA8FFA8A8FFFFA8FD5CFFAFFD10FF7DFD0AFF7DFFFFFFA8FD70FF%84A8FD09FF7DA8FFA8AFFFFFA8FD6DFF7DA8FD09FF7DFFFFFFA8FD70FFA8%A8FFFFA8FFFFFFA8FFFF84A8FFA8FFFFFFA8FD6DFF7DA8FF527DFF7DA852%7DFF7DA8FFFFA8FFFFFFA8FD6CFF7EA8A85352FF527D277DFF7D7DFFA8FD%04FFA8A8FD6AFFA852FFFF7D7EFD05A8FF7DFD07FFA8FD6CFFA8A8FD09FF%7DA8FFA8FD04FFA8A8FD6BFF7DFD0AFF7DFD74FF84A8FD09FF7DA8FFA8FD%05FFA8FD6BFF7DA8FD09FF7DFD74FFA8A8FD09FF7EA8FFA8FD05FFA8FD6B%FF7DA8FFA8FD07FF7DFD74FFA8A8FF5352FF52A8527DFF7D7EFFA8FD05FF%A8FD6BFF7DFFFF527DA87D7D2852FF7DA8A8FD07FFA8FD69FFA87DA8FF7D%7DFD05A8FF7DA8FFA8FD71FF7DFD0AFF7DFD09FFA8FD6AFF84A8FD09FF7D%A8FFA8FD06FFA8A8FD69FF7DA8FD09FF7DFD09FFA8A8FD69FFA8A8FD09FF%7EA8FFA8FD05FFA8FFA8A8FD68FF7DA8FD09FF7DFD07FFA8FFFFFFA8FD68%FFA8A8FF7D7DFF7DA852A8FF7DA8FFA8FD07FFA8FFA8FD67FF7DA8FF527D%FF527E7D7DFF7DA8A8FD09FFA8FFA8FD65FFA87DA8FF7D52A87DA827A8FF%7DA8FFA8FFFFFFA8FD04FFA8FFA9A8FD65FF7DFD04FFA8FFFFFFA8FF7DFD%0BFFA8FD68FFA8A8FD09FF7DA8FFA8FFFFFFA8FD05FFA8FFA8A8FD64FF7D%A8FD09FF7DFD0FFFA8FD64FFA8A8FD09FF7EA8FFA8FD09FFA8FFFFFFA8FD%63FF7DA8FD09FF7DFD05FFA8FD0AFFAFFD63FFA8A8FD09FF7DA8FFA8FFFF%FFA8FD05FFA8FFFFFFA8FD63FF7DA9FFFFFF7DA8FFA8A8FF7DFFA9FD0BFF%A8FFFFFFA9FD62FFA8A8FFFFA8527DFF27A8FF7D7DA8FFFFA8FD08FFA8A8%FFFFFFA8FD60FFA852FD04FF527DFF7DA8FF7DA8A8FFFFFFA8FD07FFA8FD%66FF7DA8FD04FFA8FD04FF7DA8FFA8FD0BFFA8FD04FFA8A8FD5FFF7DA8FD%09FF7DFFA8FFFFFFA8FD6EFFA8A8FD09FF7EA8FFA8FFA8FD09FFA8FD05FF%A8FD5FFF7DA8FD09FF7DFFA8FD0DFFA8FD05FFA8FD5EFFA8A8FD09FF7DA8%FFA8FFA8FD0AFFA8A8FD05FFA8FD5DFF7DA9FD09FF7DFFA8FD15FFA8FD5C%FFA8A8FF5952FF527D277DFF7DA8FFAFFFA8FD0BFFA8FFFFFFA8FFA8A8A8%FFA8FFA8FD57FF7DFFFF527D7DFD0452FF7DA8A8FD0FFFA8FFA8FD04FFA8%FD04FFA8FD55FFA87DA8FF847DA87DA87DA8FF7DA8A9A8FFA8FD0CFFA8A8%FD05FFA8FD05FFA8FFA8FFA8FD51FF7DA8FD09FF7DFFA8FD0FFFA8FD07FF%A8FD09FFA8FD50FFA8A8FD09FF7EA8FFA8FFA8FD0BFFA8FFA8FD07FFA8FD%09FFA8FFA8FD4DFF7DA8FD09FF7DFFA8FD0DFFA8FFFFFFA8FD07FFA8FD0B%FFA8FD4CFFA8A8FD09FF7DA8FFA8FFA8FD09FFA8FD04FFA8A8FD07FFA8FD%0BFFA8FFA8FD49FF7DA9FD09FF7DFFA8FFA8FD19FFA8FD0DFFA8FD48FFA8%A8FFFFA8FFA8FFA8FFFF7DA8FD0DFFA8FD05FFA8FD09FFA8FD0DFFA8FFA8%FD45FF7DFFFF527DA8537D537DFF7DA8A8FD0BFFA8FD07FFA8FD09FFAFFD%11FFA8FD42FF7DA8A87D527D5253277DFF7D7DA8FFA8A8FD11FFA8FD09FF%A8AFFD10FFA8FFA8FD3DFFA8A852AFFF7D7DFD05A8FF7DFFA8FD15FFA8FD%0AFFAFFD12FFA8FD3EFFA8A8FD09FF84A8FD0BFFA8FD0AFFA8A8FD09FFA8%A8A8FD11FFA8FFA8FD3BFF7DA8FD09FF7DFFA8FFA8FD07FFA8FD0CFFA8A8%FD0AFFAFA8FD15FFA8FD38FFA8A8FD09FF7DA8FD0AFFA8A8FD0CFFA8A8FD%0BFFA8A8FD14FFA8FFA8FFA8FD33FF7DA9FD09FF7DFFA8FD09FFA8FD0EFF%A8A8FD0BFFA8FD4CFFA8A8FD09FF7DA8FFFFA8FD17FFA8A8FD0CFFA8A8FD%19FFA8FFA8FD2DFF7DFFFF7DA8FF7DA8FF7EFF7DA9A8FD1AFFA8A8FD0DFF%A8A8FD1CFFA8FD2AFFA8A8A87D52A8277D2752FF7D7DA8FD08FFA8FD12FF%A87DFD0DFFA8FFA8FD19FFA8FFA8FFA8FFA8FD25FF7DA8FF53FD057D52FF%7D7DA8FFA8FD1BFFA8FD0FFFA8A8A8FD1DFFA8FFA8FD21FFA87DA8FFFFA8%FFA8FD04FFA8A8FD09FFA9FD15FFA8A8A8FD0DFFAFA8A8A9A8FD1DFFA9FF%A8FFA8FD1DFF7DA8FD09FF7DFFA8FD20FFA8A8FD0FFFA8FFFFAFFD24FFA8%FD18FFA8A8FD09FF7DA8FFA8FD05FFA8FD1BFFA8A8A8FD0FFFA8FFA8A8A8%FD21FFA8FFA8FFA8FFA8FFA8FD0FFF7DA9FD09FF7DFFA8FD24FFA9A8FD13%FFA8FFA8FD29FFA8FD0CFFA8A8FD09FF7DA8FFA8FD05FFA8FD1FFFA8A8A8%FD11FFA8FFA8FFA8FD27FFA9FFA8FFA8FFA8FFA8FFFFFF7DFD0AFF7DA8A8%FD29FFA8A8A8FD15FFA8FFA8FD2EFF7DA8FF7E7DFF7DA87DA8FF84A8FFA8%FD05FFA8FD25FFA8A8A8FFA8FD13FFA8FFA8A8A8FFA8FFA8FD25FF7DA8FF%527DA8527D7D7DFF7D7DA8FD2FFFA8FFA8FFA8FD19FFA8FFA8FD21FFA87D%A8A97D527E527D5284FF847DFFA8FD31FFA8FFFD05A8FFA8FD15FFA8FFA8%A8A8FFA8FFA8FFFFFFA8FD15FF7DA8FFA8FD07FF7DA8FD06FFA8FD33FFA8%FFA8FFA8FFFFFFA8FD17FFA8FFFFA8FFFFA8FD05FFA9FD0CFFA8A8FD09FF%7D7DFFA8FFFFFFA8FD37FFA8FFFD09A8FFA8FFA8FD13FFA8FFA8FFA8FFA8%A8A8FFA8FFA8A8A8FFA8FFFFFF7DAFFD09FF7DA8FD48FFA8FFA8FFA8FFA8%FFA8FFA8FD1FFFA87DA8FD09FF7D7DFD05FFA8FD47FFAFFFA8FFAFFFA8FF%A8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFAFFFA8FFFFFFA8FD07FF7DFD0AFF%7DA8A8FFFFFFA8FD5DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFF7DA8FD%09FF84A8A8A8FD0BFFA8FD2BFFA8FD35FFA8FFA8FF7DA8FD06FF7DA8FF7D%A8FD0DFFAFFD0DFFA8FD0EFFA8FD0EFFAFFD0DFFA8FD0EFFA8FD0DFFA8FD%0EFF7EA8FD05FFA8287DFF7D52FD067D7E7D7D7D7E7D7D52A87D7D7D7E7D%7D7D7E7D7D7DA8527D7D7E7D7D7D7E7D7D7D7EFD077D7E7D7D7D7E7D7D7D%7E7D7D52A87D7D7D7E7D7D7D7E7D7D7DA8527D7D7E7D7D7D7E7D7D7D7EFD%077D7E7D7D7D7E7D7D7D7E7D7D59A87D7D7D7E7D7D7D7EFD047D52FD06FF%A8527DFFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FF%A8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FF%A8FD08FFA8FFFFA87DFD0DFF7DFD0DFF7D7DFD0DFF7D7DFD0DFF7DFD0DFF%7D7DFD0DFF7EA8FD0CFFA852A8FD0CFF7D7DFD09FF7D52A8FD0CFF52A8FD%0CFFA852FD0DFF7D52FD0CFFA827A8FD0CFF7D52FD0DFF277EFD0CFFA852%A8FD0CFF5227FD09FF7D52FD0DFF7DA8FD0CFF7D52FD0DFF7D52FD0CFFA8%277EFD0CFF7D52A8FD0BFFA8527DFD0CFFA87DFD0DFF5252FD27FFA8FD0D%FFA8FD1DFFA8FD2BFFA8FD7FFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:56:46+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-05T08:22:39+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-05T08:22:39+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9F+ebTWLry5LDpIne5Nx&#xA;aNNDaTfVriS1S6ie6ihm9SD03e3V1VvUXr9odQqxC4078w5oPJNtNDqgu9O+rR+YNQtry2WFnjW1&#xA;kmlkh+sxNcrIyywkvXiPUb0XJjOKspvb3zTc+abrS9LurKztLOytLp3urSa6kkkupbmMgMlzbKoU&#xA;Wy/snriqv9T88/8AV30z/uGXH/Zfirvqfnn/AKu+mf8AcMuP+y/FXfU/PP8A1d9M/wC4Zcf9l+Kq&#xA;Gnx+f7iwtrifUdNt5pokklt2024JjZlBZDW/G6k06Yqr/U/PP/V30z/uGXH/AGX4q76n55/6u+mf&#xA;9wy4/wCy/FVC5j8/xTWqR6jpsqTymOZxptxSJRE78z/p525IF/2WKq/1Pzz/ANXfTP8AuGXH/Zfi&#xA;rvqfnn/q76Z/3DLj/svxV31Pzz/1d9M/7hlx/wBl+KoeGP8AMB7u5hfUNNSKHh6Ux024pJyWrU/0&#xA;79k7YqiPqfnn/q76Z/3DLj/svxV31Pzz/wBXfTP+4Zcf9l+Ku+p+ef8Aq76Z/wBwy4/7L8VUNPj8&#xA;/wBxYW1xPqOm2800SSS27abcExsygshrfjdSadMVV/qfnn/q76Z/3DLj/svxV31Pzz/1d9M/7hlx&#xA;/wBl+KqFzH5/imtUj1HTZUnlMczjTbikSiJ35n/TztyQL/ssVV/qfnn/AKu+mf8AcMuP+y/FXfU/&#xA;PP8A1d9M/wC4Zcf9l+Ku+p+ef+rvpn/cMuP+y/FVC2j8/wAs10kmo6bEkEojhc6bcUlUxI/Mf6eN&#xA;uTlf9jiqv9T88/8AV30z/uGXH/Zfirvqfnn/AKu+mf8AcMuP+y/FUNO3nNGnhi1nSZr2CH1zZrp8&#xA;/q8G5BCVF+WAdo2UGnUHwxVVt7fz5LbxSSappkTuis8Z0y4qpIqV/wB7x0xVU+p+ef8Aq76Z/wBw&#xA;y4/7L8Vd9T88/wDV30z/ALhlx/2X4qhZLzzfp2taNDf3theWOp3UlpIlvZTW8qcbO4uQ4ke7uFPx&#xA;W4WnDv1xVk+KuxVIrP8A5TnV/wDtmaZ/1EX+Kp7irsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVSjzd5f/AMQ+XbzR/WFv9bVB6jJ6qfA6vwkj5R+pG/Hi6chyUkVGKpBP+WP1&#xA;jStCsf8AEOqaV+hFYcNDm/R1vPzZW4yQUm/dpx4onL4VJFTiqtpknlhfzP1l7S7X9NXVjbW99ZLb&#xA;SIpaxJlaQ3PERSyCK/gVkBLKvCuxFFWTvaXDOzLezICahFENB7DlGT+OKrfqVz/1cJ/+Bg/6pYqq&#xA;QW80blnupZwRThIIgB7/AAIh/HFUp8xf8djyv/205P8AumXuKsfudd84W35ki1kS8by8XSL0orJp&#xA;bX6tJbgLc/WY4Wf1xfN6TR+pxWKsjKAC2KpDea7+bkV95chCTyCXWL+31aSGy4RPaxatDDAxUw3J&#xA;jiaxaV0LSx1A5eqxAV1Wbw3E0f5gajGlrLMkmmaaHmQxBI6XF/u4d0ff/JU4qj9SklFzLMsjqNPh&#xA;S4CKzBXDs/qB1B4t8EVFqNia9aUVTXFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYqwr8w9A/KvVb3R5PPEtnHd2zyHRhd3rWbF2aMv6arLD6nxKnY0+nFUNoF3oV3+bXmL6vd&#xA;3k+q2VvHbXMM8mnPbRIY7eXhaopOoopMgL1AiaTlWrBaKsyKaOJZGK24lk5JK1E5NUhWDdzVmANc&#xA;VWiDQzGIRHbGNmDCMCPiWJKA08diMVVrZNOLeparCWVAgeILUId1Wq/s9xiqRa/czN5k8tW5tJUi&#xA;TUpCt2TF6Tn9GXnwqA5lrv3QDb5YqyXFXYqkVn/ynOr/APbM0z/qIv8AFUytAGur8tuRKqAnf4RD&#xA;GwX5VdjT3OKtaPyGmW8TmrwL6Dt1q0JMbEexKVxVGYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYql2reWvLmsyW8ur6VZ6jJaEm1e7t4p2iLEEmMyK3GvEdPDFVO28r6Jba7Prs&#xA;UL/pK4VkeR553jVZPT9T04Xdooy/oJyKIC3EVxVNcVdirsVSLzF/x2PK/wD205P+6Ze4qgP8eN/j&#xA;n/DX1D/RvV+qfX/VPqfWvqf1+n1f0/7n0dvV9T7fw8e+KpP/AMrfX6zo9u+jywTapqF5YTJLISbZ&#xA;bPUYtNZ3eCOeLk0s6mhdU6qJCxQOqyCG8hh/MDUYXWUvPpmmhCkUsiClxf8A23RWRP8AZEYqnOn/&#xA;ABNdzD7Ms7cR3/dKsLV/2URp7Yq6y+C4vIOgWUSRp/kSqGJ+mTniqLxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksa1++hfzJ5aswsolj1KRmYwyrER+jLz7Mx&#xA;URMfi6Bq/ccVTS58t+XrrUBqV1pdpPqIVEF7LBE8wWKQTRr6jKWokqK6iuzAEb4q3J5c8vSS28sm&#xA;l2jy2k8l1ayNBGWiuJW5yTRkrVZHc8mYbk7nFUFZ/wDKc6v/ANszTP8AqIv8VTLS/wDeZ/8AjPcf&#xA;8n3xVrePWR3Fzb/8D9Xf/jb6x+GKozFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYqkXmL/jseV/+2nJ/wB0y9xVX/xXoH+Iv8O/WT+luHP0fTl4fY9Th63H0fU9&#xA;P4/T58+PxUpviqGXz95Oawsr9NVhez1G+GlWE6cmWe8MxgEcVAef7xT8Q+GnxV474qus/wDlOdX/&#xA;AO2Zpn/URf4qmWl/7yuexnuCPkZ3xV198EtnN0VJgrsOvGVWjA+RkZP19sVReKuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvMX/HY8r/9tOT/ALpl7iqFufIO&#xA;nTeaB5ijvru2uhMl19WiMBgNwkQtmm4yQyPzktR6DfFTgTxAejBVB3/5S+U782j3JvDPY6lPq1rP&#xA;HcyRMk1zei/lTjGUQo0qgbryCgUYMOWKo+GwsZ/zA1G4nt4pZ7fTNNMErorPGTcX9SjEVXp2xVOd&#xA;I/45Nl/xgi/4gMVdqyyHTblolLTRoZYQN/3kfxx7d/iUYqikdHRXRgyMAVYGoIO4IIxVvFXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWNa/p9gnmTy1fJbRLey6lI&#xA;kl0EUSso0y8FGcDkR8I79sVTn9M6R+lf0R9et/0t6X1j9H+qn1j0a8fU9KvPhXblSmKqU3mPy9DL&#xA;bxTapaRy3c72lpG88StLcRtweGMFqvIj/CyjcHbFUHZ/8pzq/wD2zNM/6iL/ABVMtI/45Nl/xgi/&#xA;4gMValt1vZ5YrqBZLSEp6aSKfik4ksSD8LJR1A2+0D4DFUHo0lxbenYuOVonK3tHAPJPq9Y+EnXd&#xA;0QOrfP2qqnGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpF5i&#xA;/wCOx5X/AO2nJ/3TL3FUrufIN43nUeZLXU44o/rCXhs5bZpG9YWwsZP3yzR/u2teXFOHwyUkPKnA&#xA;qpePyo9BtJhsr21h03TdSvNQksmsdpIrm/W+ito5Ip4WiSB0Wi7ozKjMhChcVT2Gzhm/MDUZnaUP&#xA;BpmmlAkssaGtxf8A20RlR/8AZA4qnOkf8cmy/wCMEX/EBiq/T6fVVdZPVSVnmjcVoUlcyL1/yWGK&#xA;ocwl7q/tfUaIzrHOkqHi6sV9P4T0PH0VP00O2Koq1nE0ZDMpmiPp3CrUBZAASPioab1HiKHFVbFX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxrX7GFPMnlq8DSmWTUp&#xA;FZTNK0QH6MvPswljEp+HqFr95xVkuKuxVj0c6QectbnevCLSdOdqdaLPqBNMVTSMvp+jKXUO9pbA&#xA;soNATHHuAae2KoqCGOCCOCIcY4lCIPBVFBiqHvKR3dpc9uTQOx6BZgCPpMkaL9OKtyr6F2k0cPIX&#xA;LCO5da1FAeDkD3+EmncVNFxVFYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FUi8xf8djyv8A9tOT/umXuKteebTWLry5LDpIne5NxaNNDaTfVriS1S6ie6ihm9SD03e3&#xA;V1VvUXr9odQqkljp/nt7HyUt3JdR3elTRR+Zv3sHpXaHTHEk7FWeSQLdsqUqtW5MUICMFUVqSXx8&#xA;1a80EsSQLotl68bxs7sPV1CnBxIgT6VbCrKbwTGECL7Rki5dPseovPr/AJFcCq2KofUbVrqymgQh&#xA;ZWWsLncLKp5Rv/sXAOKronivbJXKn0riMEodjRxuDT54qss5QOVo8jST2wUO7DiWVh8L+9aEE+IO&#xA;KonFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWNa+l+PMnlp3miayO&#xA;pSCOERMJQ36MvN2lMhVh129MfPxVZLirsVYvd/8AKR+ZP+2JY/8AJ3UMVT+8EbtbRyMQHmUhQK8m&#xA;jVpVFe1ClfopiqJxV2KoOyrFc3Vqfsh/Xi/1Jqlvp9QP9BGKql4k4VZ7ZFeeMiqkDk8dfjRWNKE9&#xA;RuBUCu2Kq6srKGUhlPQjcHFW8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;diqReYv+Ox5X/wC2nJ/3TL3FWPXeu+cbb8yPqzR3b6AXSJYY7N5LT6vJbjjcm6jhdxP9eYRMnqcV&#xA;irIygAtirDtN8z/nRJceXVmhvjDcX0Sam0tgIjxZdMN1HIotCFhiea+WNy0XJUDeq5AEirP9Smuk&#xA;8168kVv6sT6LZetLzC+mPV1Ch4ndvowqyechr21i4BiPUmDkkceC8NqdSfV7++BUTirsVQWpF4TD&#xA;eoB/o7Unr/viSgk+XEhX/wBjTviqp61zMD9XT013AlmUjemxEfwsfi68ivtiqGW1ms7ukLSta3cj&#xA;u4UIRFK5D1px+w/Fqn+Y1Na1VVGD66pUkxyjYMADGR1qRUvXsKbfPtirQvIh/fAwH/iygHRTTkCV&#xA;/bp164qr4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWNa/PeHzL5aha242q6l&#xA;IUuuankf0ZebcOo6n7sVZLirsVYvd/8AKR+ZP+2JY/8AJ3UMVZC/q/X4aNSL0peSV6tyj4mnegrv&#xA;iqvirsVQssa3cjRSLW2iJWSNlqspK9CGFCg5dv2vluqp6a8kRlsZjV7Y/uWPV4G3Rv8AY/YPeq17&#xA;4qjJI45Y2jkUPG4KujAFWUihBB6g4qhLd/qckFg/qyoysILl/j3Wrem7DeqoNmb7VNzy6qo1lDAq&#xA;wBUihB6EYqhvqZjfnbSGKoIMRHKIkuXLcaghvibcEe9aDFV31kxgfWU9LxkB5RigZjVqDiAq7lgB&#xA;2xVXVgwDKQVIqCOhGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvMX/HY8r/9tOT/&#xA;ALpl7iqXt59K+eD5bNh/ool+qG+EpMv1r6n9f4/VxH/dejt6nqfb+Hj3xVjWl/nit7No8L6MYZdV&#xA;uIUYieSSOK3uotPlhkZ1t+POmsRBlfggYMokJKB1WR393FH5y1W0ZZC19pul26skUjoolur6Nizq&#xA;pRKB6jkRXFWTJ6X6Rmpy9UQxcq048S0lKd61rX6MVROKqdxKYoWdQGfoikkAsxooJAalSetMVbgh&#xA;WGJY13pUs1FBZiasxChRViamg64qhtRt5mEd1bCt1bVaNKgCRWHxxMT2agp4MAe2Koi2uIrmBJ4j&#xA;WNxUVBBB6EEHcEHYg9Diq+RFkRkavFwVNCQaHbYihGKoKKV7Ew2tw0k0bkpFdsK0NfgjlI3qQaBy&#xA;KHv8RHJVHYq7FVE2kYbnETCxPJjHQBqsGbkpqpLcaFqVp0IxVb613EB6sXqqB8UkOxqAKn02NR3o&#xA;AzHFVWOeGRiqOC61qvRhRitaHelVO+Kr8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVY1r99C/&#xA;mTy1ZhZRLHqUjMxhlWIj9GXn2ZioiY/F0DV+44qmlz5b8vXWoDUrrS7SfUQqIL2WCJ5gsUgmjX1G&#xA;UtRJUV1FdmAI3xVSi8o+VIfq/o6LYR/VJmurThawr6Vw9Oc0dF+CRqCrDc4qltx/ymGqf8weif8A&#xA;UfeYqyGMsb2c+mAgSNRLQgswLErU9QoYUp3J+hVXxVQ5pLeel1Nuokb/AFpOSruD2UNUEdxiqvir&#xA;sVS24EmnTtdxKXspjW8hUEmNv9/oPD/fij/WG9eSqYxyJIiyRsHjcBkdTUEHcEEYq3iqXpb3dhxS&#xA;0VrmzrQwM49SIGgHpM1Ayjc8XbbsdguKo2G4gmDmGRZBG7RvxIPF1NGU06EYqvxV2KrZIopKc0Dc&#xA;TVSR0PiPA4qo+hcwqBbyc1UALHNVj8IAA9T7XYkluRqcVc92YjSeJkWjH1FBdKLyO/HcHitdxTtU&#xA;nFVaOWKUExurgEqSpBAI6jbuMVXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi8xf8djyv8A9tOT/umX&#xA;uKqTeetIXzWfLbRTiYN6JviIxai5Ft9c+rcufqep9W/e/wB3x4/tV2xVJrP85fKVzZ6fcendQyan&#xA;f2unWdo6RmZmvo4JoJyI5HVYTFewsWLVHIKRz+HFUzuP+Uw1T/mD0T/qPvMVZDbBhNdkuHBlBVQS&#xA;eA9JBxPh4/TiqviqlbcmjMrBgZTz4tUUHRRxb7PwgVHjXFVXFXYq7FUsa3n012ls0M1k5LTWS05I&#xA;TuXg/W0ffqu+zKo61ure6gWe3kEkT9GHtsQR1BHQg9MVVcVQ89jHIZJIj9XupFVTdRqnqcVPIAll&#xA;YEfMd8VWi4uoXhiniM3MANdQrSMOSdmjLO6jpvuPGmKq8M0M8YlhkWWNq8XQhlNDQ0I98VX4q7FX&#xA;YqpyW8MjB2X4wKCRSVYDkGpyWhoSoqO/fFVggmjoIpjx6cZR6lAOXQ1VqkkfaJ2H04q71bpCA8HO&#xA;pI5xMtAAoNWDlCKtUACuKu+vWoXlI/ojf+9rH0AJpzpUCvUYqr4q7FXYq7FXYq7FXYq7FXYqkXmL&#xA;/jseV/8Atpyf90y9xVu58leXLnXRrslvIuqDgfXiuLiIco6cW9OORY+RVeDNxqyVRqoSuKpfF+VP&#xA;5dpbwQHQ7eZbWeO6tnn5zyxyQiIRhJZWeRUVLeNPTDcOChKcdsVWXtlZTed764mt45Li3s9FMEzo&#xA;rPHyv7yvBiKrX2xVk1kY3E8yAgyzPzBNfiiPo7fP0sVVLpnWBuB4u1EV/h+EuQob4iAaVrTviq+O&#xA;OOKNY41CRoAqKNgABQAYquxV2KuxV2KoK503lO11aSm1u2p6jgco5ANgJY6gNsKcgQ3blTFVg1b0&#xA;Pg1OL6m3QT1527fKWg49tpAu+wriqYYq7FUJPpVrJK08fK2um63EB4OSBQc/2ZKdg4IxVfXUEnYk&#xA;RzWxFVAqkqkDpvVH5H/Vp74qsGp2qwerdE2QDcGW5Kx0alaBqlG2/lYjFUWCCKjcHocVdirsVdir&#xA;sVURZ2oYukSo5PIunwMTy57laEgsakd8Vd9XkUARzOApWitRxQAgglvjNfHlXFWh9eUb+lKePX4o&#xA;/iC/89Ni33DxxVv6wyn44ZFUVq4AcbEAUCktvWo+H50xV31y35cWfgSQAJAUqSxUAcgKkle38Riq&#xA;rHIkiK8bB0YVVlNQR4gjFW8VdirsVY1r+n2CeZPLV8ltEt7LqUiSXQRRKyjTLwUZwORHwjv2xVOf&#xA;0zpH6V/RH163/S3pfWP0f6qfWPRrx9T0q8+FduVKYqhY/N/lKX6v6Wt2En1ydrS043UJ9W4QgNDH&#xA;RvjkUsKqN8VS2ffzlqaj7TWei8R3NL69Y0+SgnFWQ2QlELeovFvVloAAPh9VuJ28VocVblIa5hjJ&#xA;+yGlpXeq0UbUIp8deo3HfeiqtirsVdirsVdirsVcQCKHcHqMVQH6IjhPLT5WsjWvpJRoD7GFvhUE&#xA;9fT4k+OKu+s6rBtParcqNvVtWAY+JMUpXiP9V2OKqkWr6dJKsPrelM1AkMytDI1enFJQjEe4GKov&#xA;FXYqhJdLs3IZA8DhQoaB3i2UUWqoQrce3IHFV4hvVmQrcK0IAEiSR1ckDqrKUAr3+E4qtWfUFRmm&#xA;tVYinBIJebGp3r6iwqKfPFWm1O3ijR7hZLcNXl6iNxShoebryjX5lqYqrx3VtK3GKVHbiH4qwJ4t&#xA;0bbsfHFVTFXYq7FXYq7FVKS1tZGLSQo7HcllBNQCvcfysR9OKtGzh3ALqD2WSRQNgKABhQfD0H8c&#xA;Vd6EtSfrElCagUjoPi5U+x4fD8vffFXBbwdZI26VARhXdq78z24/j47KpJrzXB1nyt6iIo/SUm6u&#xA;W3/Rd5Ubqu1cVS678gXcnnP/ABHbamkURuEu2s5Ld3f1hbCxkpOs8REbWvLinH4ZaSVanEqpFpX5&#xA;MXen/opP0xb3EFhcwTXUcti4M8NnBZW9tEJEukePiNMjkfdkkkozR8VVcVZDPawy/mS0rtIHis9P&#xA;4BJZEU1Opn4kVgr/AGf2gcVZLpoUadbcX9Qekh9ShHKqg8t9/i674qvhHKaaUihJEatQiqoPmejs&#xA;29B/HFVbFXYq7FXYq7FXYq7FXYq7FVssUUsbRyoskbijIwDKR7g4qhBo1in+84e1/lW3keJAf5vT&#xA;UiMn5r88Vd9U1OP+6v8A1K9frMSvT/V9E2/41xV3q6uh+K3hlVTu0crK7DxEbJxB9jJ9OKu/SMi7&#xA;zWNzEnd+KS9v5YXlf/hcVb/TFgu8rtAv888ckKV8OUqotdulcVXw6nps8gihu4ZZD0RJFZjStdgf&#xA;bFVWW2t5WjeWJJGiPKJmUMVbxUnocVUl02zT1PSQwiUEOsTvGCSalqIVAbb7Q3xVo2UgiWOK7niC&#xA;kkMCjtQ9i0qSE07Yq36V+pjCXCMi/wB4ZIuTtuf2keNRt/k4q2G1EPIDHCyCpif1GUnf4Qy8Gpt1&#xA;PI/LFWvrF6kQaW15yFqcLeRXAFK1Jl9DvirmvXRY2ktZlV/tUCuUPYMI2dv+BBxVd9dh9V4uMvJA&#xA;ST6UvHbwbjxP0HFVo1PT/S9VrhI05cD6p9Mh6V4kPxINBWhxVx1TTRGkhu4RHJX03MiUbj14mu9K&#xA;4qkev2MKeZPLV4GlMsmpSKymaVogP0ZefZhLGJT8PULX7zirJcVdirEb24Nt54vrjjz9HT7CQrWl&#xA;eI1U0rQ+GFWTsFs7IJCnIRIscMZJFTsqKWo1KmgrgVUhj9KJUryIHxPQAsx3ZiFAFWO5oMVX4q7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqsmghmjMc0ayxnqjgMNvY4qhv0Lo9KfUbcfKJB2p4Yq7&#xA;9FWtft3Hj/vTcf8ANeKu/RvD+4uriGoof3nq1p0/vxLT6MVd9Ruv+rhcf8Db/wDVLFXehqimiXcb&#xA;J2M0PJ/pMbxL1/ycVd6Wr/8ALTb/APSO/wD1WxV1dXSo4W8/cPyeD6OPGf7+X0Yq36ur/wDLNb+/&#xA;79/+qOKu9XV6/wC81vT/AIzv/wBUcVaN5dhSr6fKzbg+m8LIfkXeM0+ajFUi1lY28w+WZjp5t5n1&#xA;KUPcMIeTD9GXnwlkd2xVlOKsL886b5xu9f8AL02hvOLGCUG+9GcQxofrtm7PcRmWP14zZx3UYTi3&#xA;xODT9pVW9c026bzzFcab5jsNO1K7s4EXSLu3+sTypZyzv60SrdWz8eNy6N8DCncHoqmB0rzw06zP&#xA;rWmsU/u0/Rs4VTRgWAF/Ukhqbk+1MVVvqfnn/q76Z/3DLj/svxV31Pzz/wBXfTP+4Zcf9l+KoLRr&#xA;DzXFpsFpY69pVxb2S/UxIunzOeVt+6ZWK39OashDDscVRv1Pzz/1d9M/7hlx/wBl+Ku+p+ef+rvp&#xA;n/cMuP8AsvxVK9e/Ttitnf6x5m0XToLW45QzXNlJBG0skUkIQtJqABJWRqAGuKpp9T88/wDV30z/&#xA;ALhlx/2X4q76n55/6u+mf9wy4/7L8Vd9T88/9XfTP+4Zcf8AZfiqUwNrUPmK5sV80aIdbu40mfTD&#xA;ZSeuI414h1h/SHqcfelMVTb6n55/6u+mf9wy4/7L8Vd9T88/9XfTP+4Zcf8AZfirvqfnn/q76Z/3&#xA;DLj/ALL8VQOiWXmlNLgttP1/Sbq2sl+piVNPmk+K2/curFL+nNWQqw7HbFUd9T88/wDV30z/ALhl&#xA;x/2X4q76n55/6u+mf9wy4/7L8VSnzA+tactjf635p0TTIbe5rbzXVlJBG8zwyxiPlLqCgko7EAGu&#xA;2Kpt9T88/wDV30z/ALhlx/2X4q76n55/6u+mf9wy4/7L8Vd9T88/9XfTP+4Zcf8AZfiqW2UfmGLW&#xA;L+xh8yaNJqkxS9urD6jKZo0MccCv6Q1DmqERDcjriqZfU/PP/V30z/uGXH/Zfirvqfnn/q76Z/3D&#xA;Lj/svxVDapb+bI9Nu3vte0m2slhkNzcyafNGkcfE83Z2v+KhV3qdsVQ+gTa/qGlwy6N5m0TUrGIC&#xA;FLq1spJ0JjABHOPUCvId8VTH6n55/wCrvpn/AHDLj/svxV31Pzz/ANXfTP8AuGXH/ZfiqV6mt1Z6&#xA;tot55p8yaTbW1rdtLYW/1c2Mk9xJbTWwjWSe8mDfDcseKpWtMVZjirsVYtqHkc3fnqy80fXvTitV&#xA;h9Sx9Mlnktor6GJlm9QBF46pJzXgakLuPi5KspxV2KuxVJfKPli28taVLptqyG2a8vLuGOOMQpEl&#xA;3cyXCwqikgLEJOAp4dB0xVOsVdirGfP/AJQuvNOkQ6fb3cFnxm5zvcWzXIkheKSGWFTHNayxeqkp&#xA;VnjkVuHJejHFWSqoVQoAAAAAAoNvAYq3irsVYpN5Hml8+2/mhr6Nba2DslgtuVdpXt/qxd5hLwei&#xA;fZJh9QfZ58PhxVleKuxVQvrZrqxuLVZ5bVp4niW5gKiWIupX1IywdQ61qtVIr2xVIfy98lJ5M8vH&#xA;RIr+bULdbm4uIJJ0jRkS4lMgj/dKgbjyqW7sTTitFVVkuKuxVi/n3ybd+Z7Wwjs9UfSbqwna4gu4&#xA;xOXRnhkg5x+hPakOqytxLFl6hkYEjFWUDYda++KuxV2KsT0vyI1h5+1TzWNReSLUo2X9HFZKI7x2&#xA;sTNyaVo/s2K04xK29GZgqBVWWYq7FVk6ytDIsLiOZlIjkZeYViNmK1WtD2riqX+WdDj0LQLHSUkM&#xA;7WsQWa5I4tPMx5zTuKn4pZWaRt+pxVM8VdirCvzI/Lf/ABoNOH6Q+oCy9ZJP3byepHccOYHpzQbj&#xA;0hQPzjP7SNtRV//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:E1772B8551D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:45116053EBD1DF11AFC3D21F10CD933F</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -193.627 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 193.627 li
260.938 193.627 li
260.938 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
258.021 182.724 mo
254.87 182.724 li
19.7705 182.724 mo
22.9204 182.724 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437917 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B854D00D> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/NHWRNQ+Helvetica /Helvetica findfont ct_VMDictPut/NHWRNQ+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]NHWRNQ+Helvetica nfNHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf9.73438 185.06 mo( )sh11.6719 185.06 mo(0)sh258.021 164.824 mo
254.87 164.824 li
19.7705 164.824 mo
22.9204 164.824 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369E6> |-/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNQ+Helvetica /Encoding getdup 46 /period putdup 50 /two putpop%ADOEndSubsetFont
/NHWRNQ+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two 205{/.notdef}rp]NHWRNQ+Helvetica nfNHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf0 167.162 mo( 0.02)[1.9458 3.89209 1.9458 3.89209 0 ]xsh258.021 146.923 mo
254.87 146.923 li
19.7705 146.923 mo
22.9204 146.923 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNQ+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/NHWRNQ+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 203{/.notdef}rp]NHWRNQ+Helvetica nfNHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf0 149.255 mo( 0.04)[1.9458 3.89209 1.9458 3.89209 0 ]xsh258.021 129.023 mo
254.87 129.023 li
19.7705 129.023 mo
22.9204 129.023 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNQ+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/NHWRNQ+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]NHWRNQ+Helvetica nfNHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf0 131.357 mo( 0.06)[1.9458 3.89209 1.9458 3.89209 0 ]xsh258.021 111.125 mo
254.87 111.125 li
19.7705 111.125 mo
22.9204 111.125 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNQ+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/NHWRNQ+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]NHWRNQ+Helvetica nfNHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf0 113.458 mo( 0.08)[1.9458 3.89209 1.9458 3.89209 0 ]xsh258.021 93.1738 mo
254.87 93.1738 li
19.7705 93.1738 mo
22.9204 93.1738 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNQ+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/NHWRNQ+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]NHWRNQ+Helvetica nfNHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 95.5054 mo( 0.1)[1.9458 3.89209 1.9458 0 ]xsh258.021 75.2734 mo
254.87 75.2734 li
19.7705 75.2734 mo
22.9204 75.2734 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf0 77.5991 mo( 0.12)[1.9458 3.89209 1.9458 3.89209 0 ]xsh258.021 57.3735 mo
254.87 57.3735 li
19.7705 57.3735 mo
22.9204 57.3735 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf0 59.7085 mo( 0.14)[1.9458 3.89209 1.9458 3.89209 0 ]xsh258.021 39.4736 mo
254.87 39.4736 li
19.7705 39.4736 mo
22.9204 39.4736 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf0 41.8101 mo( 0.16)[1.9458 3.89209 1.9458 3.89209 0 ]xsh258.021 21.5737 mo
254.87 21.5737 li
19.7705 21.5737 mo
22.9204 21.5737 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf0 23.9116 mo( 0.18)[1.9458 3.89209 1.9458 3.89209 0 ]xsh258.021 3.67383 mo
254.87 3.67383 li
19.7705 3.67383 mo
22.9204 3.67383 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 6.01318 mo( 0.2)[1.9458 3.89209 1.9458 0 ]xsh19.7705 3.67383 mo
19.7705 6.82373 li
19.7705 182.724 mo
19.7705 179.574 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf16.8516 192.052 mo( )sh18.7969 192.052 mo(0)sh49.5703 3.67383 mo
49.5703 6.82373 li
49.5703 182.724 mo
49.5703 179.574 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf46.6484 192.052 mo( )sh48.5938 192.052 mo(1)sh79.3203 3.67383 mo
79.3203 6.82373 li
79.3203 182.724 mo
79.3203 179.574 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf76.3984 192.052 mo( )sh78.3438 192.052 mo(2)sh109.12 3.67383 mo
109.12 6.82373 li
109.12 182.724 mo
109.12 179.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319EB739C72B00D2CC4607F53D8DAA36825DF613C6C839053BC26A7859D8AA158786D28D1E4DE04046CE941E5159199A77FA8129F02A3ECB8D9E54C278D22D0348DFB3C3C73F55886BF824DB1B2BE764C084A332EAF6E03DAE2729DE4723D54D14DE5E36772632D9593B8015D82D91A7513CF83AED18BF899FB582C1516AE5C3CE963C7A9224066B2CB5D769E52069DB2172C52452A135E45CF579C1E7FB12BEA387FFB8E1E9EB90D4F6BF80D4DDA346E7141D8646431020D523BDB64> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNQ+Helvetica /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/NHWRNQ+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /.notdef /six /.notdef /eight 199{/.notdef}rp]NHWRNQ+Helvetica nfNHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf106.195 192.052 mo( )sh108.148 192.052 mo(3)sh138.92 3.67383 mo
138.92 6.82373 li
138.92 182.724 mo
138.92 179.574 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf135.992 192.052 mo( )sh137.945 192.052 mo(4)sh168.67 3.67383 mo
168.67 6.82373 li
168.67 182.724 mo
168.67 179.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNQ+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/NHWRNQ+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 199{/.notdef}rp]NHWRNQ+Helvetica nfNHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf165.75 192.052 mo( )sh167.695 192.052 mo(5)sh198.471 3.67383 mo
198.471 6.82373 li
198.471 182.724 mo
198.471 179.574 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf195.547 192.052 mo( )sh197.492 192.052 mo(6)sh228.221 3.67383 mo
228.221 6.82373 li
228.221 182.724 mo
228.221 179.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7EF327C10274AB025EB21CC3BB5514D7A792BCFB0F254664FBEE7353071728231DCE5A09FB578C9A63F4547F469AB016F484730> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNQ+Helvetica /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/NHWRNQ+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /eight 199{/.notdef}rp]NHWRNQ+Helvetica nfNHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf225.297 192.052 mo( )sh227.242 192.052 mo(7)sh258.021 3.67383 mo
258.021 6.82373 li
258.021 182.724 mo
258.021 179.574 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf255.102 192.052 mo( )sh257.039 192.052 mo(8)sh19.7705 3.67383 mo
19.7705 182.724 li
258.021 182.724 li
258.021 3.67383 li
19.7705 3.67383 li
19.7705 3.67383 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B7F374CC52CC6AFA2AC69E2626E08155548B3F09D592996A164FA4C0B7A39FE024A3E562036F05B86028> |-/c <1C60D8A8C9B7A73DE7D498F17521D6359F9ADD96B62202C43AB7E2B6A506D4DE60506EB0B21A851A7E637BA285607D05D1170907CD76EA31977E70CEDA0DED90924EF61C48FC884B70C05F0A56FF474D664DA9646860BA> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNQ+Helvetica /Encoding getdup 61 /equal putdup 99 /c putpop%ADOEndSubsetFont
/NHWRNQ+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /eight 4{/.notdef}rp /equal 37{/.notdef}rp /c 156{/.notdef}rp]NHWRNQ+Helvetica nfNHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf210.102 12.6616 mo(c = )[3.5 1.94629 4.08789 0 ]xsh221.57 12.6616 mo(1)sh0.25 lw
242.771 176.224 mo
243.021 176.224 li
243.221 176.224 li
243.471 176.224 li
243.721 176.273 li
243.971 176.273 li
244.17 176.273 li
244.42 176.273 li
244.67 176.273 li
244.92 176.324 li
245.12 176.324 li
245.37 176.324 li
245.62 176.324 li
245.87 176.324 li
246.12 176.375 li
246.32 176.375 li
246.57 176.375 li
246.82 176.375 li
247.07 176.375 li
247.271 176.423 li
247.521 176.423 li
247.771 176.423 li
248.021 176.423 li
248.221 176.423 li
248.471 176.474 li
248.721 176.474 li
248.971 176.474 li
249.221 176.474 li
249.42 176.474 li
249.67 176.474 li
249.92 176.523 li
250.17 176.523 li
250.37 176.523 li
250.62 176.523 li
250.87 176.523 li
251.12 176.574 li
251.32 176.574 li
251.57 176.574 li
251.82 176.574 li
252.07 176.574 li
252.32 176.574 li
252.521 176.625 li
252.771 176.625 li
253.021 176.625 li
253.271 176.625 li
253.471 176.625 li
253.721 176.673 li
253.971 176.673 li
254.221 176.673 li
254.42 176.673 li
254.67 176.673 li
254.92 176.673 li
255.17 176.724 li
255.42 176.724 li
255.62 176.724 li
255.87 176.724 li
256.12 176.724 li
256.37 176.724 li
256.57 176.773 li
256.82 176.773 li
257.07 176.773 li
257.32 176.773 li
257.521 176.773 li
257.771 176.824 li
258.021 176.824 li
217.971 175.023 mo
218.17 175.023 li
218.42 175.074 li
218.67 175.074 li
218.92 175.074 li
219.17 175.074 li
219.37 175.125 li
219.62 175.125 li
219.87 175.125 li
220.12 175.125 li
220.32 175.173 li
220.57 175.173 li
220.82 175.173 li
221.07 175.173 li
221.271 175.224 li
221.521 175.224 li
221.771 175.224 li
222.021 175.224 li
222.271 175.273 li
222.471 175.273 li
222.721 175.273 li
222.971 175.273 li
223.221 175.324 li
223.42 175.324 li
223.67 175.324 li
223.92 175.324 li
224.17 175.375 li
224.37 175.375 li
224.62 175.375 li
224.87 175.375 li
225.12 175.423 li
225.37 175.423 li
225.57 175.423 li
225.82 175.423 li
226.07 175.474 li
226.32 175.474 li
226.521 175.474 li
226.771 175.474 li
227.021 175.523 li
227.271 175.523 li
227.471 175.523 li
227.721 175.523 li
227.971 175.523 li
228.221 175.574 li
228.471 175.574 li
228.67 175.574 li
228.92 175.574 li
229.17 175.625 li
229.42 175.625 li
229.62 175.625 li
229.87 175.625 li
230.12 175.673 li
230.37 175.673 li
230.57 175.673 li
230.82 175.673 li
231.07 175.673 li
231.32 175.724 li
231.57 175.724 li
231.771 175.724 li
232.021 175.724 li
232.271 175.773 li
232.521 175.773 li
232.721 175.773 li
232.971 175.773 li
233.221 175.773 li
233.471 175.824 li
233.67 175.824 li
233.92 175.824 li
234.17 175.824 li
234.42 175.875 li
234.67 175.875 li
234.87 175.875 li
235.12 175.875 li
235.37 175.875 li
235.62 175.923 li
235.82 175.923 li
236.07 175.923 li
236.32 175.923 li
236.57 175.974 li
236.771 175.974 li
237.021 175.974 li
237.271 175.974 li
237.521 175.974 li
237.771 176.023 li
237.971 176.023 li
238.221 176.023 li
238.471 176.023 li
238.721 176.023 li
238.92 176.074 li
239.17 176.074 li
239.42 176.074 li
239.67 176.074 li
239.87 176.074 li
240.12 176.125 li
240.37 176.125 li
240.62 176.125 li
240.87 176.125 li
241.07 176.125 li
241.32 176.173 li
241.57 176.173 li
241.82 176.173 li
242.021 176.173 li
242.271 176.173 li
242.521 176.224 li
242.771 176.224 li
193.17 173.423 mo
193.37 173.423 li
193.62 173.474 li
193.87 173.474 li
194.12 173.474 li
194.32 173.523 li
194.57 173.523 li
194.82 173.523 li
195.07 173.574 li
195.32 173.574 li
195.521 173.574 li
195.771 173.625 li
196.021 173.625 li
196.271 173.625 li
196.471 173.673 li
196.721 173.673 li
196.971 173.673 li
197.221 173.724 li
197.42 173.724 li
197.67 173.773 li
197.92 173.773 li
198.17 173.773 li
198.42 173.824 li
198.62 173.824 li
198.87 173.824 li
199.12 173.875 li
199.37 173.875 li
199.57 173.875 li
199.82 173.923 li
200.07 173.923 li
200.32 173.923 li
200.521 173.974 li
200.771 173.974 li
201.021 173.974 li
201.271 173.974 li
201.521 174.023 li
201.721 174.023 li
201.971 174.023 li
202.221 174.074 li
202.471 174.074 li
202.67 174.074 li
202.92 174.125 li
203.17 174.125 li
203.42 174.125 li
203.62 174.173 li
203.87 174.173 li
204.12 174.173 li
204.37 174.224 li
204.62 174.224 li
204.82 174.224 li
205.07 174.273 li
205.32 174.273 li
205.57 174.273 li
205.771 174.273 li
206.021 174.324 li
206.271 174.324 li
206.521 174.324 li
206.721 174.375 li
206.971 174.375 li
207.221 174.375 li
207.471 174.423 li
207.721 174.423 li
207.92 174.423 li
208.17 174.474 li
208.42 174.474 li
208.67 174.474 li
208.87 174.474 li
209.12 174.523 li
209.37 174.523 li
209.62 174.523 li
209.87 174.574 li
210.07 174.574 li
210.32 174.574 li
210.57 174.574 li
210.82 174.625 li
211.021 174.625 li
211.271 174.625 li
211.521 174.673 li
211.771 174.673 li
211.971 174.673 li
212.221 174.673 li
212.471 174.724 li
212.721 174.724 li
212.971 174.724 li
213.17 174.773 li
213.42 174.773 li
213.67 174.773 li
213.92 174.773 li
214.12 174.824 li
214.37 174.824 li
214.62 174.824 li
214.87 174.875 li
215.07 174.875 li
215.32 174.875 li
215.57 174.875 li
215.82 174.923 li
216.07 174.923 li
216.271 174.923 li
216.521 174.923 li
216.771 174.974 li
217.021 174.974 li
217.221 174.974 li
217.471 174.974 li
217.721 175.023 li
217.971 175.023 li
168.37 171.173 mo
168.57 171.173 li
168.82 171.224 li
169.07 171.224 li
169.32 171.273 li
169.521 171.273 li
169.771 171.324 li
170.021 171.324 li
170.271 171.375 li
170.471 171.375 li
170.721 171.423 li
170.971 171.423 li
171.221 171.474 li
171.471 171.474 li
171.67 171.523 li
171.92 171.523 li
172.17 171.574 li
172.42 171.574 li
172.62 171.625 li
172.87 171.625 li
173.12 171.673 li
173.37 171.673 li
173.62 171.724 li
173.82 171.724 li
174.07 171.773 li
174.32 171.773 li
174.57 171.824 li
174.771 171.824 li
175.021 171.824 li
175.271 171.875 li
175.521 171.875 li
175.721 171.923 li
175.971 171.923 li
176.221 171.974 li
176.471 171.974 li
176.721 172.023 li
176.92 172.023 li
177.17 172.074 li
177.42 172.074 li
177.67 172.125 li
177.87 172.125 li
178.12 172.125 li
178.37 172.173 li
178.62 172.173 li
178.82 172.224 li
179.07 172.224 li
179.32 172.273 li
179.57 172.273 li
179.82 172.324 li
180.021 172.324 li
180.271 172.324 li
180.521 172.375 li
180.771 172.375 li
180.971 172.423 li
181.221 172.423 li
181.471 172.474 li
181.721 172.474 li
181.92 172.474 li
182.17 172.523 li
182.42 172.523 li
182.67 172.574 li
182.92 172.574 li
183.12 172.625 li
183.37 172.625 li
183.62 172.625 li
183.87 172.673 li
184.07 172.673 li
184.32 172.724 li
184.57 172.724 li
184.82 172.724 li
185.021 172.773 li
185.271 172.773 li
185.521 172.824 li
185.771 172.824 li
186.021 172.824 li
186.221 172.875 li
186.471 172.875 li
186.721 172.923 li
186.971 172.923 li
187.17 172.923 li
187.42 172.974 li
187.67 172.974 li
187.92 173.025 li
188.12 173.025 li
188.37 173.025 li
188.62 173.074 li
188.87 173.074 li
189.12 173.125 li
189.32 173.125 li
189.57 173.125 li
189.82 173.173 li
190.07 173.173 li
190.271 173.173 li
190.521 173.224 li
190.771 173.224 li
191.021 173.275 li
191.221 173.275 li
191.471 173.275 li
191.721 173.324 li
191.971 173.324 li
192.221 173.324 li
192.42 173.375 li
192.67 173.375 li
192.92 173.375 li
193.17 173.423 li
143.57 167.824 mo
143.771 167.875 li
144.021 167.875 li
144.271 167.923 li
144.521 167.974 li
144.721 168.023 li
144.971 168.023 li
145.221 168.074 li
145.471 168.125 li
145.67 168.173 li
145.92 168.224 li
146.17 168.224 li
146.42 168.273 li
146.67 168.324 li
146.87 168.375 li
147.12 168.375 li
147.37 168.423 li
147.62 168.474 li
147.82 168.523 li
148.07 168.523 li
148.32 168.574 li
148.57 168.625 li
148.771 168.625 li
149.021 168.673 li
149.271 168.724 li
149.521 168.773 li
149.771 168.773 li
149.971 168.824 li
150.221 168.875 li
150.471 168.875 li
150.721 168.923 li
150.92 168.974 li
151.17 168.974 li
151.42 169.023 li
151.67 169.074 li
151.87 169.125 li
152.12 169.125 li
152.37 169.173 li
152.62 169.224 li
152.87 169.224 li
153.07 169.273 li
153.32 169.324 li
153.57 169.324 li
153.82 169.375 li
154.021 169.423 li
154.271 169.423 li
154.521 169.474 li
154.771 169.525 li
154.971 169.525 li
155.221 169.574 li
155.471 169.574 li
155.721 169.625 li
155.971 169.673 li
156.17 169.673 li
156.42 169.724 li
156.67 169.775 li
156.92 169.775 li
157.12 169.824 li
157.37 169.875 li
157.62 169.875 li
157.87 169.923 li
158.07 169.923 li
158.32 169.974 li
158.57 170.025 li
158.82 170.025 li
159.07 170.074 li
159.271 170.074 li
159.521 170.125 li
159.771 170.173 li
160.021 170.173 li
160.221 170.224 li
160.471 170.224 li
160.721 170.275 li
160.971 170.324 li
161.17 170.324 li
161.42 170.375 li
161.67 170.375 li
161.92 170.423 li
162.17 170.423 li
162.37 170.474 li
162.62 170.525 li
162.87 170.525 li
163.12 170.574 li
163.32 170.574 li
163.57 170.625 li
163.82 170.625 li
164.07 170.673 li
164.271 170.724 li
164.521 170.724 li
164.771 170.775 li
165.021 170.775 li
165.271 170.824 li
165.471 170.824 li
165.72 170.875 li
165.97 170.875 li
166.22 170.923 li
166.42 170.923 li
166.67 170.974 li
166.92 171.025 li
167.17 171.025 li
167.37 171.074 li
167.62 171.074 li
167.87 171.125 li
168.12 171.125 li
168.37 171.173 li
118.72 162.474 mo
118.97 162.574 li
119.22 162.625 li
119.47 162.673 li
119.72 162.773 li
119.92 162.824 li
120.17 162.875 li
120.42 162.923 li
120.67 163.023 li
120.87 163.074 li
121.12 163.125 li
121.37 163.173 li
121.62 163.273 li
121.82 163.324 li
122.07 163.375 li
122.32 163.423 li
122.57 163.523 li
122.82 163.574 li
123.021 163.625 li
123.271 163.673 li
123.521 163.724 li
123.771 163.773 li
123.97 163.875 li
124.22 163.923 li
124.47 163.974 li
124.72 164.023 li
124.92 164.074 li
125.17 164.125 li
125.42 164.224 li
125.67 164.273 li
125.92 164.324 li
126.12 164.375 li
126.37 164.423 li
126.62 164.474 li
126.87 164.523 li
127.07 164.574 li
127.32 164.625 li
127.57 164.724 li
127.82 164.773 li
128.021 164.824 li
128.271 164.875 li
128.521 164.923 li
128.771 164.974 li
129.021 165.023 li
129.221 165.074 li
129.471 165.125 li
129.721 165.173 li
129.971 165.224 li
130.17 165.273 li
130.42 165.324 li
130.67 165.375 li
130.92 165.423 li
131.12 165.474 li
131.37 165.525 li
131.62 165.574 li
131.87 165.625 li
132.12 165.673 li
132.32 165.724 li
132.57 165.775 li
132.82 165.824 li
133.07 165.875 li
133.271 165.923 li
133.521 165.974 li
133.771 166.025 li
134.021 166.074 li
134.221 166.125 li
134.471 166.173 li
134.721 166.224 li
134.971 166.275 li
135.221 166.324 li
135.42 166.375 li
135.67 166.423 li
135.92 166.474 li
136.17 166.474 li
136.37 166.525 li
136.62 166.574 li
136.87 166.625 li
137.12 166.673 li
137.32 166.724 li
137.57 166.775 li
137.82 166.824 li
138.07 166.875 li
138.32 166.875 li
138.521 166.923 li
138.771 166.974 li
139.021 167.025 li
139.271 167.074 li
139.47 167.125 li
139.72 167.173 li
139.97 167.224 li
140.22 167.224 li
140.47 167.275 li
140.67 167.324 li
140.92 167.375 li
141.17 167.425 li
141.42 167.474 li
141.62 167.474 li
141.87 167.525 li
142.12 167.574 li
142.37 167.625 li
142.57 167.675 li
142.82 167.675 li
143.07 167.724 li
143.32 167.775 li
143.57 167.824 li
93.9204 153.074 mo
94.1704 153.173 li
94.4204 153.324 li
94.6704 153.423 li
94.8701 153.574 li
95.1201 153.673 li
95.3701 153.773 li
95.6201 153.923 li
95.8701 154.023 li
96.0703 154.125 li
96.3203 154.273 li
96.5703 154.375 li
96.8203 154.474 li
97.0205 154.625 li
97.2705 154.724 li
97.5205 154.824 li
97.7705 154.923 li
97.9702 155.074 li
98.2202 155.173 li
98.4702 155.273 li
98.7202 155.373 li
98.9702 155.474 li
99.1704 155.574 li
99.4204 155.724 li
99.6704 155.824 li
99.9204 155.923 li
100.12 156.023 li
100.371 156.123 li
100.621 156.224 li
100.871 156.324 li
101.07 156.423 li
101.32 156.523 li
101.57 156.623 li
101.82 156.724 li
102.07 156.824 li
102.271 156.923 li
102.521 157.023 li
102.771 157.123 li
103.021 157.224 li
103.22 157.324 li
103.47 157.423 li
103.72 157.523 li
103.97 157.623 li
104.17 157.724 li
104.42 157.773 li
104.67 157.873 li
104.92 157.974 li
105.17 158.074 li
105.371 158.173 li
105.621 158.273 li
105.871 158.324 li
106.121 158.423 li
106.32 158.523 li
106.57 158.623 li
106.82 158.673 li
107.07 158.773 li
107.32 158.873 li
107.521 158.974 li
107.771 159.023 li
108.021 159.123 li
108.271 159.224 li
108.471 159.273 li
108.721 159.373 li
108.971 159.474 li
109.221 159.523 li
109.42 159.623 li
109.67 159.724 li
109.92 159.773 li
110.17 159.873 li
110.42 159.974 li
110.621 160.023 li
110.871 160.123 li
111.121 160.173 li
111.371 160.273 li
111.57 160.324 li
111.82 160.423 li
112.07 160.474 li
112.32 160.574 li
112.521 160.673 li
112.771 160.724 li
113.021 160.824 li
113.271 160.873 li
113.521 160.972 li
113.721 161.023 li
113.971 161.123 li
114.221 161.173 li
114.471 161.224 li
114.67 161.324 li
114.92 161.373 li
115.17 161.474 li
115.42 161.523 li
115.621 161.623 li
115.871 161.673 li
116.121 161.724 li
116.371 161.824 li
116.621 161.873 li
116.82 161.974 li
117.07 162.023 li
117.32 162.074 li
117.57 162.173 li
117.771 162.224 li
118.021 162.273 li
118.271 162.373 li
118.521 162.423 li
118.721 162.474 li
69.1201 133.324 mo
69.3701 133.625 li
69.6201 133.923 li
69.8701 134.173 li
70.0703 134.474 li
70.3203 134.724 li
70.5703 135.023 li
70.8203 135.273 li
71.0703 135.574 li
71.2705 135.824 li
71.5205 136.074 li
71.7705 136.324 li
72.0205 136.574 li
72.2202 136.824 li
72.4702 137.125 li
72.7202 137.375 li
72.9702 137.574 li
73.1704 137.824 li
73.4204 138.074 li
73.6704 138.324 li
73.9204 138.574 li
74.1704 138.824 li
74.3706 139.023 li
74.6206 139.273 li
74.8706 139.523 li
75.1206 139.724 li
75.3203 139.974 li
75.5703 140.173 li
75.8203 140.423 li
76.0703 140.623 li
76.2705 140.873 li
76.5205 141.074 li
76.7705 141.273 li
77.0205 141.474 li
77.2705 141.724 li
77.4702 141.923 li
77.7202 142.123 li
77.9702 142.324 li
78.2202 142.523 li
78.4204 142.724 li
78.6704 142.923 li
78.9204 143.125 li
79.1704 143.324 li
79.3706 143.523 li
79.6206 143.724 li
79.8706 143.923 li
80.1206 144.125 li
80.3706 144.324 li
80.5703 144.523 li
80.8203 144.673 li
81.0703 144.875 li
81.3203 145.074 li
81.5205 145.224 li
81.7705 145.423 li
82.0205 145.625 li
82.2705 145.773 li
82.4707 145.974 li
82.7207 146.125 li
82.9707 146.324 li
83.2207 146.474 li
83.4707 146.673 li
83.6704 146.824 li
83.9204 146.974 li
84.1704 147.173 li
84.4204 147.324 li
84.6206 147.474 li
84.8706 147.673 li
85.1206 147.824 li
85.3706 147.974 li
85.5703 148.125 li
85.8203 148.324 li
86.0703 148.474 li
86.3203 148.625 li
86.5703 148.773 li
86.7705 148.923 li
87.0205 149.074 li
87.2705 149.224 li
87.5205 149.375 li
87.7207 149.523 li
87.9707 149.673 li
88.2207 149.824 li
88.4707 149.974 li
88.6704 150.125 li
88.9204 150.273 li
89.1704 150.423 li
89.4204 150.523 li
89.6704 150.673 li
89.8706 150.824 li
90.1206 150.974 li
90.3706 151.125 li
90.6206 151.224 li
90.8203 151.375 li
91.0703 151.523 li
91.3203 151.673 li
91.5703 151.773 li
91.7705 151.923 li
92.0205 152.023 li
92.2705 152.173 li
92.5205 152.324 li
92.7705 152.423 li
92.9707 152.574 li
93.2207 152.673 li
93.4707 152.824 li
93.7207 152.923 li
93.9204 153.074 li
44.3203 78.9736 mo
44.5703 79.8735 li
44.8203 80.7734 li
45.0703 81.6235 li
45.2705 82.4736 li
45.5205 83.3735 li
45.7705 84.1738 li
46.0205 85.0234 li
46.2202 85.8735 li
46.4702 86.6738 li
46.7202 87.4736 li
46.9702 88.2734 li
47.2202 89.0234 li
47.4204 89.8237 li
47.6704 90.5737 li
47.9204 91.3237 li
48.1704 92.0737 li
48.3701 92.8237 li
48.6201 93.5737 li
48.8701 94.2734 li
49.1201 94.9736 li
49.3203 95.6738 li
49.5703 96.3735 li
49.8203 97.0737 li
50.0703 97.7734 li
50.3203 98.4233 li
50.5205 99.0737 li
50.7705 99.7241 li
51.0205 100.375 li
51.2705 101.023 li
51.4702 101.673 li
51.7202 102.273 li
51.9702 102.923 li
52.2202 103.523 li
52.4204 104.125 li
52.6704 104.724 li
52.9204 105.324 li
53.1704 105.875 li
53.4204 106.474 li
53.6206 107.023 li
53.8706 107.574 li
54.1206 108.125 li
54.3706 108.673 li
54.5703 109.224 li
54.8203 109.773 li
55.0703 110.324 li
55.3203 110.824 li
55.5205 111.324 li
55.7705 111.875 li
56.0205 112.375 li
56.2705 112.875 li
56.5205 113.375 li
56.7202 113.875 li
56.9702 114.324 li
57.2207 114.824 li
57.4707 115.273 li
57.6704 115.773 li
57.9204 116.224 li
58.1704 116.673 li
58.4204 117.125 li
58.6206 117.574 li
58.8706 118.023 li
59.1206 118.474 li
59.3706 118.923 li
59.6206 119.324 li
59.8203 119.773 li
60.0703 120.173 li
60.3203 120.574 li
60.5703 121.023 li
60.7705 121.423 li
61.0205 121.824 li
61.2705 122.224 li
61.5205 122.625 li
61.7207 123.023 li
61.9707 123.375 li
62.2207 123.773 li
62.4707 124.173 li
62.7207 124.523 li
62.9204 124.875 li
63.1704 125.273 li
63.4204 125.625 li
63.6704 125.974 li
63.8706 126.324 li
64.1206 126.673 li
64.3706 127.023 li
64.6206 127.375 li
64.8203 127.724 li
65.0703 128.074 li
65.3203 128.423 li
65.5703 128.724 li
65.8203 129.074 li
66.0205 129.375 li
66.2705 129.724 li
66.5205 130.023 li
66.7705 130.324 li
66.9707 130.673 li
67.2207 130.974 li
67.4707 131.273 li
67.7207 131.574 li
67.9204 131.875 li
68.1704 132.173 li
68.4204 132.474 li
68.6704 132.773 li
68.9204 133.074 li
69.1206 133.324 li
20.0205 182.724 mo
20.2705 182.724 li
20.4702 182.724 li
20.7202 182.724 li
20.9702 182.673 li
21.2202 182.324 li
21.4204 181.273 li
21.6704 179.125 li
21.9204 175.574 li
22.1704 170.523 li
22.3701 164.023 li
22.6201 156.423 li
22.8701 147.923 li
23.1201 138.824 li
23.3701 129.423 li
23.5703 119.974 li
23.8203 110.673 li
24.0703 101.625 li
24.3203 92.9238 li
24.5205 84.7236 li
24.7705 77.0737 li
25.0205 69.9238 li
25.2705 63.3237 li
25.4702 57.3237 li
25.7202 51.8237 li
25.9702 46.8735 li
26.2202 42.4238 li
26.4702 38.4238 li
26.6704 34.8735 li
26.9204 31.7236 li
27.1704 29.0234 li
27.4204 26.6235 li
27.6206 24.5737 li
27.8706 22.8735 li
28.1206 21.4238 li
28.3706 20.2236 li
28.5703 19.3237 li
28.8203 18.5737 li
29.0703 18.0737 li
29.3203 17.7236 li
29.5703 17.5737 li
29.7705 17.5234 li
30.0205 17.6738 li
30.2705 17.9238 li
30.5205 18.2734 li
30.7202 18.7236 li
30.9702 19.2734 li
31.2202 19.9238 li
31.4702 20.6235 li
31.6704 21.4238 li
31.9204 22.2236 li
32.1704 23.1235 li
32.4204 24.0737 li
32.6704 25.0737 li
32.8706 26.0737 li
33.1206 27.1235 li
33.3706 28.2236 li
33.6206 29.3237 li
33.8203 30.4736 li
34.0703 31.6235 li
34.3203 32.7734 li
34.5703 33.9238 li
34.7705 35.1235 li
35.0205 36.3237 li
35.2705 37.5234 li
35.5205 38.7236 li
35.7705 39.9736 li
35.9707 41.1738 li
36.2207 42.3735 li
36.4707 43.5737 li
36.7207 44.7734 li
36.9204 45.9736 li
37.1704 47.1738 li
37.4204 48.3735 li
37.6704 49.5737 li
37.9204 50.7734 li
38.1206 51.9238 li
38.3706 53.0737 li
38.6206 54.2734 li
38.8706 55.4238 li
39.0703 56.5234 li
39.3203 57.6738 li
39.5703 58.8237 li
39.8203 59.9238 li
40.0205 61.0234 li
40.2705 62.1235 li
40.5205 63.1738 li
40.7705 64.2734 li
41.0205 65.3237 li
41.2207 66.3735 li
41.4707 67.3735 li
41.7207 68.4238 li
41.9707 69.4238 li
42.1704 70.4238 li
42.4204 71.4238 li
42.6704 72.4238 li
42.9204 73.3735 li
43.1206 74.3237 li
43.3706 75.2734 li
43.6206 76.2236 li
43.8706 77.1738 li
44.1206 78.0737 li
44.3208 78.9736 li
229.67 10.3237 mo
249.62 10.3237 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf211.648 19.6616 mo(  = )[1.94629 1.94629 4.08789 0 ]xsh221.57 19.6616 mo(2)sh[4 2 ] 0 dsh
242.771 170.574 mo
243.021 170.574 li
243.221 170.574 li
243.471 170.625 li
243.721 170.625 li
243.971 170.625 li
244.17 170.673 li
244.42 170.673 li
244.67 170.673 li
244.92 170.724 li
245.12 170.724 li
245.37 170.724 li
245.62 170.773 li
245.87 170.773 li
246.12 170.773 li
246.32 170.824 li
246.57 170.824 li
246.82 170.875 li
247.07 170.875 li
247.271 170.875 li
247.521 170.923 li
247.771 170.923 li
248.021 170.923 li
248.221 170.974 li
248.471 170.974 li
248.721 170.974 li
248.971 171.023 li
249.221 171.023 li
249.42 171.023 li
249.67 171.074 li
249.92 171.074 li
250.17 171.074 li
250.37 171.125 li
250.62 171.125 li
250.87 171.125 li
251.12 171.173 li
251.32 171.173 li
251.57 171.173 li
251.82 171.224 li
252.07 171.224 li
252.32 171.224 li
252.521 171.224 li
252.771 171.273 li
253.021 171.273 li
253.271 171.273 li
253.471 171.324 li
253.721 171.324 li
253.971 171.324 li
254.221 171.375 li
254.42 171.375 li
254.67 171.375 li
254.92 171.423 li
255.17 171.423 li
255.42 171.423 li
255.62 171.474 li
255.87 171.474 li
256.12 171.474 li
256.37 171.523 li
256.57 171.523 li
256.82 171.523 li
257.07 171.523 li
257.32 171.574 li
257.521 171.574 li
257.771 171.574 li
258.021 171.625 li
217.971 168.423 mo
218.17 168.474 li
218.42 168.474 li
218.67 168.523 li
218.92 168.523 li
219.17 168.574 li
219.37 168.574 li
219.62 168.625 li
219.87 168.625 li
220.12 168.625 li
220.32 168.673 li
220.57 168.673 li
220.82 168.724 li
221.07 168.724 li
221.271 168.773 li
221.521 168.773 li
221.771 168.824 li
222.021 168.824 li
222.271 168.824 li
222.471 168.875 li
222.721 168.875 li
222.971 168.923 li
223.221 168.923 li
223.42 168.974 li
223.67 168.974 li
223.92 169.023 li
224.17 169.023 li
224.37 169.023 li
224.62 169.074 li
224.87 169.074 li
225.12 169.125 li
225.37 169.125 li
225.57 169.173 li
225.82 169.173 li
226.07 169.173 li
226.32 169.224 li
226.521 169.224 li
226.771 169.273 li
227.021 169.273 li
227.271 169.324 li
227.471 169.324 li
227.721 169.324 li
227.971 169.375 li
228.221 169.375 li
228.471 169.423 li
228.67 169.423 li
228.92 169.423 li
229.17 169.474 li
229.42 169.474 li
229.62 169.523 li
229.87 169.523 li
230.12 169.523 li
230.37 169.574 li
230.57 169.574 li
230.82 169.625 li
231.07 169.625 li
231.32 169.625 li
231.57 169.673 li
231.771 169.673 li
232.021 169.724 li
232.271 169.724 li
232.521 169.724 li
232.721 169.773 li
232.971 169.773 li
233.221 169.824 li
233.471 169.824 li
233.67 169.824 li
233.92 169.875 li
234.17 169.875 li
234.42 169.923 li
234.67 169.923 li
234.87 169.923 li
235.12 169.974 li
235.37 169.974 li
235.62 170.025 li
235.82 170.025 li
236.07 170.025 li
236.32 170.074 li
236.57 170.074 li
236.771 170.074 li
237.021 170.125 li
237.271 170.125 li
237.521 170.173 li
237.771 170.173 li
237.971 170.173 li
238.221 170.224 li
238.471 170.224 li
238.721 170.224 li
238.92 170.275 li
239.17 170.275 li
239.42 170.324 li
239.67 170.324 li
239.87 170.324 li
240.12 170.375 li
240.37 170.375 li
240.62 170.375 li
240.87 170.423 li
241.07 170.423 li
241.32 170.423 li
241.57 170.474 li
241.82 170.474 li
242.021 170.525 li
242.271 170.525 li
242.521 170.525 li
242.771 170.574 li
193.17 165.625 mo
193.37 165.673 li
193.62 165.724 li
193.87 165.724 li
194.12 165.773 li
194.32 165.773 li
194.57 165.824 li
194.82 165.875 li
195.07 165.875 li
195.32 165.923 li
195.521 165.923 li
195.771 165.974 li
196.021 166.023 li
196.271 166.023 li
196.471 166.074 li
196.721 166.074 li
196.971 166.125 li
197.221 166.173 li
197.42 166.173 li
197.67 166.224 li
197.92 166.224 li
198.17 166.273 li
198.42 166.324 li
198.62 166.324 li
198.87 166.375 li
199.12 166.375 li
199.37 166.423 li
199.57 166.423 li
199.82 166.474 li
200.07 166.523 li
200.32 166.523 li
200.521 166.574 li
200.771 166.574 li
201.021 166.625 li
201.271 166.625 li
201.521 166.673 li
201.721 166.724 li
201.971 166.724 li
202.221 166.773 li
202.471 166.773 li
202.67 166.824 li
202.92 166.824 li
203.17 166.875 li
203.42 166.923 li
203.62 166.923 li
203.87 166.974 li
204.12 166.974 li
204.37 167.023 li
204.62 167.023 li
204.82 167.074 li
205.07 167.074 li
205.32 167.125 li
205.57 167.125 li
205.771 167.173 li
206.021 167.173 li
206.271 167.224 li
206.521 167.275 li
206.721 167.275 li
206.971 167.324 li
207.221 167.324 li
207.471 167.375 li
207.721 167.375 li
207.92 167.423 li
208.17 167.423 li
208.42 167.474 li
208.67 167.474 li
208.87 167.525 li
209.12 167.525 li
209.37 167.574 li
209.62 167.574 li
209.87 167.625 li
210.07 167.625 li
210.32 167.673 li
210.57 167.673 li
210.82 167.724 li
211.021 167.724 li
211.271 167.775 li
211.521 167.775 li
211.771 167.824 li
211.971 167.824 li
212.221 167.875 li
212.471 167.875 li
212.721 167.923 li
212.971 167.923 li
213.17 167.974 li
213.42 167.974 li
213.67 168.025 li
213.92 168.025 li
214.12 168.074 li
214.37 168.074 li
214.62 168.125 li
214.87 168.125 li
215.07 168.173 li
215.32 168.173 li
215.57 168.224 li
215.82 168.224 li
216.07 168.275 li
216.271 168.275 li
216.521 168.324 li
216.771 168.324 li
217.021 168.324 li
217.221 168.375 li
217.471 168.375 li
217.721 168.423 li
217.971 168.423 li
168.37 161.773 mo
168.57 161.824 li
168.82 161.875 li
169.07 161.923 li
169.32 161.974 li
169.521 162.023 li
169.771 162.074 li
170.021 162.074 li
170.271 162.125 li
170.471 162.173 li
170.721 162.224 li
170.971 162.273 li
171.221 162.324 li
171.471 162.375 li
171.67 162.375 li
171.92 162.423 li
172.17 162.474 li
172.42 162.523 li
172.62 162.574 li
172.87 162.625 li
173.12 162.625 li
173.37 162.673 li
173.62 162.724 li
173.82 162.773 li
174.07 162.824 li
174.32 162.824 li
174.57 162.875 li
174.771 162.923 li
175.021 162.974 li
175.271 163.023 li
175.521 163.023 li
175.721 163.074 li
175.971 163.125 li
176.221 163.173 li
176.471 163.173 li
176.721 163.224 li
176.92 163.273 li
177.17 163.324 li
177.42 163.375 li
177.67 163.375 li
177.87 163.423 li
178.12 163.474 li
178.37 163.525 li
178.62 163.525 li
178.82 163.574 li
179.07 163.625 li
179.32 163.673 li
179.57 163.673 li
179.82 163.724 li
180.021 163.775 li
180.271 163.824 li
180.521 163.824 li
180.771 163.875 li
180.971 163.923 li
181.221 163.974 li
181.471 163.974 li
181.721 164.025 li
181.92 164.074 li
182.17 164.074 li
182.42 164.125 li
182.67 164.173 li
182.92 164.224 li
183.12 164.224 li
183.37 164.275 li
183.62 164.324 li
183.87 164.324 li
184.07 164.375 li
184.32 164.423 li
184.57 164.474 li
184.82 164.474 li
185.021 164.525 li
185.271 164.574 li
185.521 164.574 li
185.771 164.625 li
186.021 164.673 li
186.221 164.673 li
186.471 164.724 li
186.721 164.775 li
186.971 164.775 li
187.17 164.824 li
187.42 164.875 li
187.67 164.875 li
187.92 164.923 li
188.12 164.974 li
188.37 164.974 li
188.62 165.025 li
188.87 165.074 li
189.12 165.074 li
189.32 165.125 li
189.57 165.173 li
189.82 165.173 li
190.07 165.224 li
190.271 165.275 li
190.521 165.275 li
190.771 165.324 li
191.021 165.375 li
191.221 165.375 li
191.471 165.425 li
191.721 165.474 li
191.971 165.474 li
192.221 165.525 li
192.42 165.525 li
192.67 165.574 li
192.92 165.625 li
193.17 165.625 li
143.57 156.273 mo
143.771 156.324 li
144.021 156.423 li
144.271 156.474 li
144.521 156.523 li
144.721 156.625 li
144.971 156.673 li
145.221 156.724 li
145.471 156.773 li
145.67 156.875 li
145.92 156.923 li
146.17 156.974 li
146.42 157.023 li
146.67 157.074 li
146.87 157.173 li
147.12 157.224 li
147.37 157.273 li
147.62 157.324 li
147.82 157.375 li
148.07 157.474 li
148.32 157.523 li
148.57 157.574 li
148.771 157.625 li
149.021 157.673 li
149.271 157.773 li
149.521 157.824 li
149.771 157.875 li
149.971 157.923 li
150.221 157.974 li
150.471 158.023 li
150.721 158.125 li
150.92 158.173 li
151.17 158.224 li
151.42 158.273 li
151.67 158.324 li
151.87 158.375 li
152.12 158.423 li
152.37 158.474 li
152.62 158.574 li
152.87 158.625 li
153.07 158.673 li
153.32 158.724 li
153.57 158.773 li
153.82 158.824 li
154.021 158.875 li
154.271 158.923 li
154.521 158.974 li
154.771 159.025 li
154.971 159.074 li
155.221 159.125 li
155.471 159.224 li
155.721 159.275 li
155.971 159.324 li
156.17 159.375 li
156.42 159.423 li
156.67 159.474 li
156.92 159.525 li
157.12 159.574 li
157.37 159.625 li
157.62 159.673 li
157.87 159.724 li
158.07 159.775 li
158.32 159.824 li
158.57 159.875 li
158.82 159.923 li
159.07 159.974 li
159.271 160.025 li
159.521 160.074 li
159.771 160.125 li
160.021 160.173 li
160.221 160.224 li
160.471 160.275 li
160.721 160.324 li
160.971 160.375 li
161.17 160.423 li
161.42 160.474 li
161.67 160.525 li
161.92 160.574 li
162.17 160.625 li
162.37 160.673 li
162.62 160.724 li
162.87 160.775 li
163.12 160.775 li
163.32 160.824 li
163.57 160.875 li
163.82 160.923 li
164.07 160.974 li
164.271 161.025 li
164.521 161.074 li
164.771 161.125 li
165.021 161.175 li
165.271 161.224 li
165.471 161.275 li
165.72 161.324 li
165.97 161.375 li
166.22 161.375 li
166.42 161.425 li
166.67 161.474 li
166.92 161.525 li
167.17 161.574 li
167.37 161.625 li
167.62 161.675 li
167.87 161.724 li
168.12 161.775 li
168.37 161.775 li
118.72 147.923 mo
118.97 148.023 li
119.22 148.125 li
119.47 148.224 li
119.72 148.324 li
119.92 148.423 li
120.17 148.523 li
120.42 148.625 li
120.67 148.724 li
120.87 148.773 li
121.12 148.873 li
121.37 148.974 li
121.62 149.074 li
121.82 149.173 li
122.07 149.273 li
122.32 149.373 li
122.57 149.474 li
122.82 149.574 li
123.021 149.623 li
123.271 149.724 li
123.521 149.824 li
123.771 149.923 li
123.97 150.023 li
124.22 150.123 li
124.47 150.173 li
124.72 150.273 li
124.92 150.373 li
125.17 150.474 li
125.42 150.574 li
125.67 150.623 li
125.92 150.724 li
126.12 150.824 li
126.37 150.923 li
126.62 150.974 li
126.87 151.074 li
127.07 151.173 li
127.32 151.224 li
127.57 151.324 li
127.82 151.423 li
128.021 151.523 li
128.271 151.574 li
128.521 151.673 li
128.771 151.773 li
129.021 151.824 li
129.221 151.923 li
129.471 152.023 li
129.721 152.074 li
129.971 152.173 li
130.17 152.224 li
130.42 152.324 li
130.67 152.423 li
130.92 152.474 li
131.12 152.574 li
131.37 152.623 li
131.62 152.724 li
131.87 152.824 li
132.12 152.873 li
132.32 152.974 li
132.57 153.023 li
132.82 153.123 li
133.07 153.173 li
133.271 153.273 li
133.521 153.324 li
133.771 153.423 li
134.021 153.474 li
134.221 153.574 li
134.471 153.623 li
134.721 153.724 li
134.971 153.773 li
135.221 153.873 li
135.42 153.923 li
135.67 154.023 li
135.92 154.074 li
136.17 154.173 li
136.37 154.224 li
136.62 154.324 li
136.87 154.373 li
137.12 154.474 li
137.32 154.523 li
137.57 154.574 li
137.82 154.673 li
138.07 154.724 li
138.32 154.824 li
138.521 154.873 li
138.771 154.923 li
139.021 155.023 li
139.271 155.074 li
139.47 155.173 li
139.72 155.224 li
139.97 155.273 li
140.22 155.373 li
140.47 155.423 li
140.67 155.474 li
140.92 155.574 li
141.17 155.623 li
141.42 155.673 li
141.62 155.773 li
141.87 155.824 li
142.12 155.873 li
142.37 155.974 li
142.57 156.023 li
142.82 156.074 li
143.07 156.173 li
143.32 156.224 li
143.57 156.273 li
93.9204 134.173 mo
94.1704 134.375 li
94.4204 134.523 li
94.6704 134.724 li
94.8701 134.875 li
95.1201 135.023 li
95.3701 135.224 li
95.6201 135.375 li
95.8701 135.523 li
96.0703 135.724 li
96.3203 135.875 li
96.5703 136.023 li
96.8203 136.173 li
97.0205 136.324 li
97.2705 136.523 li
97.5205 136.673 li
97.7705 136.824 li
97.9702 136.974 li
98.2202 137.125 li
98.4702 137.273 li
98.7202 137.423 li
98.9702 137.574 li
99.1704 137.724 li
99.4204 137.923 li
99.6704 138.074 li
99.9204 138.224 li
100.12 138.375 li
100.371 138.474 li
100.621 138.625 li
100.871 138.773 li
101.07 138.923 li
101.32 139.074 li
101.57 139.224 li
101.82 139.375 li
102.07 139.523 li
102.271 139.673 li
102.521 139.773 li
102.771 139.923 li
103.021 140.074 li
103.22 140.224 li
103.47 140.375 li
103.72 140.474 li
103.97 140.625 li
104.17 140.773 li
104.42 140.923 li
104.67 141.023 li
104.92 141.173 li
105.17 141.324 li
105.371 141.423 li
105.621 141.574 li
105.871 141.724 li
106.121 141.824 li
106.32 141.974 li
106.57 142.074 li
106.82 142.224 li
107.07 142.375 li
107.32 142.474 li
107.521 142.625 li
107.771 142.724 li
108.021 142.875 li
108.271 142.974 li
108.471 143.125 li
108.721 143.224 li
108.971 143.375 li
109.221 143.474 li
109.42 143.574 li
109.67 143.724 li
109.92 143.824 li
110.17 143.974 li
110.42 144.074 li
110.621 144.173 li
110.871 144.324 li
111.121 144.423 li
111.371 144.523 li
111.57 144.673 li
111.82 144.773 li
112.07 144.873 li
112.32 145.023 li
112.521 145.123 li
112.771 145.224 li
113.021 145.373 li
113.271 145.474 li
113.521 145.574 li
113.721 145.673 li
113.971 145.824 li
114.221 145.923 li
114.471 146.023 li
114.67 146.123 li
114.92 146.224 li
115.17 146.324 li
115.42 146.474 li
115.621 146.574 li
115.871 146.673 li
116.121 146.773 li
116.371 146.873 li
116.621 146.974 li
116.82 147.074 li
117.07 147.173 li
117.32 147.273 li
117.57 147.423 li
117.771 147.523 li
118.021 147.623 li
118.271 147.724 li
118.521 147.824 li
118.721 147.923 li
69.1201 109.673 mo
69.3701 110.023 li
69.6201 110.324 li
69.8701 110.625 li
70.0703 110.923 li
70.3203 111.224 li
70.5703 111.574 li
70.8203 111.875 li
71.0703 112.173 li
71.2705 112.474 li
71.5205 112.773 li
71.7705 113.074 li
72.0205 113.324 li
72.2202 113.625 li
72.4702 113.923 li
72.7202 114.224 li
72.9702 114.523 li
73.1704 114.824 li
73.4204 115.074 li
73.6704 115.375 li
73.9204 115.673 li
74.1704 115.923 li
74.3706 116.224 li
74.6206 116.474 li
74.8706 116.773 li
75.1206 117.023 li
75.3203 117.324 li
75.5703 117.574 li
75.8203 117.824 li
76.0703 118.125 li
76.2705 118.375 li
76.5205 118.625 li
76.7705 118.873 li
77.0205 119.173 li
77.2705 119.423 li
77.4702 119.673 li
77.7202 119.923 li
77.9702 120.173 li
78.2202 120.423 li
78.4204 120.673 li
78.6704 120.923 li
78.9204 121.173 li
79.1704 121.423 li
79.3706 121.673 li
79.6206 121.923 li
79.8706 122.173 li
80.1206 122.423 li
80.3706 122.623 li
80.5703 122.873 li
80.8203 123.123 li
81.0703 123.373 li
81.3203 123.574 li
81.5205 123.824 li
81.7705 124.023 li
82.0205 124.273 li
82.2705 124.523 li
82.4707 124.724 li
82.7207 124.974 li
82.9707 125.173 li
83.2207 125.423 li
83.4707 125.623 li
83.6704 125.824 li
83.9204 126.074 li
84.1704 126.273 li
84.4204 126.474 li
84.6206 126.724 li
84.8706 126.923 li
85.1206 127.123 li
85.3706 127.373 li
85.5703 127.574 li
85.8203 127.773 li
86.0703 127.974 li
86.3203 128.173 li
86.5703 128.373 li
86.7705 128.574 li
87.0205 128.773 li
87.2705 128.974 li
87.5205 129.173 li
87.7207 129.373 li
87.9707 129.574 li
88.2207 129.773 li
88.4707 129.974 li
88.6704 130.173 li
88.9204 130.375 li
89.1704 130.574 li
89.4204 130.773 li
89.6704 130.974 li
89.8706 131.125 li
90.1206 131.324 li
90.3706 131.523 li
90.6206 131.724 li
90.8203 131.875 li
91.0703 132.074 li
91.3203 132.273 li
91.5703 132.423 li
91.7705 132.625 li
92.0205 132.773 li
92.2705 132.974 li
92.5205 133.173 li
92.7705 133.324 li
92.9707 133.523 li
93.2207 133.673 li
93.4707 133.875 li
93.7207 134.023 li
93.9204 134.173 li
44.3203 69.5737 mo
44.5703 69.8735 li
44.8203 70.2236 li
45.0703 70.5234 li
45.2705 70.8735 li
45.5205 71.2236 li
45.7705 71.5737 li
46.0205 71.9736 li
46.2202 72.3237 li
46.4702 72.7236 li
46.7202 73.0737 li
46.9702 73.4736 li
47.2202 73.8735 li
47.4204 74.2734 li
47.6704 74.6738 li
47.9204 75.0737 li
48.1704 75.4736 li
48.3701 75.8735 li
48.6201 76.2734 li
48.8701 76.6738 li
49.1201 77.1235 li
49.3203 77.5234 li
49.5703 77.9238 li
49.8203 78.3735 li
50.0703 78.7734 li
50.3203 79.2236 li
50.5205 79.6235 li
50.7705 80.0737 li
51.0205 80.4736 li
51.2705 80.9238 li
51.4702 81.3237 li
51.7202 81.7734 li
51.9702 82.1738 li
52.2202 82.6235 li
52.4204 83.0737 li
52.6704 83.4736 li
52.9204 83.9238 li
53.1704 84.3237 li
53.4204 84.7734 li
53.6206 85.1738 li
53.8706 85.6235 li
54.1206 86.0234 li
54.3706 86.4736 li
54.5703 86.8735 li
54.8203 87.3237 li
55.0703 87.7236 li
55.3203 88.1738 li
55.5205 88.5737 li
55.7705 88.9736 li
56.0205 89.4238 li
56.2705 89.8237 li
56.5205 90.2236 li
56.7202 90.6738 li
56.9702 91.0737 li
57.2207 91.4736 li
57.4707 91.8735 li
57.6704 92.2739 li
57.9204 92.6738 li
58.1704 93.1235 li
58.4204 93.5239 li
58.6206 93.9238 li
58.8706 94.3237 li
59.1206 94.7236 li
59.3706 95.0737 li
59.6206 95.4736 li
59.8203 95.874 li
60.0703 96.2739 li
60.3203 96.6738 li
60.5703 97.0239 li
60.7705 97.4238 li
61.0205 97.8242 li
61.2705 98.1733 li
61.5205 98.5737 li
61.7207 98.9741 li
61.9707 99.3237 li
62.2207 99.7241 li
62.4707 100.074 li
62.7207 100.423 li
62.9204 100.824 li
63.1704 101.173 li
63.4204 101.523 li
63.6704 101.923 li
63.8706 102.273 li
64.1206 102.625 li
64.3706 102.974 li
64.6206 103.324 li
64.8203 103.673 li
65.0703 104.023 li
65.3203 104.375 li
65.5703 104.724 li
65.8203 105.074 li
66.0205 105.423 li
66.2705 105.773 li
66.5205 106.074 li
66.7705 106.423 li
66.9707 106.773 li
67.2207 107.074 li
67.4707 107.423 li
67.7207 107.775 li
67.9204 108.074 li
68.1704 108.423 li
68.4204 108.724 li
68.6704 109.025 li
68.9204 109.375 li
69.1206 109.673 li
20.0205 182.724 mo
20.2705 182.724 li
20.4702 182.724 li
20.7202 182.724 li
20.9702 182.724 li
21.2202 182.724 li
21.4204 182.724 li
21.6704 182.724 li
21.9204 182.724 li
22.1704 182.673 li
22.3701 182.574 li
22.6201 182.423 li
22.8701 182.173 li
23.1201 181.724 li
23.3701 181.074 li
23.5703 180.173 li
23.8203 179.074 li
24.0703 177.673 li
24.3203 176.023 li
24.5205 174.074 li
24.7705 171.923 li
25.0205 169.523 li
25.2705 166.923 li
25.4702 164.125 li
25.7202 161.173 li
25.9702 158.125 li
26.2202 154.923 li
26.4702 151.673 li
26.6704 148.375 li
26.9204 145.023 li
27.1704 141.724 li
27.4204 138.375 li
27.6206 135.023 li
27.8706 131.773 li
28.1206 128.523 li
28.3706 125.375 li
28.5703 122.273 li
28.8203 119.224 li
29.0703 116.273 li
29.3203 113.423 li
29.5703 110.673 li
29.7705 108.023 li
30.0205 105.423 li
30.2705 102.974 li
30.5205 100.574 li
30.7202 98.3237 li
30.9702 96.1235 li
31.2202 94.0234 li
31.4702 92.0737 li
31.6704 90.1733 li
31.9204 88.3735 li
32.1704 86.6733 li
32.4204 85.0234 li
32.6704 83.5234 li
32.8706 82.0737 li
33.1206 80.6733 li
33.3706 79.3735 li
33.6206 78.1733 li
33.8203 77.0234 li
34.0703 75.9736 li
34.3203 74.9736 li
34.5703 74.0234 li
34.7705 73.1733 li
35.0205 72.3735 li
35.2705 71.6235 li
35.5205 70.9233 li
35.7705 70.2734 li
35.9707 69.6733 li
36.2207 69.1733 li
36.4707 68.6733 li
36.7207 68.2236 li
36.9204 67.8237 li
37.1704 67.4736 li
37.4204 67.1733 li
37.6704 66.8735 li
37.9204 66.6733 li
38.1206 66.4736 li
38.3706 66.2734 li
38.6206 66.1733 li
38.8706 66.0737 li
39.0703 65.9736 li
39.3203 65.9233 li
39.5703 65.9233 li
39.8203 65.9233 li
40.0205 65.9736 li
40.2705 66.0234 li
40.5205 66.0737 li
40.7705 66.1733 li
41.0205 66.2734 li
41.2207 66.4233 li
41.4707 66.5737 li
41.7207 66.7734 li
41.9707 66.9233 li
42.1704 67.1235 li
42.4204 67.3735 li
42.6704 67.5737 li
42.9204 67.8237 li
43.1206 68.1235 li
43.3706 68.3735 li
43.6206 68.6733 li
43.8706 68.9233 li
44.1206 69.2236 li
44.3208 69.5737 li
229.67 17.3237 mo
249.62 17.3237 li
@
NHWRNQ+Helvetica*1 [7 0 0 -7 0 0 ]msf211.648 26.6616 mo(  = )[1.94629 1.94629 4.08789 0 ]xsh221.57 26.6616 mo(5)sh[1 1.5 ] 0 dsh
242.771 157.824 mo
243.021 157.875 li
243.221 157.875 li
243.471 157.923 li
243.721 157.923 li
243.971 157.974 li
244.17 158.023 li
244.42 158.023 li
244.67 158.074 li
244.92 158.125 li
245.12 158.125 li
245.37 158.173 li
245.62 158.173 li
245.87 158.224 li
246.12 158.273 li
246.32 158.273 li
246.57 158.324 li
246.82 158.324 li
247.07 158.375 li
247.271 158.423 li
247.521 158.423 li
247.771 158.474 li
248.021 158.474 li
248.221 158.523 li
248.471 158.574 li
248.721 158.574 li
248.971 158.625 li
249.221 158.625 li
249.42 158.673 li
249.67 158.673 li
249.92 158.724 li
250.17 158.773 li
250.37 158.773 li
250.62 158.824 li
250.87 158.824 li
251.12 158.875 li
251.32 158.923 li
251.57 158.923 li
251.82 158.974 li
252.07 158.974 li
252.32 159.023 li
252.521 159.023 li
252.771 159.074 li
253.021 159.125 li
253.271 159.125 li
253.471 159.173 li
253.721 159.173 li
253.971 159.224 li
254.221 159.224 li
254.42 159.273 li
254.67 159.324 li
254.92 159.324 li
255.17 159.375 li
255.42 159.375 li
255.62 159.423 li
255.87 159.423 li
256.12 159.474 li
256.37 159.474 li
256.57 159.525 li
256.82 159.574 li
257.07 159.574 li
257.32 159.625 li
257.521 159.625 li
257.771 159.673 li
258.021 159.673 li
217.971 154.224 mo
218.17 154.273 li
218.42 154.273 li
218.67 154.324 li
218.92 154.375 li
219.17 154.423 li
219.37 154.474 li
219.62 154.474 li
219.87 154.523 li
220.12 154.574 li
220.32 154.625 li
220.57 154.625 li
220.82 154.673 li
221.07 154.724 li
221.271 154.773 li
221.521 154.773 li
221.771 154.824 li
222.021 154.875 li
222.271 154.923 li
222.471 154.923 li
222.721 154.974 li
222.971 155.023 li
223.221 155.074 li
223.42 155.074 li
223.67 155.125 li
223.92 155.173 li
224.17 155.173 li
224.37 155.224 li
224.62 155.273 li
224.87 155.324 li
225.12 155.324 li
225.37 155.375 li
225.57 155.423 li
225.82 155.474 li
226.07 155.474 li
226.32 155.523 li
226.521 155.574 li
226.771 155.574 li
227.021 155.625 li
227.271 155.673 li
227.471 155.724 li
227.721 155.724 li
227.971 155.773 li
228.221 155.824 li
228.471 155.824 li
228.67 155.875 li
228.92 155.923 li
229.17 155.923 li
229.42 155.974 li
229.62 156.025 li
229.87 156.074 li
230.12 156.074 li
230.37 156.125 li
230.57 156.173 li
230.82 156.173 li
231.07 156.224 li
231.32 156.275 li
231.57 156.275 li
231.771 156.324 li
232.021 156.375 li
232.271 156.375 li
232.521 156.423 li
232.721 156.474 li
232.971 156.474 li
233.221 156.525 li
233.471 156.574 li
233.67 156.574 li
233.92 156.625 li
234.17 156.673 li
234.42 156.673 li
234.67 156.724 li
234.87 156.775 li
235.12 156.775 li
235.37 156.824 li
235.62 156.875 li
235.82 156.875 li
236.07 156.923 li
236.32 156.974 li
236.57 156.974 li
236.771 157.025 li
237.021 157.074 li
237.271 157.074 li
237.521 157.125 li
237.771 157.173 li
237.971 157.173 li
238.221 157.224 li
238.471 157.275 li
238.721 157.275 li
238.92 157.324 li
239.17 157.375 li
239.42 157.375 li
239.67 157.423 li
239.87 157.423 li
240.12 157.474 li
240.37 157.525 li
240.62 157.525 li
240.87 157.574 li
241.07 157.625 li
241.32 157.625 li
241.57 157.673 li
241.82 157.673 li
242.021 157.724 li
242.271 157.775 li
242.521 157.775 li
242.771 157.824 li
193.17 149.724 mo
193.37 149.773 li
193.62 149.824 li
193.87 149.875 li
194.12 149.923 li
194.32 149.974 li
194.57 150.023 li
194.82 150.074 li
195.07 150.074 li
195.32 150.125 li
195.521 150.173 li
195.771 150.224 li
196.021 150.273 li
196.271 150.324 li
196.471 150.375 li
196.721 150.423 li
196.971 150.474 li
197.221 150.523 li
197.42 150.574 li
197.67 150.625 li
197.92 150.673 li
198.17 150.724 li
198.42 150.773 li
198.62 150.824 li
198.87 150.824 li
199.12 150.875 li
199.37 150.923 li
199.57 150.974 li
199.82 151.023 li
200.07 151.074 li
200.32 151.125 li
200.521 151.173 li
200.771 151.224 li
201.021 151.273 li
201.271 151.324 li
201.521 151.324 li
201.721 151.375 li
201.971 151.423 li
202.221 151.474 li
202.471 151.525 li
202.67 151.574 li
202.92 151.625 li
203.17 151.673 li
203.42 151.724 li
203.62 151.724 li
203.87 151.775 li
204.12 151.824 li
204.37 151.875 li
204.62 151.923 li
204.82 151.974 li
205.07 152.025 li
205.32 152.074 li
205.57 152.074 li
205.771 152.125 li
206.021 152.173 li
206.271 152.224 li
206.521 152.275 li
206.721 152.324 li
206.971 152.375 li
207.221 152.375 li
207.471 152.423 li
207.721 152.474 li
207.92 152.525 li
208.17 152.574 li
208.42 152.625 li
208.67 152.673 li
208.87 152.673 li
209.12 152.724 li
209.37 152.775 li
209.62 152.824 li
209.87 152.875 li
210.07 152.923 li
210.32 152.923 li
210.57 152.974 li
210.82 153.025 li
211.021 153.074 li
211.271 153.125 li
211.521 153.125 li
211.771 153.173 li
211.971 153.224 li
212.221 153.275 li
212.471 153.324 li
212.721 153.375 li
212.971 153.375 li
213.17 153.425 li
213.42 153.474 li
213.67 153.525 li
213.92 153.574 li
214.12 153.574 li
214.37 153.625 li
214.62 153.675 li
214.87 153.724 li
215.07 153.775 li
215.32 153.775 li
215.57 153.824 li
215.82 153.875 li
216.07 153.925 li
216.271 153.925 li
216.521 153.974 li
216.771 154.025 li
217.021 154.074 li
217.221 154.125 li
217.471 154.125 li
217.721 154.175 li
217.971 154.224 li
168.37 143.974 mo
168.57 144.074 li
168.82 144.125 li
169.07 144.173 li
169.32 144.224 li
169.521 144.273 li
169.771 144.375 li
170.021 144.423 li
170.271 144.474 li
170.471 144.523 li
170.721 144.625 li
170.971 144.673 li
171.221 144.724 li
171.471 144.773 li
171.67 144.824 li
171.92 144.923 li
172.17 144.974 li
172.42 145.023 li
172.62 145.074 li
172.87 145.125 li
173.12 145.224 li
173.37 145.273 li
173.62 145.324 li
173.82 145.375 li
174.07 145.423 li
174.32 145.474 li
174.57 145.574 li
174.771 145.625 li
175.021 145.673 li
175.271 145.724 li
175.521 145.773 li
175.721 145.824 li
175.971 145.923 li
176.221 145.974 li
176.471 146.023 li
176.721 146.074 li
176.92 146.125 li
177.17 146.173 li
177.42 146.224 li
177.67 146.324 li
177.87 146.375 li
178.12 146.423 li
178.37 146.474 li
178.62 146.523 li
178.82 146.574 li
179.07 146.625 li
179.32 146.673 li
179.57 146.773 li
179.82 146.824 li
180.021 146.875 li
180.271 146.923 li
180.521 146.974 li
180.771 147.025 li
180.971 147.074 li
181.221 147.125 li
181.471 147.173 li
181.721 147.224 li
181.92 147.324 li
182.17 147.375 li
182.42 147.423 li
182.67 147.474 li
182.92 147.525 li
183.12 147.574 li
183.37 147.625 li
183.62 147.673 li
183.87 147.724 li
184.07 147.775 li
184.32 147.824 li
184.57 147.875 li
184.82 147.923 li
185.021 147.974 li
185.271 148.025 li
185.521 148.125 li
185.771 148.173 li
186.021 148.224 li
186.221 148.275 li
186.471 148.324 li
186.721 148.375 li
186.971 148.423 li
187.17 148.474 li
187.42 148.525 li
187.67 148.574 li
187.92 148.625 li
188.12 148.673 li
188.37 148.724 li
188.62 148.775 li
188.87 148.824 li
189.12 148.875 li
189.32 148.923 li
189.57 148.974 li
189.82 149.025 li
190.07 149.074 li
190.271 149.125 li
190.521 149.175 li
190.771 149.224 li
191.021 149.275 li
191.221 149.324 li
191.471 149.375 li
191.721 149.425 li
191.971 149.474 li
192.221 149.525 li
192.42 149.574 li
192.67 149.625 li
192.92 149.675 li
193.17 149.724 li
143.57 136.673 mo
143.771 136.724 li
144.021 136.824 li
144.271 136.875 li
144.521 136.974 li
144.721 137.023 li
144.971 137.125 li
145.221 137.224 li
145.471 137.273 li
145.67 137.375 li
145.92 137.423 li
146.17 137.523 li
146.42 137.574 li
146.67 137.673 li
146.87 137.724 li
147.12 137.824 li
147.37 137.923 li
147.62 137.974 li
147.82 138.074 li
148.07 138.125 li
148.32 138.224 li
148.57 138.273 li
148.771 138.375 li
149.021 138.423 li
149.271 138.523 li
149.521 138.574 li
149.771 138.673 li
149.971 138.724 li
150.221 138.824 li
150.471 138.875 li
150.721 138.974 li
150.92 139.023 li
151.17 139.125 li
151.42 139.173 li
151.67 139.273 li
151.87 139.324 li
152.12 139.423 li
152.37 139.474 li
152.62 139.523 li
152.87 139.625 li
153.07 139.673 li
153.32 139.773 li
153.57 139.824 li
153.82 139.923 li
154.021 139.974 li
154.271 140.074 li
154.521 140.125 li
154.771 140.173 li
154.971 140.273 li
155.221 140.324 li
155.471 140.423 li
155.721 140.474 li
155.971 140.574 li
156.17 140.625 li
156.42 140.673 li
156.67 140.773 li
156.92 140.824 li
157.12 140.923 li
157.37 140.974 li
157.62 141.023 li
157.87 141.125 li
158.07 141.173 li
158.32 141.224 li
158.57 141.324 li
158.82 141.375 li
159.07 141.474 li
159.271 141.523 li
159.521 141.574 li
159.771 141.673 li
160.021 141.724 li
160.221 141.773 li
160.471 141.875 li
160.721 141.923 li
160.971 141.974 li
161.17 142.074 li
161.42 142.125 li
161.67 142.173 li
161.92 142.273 li
162.17 142.324 li
162.37 142.375 li
162.62 142.474 li
162.87 142.523 li
163.12 142.574 li
163.32 142.673 li
163.57 142.724 li
163.82 142.773 li
164.07 142.824 li
164.271 142.923 li
164.521 142.974 li
164.771 143.023 li
165.021 143.125 li
165.271 143.173 li
165.471 143.224 li
165.72 143.273 li
165.97 143.375 li
166.22 143.423 li
166.42 143.474 li
166.67 143.574 li
166.92 143.625 li
167.17 143.673 li
167.37 143.724 li
167.62 143.824 li
167.87 143.875 li
168.12 143.923 li
168.37 143.974 li
118.72 127.324 mo
118.97 127.423 li
119.22 127.523 li
119.47 127.625 li
119.72 127.724 li
119.92 127.824 li
120.17 127.875 li
120.42 127.974 li
120.67 128.074 li
120.87 128.173 li
121.12 128.273 li
121.37 128.375 li
121.62 128.474 li
121.82 128.574 li
122.07 128.673 li
122.32 128.773 li
122.57 128.873 li
122.82 128.974 li
123.021 129.074 li
123.271 129.173 li
123.521 129.273 li
123.771 129.373 li
123.97 129.474 li
124.22 129.574 li
124.47 129.623 li
124.72 129.724 li
124.92 129.824 li
125.17 129.923 li
125.42 130.023 li
125.67 130.123 li
125.92 130.224 li
126.12 130.324 li
126.37 130.423 li
126.62 130.474 li
126.87 130.574 li
127.07 130.673 li
127.32 130.773 li
127.57 130.873 li
127.82 130.974 li
128.021 131.074 li
128.271 131.123 li
128.521 131.224 li
128.771 131.324 li
129.021 131.423 li
129.221 131.523 li
129.471 131.623 li
129.721 131.673 li
129.971 131.773 li
130.17 131.873 li
130.42 131.974 li
130.67 132.074 li
130.92 132.173 li
131.12 132.224 li
131.37 132.324 li
131.62 132.423 li
131.87 132.523 li
132.12 132.574 li
132.32 132.673 li
132.57 132.773 li
132.82 132.873 li
133.07 132.974 li
133.271 133.023 li
133.521 133.123 li
133.771 133.224 li
134.021 133.324 li
134.221 133.373 li
134.471 133.474 li
134.721 133.574 li
134.971 133.673 li
135.221 133.724 li
135.42 133.824 li
135.67 133.923 li
135.92 133.972 li
136.17 134.074 li
136.37 134.173 li
136.62 134.273 li
136.87 134.324 li
137.12 134.423 li
137.32 134.523 li
137.57 134.574 li
137.82 134.673 li
138.07 134.773 li
138.32 134.824 li
138.521 134.923 li
138.771 135.023 li
139.021 135.123 li
139.271 135.173 li
139.47 135.273 li
139.72 135.324 li
139.97 135.423 li
140.22 135.523 li
140.47 135.574 li
140.67 135.673 li
140.92 135.773 li
141.17 135.824 li
141.42 135.923 li
141.62 136.023 li
141.87 136.074 li
142.12 136.173 li
142.37 136.222 li
142.57 136.324 li
142.82 136.423 li
143.07 136.472 li
143.32 136.574 li
143.57 136.673 li
93.9204 116.273 mo
94.1704 116.423 li
94.4204 116.523 li
94.6704 116.625 li
94.8701 116.724 li
95.1201 116.824 li
95.3701 116.923 li
95.6201 117.023 li
95.8701 117.125 li
96.0703 117.273 li
96.3203 117.373 li
96.5703 117.474 li
96.8203 117.574 li
97.0205 117.673 li
97.2705 117.773 li
97.5205 117.923 li
97.7705 118.023 li
97.9702 118.123 li
98.2202 118.224 li
98.4702 118.324 li
98.7202 118.423 li
98.9702 118.574 li
99.1704 118.673 li
99.4204 118.773 li
99.6704 118.873 li
99.9204 118.974 li
100.12 119.074 li
100.371 119.224 li
100.621 119.324 li
100.871 119.423 li
101.07 119.523 li
101.32 119.623 li
101.57 119.724 li
101.82 119.824 li
102.07 119.974 li
102.271 120.074 li
102.521 120.173 li
102.771 120.273 li
103.021 120.373 li
103.22 120.474 li
103.47 120.623 li
103.72 120.724 li
103.97 120.824 li
104.17 120.923 li
104.42 121.023 li
104.67 121.123 li
104.92 121.273 li
105.17 121.373 li
105.371 121.474 li
105.621 121.574 li
105.871 121.673 li
106.121 121.773 li
106.32 121.873 li
106.57 122.023 li
106.82 122.123 li
107.07 122.224 li
107.32 122.324 li
107.521 122.423 li
107.771 122.523 li
108.021 122.623 li
108.271 122.773 li
108.471 122.873 li
108.721 122.972 li
108.971 123.074 li
109.221 123.173 li
109.42 123.273 li
109.67 123.373 li
109.92 123.472 li
110.17 123.623 li
110.42 123.722 li
110.621 123.824 li
110.871 123.923 li
111.121 124.023 li
111.371 124.123 li
111.57 124.222 li
111.82 124.324 li
112.07 124.423 li
112.32 124.523 li
112.521 124.673 li
112.771 124.773 li
113.021 124.873 li
113.271 124.972 li
113.521 125.074 li
113.721 125.173 li
113.971 125.273 li
114.221 125.373 li
114.471 125.472 li
114.67 125.574 li
114.92 125.673 li
115.17 125.773 li
115.42 125.873 li
115.621 125.972 li
115.871 126.074 li
116.121 126.173 li
116.371 126.273 li
116.621 126.373 li
116.82 126.472 li
117.07 126.623 li
117.32 126.722 li
117.57 126.824 li
117.771 126.923 li
118.021 127.023 li
118.271 127.123 li
118.521 127.222 li
118.721 127.322 li
69.1201 108.824 mo
69.3701 108.824 li
69.6201 108.824 li
69.8701 108.875 li
70.0703 108.875 li
70.3203 108.875 li
70.5703 108.875 li
70.8203 108.875 li
71.0703 108.923 li
71.2705 108.923 li
71.5205 108.923 li
71.7705 108.974 li
72.0205 108.974 li
72.2202 109.023 li
72.4702 109.023 li
72.7202 109.074 li
72.9702 109.125 li
73.1704 109.125 li
73.4204 109.173 li
73.6704 109.224 li
73.9204 109.273 li
74.1704 109.273 li
74.3706 109.324 li
74.6206 109.375 li
74.8706 109.423 li
75.1206 109.474 li
75.3203 109.523 li
75.5703 109.574 li
75.8203 109.625 li
76.0703 109.673 li
76.2705 109.724 li
76.5205 109.773 li
76.7705 109.875 li
77.0205 109.923 li
77.2705 109.974 li
77.4702 110.023 li
77.7202 110.074 li
77.9702 110.173 li
78.2202 110.224 li
78.4204 110.273 li
78.6704 110.375 li
78.9204 110.423 li
79.1704 110.523 li
79.3706 110.574 li
79.6206 110.673 li
79.8706 110.724 li
80.1206 110.824 li
80.3706 110.875 li
80.5703 110.974 li
80.8203 111.023 li
81.0703 111.125 li
81.3203 111.173 li
81.5205 111.273 li
81.7705 111.375 li
82.0205 111.423 li
82.2705 111.523 li
82.4707 111.625 li
82.7207 111.673 li
82.9707 111.773 li
83.2207 111.875 li
83.4707 111.923 li
83.6704 112.023 li
83.9204 112.125 li
84.1704 112.224 li
84.4204 112.324 li
84.6206 112.375 li
84.8706 112.474 li
85.1206 112.574 li
85.3706 112.673 li
85.5703 112.773 li
85.8203 112.875 li
86.0703 112.974 li
86.3203 113.023 li
86.5703 113.125 li
86.7705 113.224 li
87.0205 113.324 li
87.2705 113.423 li
87.5205 113.523 li
87.7207 113.625 li
87.9707 113.724 li
88.2207 113.824 li
88.4707 113.923 li
88.6704 114.023 li
88.9204 114.125 li
89.1704 114.224 li
89.4204 114.324 li
89.6704 114.423 li
89.8706 114.523 li
90.1206 114.625 li
90.3706 114.724 li
90.6206 114.824 li
90.8203 114.923 li
91.0703 115.023 li
91.3203 115.123 li
91.5703 115.224 li
91.7705 115.373 li
92.0205 115.474 li
92.2705 115.574 li
92.5205 115.673 li
92.7705 115.773 li
92.9707 115.873 li
93.2207 115.974 li
93.4707 116.074 li
93.7207 116.173 li
93.9204 116.273 li
44.3203 136.824 mo
44.5703 136.125 li
44.8203 135.474 li
45.0703 134.824 li
45.2705 134.173 li
45.5205 133.523 li
45.7705 132.923 li
46.0205 132.273 li
46.2202 131.673 li
46.4702 131.074 li
46.7202 130.474 li
46.9702 129.923 li
47.2202 129.324 li
47.4204 128.773 li
47.6704 128.224 li
47.9204 127.673 li
48.1704 127.173 li
48.3701 126.625 li
48.6201 126.125 li
48.8701 125.625 li
49.1201 125.125 li
49.3203 124.673 li
49.5703 124.173 li
49.8203 123.724 li
50.0703 123.273 li
50.3203 122.824 li
50.5205 122.375 li
50.7705 121.974 li
51.0205 121.574 li
51.2705 121.125 li
51.4702 120.724 li
51.7202 120.375 li
51.9702 119.974 li
52.2202 119.574 li
52.4204 119.224 li
52.6704 118.875 li
52.9204 118.523 li
53.1704 118.173 li
53.4204 117.875 li
53.6206 117.523 li
53.8706 117.224 li
54.1206 116.923 li
54.3706 116.625 li
54.5703 116.324 li
54.8203 116.023 li
55.0703 115.724 li
55.3203 115.474 li
55.5205 115.224 li
55.7705 114.923 li
56.0205 114.673 li
56.2705 114.474 li
56.5205 114.224 li
56.7202 113.974 li
56.9702 113.773 li
57.2207 113.523 li
57.4707 113.324 li
57.6704 113.125 li
57.9204 112.923 li
58.1704 112.724 li
58.4204 112.523 li
58.6206 112.375 li
58.8706 112.173 li
59.1206 112.023 li
59.3706 111.824 li
59.6206 111.673 li
59.8203 111.523 li
60.0703 111.373 li
60.3203 111.224 li
60.5703 111.074 li
60.7705 110.974 li
61.0205 110.824 li
61.2705 110.724 li
61.5205 110.574 li
61.7207 110.474 li
61.9707 110.375 li
62.2207 110.273 li
62.4707 110.173 li
62.7207 110.074 li
62.9204 109.974 li
63.1704 109.875 li
63.4204 109.773 li
63.6704 109.724 li
63.8706 109.625 li
64.1206 109.574 li
64.3706 109.523 li
64.6206 109.423 li
64.8203 109.375 li
65.0703 109.324 li
65.3203 109.273 li
65.5703 109.224 li
65.8203 109.173 li
66.0205 109.125 li
66.2705 109.074 li
66.5205 109.023 li
66.7705 109.023 li
66.9707 108.974 li
67.2207 108.974 li
67.4707 108.923 li
67.7207 108.923 li
67.9204 108.873 li
68.1704 108.873 li
68.4204 108.873 li
68.6704 108.873 li
68.9204 108.873 li
69.1206 108.824 li
20.0205 182.724 mo
20.2705 182.724 li
20.4702 182.724 li
20.7202 182.724 li
20.9702 182.724 li
21.2202 182.724 li
21.4204 182.724 li
21.6704 182.724 li
21.9204 182.724 li
22.1704 182.724 li
22.3701 182.724 li
22.6201 182.724 li
22.8701 182.724 li
23.1201 182.724 li
23.3701 182.724 li
23.5703 182.724 li
23.8203 182.724 li
24.0703 182.724 li
24.3203 182.724 li
24.5205 182.724 li
24.7705 182.724 li
25.0205 182.724 li
25.2705 182.724 li
25.4702 182.724 li
25.7202 182.673 li
25.9702 182.673 li
26.2202 182.673 li
26.4702 182.625 li
26.6704 182.574 li
26.9204 182.523 li
27.1704 182.474 li
27.4204 182.423 li
27.6206 182.324 li
27.8706 182.224 li
28.1206 182.074 li
28.3706 181.923 li
28.5703 181.773 li
28.8203 181.574 li
29.0703 181.375 li
29.3203 181.125 li
29.5703 180.875 li
29.7705 180.574 li
30.0205 180.224 li
30.2705 179.923 li
30.5205 179.523 li
30.7202 179.125 li
30.9702 178.724 li
31.2202 178.224 li
31.4702 177.773 li
31.6704 177.273 li
31.9204 176.724 li
32.1704 176.173 li
32.4204 175.574 li
32.6704 174.974 li
32.8706 174.375 li
33.1206 173.724 li
33.3706 173.074 li
33.6206 172.375 li
33.8203 171.673 li
34.0703 170.974 li
34.3203 170.224 li
34.5703 169.474 li
34.7705 168.724 li
35.0205 167.923 li
35.2705 167.173 li
35.5205 166.375 li
35.7705 165.574 li
35.9707 164.724 li
36.2207 163.923 li
36.4707 163.074 li
36.7207 162.273 li
36.9204 161.423 li
37.1704 160.574 li
37.4204 159.724 li
37.6704 158.875 li
37.9204 158.023 li
38.1206 157.224 li
38.3706 156.375 li
38.6206 155.523 li
38.8706 154.673 li
39.0703 153.824 li
39.3203 152.974 li
39.5703 152.173 li
39.8203 151.324 li
40.0205 150.474 li
40.2705 149.673 li
40.5205 148.875 li
40.7705 148.023 li
41.0205 147.224 li
41.2207 146.423 li
41.4707 145.673 li
41.7207 144.875 li
41.9707 144.125 li
42.1704 143.324 li
42.4204 142.574 li
42.6704 141.824 li
42.9204 141.074 li
43.1206 140.324 li
43.3706 139.625 li
43.6206 138.923 li
43.8706 138.224 li
44.1206 137.523 li
44.3208 136.824 li
229.67 24.3237 mo
249.62 24.3237 li
@
0.5 lw
[] 0 dsh
19.7705 3.67383 mo
19.7705 182.724 li
258.021 182.724 li
258.021 3.67383 li
19.7705 3.67383 li
19.7705 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/NHWRNQ+Helvetica*1 uf/NHWRNQ+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (SamreshNarayan Singh) ()%%Title: (levy.eps)%%CreationDate: 10/5/10 8:22 AM%AI9_DataStream%Gb"-6kB\mDZRED'J9q:Nf]3NQCqsRkj.*GI[WtS&@D80&j';IY8KH<kS&WXXp0R2MK;#,B.&ffR<ITFCZ5iTCj,`cln!o_;-bXmc%lV5;rhF'9inbWh$(]CmNSQJ#!F/WP'QAoO?W&>a@B!Y)$8p/QfNr%eTfkf+(cf^S8E&*pG]]ES6qaD7O-fYAVI*`u7eR&`rD5uf?%3LpWbrLUGiWL8.9%u1&ZA2\0U]\+,0cT(p3]Gq?,-d,Ab5Ke<cC^M6(?ZFuToCb[=kJc?#j6!j5>k\#,BLMf*F+fG6:lp.Fh_4kb%"e%"-QpYA`*8_jc1I4fjrrS5trK"dB0l&EHPOW^U[!gIH9o&+)+2]SRVIE,84I_""q7BH:c%A8<K1>3%AeX$C3^Lo!)#!tJo`(-H%*k/b6nR=9R,]c!cF9sWnZc2%a^X2UN*:HU7H1LT:3UG(p`rgi5IZu.^*D_"[U$r?&>9C:^U+H;)P<M!)iMo'<kV(9eQjf<8a.,*+%ZD7bW]%-eX59j!V%Sir#n^Z\)NttGFSOfTiaWt&`3#hV_0qRLe?B0qVcm7$-'^dKnHI6US]lJ5@cknScp5qfpEJE',F>in2N-"1l%Z=&[FTI6pEReLF8#G+O=6iEVls!OR1'43<e@q#"C"'(BCG$$YGHq?B/qF#[Fg`@T:EI>cq9mJO.-tTdTj(`qg7XZW4/D?eIHcuF?%?lQB7?T\gjW>'_lZg_+sLem&Np`#8]Bflm%nMhu"fAUT;<[n9\;CVC+8jTRY$>QD8ot&df2@FZ5=f?sL0+2]2ZVW0AKj*sT5+u#R%!jsKmGdC;!P"GoCeE]q7YGY:fG.eCIof@ARN0oQjN/.$r9&WLL4H:fnHpTEP'7<+uR$0L.;?eq/:T+@OJkqcC#RU&SbR$Jl(X*.K%Td9afdPB#P5%3=;(S8L6TMGV`dQc65H,1lXWRp*s\3;Te!b2:#![[UeDj$NPd?Ci!Z'!mOjPh)7298"\"nR@BBSif5R5HE<.gCKs%(<fQZ@0.270$Fhii>9^uX?V)qOi%k-KN^&op`un2FpW^MkoY3cpAg.WgcseeOms$^6S/?u&M@VVAFqQr1+q!.Bj"[o;FC?eF^TCP%c@jlegLSm2']oXm:lF[YQlgkcGo&Z<%a<5Y(O*<D3s9T"#I:t\4Y6"9EOWd*a\F"+6,X.N9aTUskQo[0^BAF.EcFOd\WO-a/[9NJ%3dI?^PCI-(">e/;->Q@a6X$GKIq8T%fM:;npdK"a0h[1`]_BP9(AGMTs57a>%uHZ+YHeFFGo^9\+sc,a)&hL:`USiaP'4s:*67&g%n<Zs?:ADm$UdY2TrZr3<\,;TjoD"M@njNIMrh\*)\,;Tjb@J]_9LeA1,Q''W8;[82r%",UDtu'^kODWSjGEf$r2\AhDtu'^a%H@;%4bpFt:U7.a\+kmZ7J#OQPsgf58ln[H1K1KSdFV8Caeu343r)1YZKWk8YD,9h?]SRl7fI!4b2;@-n_:Ht'nK-OL38F>^?*+Q=sSMp%D^<^=X)*C3<Lc!q6a3Mis$t*crg'_OQ'21?h\=s#eHnX'r\n^4^MVU]PaJk;k$9ciS#ecg6$t$I#IZ,+)h3LTSFBVVSJ6N#a>i6Y%dK8-b=nl=,-D`j/n;$JBAmKYb9'X7%A=8A`<_Rs4$";q&11Ja&8a`X4pa0*Q@@X9k9L@9*?(>nt:WCAAMgqF=>X'Z'6^W]1.6L?h%S`F4<R=t(,cm.s?-&`CD&?/[Pn7e7!*f85[)KI]<;Q^1TR^`R=h?7N])&OZF.]jGW.iq\rHlkh<HH[#cOSX4BfBG.bB#V4#R+2#'%T"P80&O+`U7:&KpG@B?2HG/N$@'6^HH7c!KrDKa0JWEVP<E6/Sia(bPL5c%s^m]Qr[mTPb,S/Bj$!jMobS=Va1/?C4X[QFMahipl%(f3p5<0Z`A6>=LZ!0r`%PkR?5/O<WZVl\\(l%EXZMgYuFS@h/VeT?E28"q\;q$jW6UuuIBHZa>R14=hH,dp";K.t`bC:EaH23m?q%Q$.GD:h1G)iY^+6Eo(V5GdjK=^U-oc9I&r*YVf(?.:B<5L0-+(Bd9b6&K*nU"O*&&OE)E%>PO17^#oO0<g2DUH^!_BBfJE%"B,JM%0(pHJ8>=sDnSO.]8_=$hcu(:jZd@'*AXc;j,UAc#E"V&;[*,bt(6J_3f>(EL5tZeoUuFk=U+*BW2+X3>M4_o2CBG,6Dj3]%L>P9m%;ER[EaNc-ZKf,!l(7UHMRbSu8i4$WdLqS\YKCj=jRWhAmG=#UjC9NlPfUnC'@He2#cFTk\EuOH\L<?VqD+UY8\-C'D)YO6VjV>od%l;n/1.p<[5Jn.<iP%7Tf3H;*B`U'FL8kq"Mmpqla0P#)PkR2MW&fBVl83Ek#C][q)I&GOH/%o/\cEX/H3q?B4?!(!?/n53jc^Lq7%RJJQ'(7Gj]1oDD&EgiQ=Q:3>r-r(TsNthIY``oulC.*o[cME\]c76h29k4OR--VMNVg1j[n$'qMKG@-*Pp]-YNi6;i5pa^S).s93%nG#"=(lPaSJ9&O,agc_)b7m[P:JM#/M/fUZa*<m!7+A[ud!>F4=6t#321^'n]^W'*PCuk-*-mAn,>b/T6f(n:jI0AKfVuB)H:2a)%D5[8rp4g*6pg$Jn^hq$_YZk;?ROFND1Xk*"!i47jI<3n%kH!UbbBO?G6H4Q1ON1^nqrTBFq^%ABORj)cS8dZ.WXH2(X:`+)f2K;Z%'enQ7mN:sbFY#6oH#`u0[$q`\[4[J)P*8EUS4n?aIBLRRkW(/rSik%+q3@4KbYn@!I\NYI]M*/f4r/;g02Y/5s4irPV(sn82+89m%UP4pTZ)DgRmZi_q:=F8jgdV'=8fgWrm[I/KNRjH36p2TsMaS%Q)L7WPT-VrZ:#9_2V%M#\R50UDioN$A,E1(_db?dTD\;XM,0*4)%NE=QNWWF8q?%_l3Q6=X66Hq7lEf(0*._nHJ:!2,q=JC>)=@:@+j)6@apD#&p?&?\/N$PN+<kXq)99aA8e'_p9MODL"OO/qkr[q$'%3_e9?Rf,eG26r!N9VM:-7(P#A+js_$hkL+NX@]&!if58]3F/(1ebb.SdG,f04=+k+KthVb)j/`GQDe?J6(PPDlEB&c=c0<f*/X_<%5"##ok&s[<bo2^;`8?/i:8f?'GFQ0)ON4_Fg2.F]gee"URLl#E,fEiJod5(!RX;=2^T9.EHeYJmTl4*(m8a"JhA4F+!DD^0p.kOd%pJ!c$WFobf@/LftHPPe9X=1uLVrSe#0ql&..fP0p@7a.+5qGOhGtm]m(ccICSH;\2F\;D,I%P<6j-Nu67TLifit5@+=<RU*(X<qX%/)p@Vl9[q`9Oh1Or;PE[#I[h,XYLcF@=9b3ER/6\iT,WU8`+O0AUgtTH6,6>/G$QF/GetSpg_tNAlHpoXSl3Bm(lAp2sARaadag)%:bbo5p3VGNYg(\Oh;tBWS1Fl^?Cs4mX*L(Jl&@U#d`/CDmI"B5?&mcsrP+c/>_fuL`f52]`r#O*&(;o0p8M-jd]3Jur.*97:iut?%SM>$=_b<VW$)p"[l;".d'/GduWOa?TQZ?(:Z]sbKg)hF8):LqTm.Zo#Ji>JmoOgOY`Ot(3?NR+2*"MiRB%igW"K%e"H=PGGpGtYE%V&B!.5cs^HmUZ1?D"-u*?l$(lY<QdJ^)/U0WOpf-ZKUu=R8T#)SIaKH:QP-]3aBs#KCMjB,l[b?5A!AXoja&[T(mLblb3$i;hK'3%^5q">mW&Rt`!UAR>j2-5fq6/-H^"JgRJu+"@=*[BU>7]j[YO&Ml)j^=">-d"(`uDXeG[d*1$lY.jBi$&rS_]LKpg8bm;AOFOi8^T%Rn`ZV@j\EM`]Z.(VE_qIn4#ki`f5j?8=TC@r1#n9%K79]#*FE__>IX9p-*8U's0'#'0K0O.FP`r0AN(QGor[c$ekdVbY1kuP9+NO%][ej0FkZH$1dLs@<F'uIQ?0E%4A:UcU,D4_M<p1i1q4G)9p7\XdbD/Y<GI[hVkh`ieXebh;c;YEe@;BF\L'a.=K2+D^ees5Kc%50%1YD0&5,m-$@Y>jP9eb;=HnNG]mFcM:CbHS1%k$E:(Xm5rpH2M7lk5LEI(bt%8,\tP";MP&+\\bJj6d&?ZZ=o(a\dq9R<iE)a,F8S%ptT+;OG4>6':\NXHBV,(lCVeJo>maf!Je?n3mJjMoY6a[+o7=1#30o\$]BK_%"nB9$A^t@gT[FA_o$%F5W"/XMa;^B)n`pABHe\f%28r7%PMWU'aM7e`\,_,8Ra5N4do$.?mIbGO,_N<BON,ITdnG+G?MI_A75i%_qnkkWbB!tuV]lQHYQ"<ln)Y36<$%dIqg/(aW&#=*%1?>XslpR_B,VXU70Khc2!rbEUP:;`,?I+@!<7I:0QIG!kIGtQ@aEZ%bMbe8:M"#.#oErpc:G6tq4`(Z-lB>kcp0\dqD=;3DY$E.+%e'9%'):?XE"8U^5Ej4b32g!^VQ_p1[4Bp)q]iUE>:`>t38/eAp(dE`Ns,K:gn-e:*0nH^?-_Z.'Vp]DOYNlAB2XUS\rgR,q[*^=T%O6/`0Y61>9W@(U+TX4L!4mU;[j.G=<)qu!8p0^(IG9ceA$n+nqfY@=hYnSGKeuJ]Ca_X@r%6ptSs6:+B;ehEB'6GLFDqhUt=jsTK%Lgp&hL1#Cp_)N<,_8"QJq:VA5nSf;:F^4Od`\nmHa6f925F7fAnq6WhU1[)]7%Qu0-@tU6Ub<WDVhpF@aH@0T;I03QNX$)91e)j(%ro)+q3K,>!Cs5IteFuEpbiN5c.(37#H;Drg+!/faQ1a#4K74f707V?Ds*,46A+/G6lg:CDG8IdG*T@OL`-4@NF?7(0^H-dhPPjlk%)ulIH'>N"5noqZ>rD'iT?g0KA4):>^S[D2jcJ#/D^XI&^GImaDSXa;AVd&S5])A05./c4T;#5C7<;Lg;<;Lg;<;Lg;<;Lg;<;Lg;%<9AD'<9AD'<9AD'<9AD'<9AD'<9AD'<9AD'<9Crd8j/oHmH&<WCsb!5mgFP29uk\=/B`Cn==Tk5`&[aL9kJ>m+j4FqSG1+u3&uV2%@L3p/e?XI<.:f'YL],2dO%4QJnJK6>_N<n$9n_e7f5juY3YC+e,/UfcF#69BF2/Mkd1pUO.3b3"B]f=#O&89ELB`_G@hjW/M:(dW%&V$R0L0k%!X_?&[+i!K+>:5V@?ak"+)u+b:*2DM,Ha/qI3m0sA*^ol1<@uI-mJib)f$HT\X8=mop1F7XWPa(N-A%1U$6P1U5S"$p%JaN"*orn(*^5GhNEWIKpA_"QL_kgHOT$Il2N=jm,C;NO(MI6BNTnCEhhZdJCPO;MeB*U2$c,fA!X#%QMrg\tYU!7T1?_$%G=O3&2%]r'n8#mnlk'"6peBQo2Z3ud't<W=EiHL<H@W")gWGt5dE]$'nY1AY9Kp2g*b2fAdg"(rZA0tZ31a704jj^0j/ru81arr/O>nS.pE%BJ:M<])U5n0pdm?;LCOaAM3iHU%)APqqtC_B8OTr^Is7U'MIj$ZC'6n#//!RSS8BFIsG)S<Cdn3qT$m?rqYs7^u\<,'D^Au;>KmA%Ga\,5@PWqgA:_7A<r[S6mM)r_/+#FuJs.:?]Z\E;f'VLE\pjVA7gIO^%q3sp[!RTBE]];_bAh@l"P&-qh*k=u-`jh1921H<MIkY\%HihoXGrsqjL>Bd%^lkdT\#!]fHeb6CH8""15s+ipXShV2[s4<!s#!7ik[_6nILqPQW#B:`NLqg>;cLTGGnE-sKuL,VSkn)HWni/$%]7Z]!556d>hPk$@SttY[B8b'24mRC*E*o$"6h=R:XU:)G6MF&8_.S_mnl2r]<Lks.';]or_+HRF`Bp*>qXa^QYJ0b2s7aB7lO=Ws%c<rV6r$/>4cm5VAl*[an]!p32Ik9=rIIGj".P>#bn[RHq/4\4dJ/7d'4QrO,-Z2Mheq=FZqD0n&KiaSoeV%1t-^rbJe4>M@hjY*b%Wr:Ki%d'dZc_hHLVB<5/?c)5(M48G;me%iA.5ef8j^KEN_nK_eB>)df'TIT+(bLM[H#%GTbG&8Rf)%)9@4EnSjKJQ!$Aq@H4B*tU%LP%$j(rW_p^#7:%&K,H:i!k?ai)9!604pEO^<Oe.Zr;X/YgiZFX3ND\U4;jJ$af^jm9t@sPm@nPDKdl%om>E3oeInYKqas0iB*XP%Yj`.BGcm5jG&B+hI+5=Z]kA9XFrCfm>djbWXU$&_TL#$4Z&M^/)hY[EF"Yp_<_uFe])c6XYku8'O-!-P78m#Knkok2%t9i6&k6!r%9@b6D]X>(=].b@mNIdb)HR`ip96s+UYThV6",g-&$8(h727P1qT>HbdU1'#)HSGeoLEt#1!Cf1_]&%fhN:f`"GRsNP$4nn0*aTNF%b6PPJGG`%c.NXUe%r0h)h)Nf"8T/Pc&c?ail#[[[^`B=-LsE5+F"n9P'"FUa[,t&J1=JhO]ImWh,m(!Hg4d-<RCp;\q[9H>T;lWE%R/WLq&5;8>O)\C?!U3Y'9A:%\C!2BtpVF(PUL&<()(\8EWHhKAB;Xe@1pss5=fa\&,P&Hsj3qP;:fARe*OpgTV!b<#S'1l?/H>qh%h[pn*SBUt*fH(7)n;0E>V6c!).iRBN4cOmDXS8(OfVTacY8H9$&W:H9J+*gKJ`P@go+"s0`F'jkIuI1gmWtgh:`9ToV6_iqq@k*o%@/N3nW&CDe],"C$GLL9PjsIm_'bSO`4bQNDIBZRO+qZ`u;FJAkD44.o%')`hi*89W)jR6sgSdc)g.#ooERV#2qfi_=%B$Q,ak.#A%Vt1aE<&4e11L9!c$rK7Ip;X$\FoH,jr]Q7ceAMN_ms6iUm#WAi:S:#g)erQ;n@$=gc?ch-&plW%LuW4oLHD+IpY6e.7*`J-qT"Qg%aV?1]:QZI?"ZSPa#e;YW(?u1G\?Km2_]t9f$L+X#/R"&O5`?8K-9Z;1+)c9[p^9Q,9!-J;1>?5Xi$ug3d;doBi33uY:^IO.[O<Sp%H]#)mSm]>o=WIsX&*r6XebP,dQLnt;]Bs$6Cs0,Ua\bGU9o%PS9K"<%diHcZ5`4hX#"(u>@n>kIi.GN:#?+^)'4W@e8%g&Z!iB'4%h)b.=8"<RaT5Y8:J+\SoUocEQEPSs(\Gq+T_8"4V%AX[mCLcrs6OjB>>9'sJ_?7@ID"f&qfRuF_$$DDF;d,5J6=`q:N>n!T`+bXf%i5r?A_CjaRF-ET`$GE8LSWW2[Es*i.H9(EI+pb]%HTW(/6F+8*WF\MP&P\U9C#D$q)=u_Y4%OU60+dZ$$=)GZSim7jJ+49U,od@.%VpF[Q"X;njeDK[d)ElH-Pf/Gc&95+8*Mp,lV)_31.ON:cXH_(spfX@qE_dIV\,IRZnHQ8!LtI3ECgj8#ru+RnoJ&6aJY<uMaj9*t%kh+r!L707H[hjHUBHKu1&0si`RXucP^C#q3g)8*5R7`6$k_D,9!q=,`%g1/B-NM-6AYn)(,cc@G=jUonOF0]VM`2Z2A\uK]E:Iu]%LMqQLmlVDQ$I5Jd\6q7%]NUQ#n(G_4_<+2#?%$AS$W8Dqc<mA2I=]GcQ7m9+GOP)!_VNk40>c<k^@;,nO(InV!Sg]'<sbHGk5>,o%%A`ic.%\-fioNirPBocZ*ql=Hoh#!<cM$<sp>E>cREZ*+EFX7bVc/%+4ti0FA+&%1h^rk-RHeC&=fYR5St<Jh.6SG-Li9CNK:V8W%[kI=Jk5`NjpI/D8O(^.Z)OJ1R_)qc0mUPcfee]t"Vgb<U1onJM\2QiD4rakrDI8W^Df:D"4I6m@:O]'WQW$Tn1d@%NSuIdSpd"P%%MsYA&GT*LNaC\6>Nst;6ZO@Wg^24a<W7aihI_35fNd`m@khZ-93:YRI2VXcebas%):0Ao`)*k55UQrG[mrD3\]?aMG\'sN$npt5I%.K0k<e*GNDLMf2[(FFNf]@D"L;@[SN:PUO8:?S*"WNoC!#DMdAp]bs-nS@9U#i:8Z];N]\SSlqa&r)s_p%$ME?Dei/l8H&\24b!C%q>a:G^TdD*P=tjL)ns"&mdTmA\'r=tIt]rfXOI<=IjeR8iD.e?maRK%H96IW(0](!:qNTUqtT35$_gB0'=h&k$X)!q.g#K^B1LKd%1-'ZO)Kkm;Hi>!l)0EII:8R8\**sGm>LMb/na42ldt=cI@/!7-dllU[I.O[oU$<?b6Fo=`":O*kUR#5aiS@qF@*iV&F7XbSOOikW%EW=,2O7pjq07%]qW/n7``(BW,Y>_kn)&sQ<\p\t[Dl>^N?A*4nCu]p75p*li\#fUf\[b,!VPe1)fkJ+=Khh*3!EH&>n#snB9_hPp%[AU4>@]g4F[aiUAU!o*8V?^JcksW(Ld-Hp5NSaQ4:2qpR\!c:19?4![(\VrqHE#fddE]X,$jfP;SR*AXdg.I`k1XPqNY2Pe4snp_%k%2o4e)fSpeTad2SU135[l<Y_@+a^Ds+L2)lEn[i]^-@)4)JPQ4T:h#n"cmDfA#N6[UH)CV82Mr;5XNi+d.>;4%44a\ijd$s7j1!%J8V:2SW.-s:;:heSO8$)T8I;0^V#dDqK"e/DbNM(-ZqM!Mr+[H45IDr#r-IuE/N$G_Ddt7cb?($YQef:q>KePB!7+Rc$cX,dZPR,%#b?EU6`NmErpSJ2BSO.\G7&m'j[jM/c:o'3kVT$Qe18Og3]Oi=SaOhS1Td3A=eX;50oX[P8IGF_egj$)rcsVf<)TQ6[T:#C6`2Y=%VmGKShm_&FV!h0YoqeZeT_qLUQ?6?lNhWOK2m*Xo/o[`YicV:jGKMSY5/+>d6DpnsVDn%C5BkYk&F/o7kOGSR4Iam<ii.5^;O.+R%D"HJm1u<(=oh'p:$o).RU#Fa^oPVt`9A/$*0-Z]gC6%E,rkY?t@2_'C!oLT!H8R/=]lf<-O+"nV\PrYcp,K;l1Of4Cq=Ve<o^W2K%!O\a*`7W8Z>1r]<X,G*!@HhS?iPe0dENd48S*T^U%'_0;U9QX!Q)/KbmFKsV8SRH=+I?gdG'i^]21GEGq%u"BIJsSDlBR5<HO1tc%N8K*[Gj-05U>rp`0J6)T7,'%"j79JLCZEi`2N][G4Xn;s-4o34^N7#ADs+R,P?5Y"hfcMm'MDeG)Mn3tNXK3'Gt1U+HotUR)4$$O%pf>q@FSDL^6]@7*Bot.__+`jB,kc(*7'kpYWG$I:^T)a&PqmE*lg\%8qhLNg@efLD'D62qdC7-K5-rn@eF0!o4`hTY<:PmFM9R%]%Oa3-.j?#Z7"ZC,Z1alZYkiQ]6hoVKZ"c1D^DskrM\J@*`4'7Rii_HZIGV9_Gju>0R6*g.=&dpc,)"2ftSYFRUa/R@4Tj*(<AOFKB%SK_JiI1^ibkk+jGY>^LSb]T[ENU+hh&9g#SXpmJKBm*r-@],2/h<CLaLc^mIrP[e5%H+Q<:NbCGhVOJYSaWA`j_Yo;FIN+9#)\I/%<N!Wl$NPXQkGmljUY_"KG)Bi9K2,@7+?@*VkItu>M>LA<:)dCdj%_m\:j%Z+EFC?u8('<\oYS,ebfS7lEMpU5-n#MhFplG;d^Q0j%Ck_G=Xa9LEX&fhoU8Z2JKlSIY/Rh1DVA>h^8ru!=Lq=m&8VQNIefVR%$e`O*L#4>b9`RjlXX#DbC(]a+&e.hd;.%[:Tk>/s2Be_?%&\`qAPPGM&"o;7'n\9g*<fn`YrUh')\IJ,t1*h$.(hf2'lQ!F+WEA8&?]`6;ZH""5rI4R;0FdZW"FaQSABC+a5ki#b'nm\<&%Ki2%p8`Z;5^]j?SWKFt&'a%;b-e^%%O;&&O=q;_Ic2Ml4>@fgaSTLEoss=[2S$md(P.W;>$iM5l]_Hr0i0r0JR!^B%<VNq^8oC3\_d8D%>J!BWX80R:/.U6m(p;fBL:i+mlNd3198d64q-fiBfuV/?g/pSJs/1@A[m*$),@Hos2ZL@2[+Pb>dG+(&Y4atr\Ck$E^=nQlr9Jnr%ArR5XmdWAkr-Ka`kaXDQr49hEp/D;H8P`&THDK6K+?d"U%e.2nbS1&AL9)X`rNk-7@EPs]X+;PQ</jA(Q*8@O7,*bI''s`-$E3Mg%NIP9#O7^Q&!EKhMSp$mb7lT4!XdD17(=!^0:qm1C0b,'0,VkW=b]m/*pQ)b:e^rLB[ARchon79;pJZC995(8s0\c):@CT"t41B3J%#SrKY/mumul#K&A2#1WNS2a@Ol0m[^?[g';Y1T*[le3;;0ZH.NUPQY9h;B;:RL[)3Xe`o,MegEC2KKK.+](I@CXC`Mm>]^,lfH&,%P!5;4Yr0.gY+^GhA,C(lEQr1:eVOM?cMdIV0lOR1REnGaYN<VpQA"aa&g8Ou=Mp"(ZV>al%5(WZ;cau4=O1oHB;F,Q/$gooQ;g\F%Ce<@R7>$(mY(_4;5VG`%XT_a]5'W'BeDDqu&u,<PGjGi2O/3MFFF#+hXEsgjmR"11<\0g/oug7rMld^N"4g2rHo$!e2&:8?ZfJ!J%G%@:$B#Vc3RUXkT0lENnj4=UB\/U51a0Mqs+p-k-#d,6SCi?4WF3P`sjguR&2[CE[(+&VC?r?RLB!72uo&Du\`ikDfMrL&Q*n(D;%fUAiKSV>s+bjsD:cF+t]keRJJV;Ha8[OEck159HpY82BLYqm(A,+e3f4FS-)"mXeZLl/Z@%Rf;.X^GUhWG9PZ]s27l#8G/M*FRF*%':Cta;K5W*?859I+U!:rd$taK4TAMCl+fihnY`?6>"^u:*r.KVOQZGKi>Jg\,_9.a%;JT?!-&?p>OoKK!q<i.CcdjTNI`-(hHV)U%VqC!j[-,X(r6k_2e[sC_PAao_TZC?Kh,Nb<cM*kiAah)O*s7oNmJ_f,[A%./BIO7<Puo!0BEYe*.lG+?Tf@6UQVe``-GGb9/lcp,%7:D_MogX^/'K=C#LmeI-?Z5\Z[rR$O;k_UA:iV<eG8hG5)_0OgTosn,:X,Z+SAE\f!B99QX;r<%WfL`SH69L)Q:d:&RZPRn[p&VA%b'qA?`Fs>+&%0FfZ"_jeh?SVn4Vr>seb,na+:<s3#os\-NKt8D0+)!;P*oph2PB;sP*NK>!41)Xpena7Dn:VXoLM.Magu0+A+q+i%SaY4`&KX"=+duT[4haUNP\6Wm<AGDIT/3"&a)A]@V'-r&-_Ku:aZCC-*S$jm!WgB5qin!agk[&Y!_gbVEiXFfMB>b`8'/s>6cTrq%$`5E5D0nQ%2gXa/n+7q:,WMlgpf>ae=3r]KbUFVom>0oIr4I[%E]*ngoW<FU#=XiMZ2DHb?+ISc7LEq"Cp&\O<HEQK8^pYgN`(sD%_.3VL8GFQQIB0edAuUkrnbB6?d@Pa2cTT+]X0rR#C.tTB#;^9``G^?/iD2[M:,M=;d%DggY:2b`FX2/s@j)M\O+E;:J;F8%:g9Tg%fhYn2-=S8@*a4GUSum^@_7Ik*>[-_J)OCd7h%2DE2E?"qXJH\-CeutEo*$$oo=:]2f.od9KDT?4Cf3*2gkU(.;`*t`G0a+FdB(7Z%MVD!+1kk2U>diYUnH-'.4BXEq-(2VlW3:31d\u^P%.!/tmr$]fJ8O(;AMMnp)n4nP?o`?YUE5QjpasQ<C<Y=8C7!#!1`80ZWmF9[%F7&3`=6q*==1d[DUN(%S7hjI"m)BKMY@rW5J05iuC@0XiW"$/0\/c77,:f'bd1k^qeu#L&q.\/An4m=(Iuie1j'L`G+@:*]IXi<.%KaL%HTeZHD'W,V6BWAD<eA8;nd;JXPHfq:D>"dHs/Re>(E#PIuR%B"T:GHP'*e1BFMBn&=G#gg:eI,ul:Nh1*7^^C@]0"PG86\NR%SqaF)';[JO3Ye>NLCNEr#E$(pK-d3W.3kXnorWhWm?hsZ[Q.XCeE<\Lb&7Ns;.Etq3cp@b[0ae<TX^D/.IZ?LR4UN[Z^q4J`:R$\%Z8\#E4.UD=R3AO6\]D@L*_`-8p0d10*?@dl<Z3#QQ'eg+dZ3LZ;Vpldp!eM<k[hG-mapZ>M],N>?^V8IFC`(6A)'ps4W9L/gm1-,%AhgZ!LsemNHHruh2K8g7"8iIa3ISl,TSK=]9u)Ce\Kf=G<<]0@Hu^a>03K^_jjNUYn*0+)rT8-m=d3-ufh;<ENhJ7iTE@6`NYjhK%#Wd?W`u8FNoK&6^kTk#+b8<;3#Wa[aeSP_cFM?s.d)d1=G;44%&Ti'#TXu%%o*@C0BL0ZnFCEW(3]UBj>n!9E:"=6"ils&mA*D,]%kbnbK=#"eX$tdK.?F`rBSTt>Yk4q^lP)U];nl'=t=6Tg**!p^/D&C=pp4n=kV.)(.D^l%*EHpEsd*"lKla%HZT[rb(_9#$m>?.<h%.kf`?L4u7_>rYQC#JH.ig%!!j1DoJ!ljQY3VC;8:W_ls%5!P<RT/-C7S>!Xl4dh(^;F<4#I,(;q3qq;GOr_f4$(PgdbaJ;Vg"`g>%Vl!mY%.-&k&O9o="1*(QOZ;"jW6_m*=Ie*Y>4n`XV.MG>kH5pG:Ikb7$a1^-;1X$DC3h&Uc%4Qf..6al1,\%dm26lD/F#2&>CqZ.%@hqtFa)Bh%dKM.sAKoiN/",0>9s3f=]oIbP=[m;\*<hk"KU?rXD\X<DBsKPJ*WaI&Q;+DOBMT@!`F2*6^]2I#%+trB(+V5B4(FJH%h'as+NmEUMZ6.,bj'f$Rp[-"P=iA(j`XU!V1:6WE)G4@,`A-U.ZnT++iWCheT"Wc)V$9l=#MsWCTj!(_F8bakpoIq6*,Gh,$\IBn%GL`'`L^`g)\)3R,=1pDGRE!H1**4c^YVq<*?A2br0pUaB;>=2&3q;=D(CRY`1flRPlpY>s(YOf?QBq&]k"S)C(,q)c=a>22i=?=_%0&M'rA%0"J6Z!Q$YV5A-ZXO/cj?]oU[VE\MC(sf9TXZ@<b_UD?SE1(mk,*.X8sr0k/Ki!V$MS[oTo)IK/]9Z-Oe_mOPR!]jk5l;P%^[ac=>cDi*8j6.ngA.X\'c!b`1C\PKe"M*.??huX`/ml%22m?kD6Aj?HX?J!Jm*".2[M_"FK"%N%^QQ3kREC>+L2<OlGA:%8$rMB%2-3MM)B#kh2UKMnj@Yp=;EH-SA6,71-A-?9OYQK'=,4aTK9K1X'Apr]1$ZA4%^!D>ltL"i>Ib2KNu^_sC88Z]2)8>WG_A*3ld<eH%WGt#&4buR_Fu;$CZ7l\SZg`+Ef#Sg<I^!Sn6aP:`G\k@^\^ecGquE+[oC*_%ki`97W->P\;"NJq661hb]_3<AdRZ;<=>S-VS(h1f%1JeeJaL+o9X?8XDWH<6(j#3/`BPIR[;hLWW'S^5KC!SnhN:OT"'3Ahe("d":=6KG:Yiubp^p!10-NhAY=A.&LQ:au(:3o@q-+p(s%<A1"T8\K4ecm`i:P9T#;*=o(!o@ru<Etf-tEW=[[io'n3h'/J64If[f<HmtPZ<n[o&a*n03r$0^[%QH(3$ZVfHK3sTm$g$[DVai%%.NRlu*1hF<SFVsGlKh\i4If;bX`h*W/KRZ&oeh[EgNRup!<aL$I"YA0R!kUJCE#I"*YeqiI3Pk3q*\EGrlrB(GWcV3YY@nabB=;t%[BOT.-1*\&b/AN]&ei$+,T!gt+u_#W1-O3%#f1Z'$8Ljc!ec6L)qknmV+!cDbV:%$C3qEg]GbTT6lE6#dZ)`LdI>/<CGJ@GZPY2/%BIH4e,G@2:*7"&0*ZD%^Z+:A]\)SG;2:=!ha#+dp<fCR'qfglSG&0U&CDhINKu&`dRp@W%aH]rn*IK0;3XYojH*o1UQ`t%LC-6pJ%,pJW/0_XaM*0JB\fErh1(QljW,[?6[#hj^_TGqMUWOHZ#8A/;%7-a0.,#W@2'Tm]Wru,Q$Publaf3SQ]E*0@<=Akidl5F?0(\I@R%quF'[L*iU5fGht9[*B#PE#<'\^g(@t*/<+DNB=7IKu2Nm>Ik5s1R'EA)@C,!m]SP`NkR[2?B"S-Tl;'bI^p3D28U]95^O`gcA>e_%\[rG[3Ct](E)ePpW\IGE5Qq[.i=uXGCShmc3oOKsYuT><g6I&Fft'o$b]NsG%o&'HC.EO8%a*pocp&L<%D7Y7O>TdW3t#hS'4fBQ%I*qK[X"SMb;Y*=MnJ>R)0O+,l!N#qUmNJ4t'n#@8;Xm,q-XOKb^]u.Gb\fu[\ucmVn4aL=2Oede)3(t[#c5HDT?GY(Weq@lNGZ"0%[oemO08`NBHi1pp?Dg,5Ce1W*BGBh,?l&,&a"5*qrT$jbj\^b_6!EZY;5ZR`=KM'>eYs7@-0=1am)qdo*<HGEVPT]\KAGr)4%8)P%Rmku7odkH!ctR69lXIfI(^7NS7+f`tH?0gQh'-brL7LX`fh\AF_O,%j?+mXUf]d4$?18_TlJ$fK?7FI4T,%"rpq+0M_9,,`UoLCu%mq"Kt>Lp^FIU?i6Vj93(T>J;UN_Tj@H7Gm2;,Kt"(o`NoQqMjAS0c:3bH6q[eZfZK<n2DoX;XS2&m3sTm6o\[CaK%cb0soU,dkru%<QtZM*%G!u\u"([-946VP%Pf'jD8SiWn'A`2W;"^dM'-LrVBPc,%m^*$Q7*Pek+rhcS'$U&%q<*=lpX,5:G9XV5b]<ZjPC[j6R;5%dKSlJQIL&$[2D\OU$5i]1n>(=bSm5?oO@'L54IloVUM$'a1q%U3pf24@=.]?-dd#d7m=LBA)j%_ef%8\#8W]MHDB`+D?sB@1nC0N%fmP]J4="'I2Uu!7'MYL'B-D`.l\q^iMl"nom;Wq:VoKW(@M@<*9rAe#VgGV!X(XOWdOJ1_F[adD%1/X[CQ52IiKVn19rH%%@Qhq=%UZqF%cT8t.dqCeUVOUk8XeP(PRPK`'>VV\m!+K`(VHY"X//^frLohnj:="lnEt>q,BKEh/3h77i/u.\'@d3ORluEb6Vo3Eb94niD%\O&-D?3A4Haf@n[.3S3(W:\3tMPej4Baf!2j_-[Y0Ef:mSQfc.br@'Q6g'1kQdKpOhAn;Kj9fS!'EIslGpfI'!1U7o-t25;JTPCo%NG[maFP@>U/<QLc/p+K]QmT!o?_*H'Aj,tToO>'6XJ0B)40IO1+u4_OYXukd[_Sf#I'5F5AXaBILSW3JB,dDDL8<`-XD^*TJWjq]%2SZ:+#1Z=.3@:.dGppGSB)dFT.P(ND4.8/jc/$P!:l`uZ#s6gr,sQM>O(_'mX:j@":3/qeYI"Y4F)`S;kW*IJkg"=>4"[kIMD/9]%c(.J%W1W9K!uRqMmS%i1/b^VSC$o$8([ag7)o'NY=,8Z?:c6rAW8kk_oT#JE;&`4'OgtRu]iZ=4[@eHj.^AOaXlt,1$D]Hd.[&jb%RgJ@\oDPN38r01I'*2kd?`7s*[)eAE`'?]\4pUUGg'gnPrYK8/N[C?rrG&ST<!Su!^ZD::]JGM?>,+"jC2A=T:hQO<:HN^[UP33a%]u\6e3k/7d<Nt.OaO+\nURtYYl"D*DMV.LdZ>R]XDDGFf?-ns-^n%Ifg/R;EpD+0P:VOHA2;S[r)I!T)-]C\abj8o00Ebs*RlAWV%A!HH41mC:Q))F\?jiktrC.[4-L\bWB3hh:<RB`-erJ8_oQS.f1/VE$[b>t2e$f%(e5'@N!E%NjZY&XqVgC7[I[oVO4>i-05LU@KW%ZW6&5(oPs=LHXcBPQC\2=@;n2"UjdZNb8M`i`42'BNG;>aDpAeY`"sV^.3in1pi\0c;re:f,=#;a@H1KG7Gi>%=!3^RIXC8-dp2&%k8k)_)=H9jb-R`!c<N;g)d>[a4#u3!IZ?MAJ[KOjdtNeI0e<F=bh*n*pPqR$\Wtee]mE8C1&$7,:Z&I=PH2dFW/\SrX*_!g40Gto%\.uCImccB``miDXA%Nbnna1WP/Yu2KVos-!hbG,b+Y3t^:t5r"\e[+jZ[,jndkQb7-4MAE!BZ<Jin`kM&RfRI(Gub.f@B#^.9UIo%7;o/Y=DD,^-!JJ24$orU&/3WUiTuE0_O,-L8\H?^XhkE"Y3!:mW/<=Z\7Xs\g12kV[55:]ma9=:I.',P,L):CBmuJ.7J>1nWdQda%1lA_N>g%=!)nK]e4NtM)FH;S,/;/>\O)]l$F@Jcl3pPBZ`YAs)8\.D#.U>7bR:QWtg=BN,5CrK[0I:)iBU?U[H4\YOl&34JY'cqD%;@:./iRg>Th\SG%9sW"!='@S0nrk_QGbT@Q)*8QeNebfJ0e<d[f@^B%:mLUUD,$o";5_LQ(?fR?Hl8ck1X.oR&ln5;<+1%5e>Ya3%WQhPbI.u/>#k(44.A=j]*]@BR\C3oWFt\!<%`6uu:+`)s6IVMhIZrF!o6iZ\TJA>U]K<ba$GoGbLA#OQ;n5g`(WBX=A,d*j5?Pfu%g%t;k;7Ic;V>7lnRuUA4?e_C*#+IF8F>j.YglslHH/Ig>]Vj$([1Rp6Ai":AX4@t]1Q&dldHFF^#]nZTX@_#*h<`mq[rIl2.J<TC%2.t+a00aSQ_ONJWVhhkHh+0eRFCOd^0_a&\L!GYfAk<9R[RVf_OK:NdT>bV]mc'q8+Yf#WfsdO695dALc!Y2=Q<s"QU94&5OOZ+m%S8DK?Q`AQGYkgh?3haui*>^QUV;'[*>?%&ja0r=Q['1c7a\?JjEhUJsCRUmVV.J,&ct%S[)ag??E17<Z3!$[o+UQ^&F$6cq3,-(5%A;f"&[=4tZ'tLo:N7I"3>/tG8B?GY@3&''p%^rgSBV^u`T(o@-_k@M?pcc:JBPP+ZT%Y*#U:lU]A\H[;qD!e%ZQhD5ghU2"LLqE5%!0Me>RZ5]9?u3lA=\:9mQm/KMfd/kG7T#&3L"kUOHq<(9^&sM7Zo@C]0BI1!,M2UQ_0WQkgTYuk^n%aVS44)5h?@bh<N-pDL2U.)%-XijUN+&gj6*F^Bl[g^;"Qo9?1!\861m%'DTuW5@3E,:"!a8mCi#p%^;.:-$+YAS,L4816gphAq$@8lc"S=\3.)3&l.u&(Z3$gEV%Z$@N7#OA:mn%3>Y,-UM`FoRhO@oc`S%%C/8,<%HWMQ9<Pa7;3'beeDb$t<95F<!TJY=g0`_hF)\6U_EVE5&Cj"_]h!;#_RLK-jXE%W$cS5.n'KmN<*9aTBn,(Sh=qq3ss>P%%p$)1Q*YH].9Zr.r%-Qd,6%n_uQ5qfiU]E>&Sb?>Kn0W!SWM6Zmd4==Pq>4!/8fkIXN"^%r^h^[RZd4ZARo"`;Eh]r3-Rsi4FTBISD0ieMMu@9QB]_NP.7ZjI/&^`_[LeU9$4(*]D.eiI!XJOet81&-\%tNUjT0cWGZTNEmJ8Y%(88RE]RF;melqKr1<f(I0Tp3GG=*gcqRO3W9$Zbc`nT'n?9co;4.EcsXRl;!^)P3q?9cWFU"5CYcTJ8#LK\CNH2Yrm(+##'Q[/PR%)0U]=Oc-l$;Lc8\rRABL=3^&Dma$RH?e1=jcTJ8#9>.0df?\hF<Z+0hk4LO&&FO*=H2YsnqUpn4[)hQGmW#+a8T]#n[W,>4.UpJ!%?9^KF7%;_F`MbUf?9`N0K(0:LcLUh"nkg.7qJ41<B5U@^P)mq;be)WBIT.gY8)A"VpmgKse;G2I-*Nr_OH9``9eGbooeXqZB+k#R%5>(9<h]ftCa$GrW=^F>aXF>K]Z:\Ff1P]be_Q8`D==(/C*lcC+-Z5^-lktO,qnB,DIccA;MXnC%lR,&(O+1L_+.qB!#8>A4ML#/B%>?O<7X1fd]T6Vr!d2[Q>H2VQ(gTD^'T)oHZ=oAJPCe\SVFM"j=W3hif1NXjr<ljT>4>+lQHE3^4OOqf!2f:RXT4QOD>4VNXBD$>5%O)IHi>/A$ioD1I?`M[TGFeauo]RK,o>\-r#h8mVOo(oI`a.25`1M:dMmAB=CqFT_qc0FKYegBFiIa6qZ=3^&DT%2.]5!Jk<[<Xr"%pVH>EX.RGZ(?$h,aZQVrXh3&!jRk=TlDLP2?R;nJGud/c;f%0#Icaf3/FL'S+7j$3eW79Xc;e18RsI_oH2S.Q;LA#r$8G=c?GEmm%%pJ,g1M7,INiaP0T/gCPg%\h6p!\FhOk!6;)-J\tT=Mp1'j\Fl?9`L\?r_=9b'Er-+I4p:fSXtQbYN;@ECao^8R=XQ+j!TOmdg4R%%gV22`*tCGo++3ri]]Y5X%Q-=XOaZ8mL^smN?a2%*Uf8%Mfk:WX$Z-VhY]`@Sp+Sr,TgJ^Qj"T8.DQX\B+l/S.S1=`h[VD=htF@!%>JBd(B9uOW`i<C6c167mE;b/+nG1,hKPr6YepX76jggGu>oncFLUhH8OItoqYE(kkf\4G(cIT>0ICB.QI)%Wab6tbD/jHYDa+l9o%*1Fq#bMA^7HhghJhX^M=VoRZ\N'H!b(AH)19FnVbgL@)'5+d9EZ-S?\*W+QLNnLngKqEeJHO7u0-deL<]_%__bpV8jfeU$]S8V0G%n$.*fZP4TF5:1#se;j"m]'SV/*e0irdm)U"H+5>?NFtq5Rnp\gm(?Wd1)j;Mh.ZS`I^W07hs72W;CLJK63!o"9t.S2THsor+m^fG%Rgkr,s68J:!jhd8RU/%h1cQ=aIGnVo>`f(#njt0[pYig!BMK@G(`6qtg[*[7i*8-<O'acrn8:19hI_ZL[XN@'B,d>(Ze7H^gV]/L%;K1i"36t!40$4V9P?=ma@:o,/aY#^1eD+k6YXIWV$Mc-i3tld(d'pHhZqX$3-^*#)XtLqWjrI$c)*,FEo*(lU%?DT_C_,K7(QrO)%q4c+,$\5>Zff#HFQ"Ced-WAP9_Th]hq\d%IV9u(r0-/m*^4`O!s0<\*BJu"N3I7^?"s8m;7c,R"&$lER"ps('Ro(AW(6VI7prNe0%3-h_QI1&:E^EMfm+K<XPLd_39o/Zq;,Jqc!/-\=KP.[DL@)B=@])rnr;nR?2/QW-nL1?W<+s7?eRI(.Z3O'\COpeeR95[NVfT4)W%k]gkXDuo=169RdQ4YL19`HPLe>X3Mja9?"L6+Z7!ITV=Fh/f>4p%[VmbYb.5/V]c(9]M@kgYfs=XmB_PIU;WmFpQK\794*]X:g7;%&bM2,US#f085#6oF9t*G`NX8V14n!-TEc8actj2?o\emQBf9;1)TTqq"h.r,//5D6I1re0lD;Ab$D$%G`c*U$E[IC2mCre]/"`e%%iaL!Ib[uU`P#=7dBhTthWh`D>lij09XK#,;/a0.dCK>=2Fe-iY9%Vh0DjAZ@dBn!q)W,#:ildCV(UB6Wh7J6Y^VAOoc-SqlMG"oU%NF(jE9AVRDKVYjbH?Kl&?pu32-V1tZ2f>Ab)Zp"MLjU^;`")k4mh#g%]\I;&cTpTcLYb=t//!K'Erpl25Bu`15T%7g#f&3Nj6[A)%O^R]OLB+:Ek6cPjIilIQ"&5m3_#$PgiQJ36Ipq'gi/2c?KRgBsJ7TJs^tRC/]uD.,"LJE+k5Lu:"FM0la\';9I,gj_j*lR\L]l"O%h_SRJ_#4P)5;B*e;n?2OLe'[bjMI:/,1`r@W2CV$$[-PYG)>hl"kT]>1r?Xe3_0hdJjY6>f]*d'Hpf@o8-^i8UDQGs+s2*-HFPnB%0g/p.SKg,SO#X.3U\pZLMt:qG$;Nq9r.6oOWD]d)^k0X$$c"PGYtuf_h-,ru:3#6rAqfQ`HuSWCGjV"=gts8M.:.?!dgf$5fgrF6%<RmH=5FLQ0mlVEZVp6H74ikCWbGY2')PpLW4n*B`-tH^M4KDQ1-mG((.?n]?+l?-4K3B+%rr,eT%@!='_Idd<?95VX#Po+rheH65%=Qc_01shhUL[7mr0e^1aS]gQRK9$pp&7\YA4&t&1Gf*:eDY,1"2-P38]Q@WNg;=LVWopb'*:(.BB5#V7*h.OoG8,h'I.hTr*>C0`%oGE)#?XhcVC.Kun\4Ec.AD[J*2*p0Eh^;fb$-[TDPmDu.g'67JW1D@Q=CdFJMg[e!T??@Ir"T#W.DLW2'AGo17\[[=Ufst%h;n+0%F$J3&/4-L)/!%[]bbFgJ74dF0:2-9r8T/#L^7_=Inuj9FM1=PmhL5TK8?RLK^3VuCP8DVOP?b#.?/rNqOS_bRQB;V8EL&rs9dRN%%npKkQ'B:['\-p?HR-fCZ(&;&2eomsA08aXaG'\h?i,oVTksh31GB,/3mH"4F0N)R=8"H2Z7Ee=H)ONS*],"i#_'t=/8qR=nhLC1k%a1"E?2(nIb3s7U77GL<h3j56TnbCF=%cDg!)XZD<;%)rp-K<dhjWcDKmAmA!TC`n"P9Cae.U$EgKh;phiHuR:a4:7?@Vuf7U1h'@%#-l_NdK\`FBgWUD<5#-9Z*4L@S1a1RfD2r5j557;-=0jp$gUpt;1,QbeI4CA?qX\p-@Y#_]@/l/dZ[%DVMHT!lm??%?fMURPYUq4%^]?Rp,F_f.r:D=rZR#b*T']N`!tU%ZLQ<'T$f,,u*lcGuSa\?'Cm>kpRUtY<`V1g`ZDq0jAuj'sRsW1p6X8>mVQu9B.]]S:Bc.q5%ao#ImHa$LL&LNQg7FG^<Qm14n^H4+=ePS=/pp(NH>(MHSMO4$[MYq6CHb/W>Cr4)_oDDC@4m^\i?jKE97TZ'Ab[.`3?MnI;A%:k&%bX&qD[^:iF]Sdr+L1"Z]<s0b,6%9s->:B[QeV#_2'WpVB.d6][\:;Ihdf'+e^/1$3k6kM!!F%LR_G6u*q*Y*0@n'jp%;pYs35t9%%+<-kL\dQZVU@C/R8VK4)"]eW?eR"CiPIO`=B)MR3EOd5@meM,Bh`WA+)Rd8G,7:OIR;W\)921pjRRi)MZ,AqB`:j,hl>2cYKP3E$%bq49>0kLQXB)"Xb4tbkZ\\?BshPuH-FLO,%PaQ$l!Npn'i$<AB=\oOhmfU(dj"Y"GYA;c["R<#het7fFDSF)&pG6E#3Y'3>p@d@I%)@S.%A?CqIB6"SqejleTHb6$\^mFnu%uTe2[6]-S,>V;,GXBT_4<IU/b1O^'(fZ##?=spV&.B6pLGTN/()3r<4FR&PfKT'V-_!99%]A:qGQ9">N?mCX$o#dU6YrgirWKG@,BBB"\$mj].`t*B55&otL7"^GR5(pGF"G@R0#lM`R"G-js"DBVK#ei&m$j)J3[CmZ[JDf>V%]no!F0JX2=2hI3NJB^AVb^GI*#Z*0f2u8e)Le9oD3[H^7OsL]j?j;5\6JVH2*sMc"@sC+mq;\oSI6b["nA['cO!G8V4NBAZ>`0_\%79058p?WF_Diq/dis`AZV?ou\J@5K>hgQ71YMb:J&EHGkP!X%?!\@A\__FF+Zh603F+K,d:kJFL,o1V^NE.684pHs!VUN'#1!V]m%h8%2t$S`m,2o.q+5,CtbK%kPCos(!EYiDC9-;5?!/jetS$l>o<_n'@)fb*GLe:g:@*-!nHI-I]A()ULAX3occOdh.k%_3#(`(Sfn%;lQ)3j4?ub,L<m9%5'E<YUVU<&@796>]d$gi?m\+NJ"MrL=Bi!E>JSOl8?`A6(qW`%js^q[HUJW<8Zo.Xc8DJ>C>uJO<mDkNEJ,F%@M+rRXRVF/g4cWE*c"GjcIQ(Q^qnSc,;0P7a6ZU^+BiCuOUUUu4%Qb==/aPmnV7PHR-c5tg^<7;T?(8].rBW!F]Y=Wc,]HAl1*NJ%phm+;'"T9q)*$7o(Z<L2*/SHn/`@$q.Ad7#FO'=h2QC2[4]Kt,IBL:=UFj'81##gbZPa<kfZ.L<b^J1U&Jk`#=s#$W&-H_n*s-4L%629.4N[SE[igr,p8i)^F;J!&.9_QEg%T[0ukAW"(f_d[P_Ss;9K#IecY@.Mf"qM2g-=ELM@\Pdq)r/T?*4%Z_$X`AJEZa>4lhXp>%0d5oAcLcE%HigHu>LgrPDgPT"d7tVTRXKlKKi5(<oJ!R<ZKR:0UdVlh7O'+e9&-\@!YB%K5D=Ft>%s]G_@XQDkKi)C;+LZu`j6Es%oIU_/V"b5L(9nk[bdIt]2mIXl1#.1G<UIV-;E#IqUK`$EDj,q6,GQ^o*L2/m$hDj3iuT$0a4"]Yq$;RS^<?g\\L7J$FpgHi,VhpG%DBD[npb;^`cSi"F$@@8!IP/sAf0afs'C]aKT8XD<A('5r;1LelbN%Y1@F/2mh<'BaD#Id.m<48u^]Ds3m*hIA)dc+L.UVRs)PUQr%Y08c+HYe)aQT\j`NCl(BI5B#u*c7P8I(U/L?46/4#HYO6K,U61b.qI3fctBl$9k<r6%'g..^T)W8tPf7TFEu_FhbYs#],?j%&,Fq%q%<_hTs'V,HVED-WDfHie.M9@H>Z7p1j=--&I@"LJb[,b&.$nK!Fqr@JT*psI(l00iJEFS!&nde+C(*83U[nHg):M.$hD[!NpN^d%6`9TZ7)IKH3$o/DZ`k\dY/pc0`N0>uC\!!Whjcqo7H<./2a-^3No5sXK'-!M$fF5Bq.fF1cDQlghg@Kp,_8(D"l,19HWu9\JNoC;%3cAVlbjC;-L"D%F$7%\7.4EEs!AfON=lA?sC'k%J^?fnEIUU_7cA4P&+7,7'Lg.JSb+Pek`Lat8]=@=a%Tc!d&bBj=8fLal)&ii1%3jnDfYIICXK?pEfm%J_`&VpYFYb[Gr2qV8eTJ6?lU.&&?:k&#<k>8=gM'K;bpH@tE&]?<9.H2O^dA[a37+!1PFWh/'6([jqet2_L%EAn%31[!FbUL$!b4F6qUUSdJm24HgtbmO8A[2?WjWYP]M#C^`7oW$iZY\"NVTk*Fc>*).0h+GQ?T4(ku$=3l&f7Yj=%R8o=Q,a,+%I6P`j714e<=S.s`;\+SqBD7dbP<"QE\I6,7<sq89E('oe6^?sLm>_iO,G]%>M%>[]6@n:)Akk[R:jDp#UdAUbD0$=P1FSbOTW&q-%G(K/XchPdQ4?Od/9?9PUK*r'Hc_V1M]a3D/IDq(6?sfr907X>M8aRX,hL<5T5Xe*"ZiF(`=f*.rWBrs9`<SRr26M:T]uqJYH3LHK%H/-H!"^c\FUN:,=8FD+AH\%*%i[<HPJ*eY7RL[G-&+:,YgkATHX0$.5)^7'Lh)KiH./d_"@M<EZ7!0VLR(14>*0(.Y6usJ-U:kQ&%4bppaQ'3>.KnQNa=rT2`A=,c^PVEJ'6n4U5YTXqt<)NMkU31`EkXD^c0-4H4GeHC*F9TR:_A-<rXrd'#Z8Z!t=Y)Q[LE/d6*pWK$%iG9^uj4a+2:"kV$p_ebtl9`a$kYoJ'q6UZ@G`kE^a!(]<C(U^spl8I6bIso<K3[l=GV;oj)KE=Mc7ZX9b1*U(DObTm'Eu[eE'7]6%T+h9b:n_k(ioV'k-<3A*i-kuP]qlS;q7Zn'rR0jcJHI2QY"JCF*;R-2iIPCoV[i`RR2uDeKK.E_H/Tt\F*]??'$:&)U3la4WUUbd%K9,+%\CQQM:2,)+_;3]PS3A/1E/%:17WptJ)"-$d)oI^,lU,3V1+FN#FBSdIIR6UdP)(OY&;/ES@dhAc?&.3fZu;Rb^Y&\OTktq1%kq!p8m3Jr,`#]\78t_^Tic>Zm6V%agR0\PL!83q3LdVEQG*rfnInVNb$gmr/2q*2f#k>k:Q_?eWSPV&c\P=P7^)>.l:Hje/JTd')%4JWQEA2nfY:*L"#,VG[kjM6l:%$YpG,q7?,[4ok%#])b")%7c\rre-;'.iS?&tU1``,]m<[af:Y5BQl1+Wko8S%tu18\2^YC\PZS%IFh5E9mEA+<4&9Ql8fM+l5>Dorg]:iOMjDR'D(rc/>Q/H<==D?YQ_hO7=e"-*cu`$[gI_gVSM*]8\:?+H80OjO1_jIBm2_*AZ2\f%*h]&TP)9q7!7(,O""B$T$UBIPd1m"c)Cl<u>n9@(ip1&c+c=,^KfBI&)pkl(pK>_SLepdkKS)cTq`d.I"[2,R(9?604uf=nW9'\C%@]0=q3\`([0oH,jBRrSU])YA;JbkrhY+YKKZ5E=7#kuZ6<VGqSl'`5e'Pp8Z+\a']+::[A9-3G&W7`.74g0q:]&7XjfOgDYJg2Dh%0<hCn'osI9,h=QOW5KDoNc3_TMi+T]r')C0W5KDr^X*$Tq.VtnMb74TNsIfK9B+]g^d<r0?^[nYk'Zk$jhLu&/Ar'\L!ZY$kP@N(%.,Dt7&h^3T#jAh';J?pZdC#>uO=.8]/@\D1"<&_'YWMn,-7ckD!uMLp`G"R`oEhH08."Z%s)pKZf@PHqNe?,c'1I[Q-a$L*.Ue+n%Qi&K5?M1-[*I>R2Or$hVpi$7Uj^fMs.iso?$:#W3P'A[7!Iq7H0#uT=O1\)"@?2o*3dXj![2c/5<J5t8M8HMYPUWlF]pB<-G&n`a%B05<jF;<i@7^g3%1EJW3^k&$V8&oENOXtSl&,U053uKi`QDgP_cAe^0P-m]R3lD][R5u$ePThqHdB:If\KIMtj4g7G`,o#Qj[:rD%rj#RIBVY5JY0q<GqII)#:]arJ*J\0TTsYk2?>A8p[2_4g%LogB7&>J'k\1>/71+!@TGIh=cdNd*rFM#Q`Q?X:nZnDCK`^i,(4pqJ%`ZB-YPXmC/MidClO-aV/"qmo@7l%LApmokAkL9QG03-GYgH"<6cDkMHn[Q!5.[bM`1Q(=T#hO6#4Yqu9De)Dl>1(Wq,E!l4F5Jn;%-jFDu7qNHO'br1<o=P_oM$=D(&`nhuX+k)@To^I3'J7:grB6[d_H]bh'N.mmN&rc5:e8EHgFC1,<eA<B2&M0!=Weti^=m*.<+617%'aZ=[?A70_-.*/_C&h8f6^/fn6/VJ'XHLoNJBd3VYsH(UmqPA1s/R/G<BFC<i[\(N5PpAm;7)T<8#p>o=Y&kf6D\"NlX&ouip41)%69CWi?GHg=J!P8b^Tc.H,+e'1P4"dd.M.c%69?(gmK-7:dbnug83<8/E"CLofA9P,7lqX3*[0ad.WG@.gTP?^YJ^C@*F2N(3hL&7%=$+R7d>mWJS_R361YP]1Cra:d45*;GVV9EK@M7sOrcPU"da=)0iX#9+l+G`@6ZG0kBL`^^0(QQ:<,"kUpHT6\I$OE>m*>-:g<i;E%q7kY2e[2*pYAX5=[A1Qg+o/>f*l3BP*>'WBN]<5+AE#o7?@PFZ;9<93,dk_3"5fV%P)o<+F)"60i#9B4rta=(BVcI[EiA/ZVV9Eo%ZiZ,O3nLkO,ZIYL(iHX,ocfuJ0"&cF-/Hq^ZIBMl5rV1R`RQAl?+M3#@aJr03T[J<2__tI9K<f/j6b*QDMVIUA'4>,%2i%RRrfl'%8[#0kNh?m<d(M=Cqcm\CIme%6AJX5"f.+1]AZ8+,Ikd'hY'(B<33niR1i?^.P1*KK#rdOqX"`0NDI2G9NsCGnU`A6hF*tC92MoW[%&^G.4+'%H7\.mp(H]iq]3F)F-/-%oO+ptZkcZQ++nIF(a.>M3?TtPRa;2u;Q/Vb8c#<FAPC,tp/*;FPW9-"8>;)HmF\C#:%\ir8/%#8bZ%I.A,EkW"/D*=!mK=_Kgo9/Y*$afMQa,n\2_CCkEF>&YB<1tSB[0Z?YH.Cr!9FdZ]1Ck@7XWD'RA(HF1g+ta8P%=RWBIn2@2%]WVP64#P.)/cI&j([nn@<RaT>MYudM#[a`Wc4#m#4l@4G.B,]ABIrW8$[f/bn+cSfq'a`cHnF"-j!*B[#1n-G.1+Z1ZuV"/WPhCj%C*].93Kci#I2>,d;on0tR*1qD$CR[Y\E,.\?>R\,dQLY]SjG^H=5taH1.S&#q/,U83e!eG17t+<"fDF@h*HW'r4;hpot3\lr*jPg%MLZaD+`e?L(657kpU=tOFSld'RU%)QJ\p'>]#[^)i%63Fe>mt>Gb"qT>:#/bieKcii%cj6EYIsW(DR489sI4#W,9I1eG/2q!0n$h%RY[kT'b+G)+?&0`N30*F<`o=.R90n-XHI,Q1mHNfU`/aECGW46)H];[',f;#1pPbo<23tYX`F[ZSlbXK!l:A?eJoZkAli]LWj,C@%^T??'l:B_[a&eGn*;^Y4r`Ko4-].&C*(/F8&dgLQPgfi$AXnZPk?o4Q2?@Vb@/J*?_nRri&FRO'D3_WN995bt,:Yt->Y't:3irbq%)=2A(-9WXso&"@'Z/N-&_eDcn>HYpdU-p*GBhNe[htl[_Z8KS\[q-*G1YQnf&!:QKZ&H2tL[7PQ@)g2c/N5;N;hKUh@HIHo*1YH&%Y447.eX&Ce#-$kVr'(agk5!\LG9NF*j4B9'KmXZ#T[Ee>AC,#Q2+5hR8JR-SJWCW>pOZ*V#o\lO$R$e_WeM#j7DX,,gV[/0h$=qM%H:s_3&5tm4^`.%5Jd0dUd%\O@#T@0dfC^OF+3r_iH@gn$Mn/E,V4`A_(6#e#?H+gR7OS`f6Ktdp1a55<S77_]nKWVi[TBWfj[(P4%8@P-,.kcr#Y$5`5])J8-[ShO?2^KbX^[^Vq0(S6?=YYW#+D<9*TN6"T3&q-@WPaE$?)>UAF4s4iDb2S.bb)PM>?`QB.OB#f+4+':%hG?G7Xd!snkhN)DQ%_s3Ab*7B*c7aTWtb!4ZD4OLD^Fs)?AS\E)(tTgI@pF0JKr#p,X38.,3$=0D.Nq1q&d#QP3=CQYB)6TOX3jL%<C7#iIS!'dTL/1u#a>b:6XrDL,U3a5(P6SU#U]>uAuLEfjG!CA6,OgW`7P6Os0LZhck,W"q@Uau=jXsnS?4Y46r22!p`7A0#_Ide%a"-HSA?EFS,saoECK'_WZM*#]K%E=_.;1sVPHC"np$-9TKHTa`E*+S\Y>-qecLh`.2hrVP`82q7RApi1M?dh1M*9f]/-YbJH5OL`%(r(J)Gp-@1+^f=ZnH)o-fAp:]Bdd;$jo(e_0>r4?ITF*(^=M_cWYFI3ZeD=7jK,iR<OKD_+`$%gS."k=du"rP@okD2M`'uB9?.")%q^s;e_PTi4M&kVJBua'5ZG?eVkDOlME(S?I)Vd0n)qZls5`&rq4UHgj5MiF2Dmb?N4o#5&(FoZW3jN7o1)IR7P1.d<+_I!FbE\S-%4M0/a.Yd=-U+E1GA8M+NcQg[lg+`_+8Gb]MB/e*gd_^/9O-n'+]rdVsaXEY,cbtaPZX]BCMlk0_!HV-0%rbrkkHQ9X$_kUu"FJc,%kP8;oehRgjP^iu.Jje9k8Q:%h];U:O@s?bgKpgfG8A*lP0,?!,ie;1`rCQNGR`gbL(M*30L7\k57EVcXU%X:EO*D7udZ@O`N1Wk^%_Eut'3?oN6L/i<b6@6c/:P]fHl?O+3V^(b_ZS;di!\VK/U*8t01u\\c;HcSiJ.le:Lk(c]V9W//O1R1AJFi<Qr.E,Gr9M2s!/VL6%.juGA%ol+X:?RK>brra)E\RaV/tCTSSPoa0o/j9ug8#-KR5,=(O#%`QF36aoTkK&]-g(N*+[Fh5Otsu'5o2QbStB77C#?qpgqlWm%jj2c8X/?sq\^K6pL#,U]>o:EV2r,Dn:Im4t@_BoQpC5%K!RqaT.Ii"J<*o.ZgU&SDM%mo:5s+q\ie?N4>9mO6DuOl<;:lL7IetH!%,[M`Dp%=+W/)<Tj3.#f1-De;Op[q`:?D,PgS`?aed=`J0nF*lbG=<;R'mUr$@o[@,P$K2pE)L.h)\Isp:X:rpAG@e:/qg_6Pi,m:%1>GqE\)B[<Lb]hE>$JL53hd$,GHmIWrXC</j?:#5bPhr""/_A7\57'(EhF]7:i!Z/?_e+$R>Nc@GM695:nkFiV#:1@5dIV4\;1s[%cDjoNE(<tX*r'KT?%b>fPQN5KI5QRPJm'=(J;@.MZ\Mm@]HcqJF;HI<:n!:YWXC+\>ul!>F<k2./S?TE:c]4Bn;4f8$`,HFUA_?T%`='i2o7Q%Vm]@B.)_RA0ie>s716TY)1:PH@haB7b-XMn(-f+A)k1g'a`4?0P!HSdO)^Mr7b=A/i9RCp#O%J%o$H5*/M`fVdgdrBo%:d,2=KPP?*3TB-60R[R'SU"=$6$$1%XHo-TonkAdN\$^+2jCpV/TV:Ic&K>leM=UQ,0@^W``Yu!G?$Ork8$h_(7J64[3EWBcDW:a%[,+]fECLe)N>$6n9s/.HX(?2-<-q$7)QRFei<2g53b#M@*@QJB)S8fIF3pJEoE)/ABXd]gpXUE0cr8PI;?Si#7E^J)9.07AI+u^,%q,a[0mOcF]XE[U\p7GdNL'+9:@q`QBg8Q&?M)Wok/sMA9-p\JiJ#V8lL?_YuPlmjq<>Wf^9a=;32cK2_V]@U<Td8<('b6I(n^?8h%Oalb0:K7mhiZ;=kmVTQGPR(W$gq@RVJPu"'F6#Xo8W+f#60%/?*V?moSqSt,H7K%;X$3i/2GTBrHlV?h+ZY'8%d2iq"V&[)XW^`g%>gP_I>KqlMOeCZ9;ll:qTL%c#F;(]d/nfM-P,OLd'<>[sBF+>[S(fo.>^RF+%[9T]KkKE/E#e6ie@fJF-tk%,Ph)b2<3[el^['CF%2XD:=GL76jZgZLb,?4!3XH=1iZ7U$ZC@T,mHH*a\Ta!?uKf#r>p4-><4L>6Vd!E*b`Z>]rg<.:PrVpI^?86Nk8o@Pmb?TEQgG$!E%#_#BXg</*'>$KZnNSoi(_6j_2CYGQ\hjOG`Tpla0'TN&63\uJ__*G*QhJmr?m<MckipAj[h8+Z6THX,7'129;JqT/r8j4L,H'^""%=5MJbJqbD+\W52agHL#Q48&!Jp4=cR"Eb6sRdRK2dn%8L2UP*tksd_M)bSOM"N&]FIp!:%1sqK!jRt'U2T#Pu)[k0kmOQQk&l/Ob%m>-X'N2O4L$e^ZV"iXfpR2Zq2!<:7Hi8?bS$9q`$JNgbSk8*&kct#eE8S\gkj"m.]+tF)$O:KD:*+B\,4asXa+/XqL>Euj':l3<u%#XPVO@R63?$P:AV;%a733N:q*nf^;@>^hS-(90;C&ZUBH\^?@epJhKMm4""g!WP:^ZU=s5*9Jj;WM*nCHu^uoFb/aB1Fb$;1*g[e%ZW7K9&NGr[$Pp#OE&db6rOh01Z\\74"[4ZN'akWec.k6&6F7jupm&-URZ!D4TVS?!pu$EJY@U<^+/R0BetD``4+k`"Y;f*_GiPE_%0Dj`7?fIe<ngYgO<5)O0G<Ps(h3Mu6MJgObiiD5Wcmdd+iXWXjD0MT1jLaNlc$>5nJ-gU]PAb3dR,VSn'f4o+[T-i0q')iY(`h./%%ION5A0GSZ$HZSOH*6Jj3HX?79C2QA]TH@c][HD_;4Uf7*L?lKhCg_&XmC7*H']F5Z'NTL-kgm.V+h,uI%'@p7odBK?;&gGZe&c9%V'.n[HpqUega>YX:kZ0<E5t6[Ti,b=SU;Xt%`1#6&4r)tF17dXQ^Y]-?WrT"[=&jBOWhG[@=ts&I!],UARs*?b.!hO]?A9G[65L<%EpN7*JkMY?mB+bLjqWCaiISIK74N7@'<'h5&5t"7@lr\Z"P*_D+Jr\!JsARq-b^H,%aX3"4t@d>9-4hqSbUdmhAbEJhI#t@6qVPh%+/]]or$E/3k^n],,8J#-$<5D1f9;)$FMUKH>q06]K'68,;_0m7@b?8&Z7S3Ij2rE-WSVlVFetf\eP9VC"%mqbS`_@O-7R_9WeHNb%Gtu\Yo+;1'Sju>$L`O]2gdU:K6<'o>BHG$Xc5G&*\(CgEIa/8gS6s1i3p5^:F)M_a:-_m6TT`b?!M%"A2*tHZ60O]l`2*sn)i0H1%3$d8c.7Tfon+<f`c!K6SD!1[W:-+beHAobn9`b"WgBi]oB[`l-kEK)$n6$9DXE2Vl41'(LEh-5eLqZ#m_WL3tn:b\B8,KU@NoP''%rBUEjb[mmQVod(_C8#hdYros^q$ie7r)]%Eii`$dK,Eo(4/2#C:5+`%4`FSiFgUJ^d#)mIB952aG81A4_(g1Vk<$?=F;gYh`(RLA%)IL%/gK%SN*Qb$]EYjAV&i3)@Mtha>FB7gof_<us$g0<um"Yb7Zi(^/l##b.;uZn,YD"g@WeK&m1duLYG2t)2dM0QHS+;d_Bo;>t%>b5s\9nE>34aG201^,toSil+(RKAt44aG201kd&a;kA"S9juo,Q9;RD1_l>Ca=@Bl1YPK1j0b2#N?OGe>._'s74c*S/pt#L9c;^\%*:*VuUac7HB0iBGj?pY:Jq91p16*0SIEFY6,ER<EXsV(TLI)7:_1SN1d4'k)_6u[P,$44+nBjW#/UhT&V5k]ulr!2U`'mim@X?s>%%n?GJV"Sqnf9<'orZ=nQ.HGtEnl5Y[7j=sEBo5adT8BM4:K$^hCMS4<NAMqmrj%cdgdkAJa6^oHDPS_kLW#cHj[P]U\8P$3E[+9j%05*H<PT+=/VINZtPT+<DE8R6Lj[P\BT>g*0@iTc(D6ZEGC]*KEC$M7)'l6E>H<N:T*\U9a.<:KDH]JtaBhE`aWH;jA8tHZlWJc@Z%1_jjE8lI]V&q-j\jXJ0Bp+,s%CeI_,GN;C(-o>#kZVKaV;re_=F]t^8Ua`emC;&1I4_[NoMlk5bV'f!ro4>&T.6VB;Y`,[23i+2u%WAKKJYYOFS;aa5]VfbU-RNf51R`eW,8(K,c1_gHMmNBrAV\[OYF6f'^1dttbrL&=g=IR*i`QHa\]@)qaD^J7KldWbGPbo"AH^_:&%VVZA174_0lq^n*(eDbT%NHND1k'UCaWKdS,E?s.3L5?7Y=grNG:RVpa*+#C_8l(lgZBh]A3i+2u@61htl]dttV6Gl[`B'hC9u1)c%CRrn;VMMX+S^o5QBhIC*en1K$PGYS'C9?&94_[OIF&faMS?Hh$qOAKs;kR.K.XPs<:?b>KjMnWN>,V"g.I+!>_)_bl+J^YbI@]fJ%dM,5DPWZq9bcFa#6VT"(.1\;D1o7c*`hdg8\<`JQ8q^Xu`YTXCNSB!Idq`[(M5nF6&?YoL=;&O$Jr8)%3(ouh\1sl:!_m!r/kh=L%Mc/""FCBL&)uIOS<>Pj(M:fjk?Mn[9HoV_$8t@C93-H@.B]Kqc9Ld?;!pr`_n/9$9F1=9k\d,/.VpK8SiK4cWNI$sP^AJ&TIMJ"5%KhLMQ^aLgVi.mZu=sP&7&Od1t?O;eDOd=K%4HhZF\Kc]/GI,XEX12(sEop+3XqN1ZoQ)Z.#WWE^5*>%nne0?"P;aC%>kYlWJL*WU%1'`(a8T/+u*So8$-:^n*g-&.;hhKaqn88!r6:a^#fRB*AITgm,RE+'<qCtkSTq'1L,m#ic,fM/V!l$.2"'6EWA:([.B\AuU/HFc'%IEqt$<FQR,gN+,rKPRd5%.4lc5u*6s_O)HS.S.Q%I?4MLCF8pMqS7[s$`V!CM?*"n$--^&*u9WZ,d8R#+_*RCaA`]E-7jJ<`NmV2%&Y,+V*0!Zr[>\Kf+='^J(FT5i_3</TP28kfPP-aJb@,mD3ZEGT`nlMaf>EiA*-XR6:$T'6s/Q+nU,qNk8,_tpS+AD3b=]+/8QP`E%8[%TBOP<(^FVL[$iE2'Y`AS<?W;<*&Hl[$0jP/4/p:d2#C^&i(H!cfh\a]BB8A<pOq>8qZKHFI9cT6%$4t<p3'*Et"h9]cA5:\C&%iT&K@%[g?dLa@hIg3<4`%^BK>K4N87/VZJ3bASd+Abp)T(dUBu;9W@fNWQT,`E:lLUY$C;^>Rj>!iBr>UIJl[`(i##88s&#Sf[aF%k8Pe_E&VqA"[ue*'^tiAa*.d&d.cZrWrh;b2&rG+WP?0)=F)mAgI]&S2=g97#g7c@bh!'HZ61<9[%QGEg91N++s^]t$ra.B81oh.%/&P>d0\V.eNQNr?.ST=OFJ90O&n<>2[P,,gMM4UnXH$*DO;Pc?r;riF6Ysg]`8[A_V*-nOLi0;ApUu90?5"=u=WHSj0eOJ=@7o;d%_L>^pNpob_9u$j_=I!UhD+i8<J)ms>)DOSX:^@bKK]@sFU0`2bYK(gE.iNd<rae5:MP5P%EGnG]"m\Q!Qq7dqZtF(&7si&=4[R1!%iM/q_5Ops#eOOtCXpA]Z>MXjEEd]sd]I7SL<o?DbCMeWbDSO$h"4<f]-6g/b+t.^jMK9^F%WKJ"0BkTY@NcUPX2N@oTAE08\/Ik'%Hk-</W\]6?U"BF6*f(a\\1N*dJjKMQo_/X9!eHkt]fA37!91P9O+MP.MmU>dGE/E7&c%UX9<9RO+4E.RQ+*qp%s3<=no/)D=#6g:%!W34apVSt&=+*U-<7oYt^)p&EBc]oFSuU!NDh/MZe<Dn[J1SI"nie?IFm@6cr/=`q&f1qSIY4Z8mjX_3i[0<_,(l>aJT,2$=Ms/C%)4;!05k[AoleV':NK$90_=mfel>2cYK]iLObUsk-3jEah*1-V`,bo,4md@/E)Sk2@K7LhKKD7C26Xb[`:V5$Lp?j/\#Y?lT1&tDV%NZ%a'Xnb\M4F<[7!eG]eM]3,<lp\Dl&e^Vk*rg5?Gf./TCmG>j_r8?r$?j%Za++C6:iNUgSNr`Rn=QEQgJAjJ_a\LOI*;*uLN%gb%*t/i*dAaI7BV6P%VVi^Rl]'M-kp%/Q?A$2oE>oBo+*;f6"e3ABL=[g&iY:f*@gQW+i">)s0JK,/)h5"&SAKEuBe5.fDEJsWbts-W%W'eE'#cdJh#m=$\#aUOL(^/1n)%Qn(0Em-M=hGs\+ih\i#Z`!m0-U[2;$@5UHW>S]grVAa6<b-8MO!W:IB=$C^<"#%3[Gm[QGa%3%poG0[J<fu,ds1`]9)o%.jD=5d7c)dA^'R^_+IJG_+$G&j#_C:P`KS,%#R2\*qY,AUH<\Lq!FcQM\nM3a#amV:E8S<bYRQOF_hVX<%j**SEW/V!DIa]WQDPt<Ie8iNBY_JW>eH!nmUY>oa[g@Zk,1MqLpfG?#8B;Bg5SQ]BKNecsM5V?.o!+t?Ld[ep6-tN_9uLkL7XY4u%&.k:D(Jg;*0R=ZW6d56\fG0NA^7@F()*l%kDEuDcBcsf4,M.=<EE#e$N![T`\&Rso1SJE/`%1/q)al[["N]R);)9^21"Dqa("QI>%5YM>akBi08?!m1-e.?-G:.(@Y@.(lad9u_a`ush*hCZb=`lgrGaJM\1(Y&8;bT$-Wp+W)I5Za-_=YOc1n'?hq,247pcO4n%]2f2u%hi/Z9Ir38%m1<]q<X?g%]TO;PXq_#th:2]3;%1u2(as2(2@U4KOZ#k(6&V!#_7Aq6DDlWPI;j(N+Bga;eq^J>gB5Rnk03\[h"KZ/%_><*Fp>GI&[ltY_*d0\q0JU5k`]`%gi:6]lPKWr73J@g^f5gn$0Q+;ul-DJ^Qi+mus55](ol>H"b9rM;7hVE%3h?>SlfE`T(*^Dp%9PLr6%_@S7ADEdTj3>E8]AqIbZg,e\8_mHIGLmd!UL@M,D,_2PS&QrsiN%b,QI,YUs7%X'TdBPYJc9S4=CDoBj<+$S&:OB7ARe=#%J%Qce4n_''Zecb9GN%MdM-)g`-G=DZNUc7D_E1*1d]k@L-KJf,c_W!$O2k@/=Ymm,A!o0s.;Ns,e5r)udkrdATke,F!H=ciZ<d`O%2djNhe%rfQUOI:>li0\.?S3\3J&L6V*X(@"GSAqD&"ZhJPO\p0hRctsD0">g<Gg,+Pb:H>LIH/RE+D!bi:p!)qu<]Y^Rj2>q`93.%I>;lR^aY^2jSWY;AKrX3^d&:"jJj#Ii2DY:9/7ch6,%b+a]Zsdc+CGpSHJ,N"q9/Mbf``+RPc&pLX5TRQAUm7<h)goiaPLZP"U75%`MFY^EI[@b;gfTr+7Chj[(!0HZs9]>ojV4T(E6$DQX'(p0/ii@(L-H703`aHYq<^2]sZs2V6(R"P.oRNd_Fk+T6RX&-bJ$>^U:AT%G8E@7a*H:u>,S`6.cl&STq$UdEh@TIod@AsI_=4:^Uq_MERLi[jZ96?([@0tdTFp^jH?-[XmILJf#P1_A*`I"QG('+eFn-lBZnAL%P$I?OP$\PB5Oi4[:N`pRYAa6hh`4n]I;<O'X/,Dd.H`2jjnpWnqo%e?5M:0C:,s?`0=0fMRd.._VmQ+`?.)dm9DXEKne85"prT\H%mVe0dF1f-;^;#r?hHSCYMfhTuCb4gXElh+if_rjO9)dPp[c;3d[Wa[^16/jAY&?X2YLY"J[BZNWaX'1EC0upd54`MZHTRf[Ve*Z#%QD7rnl34</EKgBNbF^fQgjf7;kn=R'@Y""oX004FF7iJg2@hfH.So*iTS9C5%944O:j)d7c`ao%5;N%fK>&0,r2?Vgl#A'jA%\kR%=s!A+Y3N+-Wfn@%c<@;1rr2Mim`,h<52i.fDR;X2l=tfAq5NXKH.u8F`qqf3Z0J.)Wj<JANkbVlWr)=qfhXTkMu21gX1H^9[QN8I%F_C(]qf0QS$X0Jie519R$WZB)s6QaY5KD5qqV9-W]XP@kCQisBpNRltm9S7FMcD,^<h6X#Fo;4$=5D2BRn0/uRlI%1lZfG@rhuCe%\D>0)ZPKT:C90I3Z0M,]c`apPj#3#`pGS.\H[BjWIBC)$?<pa8/ngsD:ubBr>,XL^rT@8<cZ,FFT6m%UgZ.Si;q8RM*jh5?NS-\L%=_k3Qc9B#.IZE/NqV9iDq+Q(ppZ&j`_r(LWKAA5nqHV9pH;UAcH?$ULg@o6&DN>HU*:7a7%s'\K5J8pK6%6\8gs9tYaaa9GilY#i%TlMa>>;#MeletOjMJ`r0A9eT:gHAB$gAPPZT3CoeV0BA<g>f*ZH`a2Ym81?`Y,TeHBP.QiC\*lgXkZkEq`3K\VUkU?jZ24A8oplD%.q%PH_gW=nl#BJi:]"AIFRrr.]&9)#GEG'bV/)s:C8Q/=`Z2$B`k/iXDp77Lm(XR0G<;;S]\N$8Xs*A2;RtT'ZgU%i[6G.!Vf\!'%+-(2d2V-oj?B'7MBC-^<RhK"eC:l2YSUY[F93HakC6q<N_sshUF>nqrcg+]F*%GOOV4H?%:jLi$pM3[jEUgM(V4LJio-a6W\6>VM%)-#l,IsO?"[p<)*37;Y?\`\S=WKk*Nj1a$tPTKh2LG\)ZWBL0)BRSnWnnCn3ju#,\I+iXVkttm\=0q$RZEHLMp68n]'BQ[ce.-9'%5J?nCoJlZn_V`XaRkkQGb,T&eW]H\L9.G^0Fo)(3h)XkIC:?D<NSg953j40V1I7qYn_,h`;$X,K)5*h+R\l?.=&kSQkM/\!de%1^%<r+p`lVY8'C<bJ"%^jI<`\aV/s6>^'_4[3gdZWb[dPg]<2CVq!o$\Wh?ZgC&B'jQ.-pP-*9QnCQ2L]dMI&_%2BX^.T<pZ==,e&GM%>^^MG2-$7AI?'4,q75Zk:[.;9b<bI)]"1NR>fElDPjY/?ING$o5GA">_G?tA:W`TmUr+MYKECf0"B871!gF43Ht]uRH-l&`T(p_p%/S\@;Ec^Us5hR=5'qe78H>9qHfaW4.JFZHZYq&(b_arl:*NkYg%8,TDS,1<G_qR!r2/9<hK2N0,m8%bhpX!fi;mrRu4DmDM]DY<J%e8Boe(:Et,io"GaT?$uiKU!XoUH#[9TCY1q6HA_2%o)04n_CtJ=+J;eD9S&*L.1]@ZN'%P9:IRYZ?kL.R)\N2=D=66@4/!Fah$JR%T4:d)2D.!==BGLjdsb9OmG%FPH8^DO)q3JMbs0a,l-ZbIs68@!?@D2<eU;V9S%IF>F?&0FP(Ii5B4gNY-0r-XU#!^o2o2KTfauGU%C-oO%%]?bIgcZ91g_loh=)Moe8[Cks9q=Su,htDudIh6Lo:S+A)6A41jH-AG,1W8b*Nj'`F)(As,FINKcM*/uA%Tc)o]GYUF4Vks%6cEQe\EhZ4U#J*38b4=`*%E#!L3ohA%i(."A$L)qo,]AF7drjeS'cOEcH]j,8i'VJ`7aZ]f=AY^),+n>B0::CG.*Yk[4>C@-Pp./%9\-3%fh>EfKekaWTUlc4Hfu2a5(d%92@#-&e+3GNH0-K$7"/lR"3TG'eZ7q2Nn<"Vb4;\ofUM6Lqm:!PU""LpIY:V.3W05[DK!,`%Un$RgINLb]1oF&oa4EH&F)&hND,,"K8Y51WVCH3.jZMA`<Ag<0D(16[=J!!uI#d0_@C]'Q*h&%9BNaHH`,a8q4:K>(:ClkA4cf-`%d-2uBh&XC#Ru[`55ZW36J_9m)V5JYkSe[lEE)rho%GKt)_^SkMVYh:7nItN6FDCBO:P0]$=4*p3D>5Tl%Q=YrB)TcC%4F=jGcUJD%cH2&[GO'Q+3jm_7k!<'LGZq=Ul"LW65,LQHEa];NX2M\"4O&)\U@:!`DM;(6-3!9oSiaTjH`>3dfqS*qpOPd'Gmmet`XcphVf@a?%/phgs9LSu.BWA&+!&^@#:MosGqqY2?rfHlKr3QoKMt5=T6?(3WX.5VIan'K%j1h;ge\`%';r+R)I;/H)EBVeYb+)bYf4]Q'9UWB"%lF'cYWe\S#.TP$4Gu:SVG<OPl>BPS2elGM)\l,PC-YZ#KWd\h7D>G"h%Ba.7e2X%;9""J>IGX$7*ED@1)m(sPdUtLBh00UQlCi2S%`N"[4XB[oqk&Q7"EP+ZZo.[d)=#IV`PcL6YHcO?Ec1D-];_rBnY6n<Al6B:4X1Ee^$<Bk(YjQPqHqs'-RKbomE_4^OB;Ys6E`JZi%RcMdiqfujHjZ)9GIs0OU9etp[W9@0K"u/!#C6m\F.n."KRt!c8WZJoSjm&l!Wsr=B9SoCgIAqIY;fuGnB`(8drY29qCc6JtL-lJc%*mSuqWW3cXnl5^:B^1h^!`\CYCR]2X5PJ7@kA96@46<A^]<1uFD@ku8<u"[6;fu:o^1gR&Q6*RVr9<$q(+8b@,ZK^<0Q];3>H76m%SD("@SDAr!<r';;Qhe,2[(CQ8XXZQ3qKJ3sWscQ>[OFG[q/2Z1Wr-aED'jnWVYCiq^*u7b_jYXU7-/#,\(sPQ,raq`GkBILTAj'^%;gsVEX4MaCe7N@EFB^6_/?ZVCe>NA\%k<%&C3mQogjq<DV^*aBp`pL0aH-4_<od'IW>$G7;^"@H9fMY']5Su[4/Ytfp[1Ws5<G,s%I!2+gq=+P`C[u,I5NKk5<$OUH4a/,9^<o0PWcBq]Y2aB%.2'"-a(Q`3oD+Lk5IS!D_qi-d---`i+((t-5seMQY0l#%CZR%X00I:Y%.`Y\-4_jZmo/.aT24aCt7%Ti^[;VN-GG!PI*KSeSW@M)=I^CV,pC*FH<>D!ppO+rPlnM18Y4>C7]4.$gXQbUBp+t2ULHRLi=SJZY%0"C5]o[$R2pM9)!j,ETBc/nO#8=pNMj,B8(m#b4JY0KOo::[6BS8sbLh5=N>:NIO,=1RRUgQei+-c,+WDea#&?,?*dS(&1SHfhS-%XfC.r?9G$W@U)@riOB6V.Q:^gEg?SkdZpk<\V_QBX06!R+5\pOO?_8s1#u.'<=BaE\I.ofLRq7iWnTW2W>\J'6h^:uF3Xd@`B;'Y%\h.46^\?DeP6Y#bM]/)_nU9YjGF4i%Clk:+Pn!:_FCg+&Gg9hFq;_A(ohK@=o?%:5.D@S.j2(01>NBRsTMI#9Qn02f/S1!"8"REN%2=[>(4]G,F).ducflt>"Hns;GH9@W;UrTeNUWT1P[8nB/CF),mr#DL[ENMstG\fR4bkA_m&0='H%asD7m3"R6(!u'&k<]C;nND,Y%T&^e45/&[W;gHf'%1F=rHZW^qS+_*<AISC@;ZhgAfj+]8h"E=JO<2`M%H=^p"WX>YNuc7fIsgQH8C+FSE"F(O"qJN1-^O(8n^LMc%a6pji3]RJl:9->[Ns?+!iUP^qO^tp+&dR[k'\#Ep4Bm.DT8cIbZH)!bKCghunPO&,qXp]00$bc+USnQ3mcu:d5s8=1f6O<^!d"u'%%q#l6`Ur=ZW'$q;l>-REdq_J(pM6?C3SM-`,p)K7VKE+bjBRo>;ks%#Wpmn):oG!_G_\&>4;Kuh5$7E_ijk"6jet7P.PWAn-rS/S%VF-bDI`so]6)YdrWB4!e;YW5K438_Jj-]P1R[W7kmI=YE;rc';=eBt<W00VXVc6W3[`26].Q6Va>$e"FZTduhb8uYm:5NO*ZT_0e%WRu$\VoI>GZ]=XS:aMDTSD*U*UV'ObPK'CS:9nN250jsMlUR,IQMAC=T!:&9(^uuS?Xdn6j.aFG5B^dcT9m.T\BI,iFm?K\LaL-(%Vfo!Up&7M.[@/ppfD?dVqp_S=3`hlDg:W;(fC5[*H7(l3ohKn[q1-njel7ZUDt9f)n(icB\dIHGm03#?B-683&>*hnL@">Q6%$8W%+?nUf&>+%)4+H7O5L!NuSs1."ka$<_\r&lS1ja5`TCZ'ur=e?D#*kAg%rM0ljMe[nW_H&kS;S4`9O@(tls@'`:W&fqr%LKaC.%*[%5Na3p'pCjDnR5gSC=Af05<J[LY^W_]gJi(eF"Uom:Jt3#bHa:c*a,obT8I3,OkmZ:4gi^uIX`q30C0:C?'6i,&K_aOA`j\\rE80"%fLUCiD'V=\)k61ST-R$t>#@"*,<h#DmA[OVr)DFl._:Ls`93ZLRQjGmJjt-fXW?u1g=kNGKf/o!eZUX.b7;(0fJQ<hL>dn+6+,[)%MDp9f2FD%-&Lnic:9CJMC]oSkn`4e,e$O_cM,5d-U"o!9*u`0u,=mKfW"C:A'rA!0MK_[-"3_XSg,+e%Z^f+dU1MKH!j_1?I,cYM%G:\k**p_,OR8cl)i]8N&])L^,"V#h.$X>8Tg8og>G:[12)F^ZL7u\]M]+_R9:3NCGE[SIrOJtpK+Au(ZPZ"&c?#%N"'AZ/G,?!4^%KLf[`'>h(hK6":r#Z#V2+[(`a.AocuA5B')8YjC1-9WnO]8$(Y=mIOr>>O+'345>OH56s>e=uMOJ(2l9O,*UZ/_M8SW1<5$Cd'l4%+A;L)(6u6)#o`fA7:jo2\C]dmItC^C]L49njCcl;6(0aIk%[jhbq*XApSpr;'$VtkT1/(1;rq!s`*C,9R<D[0U.p9I9'D_pCJWBP%;JLL?"Clf0VEN-ch"-t5UZE)\TP7hY8oAnWB[JM)X`;u88Vc],0cmcY`d$.-T](qMA(g3Eco@U8B\D`Jd,l/jWJ-r4$ed[Vf*EYL%5g+%hJqcF'["\;A1skh?8pf-d5J4Hg[HZ#3%@*EB[Ue&)-&sn<m)Kq-r;k^GN0:(s9k/Y8IeEB8A]i8X[1K?,S$"J)FMGV<ee7(V%eJ"r2btPAhkgYXl?>I\3;ba10iI]YAL2PkEfep-Sf@8g+eI28\L24-;QYt7t%@a4/P[T&n`mL$&1@,P*@=NCZ08KK4)Ldm%_u<3-%S,EX3rlf'*c$!=.+!m\"p'5HD5>"T)m8)*knX,QQ(,t%A*]-d67,=i-rE3nc2rddBPpJa3V+dk&:Xt?P<L`\9'6pZ/RJ&18VVJPV%C.7EfEBH[d&t_U^p+0CDh"4*Pl5"*f_Z]&27OP$FX\_dd1tr[#lp9sG8!0h-p&khO'WH0L_Z!j\2J?^&%NArX4dX$%V5t`H-YV/-%Ph!\F"Dte)f/DBYjL*8+":]^BZF8F.[,&b1)@"IM[GCga_B(#,mC!rcUaKj.UGTE@StO=]eIV(\:&.r"gRhJ]Pag5^/a8:!naU34%)d%hC9uobf#,S3)9oJ18D18RqBX^.f;m39&I%mJaWRoVh]J/G[e`Op&Mq1m'WGPh&)R]"n"g+`_B9\nFZUi.6;Id;O1I(m/L&1J=%iL.9.2XHjkh1e'[47$+s0MR[JLKt;AG[IUl[S>RChnnob@9_*_D0?&1[qh;XF"'4Mf?e_g(:<,$>dA#-)LA]%6,PO%%6]@O/_cqk%EBJ@Q4bP:u(k`Yk2>`;<m'e;-Z%P4(/U@\&d.3*8\>(+@LJX[u:^&Ga-o[4->EWcEr*AiN2@U!3U%6s&XsJ4k2@WisBb52g3WY+9%GqLu1@6*eU9m;1YHkn<7S9ggn",(<()J![r+2@gn`+RK_MfR:>TTL>23uS68dHZX1(c;,cZ.g?lanAiR*VDoIq-ZM+*OKX0e/sZd%ItH6XPf"WN@Y<0#NFINlem=U$Gj;%n[6[*rTV0gOjY2)U>bfso9A!_\GLUPjB"*DI4_Q!&6,Oi<Dkl'[TH-hi6@RG!N=_bU[27qb%VfEqHlLRJ9:sdpSEYpW[]d![$')#G-c_W<ch;GR8?pV]%T]&\nn42<mOmI8<n0_oE'=@"b?\0>&O_X:D$hZ5B3/CT0CLZC,W!BS2%[,\,j$-0A1?/tVD6)pY9hNuZ*\j`'Zq7Z/]U_[f0Q.'KZ<L^/eSaSkE(9Kfddk]HRoC6Ec5"O4uiEFTgVfGt<]),e)1$h]_n0_ni%;n9gFb[1*)Cl]n/Yr($0f>jF327r*Oj'Y0jT:k-Rg2;CP2goH9*Am[#)ZHBUq_PkP;o>6#iD7hi-YUP!\SQb-GCF9jSi-EP)ZHC`%r7mk@.:K\3r3:o>P!XP.%tA?h'/]Un)ZHC`qudIY7&nq/Nu'YN5n!Jp)ZIrB_5ZC;d-rDrpk'@Q'/]WTGDoJ<T:k-R>0'Ld0PI*+%35XX90PF(*#`tn\>RIh#:#sg.#;*kAB_b(Wm$Tep;o9Z`&>,Vl(Zjq?Eq=OWK0H\W:XFpDU6QPVqMTCC*`eVthsX?f(9P4tf3X]2%"pKtlBsl+&-14Q,HS.24QQeUjReEuVjj\$pf#CWKd^*Vd5AO9\k$@6R.eHa<GQFP1s5iQ"b!,_r*+@L0TOD*P0Q,arb!+Slcjh!2%1lMfGHVofX0^j'/D)O"[3#AsqU>0uC[tj#"\P0W[Z\3Og`qrZU%D`[sl#rGWN=/p>.[P!Jd'+m2fV;Y]$FpMtnPlZEj&s9kTOCXC%YXc1I<,Hj+YU=,:'=@:/Y1XlP8lH!scnHk]j/H:m76u8a?3o/ql_]ad8Kg?bdW6l8Z%P9Oj/.nZ[);S?%=<\]4[D0dQTLN@WuV&J%c,U21p&khOcpE&1Q=#lo*o3r>#S:01:seckEnD$^r6ZNILBt.-lbEAH(]V*p80>!_</d72os9a*J!hb.:+`(GcMQp<d21`R%kk+<%rrn(I0A6]Fc;M?J)52g$&:-VmmrkrB#e`ZR^Y=_cH4eW(V%u.2X3ArFH(/E#hTi`#1\CCs^VLUHb5fc5gJe%)+\XcToO;U>5/5";%*6-kJ-;j`N]GB'Roo0blr`Wsp`E%oYk&PW/$5>i\IRt`<hY#jW/@Oln"b4K=L0jch<"-J+)rIGUSR9(!FWcEFr2*a.]o*.Ms"ru8%roHp'I)DSF$DMaY<oWt^i#A6)BiRUrLEC!hSMTg45XZ$oHbt)pdqc)RD\p@=$[>&VHKS6OVlU.5In;8IhDK^=^F\"[(&==D1%_W*%Q&[cM64G-0&p/QS!*4$DV#62\%)'oX:;P<3J?OONg\f#N%)"p1Jt[CjoL>=sY4/b_^d:`r!R(Bl$o!19#=EF5r`LuJG%9Wakj9U0%POp`lhbFHR^M/7nQV=oA5mdJtL7T1tRA"gV-%iT1<)"/:6dI8/%FOd);FC)>aaueM]VsHo]jrH,&3V]&2FT9M_ZZ^sV<`m"h5fRs%WSRPYMt-o223f-[gS&Wff`]\qJbpgNT"d3<6uUVq;`R/9ipd0!]=po<X>_^<k5n(*S21kmE,C0#Vj&*pB3pHUHHd!f3-t"/c-_._%BoJX_Hr0IZ:k>>W%9J.a<SD:^di_!k'qj3T"OZg]@70\T"hD\'DMVU+[-&0uVgjO7^%;`\9?*8!dCX,$!p_.DAqua4IG<eSFsR\f%R4*CU8gL,"DX<o1fGLB-YPqA/)l)Th$c_Ddn&"O6_WY9je>@?b[Ki7lP'+HLRH-CtbB)aAkhYisa4.EgB[T]#Qc!BYM\JSJSkT3F%GAkR,e#L@54!j/o_:jl^'h%MZ,FQ;MeWH.FL>FdFUUjC,Y"h943r@=cCK7HZo1m9O]4RUU-Fu##JMu.kcgF_GZ=bsaZ-/_u;rQ"9%S.0Zh:.;_IbZ#<En!YU\=)T/+,Z@#$b4TllIsWR/r%`&ZMLr7H;\DLeRQf9$-pAUKZ5@oN$uOq\h>V4;pPPYg9ao?(aZq7K:<HB]%JRS]./":gVU?G$6UbI,HCjG2^-\aD()D`4&F,^=N]4^`uhp.)REdbpZVUS##m&<UH#&X>GEPN&t^0pT9cSMW/H`22A><$q!_#+K@%Fq!!$GX[Bt$V0Z)CuORuf+dX1VM(^g^.6U_5bW:;iTORn5EqWOb%`l.:gSR"T%Y/7H<:;?mg+qhIDoWB!$Js"n,W-537'<%koGd?%,e_+Qb!XT=!l7aXYJ\ZtT_&_D4q:6Sn=p@B]n"C]V0A:=.-+GH/q_Rkrot>dhXEJ?Yk3Z7fS-.\i1>JI$e.mIHG_<:P[53O_pTKY%5f(kf/cP-b3b\&%DhggRhs(sH0^f^AhCraJQJUO=1pcgDTWKY2,G5.(U(Pb'JehWcLj;*[Mh]W1$IN77)d.Jb,>2qXTV1.]"Y_>Y%]qI(lbgIFODSsmAAfSV7)hBB8QX&[.K$kTh-`CF4^_9\O7c4U<*ENb66-[i%[m!W7h;gh`oQhVb$Dl@0Y<jeRDP.ju]mqA^V:S(m%<3A9C\tJ\AG7K:2koNrZdL5,6:jUq'1/N;QN>.U`2bXF??4U^(G4bD<(R/8#&/UR;BA*BN?>!"5P[9+T#"c!c;?<TFrO`;)YOacA%6$hA5C4Pq;?TsmR(N?@8oQn:R6?r0U/gS-uL($YW]?:>R(U0p4oXa3f5j@qArt>a@]6/bSlNUJ,d_".0I7h_@W:gptMc=glMU)H:%Q'>8U?^74+fN4oI\c2i/f?Bt@U_ghK2#pt!"pVkYT^,;pWTd9QoND7iBe'*+]_3d?G^Ue#Km`qDkr$co6.0P"ed(0aHmVC1c-M0,%oGZL25^F6<:!s0W3]qrbRQ3rioNGYlkri)=\,hcL$'^oD!T;Kq#s`eg!;D_Mk2?Id^#khNdVBt[!9lAYquQ%>F+ODV[20t!k3,+Z%CTtANkqu8.!Rbc*5>cefI\M'^d=AmoNZV-Vkd<[n'=+Q^-52K4BsrQaRO?&Skqs!"!9plk\Ka<ILZ%A"kUddfjrk?W]c&;AHAto,%V,$Q[VQdk`WuamLdApYR_!"dr)do8b\0#(V&YiDFLI'=gmKT?J"bnWD]aEI,LgHH%#,51Yp&q*k\REA%X"49,6a$]#S2+)QY/AVe%!=brN>Lep45kG,>(Q)N.bVs+5H@cWa?@_Z7dAt986I@U!(PprDM:$[+?4GgN&W6_8(Q)N.PW"5q_B^g(0+`T+kge[Mf;]5)nH71>%-@eG1X5)`dkZ)gt5kM'h[XdRA'0q-4<R:2&dAr4@J`m8B0G(q_nGs37lAc7.?M0ZdMI,s#'bn?MHn(lS<B;oYHIYD=+F9:r1(_.a%rXFZiok4G`?8Y^kMI$_tZ-BI`^kM$E<';^^U/sM=L8#Jjks3XsL42G9X!W3[dAu[U_<=m_]>3W1p&KW;=$;3AUK?\6U$)Zs0bh;.%57<?TFWUrZcd6/EHKFY,BlQRmG6LC<*'Q=6Xr]Dcd0jc$.!ii7.4BM]1b(2*`B,#id46Q-K@(&<AN5!IfNN:e!a$>#?2uLnd46d7%2Fm64N4)O(YiSV7@*@Q__00rK%7RH#q?3No%/PXO<t+qYU0%9b"%BD<Qj6*apk]98??'ln7]uggKVDQGhulM&n=7>Y"eILe^#HL.%E:a4l)3/%n6Pg`UCO\,po/I_O18Umn!We<f5XE<8/&"$Zd4;pk^sO[0HG\&[:d)YY(#L\&kQPEP*'J4>(HHe>,=es4I4?4"Z_cXE%(#NickQTg"*51?g&3,!TDiXq`R6_9PYB[baNaCXA_pKtsNPa'n*]_-c$`If"HGuXn3-rOT:I'5[&N1WB@YcBO]s*2+*5)El'96Dh%F<DR:5e2WE=+$']UK9Rm"%]U\m"D-84GJWd(MMH?oIe5%q5;6r'dGKlkS7S[i91o,pl3ZOAlXB/1Gdc*]jb^Z*'JAMc-\$g5JYYs%-8iTd1L/ZW]je8K+MD5J!['W>[ggb9jr$G4oAU.AoM"4%8^D`/R\XRO[n1lmEuUrWr1-#"4k%!%dOY<U*gE6&hF?ati,+cdnOMiJ%oM"p99<W0a97m(u2^ghA^<P(VRc#klYP<HY:jVqV%4FMF'-S^e)>n?9?A=;NPb)=A7d1cpDNnK$kI@2W$j\dbn!XUP;sGi%"c-An%B"1]af>N!-dVY%"i^W/M,Ar`Pp*Z0!oWl5^"JqI`AKrV:ln8c5l!:slqc&5#12kqr^$K\/5j;j0?O'1VqboFMH3TS&V.VKm@=!2q%.ghA>3LQ_1r>cV(4nHkAdPJYn0YQiALk+`XBl9:Z9QRQ4Z5Jk1oZT<S9@',L_t:5]\]iLFk"3G<bM>l]q(WB8/A4uOB;`^jfpkT8%H7#GWV3fG`KVb"EKnQ:8Cq?TkRJF:P0@\(kb5i>LX9'294JNl5OBQ++kdkJSft9gaA_nXc4bMAre&r0Q9[h18*.d@Bc#/nT2TQJt%SpB^Xl",JeJa$`E)klL6ibk8mB"2KDT#'j7l"(-[d.FWcMpV+?H8ePOS%K#%010%KVjFG7PZUpeT#a?gdA(]-),MM6]kgLh1d,p>%NRQ&OMC<RD2?8k="TTaG$Eum,'jue@(ZbWY,ZZ62P,^c*,Z]J4a?Iq$=P/$]eL.='GX>:Cn:]jMTEqqn2$Xg=q([)Tp]U"-nHk.?%X\d9T6o7XlRkY1D0*;oAVIte"BmLT7*YKQMK?Qf6J-&'db6@r5dkgCJ1qal:J&E^brJ6NNI\\>VqueXp!THUs!jIa\"CN>A0qD*5%<-'2P'd!nu+7WL4HSFRa@1Qn^l<Po>o*_!nIR2H+$TYDk**rnVPTpfZg(Wt"`$aL3Leg:lM-Q8Ieunmpnq-W>L)odj]K5%^2B=Wf%<FZO>r#n:Tkb.0O5<aVHbC4g=Vj@j["/hLa8-)I=RiJ=0hUa7ERn3u^0*h1iq:Y9CRU-It2rXD7!H,d=/^h"=#KdEK0*bMsn_(/U%RU-I42WA6))Y)L3m/kb[!Mh&]dAcBIZ4An%O71VGJ,i=t#J:tSJrp730Di9cR[uG`0MTk4&t#QZ%1,_W>;\;WOL^%eO&Y'0]Pi@@%HJZ-H35+\!/9#nQPSc6j7@L+L@18Np[l6!70:N.M9[B1IR&7pd#,^W:;PqrjQsTK-*&'PEJRFk:pHUE+Dq3JF6I$Wq-d_=$#HAdd%:&#UQ0YKoEr%>=[9[eW7AXK']'b/Vr1_'bG%[`i[.1Obt1SnN+E2:_+M\6sm^l8Gnk9j'SoF@U3RbjdPhkD:@oY<:$VJ#gi@=!jO%i?5W2dlWAu@=#p>)5alVD##1R@^S?UJS'CF!mU]ID>H'P\P:QEPHehJMcNePblX9(+.s(lo)l@.HAfe7&*i,5e+84#H$Vc/V['`P%3'@@hN77A#\T)rHN7/`Q$fgmWOD^TFU9Wt#Cb)CIq,uQ2]g\Cpq>&l0]g5jW:G6D'#!qTK2Fr),A:lGl%j\l*J"Z4@q\(g[HjGBg%p3_+Zl)bkn5.nr#KcMf(ks\;SkeaJ=nFWkh0BT5FTLJ/r(\i2jart47!K%LoEbNf"9eU=C!DP4^h1qaoOe5'P:C^PB!Fc]OaE^;u%T>a@M$_(uudgMX^5gtYF@F*k%*qh-uQq#7\CmkoQRm"*rd@dma[Oc)o#)/%1GtnR4hQ!hX#:)/^[:jC++`<a7WeNZ#T]rQs)g/q`%,?-rB[jWuuA"$`V$NupTWj,DkK8IW<*L>@O6[^"4]iAR7%^f,PHHFW)i:L'0SN;9AP,Y*3)^Me!ZTja8)AL)$HQX(^gOn)E%s5[+%]7Yi&O9iJs5o]Mf/TfVd>2uhM6,OaIk[Asm`^UuU:k=O*NL`,[6G_og)EW)c<XVW?Ok>d`N>@o<Wj*oV&3ha=%6L0^dp'4oOQY?5%l)e-_*/H`fB8M%9SnNGNp9]qh1qcn9g.2C9hQ#NFUq:)cK#[?![B$aV'(1:NX0sBh\.+n0fq4qrO7)o'oN'3uYc-EJrB]cCB/Y!J%HAdG>C@At1U,MA!g,h"%<Fa2dN>[927?.4i7i,QZX2_"cC@GClB*jl1f_>W;hQ!hl$@jt88r_Qmj!b)goN$rG;ZN8#=_cHnKPo>m%1dsqkiY*Ur9i3OYk#qTV6B*\4YiQ9I]iDs-h$S\s7BQ?08dd>d<Pu6BNi!Vgl8E#VdhEp<HE2d7$4o&-<V&sE,1ncB(,S]`J=u//%>'a'6rDkkmoG.a[+>43`JY6E^7)]_;TWs[fS4#)i<fNYLK#Uh@0G-kkRX'3qSR\2H,-fUV(f/NNU.2'sNLa3?BS*+jC2A#;aq?PE%<Fb>7OclC%XVtF""HC*4";K?hmmZ5LDutmBU>ZVdYs0oC"YEn8r.408ljm:-5=*10(k1!F"V$6?kA)us;LU7;_#e]hHdK@kH%P:_%>('6XH_+Vk;&f3V5k6Vm$)Y1H(h=g3r`I#Yn`jNHXkNZSLeQ:h[R8(!XVs:abkn/\H;PnPMoO%&0]KGjFk,.1#)rWIKo0krMr]kW%KQ'RJ>0toY#`\cO0#f`]<U2<\Yntg#hjUFOC>RWWH4*Gce_#ccN<&3kO(ioue=K<Q0Vo_YhPt![d'-#sLSkrrDL79-me/#AogLkL%!fF5Qo^jf!VruLjl)blTc/&GjhBF!/9-*_#r<"ae<GO81d14Yj!7P.0N!gQLWQtRA(UZCGcPkB6cU]3^6,U;4*D^U9]S@16^8]:H%+]rF2mK<uCe;^78XJ#5&jk)aekXof?X2]<N6">6dFX,i:U;egnMrkJD-;KS37;9Cf`?)Fg<A[?ee_]aYAX8p3RPINSeaeW=hL3Nb%(b6%VT]rR^H;VuB:T=#KT1(i5arNB2LrR@3=Mc+P\>()NRbk'0(Zhkk]b308W9lJkBXk1L#rK=q_]Z<sK7\hDlAqV&XVqD;AK.EO%eJ"ghIs@L1HfSENT7t`E59EY(IND8Qp!pIb!7^UO)lVA5#BLQ$rkF6R"V%D:d"(BbD*4'cWjcZf`ri?NBG7B^1n]/QQ=#lWl$Y_\%rNJ.HoiCIn7u$<2)BQ^Vg[%eQje\kq]8r;PmpQf9\D7q:]M#\(*s$oB1ZQhe^"paT\9bd%[t:Xs;/YCYm=@L#obIA@jI6q\)_o-S%]=M!`ol`O4"fo,u(2p50^6%l^5Q6lWWo!/>'VOaY!KK^*1;?G7r-8NH^"m%\LoPYNg=<SD+b)qe&KuW.^(DN<'e6:k@)[cK$bJ]T%eaopo;"_]&78WZo/mVlX]XJk[]s+IZ<4t!*JZ9M-.%ojZ-Z,f.@Eo.Y?C:]pWu!,4iTg4R%9U=5Je+qhGjc#@0>,d>Wu'?!JCP$#%B>EfgX./8/.R7<R#$*CYjo_[IeWF84_TGc\H=7+4=M8LDg\b!TMmC)\(0*#hCko$7XlC36:AOFH$rHW62]>Nc_Y5ESotmUa;"^u6%<;KfFW;(-#/h;=8-)f\.GY(u;(W>DQWY`Fq'3+F,1K:8/^GGsl.\tqoNMS6oq5Nd$"kAOgSI2B@/Z_f0"fRkX,HBV6'W+W^c]MpQ%iYI6ORmkl>^7\N'9WDFoE;P*7KW<)-"KL>Og%bJb^#Z3mk##*kCP@S;AP/9'\Hf/O5O0+dmomF[01K'W80SUG0/rV:_WkEB.u_ie%]@,h2,cojVER8VL*R>iXEV1Me6<q3&;oOWpG:lPH>_FqKmRb@I3u8],n&3a<V1E_!7Tu^ShK$#!.0Zb4J>2=7.fl`f8l>=*XPTpR%T:1o2Rls]S3ZYQ2HM=K;GrPu.#83aXj?**1;>%(nnsr#4@asTXRSYnSCa?ebr_cQl]h$-X<UYC=?DfVO2ZA"X!A6-P,QTNtr2F_e%C])WfZ>h69W8@3U>g4^JMe&R!e,B*ETR-@5nbX[:e[o.I$\&Aia=.d%06_o1/?%G$/fTJ3daR#M1>nncj$>:Qp.8)o$P2?>LQGA*%KqNai##7nanUWqOWo!DdI%o*JJN<3bonLMg;"]PJPYh#W%2>aIi+N/A)k1VGjJ(Ts(oZ;1T)qu1"Ag*%Y?g%pjqm*^*6;J@l]e%#%5n$H#&X[^6^Dn#VHGarVR!Q[+)bdq2W'KVWJ'86tDtp)/OEtEQliC5KPa.o8)0?PbL9VC'ogU)".7&S*(dPdnGXKt"*Yt6DB0qo@%HH*]#e8n]/TUnAH2Gqd`Ll$HW`7[OA7cO^<q<M\rolpQTJ9m,3mIAfZ#3mdDU"g;XDp\RMbn%B1:X;pa0%HOd4WTIM'TWe,9Wp-2%0MIOj!N*>>K6#Er&f%8-=Hr)lWU[]%o<G5=ij<CJY=/PSNXqSN?a]cc'R^]gDq-o19]eE9:<b6+aV&Tf+bhu(@#*3&_`iIXTTLTg%&b;aa*)7kXZH_om+r9_P$n^Q)$)Hak_pKESBc$=CPUtl%VI.EnZl>7d=E&L)%Kr7tH3*[E8hY:1T_-53Phtn>-7HRSV1R-:cO3<_%":Cd*7FsT#q5<#/gpof#$NPZIHJujD8MAja+R'>I.3Rl/HVY(r8nt3up*S-poBhN0+[<RhJG_*R!_RA6CnP*QKpsP?]s6$a\/PU_%TO&->cfIF?1JSUFh?XZZio=GI,e^I&XbR-'R!j5K!B9Ro)LT?J$c#LsHG^8DJFnTZeKF)[YU:^0!<NOgh?XrU]u'&^!b.7_7p:H8%]!4MNoYM^[OC$R4!g$_*huV7^:)&drpX9<h^$]S85^EGm$:q?*;B$TJ*jPh2KjcGR]l&--+MDZ=&0SYO0nlFT#?Lq[1>ppj/IJ^\%5^HkG%8!am-j3,F6PKTt(C'>YoK#A`5^Hko%nNmNnd1Cai2He+l\>B?dd-a1hAj5ch4U"(DS@A=^$a!.OEj!:"+N'$TDg.RoXZDS%T]pS$k+Lu7fa4$PpM;-4]cNP^H8urd`LuH!%P0TQD@R\3f>+()=9("Jl#dc=R\gl,ZI&6Tk6.IBFjJ<!e*@$9VfuA$ZWGNG0)Fp_%.KEcW_+li#DQ"+']l'b[1qde*-8`F(h&2mMot[scnL;(GM5P/lIp-sA"6tnW"k4R7o#Ls(?=;`De*DR78$]o66.>-@8jLkk`W^qB%$hFeboQid^&M9%K_!-"!qn_Oi6sC6tY:l8*AjLOY_il45Z+rfa[rcS8I6m$2JU.DZY6i^ZVBTtVpUqK6?KWaQQsSqZY@2bU"\^RW%It?j,hjAuZoc<$1q=./rQJNA"]9ln6pB@b@'GZS:j=)PqEQ#mR"i0a=('^YfIDZ5cB@nml^%:!F7rG1^H*NsYLSi\I152SA-JG-W%R8aSgn,*M_59];n4#l3aUHP'=MG:hN_Vpuo=Pm@lklo-_/A:AeTfsc7&A*BXiFr>;Vsq'Dk3JV$UtQQT0M;^GY6?bT_UFJ+e&mOU%UHD=@d%Y-`3&&$r<X,GQ]'EWP/"1a3@MW7YchS4]:CFg!V5O.W$;@Z!mKuXkEHd,5GMUC0T7EaSkfp@(Rd[D`oE*DXQsOR$eWcX5%niVCgn[W8#qinCDWV(eiCVGLSdL.U>:jUBq:fr&+6\Eh!50o]_U%k,[W.("i.)!Y"IR`S0_"A@5Y6D)$=F*^!BGdSt!nXW#;P%[)%Ss5l-Bh3ON9FXUt)&EZQ0>OSRl*XuQ"9N?]A3oH;,@j+)"fO:,^#o2F.)#*W!g[.K_6<`T>QpN&"@#3f#_%FV&H%241*[a&?4-nN%__4`o$F05l$%>5*[6X4+;hg4Gddqf'Zh,/sm:PT?&cBl$CSlZudVC1Z^s[#<I)+0G!T>D8;%!Xo6=kTN/3P5jc-e[<kFFjs!K1-s%ob"3SlQ]@j=%9+iX\Za,(2/-8LZ?Oe-O!\G8:'Gtj8947oNHe<M-/7/XA>nqg<PD/UY!_^J>:]tQVYPo(:\b1-ZJm;:Z1f+T>9P%%Z)AQ;!(a9s/g'mDciK<$l/X2U2+..l/8>4&Vu5$EiDY2?K^cf3kK61DWWBW-HW&Br^`:&!nFjGN"l::kFGOY#%gQ95li!jR"-E0?%6J":uDVh<cd]3a]0+2P:k^&Foc>Eq8l.&&N'=4Y6COT*+o`[sk^-Lr5(FZu>8AZdgq?!Kp"#j!fWXCb(>,:>'U\*i'c+DYQ2'DIC%d]<?i*L'l9(jS^7\D6B0EOj4g%7!$eW%L?J?0/S$@>h/#^':H9"8tt4We#Vs%+RVXdjhqEG&K8JAZ,g1SMF.HdnV'd$r0LFX8^H_%DP!Qm+((t/VH<^.0f2%s@PCN[nf]\@4VR&he#WIe(RcD0HGfAiT[em2<!07_BUMOaZM_fp0YJCGFM\pG5c3:a33[*Bb9)uNe#NL:%-_+$CbW53PC1,>L/:WZd9s:!G8$E&%:(-B&i6)]`ZfK2-@*'!3Is))kY6L:tn_jP*Du(-_EPd:W!/VB"W#?9rE)@'03-++VkFh'>%i,?F'.UsjDoP/OQ&1bZUT]oI?hOs+5PMVtsRIP3a*\2\5dkg^T1d,@K:"--aA3n]9<WK#]<TDfKl$7UUj7Fg72J@EeBJsOMQ0An0%oP21G&YQpE'=t+Hk1\tX_,hjIk,T)e^fMaG*hS#4X+?a0J-%!U!!Pn3!Fid^4M;(5%@j#60/-/)H6<GfcT<&4VcP%4J^^ZsRXrqg%*nu7po>V$TkuA8^i9>MC"S;8c#CQ%5.M+@SHIWQ^E-g@s_)smLR:)Um"YL!SYBjFZ:9PQ]##;@J>R4,dm1tZ0o6(M]kuA6/_<H5F%SoK),6Ubs?hNu&@^$=Q$4M>LT(HfBGW#%QZDr>#p?LaBqTH9R`R&=!ok(9MoN?6<m.gC(2dpqtSoCRos>6+?/+bYDmh@ROh]`Lb5%SmLr+'V:ojNA+2TqaMF$=.j!<djlK56I,2r&g(JZOf.A:-d:%L\YaXuhM8s1]jdiR4MBb5/Ng]JWsYAg\#V2XYF%rd:X<6IR&=$D%9nCdbXqo%A'sjaPl$907oCRnF_#X.c#JgE5MJ5leot2T*JU5;r-\-LHne48ODj+V(?L_D@U0d@t)5:F<eHA^PGl.tHcWb3&W95`j%9[kTNQ2p2q?*Ag*`Q0<THH!d<J9p(C_a$BRc=*GR1#rV7Sp0NT;6P6.%8j;/0*8(R4;nI'kFFb0eFUs,7d:`064ih&g=\kWDZF7@%?84/?U7O:I0i>-)!eRB6I6pWWo0+<El4oB4+mKe3li?^90g,O0]Ut"2H<4j3nP+Llg4?2((tf#@o<okJl?TA=JU59T*.W?hd69ZU%mnR>b?89Y.TO'@_#,#;m'*(;2!g*\Y?L^A`4?`.L@\-m\<<f+fG<7NUYCMO^VrnLcbgS(kG(?JlN-p2Sa7^n#knQ!Xi9>M['_CsS%fdlRa]M49/HA,u?E-gA$`AkP?":@-%CH!!4HVNV[[0^0X%P-]+'gISke+9^mk360`Y.WfZ'gJ;*e)S%Dj7J4#+n5-:4,\B1`=-O,%HJYpG4MAUA$okrdN]7&a`5c+uE-fK.CNt0EO#@"2$=%@kHIn,n`nmCu:HZ="Xu/=)D[L!G?Ju1rSDNoZaSZ@LMnDp2`trJ9l4lN6%6.GLl1+)9$B\*7W]ZZ7bHGtq@!;4"rN.H;oO&Q\`<\:AB0Qr,lO'*%eMW_Vql?Uu"'D75)]ccST#hT.MMP%lgl@n&2+R0\BYF2=*%G.`C)=*R%6W)rnM##Hu>JceiQpo+^q?J$,#TO-,='a/?/H=6mrLjEJ3SK9s]!oc\L4A-2^YOK=4:bV1A"&LZ;ZNF%-m.Nr-;o@HR%+SAd;CL8',7]JT8%oKP*@1f5?0`i;g?J)[kU0[kO%8\_Ej9&8_q"YMrhQ!h*Oa9?MH==i9LjFd<9RqFt'-MgO`QsqPora:*-?P4E%pt6=ThPs;&GTMR;(\SAkW#,.<JuEm.mtl@!:EbO?KkFA8HAf`07SrW<Ns5WGr+r7dOWQg16I[NIXT@]%5MZCjM]2-U'/)Va;bKCL%f\HfI?1II'SZB1(`a#o76,ObFeag:ea!7O-Ce'/<b"q/.)5,h1Z+1Il.R)P3cg^S0c'%4m.R%:I,`$c7B52sC5uN$3/X>c$'Kj(5%V%Po(Cksr2]s,`o4M=aacuL2J_<IN=]KO-\$emB:eB<SK"4UO42P5SV[b2_<cZUCJRo]tnDq2&sd$[q4Aj`ZYl%SMqi9=eojPf>T%;Q&$G!6BHB"R>"T2=gCFTD7C0XVtDA_>=nl-o3XZ:+ps+!1[BJ<XPARWj*c`GWr72$X6=keB?&Y!7Y5KV[]W`l%KSGi9=fK._sM;%2,&AVl"0).i:On+<T*LM%G,80KZ`lu!;425<rhnoN?,"J0F3qNkeY_P27ASJ(J1VhQN9l81RDOAhPtQX+m'%Fo,@o!Gn2J/oi<ZF%*(W%e`B8s-H;PneRN!tWchhXKVjEej0i)`<0F2&j[R#GrZB#eY$keCKgE<G1`<HJT^P+cOW-<XkG9aBnl?SFD"8,\HX.5!$"Gl:Y%oCSbHJs_]U;=F?JDk9SmnUgI`F"ej3p]fVD]gZCG0U`LQC2PL(-tia^_%HjKQ^aHO!Eq<<#?14;5g@PDfV2C+E&=3)rZnc*2Z".E%r)*':W5mJ##3lA+[llGBG2!+kDmqkq@kTK;I,p'>,m3g@NP3.:g#I$I5eX+Y+"!WheB7i]%FeUi6^t@b.,M+$fn?dY5>bnU2CNae%-YUGRq(2.01@nWQlE(uFK/Z;L1rj1#hBK4G)pgPrUPi<b4_eNsoQ#),lF&'RhRZE'4$K^-V8jp$7d2K;T$d1b4U[_QLJs0F._Ys<%9Q/J6d#FnM)Amh@RAIA`m,nRDNCYW>qmc_ugO2&sB7t$If[()KR9$CY9oJ>iK$Go1DaA$'hPt_@)1KX*E'[.N85JtR@!^\Dc7lq3%4&g++7p((qKKX(1T_)7oHXI[kgC9XVg7Y*I&8]3uK@$%r&rEjG*sdMDrWE[[TF#f='/VV'K,dF^(<nr/WC"];J72Q+Mo:?sZpsVm%BPb1K$Y>[Y7:XA$=t'2$,8ckUd%KX.JY-@sMo:?sJZm+KHYDK\4CD9;X2]m@l9f"EH1*u(oMuENAd\d=[n+$("q!rJg4ds:aY8cQ%l\Bt^Ye0k$mm5.m&=R@K89*"\QpU9C?YKB)T3`N+[J'P8s7F8`rqZ#3p"^..s2X$snAfI^q=;/tq!d/^dOu[Q[+Bg,k(MuIpW%4O%nDT_Krq3IDs8.<CqKLirnE!gFDa+*N8&>.D;1J>PYJ0q`LL:&G2og^2I/W5H^\d!-YJ:%FDuSkq&&8).s86gP/*BjW?S;,7hu7ne%X4pu6ot*HfiEtd<c?84JamjiYm12F/qt47e^H__p`A,Ja^]!gA^\H>tl9G<d2uiI'0E:(5n,E$!^\Gc$rn!Kdq!&s9qsoetqWb[G%rp]lQs7`Q)?[hUkH'Mb8q=-*[rp\`FhuE35G@,dnra3G=pJZA8M2M>m(]Wths2PrU%m^Q9Jc~>%AI9_PrivateDataEnd