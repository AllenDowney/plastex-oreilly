%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: batchsize.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 272 196
%%HiResBoundingBox: 0 0 271.5879 195.7368
%%CropBox: 0 0 271.5879 195.7368
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 6512 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD08FF7D7D7DA87DA8FD7AFF52527D27527DFFFD0E7D7EFD237D7E%FD3E7DFD07FF7E52527D7D52A8FF52FFA8FFA8FFA8FFA8FFA8FFA8A8A9FF%A8FFA8FFA8FFA8FFFFA87EFFA8FFA8FFA8FFA8FFA8FF7DA9AFFFA8FFA8FF%A8FFA8FFA9A8A8FFA8FFA8FFA8FFA8FFFFFF7DFD05FFA8FFFFFFA8FFAFA8%A8FD05FFA8FFA8FFFFFF7DFD07FFA8FFA8FFA8A8FFFFA8FFA8FFA8FF7DFD%08FFA8FFA8FFA8FFA87DFFAFA8FD09FFA8FD19FFA8FD0BFFA8FD09FF7D7D%A8A87DFD05A87DA8A8A9A8FFA8FF52A8527D52FFA8FFA8FFFD06A87DFD07%FFA8FD08FF7DFD0FFF7DFFA8FD3AFF7D527D52275252277D7D5227522752%52FF7D52527D277DA8525252277D52522752277D28A8FFFFA8FFA8FFA8FF%A8FFA8FFFFFF7DFD0EFFA87DA8FFA8FD39FF7DFD04527D27277DA852527D%592752A8A8527D527D52FF525227527D7D277D7D5252527DFD05FFA9FFFF%FFA9FD04FF7DFD0FFF7DFFA8FD41FF7DFD0AFFA8FFA8FFA8FD1CFF7DFD0E%FFA87DFFA8A8FD4BFF5227525252A87D7D527E537D7D7D527D2752A8FFA8%FFA8FFA8FFA8FD06FF7DFD0FFF7DFFA8FD4CFF7D277D527D7D7D2727527D%2EFD0552F87DFFFFA8FD05FFA8FFA8FFFFFF7DFD0EFFA87DFD35FFA8A8FD%05FFA8FFFFFFA8FD05FFA8A8A8FD05FF7EA852A859FFA8A884FFA8A8A8FF%A8A87DA8A8FD0EFF7DFD0FFF7DFFA8FD33FF5252527D527D277D52FF5952%527D52527DA85252277D527D7DFFA852527DFF7D59FD057D5284525252FD%0FFF7DFD0EFFA87EFFA8A8FD31FFA8522752522752275227527D2727F852%527DA87D52527D52F852FFA8275252A92727F82752522752525227277DFF%A8FFA8FFA8FFA8FFA8FD04FF7DFD0FFF7DFFA8FD33FFA8A8A8FF7D527DFF%A8FFFFFFA8A8A8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFFFFD08A8FFA8A8A8%FD0FFF7DFD0EFFA8A8A8FFA8FD37FFA8FD34FF7DFD0FFF7DFD6FFF7DFD0E%FFA87DFFFFA8FD6CFF7DFD0FFF7DFFA9FD6DFF7DFD0EFFA87DFFFFA8FD6C%FF7DFD0FFF7DFFA8FD6DFF7DFD0AFFA8FFA8FFA884A8FFA8FD6CFF7DFD08%FFFD047D52A8FF7DFD6FFF7DFD08FF527D5252527DA97DA8FFA8FD6BFFA8%7DFD08FFA8A87D847DFFFF7DFD6FFF7DFD0EFFA87DFFFFA8FD6CFF7DFD0F%FF7DFD6FFF7DFD0EFFA87DFFFFA8FD6CFF7DFD0FFF7DFD6FFF7DFFFFA8FD%0BFFA87EFFA8A8FD6CFF7D7D52A8FD0CFF7DFFFFFFA8FD6BFF7D52527DFD%0BFFA884FFFFA8FD6CFF7DA852A8FD0CFF7DFFA8FFA8FD6BFF7D27277DFD%0BFFA87DFFFFA8A8FD6BFF7DA87D7DFD0CFF7DFFA8FFA8FD6BFFFD047DFD%0BFFA87DFFFFFFA8A8FD6AFF7DA8FD0EFF7DFFFFFFA8FD6BFF7D7D527DFD%0BFFA87DFFFD04A8FD6AFF7DA827A8FD0CFF7DFFA8FD6DFF7D7E527DFD0B%FFA87EFD04FFA8FD6AFF7DA8527EFD0CFF7DFFA8FD6DFF7D7D7D52A8FD04%FFA8A87DA87DFFA87DFD04FFA8FD6AFF7DFF7EFD06FF7D527D277D7DFF7D%FD6FFF527D277DFD05FF7D7D525252A8A87DA8FFA8FFA8FD6AFF7D7D52A8%FD09FFAFFFFF7DFD05FFA8FD69FF7D522752FD0BFFA87DFFFFA8FFA8A8FD%69FF7D7D27A8FD0CFF7DFD05FFA8FD69FF7D7D5284FD0BFFA87EFFFFA8FF%FFA8A8FD68FF7DA852A8FD0CFF7DFFFFFFA9FD6BFF7D525259FD0BFFA87D%FFFFA8FFFFFFA8FD68FF7DA859A8FD0CFF7DFD6FFF7D7E527DFD0BFFA87D%FFFFA8A8FFFFA8A8FD67FF7D7DF87DFD0CFF7DFD07FFA8FD67FF7D52527D%FD0BFFA87DFD04FFA8FFFFFFA8FD66FF7D5952A8FD0CFF7DFFFFFFA8FD04%FFA8FD66FF7DFD0EFFA87EFD04FFA8FFFFFFAFA8FD65FF7DFD0FFF7DFD09%FFA8FD65FF7DFD0EFFA87DFD04FFA8FD05FFA8A8FD63FF7DFD0FFF7DFD05%FFA9FD05FFA8FD63FF7DFD0EFFA87DFD06FFA8FD05FFA8A8FD61FF7DFD0F%FF7DFD0DFFA8A8FD60FF7DFD09FFA852A852A8A87EFD07FFA8A8FD05FFA8%A8A8FD5EFF7DFD09FF7D52527D7DFF7DFD09FFA8FD07FFA8FFA8FD5BFF52%FD09FFA8527E52A8A87DFD09FFA8A8FD07FFA8FFA8A8A8FD58FF7DFD0FFF%7DFD0BFFA8A9FD0AFFA8FFA8FD55FF7DFD0EFFA87DFD0CFFA8FFA8A8A8FD%09FFFD07A8FFFFFFA8FD4AFF7DFD0FFF7DFD0FFFA8FFA8FD0DFFA8FFA8FF%A8FFA8FFA8FFA8FD45FF7DFD0EFFA87DFD12FFAFFFA8FFA8A8A8FFA8A8A8%FFFFFFA9FD05FFAFFFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8%FFFFFFA8FFFFFFA8FFFFFFA8FD26FF7DFD0FFF7DFD1DFFA8FFFFFFA8FFA8%FFFFFFA8FFA8FFFFFFA8FFA8FFFFFFAFFFA8FFFFFFA8FFA8AFA8A9A8AFA8%FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FD0FFF7DFD0EFFA87DFD26FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8A8A8FF%A8FFA8FFA8FFA8FFFFA8A8FFA8FFA8FFFFFFA8FFFD05A8FFFD05A8FFFD05%A8FFA8AFFD04A87DFD05A87DFD04A87DFD0FFF7DFD09FFA8FD17FFA8FFFF%FFA8FD07FFA8FD0BFFA8FD0BFFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8%FFFFFFA8FFA8FFA8FFA8FFA8FD0BFFA8FF7DFD0EFFA87DFFFFA9FD07FFA9%FD07FFA9FFFFFFA8FFFFFFA9FD07FFA9FD07FFA9FFFFFFA9FFFFFFA9FD0B%FFA9FFFFFFA9FD23FFA9FD08FF7DFD0FFF7DFD6FFF7DFD0EFFA87DFD6FFF%7DFD0FFF7DFD6FFF7DFD0EFFA87DFD6FFF7DFD0FFF7DFD6FFF7DFD0EFFA8%7DFD6FFF7DFD0FFF7DFD6FFF7DFD0EFFA884FD6FFF7DFD0FFF7DFD6FFF7D%FD0BFFA852A8A87DFD0CFF7DFD0BFFA8A8FD0BFFA8A8FD0BFF7DFD0CFFA8%A8FD0BFF7DFD0BFFA8A8FD0CFF7DFD08FF7DFD0BFF7D7D7DFF52FD047DA8%7D7D7DA87D7EFD057DA87D7D7DA8FD057D7E7DA87D7D7DA87D7D7DA87D7D%7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7EFD057DA87D7D%7DA87D7E7D7D7D7E7DA87D7D7DA8FD057D7E7DA87D7D7DA87D7D7DA87D7D%7DA87D7D7DA87D7D52FD0BFFA852A8FD81FF52A8FD0AFF527D52A8FD09FF%7D7D59A8FD08FFA8527D52FD09FF7D597D7DFD08FFA87D7D7D537DFD07FF%A87D7D52597DFD07FF7D7E847D52A8FD07FF7DA87D7D59A8FD14FFA85252%FD09FFA87D277D52FD08FFA8F852527DFD08FF52272752A8FD08FF7D2752%52A8FD07FFA8277D525252A9FD06FF7D527D52277DFD07FF7E522E275252%FD07FF527D2727527DFD15FF59A8FD09FFA852A852FD0AFF7D7D7DA8FD08%FFAF527D7DFD09FF7D7D7E7DFD08FFA8A8FD047DFD08FFFD047DA8FD07FF%FD04A87DA8FD07FFA8A87D7D7DA8FDFCFFFD45FFAF527D7E7D527D7DA8FF%7D7DA87DA8A82859A852FD047DFD68FFA8525252F87D522727FF5252F852%7DFF27522752277D5252A8FD68FF7DA8527DA8A87D7DA8527D7D7DA8FFFD%067DA87DFD72FFA8FDB9FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:59:52+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T14:20:30+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T14:20:30+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>188</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qpXks0VpPLBC1xNHG&#xA;zRW8ZRXkZVJVFaQqgLHYFiB44q8Ms/K/52GLlbvqtleScfqBv9SiuYrORVC3DXXp3Un1xLhAPT/d&#xA;ARy8+McaccKs20V/OWheS5muFlgvp9UtLfTIdXmOpTW9veXFtaubiWO4YzEPJLIoE2ylV2pTAqdW&#xA;J8+zlVk1PS439CGZh+jLjYy86rQ3/wCzwxVF/U/PP/V30z/uGXH/AGX4q76n55/6u+mf9wy4/wCy&#xA;/FVCwh/MCext57jUdMt55YkeWA6bcExuygshP18fZO2Kq/1Pzz/1d9M/7hlx/wBl+Ku+p+ef+rvp&#xA;n/cMuP8AsvxVQtIvzAl9b1tR0yH05WSOum3B5otKP/vf3xVX+p+ef+rvpn/cMuP+y/FXfU/PP/V3&#xA;0z/uGXH/AGX4qoJD+YBvpYG1HTFgSKN45/0bcUZ3aQOlPr/7ART/ALLFVf6n55/6u+mf9wy4/wCy&#xA;/FXfU/PP/V30z/uGXH/ZfiqhcQ/mBHNapHqOmSJNKUmcabcD00ETuHP+n7/Gir9OKq/1Pzz/ANXf&#xA;TP8AuGXH/Zfirvqfnn/q76Z/3DLj/svxVKTrXmOf9JW2leY9C1LVtMRzcabb2cjzJIoPGORF1Bmj&#xA;LMOPxDFUxtR5vu4vWtdd0ieLk8fqRafM684nMci1XUCKo6lWHYimKqVzceZrWeK3uvMWiwXE1DDD&#xA;LYSo7gyJEOKtqAJ/eSom37TKOpGKor6n55/6u+mf9wy4/wCy/FUrXVfNEP1ODVPMGiadqN96n1ax&#xA;ns5Elk9Kpb01bUFZ6L8RoNsVa0/zDf6jLbw6f5w8u3k14ryWkdvbNK0qRErI0YTUSXCEEMR0xVNf&#xA;qfnn/q76Z/3DLj/svxVQt4fzAkmukk1HTI0hlCQudNuD6iGJHLj/AE/b43ZfoxVc483pcxWr67pC&#xA;3UyvJDAdPmEjpEVEjKp1CpCGReRHSo8cVVfqfnn/AKu+mf8AcMuP+y/FVB4fzAF9FAuo6Y0DxSPJ&#xA;P+jbiiujRhEp9f8A2w7H/Y4qr/U/PP8A1d9M/wC4Zcf9l+Kpf5in8+6VoOo6omqaVKdPtZrr0m02&#xA;4Af0Y2k48hf7V40rQ4qy3FXYq7FUi85/8ce3/wC2npP/AHU7bFUVpYYXTq8nqyx2tvHLICWBeN5l&#xA;fc/5QOKpnirsVdirsVdirsVdirsVdirsVdirsVdirsVeR+YvyI1DV31L0vMotILy4luYbZrL61Av&#xA;r3DXDrLBcXElu3xP/uqOIFgHcM45YqxzWf8AnG3VLfRrG00rV4b5LS6s5JLK4sUCzLFf3MjPKfrE&#xA;aFY4NRk5px+MIAONaYqyTzN+QUOueXrDShq8drNaWM1g90tkGBWa9hvVESesvpRxGBo44+TURqV2&#xA;3VQGo/8AONdvJqL3Wka6ujQSXDXD2lvp8DIK3dzcRtGGakcsMdysMUqiqKmw3oFVf8yfJvlhL3RW&#xA;1zXxokLaculzW9haXMdqYYpBHzjWGV4LSP1LtUBnDhaqEZWo2KoLyfp/lOHznp+sN5o+t6hf3MUs&#xA;9mul3dkv1m3trqxtlIkZvqSPHfN8E3984BQ7kEqln/KntAa8j02L8xrOApqs3+gW8dsLgXchhLxo&#xA;0lxLKl3/AKMoZ1+KnJeNGYMFXz/ll+XuovYpL500E29i0c93Z2sVtHEYdPmmnuIo0F2/owSJOfrK&#xA;nlVkRyRxpiqX6n+Xf5dWc8kDeftEgg1z6y9jHLBHJS1nkiuIomljvIx9Ut108CENxTmWG/Lhir3/&#xA;AErToI9C0+yFy1zFb28MaXUTmP1QkYUSViYbMN6A0xVW/Rdt/PP/ANJE/wDzXirv0Xbfzz/9JE//&#xA;ADXiqW+ff+UG8xf9sy9/6h3xVPcVdirsVSLzn/xx7f8A7aek/wDdTtsVROlGM393wBVabgmu/wBZ&#xA;ueR+k4qmmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV555m/Np9C81Lo0mkGWye8stOj1ETSANc3pjJQc&#xA;YHhDRxy8/TaYSECvDh8eKpPqf/OSHlq00W91GPRNTkks7eC5kgf6mgRL6KOWyaR0uJaJOJl+wrsm&#xA;/JRtVVNrj88vKK2nmL0GU6p5fhnk/Rs88ET3T23riRIAryyVVrV+XKMMFo/Hgykqpba/85E+Wnvv&#xA;0XPpd4ustevpsenxS2LyPci7NrHGPUuIWq9A5Yr6Y3HMkbqpjH+cB1PysfMGgaM8qR3tlYz2mqXA&#xA;spB+kvq31aVDbpfqysL2NjUggV2rsVUDbfn/AKSIb17/AELUIv0be3enX1xbNbTWyzWSSTzcHllt&#xA;5nC20LSn9yP5RVqVVUNZv/KH5seV5dRjt7250nR/Xme2M2nw2808UUFzFFLI7XDQtIkoAdOLIPUj&#xA;lK7oVWMfl6dF1fzVaSXFtfxzyai9tqt1cXSNJd6jpIe5tvrNu1hZyCGBLcGNwIWD/BIhNcKpE2t/&#xA;kvZ62ms3l95ihurK9e8mhll0+ESenJFdxrLbxtHJNHPPCjj4TIWAeQjZsVR1zaflxbzfoy4g80Sz&#xA;3Dw6ALQvpNReJbzaZa2odXVRJBbXcnF+fpkGrs7jAqWeY5PyunmhmEXmN9JvZZ9Zdrc6Y3+5GeOC&#xA;8ISKaORi0cGqLyJdYxxHH1GqcVfRuj6fo1t5b0qxgY6jptvbwRWVxKPrLSRpEFjlZgpBLJuWoBvi&#xA;qKWPTPUSQWoEiCkb/V2DKEFAAeO1O34Yq0INKVHUWahJAGkUW7UYVqKjhuQe2KoDz7/yg3mL/tmX&#xA;v/UO+Kp7irsVdiqRec/+OPb/APbT0n/up22Kou1My6iPUI5TJccqU+zDP+6+z/kzGv474qmWKuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxVKrryl5Uu9TGq3Wi2NxqgKEX8ttC9xWIgx/vWUv8BUcd9qYqkOtf&#xA;lD5G1jVrDULrT4ljsAgFgkFt9WlEKqsQkVomcBEjRKIyhlVVbkoAxVkMXlny3Et+kWlWcaap/wAd&#xA;NVt4gLmoI/fgL+92Y/br1xVSHk7yit9+kF0PTxfhvU+ti1h9bn631jl6nHlX1v3la/b+LriqIg8v&#xA;aBBbG1g0y0itWaGRoEgjWMvbhBAxULSsQhTgf2eK06DFVE+U/KxjliOjWJjnlkuJ0NtDxeadDFLI&#xA;44/E8kbsjMdypIO2KutPKflazieKz0axtopFmjkjhtoY1ZLnh66sFUAiX0k5j9riK9Biren+VfK+&#xA;m3EVzp2j2Nlcwwm2hnt7aKJ0gLFzErIoITkeXEbVxVCxeQPIkRQxeXNLjMRdoytlbjiZRxkK0Tbm&#xA;oo3j3xVVg8k+TbeaCeDQdOhmtVRLaWO0gVo1jkEyKjBKqFkHNQOjb9cVUp/IHkS4NZ/LmlykxJbk&#xA;vZW7fuYuPpx7p9hOC8V6CgxVPIoooYkiiRY4o1CRxoAqqqigAA2AAxVdirsVSLz7/wAoN5i/7Zl7&#xA;/wBQ74qnuKuxV2KpF5z/AOOPb/8AbT0n/up22KomzEYv4eBLLS+qSKb/AFlOQ+g4qmmKuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvPv/ACg3mL/tmXv/AFDv&#xA;iqe4q7FXjeo+XPzjW7h+pXF1cyJJqiQ3NxdhYUE15M1pcTrb3dsrFYDGUj+rSp+zxj7FU6stP8zW&#xA;nkdodU+sW0763pjabDqU/wCkLiCE39mAJ5lml9WswkcUl2UhaimwVmloLmOSykugnrs91bv6SNEp&#xA;LOZBIEZpCOQgr9o9a4qm2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxVjn5jJet5G176tLHFTTrwzerG0nJPq71VeLx8T7mvyxVkeKuxV2KpF5z/wCOPb/9tPSf&#xA;+6nbYqiXHG8t4xJzVb16LQkrztXkKk/6zE/I0xVNMVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdiqReff+UG8xf9sy9/6h3xVhv5aX/mq48x3Vtq+o3moW9ot5F6&#xA;jtNJaetHchHVZv0LpUErRsrJVblqUPFKfZVen4q7FUi85/8AHHt/+2npP/dTtsVRNwyVuGReMkd9&#xA;bAvXclvRUkeFUfifb54qmmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxVIvPv8Ayg3mL/tmXv8A1DvirDfy6/Lq00nzXP5mstN0/Tlnhu7W+mtNUvNZlurlrmMu&#xA;ZJbyGExmKSCQPxJLMfi+zir0/FXYqkXnP/jj2/8A209J/wC6nbYqi7/1VtdQd2BMJW5t0rWgiRXU&#xA;EeBkjbFUyxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpF5&#xA;9/5QbzF/2zL3/qHfFWAfl7aen+a2v3Ik00wXK34tzb6b9VnlaK+VZit19QtfWERKpNS6mrJ8RpWg&#xA;VeuYq7FUi85/8ce3/wC2npP/AHU7bFUwlt4Li6vIH5fvraOOUbU4MZRt77n8MVVdOmkn0+2nkp6k&#xA;sSO9OnJlBOKojFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi&#xA;8+/8oN5i/wC2Ze/9Q74q848j3Hl3zF+YuoctD8pTQQNc3lpqOn/o651B5Y7pDDdF4Zp5fjWTkWaJ&#xA;CHFSRUDFXsmKvGtS8s/nKZSlje3jXQmvf0bqEt5GIIVa/uHEl7bxyRrMJrNoUhVYiImH2UxVO7LT&#xA;/M1p5HaHVPrFtO+t6Y2mw6lP+kLiCE39mAJ5lml9WswkcUl2UhaimyrP4EvEuI/X9OVnhInnjjMY&#xA;5ow4AAs7AEO2xY9MVa0sgQyw9Gt5pYyn8qli8aj29N1pTtiqMxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjn5jJet5G176tLHFTTrwzerG0nJPq71VeLx8T7mvy&#xA;xVgn5bacbf8AMzWp5r6a49R9WNnCZ7prNEfUVaYWcE+n28KlH4rOYLuT4/tA1qqr17FXYqkXnP8A&#xA;449v/wBtPSf+6nbYqmk4jS+tZWajMJII0p1ZwJK19hCcVWQ0i1OePoLlFnUd2dP3ch+hRH9+KozF&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi8+/wDKDeYv+2Ze&#xA;/wDUO+KvOPy3by7/AMrg8xxWTP8ApONdQe6c2yRvKJtQVm+sSrd3DsYnXjAGt4f3ZruCKqvZMVdi&#xA;qRec/wDjj2//AG09J/7qdtiqa3uyxShObxzR8Ou3NvSZtvBHbFVPUj6Po3oBItm/e06+i/wvX2XZ&#xA;z/q4qjMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSLz7/wAo&#xA;N5i/7Zl7/wBQ74qxzyF+VJ8q6wNTfU0vZRavaMyWot5HVhbqpkk9WTkFW05UpvLJK/7dAq9AxV2K&#xA;pF5z/wCOPb/9tPSf+6nbYqnNzCZ7aWEO0ZlRkEi7MvIUqPcYqtt3FxaqZODll4zBQSnIfC60bela&#xA;jfFUPpskkRbT52LTW4rFI3WSAmiNXuy/Zf332DDFUdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVSLz7/yg3mL/ALZl7/1Dviqe4q7FXYqkXnP/AI49v/209J/7qdti&#xA;qe4qhIq2960CQkQThphItSol5fvA29E5VDCnU8u/VVu/sfrKI0b+jdQnnb3AHLi3cEbckboy13Hc&#xA;GhCqyz1L1Jfqt0n1a+UEmEmquo/biYhea+PcftAYqjcVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVSLz7/AMoN5i/7Zl7/ANQ74qnuKuxV5z+Y2lfmLd+YrGfyuZfQW0li&#xA;DGd4baG5kLcZ5kju7cyFBxKq0Eynp8P2sVU7Kx8zWXkZo9TS4hnbW9MfTbbU7n67cRQ/X7MBZ7hZ&#xA;J+dZhI4o5orAbUpir0a3+segn1nh69P3np14V9uW+KtXdrFdW7wS1CtQ8lJVlKkMrKR0KsARiqit&#xA;29u7RXYKxRR8xfOVEbBQORkI4iNq12pSnQ9QFVW5tLa7hEc6CRKh0NSCrDoyMKFWHZgajFUKIdVt&#xA;doZFvYB0jnPCZR7SqCr7dAyg+L4quGsWybXaSWTdzcLxQV6fvlLQ19udcVRkU0U0aywuskbbq6EM&#xA;p+RGKrsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirG/zG+vf4G176r6X/ABzr&#xA;z1vV5fY+rvXjx/a+eKskxV2KuxVIvOf/ABx7f/tp6T/3U7bFU9xV2KuxVCDTIYoTFZM1ipfmRAEA&#xA;rShAV1dBXqaDriq8DUElUcopYeIDVDRuCB9rbmrVPagp74qtW6vBGxks39VSBxjeNlavdGZo9h/l&#xA;AYqhJY9HkVrp7OSOZ24vKlvKs4YCp+OJfU9uQND0rirYjtFlSCDUpYJXoRbtKskhqOX2bgSyDbtt&#xA;iq1LxgheLV7WSBKcpJVV2+LpyaOSJN6Gnw4qiEl1bgCi21yjDkkyyPEGBAIovGbb35Yqu+s6km8t&#xA;krjegt5Q7V7VEqwCn04q4311v/uPuP8Agrf/AKq4q79JotRNb3ETD9n0mlqPGsPqr+NcVb/SltWn&#xA;C4/6Rrj/AJoxVr9LWQoXMkKn9uaKWJB82kVVH0nFW/0xpFafXrev/GVP64q79MaR/wAt1vt1/ep/&#xA;XFXfpjSP+W6326/vU/riqtBdWtwCbeZJguzGNgwB96E4qq4q7FXYq7FXYq7FXYq7FUi8+/8AKDeY&#xA;v+2Ze/8AUO+Kp7irsVdiqQ+deX6Gg4gFv0npNATQf8dO2774qnIa72rHH3r+8b6P2MVaL3nHaKPl&#xA;Qbeo1K99+GKuL3ldooyK/wC/G6U6/Y8cVcWvKbRR1p/vxvtdx9jp74q2Wu67Rx0r/vxunj9jrirX&#xA;O9qP3UdK/F+8bYVFKfB4Yq4NebVij71/eN07fsYq4teUNIo602/eN1/4DFXc7zl/dR8adfUatdu3&#xA;D54qh5LGOQcXsLV1VuShiCOTfbbePY/rxVsWaiZphZWwkaoaWvxkU47n0+42xVaunQhPS/R9qISQ&#xA;7IKU57ivH0wOh64q76jJwjXgQI1NALucb1qASB8XzOKrvqs/OR+B5SAgj6zNSjdaClF9qfhiqz6j&#xA;LwMfBuAYsp+t3HI123alenatMVXfU5S0TFT+7IApdT0oDUFhSjb/AM3bFXC0nHM8DWQHmPrU5ANa&#xA;jjt8PzFKYq01rfBQkMjQqtTX1vUZiQOpmilNK+BxVTm0uSeWOW4SOYoqrxk9JgadakwcvE7EfRiq&#xA;h/h+MK49GIsxorFIKqvXalvTfwNcKtN5fVlRfRhUqaFgsBLCteRrbUqPAUxVUGhxet6htoOFD+54&#xA;w8OlBv6HL3+1gVT/AMPJ6TL6URcgEScLfkD3Uf6PSnvTCrb6AjUpDCvFabLB8ZBO7VtzSo60/txV&#xA;cdEkErmKWWKFqhIY7ho405d0RYxSnUCtMVW/oO69IIbq55ciTL9bflSmy/3fGn0Yq3+hLksjG6uU&#xA;ApzRbuRgaf6yV+LvQj2xVJfO2kXCeTfMUrXFwwOmXh9M3UjKp9FjQDgCwpt8R/rirM8CuxV2KpF5&#xA;z/449v8A9tPSf+6nbYqnuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KpF59/5QbzF/2zL3/qHfFU9xV2KuxVIvOf/HHt/wDtp6T/AN1O2xVPcVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSLz7/AMoN5i/7Zl7/ANQ7&#xA;4qnuKuxVA69LqcOh6jNpUSzapHbTPYQv9l7hYyYlPsXoMVYXokfnHXfJc63DSz30GqWlxpk2rwnT&#xA;Zri3s7i2umFxFHAphrJHLEpEO6hWoa1xVki3nnug5aPpYPcDU7gj/unjFW/rnnn/AKtGmf8AcTuP&#xA;+yDFXfXPPP8A1aNM/wC4ncf9kGKqGnyef7ewtrefTtNuJoYkjluG1K4BkZVAZzWwO7EV64qr/XPP&#xA;P/Vo0z/uJ3H/AGQYq76555/6tGmf9xO4/wCyDFUPZyfmBD6/q6fps3qytJHXUrj4EalEH+gnYYqi&#xA;Prnnn/q0aZ/3E7j/ALIMVd9c88/9WjTP+4ncf9kGKqCSef1v5rg6dprQyRRRpb/pK4ojRtIWcf6B&#xA;1cSKOn7OKq/1zzz/ANWjTP8AuJ3H/ZBirvrnnn/q0aZ/3E7j/sgxVQuZPP8ALNavHp2mxJBKZJkG&#xA;pXFJVMTpwP8AoA25OG/2OKq/1zzz/wBWjTP+4ncf9kGKu+ueef8Aq0aZ/wBxO4/7IMVUNQk8/wBx&#xA;YXNvBp2m2800TxxXC6lcExsykK4pYDdSa9cVV/rnnn/q0aZ/3E7j/sgxV31zzz/1aNM/7idx/wBk&#xA;GKu+ueef+rRpn/cTuP8AsgxVD2En5gW9pHDPp+m3Eq15TNqVwC1WJHWxPQGmKoj6555/6tGmf9xO&#xA;4/7IMVd9c88/9WjTP+4ncf8AZBiqhbSef4prp5NO02VJ5RJCh1K4pEoiROA/0A7ckLf7LFVf6555&#xA;/wCrRpn/AHE7j/sgxV31zzz/ANWjTP8AuJ3H/ZBiqg8nn9r+G4GnaasMcUsb2/6SuKO0jRlXP+gd&#xA;UEbDp+1iqv8AXPPP/Vo0z/uJ3H/ZBiqX+YYPPuq6FqOlJpelRHULaa19Y6lcHh60bR8uP1D4qcq0&#xA;qMVZbirsVdiqQ+edButd8uS6dbLBLI1xaTta3ZK29xHbXUU8lvMwSYhJkjMbfA3XcEbYqifKek3W&#xA;j+VtH0m7n+s3Wn2Vvaz3AqRJJDEqMwrQ0JXvv44qmuKsZ/MXRNY1zyxLpelW1hdzTzQmWLVJJUt/&#xA;TikEpJESTeoeSLRHUof2wy1VlWOfll+WmseVdWe5untxALRrb1IpnuLm5LvG8X1p2gtg31NIzDCw&#xA;HxISSqfZxV6TiqjeR3UlnPHaTLb3TxusFwyeoschUhHKVXmFO/Gor44q8i8vfk75v03UtKnv9Ts9&#xA;SNjevc/pJvWS6hQ38t5K0KuJucl8kvpXFZF4rQVelSq9jxV2KvEPMf5JecdT17W7+O8sJoNSuLia&#xA;L6y7CSk9vPBbs3p23INYtOskQaSSrIvEw4q9vUEKASWIG5NKn7sVdiry78w/yt8xeZfOP6Z0++gt&#xA;Lc6TNp6yOxE0cslrfwDiBC78Ge+jZuMyD4N0duBRVmfkbQbrQvLkWnXKwRSLcXc62toS1vbx3N1L&#xA;PHbwsUhJSFJBGvwL02AG2Kp9irBfzD8han5j1C3vLGeJVisLi0uLW5llEM/qXVpcLEyKsiLHKltL&#xA;FM4XlxYbNQAKpL5J/KrzBoXmey1S7lsjDB6shkgeRpooZInjTSYQ0SA2UDuJEYsDyUfAMVeqYqkH&#xA;nby9c69o8NpayCK4gv7C9QtJJGhW0vIp5Ff068+UaMFVgV5UO1AQq8w0f8l/NUOt2WqXMOlWcsV1&#xA;HPP9TuriVU9O8tbn14VmtVc3DRWskDvLKzuJW5PxHAqvbsVQ+pWaX2nXVk5ZUuYnhYo7xMA6lfhk&#xA;jKuh36qajtiryB/yZ86F9Lkm1Sx1C2sNF07SpNIuFmSBxYz2M81uZKTK0Vy1nLykMPKjBSrr9lV6&#xA;l5T0m60fyto+k3c/1m60+yt7We4FSJJIYlRmFaGhK99/HFU1xV455i/JrzVqFnp9pYarFbLaX2rX&#xA;CzySPLLEl/qCXUEyPNDNI88cKGMnmjVb+8Zeauqzn8uPK175b0Sezu4rW1M1y1xDp9gzPaWyGONP&#xA;ThZ44WIZo2lb4B8Tn54qyrFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8Ck/Mj899I0pGby&#xA;/c6zfzxQOiNpM9I3NjaPIsjQPAFDTyXBPwsQ8fDiA6lFU2178wvzt0a8EC6BDqsKztHJPZ6VqFGj&#xA;jgt5qxhZ5q+q9y0SsxCqY2Jr0VVF+avzO/MGw8za9p+h6KdVtNJnt4DHbaddXM0cc1tb3Ek5lWeK&#xA;Cd0NwwW2Uo7Ch5BanFVa881fmpd+R9Q1M2Eml6mlzpMVtZ2tlMblIpo7WXUJPjj1Dmqm4kjBS1Yx&#xA;+m3wu2wVY7/ysn872+r2kWgXLvbxWLSTPpV0kl1KstotyDOwFvHHOsszVMSNGFNVQ9FWU+U/Nv5m&#xA;Xvmyzj1OwZtBu44opZTptzYiOThfyNOond5IhW2hidJeVS6MpXlRlXp+KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVC2n6K+tX31P0Prfqr+kvR4ep63p&#xA;Jw9fj8XP0eFOW/Hj2piqKxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:E7FE4BF851D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:F2BD3C1753D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -195.737 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 195.737 li
271.588 195.737 li
271.588 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
271.338 174.324 mo
268.188 174.324 li
32.3882 174.324 mo
35.5381 174.324 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B854D00D> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWDM+Helvetica /Helvetica findfont ct_VMDictPut/DVPWDM+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]DVPWDM+Helvetica nfDVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf22.3491 176.662 mo( )sh24.2944 176.662 mo(0)sh271.338 131.673 mo
268.188 131.673 li
32.3882 131.673 mo
35.5381 131.673 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDM+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDM+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/DVPWDM+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 4{/.notdef}rp /five 202{/.notdef}rp]DVPWDM+Helvetica nfDVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf18.4585 134.005 mo( 50)[1.9458 3.89209 0 ]xsh271.338 88.9736 mo
268.188 88.9736 li
32.3882 88.9736 mo
35.5381 88.9736 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDM+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDM+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/DVPWDM+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]DVPWDM+Helvetica nfDVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf14.5601 91.3101 mo( 100)[1.9458 3.89209 3.89209 0 ]xsh271.338 46.3237 mo
268.188 46.3237 li
32.3882 46.3237 mo
35.5381 46.3237 li
@
DVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf14.5601 48.6538 mo( 150)[1.9458 3.89209 3.89209 0 ]xsh271.338 3.67383 mo
268.188 3.67383 li
32.3882 3.67383 mo
35.5381 3.67383 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDM+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDM+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/DVPWDM+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]DVPWDM+Helvetica nfDVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf14.5601 6.01318 mo( 200)[1.9458 3.89209 3.89209 0 ]xsh32.3882 3.67383 mo
32.3882 6.82373 li
32.3882 174.324 mo
32.3882 171.173 li
@
DVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf29.4663 183.654 mo( )sh31.4116 183.654 mo(0)sh59.688 3.67383 mo
59.688 6.82373 li
59.688 174.324 mo
59.688 171.173 li
@
DVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf54.8179 183.654 mo( 20)[1.9458 3.89209 0 ]xsh86.9883 3.67383 mo
86.9883 6.82373 li
86.9883 174.324 mo
86.9883 171.173 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDM+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDM+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/DVPWDM+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five 202{/.notdef}rp]DVPWDM+Helvetica nfDVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf82.1147 183.654 mo( 40)[1.9458 3.89209 0 ]xsh114.338 3.67383 mo
114.338 6.82373 li
114.338 174.324 mo
114.338 171.173 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDM+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDM+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/DVPWDM+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six 201{/.notdef}rp]DVPWDM+Helvetica nfDVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf109.474 183.654 mo( 60)[1.9458 3.89209 0 ]xsh141.639 3.67383 mo
141.639 6.82373 li
141.639 174.324 mo
141.639 171.173 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDM+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDM+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/DVPWDM+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]DVPWDM+Helvetica nfDVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf136.771 183.654 mo( 80)[1.9458 3.89209 0 ]xsh168.938 3.67383 mo
168.938 6.82373 li
168.938 174.324 mo
168.938 171.173 li
@
DVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf162.123 183.654 mo( 100)[1.94629 3.8916 3.89258 0 ]xsh196.238 3.67383 mo
196.238 6.82373 li
196.238 174.324 mo
196.238 171.173 li
@
DVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf189.427 183.654 mo( 120)[1.94629 3.8916 3.89258 0 ]xsh223.539 3.67383 mo
223.539 6.82373 li
223.539 174.324 mo
223.539 171.173 li
@
DVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf216.724 183.654 mo( 140)[1.94629 3.8916 3.89258 0 ]xsh250.838 3.67383 mo
250.838 6.82373 li
250.838 174.324 mo
250.838 171.173 li
@
DVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf244.021 183.654 mo( 160)[1.94629 3.8916 3.89258 0 ]xsh32.3882 3.67383 mo
32.3882 174.324 li
271.338 174.324 li
271.338 3.67383 li
32.3882 3.67383 li
32.3882 3.67383 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDM+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/S <1C60D8A8C9B64EDF7B9A268599F9CD8C4143A0D599CA838C6F6EFB82E6187B34759773BB4D8C1A41E190DEFABB354DFB531C99308891FC3B7E87957393F9CD35CA8C07371CAABAAF32C24CDAE22C826F234EC2B15BA06DFB54FFCB46EDDF1D277ED530855C8BB0880980568C5F76DE693CEE6004D84A502F3C6B0F55A55095F8FAF71FCF3869AA0D55975A515D287103786F2BEFCA3E30833F771676F4E4B0C078830B99B254F2B4> |-/U <1C60D8A8C9B6079FED21EC1DD9E4F86C05723BD153DC25ACCB72ED4F0814E32635C8A90E12D3CBE19E234F6769255763D8A7BAF6A13DF1E384206C4BD9C4AAD02D927F96B3EB70> |-/c <1C60D8A8C9B7A73DE7D498F17521D6359F9ADD96B62202C43AB7E2B6A506D4DE60506EB0B21A851A7E637BA285607D05D1170907CD76EA31977E70CEDA0DED90924EF61C48FC884B70C05F0A56FF474D664DA9646860BA> |-/d <1C60D8A8C9B7EF3272B02106CA005D490B9AADA17924914F2C970DE0CC49CEA15AE0636239F8F8972696F7F5932B166AF2D78F67482CC14B1A6381CFD7128F8DE76CDFCE15FA9EB575CCF12B456F3EB76367E9886C5281DF7AB34F68E50A05C60D95A0109B0EE1AC212C660640ECA54376F807195B77C533845305049FE68DE5BA8B1CD6F2147B0BF4B5B691FCBB3989ADBCB5DBED> |-/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C2021D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495ACA0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCDBE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553A431EECECF30F5581F5F0240E470E520EB9771> |-/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D72A7354004D800853CB28271AB7834CF7A2CB132BAFF26EF4E9D89B> |-/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA563254EC441C4BC3817B6ABCAA45C3FADDF2A0C1F1BCD1456474D7370B95E3791CB0774B8A788FAD31DAB8E43BE1DDCC8C2722C438CA874C21003F548D691EAB87ADC2BE2D98ABE47C6EE8D76> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/p <1C60D8A8C9B7EF321971A47DFE20E88A554AF6C7BF26D7DE21E7159091488A77474EFAE16E717C524A15C920EA73AA47F3FA5326288E9152C7B3C170946831BD532AD7339284A44181A5422DAA5A3944CCAFE4499DA2E6E45119A891F62D3E7DB19C997B84C7105E8154EEFB4DEC8858FC770AEE75D22C6FDC3AA98F517994> |-/r <1C60D8A8C9B81F2C150546EE4CBAAF688B47B2BE559294D5CB0899F2E804995909AC00E005B47DD0AC10879B5BC7D5032F4A9752992A333ADEB05A77287D04AF74FB420D308AD8> |-/s <1C60D8A8C9B7A73DF2FC7D734CFF3CEE44DEE08B4814311F759A12C668E2414B1F185B71CDFB81A4EFE4B67531A5BC3DCC468E7336CC99F93A0F8C9CAAC21479B9DF30E1F20CC55E079066616501132E6501EACD2121153832E7EB63F4284AC03D21E5D5BD534A816A07833E9E45AAF0AF784FB128B27EB090C038A83361862615D53FB49FC431C156AA9A7FD4E2EF50395549EA0CB64112DC> |-/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B5837088353D9095E679DCF29A> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDM+Helvetica /Encoding getdup 83 /S putdup 85 /U putdup 99 /c putdup 100 /d putdup 101 /e putdup 105 /i putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putpop%ADOEndSubsetFont
/DVPWDM+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight 26{/.notdef}rp /S /.notdef /U 13{/.notdef}rp /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o /p /.notdef /r /s /t 139{/.notdef}rp]DVPWDM+Helvetica nfDVPWDM+Helvetica*1 [0 -7 -7 0 0 0 ]msf6.01318 115.865 mo(Seconds per Unit)[-4.66895 -3.8916 -3.5 -3.89258 -3.8916 -3.89209 -3.5 -1.94629 -3.8916 -3.89209 -2.33105 -1.9458 -5.0542 -3.89209 -1.55371 0 ]ysh3.68799 89.0234 mo
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDM+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/colon <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369676FE7E3F7F79CEEE30BD023CC5123F5DD4F72E8838E> |-/B <1C60D8A8C9B64EDF8861093A50D70CE704C3B99B255E57C25F5628D6A25DCF329FDC490B240CA8E3263684788E9E559211DF7A652BCEA6E7473D115402933A862D3C0BED9681856F5ACE8B339645A6A4CED62CD1A26855F2D51956984EE13F47812E810D9E8C98922B6C1937C1681825270D4D77D4BBDEECB712B7702AEEC61BE96AFEBE20DFCCFCC19F8646EA0A427DFBAA43CEB1ACB616853A6CD4C3E4CEE20B743FFD4303148B5B4D479ED1038084D37CCEE34880877DCE43721DF888> |-/I <1C60D8A8C9B854D0A3953AFD56E13A0A68A3547B5275504502229C694F1498D4> |-/a <1C60D8A8C9B7EF32A0B922DB529D708010F72F0E62F6CA36E98277AFD8C536E6814BFC8F2509E1B2B1B62A6BDA8D1A6ED67728D80620B28FE439D2F57DCEC5483105FEA93379701773DF23A415938C688874994BCC9880105CE27AC2270A13FA38E952045C5E8C52BEF83397E5FBEEFAB993BE33E385A5E36620F7427AB5E4423C6A4ED6DE24A89F54E52C8FAD8A45FAD4B8F6CFD50EB7D35BF120B079B932E0EE2F7685462C7EC6E9B818F0F9E1F7814D04F2B9AAFA6704B8B745452B73181F38CB34F1645F> |-/h <1C60D8A8C9B7EF327C10274A017D50D0B79D52072757441F46A9E30449754F52968402CD3736F71D6E09A15E2046342DF42A864D37373E0A213DE941C6F011296A017FBEA0AE0137A10664047E> |-/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706FE45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC754258679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52DA81BBE025DB4544A719A686DB3A0393D2301EEF9A4AA3D42067FE37BAF> |-/u <1C60D8A8C9B7EF325758E576B7BAA1EFA82EFF7976BE67CE506354F22E3D1B078EDAE7715C61BE16B3CD4B647E2C68818E308CF0BE659E73BA193580128E99771A6AFDBFEB4E9486BE6CBE5D0A068E2F3382B692BCB6E47C62554398C9E56946239346863C679F19> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDM+Helvetica /Encoding getdup 58 /colon putdup 66 /B putdup 73 /I putdup 97 /a putdup 104 /h putdup 109 /m putdup 117 /u putpop%ADOEndSubsetFont
/DVPWDM+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight /.notdef /colon 7{/.notdef}rp /B 6{/.notdef}rp /I 9{/.notdef}rp /S /.notdef /U 11{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]DVPWDM+Helvetica nfDVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf127.326 194.162 mo(Items per Batch)[1.9458 1.94629 3.89209 5.83105 3.5 1.94531 3.89258 3.8916 2.33105 1.94629 4.66895 3.8916 1.94629 3.5 0 ]xsh161.763 12.6616 mo(Setup time: 600 seconds)[4.66895 3.8916 1.94629 3.89258 3.8916 1.94629 1.94531 1.55469 5.83008 3.89258 1.59766 1.94531 3.89258 3.8916 3.8916 1.94629 3.5 3.89258 3.5 3.8916 3.8916 3.89258 0 ]xsh0.25 lw
260.588 145.673 mo
260.838 145.673 li
261.039 145.673 li
261.289 145.673 li
261.539 145.673 li
261.789 145.673 li
261.988 145.673 li
262.238 145.673 li
262.488 145.673 li
262.738 145.673 li
262.988 145.673 li
263.188 145.673 li
263.438 145.724 li
263.688 145.724 li
263.938 145.724 li
264.139 145.724 li
264.389 145.724 li
264.639 145.724 li
264.889 145.724 li
265.139 145.724 li
265.338 145.724 li
265.588 145.724 li
265.838 145.724 li
266.088 145.724 li
266.338 145.724 li
266.539 145.724 li
266.789 145.724 li
267.039 145.724 li
267.289 145.773 li
267.488 145.773 li
267.738 145.773 li
267.988 145.773 li
268.238 145.773 li
268.488 145.773 li
268.688 145.773 li
268.938 145.773 li
269.188 145.773 li
269.438 145.773 li
269.688 145.773 li
269.889 145.773 li
270.139 145.773 li
270.389 145.773 li
270.639 145.773 li
270.838 145.773 li
271.088 145.773 li
271.338 145.824 li
235.688 145.273 mo
235.938 145.273 li
236.188 145.273 li
236.438 145.324 li
236.639 145.324 li
236.889 145.324 li
237.139 145.324 li
237.389 145.324 li
237.588 145.324 li
237.838 145.324 li
238.088 145.324 li
238.338 145.324 li
238.588 145.324 li
238.789 145.324 li
239.039 145.324 li
239.289 145.324 li
239.539 145.375 li
239.789 145.375 li
239.988 145.375 li
240.238 145.375 li
240.488 145.375 li
240.738 145.375 li
240.938 145.375 li
241.188 145.375 li
241.438 145.375 li
241.688 145.375 li
241.938 145.375 li
242.139 145.375 li
242.389 145.375 li
242.639 145.423 li
242.889 145.423 li
243.139 145.423 li
243.338 145.423 li
243.588 145.423 li
243.838 145.423 li
244.088 145.423 li
244.289 145.423 li
244.539 145.423 li
244.789 145.423 li
245.039 145.423 li
245.289 145.423 li
245.488 145.423 li
245.738 145.474 li
245.988 145.474 li
246.238 145.474 li
246.438 145.474 li
246.688 145.474 li
246.938 145.474 li
247.188 145.474 li
247.438 145.474 li
247.639 145.474 li
247.889 145.474 li
248.139 145.474 li
248.389 145.474 li
248.639 145.474 li
248.838 145.474 li
249.088 145.523 li
249.338 145.523 li
249.588 145.523 li
249.789 145.523 li
250.039 145.523 li
250.289 145.523 li
250.539 145.523 li
250.789 145.523 li
250.988 145.523 li
251.238 145.523 li
251.488 145.523 li
251.738 145.523 li
251.988 145.523 li
252.188 145.523 li
252.438 145.574 li
252.688 145.574 li
252.938 145.574 li
253.139 145.574 li
253.389 145.574 li
253.639 145.574 li
253.889 145.574 li
254.139 145.574 li
254.338 145.574 li
254.588 145.574 li
254.838 145.574 li
255.088 145.574 li
255.289 145.574 li
255.539 145.574 li
255.789 145.574 li
256.039 145.625 li
256.289 145.625 li
256.488 145.625 li
256.738 145.625 li
256.988 145.625 li
257.238 145.625 li
257.488 145.625 li
257.688 145.625 li
257.938 145.625 li
258.188 145.625 li
258.438 145.625 li
258.639 145.625 li
258.889 145.625 li
259.139 145.625 li
259.389 145.625 li
259.639 145.673 li
259.838 145.673 li
260.088 145.673 li
260.338 145.673 li
260.588 145.673 li
210.838 144.824 mo
211.039 144.824 li
211.289 144.824 li
211.539 144.824 li
211.789 144.824 li
212.039 144.824 li
212.238 144.824 li
212.488 144.824 li
212.738 144.875 li
212.988 144.875 li
213.238 144.875 li
213.438 144.875 li
213.688 144.875 li
213.938 144.875 li
214.188 144.875 li
214.389 144.875 li
214.639 144.875 li
214.889 144.875 li
215.139 144.923 li
215.389 144.923 li
215.588 144.923 li
215.838 144.923 li
216.088 144.923 li
216.338 144.923 li
216.588 144.923 li
216.789 144.923 li
217.039 144.923 li
217.289 144.923 li
217.539 144.974 li
217.738 144.974 li
217.988 144.974 li
218.238 144.974 li
218.488 144.974 li
218.738 144.974 li
218.938 144.974 li
219.188 144.974 li
219.438 144.974 li
219.688 144.974 li
219.889 144.974 li
220.139 145.023 li
220.389 145.023 li
220.639 145.023 li
220.889 145.023 li
221.088 145.023 li
221.338 145.023 li
221.588 145.023 li
221.838 145.023 li
222.088 145.023 li
222.289 145.023 li
222.539 145.074 li
222.789 145.074 li
223.039 145.074 li
223.238 145.074 li
223.488 145.074 li
223.738 145.074 li
223.988 145.074 li
224.238 145.074 li
224.438 145.074 li
224.688 145.074 li
224.938 145.074 li
225.188 145.125 li
225.438 145.125 li
225.639 145.125 li
225.889 145.125 li
226.139 145.125 li
226.389 145.125 li
226.588 145.125 li
226.838 145.125 li
227.088 145.125 li
227.338 145.125 li
227.588 145.125 li
227.789 145.173 li
228.039 145.173 li
228.289 145.173 li
228.539 145.173 li
228.738 145.173 li
228.988 145.173 li
229.238 145.173 li
229.488 145.173 li
229.738 145.173 li
229.938 145.173 li
230.188 145.173 li
230.438 145.173 li
230.688 145.224 li
230.938 145.224 li
231.139 145.224 li
231.389 145.224 li
231.639 145.224 li
231.889 145.224 li
232.088 145.224 li
232.338 145.224 li
232.588 145.224 li
232.838 145.224 li
233.088 145.224 li
233.289 145.224 li
233.539 145.273 li
233.789 145.273 li
234.039 145.273 li
234.289 145.273 li
234.488 145.273 li
234.738 145.273 li
234.988 145.273 li
235.238 145.273 li
235.438 145.273 li
235.688 145.273 li
185.938 144.173 mo
186.188 144.173 li
186.438 144.173 li
186.688 144.173 li
186.889 144.224 li
187.139 144.224 li
187.389 144.224 li
187.639 144.224 li
187.838 144.224 li
188.088 144.224 li
188.338 144.224 li
188.588 144.273 li
188.838 144.273 li
189.039 144.273 li
189.289 144.273 li
189.539 144.273 li
189.789 144.273 li
190.039 144.273 li
190.238 144.273 li
190.488 144.324 li
190.738 144.324 li
190.988 144.324 li
191.188 144.324 li
191.438 144.324 li
191.688 144.324 li
191.938 144.324 li
192.188 144.375 li
192.389 144.375 li
192.639 144.375 li
192.889 144.375 li
193.139 144.375 li
193.338 144.375 li
193.588 144.375 li
193.838 144.375 li
194.088 144.423 li
194.338 144.423 li
194.539 144.423 li
194.789 144.423 li
195.039 144.423 li
195.289 144.423 li
195.539 144.423 li
195.738 144.423 li
195.988 144.474 li
196.238 144.474 li
196.488 144.474 li
196.688 144.474 li
196.938 144.474 li
197.188 144.474 li
197.438 144.474 li
197.688 144.474 li
197.889 144.523 li
198.139 144.523 li
198.389 144.523 li
198.639 144.523 li
198.889 144.523 li
199.088 144.523 li
199.338 144.523 li
199.588 144.523 li
199.838 144.574 li
200.039 144.574 li
200.289 144.574 li
200.539 144.574 li
200.789 144.574 li
201.039 144.574 li
201.238 144.574 li
201.488 144.574 li
201.738 144.574 li
201.988 144.625 li
202.188 144.625 li
202.438 144.625 li
202.688 144.625 li
202.938 144.625 li
203.188 144.625 li
203.389 144.625 li
203.639 144.625 li
203.889 144.673 li
204.139 144.673 li
204.389 144.673 li
204.588 144.673 li
204.838 144.673 li
205.088 144.673 li
205.338 144.673 li
205.539 144.673 li
205.789 144.673 li
206.039 144.724 li
206.289 144.724 li
206.539 144.724 li
206.738 144.724 li
206.988 144.724 li
207.238 144.724 li
207.488 144.724 li
207.738 144.724 li
207.938 144.724 li
208.188 144.773 li
208.438 144.773 li
208.688 144.773 li
208.889 144.773 li
209.139 144.773 li
209.389 144.773 li
209.639 144.773 li
209.889 144.773 li
210.088 144.773 li
210.338 144.773 li
210.588 144.824 li
210.838 144.824 li
161.088 143.273 mo
161.289 143.324 li
161.539 143.324 li
161.789 143.324 li
162.039 143.324 li
162.289 143.324 li
162.488 143.375 li
162.738 143.375 li
162.988 143.375 li
163.238 143.375 li
163.488 143.375 li
163.688 143.423 li
163.938 143.423 li
164.188 143.423 li
164.438 143.423 li
164.639 143.423 li
164.889 143.474 li
165.139 143.474 li
165.389 143.474 li
165.639 143.474 li
165.838 143.474 li
166.088 143.474 li
166.338 143.523 li
166.588 143.523 li
166.789 143.523 li
167.039 143.523 li
167.289 143.523 li
167.539 143.574 li
167.789 143.574 li
167.988 143.574 li
168.238 143.574 li
168.488 143.574 li
168.738 143.625 li
168.988 143.625 li
169.188 143.625 li
169.438 143.625 li
169.688 143.625 li
169.938 143.625 li
170.139 143.673 li
170.389 143.673 li
170.639 143.673 li
170.889 143.673 li
171.139 143.673 li
171.338 143.673 li
171.588 143.724 li
171.838 143.724 li
172.088 143.724 li
172.338 143.724 li
172.539 143.724 li
172.789 143.724 li
173.039 143.773 li
173.289 143.773 li
173.488 143.773 li
173.738 143.773 li
173.988 143.773 li
174.238 143.773 li
174.488 143.824 li
174.688 143.824 li
174.938 143.824 li
175.188 143.824 li
175.438 143.824 li
175.639 143.824 li
175.889 143.875 li
176.139 143.875 li
176.389 143.875 li
176.639 143.875 li
176.838 143.875 li
177.088 143.875 li
177.338 143.923 li
177.588 143.923 li
177.838 143.923 li
178.039 143.923 li
178.289 143.923 li
178.539 143.923 li
178.789 143.974 li
178.988 143.974 li
179.238 143.974 li
179.488 143.974 li
179.738 143.974 li
179.988 143.974 li
180.188 143.974 li
180.438 144.023 li
180.688 144.023 li
180.938 144.023 li
181.188 144.023 li
181.389 144.023 li
181.639 144.023 li
181.889 144.074 li
182.139 144.074 li
182.338 144.074 li
182.588 144.074 li
182.838 144.074 li
183.088 144.074 li
183.338 144.074 li
183.537 144.125 li
183.787 144.125 li
184.037 144.125 li
184.287 144.125 li
184.488 144.125 li
184.738 144.125 li
184.988 144.125 li
185.238 144.173 li
185.488 144.173 li
185.688 144.173 li
185.938 144.173 li
136.188 141.974 mo
136.438 142.023 li
136.688 142.023 li
136.938 142.023 li
137.139 142.074 li
137.389 142.074 li
137.639 142.074 li
137.889 142.125 li
138.088 142.125 li
138.338 142.125 li
138.588 142.125 li
138.838 142.173 li
139.088 142.173 li
139.289 142.173 li
139.539 142.224 li
139.789 142.224 li
140.039 142.224 li
140.238 142.224 li
140.488 142.273 li
140.738 142.273 li
140.988 142.273 li
141.238 142.324 li
141.438 142.324 li
141.688 142.324 li
141.938 142.324 li
142.188 142.375 li
142.438 142.375 li
142.639 142.375 li
142.889 142.423 li
143.139 142.423 li
143.389 142.423 li
143.588 142.423 li
143.838 142.474 li
144.088 142.474 li
144.338 142.474 li
144.588 142.474 li
144.789 142.523 li
145.039 142.523 li
145.289 142.523 li
145.539 142.523 li
145.789 142.574 li
145.988 142.574 li
146.238 142.574 li
146.488 142.625 li
146.738 142.625 li
146.938 142.625 li
147.188 142.625 li
147.438 142.673 li
147.688 142.673 li
147.938 142.673 li
148.139 142.673 li
148.389 142.724 li
148.639 142.724 li
148.889 142.724 li
149.088 142.724 li
149.338 142.773 li
149.588 142.773 li
149.838 142.773 li
150.088 142.773 li
150.289 142.773 li
150.539 142.824 li
150.789 142.824 li
151.039 142.824 li
151.289 142.824 li
151.488 142.875 li
151.738 142.875 li
151.988 142.875 li
152.238 142.875 li
152.438 142.923 li
152.688 142.923 li
152.938 142.923 li
153.188 142.923 li
153.438 142.974 li
153.639 142.974 li
153.889 142.974 li
154.139 142.974 li
154.389 142.974 li
154.639 143.023 li
154.838 143.023 li
155.088 143.023 li
155.338 143.023 li
155.588 143.074 li
155.789 143.074 li
156.037 143.074 li
156.287 143.074 li
156.537 143.074 li
156.787 143.125 li
156.988 143.125 li
157.238 143.125 li
157.488 143.125 li
157.738 143.173 li
157.938 143.173 li
158.188 143.173 li
158.438 143.173 li
158.688 143.173 li
158.938 143.224 li
159.139 143.224 li
159.389 143.224 li
159.639 143.224 li
159.889 143.224 li
160.139 143.273 li
160.338 143.273 li
160.588 143.273 li
160.838 143.273 li
161.088 143.273 li
111.338 139.875 mo
111.538 139.875 li
111.788 139.923 li
112.038 139.974 li
112.288 139.974 li
112.538 140.023 li
112.738 140.023 li
112.988 140.074 li
113.238 140.074 li
113.488 140.125 li
113.688 140.125 li
113.938 140.173 li
114.188 140.173 li
114.438 140.224 li
114.688 140.224 li
114.888 140.273 li
115.138 140.273 li
115.388 140.324 li
115.638 140.324 li
115.888 140.375 li
116.088 140.375 li
116.338 140.423 li
116.588 140.423 li
116.838 140.423 li
117.038 140.474 li
117.288 140.474 li
117.538 140.523 li
117.788 140.523 li
118.038 140.574 li
118.238 140.574 li
118.488 140.625 li
118.738 140.625 li
118.988 140.673 li
119.238 140.673 li
119.438 140.673 li
119.688 140.724 li
119.938 140.724 li
120.188 140.773 li
120.388 140.773 li
120.638 140.824 li
120.888 140.824 li
121.138 140.875 li
121.388 140.875 li
121.588 140.875 li
121.838 140.923 li
122.088 140.923 li
122.338 140.974 li
122.538 140.974 li
122.789 140.974 li
123.039 141.023 li
123.289 141.023 li
123.539 141.074 li
123.738 141.074 li
123.988 141.074 li
124.238 141.125 li
124.488 141.125 li
124.738 141.173 li
124.938 141.173 li
125.188 141.173 li
125.438 141.224 li
125.688 141.224 li
125.888 141.273 li
126.138 141.273 li
126.388 141.273 li
126.638 141.324 li
126.888 141.324 li
127.088 141.324 li
127.338 141.375 li
127.588 141.375 li
127.838 141.423 li
128.088 141.423 li
128.289 141.423 li
128.539 141.474 li
128.789 141.474 li
129.039 141.474 li
129.238 141.525 li
129.488 141.525 li
129.738 141.525 li
129.988 141.574 li
130.238 141.574 li
130.438 141.574 li
130.688 141.625 li
130.938 141.625 li
131.188 141.673 li
131.388 141.673 li
131.638 141.673 li
131.888 141.724 li
132.138 141.724 li
132.388 141.724 li
132.588 141.775 li
132.838 141.775 li
133.088 141.775 li
133.338 141.824 li
133.588 141.824 li
133.789 141.824 li
134.039 141.875 li
134.289 141.875 li
134.539 141.875 li
134.738 141.875 li
134.988 141.923 li
135.238 141.923 li
135.488 141.923 li
135.738 141.974 li
135.938 141.974 li
136.188 141.974 li
86.438 135.773 mo
86.688 135.875 li
86.938 135.923 li
87.1382 135.974 li
87.3882 136.023 li
87.6382 136.074 li
87.8882 136.125 li
88.1382 136.173 li
88.3384 136.224 li
88.5884 136.273 li
88.8384 136.324 li
89.0884 136.375 li
89.3384 136.423 li
89.5381 136.474 li
89.7881 136.574 li
90.0381 136.625 li
90.2881 136.673 li
90.4883 136.724 li
90.7383 136.773 li
90.9883 136.773 li
91.2383 136.824 li
91.4883 136.875 li
91.688 136.923 li
91.938 136.974 li
92.1885 137.023 li
92.4385 137.074 li
92.6885 137.125 li
92.8882 137.173 li
93.1382 137.224 li
93.3882 137.273 li
93.6382 137.324 li
93.8384 137.375 li
94.0884 137.375 li
94.3384 137.423 li
94.5884 137.474 li
94.8384 137.523 li
95.0381 137.574 li
95.2881 137.625 li
95.5381 137.673 li
95.7881 137.673 li
95.9883 137.724 li
96.2383 137.775 li
96.4883 137.824 li
96.7383 137.875 li
96.9883 137.923 li
97.1885 137.923 li
97.4385 137.974 li
97.6885 138.025 li
97.9385 138.074 li
98.1885 138.125 li
98.3882 138.125 li
98.6382 138.173 li
98.8882 138.224 li
99.1382 138.275 li
99.3384 138.275 li
99.5884 138.324 li
99.8384 138.375 li
100.088 138.423 li
100.338 138.423 li
100.539 138.474 li
100.789 138.525 li
101.039 138.525 li
101.289 138.574 li
101.539 138.625 li
101.738 138.625 li
101.988 138.673 li
102.238 138.724 li
102.488 138.775 li
102.688 138.775 li
102.938 138.824 li
103.188 138.875 li
103.438 138.875 li
103.688 138.923 li
103.888 138.974 li
104.138 138.974 li
104.388 139.025 li
104.638 139.074 li
104.838 139.074 li
105.088 139.125 li
105.338 139.125 li
105.588 139.173 li
105.838 139.224 li
106.039 139.224 li
106.289 139.275 li
106.539 139.324 li
106.789 139.324 li
107.039 139.375 li
107.238 139.375 li
107.488 139.423 li
107.738 139.423 li
107.988 139.474 li
108.188 139.525 li
108.438 139.525 li
108.688 139.574 li
108.938 139.574 li
109.188 139.625 li
109.389 139.673 li
109.639 139.673 li
109.889 139.724 li
110.139 139.724 li
110.389 139.775 li
110.588 139.775 li
110.838 139.824 li
111.088 139.824 li
111.338 139.875 li
61.5884 124.773 mo
61.7881 124.974 li
62.0381 125.173 li
62.2881 125.324 li
62.5381 125.523 li
62.7881 125.724 li
62.9883 125.875 li
63.2383 126.074 li
63.4883 126.224 li
63.7383 126.423 li
63.938 126.574 li
64.188 126.773 li
64.438 126.923 li
64.688 127.074 li
64.938 127.224 li
65.1382 127.375 li
65.3882 127.523 li
65.6382 127.724 li
65.8882 127.875 li
66.1382 128.023 li
66.3384 128.125 li
66.5884 128.273 li
66.8384 128.423 li
67.0884 128.574 li
67.2881 128.724 li
67.5381 128.824 li
67.7881 128.974 li
68.0381 129.125 li
68.2881 129.224 li
68.4883 129.375 li
68.7383 129.523 li
68.9883 129.625 li
69.2383 129.773 li
69.4385 129.875 li
69.6885 129.974 li
69.9385 130.125 li
70.1885 130.224 li
70.4385 130.324 li
70.6382 130.474 li
70.8882 130.574 li
71.1382 130.673 li
71.3882 130.773 li
71.6382 130.923 li
71.8384 131.023 li
72.0884 131.125 li
72.3384 131.224 li
72.5884 131.324 li
72.7881 131.423 li
73.0381 131.523 li
73.2881 131.623 li
73.5381 131.724 li
73.7886 131.824 li
73.9883 131.923 li
74.2383 132.023 li
74.4883 132.123 li
74.7383 132.224 li
74.9883 132.324 li
75.1885 132.423 li
75.4385 132.474 li
75.6885 132.574 li
75.9385 132.673 li
76.1382 132.773 li
76.3882 132.824 li
76.6382 132.923 li
76.8882 133.023 li
77.1382 133.074 li
77.3384 133.173 li
77.5884 133.273 li
77.8384 133.324 li
78.0884 133.423 li
78.2886 133.523 li
78.5386 133.574 li
78.7886 133.673 li
79.0386 133.724 li
79.2886 133.824 li
79.4883 133.873 li
79.7383 133.974 li
79.9883 134.023 li
80.2383 134.123 li
80.4883 134.173 li
80.6885 134.273 li
80.9385 134.324 li
81.1885 134.423 li
81.4385 134.474 li
81.6382 134.523 li
81.8882 134.623 li
82.1382 134.673 li
82.3882 134.724 li
82.6382 134.824 li
82.8384 134.873 li
83.0884 134.923 li
83.3384 135.023 li
83.5884 135.074 li
83.8384 135.123 li
84.0386 135.173 li
84.2886 135.273 li
84.5386 135.324 li
84.7886 135.373 li
84.9883 135.423 li
85.2383 135.523 li
85.4883 135.574 li
85.7383 135.623 li
85.9883 135.673 li
86.1885 135.724 li
86.4385 135.773 li
37.188 3.67383 mo
37.3882 9.57373 li
37.6382 15.8735 li
37.8882 21.6738 li
38.1382 26.9736 li
38.3882 31.8237 li
38.5884 36.3237 li
38.8384 40.4736 li
39.0884 44.3735 li
39.3384 47.9736 li
39.5884 51.3237 li
39.7881 54.4736 li
40.0381 57.3735 li
40.2881 60.1738 li
40.5381 62.7734 li
40.7383 65.2236 li
40.9883 67.5234 li
41.2383 69.7236 li
41.4883 71.8237 li
41.7383 73.7734 li
41.938 75.6738 li
42.188 77.4238 li
42.438 79.1235 li
42.688 80.7734 li
42.8882 82.3237 li
43.1382 83.7734 li
43.3882 85.1738 li
43.6382 86.5234 li
43.8882 87.8237 li
44.0884 89.0737 li
44.3384 90.2734 li
44.5884 91.4238 li
44.8384 92.5234 li
45.0884 93.5737 li
45.2881 94.6235 li
45.5381 95.5737 li
45.7881 96.5234 li
46.0381 97.4736 li
46.2383 98.3232 li
46.4883 99.1733 li
46.7383 100.023 li
46.9883 100.824 li
47.2383 101.574 li
47.4385 102.324 li
47.6885 103.074 li
47.9385 103.773 li
48.1885 104.423 li
48.4385 105.125 li
48.6382 105.724 li
48.8882 106.375 li
49.1382 106.974 li
49.3882 107.574 li
49.5884 108.125 li
49.8384 108.673 li
50.0884 109.224 li
50.3384 109.773 li
50.5884 110.273 li
50.7886 110.773 li
51.0386 111.273 li
51.2886 111.724 li
51.5386 112.173 li
51.7383 112.625 li
51.9883 113.074 li
52.2383 113.523 li
52.4883 113.923 li
52.7383 114.324 li
52.9385 114.724 li
53.1885 115.123 li
53.4385 115.523 li
53.6885 115.873 li
53.9385 116.273 li
54.1382 116.623 li
54.3882 116.974 li
54.6382 117.324 li
54.8882 117.625 li
55.0884 117.974 li
55.3384 118.273 li
55.5884 118.574 li
55.8384 118.923 li
56.0884 119.224 li
56.2886 119.523 li
56.5386 119.773 li
56.7886 120.074 li
57.0386 120.375 li
57.2886 120.625 li
57.4883 120.875 li
57.7383 121.173 li
57.9883 121.423 li
58.2383 121.673 li
58.4385 121.923 li
58.6885 122.173 li
58.9385 122.373 li
59.1885 122.623 li
59.4385 122.873 li
59.6382 123.074 li
59.8882 123.324 li
60.1387 123.523 li
60.3887 123.724 li
60.5884 123.974 li
60.8384 124.173 li
61.0884 124.373 li
61.3384 124.574 li
61.5884 124.773 li
242.988 10.3237 mo
262.938 10.3237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDM+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319EB739C72B00D2CC4607F53D8DAA36825DF613C6C839053BC26A7859D8AA158786D28D1E4DE04046CE941E5159199A77FA8129F02A3ECB8D9E54C278D22D0348DFB3C3C73F55886BF824DB1B2BE764C084A332EAF6E03DAE2729DE4723D54D14DE5E36772632D9593B8015D82D91A7513CF83AED18BF899FB582C1516AE5C3CE963C7A9224066B2CB5D769E52069DB2172C52452A135E45CF579C1E7FB12BEA387FFB8E1E9EB90D4F6BF80D4DDA346E7141D8646431020D523BDB64> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDM+Helvetica /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/DVPWDM+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four /five /six /.notdef /eight /.notdef /colon 7{/.notdef}rp /B 6{/.notdef}rp /I 9{/.notdef}rp /S /.notdef /U 11{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]DVPWDM+Helvetica nfDVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf199.107 19.6616 mo(300 seconds)[3.8916 3.89258 3.8916 1.94629 3.5 3.8916 3.5 3.89258 3.8916 3.89258 0 ]xsh[4 2 ] 0 dsh
258.188 147.173 mo
258.438 147.173 li
258.639 147.173 li
258.889 147.173 li
259.139 147.173 li
259.389 147.173 li
259.639 147.173 li
259.838 147.173 li
260.088 147.173 li
260.338 147.173 li
260.588 147.173 li
260.838 147.173 li
261.039 147.173 li
261.289 147.224 li
261.539 147.224 li
261.789 147.224 li
261.988 147.224 li
262.238 147.224 li
262.488 147.224 li
262.738 147.224 li
262.988 147.224 li
263.188 147.224 li
263.438 147.224 li
263.688 147.224 li
263.938 147.224 li
264.139 147.224 li
264.389 147.224 li
264.639 147.224 li
264.889 147.224 li
265.139 147.224 li
265.338 147.224 li
265.588 147.224 li
265.838 147.224 li
266.088 147.224 li
266.338 147.224 li
266.539 147.224 li
266.789 147.224 li
267.039 147.224 li
267.289 147.224 li
267.488 147.224 li
267.738 147.224 li
267.988 147.224 li
268.238 147.224 li
268.488 147.224 li
268.688 147.224 li
268.938 147.224 li
269.188 147.273 li
269.438 147.273 li
269.688 147.273 li
269.889 147.273 li
270.139 147.273 li
270.389 147.273 li
270.639 147.273 li
270.838 147.273 li
271.088 147.273 li
271.338 147.273 li
233.289 146.974 mo
233.539 146.974 li
233.789 146.974 li
234.039 146.974 li
234.289 146.974 li
234.488 146.974 li
234.738 147.023 li
234.988 147.023 li
235.238 147.023 li
235.438 147.023 li
235.688 147.023 li
235.938 147.023 li
236.188 147.023 li
236.438 147.023 li
236.639 147.023 li
236.889 147.023 li
237.139 147.023 li
237.389 147.023 li
237.588 147.023 li
237.838 147.023 li
238.088 147.023 li
238.338 147.023 li
238.588 147.023 li
238.789 147.023 li
239.039 147.023 li
239.289 147.023 li
239.539 147.023 li
239.789 147.023 li
239.988 147.023 li
240.238 147.023 li
240.488 147.023 li
240.738 147.023 li
240.938 147.074 li
241.188 147.074 li
241.438 147.074 li
241.688 147.074 li
241.938 147.074 li
242.139 147.074 li
242.389 147.074 li
242.639 147.074 li
242.889 147.074 li
243.139 147.074 li
243.338 147.074 li
243.588 147.074 li
243.838 147.074 li
244.088 147.074 li
244.289 147.074 li
244.539 147.074 li
244.789 147.074 li
245.039 147.074 li
245.289 147.074 li
245.488 147.074 li
245.738 147.074 li
245.988 147.074 li
246.238 147.074 li
246.438 147.074 li
246.688 147.074 li
246.938 147.074 li
247.188 147.125 li
247.438 147.125 li
247.639 147.125 li
247.889 147.125 li
248.139 147.125 li
248.389 147.125 li
248.639 147.125 li
248.838 147.125 li
249.088 147.125 li
249.338 147.125 li
249.588 147.125 li
249.789 147.125 li
250.039 147.125 li
250.289 147.125 li
250.539 147.125 li
250.789 147.125 li
250.988 147.125 li
251.238 147.125 li
251.488 147.125 li
251.738 147.125 li
251.988 147.125 li
252.188 147.125 li
252.438 147.125 li
252.688 147.125 li
252.938 147.125 li
253.139 147.125 li
253.389 147.125 li
253.639 147.125 li
253.889 147.125 li
254.139 147.173 li
254.338 147.173 li
254.588 147.173 li
254.838 147.173 li
255.088 147.173 li
255.289 147.173 li
255.539 147.173 li
255.789 147.173 li
256.039 147.173 li
256.289 147.173 li
256.488 147.173 li
256.738 147.173 li
256.988 147.173 li
257.238 147.173 li
257.488 147.173 li
257.688 147.173 li
257.938 147.173 li
258.188 147.173 li
208.438 146.724 mo
208.688 146.724 li
208.889 146.724 li
209.139 146.773 li
209.389 146.773 li
209.639 146.773 li
209.889 146.773 li
210.088 146.773 li
210.338 146.773 li
210.588 146.773 li
210.838 146.773 li
211.039 146.773 li
211.289 146.773 li
211.539 146.773 li
211.789 146.773 li
212.039 146.773 li
212.238 146.773 li
212.488 146.773 li
212.738 146.773 li
212.988 146.773 li
213.238 146.773 li
213.438 146.773 li
213.688 146.773 li
213.938 146.824 li
214.188 146.824 li
214.389 146.824 li
214.639 146.824 li
214.889 146.824 li
215.139 146.824 li
215.389 146.824 li
215.588 146.824 li
215.838 146.824 li
216.088 146.824 li
216.338 146.824 li
216.588 146.824 li
216.789 146.824 li
217.039 146.824 li
217.289 146.824 li
217.539 146.824 li
217.738 146.824 li
217.988 146.824 li
218.238 146.824 li
218.488 146.824 li
218.738 146.875 li
218.938 146.875 li
219.188 146.875 li
219.438 146.875 li
219.688 146.875 li
219.889 146.875 li
220.139 146.875 li
220.389 146.875 li
220.639 146.875 li
220.889 146.875 li
221.088 146.875 li
221.338 146.875 li
221.588 146.875 li
221.838 146.875 li
222.088 146.875 li
222.289 146.875 li
222.539 146.875 li
222.789 146.875 li
223.039 146.875 li
223.238 146.875 li
223.488 146.875 li
223.738 146.923 li
223.988 146.923 li
224.238 146.923 li
224.438 146.923 li
224.688 146.923 li
224.938 146.923 li
225.188 146.923 li
225.438 146.923 li
225.639 146.923 li
225.889 146.923 li
226.139 146.923 li
226.389 146.923 li
226.588 146.923 li
226.838 146.923 li
227.088 146.923 li
227.338 146.923 li
227.588 146.923 li
227.789 146.923 li
228.039 146.923 li
228.289 146.923 li
228.539 146.923 li
228.738 146.923 li
228.988 146.923 li
229.238 146.974 li
229.488 146.974 li
229.738 146.974 li
229.938 146.974 li
230.188 146.974 li
230.438 146.974 li
230.688 146.974 li
230.938 146.974 li
231.139 146.974 li
231.389 146.974 li
231.639 146.974 li
231.889 146.974 li
232.088 146.974 li
232.338 146.974 li
232.588 146.974 li
232.838 146.974 li
233.088 146.974 li
233.289 146.974 li
183.539 146.423 mo
183.789 146.423 li
184.039 146.423 li
184.289 146.423 li
184.488 146.423 li
184.738 146.423 li
184.988 146.423 li
185.238 146.423 li
185.488 146.423 li
185.688 146.423 li
185.938 146.474 li
186.188 146.474 li
186.438 146.474 li
186.688 146.474 li
186.889 146.474 li
187.139 146.474 li
187.389 146.474 li
187.639 146.474 li
187.838 146.474 li
188.088 146.474 li
188.338 146.474 li
188.588 146.474 li
188.838 146.474 li
189.039 146.474 li
189.289 146.474 li
189.539 146.523 li
189.789 146.523 li
190.039 146.523 li
190.238 146.523 li
190.488 146.523 li
190.738 146.523 li
190.988 146.523 li
191.188 146.523 li
191.438 146.523 li
191.688 146.523 li
191.938 146.523 li
192.188 146.523 li
192.389 146.523 li
192.639 146.523 li
192.889 146.523 li
193.139 146.574 li
193.338 146.574 li
193.588 146.574 li
193.838 146.574 li
194.088 146.574 li
194.338 146.574 li
194.539 146.574 li
194.789 146.574 li
195.039 146.574 li
195.289 146.574 li
195.539 146.574 li
195.738 146.574 li
195.988 146.574 li
196.238 146.574 li
196.488 146.574 li
196.688 146.625 li
196.938 146.625 li
197.188 146.625 li
197.438 146.625 li
197.688 146.625 li
197.889 146.625 li
198.139 146.625 li
198.389 146.625 li
198.639 146.625 li
198.889 146.625 li
199.088 146.625 li
199.338 146.625 li
199.588 146.625 li
199.838 146.625 li
200.039 146.625 li
200.289 146.625 li
200.539 146.625 li
200.789 146.673 li
201.039 146.673 li
201.238 146.673 li
201.488 146.673 li
201.738 146.673 li
201.988 146.673 li
202.188 146.673 li
202.438 146.673 li
202.688 146.673 li
202.938 146.673 li
203.188 146.673 li
203.389 146.673 li
203.639 146.673 li
203.889 146.673 li
204.139 146.673 li
204.389 146.673 li
204.588 146.673 li
204.838 146.724 li
205.088 146.724 li
205.338 146.724 li
205.539 146.724 li
205.789 146.724 li
206.039 146.724 li
206.289 146.724 li
206.539 146.724 li
206.738 146.724 li
206.988 146.724 li
207.238 146.724 li
207.488 146.724 li
207.738 146.724 li
207.938 146.724 li
208.188 146.724 li
208.438 146.724 li
158.688 145.974 mo
158.938 145.974 li
159.139 145.974 li
159.389 145.974 li
159.639 145.974 li
159.889 145.974 li
160.139 145.974 li
160.338 145.974 li
160.588 146.023 li
160.838 146.023 li
161.088 146.023 li
161.289 146.023 li
161.539 146.023 li
161.789 146.023 li
162.039 146.023 li
162.289 146.023 li
162.488 146.023 li
162.738 146.023 li
162.988 146.074 li
163.238 146.074 li
163.488 146.074 li
163.688 146.074 li
163.938 146.074 li
164.188 146.074 li
164.438 146.074 li
164.639 146.074 li
164.889 146.074 li
165.139 146.074 li
165.389 146.074 li
165.639 146.125 li
165.838 146.125 li
166.088 146.125 li
166.338 146.125 li
166.588 146.125 li
166.789 146.125 li
167.039 146.125 li
167.289 146.125 li
167.539 146.125 li
167.789 146.125 li
167.988 146.173 li
168.238 146.173 li
168.488 146.173 li
168.738 146.173 li
168.988 146.173 li
169.188 146.173 li
169.438 146.173 li
169.688 146.173 li
169.938 146.173 li
170.139 146.173 li
170.389 146.173 li
170.639 146.173 li
170.889 146.224 li
171.139 146.224 li
171.338 146.224 li
171.588 146.224 li
171.838 146.224 li
172.088 146.224 li
172.338 146.224 li
172.539 146.224 li
172.789 146.224 li
173.039 146.224 li
173.289 146.224 li
173.488 146.273 li
173.738 146.273 li
173.988 146.273 li
174.238 146.273 li
174.488 146.273 li
174.688 146.273 li
174.938 146.273 li
175.188 146.273 li
175.438 146.273 li
175.639 146.273 li
175.889 146.273 li
176.139 146.273 li
176.389 146.324 li
176.639 146.324 li
176.838 146.324 li
177.088 146.324 li
177.338 146.324 li
177.588 146.324 li
177.838 146.324 li
178.039 146.324 li
178.289 146.324 li
178.537 146.324 li
178.787 146.324 li
178.988 146.324 li
179.238 146.324 li
179.488 146.375 li
179.738 146.375 li
179.988 146.375 li
180.188 146.375 li
180.438 146.375 li
180.688 146.375 li
180.938 146.375 li
181.188 146.375 li
181.389 146.375 li
181.639 146.375 li
181.889 146.375 li
182.139 146.375 li
182.338 146.375 li
182.588 146.423 li
182.838 146.423 li
183.088 146.423 li
183.338 146.423 li
183.537 146.423 li
133.788 145.273 mo
134.038 145.273 li
134.288 145.273 li
134.538 145.324 li
134.738 145.324 li
134.988 145.324 li
135.238 145.324 li
135.488 145.324 li
135.738 145.324 li
135.938 145.375 li
136.188 145.375 li
136.438 145.375 li
136.688 145.375 li
136.938 145.375 li
137.139 145.375 li
137.389 145.375 li
137.639 145.423 li
137.889 145.423 li
138.088 145.423 li
138.338 145.423 li
138.588 145.423 li
138.838 145.423 li
139.088 145.474 li
139.289 145.474 li
139.539 145.474 li
139.789 145.474 li
140.039 145.474 li
140.238 145.474 li
140.488 145.474 li
140.738 145.523 li
140.988 145.523 li
141.238 145.523 li
141.438 145.523 li
141.688 145.523 li
141.938 145.523 li
142.188 145.523 li
142.438 145.574 li
142.639 145.574 li
142.889 145.574 li
143.139 145.574 li
143.389 145.574 li
143.588 145.574 li
143.838 145.574 li
144.088 145.574 li
144.338 145.625 li
144.588 145.625 li
144.789 145.625 li
145.039 145.625 li
145.289 145.625 li
145.539 145.625 li
145.789 145.625 li
145.988 145.673 li
146.238 145.673 li
146.488 145.673 li
146.738 145.673 li
146.938 145.673 li
147.188 145.673 li
147.438 145.673 li
147.688 145.673 li
147.938 145.724 li
148.139 145.724 li
148.389 145.724 li
148.639 145.724 li
148.889 145.724 li
149.088 145.724 li
149.338 145.724 li
149.588 145.724 li
149.838 145.773 li
150.088 145.773 li
150.289 145.773 li
150.539 145.773 li
150.789 145.773 li
151.039 145.773 li
151.289 145.773 li
151.488 145.773 li
151.738 145.773 li
151.988 145.824 li
152.238 145.824 li
152.438 145.824 li
152.688 145.824 li
152.938 145.824 li
153.188 145.824 li
153.438 145.824 li
153.639 145.824 li
153.889 145.875 li
154.139 145.875 li
154.389 145.875 li
154.639 145.875 li
154.838 145.875 li
155.088 145.875 li
155.338 145.875 li
155.588 145.875 li
155.787 145.875 li
156.037 145.923 li
156.287 145.923 li
156.537 145.923 li
156.787 145.923 li
156.988 145.923 li
157.238 145.923 li
157.488 145.923 li
157.738 145.923 li
157.938 145.923 li
158.188 145.923 li
158.438 145.974 li
158.688 145.974 li
108.938 144.173 mo
109.188 144.173 li
109.388 144.173 li
109.638 144.224 li
109.888 144.224 li
110.138 144.224 li
110.388 144.224 li
110.588 144.273 li
110.838 144.273 li
111.088 144.273 li
111.338 144.273 li
111.538 144.324 li
111.788 144.324 li
112.038 144.324 li
112.288 144.375 li
112.538 144.375 li
112.738 144.375 li
112.988 144.375 li
113.238 144.423 li
113.488 144.423 li
113.688 144.423 li
113.938 144.423 li
114.188 144.474 li
114.438 144.474 li
114.688 144.474 li
114.888 144.474 li
115.138 144.523 li
115.388 144.523 li
115.638 144.523 li
115.888 144.523 li
116.088 144.574 li
116.338 144.574 li
116.588 144.574 li
116.838 144.574 li
117.038 144.574 li
117.288 144.625 li
117.538 144.625 li
117.788 144.625 li
118.038 144.625 li
118.238 144.673 li
118.488 144.673 li
118.738 144.673 li
118.988 144.673 li
119.238 144.724 li
119.438 144.724 li
119.688 144.724 li
119.938 144.724 li
120.188 144.724 li
120.388 144.773 li
120.638 144.773 li
120.888 144.773 li
121.138 144.773 li
121.388 144.773 li
121.588 144.824 li
121.838 144.824 li
122.088 144.824 li
122.338 144.824 li
122.539 144.875 li
122.789 144.875 li
123.039 144.875 li
123.289 144.875 li
123.539 144.875 li
123.738 144.923 li
123.988 144.923 li
124.238 144.923 li
124.488 144.923 li
124.738 144.923 li
124.938 144.974 li
125.188 144.974 li
125.438 144.974 li
125.688 144.974 li
125.888 144.974 li
126.138 144.974 li
126.388 145.023 li
126.638 145.023 li
126.888 145.023 li
127.088 145.023 li
127.338 145.023 li
127.588 145.074 li
127.838 145.074 li
128.088 145.074 li
128.289 145.074 li
128.539 145.074 li
128.789 145.125 li
129.039 145.125 li
129.238 145.125 li
129.488 145.125 li
129.738 145.125 li
129.988 145.125 li
130.238 145.173 li
130.438 145.173 li
130.688 145.173 li
130.938 145.173 li
131.188 145.173 li
131.388 145.173 li
131.638 145.224 li
131.888 145.224 li
132.138 145.224 li
132.388 145.224 li
132.588 145.224 li
132.838 145.224 li
133.088 145.273 li
133.338 145.273 li
133.588 145.273 li
133.789 145.273 li
84.0381 141.974 mo
84.2881 141.974 li
84.5381 142.023 li
84.7881 142.074 li
84.9883 142.074 li
85.2383 142.125 li
85.4883 142.125 li
85.7383 142.173 li
85.9883 142.224 li
86.188 142.224 li
86.438 142.273 li
86.688 142.273 li
86.938 142.324 li
87.1382 142.324 li
87.3882 142.375 li
87.6382 142.423 li
87.8882 142.423 li
88.1382 142.474 li
88.3384 142.474 li
88.5884 142.523 li
88.8384 142.523 li
89.0884 142.574 li
89.3384 142.574 li
89.5381 142.625 li
89.7881 142.625 li
90.0381 142.673 li
90.2881 142.673 li
90.4883 142.724 li
90.7383 142.724 li
90.9883 142.773 li
91.2383 142.773 li
91.4883 142.824 li
91.6885 142.824 li
91.9385 142.875 li
92.1885 142.875 li
92.4385 142.923 li
92.6885 142.923 li
92.8882 142.974 li
93.1382 142.974 li
93.3882 142.974 li
93.6382 143.023 li
93.8384 143.023 li
94.0884 143.074 li
94.3384 143.074 li
94.5884 143.125 li
94.8384 143.125 li
95.0386 143.173 li
95.2886 143.173 li
95.5386 143.173 li
95.7886 143.224 li
95.9883 143.224 li
96.2383 143.273 li
96.4883 143.273 li
96.7383 143.273 li
96.9883 143.324 li
97.1885 143.324 li
97.4385 143.375 li
97.6885 143.375 li
97.9385 143.375 li
98.1885 143.423 li
98.3882 143.423 li
98.6382 143.474 li
98.8882 143.474 li
99.1382 143.474 li
99.3384 143.523 li
99.5884 143.523 li
99.8384 143.523 li
100.088 143.574 li
100.338 143.574 li
100.539 143.625 li
100.789 143.625 li
101.039 143.625 li
101.289 143.673 li
101.539 143.673 li
101.738 143.673 li
101.988 143.724 li
102.238 143.724 li
102.488 143.724 li
102.688 143.775 li
102.938 143.775 li
103.188 143.775 li
103.438 143.824 li
103.688 143.824 li
103.888 143.824 li
104.138 143.875 li
104.388 143.875 li
104.638 143.875 li
104.838 143.923 li
105.088 143.923 li
105.338 143.923 li
105.588 143.974 li
105.838 143.974 li
106.039 143.974 li
106.289 143.974 li
106.539 144.025 li
106.789 144.025 li
107.039 144.025 li
107.238 144.074 li
107.488 144.074 li
107.738 144.074 li
107.988 144.125 li
108.188 144.125 li
108.438 144.125 li
108.688 144.125 li
108.938 144.173 li
59.188 135.673 mo
59.438 135.773 li
59.6382 135.923 li
59.8882 136.023 li
60.1382 136.125 li
60.3882 136.224 li
60.5884 136.324 li
60.8384 136.423 li
61.0884 136.574 li
61.3384 136.673 li
61.5884 136.773 li
61.7881 136.824 li
62.0381 136.923 li
62.2881 137.023 li
62.5381 137.123 li
62.7881 137.224 li
62.9883 137.324 li
63.2383 137.373 li
63.4883 137.474 li
63.7383 137.574 li
63.938 137.673 li
64.188 137.724 li
64.438 137.824 li
64.6885 137.923 li
64.9385 137.974 li
65.1382 138.074 li
65.3882 138.123 li
65.6382 138.224 li
65.8882 138.273 li
66.1382 138.373 li
66.3384 138.423 li
66.5884 138.523 li
66.8384 138.574 li
67.0884 138.623 li
67.2881 138.724 li
67.5381 138.773 li
67.7881 138.873 li
68.0381 138.923 li
68.2881 138.974 li
68.4883 139.074 li
68.7383 139.123 li
68.9883 139.173 li
69.2383 139.224 li
69.4385 139.324 li
69.6885 139.373 li
69.9385 139.423 li
70.1885 139.474 li
70.4385 139.523 li
70.6382 139.574 li
70.8882 139.673 li
71.1382 139.724 li
71.3882 139.773 li
71.6382 139.824 li
71.8384 139.875 li
72.0884 139.923 li
72.3384 139.974 li
72.5884 140.023 li
72.7886 140.074 li
73.0386 140.125 li
73.2886 140.173 li
73.5386 140.224 li
73.7886 140.273 li
73.9883 140.324 li
74.2383 140.375 li
74.4883 140.423 li
74.7383 140.474 li
74.9883 140.523 li
75.1885 140.574 li
75.4385 140.625 li
75.6885 140.673 li
75.9385 140.673 li
76.1382 140.724 li
76.3882 140.773 li
76.6382 140.824 li
76.8882 140.875 li
77.1382 140.923 li
77.3384 140.974 li
77.5884 140.974 li
77.8384 141.023 li
78.0884 141.074 li
78.2886 141.125 li
78.5386 141.173 li
78.7886 141.173 li
79.0386 141.224 li
79.2886 141.273 li
79.4883 141.324 li
79.7383 141.324 li
79.9883 141.375 li
80.2383 141.423 li
80.4883 141.474 li
80.6885 141.474 li
80.9385 141.523 li
81.1885 141.574 li
81.4385 141.574 li
81.6387 141.625 li
81.8887 141.673 li
82.1387 141.724 li
82.3887 141.724 li
82.6387 141.775 li
82.8384 141.824 li
83.0884 141.824 li
83.3384 141.875 li
83.5884 141.875 li
83.8384 141.923 li
84.0386 141.974 li
34.7881 3.67383 mo
35.0381 15.8735 li
35.2383 26.9736 li
35.4883 36.3237 li
35.7383 44.3735 li
35.9883 51.3237 li
36.2383 57.3735 li
36.438 62.7734 li
36.688 67.5234 li
36.938 71.8237 li
37.188 75.6738 li
37.3882 79.1235 li
37.6382 82.3237 li
37.8882 85.1738 li
38.1382 87.8237 li
38.3882 90.2734 li
38.5884 92.5234 li
38.8384 94.6235 li
39.0884 96.5234 li
39.3384 98.3232 li
39.5884 100.023 li
39.7881 101.574 li
40.0381 103.074 li
40.2881 104.423 li
40.5381 105.724 li
40.7383 106.974 li
40.9883 108.125 li
41.2383 109.224 li
41.4883 110.273 li
41.7383 111.273 li
41.9385 112.173 li
42.1885 113.074 li
42.4385 113.923 li
42.6885 114.724 li
42.8882 115.523 li
43.1382 116.273 li
43.3882 116.974 li
43.6382 117.625 li
43.8882 118.273 li
44.0884 118.923 li
44.3384 119.523 li
44.5884 120.074 li
44.8384 120.625 li
45.0884 121.173 li
45.2881 121.673 li
45.5381 122.173 li
45.7881 122.625 li
46.0381 123.074 li
46.2383 123.523 li
46.4883 123.974 li
46.7383 124.375 li
46.9883 124.773 li
47.2383 125.173 li
47.4385 125.523 li
47.6885 125.875 li
47.9385 126.224 li
48.1885 126.574 li
48.4385 126.923 li
48.6382 127.224 li
48.8882 127.523 li
49.1382 127.875 li
49.3882 128.125 li
49.5884 128.423 li
49.8384 128.724 li
50.0884 128.974 li
50.3384 129.224 li
50.5884 129.523 li
50.7886 129.773 li
51.0386 129.974 li
51.2886 130.224 li
51.5386 130.474 li
51.7383 130.673 li
51.9883 130.923 li
52.2383 131.125 li
52.4883 131.324 li
52.7383 131.523 li
52.9385 131.724 li
53.1885 131.923 li
53.4385 132.125 li
53.6885 132.324 li
53.9385 132.474 li
54.1382 132.673 li
54.3882 132.824 li
54.6382 133.023 li
54.8882 133.173 li
55.0884 133.324 li
55.3384 133.523 li
55.5884 133.673 li
55.8384 133.824 li
56.0884 133.974 li
56.2886 134.125 li
56.5386 134.273 li
56.7886 134.423 li
57.0386 134.523 li
57.2886 134.673 li
57.4883 134.824 li
57.7383 134.923 li
57.9883 135.074 li
58.2383 135.173 li
58.4385 135.324 li
58.6885 135.423 li
58.9385 135.574 li
59.1885 135.673 li
242.988 17.3237 mo
262.938 17.3237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDM+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A75CA669> |-/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67BA95C799E46FC7C8D88E9FFD990A> |-/g <1C60D8A8C9B7EF326F0C168637D7A49AFFC209EC4BD7378EE8A777DA14ED0433ABB575BAA4A098791F7EC46D250F5BCBA737E6ADD6E1EA28A72C69A1D2534789ED43F588B444BB33EF91B59EF2C4FE743D22BB1490B1C3D985CEC86DB4CAEC82645FBE79A010F5150478D7CD822F749944770C7A9AD08A4C4D068AD8C66DD4250133C698BF087BA2E532A8750CA7F12CE9EAE477EA1DDA085AAD3B0D4A0456D044E2A177014C879AB81F36C957A614E7A4A934> |-/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C0EAF> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDM+Helvetica /Encoding getdup 45 /hyphen putdup 84 /T putdup 103 /g putdup 108 /l putpop%ADOEndSubsetFont
/DVPWDM+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /six /.notdef /eight /.notdef /colon 7{/.notdef}rp /B 6{/.notdef}rp /I 9{/.notdef}rp /S /T /U 11{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]DVPWDM+Helvetica nfDVPWDM+Helvetica*1 [7 0 0 -7 0 0 ]msf146.224 26.6616 mo(Single-Item Time: 30 seconds)[4.66895 1.55371 3.89258 3.8916 1.55371 3.89258 2.33008 1.94629 1.94629 3.8916 5.83105 1.59766 4.27637 1.55469 5.83105 3.8916 1.59766 1.94531 3.89258 3.8916 1.94629 3.5 3.8916 3.5 3.89258 3.8916 3.89258 0 ]xsh0.125 lw
[0.5 1 ] 0 dsh
255.789 148.724 mo
256.039 148.724 li
256.289 148.724 li
256.488 148.724 li
256.738 148.724 li
256.988 148.724 li
257.238 148.724 li
257.488 148.724 li
257.688 148.724 li
257.938 148.724 li
258.188 148.724 li
258.438 148.724 li
258.639 148.724 li
258.889 148.724 li
259.139 148.724 li
259.389 148.724 li
259.639 148.724 li
259.838 148.724 li
260.088 148.724 li
260.338 148.724 li
260.588 148.724 li
260.838 148.724 li
261.039 148.724 li
261.289 148.724 li
261.539 148.724 li
261.789 148.724 li
261.988 148.724 li
262.238 148.724 li
262.488 148.724 li
262.738 148.724 li
262.988 148.724 li
263.188 148.724 li
263.438 148.724 li
263.688 148.724 li
263.938 148.724 li
264.139 148.724 li
264.389 148.724 li
264.639 148.724 li
264.889 148.724 li
265.139 148.724 li
265.338 148.724 li
265.588 148.724 li
265.838 148.724 li
266.088 148.724 li
266.338 148.724 li
266.539 148.724 li
266.789 148.724 li
267.039 148.724 li
267.289 148.724 li
267.488 148.724 li
267.738 148.724 li
267.988 148.724 li
268.238 148.724 li
268.488 148.724 li
268.688 148.724 li
268.938 148.724 li
269.188 148.724 li
269.438 148.724 li
269.688 148.724 li
269.889 148.724 li
270.139 148.724 li
270.389 148.724 li
270.639 148.724 li
270.838 148.724 li
271.088 148.724 li
271.338 148.724 li
230.938 148.724 mo
231.139 148.724 li
231.389 148.724 li
231.639 148.724 li
231.889 148.724 li
232.088 148.724 li
232.338 148.724 li
232.588 148.724 li
232.838 148.724 li
233.088 148.724 li
233.289 148.724 li
233.539 148.724 li
233.789 148.724 li
234.039 148.724 li
234.289 148.724 li
234.488 148.724 li
234.738 148.724 li
234.988 148.724 li
235.238 148.724 li
235.438 148.724 li
235.688 148.724 li
235.938 148.724 li
236.188 148.724 li
236.438 148.724 li
236.639 148.724 li
236.889 148.724 li
237.139 148.724 li
237.389 148.724 li
237.588 148.724 li
237.838 148.724 li
238.088 148.724 li
238.338 148.724 li
238.588 148.724 li
238.789 148.724 li
239.039 148.724 li
239.289 148.724 li
239.539 148.724 li
239.789 148.724 li
239.988 148.724 li
240.238 148.724 li
240.488 148.724 li
240.738 148.724 li
240.938 148.724 li
241.188 148.724 li
241.438 148.724 li
241.688 148.724 li
241.938 148.724 li
242.139 148.724 li
242.389 148.724 li
242.639 148.724 li
242.889 148.724 li
243.139 148.724 li
243.338 148.724 li
243.588 148.724 li
243.838 148.724 li
244.088 148.724 li
244.289 148.724 li
244.539 148.724 li
244.789 148.724 li
245.039 148.724 li
245.289 148.724 li
245.488 148.724 li
245.738 148.724 li
245.988 148.724 li
246.238 148.724 li
246.438 148.724 li
246.688 148.724 li
246.938 148.724 li
247.188 148.724 li
247.438 148.724 li
247.639 148.724 li
247.889 148.724 li
248.139 148.724 li
248.389 148.724 li
248.639 148.724 li
248.838 148.724 li
249.088 148.724 li
249.338 148.724 li
249.588 148.724 li
249.789 148.724 li
250.039 148.724 li
250.289 148.724 li
250.539 148.724 li
250.789 148.724 li
250.988 148.724 li
251.238 148.724 li
251.488 148.724 li
251.738 148.724 li
251.988 148.724 li
252.188 148.724 li
252.438 148.724 li
252.688 148.724 li
252.938 148.724 li
253.139 148.724 li
253.389 148.724 li
253.639 148.724 li
253.889 148.724 li
254.139 148.724 li
254.338 148.724 li
254.588 148.724 li
254.838 148.724 li
255.088 148.724 li
255.289 148.724 li
255.539 148.724 li
255.789 148.724 li
206.039 148.724 mo
206.289 148.724 li
206.539 148.724 li
206.738 148.724 li
206.988 148.724 li
207.238 148.724 li
207.488 148.724 li
207.738 148.724 li
207.938 148.724 li
208.188 148.724 li
208.438 148.724 li
208.688 148.724 li
208.889 148.724 li
209.139 148.724 li
209.389 148.724 li
209.639 148.724 li
209.889 148.724 li
210.088 148.724 li
210.338 148.724 li
210.588 148.724 li
210.838 148.724 li
211.039 148.724 li
211.289 148.724 li
211.539 148.724 li
211.789 148.724 li
212.039 148.724 li
212.238 148.724 li
212.488 148.724 li
212.738 148.724 li
212.988 148.724 li
213.238 148.724 li
213.438 148.724 li
213.688 148.724 li
213.938 148.724 li
214.188 148.724 li
214.389 148.724 li
214.639 148.724 li
214.889 148.724 li
215.139 148.724 li
215.389 148.724 li
215.588 148.724 li
215.838 148.724 li
216.088 148.724 li
216.338 148.724 li
216.588 148.724 li
216.789 148.724 li
217.039 148.724 li
217.289 148.724 li
217.539 148.724 li
217.738 148.724 li
217.988 148.724 li
218.238 148.724 li
218.488 148.724 li
218.738 148.724 li
218.938 148.724 li
219.188 148.724 li
219.438 148.724 li
219.688 148.724 li
219.889 148.724 li
220.139 148.724 li
220.389 148.724 li
220.639 148.724 li
220.889 148.724 li
221.088 148.724 li
221.338 148.724 li
221.588 148.724 li
221.838 148.724 li
222.088 148.724 li
222.289 148.724 li
222.539 148.724 li
222.789 148.724 li
223.039 148.724 li
223.238 148.724 li
223.488 148.724 li
223.738 148.724 li
223.988 148.724 li
224.238 148.724 li
224.438 148.724 li
224.688 148.724 li
224.938 148.724 li
225.188 148.724 li
225.438 148.724 li
225.639 148.724 li
225.889 148.724 li
226.139 148.724 li
226.389 148.724 li
226.588 148.724 li
226.838 148.724 li
227.088 148.724 li
227.338 148.724 li
227.588 148.724 li
227.789 148.724 li
228.039 148.724 li
228.289 148.724 li
228.539 148.724 li
228.738 148.724 li
228.988 148.724 li
229.238 148.724 li
229.488 148.724 li
229.738 148.724 li
229.938 148.724 li
230.188 148.724 li
230.438 148.724 li
230.688 148.724 li
230.938 148.724 li
181.188 148.724 mo
181.389 148.724 li
181.639 148.724 li
181.889 148.724 li
182.139 148.724 li
182.338 148.724 li
182.588 148.724 li
182.838 148.724 li
183.088 148.724 li
183.338 148.724 li
183.539 148.724 li
183.789 148.724 li
184.039 148.724 li
184.289 148.724 li
184.488 148.724 li
184.738 148.724 li
184.988 148.724 li
185.238 148.724 li
185.488 148.724 li
185.688 148.724 li
185.938 148.724 li
186.188 148.724 li
186.438 148.724 li
186.688 148.724 li
186.889 148.724 li
187.139 148.724 li
187.389 148.724 li
187.639 148.724 li
187.838 148.724 li
188.088 148.724 li
188.338 148.724 li
188.588 148.724 li
188.838 148.724 li
189.039 148.724 li
189.289 148.724 li
189.539 148.724 li
189.789 148.724 li
190.039 148.724 li
190.238 148.724 li
190.488 148.724 li
190.738 148.724 li
190.988 148.724 li
191.188 148.724 li
191.438 148.724 li
191.688 148.724 li
191.938 148.724 li
192.188 148.724 li
192.389 148.724 li
192.639 148.724 li
192.889 148.724 li
193.139 148.724 li
193.338 148.724 li
193.588 148.724 li
193.838 148.724 li
194.088 148.724 li
194.338 148.724 li
194.539 148.724 li
194.789 148.724 li
195.039 148.724 li
195.289 148.724 li
195.539 148.724 li
195.738 148.724 li
195.988 148.724 li
196.238 148.724 li
196.488 148.724 li
196.688 148.724 li
196.938 148.724 li
197.188 148.724 li
197.438 148.724 li
197.688 148.724 li
197.889 148.724 li
198.139 148.724 li
198.389 148.724 li
198.639 148.724 li
198.889 148.724 li
199.088 148.724 li
199.338 148.724 li
199.588 148.724 li
199.838 148.724 li
200.039 148.724 li
200.289 148.724 li
200.539 148.724 li
200.789 148.724 li
201.039 148.724 li
201.238 148.724 li
201.488 148.724 li
201.738 148.724 li
201.988 148.724 li
202.188 148.724 li
202.438 148.724 li
202.688 148.724 li
202.938 148.724 li
203.188 148.724 li
203.389 148.724 li
203.639 148.724 li
203.889 148.724 li
204.139 148.724 li
204.389 148.724 li
204.588 148.724 li
204.838 148.724 li
205.088 148.724 li
205.338 148.724 li
205.539 148.724 li
205.789 148.724 li
206.039 148.724 li
156.289 148.724 mo
156.539 148.724 li
156.789 148.724 li
156.988 148.724 li
157.238 148.724 li
157.488 148.724 li
157.738 148.724 li
157.938 148.724 li
158.188 148.724 li
158.438 148.724 li
158.688 148.724 li
158.938 148.724 li
159.139 148.724 li
159.389 148.724 li
159.639 148.724 li
159.889 148.724 li
160.139 148.724 li
160.338 148.724 li
160.588 148.724 li
160.838 148.724 li
161.088 148.724 li
161.289 148.724 li
161.539 148.724 li
161.789 148.724 li
162.039 148.724 li
162.289 148.724 li
162.488 148.724 li
162.738 148.724 li
162.988 148.724 li
163.238 148.724 li
163.488 148.724 li
163.688 148.724 li
163.938 148.724 li
164.188 148.724 li
164.438 148.724 li
164.639 148.724 li
164.889 148.724 li
165.139 148.724 li
165.389 148.724 li
165.639 148.724 li
165.838 148.724 li
166.088 148.724 li
166.338 148.724 li
166.588 148.724 li
166.789 148.724 li
167.039 148.724 li
167.289 148.724 li
167.539 148.724 li
167.789 148.724 li
167.988 148.724 li
168.238 148.724 li
168.488 148.724 li
168.738 148.724 li
168.988 148.724 li
169.188 148.724 li
169.438 148.724 li
169.688 148.724 li
169.938 148.724 li
170.139 148.724 li
170.389 148.724 li
170.639 148.724 li
170.889 148.724 li
171.139 148.724 li
171.338 148.724 li
171.588 148.724 li
171.838 148.724 li
172.088 148.724 li
172.338 148.724 li
172.539 148.724 li
172.789 148.724 li
173.039 148.724 li
173.289 148.724 li
173.488 148.724 li
173.738 148.724 li
173.988 148.724 li
174.238 148.724 li
174.488 148.724 li
174.688 148.724 li
174.938 148.724 li
175.188 148.724 li
175.438 148.724 li
175.639 148.724 li
175.889 148.724 li
176.139 148.724 li
176.389 148.724 li
176.639 148.724 li
176.838 148.724 li
177.088 148.724 li
177.338 148.724 li
177.588 148.724 li
177.838 148.724 li
178.037 148.724 li
178.287 148.724 li
178.537 148.724 li
178.787 148.724 li
178.988 148.724 li
179.238 148.724 li
179.488 148.724 li
179.738 148.724 li
179.988 148.724 li
180.188 148.724 li
180.438 148.724 li
180.688 148.724 li
180.938 148.724 li
181.188 148.724 li
131.388 148.724 mo
131.638 148.724 li
131.888 148.724 li
132.138 148.724 li
132.388 148.724 li
132.588 148.724 li
132.838 148.724 li
133.088 148.724 li
133.338 148.724 li
133.588 148.724 li
133.788 148.724 li
134.038 148.724 li
134.288 148.724 li
134.538 148.724 li
134.738 148.724 li
134.988 148.724 li
135.238 148.724 li
135.488 148.724 li
135.738 148.724 li
135.938 148.724 li
136.188 148.724 li
136.438 148.724 li
136.688 148.724 li
136.938 148.724 li
137.139 148.724 li
137.389 148.724 li
137.639 148.724 li
137.889 148.724 li
138.088 148.724 li
138.338 148.724 li
138.588 148.724 li
138.838 148.724 li
139.088 148.724 li
139.289 148.724 li
139.539 148.724 li
139.789 148.724 li
140.039 148.724 li
140.238 148.724 li
140.488 148.724 li
140.738 148.724 li
140.988 148.724 li
141.238 148.724 li
141.438 148.724 li
141.688 148.724 li
141.938 148.724 li
142.188 148.724 li
142.438 148.724 li
142.639 148.724 li
142.889 148.724 li
143.139 148.724 li
143.389 148.724 li
143.588 148.724 li
143.838 148.724 li
144.088 148.724 li
144.338 148.724 li
144.588 148.724 li
144.789 148.724 li
145.039 148.724 li
145.289 148.724 li
145.539 148.724 li
145.789 148.724 li
145.988 148.724 li
146.238 148.724 li
146.488 148.724 li
146.738 148.724 li
146.938 148.724 li
147.188 148.724 li
147.438 148.724 li
147.688 148.724 li
147.938 148.724 li
148.139 148.724 li
148.389 148.724 li
148.639 148.724 li
148.889 148.724 li
149.088 148.724 li
149.338 148.724 li
149.588 148.724 li
149.838 148.724 li
150.088 148.724 li
150.289 148.724 li
150.539 148.724 li
150.787 148.724 li
151.037 148.724 li
151.287 148.724 li
151.488 148.724 li
151.738 148.724 li
151.988 148.724 li
152.238 148.724 li
152.438 148.724 li
152.688 148.724 li
152.938 148.724 li
153.188 148.724 li
153.438 148.724 li
153.639 148.724 li
153.889 148.724 li
154.139 148.724 li
154.389 148.724 li
154.639 148.724 li
154.838 148.724 li
155.088 148.724 li
155.338 148.724 li
155.588 148.724 li
155.787 148.724 li
156.037 148.724 li
156.287 148.724 li
106.538 148.724 mo
106.788 148.724 li
107.038 148.724 li
107.238 148.724 li
107.488 148.724 li
107.738 148.724 li
107.988 148.724 li
108.188 148.724 li
108.438 148.724 li
108.688 148.724 li
108.938 148.724 li
109.188 148.724 li
109.388 148.724 li
109.638 148.724 li
109.888 148.724 li
110.138 148.724 li
110.388 148.724 li
110.588 148.724 li
110.838 148.724 li
111.088 148.724 li
111.338 148.724 li
111.538 148.724 li
111.788 148.724 li
112.038 148.724 li
112.288 148.724 li
112.538 148.724 li
112.738 148.724 li
112.988 148.724 li
113.238 148.724 li
113.488 148.724 li
113.688 148.724 li
113.938 148.724 li
114.188 148.724 li
114.438 148.724 li
114.688 148.724 li
114.888 148.724 li
115.138 148.724 li
115.388 148.724 li
115.638 148.724 li
115.888 148.724 li
116.088 148.724 li
116.338 148.724 li
116.588 148.724 li
116.838 148.724 li
117.038 148.724 li
117.289 148.724 li
117.539 148.724 li
117.789 148.724 li
118.039 148.724 li
118.238 148.724 li
118.488 148.724 li
118.738 148.724 li
118.988 148.724 li
119.238 148.724 li
119.438 148.724 li
119.688 148.724 li
119.938 148.724 li
120.188 148.724 li
120.388 148.724 li
120.638 148.724 li
120.888 148.724 li
121.138 148.724 li
121.388 148.724 li
121.588 148.724 li
121.838 148.724 li
122.088 148.724 li
122.338 148.724 li
122.539 148.724 li
122.789 148.724 li
123.039 148.724 li
123.289 148.724 li
123.539 148.724 li
123.738 148.724 li
123.988 148.724 li
124.238 148.724 li
124.488 148.724 li
124.738 148.724 li
124.938 148.724 li
125.188 148.724 li
125.438 148.724 li
125.688 148.724 li
125.888 148.724 li
126.138 148.724 li
126.388 148.724 li
126.638 148.724 li
126.888 148.724 li
127.088 148.724 li
127.338 148.724 li
127.588 148.724 li
127.838 148.724 li
128.088 148.724 li
128.289 148.724 li
128.539 148.724 li
128.789 148.724 li
129.039 148.724 li
129.238 148.724 li
129.488 148.724 li
129.738 148.724 li
129.988 148.724 li
130.238 148.724 li
130.438 148.724 li
130.688 148.724 li
130.938 148.724 li
131.188 148.724 li
131.388 148.724 li
81.6382 148.724 mo
81.8882 148.724 li
82.1382 148.724 li
82.3882 148.724 li
82.6382 148.724 li
82.8384 148.724 li
83.0884 148.724 li
83.3384 148.724 li
83.5884 148.724 li
83.8384 148.724 li
84.0381 148.724 li
84.2881 148.724 li
84.5381 148.724 li
84.7881 148.724 li
84.9883 148.724 li
85.2383 148.724 li
85.4883 148.724 li
85.7383 148.724 li
85.9883 148.724 li
86.1885 148.724 li
86.4385 148.724 li
86.6885 148.724 li
86.9385 148.724 li
87.1382 148.724 li
87.3882 148.724 li
87.6382 148.724 li
87.8882 148.724 li
88.1382 148.724 li
88.3384 148.724 li
88.5884 148.724 li
88.8384 148.724 li
89.0884 148.724 li
89.3384 148.724 li
89.5381 148.724 li
89.7881 148.724 li
90.0381 148.724 li
90.2881 148.724 li
90.4883 148.724 li
90.7383 148.724 li
90.9883 148.724 li
91.2383 148.724 li
91.4883 148.724 li
91.6885 148.724 li
91.9385 148.724 li
92.1885 148.724 li
92.4385 148.724 li
92.6885 148.724 li
92.8882 148.724 li
93.1382 148.724 li
93.3882 148.724 li
93.6382 148.724 li
93.8384 148.724 li
94.0884 148.724 li
94.3384 148.724 li
94.5884 148.724 li
94.8384 148.724 li
95.0386 148.724 li
95.2886 148.724 li
95.5386 148.724 li
95.7886 148.724 li
95.9883 148.724 li
96.2383 148.724 li
96.4883 148.724 li
96.7383 148.724 li
96.9883 148.724 li
97.1885 148.724 li
97.4385 148.724 li
97.6885 148.724 li
97.9385 148.724 li
98.1885 148.724 li
98.3882 148.724 li
98.6382 148.724 li
98.8882 148.724 li
99.1382 148.724 li
99.3384 148.724 li
99.5884 148.724 li
99.8384 148.724 li
100.088 148.724 li
100.338 148.724 li
100.539 148.724 li
100.789 148.724 li
101.039 148.724 li
101.289 148.724 li
101.539 148.724 li
101.738 148.724 li
101.988 148.724 li
102.238 148.724 li
102.488 148.724 li
102.688 148.724 li
102.938 148.724 li
103.188 148.724 li
103.438 148.724 li
103.688 148.724 li
103.888 148.724 li
104.139 148.724 li
104.389 148.724 li
104.639 148.724 li
104.838 148.724 li
105.088 148.724 li
105.338 148.724 li
105.588 148.724 li
105.838 148.724 li
106.039 148.724 li
106.289 148.724 li
106.539 148.724 li
56.7881 148.724 mo
57.0381 148.724 li
57.2881 148.724 li
57.4883 148.724 li
57.7383 148.724 li
57.9883 148.724 li
58.2383 148.724 li
58.438 148.724 li
58.688 148.724 li
58.938 148.724 li
59.188 148.724 li
59.438 148.724 li
59.6382 148.724 li
59.8882 148.724 li
60.1382 148.724 li
60.3882 148.724 li
60.5884 148.724 li
60.8384 148.724 li
61.0884 148.724 li
61.3384 148.724 li
61.5884 148.724 li
61.7881 148.724 li
62.0381 148.724 li
62.2881 148.724 li
62.5381 148.724 li
62.7881 148.724 li
62.9883 148.724 li
63.2383 148.724 li
63.4883 148.724 li
63.7383 148.724 li
63.9385 148.724 li
64.1885 148.724 li
64.4385 148.724 li
64.6885 148.724 li
64.9385 148.724 li
65.1382 148.724 li
65.3882 148.724 li
65.6382 148.724 li
65.8882 148.724 li
66.1382 148.724 li
66.3384 148.724 li
66.5884 148.724 li
66.8384 148.724 li
67.0884 148.724 li
67.2881 148.724 li
67.5381 148.724 li
67.7881 148.724 li
68.0381 148.724 li
68.2881 148.724 li
68.4883 148.724 li
68.7383 148.724 li
68.9883 148.724 li
69.2383 148.724 li
69.4385 148.724 li
69.6885 148.724 li
69.9385 148.724 li
70.1885 148.724 li
70.4385 148.724 li
70.6382 148.724 li
70.8882 148.724 li
71.1382 148.724 li
71.3882 148.724 li
71.6382 148.724 li
71.8384 148.724 li
72.0884 148.724 li
72.3384 148.724 li
72.5884 148.724 li
72.7886 148.724 li
73.0386 148.724 li
73.2886 148.724 li
73.5386 148.724 li
73.7886 148.724 li
73.9883 148.724 li
74.2383 148.724 li
74.4883 148.724 li
74.7383 148.724 li
74.9883 148.724 li
75.1885 148.724 li
75.4385 148.724 li
75.6885 148.724 li
75.9385 148.724 li
76.1382 148.724 li
76.3882 148.724 li
76.6382 148.724 li
76.8882 148.724 li
77.1382 148.724 li
77.3384 148.724 li
77.5884 148.724 li
77.8384 148.724 li
78.0884 148.724 li
78.2886 148.724 li
78.5386 148.724 li
78.7886 148.724 li
79.0386 148.724 li
79.2886 148.724 li
79.4883 148.724 li
79.7383 148.724 li
79.9883 148.724 li
80.2383 148.724 li
80.4883 148.724 li
80.6885 148.724 li
80.9385 148.724 li
81.1885 148.724 li
81.4385 148.724 li
81.6387 148.724 li
32.3882 148.724 mo
32.6382 148.724 li
32.8882 148.724 li
33.0884 148.724 li
33.3384 148.724 li
33.5884 148.724 li
33.8384 148.724 li
34.0381 148.724 li
34.2881 148.724 li
34.5381 148.724 li
34.7881 148.724 li
35.0381 148.724 li
35.2383 148.724 li
35.4883 148.724 li
35.7383 148.724 li
35.9883 148.724 li
36.2383 148.724 li
36.438 148.724 li
36.688 148.724 li
36.938 148.724 li
37.188 148.724 li
37.3882 148.724 li
37.6382 148.724 li
37.8882 148.724 li
38.1382 148.724 li
38.3882 148.724 li
38.5884 148.724 li
38.8384 148.724 li
39.0884 148.724 li
39.3384 148.724 li
39.5884 148.724 li
39.7881 148.724 li
40.0381 148.724 li
40.2881 148.724 li
40.5381 148.724 li
40.7383 148.724 li
40.9883 148.724 li
41.2383 148.724 li
41.4883 148.724 li
41.7383 148.724 li
41.9385 148.724 li
42.1885 148.724 li
42.4385 148.724 li
42.6885 148.724 li
42.8882 148.724 li
43.1382 148.724 li
43.3882 148.724 li
43.6382 148.724 li
43.8882 148.724 li
44.0884 148.724 li
44.3384 148.724 li
44.5884 148.724 li
44.8384 148.724 li
45.0884 148.724 li
45.2881 148.724 li
45.5386 148.724 li
45.7886 148.724 li
46.0386 148.724 li
46.2383 148.724 li
46.4883 148.724 li
46.7383 148.724 li
46.9883 148.724 li
47.2383 148.724 li
47.4385 148.724 li
47.6885 148.724 li
47.9385 148.724 li
48.1885 148.724 li
48.4385 148.724 li
48.6382 148.724 li
48.8882 148.724 li
49.1382 148.724 li
49.3882 148.724 li
49.5884 148.724 li
49.8384 148.724 li
50.0884 148.724 li
50.3384 148.724 li
50.5884 148.724 li
50.7886 148.724 li
51.0386 148.724 li
51.2886 148.724 li
51.5386 148.724 li
51.7383 148.724 li
51.9883 148.724 li
52.2383 148.724 li
52.4883 148.724 li
52.7383 148.724 li
52.9385 148.724 li
53.1885 148.724 li
53.4385 148.724 li
53.6885 148.724 li
53.9385 148.724 li
54.1382 148.724 li
54.3882 148.724 li
54.6382 148.724 li
54.8887 148.724 li
55.0884 148.724 li
55.3384 148.724 li
55.5884 148.724 li
55.8384 148.724 li
56.0884 148.724 li
56.2886 148.724 li
56.5386 148.724 li
56.7886 148.724 li
242.988 24.3237 mo
262.938 24.3237 li
@
0.5 lw
[] 0 dsh
32.3882 3.67383 mo
32.3882 174.324 li
271.338 174.324 li
271.338 3.67383 li
32.3882 3.67383 li
32.3882 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWDM+Helvetica*1 uf/DVPWDM+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (batchsize.eps)%%CreationDate: 10/4/10 2:20 PM%AI9_DataStream%Gb",KB6u,?cKP3/r!,bZ!hi>^Vp\.'HLE"28Q_[?ZHlk?_u8uSEgcIiU$QuoF.[[DB+scZCeM'F8X?GcYW/$DgR\=VEU\2/04k@%%Pfroe8]dUK-%3U;]lTm+Xm3j$[$3ik`HWl%ae@F/4I=6fcn"3DCYD_`PI&Z0V2WHk6$G"$kP`A;Zh;R+Xq(:A<*WM9IjpRVX3!N9%S.:>1Nm]ge.3,-iX.?Ck*K5<hM*DdmTM1SVMpkG1I5:3'/#0aA.AWY>I`6_BO.2b6hN,F8ie)]\4)HK\BLGJiTSFSLiBcT@J%nr0%'*KlO=@?XK*T%t/OQ?@,4Hmtq')J*CA<X<T^BgfT(4F:2@P08/6]W&+B4j=E2(+q\s#Eca]i'0oDKDO[1s/-GT(:(8'RXZQBh\^S%5rPHki(rHtr_+Y1Sn[Cgrotp3b576hX\O@$(k3-:cT3Y0Vo!+fg%dRY4=s2)9MQe.(XoNB]'abBZ+)2P?9948PqFZ*moI%p^k%%9%'@fm@<4H\'5*ZGC)h[Pm@*JMSJj:A#.Q!U/Pn?;)FDs9?qH&:g4PH0Un<:t):h-4JB@0f60;W[[.D_WJd>gW/1O("uB$Fp!?-X"X%:.Ll$:-Xfr+QTS_3c0k&)9JKs+*dGJ/GFXSrD*WR@%BuU4rl>G:8MI&*C5K'?]ko%^<d;S2`h:BU6P?6:uc4;77?Hj\N+@J<2U;1%lcS,aipR1I.KTL3Ab\rsiA6gQcVfUbatim[AU#]Jn5P^qdqTWS-?#a0:b/)k?g0Ds8uJ@`3aJkn2KLmWPKQ64Zk.<JFtO$-E]L'%%hr#/_PtFlR<.[&%-$W<;6(Ma*SlVoV1q[+r_XhN-]L,.^`_4<=H6c;F:%hhXI6mX]=o]4`67m_E5t[^L7.:M*!$_1@\/?X7])WLl%_CpEF5+s9S-djb8"J5ZQr.S%!$2Pq",lL(^J."Q7::1F?N'8q9Jn'C$JgL1;D\C.5kfMK!fLYHbE^h9SKD^@*!$?ST98%m"C@[<[%%/rRFJ<*Qp@"l6$nA-LM!pBpgiKK3?9&L@t!IXB.W(:M,_(4alH=V's7aC-,UDXpk_)g'iG[ktAOH\)0aN:q_^SGF102dH$K/ruQ%S!a6s]M5%G:B<ZSKN_o8"+15!jB_P63WP^(aC[>73s9W##;WpE*+j8Gbr-D!R42Z!Y][cq9(5SF8$Gbb-$Y')1Q!m=aOm1%l^bCX%hC$Xk5;I8b1<F>Z1afdV/QD7)14Q^^:>YLEfkT&<(;l=opW;c6o3Ro9n?t61fLjbobcn1r!Ck!]$#aV3?t3d.Ac7d8ad]"Qi.(6_%E(,ogP9f]eqb-o7PN94HQi-FY;^kV=r?_J!)=h#/9E&M/jEEN*qTdN=K`ZOor?_K$7Ij[[9E+a=jYA:4rfVbr$Mgh&-3",@+5uBJ%48:(C-,8+dne]+i,tl?Z[4GjheP$k[.qIW=C,o4k<`;mgb*8_2I%on;Tn7#YWb"bV^PFXV)3plc%!oNPC1k[<$,)DVX]FDaq1&$D%%f/(IJPXe,j]cCl\O'<nc+T[#(<pd55<QB=p)?4`TD39rM6;"k5LO;s30%_kiRZL#i!3FT/`^kR=epP$@T=ublp0I<53ecu)XtRH%!o*elH0h5nC&1:'<Wd6!N^Y)N`as/k^6?$WB(/CU!PdQBTJri;kR,#@G>aY&-/U!VfJT2"fW#M8BmEk,dIJPs?g@aN:?A-kJ<u4W%5fn>+Og=M?2^jA.kJc=Tb@\8J+tY>/``j3OCm5'<Ucs7&#lPAU_2(XcBElXj%Bru2>,!uXgD/-PA&*L)/<VmkH31QT!D!d'GQbA_%X1:a*M=?mA,=QZJ5C_pej=,K&;uiQSru<K6-Iq9Z2V2X0MT)*J#mD/7#R%(W7qN-u.ticuI.0%j'$M_r9F@A&PGC&uE]mYB#*UU$%\(MbOr[1gKAm+"FFuD6,L%iYmKcI(k[6af/#d&=ZL>QJ.!;m70"?,s3_7(.t@:bB^^hV@kJ1Kn.=5,.H)>[E!P&e-KSuJMt\muX6%_K<A*QnN2[GhWLt>$JHsZ:Qr$[0Jh?!DAB(lUHVSPI<@W3Gm<EMe&*WH=Y<4P@S3Mq!=Y`,Bp>jX%/eV\Q75+0iFW1;AMm+[PhSQ%Za@2Mjm]sGFeudr_ooP/f6<Y-(fl:Y($kT#SrIZhmha(BlC'ShSBb+4gSdR?>q'8#4.Q\^:ZG:el!19NQ,13C][64T%AQMc2W69a%(?,1=9>I)8^LZ,RE"#hp5XSREH'uhR=j%f9$5uA')?YG$guZ`D*9dhj!o&(PH(slZ1u4(43&7j,\=)&?KsebT7eO&fZNSn'nT,+[%7lh9q`cV,`D'd5`L!4Ip<r0;YhMg@<OO7+8gg"?0%"69A?k+E?;VF)9Q#bG+L=)L@j1)\7,uQ+e?`cXiI649PS!u-a]'#o$_qQV_%pLb2'9s(3cXY?_>jXl(qs/-#Y0!Z.Qs!]cB<f==Rp<[P7<RKZ3(sS<@G')/B3JD#QFf+.U`TB$.e%\9Ii?UM-;_cNNqus6O1F>ck%Q4S8]@D7i^l's:AYcC?@'LQ].)u%[SWCKf0CXB^IP*sHic*EYc?\3?A]Z.]t8M>LW`Nm4Lrb_TI2FibgKdr5$$WSP@=mHdis-n4^%pa2i^,LQOpa_U`#Cpb3j+khSJ071;rpB"(0i-nc#1KM`(G#ce=EXl)f.2k]e"1K:mC($ne4\'kB@BAF+#(!=-%*s"Mo-39+C5F4b%-[HfT/6h$F]#G`Uf[h6a44f$h`4C]COZC_&3-\<^&@uf68uGj/d8XJ<kd2^Jn&ANkQ9<70RD+aX?A_<*<:WRG3FBf+Kt"1Vf_j:m%TY=\T2>$jkhRBrFPMI`>&l"g69Hpq]W")S\VRp]2Eb<`$iTrQS[:RGg^pRa^VZP/CP`fNf0\1&<m3ACJI\[c78UB?>"'*gErD^,'%cC6,k.FgX3'q+cuX\bn"K.b*c=@>f_W\t`o6F7uG`gE&\H4s5MlS72!]o_03UBfb8<P%@m[Z!n6Qhd[]VA0A$9%%o<eeeY?`m<,G%$J%>P^X,.o9[=th;6rn=\?VjJjtW!jQkcBb-1FPFU=BlN''?m)AJ2'ZFRgAbRInAgGJ[A-*h&r=DE1(#1?B^f8-CIA2Oq^IDl#`1%:<LTCN94q5kRKeu1\EhYEiDa06f4Y7c6[q:K8DAOoKTsF5F5,mNgbGHE8$L(ZocD94W,US,P3rmC+8OF\(aSUR]YgB8XrI8h6rJ+%A^u0bC\<Z6WRA_e-(:s]W&<sjFHsTS9s"nN^PNnJZ,ROVVD"X)<u(.'7=DR2RdZ>!*Ni.-Xjb>8q[s!/G<kF'\@MdMmXP^W8ubWX%eYuU"Q^FdqgWe&?AX$l'!@g^9L%(WM:R"]mTGT123#kW):V0nDOr-)IJ:ZZ\!klusp=o%AKV]8E.RgJI'<T+?pSd]Z2+^J2c*l&9%NkQ0;$u1"Vra=/T4q`QAicNsmNk]sVdBG\QpH&8P<f-eRXn3:?WNk)gWlP)K7dU]i2:^qAn@dEn\#*I+_(%9=3UQcXWf-u"p>B<V%K^s>fg[*n&BQeN%bq=<.II!Xi5f>Mjj)^)KXn2g]Y4=<pIM#7%h/6j2OH51AQBEX-@MJ$:UOObM!R-[T)\"6io^EqbOV*IjU[/5"%'E?M'8R]7&<sL(.MDQ(2pZf5K;3Oh`1*$hn8F];La,PT-k'W#H%K`"m&(GZ0M#&!r@=hljC[:?#3EFW1iZG,ajD-FiUFG1q'Y#Sq%iP$,Lbc%ImWt<c#OR`L&\fRf8%S3Ep;X'E]O266:C0Zr@f6fC+jA?jE2'-rSgtRJn]k2$_o6mErC<[N#&7e@r(%"YA:&CR-dBqMB%:+']q%f4=lU=D[#q5u4B^cQ]6H8V;fPe@#!4XA)IQq^TWXT:CjjSc9^;Zu8)nX.[\'3YQ[U42c#)FD)t2<-?s#Ofgcn"J`f'[n73%_gX<b-P.npT4tWiI\[XJrWcU7PMb.&"8Hj>`#t<l:_\BR`2j4P%5%3DVqGp25!BSbO</Rt8.8"@p9]P+5R4\V!JZ>tcfPk<4ls$7%pPHF[!j-cN1k%0G8Ml4dKtlk#EnNi`kt[[r8PIR#MH8BEQ2[]@Q]_DLm\78hHMP2I53T^-aC"5G5X8*W*53VeSfr^$l+ZUs#Z%b0%BAG"_<#Z:D_h7s/^_akTnXhZd?iFLNXfHHo:WpgT5C!?r2EH=:Ub(Bh%)\+m?&cX$j3rMSrX3^8oJ/#F^0OJq'?.YYb8*&gN;UZB%FSt78)@X4Bq"0Ws@FAUi$MFETqDcAGoM>>ee)m68"_1>^dH!Np(KB/'#P@LM\b/i6m4rp%m^0&VY^!>E7%VZM=gd!(.GF[o-i<4<%>2kh')>CMkaH`7rk@o((bMPjdkde0'<^$__*euXY>3Z'`F9b0NOD5*UP5Mf6dEnk,+;<b%D6uY!HIgG&kRG@pc@>Z?*%H3CPHQI=%H0J`UGFSQnaH+Np-@u,gq2>$9SgBLS[F#]XI@g,N@a7)Ujqi(!$$`"8I\Z;HQT47T3=,ZSk7J.$!?,2%UtJ]E;.&=gdmG+E4Vdmm%kl4F#o/%-YGJDOd6hKIV.f,Jrks+l+4q%?J._WI0p$RoX5QK^4q9eX"Jc8jFl'J`+VVBlJkr(!gR;Tu.e#i7T\s<:h\&gk_D<fG@%WRRQ.;Q2l:V,DeT8u;O6PY1nBDUX*4gWZ;Sp4%JMHUO^TBm9.7dP:Rd)gt(J]=ZN6Goiks1JTKn+G!"G:0^5XZY!9)=of]3ft3SZ%)SQ,YZt#^W(>u:U4"I?0ZYjB;XW",u*n_n0E.rRj3)LfZLe&!"r#]+$)DW#\1eu*6_A%e`p,0[8UH&=h3nTD@*;q5!muA>7K=57b%E6B@"]@ZGFa"aBeNB6OWM1X7I-r_dW7a:t$-C3"B=0)#El*a)ST@B#$M$&DKodP8^IY34P:IFIHn`sQ,d<H&$Wlk_$P4VcSC3HMV%/sME6lLiP^,h;*L`k#OWV:\)(:@Wk%m\'6T[(Tk%eVsK1\DB;,k">7G)k%b5b2`[-i=6r:HV*:*&/1c_-9T-%Bted+0,*6.WrGd$%4o^l3V%-N*n;IS@>1<"Pd/1/>m%9c&q/I($*SBu1'(\.)s7(5_`pt3.PlDh+l1j:Gs1u>;+'o03DQ!0bcASM-%;\dE.*\nXXT.Rm%-XU1.9Ip*F(+eTGnVj!`\j?"c^_*^cYZT.7$s,o;"6j`"bOA:0U'B2\5kE_<1r'&I1l.8.#6P2bh?O]>%5a<1#mo_e!gWSPs+$X^%Zb4JtFOX4XAI3j6lUMoDT,p<pR5EYh&mBAs\HU$Yg8:_P0=-S;N*h#r<na*Yc`c/H!4K#qI]%nVA??RV7+&1V33Y'(T3`t>N;R<5%AZST'R_gATAV&`K*VqjrLZV"p^On<CFpc#a8?&\mE00Z5/)r;_72,Tq3rd28-#RCVc%#JM?9=NLr1E'J&?<m)Y4:!*A;D]p2kNjA%j:imH][Roqh?V;&gY[Tu,lAi)5=<-&<L\r9rUI+KW7q*-L<sZ3a.7]1*h*;A'\[t-8kN7`\e<W.CXlRV*ANb.lX883U5fe0)N=Yn%r)_%u'7Zk7R5Ee_h9P)j8i>=uGqLtCrQf3L;t6IhL5^4D7P:SV-&9`ggFs:ec1/8O9]P)>@]7iDFstPX0ZpeYSN'%L/O<3neC@GV%n/%scJN@;b'0PG"2MYrXN'"^e\#IUrd2%B,\\K@Vn:.C;BnX*UrM?kJ#i"gmDR86+=BGDNB[VP)Spu>'n#b_s1)bPHrBmrkh!0';%BZQk9rTsh;`^/MDN?ObmK>3Yu&?Mb/b`?Gh)N<BBgItk%iaaaj4Vi>@p'4cBr_=PrBJ@G4#7_`4@pP6>OjS_cn^-4*,lkSG!PdOn%cY*]=<$`2&EC6[)jJetcCnu4`gqR7NK9HJtF9^mf%ZT\US6\1,UZ6WqhZhFIHt]0[]KD2PlBa9u@#kG3h,?A:0)95#j,-h-N%@l_%*F!hda]n2;\kG<D+cg%V9PC_5!\NOeEW=Q`,n)P9D`m:(gS@8#LD@r46I*inCUCgaJU;ZTf^>HRh7i&<%GRHn-e9mB%8g-4pkluJ%.,KN5VW-Mll`K;[5hS>+"m&j-V!2BWPiQ)9LsdbG1fnN[h1#kt5/ta`XkK,8RL,n,#4Dhqj3D;PW=r;`.q6r@;c28Vio$T\<BScH%No)p^??>=8Q.-\>`@=gR<d,6r%JknZ:1-;/(b4$7g%7@2L#u3Ue;b&/Yd@[I"Vj65+8Qn7riP(SNOA89^pdl@7-GAFYhL/;^HC*E%bC49Fce`jcajs"OosT>=$Y09PeF`;A,2&bJ;<]0h;O4X1WhLdKN0prjfFE=c(.bA'0lX*Mim)^QWab5T]f?um+;\*I-r\i520&Q1%6Y2NOGc8e?#nOFh2NbGM%`'&nrMVkY<_)PN/iRMU[11@)7$E]2,i7r!7j!Ate&!,ciuh3Y^u+%3`8`i:IN[tL;,qN62:_VO(`sW`%$f9dCC4:J;6`;'f6CN^G[B"$7Lk'9uii#!YlW:9'KlL@Wag^<8IF#$%S-cs4hJXduVc=^1^6gHZdj/bjPYYQ)0B<%9jW01g8;D*[%T0emRVe8e6s'LqIQi\:KqhJ_<'aP_K^;K@C>9Mm2p-XQq<2uV?=L?nX3?FI-g",0-Y9>0X+m.AL^]4"o8"IBpH&g)^^#/"4&pF/e%Na(6)rec`4Qr+-SYRSA]@u"o'2`Ahg<MR>-:,Vlihp"ug^GrXM]%4CAlmf(gf6Rog,H3Nd[XL;3DHs*i+$6/1eX:NjWhmd[iu*JB%O@pV<m+jS(&S'Bm6RM_17hX!+j68XX9"*lW?0*`9lc<et4.r-(<p;-,BN+oR$#\\f89X>]fBJ1.s-miGeq=:rs4(pQN0sd[*"lk_%Z-&#j]S<r'cE(HpacYNE\0VQ</I1MD<u=#LN[qK7Ze.PQY<+CFZ?K">/PccUf5C<Zb\3j;r2*X[(Z&&LDdXS7YaU#;EQt@']s`B$%g.Sh'#5aD%6t3.c]-u7]+CX(0aeFT6IQC..W&FYC%$>;PGM$5q)T3t_`X6fMEio]uHul#aU%30l%\Y=0Lt(D!&s&iCfaMI\MWVLL%G:8-<&4]*$SiuZkTU[Y96l.IK#7&p]=b4ZuX[[J4Dje]'c$McJ7#j2NHX@F(^.HH6o=V.g3*3lR#@$cUeYH=HaOS#jWu!kBnqV2!%X$2dm3u@.b5j33//J((Z]CuI2O]MB2&='8l5\,@++=)-u6b'0rTG0RcNhu8#)G'Zc\TdnY.i5O42Z8a*4`&0qWe8Nt/@;g_6N'n5%NCLP)I][tglb3(:HsS3hqr4q8\@!^@ABV%@Br,(75<XpoKhS+^+Ks#l_8c!0-P67Q<JU)L"4>`o,D$)ME>]&4a&+7pO3<Mf+L8U8%%+8Gn<4g';p(.]/YXaK(]I;3HDhiZVQ?Zl/qEa!kLScO,5$r9!XnJro;!rd,BWm=2N)OS(USmWp(A42g7WrQuFU`o#fkaBsh-0bB%5AOQsmX:K(hAD;C>N:Ldo@DToO@W]4&G9J=>.<^$nL8bXeVICPqYXKtgNK$OIO,%rSbdrbmJH)n&\5m:RQ<S\L0(R6h1eq-j40K<%dB:spmWk[ZK0/`09s>t^GEK#Yl*4ft/(Ku^D5T_.GdMD>W@s(=9s:_m8)YJ("=NYFK^-V"V0/]D_"P?apj-N)Brs!niD*f]RLq)6%ls@Ba:=7"/YNVs34*m@`2PAO'RAQ[)q6;H);5_Neeg]m<:phH#"J9OI(ckBfHET]J:1$N;?i;LE:A:7B9Qa(JFQ'hXS\FI(?.a:'%?^!i]:Y)(S#G/u:?cn(r;q)3>p:M*rrE8GDX?)>WFn<4'SYfIiJ#3_olV<Z<O$`MQq[E.,"m\dgQO>-9b3)fr$IqH*d'hErj&;dd%kS/?:h'tbYI.b;o_'c]Yn2kW2M)rliNJhDDp+"NdmpdM.Vl?<Wb6uPi;7Dggn#?lKLL$TnOHZBe9bX>qn"3:Z\<jSf<+tnf'LSe.%(YWa"\FT3.fBJ34g-*-Vmdt2Qi@'^C'?a-(O6$dRQ$0AiC<<6H9rF%DiTf>VCt%WjEnRBSB!b<]6*Ar]@FDFJoL_,8I+`Xg+PaVG%lrnVeaDL^(2ke%/SgCJIZ(#mj:2^N6X];u.42O@,k=+\N_8:>AEhN=;Zo1:;SNafl*8>Z5SaUG9g3!1uLM$,#9-J!YlY0m@\;Ae4%AZ'J;?-'J'Q2?omK[qU=@Q]8KN(2@(Ds0#e=u</*IUjb:h*R[pIuHL(.e[doVr,$Z6`7ZVcYKC:_VIg']:lfbV`B[r#EoL:)E"_J%X$lHaF*rO"h&dRZXdfe'g?E-$K'8qAKgB/7Pq3j<H'1DAF/<rO;RrqsVf>)%UZku:Yb?_*pScR+eBfX`r^?+=FLrnA`=/<?>TI-V%i(iCIlUHNq<1<F];JFR2:'D<,2tGG$]CPYBlLZdg$Q9U>)H@tt=$>jeSd)"G_2%tf\TJIiH:iB9,_-?8[VmDA]0<NK.TEk2;>0Y1%Zn461l]3NNWSNpYI,j5Oe_t6>X_%P)37.WRSsh>[*%0@tp2?Qu^OOp$]tDJKXI`=K$(#"aUA`hJ(P>Z@VkZg_@[gQghR%TIXtr9\%`h&+s9t:!M:$nS0Y+;[T4AA%o[&7Mph:B?`p2<0k*[CAST>*ak<_jUQ?:)aqqmTor?PM7mBRAXm[==XXM)?;--LSf:Y3hhsF316V%e!"'_i.*QPoI%Cbqf[F:3-_iZ)H`&b;XEZ6aFph6g@=SiHi@pDI/unfpM?Hk[\ZIHiT\o^<PoZ!53,_dA/#E.(TQ2uY#ET*qi7[Z%IHRX./XD9N_cpKP]W)rXQM2Si=4p\`I>YbhcLqp8NDfH;WS0hR_+GT[LmhH%YY^`h':k]g0U`%n'snqH?0M(GBLUY-3K$anNE:&d%cT#$N=60mm8.p%m?[BB:R!%CJgYY9-o\C333sZ]GgK'l>h&n?hp3kXHPu37[A"-5UZBMg)5ML:+s('ZZ01]JVW=EJi=K/m<qJ^<+%l,LPdr0)8,lggTa#K!uLFl,u$Y42c]91`BdmIg-PXjcf0AmLn'ZED[+=#dS]fJRaXdPs\b1CpP#e!4Z(DVHVk*Gdc2YCbp+VX=8,%=HiK_%\;2%de95`k$[Be9B1+DJOIqnlh&'.e*P3(NI@]IO6AP3l?3W.8(DN4.Vrti,WsV@97g/,J43O<Gh^FY4LBnJ22tgj.4RpG%0JD2jW[7&pl>+0(m,-(<mRkpISo=[cOc;i9h.S+WI?\31,urKn<[^pjTrfYpe.c(>OlBbr6:QO?PsPAPi1:CZ$$C`GL46:X^,t.]%*=r8*@-0KTWFs;P>jbNr9OiFd@4E,D5'D^Tp(`k%R3>5(N!?ln6`TA:BR%>3`0X@3_?Z6f<U=O*=niO2O(GT,[S^*<aCB[C[h>JY%dGofFO?h\NK;sqP#IQ$NYJho;4S&1a3j)Bkja3]DOTFPX@m&308+Wmbl/Yn7a_P*N%6+(?",MR],dnEB=OAO190ZON\%EVkL(E%'%c?^N[k^e27nk6NuR\.<e*O;1R)h6bj1t`1jZ't(_Z1:#[/MaZb]\88?K$1tm(6*/#mL.<pq2\GOEH]Xc$X,<Xb1#dUT(Q'AX@J!$%"7+>kEPV<sFJM9s3b1D>;9n1e6mskOXob'eJRLD3<V\]35eR%TWoD=p>QIiRWCY@aifQ+Q[TSm6RV/4*pT^"&6/0ST+4L2-!S),I%FhEHF"qhrV/'K%a]_7E;.J59iHf_4H>8SL<bPdNpl0:%REL:nD\?I9Cn0+sigS2Y'oSOK`?+LlIP@iu;_#Phe+mYOYP_p!^_`8Yl%Y.Eaf/V7%EZRDR:eOA%05FQe1C7q@Po.sPs3ii')rh*L-T/B_EMrr1JME<igLMBU3Ao,r_W1(4=hq5Z99Wf&+EP9P(Rsi&^E\,m=%fYlAaZ=B3;*(WEW7$S>sH*$-TKm@8nm@(Ofr)GUj9A%PY9kNJMqjj9;DbC9cWb4n8qP(g@9U?qdeY!^AV`#c8PM^WPLSV$(%1.$'%FZ`t7AL5d0+e;r<CXu$@<P$OScqU>-9YVRV^NcKG'=)LbcBH(';e,?cAsV#4rZ%=aQC,!5Ml)/=@SC#R`h[0T9O7j3FBbUU/P8%<%:3$66$gipcARXh*.c.Qn^-VO]]ddI(%OQN'cf2@gWr/sap\=Pcj^`;SD2t"uAUKq^M4I5b=j?M_^s;dMfWi:&JjjCf?@,We/-SBD%bH&fIp3@Ou/1R7Q5^Yj7MTaH@1(](SW?6pG>Ire3AYg;&_rf+;VJT/"e5s\flWJ?#Lr%$SD0^K%nd$i:`tC$S8^HGCaXeIb))Zj`%=K0lO$tI7?lk[\6pr@Q=[i?%BQ<&WA&d(C^6I:q1mtCd):I=BRl210FQhPC#NkKLM2C.nnniZnl=inZdCEpqChuc7l>:qt9KTD+b%4(ljsdjmU?3]WZ-P8VW&3r8AM&g/^81h?+aghj5O+j7+.`P\sh`:7O%[G5_9d&T,91Q,PBGGnm.2AQp;8alncB"u!E&$7iANF%m-%6S-!!Y`O)`an?5;o",JjT+O%%d#t(kbT#1qg,h-/bHorOcod]\<D!`D?dO[6ec=f\A6UqFg$Zc&YsWmq]V+'cU#dL@H>p7a)/UKW%NF%Yd#CDGu'gOE5>D$7L:70@XL.?Peg8+m&9&$G6^$Ec)K")a@C"jc(Mg7Ek2o>LgL5-Z*o<JrPd.3*uQf4'U%s6c&2?O8C[SZdO%c8/`Hnr^BPbmognPL8/?CjL.VJGa[X^Y?kRnsCA*dN6JHOC^Ft9TL4-/8L4c:U2Mk<=s0($_H.PFS9ii"ZWaELdC'j_rb5kA4en(%5-ioTbE_[J#E@h.+HY5[Xi(^0-UVB*P6Ld)h'G7\E9G?g[WnJ!bZg[]/Ih+2(!/Ir9V<,Cr@t9ihKGDa.^W6(6+;$]45]E%*^/I>%Se02sR,0A(a1NRJ]EqVm?V9+ABm;M/5uWA8;cJ+78ah8N2B<9UCsMflKF%&Mon5qDr3YNuCfS@7@HM7%Cag>5kVE-Dp_9oBEiIFU%%;NHE.)A8\%ARt'JYQB90@8?S?r;r-X`:^:eiogs7ul`Ep7\%r3?!,P0.p2]d4F>E't9t$BY't*F6s[^8f$?5i!IMqN+BMp6YhV7%OC'JUiJ<b9r9e0"#I(W5Tr(<68`Qt:)3E=11KlM9?dOMOU;lP\9>*)``fj80o.#aT@]hgV=fOXGm+(EB^+hW*H".3$3Hh`bBWl3*%GCUeKm!S2F=/]u<UUV<Lf-<5:>h9[U/s^+M#5HDh+aBn<8\R]B/?u_)=$hl,c?TMuh[=RUYd?.RrY1B)7;1t7<H!M\B;43canN.1%@Yg<XS$XU:Q`qF'd5^QJ??\,;a.%HpeV^A`j*'SB%?1L3[O9D8)og+AXh-[4?HAarcFOt/NZ=##]^&O]o,P2mrsfH[FW6M5W72TY%rTRMmFo1SX;0nOM;,^i&?9#]deVtLEG.+*6I'"DCk%0B2.@8a^IN<];k>%qQYS?(tVJFEqb13%X5J<R&WG->a\i=S$mpkt/oKJj\%>CsQ:G%3#@m7i^L4P06%rqk?j$u!&]go&<n'"r-Z@g;BP8*-/"XLE(@4DHFf6Lm>6A5CcE%'pbE9$)aOo<$i:\;c:FrWMqX^2?F0%6aAmM^k;2;,Fj-]l(T;@E[,(r=m4l,1*;Q!RIW`<k&N[@.5iZNQ^q20L<_f2%f"[3@d'=,kj[CK98K:Jl;W\7;lr1j`m?_9d'8DV%7:YQ2rP^OD::$$5(.77)6)R-Z/f$h;*'n3N/N@e[?,SIL:5]lm/;?nq;e$dd]=DM#(cpgc3\J9eTbofu!OLj3?9)'qST=oSQMDOA%P3jKFG)#EWYMKN@4qd'C<jU0U]FP=PQ]e[Y^T(f5p>LR4>;$fCYKp^[JC2g2KI7R/DqVYTcV;!o'c0(\YBUuL2gPirZf?V_@kcPH%Il9FRS)X(,ZH6c;5C<[u5(3>:K?tQb:X3CCglS$N+4gb#c@):=jMc0$J1$C$F,k]A*[bdcl+f2FLA)[2$(u<#"*8Sg;'jll=C>RD%0a$h"B_o%,;KDkUG#o6=-R8i,7@"LPW*=Rh>'_@ED2)O>]=?Jikg2WXpNGHpBJIM0GZ$rr)KX;HI6m&9oIa78Ag*mOFjnGqo&Qg9%g,kMHX6I^Ml:aL@%O%_<dZ7fWlZr&;\iiBG_c\m9-K.*fS.(0EZi0kb40fSKAj!=b:u0eHq0@r$;rdZ.`%LLuHkmdCH@=[t*10Cs%$V]?;2C.$USp!isl_rPbB+$<8XZH6mCW,f[)l:#O>55m[%PBSA0Kmk13f_N<->&"SJ8[a#mJ@8KjqK",I,M[sk2KB*)o`k-AnE#a%54l'9N&b3ui/TOEiHMU)@rQRRMK^^+@O#!X4:'T'h5T#FDJ-G#NL+^(!ZH$g8Heb0ZTAbK\?,,Xh2hO"G!>1FSr2+4.sojA=P\it%(p2A,9t4MhU+$A<oV@B_E=\=UV9nY_0htuWo2mXR#]Xoiqj,;W7&>00ib"+2j8JiH)k<J[!WY5fH"'UQ%(:/h*,0EHq<PgJ.TW`b%g<Sc3)9k8"_W*0lL@jc2D+%?7F_UF!o-EN4eEZ"3PK75=1R`OS_sAQd<^Yk/Lcj[r4Rlh90h_U@bLOG1()a#X2R(9doLb29dQAea%`GF2G*!S9i7E3n?h&$nd)kQ[;)0mh.SM8pVETlQ0kKP1qYN8h:4a(H.;X5@KBot.I^n[1$^)W%>!_qHPfRp,Hkg^kE1^i%l1`'Lh%GDjZgon-O:(n.Ko`oed7Dc)FO0*mA*boWHdK,s:9*90`d(2BF*Ri(0^pTB/B^,5,7#O]GaP3,g.S.$Bm3Ek(6_^Z1X$mlu&gUKbK%%K\6C'f;<"G%#&*SbASka#Lhl7H3UF\,uQ_j6@Do2f*^A54J1@lY2/pB%C^=XfE$JY`kJrob,s+i2RU!3(^egA>@W0%&QM4/NY$!%B]o-V;`@W;SBLk@98\LW[D1qbF,u+JlCkdk4IkQca%+'""I6t&Rk%Z]k'/ktPEFtH_i`S1@mo+Xj5CD)fXW:jkBJub/HOY`[FBF\%^"(j#C,oW`SGC[d2I:3Ld9?o"pk[$(G4B%uI3PjXpdFre.(&Z(]_:D"l+6S,"q-4<!u$Q:oRq='a7`[EmjGcDSQW*NYoerT`6TOI%"mn;5brV1bTDLBsi&Z4;R!Udn>(l_kg6(`5?A>Cpk%/4?m4!>MC@DoLAL#L$2bn^,L,Up!-K@PY'P"Pd1=WOf(ZAiO3:,U$X(>sX%`U,Qkgs590d%n@<Fr"D=\.q)2gA>/7\/eAmiF]p_b[GI#p;a>=DWH,EoEN#BfU)gBK"N!SQV2QaIB#I//0uK?>d=%fQoQ?j>k&Lr%l7F2[>Y-QL\fbf>Q9dI97AScm.3eG..1rPg98Z9R>uF)UXnQV(h+Uuu?dO00[*E*rh.+R2$k:fRdp>l8[IXUbE>^fj_I7A]fqNWO%#_g/5ZUX'i6fB`=^-(1b[889A8%[l7Tl@Gdj\eJ)m.UD>L;NJiB7#QaSgP5tkLD5pA@P+]JJFPjKX]Tr9C]u=K\$=J717E,7E[RN%kS'nY@9gGH+aVE',/[PoQr8<<o;%e;YAm@IBfW^V5l@=nQH.5UT@ZASS.X>A"1,dYlPHkH=\`U%".UKTr#(=`cX-e%S!Q_i<fgYi%Z,9fmJ/"@`I(P/]i`GWS%nX_N+eO#TU')R"O>FAC&p2q`AGT":G;^@t_%FFoFV.6f'e,d84]HPI?n:P<_/Ac[5@8N'7^f/>F/r&M%G&0^MrFd#6p>?YOp<+o%mc3A+GKQZk!J@c5/\=d4:9dp?9<M2N(/)ompSDOsd22ohWMWZdNPTN,[[eW7mPmYf$.YPb@af%;FmYnN%^"<M#\O>)0P?+p9@(5@SNGYST9D6O]Q8%_D@97;^fQK:o?ge283t:O@a0'M@<H?U7O2#I`#aZUd4[VreH8!`RhmFNNpA7au4*@Zn%qP*SADOh>\oMdLMU<H4Cl5@$/J>G<7c][A*j]4%N>+?-eQAp*gbSs%S)HbP0m)5N!GY7hoQD_o<84K5PZ;Cn!4&i<HG"_EnRH1HN%9>4tJP4N@@/%b[THc4CaVNo#0n(0Kg&ii$(gnq2[l(1;g4+&clHf.')kF-2%qk-&uQ5YKgYU[0GO7PO\c5'r]=jkaSeRLG,MktVh%d<$Gr0M@5!Z\kU.qnOj0Ra)6s?Z=]GFQS.=,Mp]rB8NLT47[CM@r-O6b>P,"XO%$Q/2s$Cm=p_a7+6G7OVa(UdtX[_c&Pij\YA>i%ln$'cG+$a"<j?aI^-.BCdod!3]%D\47+5;XdTPG-YY[0I'l2>Zbd*u-XG2E&Q_d1#3Clb8N2Eoo:9bgOWR5fgoQ/>42/>%><E$5r%n@D';=Z,:P?TDaUSINT)*)3n!N4B:Mc59bT1nE/OMT%aJ$V&TJ`R7oM86mp<c75.*qTc64U?V;cS&Eac`)k4r9kW",]moUcd<%F.%]I"'\jCLd/=c"uDCObbc3ZU!>_5Wc*B]dQ!V]it;L;O1il)_Q[?r3g_QD%UcPb,qaEP2EuTIGEVWgl#0Xrm-e%=PBsqk8o5@csQq%95>%"a\0l[k@TKP:;/ci==fq?;)G52L%.PT1-r#2aN%P_^mBh(Y9!r1R2)*EABZ[hGr`JG8LFPKhf@k0-dR_(q6!I0<$V2q1X";6%6TYs&p)aR?Eq;Nd@[Z9*gs,3q2,fr*3g8r!o#'/Z&T'Oe>GA``e(es=/):9k(:Y$JGn)n_\m%/=SXE]n72X=6k0@@3Zqb^U6HlNF%mMolF-heuAC$t,s([f?])aDY3=%G)h0f=8WW9(_Yb_DHd;%H"fOg>.o[oa[S>'LW0.QQTNRa_#X&4gFQ<2AfE*Y[&JkPNHkPn6=G%,m)XT^<kq_k`R1@:4S)[I5AeTR57P$j^6r.)l@kSk,Z[90Pkk)rg&m,XZP8SW[2sYTuND]%<^6kF13qp5.W^3H]*7[)hWK3<X"QO%CsFjUlf]\sB0'3#<)HG_?1.*)a\Cp>ZO7[m$+P'K>T;sViSMF[o?MQ([DZ8M;.E7]nE@B(bfj:g$!UB;f-U;V3Hk4)*CC^gQSCiQ%?JbL&c_u]TqG?&X(60dd=_:p3p)^J!rjH>Yo49TqIs]>ejg+TfRu\?k*Os[RM1osY?$d#kE'CDDm4<WX^`Bj5/=rs^O2aAkeiq<_%)+#4VT0fd4^ZRT8h6?CMJ4R>91BP6ni,q'J('s9d@(,cbn@T/mB"7Gs[sI!AG?X(&FcO'O,9Lc5qUm[dbnEl`PppYAASB;,[n*AY%mhtP`D<&.2-"OO7o"A5i\6Cqs<f;F<n8LOFCLEKmQo!4)UQA5g/htE3hGIs&n\EkV+3hi?Tub9ALVR*&H`h<L$X9rV.u=%[o3W>o%USF%!F$!^ggT=.QHCGOBQa^@M4+@eN@8X67%DAF_V(=t:e`4T>O1BouR8B:^H#`IcGGi&CKIu2rBYrE-Xu8dEBkmN-G"Y!<d`^&h%&M7q6.&jX@9\;O`ZR:&+A+DT)j,Dou$?O.q(@U[$#/S[IRUL>SPIDC\pT`=lO'["jqh<K^o(!V!o@mD"nt,9skd+]1;=kR_>.g>L%YXNo%@I=q,pSdr)6E'),0s6V!c>Lf]7QnB(\=t.kP3rpWb0j'W'A:48[P>5SO,AAtVA.ZFg(JC]*ea2l#,8<gX2*jt+V!>SE,;."%(l03GVM)nDGD9uu4+hI#Gg*apO.?X2a2;K7&d"-?f?js!:f[+kXUU$_<i=-Y(4'?"ppNh:kEp8W-)S/4)8bm#ku4'He#R84H0a!5%#k,aZ.H/B`*k">V^=-8&FK]k&%)Q6I8PbuF6IVNS6&4+-o6if`TKY1aZIQXs$c5PbD=6;!%^f%D/36o#A,d*l56]e:L$Ea80&.#4%dXpA5Rs2Ks^SXAr2'Hnml"L!?\>j[Do"OX&GYbC)CHDYhSKL't2p`8)AdilZU=!I%#]n_.Xi]0V>uePe><1LGkjA:+2+Q-Imi])6%!mE!bP:^&3DDYnV3jJNlS,;IB_W"#iV^)CXlTN."OCgR[4H%n>fu:kG6=M&:ZgTotQdq2IS&*D$?+o%,79`o/+S0/V3Ep]I0/],<%JbjP@3h(gZ0.pq@Ut]!S>#^rca7a=HBp"hQUbu`/ab:Xk/dX_l9?X+)TEBR]%n#>sE'"NO4or<o+jnaAB05XBGVXV[BdZrZf@H?:%%.*7Cg,H;fG8mm/S1420qnQmk2V?1#U6/b3<pHm-%>Pu=i;;0L9V>O[nl1oo'CC3iW7eT@[Z<_%RMWZjj^.8q1+^T[",IWoa)$^k%&E>cWbZ/G0`cOL8ZX*-s=qoMc=h$%Y08ELCc?I&`9QT=@p/7KMFQBHe1"bbL?k90l&9):N1M8HGYe-QFX=@6)bOE36m*o$,aVZ`o%&@?5U[k;og7f\kDXF6\s=Tcbe-W]dDT/4H5.%o>F$T#_'c'2>K@7ZTq6X.<FGA1;H,TXWY"p4X5O=7kbCNG5NRNs19pqCenSf-a)%3o=;C0pfPmX5*Y`mZ"bgdBRQ2(lqoXm4&JEkoS#(6Xq_rQa:,E/YC<^(fMurKOqZt]l^32!MoV9S5FfC@fWY"+gG`jmYlIle2LGC%T[t$rH0r_[A^n&N/NlT)HAqrIa^XBF"mD4<QEd0UUB#-h!`KN#A!Dsg'VP?1\%1%:VC4^50n:<fA=M%,k86HF)V)%[_B;(BQrm6a%5.cbib>$.BeI&cf;EeI7M_qnV;EeAU[XThWTCYY6ZBFe;476o@i%6H.T@*,eT1R1<Pq?eI8bjq.="]T!cS-W^bq48+R>f041t[oA%O%!G.j_cL$]RDY+E\6Nn.",.2`U8K/o(jrtD<j?gT4?BAa':OjH2SMm)p2)c5M*N@QBKkG3NJd5U\#aUrL@./<KF`qoD1HTloGZO%"nMMhrE3b*1Zj"T2m8j[580',=[HFZkH'+?g+CjfIa1d#AH;7hf?Y<Wgrg?$qDi3]o,M-%P1S%5j3/@(\B)YBp0%@(LnTOnqXG.D%k,a#Q7\uODqDm:Hlu/Pc/[(eA**'l*?UA'`kHgCUo'n:Qo=emE5HY`Z/T8@NI'_tc[#,`h-a0/[OH9h8c7Q`kolJFDk7IIQ4\G(-%if`9Q2a`gs;dM]OXF=2lR4#21PJ]7g@5c.hb`gZ)C;jtk-]:HjGrll*cM&-tlfWZB`Gtm2o(m(Q[Z]P2aiER%m_Q_[2.p5[b>spj%a%Fb@olG#i.@NVl+g7LCDqcT!p!YK[;cZ+4O"G&`g>/noF&^jurY_"66Z_>]ZQGOu-G=\j+jK>^Qo+4gYFfU[o2>/U3G8#S0d#;C%]!P4a2<XY%/JXn_.Dq-+Ms'ah7cEX=qH69OcB6^sIQfY_?9`'WLYQdYG[<UW>aAOkB"PIm5-Nj[ENeurolJFD[n&\Hn#Ed:5/,!g%iCR'7TC#e"Cb\`2=oCJ=SaIZ)T6"$t.gu8;H2X8>qH<5qF6*"8cKaS5c^"6l-c`<;gq@Y7jn84Y[p1VjT.MA62c%^2o>L4r/]E(`%26WXY?jM-r)0u1N"[h^:DkXgm-<099qO()Jk03/SHt$TAY+7YXT<gbd+hDjb]RCV5b;`mGcFeVO]=H6O,^+Bt]RJ-nd\8];bNifr%*;!;DZX06DT=/@NIBmhJ/hmeCB#fY<7r6hcNu2n\][qoj<XgCX&oY[6$[)u)hEbgRI>A2>VFUu6LtPLn%5`GN1f9'WX(PpnokENr%GT/nZQU<@E8h#`h4&U(mqY<;h#kg'r^d_Y/"uZ^Qk5d#]GoYN&k)5AXS^DoIqWM]^W149-Tpi%K$e=G'\kn;[08)flpa@s?+'QPO%ju=tuDJc2&bL\n=/['Z;[tU<2rg.TQ&:]A&iSg5E]D#VISkm+^K]br):3\pXonBm"MkKRJr=U02:1>0;ET&o@)@tC07aq:rEP+=`%I`1>;G"Nu@56ki5l&ELKFYP:UI)/X#6TJAaH+;R6l]2\/FXd-4ZLN++c`ULn[UPB"lIj2Fq6lHHW1e_\FlfS8b;@e"+d,6n&G?kI%N&o:Ai+_BL!fQrAQ<lbh1u.?X!g.Bk>aGL)njt1GpQ=k1=PaZn(`<V7FlD^IFDcWY(GroGfkMh\gVVgM:qaHB$FSF#fk?nhD<"/b%2)t4XZBL+'>a-`a-F$JEPo,LQ#$Xp4C:`)cX:e7=g>*WeZ83(?W4fU$j3M9.E[%3sF*.i#1%.[0binTa>p'hsY5!S[A:"S(>EDhU%/.bIU^Auu2+ku,mUsdK'n2.;Z6)5B0ZCf+C.eEq)ET--Tp*EUs#,g!JrSR\?T=q/fC\[E*Xm#WrO^Zgk_]X[1D)FeIce[+"(k*e[%'2I(:e8HMOi7A-:&1#f*Dj%&+ZsQ>^B9`BH`T-GDY3Pn`H6Q7t\Z<VmT&dSS@Bn<r-:B#^Rgc7uI2:P1:nBhkDe]g$b"I2Q4kPg1%&((%$fYnA/NpTm-gnX&sb<C9N+_VD]mVDVP5T8d3Y3e_9h!mPZW\IjWH\<\[<8'm)SKUil(#V![LqK&>:!h4%$/46(HtAJ99q7Im%:aLu_14Afd+NAZJP_:Z_Z:5i2p8"EBN=@AI&:eDOkbASOmmseUhGld8kSIQ`LTs`*,jl0s,uH<AEJo!dIi?A@aMk6Nh,7Rr+/Q/_%(!//KDK[n\9h@2^P;K/g?4C'cCA&i[eZ>HA*%a-KZe'f[D#/H*?Rf<aDnVFM1.T7!<M=o#f9K<_gjC8$3S_43pk&BINPGfoZn#:M%BQ$#0h](:VBqe$7n"I%F3$9^Y!Bjl^XgrHc_qu$r0/q"^ie(Kk7=U@Df]VMmJT24MDgLUf6tO@<o!:+P[._Bb%jA=>2\6(Yk&J%^%4V/(k?!/i]A,]^o(O,:7G]"YN$6_N=fFkn<ZLaDNo*8M4mu\6%Q4+(V8I/Aal_I^HNjEi\K28iE97_VSHC.P"A)dgo6m).*N'O1X%mK]=<2.5fAZ2TSW"d7<i,Yh>(:,F'/bS,h^Ps[(^#U7pC&Xas1#<]Lc]k#JngWbC3VEi_ZmS:\:A4&O)*!inRJE83)n\45M:83-G%4V0;3&5qseYf@iB>a8L_-]NrRH&<Z5CoZuYEL'P:<P_--d=`:NB3l=H:5lWh4_[&2Kg&kd_GP$;Ph5$>6)'Rs0<++f482<k-],eu%]rnn@nTk.[/::^c@gGl,Z4u.kB.^5PL/)+A6R4$Pjbju-m6B$uHE0'k(006X,4p4>JiZUJ,s#\`$<+fU$p)f[gLVUjT_"g[Q.IsQ%fu3FBG@#TZMl1a]0AIF3mm3siVX)ZG4*QS%&C*o0fOIM,$lnBuUnW[u\\Fs;T&'[052u-ZkOpI4]=JGKS8X[n@r1&2:lmNoc_5:l%qGfpHmi@%!>#oIA2>>'l0MU[;9:1(Y"6oTN2q#Hpf6u]jlF)%o[Ljg?nFTTpl['Fd<n[c@Up1t32\M\8>m\3V[O3Klq6]d;no7:h%]/meID&8,SVi2JgY+eZMAJo+/)4F8]AZ;ucCZ0\k1"+bg<aMu*X(&Hc/-GRABN>VOf1L'leD6UbZlTKG[%p'Bf$bYME,p(Rmp5,(%BMU+#YGChV=Pa8*PBKm-,CNEW;u#;q01N^0WqcS"d@b,(Z`[FfP<G$dS-IE-nTlpOecT@>7aQEOq^AY/Y"hfCog97C24qY-9Nk+l%0e2&I^jIWJR`u]UMrh4_88Cq%H+TC+lrL0CAHYpCrNm\]4V3p\Q],2%bT4o!=q?:oMR2M0ai3rEW`ZkS<gL((I6i)*mNMAd,3"QZ%HW'[u+=eF,I[.,D`mcI*$FS,lWq,4r8@r$+duAM54,k.<3>(Rs+`.UdD^gnFH<X^*Heq*FDq;#`F_^;H)Z,QsO4_R\:1KRh#oP([%6aLtMp_]F6RmLi21(7f=ZH1,,k-X[DD_08=<F/Qi,'bm\NMQ*TmKt?rDb/n*B8fu3AWLs,A6^%?KZ7a?B;R#=S$dLH?9fu?Y[8H2%Fp=Eu0?$D[m2.i)^ud-rPe39-Y8_N(;6[Q2AkfY`9hc<8>SCT>XsU/<\KY%GOH+ml*;:$Q]<5O')Mn1#5,)Vmd[M=`MA;+=kHp<"%j6c4mX=Rb!?^%$0biH@<>_(IG[^UQ!6DF;pJ-U;:+p/?P0=hOl,\!.V!);?oUknI(W[9W(Ta+[O3#gc\iR$Fk=(`^FjMVao1T0-_%53*(q)GETE3#(%\SKc($WiTT,Q2ZZEY_KEp^`ZJt="]JipQ$.el9/]S8BjiZaCt5$;B2]-Gi=c-I@dK1GgMP&8&M+[4$-t$fU"T4%"LeJO&BdG&OA'=Y0\i-eY"R7h_2*]Vr-+d,?o+`O6&\un[;P6B;hQD+873juRBX4d%;7-q,fbu3g-!0[S>f'+cNE1VO!f**I&%s[%rZ#;@Fj3_oO4he\R\L!CJ>b\\bDS8Wafu0=?qCX_ec:<@ZAJ*qfP;.d%3Rf^;d0c3)P:_4J6af`dhmHu;\St'F>5IAnX*`f;iGu,%UQLM]4pG=3LYX/Zd%pM_fb^_.n--K`+\"E)6FNrLH#6L*01LYEGg7XL"1cP9@N5SDftiJU'-:chaN9E4F>5K=eTajMKXK^m51,g\%+1l!JDrN'!a/%]6ptPlXa[/]197eZD`Aja/9bXe>!tdIH?E)J5XGQT7k2T#3iTesN5@Ia!qFf?'"d:=q2r,IS2-)UQDXSZ)gla8:%"&u[p\34uJc*>u81:@I#;(o=cIPL]MfCfm'P8*I=:12R]<D04JR:Xms%8iU)F"N[OQ_=;7f,ET1R&Pq9\Cbh=X^tt"mDr`e[M*jP%-!Th[Ike,$<k=N_B1=#K=\,@,OArk/M=3)>rM2MK:)%)!SP'p6.qP_>ZZ?;.PNa/?BX:)!"R)qf+_Kn%m]1O1;e;.4'X9HR0PQ<0%WG=SbBWh?gV*CG6;,-pbSN)Ahe#\g/gN:;*N[DOWO._M4,4oDVFX+1.)FUi65\p`n.%\5,".9Gukc6ZT-ACqm<Y,qFj6aq\egURO%hmi@`X4rp#J-^fI_s;G)3OoKuPr$n)qK_^`5K^j0&aR`4oI:n^UG\r$G%-Zpn%/RTegN[X\eA*n&pW:>h'"JL1oU'c"ObuG4^=-i%_([Zc^1DllBdnod7XP:LZgQdg5Rehhd\FY@cRn&)gRs93X0hIS?Z<&jEH@'LD@DSHp%p35*Z!alYE+sM>kf3aYq$Vggb,V,DMrql%<krai/]NB_L7*U9MGe]dQU&m9<(q,MHWLmMKr[^DJ3rPViC>D)`3ou+Y]nAa1mo)C8JA6:3D,+0]`SQO6ob+p^P`Z<$h-\;;U=i(%kh_8r@KR$AHXOb788jd,)VF'8f[qJ#`;L\B\^(jIj!)MGDmEW1b53o0C<SqAqhXjQcEF^1UO7,QN/ADd8/Ih^h?!uWb2e]?CEp2R%(\d"'$]4*e*-Msobbg+8D<6l$8*1YW-,`a$r5e:ime'-@7=X$(WlJ<LarPj_2iAQI*9"+l%gUM'al-WKjUe&27Tbq>0Q)Y*gn9Wh%%\Q83PUkTRNgRY`OeQ_*.P+#*SU99tpgDWkE[e]QgJN>HM$GEs?*B@=7;QiA%\l,,<f`"4qcgq^)K$=3oMkRu]j?/dhHr]lalHE[%m-Fq`0b>\-1CY57TU?6f$^b=^6M1e1aI=$=jOfUXQDWE_<I^)C[\m#aD@AhFrNLL,<q=4jBl+i+Clu)lVGj)A0q.*i4cj(#BK?[u%`)^j;OE3BYQTDN(OQ1W)"]"]JoGh?Lep1O#!&d>,gg*&M$&<.T-$#HdZ#^S@_X6>+h7uRgb%MI6Osp2u;<o.0C3bhppt^?./WcMO%Rhh,MSN/aNPkh^ah_hVZZmoL0Tga?Q!11QW?mp.9:3$#&1)Uri!uuEg@nrUOaQo=2qf4F]EGFD?GXke["(<:4AW8W&cHn'Ib54I>%nebnLk6u>/ikudJis]_bCqtokR.'FI?k<^P#<55^AJ!K%OkC-Z@1UkbjNJb/A.O9tJj-^!J=RR2SioJRB+Jb<,=@&4I;fV3,CA(M%?k74LFAW&:V6M5&dJRWCH94,IQsFh'+?4=UIpUO=;/k0`eksbf_qrsj$9RjHfYc"-0AtWX85KE1qIrW(q.jbJP[5H`MWA#9(*h^r%ZFkX,SjUTSXsZ8-0ag$_?At2Qo4%*"K:ik<ecuT'L.\1]p38!>cPnma-r0*,kF*[I9%>LqqiA94i]2SnhHm&Or<#_J)<N4flr[=N%MBDpG=7a]^kQ@l,A>WZ=Dn!EI:t[mn38MEfnPspQ*-g<g1PLMV0;@<U[N7oj]+3OT#(DY"8B?\XL.qN>Lr@MJE7@1PDWNb;KoZi!%>'H'I):uJY-?p%jcq;0%qci?u6e"n+cIS66o>CGYlG.T;]aEpU9p5E"qV$6$XIhZ`E-a;p81sh.YTYuh>PgK,?L#F[5B$8Q\aSP"%^i<2WXN0B63(28uSC@,@ZF5ZW6Z^JUTq4+8G#0j^J[;83]RF'9Tt12NDC&$pKF+EtmnoV-ho>CqfnpFI@06AI4Gslp+0XZ,@7ME5%.[$RFG(W2Yda\Op'.rb!)BA`'BFZ)&BS?]DF3Woao5X_E=#^h^2)snr''Z-0qf#;XNa<4tF[>geL_A%m-VMYgVrJf^[C=s7/iE*W%7NONZ!mZp(;-2@<G..XD^T&M1_KI-GZf$h8.#5't40.9]=?'jL%23TBOcd"3fG6@!KP;6ldlQH(RfLb&@\)-hH*C%'gEq%>rW:XW%457\!YRs&]d90"PYtjLCA'3I_@>qC#ed3[\H*pC\[L)//;fA-r+V'-:omuUP'15H'1L9%r7gL:+^16:@DmG[<LS[,=GuPp6[:-@K%CQ2[V?L1X?8EXL6`WPKn_(TC&pNl8@*bkm;n5TGkRmrm)Oe=Go(8<6F2Zd0E#Iq%O_*gQt'H`=1BFm)+mDA(J."d7PONQDF4H^H5%]8.uV:4S+q`)aIY.ia!sM55[Ja\?"feD(kt5C58IAUr)A@2eA41i"I!W7gm[1hL27^7[E^&K_CGm<3SHK-p<(R"oD"`%m-b3="$#%M.J@YAgXC[4tRl&`%l_Kifji"Y\"d1\P4T?JM?631r*W50ea%WbLkST#N0+]H[Du+)42et__bt7))uF-4A963Q@\(&h3eJq/jNT7%)Dr5#AKV<U^%#!a_S,PXWh6@n9<aG#nCldGMY5msQ2(84%7Q'J^g7-?YRqpC23aXO(cd_-G+ZlLjgK,9X.Q=->>R\leP@m.^cZmF%#9^J1K(?2.*.Z[^$]rApFoZ!j/[.RYBh>Y0,^RgB'b^KDQLnD2K1]UJO?c?l5p=@"mX^DR5&)4Rnij$s`-"pKAl;0I6*D'L7I6MD%D;:mYU7<7^JD[;Z!Mc^E5dh22+:#-!bMX!&3QBL_&NHY#R="iCT7,d.*?^d0U;"T^+:-L;U0i6J`.Z9KB3:ZhP"Dh_7a;iq@M</O%qnXmlS1k3^-I6*O:+XFpU"Lsc);em=$iR&uAXo+G7\-AZ/2V^-)TQK%Z++T3k-nI^liAB.Gq9`9RFhU)).<pt5;k<R?3+p)isHE0%hG\L$#Oi[>g&[!]Hb_D\Z49-9O$A.Ied!=j'AVu5[EkNL8'$HV8^$Qi#6j("CTW2u`NLatqq1aQei'st&1jY@n=7Re3D?+Z.j,=C%=0UU:o:D#C[l2KN$Bc9R4XA"8pejmRXNj)8%<e_K+BE+t0U!;;"j$tEQbiF-m3/IJh<><=Jf%<,YN8DIo^;@>:I,-4.0pE4G^hgU%Mo;bAW.s]\b<#m43WgN;grhe`YrVsf*I5Y'O<32sT%<3EO2@$(>p4"u+,ED#9A<?U]<qke*HeS7eh.Lh_p*$Q3ZRSpLUEZc\\<d_%(h!I0(n3B&b@BTjb+tI@>Pkru*&;0b24BPVpQq_JJlq7Si6RIk%.X-c(7+?%V(!<bj."jY6*BbJXD":"nrJ'"Bo7WuW&%,_@<3rG%1p<el^?3GP/:lB1=2Vs_r]EBB/X,Pu$%4Li/;6:VG,93ibuR1[gjHP(o6I1K0L7Y7`GCrA;DK(9#_KbE1AeBL3k[4n>%*<l\=7Dg%p54#M?rE%R!;d$b,*n[9;XXisD$VMO`6k_2<,STk[=Kb9`38/tX:<p2@e;NsW::eU$fs9+0`80_#;0^8Y5oG3okK)_5s43'SMnN1%4G%-R[<Q3l1aB8/qgnG&V\E5^'in:*_+!rCOXWs,8R?9G+_%d>`GU-5`\bsFP\Hcs9<)*$5&aOH9,N.WG?g[JQ;](lW'teUc17oZ%]hC&l@/%FK:/p+JKQM7.8EEDlZM>1ubb""'[;+[5oN4:<#[F*9GNtsNm`p0)062><h@$_5Ut*</X,`kd4m.D)mfZh`5$,2\,I#QC%fjTUl&3!7C%j57DB["GSJoF7Z5)eZima_]7WPBWYJAlC")JsT"^U=T'"cX;qLBS&:<cE6ms"f61Ak2KJG-C<K,ZhH]Y`R#j]coI6%2@1.G#Dl24$%/gnr0"N&/.=8s]O:9W(o(e"3A"]?crRBd@YHK1%gs.TX?b:-IbuLP3PbcT'uY:c%gj(555($D(0IY'dKM"#/E"B^%-Wjc]!j*7l-Q]\=5.f/Hir$@coB`&IaE1(T68Ta.f9l.Am?KUs%;gS*kL]fK3OVU++'Xo5,%BN%DD5+I_jQGuEa^b0\+-MT`j!.n%(XuS=_HFC6i'`P'"ABShO4SJZ.N\f7r=%6mMp:6AKQ\T)LJP7F]`RN@q)k0bCdC.B-!Dk^pZPp6B1@IF81FD--XB.?9;IKgo)d>D%45O4-]%C7Y\hH3ab&T)]=\\<Ne<]WnQiB86+u63@Z!2Q?$IVB$!"r$QXDA^$oCshI[WFtb:uT2%IPYj!)dp/!Ihn+OEcj]diiqJ`%#0c\)cFd7p2"m_cHa@>-2giG13/:SL61oZK3He0X1N<o.I"UPBR?)E6jW"+<Wj?aVYC$GU(G!d.I.G'5]^cMTatj._LhN<r/)Th"%<R)12Et80j+Y1k.?PP6V_E#:"%J=7bEfQ(^k=C/MYpU?rpPbV0N*_S(G3S/'_\ict48--_0sBUW;Re(r8JV'pHsqk![j04K7P_h5%bdMo:lt\`lkO?VQkdf?9SAQl7+Bm4+SAU)"loc9^#0Zp%+6W.92mbC2n,hG^iM`/_'[MlZHrn/X%+G/bs2[J4kkkBV\-U,6oH&4_%EXj,Ip_GFU#.Zrm]n+>A3IWlD@OmWhE?@*/K?(WUDh&pY"UrgLQuA',H'u7$eH9<Y4>Z/feIlW92t4B1;KW^)^-OR;/5]KRiYtui%p<#D(+6JeITU-tg.P>TUd#/"hLm^9Dd<X_e&Ds4n[Pto$^8&m%<NPtM0=Yh(`JSTl)g#@FLLe4]o$V=PF5P-[JJ=*%SFe.0:,Nsq%^gc@EHHbuN@gbV,G$2n%h6RVOc'>a(^lbaS7No&:EEtRi90ko"Z8-a]IP"?b[798$?[g\bNqN"_\!,=l&hTu\rj%WH\0O&W,Q&Po%Zga4kGM+fsZi$fNVmbm&D`Q3:5)$3[(m/5hgr^_9p[2fUF5rng&1lU_N;dW=WL<J?3^7&]nH4?Se,GcMX57gK[W\;@mS8F^cs/*g%YQq!AGQ3-^iHgPJ3(WPPaD5"P"nq.Ze?7<!S.Q?g]7HU?\Q4T.&%J3H#B>FW-onJYMI:J"(&2R%*aOT=I+RlB?G[4Nhh'JLHZ71p%4;m$`:q`p3fXg5/*HR)LGe.C.'$Pe?/uNKUb!Z%7]Oe66m>cRAVnJNIiVl8X8$#c`D6?Lm]hF@?Y^]=.P>j_!_3I0m#rY"d;;:Qc%Duai-ZDi,-KnKJmq/9jBh'<ihPf]Y>OW4(5SU!AS_JngLP\YGdofOiTn&]G:rT+\F!*E#@JT%Z@6\#+R&#(&S@dY?.+PMpK-i$+[%[fBEX0ffNO-PN')@fr6M;J,BJ2Yo=+Xi")ehfT,tc)DDAf=)f`,U`gD`:40M(O3'ZOj(S+O6=k7BpIE^/[-eW`)7Xb@ONNtFq9I.%3?C-kPj`AgU7WR:qI#e')T1`jq?CmA\#BZ>N7p_HRgER<oD''Pg%df,'6HbtQfu];/KB&p/.O&s/Ijc^)M-!*8eK8!`-/CZ]:P:H%N@e4<Uhk@"Q%u.N(9Yq^hm[WLk1O8;op'NaZN6iEjUa&$(,^k;0]_/_1lduck5D7?XC'eVC`S``r3NqS0I.,e3*?E0[%O%f3"t\[%$$@9pI):]!06KfU@JmnWUlTP[VYV^X^XJ";N:JC:5Bt9ul@T6>?s*8)+,IL7&</RSEOZ\tf:dChr?TNMpe8-H#B>,1/mL[i&4G,[%<Od;@6mVR_hHtk//SE4O"S4"NV[Wc`o9`/#2&>Fu*[arkkn<dMT-O.[<$$muqC2D8`#Q&Tn0kR_YSr)I_.?==X!i+!:Zp7_c4NW0%%BS15lW-No^7a""nXR^3CfAINJkJcaA!'@f9:cI-l.]I0%O"tna4X&0auc/"7u$J*2;H?8[#kF(_&P:io0hd?V=*;;&^t"gs+ksR%2redHn)<m',km`p6OIFQG_;4)]4(:Hmqf5mm6De"%d)jU+Y]AiN=RY68tb9%%Bmk=jX.q""Z$?Q)%F:+Md/IJs5c#e"3&pH\1E>\%3IGOi*W_eddbePH+:eEhmJ:9r[3Tb\qL[!2iH"QV?;&^'_J3tjqGs3%#+j2NQ)jJU&j;=p)nC**03+-fb-q4H)*Pa,C78XDoPcaK%fL>h-mSWTfs"f#o&%7S`idVN?hcdI$^CLkIKlNdG^<1%o2-q!M';o;-o=mkEYE8.9,Tc"$ELO'SqG!<[NC;@PB5EJW-"!.a/T!8O%/LOmE^*CK<A"34?D.i_a"Ksf]$'eMqbclqBS],ceni,X0KPNjm=i@I<;2](b$)/mbms`j7cYK7oZ=X]lJ;k*uPR,GcYo7&u)@^P:%Dd"gN:F3sBX)7='R:m"\FYnDjpH!Rta?6q!<0;R<$r@nZrM-0J;7jMK$;]F6W_s\q[DhtP\T@O(:0#8g"-JCXjjn.'Id:<5o\9$.%Kt%@2IH&db$,sCC/]2LS\+V\Me%H.H&+_[ORVlV1p!C'I3\-#-We\LthKVENXFB2:3M[_1eF_JuV]GoZOFdc8h%m^>#B,HtQWKur%LJpLk/$i=h#>mP)!oHk?b0qZj5Gs>ql0UC5MfuAH%beN-.gD%FUt.EhpjE*'Ka&jc&NakHaY&?60?EJ6FaVTP!T)<sk$mUT9&I('%(Ho8VOU"CQjt=C"O(S=f7o!?[Ehoj>Y7hJrp(N6nA#Gt=*^F9!!W![Nb^LEXNcJ()bUiWHd+XI&<cgpBC,k9/V-Z)G/IAq;_!FlW%Tcrc\/>469o8mWY^Epcc1TW_+,;,V27u1bJN'sZD)#<ti<i?IN6XtI^PJ=!!nHRgJd!nt9n2ad\'NB4`,@5#@?Ah2n_VES,Xme]+%LY#..CBn4HSjs4(5TEcE4lOr=g.P[N7o(6d#PVo!#@$,CC/7#*Ll,802m?&t6h('m!E>Z>oSTcY$r(REad^BTBuP6\-ok)MN1Y'C%0<!C`<97qe?c*q0/ouAIrH1M,d"Z%%:d)!AQ.\(R)2C9e$]3CKD6indB@-UUS>b1^pG\>;nj.UMT\^9#Ij_7N;2HB)pN;a<PKbAN%'QVdepJ[di;R===Fb7obpH&C1S:`N2nr>P>1-+6!UtsgWK]_BC;o[]'cHa4TZEkVY)GW`=iW?7c@`3@2\-J@_`$)JJS+O!4.,U"9%gT,$)\[V\/6ZC1(lWnNe>hfm^q<#fTLK.3OaNq?H#D0@$!+bF!k*r#5Al65eg=a>I)h>3RiAN*#H+dDV,_a_7?/agUZ[m`[EPaQ>%pj)u]"+m+g>m%&+NT'bD#PR;3m\Gr-";:pq%s,!+^(5R%K\J:c0"gQl+E:irIZ7cult9;$S6IdkLp:t`.m0,[<4g[/4WgiX'D94K%Z'nnq4tEhN5Mg<Q5Au^RU55VZ@W!t6aee=,KmHqZ_ri>"kj[Ql5OKdO-3*F*ir>SqrpNG<s2[dkfk=sEPJe%(;4R)EB#0_SJS$F>%b#S5oGENe0gK((XV't&h,kf]DcM]DC<>"VLi;i4p42BTK=Drl8$1ONZP&nXPnh4sTm#U,falrt,k9_]@#SUPY.Z@aoS$u\Fr`G>q%4))$A!@\?LZ0r^e3`!6\?*P$[;$1/E#=(Dn,&bCE6Mg;I=Si[KAEtLb_p`Ju"OS@!9t06+l'Ab0s0FG:eC`(m6(A@'?&GjjRb^cn%&<NNr1R]&..G1^=VZ((HmMfJV%F(V,cbA@\f:]UucFIlGm2BCi+TkZfb(t3q$TmCSXc3#j9p;,FB4ZIHPnVF0FnO\[QZc27d[[ZT%SIU@UE;e2t>I;i$OM7p`AcJ9$L355NQapmC7?(\c48!8m@6X0o`l)<=LH(u$Q+R9@6XE@n@0V`UG)!S,mE6b\:&3-H>>=uLQoSSW%CCecboOc%)2J9H))a]JOOjC1(9uJ?^Ccn['M!50$#,<,EYX-`*E:jJVQMOHHNNU69&KeEUAVans_[7)Ummh`CT!=cqWL)JU$Z1N=%hr=QF%F2VmbZB@3q1\j\lcWhF.=X7@c1hqge#kGe*HaP-I=KbUj\$9t7.IkG*`PXeEi&[s.1]V2T$j8+oDV/:Z?1&I9pM!pTWS!a%jJpUd.4UqCWFS(8)j-'$+1^*LIJ%'I=oK!#GE"MnY[$&l`"F"*^*%ZFC^5QLGQd3_Qgh=RnsaCW8g`p2ci;8?Z8*n)/!8l3/NsCn%kY=[qX8F)+&!BL"lD].BkttfK`O?NF139h;(I^Pm0et1XY7=l4Z?J.A?7V645^</O$"2Q(W65I4[;n/;LkbZuU%An4P:*@`b8rXR%Zie_9]6[lVB6@b9@&/U64c-$J?=[..YU@7afRg_uLHUJq=m"M)4R>XM93Gq0nusL(Mp7Q:p1;m?I)1O2&.a+#0tK$F.s]d2W&r=G%Ck]<E&mR/o[hWAD%`U!cAC0'o&D##Gf(M#\@u'QY8(N.]B6\1)lrCbdQbDSZGqi)a!\ANgK'=RXB<U&^PFfQH?fT(""mQX97&/K+%2B6T^n6#oQlD_L'0l3u3SmR<+VfsER"5`4X@c_l?_ldCsI]/_;QliO=&mhIXpq^h\/1gO8_c\sR<33a>+6bK`\-i;o3?ijkkRXQX%LMOHhDR$h%Y8T"k(2#AskSnH.`\@-q7*RO0U_C]Bq1E'49Z1=eH40D%-E"Tb$"pAQ+iruK6'_%]`+:2NLh<d(Yt06ajqHWB3u(*b%Oj_ri"cnS;hrO@ZCKoW;b3iT\2Y$`jV-;EtO4OPH-'^/@E-HM,W3K<rURb.NB:Z)GkmR_&<M$X.TKA$eOd)V#.kR3``sH"*BRUUB%A^BC<)2iELU4JWOn4o%*pb_CuUO"]nlnPL;L'eJd1hr.KSYY(j[`PHhl$LLMDP'^QpHI;40fEAWg?)!Z6;^Q#?`GN!i__CX4N/_!%?H@@N,XaU;4HAKHL'4$$Pp.AVH>(&I'Z=KB'S%1*6NN[u4;'R(3$djUIKmG(Dl>d%/;6&IX!!tURF?)3"DK?3S-K@;@ZsL.(^6"1%fb`/"!1@o#Cutc4d#)6DVr"hK9"#2eR2c\idY'lh]l7Y8VVZH3,3!$"33@sTe/)@(N0oA)HpPe"ierDNi4.m=?jO3)b0U,hnL^4A%]f'<J5a7a9^>N7s41[EcHb`4KND1tH@A6Ud"5)s$'/cMhfuH>gW7<6S*iL7NT8,b?M<<Zo^4Csf`5WYc%#-J!imP^!US82E]WR6m%`#;1MC5Zl?;EH?G0UCA@C9I6kXYX.eg6;1%ZjB(n4c3CT+e#(@(c)RM0aE."%E&^CSUHME/EuKUJ.Z;.U0q*/$nP\/AJtkhc7s!R%9NlPW9D7H-G@\`@N!,]"8!`N'!cKSqE`oOT4#6Je>MgM9]k"J=<8_Ve[G-e`UZr[9m-&=F[ghsAe1_uoZe5:bB.bj_>UP[MpG5at%O6XqHCYV_(6e%1H]aRr9\aTu[,*B3IZPojS1$bpkRR;/5W^Wu^ba5`iZm[Kb+:Z/IhHZj$$TLZj.pU*PjlS_U!A1V`oor.)1f$]n%<e=B@AG6>!L41T(H5\,r(=&:>iWWbam0B6IC+<X4q(.DURhD:(8Y!@u7Iq,8/as?')2%cO*Gi"4&j*.e+4rZ7l>HmM/%1N+mR5]h%O/Qt@>)%$Top>.ObD4gS!='F>#8&/pL+I6`=Uc%QVR[TRrpR".b85gVL=]&4bo\V6JjE@VWD'0VW/u<W.\E8\U\S+3q*[IC:I+rr%B-udXV6"#rV9k8;PW%BH+^EVPLA_S"G[D,<dA5Q39fdoUF7e4ZLSDE@`q;XNTD+P\YGglT5D2KN]V=-D;&IS8?I9$cI=f4arkJ>s%DsH)IU2Lk3s-c`VUHhV(UE>9Tb:gUA:\k%P(BsiDs7'7]\)G".T-QsI3Lc<3ZC$QJ1T@IjLWWNbPaiJrZEEZEQV8Sl<^o>o23W&=%/nQmgI8)F$V-1OlV/Pso*81BN&Y+G;!Co(fKS,r6^R@=IT\ifL-GM2]K@+W2Hcq2Kq_*HIJ*b'L[=)b=.."^\SY8d*gnpbs*ePrJ%3+t'e3@PSS1pj+,(F^s#d)O6#B[^^2B]Em.*GH7$7%<6TD(_KYEq*C0OS#1m&U]1pb42.)ANEYuROY8IR]Ia:if'PQ9*-u-TM+I$%S,q,M`j?T41-MR>9at(9VV7/5ECNcgb5sPh65*HT9]0GV5dN&-d=KH_oUoqV2,O+;C.DIH)*ptK$e/ts-?-u/<d>J$as8F-ALl+G%.BErc.5IoDD+\l42>n'T\BLI*%O`t<kqiH3i0^$fn>5=.C69!C[#i<H/(,S8D/WaNAJ^jYP+7K/;I\2WB.=qJA[AZP:pit%.4aLG%<QfKgC2M6(Ci3*XdpbG/P!fDVfd'bHfq]*[[7gfV/*2=^bB1O7D9`Njk^CX`JMs!UUK)#Y<YiZ!>0^`)BXKT:>.'TI<\*4(jk?4D%=pnbL->6sF*D[!)!Ed:*F##D.oscatYcO&o<\;c$X0jrHY`"Ab1>95n8].9fe*4@flPH[(V?<-Lo"_8:3af?Rk6?*,_*lSiE?Uaq%)5,6rBPYnM3b[&!*OMo4LK6"U6*%CR2meLc-:n5gb[g@m-7'h,26%R0)%WiQapTS3)%S=Nk1n<9.\7n3,QfAJTB)X[rFKW`K2\qs%8m'\35jMU\B3dD"$j^MH,+<\"_\SF*>UD&^Oj/Cpn'[/SjCZrW/;]U'B^"H'1p[aMC^+LnH.%@@;D&d314fgP$.V:^2]L(RnZ%b[%))]=Y]Lt'7cm3MnW83B#>`Z+Y6kc't,dO;:8;t+&S8Npk?H+D#6P1&YPOYH%.mk3.oMAZpM:b^p(1hKnN24]QoFtA"B:-78AYclD%`7?/tV6V46Uf:V+b-G-X80Q!khTa"C>VCrr47+pr71_j,6*!JD91iB/3J8L$B&oK9**ROfeo9\,CCV(NUmd8;$@r8D&Of5+it@NM%BNYQ.(_X]47W"/n>"Zi!)-Th34,]>^9<=^%:Qg#B##H1S:XJqL&X<nZ`2nhm6qg8qf^L\3;%hJQ`j;'i/]!?8PdRA68fWpn=I1ch%NlZ>l1[RB,JM0r*,7:JZag=2SXauS0`.:?-WF^`DJfN+@5*D-kBGmj9,Uou%;<oIGg(Vt]LWV;rA@)DL$8&Tj+Dm1?Q6Feg+f>XO%j]kuY!,RG:V%?hY1+gDnO`O+&ZTqZJe<>G*V.geZku!k+JdcEjd`.FNqB1nLa.Y[!'S8)+6WF>h:!+#-80:rb7:f#[9kENjZF%:r%+q\"rU^0m)MU3VAdP=K>,atI<9rd:\_4_,dPp@q+]1Ou`NL2=?e;N$JNmJ#gW/4,51K>RJP->(P[#Bh?W/Lb.b%Pj@%^7]VTJS9"%l\RkL.$M#a,1)gD1!!0oMUW;>!_IM05ab<#N/@mhZ5SbNJg9nRAP#Ka<0h(f"H$\g7[hN!q^RgBqOfTd-o.Vp#&'-m7>*e%8F8a@%jMou<<MQ[-1glN35,_/PXX,EA1)e82)524#XUQmSWK#%;r,ha"OnrgMOscIAH;.9-TJAD-:g'+7;fRt4m;_2^;t?S:("b>h:PP>?%BhE9MYH,%O:iaH[:F7J>P#sRG7>=\F'o?ZW8fUEtIteRt,H2%SEFt'X;s,]94K(s#l;?hco-ql(K,-&8=H:d4<2l'kXbeN5F,W*6%XNN?X#V*Z$!GJ%?AINXY$k\tnYo+mp`Il;M'kMqo-_40@N4('"STKl$=;E?j;%Y$(.SI$]PW5!FV*/'Q==>Xt4-h9&9kUko--D?I%R0oJ&9]+PB5\1g6:Bcc9-;[0gMmcnX1aFe0r1Pl$#>c;-H)N:3l7mn6GYR-@(#C2nU1_udLl.A&(7P?'#[=$b_O&_X,]0Bc/lQk;%VUK@uU*=@H:MYKXkR7Ia;0t1Dl7kQQXL4;(V4]S90pV:',"`bj`M0XhX/<b*@J&/PZ(,6u8SKEk0[ccH>mlp/=?Vr!=[q\P3g;12%:1F:&N05NeiZu\qU[\I@)mF(!@3[L#@b"H+Yk<[l(n,JeEM=Y"CcT'ddkVkH;P8p]'sY$;Z6ZKjAgT"&`5+bdX%/!kX/JBXPfW,E%h>rKKX2d]"'XdYeCeBSD4H`<>,`#@h8Eu9_7VkX8ZG`]D$*HjBiFo;E.5U6[.ZRAo`9R<9cH^;tQKu'/:V_062[!Z$%!Uh4pKU9,%%j4-Q$q1!8(Bu&3ZiDs4:t->2qs!D"Z.@VH9-/<dpuZ(V32c)c?'Q-F\[:7dC>l@hiWAm_YI@uOrVg2/&)S+;%6kC&'K'\kioBG/%N@;\?;550#G\RUP&,m7p"?e0.L$o7X[.+$e$lklEAb6Q+i/cGVd"=Pd&)hI)d73cgqt:9LL>MECpVF;32k7o!2PUaHmgS/nr-@K)%GjBb's'W$+bKcU43^_:6J)7Rt/NZ094rF.Tk?XeF/O#=]crS)GO:V%_o_dP%rhm-4D>]$']-!t@=hFeXlt,C5`@LGo?A9BeQeGpg%DnL;m?o@5dG`*g=_;\Jj?nXla`O4L(/a/&NT+WB2``o_ZL3E*]I'As1-[WNT+($L)IQgS5(E`#*]1p!fAc$q^mH9,HW/DIlDEWuO%N$%D_kC_`IW`s]-Vr\.&;7Ad$>F_>sK\*A\*e(&:YSqY(omEtUFn+0C[_ln46OuDB5M4OCjmM%q$"(I.q#%pDptU>tJn#VUjbtGW%A0H;QZ,)cOKJ@r:[h0FlM"f(NUYXj$4Mr$)%,),"]X)K3N,cSY<a5\#K%(RjiFQBn4nQkUVqA>/-]=>)modMkm>nckB*k2Ds,/s6%eA08ahng6!;YjTG'D@54!0bVS6bfb_q6'TDLGq3kZ0h$b7)-TgLP^J6J)1J(.unre'E&7u*@?(=41o"e-"M4ekTsd2b=fm$_MqR!%+\,CdWfY\F\F,I-/%`b\H/@2djR?AkO&86]=/I%6KI;X!/4KpngN%OsLL1fZfuHV,Ai8ir/4KpT[t;<"*K1Hm&I(DF(mBX9)'AaZ%NCh!N`D7G:KSE^S5!tC*D5Yct$kf.M/FgWt,iQl)LW/44f_3d-4%9NPp3Ha/9G/7^BZD(H$/=p?%D#&'&t\QGqZRfk8N>CW])A@^%#Q*m]@)O2H5[+b3+!UsrNORI`"pn)6?\!,nO"fdSX'ue.fiQ.K6,J3"/M;oXW$a3T;5m(<[U!mHN0kkI:@&1FO0BHI1jg/X0hF?$%6WLcoNSWUR)*R=+Ctkr!GX`)S5$2&P,6eIs#5c@C'm$keD*+$7;bRg![SRdD*=bm,ob<UCPBGBoCDW0;AW-NH,$XrVrtEA0\+Xa+%:H"t#0"`(.KTi*:>^5k"JqQEd>`A8?h88+IFZ"W3iVP"VDkZq52e/$?]Lgh\nr-.,j4Cj[PD#.eFr\0?(s\[g>N:6J`[KeV2<smH%43RW5<:]mm/@^`'Sg0c(m]*dSB14=:qfm/V3Fe.iZ4_;"@F(;dS.,AiPs&V2GG$Obi52'?8N>BsFX,E*/+SWj_TAGt5%eM%&sQ,a%MZYX\eHgerI446RBd/@n1GK]X$/<Ml@/G0aSs,Nf#[9#WB`+U>hWRHHr5:TuDtF/*T^R:Ueq<@Gi.hSaioI2![Y7"kS=ClQ8(`:b%'NX5LPLGChinaB;%<Yn.MBUcs[NK!595']AX;E6'#i4L%XVuM=`@0\U2<s2bXV`@SD!U'K(flS.:0(%oO1I<2X0WmMN8dU@%:*sC%=%j5:1nuO\j-o<]%"<lG:E7asK*5bD^4jC!I$Um'6,JAUKC=5QbM/NY,D..J0_@E`:B]X-*q[.,nrpnN0_c4a5Po\TD@_uUMQ)6$%rGhXD0EbEi8/QaC[t,no5@H5K<b^dj7dreW:=O;!oFSjaI^^_DNHTtT;hoPnh;ZPL#HZD#B&<_;I/cU<:J=FrTBPs)H(];`)KCE$%M"d/)g.Fo;S%9J[F'hbi,PBh:3RDQ(k!1M"9iT(H[\Oeop"[NrZ.F;%_k=AamNgT?k>"?UgXs?NYt)GoPm7L"#@"1q_1)8%lH/>S%B&C`,b\X,eCHoW(A?QC0F"8CWfHGj:rC0goCC,h4;[5P(+DAO#Q-Zjkb_iB8V@J4OrChL>-'ZV+;qF\`qs=d`d3o:%;ii[=hsZM+%9/mLT"<+X7"?Z-Sq72]Nfh-CNIY>O5]R@M[&e^\5:(E@>ppoCY?1]@XhWmAW&i,(]@IOqK]q9'HGP7\J@@*sGTDe29Xb6eYHdtR<%7.:k.a4EaE_H*Zee1HXXp9f;`q@Nor@$SH['iVU=iO::4[f$JIiTFUfe2>bC1N;=N#^_RF7UdIs71sC5DFE<0O2!B-,Jl9';9`)C%<Vp$+3'Y:>Bs3_#;qF_aqS`]U[DL8+[\&1p;`F/ffM#uR%G-f[O"g>@2H/Fa^.8*!+k-0]G(ncIBR-a-PfuUs]Af%r/GHb)DLVqW%MrKQD]rLQG+A0<SV8\5<k?>`n<F,gFWi:V-@?;6H<3P,2`/:P[V@M%i3qWcr71^PSTBcfO5nDV@*atD7KC8Nmqclq<%"c8A%10)4%%_h]#+ncQP/K,gb+JPI.eubspOc#4DqF3Q`\uD0umU>rTBL`p+`(+Tkco0NFgVSiIK,nC)"'0(s5&NU:'/G1\@B^tmV7K:R_U'r"%Q><<?@8I*XkZ_.HF`8T7NqOjqCHpd<9!7Hi$@W$cl61bMplPM\9uq.J\k,!#?q4<TFg)l.r)F4;fV0Bpe^P%,QhijpnusA*AZ'!m%iU`UbB!tUnA+r(<bKn::Jke4$\)1+jgBi_M*1cHXk[ZL"Q*'sp\R4#K20HldaE+:BDlE).U]Xo5lK.1o00KPDpSo&Y<,@C*CaPY\%EeH^gT3=kZj6kiH@H%3`4"gVCq/>Ls(ABh+:mnOslFNsI19a>]_MY>1,nTfAD+_QNCEM#h]oM@!R].8#])J#mof&<Q#'4e9KFNX!%X]-[g8f/NSl_\Qr\kDn5hYI":778gt2"+Fu^58M<#^2$d]rKM'gm7WUB#<Iq(u0X!\e0+R]%jL:NA.l!gG^Z3S?//?\.Jp(@"W?M%<E#7]%I/dS^HUmP=>=sSeE).;NeG62Y\*0n4Dl*nS0)0Y,cmEFOm4!bhh-rB_3(s1lJR'IG7HVs6nh$YF4Ij'Q/&Fe%M@b5_+i^P%N_7p?MQ)4I@;l>"kZV(CF`8Q6DSS<h`(fX^MF(q"eA7+u\,dOj/ZbDPgi(OMfVG1M+WciUKlp<!7pq78KG@G;9jR$ChrmTJ*!q8h%\A=bTFNu8"'E,F6Qu]4rV]R`CXI6Y^l7UQSU,cX9-Of/2I67-:";U/*"DpQ27^VS`Q.H!JPS(_KdC`O<qN'D2g"8t8HjPECYYP58%MQ+et3mE0aRLs_23gbr2%TCZ;0W5#AF<dlU]%h4%&(mTu@F`kM;[5b-<X]`n2O;OD_8==*WLKk>VK+'=NXjW6h+VsXknd:/PANhB%Z7[X3$d)q_E3elp@,')FL8eCVY*seoRQK2GFKh%q@^&\hH-NW5gC_75&Hi:&oM&;*($lJt:7sm36mYp2?@u_H$eCa\,O@1.c.#%<%0Sfa6'I0]J]%h4$b\#2AMCF:]RQ?8]?fLA*)uG1L-q>-@#j\@*VE-_"_I,o:1NbM(("9A5OYAcK?OB">hk#$ml!2kPlJP2M*!oiK%Y0jd63"e\NnOnU1h`oddJ%G5D&;IqGU,CdgbmB"_Ye_hU=>=qP-Of.Q-HuiIVCqV41^CI&:=s.CE$`02q,XRJ*!kCZ_SX0@C9AJc%$?cJ6.#4b`Wh-7hY=le6d0gLBmr-\jRgR:F]*X**@F-37VRfCE_Os=7Zj7VMY#2O0gojS70Y#fng+,&rP]`E1#!Ki]8(^FVK=6Kq%IR>*;d8@+sNl[*WbPe:t$F]/3:CAY\'i*=R*?56phWRM_Aa5_`F8b#&lp4.YWi6r70)*!A8/N?6M+#>&_T>iYPB.uXNeDOR2cF!>%rMhh$UEd(4lC'[[UE_NT+rdMae+mcM;QnAh6nh"35t($F25lumobs&^"?1lY<>3nf"YiF7&nk,M;9;i)[I:o674H'q)l3fjVQSb?%^A6!_b5^T%PNBRD+hGbYMl`>X@HsdBfHnhaWi6r70)$mUN==h?d&:D\iFFIhacR2?H,@.lS#NQYIZ=&S_3(sil8l*Q@C]aC,@PNo%2X"B_SF9n:PJNA83"iYth5#+#\_e)kA98N%dCHJrl>jWcN]*pn>S'q0>rQnJ'MO5h_Vb]P]taQeYPtMM\\<IROu(`AibnaR\S?US%3#0Qus0$OP0D;#:s$G!Ls..A:@oQ7bXOS=]Fp9S6ilEBED1DRG!n?r2g(BXZDq?f_D;VH9+_[!ZahY6rPc`VNHRW0/bk=rC-C.(u%S>;>l.?7PA#`=i(0dO_0a;C*",Z"n@E=s=IUc8YfMki<="cK$5%02<^3">bBUc8hWMPRa,`%.GIf"eG5]N`:aG#[7Z`"cX#1j1Be%dj/BQma<@U/!AmK3pV?qX%V,]/RK^,*q=cijBk(0!H6)kHGh&.P%tePE>i:$EH.FL'le43:DIkh&k*OLE>gnRBlP%G'kqY+-P^?8%)BBQ,EKV".5hZqp$:7jb"@++^:;WTa(,ldGL9NXoEPbctM/:%,[_st1/%`jjMjY=#fHk.K8XL-riZpJi=`FjA6<'HX+sAF2dZ4qS%-Wrs\MN_QqAAq-!&]3NE=bNldY.8M--c-aW#J;@+#[)-[0ncX<IcSQ:IM+%E:O#N1&@1:@('n&_Oo^6;36D'6f,Vp+_:K[Kn\JNi%1OG2u-i#mGMN]S4AAq.0%^P(>A-ZO_rIM^-T(/-9*/):&:_(A%,SUJtE>!eSZoAB(6!Bc]gE8+D6>R2L-\4.2Mj&)u`5P:Z%H?@m%FTui*D;iOS6f(M#6!Bd(`uls/;IU1R-]p)fb\$b\2m\qFK"s@fF[9E*KX`-Y:'+W2(anQ!#`Orm(*pmWq<G46iHsY,I?E.sk/^,e%$?G2Q4QWuQI0?A\4K9lNBmB9>pC)k?PI)"Aa@WZDEo\Lc"Gq+2:P-MEM'kSuS:m"I0i!m%O;R_[1,:aSn-4=Mlt%t9KT"M(a`lAf%ALn)gj!4[O!okQ[,6HmNfcpRY,fJ^X(tZK83_.#]W_DS@A=Oob+>`FAG%5?AfF:EAA*aDPhp=!)<'9Cs=`AW6].njG:O4,YE/<?&%8O8/kCF1h)1W*\2_h6et&s\Oq-fGbqN,(qh*.f$sRU@GRi\ePQ.FTQ()(3N<aGc<N#_^3G`]oEA&As#\/j/=AW!A!q21>NK1eo57%&/lqL$j_iV*!V)921Bcn1f!TV&/rUE"D#MDD?</b,U3>`EKZ)Rj[jC/RGg_U`oc5GDrqs;4Qn@oHA1aJHA884M:]XC2PLJePKema%KZ6TR!(,]k3WPjn&effB3+`471JXP77qS8H*$7B1O3BS/Xrj'OndI`<j7m^[,3.`UHpkur'D@6@3uOV7L,4,')p[M9mr0TaHGc.5%kRAjLHGecP4*Ztp^#;g0oG30OM'FZHT(>EXef3?e02%o.(5=2n-2%dD&gP[1O`:W\C\.(Xpk>P\55]h;.@Uijn&W#Wcn9?9RQTen%(cclg>8SIShQMf#k7*)^Le!ZL]^aYHVN3D$h"2)>HYDLNP']?CL`j)DDp!>&=d%j!i;moQFYZK_&KY7HhO6R-MS-?Ad/-)uTJmM9%pn5*hGgICtCcG;tgF)WElOJbk%$P42S?U+Y\F'nGGHbrN_.sXFEP`8)a)FX_`Z5J.iqco%_g&[M<&#H^R[LudNf6%:jQ+ClKCM6-%`lRN\HE_faj1/+qNDifO$:/5>]*X*3KU3GM&QVT]p<E%[%#kpTe2VnmB5HA>>1?"3=_531/Ij2D-+uY*&o4@^6leVCE-R%Y4stu=%4?VhUY[QhlOCC1:Ctuk8Tm07.;WAInHduX_,jlg4mU4Co'L&>4#t&I__4V$II>`E)c$LI@j-ZC[fXQQ":rI4ad19aDhX4ASg-u(o%6^j/-M*`s]Zc7YX5-pPQisl8V3AjQ6TcddJ/a7<>-ObUB.Kr9%>buA5SuZ6(_/tZ[KG@DjgBaiqdP"_#+(5^+lm:k@__McLpX6/p%-42-<^*gedA1(U60Qji0UR3!ETU25Poj"n$Kuq/h'#$l!SC['Q\a.OIasruMg.?<4Rk[Vs=YY%PB9cC7,fqKnEPfhTWI'&$<osW3%2GRD6'2E_EDTAATdLM(/0EL\EVN#+&)gQ*cSrk2^qdgQXEe#Y#+>dr]&l&T._VbX"d1*D3)Vk\bVJ`9B:,g7%lZ=AQRC\gO#2KQ;%Rg<sPF@.nQ<Kk[`i!,$UZAU;NR(ARJ<dOasWGs;<T9L6A%&n4oK:eAHGI!Y%*qV$8pNt8J,gO4:fL=]7MQ+MjBB7EFI/==Oq!L^q%jf6h2aJsVuQPEZ:%p!97SueBlgojTdEpak=#cji*Rl]a6ldR.qlX><';WCM1;dBgl::Bg8XJ%9;ojXA_Ce?ptD<PA3dD8<%76"XJ%'+Vs/C`olj"-$Qnc710\<UOZJ1%&T,cG<P]Mb1e-?q2(#+I27Y4(+0gGHt]C?q2(#J/-dp#B,_BGHtiG@#':_0.NICmu\mi3<+(/%'2I,Q/fq^V%;fP/oF3,dg;9khbPg/ob`((VUrFFNVOF)kmX<*'dC1)'fKf1"?fo<VRqXUdkl.uoqk>`"j-7XuBfm$/qq&]pkY!i%%FUqV!'m<s./\6Qdm(W,6bW'0ZM6uIf[]hqO>H'5.OYSbrig4=IQa)8#QTiS;09J"JmUZ'gc_AV8?o9Na1,c;T\ft)5%Q)I:cD$f\%6s$O+\]XQUYPT'j_A7<%+(Sd7agh#cgpd1W@*pRmPSn\Nqta^J/SnkiotdA,fI8UOfh1RZ7CTLTh:Dn")94TkB#^D.^@#'E$X;7S%Fg<bP/GFLeFhaYTfYZPdH#p8H.L_>j_3(sel==I*=RIP@fYZPp,4&iMPc3ZCSu^csO=XcQQ!Dj[e]pK)MR^0R?`Z%9mUXSl%9!Kh%@'Y>8XI?_/lC\>T[]kHO%3kRX;j9kTM7uWESGm6UcP?^r_Rc_9pU]p]qrrjDYjDm8%1JCuLAfMPm6c$#I7Ol,;B6hG5$76.4m[f<%EsGpJMl\WA'Fn/<h0*nEm78'8n30r3Fkb<[[Nf55_`h0WFm-;Qfsui3e7j`;jJnNHTI8*Z*MP&c[9R9h_+`Y[F8PfAe^P%,QhrA'%&I(&.\uAp.3c8:H$tb08;[:eAN<>Sg-\ECIYTmt]\r3_FjaJ!T$%jG+6JoX4;[5h_r<8U/-X3RQd^cU;YL8Oe3!*l;0!(L&3"e\N%_7DTMKCelpK\3eu_%G=m,@SR@2,fk=9f`mk8&Ft4kJ?k)kJ?'^CseA!38.`qYb?$/FfRiFgk"C=W9:1'YBo89%rh\>2*gb>F\st-%]`:>kI!&t%S?P?)_MY=FQHd.sF:!BQ)05%_rom&N_Ceal=i+Q>fLg:GnqH1SNQ-W;=a[bkB&(5&WU$Dkg;!p+#qMmURlZuG2T6Y=%0m1ajjaKiBOjOaYSB$t7B#]rf1[\Xi,Rf]d%9'`6SX_3=E$VNS\s;P5e*j"U@;mK.VRf+W0aQu`\qIn^YaOc+SI<X>W]22tUL6e9%O^4h:pM8cEN/iL4EDBP/*?=Hd"f(+6"q;0p>a9UEl3T:]LT':6SuYbm75I=C6e$/,]N#D$3CJrqe8c9<,ED+6c,cPG(mG:FVJ`4k%3B"`fKrgcTQ0O7k=2YLbeWA$T=%.4gN&qmLUrYOnO)@R#gqelIK-F`C,S=s5WNO]pNf6%:*9G7$@=ujHADG"A^Hk@M1@AQC<qhTI%mi!Hqr+VN#>;V\!j:9a8h7V>o8FBkBQ\+9.2H-0:/n$S,ekFmjFdM?:M)d>[,9*LtV7L.4'lcW27qB+B&61*!"^u?q%$$"c<$u_j%@C]a?,@PNo-BeUA`RO!u10agCl%6._e2:/08&F0i9I:1bWi9LCS\6sNd7,lu+KDuPk:5bBTd@#KU6;R'Y"HB<.Rul]5V6'^He"C.%aZtlB:4U?t9'-FJfBn8u1//mCNYo2W)('mU0L6P7#_Nau/(M`q6!3P&_ZXE;![bef@E$_^NA.jCP@9'I@d7tuRE:$%0L=?&lC+]q%Ni$eA_ZXKsatQ-60QhKEdsp4bSfk,'\o-eR58hTMUEd'^l=R&["!ihcaI9)tWNMV;16f[0))?Wl+M$N.O*P@n=V,cV>9lc-@+uYB%-BoW5@@/ScCn!N=2KuBjl7c@#=RLrAh8-N[@@/ScXI-S9mU4e>0ME5l<_QfeLWDG`Qn06D13Ljk\UMX4<u)9H9jMebi&LX1f1U/>%_5aL#VCqVT`"<k-O`aS];dD-VMDufT,I3a&W]2B$,;M;()l]usF0aT)M'Fc:,$V%LMfZ2jW#J7_3#Zo<qX'?^a!lT`+p\N4l%c4u%Wmkf^:7t$76mYpB>Qli$0f)SPQ)e)k1;2Tkd"=rHC9AJc.eUB9%dk_nlFCZcX%LgVPW2*U*SaC4WmWCq`iAeVUCa`!lC-o_UD#CT%+WID`Mdj!IYDX5QRNYn7DMVr2gi%uh1?o0(`V#A#QN#(>`lK/@HEo:p*qS<q]d9!H=mic)4_DeV/6r_?<&e"JpW3'<WIQr18W5a`%0QjT)G0uncC?gPQbP_bg$%jI2h:/Q+-RVS)*!tr.DPk!WqDC;H#"QOBWp=aZ/GJJM;)aL>SI<WdLN,/0UL>-:j*[;Edl<f9d1YUk%1%&H*eBq,cN&t,rFktQp;+cd/=Llt1-H<`j7Jlg4s7C;#^HCpmD12B_AB.tos2F?7^](RXa#t\4cMsXD'BBuPa+#T!j#S6*MYK0t%T!t*-52"e(B6M="4E[\5]B9FR]B9E7VJ`7lCmcA]Dj_]KRC\OGRd#U2D[5#urkX>g>H+cpI^*U9T\$4>J_%MLm%s@WQ1VWuj(B2n%n^REWEkc>d9]Kb'hoke$VVfOFOG.naj;V6H-VJouD(b1;r?)O;A@Z&0\#q8'>X)@KFktOn7gR!o=`T0L]T_H+2*4,ChT:p*Uu<b<%VI)->in=!gmH7,q`P]/4bDs/Re;^5@S.F(e(e;J')TMS0cDTncNMC2-/`V3rkN3a-'2KH#nP5C?,89NVaUp;u:3N&:jSUdrLgT=u%?.ffVnP5DI?.ffVnP5Ai+VjHV\R3UAOG\7fjSZl#V_E1POG\7fm&1fbh=U$Q;)aM]ErJd03S!R1Q?SqmCZNsjDgM`4k(^DZVR[=O%q?24Xjk\>_'/VK7:6^&V,AlOpMG1[HV2M"6K8!,aAWJAOTm.s.r>tb:'VTb!96q/,G;@c'l/CXt_3/]SighV@XB.#\@d0O0)=M+H%?Sd_2ER_:87,o`^VI)9B\oH5Zo3n/Y,D:$KP@[8531m)*1leGQ1l_*<S1io9)+Q2=69a8J;Es7&SLccf52ODEF6)AP/3-$^hT:q%%"QZ+)I=NLampt\-)$tR9F8_7HY+Qjf3CcKoa`>..*&ZcTA`pH=kN3c7DB*fZW#Op;oGbft0TLm-5)o/J*)5I,)Fqt1?`)^9Ng=[l%Z6R<KSLjG$9]!mS,K/Z6/32lG]&#-JqrrEfoXrXN]<\tj+$9BDddn)Ek*d/L1c';gB'dmgfV+_<6Si5-B#Y>*N#e?I?/.q7=>jg3%%aBqQ?<MR@cEauuY(U\q"EV/C)*Kf4H>$p_d*1\SJU&WdNm-^\RF+AXUB^qaSLcedB(XHpkb4Kpe]m<OS'aS^UPE_V%uAFk=`W$:%kb4Kn6T:cqDFP/mN#oPJ4`iK+kiNk-1OA7so[(kHTpsF3@e3?\hGLm&4`iK+kiNk-1OA7so[(kHTpsF3@e3?\*LY;B2ku.G7M"=6%n@BK#F>J7,B(XHp3U15Kd*:c_R*if*UB`(-SLcc>B(Re$k[Bk+__@j@@7CdFN#m]k4UcClL)E,_1O9mMoJ"MQ@@.WJ(XrsrmN[E_%e#+tmo9>Zj__@j@@7CdFN#m]ki=.Sh(jYcC:!dt*0^b]k5=DMX@bI7h4Ua,m(hWF0MUf>6qm9blahu2`LQNqp_p%b-)*JBaHC/=:%0[8fiRaK#0UPEPQ&(?IY(nc)WUh?.D__e-DBgrW^bk.bM4\RYXQtGtEc,#i\oJ"PR@@GT]1nt9[km9/@LM93gdu5?F)*LYLe!jtA%0[8fiRaK#07qdp1:gZe?M5</o=-d0%fo[.89J_!^B(Re%k[Bq-__e-DBgrWVN#n9F8'?i4Q5Mh:1O</8oWZOFDjf"j18BV97LopV%4'6O1biiK'dDI`7LLir"bD[L.)*KN,H<=eOYfmAkRF/o-UPEDM&'LK<AO[3RN#n9&4Y/C8=D!5qbiiK'dDI`7LLipcbD[L.)*KN,%H<=eOYfo+2B(W=Ok[ET#KB2;<m-[DboaZ.h0"H95]0#l/d!&4=49"m.S>>Nmm/FIbg>9[6k).i:-t_M5R#M?meJ"6=&&i?I'XR<P%\U"M(k*e#k7h<RT4>9i4:qtoNPe?H]o"IK5q[O7AGHgt8Y/KWHm/BX9M:XiA?Lp0Z1NbM(/^k6Bl3H(E>mD>C3l^J+/EqH@WC&BJ%&&g(^'XR9OnTkGpX&oU2W=Fiq#L!(Km"i:=_Ff!sGeJ_U8).)\<jO$jlQ%PNX2\!mN`pVON4jkSIb@Si3Y\pi:s?e/V!JC,`mHK#%L2fCN^M+Z^j(K@odl9;LLeI%=bDoVHcBQ"p,tH`q5M2!W&b_#/[t@t`/ibZp&&g(^'XR9O.=2:mNjutZXCUKfffN;V`'&9PH0QM4%HO%amWc?OIUR%H,D!tcb;)aM]EqIVRl^0B=6MTtM6I2S&atl0eiB(/U'(XO<6MQ4.@r<3+dp*4.oNT>j1?OlW\+5g"\@mM@F'N0=%=Lo+^[s,&u>.MS#YiLU[HO%amnk;j=p(!CYS#qHT[N6]3mpO6Lj7WtKS/67X8mWm.\@mM@kD\.W=E`2RUMcTGj4p.L0!QKL3uZ-7%Yl1l&4F/Dfl_0]JLLR\5,^Accg!MS#=*@op3T:\K_3-#Img4?.IZNiO_0ZD[c5F9=Yh\]iNYoDVXCUK&hE+h[<:f=IR&u-Q[N:=Z%HB@'uK4RP)40L4tYN?hTAfPsRW#OpUo]sNE0TLm-1lV$7qT\peqRQ9\=Yk3b;n8?<<:f=IR&u-Q[N:=ZHB@L,K-a#]h`Fq\cMTi=%CIn)'A,2-LS]igU:Y:r9KP!sqZhY)sbV>UU@(BXdVj/]Y_J29:9]8'81=sb6_/)7KZh7/=eq9df*A!]Gk"=k"9'E-Z2ic,[Tpb^D%1\6B6:007CLM#ZZc-.8uR6NBZmpOh2R6NMaJ*:MDd*;L)CcrK=oh`l`K;@uW/33!-rm8pfTpti[;tpig*-F&ek[sh@brP'$rm8pf%TptjF2tI9On/X&A1@kaJn/X(S1F##goh`l`6SVdUP/;FIm)[Bm\sYd)1OnV#Nn;PRTptjF2tMfBjq$:l+1dk)F>JF1B)XL.3>uN/%0[0HGZ$aD0VOs::%5WJf>7\\h4\.-]_31R%jq#AR+,61J$o>pCB)XL.r5!24'XRHTZ$Zf"Nm.E0R/+WRk@g5C*b5$<Xs)2:%I6+T%FT,LgFDmQBK@tQ!B'Z.XXTo0u'5$A;_os3WR6M+$\qZV;$o<AMB)XL.r*c&YhDFhZC$#rTbTE]B?.7">VO9YB1Okd(r\2T=DjpKS%=a_]1oq@c'#DqP(=E67Cr*c&i__e9,ReaiXo7q&B&(A`EVO?jH1Okd(r\2Up@@I#02"QK:jq#qb+/YGj9QQ5kR6R(hLLO:+MHP@h%>WuS.r\2Up@@I#02!8P?q84uZLLoTYbKM&oRH#kTIop=^Yg!#RRJF`UF1c)H&'N0=QC0rgF,lQS5FBuV@TFS.=acC5^4R_%bKM&o%R6N5YIop=^Yg!#RRJF`Uo7po&d5(<KA`aNHbTE.=5:eV2@ohL'ZL_e#Rrbs\r5#Hu'XRX4bj'gkomo\8hne`@,cgBApO;!:qQ:-R%nu)*W5na)*G/"Y8_=(cUF->I*Yks\.$%<,kS!0qfKAE^6am(rim[*)IeZ:r6ZhdMCl@WX?*A!]'o*<D&4':p;VgFTW-S3RcWnDl`%XM0<u7sY)1c2L'fq[\k?-S3RcWnDm#B)eQnr<LI0,;]3-ea,M"Zi;.NIDYRQTpkq8CA&aLfmf*b^4R_%B)eQnrJ,.]+!doU@*+Pa%J#HuZ6*g=sQ5l=kLMHN)WnDl`XM0<u7sY)1c2N?+oc5SFb4CC'p)g<fIuq%OK4RPur_Ul=6T+`O'%nW`cQB1?J#HuZ6"9`4Xuq34%B)eQnr<J2I4'6NFjnV8$q[_6D5?+uh+9?or99.6q6T+`O'&n,>jN-[P<3uU$c2N=uq&M"H1A_U4lp"%&hncUn4F`.e]_d2(f8)ZU%OCo+;nTV3R0@(c@fn$)6#=9X6%[QMD)+6>D&/+&JY\Yu=+KF+GW+H9$K)E\^Sj?>^"&[;Q6o@%;''+8@jN-[Q<3lZM6%6]A%&012%Lh_)UWnDrb+MWOT7qN"#RN2Y?niKroA9K)qfn$)6#==%?%[J-s)+6>D&Cp,48<D`FZD0O7W+H9$K)?+E*T\/,2*2B"lp++'hncUn%4G0SE#GRY-#RU&H1HQ/ulp+OV"!KsZ_X\,0RN72)jS'PPpR.;%S@eWfJ6ZsXS@dB"p]IL?Ch=O`llSncci3Re5CW:u5QC+(J,8tj%r;Ln)s8L%\^A[:\^AQdlWpT2shu<>]Du]=g(Vfn@qXWtH5Q:H,cX2.oj.ChrQTooomI.gi\"E]cbC=li4hmurjiW)JnW0lb8&,%D%eSi2!fA5j2+7F!;s7]U@5f0.Bs24S<IdsIGrUP0Iqt']'J,K,skJ-LdpjB=*5P]YUp#F@_s7lRCrU1j.s4,i>KtmH6='u!ufBo41%reH"!c+!`Ch+rOl2d_"3p&G$bqsXOCVf.(bL[T]glMEeoqgZ?Wo'HrP4TE"]rqQ"j^3ot0GCTJba.L*Cnu%!7n_]u"j,ZV(f3eRV%s8&?prEklOf;n~>%AI9_PrivateDataEnd