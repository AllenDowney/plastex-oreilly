%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: heightweight3.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Pooja Bajaj
%%CreationDate: 10/13/10
%%BoundingBox: 0 0 275 196
%%HiResBoundingBox: 0 0 274.6485 195.7369
%%CropBox: 0 0 274.6485 195.7369
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 7284 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD08FFA8A87D7D84FD7BFF5252532752A8FF7D7D847D7D7D7E7D7D%7D7E7D7D7D7E7D7D7D7EFD077D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D84%7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7EFD077D7E7D7D7D7E7D7D%7D7E7D7D7D7E7D7D7DA87D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E%7D7D7DFD0BFF7E537D5252A8FF53FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFF%FFA8FFFFA87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A884FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA884A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA87DA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8%FFFF7DA8FD0CFFA8FFA8FFA87DFD0EFF7D7DA8FF7DA8A8FD15FFA8FD15FF%A8FD15FFA8FD07FFA8FD0DFF7DA8FD11FF7DFD07FFA8FD06FF7D7DFD0552%A8FD3FFFA8FD07FFA8FD0EFFA8A8FD10FFA87EFD06FFA9FFA8FD05FF527D%5252275227A8FD10FFA8FFFFFFA8FD2AFFA8FD06FFA8FD0FFF7DA8FD11FF%7DFD0FFFA8FD16FF7D52FFFFA852FD29FFA8FD05FFA8FD10FFA8A8FD10FF%A87DFD04FFA8FFA8FFA8FFA8FFA8FF527D277D7D7D52A8527DFF7D53A82E%5352A8FFFF7D52527D5252A8A85252FD28FFA8FD06FFAFFD10FF7DA9FD11%FF7DFFFFFFA8FFA8FFA8FFA8FFA8FFFF5327275252FD0427A8FF7E7DA852%595284FFFFA8527D7DFFFFFF277DFD41FFA8A8FD10FFA87DFD0EFF7D7D7D%A87D7E7D7D7DA8A8FFA87E7DA87DFFFFFFA8A87DA9FFFFA87EA8FD28FFA8%A8FD05FFA8FD11FF7DFD12FF7DFD0EFF7DA87D7DA9A8A87DA8A87D7DFF7D%7D7DA87D7E7D59597DA8847D52A884537DFD26FFA8FD05FFA8FD12FF84A8%FD10FFA87DFD04FFA8FFA8FFA8FFA8FFA8FF527D2852FD0527A827525227%275227522827F827275227522752F85252A8FD24FFA8A8FD04FFA8FD13FF%7DA8FD11FF7DFD0EFFA852A8A8A87D7D59FD04A85352527DA97EFD047DA8%847D7D7D847DA8A8A8FD3EFFA8A8FD10FFA87EFD1AFF7EFFA8FD25FFA8FF%FFFFA8FD0BFFA8FD19FF7DA8FD11FF7DFD3CFF7D7DA827A88427A87D7D52%7DA87DA8FD06FFA8FD05FFA8FD14FFA8A8FD0CFFA8FFA8FFA87DFD3CFF27%2752272752F8A852FD04275252FD05FFA8A8FD04FFA8FD15FF7DA9FD0BFF%7D527D53FFFF7DFD3BFFA8A8A87D597D7D7DA8A87DA87D7D7DA9FF7D7DFF%FFFFA8FD1AFFA8A8FD0BFF7D275252A8A87DA8FD4AFFA8F827FFFFA8FFFF%FFA8FD16FFA852FD0CFFA87D7D7DFFFF7DFD4BFFA85259FFFFA8FD1BFF7D%A8FD10FFA87EFD50FFA8FD1BFF7DA8FD11FF7DFD4FFFA8FD1CFFA8A8FD10%FFA87EFD4EFFA8FFFFFFA8FD19FF7DA8FD11FF7DFD4EFFA9FFFFA8FD1AFF%A8A8FD10FFA87DFD4EFFA8FFA8FD1BFF7DA9FD11FF7DFD4DFFA8FD1EFFA8%A8FD10FFA87DFD31FF7D7D7D52A95252A8A85252527D537D7D7D527DA8FD%07FFA8A9FFAFFD1CFF7DFD12FF7DFD31FF27FD04522752A87E2727522727%27522727527DFD07FFA8FD1FFF84A8FD10FFA87DFD30FFA8A8FD047D52A8%A8FF7DA87D7D7DA87D7D52A8A8FF7DA8FD04FFA8FFA8FD1DFF7DA8FD11FF%7DFD45FF7D2752FFFFFFA8FFA8FD1EFFA8A8FD10FFA87EFD45FFA8277DFF%FFA8FFA8FD1FFF7DA8FD11FF7DFD4AFFA8A8FD20FFA8A8FD0CFFA8FFA8FF%A87DFD4AFFA8FFA8FD1FFF7DA9FD0BFFA852527DFFFF7DFD49FFA8FFA8FD%20FFA8A8FD0BFF7D275252A8A87DA8FD47FFA8A8A8FD20FFA852FFFFFF7D%527DA8FD05FFA87D7D7DFFFF7DFD49FFA8FD22FF7EA8FFFF2727F87DFD0A%FFA87DFD48FFA8FD23FF7DA8FFFFA97D7EA8FD0BFF7DFD47FFA8FD24FFA8%A8FFFF7D527DFD0BFFA87EFD41FFA8A8FFFFFFA8A8FD24FF7DA8FFFF5252%7DA8FD0BFF7DFD46FFA8A8FD24FFA8A8FFFF7DA87DA8FD0AFFA87DFD45FF%A8A8FD25FF7DA9FFFFFF7DFD0DFF7DFD45FFA8FD26FFA8A8FFFF522759FD%0BFFA87DFD42FFA8FFA8FD27FF7DFFFFFF7D277DFD0CFF7DFD41FFA8FFA8%A8FD27FF84A8FFFF7D5253FD0BFFA87DFD40FFA87DA8A8A8FFA8A8FD24FF%7DA8FFFFA8277DFD0CFF7DFD40FFFD04A8FFFFFFA8FD24FFA8A8FFFF2727%53FD0BFFA87EFD40FFA8FF7DFD29FF7DA8FFFF7D27A8FD0CFF7DFD3FFFA8%FF7DFD2AFFA8A8FFFF28277DFD09FFA8FFA87DFD3CFFA8A8A8FFA8A8FD2A%FF7DA9FFFFFFA8FD08FF527D53FFFF7DFD3DFFA8FFFFA8FD2BFF7EA8FD0B%FF7DF85252A8A87DA8FD3EFFA8A8FD2AFFA852FD0DFFA87E7DFFFF7DFD3F%FFA8FD2CFFA8A8FD10FFA87DFD3EFF7DA8FFFFA8FD29FF7DA8FD11FF7DFD%3DFF7DA87DFFFFA8A8FD28FFA8A8FD10FFA87EFD3AFFA8FFFD05A8FFA8FD%29FF7DA8FD11FF7DFD3BFF7D7EFFFFA8A8FD2BFFA8A8FD10FFA87DFD38FF%A8FFA87D52A8A87E7DFD2BFF7DA9FD11FF7DFD39FFA87D7DA9FFFFA8A8FD%2BFFA8A8FD10FFA87DFD39FFA87DFFA8FD2FFF7DFD12FF7DFD39FFA8A8AF%A884FD2EFF84A8FD10FFA87DFD37FFA8A8FFA8FFA8A8FD2EFF7DA8FD11FF%7DFD37FFA8FFA8FD32FFA8A8FD10FFA87EFD36FFA8FFA8A8A8FD31FF7DA8%FD11FF7DFD35FFA8FFA8FD34FFA8A8FD0CFFA8FFA8FFA87DFD34FF7DFFA8%FD35FF7DA9FD0BFFA853527DFFFF7DFD33FFA8FD38FF7EA8FD0BFFA85252%52A8A87DA8FD31FFA8FFA9FD36FFA852FD0CFFFD047DFFFF7DFD0EFF7D53%FFFFFFA8FFA8A8A8FD06FF7D7DA8A8A8FD0EFFA8FD3AFFA8A8FD10FFA87D%FD0EFF7D52522727527DA8277D52522752527D7D52275252FD0CFFA8A8FF%FFFFA8FD37FF7DA8FD11FF7DFD0EFFA97DA8277D527DA87DA852275252A8%7D7D527D527DFD0BFFA8A8FFFFFFA8FD38FFA8A8FD10FFA87EFD16FFA8FF%AFFFA8FFFFFFA8FFFFFFA8FFA8FD07FFA8A8A8FFFFFFA8FD39FF7DA8FD11%FF7DFD23FF52277DFD05FFA8A8FD3FFFA8A8FD10FFA87DFD23FF7DF87DFD%04FFA8A8FD04FFA8FD3BFF7DA9FD11FF7DFD29FFA8FD42FFA8A8FD10FFA8%7DFD26FFA8A8A8FD07FFA8FD3BFF7DFD12FF7DFD05FFA8A8A8FFA9FFFFA8%A8FFFFFFA8FD13FFA8FD09FFA8FD3CFF84A8FD10FFA87DFD05FFA8275227%52275228525252272752FD0FFFA8A8A8FD09FFA8FD3DFF7DA8FD11FF7DFD%05FFA87D52522752527D52595253527DFD0EFFA8FD4AFFA8A8FD10FFA87E%FD08FFA8FFFFFFA8FFA8FD05FF7D7DA8FD05FFFD05A8FD4BFF7DA8FD11FF%7DFD14FF27F8FD04FFA9A8FFA8FD4EFFA8A8FD0EFFA8FFA87DFD14FF597D%A8A8A8FFA8FD11FFA8FD13FFA8FD15FFA8FD15FF7DA8FD0DFF7D52FFFF52%FFA8FFA8FFA8FFA8FFA8FFFD0BA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8A87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA87DA8FD0DFF7D27A8FFFD147D7E7D7E7D7D7D7E7D%7D7D7E7D7D7D7E7D7D7D7E7D7D7DA87D7D7DA87D7D7D7E7D7D7D7E7D7D7D%7E7D7D7D7E7D7D7DA87D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7DA87D%7D7DA87D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7DFD0EFFA87DFD70FF%A8FD0CFFA8FFFFFF7D527DFD12FFA8527D52A8FD11FF5952535252A8FD0F%FFA8527D525252A8FD0FFF7E52277D5952A8FD0FFF7D522752527DFD0EFF%7D527DFD12FF8452527D7DFD11FF52537D5252FD11FF527D525252A9FD0F%FFA85253527D52FD10FFA85252277D52FD0EFFA87DA8FD13FF7DA853FD12%FFA8A87D7D7DFD11FFA8A87D7D7DFD10FF7E7D7DA8A87DFD10FFFD057DA8%FDC8FFA8FD74FFA87D7DA87D7D7D527D7DA87D7D7D537D7DA9FD6EFFA828%52F8272752F85227A87D7D2752277DA8FD6EFFA8FFA87D7D7D2753A8A8A8%7D7D7DA8A852A9FD73FFA87DA8FFFFFF7DFD04FFA8A8FD30FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:56:56+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-13T08:21:18+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-13T08:21:18+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>184</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXimv8Alb86Ht7i&#xA;LTr2/lvuV+NLvzfRRRxcr65dXu4kkjST17NoUgCxEQsOiYqzSzn816L5DiMlYtWk1NLe1XU2a+eC&#xA;0vtWENutw6TkzPDazrWk53H2j1Kqciz89UFdX0snuRplwP8Au4Yq39T88/8AV30z/uGXH/Zfirvq&#xA;fnn/AKu+mf8AcMuP+y/FUBrGqa3olulzrXmnQdMt5H9OOa8s5LdGcgtxDSaioLUBNMVRDP5rUWxb&#xA;zBo6i8YJZk6fMPWYo0gWP/ch8ZKIzUXsCcVdaRfmBL63rajpkPpyskddNuDzRaUf/e/viqv9T88/&#xA;9XfTP+4Zcf8AZfirvqfnn/q76Z/3DLj/ALL8Vd9T88/9XfTP+4Zcf9l+Ku+p+ef+rvpn/cMuP+y/&#xA;FVC7i/MCL0fR1HTJvUlVJKabcDgjVq/+9/bFVf6n55/6u+mf9wy4/wCy/FXfU/PP/V30z/uGXH/Z&#xA;firvqfnn/q76Z/3DLj/svxV31Pzz/wBXfTP+4Zcf9l+Ku+p+ef8Aq76Z/wBwy4/7L8VULOH8wJoW&#xA;ebUdMgcSyoEOm3BqkcrIj/73/toob6cVV/qfnn/q76Z/3DLj/svxV31Pzz/1d9M/7hlx/wBl+Ku+&#xA;p+ef+rvpn/cMuP8AsvxV31Pzz/1d9M/7hlx/2X4qg7tvP8N9Y2sWoabKLp5PWk/RtwBFFHGzcz/p&#xA;+9ZOCU/ysVRn1Pzz/wBXfTP+4Zcf9l+KqTw+eRMkK6rpjO27/wC424+FN/iP+n9zsB3+g4qq/U/P&#xA;P/V30z/uGXH/AGX4q76n55/6u+mf9wy4/wCy/FWms/PdDx1jSwexOmXBH/dQGKq3lLUtS1DRjPqZ&#xA;ha9iu760le3jaKJhaXk1sjrG7zMvJIgxHM74qnGKuxV2KpF5z/449v8A9tPSf+6nbYqnuKqF7aJd&#xA;27QuSAaHsRt4qdmHsf14qqxRiKJIwSQihQWNSQBTc9zirEfP6R/pDytMmr2+k6nFqbLpRu7WW8hn&#xA;nmsriD0WWKW2KkxysysZAKgDvTFXiWnflb+Xt3FFq1j+Y2nCxisphCt1axJIYY4205LieOW4i9T0&#xA;G5LG5iArTr3Vepflprfkfyt5U0/Q/wDFVhfo5lurZ41+qiGC6il1NRLC8szW6LAHdTKy/CPHqqza&#xA;980+XrLUpNMur+KG/hspdUmgYmsdlCypJO9BRVDNQV670rQ0VS/S/wAxvKeqXlvZWE9zNd3BdRB9&#xA;RvVeP0+PIzhoV9Bf3i0aXiDUUxVNtX17R9HW0bU7pLX69dQ2NmHrylubh+EUSKASSx+4VJ2BOKsN&#xA;1z85dAtbDT73R4m1SC8vo7KaWRbi0jiSSH1xIHkgPqM0bRtFEvxSq4ZKjFUd58/M3R/KscSRyWt/&#xA;qLXSW02mfW0iuUDoHqsSrNIz/vI6LxA+MFmVd8VZnirsVdirsVdirsVdirsVdirsVQVjSa5urylA&#xA;W+rR12qkDMCaHv6jP8xTFUVPMsMTSMCwXoq9WJ2CitNydhiqy2haMO8lDNK3OShJANAAorTZQKdN&#xA;+vfFVbFXYq7FUi8mf8ce4/7aerf91O5xVPcVdirsVSLzn/xx7f8A7aek/wDdTtsVTm5SB4GWeMSx&#xA;bcoynqVoaj4QDXf2xVB/UtFqR9Qj2IX/AHmPU/7Dp74q0LLRDT/QI96j/eY9v9hirEvzO8u6F5jf&#xA;yroepLcxxXuoSizns5Vt5LeWLTrqZJQGjk3T0/hHw0ah7cSq8ahl/J600y3Mq65paSGHU7K0in03&#xA;6ut9KlvfFrea59P4raK+iSk/GNl6K774VTT8vbD8sD5l01vK9z5nlvbeZLLRZZJ7CS2iF1Z3kT3c&#xA;KSkx8AltNI4ZC3NQBGd0IVk2pfmn5R1ma+1yCXU7a80iS/0RJtIkspZPqIRdQmvSLkcEV49Lk4je&#xA;SgNF5FSFWNaHqv5a2935fult/MVxe2Uf6TsWuItGM8sMkkfoSTXEXGT9/POqf3iuxP774N8Kp/5i&#xA;/OPyRcjTdDOk6zcc9XtJZIg9u0y3X1lrqCIGaeVXV7yBoSnNVVVbiwT0+QVd5H/MzyH5a0W2ttKs&#xA;NauG1W6gghjuxY+uALOwgsuXpyxqIfq89tGrbtWpk+I1KqC8s/m55S/SKeepNN1c6v5mW3sJdPt3&#xA;tJ7dXlnmt7GBWk+qPyJ0+d1boOTc2/u6KvZ/Lev2uv6PFqltFLBHI80L29wFWWOW2meCaNwjSJVZ&#xA;ImHwsR4HFUzxV2KuxV2KuxV2KuxV2KobUbh4LR2jNJ3pFBUVHqyHglR4BjU+2KqttAlvbxwR14RK&#xA;EUk1JCim58cVU0JuJ/U/494iRH/lSAkM3yXoPpPgcVRGKuxV2KuxVIvJn/HHuP8Atp6t/wB1O5xV&#xA;PcVdirsVSLzn/wAce3/7aek/91O2xVPcVdirsVQGseX9B1u3S21rTbXU7eN/UjhvII7hFcAryCyK&#xA;wDUJFcVQc3kfyVNbi2m8v6bLbhQghezgZOKrGgXiUpQLbxD5Iv8AKMVX2Xk3yhYah+kbHQ9PtdQL&#xA;GQ3kFrDHNzZWVm9RVDVKuwJr0J8cVQuq/l95Q1SbSpLrTLYx6QyG2thBD6LJDDNDBDIjIQYoBcu0&#xA;SinFtxiqnoH5beSdD0SHR7XSLSW3itzayyTW8DSzo6oshnYRqJGl9JPUqPioK9MVRaeRfJMckEie&#xA;XtNSS1cSWrrZ24MTqqKrRkJ8JCwoAR2VfAYq6byN5JnEKzeX9NlFsQ1uHs4GEbKiRgpVPhISFFFO&#xA;yqOwxVuLyR5LiNsYtA02M2W1mVtIF9ECT1f3VE+D958fw/tb9cVTW1tLW0i9G1hjgi5PJ6cShF5y&#xA;uZJGooAq7sWY9ya4qq4q7FXYq8nm/wCciPLh0nWbyw0+bUbnS5rxYra3mhpLbWiK31t5HZfTifmB&#xA;xAaQfyGhxVHQfndpt75l8s6NpulXE8fmIkfWJXjiaAGwttRVvT+MOPRvV5fGCCGpy2qqlU//ADkf&#xA;odtqiafPpUzSpqGpafeLFKheP6gG9CRRIIlf62yFUBdQCGFTxxVlvk381PL/AJs1H6jp1tdwu1qt&#xA;5FLcJEqOhhtZnVfTlkYNGuoQ8uSgVPwlqHFWZYqg2rPqSKCDFZqWf/jNIKKKj+WMtUH+ZTiqrcyO&#xA;WWCL+9fdm/kjr8TfPsvv7A4qqxxpHGsaCiIAqjwA2GKrsVdirsVdiqReTP8Ajj3H/bT1b/up3OKp&#xA;7irsVeXfmj+WPmjzR5kt9V0a9trQR6dcWAknd1eJriK4hd1VIpCwZLn9mWOjKGbnxUBVMjoGoaH+&#xA;X9rpr/Vra6GtWs8MEAaW1tluddjnigiHG2Zo4UkVB8KbDYKKAKs8gE4hQTuskwA9R0UopPchSzkD&#xA;/ZHFV+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KtMqupVgGVhRlO4IPUEYqk955L8nXsMMN7oOnXMN&#xA;vHFDbxTWkEixxW4YQoishCrGJH4AbLyNOpxVqy8keS7Ewmy0DTbU20hntzDaQR+nK3HlInFBxY+k&#xA;lWG/wjwGKrp/Jnk+cSifQtPlEzFpg9pA3NiZCS1U3J+sS9f52/mOKtweV9D022lGiaZZ6dc+jJHB&#xA;JawRwFfUVFIBjVaA+jHX/VXwGKsP/J/y/wDmN5c0jVT5/wBWOpTNIstrKbiS59OJEPMVdQRvvQYq&#xA;zqzDWti9xdLxuJaz3KruebAUQUJ5FVAQeNMVRFvHIoaSX+9koWUbhdqBFPUgfrqdumKquKuxV2Ku&#xA;xVTuFuGhcW7pHMR8DyIZFB91DRk/8EMVSPyKJhoUomZXmGpar6jopRS36TuKkKWcge3I4qyDFXYq&#xA;7FUi85/8ce3/AO2npP8A3U7bFU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVBX&#xA;wFxcQWY3UMtxceyRtyQbdC0ijr1UNiqoB9YuORNbeE/Cu9GlB3J8QlNvf3AxVE4q7FXYq7FXYq7F&#xA;Ui8mf8ce4/7aerf91O5xVPcVdirsVSLzn/xx7f8A7aek/wDdTtsVT3FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq8x81ecvzJsPNt6ukaFcXHlyCBbKG5Nq06fXiFuZLr04mS6lhjgLJxReLyLxV+Z44qxW88&#xA;/fndLp2m6fZ6Vdx6mtpcTX98dKnq7rokNxbgs8f1YO+oSzIUUVDIqkdQ6rJPPnmH82NOutKufLtp&#xA;LqFi9lb32oRpZmrG0Zjd24jZWljluluIuCMeQ9M8d+WKpPbeePz4jvINJbR4JZLdEivdTn0u8KNM&#xA;L9LIkNFNDDJWB/rheIBOJKADgxxVfbfmN+dl/wCYdL0uDy5HYW97bQyXt9d6XqDRW0xsY7iQGQTx&#xA;xsGnZolXkGQijVPVV6fo3mOKXRdHuNaaLStW1G0t55tNncRSJNLGpeIJIVeqOxWlK4qnTMFBZiAo&#xA;FST0AxVKbNpXU3HLhd6m3OOtC0dsgolAeXRTy32Dv74qmkUUcUaxxjiiiijFV2KuxV2KuxV2KuxV&#xA;IvJn/HHuP+2nq3/dTucVT3FXYq7FUi85/wDHHt/+2npP/dTtsVT3FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FWB+e/yg0Xzj5n0TzBe3tzbXOhsjQQw+nwfhKJhz5Kx6im2Kss1aRXCWRK+n&#xA;MGe85b0tkH7zb/KNE+kntiqKto2AaaT+9mozD+UAfCgqT9n9dT3xVWxV2KuxV2KuxV2KuxVIvJn/&#xA;ABx7j/tp6t/3U7nFWIab+fOi3ut2ekyeW9fsHvblrSO8vLSCK1Ekc62spMwnZSsc7rG3GvxEL1IG&#xA;KvTMVeXfmt+V/mfzbrkF7pWoW9tDHp81mvrkhoJZRIGmiCwyPWRXCsUliI4ivMfDiqZHy9f6L+X9&#xA;tpchgtbj9NWs0UVp+8t7VLrXY54oIeSQ8kgSVUX4F6dANsVZ5AkqQoksnqyqAHkoF5HxoOmKr8Vd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirTMqKWYhVUVZjsAB3OKpTpqfXZ5L+Qco5CDGCKUV&#xA;D+6QjYkp8TmvR2I6rsqm+KuxV2KuxV2KuxV2Kqdwk0kDpDL6MrCiS8Q3E+PE7HFUj8ipImhSrK/q&#xA;yLqWqh5KBeRGp3FTQdK4q8z8kTXtx51k1TX/AC3BCl9IHtRa6HfLcpdS3CyJLe3dxpVojNAGI9UT&#xA;IABurt8eKvbMVdiqRec/+OPb/wDbT0n/ALqdtiqe4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FUK9vdG/jmWeluq0eHxNDt4bkg16jjQbMcVQmsTG4nh0iP7dx+8uaCvGBTuDsRR/s7ihFR3GKp&#xA;nFFHFGscY4ooooxVdirsVdirsVdirsVdirsVSLyZ/wAce4/7aerf91O5xVgHkG+83H81tXtNWnv/&#xA;AKiy6o1pb3ZlWMxR3sPoMkLnhxVJTwmT4XB4Cnp7qvXMVdiqRec/+OPb/wDbT0n/ALqdtiqe4q7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWP3WvQPfShbloE0+rzoASWCsKgLT4mcbKng6sN6YV&#xA;RVgUsY5LvUmWK9v39WZftemqgKqErUcYloGb7Nd++BU2xV2KuxV2KuxV2KuxV2KuxVIvJn/HHuP+&#xA;2nq3/dTucVeH/kNJa3n5veYNROrWGqXc1rdSvLpsPpxMbm7jlY87h0u34bL/AHboB/uzl1VfRuKu&#xA;xVIvOf8Axx7f/tp6T/3U7bFU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVDTXNvI0tmjq1yU&#xA;I9Msy7lenNehoQdtwN8VY/o2nG5viXjAtbGUmSWorNcqaBSqVQLBTcISOdP2kYYUMlmt4JwomjWQ&#xA;KeShhWhwJVMVdirsVdirsVdirsVdirsVSLyZ/wAce4/7aerf91O5xVPcVdirzj8zfy481eatYsb3&#xA;TNbisrS0s761WykjkHGW9sri2Nwskb0ZqzRijJ8ABZW6qyqIPl290b8v7XSp2itJjrVrNHFYkPDa&#xA;pda7HPFBAZIowUgSUItYgNvsgbYqzyCN44UjeVpmUANK4UMx8TwCLX5AYqvxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KpJ5g1ay050VXji1K7UokxAJiiG7zuN/gQD5E0BoNwqmdtDaafawWqMEjSkU&#xA;XNhyZvcn7Tt1PicVRGKuxV2KuxV2KuxV2KuxV2KqdxE8sLxpM8DsKCaMIWX3HNXX71OKpH5FjaPQ&#xA;pUeRpmXUtVDSvxDMRqdx8R4BVqfYDFWQYq7FXYqkXnP/AI49v/209J/7qdtiqe4q7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FUq8xaydK02W8j4OYCvqox+L4tkVVBBLO/FVHXfYHpirDZjY6npVx5ill&#xA;Zb2eQMUH93EsasIVRyhLUI4j4SryVWnUgoZNZ2Fhrun2ks4dVs2McaIWjfihAKSoxdkPwio5cqd9&#xA;6YpZDgV2KuxV2KuxV2KuxV2KuxV2KpF5M/449x/209W/7qdziqe4q7FXYqkXnP8A449v/wBtPSf+&#xA;6nbYqnuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrZJI4o2kkYJGgLO7EBVUCpJJ6AYqwa/wBLGp+Y&#xA;LeecSjT5Wf0rOvFzzHByytvWVJuRVhVY67rVlwoZB5dMk1vdQ3FglrFyKmLZg3KoZW6196+PTAlN&#xA;ra1t7WBYLeMRRJ9lF2G+KquKuxV2KuxV2KuxV2KuxV2KuxVIvJn/ABx7j/tp6t/3U7nFU9xV2Kux&#xA;VIvOf/HHt/8Atp6T/wB1O2xVPcVdirsVdirsVdirsVdirsVdirsVdirTMqKWYhVUVZjsAB3OKpLO&#xA;0uqcHA42DMBaI4/vn+0JnU0rGgUsqn7XXwwqr6fogg9OSeZ5poyTUtUHcmprvXkzNt/NTcAYFTTF&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYqkXkz/jj3H/bT1b/up3OKp7irsVeYfmp+WvmHzfq8clilhFap&#xA;YyW8WoSXM8V9DcP6gDRgQToIhzUuI2jeT7LPxAGKpgfLt7o35f2ulTtFaTHWrWaOKxIeG1S612Oe&#xA;KCAyRRgpAkoRaxAbfZA2xVnkEbxwpG8rTMoAaVwoZj4ngEWvyAxVfirsVSLzZ5rHly2tbh9LvNSj&#xA;uriG0X6kbUFJrmVIYFf6zPb/AN5JIFBWtP2qDfFUkj/Or8t3cxDU3+tqD6lmtrdSzqyiMunpxROW&#xA;ZRMtQte56K1FUz1Pz/o1heaXaiG5vG1yOOTR5LVEeO55uoZUcuoBjjkEzc6D06sCeJAVQA/OT8t6&#xA;gHVytY5pgWtrtR6dvbfXHepiAobb97H/AL8XdOVcVV9V/MvRNPEcgtb25tvqcepXtxHCIhZ2UrlE&#xA;nuY7l4JlUlHPFUZqKx47Yq15W/NDyx5m1K103TPrBu7nTxqjCSIokURW3YRvJUoZeF5G3FC1B1I2&#xA;qqy7FXYqtlmihieWZ1jijBZ5HIVVUbkknYDFUrKvqQM92DBpMfxpBIOLTAb85gfsx9wh3/m/lxVH&#xA;28fJ2uZAeb1EYYEFY+wAPTlTke/Y9BiqvirsVdirsVdirsVdirsVdirsVdirsVU7iJ5YXjSZ4HYU&#xA;E0YQsvuOauv3qcVSPyLG0ehSo8jTMupaqGlfiGYjU7j4jwCrU+wGKsgxV2KuxVIvOf8Axx7f/tp6&#xA;T/3U7bFU9xV2KuxVCalpVhqcMUN9F60UM8F1GvJlpNayrNC/wkfZkRWp0PfbFWNz/lJ+X013eXra&#xA;UUvL+Rprm6iuLqKUyPLJOzJJHKrRlnnevAioPH7O2KprZ+S/KdktkljpVvZx6fO91ax26CFBPLA1&#xA;tJIyx8VdmhkZSXr99MVY1B+Qv5T26lbfQvRUiYMI7q8UEXEbQyBqTCoMbsu/QE0pXFU6ufy38kXE&#xA;4nOlRwuWLzi1aS2S4ZnEjfWkgaNLmrqGImDb4ql8/lTyj5F03VPNWi6QfrulaTMscC3E9JIbWCMi&#xA;IK7SorOtnEhk4FvhFa0xVf8AlT+YU3nzyw+tzaW2julzJbfVHlMxIjVG58jHD159OOKspvdQgtOC&#xA;MGluJaiG2jHKRyPAVAA8WYhR3IxVQisJ7mVLnUirNGQ0Fmm8UTA1DEn+8kH8xFB+yAakqq8vG4mM&#xA;H2oo6NMOxbYqn/GxHy7HFUTirsVdirsVdirsVdirsVdirsVdirsVdirsVSLyZ/xx7j/tp6t/3U7n&#xA;FU9xV2KuxVIvOf8Axx7f/tp6T/3U7bFU9xVifnT8zPLfk65ht9YE4e4s7y+hMSoystiqtJHVnSkj&#xA;h/gB2J2qDSqqGn/Ob8tbeVYrjWBC7uUj5290of8AeJEHQmKjxs0y8ZF+FtyCQrUVU7L86fy/uUq9&#xA;5Pay+pJH6M9pcq/COaSA3Hwxsv1fnC1Za8F6OVaqhVMPLH5neSfM9/8Ao/RL97i69E3CpJa3VuGi&#xA;URksrzxRK3w3EbUBrxYN0NcVZTirsVdiqjdXlraR+rcyrEhPFSxpyY9FUdWY9gN8VQnr6le7WyGy&#xA;tz1uZl/esP8AiuE/Z26NJ07ocVRNnp9taczGC0stDNO5LyORWnJjvtU0HQdgBiq+4nMSqqrzlkPG&#xA;JOxNK1J7AAVP9aDFV0EQiiWMGvEbsepPdjTuTucVX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FU&#xA;i8mf8ce4/wC2nq3/AHU7nFU9xV2KuxVIvOhA0e3/AO2ppP8A3U7bFU9xVI/Mvkjyt5mVl12wW+Vr&#xA;d7Qh3kX9zLLFMyjgy0PqW8bcuopseuKseX8iPylWOaNfL0QWeV55f3txu8iPGd/UqF4yNRR8IrUA&#xA;HFUbJ+Un5fy3Ut1JprvPNI0sjm7uzX1JXmeKnq09B5Zndof7ssalcVTDQ/IHlHQruG70qwFtcW8R&#xA;gif1Zn4xmG3gK0d2H91ZQr/sfEmqrEPyr/MTztrd5r8HnjTrbRP0e8C6aiRywPMHMvqVWaWUuV4R&#xA;04gfa9xir0H9JtJ/vNZ3E3izJ6Cg9q+uY2p/qqcVa9HWJ/72eOzTuluPVk26fvZVC79x6X04qq2u&#xA;mWdtIZUQvcEcTcSsZJSP5ebksF/yRtiqKxVbJLHGOUjqik0qxAFfpxVStw8jNPICtarEh2ISvU96&#xA;t1+4da4qr4q7FXYq7FWldHFUYMASCQa7qaEfQRTFW8VdirsVdirTOilQzAFzRATSpoTQfQCcVbxV&#xA;2KuxV2KuxVIvJZB0e4/7amrf91O5xVPcVdiqVebNJutY8raxpNpP9WutQsri1guDUCOSaJkVjSpo&#xA;C3bfwxViU2kad5d/LuPTfMN42kx/pFru2GkRtdG2kOotqNrb2kf1aQyJAFVafV6cFPwqvRVPrTQ9&#xA;SurWG5t/OGqTW86LLDMselFXRwGVgRY9CDXFVX/DWs/9TXqv/IrS/wDshxVx8s6yQR/izVd/+K9L&#xA;/wCyHFUL/gi+/wCps1v/AJG2nb/o2xVTuPJYhgkuLvzHqMscKmR5bmPTZyqoCxo0lm7ADfYYqkOj&#xA;an5bieytLDzZrFqdZf1rSKTToLdWMp4o7erpqCJZWFIi/FXOyVwqy7/Dusf9TRqf/IvTP+yLArv8&#xA;O6x/1NGp/wDIvTP+yLFXf4d1j/qaNT/5F6Z/2RYq7/Dusf8AU0an/wAi9M/7IsVYx5ivtAs7iaz1&#xA;XzrqbXWmPbTzWsFvZ3EyPNzMA9O3sJHZmWJ24AE8RyI474qjvL99Z+YpLlNG866ndm04+sy29gqF&#xA;XeSNXjd7BVkT1IJE5ISOSsK1BxVOf8O6x/1NGp/8i9M/7IsVd/h3WP8AqaNT/wCRemf9kWKu/wAO&#xA;6x/1NGp/8i9M/wCyLFUBr0f6A0m51fWPOeoWWm2i87i4kj02igkAAAWRLMxICqBUnYb4qkVxrvl/&#xA;RPrlvN5x1qCO0upY7qT9HwvCLiQPdzKsw01o34Jzlk4sQiglqKMVZZ/h3WP+po1P/kXpn/ZFirv8&#xA;O6x/1NGp/wDIvTP+yLFXf4d1j/qaNT/5F6Z/2RYq7/Dusf8AU0an/wAi9M/7IsVYbq/mnyna6j9X&#xA;1DzxqyXWmzSlaWVuy+pDFIlwyOmnFJVgjMnrFSyx0JfjTFU+0iWPV72/stP846pNc6Y/p3iG3sEC&#xA;t6kkNVZ7BVkX1beROSEjkjLWoOKpp/h3WP8AqaNT/wCRemf9kWKu/wAO6x/1NGp/8i9M/wCyLFXf&#xA;4d1j/qaNT/5F6Z/2RYqlnmAHQbFbvU/N+rwxSSCGL0bWxuJXkYFuMcMOnyyOeKsxopoASdhiqX+W&#xA;vzA/L3TNEiit9Yu720mu7pl1O5s7kLPNNdSy3MoljtoYGijmdg8iD002DEVFVXoGKuxV2KpP5o8s&#xA;WvmGygt5bm4sZrWYXNpe2hjE0UoR4iyeqk0fxRyuhqh2PjviqP0vTbTS9MtNNsk9OzsYY7a2j68Y&#xA;oUCIv0KoxVE4q7FXYqo31nDe2VxZzV9G5jeGSlK8ZFKmla9jirBtE/JXyvo9xazWt3eFYJop5oP9&#xA;FjhuGtpfXthJFBbxIiwTVkQQhKsSW5VOKs/xV2KuxV2KsX8x/l7pWuam+qyXl3Zal6VvFBdWrRBo&#xA;fqpueLxiWKVeTpfSo3IEcTsAd8Vd5K/LrQPJ5uBpLTmKaNIIYZmRlggjmnuBFFxRG4+tdyt8ZY70&#xA;rQABVlGKuxV2Kpf5h0O017QtQ0S8aRLTUreS1neIhZAkqlGKFgwBodqg4qw3WPyQ8q6rq9/qk13e&#xA;QXGotKZxb/VIxxuYZLedSRb85BJDPIlZWZkDfuymKvQlVVUKoAUCgA2AAxV2KuxV2KsA1j8mdF1f&#xA;U9R1C+1fU5ZdSd2kUtaERRywS2rwQu1s0qQm3uJI+HPblyHx/FirIPLvkrStA1LUtQs5JpJdTYlk&#xA;lMZSFDc3F2Y4eCI3Ez3sr/GWO9K0AAVT/FXYq7FUj84eU4fNGlLps+oXmnwCVZZTZNCDKqgj0pln&#xA;injeJuVWQrQ0FcVYlF+QvlKO4uZ1vb0SXoeK8Ma2MImtpnZ57eRYbWMMkzMObU9SiqA4CgYq9JxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVgH5mfl9rvmqV30zUxpwOjajppAKfvZbx7do0l5wz0&#xA;h/cNzaPjINuJ64q861jyH+cmkXDa7qWrtq8SGe3FnpdxqxuXS5khcOZIlmngVmgBZLZeCkAU4M5U&#xA;qnn5dflP530mTyvqGsagZ3sX+u6jaS315JS4uBqQuGSNg0QdlvbbnSgZkf8Amq4VA2n5ZfmHqGh6&#xA;cNG1OXQrVLNlW3F7qOmSQ3ItJIvTayhjWJgb8i4aYnk4J+0tKqs1/L3y3q2ieZtWi1F5btxaxoup&#xA;y+vKZYzfXstvE11Ooad4beWNW+JuOwr0xV6DirsVdirsVdirsVdirsVdirsVdirsVf/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:063AF29051D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:D2BE730BD83411DFA0C098C638D1EF33</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -195.737 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 195.737 li
274.648 195.737 li
274.648 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
267.838 174.324 mo
264.688 174.324 li
32.3882 174.324 mo
35.5381 174.324 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle -0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437917 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B854D00D> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SWOETP+Helvetica /Helvetica findfont ct_VMDictPut/SWOETP+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]SWOETP+Helvetica nfSWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf22.3491 176.662 mo( )sh24.2944 176.662 mo(0)sh267.838 140.173 mo
264.688 140.173 li
32.3882 140.173 mo
35.5381 140.173 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSWOETP+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendSWOETP+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/SWOETP+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two 205{/.notdef}rp]SWOETP+Helvetica nfSWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf18.4585 142.513 mo( 20)[1.9458 3.89209 0 ]xsh267.838 106.074 mo
264.688 106.074 li
32.3882 106.074 mo
35.5381 106.074 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSWOETP+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendSWOETP+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/SWOETP+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four 203{/.notdef}rp]SWOETP+Helvetica nfSWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf18.4585 108.412 mo( 40)[1.9458 3.89209 0 ]xsh267.838 71.9238 mo
264.688 71.9238 li
32.3882 71.9238 mo
35.5381 71.9238 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSWOETP+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendSWOETP+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/SWOETP+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]SWOETP+Helvetica nfSWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf18.4585 74.2554 mo( 60)[1.9458 3.89209 0 ]xsh267.838 37.8237 mo
264.688 37.8237 li
32.3882 37.8237 mo
35.5381 37.8237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSWOETP+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendSWOETP+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/SWOETP+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]SWOETP+Helvetica nfSWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf18.4585 40.1616 mo( 80)[1.9458 3.89209 0 ]xsh267.838 3.67383 mo
264.688 3.67383 li
32.3882 3.67383 mo
35.5381 3.67383 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSWOETP+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendSWOETP+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/SWOETP+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]SWOETP+Helvetica nfSWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf14.5601 6.01318 mo( 100)[1.9458 3.89209 3.89209 0 ]xsh32.3882 3.67383 mo
32.3882 6.82373 li
32.3882 174.324 mo
32.3882 171.173 li
@
SWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf29.4663 183.654 mo( )sh31.4116 183.654 mo(0)sh79.4883 3.67383 mo
79.4883 6.82373 li
79.4883 174.324 mo
79.4883 171.173 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSWOETP+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendSWOETP+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/SWOETP+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]SWOETP+Helvetica nfSWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf74.6147 183.654 mo( 50)[1.9458 3.89209 0 ]xsh126.588 3.67383 mo
126.588 6.82373 li
126.588 174.324 mo
126.588 171.173 li
@
SWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf119.779 183.654 mo( 100)[1.9458 3.89209 3.89209 0 ]xsh173.639 3.67383 mo
173.639 6.82373 li
173.639 174.324 mo
173.639 171.173 li
@
SWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf166.826 183.654 mo( 150)[1.94629 3.8916 3.8916 0 ]xsh220.738 3.67383 mo
220.738 6.82373 li
220.738 174.324 mo
220.738 171.173 li
@
SWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf213.919 183.654 mo( 200)[1.94629 3.8916 3.8916 0 ]xsh267.838 3.67383 mo
267.838 6.82373 li
267.838 174.324 mo
267.838 171.173 li
@
SWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf261.021 183.654 mo( 250)[1.94629 3.8916 3.8916 0 ]xsh32.3882 3.67383 mo
32.3882 174.324 li
267.838 174.324 li
267.838 3.67383 li
32.3882 3.67383 li
32.3882 3.67383 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSWOETP+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/M <1C60D8A8C9B6B41CC7E91641C452E31A1FF57E5819E293AAC22FFE6A989DD096F29F83DBBFB131D21D2F3E6C6DAB9DE434C529570BC24A625218D657C1F03933B1EA3B0DCFDA8AB35AF4BBEE90CCC241F177D656ECD11D47536184> |-/bracketleft <1C60D8A8C9B854D0F835C55B2E743BE25265705DE0C97B5E1B942521765204709A991D12C4DE66727FB258159B> |-/bracketright <1C60D8A8C9B854D0F835C55B2E743BE26F3D6A972685289133E23CA8F69163936F0CF859A8EFDD615099CD0BEA7C> |-/a <1C60D8A8C9B7EF32A0B922DB529D708010F72F0E62F6CA36E98277AFD8C536E6814BFC8F2509E1B2B1B62A6BDA8D1A6ED67728D80620B28FE439D2F57DCEC5483105FEA93379701773DF23A415938C688874994BCC9880105CE27AC2270A13FA38E952045C5E8C52BEF83397E5FBEEFAB993BE33E385A5E36620F7427AB5E4423C6A4ED6DE24A89F54E52C8FAD8A45FAD4B8F6CFD50EB7D35BF120B079B932E0EE2F7685462C7EC6E9B818F0F9E1F7814D04F2B9AAFA6704B8B745452B73181F38CB34F1645F> |-/g <1C60D8A8C9B7EF326F0C168637D7A49AFFC209EC4BD7378EE8A777DA14ED0433ABB575BAA4A098791F7EC46D250F5BCBA737E6ADD6E1EA28A72C69A1D2534789ED43F588B444BB33EF91B59EF2C4FE743D22BB1490B1C3D985CEC86DB4CAEC82645FBE79A010F5150478D7CD822F749944770C7A9AD08A4C4D068AD8C66DD4250133C698BF087BA2E532A8750CA7F12CE9EAE477EA1DDA085AAD3B0D4A0456D044E2A177014C879AB81F36C957A614E7A4A934> |-/k <1C60D8A8C9B7A73D80CF7109CC0D215EA22A4157ED6B6A0BB4695F10BB5E2589EDB37AA550821B636F98A3BF7A038C31B1E52387C42DDA8515D72DB884FC3D981AB6> |-/s <1C60D8A8C9B7A73DF2FC7D734CFF3CEE44DEE08B4814311F759A12C668E2414B1F185B71CDFB81A4EFE4B67531A5BC3DCC468E7336CC99F93A0F8C9CAAC21479B9DF30E1F20CC55E079066616501132E6501EACD2121153832E7EB63F4284AC03D21E5D5BD534A816A07833E9E45AAF0AF784FB128B27EB090C038A83361862615D53FB49FC431C156AA9A7FD4E2EF50395549EA0CB64112DC> |-systemdict /gcheck known {setglobal} if end {end} ifendSWOETP+Helvetica /Encoding getdup 77 /M putdup 91 /bracketleft putdup 93 /bracketright putdup 97 /a putdup 103 /g putdup 107 /k putdup 115 /s putpop%ADOEndSubsetFont
/SWOETP+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight 20{/.notdef}rp /M 13{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 5{/.notdef}rp /g 3{/.notdef}rp /k 7{/.notdef}rp /s 140{/.notdef}rp]SWOETP+Helvetica nfSWOETP+Helvetica*1 [0 -7 -7 0 0 0 ]msf6.01318 103.998 mo(Mass [kg])[-5.83105 -3.89209 -3.5 -3.5 -1.9458 -1.9458 -3.5 -3.89209 0 ]ysh3.68799 89.0234 mo
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSWOETP+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A75CA669> |-/A <1C60D8A8C9B64EDF9ABAB3D6B19B5B82CC49C93A7CA17E50CDDB377C52588B81292225BD4FB078DBAFD3981F1169229379F45CD94A50BD016A1B4BBDB2608F6EEE5C> |-/D <1C60D8A8C9B6079F1E08EB12991814F2BEFDD99E857D46CC83B089892D70768EDFB737CEBE140DF668BA679C989F178F8C7B580D23B4B614D8D70F34E9A487B4AA37370316974673AB> |-/H <1C60D8A8C9B6079F3517E07A2A32EE8D09F795FB6E9F11AE46C75AA31D50B194B413469264EA3867DFEC1283FAD051B3C6B29B8DCA4E1CF3E914FCD7B445> |-/N <1C60D8A8C9B6079F1E210C2F9CEEC55EA27709010CA5156BDE4F7169DCD83D1487618C13D4BC4EBB77DC3BF6CD15F7D9F6F5FB65B0AD46AE56999C41B6BE7783> |-/O <1C60D8A8C9B6FF867A21BA19EF0C570BB6C4AEDB905D3E548C322F786DA70CDAEFE3DEF4849E1D1588C3A22DCFB11573EC9A318A3B019A45D0FC4FCEE76BAD39BBA1E526700FB4A11015D71862856C2D89337A110F371091E0B563CCFD9E35D4> |-/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67BA95C799E46FC7C8D88E9FFD990A> |-/W <1C60D8A8C9B5D6EF3E8C8CCDDC3B02FEAA9A0D391A046AF25394AB2F57D081865FDBA8AF8D2FA66D957EEC3187D52A752FC6DE22FA57D4C77EA0B71DED1CFBAEF42DE8F477EF09DE0E89324DC4A04A> |-/Y <1C60D8A8C9B64EDFA3F30AEA5DF4FD6075C68D37A5EFE56A7A579DD5B22D729834C526C6E6C6E35A057355874F06D5E8FCC1DF2F8A7981335C> |-/b <1C60D8A8C9B7EF321971A47DFE20E8FAA3AECD4B63979F3BA5905BE4460C4EC35484A2DDEB8FB0C279CAEBAC46937B3C1D314F0CA9AAAD2428E1776BFE709A3690B134C3681F9C1058260E32A6FB6CF96E30645AB8747463E709006E87BE4044E02ACCC009C6EBFC0B2E8EBE6757939593099F73224798C4484DC245727ED201C4A4EB31B5D8FC091E99D86240A578386ECDBA2496554011C67D3AF284668A881E893817D96EF8797C86BEB27D87E41F1DB205D8E0A76EEB250779> |-/c <1C60D8A8C9B7A73DE7D498F17521D6359F9ADD96B62202C43AB7E2B6A506D4DE60506EB0B21A851A7E637BA285607D05D1170907CD76EA31977E70CEDA0DED90924EF61C48FC884B70C05F0A56FF474D664DA9646860BA> |-/d <1C60D8A8C9B7EF3272B02106CA005D490B9AADA17924914F2C970DE0CC49CEA15AE0636239F8F8972696F7F5932B166AF2D78F67482CC14B1A6381CFD7128F8DE76CDFCE15FA9EB575CCF12B456F3EB76367E9886C5281DF7AB34F68E50A05C60D95A0109B0EE1AC212C660640ECA54376F807195B77C533845305049FE68DE5BA8B1CD6F2147B0BF4B5B691FCBB3989ADBCB5DBED> |-/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C2021D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495ACA0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCDBE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553A431EECECF30F5581F5F0240E470E520EB9771> |-/h <1C60D8A8C9B7EF327C10274A017D50D0B79D52072757441F46A9E30449754F52968402CD3736F71D6E09A15E2046342DF42A864D37373E0A213DE941C6F011296A017FBEA0AE0137A10664047E> |-/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D72A7354004D800853CB28271AB7834CF7A2CB132BAFF26EF4E9D89B> |-/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C0EAF> |-/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706FE45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC754258679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52DA81BBE025DB4544A719A686DB3A0393D2301EEF9A4AA3D42067FE37BAF> |-/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA563254EC441C4BC3817B6ABCAA45C3FADDF2A0C1F1BCD1456474D7370B95E3791CB0774B8A788FAD31DAB8E43BE1DDCC8C2722C438CA874C21003F548D691EAB87ADC2BE2D98ABE47C6EE8D76> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/r <1C60D8A8C9B81F2C150546EE4CBAAF688B47B2BE559294D5CB0899F2E804995909AC00E005B47DD0AC10879B5BC7D5032F4A9752992A333ADEB05A77287D04AF74FB420D308AD8> |-/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B5837088353D9095E679DCF29A> |-/u <1C60D8A8C9B7EF325758E576B7BAA1EFA82EFF7976BE67CE506354F22E3D1B078EDAE7715C61BE16B3CD4B647E2C68818E308CF0BE659E73BA193580128E99771A6AFDBFEB4E9486BE6CBE5D0A068E2F3382B692BCB6E47C62554398C9E56946239346863C679F19> |-/w <1C60D8A8C9B6079F1E21163FAB6AE6913AD177FF61D1DF5A13833424AA1FD61EC74DDA2BECFBF8B60BC9DF7FD3935FFD35FC8515ADAC1E367194875F1B70589701BB841A4601541FD2E8173953> |-systemdict /gcheck known {setglobal} if end {end} ifendSWOETP+Helvetica /Encoding getdup 45 /hyphen putdup 65 /A putdup 68 /D putdup 72 /H putdup 78 /N putdup 79 /O putdup 84 /T putdup 87 /W putdup 89 /Y putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 116 /t putdup 117 /u putdup 119 /w putpop%ADOEndSubsetFont
/SWOETP+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight 8{/.notdef}rp /A 2{/.notdef}rp /D 3{/.notdef}rp /H 4{/.notdef}rp /M /N /O 4{/.notdef}rp /T 2{/.notdef}rp /W /.notdef /Y /.notdef /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /.notdef /w 136{/.notdef}rp]SWOETP+Helvetica nfSWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf132.388 194.162 mo(Height [cm])[5.05371 3.89258 1.55371 3.8916 3.89258 1.94531 1.94629 1.94629 3.5 5.83105 0 ]xsh46.7866 164.701 mo(Newborn)[5.05371 3.89209 5.05371 3.89209 3.89209 2.33105 0 ]xsh64.9507 147.662 mo(Two-Year-Old)[4.27686 5.05371 3.89209 2.33105 4.66895 3.89209 3.89209 2.33105 2.33105 5.4458 1.55371 0 ]xsh139.177 58.9116 mo(Adult Woma)[4.66895 3.8916 3.8916 1.55371 1.94629 1.94629 6.60742 3.8916 5.83105 0 ]xsh177.294 58.9116 mo(n)sh162.88 35.0132 mo(Adult Ma)[4.66895 3.8916 3.8916 1.55371 1.94629 1.94629 5.83105 0 ]xsh190.49 35.0132 mo(n)sh64.9351 12.6616 mo(Data)[5.05371 3.89209 1.9458 0 ]xsh0.25 lw
161.104 129.964 mo
161.104 129.093 160.398 128.388 159.527 128.388 cv
158.658 128.388 157.953 129.093 157.953 129.964 cv
157.953 130.833 158.658 131.539 159.527 131.539 cv
160.398 131.539 161.104 130.833 161.104 129.964 cv
@
1 lc
159.539 129.974 mo
159.539 129.974 li
@
0 lc
171.543 118.083 mo
171.543 117.214 170.838 116.509 169.969 116.509 cv
169.1 116.509 168.393 117.214 168.393 118.083 cv
168.393 118.953 169.1 119.658 169.969 119.658 cv
170.838 119.658 171.543 118.953 171.543 118.083 cv
@
1 lc
169.889 118.023 mo
169.889 118.023 li
@
0 lc
178.023 80.4038 mo
178.023 79.5342 177.318 78.8286 176.447 78.8286 cv
175.578 78.8286 174.873 79.5342 174.873 80.4038 cv
174.873 81.2729 175.578 81.9785 176.447 81.9785 cv
177.318 81.9785 178.023 81.2729 178.023 80.4038 cv
@
1 lc
176.488 80.4736 mo
176.488 80.4736 li
@
0 lc
178.982 89.0435 mo
178.982 88.1743 178.277 87.4688 177.408 87.4688 cv
176.539 87.4688 175.834 88.1743 175.834 89.0435 cv
175.834 89.9131 176.539 90.6187 177.408 90.6187 cv
178.277 90.6187 178.982 89.9131 178.982 89.0435 cv
@
1 lc
177.438 88.9736 mo
177.438 88.9736 li
@
0 lc
164.822 119.763 mo
164.822 118.894 164.117 118.189 163.248 118.189 cv
162.379 118.189 161.674 118.894 161.674 119.763 cv
161.674 120.632 162.379 121.339 163.248 121.339 cv
164.117 121.339 164.822 120.632 164.822 119.763 cv
@
1 lc
163.289 119.724 mo
163.289 119.724 li
@
0 lc
157.383 131.763 mo
157.383 130.894 156.678 130.189 155.809 130.189 cv
154.939 130.189 154.232 130.894 154.232 131.763 cv
154.232 132.632 154.939 133.339 155.809 133.339 cv
156.678 133.339 157.383 132.632 157.383 131.763 cv
@
1 lc
155.789 131.673 mo
155.789 131.673 li
@
0 lc
174.303 99.1245 mo
174.303 98.2539 173.598 97.5488 172.729 97.5488 cv
171.859 97.5488 171.152 98.2539 171.152 99.1245 cv
171.152 99.9937 171.859 100.699 172.729 100.699 cv
173.598 100.699 174.303 99.9937 174.303 99.1245 cv
@
1 lc
172.738 99.2241 mo
172.738 99.2241 li
@
0 lc
163.023 121.443 mo
163.023 120.574 162.318 119.869 161.447 119.869 cv
160.578 119.869 159.873 120.574 159.873 121.443 cv
159.873 122.314 160.578 123.019 161.447 123.019 cv
162.318 123.019 163.023 122.314 163.023 121.443 cv
@
1 lc
161.438 121.423 mo
161.438 121.423 li
@
0 lc
168.664 112.804 mo
168.664 111.935 167.957 111.228 167.088 111.228 cv
166.219 111.228 165.514 111.935 165.514 112.804 cv
165.514 113.673 166.219 114.378 167.088 114.378 cv
167.957 114.378 168.664 113.673 168.664 112.804 cv
@
1 lc
167.088 112.875 mo
167.088 112.875 li
@
0 lc
171.543 114.484 mo
171.543 113.615 170.838 112.908 169.969 112.908 cv
169.1 112.908 168.393 113.615 168.393 114.484 cv
168.393 115.353 169.1 116.058 169.969 116.058 cv
170.838 116.058 171.543 115.353 171.543 114.484 cv
@
1 lc
169.889 114.574 mo
169.889 114.574 li
@
0 lc
166.744 126.484 mo
166.744 125.615 166.037 124.908 165.168 124.908 cv
164.299 124.908 163.594 125.615 163.594 126.484 cv
163.594 127.353 164.299 128.058 165.168 128.058 cv
166.037 128.058 166.744 127.353 166.744 126.484 cv
@
1 lc
165.188 126.523 mo
165.188 126.523 li
@
0 lc
162.063 126.484 mo
162.063 125.615 161.357 124.908 160.488 124.908 cv
159.619 124.908 158.914 125.615 158.914 126.484 cv
158.914 127.353 159.619 128.058 160.488 128.058 cv
161.357 128.058 162.063 127.353 162.063 126.484 cv
@
1 lc
160.488 126.523 mo
160.488 126.523 li
@
0 lc
178.982 112.804 mo
178.982 111.935 178.277 111.228 177.408 111.228 cv
176.539 111.228 175.834 111.935 175.834 112.804 cv
175.834 113.673 176.539 114.378 177.408 114.378 cv
178.277 114.378 178.982 113.673 178.982 112.804 cv
@
1 lc
177.438 112.875 mo
177.438 112.875 li
@
0 lc
176.104 92.4038 mo
176.104 91.5342 175.398 90.8286 174.527 90.8286 cv
173.658 90.8286 172.953 91.5342 172.953 92.4038 cv
172.953 93.2729 173.658 93.9785 174.527 93.9785 cv
175.398 93.9785 176.104 93.2729 176.104 92.4038 cv
@
1 lc
174.588 92.4238 mo
174.588 92.4238 li
@
0 lc
179.943 112.804 mo
179.943 111.935 179.238 111.228 178.369 111.228 cv
177.498 111.228 176.793 111.935 176.793 112.804 cv
176.793 113.673 177.498 114.378 178.369 114.378 cv
179.238 114.378 179.943 113.673 179.943 112.804 cv
@
1 lc
178.389 112.875 mo
178.389 112.875 li
@
0 lc
159.303 121.443 mo
159.303 120.574 158.598 119.869 157.729 119.869 cv
156.859 119.869 156.152 120.574 156.152 121.443 cv
156.152 122.314 156.859 123.019 157.729 123.019 cv
158.598 123.019 159.303 122.314 159.303 121.443 cv
@
1 lc
157.639 121.423 mo
157.639 121.423 li
@
0 lc
174.303 116.404 mo
174.303 115.535 173.598 114.83 172.729 114.83 cv
171.859 114.83 171.152 115.535 171.152 116.404 cv
171.152 117.273 171.859 117.978 172.729 117.978 cv
173.598 117.978 174.303 117.273 174.303 116.404 cv
@
1 lc
172.738 116.324 mo
172.738 116.324 li
@
0 lc
166.744 119.763 mo
166.744 118.894 166.037 118.189 165.168 118.189 cv
164.299 118.189 163.594 118.894 163.594 119.763 cv
163.594 120.632 164.299 121.339 165.168 121.339 cv
166.037 121.339 166.744 120.632 166.744 119.763 cv
@
1 lc
165.188 119.724 mo
165.188 119.724 li
@
0 lc
188.344 94.0835 mo
188.344 93.2144 187.637 92.5088 186.768 92.5088 cv
185.898 92.5088 185.193 93.2144 185.193 94.0835 cv
185.193 94.9531 185.898 95.6587 186.768 95.6587 cv
187.637 95.6587 188.344 94.9531 188.344 94.0835 cv
@
1 lc
186.838 94.1235 mo
186.838 94.1235 li
@
0 lc
171.543 111.125 mo
171.543 110.253 170.838 109.548 169.969 109.548 cv
169.1 109.548 168.393 110.253 168.393 111.125 cv
168.393 111.994 169.1 112.699 169.969 112.699 cv
170.838 112.699 171.543 111.994 171.543 111.125 cv
@
1 lc
169.889 111.173 mo
169.889 111.173 li
@
0 lc
174.303 95.7637 mo
174.303 94.894 173.598 94.1885 172.729 94.1885 cv
171.859 94.1885 171.152 94.894 171.152 95.7637 cv
171.152 96.6328 171.859 97.3389 172.729 97.3389 cv
173.598 97.3389 174.303 96.6328 174.303 95.7637 cv
@
1 lc
172.738 95.8237 mo
172.738 95.8237 li
@
0 lc
172.504 112.804 mo
172.504 111.935 171.797 111.228 170.928 111.228 cv
170.059 111.228 169.354 111.935 169.354 112.804 cv
169.354 113.673 170.059 114.378 170.928 114.378 cv
171.797 114.378 172.504 113.673 172.504 112.804 cv
@
1 lc
170.838 112.875 mo
170.838 112.875 li
@
0 lc
177.063 94.0835 mo
177.063 93.2144 176.357 92.5088 175.488 92.5088 cv
174.619 92.5088 173.914 93.2144 173.914 94.0835 cv
173.914 94.9531 174.619 95.6587 175.488 95.6587 cv
176.357 95.6587 177.063 94.9531 177.063 94.0835 cv
@
1 lc
175.539 94.1235 mo
175.539 94.1235 li
@
0 lc
165.783 118.083 mo
165.783 117.214 165.078 116.509 164.209 116.509 cv
163.338 116.509 162.633 117.214 162.633 118.083 cv
162.633 118.953 163.338 119.658 164.209 119.658 cv
165.078 119.658 165.783 118.953 165.783 118.083 cv
@
1 lc
164.238 118.023 mo
164.238 118.023 li
@
0 lc
168.664 102.724 mo
168.664 101.855 167.957 101.148 167.088 101.148 cv
166.219 101.148 165.514 101.855 165.514 102.724 cv
165.514 103.593 166.219 104.298 167.088 104.298 cv
167.957 104.298 168.664 103.593 168.664 102.724 cv
@
1 lc
167.088 102.673 mo
167.088 102.673 li
@
0 lc
173.463 119.763 mo
173.463 118.894 172.758 118.189 171.889 118.189 cv
171.02 118.189 170.313 118.894 170.313 119.763 cv
170.313 120.632 171.02 121.339 171.889 121.339 cv
172.758 121.339 173.463 120.632 173.463 119.763 cv
@
1 lc
171.789 119.724 mo
171.789 119.724 li
@
0 lc
174.303 119.763 mo
174.303 118.894 173.598 118.189 172.729 118.189 cv
171.859 118.189 171.152 118.894 171.152 119.763 cv
171.152 120.632 171.859 121.339 172.729 121.339 cv
173.598 121.339 174.303 120.632 174.303 119.763 cv
@
1 lc
172.738 119.724 mo
172.738 119.724 li
@
0 lc
166.744 124.804 mo
166.744 123.935 166.037 123.228 165.168 123.228 cv
164.299 123.228 163.594 123.935 163.594 124.804 cv
163.594 125.673 164.299 126.378 165.168 126.378 cv
166.037 126.378 166.744 125.673 166.744 124.804 cv
@
1 lc
165.188 124.824 mo
165.188 124.824 li
@
0 lc
163.023 116.404 mo
163.023 115.535 162.318 114.83 161.447 114.83 cv
160.578 114.83 159.873 115.535 159.873 116.404 cv
159.873 117.273 160.578 117.978 161.447 117.978 cv
162.318 117.978 163.023 117.273 163.023 116.404 cv
@
1 lc
161.438 116.324 mo
161.438 116.324 li
@
0 lc
161.104 123.125 mo
161.104 122.253 160.398 121.548 159.527 121.548 cv
158.658 121.548 157.953 122.253 157.953 123.125 cv
157.953 123.994 158.658 124.699 159.527 124.699 cv
160.398 124.699 161.104 123.994 161.104 123.125 cv
@
1 lc
159.539 123.125 mo
159.539 123.125 li
@
0 lc
52.2632 10.3237 mo
52.2632 9.4541 51.5576 8.74854 50.688 8.74854 cv
49.8188 8.74854 49.1133 9.4541 49.1133 10.3237 cv
49.1133 11.1929 49.8188 11.8984 50.688 11.8984 cv
51.5576 11.8984 52.2632 11.1929 52.2632 10.3237 cv
@
1 lc
50.7881 10.3237 mo
50.7881 10.3237 li
@
77.5981 166.484 mo
77.5981 170.263 li
81.3784 170.263 li
81.3784 166.484 li
77.5981 166.484 li
77.5981 166.484 li
cp
f
110.548 150.234 mo
110.548 154.013 li
114.328 154.013 li
114.328 150.234 li
110.548 150.234 li
110.548 150.234 li
cp
f
183.998 59.7837 mo
183.998 63.5635 li
187.777 63.5635 li
187.777 59.7837 li
183.998 59.7837 li
183.998 59.7837 li
cp
f
197.197 35.9336 mo
197.197 39.7139 li
200.979 39.7139 li
200.979 35.9336 li
197.197 35.9336 li
197.197 35.9336 li
cp
f
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSWOETP+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369E6> |-/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319EB739C72B00D2CC4607F53D8DAA36825DF613C6C839053BC26A7859D8AA158786D28D1E4DE04046CE941E5159199A77FA8129F02A3ECB8D9E54C278D22D0348DFB3C3C73F55886BF824DB1B2BE764C084A332EAF6E03DAE2729DE4723D54D14DE5E36772632D9593B8015D82D91A7513CF83AED18BF899FB582C1516AE5C3CE963C7A9224066B2CB5D769E52069DB2172C52452A135E45CF579C1E7FB12BEA387FFB8E1E9EB90D4F6BF80D4DDA346E7141D8646431020D523BDB64> |-/colon <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369676FE7E3F7F79CEEE30BD023CC5123F5DD4F72E8838E> |-/x <1C60D8A8C9B7A73DEE9439F61CF83FD6F0AADDB8373458EFEDE4BF6C46155F8370F02E9CE5FFD24DBE7D153354FABD4F844978ABB054761731A2B93E507FE62552012BB1EB5E1E3EE678332D9E> |-/periodcentered <1C60D8A8C9B854D0F461DE0BDD324E837570EE08C62EB046522795975D6998D561DFD3683A959AAAC16BAE5862EA> |-systemdict /gcheck known {setglobal} if end {end} ifendSWOETP+Helvetica /Encoding getdup 46 /period putdup 51 /three putdup 58 /colon putdup 120 /x putdup 180 /periodcentered putpop%ADOEndSubsetFont
/SWOETP+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight /.notdef /colon 6{/.notdef}rp /A 2{/.notdef}rp /D 3{/.notdef}rp /H 4{/.notdef}rp /M /N /O 4{/.notdef}rp /T 2{/.notdef}rp /W /.notdef /Y /.notdef /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /.notdef /w /x 59{/.notdef}rp /periodcentered 75{/.notdef}rp]SWOETP+Helvetica nfSWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf64.9351 20.3569 mo(Model: 1.25 \264 10)[5.83105 3.89209 3.89209 3.89209 1.55371 1.9458 1.9458 3.89209 1.9458 3.89209 3.89209 1.9458 1.9458 1.9458 3.89209 0 ]xshSWOETP+Helvetica*1 [5.6 0 0 -5.6 0 0 ]msf115.123 16.8569 mo(-5)[1.86475 0 ]xshSWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf120.099 20.3569 mo( )sh122.044 20.3569 mo(x)shSWOETP+Helvetica*1 [5.6 0 0 -5.6 0 0 ]msf125.544 16.8569 mo(3)sh0 lc
203.488 46.4238 mo
203.738 45.8735 li
203.988 45.3237 li
204.188 44.8237 li
204.438 44.2734 li
204.688 43.7236 li
204.889 43.2236 li
205.139 42.6738 li
205.389 42.1235 li
205.639 41.5737 li
205.838 41.0234 li
206.088 40.4736 li
206.338 39.9736 li
206.539 39.4238 li
206.789 38.8735 li
207.039 38.3237 li
207.289 37.7734 li
207.488 37.2236 li
207.738 36.6235 li
207.988 36.0737 li
208.188 35.5234 li
208.438 34.9736 li
208.688 34.4233 li
208.938 33.8735 li
209.139 33.2734 li
209.389 32.7236 li
209.639 32.1733 li
209.838 31.5737 li
210.088 31.0234 li
210.338 30.4736 li
210.588 29.8735 li
210.789 29.3232 li
211.039 28.7236 li
211.289 28.1733 li
211.488 27.5732 li
211.738 26.9736 li
211.988 26.4233 li
212.238 25.8232 li
212.438 25.2236 li
212.688 24.6733 li
212.938 24.0732 li
213.139 23.4736 li
213.389 22.8735 li
213.639 22.2734 li
213.889 21.7236 li
214.088 21.1235 li
214.338 20.5234 li
214.588 19.9233 li
214.789 19.3232 li
215.039 18.7236 li
215.289 18.1235 li
215.539 17.5234 li
215.738 16.8735 li
215.988 16.2734 li
216.238 15.6733 li
216.438 15.0732 li
216.688 14.4736 li
216.938 13.8232 li
217.188 13.2236 li
217.389 12.6235 li
217.639 11.9736 li
217.889 11.3735 li
218.088 10.7236 li
218.338 10.1235 li
218.588 9.52344 li
218.838 8.87354 li
219.039 8.22363 li
219.289 7.62354 li
219.539 6.97363 li
219.738 6.37354 li
219.988 5.72363 li
220.238 5.07373 li
220.488 4.42334 li
220.688 3.82373 li
220.738 3.67334 li
178.988 93.8735 mo
179.238 93.4736 li
179.438 93.0737 li
179.688 92.7236 li
179.938 92.3237 li
180.139 91.9238 li
180.389 91.5234 li
180.639 91.1235 li
180.889 90.7236 li
181.088 90.3237 li
181.338 89.9238 li
181.588 89.5234 li
181.789 89.1235 li
182.039 88.7236 li
182.289 88.3237 li
182.539 87.9233 li
182.738 87.5234 li
182.988 87.0737 li
183.238 86.6733 li
183.438 86.2734 li
183.688 85.8735 li
183.938 85.4736 li
184.188 85.0234 li
184.389 84.6235 li
184.639 84.2236 li
184.889 83.7734 li
185.088 83.3735 li
185.338 82.9233 li
185.588 82.5234 li
185.838 82.0732 li
186.039 81.6733 li
186.289 81.2236 li
186.539 80.8232 li
186.738 80.3735 li
186.988 79.9736 li
187.238 79.5234 li
187.488 79.0732 li
187.688 78.6733 li
187.938 78.2236 li
188.188 77.7734 li
188.389 77.3232 li
188.639 76.8735 li
188.889 76.4736 li
189.139 76.0234 li
189.338 75.5732 li
189.588 75.1235 li
189.838 74.6733 li
190.039 74.2236 li
190.289 73.7734 li
190.539 73.3232 li
190.789 72.8735 li
190.988 72.4233 li
191.238 71.9736 li
191.488 71.5234 li
191.688 71.0732 li
191.938 70.5732 li
192.188 70.1235 li
192.438 69.6733 li
192.639 69.2236 li
192.889 68.7236 li
193.139 68.2734 li
193.338 67.8232 li
193.588 67.3232 li
193.838 66.8735 li
194.088 66.4233 li
194.289 65.9233 li
194.539 65.4736 li
194.789 64.9736 li
194.988 64.5234 li
195.238 64.0234 li
195.488 63.5234 li
195.738 63.0737 li
195.938 62.5737 li
196.188 62.0737 li
196.438 61.6235 li
196.639 61.1235 li
196.889 60.6235 li
197.139 60.1235 li
197.389 59.6733 li
197.588 59.1733 li
197.838 58.6733 li
198.088 58.1733 li
198.289 57.6733 li
198.539 57.1738 li
198.789 56.6738 li
199.039 56.1738 li
199.238 55.6738 li
199.488 55.1738 li
199.738 54.6738 li
199.938 54.1738 li
200.188 53.6738 li
200.438 53.1738 li
200.688 52.6235 li
200.889 52.1235 li
201.139 51.6235 li
201.389 51.1235 li
201.588 50.5737 li
201.838 50.0737 li
202.088 49.5234 li
202.338 49.0234 li
202.539 48.5234 li
202.789 47.9736 li
203.039 47.4736 li
203.238 46.9238 li
203.488 46.4238 li
154.488 127.875 mo
154.688 127.574 li
154.938 127.324 li
155.188 127.023 li
155.438 126.773 li
155.639 126.523 li
155.889 126.224 li
156.139 125.974 li
156.338 125.673 li
156.588 125.375 li
156.838 125.125 li
157.088 124.824 li
157.289 124.574 li
157.539 124.273 li
157.789 123.974 li
157.988 123.724 li
158.238 123.423 li
158.488 123.125 li
158.738 122.824 li
158.938 122.574 li
159.188 122.273 li
159.438 121.974 li
159.639 121.673 li
159.889 121.375 li
160.139 121.074 li
160.389 120.824 li
160.588 120.523 li
160.838 120.224 li
161.088 119.923 li
161.289 119.625 li
161.539 119.324 li
161.789 119.023 li
162.039 118.724 li
162.238 118.423 li
162.488 118.074 li
162.738 117.773 li
162.938 117.474 li
163.188 117.173 li
163.438 116.875 li
163.688 116.574 li
163.889 116.224 li
164.139 115.923 li
164.389 115.625 li
164.588 115.324 li
164.838 114.974 li
165.088 114.673 li
165.338 114.324 li
165.539 114.023 li
165.789 113.724 li
166.039 113.375 li
166.238 113.074 li
166.488 112.724 li
166.738 112.423 li
166.988 112.074 li
167.188 111.773 li
167.438 111.423 li
167.688 111.125 li
167.889 110.773 li
168.139 110.423 li
168.389 110.125 li
168.639 109.773 li
168.838 109.423 li
169.088 109.074 li
169.338 108.773 li
169.539 108.423 li
169.789 108.074 li
170.039 107.724 li
170.289 107.375 li
170.488 107.074 li
170.738 106.724 li
170.988 106.373 li
171.188 106.023 li
171.438 105.673 li
171.688 105.324 li
171.938 104.974 li
172.139 104.623 li
172.389 104.273 li
172.639 103.923 li
172.838 103.574 li
173.088 103.173 li
173.338 102.824 li
173.588 102.474 li
173.789 102.123 li
174.039 101.773 li
174.289 101.373 li
174.488 101.023 li
174.738 100.673 li
174.988 100.273 li
175.238 99.9233 li
175.438 99.5737 li
175.688 99.1733 li
175.938 98.8232 li
176.139 98.4238 li
176.389 98.0732 li
176.639 97.6738 li
176.889 97.3232 li
177.088 96.9233 li
177.338 96.5732 li
177.588 96.1733 li
177.789 95.8232 li
178.039 95.4233 li
178.289 95.0234 li
178.539 94.6733 li
178.738 94.2734 li
178.988 93.8735 li
129.938 150.625 mo
130.188 150.423 li
130.438 150.273 li
130.688 150.074 li
130.888 149.923 li
131.138 149.724 li
131.388 149.574 li
131.588 149.375 li
131.838 149.224 li
132.088 149.023 li
132.338 148.824 li
132.538 148.673 li
132.788 148.474 li
133.038 148.273 li
133.238 148.123 li
133.488 147.923 li
133.738 147.724 li
133.988 147.574 li
134.188 147.373 li
134.438 147.173 li
134.688 146.974 li
134.888 146.824 li
135.138 146.623 li
135.388 146.423 li
135.638 146.224 li
135.838 146.023 li
136.088 145.824 li
136.338 145.673 li
136.538 145.474 li
136.788 145.273 li
137.038 145.074 li
137.288 144.873 li
137.488 144.673 li
137.738 144.474 li
137.988 144.273 li
138.188 144.074 li
138.438 143.873 li
138.688 143.673 li
138.938 143.474 li
139.139 143.224 li
139.389 143.023 li
139.639 142.824 li
139.838 142.623 li
140.088 142.423 li
140.338 142.224 li
140.588 141.974 li
140.789 141.773 li
141.039 141.574 li
141.289 141.373 li
141.488 141.123 li
141.738 140.923 li
141.988 140.724 li
142.238 140.474 li
142.438 140.273 li
142.688 140.074 li
142.938 139.824 li
143.139 139.623 li
143.389 139.373 li
143.639 139.173 li
143.889 138.923 li
144.088 138.724 li
144.338 138.474 li
144.588 138.273 li
144.789 138.023 li
145.039 137.824 li
145.289 137.574 li
145.539 137.373 li
145.738 137.123 li
145.988 136.873 li
146.238 136.673 li
146.438 136.423 li
146.688 136.173 li
146.938 135.923 li
147.188 135.724 li
147.389 135.474 li
147.639 135.224 li
147.889 134.974 li
148.088 134.773 li
148.338 134.523 li
148.588 134.273 li
148.838 134.023 li
149.039 133.773 li
149.289 133.523 li
149.539 133.273 li
149.738 133.023 li
149.988 132.773 li
150.238 132.523 li
150.488 132.273 li
150.688 132.023 li
150.938 131.773 li
151.188 131.523 li
151.389 131.273 li
151.639 131.023 li
151.889 130.773 li
152.139 130.474 li
152.338 130.224 li
152.588 129.974 li
152.838 129.724 li
153.039 129.474 li
153.289 129.173 li
153.539 128.923 li
153.789 128.673 li
153.988 128.373 li
154.238 128.123 li
154.488 127.873 li
105.438 164.375 mo
105.688 164.273 li
105.938 164.173 li
106.138 164.074 li
106.388 163.974 li
106.638 163.875 li
106.888 163.773 li
107.088 163.673 li
107.338 163.574 li
107.588 163.474 li
107.788 163.375 li
108.038 163.273 li
108.288 163.173 li
108.538 163.074 li
108.738 162.974 li
108.988 162.824 li
109.238 162.724 li
109.438 162.625 li
109.688 162.523 li
109.938 162.423 li
110.188 162.324 li
110.388 162.224 li
110.638 162.074 li
110.888 161.974 li
111.088 161.875 li
111.338 161.773 li
111.588 161.625 li
111.838 161.523 li
112.038 161.423 li
112.288 161.324 li
112.538 161.173 li
112.738 161.074 li
112.988 160.974 li
113.238 160.824 li
113.488 160.724 li
113.688 160.574 li
113.938 160.474 li
114.188 160.375 li
114.388 160.224 li
114.638 160.125 li
114.888 159.974 li
115.138 159.875 li
115.338 159.724 li
115.588 159.625 li
115.838 159.474 li
116.038 159.375 li
116.288 159.224 li
116.538 159.125 li
116.788 158.974 li
116.988 158.875 li
117.238 158.724 li
117.488 158.574 li
117.688 158.474 li
117.938 158.324 li
118.188 158.224 li
118.438 158.074 li
118.638 157.923 li
118.888 157.824 li
119.138 157.673 li
119.338 157.525 li
119.588 157.375 li
119.838 157.275 li
120.088 157.125 li
120.289 156.974 li
120.539 156.824 li
120.789 156.673 li
120.988 156.574 li
121.238 156.423 li
121.488 156.275 li
121.688 156.125 li
121.938 155.974 li
122.188 155.824 li
122.438 155.673 li
122.638 155.525 li
122.888 155.375 li
123.138 155.224 li
123.338 155.074 li
123.588 154.923 li
123.838 154.775 li
124.088 154.625 li
124.289 154.474 li
124.539 154.324 li
124.789 154.173 li
124.988 154.025 li
125.238 153.875 li
125.488 153.724 li
125.738 153.574 li
125.938 153.423 li
126.188 153.224 li
126.438 153.074 li
126.638 152.923 li
126.888 152.775 li
127.138 152.625 li
127.388 152.423 li
127.588 152.275 li
127.838 152.125 li
128.088 151.974 li
128.289 151.775 li
128.539 151.625 li
128.789 151.474 li
129.039 151.275 li
129.238 151.125 li
129.488 150.923 li
129.738 150.775 li
129.938 150.625 li
80.938 171.423 mo
81.188 171.375 li
81.3882 171.324 li
81.6382 171.273 li
81.8882 171.224 li
82.1382 171.173 li
82.3384 171.125 li
82.5884 171.074 li
82.8384 171.023 li
83.0381 171.023 li
83.2881 170.974 li
83.5381 170.923 li
83.7881 170.873 li
83.9883 170.824 li
84.2383 170.773 li
84.4883 170.724 li
84.688 170.673 li
84.938 170.623 li
85.188 170.574 li
85.438 170.523 li
85.6382 170.474 li
85.8882 170.423 li
86.1382 170.373 li
86.3384 170.324 li
86.5884 170.273 li
86.8384 170.224 li
87.0884 170.173 li
87.2881 170.074 li
87.5381 170.023 li
87.7881 169.974 li
87.9883 169.923 li
88.2383 169.873 li
88.4883 169.824 li
88.7383 169.773 li
88.938 169.724 li
89.1885 169.623 li
89.4385 169.574 li
89.6382 169.523 li
89.8882 169.474 li
90.1382 169.423 li
90.3882 169.324 li
90.5884 169.273 li
90.8384 169.224 li
91.0884 169.173 li
91.2881 169.123 li
91.5381 169.023 li
91.7881 168.974 li
92.0381 168.923 li
92.2383 168.824 li
92.4883 168.773 li
92.7383 168.724 li
92.9385 168.673 li
93.1885 168.574 li
93.4385 168.523 li
93.6885 168.423 li
93.8882 168.373 li
94.1382 168.324 li
94.3882 168.224 li
94.5884 168.173 li
94.8384 168.123 li
95.0884 168.023 li
95.3384 167.974 li
95.5386 167.873 li
95.7886 167.824 li
96.0386 167.724 li
96.2383 167.673 li
96.4883 167.574 li
96.7383 167.523 li
96.9883 167.423 li
97.1885 167.373 li
97.4385 167.273 li
97.6885 167.224 li
97.8882 167.123 li
98.1382 167.074 li
98.3882 166.974 li
98.6382 166.923 li
98.8384 166.824 li
99.0884 166.724 li
99.3384 166.673 li
99.5386 166.574 li
99.7886 166.523 li
100.039 166.423 li
100.289 166.324 li
100.488 166.273 li
100.738 166.173 li
100.988 166.074 li
101.188 166.023 li
101.438 165.923 li
101.688 165.824 li
101.938 165.724 li
102.138 165.673 li
102.388 165.574 li
102.638 165.474 li
102.838 165.373 li
103.088 165.273 li
103.338 165.224 li
103.588 165.123 li
103.789 165.023 li
104.039 164.923 li
104.289 164.824 li
104.488 164.724 li
104.738 164.673 li
104.988 164.574 li
105.238 164.474 li
105.438 164.373 li
56.438 173.974 mo
56.688 173.974 li
56.8882 173.923 li
57.1382 173.923 li
57.3882 173.923 li
57.5884 173.923 li
57.8384 173.923 li
58.0884 173.875 li
58.3384 173.875 li
58.5381 173.875 li
58.7881 173.875 li
59.0381 173.824 li
59.2383 173.824 li
59.4883 173.824 li
59.7383 173.824 li
59.9883 173.773 li
60.188 173.773 li
60.438 173.773 li
60.688 173.724 li
60.8882 173.724 li
61.1382 173.724 li
61.3882 173.724 li
61.6382 173.673 li
61.8384 173.673 li
62.0884 173.673 li
62.3384 173.625 li
62.5381 173.625 li
62.7881 173.625 li
63.0381 173.574 li
63.2383 173.574 li
63.4883 173.574 li
63.7383 173.523 li
63.9883 173.523 li
64.1885 173.523 li
64.4385 173.474 li
64.6885 173.474 li
64.8882 173.423 li
65.1382 173.423 li
65.3882 173.423 li
65.6382 173.373 li
65.8384 173.373 li
66.0884 173.324 li
66.3384 173.324 li
66.5381 173.324 li
66.7881 173.273 li
67.0381 173.273 li
67.2881 173.224 li
67.4883 173.224 li
67.7383 173.173 li
67.9883 173.173 li
68.1885 173.173 li
68.4385 173.123 li
68.6885 173.123 li
68.9385 173.074 li
69.1382 173.074 li
69.3882 173.023 li
69.6382 173.023 li
69.8384 172.974 li
70.0884 172.974 li
70.3384 172.923 li
70.5884 172.923 li
70.7881 172.873 li
71.0381 172.873 li
71.2881 172.824 li
71.4883 172.773 li
71.7383 172.773 li
71.9883 172.724 li
72.2383 172.724 li
72.4385 172.673 li
72.6885 172.673 li
72.9385 172.623 li
73.1382 172.574 li
73.3882 172.574 li
73.6382 172.523 li
73.8882 172.523 li
74.0884 172.474 li
74.3384 172.423 li
74.5884 172.423 li
74.7886 172.373 li
75.0386 172.324 li
75.2886 172.324 li
75.5386 172.273 li
75.7383 172.224 li
75.9883 172.224 li
76.2383 172.173 li
76.4385 172.123 li
76.6885 172.123 li
76.9385 172.074 li
77.1885 172.023 li
77.3882 171.974 li
77.6382 171.974 li
77.8882 171.923 li
78.0884 171.873 li
78.3384 171.824 li
78.5884 171.824 li
78.8384 171.773 li
79.0386 171.724 li
79.2886 171.673 li
79.5386 171.673 li
79.7383 171.623 li
79.9883 171.574 li
80.2383 171.523 li
80.4883 171.472 li
80.6885 171.423 li
80.9385 171.423 li
32.3882 174.324 mo
32.6382 174.324 li
32.8384 174.324 li
33.0884 174.324 li
33.3384 174.324 li
33.5884 174.324 li
33.7881 174.324 li
34.0381 174.324 li
34.2881 174.324 li
34.4883 174.324 li
34.7383 174.324 li
34.9883 174.324 li
35.2383 174.324 li
35.438 174.324 li
35.688 174.324 li
35.938 174.324 li
36.1382 174.324 li
36.3882 174.324 li
36.6382 174.324 li
36.8882 174.324 li
37.0884 174.324 li
37.3384 174.324 li
37.5884 174.324 li
37.7881 174.324 li
38.0381 174.324 li
38.2881 174.324 li
38.5381 174.324 li
38.7383 174.324 li
38.9883 174.324 li
39.2383 174.324 li
39.438 174.324 li
39.688 174.324 li
39.9385 174.324 li
40.1885 174.324 li
40.3882 174.324 li
40.6382 174.324 li
40.8882 174.324 li
41.0884 174.324 li
41.3384 174.324 li
41.5884 174.324 li
41.8384 174.324 li
42.0381 174.324 li
42.2881 174.324 li
42.5381 174.273 li
42.7383 174.273 li
42.9883 174.273 li
43.2383 174.273 li
43.4883 174.273 li
43.6885 174.273 li
43.9385 174.273 li
44.1885 174.273 li
44.3882 174.273 li
44.6382 174.273 li
44.8882 174.273 li
45.1382 174.273 li
45.3384 174.273 li
45.5884 174.273 li
45.8384 174.273 li
46.0381 174.273 li
46.2881 174.273 li
46.5381 174.273 li
46.7881 174.224 li
46.9883 174.224 li
47.2383 174.224 li
47.4883 174.224 li
47.6885 174.224 li
47.9385 174.224 li
48.1885 174.224 li
48.4385 174.224 li
48.6382 174.224 li
48.8882 174.224 li
49.1382 174.224 li
49.3384 174.224 li
49.5884 174.173 li
49.8384 174.173 li
50.0884 174.173 li
50.2886 174.173 li
50.5386 174.173 li
50.7886 174.173 li
50.9883 174.173 li
51.2383 174.173 li
51.4883 174.125 li
51.7383 174.125 li
51.9385 174.125 li
52.1885 174.125 li
52.4385 174.125 li
52.6382 174.125 li
52.8882 174.125 li
53.1382 174.074 li
53.3882 174.074 li
53.5884 174.074 li
53.8384 174.074 li
54.0884 174.074 li
54.2886 174.074 li
54.5386 174.023 li
54.7886 174.023 li
55.0386 174.023 li
55.2383 174.023 li
55.4883 174.023 li
55.7383 174.023 li
55.9385 173.974 li
56.1885 173.974 li
56.4385 173.974 li
40.7881 17.3237 mo
60.7383 17.3237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSWOETP+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/L <1C60D8A8C9B7EF3257710D8E45FDED8109BBDA794C5EEC6C4DCFCB68A628CD21FC17F8D9EBEE> |-/p <1C60D8A8C9B7EF321971A47DFE20E88A554AF6C7BF26D7DE21E7159091488A77474EFAE16E717C524A15C920EA73AA47F3FA5326288E9152C7B3C170946831BD532AD7339284A44181A5422DAA5A3944CCAFE4499DA2E6E45119A891F62D3E7DB19C997B84C7105E8154EEFB4DEC8858FC770AEE75D22C6FDC3AA98F517994> |-systemdict /gcheck known {setglobal} if end {end} ifendSWOETP+Helvetica /Encoding getdup 76 /L putdup 112 /p putpop%ADOEndSubsetFont
/SWOETP+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight /.notdef /colon 6{/.notdef}rp /A 2{/.notdef}rp /D 3{/.notdef}rp /H 3{/.notdef}rp /L /M /N /O 4{/.notdef}rp /T 2{/.notdef}rp /W /.notdef /Y /.notdef /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w /x 59{/.notdef}rp /periodcentered 75{/.notdef}rp]SWOETP+Helvetica nfSWOETP+Helvetica*1 [7 0 0 -7 0 0 ]msf64.9351 26.6616 mo(Linear Approximation)[3.89209 1.55371 3.89209 3.89209 3.89209 2.33105 1.56152 4.66895 3.8916 3.89258 2.33105 3.8916 3.5 1.55371 5.83105 3.89258 1.94531 1.55371 3.89258 0 ]xsh0.125 lw
[0.5 1 ] 0 dsh
223.988 26.0234 mo
224.238 25.6738 li
224.488 25.3237 li
224.688 24.9736 li
224.938 24.5737 li
225.188 24.2236 li
225.438 23.8735 li
225.639 23.5234 li
225.889 23.1738 li
226.139 22.8237 li
226.338 22.4238 li
226.588 22.0737 li
226.838 21.7236 li
227.088 21.3735 li
227.289 21.0234 li
227.539 20.6235 li
227.789 20.2734 li
227.988 19.9238 li
228.238 19.5737 li
228.488 19.2236 li
228.738 18.8735 li
228.938 18.4736 li
229.188 18.1235 li
229.438 17.7734 li
229.639 17.4238 li
229.889 17.0737 li
230.139 16.7236 li
230.389 16.3237 li
230.588 15.9736 li
230.838 15.6235 li
231.088 15.2734 li
231.289 14.9238 li
231.539 14.5234 li
231.789 14.1738 li
232.039 13.8237 li
232.238 13.4736 li
232.488 13.1235 li
232.738 12.7739 li
232.938 12.3735 li
233.188 12.0239 li
233.438 11.6738 li
233.688 11.3237 li
233.889 10.9736 li
234.139 10.6235 li
234.389 10.2236 li
234.588 9.87354 li
234.838 9.52393 li
235.088 9.17383 li
235.338 8.82373 li
235.539 8.47363 li
235.789 8.07373 li
236.039 7.72363 li
236.238 7.37402 li
236.488 7.02393 li
236.738 6.67383 li
236.988 6.27393 li
237.188 5.92383 li
237.438 5.57373 li
237.688 5.22363 li
237.889 4.87402 li
238.139 4.52393 li
238.389 4.12402 li
238.588 3.77393 li
238.688 3.67383 li
199.488 63.3237 mo
199.738 62.9736 li
199.938 62.6235 li
200.188 62.2734 li
200.438 61.9238 li
200.688 61.5234 li
200.889 61.1738 li
201.139 60.8237 li
201.389 60.4736 li
201.588 60.1235 li
201.838 59.7236 li
202.088 59.3735 li
202.338 59.0234 li
202.539 58.6738 li
202.789 58.3237 li
203.039 57.9736 li
203.238 57.5737 li
203.488 57.2236 li
203.738 56.8735 li
203.988 56.5234 li
204.188 56.1738 li
204.438 55.8237 li
204.688 55.4238 li
204.889 55.0737 li
205.139 54.7236 li
205.389 54.3735 li
205.639 54.0234 li
205.838 53.6738 li
206.088 53.2734 li
206.338 52.9238 li
206.539 52.5737 li
206.789 52.2236 li
207.039 51.8735 li
207.289 51.4736 li
207.488 51.1235 li
207.738 50.7739 li
207.988 50.4238 li
208.188 50.0737 li
208.438 49.7236 li
208.688 49.3237 li
208.938 48.9736 li
209.139 48.6235 li
209.389 48.2739 li
209.639 47.9238 li
209.838 47.5737 li
210.088 47.1738 li
210.338 46.8237 li
210.588 46.4736 li
210.789 46.124 li
211.039 45.7739 li
211.289 45.374 li
211.488 45.0239 li
211.738 44.6738 li
211.988 44.3237 li
212.238 43.9736 li
212.438 43.624 li
212.688 43.2236 li
212.938 42.874 li
213.139 42.5239 li
213.389 42.1738 li
213.639 41.8237 li
213.889 41.4736 li
214.088 41.0737 li
214.338 40.7236 li
214.588 40.374 li
214.789 40.0239 li
215.039 39.6738 li
215.289 39.3237 li
215.539 38.9238 li
215.738 38.5737 li
215.988 38.2236 li
216.238 37.874 li
216.438 37.5239 li
216.688 37.124 li
216.938 36.7739 li
217.188 36.4238 li
217.389 36.0737 li
217.639 35.7236 li
217.889 35.374 li
218.088 34.9736 li
218.338 34.624 li
218.588 34.2739 li
218.838 33.9238 li
219.039 33.5737 li
219.289 33.2236 li
219.539 32.8237 li
219.738 32.4736 li
219.988 32.124 li
220.238 31.7739 li
220.488 31.4238 li
220.688 31.0737 li
220.938 30.6738 li
221.188 30.3237 li
221.389 29.9741 li
221.639 29.624 li
221.889 29.2739 li
222.139 28.874 li
222.338 28.5239 li
222.588 28.1738 li
222.838 27.8237 li
223.039 27.4741 li
223.289 27.124 li
223.539 26.7241 li
223.789 26.374 li
223.988 26.0239 li
174.988 100.625 mo
175.238 100.273 li
175.438 99.9233 li
175.688 99.5737 li
175.938 99.2241 li
176.139 98.8232 li
176.389 98.4736 li
176.639 98.124 li
176.889 97.7734 li
177.088 97.4238 li
177.338 97.0737 li
177.588 96.6733 li
177.789 96.3237 li
178.039 95.9736 li
178.289 95.6235 li
178.539 95.2734 li
178.738 94.9238 li
178.988 94.5234 li
179.238 94.1738 li
179.438 93.8237 li
179.688 93.4736 li
179.938 93.1235 li
180.139 92.7734 li
180.389 92.3735 li
180.639 92.0234 li
180.889 91.6738 li
181.088 91.3237 li
181.338 90.9736 li
181.588 90.5737 li
181.789 90.2236 li
182.039 89.8735 li
182.289 89.5234 li
182.539 89.1738 li
182.738 88.8237 li
182.988 88.4238 li
183.238 88.0737 li
183.438 87.7236 li
183.688 87.3735 li
183.938 87.0234 li
184.188 86.6738 li
184.389 86.2734 li
184.639 85.9238 li
184.889 85.5737 li
185.088 85.2236 li
185.338 84.8735 li
185.588 84.5234 li
185.838 84.1235 li
186.039 83.7734 li
186.289 83.4238 li
186.539 83.0737 li
186.738 82.7236 li
186.988 82.3237 li
187.238 81.9736 li
187.488 81.6235 li
187.688 81.2734 li
187.938 80.9238 li
188.188 80.5737 li
188.389 80.1738 li
188.639 79.8237 li
188.889 79.4736 li
189.139 79.1235 li
189.338 78.7739 li
189.588 78.4238 li
189.838 78.0239 li
190.039 77.6738 li
190.289 77.3237 li
190.539 76.9736 li
190.789 76.6235 li
190.988 76.2236 li
191.238 75.8735 li
191.488 75.5239 li
191.688 75.1738 li
191.938 74.8237 li
192.188 74.4736 li
192.438 74.0737 li
192.639 73.7236 li
192.889 73.3735 li
193.139 73.0239 li
193.338 72.6738 li
193.588 72.3237 li
193.838 71.9238 li
194.088 71.5737 li
194.289 71.2236 li
194.539 70.874 li
194.789 70.5239 li
194.988 70.1738 li
195.238 69.7739 li
195.488 69.4238 li
195.738 69.0737 li
195.938 68.7236 li
196.188 68.374 li
196.438 67.9736 li
196.639 67.624 li
196.889 67.2739 li
197.139 66.9238 li
197.389 66.5737 li
197.588 66.2236 li
197.838 65.8237 li
198.088 65.4736 li
198.289 65.124 li
198.539 64.7739 li
198.789 64.4238 li
199.039 64.0737 li
199.238 63.6738 li
199.488 63.3237 li
150.488 137.974 mo
150.688 137.574 li
150.938 137.224 li
151.188 136.875 li
151.389 136.523 li
151.639 136.173 li
151.889 135.773 li
152.139 135.423 li
152.338 135.074 li
152.588 134.724 li
152.838 134.375 li
153.039 134.023 li
153.289 133.625 li
153.539 133.273 li
153.789 132.923 li
153.988 132.574 li
154.238 132.224 li
154.488 131.873 li
154.688 131.474 li
154.938 131.123 li
155.188 130.773 li
155.438 130.423 li
155.639 130.074 li
155.889 129.673 li
156.139 129.324 li
156.338 128.974 li
156.588 128.623 li
156.838 128.273 li
157.088 127.923 li
157.289 127.523 li
157.539 127.173 li
157.789 126.824 li
157.988 126.474 li
158.238 126.123 li
158.488 125.773 li
158.738 125.373 li
158.938 125.023 li
159.188 124.673 li
159.438 124.324 li
159.639 123.974 li
159.889 123.623 li
160.139 123.224 li
160.389 122.873 li
160.588 122.523 li
160.838 122.173 li
161.088 121.824 li
161.289 121.423 li
161.539 121.074 li
161.789 120.724 li
162.039 120.373 li
162.238 120.023 li
162.488 119.673 li
162.738 119.273 li
162.938 118.923 li
163.188 118.574 li
163.438 118.224 li
163.688 117.873 li
163.889 117.523 li
164.139 117.123 li
164.389 116.773 li
164.588 116.423 li
164.838 116.074 li
165.088 115.724 li
165.338 115.373 li
165.539 114.974 li
165.789 114.623 li
166.039 114.273 li
166.238 113.923 li
166.488 113.574 li
166.738 113.173 li
166.988 112.824 li
167.188 112.474 li
167.438 112.123 li
167.688 111.773 li
167.889 111.423 li
168.139 111.023 li
168.389 110.673 li
168.639 110.324 li
168.838 109.972 li
169.088 109.623 li
169.338 109.273 li
169.539 108.873 li
169.789 108.523 li
170.039 108.173 li
170.289 107.824 li
170.488 107.472 li
170.738 107.123 li
170.988 106.722 li
171.188 106.373 li
171.438 106.023 li
171.688 105.673 li
171.938 105.324 li
172.139 104.923 li
172.389 104.574 li
172.639 104.222 li
172.838 103.873 li
173.088 103.523 li
173.338 103.173 li
173.588 102.773 li
173.789 102.423 li
174.039 102.074 li
174.289 101.722 li
174.488 101.373 li
174.738 101.023 li
174.988 100.623 li
126.588 174.324 mo
126.638 174.173 li
126.888 173.824 li
127.138 173.474 li
127.388 173.125 li
127.588 172.724 li
127.838 172.375 li
128.088 172.023 li
128.288 171.673 li
128.538 171.324 li
128.788 170.974 li
129.038 170.574 li
129.238 170.224 li
129.488 169.873 li
129.738 169.523 li
129.938 169.173 li
130.188 168.824 li
130.438 168.423 li
130.688 168.074 li
130.888 167.724 li
131.138 167.373 li
131.388 167.023 li
131.588 166.623 li
131.838 166.273 li
132.088 165.923 li
132.338 165.574 li
132.538 165.224 li
132.788 164.873 li
133.038 164.474 li
133.238 164.123 li
133.488 163.773 li
133.738 163.423 li
133.988 163.074 li
134.188 162.724 li
134.438 162.324 li
134.688 161.974 li
134.888 161.623 li
135.138 161.273 li
135.388 160.923 li
135.638 160.574 li
135.838 160.173 li
136.088 159.824 li
136.338 159.474 li
136.538 159.123 li
136.788 158.773 li
137.038 158.373 li
137.288 158.023 li
137.488 157.673 li
137.738 157.324 li
137.988 156.974 li
138.188 156.623 li
138.438 156.224 li
138.688 155.873 li
138.938 155.523 li
139.139 155.173 li
139.389 154.824 li
139.639 154.474 li
139.838 154.074 li
140.088 153.724 li
140.338 153.373 li
140.588 153.023 li
140.789 152.673 li
141.039 152.273 li
141.289 151.923 li
141.488 151.574 li
141.738 151.224 li
141.988 150.873 li
142.238 150.523 li
142.438 150.123 li
142.688 149.773 li
142.938 149.423 li
143.139 149.074 li
143.389 148.724 li
143.639 148.373 li
143.889 147.974 li
144.088 147.623 li
144.338 147.273 li
144.588 146.923 li
144.789 146.574 li
145.039 146.222 li
145.289 145.824 li
145.539 145.472 li
145.738 145.123 li
145.988 144.773 li
146.238 144.423 li
146.438 144.023 li
146.688 143.673 li
146.938 143.324 li
147.188 142.972 li
147.389 142.623 li
147.639 142.273 li
147.889 141.873 li
148.088 141.523 li
148.338 141.173 li
148.588 140.824 li
148.838 140.472 li
149.039 140.123 li
149.289 139.722 li
149.539 139.373 li
149.738 139.023 li
149.988 138.673 li
150.238 138.324 li
150.488 137.972 li
40.7881 24.3237 mo
60.7383 24.3237 li
@
0.5 lw
[] 0 dsh
32.3882 3.67383 mo
32.3882 174.324 li
267.838 174.324 li
267.838 3.67383 li
32.3882 3.67383 li
32.3882 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/SWOETP+Helvetica*1 uf/SWOETP+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Pooja Bajaj) ()%%Title: (heightweight3.eps)%%CreationDate: 10/13/10 8:21 AM%AI9_DataStream%Gb",KG@**udcgW2Hj<JFng(LBP#3ss/7DMB,iS)MqoA[%\#XjBcS,t#I<P)JI<LYYe'k#%Wk,4AK&9oRc%k-3n=qi:46u!k))%UR%HfOY+2kGkQr;K1S6C\t%M=F/$Kc1<'A3:='Kif[c8YB-7UX"60%VKF<;+I-ObG5&M1<k,<rDr*NH<_BuBB\Z9f`+U7of=\idH,a<%me=Zf@[#e;ijIA'Mm^rCd$f590c%L`pt*s,fC,<T#AnIDou>Z1HnE"jZ*1(-%l*ChJ!7&HL7S=V/"WFPM;<dbH9?ldWE9#lV)Xs<%`M.oD1oKp7r=Q^UoW@c#^uL.Dd@8E.X]]R!Hk)=RYJe8ehjTB=<W\bL-+lPk!C,,LV3Yd8"JQ1[X>c8uHW-n'H)AGTr2V4E/*f?9%FaCsYB_k<OFOoah?kaupbML"]nrb!]9kAS?mDZ^k:9K@8J0+\>6XDhqFiD)e'n3XCDo"bCr'*sPacQd/XiZ>X6O5C2cXDf9Djk7Z%,6[:DlQ:+5TEG@eNlBu-kQ]?k_o;gF89j1ZN*#LhCm+CecmmHC@>"dL9dQU?3-m^N!]lEi:*KD)TcH.aoKIT=/:)qb;gm*[Wk4MT%]kR$>0-HRXrl`C_OZB/tc=Z'4RPR:"o!-mZbJoPqaT,D7#a:"F*eG-IVnEtt3LWPHD>19_R^HNsK_#ZCDf=m4)'BHJrWrZ(9IA_2%-3HKUAbfO5%0:pp;aGr3Jj>pYC@F-,/")&kaWu7+-D=Ep$*BB4>#"E@PCYW[%(&;'Q[uV%)/,;W5V)U;IR:)U)-W<Kn7K3>:Wd6^%;lda`=tQ.q[qdjG?E934aGe5gaaD0cj=._j58OH`++?O,=;1Uc<j3orV;rMq#_#)Z=:tIaFj#jhn%tOO-[^L\_,'9O^kq[l.tXCt%DYO[u_O=k+!_kF6["<G::M<\-_0>JL^s!+D#o!]1i$Wf6XIRM+balt;N".Y1pIK0fr]r&:+8ge`a:=A5P@nFHi&A#pouT9hTL.Lh%otaH!"KNdE%mS1[i>_OuX^HSHPO'L0&cu,i5)^oM!6e]f+*l2Rr!:fG'nMh_(UA':H^Hg](E&S3/FOBh+od0QYW<XX@<M&t=Z(I3%l[thVMVpFpO2-F]$U:<oXNojm0jCLq!]`";_/:-GAR(A&%;&?hL#@PV(\4.1\<GSXW0;3-ggK:8NlYu\F,*fekbNFn5']p&OdQm*%,hPfaSA9mO:rE;=ri4IChXUAPC/l]UL6IMl"M86X=7HgX<cL[-FENp].'*4F1QimfDl_6Hk:4eZ*gcLlhW-X3s+B3^.rs'&SgR=`%hrJ-,:-P_naZkhNOW`P[^WF5iML8HSPCMgRq4(4'A#H/Q`?KT%r[.Y;-1Y4;:&]G9Pm[=VrD!8kX5pV`S,?c]ItXH3hSE!nYN3%f%M>Tj/j5]6GU/k^O[9>:j9W'A>8ig:ZUe8$uJk,hSpf)huU8R&Yr'^Rc_G?5"repc8qFVWRYPk#Pj0pUD=SHJc2OV7B*p'Y(cY/lK%C-kHk@(!5aKE.)frstbLrrjWN[oWMZV@d(\Du"89s3boImu?4Z[;3f<IiEPDIB'M_D%Gj".bSC=gUN:OQbY3BD^:WFhlnQoG=Cq^%j5;TU8Wr_$r^nG\o!VBD]j2rU7;oMW*`_c;0dAhW!$9"+_u9WgngUt(_.*2`(Y(81mi">>fPg=$rW^\!_39)jmg;jMVY2YB"Z+3f%a,P9Nk/XA*7KF"8B0:cB9_/PA&d#m#1+GC4\-=PTk\4f"2)6MIHNrUB3sNAilSQCHTMU.HoYea(FD??jcoW.-PMcK1a@bu?i.!H<%=s_JYTMJts^`6:;6<t5$<!fDCF2HRrOf4t2pHl_S%7DMti-5PuWapTucP`\uM>t@)6D<uFBGDE["T/KIQ];0eU61VMI7([MjWLML%/$dkf]`2dLi'sB\,CuKF)>Xkl=%a5%b5^#?&uV\tE>a)N#Sg)W\>GsS.Y0aV8rOu4GQW@A&8Wb,0\4;'4c`t4Z0=6!#c8LB.cH8h%cP#r8p"'Itiu+,X).iHi.?nBnLGbta`Xp??1RGV(*jY'7(\e4,W'ZKZLsQmpUP,%l"^!']/;LdQfU+Ds678_`P0D#J@O_kfI(ku1%p^=KIY,I9]S@q8/Qet.I:\Y(ZCJDjq0jg%)>pa?NkloO.M*+LCPd*g`;mlLc@-ORGjQ#fXAT]rRf^N4[Wo[oP4,7$Nk`s$;>3_B"%Tk9C[HDjA1W[`_&mg>RYq$:FIRR`L2Oe7b=+UJ8BE6P:sA5tI?6Z37QBYOl0^a`nfdUET4AtYJE"`*8>WjkF[+4%Sh@7"/[^%1n9%WipB11Q%\,nUuiC)X])k7_>R<N4kTkeu06!cW7MF$NBS\X=9$hcOpNpl!?,#eIm*WGaD93,,hKS)WQ$63WGonaQk'`W!&TC!Id[S%+:n?N-("u8;^4E3-t+U4P\.f@dcpjZ5bV2#?Lgd#/kL5FS:Ip#-,EVGK9Yt\]Hd.Zl]ZUodW^jl.DJSsYG*f(KM!Q'b].CgRYgAT%n#q,1aQ"JsAh]gCPhpY-07\\rV]\#"a\Jo"W_-dJQ:Q+\$m6r0JCY@1X)a]B125Q%"oHd]5a]Bc#UKRMYTPblNDl+_+n,"?'uDYO%),E!#e]>t2Q:7fTGnp`^b5>U*pEFleL,JC)3cQSY?]d>iI]"IM*La5iG$9gYl7#9dKK40DQ:[<I'n4G,HrcYNQ,;32"UBa54as(K%it@'.BjG'OSq9AJ5Yi)J/tTQiCZ2?qH7KlW9]?QCZaB-MhLPho/nAMhQ-TPHCnlHU[aKJ;3\Htcp(!,mRNGloi4pcZ#H0egdd&/@%Q*_b\$+p;WP%kN;%7g91ns[5""P&9me.F)#8)>"<dKG]7.%CjErmE9Vada-V,)'M^j_!T,b45NmI2't(,n`D(4LD/PocE5$,c(f9%rU.JFV4Mr)1aKF\lT7LLQiE?p;:J-`6>AdkWtM!TpEfE#\K??jI%&M(RH>lK!R>aXjW%4[-ggAsU>>'[UZb&'/HXn;6q<J3'5DhQ%a_)&CM\&BbOM$8N)Nf0R\.0#UVTPE8SZUZPV5#:a^*_6qI#^cG[tIfq5K''g:HPX'3tTY'eglPU,tZ:CAh)%pmV>+l7dEgjgd/mg%O@\=uO`jU=[C@:0WYj@9#()V3[!qq^`6GO!X/Bm_!^Irki1?).Lb#!`<THrd4im'P"I<85S/-FXNBs"'7Ffb96>>.Trr\cKqHj&k%qR/J$NW*eds0TGdG\eu+;V+J3Fb#^PBiDGia\$,R`R;oCMpKf*9A7DlB6*Tu]^P>kMNob^1=)iZ5)q!QQ(2dr(M*FihltQ)/_`kX%Dm>iCo*T07Hrj/oJ]pI3,\:bAbX&)1GhLXqIo]%\csm`8_Q?r9U`c1,?)rq%R'-iN*dLtPX<gQ<5-r0c,AXUG)k]1d'J)m6P)>GX%e3+qT:d,36l!I$Ag$i_6/[DLQQ6pc1BL=`iR;J+]:?e03E*]o.&rdFu9aSrl<I%a+])oD`Hi3m.YR@q&jKJ,f!#NXRq4@.n1?soa%a>;prr8^bGc,ZDGO-!e!k+e>(m0u;VU,S9H4smDH7(DbtMVXj`5u4@OEIo5fjc8!\p%p><g?Qmp,',O*ot)Dh.Q?rQf?,$ad\MSD%@p5G[Uba+*pVjn8QJ.)+hnkq.jN^3lVM>c*X!75:W4^h/h=jI0*n@-cZl.lk4j8_h*KdcTWpN>k4!IUkPGWELFKROp0QX(-\+T87%:7*Z&TI;Q9"E.m5'.831`Dl3>*BDT?p\Ws/)7LpmJak+?hAEVSh0'l+BnAJP:iBX:1E-9Ll$[s)R+\:c'aLk_2ac`#$l9kCAmOqt%.9;kcBtlP(oI+(+qt''F2k6q.jPTun6Y8%(J*gBP-iY5^]'gj.W](XNmm1aCRJ5Zmgn9A8QU_"CMc3_gGP&'^,Q?N`[g)V'KO)8d%X,gR`hKnXOd,lrUj("+X=r`K5IIV`_INjjbqu,@g<^%P53[.KJRo,E3:&7k$7Xu`$/t*Ct%e)-1a9]_o;u$O['7Wop-XV%DJ+We-%'VHm/^K:D\T<u\"<p,YYSggNNA`!1qm`r__pX"L<oKXWW@l2K0$OD@Y>,AQKCFUeI`#hh)g#m$474@/(MA1qKWP=>o1TJUYWWY-`%jSK#t>n</h#Gf`rBllu?-a3E3[(%G7Y3Bi,aeLKTe9'DSW40l<$sK2.i;5nfbuu,]&;6hc7=1EJq=(.:R1K.rq$b[0BIJ<cSJHOt%F&g1S+,RneX6G!SB"]SU+n:#tCoTP_N54[+l[;bQJ1+Kl7n3HG;&^(MP,ei9&`S4Z2r8"fe/#7e)2k(V0$-[Am,_+HK4#l%bZfMf%+j'A2mt_`ks%jC6lc0GGK+qOoU[Z+;V)]YT7-Ls`X5E<X^GBOH"7-K8N$kCg]S"j%&+qmaL5*98B:./!psJYY\4hK?<"DCWjYA9^%2+B7s/^5K'Ah%8>f(/B:>f'H.@K.*u+/5*_Zd?4CE;0%rT0[hRIq?]>abbd(4[EKNMI:ab2?Z-I4==W`P(#R[cdANaA2GAM%,XRH%!/?I,X>TnIQMQE?VEqEX*VnnFDkM$<]tZu+?*)Qq#;,hbRXiT0L\J1SKfC<'=o(J`lZ1jOM=qrqG/.g)i[mmednfG_B[g,GVgY@7%;u.D^$gmsM`]1jh$r;W]dYf>A%J1k[-aWi_;,D'"&^\GqjPJ'3FNWO:\^rPS^u2aY&p`VKYZee!&_6XG8,9Ur[)A3bRgrD6UqShk%cI;$9QiA1j@US(t7=61O"r,_Z\(0GE@Xg53-E2BFN[4(1CGN?`)R]rlbV#V$9[>1*7tWPkNI!6B>@S7@GP51W/MA-;EPFAI9t^7J%V+Y2\#_*FNe$:7iS^M3Rpcct!U/>]tkk]uAGll9XZ[^?li*hY#8.NKY]NMUri<[\f3GApjDoBOup'-=_b>2:0.JiMN,<K/9hRe9a%LI:^S(]*E(hRN=4qtSB]]BJ"]$f(.[aTc;7],iUd*T#1^K/((0e=RU:rF^l0r/kD$m%5/]q_Q.\IqI=tZa\%@"6AO8!HM*51W.64%bco2R1[Lamaf.LWaf.LWaf.LWaf.LWaf34N)>;Af;!NP#J0*+IXa,EiCbmd@h`(B>FWF,o1G&!+A'%\2/o^Rr2Nc!f-nL]VEo&%]%oAiU-M.KI.XK%G]Xn[4nlAJ3n_m;LAHd&4N?qOAD6;5j2a)b9Z#*Je',9/X>G;M](epn\j,DC1iGsl`ukiVn9?_`X'?^c'hbuG7_%,3JN!7fJ?))F!hu*O%EsLO?ftDOufuU>a!qDrC(MIu#.9Oe+`#[HB>c)FX@QRMI97f)JD[CZqC*ebSS)]+]0Tg@/G2!'s)"$9r/&%J;+;)"5C`XlX-d9F;L(bjU@*!g89A-qK'2!Hp9K&2ah1HRRo<'C-MT_63jbOd/dYOUX$@$FTNGkA`V1?X51YoU7?kD+lp-IB.%p9%p?SJXYA*l8KEPoo#tO=M[G$&V$0'_-l@0J@BE*!GlHo/6@l,a?1S;r^K0RQ$ILcsqdhYJ2E98;VF,H!m:)@Rrs$9TZs+*e?n,N4p%5)oRr),0q@c@7o/L6N+jL"PZpCp'OmrR5"QaX^f+RX^j/k+=lPRT,e&a08^k^O"_hViqie%KGdp\4e*4&s?t@<IKb_)W>40Em$\[%/h^-AN@Yjp*mKd'ckPAM,Th`(V(KFQ+)pd\Q?P?X:HB]Fm./2XIWRjRkp[%Z=f[H+TiL9<=`GLP?-2`s"M:VPpuTP+Z.k`Y]P>G%%0OS/sHQDaUgfs<!j1L8#"$6U2V7\59`-XBSVrGq$.U3t:8kT6/MYCCj3GF$h>P'SR1E0'$m8gtZlq$TL1+DHo)9lgP=lu93J'XXm%SB`IVDj`LCPK'/BDsZkM5a_N)$QaJdU!4Nd=QSTsd6%1tS;b9.1gQU^kEWmLm3-__AtlaD^+\,o`M2ns&F&7h!T"?-H&X27?tFdi%4NMc.`Ta;p!X#\$Des0`p5HYHi8]2gJUGJlR`sK\ete3>g.1Ypd6].e?XPa>T?_(Z1q7\sa[AHdR.nmO_)]YPgU;^J[S<#Yo2MdD%Uc"[&>DS"ps.Fpi?15/pDp]^FeA6!k;JY8K>B_Eh_\GL3Dme>h[G&<CDt]6tcS>MP:en>Sr0XrW7.8fB/8qurfFjA<ret(;Xq#X[%Xm*<4:=J`(:EHWe:VtJC%(Yf9(R#UeI=p*2;0YIu^g!>T7LC1fP%M]qDN,5_9RDD;^STooB*q#:F0qC]B[RX-Mp(cK-_m*l0h79a%*2t4Hm0tf#Ni(HG`.EV=XGchIKitZ2C1D8<1,+Kh`#LCCk)`IqPr'e[@VuHA/(#>26bfF>*W5X3&\q%o&@@J=1k\G,C'%<9%jlN-%A"3HD/S8&0/hL,.f_/;(S!Pth["g,Vf`J63X@QjA^`q%Z6ArKf%k\g^e(j$J%RNXM]blFZIH&#D5pa0S]%qJZO*+$T(l(P:-3DcS%_eW.so`04,cF>r$O8D;bP8\WcG>>5Dar?ipdF/QFj%6<W=n,tZp[#!CCa:`%882_iEhWp?W<@.qQAErr(L(_0J[YRs]t[@^R9d-p%?*a^%IZ<%eVUODBOQ)42%Ir#X,uNC)iTRu,(EKku:#!A7TJa/q9%ls\A7=!!e"=Q>UEO*]1H8eoV@"mi2Vj,#N>?@Yh:QBBUhp2^%B_[Tig#m&>Dsb*3DhUsi\hA\1KMg,*qlOl)dp]l'bi^n`(jsAcClRL;BCpg`+9\M.VNZ5NQHa_3AcH7f_@Z%,.3`Kajcn233qY3O%OP]JTACG?]h<ioQ`TMZ]247VJ(H4`)'>''h./r.tZ,.\)[&'.CK@VlK8=DGlBUbuEed`TKZZa]]R^Ie!3p*lT-h"rUXP4gmhFBp`%_AuE^+AkiU@)I#CV_Q-g5T^o=VUYFRd.6XFCnbPppj>#8q;Hu9Tlq%b;Un%-;b_+!PX+g]-f)mD9>-i-`,RS9#FnQ68+$dpZ@^^H%r+!_Ce:saOV^r2m!Z[akKO'rU$Z2\L>f%H*oLPdF67QL!MDhO>O<B4d8_;_ra'4u(rdrg,E\$dr.X"o6\/P'OG2.rn)I<Ol1r="#%,>JU/Sn;kp-Q#BLG"9I2_uBErD>p8G+i^X]SQ9*^qm('OE>4O)j*p/5$O"Fc3l@p385YjZY>6)fN&ghNHuNoU@.%cR@SC>#BJa;;%^bf8)fOd0_bGu87)-:2C9C,lg[WW22!QufWnH5>6Ip&lm==Fm6L=U5<*&-064D!Q4#Bp!tl9\IA"b.F(m\KENP`^KLfV6C:B#Zlo%Uh.Z#8)oV`\:>Ml/XDD9FQ[NMO1NrF$(*F4q68n8+lLqRiD?tPW64Ko.m#ABGe/d/Ja:s"b^1kKOoF1*+m/S7\@asfHO>*!ib]B%%3#X2:T/Reu<5P5C^YMo6;.(Cnapl%WiYkr>BncS%i@Iuuk\Qas-5&\@JW4,U$t66L+B]Cundc-+KP&^%hAE4-6]9t>RR(oWA1GI3%(<7r4";SX.'9,8&3,1fsOU3-f0JJ/)BqYXhmNPJ,s%KO^+\[SL)FF2h1CjTFe)(.uMjNOXK63h3!bOa%iI'W:'e\:K)3tRNLVebk%R/ha,n\+OqTKG28rk]1hKu2BA<-cg>^DiXY\Q7g_^!A3)q/GaGq<88LL:2Jlj1BZ!h\Y_!c?p5<<q_7ApO"NU]+<hn'#&DU4?hl)%a(QZ^ms*g`/ME@:69=q(*'ERVheJq9Xh],1VekBn/5IVgf!+#Gq.c8QNmEX&aH1cBpid,$9tIX`SQ@?'`mZ^[.].sK!5d;B/(b_H%rV.S/?O`C;h\US*5,,HXAR,'5NG/O0\;ps@N%^^INW%9RBN=kJE,U]4HoR4bgq"n*J%Zj<n60;F2"?4t\f<@[60n.;Vs2q)M@X7c%\(L+,LR3"\c><&.rCE]Ge+7Ommb:bCLq6=4L"kG.GP&/s8+5;9jFoOjPKE7b@Ih'XG02T1b5g7ER&rD#HC&u9hgIC-L4_[>PT$EO%-M]=7B/HR-&&Yh'022-V&%aOZ8L_/p4mk7g#+]YG,YMa%2Y-%1i=-jXj'Po(4Eq\!m@54:%_>MaM45!tek/I07Y?$bB\;D.eo28G%)$;jIs2*@D:G.V3Xo%h#\\m#L_a3StrX'/C<4N9BrZQdaL'L/'h6(L:olfm_cSo:Zi8U=4mY/\F(IWnq8*Za\'XFc6<X/'HcAleh%6t5XH2B2:2o)(M\1)Y2KPt]`:34pp:Y[l+I_V9dtTT(NHYkqrnkaq6g](md]kQXJNOC?JY_>MX1TP65rGdj<iRgbb@h#*R)Ul5P<%h`nESUV/H?MU>TdC4hI0ISr0b)O.@`HAAAMDBGL.Fkr]EMDVEUf$?8sMue<HbPJuARnGSOC9/eOSbfB0%=0**kQXcZHs^2fcB!^^%5(2$>COO:1c%CrTK8(.BgA(Y=`Ckopd@b;sn1Nu1`M5uAVN7c2D6lN8f[KiaV=C3K3tFh9UaR)jH?h';&651$[98P4`D$PbN3cRj%QU-g$kHi?Dr@t,YlL@fjhQX>Xl(D,;$1hjhkQ-&%ZBI3g[$fV;php5JPChasDkf8GVM!_@"1t%7KD*rQ8FAne'Wm'-p>eL:no[8"%_a0pL)onh.IV8O>LF.X;'bD_,]G0DGCHW,FN'iCJ%0q:pmK08<DVW![(j/Y7`FoJ7RnRR0h_8_gJS7gSrU<:&YCd&(roeXUS/^<U%K77H"\j8LYT@_S#JqrH3npuPhUcAfq8$aZR)Hilc/&m(m42*t4mSEL+Xe(JSC!^!+N:o]`$N9>B.j5i1H'UVCEi!ic>.q)TTJ>8q%PPL^*[j))TpLqq->W4'MIO9A6L+R@7;;Ila=,0inGYk)Qh/(Mlo!>$N0@)[5.(c_3)r^&IY-Jj1K-'kOIQ`3/PA42`<R1l\V`m:c%n8A5)kT!!MSk>mt'#6tbe$fqTh4ButAZL16M#?mciE1!c2]`\D;nlICnBHll=,X!4[uU:5@pf7'IC]D5p,Kc$1Oo:Drr$F-o^X>m%0mY<8N4o.jQH\7#\eq!,5+TnA]R6[.mh_qsjuW116L79>B^Eu6H#EWRG3`tfib@s4TKZY7fPTZT@fH'gi\>9Ko_CRfC@kJ[fLm?9%BE%VJa,=X-'HQZ<]_U%O9seI40eO8h^G^RFb/E?&:J^Pua9#i+ktcKSo^2#=Gk>bIe@-GN-fh2/P6Hd<[Z9t:o(0;]p\B'B1,++p%hW((?Ml40'2&0T]q3Y23it3gf?79RG[RN,9*a5RUNSIOqRk'hm_cr2:Z7-i$<XRg/X)uk#4\("Pch<d[::YQB<9p:-@&&<\6sXWs%(oYZJ9J>!-+r&\.U=5cSU#DK)%=T[K(6p"#h7U9_UXkmk'R$])8^s;Iq=.d&f$&,[\:\nf]/`o8&2;u8N!;_K6'fujqpM^3N66m8%9a4&/:?j%uCbk5QPL6$E5?[;AD(HO+<Dn$!+0J<Ch)T/h53,#qI<s7'?P!aJSGVj"/K2E;$(`'B]=knW%Q`E;D6%>"BEh1Y"p9S"%^2?c/`[(ULdqdJD\l!7^9F&PJK?9e.:!am:e8o!/f(f3E`Lun+V"p[V3Tp[dd^Xs&+Ha%T#/)]41jsCd@m2<^,8q&EL>@IE&`p3p%,]&0TN2(P_R5J^aCXKM"ha6"jK-%:jVK*%u7E*@fMhJ\eBhA+oA*XM4Im-fG/+Yh+p&G(;k`'-K82Wa4-q?X97Fda+;!>M!Q'r7\%'8Tu3V:"pgbQ@`C!VO3b8(Opl2#R"aqR@"2mQ;a*5QkbkRHkigT!@)3EaR86<49gg-N&>c7t)HA?:j^rCrfKnUP\F=O<tl-)P1o)%q%P?.pjqL:"ZdeO$QiQg@te]8m5,LWdZDf<X+';'jEP2r-.)D.UhWiO8SrL1CG#ZQ*bft\1p9gbjFokl8-a/A@PlI%O4IT*e]Eg%%-Z&/k2=8s"5@AQ:KuA'<G;dqk1u1BhcWaQ^>?i8Y.@gnfm%B"0A&U+k`X"dlIPYA7FZ034FbT18_\f*ELoW^8l`4EZN*!VGO+0<S%a.e\Fgc^+1OFJq(*o1lAO5H&p<1i_)/aKD$=c]k7#HUGG_u\`hObj9mb*9<87m)]H';94SG#co-%s5/*;W[4l#P%NJL]TZUHNhpo%V92$K91R!<gOq&52/a)Sm\:`%0<L=!5F0S2$W+SA[kS>[9I)Ao.*R'=R.cTLV;4'qpZb['](1IB./.3idhOXfE0tM;EFHFQloV[r%D[I8@h^Ms7:?bYA6CQ[a,;5Q(KT%X2ba0A+LJ)ffVn1GK4cH@8[O@lbCTGf&4e">ofBo@Xo?2L&oJX#fr'TIqpo_F5/Qs*s)tr$C%Ijk#$@`D`iNnOONUc[=D`S!,T0X%nr1cb;7)ooT?_D7aYE,JM[Ze,m7-Rt(:aCB?S.EjO4l.3CAl)U[CQEZq;RES4hmrs(iI4XWU%W8&[NmOt%,bBtni;]S?TEp?)$L$40@HqNCQfp!'2=6AOR;FVk$4JgL7KkC#TVaqVm*OHLE*:I6h3aWloTG=\KU=REDERe49'kXFN%C%%1\cBon>1['^%-cEN;6B#8!`.V,5-6:8BU.$?QY>JOh)JjVq<F&`gk"Bo(MJj%iB!+`Ce%r-DF"CXe;<:;8Hc@^7Q*\>n*KD^"%b4mmH&3;V^[@62s!1dt.cnU+]>)V$Z]lp>*(^c"2/[%'Slu=cq2_(EX7%aP6h5_"L3gke![a\&?OY,s.@RI,@c*4T1X/cI>-1s."%l.V+l*nHahW?\SXW([bR5F-"TM1;+GbhNV7B%6T:0N,"f)9.J\Qk@F2oZ-T_2k6&L/WD*b-3euG"hu:1h['C0ScuRYl20U.(CE*&%a3H]R4Jg$gja$]:6cjYU23Hr1n:dMd>HWi_m/,)SSMb'LBGDU&SK))<bb\H>Z[]?J"Mfnu%9PH<gRXT;^s\?)G;rSo*7%+,b)GLE%]o(f'DX;\%6S4.a=@csqK#_e_rPDSnY[sdj3`RX>Z2F%*6K5d+4#ka4n+rl+oSYM.>!0$HGlq8@#D`.cftH2HiPAd";Gmnnpl0I?%GX7`>_,QE&[eil\G)3>V=1%iIYe4TN&!jXf]a[B)d;,Fc@BWgE"YbhRet<bTRDh7\nW?k:[M]('dO+Ta\.3G[#eTVhH45sb=e(Q%%K.qYdirC;d:(BUt[-[)M1-X-XJMpcTA0QKJFB'Bs25Vm&5#P0?pBskR)<$VDcs))&AC#\XdnVT\a6WeiFKjR^=dG5k[*[4CZGt72%,g4&)(%J`GTXPkgl^mO'((MlTXOHs1Y^)S_2T;dY+$&_Eji[G4K?gb4!(cIY7UcVAPG,><Cdl'YGDRt%m!5nE/KT)[ooZ.k93jbc%7<458'BhlY5?[8U[NDQ>$FL\2hl`TjPL'3<-f+:WD[9WkVDX:L2/b`-Dh;!J98m"0%AtO0k__7_9%%$Ol!;Y=aPtXgjGqPSL]C4I%8"cZs:IC-h;^ED)M]<1S[hau.q_J+Vq%g0Hi)69-)j9=*T`bms2>,+K"--u<^-H=D^/[2I[E?ltTma:`%QTt8m6a+=F#<A+?<sGD%ZWY?)/+,pNd54oXkNXXZOXrcp^lp@V16Q@S%ZN&XA"$BRJmfnYpta3+/n"#>@o\LHPK%Gc1Y>Gic=k.,4an>.M`NZ//p5<IAY+iA%>?5I6Lq3BSA>o3`]2tokI'_b\jGYPOEU79Pd9b90m/TEtf]DsLY#(Tk7r^a/Y"*XZ\Y^l.?*):O%I74\$c+oQ:%CI,A'F3V?PtS]%46m!mr%-@m_+L7YpSY5P.md>)9s"kJ)+;(oP4.5!@V@Dr2JGap^P:2Kc,T<*FF&g15L/>:UL"X/*;?f;BrKoCCO<AadkJ@Hgq(,H%SV?^<W8#ejF^ecYVHp)DPio:8qX;3rf.bkj)O)^;RbtiEdBIJ'M:/Z)Mn8c?FMdjE:cI\+gY.Cri+m010de5aV-L$fr&Sgck>o'i%5RK4je$\HMAa<*h75$/8>p(c*09uiAHb+GU[AU0f,rdDL&#OBkg_B"kF%r_(\#2]-5U5j*8!Ws/HJ>1>FP^)batk&@Dql4Se6J&g%Ucij2:KBoC75%&?-Q+/l>I-D2'+k?E$-X]D%7\]C1;6JuPB)Hk<kbRH;%PauR53>E2">UcpW*#-je6j=\^/Jlc0F@9pSu6[=\$g>%+'V5DSTP&UcJ>a[(cnEXeHe4Tg9Y5sSTP(+*0IgI%%VFQ(e2lO(6[3Wkc?#me7c\K@d'm<kY.]S?,t<G/L0K/BYi5.kd5]:O(4A0%\#^K8B,s9.7G+^V6Y@NLQ7_PUQ\qKCNhF9F^SO<'GpH4(Cp3JGIGi?pJaT:U'0X/,PVBe8Xk!8B%>-SM&"K)7\L;oT%V#\7Q<l($%fiWPNqU9oXXh3AmnPaH8Vig\G2t/Ub*dJ_0K3\uC_+EArV8#tFN)n-*:ZpN2NIR'lk\PZCemY<&PcQ)O[n!mPI?(2c`,]Di-\ijd%Q@;F9&[qOX?lC4VHOed5:taZUft)b`''t%r\$F[h?J<*LoO[6_B!X>gXrn+DO:^ao?:/+pL@ge=oKodOMea9<\C^W!fL"_EG2WF/%dDoBL;FJ_iZdEeVId>:d/m+f9+ehuCe&`X$jI24blUpDAFlZTJ<KO1KLhW@YdF#4b-bIjp&[3hSZ=u*$mAXQ+3/fNEn%[<b;fT\9%N>5XISb\PCdjQmrNmCJeEZW86i*i_;pRT?Ufu1W*iWdm]RGRLVlWRXcbq\H8ZnSh#i<-9$T!R&tXTd1h#MsH>U#(CcE;tmWq!;I!%>Ta-oJtP-u=6e!Z7#(KP47CD5X54l8/7W9sc79iY=<#10;^'d\9P=-kjaVBT:42<o`C=YHbEW/1H^:9c-$D)VV/<l8FViDU9dUH3%/'mWCr549#96WV_e89WaTt_=Z3*5g47BqRZHdH!!mCKMrNM7m.Pk:c.)6j^;Ze_>Qe1sd(X7I0l"baD=dCpbXFAZb4PrNtBEjT2G%p4+r_>[TkK.8P'.Q-M:jPp6`U4229lU11NFVC<i6\2<Y6$]d*&(t,FbV@c\Uc*bZ'cSN=1:of5l9d5W=\2<ZALY7B*N2B!g&35DB%A`ge@UI,&LbLM/JMi:Xi)d$W-HDO!A>b$rt1$_RhMb1IcaI%:Olbh`;_+AF)&[jIPN';I+Tq+-71Q.3rQ/+.dfQ$#L2E4si,.$J8%O!nXf4VepB1i?r;&#-n6;i;(3/53t.Cj[8j/M`*E+7'o_ctk9h*_5aGX'0$rIK3'YI<^bYFGtinoU+tre3&(9e&S-tY5RLs1ePai%HXRd`F.5fH"3"]/<]96aNQ4OMPE(32gn@RM/M5n&Bn4<;@;$.Ap8l0P.)1[?ip*&D!dj:ol;l1L2Eh0apuVJI<5;TlCF-RCed)W0%8M*NI7(1UUl3.T6;D2*3kVS^DP_chla2@0/r/Q3j>fFV6j<%T)4<2`IWl/Nl&*MG0FgZHReZY$oLg+Rn#5#B([%Q`034#*:ou=n3%fJe4Hgq)P)F>hdJ,s:L<3,Or]lKh\i4Iju;X`q0X/fnp#f%2`bCk(!:";#r+b7S@V@a9BGY9!C+H?:8dong>)j:c6#q_t:8_s;j[%KcPJ+g@f$Ff#%4l0BpMO.MMF,-pmk&O^-7oL#/nNan45L+U$Db)oV*\#nR\`1UJC[CQT%QGHT'7d+VEAi76a6,0E<D=#*N4-c6m)%Y0!%:X^\A4+@?mtQj?cW`o.>e(m1Mp(V=M!\0(HU\=gNuIT@d_gl%RQm6&u0m`/1HpnD02aC0%#k1?cEDWG!%oF=V&XKM[*6!d9T%j:[JjTB]3:CPbUD2U$S1>XtT1)ifM@SOK>p)tB1n(BeU&0^-M^7-a0.,#W@2&s7LPVMNaV2+==t3_oipB@88Vr/59^2%C#f*_SOL%e>7_^7R>p<>9@5_aj;4G%XURRMq2#T'FmLS(mo(IKu4K!FHFsdV,0.,G0:UfiCrpe[>)PdSbq^^Kqkte4,_Km-5=bce1\;49-\8h%$5PG7)k>"2fP2;_[>UiT"denVV)ksT$.R$M2I:qG]k3\Rd#AH4N\,%<>hmHQR%nJ$<iufAIqWi_;&J833[oh$@=1&U(3l*nTk^)@%3_OgM$Y3!sI*ppKX"SMb;Y<J:_M^'nR&TqD!`Oigm\-6I(&Z^>U>gr):V:^FL*'6R1UEookdGBOdU/HQZcSI':M?3I6n$#5phY]Y%:t:5LD/<D[]>^L$^1[][n*qL_7Y==`Z(\8mUKOhUK2o/1QW8^pqoP\sQ:Dkq#%b2(AqP9/@^/Ole=]DbQ;We4;cK0Z4p29d9e.aE%#J8f]%Z8&kZ\ktsCDliaAC0E"f#</h0ai02M6NJhNRfQ_]1(Ro9F$8TZCba6KJCXU]399rFO8/%3q"jFe@5Gt^!c8HR$$b5pht:"%K&qdU5hFGgh911"Zu(T!rOu8":2O2^4sdk*N_Tj@H7J1_;;"PT)!HuY=A*LK?7!^EbH4fs27OfUXQX`*//q(])Hb8&lpT`63%Fc9%=/X5P8p[,1MI$Qp3`N1mQ_eu(8odDP--nV%aZ6`F<U>.4*PuMLA>F14qt2O<7*a!`(GaMkm>K%G?XM;8&%prqg"%'\4t4ODV7J,?%X:"[oj.&o%Z3;+IQ8E]-FVmhcA*I8t1n=_1bSm5?N+2%Y54IloVDDDEa1q%U]#BM*_TqR"h*f^D*Vm592)`b8ZIW\M,I"seef.=r%QQ]m&d<&,YjOL$ie1%ACZ_c2uWG"=;3t(S2?"Z!b;(S9#DpN1GF@LkU-8o9ad<%j_FG>&U<f3b1@]_,8=][GNd?O.rZIW\M$V>&l%d<%jp.CR-q24Dg(s6M70\W*IBlH9&7Y?`uU;-+P'PtOTqR6YT5d<'/VR&sb0%C(%DdhuGd)!$6T0q-B9QHl-mlAEu27^7'T3P/=K%VUNsOM5@P8Y?W9?cDUhds5[adkqirsAT[Y,F[aasM);*:^N;<'"rPe-WKSkib>t-3JROZ!E5cKOA+'np<+6.he1-"Ho<]Oe.Y%c(%!iSrWZ@R*bT*$qBfXgGTWj]i@9,E?6*6aVu>-H5s%^VaQF[iW<-F]^_;EHDHM*tm+=Q,@&fq?-YK6j^2-fp^1/5AcD?-Y/bgJ(6a%!SD$FZ[e6L@^aS4$'T,DT3S]rXZhu=/QVn&TIN&',:Ad;]$0!YhGCAtge!lL-B]I^pI@(%0Qr0<<\AG`eZZ=fUg"ui\El4l=m0bb%13\Z3dOrCUR5/tIMkY3b]*6![/TYQ]ac>/KS<UQg2D<jJ4uRkX4BG'/[4sO"<N(VgF_\rgXJc5pqoIIlfNBa9>$>k[.k8*k3Ejl*%:_uZ8)H<NrPn"2O/a*"(T9TsTk9L,[2SO.Hl-Q:sWgNhr`VWoY'.m7Pd`T>?,Bjp_M-@)@aIkWYbl'+H?.#3W%+Q90ThoCfo7f:F%/:#t6,9LbBS"2u3#5,gG$W[FdrIeG#`]3gO`KcJ7Z)WU)cS#*DSCAm,jOj^-f`^)5HEN78^2S#,i8Vk&GI>GlJ>ff^89iRq1sF0H%V$U'sG.2bg3]UgF?7eM^(6^I?,[T'uH;C`$S,,t=N)kre+]W,j<p`"YF8Bap4I3$U3;n#"Voshge]c&aKFV7f_Sf&(L9@'O10EF7%j*k%S&o`W.$EI7/`j7BQXgJ[!js$#jr$b`HrHjA?hAl^E$AcVN>6E6O"^Y-fDM>kYC<aa>&WXu[@>-d5FfSTHE2Q/h)V;K?)>Rqi%e%;fJ[nJoH;5LqUa\Z@'DO!h>c7@[QgW"5GCT)3MepB9WEOTsrXW%.[i?1:<D.&]qR,][b.$Tp"9$B$43sqO\*a&=3U\ZsP'_rSg%&6N_7k6gsiZ8E$aJp)WdrX6';FEI(5m`0$h]9,ZXCK&+3nlC]fV_=bf/..202[]D)/S'Z<of+bj@l@ah$_Y]JS2bi:\^Tpj_H(Y_%>_(J<;OaGa<4.,l];69Pa`Zj5BJ4:o.&j(09\;O`X!]q8@raOT4\!e!KdC2596^,-SRAtcRUMGga]XR<Hg7unUQZAeIcYU2Zoj)/%q/*5L3A:-*pXq7,-p!6*/`"YkfV0D.0_[)aHW9oN+k1T+(g!Y+B6NA#URpj_>g\ekP^C?A1A"LC7<WXRD,(P[P=.V@;t>X&Fu^P:%#@W%I^;t*aaqqW=-K2-a*8BZHqk?Ta$'r.!:.[rODY-Y!:UVliA#BCjnSm_KL8El)3n_:iW_+;?XjNM"l83Y9!q!+JDmM3CQ5/Rh%U0@G]/e"qJ4>e!5\[aR3G$iLGn6U3h&tZ2S@Ikeh#HcT*pWB0*+M>skjS[+N2!ruV[tsuEhl#cGC.$Ie]DZNO+M>X*B`BtI<X2'/%dB(k\p(%3!K/F[6XZ\Ve_@7Y<c2Z&D[*<([=r)bAfrXG2PNg-HVE--)qaQA"4`)OLblA`g>3Wl3DGPg?UNh"rN?4@;0]u`jQ?9af%:!lPENROCnCZdWj3LRX2ql+'<f"<,Ib(P]0N<F>n-WZj5CHn@r(h@`m.RJ*_4j`!hWOC:+X-emK>s&NH,j+V]qi7_)),3]E%!K'r%lfIOcg<)qg=fsO'fsZleWQq"A]5JI`'.TS6EC$qe\t+hg7AX.5CqGTt$bM"Sg=9Y,0%=$7:$Y`jZlFB&>-'C>?qOB-DQ??s(P$]d%-0[>(g.puI:5`F^lAa?Y[;i#L*P8nD%/&u0hT"odB$,P?4>>Ko%CWjVBV^upOnrjTiR!,WHlq0`[5>d*T'@4LdG@C5Wa0CSq\[8L%3RO=5nlf,H@9J=%5boN)<b$4U(ru/U[TX&\V?n_mQfLZA-n8*#O=a3XLX]A-G9Csof#F7p;BAn#Em;ZBCm5C]_6#X!gmS&`/JnQM%>gOfuQ'uDBI&A;QKdrp9$njXQFR-A<(ECOAYa4abH(A9NJRjft,C+sFRGp=Ccn>!CM\msGKgdPi1b0Q7qMj6&j4Yqrpq8j&d,RHe%r6B+1)9TK4.A=ioXUF[/fY<.;rKTFMWGB.<jWChtbcZh`Bik.UjSH`mZI0ra@sM=$Aoi%X%UsVSFBh+*1uo:(iPOa*TdBt?3a\23%!d#=_BUjjrUl2'"l7#Wg;Ghs>@fVk'-bHFXB.-tFNWO;@")(WPbU*\DkmeTNME6b!1cYgW@K8!TCi#jHmEsc9X1>8Z5c6>e%Wu<G%gGeF85\W-6?f-Q4ISq;nVP8HM("q/BPg?<DDRH3d*krA&DUkJ/RYkpr<g:r,-?3<[q/D?UdgC?c.a"[`]D.qkHq)YlemFZfTRPu0%7JV%(dUd=D9$_$32PIsu\peZ&elm)]RF_%P)9K:`gec_)I]MRb;X=1]ibe"oY+K:TS\nVhp3$=7c4/m6Y+KQKW3t.JZ``TVTltaI%\pi3_Mi,R2MKSm!"a5k1d0b$pPjo0_qWVcY03d&Sg7J\l^T=-3T64/K(%%;Z>sIXTfi8#l>1_)H6$SVOeFg/NlK:.@d\a1>[E"\!%-?5<hg#c<5W/..4lMAm?-&Ye%QAeF?W9\)5?SKekjfYbYV&WLT]>'*3Ib&]lDX-bo*qR*\>sG>*K-P<FH@0VrC)Y'M/5t0H@S01F%[HEk$lM=Xbos9I%F<2b%-/)<Xp:,nkZ`<>(?.I87?^@\WBB=(A<L=T_*gWekB129ilcH/(C!J>cWVcXZlM=XjFA\QXV7M+*[#O/@%Aa8eGNI.n6>V0+1c`i`ne?KWDFoACgZ&7ZT?.AOgi,-)\\pbPQ>c?p8a^]*16aQ.%Y+sF2o$9"K(g<Z:TD?,81?gAXL/M<leYI2_%Fo?-OT%?llcap-KbBeP/lI$RWG-S3B]2F%QY&kP(<j1heO2BFJoeVPS>b\CYnpJYU>sE*ZLL`>L]rmt_0>jf=m]na=fCa2$pUY0H%5O5=uX460NY$,&]j'+Y`SlGCSR,19AMg;V2lK9R>\q@SCelD[-/F^j4os:gdB6]:c;:j.*Wh3"W/*AW_Q<!m^]PoCOolFfU>d:H(%ktWjCSm3K%8ZqBg(@OQD\pi4^+n2aZeFg-`%&l>&Q0S2tJ5T=rDrG;=agurP2`A82g84-3=o/<eU2-*ulXp4&PQf!kXQsMIRX<7G%@e4L&qH6TcNT+3FY+P]4d&%qO7sU\TR$nca$/sSa0b(FHNX^2nfW]-40kBZrY74^;ktG8lg4o:_n*B8OK@$Lj&/3&7!?ju7-D*7:%WUSDOU(I4Q84S*_oBL2Weq^uO*31ep@X0`NnYQ0Vo6nF;+/\&3SLe":KgqEl5!F==*8^'q9At89Z6-eEqV5M[-Y%_0AZGWDmJ4</%eg'bo[[AU.ZH^FF%XT1a`n8JjSHO<8=od7HqQ&F`Dg$l-lqN]@@;j/@>O64#?"'@$^Q7%1=mV/s4bsU$\'Ti$IG9)T:*q@9S]S86%S=E8CgBWpfG4moO*1,Ml68Lck,!/"YBDLVKn+aKTk>NFOTX?#9D;IB[jgTsXVRFai?Vbk%0!jf%X2@[hHrW8_ae/$YaflBb\C2"]%WmOdeq[774\-?A[;;\2DbkOt\`tqk52mi5*nYO'.5N<.Gj6)jDOAJ_.*kW$Pm7"@9^r!lPbM?dfNW\IUQ$WA>[>&leEV).naKr:T%gDX;R*1]g$l.[hN,ZTF`YJN:HMJH(,OI3t$oo#53T16H^h<%%9@mVKAFHt13.G:,F'9^&:RA'([ZuRADNT]"8C1H+_nsPX#gH/ab%g=l&k+is?gIdBBubqi^kfmWt+je:Dj'9pqh_":U/\jN82EOMLZHW;&ERa^9DmHmQV'(O:`J]>M,dQ[t4[Fa?s&YeLd"Hd-$JAWL`%qe\,]Pg=a:BaPq"M$YOJ43Cn2W8Q84>7_M!BnT%,0069]n1c,8/B;5h0rF13M$=WrhV9tr5#4N(Am?h[=q&G,q05/mkVLs&"L@TN%Ce/ui<F<%Ynq6msq>_OSbrgFT30pbeW(52*Q[S\#-EB>'LTb?CYgOXWEd^0R_N#\J?Aj.-l6@iWUMlV13>n4\.1=he_ST>c0LHqc%H0@>CprY-4F`CFl6^%fPOW'sT#>pnUbXq"2qQ:^R^-.;Y/n9OJ\6sl#F6H+152ME>Ku2@o7eSLF'anKIOCdhjn4o]Tb1s-Vkl#3(%O!9h:6@)^\$,2`jP;OW'PksXh1kh)b3%!l`X1df*:=SY7A(7W`;]ICQWnV;im5B6\bEe(<gUhCccd^@PGZ>a?@_1PlO.dAAahc8.%cf<p?D>GRbdB3TUdGF)XDDtS&Bd"[[%FB;80`Y5W!d]IZYL^]f'`Wl;Ii0G[PobS_&H+bT@%ZV/#Pp5QHg%/Icn<KM+R>U"+PI?t%49Q57miVfgcf03HL+a/j>T#3qIJmCW(N]<ON#QGE`;mmoR=m66o)/sFq>j[9H_^e7`<.YI$NS_kc>$AY3%^7Upb[n9+p<9MJn-7d%GCK$Oo](CR!JhH8IGZj;%A<Y*eitmf5Z51_`J@.BMe'_mGp:Y>H>$h/5oXuf7'K)T!=u?\-n.Q"q,EGb$A=0)\Zj+-:\ffc+OCU+%/OqOQpI.8d9]^53`+"22-JCt/`ZK2"PBuI@M)OPW'KnD^.I.B$.]6INJr'c-$7u8(X<L!%k\Y)=IQPXV5$f`*;0a&r[Y<uIdnB%o%Q2?p'I2q+#A+<6nCLZVJVQenBT-7Mc7[`,d97q!o0&DOT;X,TYgQsoiUSJ78dlrUr1+mMds3;coMd4L!Duc'U3Gh%$L>UU.'FfA8%(=$jdD=VVqX(,u62:*0'.%<TtLjR86_6-U%FB@Y97W_lL[O2S5lP\4!6WH?!He?VTK^H83?&VS-)nGi=l,_>B?h9E7KWlIHV4$Ae%mk"JcPYTISMU\39i.6CFN(a*7j&QKRD_NUS6bX`[pRMfZn`tpP4fH0(S)#Ro`kT0?Q0<[mSTcS6p[q@aQg*=U*4,+cfdQ]!Y40:+%AD5D=W'T5Bs*ETb@,GmsBf+eq5/P+d0maW(5H'4O.Adu+eNm,=pq'Qris>e6b8J1X>QrMJFa)1e?0gd.[[VJ3YN4sj@pU2L<sD[)%!:W8q!I1Zf<sIk&>k=U,/W!eL&-.+35hl(NXun,d(InIcn;'^1%KU!^\]?.&j4Z^Z:$ES<Q3RK)\EAH1l%Jk[%qHq,BKN0,#/jE@%G:ulbb'Il*fFFLMN<U[eV02?Ujs5FQ'E$\MObCD3iE3N90<ec1q`%Hno.Rf*;!F?L89ccXPH5/2gT/f\4^T\d3]^(a=%I^S-hrcV%;s3'3:=_8#an[-0h\?^%4B;H='8U\OH#'Qu9qNbPiYq[;TM]_uTt"/p+t.(B9X"G?kXo)Fo\u$51)2>o?rCFjZ`Q>s'lM@"+mW9S%6SW,^#^;V&dXMeT`cX2W7CT.:,B89FT3E=oUd:L+4C9ObiTt)HF\p2THekVniR$QXirSL>Q:iHrja*P7`7X.6;Mqll5UtnY,0]B8%\^(0q7Oem>U"=QXWBPboK,V^2%3?,8lr=W:)B@[$&`W6q<Z0DD4SHk2q0%i"f"S:>\^Deb0f5gOPka13E8Yh7cUtf!%=1o8<!P8^%YK+CI<&-]a*Y"R_TlY\e/ned%`n"LL\6!r*q@*:(YMQ:n,ZlCB0q1l3l+&,S)d"!RBp>o[DKjN!'[ObUq.>1,^9&_fS1Sgp&(P1[%7WH4erPQcgOrK*g3+:S2?Bj6n@4O)TaP7.QP9lX:r2$M&pfin63nk$JPSgD.Y'*n0'\dk(Z=4qV+#Q&"1;3U.'q;Nqe';H'?iKKU%#>Sh#mJV_&SIWQSf&#7&f%I=ZXfAVRRRu)CN/s?(pN?cX/5pog_1OgY(gY?(LTN^I+2ePU^ZG6p-A,P2>E$r3XIYuCn:P,AnCZ>p%lHse74V1MhhiaCnT6%#d(6,WS3CQipWORL2`nF+55o!jQ^(F9iREm4VqaV&B-!fFB&f9PM1)h.N\M4;>`t*U5cp6MRc4qHacp0k&%Ts#NOdpj6uqZ6p&s.8[R#!ncq+Ro/cdMJ(JV3X@P(UDpc)$D+t('IJ<"Ct>F;2"R[A4mmB+ZGU)J*p6$i/:AQ[nZBXX'+B5)N<=F%i/n(o`cGtVlWOKZ/8C%I;Q1c?`@RoRdGriOP%>H^cZuc'#9?>VWaP'$0%gEmi-jc9A4d@D?YN.F?sXAI1'd;Iap'&j/Ya;D>*Ch<%(Rntmj0@.sE1LPSDRg`b]t`p?%Q_D;Do/+j4.cPOe87V.>_F+1Pemu9Y)CLTZl4_Y,%Z8VYR?5uJL'As7-stAbk3`1L.^dfB^M@h%*?]XoZ-T92/m_F++VcmClT1+Mk.HUlRC*4[!bK_"G=^UNi,BL]NI%?FGELYh4\gYPWa3=1'9q5$^,WNk5CQLUUY@Xb68FQm-_CNG%E[3\J<W+3Z=V8^>+7\PeRo:DAWSQ+_R+!Z+>Pj@0EqT5#b@j:Z:7-dT*0O#k2[:5@S<?MA`UB2ReIFDqefJmm2q2dVSZS.8FuhjM%\P=stF%,UK]h9_.f1D;$"R?=<OP%c4#qj#[mQ'9YY?oq^+udkAN[Y#mSb"r=NJaP"kZZCE,!T2ZQ@2u)D7D>.aOb:L6g7).<"+oD%>.@\QqTEK4oL!MSlF@JCeZZXXZ1SdXBKsG%C90NlRp@UC[u33^FCknfM4mq)X't7EEcWU5#`Ks00d*J6)i-4nH6>"p!.>S,4gMo+%1s7VCe%P8DmNhZagpsTT<T>;J%do:Z[lo2M^qB5T<RO(g:@Rb+^/;m1_)5</=qsggNi9[Uo#5<p;Xdj/Fmr9RpUYS8V?@%U77lNt%JTi#3?$->Kfu?29.M(PsbM2iY%d0%'"JJ8##JdXINSl_*U/UVBPb]8pf$>p2eD$p^mu47#n^>D$0tofi%jVMhI["R%cbTdp(h5be%2pt%_Eu`4APt6&0W%#;0FqNQg/()C#0'X6NZ5T8an\M=\(10ifE7bm4=0i:oG7d[f'Mrb(Sh5-uh'5"7S`ENinMDcA>*-S`LuCCK%"!16k4o?5T@6=cnECgM`Qj"W(j8tiD9t323J4V91^JtYap*fF\!'=n`X)n.U3-1_0E7IW7YhfMVb#e;3LX7:M?0u^(oBT]U.,2ma%&am6onUjss"nnGfRbf8\0?&):(\d"E)2[T>'Qf^1.\oC$V&Y)7"NN>OAo_c;b338Q>JD12]kB(T(Y[7PJkAg1O"\TP!'%a3&^\bD%*IV_`&A'$;j[LU`g^iq%6UuD1Q51eq=1WaKa9LC26Lmm79`cf0K<<IcB4:fESHAomg?;#1DZHB!:q5@)Qi*#W6/t]!nLGY!_u3m7%Ad`g@3I7FWmVZ)ICA1fg9K__&_R[<TSHE:e)I)lgSgh`[*qX,EQ8`uO.>KTFamHioX[nZ!S@E-qYrt]b6+6Ye\4:XgnO#D_1ph8,%ZV.=IRba_XgnIGj?OF&R\\JN^ZV\d9*((.u4JmN,LElRrC`Wc4_m<U93*#>+DSge*><7uY0^7:<UbIj_SF)!,=rkYqcQE;27:`b2%%jg#YbVo.%e&WK5*^mkh#EY>kE^?J"1o.(I]5LSD9]Z_:1V>Wcqg@KLWojf-G%bYu-o(1g(7YC[&%""\22dbZ%)B5s:g4HCORHQ#%G_6H<fW(aE%bQD[^0!(FQ.^d.2#n$d3s.,kLm?YGj?72$+Io_Bp>@A^1L^k9^HI2TYKS'KCg*,5_MgX2%+mofkcY8],9T_XX2m_Y%15Bh+4_,%(&KMhs%MJ04,!'B@LQIYVJ>gmqF=?Kn-a6D&!di"J#*9<C$%a'dekaa`(R@T3r6Yk!jY;sNq\S-rKBYh72!E"`"O$lJ%nEna<$!]l=lN:`TGX:\)],$,ob::uqgol7fQB<'(Bg_GT9)0BQV99nkpFRZYU(b)kq>LDl(_>%-&GC%E+,,i-P,UO)+1)RN2laC=%!-T5mMVRfg_#B4O+oCoSmYbt)$kc(i7)tDL?\%nLSrSB3V4qPB3_!kuP)b+R/@7HmXB1">iCM#)\S'^_(a**,/Hb:f#'Dt]#'JT+%o/XrnQdd`8Dd0-@@S'$TG2G$T=H65eM&/J%MH'd8kW&F;a9"Xdcdg4`4`D@]ZA7=K&3C#BQ2Y=P'?CKVmIM7O=,)a@^h/T<jS_*4%=Lge>8DnTVJ(q"FX'B*K*he^(/\-PW,PXU"b.HXF*l!%pKR4b+U^MC4#kpF_.S@=\6r6!THX8^U^`sVCHHisQ9-,5a?'n.';P-<L%"H3u!i";Zr;oO1P;4>DY2n?9AoluZYj;`n*-$3+>S#.<:!;5K@J@,N:!@5!K$p[C2V+ErC,*5=qkXEgdSd2HS.M<Ea0$H0b,uL,:%7g,[`$jHWQIUQoHJ?+b;Q?n,-+-#KSY<5MMm/-HW*BSA;"f4!@iVadX]fQQl<3)@D?rj'\&$734<_bo_9Bm>tqqg]%pr`T%SC'R;%"Vh"4+C5199\/*7AuFXUSKqY+'h1;'p3k]EC#%bCD3Tqt<'<DM"=]-&m1;]2<(pdX=AWTIB-W7E+EWmId_nZTXA"Ees(*aJhu&jr%fr:K[l?hBei(.9#Dl7=Gh6)jl$oq#GFXBfn!M)Wl<1h*lN).:-oQ_chY8,C,O-QIBh^.PEf9f8&\TXe\^:a%3.tp7_!Jt9F2[rF!%/eEPhMPH-]'uj4`!bEK,1B;mBL!#Ge*^?Ts%k;X'"@E#VN["Sn15[:$mO:"e,GA1qSqA$m[$?TOr4s+KYp?)0R-]Q-/BK;JpKb!1%kDZ,QNi@uS0K+LB,3(rkHiZl$<WQOi#H6DU*!q3Te2p"`+k(3k<k/!K+HH+)35m/fK7d+1r%#c[XmO!B6o"4KLWbf+)$S.<iL!WT%@2'<5%Ftuh=HZNh^C05+U/Gkk4hEXZ&r8t5>]:SH"M(cmZV=9Od`=H]>I7-NS*7r*.gt+FXTHAcCm'90GsA^F9q\mFDk4sWf*qs7%LDlT?fK'UfH`cfL6kHD(p^SFO.:Zn_i1Hp>#m4D/-L/QOBOWo8!_'2<7/bLH8G&$0/0gF6;.MHbG-TL`rhqq2JZJ9oA.G^g&L0;/%'nC/->kiYqT50LcJi1$QHK?oK*VS:J6qdDM?$<``AV,$/e7FCc>:*Lr&sjWaCmk)nrak`89m`hM]'OCT/_"$r)Lh3=b8r9Kb@DC!%"c;6_?Q=SHS"P[E=edP^mJ_$/KBb'T-&lj!f:]_M1sde,.ZsuKfmQt2&PE3s1n#J[KBGENpug*GHhcDXd]eM?!ufN.;oAZ"#"N(I%5RchX;+K]p_A=@5Qt?CcXE2eArKXukD19[c\dMNkK4MIhQ+KlHcMr68TdkD>BQQlO;8-eKc5o+I-,g14gm!kiZ3OOpQPfpA^`\XK%es6^%gQPg(4Wo&Rm]s_FHQ]j\C`%gup2GN)$H;$A6"LRi'i)mSUbQ2m).2DJAO==L#TDIXX*^B=5k,Pu"ZlJfqZr)>Bn8FKkK5&C%P,rM^?rS,iB>@ru?Ni'F]dr"h3$!cWdXk&%drKi^6!5m#7sga.$`9`50'Q$je:L9YQL=0$gflI`?C(>^;EUp:IG5;1TrA2oWES`L%T#7*&Z]I>2H'\-"!kMjJZ&@`Fc,tmU]OA\(/0Q$_P$%j6'im.b3&""HRD@Vr-J2a/Do!-#Ns5N*O?"NA%Bfk@M1)RDSRI]l>0C\k%%)CXk,%*;=&@Th=TN$"J$g&[s+$Q]0jOJIa^hZ9Y$IdbR'u?k6WTQ-r"d>H06(J8'\h0<-Di&=unUp&:AI;G3+T@["aV<X#OAhES%JWHp1VGJQGi]4*,.Cdt$Ci_V)_U(P6Zm=i6<Cer;/q#6B@XW>1N<n]_&F4^onQ54(\&q$WdP&ZT2>!=u2rYr$^Bnt\n7_T5=F1rU%A6)MtQk2&;F+W/Rkl>]Im4D+Ph>dR&,=dCf(-su(c"q0('/(uJE4FP5hd;RMX`eb5jVu5t97_O04m.'.IMHh_10-6=S0O$_*.1UI%EbQ1!6coF\IBH*V#[5/k^L9D5))Mrdc\.QP%)q+EGnG[W]A);tlL#Nc#nC.FTgY.RL-ri%SS(X5ftsDKA(\m;U4P3,D[:St@2/'U%/0D]AJ3_"D*iMMf(8ag!dWIrO\pmS?[Ahj4!^nS*K&a"c=f'('CeLio5IA2$KNr`YS%r`B^;t*a$N90NppRpA8I0s>kua0.Z<imc%S`0^]#q\Xj3i4,MF8(*A$ktAFJq.g-*=&1(VLFrsh8kUGc<*UbJop)20NRCZ&JAN]DI\CW[&N7u<lRj<e)iTuB\K8u#.^F@dmKG%%^YJ5J_*R*J2*E@BLF5)p6aoT!IHZ@o+bMaFUg/Y)Zae/#+QJ#Bh"VUm6^Q8.\M2:!`muPSGh2$$D'a"3q:KU'0Kadh(=!Yb\Rf&_%-"h+8qOMdPCoBPeRQqB'd]3s<T(m%K$(H!;E\D7m7_)+jMQifI[FT?$[0[cn*IkYaKoOEhOg'DdMk(2[IcfSB,H2850V_2+K=-?^%.4H*tM41/o]S:Ja^g"HP'1tr?hc*<)jVnQFf'$e03u)jbj$2X;`.aZNkAEakE?dYSp1D8!4f\%s#[#Y6b6Ed]8:D$*GfCI`R_)i'%H<a`Y9ek`K=A)haRUXDuJ1B0JVPnl0BASaJ/eC(YjOj4B72:/\CH)P4#?t&XC[ABI1\8Vm%dl12fIKqkNR]Hj>0`TTpRK,MhcR+C%RW4>gUi8Kf7FRB#?g,%lK=%en:>ITL0Ba]F[[ap;&Be((Fdg"pNRjgN,:8T%X.69cCa<r;jVTD$;]-)#_.+jQ(tNRQrZc"1g>%f'%^r#a[rn,pa(h81?Z1dNlUdJLRA$Yi!NDVU*V)-$WHn&&U$ITG?Z^1/)9L!3F4)3("UF?*),pb#O)#D(Yr1Q7"AXs9mc(Vk`%^^4c%Hrch,kXQ`bY2%>p%-QAr+Es-%\e2&1B_Mg''&g9+r5oAl_cWI\3,i7]k>>ed\$41Y!;O]^N&9fFbFhb*ZV]P,_K?cpp`hL]F.J(V%:<kh)$U`>j)"]:%Bqi_N1.0dh%5B)fXPZ5!G%+EllJo(k),8'qg161L-"f(.+EE](g)t#b8@?*oRsrLEfiSl9k;KV=T4a6d7dE4i%]LC%LW:OrXP9sNZ$'7icU2r.tdRaC&ml`':-(UZ@.F<[986KSh#3T+u/P&RO!OVs;DnD&90Dc1'GEt[e;e._oI>aa,(;B@$ndi"^%c1<>/`&ls&JS#D((89i%pXmBqp5OI>2/bdlYjTBK,#AJ=.uR[i!c#T#`$h#ZI;uji'2`Wk1/@94kQ_=Fi8cX2_H,pg\5P%\Kudgb%PIRda^L%fBq>U?LX!Ta@M-o.<juIIsDePfmRHINid_3Rmc5.."4*U]Ko9J@0_EM:+%MLI6F"XPK4>>Y3jHq38"#LT$Xk/)FPN\b!%6J,#C"cn/TJd\a(/L[C(/\'`Ogqq`nLoSbiMGn,[Den!-)Nro>/)QGU((uK]dtjep;3,@f$n8Y^])1/I+0R^&L>;0kTH%lYSD@,T%99St@VE2aVG>>!mIElbk$BH*APJ#6'.[`?tF#49UkV>/d^Q+p#;pX8"60I1DV,+D9h`p\s%+VG/HuRs@<b7Y&9#TX<N?$m*/WmaA%b/46MKX+551a2hJ^ZMB-k)V0K*ERlq=.QNW(+Q<Ig>sPolE:k:2gLf@%3=Q(WgGF7lMJgA0$BPKR`3C*P]cZ6d+VF5)7b^`+*Smr%INm_fIA$!B6?SA-3@&O@ORsXMR.7A.9I^9W^mJF,H03ulk@["_"*-*?#<l<"W,"oU#9J7r+cJ$T!8eipLJ:*<7(VnoD34dmY^NfY%`s*ca`*JUH0H^(pm.%9?Tec%+..6KT\BZ<=>Dot[Ts%ZS</SK)ae;t+#K`oA?fYjI$WT7UHr9E).c:mj$<KWS>p1+Vp4Z_SPC683%ROG5]FgDSFc:GF.cM]V8G=K07BC4EDO_tC_,O<nJN-%.H-a-1T1Xb[[^8t>HEuMm.RW`>>gYj\rCXqj3F?:ITiDdE^/=ViTcJ&Fl%<EN/2,=r3dnhoI/9iB!nou)S&l#t]o]iON\El!X;_mIY.S8!2Zk_L-Vq<HhSSrn2OG5=(INkG!B\>AS$d/[!a"HF0UEsqH/$/>B#%)K&"<;9PVnJ#dta6Hcb.n^a&IJg9[*,q!sc.Gisg(Blh9/-oBsXrI;naho`aO+H+"AugbC$Z^j61FOGqnKEZ+7;Fl:%Z)oe^Hnkt%V(b'NI<1PAC">S'fl+ig"SYYX^?AMg$s0ff]Pt'FqQK[8W>?j%QWL6lmO7@,m?:;M?h*;W01n?Uq5RtL!sar>G>Z4ZZQ?Y\QAo=P%*8=]OYZ->c\m"7fJCaaJW^q_<)_$)`h*G,Q.+(WHC\?l=`kH/@DLt;p$qlD0F*oiE9c4k88pA09b[G\(6(c;/^C/8DZlpcpZV]d`%fWI,18CT7W5/Mr8Yl-W-@ujJ4-h#TJKH<Z/(%,Rm&&u$f2$#%XF1<*us#Q:4orl+;kWFYZi>n^2P\Z@JlQQP$\f,8QZ!I?G\(bq7%:;TOhkD36gS?tBX%$rFSQ,72%Wk+>FB4cLG9VZjh-pJftle&8.[e6aa6`93LY4sC!AB*Q8(R-O^=@r4s?OV/!jotsn6K5FbA8lK%%mU!XM4)k#Dj<%Uer&ZFIVZib.AlO-K/tJ)8.2cL!Q#iCQcTs$EUqNq"N6ad>4uFrAkVf$?h2h'Aa(QK+jBHU!qArC_4ljC%/.SR[%5Ia:C2eYQEqTf-Hg=8Zn&91Rmg]q.j;W^0e>Y7Q>\1Wru8*qWKk)u!U]#p!%gYJtei\dXq`OGm1Xk$`+opmco:&gsVBT23+4u:3m%UKV`lb."Se(b,Yh3%I]DcP?g^(^98be#'!Vlk-KTj0Ye">.%P;_)Q:HRKa8.2WM0DBj/bMYQj-pWG1('`WJlo[&IbCird&rESAo!%NN$qm`bG$K==N";"(<(W=+3_L)11-#(k(n+Gr_e!KOpq6:pR<Q4::-mO_RH"Q30[S*)s;#=oaD=(O<t6[1*.)3VK]MH)pXt7p.mj%/34&?O@eQ&77qP[$U\p&;+OCB'B,8,3MclpMceW=b!iUA8D6s&J0YS8\.qG/r2sUam7HJ3X'[+1]GkTV7o^sjo]pkF3/tg$OG<.T%X:2Kl=9/OQYJ)Y(D[V>T+V,26bJg\*nc5?\fO%ul3(0CXaS>/(r-Wa4)pT]=b"-*V\_Li;Dk0+4MHNA5!-D-):-C,XX^7JqipMOu%j:njJ3RG/9>,/[@Rk<;T*Sf_A:&tO$\b_et=!(!nMea3I>uKX^//:BURo:N-BnHYBS8E`":5Ppa98\#ARIeZV\/Heu5PJ8=]\]['%_upW>pQ0jKD[G0`(-4\WS&BQ,<0N<c!f%AF-UN[>TLA]%Nmkd_SZMpn'Z_gkL)Vi7II)$;QU-8T\jP!m`5g"s=P'01da:RIYD*rc%pf@#\JEVk1qd/gOR\#;MnHsq6Xi4/b36'+Z;/qotccZcocZnq$QQ$9)8qk4*M^to5S"j2O\ABYRS8AnL+=Fu3b!#$sf@/fk\<WD4%f<n-<8ZRptDsPk5=B'b"CXk7A3n:8I[Hd]R,h7?"VHUB<)gA,[]2*E"h'8slme&(&Jl+-57gR%EAGIBo"=]pWfKKh^&!.PVF,n^9%n\GT?&a,r9R4..KWUb1tCVP7)DhJ8F3S:A%D]s-K*esm-3Bh\L9Y"dHCQF!Zq8*Yn1LK5<mM7GG1;7`,.k=\hq)&gM2XjA.Kd.7\%p,r$fSm?+F44%08i3@YD'tX\-;7IH=/Ub5:7IYDe-_K=7X+JX>]dCI!'T/UF0s4QjZIkjc((5`7)T<1!`@7;O0c%;RnUje;@Gd,i%N(j.GEU=C<OaI4XXl"<6He>"mY2YZ?S>(Y9[.UUIjjPDWgA*$LQdrVS\GR9JY7W5q>$1p1KVu$e;MDR\EIMIDi0(@b#7'F=Loj%Q%Sj^!q8SbU35br)hGA8Cm^2&SC\J8usM.89pr,76S.!C'Q;.-L=LD9WoZ6^Sa*/u=EM*nEoD/RI&?/gZn'^\mFF#]@C,)]GW"=Wn=%0CSGILC:W3DA@.tb$V6=604qJHdrPB6rI&c1CR/Qa[V>pQ<#/S6HVfVQmE.H]Er@F>Z>]h(HmUJ7M!@,nn@8p!qn`QF'0]<YI+Ul%oS^YeT\aMQkmD#n[lhE10LMh[Q`l8CbcK=$[W8HYj7#%:EibGc!T."]_5Ao%ku!5Df/<?Q=aSXqd8):ge6..J;5:5R;ePJp7smj.%pSeO)HIR6<lg^s\p8Co+8h9bf=aSXIeJMB[WO);sdn-dEV&R65fr3&WP^CbCSL6B:!nt"n>2QDXh6]GC2ET9(AQ"8Q_eVn(@X@VS%QqYqf4GV8qI<BFtDWH7+LRXY^Rf$+4k\_9M,%@$)3$Rc^(:B6S%\rp5IF):^G6md,lN0VN7?("nH@WdC0$$&SF"'MQK*k`1G]7UT%F,a/_#ks>.&7<9GJsino(j`KhI)2=u]7PuY`Q4G&00_CU-:mk=:RKGf?%h)T[X=/)q^3cXg[-,pE]kgRl<@>l(S3LIK0`"69bIq4%gmP`N4V`b#?-;!4!&@7G.A3IuMTYY(V^\[gI^GmJ'pS-UGCIDl@0qG-#(UnVU=.(o>e7a@KJZUXIiV@p_J"A(N-np$$;u)oe?POi%KrG<ZX`@0c:l\F4c_ZE_JpLXL^ef7$>IttGq8"MX?7&=N!88FXk*[-u?B.hmP`bKQog'",,)$T\T#,`aO^.B57h75n`A,%_V#9/_%AP"@24,D%K31&qjSMap<qO-iXZO7OGjn#k(Tc[S8if5D\d=nVEO^&I$M$<!nmN=j')f"rhCaC.;^-3ZMNc8Y^.7)U9DD;l,qP/9q%hs+2`\n@,Dp55V@1"o(Sr^Dq1SuXi!pKU6<1<aT7\pcgr6dG%&7`NbYe9Cd-dXL%nWbcs=(#'>u-'5kW>cYfrlIiNGk`GbG/Qp)4%Yr:9elS3A%;/B=d%\>la:=`0Z(rr)aqH_*lp2d6*LT4fqC=L@U^Z?VDiFGU`Jj9"Hq)RmKT;im*\opE>+<]US3OhRkLS,Cp=\gY&%@!*B^6+?QAioD6b`L]hlhI\65PWA:2,0.G^6FDuI<`Sf(7l$#m%RGm1.'O5r&S\W;O$%bK43_8V''eY_%#'u@h'_T2=<l?CC#@/A%3qi\);a'PEq-;%+o=mIjs6Fb!^HP`6l#RSCMpGBZ]XrdA<APWBqcm-T]dd+`)#XEmEtra/'hnF.[@>tS@=&Li.)aMa;9su]K<C.f%\K99_?>1OZFhB3><Fm^3CemCpAr]qaFD+BA>fRpY@`Ku=RrDYt*3Yh#.$Zp7]7I<:EqOIr0XODWL)ehkXh[fb-MQV@*1RB^kO@1u%Hg=B#e6:F(g3YQ*"k$_D94?d/JHbQd>3C`RFC%8WaEgW5U[q+&GHn:abNQUU'm%rP@Mt_<*rifI/>MgZj'VP;ATV70I;HT'_FE^R%EUH,3UffUO%c331c7?Cpp?b+ZoBRmgOaQ*I3krgoATV6mEY#>K^0R4T&Dp$ia?@W:g8$orhSTk6TI(o[@%W?r#Gf4943en4>6Xa!%20t(lIfXB_i/s?1't;K\c42>jiT\g6=@lA`"gh;p.j4elrR$-o3fWegW6V&LBYTkiR.u^[h5H[l=9qs8.'CaK05PU":</6pgQ&49%&W(GPn(84P.jC72B^Kt2eVZnYZ>MauC.6(ok'tL5W*0da_u,f@;<N#n96N^'0EUS(DqP_&.jEB[9^IRNE9psHCX4br*K)3H6\QlY%3JnW0/#i;l\gM'<73#4*b4L%@*V_f'qca#s@gB^pK6,r&Yp4"*:;PadMHjn5m8a`6hurd\iqHpb8"QYF/gPWG#?E(J^:(qZY,#06%!hYK&.7:*qkgFFl[a3K2I>PpqmW\-=#U1_f^Vl'YcM#_M^9=gcMPIYh##@Y2gWA8E,+FMFTE)^ja*J!</CpCR:T&CJ/SXUOo5o9`%i7PV>kLHb]*E1!@Gr<%uJ>l20oM!s7Y4rWW07P<aVc!s;2.I2,!'9QQl3D^7+s3oJrdn9s\,SToB0hU1Wb+/,P9*??6R;C],mo*>%j(qpsn>ES5'*H"Cql$<n-K7>8C!ed37p'gT(X/9)'Y6VLgp")uNu6J4lLlT[2$O?4Gp$WG1M]3t2IfN.q7PQbI_^R\7.IV]%pZTV%.:,@baVtSeO,Tna,HA]1UEj(/BQ;c*0(h/X24Qq2Ek"&;(WED.$ZtAo'NT$/`*N9?juo\c3oNd\dO?hj1%1$adn0#'2tTR%],mho%^i@uDm\i#U`@LKI=_6*N&&dGNS+SPUbOWJ83`-JNUTTEA@k1oD;EN"q''9O5<[f6&<8KG(n&FKYY#Ta[n+-p$H\=iuo%760lum_>%^W7FHDp]kYXFZ,aUFo1T*$)8\(tu'IPL@)^5&T4d;h<4'!_HkO+!c]Zh/9K[aSIE@nE4<Gm=`5J*UOXek[Pu4Ch/Fg5i7?cCGSBE%fnSi\EEL3ibdrDWZ;jIP^.<3m+20o1L!M\QI,Rie"<J7";dU=b)&g69cfSb8`SeYZZeIdJ]t@!bfU!FqWbfKLNet?P7V.5'.<Ojp%)O1bP8fF]KB$*S>-sZZ3Y0:B$,M_!+F>W-b#6_:=e(WPW>k>[O+q@mI9DtR8dm@[LRc1KPp1VsJ<%#k'O7G`=k/qCf8%biAFE9YA%kdodgc%O+mQcDmDP@4E5;ms9Fim^7^Ti_,US3)mEd(X*;Zu=j<4i0JrrUn6'Z:=_FcY!`4ZrcW1kS3MF("%UdU#F'm:FM[uc&8nH%P<I:dSt)Vjr?r62O8Or4NQGMc.h^Ms:(Dr&16O>rj"6o?/%OKm<a4"s7-c]W8YR>/+A"DaPsZF*grHl^MN%m=I,oO*]l;A2TAD#B%JEo_h:jnqdZ!4AA&(@0Ojp*Yn"Lk3Lp]6O`iK0)a`)aNK,W.ng%Qn=4('D9l'U9/&X`&)@FjhbRI2BL,W7NDpA9@.q;t7"J]Y)$X%._^]4ppI@4@gT&uUgmBo$(ZCB1Cq/&#/p#0/^OU=m,i?68T9N_Ch3<&@Mt)2bb4b@CAtrFm37@uO?/3iWk&\WjfLj,9PWYI@uV"0%mKM.g!IqS`OY>5;Y('QA9QHm>I:.Y0CSOr%j">:\<np5"\dn/rcAJD"n:&^V!ZLYJ;On)J_@BS<G,(.VSjSI4&cpqtUqpOFIg9F`%N-t@^I2/ut,U4402V"hk`"%B#\As)hZV9e)5+0?AcZ&YtO9`Cgdpo&'%<uiqJXs`M@.Kq`rS(-VdDJFr14RL;R"k)4O$=I04JGbe%,@3m$\<oaK#S6$FRJVfYJbL9NIGBR0f*?rb_1PHr2Z;qTC3/t?OeDi];Xarb&f@"^Z&Pr&"K-2J%2t/aZQ%3qB%'g)&+TL)#m?OX%V#l5r)?fZP;[`^EL!5;R6C7hkj$[S(5fdsq&;'#!mY_JT1`I>9WJM)f1+(I8#]3F(.$T3NZl(i"R1R#p"skCR[_rRWpoK^1J0T$T%TL.r9>64jjk8`I^UE]E&Do>T]#UZDF7uq!\6D2#7nRR4V_#OX-s.8](#aJ(F^mH)MY0mJq&@1_Sd(XW=@0[KT71V[.o<5N[W.PRB%I`j?QX"K$u\E/ms?qlbUf)`VC1$jL5g4`*'&IP?srhZPT&otr4&;OET@T<mOM<I"9G#;>Q&W+)kK+uA"F:iSu)oDT"+<YgS.\(68%@#PX96d5'UfHlAIc.!Qg9H`;Y2Bofh6#omMY3AFSW2tUg'2i%P%>EUoWF]q^CYPfo,+X&nAFY5\YUU&9h5$Dap/g!79F"_p35ug'%YB:(rLp=!5_iSG;l,"mu@/)&2T]-g'.`M#AgI\$YQ<i]5eGY6JS'(u\.%[mk=,R_pne^';T+\g_<.$0Me[rSDrANU'/ia7tqjL1i%%a#W]OguXDMrKet>nhdQ9TY,0./EX#($4_'WgaCnrj&`Y(8*%T20I=Xb'kWRnq[d1N*LF0[BA:^N.1D]HWT't_``,l*nEE7G,I`"%T$VJK8D?u/2G\kp;ieq$fZ"Td[cW5hZ'1/X'=RFa?SVZrH]S)&brV0Z?i$gcbl=a2CO7p!Y2auIr=:gmLleoi3A^Ud+\'OD$"Qu=%+\IOl_]e7*MPdZ>$Hm!oIdq>PTBT9SkBULC]94aB(@1\dFP$0W3F,oRcNjKjcD%JdjkF@FS5/pa$d[:WpM.?BhtiMa)q=Xqr="ed%qY%P5W8?#k[8aYZAM\^Ts8IDjk.goa=6A[nh`eO@F=pgtQ2HtIn@-l&s8)Xm:HqrR9+Y$g.E,W#s7W)aakruqI]eh5iMYiSabO7%%rq2JeCOc2e^H-"cF$')1pLilJs7SR(\4.)1leL=gp"Pc&HKo!io3_M):&_bs]!1b;rTVW)pYj#:fQ$[sgWDb\SV\E>-_KjpDZ954%CKco<i8q`Rc,7jLhQnegc[P]7(NFf\iP"t4o',bthu1q0Pg;OBroI5=I.I(DcX/j%O6]$br/^f#)ismD+-0=^^D'%"q<*P-ca&W/%#EPM$M>+=e5C3#!(LK=PrRK)05(E7Cj3J/1rNAH]h62:tpp8"@p9RoqkE#)Xengu'ddp6VfUg)qZ\>#7Cl][_It%Fr_flVUq/628%hopTLkJQGaR"+p?rla3Es7*:RgJ`Cqrc-g:J,T/'s0Oq<@FtJ?iRm;`[.iT8mGk1SdN?5q=FMa!n%rBnI/8q'IHkNi.[8.+4k8E3%A]]A-VnMh,nC*/br,-B*(n7k(gZ+'tF^nW8ZT%'^IK&p2?[_Obo7(!Erora8YC=:%s86<2qu(#Rr:Rt\X"POZj80o\rr.D\7@j<m%SQBr&#"_kZ9m]KX?bI%g,sCpr*Z)0a];/.I79_=b)l_b"dWW8XD1A:\AUhj440H0KgXA-b7L66AY,\;/)GBWj.eo<89n0.Fp@;2&%oi',Un[,^P@TSClF>]:n="d2*7\SaEFuB;R\shgJf^dUr\m"CJIeDP2]BlOiWiNBMDkqu'g"#Y[lDhNaH+SO*@s^hgePcWpfi=;:%=(=hY8-RnVX7\-r<I9G>oi&Pkc%4+OaN<R..DTPdI&`mciuP&hp)buZpNN.QmE)9.f%HTGbicN$jkeGiEPsJc!ud"@G!VY`Hro=I%T/fH&q&Z>PlrT_uF3a)7?Z_Ud7;%1kc4[bQXQk2bcL,Tlp$_W5D9#QnB/UBKS+:CB$oG5u_I@G?L>E8q]a]+uF)UO.,B)2g4J$S2%l)M4@:@dXi+:GgF/^W-S@Mc^XSaY@g5;tGkUHXrJa(92XkG5n&DspKh^g_4LSaY@g5;t[GGm9ge^.k<1qr9@/s7:ET_JbifEJK/_%GNuf$I;97-ZN5EBXB=8GoB9k15?mgseGS"Qbe<mX-b"!,SQ!>9V&oN'k8s@EgA/Nf[tHa.:\?,SbK?;EaEojae_e[jEB%FbipM#"%l'pQnQ#.ilQ6<$tP`N;fqsbc5fK9*)C@>J1C9iCT-i:J*Xa>u<^A0>S(7!aE9\uWsV(4dcT'"DtITDl.7^Cf(]utX\hY\BpbDu(p%oV],qf?#eRoT\Jlg<pDd2*]@cDi;pLCi%WGfU*i=-H95\lFn4cT?:SN&BM25FL7rLCdM+#qD:gu@nctamq:5a92E1]LoTZ`b&nZn%G)k3dC_TL@iEjo+n"-'`qVOK,'rKsW3(gW.hd@4e2Ck?]1X>U[XZVTVSd>ac3=5=\ED",]rmoXM5,C7BCsF:]gH;`XN#G?sfo)WF%RY\&Wfjt3<c?QFJnd8CUG)k3tC_TKqSudgP\jh9`FkoOXq1i"s:>]G'W(k:[bYImh(\XH<&^0eA'UpN:;q`gYh91`np;CuSfbBS%%kWBZ<bnc-c2:n+++]\`]mq,W%3hG&6cX,-AZQ4D*f)k:_2@*mHAla!/1GWM6S]_Q@b>H:4kA)V(2#;TTcNm_"#TBp&F!c8-'02Mh%ELVedgA8qEHs$t'cd'.m"#Z=co0H__"MjK7GQkJIRNFmS2J\jOo4F"FHO*>TWR)B`l+1p[C"AY&9[/l?+R'dh8]`g!,G!lfQuDLT%k_RLBYa,#>:Lp((abfWr:#pPfo:#_!qK%s<IDeJ,S9@hl'bTuj4aRIelu'5CW2>sbeao?Nm2UBE&DG&hCc<lUm[[[m=^ee-a8XN<%Cik;lV)_n[Ie7^@"&$LoGOCi^E,4i/('2Gq!:tIBYt<GSdO;A"R["pSejSRA9u;)BSSHlK!SqZ=:MLV;Z/r(O\pp0Vo:.&O)1&GG%QWSTml'7aVDo]NBQjmck*.!:\;p3/:mpj)_etBS'a^ms.3D[q%^DA'>cKW'0O^k@.>)GI:eO3s(DI#_FgWGt&]cq76q<INoN]_Xo%NFJm6(U*)'GC&@ocV*FCRLc879X!6Vju46hV>*/K/?R^uHj=J^[)'7"O0raD$tMffF37L^),bfSTcsPe[q?5'Ae*_En]#=P3N`(W%lSin'?guSkQ=@0tdnT#t`bfK$3rdVXnt&KJ,gD"<AeX%qVg[\WB5(iH-8jQ6/<=Kmd+Z3a[6=Y$bq;f4P/(48#-'ho=:l.[SR"a%%>Jj]'[COjNp-%1ALgB2';B`K<'j^Q//?o<K0B`2s#.i'Ak0r).7?V2*l8E'++.3p`j!&7>&sFT+6N3aKQkB/]0!_:`+Ie5)j$gO:%B)6J7Pb#laQ@r0&$S&aUgmp99?l=-GBcPf2@8,9BP([uMD2-"iL*nb's7nk//mnjQA+UfMfq`&=9,/%Q,)KD*8Z\nA,i#PY,IWG_%fPX`3h)hm+f4*;0P*&FE@q'.9G$E3uYXFG@RmWmV*!hr'`_q6f9lk?SqhSM&`PpI_p_G'BKV<Ui#n6$HJL@m`4L+#/l+2A%Dlceu%h-`/jAXo$=@5:.JV?mK1?C[=C$\hP0>mqGKd%j&8;[KM`FMjT%3JgI..5mYQ?$G]`V$rR92'e(%=od]%f=HXfJ`T:+.nNBR\`,U#%Rm^:R5$+SSe@l^$TdCtq<[PaCX=79#k0"7kDWB/uD;)LInRf+rlct?]=eAF:k?j[%q\g,>F&'sDC)diGj6ncAlPJSpcF5ZkRC/d3%,=]/qa>Qqt#='+qJGAWIQ8h(ZXl:`qK2d_fAjt<W'1Hae2/s=95t\Z!Vck66'#rFuH.&SVVg<(oF/7e%TLoqp&lfU-O<kKKR`(YV%!9nr)PLM(J@`qp'FoO9A<Sqd&C!mH6RrGj6[uFL^mta]I9Q'$7gZo\""U5SqDO!ODXdY&&]kt\;?5(mhm7f)#IZD@2>G]tmeo]`_%gRNWiKtCXBfPMN<Qat&E3^q-?$J+6X>im5Ta0kCDn>_:8=QU5(X&H3Y.p1RZ/9BJk(1OmYd<4nqdt"sP]uJ,k1$=TTE=Ad`JBg1E%'[)@C`nJ^@/Xt[eb.N.><QK!"R;lt9VCXTC4&V(r3J-"fb6Vt<KFUs<Vrf;"nodFf3c@tG(&HoI?1j4'bmIN13rdR]lLks7PB5'l%'an7hBg.3]a-8[3Q0TK68K\fu2bPmeAkbZ'XD]>j<i%Np?Rs`qiF@9Tf)`V"<DU,$Na97k\GH<Aeh)&8!jH(kmj56t08PqKZX%2d%iL5,p(CC/bE,Ep9M"o4I'EF&![67he$1en3Q\*,3>UTS'`FcHRld"=K!'3%#DD@81'7qfqbP4klEI5DJUP?ah4iMEJFqOa%[Zt0/%WVI#<e)7XH,ncNQ`4.9c9j5*eIPD-oX-<akj\,`Yqkq7E`Z`pB=--OaT!`>p!i/CuAhn#qYDHlRED$lRduj#RmphETNj[XJ2)u;H%UBmtn";PXF_<p6(KLUYnTeBa$<UVc/Z=ifuNijPE23[%J&bej"EI/opD+i^D(<DFs>M(r=i@/("VT`QsR4,"kLhND+5e^%2MRZH6%]7k)72Mm,S:V<F&^1e!%UnM4lj;PX1P/aX98F1TTF&\;Ld*#aJZ3)@%8Lan'8/2a,gI3E&Cia<&RrZrQ``(X;fq0aT,=+n!+h!jT%?2*bf8K'[UgD`iTR]WKJEKM@M6XF7Y>%o_cZ+1Sg<61.J[dBqb.mk4Na^4@r+V>"u&htXiWX6e.m\^ajX^W`fS2FUH:TrO8C3E.1%DQl2/GMn<[\INQ;M$`YT:S&m<2Ed<Xf+BY),V8HG23@pr0CZn\YuK/7b%nTVhjoE^n8sZGdG9QL>GeA=iY%I0:"&CNJ2[WkVTCC-%<14P!@iGbo;4UnlNk/F^J:m:@,i;LDA"fh;63t<lh&Y<g0Ft\0mVE&?q'HN.0'Ve+Qq<k#nkC#d8l=_@70KuB,D6euWkk]/2q-JT%9k#P0)`?Gnm`nj`eo!F68:m[G5&JWV"mqm2e!_u2p.D5s?iUi<&h4&4KPD^:+mG$6b*D(T(nOLG0/8i9b:eEEYqM]_?hNj<0;38j%6_NX&k2\bEE&>-/Cdt$Zhp(2K$%B.%>+a3?m#Qp)k"^EKqY+V51FCA7-pS"'HV0tI+b$V;R:A$,Rcue21]udHa.#(C02mL"8<$)-%2dHMO<oIa]Mk.Su(.E^;s7t*AHA$e2R-@Zi2U2h*h>s)r0UquH4<.q=^$,A=Qs]aM:4;lA5<KpoUQPHE<4'7)9[#9[^@!bg0VA,h%+2bK>maQG&qnl[hc?+6R7kc<dq9GS8*?fe.XI(T9gZ^o3#Pj',DX4kAc$S#&B1TYCb]RZ+Fp)6[A3X:2YK3)6k)Wo!m>F(!h8fM6%hi\.1fUSbo`=Vb*hT<7*oZdc"GH^@n_=HD4qpT0ghSOYca5d1H-G"3BZu%u^ZO60E#Q'_R*p/?s?ZeNTj++6NfSaN,n^W2QRP+!G%L@l7A$lCl)=hhr(ST<ge\`K0;=IL,I/U#nuGBm5!@@+FsKoMRBg"/TXfVs@+6FG]9j1<aa7W4)42dU=<D@%n\Y[:i3%\`P*U%Jnh%oa[\_%\`8"U$_!TVd[&f[QB094,!<36Mi@.h$>U!fW[_;2qT^WisqjEQI1,mA^i:(f8NJkL=(k6%/G=dATVB?N)#=jSlssfaCrB1%.'Z-u"t\X\=2@nPa=4A>:'3s\"%H#feo/]BNV\0fdt!S0JG#CP7@XR@S-J>Ge"T_.DBd!:.Bj^M'pe<Q';r^c.BjRI'pe<Q';r^c%.BjjQ'dc\0O]0kuc]g1j@mf9?@$B&cND3/dY]coa3<_=I<,rm2Ek4#GK/i3$O\nBU#SiSB99Dt8A/!<51B#;!@3"b;,FJQWRDb90%$lI(p(s-m%bqP;PbUh\](s*1'aUD:`;f:!.CiG:S[Ro4lZ$]R>;kO3,5,!&'^:\X:Cfp:a?(L.O/DVc<7gguS`H/tdo/s9(GT2mq%%CE!`$Y[cd!U;kJ)!$nOJP^KGq&.KdXPG<a;"!hpk8<Ljq'?/!!sCAb$8REJ!jhQ;]#E*gEY[\@W\fZF'&,ie^rU+kmn2<QVBE/N%kRa6O,;Y9p#)m@&N,6(@a=snk/8<$,N$Ge+83G4.hdRk\N;uJk+uE]l:,rqjO6.#L"B7c:K)EPXB>DT$^dojTQRU5E(->V.O1U:s%J<<]&]I&L0CTNB?J<A79RR8?"&8)^$DQ/Q?J<<XO7M@#=!HUSOc6ruBl4Q`@LZ^HIHX't(W,7Nb9f>R*h*;3<q6S-J:o9jEmhl`&%&fWCb]]U:[rW7.)\T;/G'7,3=Q<PVIKII:N:2!+a]#6)A3M@,Pr>J<Q'JG3_efYY/rj6%g@Ok,TKQZu"V$mEPfq[CM<_s8N3G1((%;*-Kf9!!hGN6khJW"6pR7&V7!M:%\@`r"&DQPkhoNj;nUkQTO?%\td"*?7t97u)gue&hE9Fd1pJl6,`GnED(fcqrsLoE+%ZD@@UV%UdIL\JBpU#@d#<HV\6Tq-hPas(go1fW>lZJor7MaY]lTb?!f/=&*./$PYEE5=HlN*@gJ;>DZLjlL66&nkpAf]n\!$tP4?0m,Llt[%o0D=,Ss[jQM9ie!PF._%n%q>TphU>H<%S>CcQGdrL7T\%r/$K>,\Jpl.@RN^$fN6EQQlo*%iD&S?YqS!F^XD6"Gr!2CKq^PP+E,t%ooSf^$HPne2UE\/Uh<Up-6GVjR3Wf!`0!JLK2`WN%;]X>hEYZgl&[,@;+?b=Z^JdX`tXWWE6!?h758:O(<7GCAoTrKB,8OL,:5lH%)5FJC*?^RO?&f7P_@@hOTp8J)@re'#o9m^5h8!YHT+u*o@G\Z>+B:th`151@ng`,p_]%k4.A1Y$ecUjHdV$U*;%E4uW"B[F<L$F]%?oZk;Xoo$TK,?<t1;tA9`)Hf5KhQ%h>/V,^LnfhV#-!JW<\m'K'i>-5F;66`;,sD+&6_Lp!MNMh5`2cl&4g5oW[+EmccY3FTgT`P%VD(P@'%"F,jm-"fphV,S6A/c\$%l1j"!*%Q0`WB6<b#Nf6)ocm%Rup)(gs_-!=09-dhlJWC8-6N/SQ+*&0_U5:@)X5(i:5qD$-W*%rLK<S9&H%F"6Ine`fS^'ho:^*FnW:1NB$YlH*)/AnT5^\Ea)Ukf,A1?_f/i$&a/",/p0XqHBuA1:sYe(*()l!8/gb2<-$`E4a??Z%3VEkrK^F)\B,QX<n(FT=*@p<5SL`lY7(VO'q&u<-0i1G*Bi**=A;:BN4E4riTL:'-Yo<aEdUK[O3)<_92CK//CWD/pALhQ2"a'@3%`E@h2T!Xl"O<TjR6k+\sBj&oXRjTdU)T7H-`C+e'r&j.H*')\G9(Q7oCaN`^c%UtLXLo]K-"Yg?U3TY^g`T$2jh`$8.NKYF6ShN\%B0.qkF1*q?lR7M]Fp+e?>dHdQ:J)HcP_c,'YTl[bAUPS^Gu?QPTg^6'BcUAF;G,LNVc28LLLQj>>'3@JVDU=6Lf$b.;28Osnj>c!%Vc-_oLCdmOK\(qiQ'Ak%aQ4aH1_f7(`jS/b2r2>dK34_0BlrPM.C3lQ+d+U:NW:pkZjfoY;I\"H66miX*<F;.O+ZPa9L\[c'd>*<%GGl&dj)[YB12-mO"B'MCN:,%9P2^IOKJL*6jm&6)=\0<<#ZFP00*W<25*"\l+[.3kcOQX2.9:Ttj[jHs,<dEm`;uYp.0^:G&?2o`%"7^)7hNWT\A8ZR/b(*H_'ZL>fLnp+i&=t3Q;?kWk;e[!r"#<8B-lN@eAsl.B&>#'Ec@B(^Ylh[i$t3V*pB';&.@^g&j[m'r""H]:%U_jA5k4V%n&=tYP_LP[Y-'\t=&6TTQ5V(/Y!!fn%/<+L3Kuf_:#D,g=&iC5[9H4*9d)@g(nGsLOCXsO47].VrQS(Vrc630&,&;oS%bmDXMmb42Xbis@/kL1E2\.gD\5'0lEU<N<(J1dG$4rt7YEme6uM/,_I>H]"lB&=$h#aMeu*A3UiX[._8j]P7"JbYJ?A5!r<o$#e9%Y_7&rX:96&0i].Qr,Sf2)jKp;eWsY0"isq;)7HElbghhaCJN-E"RQk5)p3HP%!.0.F>:iSY3Hn3nm'^$8.`>3B?BDV'#KaLB#U6L%csi3FQpK#0;n!=09\]-85pjpJYRIQ\7ck8SEYEL*b&c/dTL%Wkjq+2+(NYC/\ViHRjdB&0@4U9tiN"tkSB[a3n?Zdq[t"UDLMkMp%LRO!9dG/nZC7!hPiM4YeDIF02A%]buT\>6bWU:!Pb9j*tT3a(\R-OHKoZi5C:YV.?%qGB;K!O\XA"BVW],@78E5-R)g1F\+glc.a%:]'9]GUWk%e;aN/%ZK$\3dK\S@+aJF0[!'M,`'=%atW"BYIe6@$9!,f6c:HEmDlrYk_):P1!'17CbS&p=fAG>[Tr@!W5T'j(:?,Q%:VFbp!hXdupB3Z/2l&Thc`.ann>UVTa'"\EQZblL.[:u@,qf_fDMJ3hQt@2tFQs=k$g;CNTRb<?!ice*dR?D)T6_H#S?=G;$k.2D%#7&r=5j6Q;CER_,+^eD<\YaBfj[a'/6L1NF\eA7+e]3`HD5n*iWc#)U7;:RX+,'3rX$2!h?rqco3N]pY)pW0J96G'TZ?+uGDP*M*%<@ZqiY$c9dW8-C>-IoU&OKWtaD!1$CWcADdDW.+Ul9fRS-:r4dce!=tn3K(cLX/"]]eCf)-i^OV`f#]Hh6Ebr"!='&_0eK`Y7,CU%,_ufXmF,iiq7#mRpo;s-r.pPHSfaPM0ZoNklu,4-@P<AqVPfQmZJsJ5^iC6<"Y;0)RAALVo0hTR6.jmSANJqm<Ji!EW?ZTdkQcH8%_6Mi!'D]4$f\$mjWj_.P67m+L?Ve'=jj4]t&5Ak[5cAG0RaQ3:=[V$K/pr#%9gP^mLIg[g`0$6=SBo4:qPc<R@S'9[W+noMLS)<.%kVaT_qiNmt`jFu?A1QV$`LQ!#L.Ve#PqZ02O]gd&o-_JV7bRVP><:'RGrH@3oMc=,KNMfkOu$[48TtRrQ&-YD_QfCWVs_qQ_S\nM%<_Xeq,qu@p4!cT7aT,dMlXCuf:efK;9&R$LG`F+0TH(.(XD42i'>AA82&spu6&taX8;L;p'7#\_q]7CrKQa1L$#2lcFY0=ff5-rO%Od/;c<rC5GehH9EIN?GZ`1!,.g64/Nf/=6pD*Hm)NgK>73\Tk[SX@semY(;.CD!UnM:Xe^@@.K8WWdpTXh/'c)54(^Gc;A1ih]C`%__dnrWOd-DN&*q/F'd_=VhUG<Ki^8DWJjBu#ElF+K253\H$;R[rEeY*GC</8lgo1[gE"3/PAtVdBK!13/P^-Ah9-('"#b^OostV=%C\69E[6"Rj&<hjcEe[UYP":-@0pKXhL_3"<<(9\&>)h5[Zoc:!ALGtQLishN3EM`/WIh>6S1DnQfJm!Y)6N[)pURm%N`FTLZ`Qsh%X'jGS+-nE*a7^Z-SL=*D>Q^gn6eOYuKQ?6G\JN8lg#NZ`Bq-CMji0?IDC_j#P([W?COKa6+TJ+6@K-4#9fD\Sm.5;JgH!r[gdmHF%0RL%0:F9r:fn7iN)("obp^[@@LS$:[W39Ze[jW;u%)XZ5Tm2$)h*+X"\$1QqG7:r/*ioeA>83,up17.Y@UCZ*``qg+!%XXYnQ9?>%Dm=pkbo#OBUKUca",o-%TlP\2mSE%/dZb`g_^NXA"28I\'RYVg<ik/a"?oUc1G2sdmUs\W0(i=X=S9:PW65"?c=Z6\hppEHhmp5H%U^uqRTut*IbK^kNF?e7hI#?Kko8V?S6Hp_C:%;%k?NT(LJ1KgGf7D>6MU1d(28qqJI9)_0WD;Y`e.gL\nm9:ma"#!rL)1A$fj*du%]EU]lSr`1ML@P(]0\SN!fFkDML=+X>W8?Vk5\PD&*iecCT&XcV:Ih5<_KC]_Re<[JMbpt4c3<,tkV?l^`tkA(?I?@KLR18HoiRJT%B8pE5'5Du^e[+PP6oMr=pT/\Bb0.=M**\(;H693R&r,@NW?/,2kpl2WHE8m'$M3/9i\RVf9Or"*T1d$iPk%%C&gkZgChj*G6VJd[%3lFu%UP!'Lik$=IMriNGf?WOSjn+b:U]j.<q"DHX[d)R755,5]6]9@13OF+2ZJS_MWTnjX4W`3$m-Gu>Ns@/P]!+V9dOS='QS>KK%>C:2Wkkt-_EiaU1[70()f,.bnlOnqp@>iHQhh@Hhfjd&*F2W+Ek>8_JI-+/bL@]+d1D$uar40dC*En,f>6cP*2CC?Q8Mh50E]ugh%`Fn>9kdcpONo@OWh>,9`hO83m3G4AML6.Wm/@YDuQ/f3]-=L!g[eR3\_]rc7Tfer^[!s^t(B+*J(<`+sWjtrgZdRK\5aA`R\!:WI%%.A5sO.:'7k8PVq&pG.XS`[6LTs]iO?dR8@<?_\,[38G56i7\^\Kp_)We?oEhLmJP/Hg[+i]N\Dcl&cWF&CN8>aDU$C;W0i&?3rR%c$g%%d'JFsL?]PJV.jH_:mooF]l4!8(X5LQJ^D4NY.6*Glc'\b:b?*oGDs;\_.V`,KOK,A)^88k,eJZ"CEV:FoNVL?/kb8ofb=Rh%RQ5M7(XR5'.-Rg+(l"o07&j29ijF]kg;lm1$/I;>dTr0[<JboiW2cC!W4R_SWrdA"_<>8`lj-Tca`DY84Z<T(NZYl:HI2*4)Y*2k%G7ghnB9DTpH=!&cmar^?kVjNEWWbjt6I.5;l4U[:\:psrG)D]s5bMkNUYR5<K@gK3-$%HA[j+Y9UBWikL7[-2:TgDS^?Je1.Ua0d%"_(KpSD5WD4A6&TG?)L6:F8.I<S)Pk]7QV9K4/s)h7bncr\sb.'jp`r37X9dG1Y'H26rq.@^Ci`LbNu:"Xph3ls4ILp"V7F!I`lR%nFUUB7&e"T<*-gqju.;\D5jq4s8CtBg(2m'O6<^ro$[_!r0ZhT*3]D4hc]$di;WMT:@3gc1H2\_[ZS%.BC*lXWSa,^aa5mF-grS9%[3,DL5+QPDq&u9>UX^TZ]&TZ:3-BucHlfk_^PqT4A#K4!l-K\UL'(JcDua>9e=@R`UWG1(?.]PY$U[#C"i4A;It;FnZkijD2Ojod%0+BEtn2J6W&?NpV&fg#a8oW9n)k_Tp46\lOTM5VO#nH?bD_fXZ,C,X)P?[mqS=\NMkFoL/>mO3&p9]+2@75/;SXJ)!!Z<1n,Y6W:%TTLAXoIpp!KLdJAb_1'NUuU#tOH/6;E$LM=]BCM2g+oOh5V>/Z#uZq9!D\62Dk.#O`5tT41+<N1\)Z15OLSjj+$n=u/r^!BKg6kK%dU!WI"=_tR?mJ8]-L_VC@%2\/^^OK?(+^WuoP2bqY_9f5*T8T$O!'GG)-B45)UX2AUt$/1%58F9+seI"hFIu3B6(4+^djK1D*c'0%OMc5j2J;Rm*<PZQ\F:Fo(ll,6$n">9h"etP9\)B>N<JFj/>:_U1J=gIO!%)sViMrnXJ_1'#<)XQ"M"YV_%Kdie\3u$"K&&B9Ah&9%20oIscPAYLc=`(7!9^\jY6qrK5([1>ToU=?SEH&t+SQg"5n:NtfUKu-\d"\NYQJ6MSM"pqn6g$N&t%;(RmJJ'*@rrYKTSSG_83$D%+2JOP"7@BnjCt9J5Wako&L<J?+$n:FJW7H/VUS_lI2T>R+;0relQR`T)!E.L9.RRZm-rM>af!bSH-0IMJnPdJ\"H^f;IdbEE;PaJ%K$pCL^fctP:MYMa4g(mj7J]0L"[r_<XT`9Lqg"N6"+.b$('FktS-:l<*fL7XCWKV^8$`6@)SlbGZNa!pMh'hX/qQG3LEs&-9F3Nf%UhCTa'7k<1AKm3=+qm8&jo@=PB_PXVJeF%HDB^KR0k;IVd0\_`!X\^D&QCo2\d5[j9G^!3d=F"@UE*kK/cn*8j@t2^TSAS\h4!&3%nj&_F>u)CdK!5HUM*Pcn0G/-K=Q"P_)bH`[5k[4+#^/CKH3j4+*WcWLndt;4DX\3jrF;9%jB[k(+@X1uRg<uO13a(&oGY5p5U.S/%YCa2%%tP-Jndq%!%`g%gEr\o;Yh'!gJOYMZ"E^'R66Oa949Ufjj<9W;,7f@lA+C1MUdPSVYTGisgaf7STP:Sh=pW1U/HjcXQA%SN%`R.#fa%Zqmp52fDSJI;"*!F)l_!ef=]7B?pCU6!(#l(po+jc6WoFN-S7LoN%TnOVJP[GZMdgcih5&E=dUdRWV!D*S5!^o^b#W,G2%K)cK>=pX1=E&oXW"`t:Y=2BF9J/bc05nL*uZk.0Y*>S^?&C?YL+`L>RK)h^g6#bd4TS%dGJD_R.hDQqgg>[o(!jWG$"L8d;G5$]m%J/3b0[+CZ>Y5V8qoB$9/#f1CDCI,0Dcrq"I"p<s@@74lsYT(qm^hn3t$VYmt`A(O(+;r@+:h<Y"[6P\Ud9=>J5\i[78-mcJ85di=%i6%=T"[0F&kUbY05*"G.D1M/SHA4=`U5OR$'"S?$g]dlBj90E8_(Jc%,1n'5a[<;U+$gRV_-I/2#`^tnJu"rLRL$9RQAH_u5F*o'%.bZWijCf#O-jER[,1$W%R0[=tObo`!@t>:sAR;$dTQ1R6-A!-F")]=0`g]X)_37,#6'nt\HS_.e(:jc0M<;/Wf[g>l/9!qrXc$R+%g]sa6+RF$q7'ML^RKt1Ha@)[A%(QWh[`CmV6t_(_#e6!E'>YhiBHftkKdMC*<+mIHHJUIj88XKI+Q%/NjPUMe'7m,7"dkbb_GHqa%^uUf5D1?1t/ge.8G0)=X&aWDrkp"cj4%0t%hR%D9(W"C&6(/)'p>@NrM-pkK[P/<[P$;TDfX4.5(P0:)(L.*s4d:kTSed_"2Nf6t%JMn3R,1'/KM*Mh'\HjIia@.5DMd-B3\#_Sr/qP?PkT\AUOc(@RJ^[&,BK)),Jg90a#bmF_/qW[V&`+;ic5bOmVN&AT`R%`4.5f5D%>T*nYm3:"NTFVgZ8T9@1![iO_&g/PfFBgX_1Cteq,d8NfBM4OFK=kTIjp8kY:4hknP@2l%_(GM+oG?k'X37[iNr\PcFK>o(2+SK@%DGi1A+C:W%Z[KH2P@K5,l#7K8Yd943-"dH'#3uQe.L([EH+(7EPYg_d?uVPt]Ho6KUp/#OK0d(&*B;:V?"bNT@HSS1K%+\>"K?+%%)rW8k6>.[lq-7&//;nEtkCcHLTp6`0YlZG,SWl8iXTV3R*a/l%FbEeI*-Tb=,re]*ZCG,WUq4oFOS@rDE6H65lil]<=D(<)be4lL%RD;C5SfKDL<eBpBW4)og.N2)j--0Mn^e0]b]$O'2Mk2lEQ0#Ocp&__='[@Q&&tF_3]dX4giSZ#a"Bf%S=p`'>8m2OAMtR3"ZuO*Y%Qb`/iD[X5]\T9[)Qb[Xg`c=hR4@SlTAEb`=&sQ*0]a.a'-i<i`]Bh/d?a(q14/2ql"D)51TU3I\/niEO^C,78@4!B@/Mn+T.5,cV%PS?gs"hkiEJr!u.#gjEt#qXCi>MphV)D8B1S;.2Lc4)Fi?K`ab@6Yc]Jl9Pq,*leUBFF_@k6XA=F&&3r3W'#6*[gaiK%#I/JeE7e%@43O4]HCYepC/,HAa#Q";K/5L/$Ko$Kk:uOLfd[J$U"Z9M`ud4BpJT_;aK74bi(%M]6Jn-i&k*(D1Sb'dN>h"_5SL'IGg]``+M8=%VD&G)HltD&o5\>nN@:!WiPN-6i+;8Z,o&W8Jad478n0lj&J`"f@gAo0?j=JHea]>QJ5_GoEI^t.lkftT8WD&D*:a^;]C>&B>4$M8%9MV7mLhn@k/S/N>\Vi/!7Zt@h,@P+:/M$>3E7`Ig2%[0aN2@i;>pOLO-nm/c&.M%0`nq1g'oVJs#/Y=N4h?nJQ!;?4kWmX4Z@n2E%HP%9tUVa*s(dA8"<g0M41t[^3^^O;o%3m;2DC)l:#(fm>r\@_U&)O2bNM9!n)$jD?o#p7T;tA+^8C<kcJOlK,'f+#/Pl*9@pk8Qc%rX:W@3@T\CT9N\XjWlkKO*gi(TO[u29bVN]''5HY:0A&OatMpR'R%O.2[(CZ`OPT0SeB5PCI*D(29"BT45PqfKZ>Q3q;kR]\mlI,%6,`&Q?d>;":6'l>BG@$&Mdc6nm0ANZ>q9F!3"Le;(cd.8d>KtM]]qqU\>#R;L<P;fkEG2SH&?,E<A@htk'U47;IfbP.hF.U_d$l4%NAK;]]IOhqr,RZX-q@HSJ/akG:"aMULNnABd0Jf#_\T*B9q?pukVD`f#=mJ3-X0>$r72/^IXUDR:M,=&Q[nh7E0K&QmUP-<r9iOW%cT_9jea$Rip$D?Q0>I>\eIR^*S'Xj9*^BSIo?Uc+^AlTa`oF8:ro;1'Y9,uXq;!u:I/E].YJ0q$f,m-SeB6Igo]%6IqsofKgg6$`%0D3HY5Bq>>gJ;Y=s*\;+\6!$coB#$0++O49ZY/0DrL9.W5IVE2Ju;?1a(tVJjm1MO^Ks?Y56#mFDP?sgj+m@mqGm@XQf!2\alblN%J+_ECrUAZjs7#iNc[YiWo<2I_J+`<m\"E]XkDu6bo8VSoq&ed,*l!*qr7fgV?Tio:p0V-TDofQo`SZ%2Q[f$"*r[5k&k6g~>%AI9_PrivateDataEnd