%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: clouds.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 219 186
%%HiResBoundingBox: 0 0 218.7500 185.1494
%%CropBox: 0 0 218.7500 185.1494
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 108 8%%BeginData: 7016 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C457D7D847DA87D847DA87D847DA87D847DA87D847DA87D847DA87D84%7DA87D847DA87D847DA87D847DA87D847DA87D847DA87D847DA87D847DA8%7D847DA87D847DA87D847DA87D847DA87D847DA87D847DA87D847DA87D84%7DA87D847DA87D847DA87D847DA87D847DA87D847DA87D847DA87D847DA8%7D847DA87D847DA87DA8527DFD7EFF7D7DFD7EFF7D7DFD7EFF7D7DFD7EFF%7D7DFD7EFF7D7EFD7EFF7D7DFD7EFF7DA8FD7EFF7D7DFD7EFF7D7DFD7EFF%7D7DFD7EFF7D7DFD60FFA8FD1DFF7D7DFD4BFFA8FFFFFFA8FD0FFFA8A8A8%FD1CFF7D7EFD4AFFA8FFFFFFA8FFA8FD2DFF7D7DFD4AFFA8A8FFFFFFA8FD%2EFF7DA8FD7EFF7D7DFD7EFF7D7DFD52FFA8FFFFFFA8A8FD26FF7D7DFD51%FFA8A8A8FFFD04A8FD25FF7D7DFD52FFA8FFFFFFA8A8FD26FF7D7DFD49FF%A8FD0DFFA8A8A8FD24FF7D7EFD4AFFA8FD0DFFA8A8FD24FF7D7DFD49FFA8%FFA8A8A8FFA8FD07FFA8A8A8AFFD23FF7DA8FD44FFA8FD07FFA8FFA8FFA8%FFFFFFA8FFFFFFA8A8FD24FF7D7DFD43FFA8A8A8FFFFFFA8A8A8FFFFFFA8%FFFFFFA8FFA8FFA8FFA8FD24FF7D7DFD18FFA8A8FD2AFFA8FD04FFA8A8FF%A8FD0BFFA8FD25FF7D7DFD17FFA8A87DFD2EFFA87D7D7DA8A8FFFFFFA8A8%7DA9FD29FF7D7DFD18FFA8FD2FFFA8A87DA87DFD05FFA8A8A8FD29FF7D7D%FD4AFFA87DA8FD04FFA8A8A8FD2AFF7D7EFD26FFA8FD1FFFA8FFFFA8A8FF%FFFFA8FFFFA87DFD2BFF7D7DFD17FFA8A8FD04FFA8FD07FFA8A8A8FD1AFF%AFFD04A87DA87D7DA8FFA8FFA8FFA8A8A8FD2AFF7DA8FD17FFA9A8FFFFFF%A8FFA8FFA8FD05FFA8FD1BFFA8FFA8FF7DA8A87D7DA8FFFFA8FD07FFA8FD%27FF7D7DFD13FFA8FFFFFFA8FFA8FFFFFFA8FFA8FFA8FD05FFA8FD1BFFA8%FFFD05A87D7DFD09FFA8FFA8FD26FF7D7DFD14FFA8FFFFA8A8FFFFFFA8FF%A8FFA8FD05FFA8FFA8FD19FFA8AFFD04FFA8A87DA8A8FD09FFA8FD27FF7D%7DFD13FFA8A8A8FF7D7D7DFFA8A87DA8A8A87DFFFF7D7DA87DA8A8FD17FF%A8A8A8FFFFFFA8FFFD05A8FD30FF7D7DFD14FFA8FFA87D52A8A8FFA8FFA8%A984A8FFFF7D7D7DA8A8FD1BFFA8FFFFFFA8FFFFFFA8FD31FF7D7DFD14FF%A8A8847D7EA8FD07FFA8FFFFA87EA8A8FD13FFA8A8A8FFA8A8FFFFA8A8A8%FFA8A8FD04FFA8FD30FF7D7EFD14FFFD04A8FD08FFA8FFA8FD19FFA8FFA8%A8A8FFFFFFA8FFA8FFA8FD35FF7D7DFD15FFA8A87DFD05A8FFFFA8A9A8FD%05FFA8A8A8FD11FFA8FFFFFFA8AFA8FD05FFA8FD36FF7DA8FD16FFA8FFA8%FF7EFFA8FD0BFFA8FD17FFA8FD3DFF7D7DFD15FFA8FFA8FF7EA8A8FFFFA8%A8FD13FFA8FFA8FD09FFA8FFA8FD3CFF7D7DFD14FFA8FFA8FFFFFFA8A8A9%FF84A8A8FD13FFA8FD0BFFA8FD3DFF7D7DFD15FFA8FD05FFFD04A87DA8FD%20FFA8A8A8FD04FFA8A8FD34FF7D7DFD18FFA8FFA8FD0BFFA8FD21FFA8FD%35FF7D7DFD15FFA8A9A8A8A8FD0BFFA8FFA8FD1BFFA8FD05FFA8FD34FF7D%7EFD10FFA8FD05FFA8FD0BFFA8FFFFFFA8FD57FF7D7DFD0FFFA8FFA8FD05%FFA8FD09FFA8FFA8FD5AFF7DA8FD10FFA8FD07FFA8FD09FFA8FD5BFF7D7D%FD17FFA8FFAFFD64FF7D7DFD10FFA8FD07FFA8FD65FF7D7DFD09FFA8FD05%FFA8A8A8FD6CFF7D7DFD08FFA8FD75FF7D7DFD08FFA8A8FD0FFFA9FD64FF%7D7EFD1AFFA8FD63FF7D7DFD19FFA8A8A8FD62FF7DA8FD7EFF7D7DFD7EFF%7D7DFD7EFF7D7DFD59FFA8FD24FF7D7DFD58FFA8FFA8FD23FF7D7DFD59FF%A8FFFFFFA8A8A8FD1EFF7D7EFD40FFA8FD1DFFA8FD1FFF7D7DFD3FFFA8A9%A8FD3CFF7DA8FD2EFFA8FD0FFFA8A8FD3EFF7D7DFD27FFA8A9FD04FFA8A8%A8FD0DFFA8A87DFFFFA8A8FD3AFF7D7DFD26FFA8FFA8FD05FFA8FD0FFFA8%FFFFFFA8FD3BFF7D7DFD25FFA8A9A8FD11FFA8FD0BFFA8FFA8FD0DFFA8FD%28FF7D7DFD26FFA8FD0DFFA8FFFFFFA8A8A8FD0BFFA8FD0DFFA8FFA8FD27%FF7D7DFD21FFA8A8A8FD0FFFA8A8A8FFFFA87EFFA8A8A8FD0DFFA8A8A8FD%07FFA8FD28FF7D7EFD22FFA8FFA8FD09FFA8FD05FFA8FD05FFA9A9FD0EFF%A8A87DFFA8FFFFFFA8FD2BFF7D7DFD22FFA8A8FD09FFA8A8A8FFFFFF7DA8%A8FFFFFFA8AFFD05A8FFA8A8A8FD05FFFD05A8FFFFFFA8A8A8FD2AFF7DA8%FD22FFA8FD09FFA8A8FD05FFA8A8FD05FFA8A8A8FFA8FFA8FFA8FD07FFA8%FD07FFA8FFA8FD29FF7D7DFD21FFA8A8A8FD07FFA8A884A8FFFFA8FD09FF%A8FFA8AFA8FFA8FD09FFA8FD07FFA8AFA8FD28FF7D7DFD2CFFA8A8A8FFA8%A8A8FD09FFA8FD05FFA8FD07FFA8A884FD31FF7D7DFD2DFFA8FFFD05A8FD%04FFAFA8FD06FFA9A8A87DA8FD06FF7DA8A8FFFFA8A8FFA8A8A8FD28FF7D%7DFD24FFA8FD09FFA8A9A8FFA8A8A8FFFFFFA8A8A8FD04FFA8A8FF7DA8A8%FD07FF7EA8FFFFA8FFA8FFA8FD29FF7D7DFD1BFFA8A8A8FD06FFA8A8A8FD%04FFA8FFFFFFA8FFFFFF84A8A9FFAFA8A8FD05FFA8A8A8FFA8AFFFFFA8FF%FFFFA8A8A8FFFFA8A8FFA8FD05FFA8FD0BFFA8FFAFFD16FF7D7EFD1CFFA8%A8FD04FFFD05A8FFFFFFA8A9A8FD05FFA8A8A8FFA8FD09FFA8FD05FFA8FF%A8FD11FFA8FD0BFFA8FD17FF7D7DFD1BFFA8A8A8FD04FFA87DFD04A8FFFF%FFA8FD05FFA8FFFD05A8FFFFA8A8FD07FFA8A8A8AFA8FD11FFA8A8A8FD09%FFA8FD18FF7DA8FD22FFA8A8FD0CFFA8FFA8FFFFFFA8FFFFFFA8FD09FFA8%A8A8FD0BFFA8FD2BFF7D7DFD29FFA8A8A8FD05FFA8FD09FFA8FFA8A87DA8%FFFFA9FFA8A8A8FD05FFA8A8A8FFA8A8A8FFFFFFA8AFFFFFA8A8A8FD20FF%7D7DFD28FFA8FFA8FFA8FFA8FD0FFFA8A87EFD05FFA8FD05FFA8A8A8FFFF%FFA8FFA8FFFFFFA8FFFFFFA8FD21FF7D7DFD1BFFA8FFA8FD0BFFA8FFFFFF%A8FFA8FFFFFFFD05A8FD05FFA8FF7DA8FD04FFA8AFA8FFFFFFA8A8A8FD05%FFA8FFA8FD07FFA8FD20FF7D7DFD1AFFA8FFA8FFA8FD0FFFA8FFA8FFFFFF%A8A8A8FD07FFA8FFA8FD0BFFA8FD07FFA8FD29FF7D7DFD1BFFA8A8A8FD11%FFA8A87EFFA8A8A8FD09FFA8FFA8FFFFFFA8A8A8FD36FF7D7EFD30FFA8A8%FFFFA8FD05FFA8FD06FFA9A8FFFFFFA8FD37FF7D7DFD30FFA8A8FFA8FFA8%FFFFFFA8A8A8FD05FFA8A8A8FFA8A8A8FD36FF7DA8FD34FFA8FD05FFA8FD%35FFA8FD0DFF7D7DFD33FFA8A8FD2DFFA8A8FD0BFFA8FFA8FD0CFF7D7DFD%70FFA8FD0DFF7D7DFD3FFFA8FD0DFFA8A8A8FD11FFA8FD1CFF7D7DFD3EFF%A8FFA8FFFFFFA8FD09FFA8FD11FFA8FD1DFF7D7DFD3FFFA8FFFFFFA8FFA8%FD09FFA8FD10FFA8A8FD1CFF7D7EFD3EFFA8FD05FFA8FD39FF7D7DFD3DFF%A8A8A8FD3EFF7DA8FD3EFFA8FD3FFF7D7DFD7EFF7D7DFD7EFF7D7DFD7EFF%7D7DFD7EFF7D7DFD7EFF7D7EFD7EFF7D7DFD7EFF7DA8FD7EFF7D52FFA8AF%A8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FF%A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF%A8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FF%A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF%A8FFFF7D7D7DA87D847DA87D847DA87D847DA87D847DA87D847DA87D847D%A87D847DA87D847DA87D847DA87D847DA87D847DA87D847DA87D847DA87D%847DA87D847DA87D847DA87D847DA87D847DA87D847DA87D847DA87D847D%A87D847DA87D847DA87D847DA87D847DA87D847DA87D847DA87D847DA87D%847DA87D847DA87D847DA87DFD7FFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:58:48+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T13:58:48+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T13:58:48+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>220</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA3AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7l5I8keS5/JegTTaBpss&#xA;0um2jySPaQMzM0CEsxKVJJxVOv8AAXkb/qXdM/6Qrf8A5oxV3+AvI3/Uu6Z/0hW//NGKu/wF5G/6&#xA;l3TP+kK3/wCaMVd/gLyN/wBS7pn/AEhW/wDzRirv8BeRv+pd0z/pCt/+aMVd/gLyN/1Lumf9IVv/&#xA;AM0Yq7/AXkb/AKl3TP8ApCt/+aMVd/gLyN/1Lumf9IVv/wA0Yq7/AAF5G/6l3TP+kK3/AOaMVd/g&#xA;LyN/1Lumf9IVv/zRirv8BeRv+pd0z/pCt/8AmjFXf4C8jf8AUu6Z/wBIVv8A80Yq7/AXkb/qXdM/&#xA;6Qrf/mjFXf4C8jf9S7pn/SFb/wDNGKu/wF5G/wCpd0z/AKQrf/mjFXf4C8jf9S7pn/SFb/8ANGKu&#xA;/wABeRv+pd0z/pCt/wDmjFXf4C8jf9S7pn/SFb/80Yq7/AXkb/qXdM/6Qrf/AJoxV3+AvI3/AFLu&#xA;mf8ASFb/APNGKu/wF5G/6l3TP+kK3/5oxV3+AvI3/Uu6Z/0hW/8AzRirv8BeRv8AqXdM/wCkK3/5&#xA;oxV3+AvI3/Uu6Z/0hW//ADRirv8AAXkb/qXdM/6Qrf8A5oxV3+AvI3/Uu6Z/0hW//NGKu/wF5G/6&#xA;l3TP+kK3/wCaMVd/gLyN/wBS7pn/AEhW/wDzRirv8BeRv+pd0z/pCt/+aMVd/gLyN/1Lumf9IVv/&#xA;AM0YqkvnfyR5Lg8l6/NDoGmxTRabdvHIlpArKywOQykJUEHFU68hf8oN5d/7Zll/1Dpiqe4q7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi8+/wDK&#xA;DeYv+2Ze/wDUO+Ku8hf8oN5d/wC2ZZf9Q6YqnuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvPv/KDeYv8AtmXv/UO+Ku8hf8oN5d/7Zll/1Dpi&#xA;qe4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhtQu2tbf1AFqWC8nPFFr+057D+NOnUKr&#xA;F1EnTjeGMbcvhDVQ0Yry50+x+1yp9nfFV2nX31yJ3onwPw5Rv6iN8IaqtRa/aoduuKorFXYq7FUB&#xA;pVlc2qsJ2BqqKeLM3J1rylPILRnqKj26nFUfirsVdirsVdirsVSLz7/yg3mL/tmXv/UO+Ku8hf8A&#xA;KDeXf+2ZZf8AUOmKp7irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqjdXcVsis4Zi&#xA;7cUVBUk0Lf8AEVJxVbNqFrFZC8Z/9HIVkYAkt6hAQKOpLFgAMVdYX9vfQetATQEo6MKMrjqrDxGK&#xA;ojFXYq7FXYq7FXYq7FXYqkXn3/lBvMX/AGzL3/qHfFXeQv8AlBvLv/bMsv8AqHTFU9xV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVL9Qmv0mUW4bjxBjCpzEklTVHah4LSm+3XrtQqoyO6tpJ&#xA;HijlR5Y/7yNWBZe24G4xVq4tobhVWQH4TyUqzIwNCKhlII2JGKqdzp9tPZfUyCkKhPT4GjIYyGQq&#xA;exUqCMVSfStRgs719MVGZFd/WmJDSLIZFjT1iTyYy81K0X4Vp1HQqyHArsVdirsVdirsVdirsVSL&#xA;z7/yg3mL/tmXv/UO+Ku8hf8AKDeXf+2ZZf8AUOmKp7irsVdirsVdiqWw67bS3wtRDKqvJJDDcsF9&#xA;J5YeXNFoxcEek/2lANDTFUyxV2KuxV2KuxV2KuxV2KuxV2KoC0OqfXpPXDC2/eUr6XD7Y9Lhx+P7&#xA;H2uXfFVDW9fs9NkggknSCSZgGlkR2jiQ1AeQrxVVLDjVmGKoO0FleLGI5JB660jDenJCryhblojx&#xA;CO4Kpvy2IqK1woTa1gg060kaWSOOIEyOwAiiQUA+EEniNqmp61OBKHsI5ZpxeQ3Kz2js7LNHO0qS&#xA;ISwCCP8Au141HxKf2fc4q0unztqouJFaquS8nP8AdPGOXpKIwftISDUr4774qmuKuxV2KuxV2Kux&#xA;V2KuxVIvPv8Ayg3mL/tmXv8A1DvirvIX/KDeXf8AtmWX/UOmKp7irsVdirsVdiqAtLPRXvJL61WF&#xA;7kkiSWNg1CevQkAnv3xVH4q7FVOe4t4E5zypElacnYKK+FTiq9WV1DKQysKqw3BB7jFW8VdirsVd&#xA;irsVczBQWYgKBUk9AMVQx1Kx9NZElEysSq+iDKSQKnaMMdsVY35rh0TVLb91ess9zHEoaENJFLGs&#xA;vKNZTGr8V51FQynelcKFby9ps+mpLd33OSa5kDwQiVpT6nAqzAu7LVo1ryLbb9sVVPM+qI1lFDEr&#xA;EzuHh2Xm01u/qLGquVHJXi+IH5AGpKqUz0O1jgsFkWRpmuiLiSVgELF1FPhX4V+EAbfr3wKmGKux&#xA;V2KuxV2KuxV2KuxV2KpF59/5QbzF/wBsy9/6h3xV3kL/AJQby7/2zLL/AKh0xVPcVdirsVdiqX/p&#xA;KCR5YrhRFbMJlErPxqInEUnLZePxN8NGP0HFUu8uX0Ml08f11bqcxqkykoDG0dSIkChQ6jm24r86&#xA;EAFW9budNW6Mkko5Rp+8Pp82jWJvjeFyyAODIAQvJq8aLXFVSyvY5dYMS3amQF2aNnlDlDUiMwOo&#xA;RCtV6fFQV/aOKonVb3SFZYrnUEtbiEmVFWSMS/YYGiMGJ+Fj+zgVU0u9sXX6jC/Ga0VY3t3ZTKqq&#xA;AAxCk7e/jt12xVH4q7FXYq7FXYqhdSeL6q0MiPJ9ZDQiOOnM8kYmnIgfZBO+KpHf+X5dStZ3t55P&#xA;XnEircSyCOSCYAwuQIkKP9kAj/J2O+xQxTXrCWCcJu8ySQQixEjx+pEoJJklV50jRW4N8dW+Dbip&#xA;AxVmnlhY7vy/BHKKiB3SNo3YqoRiFEMy8GZUU8OQpWh+WKU3NjZtAtu8KSQruEcBxXxPKtTv1wKp&#xA;38UxgRYFYorD1I4mCOU4kAIapSjcT9obYqqWYuBbRi4NZafFWlaV2qRsTTrTauKq2KuxV2KuxV2K&#xA;uxV2KuxVIvPv/KDeYv8AtmXv/UO+Ku8hf8oN5d/7Zll/1Dpiqe4q7FXYq7FWKeZbi8tZ7ia0i4Tw&#xA;hbhJVVODLxKfH8Jd3LFlC8l/ZpvUgoSryb5Nu7adtSurxjCkkbQiVR6tYAVkJbYxgksONB3qoxJV&#xA;lMui6NqY9QyfWIlZzGI3XijuebkMnxGrGpViR7YEoKDS7a01oyrLM8IuRNICsXAXckAhBJBVqFJR&#xA;sEpU4UIHXPJV7e67LqMVyVjlJZoqgAxtAtvLHvUVdFopoaVJ/ZUFtU40PSYbaedhI5ZZGdbaSRZZ&#xA;I/VUE+o/xyEs3Ijk7bHAlOsVdirsVdiqV22rTzRTMsayyJEZVijNSjU2hk8H/t2FByVUtL1NNVVo&#xA;bq3LROPUgkli4JKo41IRmkPw816+PiCAqqxjU7eR+EbNBCJOEAESxGNQfSWLj+8DfZHxbfa9sVUb&#xA;C1iu5ZfWdbm3R/VRFVfREknPmtCGcsORJDN+10GFUVbaT6N564dAoZ2HGPjIQ1aI8nI8kXlstOy+&#xA;GBUwxV2KuxV2KuxV2KuxV2KuxV2KuxVIvPv/ACg3mL/tmXv/AFDvirvIX/KDeXf+2ZZf9Q6YqnuK&#xA;uxV2KuxVJ/MC2lzE1tLCzNEI5vrChT6Px1VqkhtzEa8QcVSm80SSxt2VikVpJykllWKS4aBV4l44&#xA;/T4ELL8bsQqgfEKGooUJj+lYbDTmvnE011M8cUkUo4uJmUFIvhjTu1FPHckduilFaRd6dqsQ1FLZ&#xA;Uuo3eGQuqGSOSMlHXmtQR4FTQjAqZ4qgrXTTBdNMZAy/vvTULQj15BI/I1NfiG1AMVRuKuxVL9Mv&#xA;rm5dhKFICBm4KV9Jz1ickmrD2p7gVWqqYYq7FUrsYLmLUJSIfSSRnMxCRqhUMfSKso5sxHXkT36b&#xA;VVTTFVhnhEohMiiZhyWMkciPEDriq/FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkXn3/AJQbzF/2zL3/&#xA;AKh3xV3kL/lBvLv/AGzLL/qHTFU9xV2KuxVQF9bG4+rhj6lSv2W4lgORUPTiWp2rXFUNqzW8XoTP&#xA;FD6nqBEuJwCsWxflU07rTqNziqhK2o3hhKxOLS5hiMsdY+A9Qn1lflSTaM7ce+FUW+j6dJaTWcsX&#xA;q29weUyyM7lm2oeTEtUcRTfbArUEOnaTarBCpjiJJCjnK7E7kk/G7fM4q3fXU6JE1vQxybmYRvOB&#xA;0IHCIhviFTy6be+Koi3eV7eJ5k9OVkUyJ14sRuPoOKqmKuxV2KuxV2KobULV7iFUUK3FuRif7Dih&#xA;HFtm23r0O4xVfZQNb2yxMwJBY/DsqhmJCqP5VB4j2xVRfTi100vqfunkWZ0p8XNAoFGrsvwCop47&#xA;74qjMVdirsVdirsVdirsVdirsVdirsVdiqReff8AlBvMX/bMvf8AqHfFXeQv+UG8u/8AbMsv+odM&#xA;VT3FXYq4kAVOwHU4qgLWOwnuDcQMxKn1BEQyqGcEeoqsAaOCdx8J3I3qcVR0nPg3pgGSh4BjQE9q&#xA;kA7YqgtMlu5OfrGRkAUhpUEbCQ15oFAX4VHGh36n4jiqOxVQubRZ2Rw7RSJULInGvFqEj4gw3Kjt&#xA;iqrFFHFEkUY4xxqFRfAKKAYquxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;VIvPv/KDeYv+2Ze/9Q74q7yF/wAoN5d/7Zll/wBQ6YqnuKpfNcXwvxGin0+SBECMVZGpzdpfsqV3&#xA;otR078hRVHuiOjI6hkYEMpFQQdiCDiqja2UduzsHeR3AUvIanitSq9B05Hc7nuTiqviqjc3ccHEF&#xA;WeR68I0FWIFKnegoK/w6kDFVSKWOWJJYzyjkUMjeIYVBxVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdiqReff+UG8xf8AbMvf+od8Vd5C/wCUG8u/9syy/wCodMVT3FXY&#xA;q7FXYq7FVK4tYbgKJA1UNVZGZGFdtmQqcVVI40jRY0UKiAKqjoANgBireKuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpF59/5QbzF/2zL3/qHfFXeQv+UG8u/9syy/6h0x&#xA;VPcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQ9vqFpcSGOJiWoWFUdQyggFkZgAw+Ibr44qiM&#xA;VdirsVdirsVS/UIb55gYOdOAEJR+KpJU1aQVXkv2dqN0O2+Kquo331OON6J+8fhylf00X4Wapbi3&#xA;8tOnXFVa1n+sWsM/Hh6qK/E9uQBpiqrirsVdirsVdirsVSLz7/yg3mL/ALZl7/1DvirvIX/KDeXf&#xA;+2ZZf9Q6YqnuKuxV2KuxV2KuxV2KuxVTuZvQt5ZuJf0kZ+A6niK0GKqGn35u1kJVP3ZA5xP6sbVH&#xA;Z6LuO4pirWoXNzCYxCKI3LnJ6Tz0IpReEZVt6k19vfFUTA8jwxvInpyMoLx1rxJFSte9MVX4q7FU&#xA;t1+5vre0je0PAmQLLIOHwJxY1/eEJ9oKNyMVQ2nubbSUv5Ih9YJKUaQ+mEaXiGB+JEQrRzwHHw2p&#xA;hVM9Puzd2izlQhYutFbmvwOVqGoKg0qMCojFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi8+/8oN5i&#xA;/wC2Ze/9Q74q7yF/yg3l3/tmWX/UOmKp7irsVdirsVdirsVdiqD1HVIbBOcqO6rHJNIU4/DHFTmx&#xA;5MvTkOmKqd0Vv41WBQ/pOGltrhXiDqVYDkroTTl8Q+Eiq+2Kou1jkitYYpX9SREVXkNSWYAAnfxx&#xA;Vua6toComlSIuaIHYLU+1euKqmKoC0vL2S+kilj4wr6lD6brTg4VP3jHi/Nfi2G2KoK+PmL9IoIB&#xA;N9U5P6hh+rU48f3fH1fjrX7X4YVTC11ASOkUqlZDVPUFPTaRKiRUqeWxVvtAVptgVGYqhdQtpLiJ&#xA;VQK4VuTwuSqSDiRxYgNtU8vsnpiq+3Vra0UTyD92CXcn4VG5pybso2qfpxVAWXmSyvJSsMcnpj0q&#xA;z/uyn7/+7+y7N8VR+ztXfFUynura3UNcSpCpNA0jBQT4b4qg7qC9lvYpYHJg/dFWWRgoCuWkqoNG&#xA;5pQDr9HXFUwxV2KuxV2KuxV2KuxV2KuxVIvPv/KDeYv+2Ze/9Q74q7yF/wAoN5d/7Zll/wBQ6Yqn&#xA;uKuxV2KuxV2KuxV2KoHWIEmtQrwJMpNGZo/WKKQasqUJJ7bdK13pTFW9Jg9O25srCVy3JnLlmUMe&#xA;BPqFmWo+LjXYk4qjcVY1qt482uLZOJEhWlvL6YAYxXagByWDAp6icDsKdiTthQnlzqVjbTRwTSgT&#xA;ygmOFQXchercVBag7npgSlWgaFPZXr3byRMjxsvqRElrgvJ6gmlqB8QGw3atevTCqaalbNcWxVQH&#xA;KkP6LU4ycf2Gr49vA0JqNiFSXS4ZDaTfVwrzji/KBmVUSeYvNbxq7UjIVe3E9CeJwoRdxbambVXe&#xA;b0giyfFJM0ZiBYmNmMdVkKpxqGNNuprXFKcKyuoZSGVhVWG4IPcYFUL9I2tJDI/ppHSX1KV4mIiQ&#xA;EjuAV3GKpZotvoH1iU26o16HJmYxNEeagGiq4H2A3uRy8WNSqaXNoJ2RxI8MsdQsicSaNQkUdXXq&#xA;oPTtgVB6Ul9E6wSBxBFGUZWC8FZSoQRMAGZeNdzXt0NRiqZ4q7FXYq7FXYq7FXYq7FXYqkXn3/lB&#xA;vMX/AGzL3/qHfFXeQv8AlBvLv/bMsv8AqHTFU9xV2KuxV2KuxV2Kpdb63b3F4YIl5RhxF6hqCXaI&#xA;zKwUgVjKA0eu57U3xVMcVS6bWY4bwwSR/u/V9BWTk8hk9H19o1Ukjh4GvtTfFUabiEW/1jmPQCep&#xA;6nbhStfuxVCypbahBK8CgXUatHFNJGUkikK1H21Dr9oHFUnv/LlzJaXMsjsz81nW2jmmZm9IRt6Q&#xA;mNJAJDDvsabcd+pQreUtWtrqCa2jlhkWCRlga23gMaha+kan4VZqf8R+GmJS3fvr73qpberxHrB0&#xA;VUWNaf3D82A5f5S8j1+ztiqf4FYo1zr2pNcRQsEuEWSWJCi+lBIoPoKxP23JIqCdjU0Wi1KEf5Yt&#xA;NRsbW4W+aRYQ3OMXDxs4Jq8zEozqELN8I5dMUpqk1reRyRbspHGSN1ZCVYEfZYKeJ33wKxrTNMvd&#xA;O1lqszxcwwhZ5ZjLJIFWS5DPT0+IZqr8Q3ptVcKE6Dao106BmSpcVKoYVSjem6UoxavGoLfzbAcT&#xA;gSqabBdRGQzclQhQqPIZTzHLmwZv2WqKdOlaDpiqIuLy2tyomfhyqRsSABSrGg+FRUVJ2xVWxV2K&#xA;oe7vUt2VfTeV2DPxTjUKhAY/EVHVht1xVWjkSSNZENUcBlPiDuMVXYq7FXYq7FUi8+/8oN5i/wC2&#xA;Ze/9Q74q7yF/yg3l3/tmWX/UOmKp7irsVdirsVdirsVQVlpFnaSmaNeUpRYlkYLyWNK8UBABoK99&#xA;/E4q3q+ntqGmz2ayei0wAEnHmAQQd1qtenjiqB0vy5Fa21H9OO5EzTRSWyKgiDVHCMMGHH4jsR38&#xA;d8Kqmo3trYWsls1uZLK3gQTKGPL05CYkVeX2vs71YbeOBUTpaoiTxiP05ElpN+8eWrlFavOSjH4S&#xA;OoxVSuYtQluniIZrSQheP7v0fSKgSB/93cvtU47fZ98VU/8ADdqsc/GR3mn4gyT/ABgKsnqlAi8F&#xA;Cs1eVKVxVX+pT2+mfV4TycPyIi/dVRpebonxfD8JKr8X04qpHUf0bZqb1ZGKpNM5qrFIYmrVyzbl&#xA;UZa0LH54qq6VrVrqRkEKSxtGqOVmTgSknIKwHgSjD6MVSe5sdXivJ7mZ+VszFZWkmcx8JWRKLDUq&#xA;saryLbr178Q2FCcaMoa2+sFi8khZDITXksbsqlafsn7Q3PXqeuBKpf6iLSn7tpPgkmfiQKRxU5nf&#xA;v8QoMVdqV1LbxxMjKgeTg80ilkReLGrAMnUgL16nFVe1leW2ilkQxySIrPGeqkipU18MVS6Iwaoz&#xA;FleHlCjMAVIlt5uXFXqDQ7N9npXZsVRX6Rj+u/VfTevP0vV+Hhz9P1afa5fZ/wAmmKovFVK4tLW5&#xA;AE8SyBa05Cux6j5HuO+KquKuxV2KuxV2KpF59/5QbzF/2zL3/qHfFXeQv+UG8u/9syy/6h0xVPcV&#xA;dirsVdirsVUb1p1tmMFedVqQKsF5DmVBrVgtSPfFUttrvVTMqurMvqBYg8TAyQmnKR3ACIy70U02&#xA;H2asOKqcYq7FVjQQtKkrRq0sdfTkIBZa7Gh6iuKoC/0hZY447eOJY1V1ERHFVaQqfVUKD8S8TTp1&#xA;+0MVdBrVu9+LI15MXjikNSWkhrzVqKFU0BYCvTfaoqqlj3mpT3i2xM5bi0cgX9yqXZUSBUYceaKn&#xA;I78h0+0dgUMgkuIreJXuZUjGwLsQilvbkf44Eqd/aQXVs/K3iuXCN6KTKrqWI2G/Y98VSvR4dP0k&#xA;TliLaCXjSa5IjdnXlyX4uPwqKU9ydzhVGazM0SQMRK8TOVaG35CVjxJHEqVNAFNRX9VCFRdk7vZw&#xA;PI4ldo0LyL9liVFWGw2PyxVAzaSZtTW5mjiliWTmrP8AE4X0uHphStOPP4/tde3fFU0xVL7DTpba&#xA;cuxWnEozLXlMxIPqSbD4hT36nftiqMhtreDl6MSRczV+ChanxNMVa+q2vr/WPRT6x09biOfSn2qV&#xA;6Yqq4q7FXYq7FXYq7FXYqkXn3/lBvMX/AGzL3/qHfFXeQv8AlBvLv/bMsv8AqHTFU9xV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxVBLpFmuoNfKtJmbm1Aoq/D0+RNOf2Nqcqe1cVQ2lLJcXL3NzCUmUI9eMsSiR&#xA;lKOODsVZlUAcwN8VR11atM0ckcnpTRV4PTkKNswKmnhsf4VBVVLeBILeKBK8IkVFr1oooK4qp3Vm&#xA;J2RxK8MiBlDx8a8WIJHxq46qD0rirpLC1eCKAqRHBT0QrMhXivEUZSG6GnXFVaKKOKJIoxxjjUKi&#xA;+AUUAxVdirsVdirsVdiqldTi3tZrgjkIUaQqOpCgmn4Yqp2N21wsnNFR4n4NwYup+FW2JVD+1Tp1&#xA;xVE4q7FUBp+qG7lKemoHHn8EnNk6fDKvEcH36b9D4Yqj8VdiqReff+UG8xf9sy9/6h3xV3kL/lBv&#xA;Lv8A2zLL/qHTFU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrJ2lWGRok9SVVJjjrTkwGwqelTi&#xA;qG0+e5lMnq1aMU4SNG0JLGvJeD0NF2oad6VJBOKrk1GJrgQhH4s7RpN8PAugYsvXltwbfjTbFUVi&#xA;qH1AXJtGFtX1ap9niG48xz48iBXhWm+Kt2IuRbL9Yr6tW+1x5ceR4cuPw140rTFVfFXYq7FUvN1f&#xA;fpQQ8D9X58T+7anD0uXP1Ps19T4aYqjo4440CRqEQdFUUA+gYquxV2KuxV2KuxVIvPv/ACg3mL/t&#xA;mXv/AFDvirvIX/KDeXf+2ZZf9Q6YqnuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVAapaXlxw+rv&#xA;xCq4I9WSH4m48XrGDy40Ox8cVRyghQGPIgULdKnx2xVTFpbi4NwIx6zdX96Ur86ACvWgHhiqrirs&#xA;VdirsVdirsVdirsVdirsVdirsVdiqReff+UG8xf9sy9/6h3xV3kL/lBvLv8A2zLL/qHTFU9xV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpF59/5Q&#xA;bzF/2zL3/qHfFXeQv+UG8u/9syy/6h0xVPcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdiqReff+UG8xf9sy9/6h3xVIV/5UXxHH/C/Gm1P0fSmKt/&#xA;8gN/79j/ALl+Ku/5Ab/37H/cvxV3/IDf+/Y/7l+Ku/5Ab/37H/cvxV3/ACA3/v2P+5firv8AkBv/&#xA;AH7H/cvxV3/IDf8Av2P+5firv+QG/wDfsf8AcvxV3/IDf+/Y/wC5firv+QG/9+x/3L8Vd/yA3/v2&#xA;P+5firv+QG/9+x/3L8Vd/wAgN/79j/uX4q7/AJAb/wB+x/3L8Vd/yA3/AL9j/uX4q7/kBv8A37H/&#xA;AHL8Vd/yA3/v2P8AuX4q7/kBv/fsf9y/FXf8gN/79j/uX4q7/kBv/fsf9y/FXf8AIDf+/Y/7l+Ku&#xA;/wCQG/8Afsf9y/FXf8gN/wC/Y/7l+Ku/5Ab/AN+x/wBy/FXf8gN/79j/ALl+Ku/5Ab/37H/cvxV3&#xA;/IDf+/Y/7l+Ku/5Ab/37H/cvxV3/ACA3/v2P+5firv8AkBv/AH7H/cvxVpv+VF8Ty/wvxpvX9H0p&#xA;ir//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:D861E9D051D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:D961E9D051D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -185.149 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 185.149 li
218.75 185.149 li
218.75 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0.25 0.25 mo
0.25 184.899 li
218.5 184.899 li
218.5 0.25 li
0.25 0.25 li
0.25 0.25 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
0.25 lw
131.235 25.5 mo
131.235 24.6304 130.529 23.9248 129.66 23.9248 cv
128.791 23.9248 128.085 24.6304 128.085 25.5 cv
128.085 26.3691 128.791 27.0747 129.66 27.0747 cv
130.529 27.0747 131.235 26.3691 131.235 25.5 cv
@
1 lc
129.65 25.5 mo
129.65 25.5 li
@
0 lc
128.595 58.98 mo
128.595 58.1104 127.89 57.4048 127.02 57.4048 cv
126.15 57.4048 125.445 58.1104 125.445 58.98 cv
125.445 59.8491 126.15 60.5547 127.02 60.5547 cv
127.89 60.5547 128.595 59.8491 128.595 58.98 cv
@
1 lc
127.1 59.0498 mo
127.1 59.0498 li
@
0 lc
120.435 44.46 mo
120.435 43.5903 119.729 42.8848 118.86 42.8848 cv
117.99 42.8848 117.285 43.5903 117.285 44.46 cv
117.285 45.3291 117.99 46.0347 118.86 46.0347 cv
119.729 46.0347 120.435 45.3291 120.435 44.46 cv
@
1 lc
118.95 44.4497 mo
118.95 44.4497 li
@
0 lc
125.955 66.1797 mo
125.955 65.3105 125.249 64.605 124.38 64.605 cv
123.511 64.605 122.805 65.3105 122.805 66.1797 cv
122.805 67.0493 123.511 67.7549 124.38 67.7549 cv
125.249 67.7549 125.955 67.0493 125.955 66.1797 cv
@
1 lc
124.3 66.1997 mo
124.3 66.1997 li
@
0 lc
112.035 65.9399 mo
112.035 65.0703 111.33 64.3647 110.46 64.3647 cv
109.591 64.3647 108.885 65.0703 108.885 65.9399 cv
108.885 66.8091 109.591 67.5146 110.46 67.5146 cv
111.33 67.5146 112.035 66.8091 112.035 65.9399 cv
@
1 lc
110.45 65.8496 mo
110.45 65.8496 li
@
0 lc
128.835 54.6597 mo
128.835 53.7905 128.129 53.085 127.26 53.085 cv
126.391 53.085 125.685 53.7905 125.685 54.6597 cv
125.685 55.5293 126.391 56.2349 127.26 56.2349 cv
128.129 56.2349 128.835 55.5293 128.835 54.6597 cv
@
1 lc
127.2 54.75 mo
127.2 54.75 li
@
0 lc
132.915 50.6997 mo
132.915 49.8306 132.209 49.125 131.34 49.125 cv
130.471 49.125 129.765 49.8306 129.765 50.6997 cv
129.765 51.5693 130.471 52.2749 131.34 52.2749 cv
132.209 52.2749 132.915 51.5693 132.915 50.6997 cv
@
1 lc
131.4 50.6997 mo
131.4 50.6997 li
@
0 lc
148.035 43.5 mo
148.035 42.6304 147.329 41.9248 146.46 41.9248 cv
145.591 41.9248 144.885 42.6304 144.885 43.5 cv
144.885 44.3691 145.591 45.0747 146.46 45.0747 cv
147.329 45.0747 148.035 44.3691 148.035 43.5 cv
@
1 lc
146.55 43.5 mo
146.55 43.5 li
@
0 lc
144.195 53.6997 mo
144.195 52.8306 143.489 52.125 142.62 52.125 cv
141.751 52.125 141.045 52.8306 141.045 53.6997 cv
141.045 54.5693 141.751 55.2749 142.62 55.2749 cv
143.489 55.2749 144.195 54.5693 144.195 53.6997 cv
@
1 lc
142.55 53.6499 mo
142.55 53.6499 li
@
0 lc
127.635 62.3398 mo
127.635 61.4702 126.93 60.7646 126.06 60.7646 cv
125.19 60.7646 124.485 61.4702 124.485 62.3398 cv
124.485 63.209 125.19 63.915 126.06 63.915 cv
126.93 63.915 127.635 63.209 127.635 62.3398 cv
@
1 lc
126 62.2998 mo
126 62.2998 li
@
0 lc
138.675 42.6597 mo
138.675 41.7905 137.97 41.085 137.1 41.085 cv
136.23 41.085 135.525 41.7905 135.525 42.6597 cv
135.525 43.5293 136.23 44.2349 137.1 44.2349 cv
137.97 44.2349 138.675 43.5293 138.675 42.6597 cv
@
1 lc
137 42.6997 mo
137 42.6997 li
@
0 lc
143.235 52.7397 mo
143.235 51.8701 142.529 51.165 141.66 51.165 cv
140.791 51.165 140.085 51.8701 140.085 52.7397 cv
140.085 53.6094 140.791 54.3149 141.66 54.3149 cv
142.529 54.3149 143.235 53.6094 143.235 52.7397 cv
@
1 lc
141.75 52.7998 mo
141.75 52.7998 li
@
0 lc
118.755 55.6196 mo
118.755 54.7505 118.05 54.0449 117.18 54.0449 cv
116.311 54.0449 115.605 54.7505 115.605 55.6196 cv
115.605 56.4893 116.311 57.1948 117.18 57.1948 cv
118.05 57.1948 118.755 56.4893 118.755 55.6196 cv
@
1 lc
117.15 55.5498 mo
117.15 55.5498 li
@
0 lc
117.315 60.6597 mo
117.315 59.7905 116.609 59.085 115.74 59.085 cv
114.871 59.085 114.165 59.7905 114.165 60.6597 cv
114.165 61.5293 114.871 62.2349 115.74 62.2349 cv
116.609 62.2349 117.315 61.5293 117.315 60.6597 cv
@
1 lc
115.75 60.5996 mo
115.75 60.5996 li
@
0 lc
106.035 66.4199 mo
106.035 65.5503 105.33 64.8447 104.46 64.8447 cv
103.591 64.8447 102.885 65.5503 102.885 66.4199 cv
102.885 67.2891 103.591 67.9946 104.46 67.9946 cv
105.33 67.9946 106.035 67.2891 106.035 66.4199 cv
@
1 lc
104.4 66.4497 mo
104.4 66.4497 li
@
0 lc
130.995 60.1797 mo
130.995 59.3105 130.289 58.605 129.42 58.605 cv
128.551 58.605 127.845 59.3105 127.845 60.1797 cv
127.845 61.0493 128.551 61.7549 129.42 61.7549 cv
130.289 61.7549 130.995 61.0493 130.995 60.1797 cv
@
1 lc
129.5 60.1997 mo
129.5 60.1997 li
@
0 lc
155.955 40.5 mo
155.955 39.6304 155.249 38.9248 154.38 38.9248 cv
153.511 38.9248 152.805 39.6304 152.805 40.5 cv
152.805 41.3691 153.511 42.0747 154.38 42.0747 cv
155.249 42.0747 155.955 41.3691 155.955 40.5 cv
@
1 lc
154.3 40.5996 mo
154.3 40.5996 li
@
0 lc
123.555 54.8999 mo
123.555 54.0303 122.85 53.3247 121.98 53.3247 cv
121.11 53.3247 120.405 54.0303 120.405 54.8999 cv
120.405 55.769 121.11 56.4746 121.98 56.4746 cv
122.85 56.4746 123.555 55.769 123.555 54.8999 cv
@
1 lc
122 54.9497 mo
122 54.9497 li
@
0 lc
129.315 38.0996 mo
129.315 37.2305 128.609 36.5249 127.74 36.5249 cv
126.871 36.5249 126.165 37.2305 126.165 38.0996 cv
126.165 38.9692 126.871 39.6748 127.74 39.6748 cv
128.609 39.6748 129.315 38.9692 129.315 38.0996 cv
@
1 lc
127.75 38.0498 mo
127.75 38.0498 li
@
0 lc
152.115 34.7397 mo
152.115 33.8701 151.409 33.165 150.54 33.165 cv
149.671 33.165 148.965 33.8701 148.965 34.7397 cv
148.965 35.6094 149.671 36.3149 150.54 36.3149 cv
151.409 36.3149 152.115 35.6094 152.115 34.7397 cv
@
1 lc
150.55 34.75 mo
150.55 34.75 li
@
0 lc
130.035 55.1396 mo
130.035 54.2705 129.329 53.5649 128.46 53.5649 cv
127.591 53.5649 126.885 54.2705 126.885 55.1396 cv
126.885 56.0093 127.591 56.7148 128.46 56.7148 cv
129.329 56.7148 130.035 56.0093 130.035 55.1396 cv
@
1 lc
128.45 55.0996 mo
128.45 55.0996 li
@
0 lc
131.715 59.9399 mo
131.715 59.0703 131.01 58.3647 130.14 58.3647 cv
129.271 58.3647 128.565 59.0703 128.565 59.9399 cv
128.565 60.8091 129.271 61.5146 130.14 61.5146 cv
131.01 61.5146 131.715 60.8091 131.715 59.9399 cv
@
1 lc
130.15 59.8496 mo
130.15 59.8496 li
@
0 lc
130.875 57.54 mo
130.875 56.6704 130.169 55.9648 129.3 55.9648 cv
128.431 55.9648 127.725 56.6704 127.725 57.54 cv
127.725 58.4092 128.431 59.1147 129.3 59.1147 cv
130.169 59.1147 130.875 58.4092 130.875 57.54 cv
@
1 lc
129.3 57.4497 mo
129.3 57.4497 li
@
0 lc
154.635 39.0596 mo
154.635 38.1904 153.93 37.4849 153.06 37.4849 cv
152.19 37.4849 151.485 38.1904 151.485 39.0596 cv
151.485 39.9292 152.19 40.6348 153.06 40.6348 cv
153.93 40.6348 154.635 39.9292 154.635 39.0596 cv
@
1 lc
153.05 39 mo
153.05 39 li
@
0 lc
120.675 64.8599 mo
120.675 63.9902 119.97 63.2847 119.1 63.2847 cv
118.23 63.2847 117.525 63.9902 117.525 64.8599 cv
117.525 65.729 118.23 66.4346 119.1 66.4346 cv
119.97 66.4346 120.675 65.729 120.675 64.8599 cv
@
1 lc
119.15 64.8496 mo
119.15 64.8496 li
@
0 lc
138.915 25.6196 mo
138.915 24.7505 138.209 24.0449 137.34 24.0449 cv
136.471 24.0449 135.765 24.7505 135.765 25.6196 cv
135.765 26.4893 136.471 27.1948 137.34 27.1948 cv
138.209 27.1948 138.915 26.4893 138.915 25.6196 cv
@
1 lc
137.35 25.6997 mo
137.35 25.6997 li
@
0 lc
128.355 76.5 mo
128.355 75.6304 127.649 74.9248 126.78 74.9248 cv
125.91 74.9248 125.205 75.6304 125.205 76.5 cv
125.205 77.3691 125.91 78.0747 126.78 78.0747 cv
127.649 78.0747 128.355 77.3691 128.355 76.5 cv
@
1 lc
126.7 76.5996 mo
126.7 76.5996 li
@
0 lc
134.835 47.46 mo
134.835 46.5903 134.129 45.8848 133.26 45.8848 cv
132.391 45.8848 131.685 46.5903 131.685 47.46 cv
131.685 48.3291 132.391 49.0347 133.26 49.0347 cv
134.129 49.0347 134.835 48.3291 134.835 47.46 cv
@
1 lc
133.3 47.5 mo
133.3 47.5 li
@
0 lc
154.995 44.0996 mo
154.995 43.2305 154.289 42.5249 153.42 42.5249 cv
152.551 42.5249 151.845 43.2305 151.845 44.0996 cv
151.845 44.9692 152.551 45.6748 153.42 45.6748 cv
154.289 45.6748 154.995 44.9692 154.995 44.0996 cv
@
1 lc
153.45 44.1997 mo
153.45 44.1997 li
@
0 lc
152.355 33.8999 mo
152.355 33.0303 151.649 32.3247 150.78 32.3247 cv
149.91 32.3247 149.205 33.0303 149.205 33.8999 cv
149.205 34.769 149.91 35.4746 150.78 35.4746 cv
151.649 35.4746 152.355 34.769 152.355 33.8999 cv
@
1 lc
150.75 33.8999 mo
150.75 33.8999 li
@
0 lc
125.955 57.7798 mo
125.955 56.9102 125.249 56.2046 124.38 56.2046 cv
123.511 56.2046 122.805 56.9102 122.805 57.7798 cv
122.805 58.6494 123.511 59.355 124.38 59.355 cv
125.249 59.355 125.955 58.6494 125.955 57.7798 cv
@
1 lc
124.35 57.75 mo
124.35 57.75 li
@
0 lc
144.195 34.0195 mo
144.195 33.1504 143.489 32.4448 142.62 32.4448 cv
141.751 32.4448 141.045 33.1504 141.045 34.0195 cv
141.045 34.8892 141.751 35.5947 142.62 35.5947 cv
143.489 35.5947 144.195 34.8892 144.195 34.0195 cv
@
1 lc
142.7 34.0996 mo
142.7 34.0996 li
@
0 lc
128.835 48.1797 mo
128.835 47.3105 128.129 46.605 127.26 46.605 cv
126.391 46.605 125.685 47.3105 125.685 48.1797 cv
125.685 49.0493 126.391 49.7549 127.26 49.7549 cv
128.129 49.7549 128.835 49.0493 128.835 48.1797 cv
@
1 lc
127.3 48.25 mo
127.3 48.25 li
@
0 lc
125.715 56.0996 mo
125.715 55.2305 125.01 54.5249 124.14 54.5249 cv
123.271 54.5249 122.565 55.2305 122.565 56.0996 cv
122.565 56.9692 123.271 57.6748 124.14 57.6748 cv
125.01 57.6748 125.715 56.9692 125.715 56.0996 cv
@
1 lc
124.15 56 mo
124.15 56 li
@
0 lc
137.835 54.4199 mo
137.835 53.5503 137.129 52.8447 136.26 52.8447 cv
135.391 52.8447 134.685 53.5503 134.685 54.4199 cv
134.685 55.2891 135.391 55.9946 136.26 55.9946 cv
137.129 55.9946 137.835 55.2891 137.835 54.4199 cv
@
1 lc
136.25 54.4497 mo
136.25 54.4497 li
@
0 lc
117.435 77.2197 mo
117.435 76.3506 116.729 75.6445 115.86 75.6445 cv
114.99 75.6445 114.285 76.3506 114.285 77.2197 cv
114.285 78.0894 114.99 78.7949 115.86 78.7949 cv
116.729 78.7949 117.435 78.0894 117.435 77.2197 cv
@
1 lc
115.85 77.1997 mo
115.85 77.1997 li
@
0 lc
167.235 22.8599 mo
167.235 21.9902 166.529 21.2847 165.66 21.2847 cv
164.791 21.2847 164.085 21.9902 164.085 22.8599 cv
164.085 23.729 164.791 24.4346 165.66 24.4346 cv
166.529 24.4346 167.235 23.729 167.235 22.8599 cv
@
1 lc
165.6 22.8496 mo
165.6 22.8496 li
@
0 lc
112.995 67.3799 mo
112.995 66.5103 112.289 65.8047 111.42 65.8047 cv
110.551 65.8047 109.845 66.5103 109.845 67.3799 cv
109.845 68.249 110.551 68.9546 111.42 68.9546 cv
112.289 68.9546 112.995 68.249 112.995 67.3799 cv
@
1 lc
111.45 67.2998 mo
111.45 67.2998 li
@
0 lc
130.515 45.7798 mo
130.515 44.9102 129.81 44.2046 128.94 44.2046 cv
128.07 44.2046 127.365 44.9102 127.365 45.7798 cv
127.365 46.6494 128.07 47.355 128.94 47.355 cv
129.81 47.355 130.515 46.6494 130.515 45.7798 cv
@
1 lc
128.9 45.75 mo
128.9 45.75 li
@
0 lc
145.395 48.6597 mo
145.395 47.7905 144.689 47.085 143.82 47.085 cv
142.95 47.085 142.245 47.7905 142.245 48.6597 cv
142.245 49.5293 142.95 50.2349 143.82 50.2349 cv
144.689 50.2349 145.395 49.5293 145.395 48.6597 cv
@
1 lc
143.8 48.6499 mo
143.8 48.6499 li
@
0 lc
113.715 71.9399 mo
113.715 71.0703 113.01 70.3647 112.141 70.3647 cv
111.271 70.3647 110.565 71.0703 110.565 71.9399 cv
110.565 72.8091 111.271 73.5146 112.141 73.5146 cv
113.01 73.5146 113.715 72.8091 113.715 71.9399 cv
@
1 lc
112.05 71.8496 mo
112.05 71.8496 li
@
0 lc
151.395 57.7798 mo
151.395 56.9102 150.689 56.2046 149.82 56.2046 cv
148.95 56.2046 148.245 56.9102 148.245 57.7798 cv
148.245 58.6494 148.95 59.355 149.82 59.355 cv
150.689 59.355 151.395 58.6494 151.395 57.7798 cv
@
1 lc
149.75 57.8496 mo
149.75 57.8496 li
@
0 lc
134.355 63.2998 mo
134.355 62.4302 133.649 61.7246 132.78 61.7246 cv
131.91 61.7246 131.205 62.4302 131.205 63.2998 cv
131.205 64.1689 131.91 64.875 132.78 64.875 cv
133.649 64.875 134.355 64.1689 134.355 63.2998 cv
@
1 lc
132.7 63.3999 mo
132.7 63.3999 li
@
0 lc
145.395 49.1396 mo
145.395 48.2705 144.689 47.5649 143.82 47.5649 cv
142.95 47.5649 142.245 48.2705 142.245 49.1396 cv
142.245 50.0093 142.95 50.7148 143.82 50.7148 cv
144.689 50.7148 145.395 50.0093 145.395 49.1396 cv
@
1 lc
143.85 49.1499 mo
143.85 49.1499 li
@
0 lc
133.875 41.9399 mo
133.875 41.0703 133.169 40.3647 132.3 40.3647 cv
131.431 40.3647 130.725 41.0703 130.725 41.9399 cv
130.725 42.8091 131.431 43.5146 132.3 43.5146 cv
133.169 43.5146 133.875 42.8091 133.875 41.9399 cv
@
1 lc
132.2 41.8496 mo
132.2 41.8496 li
@
0 lc
122.475 57.0596 mo
122.475 56.1904 121.77 55.4849 120.9 55.4849 cv
120.03 55.4849 119.325 56.1904 119.325 57.0596 cv
119.325 57.9292 120.03 58.6348 120.9 58.6348 cv
121.77 58.6348 122.475 57.9292 122.475 57.0596 cv
@
1 lc
120.9 57.1499 mo
120.9 57.1499 li
@
0 lc
130.995 56.8198 mo
130.995 55.9502 130.289 55.2446 129.42 55.2446 cv
128.551 55.2446 127.845 55.9502 127.845 56.8198 cv
127.845 57.689 128.551 58.3945 129.42 58.3945 cv
130.289 58.3945 130.995 57.689 130.995 56.8198 cv
@
1 lc
129.5 56.8496 mo
129.5 56.8496 li
@
0 lc
131.715 50.5796 mo
131.715 49.7104 131.01 49.0049 130.14 49.0049 cv
129.271 49.0049 128.565 49.7104 128.565 50.5796 cv
128.565 51.4492 129.271 52.1548 130.14 52.1548 cv
131.01 52.1548 131.715 51.4492 131.715 50.5796 cv
@
1 lc
130.15 50.5498 mo
130.15 50.5498 li
@
0 lc
129.555 48.1797 mo
129.555 47.3105 128.85 46.605 127.98 46.605 cv
127.11 46.605 126.405 47.3105 126.405 48.1797 cv
126.405 49.0493 127.11 49.7549 127.98 49.7549 cv
128.85 49.7549 129.555 49.0493 129.555 48.1797 cv
@
1 lc
128 48.1499 mo
128 48.1499 li
@
0 lc
131.955 49.2598 mo
131.955 48.3906 131.249 47.6846 130.38 47.6846 cv
129.511 47.6846 128.805 48.3906 128.805 49.2598 cv
128.805 50.1294 129.511 50.835 130.38 50.835 cv
131.249 50.835 131.955 50.1294 131.955 49.2598 cv
@
1 lc
130.3 49.25 mo
130.3 49.25 li
@
0 lc
50.4751 69.2998 mo
50.4751 68.4302 49.7695 67.7246 48.8999 67.7246 cv
48.0308 67.7246 47.3252 68.4302 47.3252 69.2998 cv
47.3252 70.1689 48.0308 70.875 48.8999 70.875 cv
49.7695 70.875 50.4751 70.1689 50.4751 69.2998 cv
@
1 lc
48.8999 69.3496 mo
48.8999 69.3496 li
@
0 lc
66.4351 63.0596 mo
66.4351 62.1904 65.7295 61.4849 64.8599 61.4849 cv
63.9907 61.4849 63.2852 62.1904 63.2852 63.0596 cv
63.2852 63.9292 63.9907 64.6348 64.8599 64.6348 cv
65.7295 64.6348 66.4351 63.9292 66.4351 63.0596 cv
@
1 lc
64.8999 63.0996 mo
64.8999 63.0996 li
@
0 lc
59.9551 67.6196 mo
59.9551 66.7505 59.2495 66.0449 58.3799 66.0449 cv
57.5107 66.0449 56.8052 66.7505 56.8052 67.6196 cv
56.8052 68.4893 57.5107 69.1948 58.3799 69.1948 cv
59.2495 69.1948 59.9551 68.4893 59.9551 67.6196 cv
@
1 lc
58.3501 67.5498 mo
58.3501 67.5498 li
@
0 lc
44.5952 58.7397 mo
44.5952 57.8701 43.8892 57.165 43.02 57.165 cv
42.1504 57.165 41.4448 57.8701 41.4448 58.7397 cv
41.4448 59.6094 42.1504 60.3149 43.02 60.3149 cv
43.8892 60.3149 44.5952 59.6094 44.5952 58.7397 cv
@
1 lc
42.9502 58.75 mo
42.9502 58.75 li
@
0 lc
72.6748 62.3398 mo
72.6748 61.4702 71.9692 60.7646 71.1001 60.7646 cv
70.2305 60.7646 69.5249 61.4702 69.5249 62.3398 cv
69.5249 63.209 70.2305 63.915 71.1001 63.915 cv
71.9692 63.915 72.6748 63.209 72.6748 62.3398 cv
@
1 lc
71.2002 62.25 mo
71.2002 62.25 li
@
0 lc
56.835 74.8198 mo
56.835 73.9502 56.1294 73.2446 55.2598 73.2446 cv
54.3906 73.2446 53.6851 73.9502 53.6851 74.8198 cv
53.6851 75.689 54.3906 76.3945 55.2598 76.3945 cv
56.1294 76.3945 56.835 75.689 56.835 74.8198 cv
@
1 lc
55.2998 74.8496 mo
55.2998 74.8496 li
@
0 lc
38.355 60.2998 mo
38.355 59.4302 37.6494 58.7246 36.7798 58.7246 cv
35.9106 58.7246 35.2051 59.4302 35.2051 60.2998 cv
35.2051 61.1689 35.9106 61.875 36.7798 61.875 cv
37.6494 61.875 38.355 61.1689 38.355 60.2998 cv
@
1 lc
36.7002 60.2998 mo
36.7002 60.2998 li
@
0 lc
59.4751 62.0996 mo
59.4751 61.2305 58.7695 60.5249 57.8999 60.5249 cv
57.0308 60.5249 56.3252 61.2305 56.3252 62.0996 cv
56.3252 62.9692 57.0308 63.6748 57.8999 63.6748 cv
58.7695 63.6748 59.4751 62.9692 59.4751 62.0996 cv
@
1 lc
58 62.1499 mo
58 62.1499 li
@
0 lc
46.5151 63.2998 mo
46.5151 62.4302 45.8096 61.7246 44.9399 61.7246 cv
44.0708 61.7246 43.3652 62.4302 43.3652 63.2998 cv
43.3652 64.1689 44.0708 64.875 44.9399 64.875 cv
45.8096 64.875 46.5151 64.1689 46.5151 63.2998 cv
@
1 lc
44.9502 63.3496 mo
44.9502 63.3496 li
@
0 lc
46.6348 70.2598 mo
46.6348 69.3906 45.9292 68.6846 45.0601 68.6846 cv
44.1904 68.6846 43.4849 69.3906 43.4849 70.2598 cv
43.4849 71.1294 44.1904 71.835 45.0601 71.835 cv
45.9292 71.835 46.6348 71.1294 46.6348 70.2598 cv
@
1 lc
45.0498 70.3496 mo
45.0498 70.3496 li
@
0 lc
66.4351 62.3398 mo
66.4351 61.4702 65.7295 60.7646 64.8599 60.7646 cv
63.9907 60.7646 63.2852 61.4702 63.2852 62.3398 cv
63.2852 63.209 63.9907 63.915 64.8599 63.915 cv
65.7295 63.915 66.4351 63.209 66.4351 62.3398 cv
@
1 lc
64.8999 62.2998 mo
64.8999 62.2998 li
@
0 lc
55.875 73.8599 mo
55.875 72.9902 55.1694 72.2847 54.2998 72.2847 cv
53.4307 72.2847 52.7251 72.9902 52.7251 73.8599 cv
52.7251 74.729 53.4307 75.4346 54.2998 75.4346 cv
55.1694 75.4346 55.875 74.729 55.875 73.8599 cv
@
1 lc
54.2998 73.8999 mo
54.2998 73.8999 li
@
0 lc
42.6748 68.5796 mo
42.6748 67.7104 41.9692 67.0049 41.1001 67.0049 cv
40.2305 67.0049 39.5249 67.7104 39.5249 68.5796 cv
39.5249 69.4492 40.2305 70.1548 41.1001 70.1548 cv
41.9692 70.1548 42.6748 69.4492 42.6748 68.5796 cv
@
1 lc
41.1499 68.6499 mo
41.1499 68.6499 li
@
0 lc
19.1548 92.9399 mo
19.1548 92.0703 18.4492 91.3647 17.5801 91.3647 cv
16.7104 91.3647 16.0049 92.0703 16.0049 92.9399 cv
16.0049 93.8096 16.7104 94.5146 17.5801 94.5146 cv
18.4492 94.5146 19.1548 93.8096 19.1548 92.9399 cv
@
1 lc
17.6499 92.9497 mo
17.6499 92.9497 li
@
0 lc
39.5552 65.0996 mo
39.5552 64.2305 38.8496 63.5249 37.98 63.5249 cv
37.1104 63.5249 36.4048 64.2305 36.4048 65.0996 cv
36.4048 65.9692 37.1104 66.6748 37.98 66.6748 cv
38.8496 66.6748 39.5552 65.9692 39.5552 65.0996 cv
@
1 lc
38 65.0996 mo
38 65.0996 li
@
0 lc
30.4351 89.2197 mo
30.4351 88.3506 29.7295 87.6445 28.8599 87.6445 cv
27.9907 87.6445 27.2852 88.3506 27.2852 89.2197 cv
27.2852 90.0894 27.9907 90.7949 28.8599 90.7949 cv
29.7295 90.7949 30.4351 90.0894 30.4351 89.2197 cv
@
1 lc
28.8501 89.25 mo
28.8501 89.25 li
@
0 lc
68.835 79.3799 mo
68.835 78.5103 68.1294 77.8047 67.2598 77.8047 cv
66.3906 77.8047 65.6851 78.5103 65.6851 79.3799 cv
65.6851 80.249 66.3906 80.9546 67.2598 80.9546 cv
68.1294 80.9546 68.835 80.249 68.835 79.3799 cv
@
1 lc
67.25 79.3496 mo
67.25 79.3496 li
@
0 lc
59.2349 57.2998 mo
59.2349 56.4302 58.5293 55.7246 57.6602 55.7246 cv
56.7905 55.7246 56.085 56.4302 56.085 57.2998 cv
56.085 58.1689 56.7905 58.875 57.6602 58.875 cv
58.5293 58.875 59.2349 58.1689 59.2349 57.2998 cv
@
1 lc
57.75 57.2998 mo
57.75 57.2998 li
@
0 lc
92.355 72.8999 mo
92.355 72.0303 91.6494 71.3247 90.7798 71.3247 cv
89.9106 71.3247 89.2051 72.0303 89.2051 72.8999 cv
89.2051 73.769 89.9106 74.4746 90.7798 74.4746 cv
91.6494 74.4746 92.355 73.769 92.355 72.8999 cv
@
1 lc
90.75 72.7998 mo
90.75 72.7998 li
@
0 lc
45.5552 46.98 mo
45.5552 46.1104 44.8496 45.4048 43.98 45.4048 cv
43.1104 45.4048 42.4048 46.1104 42.4048 46.98 cv
42.4048 47.8491 43.1104 48.5547 43.98 48.5547 cv
44.8496 48.5547 45.5552 47.8491 45.5552 46.98 cv
@
1 lc
44.0498 46.8999 mo
44.0498 46.8999 li
@
0 lc
32.1152 82.2598 mo
32.1152 81.3906 31.4092 80.6846 30.54 80.6846 cv
29.6704 80.6846 28.9648 81.3906 28.9648 82.2598 cv
28.9648 83.1294 29.6704 83.835 30.54 83.835 cv
31.4092 83.835 32.1152 83.1294 32.1152 82.2598 cv
@
1 lc
30.5498 82.2998 mo
30.5498 82.2998 li
@
0 lc
59.7148 62.8198 mo
59.7148 61.9502 59.0093 61.2446 58.1401 61.2446 cv
57.2705 61.2446 56.5649 61.9502 56.5649 62.8198 cv
56.5649 63.689 57.2705 64.3945 58.1401 64.3945 cv
59.0093 64.3945 59.7148 63.689 59.7148 62.8198 cv
@
1 lc
58.0498 62.75 mo
58.0498 62.75 li
@
0 lc
40.2749 74.3398 mo
40.2749 73.4702 39.5693 72.7646 38.7002 72.7646 cv
37.8306 72.7646 37.125 73.4702 37.125 74.3398 cv
37.125 75.209 37.8306 75.915 38.7002 75.915 cv
39.5693 75.915 40.2749 75.209 40.2749 74.3398 cv
@
1 lc
38.6499 74.2998 mo
38.6499 74.2998 li
@
0 lc
56.5952 61.8599 mo
56.5952 60.9902 55.8892 60.2847 55.02 60.2847 cv
54.1504 60.2847 53.4448 60.9902 53.4448 61.8599 cv
53.4448 62.729 54.1504 63.4346 55.02 63.4346 cv
55.8892 63.4346 56.5952 62.729 56.5952 61.8599 cv
@
1 lc
54.9502 61.9497 mo
54.9502 61.9497 li
@
0 lc
43.395 65.0996 mo
43.395 64.2305 42.6895 63.5249 41.8198 63.5249 cv
40.9507 63.5249 40.2451 64.2305 40.2451 65.0996 cv
40.2451 65.9692 40.9507 66.6748 41.8198 66.6748 cv
42.6895 66.6748 43.395 65.9692 43.395 65.0996 cv
@
1 lc
41.8501 65.0996 mo
41.8501 65.0996 li
@
0 lc
53.9551 56.3398 mo
53.9551 55.4702 53.2495 54.7646 52.3799 54.7646 cv
51.5107 54.7646 50.8052 55.4702 50.8052 56.3398 cv
50.8052 57.209 51.5107 57.915 52.3799 57.915 cv
53.2495 57.915 53.9551 57.209 53.9551 56.3398 cv
@
1 lc
52.3501 56.2998 mo
52.3501 56.2998 li
@
0 lc
42.3149 62.5796 mo
42.3149 61.7104 41.6094 61.0049 40.7402 61.0049 cv
39.8706 61.0049 39.165 61.7104 39.165 62.5796 cv
39.165 63.4492 39.8706 64.1548 40.7402 64.1548 cv
41.6094 64.1548 42.3149 63.4492 42.3149 62.5796 cv
@
1 lc
40.75 62.6499 mo
40.75 62.6499 li
@
0 lc
41.7148 80.0996 mo
41.7148 79.2305 41.0093 78.5249 40.1401 78.5249 cv
39.2705 78.5249 38.5649 79.2305 38.5649 80.0996 cv
38.5649 80.9692 39.2705 81.6748 40.1401 81.6748 cv
41.0093 81.6748 41.7148 80.9692 41.7148 80.0996 cv
@
1 lc
40.0498 80.0996 mo
40.0498 80.0996 li
@
0 lc
61.875 82.5 mo
61.875 81.6304 61.1694 80.9248 60.2998 80.9248 cv
59.4307 80.9248 58.7251 81.6304 58.7251 82.5 cv
58.7251 83.3691 59.4307 84.0747 60.2998 84.0747 cv
61.1694 84.0747 61.875 83.3691 61.875 82.5 cv
@
1 lc
60.2002 82.5498 mo
60.2002 82.5498 li
@
0 lc
46.0352 62.3398 mo
46.0352 61.4702 45.3296 60.7646 44.46 60.7646 cv
43.5908 60.7646 42.8848 61.4702 42.8848 62.3398 cv
42.8848 63.209 43.5908 63.915 44.46 63.915 cv
45.3296 63.915 46.0352 63.209 46.0352 62.3398 cv
@
1 lc
44.5 62.3999 mo
44.5 62.3999 li
@
0 lc
66.915 64.2598 mo
66.915 63.3906 66.2095 62.6846 65.3398 62.6846 cv
64.4707 62.6846 63.7651 63.3906 63.7651 64.2598 cv
63.7651 65.1294 64.4707 65.835 65.3398 65.835 cv
66.2095 65.835 66.915 65.1294 66.915 64.2598 cv
@
1 lc
65.3501 64.2998 mo
65.3501 64.2998 li
@
0 lc
72.4351 69.7798 mo
72.4351 68.9102 71.7295 68.2046 70.8599 68.2046 cv
69.9907 68.2046 69.2852 68.9102 69.2852 69.7798 cv
69.2852 70.6494 69.9907 71.355 70.8599 71.355 cv
71.7295 71.355 72.4351 70.6494 72.4351 69.7798 cv
@
1 lc
70.8999 69.8496 mo
70.8999 69.8496 li
@
0 lc
70.5151 64.5 mo
70.5151 63.6304 69.8096 62.9248 68.9399 62.9248 cv
68.0708 62.9248 67.3652 63.6304 67.3652 64.5 cv
67.3652 65.3691 68.0708 66.0747 68.9399 66.0747 cv
69.8096 66.0747 70.5151 65.3691 70.5151 64.5 cv
@
1 lc
68.8999 64.4497 mo
68.8999 64.4497 li
@
0 lc
44.355 62.8198 mo
44.355 61.9502 43.6494 61.2446 42.7798 61.2446 cv
41.9106 61.2446 41.2051 61.9502 41.2051 62.8198 cv
41.2051 63.689 41.9106 64.3945 42.7798 64.3945 cv
43.6494 64.3945 44.355 63.689 44.355 62.8198 cv
@
1 lc
42.75 62.8496 mo
42.75 62.8496 li
@
0 lc
54.6748 61.1396 mo
54.6748 60.2705 53.9692 59.5649 53.1001 59.5649 cv
52.2305 59.5649 51.5249 60.2705 51.5249 61.1396 cv
51.5249 62.0093 52.2305 62.7148 53.1001 62.7148 cv
53.9692 62.7148 54.6748 62.0093 54.6748 61.1396 cv
@
1 lc
53.0498 61.1997 mo
53.0498 61.1997 li
@
0 lc
48.3149 95.46 mo
48.3149 94.5908 47.6094 93.8848 46.7402 93.8848 cv
45.8706 93.8848 45.165 94.5908 45.165 95.46 cv
45.165 96.3291 45.8706 97.0352 46.7402 97.0352 cv
47.6094 97.0352 48.3149 96.3291 48.3149 95.46 cv
@
1 lc
46.75 95.5498 mo
46.75 95.5498 li
@
0 lc
50.355 75.2998 mo
50.355 74.4302 49.6494 73.7246 48.7798 73.7246 cv
47.9106 73.7246 47.2051 74.4302 47.2051 75.2998 cv
47.2051 76.1689 47.9106 76.875 48.7798 76.875 cv
49.6494 76.875 50.355 76.1689 50.355 75.2998 cv
@
1 lc
48.8501 75.25 mo
48.8501 75.25 li
@
0 lc
40.5151 67.1396 mo
40.5151 66.2705 39.8096 65.5649 38.9399 65.5649 cv
38.0708 65.5649 37.3652 66.2705 37.3652 67.1396 cv
37.3652 68.0093 38.0708 68.7148 38.9399 68.7148 cv
39.8096 68.7148 40.5151 68.0093 40.5151 67.1396 cv
@
1 lc
38.8501 67.1997 mo
38.8501 67.1997 li
@
0 lc
46.7549 78.6597 mo
46.7549 77.7905 46.0493 77.085 45.1802 77.085 cv
44.3105 77.085 43.605 77.7905 43.605 78.6597 cv
43.605 79.5293 44.3105 80.2349 45.1802 80.2349 cv
46.0493 80.2349 46.7549 79.5293 46.7549 78.6597 cv
@
1 lc
45.2002 78.6997 mo
45.2002 78.6997 li
@
0 lc
69.0752 55.6196 mo
69.0752 54.7505 68.3691 54.0449 67.5 54.0449 cv
66.6309 54.0449 65.9248 54.7505 65.9248 55.6196 cv
65.9248 56.4893 66.6309 57.1948 67.5 57.1948 cv
68.3691 57.1948 69.0752 56.4893 69.0752 55.6196 cv
@
1 lc
67.5498 55.5498 mo
67.5498 55.5498 li
@
0 lc
48.0752 72.6597 mo
48.0752 71.7905 47.3696 71.085 46.5 71.085 cv
45.6304 71.085 44.9248 71.7905 44.9248 72.6597 cv
44.9248 73.5293 45.6304 74.2349 46.5 74.2349 cv
47.3696 74.2349 48.0752 73.5293 48.0752 72.6597 cv
@
1 lc
46.5 72.6997 mo
46.5 72.6997 li
@
0 lc
56.355 74.9399 mo
56.355 74.0703 55.6494 73.3647 54.7798 73.3647 cv
53.9106 73.3647 53.2051 74.0703 53.2051 74.9399 cv
53.2051 75.8091 53.9106 76.5146 54.7798 76.5146 cv
55.6494 76.5146 56.355 75.8091 56.355 74.9399 cv
@
1 lc
54.75 74.9497 mo
54.75 74.9497 li
@
0 lc
70.9951 61.1396 mo
70.9951 60.2705 70.2896 59.5649 69.4199 59.5649 cv
68.5508 59.5649 67.8452 60.2705 67.8452 61.1396 cv
67.8452 62.0093 68.5508 62.7148 69.4199 62.7148 cv
70.2896 62.7148 70.9951 62.0093 70.9951 61.1396 cv
@
1 lc
69.3501 61.1997 mo
69.3501 61.1997 li
@
0 lc
68.1152 62.5796 mo
68.1152 61.7104 67.4092 61.0049 66.54 61.0049 cv
65.6704 61.0049 64.9648 61.7104 64.9648 62.5796 cv
64.9648 63.4492 65.6704 64.1548 66.54 64.1548 cv
67.4092 64.1548 68.1152 63.4492 68.1152 62.5796 cv
@
1 lc
66.5498 62.5996 mo
66.5498 62.5996 li
@
0 lc
44.355 64.2598 mo
44.355 63.3906 43.6494 62.6846 42.7798 62.6846 cv
41.9106 62.6846 41.2051 63.3906 41.2051 64.2598 cv
41.2051 65.1294 41.9106 65.835 42.7798 65.835 cv
43.6494 65.835 44.355 65.1294 44.355 64.2598 cv
@
1 lc
42.7998 64.25 mo
42.7998 64.25 li
@
0 lc
43.1548 70.5 mo
43.1548 69.6304 42.4492 68.9248 41.5801 68.9248 cv
40.7104 68.9248 40.0049 69.6304 40.0049 70.5 cv
40.0049 71.3691 40.7104 72.0747 41.5801 72.0747 cv
42.4492 72.0747 43.1548 71.3691 43.1548 70.5 cv
@
1 lc
41.6499 70.4497 mo
41.6499 70.4497 li
@
0 lc
52.2749 62.0996 mo
52.2749 61.2305 51.5693 60.5249 50.7002 60.5249 cv
49.8306 60.5249 49.125 61.2305 49.125 62.0996 cv
49.125 62.9692 49.8306 63.6748 50.7002 63.6748 cv
51.5693 63.6748 52.2749 62.9692 52.2749 62.0996 cv
@
1 lc
50.6001 62.1499 mo
50.6001 62.1499 li
@
0 lc
44.1152 55.6196 mo
44.1152 54.7505 43.4092 54.0449 42.54 54.0449 cv
41.6704 54.0449 40.9648 54.7505 40.9648 55.6196 cv
40.9648 56.4893 41.6704 57.1948 42.54 57.1948 cv
43.4092 57.1948 44.1152 56.4893 44.1152 55.6196 cv
@
1 lc
42.4502 55.6997 mo
42.4502 55.6997 li
@
0 lc
44.1152 85.8599 mo
44.1152 84.9902 43.4092 84.2847 42.54 84.2847 cv
41.6704 84.2847 40.9648 84.9902 40.9648 85.8599 cv
40.9648 86.729 41.6704 87.4346 42.54 87.4346 cv
43.4092 87.4346 44.1152 86.729 44.1152 85.8599 cv
@
1 lc
42.5498 85.8999 mo
42.5498 85.8999 li
@
0 lc
45.5552 47.46 mo
45.5552 46.5903 44.8496 45.8848 43.98 45.8848 cv
43.1104 45.8848 42.4048 46.5903 42.4048 47.46 cv
42.4048 48.3291 43.1104 49.0347 43.98 49.0347 cv
44.8496 49.0347 45.5552 48.3291 45.5552 47.46 cv
@
1 lc
43.9502 47.5 mo
43.9502 47.5 li
@
0 lc
138.195 160.5 mo
138.195 159.63 137.489 158.925 136.62 158.925 cv
135.751 158.925 135.045 159.63 135.045 160.5 cv
135.045 161.369 135.751 162.075 136.62 162.075 cv
137.489 162.075 138.195 161.369 138.195 160.5 cv
@
1 lc
136.7 160.6 mo
136.7 160.6 li
@
0 lc
112.275 161.34 mo
112.275 160.471 111.569 159.765 110.7 159.765 cv
109.831 159.765 109.125 160.471 109.125 161.34 cv
109.125 162.209 109.831 162.915 110.7 162.915 cv
111.569 162.915 112.275 162.209 112.275 161.34 cv
@
1 lc
110.8 161.35 mo
110.8 161.35 li
@
0 lc
91.395 134.58 mo
91.395 133.71 90.6895 133.005 89.8198 133.005 cv
88.9507 133.005 88.2451 133.71 88.2451 134.58 cv
88.2451 135.449 88.9507 136.155 89.8198 136.155 cv
90.6895 136.155 91.395 135.449 91.395 134.58 cv
@
1 lc
89.8999 134.5 mo
89.8999 134.5 li
@
0 lc
112.995 134.58 mo
112.995 133.71 112.289 133.005 111.42 133.005 cv
110.551 133.005 109.845 133.71 109.845 134.58 cv
109.845 135.449 110.551 136.155 111.42 136.155 cv
112.289 136.155 112.995 135.449 112.995 134.58 cv
@
1 lc
111.4 134.5 mo
111.4 134.5 li
@
0 lc
141.315 133.5 mo
141.315 132.63 140.609 131.925 139.74 131.925 cv
138.871 131.925 138.165 132.63 138.165 133.5 cv
138.165 134.369 138.871 135.075 139.74 135.075 cv
140.609 135.075 141.315 134.369 141.315 133.5 cv
@
1 lc
139.75 133.5 mo
139.75 133.5 li
@
0 lc
133.275 122.34 mo
133.275 121.471 132.569 120.765 131.7 120.765 cv
130.831 120.765 130.125 121.471 130.125 122.34 cv
130.125 123.209 130.831 123.915 131.7 123.915 cv
132.569 123.915 133.275 123.209 133.275 122.34 cv
@
1 lc
131.7 122.35 mo
131.7 122.35 li
@
0 lc
91.875 137.46 mo
91.875 136.591 91.1694 135.885 90.2998 135.885 cv
89.4307 135.885 88.7251 136.591 88.7251 137.46 cv
88.7251 138.329 89.4307 139.035 90.2998 139.035 cv
91.1694 139.035 91.875 138.329 91.875 137.46 cv
@
1 lc
90.2002 137.45 mo
90.2002 137.45 li
@
0 lc
81.0752 128.819 mo
81.0752 127.95 80.3691 127.245 79.5 127.245 cv
78.6309 127.245 77.9248 127.95 77.9248 128.819 cv
77.9248 129.689 78.6309 130.395 79.5 130.395 cv
80.3691 130.395 81.0752 129.689 81.0752 128.819 cv
@
1 lc
79.5498 128.899 mo
79.5498 128.899 li
@
0 lc
87.0752 150.899 mo
87.0752 150.03 86.3691 149.325 85.5 149.325 cv
84.6309 149.325 83.9248 150.03 83.9248 150.899 cv
83.9248 151.77 84.6309 152.475 85.5 152.475 cv
86.3691 152.475 87.0752 151.77 87.0752 150.899 cv
@
1 lc
85.4502 151 mo
85.4502 151 li
@
0 lc
115.875 125.7 mo
115.875 124.83 115.169 124.125 114.3 124.125 cv
113.431 124.125 112.725 124.83 112.725 125.7 cv
112.725 126.569 113.431 127.274 114.3 127.274 cv
115.169 127.274 115.875 126.569 115.875 125.7 cv
@
1 lc
114.3 125.75 mo
114.3 125.75 li
@
0 lc
121.395 139.14 mo
121.395 138.271 120.689 137.564 119.82 137.564 cv
118.95 137.564 118.245 138.271 118.245 139.14 cv
118.245 140.009 118.95 140.715 119.82 140.715 cv
120.689 140.715 121.395 140.009 121.395 139.14 cv
@
1 lc
119.85 139.05 mo
119.85 139.05 li
@
0 lc
110.595 114.18 mo
110.595 113.311 109.89 112.604 109.02 112.604 cv
108.15 112.604 107.445 113.311 107.445 114.18 cv
107.445 115.049 108.15 115.755 109.02 115.755 cv
109.89 115.755 110.595 115.049 110.595 114.18 cv
@
1 lc
109.1 114.149 mo
109.1 114.149 li
@
0 lc
61.395 122.1 mo
61.395 121.23 60.6895 120.524 59.8198 120.524 cv
58.9507 120.524 58.2451 121.23 58.2451 122.1 cv
58.2451 122.969 58.9507 123.675 59.8198 123.675 cv
60.6895 123.675 61.395 122.969 61.395 122.1 cv
@
1 lc
59.8999 122 mo
59.8999 122 li
@
0 lc
147.315 145.62 mo
147.315 144.75 146.609 144.045 145.74 144.045 cv
144.871 144.045 144.165 144.75 144.165 145.62 cv
144.165 146.489 144.871 147.194 145.74 147.194 cv
146.609 147.194 147.315 146.489 147.315 145.62 cv
@
1 lc
145.75 145.7 mo
145.75 145.7 li
@
0 lc
113.835 133.62 mo
113.835 132.75 113.129 132.045 112.26 132.045 cv
111.391 132.045 110.685 132.75 110.685 133.62 cv
110.685 134.489 111.391 135.194 112.26 135.194 cv
113.129 135.194 113.835 134.489 113.835 133.62 cv
@
1 lc
112.25 133.7 mo
112.25 133.7 li
@
0 lc
120.195 139.62 mo
120.195 138.75 119.489 138.045 118.62 138.045 cv
117.751 138.045 117.045 138.75 117.045 139.62 cv
117.045 140.489 117.751 141.194 118.62 141.194 cv
119.489 141.194 120.195 140.489 120.195 139.62 cv
@
1 lc
118.65 139.7 mo
118.65 139.7 li
@
0 lc
135.315 134.34 mo
135.315 133.471 134.609 132.765 133.74 132.765 cv
132.871 132.765 132.165 133.471 132.165 134.34 cv
132.165 135.209 132.871 135.915 133.74 135.915 cv
134.609 135.915 135.315 135.209 135.315 134.34 cv
@
1 lc
133.7 134.3 mo
133.7 134.3 li
@
0 lc
87.5552 130.979 mo
87.5552 130.11 86.8496 129.405 85.98 129.405 cv
85.1104 129.405 84.4048 130.11 84.4048 130.979 cv
84.4048 131.85 85.1104 132.555 85.98 132.555 cv
86.8496 132.555 87.5552 131.85 87.5552 130.979 cv
@
1 lc
86 130.95 mo
86 130.95 li
@
0 lc
80.1152 127.62 mo
80.1152 126.75 79.4092 126.045 78.54 126.045 cv
77.6704 126.045 76.9648 126.75 76.9648 127.62 cv
76.9648 128.489 77.6704 129.194 78.54 129.194 cv
79.4092 129.194 80.1152 128.489 80.1152 127.62 cv
@
1 lc
78.5 127.55 mo
78.5 127.55 li
@
0 lc
123.555 146.58 mo
123.555 145.71 122.85 145.005 121.98 145.005 cv
121.11 145.005 120.405 145.71 120.405 146.58 cv
120.405 147.449 121.11 148.155 121.98 148.155 cv
122.85 148.155 123.555 147.449 123.555 146.58 cv
@
1 lc
122 146.649 mo
122 146.649 li
@
0 lc
112.275 147.3 mo
112.275 146.431 111.569 145.725 110.7 145.725 cv
109.831 145.725 109.125 146.431 109.125 147.3 cv
109.125 148.169 109.831 148.875 110.7 148.875 cv
111.569 148.875 112.275 148.169 112.275 147.3 cv
@
1 lc
110.6 147.3 mo
110.6 147.3 li
@
0 lc
92.355 125.22 mo
92.355 124.351 91.6494 123.645 90.7798 123.645 cv
89.9106 123.645 89.2051 124.351 89.2051 125.22 cv
89.2051 126.089 89.9106 126.795 90.7798 126.795 cv
91.6494 126.795 92.355 126.089 92.355 125.22 cv
@
1 lc
90.7998 125.149 mo
90.7998 125.149 li
@
0 lc
124.755 141.54 mo
124.755 140.67 124.05 139.965 123.18 139.965 cv
122.311 139.965 121.605 140.67 121.605 141.54 cv
121.605 142.409 122.311 143.115 123.18 143.115 cv
124.05 143.115 124.755 142.409 124.755 141.54 cv
@
1 lc
123.15 141.55 mo
123.15 141.55 li
@
0 lc
77.7148 136.74 mo
77.7148 135.87 77.0093 135.165 76.1401 135.165 cv
75.2705 135.165 74.5649 135.87 74.5649 136.74 cv
74.5649 137.609 75.2705 138.314 76.1401 138.314 cv
77.0093 138.314 77.7148 137.609 77.7148 136.74 cv
@
1 lc
76.1001 136.75 mo
76.1001 136.75 li
@
0 lc
123.675 150.42 mo
123.675 149.551 122.97 148.845 122.1 148.845 cv
121.23 148.845 120.525 149.551 120.525 150.42 cv
120.525 151.289 121.23 151.995 122.1 151.995 cv
122.97 151.995 123.675 151.289 123.675 150.42 cv
@
1 lc
122.1 150.399 mo
122.1 150.399 li
@
0 lc
117.555 131.22 mo
117.555 130.351 116.85 129.645 115.98 129.645 cv
115.11 129.645 114.405 130.351 114.405 131.22 cv
114.405 132.089 115.11 132.795 115.98 132.795 cv
116.85 132.795 117.555 132.089 117.555 131.22 cv
@
1 lc
115.95 131.3 mo
115.95 131.3 li
@
0 lc
117.915 114.42 mo
117.915 113.551 117.209 112.845 116.34 112.845 cv
115.471 112.845 114.765 113.551 114.765 114.42 cv
114.765 115.289 115.471 115.995 116.34 115.995 cv
117.209 115.995 117.915 115.289 117.915 114.42 cv
@
1 lc
116.35 114.5 mo
116.35 114.5 li
@
0 lc
51.0752 137.22 mo
51.0752 136.351 50.3696 135.645 49.5 135.645 cv
48.6304 135.645 47.9248 136.351 47.9248 137.22 cv
47.9248 138.089 48.6304 138.795 49.5 138.795 cv
50.3696 138.795 51.0752 138.089 51.0752 137.22 cv
@
1 lc
49.4502 137.3 mo
49.4502 137.3 li
@
0 lc
153.675 142.5 mo
153.675 141.63 152.97 140.925 152.1 140.925 cv
151.23 140.925 150.525 141.63 150.525 142.5 cv
150.525 143.369 151.23 144.075 152.1 144.075 cv
152.97 144.075 153.675 143.369 153.675 142.5 cv
@
1 lc
152.1 142.5 mo
152.1 142.5 li
@
0 lc
177.795 136.02 mo
177.795 135.15 177.09 134.444 176.22 134.444 cv
175.351 134.444 174.645 135.15 174.645 136.02 cv
174.645 136.89 175.351 137.595 176.22 137.595 cv
177.09 137.595 177.795 136.89 177.795 136.02 cv
@
1 lc
176.3 135.95 mo
176.3 135.95 li
@
0 lc
149.475 118.979 mo
149.475 118.11 148.77 117.405 147.9 117.405 cv
147.03 117.405 146.325 118.11 146.325 118.979 cv
146.325 119.85 147.03 120.555 147.9 120.555 cv
148.77 120.555 149.475 119.85 149.475 118.979 cv
@
1 lc
148 119.05 mo
148 119.05 li
@
0 lc
87.3149 140.1 mo
87.3149 139.23 86.6094 138.524 85.7402 138.524 cv
84.8706 138.524 84.165 139.23 84.165 140.1 cv
84.165 140.969 84.8706 141.675 85.7402 141.675 cv
86.6094 141.675 87.3149 140.969 87.3149 140.1 cv
@
1 lc
85.6499 140.149 mo
85.6499 140.149 li
@
0 lc
103.035 151.5 mo
103.035 150.63 102.33 149.925 101.46 149.925 cv
100.591 149.925 99.8848 150.63 99.8848 151.5 cv
99.8848 152.369 100.591 153.075 101.46 153.075 cv
102.33 153.075 103.035 152.369 103.035 151.5 cv
@
1 lc
101.45 151.5 mo
101.45 151.5 li
@
0 lc
156.915 137.22 mo
156.915 136.351 156.209 135.645 155.34 135.645 cv
154.471 135.645 153.765 136.351 153.765 137.22 cv
153.765 138.089 154.471 138.795 155.34 138.795 cv
156.209 138.795 156.915 138.089 156.915 137.22 cv
@
1 lc
155.3 137.3 mo
155.3 137.3 li
@
0 lc
124.035 118.5 mo
124.035 117.63 123.329 116.925 122.46 116.925 cv
121.591 116.925 120.885 117.63 120.885 118.5 cv
120.885 119.369 121.591 120.075 122.46 120.075 cv
123.329 120.075 124.035 119.369 124.035 118.5 cv
@
1 lc
122.4 118.6 mo
122.4 118.6 li
@
0 lc
156.675 105.54 mo
156.675 104.67 155.97 103.965 155.1 103.965 cv
154.23 103.965 153.525 104.67 153.525 105.54 cv
153.525 106.409 154.23 107.115 155.1 107.115 cv
155.97 107.115 156.675 106.409 156.675 105.54 cv
@
1 lc
155.2 105.5 mo
155.2 105.5 li
@
0 lc
86.355 149.22 mo
86.355 148.351 85.6494 147.645 84.7798 147.645 cv
83.9106 147.645 83.2051 148.351 83.2051 149.22 cv
83.2051 150.089 83.9106 150.795 84.7798 150.795 cv
85.6494 150.795 86.355 150.089 86.355 149.22 cv
@
1 lc
84.8501 149.25 mo
84.8501 149.25 li
@
0 lc
143.955 123.78 mo
143.955 122.91 143.249 122.205 142.38 122.205 cv
141.511 122.205 140.805 122.91 140.805 123.78 cv
140.805 124.649 141.511 125.354 142.38 125.354 cv
143.249 125.354 143.955 124.649 143.955 123.78 cv
@
1 lc
142.3 123.75 mo
142.3 123.75 li
@
0 lc
102.435 133.14 mo
102.435 132.271 101.729 131.564 100.86 131.564 cv
99.9907 131.564 99.2852 132.271 99.2852 133.14 cv
99.2852 134.009 99.9907 134.715 100.86 134.715 cv
101.729 134.715 102.435 134.009 102.435 133.14 cv
@
1 lc
100.8 133.05 mo
100.8 133.05 li
@
0 lc
92.355 147.3 mo
92.355 146.431 91.6494 145.725 90.7798 145.725 cv
89.9106 145.725 89.2051 146.431 89.2051 147.3 cv
89.2051 148.169 89.9106 148.875 90.7798 148.875 cv
91.6494 148.875 92.355 148.169 92.355 147.3 cv
@
1 lc
90.8501 147.2 mo
90.8501 147.2 li
@
0 lc
84.4351 132.42 mo
84.4351 131.551 83.7295 130.845 82.8599 130.845 cv
81.9907 130.845 81.2852 131.551 81.2852 132.42 cv
81.2852 133.289 81.9907 133.995 82.8599 133.995 cv
83.7295 133.995 84.4351 133.289 84.4351 132.42 cv
@
1 lc
82.8501 132.45 mo
82.8501 132.45 li
@
0 lc
144.195 141.3 mo
144.195 140.431 143.489 139.725 142.62 139.725 cv
141.751 139.725 141.045 140.431 141.045 141.3 cv
141.045 142.169 141.751 142.875 142.62 142.875 cv
143.489 142.875 144.195 142.169 144.195 141.3 cv
@
1 lc
142.65 141.25 mo
142.65 141.25 li
@
0 lc
97.2749 138.42 mo
97.2749 137.551 96.5693 136.845 95.7002 136.845 cv
94.8306 136.845 94.125 137.551 94.125 138.42 cv
94.125 139.289 94.8306 139.995 95.7002 139.995 cv
96.5693 139.995 97.2749 139.289 97.2749 138.42 cv
@
1 lc
95.7002 138.399 mo
95.7002 138.399 li
@
0 lc
100.515 119.7 mo
100.515 118.83 99.8096 118.125 98.9399 118.125 cv
98.0708 118.125 97.3652 118.83 97.3652 119.7 cv
97.3652 120.569 98.0708 121.274 98.9399 121.274 cv
99.8096 121.274 100.515 120.569 100.515 119.7 cv
@
1 lc
98.8501 119.8 mo
98.8501 119.8 li
@
0 lc
135.315 122.34 mo
135.315 121.471 134.609 120.765 133.74 120.765 cv
132.871 120.765 132.165 121.471 132.165 122.34 cv
132.165 123.209 132.871 123.915 133.74 123.915 cv
134.609 123.915 135.315 123.209 135.315 122.34 cv
@
1 lc
133.65 122.399 mo
133.65 122.399 li
@
0 lc
120.915 163.38 mo
120.915 162.511 120.209 161.805 119.34 161.805 cv
118.471 161.805 117.765 162.511 117.765 163.38 cv
117.765 164.249 118.471 164.955 119.34 164.955 cv
120.209 164.955 120.915 164.249 120.915 163.38 cv
@
1 lc
119.25 163.399 mo
119.25 163.399 li
@
0 lc
125.955 136.979 mo
125.955 136.11 125.249 135.405 124.38 135.405 cv
123.511 135.405 122.805 136.11 122.805 136.979 cv
122.805 137.85 123.511 138.555 124.38 138.555 cv
125.249 138.555 125.955 137.85 125.955 136.979 cv
@
1 lc
124.4 137 mo
124.4 137 li
@
0 lc
81.7949 124.02 mo
81.7949 123.15 81.0894 122.444 80.2202 122.444 cv
79.3506 122.444 78.645 123.15 78.645 124.02 cv
78.645 124.89 79.3506 125.595 80.2202 125.595 cv
81.0894 125.595 81.7949 124.89 81.7949 124.02 cv
@
1 lc
80.2998 124.1 mo
80.2998 124.1 li
@
0 lc
69.0752 118.5 mo
69.0752 117.63 68.3691 116.925 67.5 116.925 cv
66.6309 116.925 65.9248 117.63 65.9248 118.5 cv
65.9248 119.369 66.6309 120.075 67.5 120.075 cv
68.3691 120.075 69.0752 119.369 69.0752 118.5 cv
@
1 lc
67.5498 118.399 mo
67.5498 118.399 li
@
0 lc
164.835 107.7 mo
164.835 106.83 164.129 106.125 163.26 106.125 cv
162.391 106.125 161.685 106.83 161.685 107.7 cv
161.685 108.569 162.391 109.274 163.26 109.274 cv
164.129 109.274 164.835 108.569 164.835 107.7 cv
@
1 lc
163.3 107.8 mo
163.3 107.8 li
@
0 lc
52.7549 135.54 mo
52.7549 134.67 52.0493 133.965 51.1802 133.965 cv
50.3105 133.965 49.605 134.67 49.605 135.54 cv
49.605 136.409 50.3105 137.115 51.1802 137.115 cv
52.0493 137.115 52.7549 136.409 52.7549 135.54 cv
@
1 lc
51.2002 135.5 mo
51.2002 135.5 li
@
0 lc
63.0752 138.42 mo
63.0752 137.551 62.3691 136.845 61.5 136.845 cv
60.6304 136.845 59.9248 137.551 59.9248 138.42 cv
59.9248 139.289 60.6304 139.995 61.5 139.995 cv
62.3691 139.995 63.0752 139.289 63.0752 138.42 cv
@
1 lc
61.4502 138.5 mo
61.4502 138.5 li
@
0 lc
146.595 132.66 mo
146.595 131.79 145.89 131.085 145.02 131.085 cv
144.15 131.085 143.445 131.79 143.445 132.66 cv
143.445 133.529 144.15 134.234 145.02 134.234 cv
145.89 134.234 146.595 133.529 146.595 132.66 cv
@
1 lc
145 132.6 mo
145 132.6 li
@
0 lc
134.355 130.5 mo
134.355 129.63 133.649 128.925 132.78 128.925 cv
131.91 128.925 131.205 129.63 131.205 130.5 cv
131.205 131.369 131.91 132.075 132.78 132.075 cv
133.649 132.075 134.355 131.369 134.355 130.5 cv
@
1 lc
132.75 130.399 mo
132.75 130.399 li
@
0 lc
162.195 142.74 mo
162.195 141.87 161.489 141.165 160.62 141.165 cv
159.751 141.165 159.045 141.87 159.045 142.74 cv
159.045 143.609 159.751 144.314 160.62 144.314 cv
161.489 144.314 162.195 143.609 162.195 142.74 cv
@
1 lc
160.7 142.8 mo
160.7 142.8 li
@
0 lc
113.235 109.26 mo
113.235 108.391 112.529 107.685 111.66 107.685 cv
110.791 107.685 110.085 108.391 110.085 109.26 cv
110.085 110.129 110.791 110.835 111.66 110.835 cv
112.529 110.835 113.235 110.129 113.235 109.26 cv
@
1 lc
111.7 109.25 mo
111.7 109.25 li
@
0 lc
112.275 143.46 mo
112.275 142.591 111.569 141.885 110.7 141.885 cv
109.831 141.885 109.125 142.591 109.125 143.46 cv
109.125 144.329 109.831 145.035 110.7 145.035 cv
111.569 145.035 112.275 144.329 112.275 143.46 cv
@
1 lc
110.6 143.5 mo
110.6 143.5 li
@
0 lc
74.1152 142.26 mo
74.1152 141.391 73.4092 140.685 72.54 140.685 cv
71.6704 140.685 70.9648 141.391 70.9648 142.26 cv
70.9648 143.129 71.6704 143.835 72.54 143.835 cv
73.4092 143.835 74.1152 143.129 74.1152 142.26 cv
@
1 lc
72.4502 142.3 mo
72.4502 142.3 li
@
0 lc
53.2349 147.66 mo
53.2349 146.79 52.5293 146.085 51.6602 146.085 cv
50.7905 146.085 50.085 146.79 50.085 147.66 cv
50.085 148.529 50.7905 149.234 51.6602 149.234 cv
52.5293 149.234 53.2349 148.529 53.2349 147.66 cv
@
1 lc
51.7002 147.649 mo
51.7002 147.649 li
@
0 lc
118.515 133.14 mo
118.515 132.271 117.81 131.564 116.94 131.564 cv
116.07 131.564 115.365 132.271 115.365 133.14 cv
115.365 134.009 116.07 134.715 116.94 134.715 cv
117.81 134.715 118.515 134.009 118.515 133.14 cv
@
1 lc
116.95 133.1 mo
116.95 133.1 li
@
0 lc
100.275 133.74 mo
100.275 132.87 99.5693 132.165 98.7002 132.165 cv
97.8306 132.165 97.125 132.87 97.125 133.74 cv
97.125 134.609 97.8306 135.314 98.7002 135.314 cv
99.5693 135.314 100.275 134.609 100.275 133.74 cv
@
1 lc
98.7002 133.75 mo
98.7002 133.75 li
@
0 lc
77.7148 142.26 mo
77.7148 141.391 77.0093 140.685 76.1401 140.685 cv
75.2705 140.685 74.5649 141.391 74.5649 142.26 cv
74.5649 143.129 75.2705 143.835 76.1401 143.835 cv
77.0093 143.835 77.7148 143.129 77.7148 142.26 cv
@
1 lc
76.1001 142.25 mo
76.1001 142.25 li
@
0 lc
169.155 161.34 mo
169.155 160.471 168.449 159.765 167.58 159.765 cv
166.711 159.765 166.005 160.471 166.005 161.34 cv
166.005 162.209 166.711 162.915 167.58 162.915 cv
168.449 162.915 169.155 162.209 169.155 161.34 cv
@
1 lc
167.6 161.35 mo
167.6 161.35 li
@
0 lc
49.6348 147.3 mo
49.6348 146.431 48.9292 145.725 48.0601 145.725 cv
47.1904 145.725 46.4849 146.431 46.4849 147.3 cv
46.4849 148.169 47.1904 148.875 48.0601 148.875 cv
48.9292 148.875 49.6348 148.169 49.6348 147.3 cv
@
1 lc
48 147.399 mo
48 147.399 li
@
0 lc
110.835 126.18 mo
110.835 125.311 110.129 124.604 109.26 124.604 cv
108.391 124.604 107.685 125.311 107.685 126.18 cv
107.685 127.049 108.391 127.755 109.26 127.755 cv
110.129 127.755 110.835 127.049 110.835 126.18 cv
@
1 lc
109.25 126.25 mo
109.25 126.25 li
@
0 lc
88.9951 130.02 mo
88.9951 129.15 88.2896 128.444 87.4199 128.444 cv
86.5508 128.444 85.8452 129.15 85.8452 130.02 cv
85.8452 130.89 86.5508 131.595 87.4199 131.595 cv
88.2896 131.595 88.9951 130.89 88.9951 130.02 cv
@
1 lc
87.3999 129.95 mo
87.3999 129.95 li
@
0 lc
109.395 166.5 mo
109.395 165.63 108.689 164.925 107.82 164.925 cv
106.951 164.925 106.245 165.63 106.245 166.5 cv
106.245 167.369 106.951 168.075 107.82 168.075 cv
108.689 168.075 109.395 167.369 109.395 166.5 cv
@
1 lc
107.75 166.6 mo
107.75 166.6 li
@
0 lc
102.675 119.7 mo
102.675 118.83 101.969 118.125 101.1 118.125 cv
100.23 118.125 99.5249 118.83 99.5249 119.7 cv
99.5249 120.569 100.23 121.274 101.1 121.274 cv
101.969 121.274 102.675 120.569 102.675 119.7 cv
@
1 lc
101.15 119.7 mo
101.15 119.7 li
@
0 lc
64.0352 138.66 mo
64.0352 137.79 63.3296 137.085 62.46 137.085 cv
61.5908 137.085 60.8848 137.79 60.8848 138.66 cv
60.8848 139.529 61.5908 140.234 62.46 140.234 cv
63.3296 140.234 64.0352 139.529 64.0352 138.66 cv
@
1 lc
62.5 138.6 mo
62.5 138.6 li
@
0 lc
133.635 132.54 mo
133.635 131.67 132.93 130.965 132.06 130.965 cv
131.19 130.965 130.485 131.67 130.485 132.54 cv
130.485 133.409 131.19 134.115 132.06 134.115 cv
132.93 134.115 133.635 133.409 133.635 132.54 cv
@
1 lc
132 132.55 mo
132 132.55 li
@
0 lc
112.515 142.74 mo
112.515 141.87 111.81 141.165 110.94 141.165 cv
110.071 141.165 109.365 141.87 109.365 142.74 cv
109.365 143.609 110.071 144.314 110.94 144.314 cv
111.81 144.314 112.515 143.609 112.515 142.74 cv
@
1 lc
110.95 142.7 mo
110.95 142.7 li
@
0 lc
173.235 155.7 mo
173.235 154.83 172.529 154.125 171.66 154.125 cv
170.791 154.125 170.085 154.83 170.085 155.7 cv
170.085 156.569 170.791 157.274 171.66 157.274 cv
172.529 157.274 173.235 156.569 173.235 155.7 cv
@
1 lc
171.75 155.75 mo
171.75 155.75 li
@
0 lc
103.875 124.979 mo
103.875 124.11 103.169 123.405 102.3 123.405 cv
101.431 123.405 100.725 124.11 100.725 124.979 cv
100.725 125.85 101.431 126.555 102.3 126.555 cv
103.169 126.555 103.875 125.85 103.875 124.979 cv
@
1 lc
102.4 125.05 mo
102.4 125.05 li
@
0 lc
104.115 139.74 mo
104.115 138.87 103.409 138.165 102.54 138.165 cv
101.67 138.165 100.965 138.87 100.965 139.74 cv
100.965 140.609 101.67 141.314 102.54 141.314 cv
103.409 141.314 104.115 140.609 104.115 139.74 cv
@
1 lc
102.6 139.75 mo
102.6 139.75 li
@
0 lc
82.0352 145.62 mo
82.0352 144.75 81.3296 144.045 80.46 144.045 cv
79.5908 144.045 78.8848 144.75 78.8848 145.62 cv
78.8848 146.489 79.5908 147.194 80.46 147.194 cv
81.3296 147.194 82.0352 146.489 82.0352 145.62 cv
@
1 lc
80.5498 145.649 mo
80.5498 145.649 li
@
0 lc
116.355 151.14 mo
116.355 150.271 115.649 149.564 114.78 149.564 cv
113.91 149.564 113.205 150.271 113.205 151.14 cv
113.205 152.009 113.91 152.715 114.78 152.715 cv
115.649 152.715 116.355 152.009 116.355 151.14 cv
@
1 lc
114.7 151.05 mo
114.7 151.05 li
@
0 lc
90.6748 132.18 mo
90.6748 131.311 89.9692 130.604 89.1001 130.604 cv
88.2305 130.604 87.5249 131.311 87.5249 132.18 cv
87.5249 133.049 88.2305 133.755 89.1001 133.755 cv
89.9692 133.755 90.6748 133.049 90.6748 132.18 cv
@
1 lc
89.1499 132.25 mo
89.1499 132.25 li
@
0 lc
147.435 126.66 mo
147.435 125.79 146.729 125.085 145.86 125.085 cv
144.99 125.085 144.285 125.79 144.285 126.66 cv
144.285 127.529 144.99 128.234 145.86 128.234 cv
146.729 128.234 147.435 127.529 147.435 126.66 cv
@
1 lc
145.85 126.649 mo
145.85 126.649 li
@
0 lc
119.235 132.899 mo
119.235 132.03 118.529 131.325 117.66 131.325 cv
116.791 131.325 116.085 132.03 116.085 132.899 cv
116.085 133.77 116.791 134.475 117.66 134.475 cv
118.529 134.475 119.235 133.77 119.235 132.899 cv
@
1 lc
117.7 132.85 mo
117.7 132.85 li
@
0 lc
195.075 155.46 mo
195.075 154.591 194.369 153.885 193.5 153.885 cv
192.631 153.885 191.925 154.591 191.925 155.46 cv
191.925 156.329 192.631 157.035 193.5 157.035 cv
194.369 157.035 195.075 156.329 195.075 155.46 cv
@
1 lc
193.6 155.399 mo
193.6 155.399 li
@
0 lc
95.7148 146.46 mo
95.7148 145.591 95.0093 144.885 94.1401 144.885 cv
93.2705 144.885 92.5649 145.591 92.5649 146.46 cv
92.5649 147.329 93.2705 148.035 94.1401 148.035 cv
95.0093 148.035 95.7148 147.329 95.7148 146.46 cv
@
1 lc
94.0498 146.45 mo
94.0498 146.45 li
@
0 lc
69.0752 137.1 mo
69.0752 136.23 68.3691 135.524 67.5 135.524 cv
66.6309 135.524 65.9248 136.23 65.9248 137.1 cv
65.9248 137.969 66.6309 138.675 67.5 138.675 cv
68.3691 138.675 69.0752 137.969 69.0752 137.1 cv
@
1 lc
67.3999 137.1 mo
67.3999 137.1 li
@
0 lc
92.1152 154.74 mo
92.1152 153.87 91.4092 153.165 90.54 153.165 cv
89.6704 153.165 88.9648 153.87 88.9648 154.74 cv
88.9648 155.609 89.6704 156.314 90.54 156.314 cv
91.4092 156.314 92.1152 155.609 92.1152 154.74 cv
@
1 lc
90.6001 154.8 mo
90.6001 154.8 li
@
0 lc
92.835 136.5 mo
92.835 135.63 92.1294 134.925 91.2598 134.925 cv
90.3906 134.925 89.6851 135.63 89.6851 136.5 cv
89.6851 137.369 90.3906 138.075 91.2598 138.075 cv
92.1294 138.075 92.835 137.369 92.835 136.5 cv
@
1 lc
91.25 136.399 mo
91.25 136.399 li
@
0 lc
70.9951 114.42 mo
70.9951 113.551 70.2896 112.845 69.4199 112.845 cv
68.5508 112.845 67.8452 113.551 67.8452 114.42 cv
67.8452 115.289 68.5508 115.995 69.4199 115.995 cv
70.2896 115.995 70.9951 115.289 70.9951 114.42 cv
@
1 lc
69.3999 114.399 mo
69.3999 114.399 li
@
0 lc
82.2749 113.7 mo
82.2749 112.83 81.5693 112.125 80.7002 112.125 cv
79.8306 112.125 79.125 112.83 79.125 113.7 cv
79.125 114.569 79.8306 115.274 80.7002 115.274 cv
81.5693 115.274 82.2749 114.569 82.2749 113.7 cv
@
1 lc
80.6001 113.75 mo
80.6001 113.75 li
@
0 lc
105.675 127.859 mo
105.675 126.99 104.969 126.285 104.1 126.285 cv
103.23 126.285 102.525 126.99 102.525 127.859 cv
102.525 128.729 103.23 129.435 104.1 129.435 cv
104.969 129.435 105.675 128.729 105.675 127.859 cv
@
1 lc
104.1 127.95 mo
104.1 127.95 li
@
0 lc
62.835 127.14 mo
62.835 126.271 62.1294 125.564 61.2598 125.564 cv
60.3906 125.564 59.6851 126.271 59.6851 127.14 cv
59.6851 128.009 60.3906 128.715 61.2598 128.715 cv
62.1294 128.715 62.835 128.009 62.835 127.14 cv
@
1 lc
61.25 127.05 mo
61.25 127.05 li
@
0 lc
66.4351 135.3 mo
66.4351 134.431 65.7295 133.725 64.8599 133.725 cv
63.9907 133.725 63.2852 134.431 63.2852 135.3 cv
63.2852 136.169 63.9907 136.875 64.8599 136.875 cv
65.7295 136.875 66.4351 136.169 66.4351 135.3 cv
@
1 lc
64.8999 135.2 mo
64.8999 135.2 li
@
0 lc
134.835 145.859 mo
134.835 144.99 134.129 144.285 133.26 144.285 cv
132.391 144.285 131.685 144.99 131.685 145.859 cv
131.685 146.729 132.391 147.435 133.26 147.435 cv
134.129 147.435 134.835 146.729 134.835 145.859 cv
@
1 lc
133.3 145.8 mo
133.3 145.8 li
@
0 lc
93.915 150.18 mo
93.915 149.311 93.2095 148.604 92.3398 148.604 cv
91.4707 148.604 90.7651 149.311 90.7651 150.18 cv
90.7651 151.049 91.4707 151.755 92.3398 151.755 cv
93.2095 151.755 93.915 151.049 93.915 150.18 cv
@
1 lc
92.3501 150.2 mo
92.3501 150.2 li
@
0 lc
132.435 129.78 mo
132.435 128.91 131.729 128.205 130.86 128.205 cv
129.99 128.205 129.285 128.91 129.285 129.78 cv
129.285 130.649 129.99 131.354 130.86 131.354 cv
131.729 131.354 132.435 130.649 132.435 129.78 cv
@
1 lc
130.85 129.8 mo
130.85 129.8 li
@
0 lc
93.0752 124.979 mo
93.0752 124.11 92.3691 123.405 91.5 123.405 cv
90.6309 123.405 89.9248 124.11 89.9248 124.979 cv
89.9248 125.85 90.6309 126.555 91.5 126.555 cv
92.3691 126.555 93.0752 125.85 93.0752 124.979 cv
@
1 lc
91.5498 124.95 mo
91.5498 124.95 li
@
0 lc
106.875 122.58 mo
106.875 121.71 106.169 121.005 105.3 121.005 cv
104.431 121.005 103.725 121.71 103.725 122.58 cv
103.725 123.449 104.431 124.155 105.3 124.155 cv
106.169 124.155 106.875 123.449 106.875 122.58 cv
@
1 lc
105.3 122.5 mo
105.3 122.5 li
@
0 lc
131.715 124.26 mo
131.715 123.391 131.01 122.685 130.14 122.685 cv
129.271 122.685 128.565 123.391 128.565 124.26 cv
128.565 125.129 129.271 125.835 130.14 125.835 cv
131.01 125.835 131.715 125.129 131.715 124.26 cv
@
1 lc
130.2 124.3 mo
130.2 124.3 li
@
0 lc
93.0752 120.54 mo
93.0752 119.67 92.3691 118.965 91.5 118.965 cv
90.6309 118.965 89.9248 119.67 89.9248 120.54 cv
89.9248 121.409 90.6309 122.115 91.5 122.115 cv
92.3691 122.115 93.0752 121.409 93.0752 120.54 cv
@
1 lc
91.6001 120.55 mo
91.6001 120.55 li
@
0 lc
64.2749 123.06 mo
64.2749 122.19 63.5693 121.484 62.7002 121.484 cv
61.8306 121.484 61.125 122.19 61.125 123.06 cv
61.125 123.929 61.8306 124.635 62.7002 124.635 cv
63.5693 124.635 64.2749 123.929 64.2749 123.06 cv
@
1 lc
62.6001 123.05 mo
62.6001 123.05 li
@
0 lc
110.355 112.74 mo
110.355 111.87 109.649 111.165 108.78 111.165 cv
107.911 111.165 107.205 111.87 107.205 112.74 cv
107.205 113.609 107.911 114.314 108.78 114.314 cv
109.649 114.314 110.355 113.609 110.355 112.74 cv
@
1 lc
108.7 112.8 mo
108.7 112.8 li
@
0 lc
136.515 142.5 mo
136.515 141.63 135.81 140.925 134.94 140.925 cv
134.07 140.925 133.365 141.63 133.365 142.5 cv
133.365 143.369 134.07 144.075 134.94 144.075 cv
135.81 144.075 136.515 143.369 136.515 142.5 cv
@
1 lc
134.9 142.45 mo
134.9 142.45 li
@
0 lc
109.155 142.74 mo
109.155 141.87 108.449 141.165 107.58 141.165 cv
106.71 141.165 106.005 141.87 106.005 142.74 cv
106.005 143.609 106.71 144.314 107.58 144.314 cv
108.449 144.314 109.155 143.609 109.155 142.74 cv
@
1 lc
107.5 142.75 mo
107.5 142.75 li
@
0.5 lw
0 lc
0.25 0.25 mo
0.25 184.899 li
218.5 184.899 li
218.5 0.25 li
0.25 0.25 li
0.25 0.25 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (clouds.eps)%%CreationDate: 10/4/10 1:58 PM%AI9_DataStream%Gb!R&kuo%Lc7&VHJFC;_%^YEQ2@0pA1F=7V'$*HL3.V&fZ-D!L]g'fMT;n&HWZKt;f%Ks!ZCV6,>-1[s.S1pdPtIP5kLRm`ldobG%h^_.-()1&t.=/F0oW$G.WO-kndd/=>PcMM5#Xkk$dC@rulfZ<#X*<?5?T5UQXnG,odp4D?4uBG2$`/i2s0@+Jd&a]<O,[JN<jj9t%FtP_GmiHB'5!N@24"EbG$7+9;<*u8?)o%gl7J/TipKQ5[cSs*Y6*kjCs!V2tjbq9XqYRYQlNoaDTsilllcmDBabt]/J$WKWR_S:%%]hY>Hf5?#+"54icO&$:G?;jkQ[=Y\kFDJVgaaYP4W!>.K<H)48CL48Dn_bFs6M%Cmk.arSD]75OX^8Vd$["ME]8">Xkk%X=r^Tp@%Yao7"joG&7q4ZJ%CYeYO,o!9^T=nsr1`m:)^9'UVA48*CT1qOe5kr^ir+bpnhmFPtAK=j0<QftqU8a1lIlBI99!Wtk:X.IGp.**h%OqZKB1)8J;[TaJr\j[uCjF+'WqAK^Hc,/Q9nnUt.+r^J`FN;#=h64HAMYI8LBX`&,_d-5]MH0GF\1^pCs(hI\?r5@\f5%gV@52B&%hCotn._dut!^>Cs@FT&IM2&;V6.`+PjhTXcS_`";oGXH#b79DVc$pNgs6e"&@u5]<.t7bSr)p)BT3GM<lFQPqlcQ]>/)Roj]WKfI%fC2cO8?<qq:I-,.Jj<cK6+sF8enPhq<g,L#nP=U>X%BBr9k)5ZjA1W?[3`)d[cEcZ>Op%iQGfcSjkG)E#isV1\pRkg_`,@cn-f.Z%M==PpWSb=*Td5+[/6O@r;e!j0l'fIN=X3`@ilE%[T<d=b-/`!1-i$\)aVr9nOqP,8:mNu%5@qOiD[D\OP%?sq6MV6eek?",3;'k9%l2Hg86Q8BC67^0Mn0QR(\-LlA2^hsPY5:b"^d!Z%lR.0S9$i2eCNp(I-@\Z>=[1`[cmnOeXIoD>T4I>^s5d&7>XILIM'_I8ImPg*%."QPqnn!Z($qS\:psFKor'@AV/8-uu/l6WI??-O'6+K6`pD76$IhG9&:6/(O48Cb`)W&X5ae'1R`j`#kZjD+1InC\`]0])MCd!!8%je)_nh0KLqZ(aaXj;^VrN!2?tFItn3"*`,W:bK,EjBVG8XrHj_Z#o4q*PR='n..L6R0fW+qAe2n.+Hd3(r&2fiL</*cW6W?\t+*4%_s#\3T#[K$R`CM]l.jInQ+7t^8%L#.fA%:5=3[p$([/`&[V`!nni'*.)uho.]]%c;ch$(_J&B#fanGhQ^YrOr!mgc`r`-#g>cm:s%X8$UC"5`Ncpp[d?chna]'h[68!9)i)DeB<Hq)A5XkT@lefm!!7oIE&i-ho:YkBL4&?eMSu=1ucM7WjgML!lW$R(qb7_gV@,PeBre%S]Z,(]<YA=bP"L,97C_CGN+u/e_FMi^B2e%ndBeK6bH+s;?,\r9Dt1VM:o+MDs;;UN=_\uFdU;UI)U17,q"m@h_F@EC&u#Sj\,e0%`9V9`;t'ZIhg.._DcN!<U9X*1Oa>AYHACCXH;iK(Z_F)2Vq[64CZTj(Hi:_W>.9X1+.(q)2607I2SV0L2nlc%6rV^Udqt0=hSa?2%]kjd$r*/lPr(I#*k!G(!R_YkUb7]oJrZ5`T^<s6B/Op2U/[UQ#8ok?A0De>#5AD@dH/4!!4u]7lCRSjrLpn>'hDe,X6cFW(IO5lr%)u4nVf3Pd&[5?B-i+t.PBIQY7eE_.F=,9d62FjLT)548!/RUhLr)GQLSAqr'Kj.4!,gJ8ITWDflMf?E[X;Xu;*6\?449Jk+($7HT%0C&%]l,`R^AV[gIHITE0/'>@!dW]@oWHrL4WZHP)N(%LSn-fpdD3H<2/Z!/ma..^\U`H7Ae4]C)E\0&<OQ.@SY2tXCNOC9V*icWf%E-\nf4PNhn5fkl#/`tinm?!hDN=Rt@d2JCXV6Y_:NjIN\ETh:qbK#aW_fZ4KTZ<uc*oQptGcqtt8nh>3`s`m)6`b*($_EJqQ<7C1%P$$IV7';7.3jtViZ.?#h/Y8kdoPbaq36l*]>2a[+ADQik(0eccBDF5b_JSD@,gfRA+foO1PGP"Uf*B\I!S9:$AO&-&1j%DIc[bis%a5qK`%mr8Il<T$_eEXdN&lMSGWU-'>f1B;Fj19lHV$GPe2chEZ_un+lXDciOBeZ-PK5BIL!+3;s;dcE<LfCbSR&BW,-*A4i$Yhf(%_Q,oB0DoR;^'`(J2Q7WGn?tu*O@,e'Ao25B=kg;%<$Pu<GG3U7,@%tcWN>5@Hts\2+Y>uP39-R'is==i@gRFBl`Chim9F#o];AbL%8'BCSLf\X4#"hREV''H^VB"'*O1=grFU5C,?BO>#5u*7tCDe:D,:%?(^@H&,#;c"=:b/9cTN<.>Q<lp;ipB]RWGM4lQH9N;#4]-u%d`f,BdB/<WV<BWoB&SY5ogY5=Va0Pg]^A_1<I+Od]MQ5j%(u(c,:sM+l;gh6BOi\N1r)h<64b&NUm(:d[6E*57e(r^0_?-51S],5%kq'l<*RO)aV;!!T',a`VKWu0W):XcnF'-QJKGpmP.LD$.L/nC@e<;.d9O!(kd:5RoD-'<7nZ:I(5)<r<<\6/Zo]jM=du`bBK!\k#%Lr)'2@>75ecX:g[>.bb5i>EJqb-HdhZ@ut$]bB_of\r,,pHO%BI]MXlmX^J-&XTi<;)YPa%Vr!^8Tb?+D>%dje.B=3q-oO&)j8j]%BNsEK7&/O+9o3[1DH2o5`X5/p<e$sFo/`2kgP1aQHJt#Pj4_9`#"rq.=EV].%]t;XTnq**`P/K2KNe`F"+BG%7/P`/_h9,.8tuaT%R`<rr@e_\5ST%;/l8tuaEdt^^^!L,ro`;``3W1koc.IiS7"bG=S.G;SIn/1.#7fm)P@"jhh(+_EpC$tAAW)\%d\jJ$\rf'nnCL_<%;/VM>p"nJDVu>!A"n1Ynp#`X7H[^QP7eM0)[On`P>&s)8n5d6%?62<nMc[N]p@Ha^lY!g`]5c<6C)2jL^"_Q/6aLpaSLYlm*fKNA%J0*PFeHB!bEVD;V8af#:mc=?s^:X6t]^CW;&\rme52Z%%r<]$$bO*MKEO58l]e+\H[i^F@n1.r]_$V[^s#\@_<Ze^*[@jAV,p>U^%UlA.<^TJ9%SR-nmq;4koX7>[upT)bf]"P^N.Nm\5Pm$O[.'3EpkVW*^or*B'(m]Y9?F:mC\rSrl%ENOae%<5@BV,4Zm56!_;ql3h%Cj-q[AlI'IemH[Wp63<<5oQkpiho9/.>tS"VOr(7)_j_0I-,$W5<d1[R,[@Ij/K$1mG6>.k%Tiar6T+73^j3"P#D46nLN['=<mp+%M#*H)0Ue_SBdm75f&2Mr1$SZ8d-MO6%pSFN[F@Q`V(hd8Zs;YeU%`E,\GWf*fISWjQ;?rjT1%-QMH,%*YV<ZL?MnqDd#fZ1"W_Mj%(!lmq%gV*ThZEGRU/u_@r:8)^h?`?@8O3Q;SDP$HTn4p*`FVoJpoPAI2.H:Uf($9?ckNfk0l_S@8.4L@/9M?*n=J\+_XSrfU1k(b%Jk(E_fkdoS."l$?b-p4CbQCH!s$O"5'EP'B7p^?!&Zi=*bPGB6VL5teQEAQur!h!8DiW\_DjlM9?P[;SrV4_PYEsoYmG(u1pR5P#%?'M9,SPJ5F%>cgd2mBH'miH@-bnf4s`T;Nq1A"WHkl!)G[<t(5U=HsTX3p1G'_C?a:`$0]#kbC@_m@@Jn88S>9?\tQ6Vb4dVuNTq%dqZ@\3?%%RI=:"cajW!`F7DJ!YH'`"k%NqVRi!,321;MTdD(,Wp6`F@`0RV`>9[/Imi#7<brc*CDm0.YRcl8Ojdt`MofkR5AbE3u%]=mpuIo_a2F5q59gQ60.>k>lJb<$^DnTc:&q(H4=rsuHCqt"1p`N/NYGT(ZGm]QT!b@8Mpb$9P[P@ihu]r(h@]BS/6l!HjVcO+'l%lBc@kk4Pe*D=d2ID'"O"R/c,keUi6MqKK)6pn+\pA[:s-c/3e]oCmaG2F<@=[bD\M\8(bk/o]><fn8(=4LL&ro3\`i.tMouIdUH"%<Hcf?I,Pmbdsmg?a(DMp,P7X+q5B:oa4(PZ*qG7B"'L'Mj\>@/meO-/WCtZ0Fk4.9(11fk)uI'L,km&I,:I#]:pX(_mPMQ#?BNJa%92>rgSM%-k-VA(ER`-fAs&XYseI0*fKu(cXXn\dH]e,g4]"M_=mXLHca^?]ar-_4?[I*-`nJA_55hq$K^O,B3$&!-cJa^37G)?-q%dHOrE)kEJX[EK"/g4Fh1oT"LRlSMf$VhXEclb<T2G;mM/h>]<QP5NjElI"NOSl8A(Fc>>WU(0MuUE'DaR3bNge.HF4FT-"j5;`Dr%/+23JobpnU%sP_%WRm5BHn69q>/-XJ^RE.%p64pUW$$:uc$4!YgdFWKA#"AmiMl_(mR=>u%sKEW/%Xn]T'jbR5R7t0m*KS%fIq,)%pY%H5iWHhoHtkd#8^P.tI"#bu.'ccU&Dp\]K36*b1n-P+W277tf0.O8=,hu)lT/H\R@f:$s)?S)(42e7o3lfhSbBa'5O9*Fl\E)"%_6Polr[g20Q`+,\0:qeIB`HWL4@u.oC&F^oY1oM:k"WL0Mp$%n^!LQLCu89_aVF8JMPG>rD%pMO0LKqB7F@)4il\?^_VL@ihnk8C%Qkcgo_uNaR(s="p[l2Lf$4/W+hX*.;mc:U=q][0I,/U7-D=$9-nS)$H68B(o4d(4G\%Q=_C3i@m%8UP<6@'lpESo`Z3]2\XfiEWh%]<M@LIqsb=$=EJ0CS/EZg8p,^KZgHD/W7aKcr>Zb6V1;2`9[+<au;R_NSu3VJD"c0nh\5I"[(*i:H+?oog:5g;bo?_M1]`)^9FZL%q+\f*Vb[%_VMCK[KG'abZe%[On$DPMN7hWdXPu=p\=cHX8;s<M9AG$)J,\dmHi;</,A=>?rS>1#D;)]#eS9c%Pse$j[9';!pI/ou%]R+>S^h\%qmWsqRVef>Jl,;,P)#!ViVgR<<$1Zc6lY-R(&sL9+PrsX@"1N>MDKk0kmaFuFnY_I9\*_K@KNICdQ<Fko=p^`J9,/F1%1nMk!3V!)@kO%Ncj*b(oej>kN2h0<^0S-_mo6_doXEW9kr\$?^ii&3B@S09ZD"qI;=aq%tjKA0^h$:&lm-OF3<SG\tUXRJ$>_OSp%XEc%&P9D#g+HqW&JSPOJ*8%-U#ZB%l)kHkDR-Pa5`,uPpKBjN0&`FMkPFns`q<$Y8o<[8qR^c/LZIGh+2!AOqEORKpT@EO;!nCD&%A!m:F.X.W(7BQ#MR(r3J+b>DHLfN6+<K6N6_+gi[\`n4RZe%reEJ::_gMSs`jQjjl<dq4os3?dUN7dRSC0_s9Ug1u<:7RSFbJd9%%/"r+4)u?H,FnYIV]Ap)9`P7p,C5ORh=?i>:U84N'f?.4Oj:VaH/"L7.K3AEg@lnge2Iod`QAT7b?Y>(!-A:,Jn`oT&G3A9Hfm&q%%;gdIXSJ#Z&In3b?Xo?S,8;T:!6rH4!>_666_]dkL(KBi&oTcHJX8co]E;hW:c=F$EFlT0pC%]Hg=;_/(l/DL-N5;W8Y$9_`-5AMR%]*Im@V(Ol9)%b:&7g]'A$Won,lQhc^Sqag%&Z>MRV/,0>bL)+-?d4@"8UGS-XclGC<qDY[PlJn+\!65GGALjN4P3R22`/_"*A=8h%D<%MH0q8H)=Q'FXP,,8f.33GEUe,U#pgl&amAK7Ym6r1?1TIShDOq+'K18&NT"qRR4L_J7#m>t<BXP4rMJ`>0Q77MpP4MCo7lE29%;4>"7=&@OQrt&C-)(":WM7H.i/cIqgF`Nb3m36XL+Zb*a$j_^@]t\n,VF<"FH'N%`0tfX(VC]6@N@@Ts7^&60PR$S+),6RJOJ+R'%Ce)9s]>:5$_U4e1E'hYRKGdDQqH[N4_G,i&k`+&nrV`b2h3<Ob;I*DrIoI375@,pGb6r7N(Y3MOY5HK5?G0]cl,A#G9>,T7Y(,YP%DZ?g*hX=10X>[M:=r1uHelc*<$#V-QgqD6pV<+,/6>9n;mJbX(WG*GL/Dg@iQ&kUDHW1Z.X?Mo^XulSgQ0bWfqlsc#rA[oGHrV!6%K))D5AnU^\BAq+_VsVD#M,X@rqnB_up%SB>X.;K0TBlKJBS\g$V6mqME;O5<a'7`6Eqjs/;*8/<$1rj?n_s#(.`J%4RX;o?Y$Q@g%nn,N2(B21>*d'ObDu7g`5/49T8tj0\m!NYtnO,77cO4O#'/.#$ds[uOX6r$p(I,(@j6hPBoAX66,l=lohYB(=rPi%7:1qh/?T,C3%QOBES.?i'"]_Kik8T*E'Kml)k[SmS,hn/WRZpK7a^A[;eEM9*@Ze2C\i2!X=,So+9I^7E0h=GBXNVhd'?VS6_Pe&["mAHbkG+O2J%Ve<31:VJ.jC=THZ="/h-;q'9`5AON&(s-C)?$s'F+#`"(2Xk8UBr1Iim`e=4Tt=7jUXVU<V3ur\mnHsfT67kS3sW(<\Tk;QIWA)1%Dao-:[:=Wr1;/Er*m`&dIL5bKpS"niTF/*i2m.>@Kmr?8qfm7H;Wu9"Is1F!3N:@lWUkQ&_cn`O;J9Y;kNPZ\Ts#g*3o-'TDK;Gk%Q1*T*mEqXXZquVogRVKZYYto%Ds(^jS%HdrH5@Au]k4rP.TDA3ani3`oZ<m"/uc!SrS+f-8tj(#l+Zh&/$70Q[Cc4oUFK6'Z,fbq%[5MWcZ^$He?L:H=Y%+.A9='aPZi8N[r<e8HI(c_)TqYmThWItk;.[k8`QlL2h.sIl9W^EGCO5X7F!IO.@&e6s;ua!-/X.Hub!NS>%2tPpAabB0_=aBtXoCaH7d*n=;DGm0^Ot-10H0SR)FVTUZ=gCdUk9cB#4ksherUP5O2R1Vi1Tb#a:q;J&l[!mS*p%<,TtAmr_l$SX%Kc[e$ZhiuhX-#_;.8]B[_.79_J%XR-m%kHncMFns\=HmgS$eg1n*e#>/!L\4qX*,;IVPRk0Dq;c8tfUmf!k(b;P[,d$5EC2pXA07%>1H=uoQ#G\Q!.k!FLj/g;Wu)f[<)(e+A,5*C\@)CjM^A&908lpPs<Yfo6a]O`'UZ_\]CS7qg?n\=+r[kCU8Af:g".VouQta^To!j%?&YmBQbWR5YR`?NLdG0)Z/r+d@MK:<XY3(W3['gb3Me0]@Q,t,rNI\Tlu^S)-=ih3pe%m-UhdQlM\NblEc3^`6J(VB,upln"\%D0%PP=d+.b("qffBNX3o0$WY$/,-.pCEI7^K5;n%hCkqYIs.2T;bN@TVEQ,7QcgDZ9D2b?M;m)2+jXhV!hUm?Q21([pb3O8LoAMYX_J%!@p=2I=3V6n+M[(\"XC>/8UU@mI+X5-=MM+IB!&1hH(q/#Hcb&o@177j8G7HWGei_r5k!d.K03^j82O8gC<>bkNgX,7glGALYkR)%9YA,dp[_t]fC(&iYP(lN<qfqe]fPJrgRg9OC9\O9>I]%U)rKD6.hUKJ<sPY*e@-O/(UTKrnFffFC3`.T=OR)MgFK>(Dh""c=/JpR%rpCdkmIAq5Mqrl)2W(E]rHM[Vqk!L^0`:pHTC`n&XE<BFCZh[(?am15O4)n!R!>n9F[#KccGl?SApTBK3,mFrmBj>A'@-7*9$1@f%ce;Nmf6(DfI2ST@HOCqPGLuB`<r#bVm=udqo,DC^Ds+%M[5&_NX'/30?iU'#Sb_,H4HT^04]m)99ClB=c-2M+D>'599[g(ll"?Aq%:2_';b,pMsKA)$d.mM)sAS#+A/8h(raWI.NR5n!m.nCL.YApkIj^r/RR9;[Z_UZFSF[GEng6=[oCe-7(KP>&BVr]kfer2:.c_$K5%,KfoZMTVDl^0A:>'=)Iq7iFH^+^o4'.S>!Jr-E:;CU;AqC?k0MiCe3bhSn[-6H'T0gQ&B4B!GD8kM+J86KNfESQ=s6=f?O*c%QLA%]_ZgCe>V]XM\f;sBQraMGs[4rOlfsH1]9j%h0fPD3d8DoJp&jhC>`)>[8:ErU_G;[8RXW,:F]=XitpTNlREg_l_PCID26V-V<)[>%l[H@HY9qCpKc\L7(97"hUd@rL99&""W)oHG?+g"A4(<*no?Cbd]^O1-/T^?X?j9PZ^@.T,lV#X?`Gp[]@T1ePl\>7f-SG3II`t!u%ei>Hi<GV9j%LSO=Vlq=$IedkrAW_JD4jDi25Z;$:U"5gt?9PQ2q.<Zi=KCg`s&NC+eTS]D$c1BGOX7U_d3OWWgF;*B`A_Wb5Uk%l%2j`Gl<,M<-:]dGSMbT&Ac/m^BG):[<R//^%ZJH2a[Oc"AXKM8]$&6cdjkTn+64/8+H/1NSo:n9'C2j(pgjj"[>6fVVUjgAcq'j0Y%aPI0!mVD^!9M',6`6`q=kfg,4qs:LP^@Y6!:%!CUhE4b3Y.\e2N@o]'o3db0e8JqC8,WeaX)AN?:A4.k.B;9QUjf96_k7XBmo`+i%jmTs-A:1\4/@D`<LtVBh^[!laH_Gq!]j)IrA;+&p(g4IXs,>Cs7_9&Yk]<QU\R,PWH"Z_im3&TC+Q#UmprIC9ihGW5::P)q*29>B%pT_ouf_N,90cQ3V%Q3/P&3\-PpO.gc(M@<LT>d?ipjm8e:=jaF>qA^GMX@cRWP!M5<P+V<V.sHbbK@B]+$[F&f@7Ef0-oF&.?&'r%Ut,n=!^E-ojVQSH1"j8c9)7*\Z9g[:`RkdBi46Z-9g`uls-S-VfK7tcl))EI].lIT(MOXe.gKf+.t*\sD(i!UO[CAhb+20GakQOI%`6r8R4R-FMH.Su*549,0D+pNcla`Y9QW*V;RCt"uHs&/s)IgTN8B0>R_sHfeF^K5=qp+4X=k#)K"\iIph@iNd?_T0dh8FHN/pdPt%Rl4Y]>Ku$XE_Hkak`UW'n61UYjCYln(7&%ogfM*MHuQe.Ubad3ct:#a17'<Nh*S)js6e#ffc*A,ijjQFbE=o_Z/2j5iQYc0[sjFM%<k^X]Ie'FZJgF=Z@OtC.;?&*&G\R`r.mHt;aP22uP$l"hXchk<T;&T6NusQVJIXIiZ.%8hI&RlS,o0f`L9IE>rS<C0Z*d]><]=QI%?$=6?@UY*O?mVG^I[D4B:<[\EX`[.bN[6W2aqVcoXM63H\3N-FkI2*be8%'O`&pheQ+ck4Z-CG9o0:]V)9T1QS'X4^p>JkHgF00W%BBrer^;t);7,!AP-.1PU/GD";OqkmJ<2!^DQZQ8qOh<#IKFr'X,:e2<5V>Mm\ttUf>P;cp51;]))(lae9R)Ej[3o83?O!aV@7uei%ga>eAq:<5/6bg8[IeMljh\i);'W6]4"=GsHQpgJ,1-tX2W?%G(69e8(?tsFe!?e58S9!M5V#`_jWV&mq!87'pHMqF[P1W+e95jG:%>p4(7VJ5V9pI0ut]D%r;0rVO-p<L/8DN\NYP`cKJ'Ur?dr`aTNj\7WJ7bu!%CTo7ZhH4NEk?]ZKN>8&EmW@iF3BY+gG_0_7Fe[FB%hn(.'m:8Bk8X;$g+R5,LEg+fqX4GG6K<PQP@MJQ\abm+C,ZP<:ISMiDJW+;f1UqcVj;hO8&"^\^ndp6l0b41BOUBL-`?5nQY,QjJ%5"Vg-j+5u(^)4u\,FbOEY:h(,65G!ZFb3jCfanAKCPXCfK(%=;;,peYK07FI73:W@RPK:.h,bJgm8i)1Gca[%-a+l`Y+J^+;Fa-K%1rr".(gRE&RP-2[kAiD%ju>Sa/Uk\l:O[6Sdp[@SlX(h+.#,`:GgRI"!3DfXr.mNpAA_[7E72Wj#CGG<l)bWHAc&Ssags$<8oh7Q%`f/f:[1]]+K;$$d];9?)nut;r?*!SGm+"j"7-*0U'ZBkF>Ec_%8MXE])f"r3@o5o<hP/)Ua]W+Roig2u&*-hRSZj7t/2o=JH,LR+%ga)5c0U4tB3apq1@-_-4h,hN]4+r4u$bOAh3l0fl-o4<;*>RY(3HOc&d'cp;.['o?P;E_i/2r`Z;]^1E01C_ZOeD<VRaP"s9o2=a%=jK^NGg+,P>5(4/"##Et1]'Ttbj.Kg9!koMM&*O+o1QHsJKu0+I[V]3M2a.85.1iqOgeUrY@UA6S9&&a)+C96qaJmM?(sn?U[PlG%3Z5OqMjq&[MmLV`LK:[)QXr2!bcSd=`sq9ATGPXQ$C`F*)jde6Cr"1Fn8^a1]YA'e-0G$8?FGrL4ha$f<Y5-fd9eXS$JFY"ldj/)%%rsFTN7cQnB4UMr/:&l\e<ENNFc8mQK<"X%<+Gts8/iY::1&XbOH3.!oI.1@*h)t`f[tT%Z@31o(2>iVTM+=mmtEoS&e,Bhgu:Eq%1q5Kfn0l;4%B&)2OclQ"^)DJ!PJ%ao>K(-VNT/AAH[g/9?;X9r$O9tV'V.qr5)DlkMc8(BHo4UbY\\g[J?,A!s5RmgJB>4Gd)LiJ%%9I0=`*jAn!bkQuJ(_s-'!j$^[84/lcc>(H##]JZkE,UeB(pTEgeNa7c=jIfl>GAu9Gkl%ZfPH`4Ce,-9=3m&AKDF<cW-!E\d1qh%7YHZ18XWo4Kk[U#'K+;ACcRhfR:BZG2U?<57u:IYg&$B-kWV7(;s'HP=5EC8gIbrRpMTX"dO1\o&9FaV*Zg<Y6R#^8173q2g)11j%jCL>],Y*]f9_OCgi7lV70Qn,8R*%E51-@fF0AN#rVNkgt?lu=p\aHYXV:POeM8bP5G:&V6h![":DC7MuY#$$4%UF5^S]Vcf6OmCF%#$moZSfG?.%(]!<i6XK+fbnmcdWffrZ8:^/`A`Mk]'KhdF`teBEp-tdL,.t%fn)TRct-k:EUMRp3HWplFCl$O-olBQ3DIelbOCT%%PXCe.5o9)>B*KVoUqIepe?b.kBFK97-;\H]9+I6rlZKghi:_Q4oY>c0j>:TrkOmnS7r@!Kk<M4,n!EG2C-QOd8I[QtYVC5]]poTB%f5Rl@Xmr`CP/3U%Rih71'9c%o?R2oC33<&N>N-LpZq.cuoo"'t&m-XEb[#Y-SD*0e=:/V'p@2C![8V7k*+j6ao,[!4YWJhX+Q:E#%IL/ue+[\P)(>gNXj(QuaU<SWplVk3fWP!\&R4F_tlkTs5):UAhH<a4Y;*DTJfrb:_9d*$4>9<Yu3sSTIOrb#E2+04EOIao!/;R*I%5qF"-A]K"2Y+.`T1*?,0X@Bn\p3V\E)is@ubAs0cauh,MNQF,&6mdt&gPa(ofZRUVS-9EpU?aA`EHki=MRZ6r[qC-;@<1g=m:N>'%rNa44%9DSAoi8VEkOC_0Mh)rmO7+P[s(+g5XB87n:JFJXK#sKcW+4au<c=naR!P<fU7'kfI:M2Vqc7WY_]I#crKj(q=7,Y'M9.[n%A6gIcZ"8`7P#>i-HPV5F)e?n]CU'\*RA!idDjkA=8gYR40L1ObZ=c)A0:'JKom<[K1Sg)n;m9aqhiu5(=lE)iAcI.g6kUXEpPC8S%R$j#\&*LPVJ,IBXh0T5AHcji2h%fmrQeU.c,nPo1*.gSnUJ\On_)n+8-N3OKqtAC5eUN"p.S]K@O=>'mSIB4UV9DQtCW$[H,6tP1%[5kNL(K$lT8"SoO-2PX!HK7[W(<SkRh&F;V9HVBkpBPd.A>[CYAdh,(:3oB/06K,o:`nF6I)`)LA&%aCF75p&fgR-AL2NpDgn'7:%cdhL_!Bi1e/.$/u0]`^"0%3rqS'5TI=@PAtK<pdf@5'9NaE@o;ABO+9#l/rl&'!Uk3J_ojL5JkBRdfr7*Z8OGVkiKLYEWCQ`?TFX%NX-gp?oGW3Kq)jjUNpB(>B'3O5+..klB)BcV"W!Xo7lnY(`rI)J^SVFP&k/k?>.3PNT>KGHh)au/$(9D7[<)2\FD](ZFbRo0K%3b%8<PZ&LI4+F'%41"1Aig.3H[a?<bA\=<lgJZ2KAf0N.F2DV4VHZ5l+U&\R@t9@)'@c&^Cj7(8&aM)`V.WhF"-XeBqBqE.98!@HJ_5%M6f.B>=M!QNoN4#&iT5GQY=-MNB847c-JW2I(6iPO,]G9a&12q7bl@9(+K&u"6WeqPn+[llVhoFS.@P^[U@s>\3f'uY&WO?)>V?C%7[u2S`f^i;I[Fe<gplt7;GIN8F$<hP0dCQuq/B28/8\T]B!RDb=V(=;A'uVJZ.,/^Y\ojV-LtY.=%m/>\_k)E7o]Z"+or=oAtpk;%Mg;j)hr3CK*s=\W2e0tjb)Bke`5),,GZMq/kmju"F99-_)3&m4q(j+NGb4`[V^#+6<[6Imo8hq!L)3XJ8XOJVFREikLuga"VXFgj%P1\^A0W'iQp)_dk1^;ZY:'4O=L7LN%Ht5Mj:HirODPGMf6_&;*Q$josb%Y$n@FjrnJbu#sQ0+?d4MJdg=:Cru5)Yo[K,`=gs0k*#%3CZLHVlD`ZA>D+1068D$k0-A59O81j1.Y4X5)gp7p$87?A>DgYUM$CFI'I[%Ue3].a@MS<nf7h'lI'.6P+!NXLSbP$A2Ld6PL(`>%HsG,SSdK,QYsG^=nu'>B)JkjlE"&^bTb\SOU2)S#DG\)Z\Ae$9_Y(;ea-$e-@]hnl8+)?a'oop6rA./<8;/kuA,4"0AE$P!@[MNe%I)_$`$]l2^Y:co;D3b!c7<o!K,UpK8Mrf((94E0A[`bMb`"!Y+G&uX?6L@n:fttilSQCX<X<m>kHUGD9?QRGM'fkSA?T>+F*IT]P%)fO]d\Ab97YRf4eR;;8/G99",0"7`rSp0J-l.=hY+4cHr?8)%b[d"sc.i6s4lPCWMV<uSjS_"g-_2!ZFc1:PYf&lOs]S>A:8M<T1%LG6p8E=1l<ARq@FReWWFi_7HUX1hq$2MY?ng$Rno]/QVYfdP@bSM.[FBW#FoGo,XHa_j&\WJ.?F[8REt)0YRSm7(9bgQ.:[GF*&6%U![,HQ%^h*lGi;Q423q)R?@V03Lc<#AsZF(Q1sg^Hq__f$`9g#"OCH(P23i_h;%^kSRL.Ln0,3d(Iua)S$YMOg%Y$M5>SD^[Ia+8%DG$VQ^$1j[nhR>opYcNBeZ3/r+p7*`*9euYhG;.<R>iReJ[3$3jeCt`*<R?8SOYtt,-!#.rV8`2V]k@`bBKI$j>O*U0!okYLt;Ob%([Y)jBXC&'ZJ@`32<qhJ^W5Wc5V/bO>R@;("fLM,ne9_qT9uZ&DN[Y%WA&jd\*m%3H+e0([en'@kA7'C17oeo0E3>=3P9;U>U%e/%IXLTg^WT+;f!#*Z"1]Aah`W1rQI<DQ3UVsObu1n"k@ViSE7_oZTM+kJNg<BuL`^7(Cq>GfY&`dD/N/W*\tl@RT(psDl&n_BQnRLD%VG!r9@%!($ZK[O"n`G]kSnu!6a=Y:g5,N/-ga@c6PYF*`MEGu=>uE:\5-OW%flY=t,NI(H9?O*SN9qK4Rk@8e9T8?V.@Vq=QS//?%Kjh:OP*DHQfX'h*=:25bj2e)jb,(#28u$%J,q5aHVfthfF@lF$3m?6^l&p)O7bHZoaeh]TPp=%a^hgT2/N02:\tiTBd9<WT@[Pt\%,@o7LD55$e/iI=mE7o=V!pD*l>&6mcF@j#b\0?tgRk?Q&I]V4EC"DTpZg!WV7/<%eRSB-W^5P"?/u^SdDSgY)l&mj5`gohjUln48%j(nA!M71/"B^E7o(/agaoh2@2R7J,P!5n21-k2:5oV^SW2]LZHk(N3/)97/JaAV61\jSd,8GCX\NR'p5/R'p:0Jd6$Kd%[O:1dkP%,3KM.\VE)-p"Z1=m&TDL=\?A50)6.6_-&PQ?q5(3I^dWm,YStPRJtNCOf@^kb2B]=\e0kASZY-KM*K/CR?Q7XN?/OokF+In;l,OI%52%l<Ok\u\0=i+(C'iMI-/;k\2j#^oJ4+R.EmdC#_t6sMVji.Y9W".k^h`@94Gr*UmeTA4oY'B>f16tYR_+O6[sXZ8:PWF>kK7'p%Za1[Nq=?-I`tkEAFI3aB4CBe&W7pOli*OpS/s!Z<DLgBWjRF\Jke]n[$$Km_7(U2YRM4;q_os6`r:fn^csbcm;H"9CffD-V?jc/i%2gWBmhN+Y(BKhP@1c<<?f7..Dp\8ah`%H>mCZD]r4F$:--pakOr)iB#-p]C[7!G7X[\[Nl(c!3+7L78*@Hh=`e2!:UW@seCmrhF"%U1Ei91Ji(TOi_KO$Kh[R3upGgeqb8@8?=sk79;YZ)rIWFP1Y"3102%[@5cb4'<+_%+hK1%mX*39Tq7<LoJ.(5.tTgu&l4FZDKbKh%P*lqGq04;^6BaHVcD+V+ak.:\NcQ2Mg2HDO%=(fnBV<Jka3iEDFa[J+,"'Z3C3:!@kbeO`SPa=+"tK/D[Fe*oQ-'Z,+ScZgEpW;@%/L4$-Nrp[`A9d%_*I$O7m!@:L'+p@V)J1$j4P7?t_qo>Kc[6_M1lU702o8:7"6:,,h39k81c21f8N<$*o(q3^=3-dO1>31]nbZY1%GMH%J?=-\nhl5`nqe>]@g96!he=>LC*L4PI;015X:/uDMrY[`$<joG$T$556IF=h\S9(OjN$L@PN!N!fj:EV+-..*tgL>TqV!#Ul%-8CXS*:'o,+nOHP2PT=$gWJklC`9J#p?@C'8PJ;^&uNgVj><b+Pan/ln*-0k8UYE*1aZAI5/,JkZTYEt<b?FKF7LS2Xj#psQ$G"@%RTXL(Wt9p:Q01L]0noR9o(L#G1o<PQ_fN9#'>4a*kI?fk'Z1;Z%+A!hb*V/"<DJU]@o8oF]BH^J?Zh.:mP.Q\],9FJNu..HcG%UK%:QFa0Nh`TEl7c;q+g66O`PJQRc]N9Rj'`cB=jR%f>Qmb\7tfhA9irI`"!ftfW01DW<rHRKgYV4Nm<a1qF8=bCp/LYAFF/GpoYYG@%a$NTNM8+7q+hR4@C]28@=e"1NrD0tI%Gro>'hZ>i]7+3))Tmj$:49c7%f%_$pTUc9ICVnjLRUq4_Ws>a=L"%s'eKVm@b,p1mU%Y*%>re>MQBm3u2(S:eaUO<9E:2WOeE=0f6>-"qb.lBm@@Kn^9e2I4JWG4(,;,.Jet&eQi-PU_8=&;km/!'(Zto*f`]6C5LXY`2l+):E%rUA?W8tj(#aa:Yu,>oq&V-R><jSnOA#O-s1^7Y7l;J:2K-!%=YN2GR)ADJJTpbBJ/SXm*5\50$QT(qiMqV+QXI%F\NNaO3o\Q`)E%4OIV&k#XH]?nSOfHTSl6ME5*h;5KI7CEcELMRYb*b4$(.jco?L!n!tG>^/2@)bpL\*B9I0U"3t)@T//>,X)/T/$pdkV>(Kuo,Cnd%V)BX'HcIeNOn6VJ%]tUJFAi:B$9:4?gNc/e;S*EU0i>aN+<bE$=a(1'<C:Aponh%SN[>p51Pd?tBanB5=j$6C/;@9LLsdc;#%FV$%XXD4A78Gtuc4Qt>RjE+*,i"i>r5<&S,N<J$le6_g>j\?`Qj:8[7F9o;EV+Aq+7/`mEFgA#/58MXbja:V3Shm3]0+tp7QuZ0*>g`H%Ir$LQQ?A4/XhX=`lrdA9(5ks5*s8'^<a6nWXIn#U5:\A<+[;hG-6+k*Yf5=p%sd%u<5R/*Ag98";$f&VY.%*7bL!QAm#/kfVKl00%@n$=nK=L9@`PPprmnYKbi4dn_-.G"upX@@OH2?[]@#8F!q^dIckMTr2D^JDS47!/4k9,m5[D(G_B).JaC?$J'&ju=h*ud$On:#\V%<)0hWP*QI-mn2Wqr>4AK++[PZ]uJ('56.s;\*-4OV<0!1@ZaZ%ZkhtsbEK](BfhYK[92>`F9ZKb,O]CTYunSVWck=]!+Eo_fIXhN%3IlP'+mG0ofO'n=M,#-@$SYL5n&>7I_drl2blKA[7`b_URff&L(:3Y?[p1qD[.?I\(1>u=^jK9CWQgP]#;H*Uo/p0+H#it>VDLUT%@#1ZO*5L/e@jp3Uj1LV[hi2I4\WfmMj=>F-^Yg$q;Ej_&r54ll-/Zd%mS!B(jOe]1jYKXop]iJ6e+Y*eZ^:5ohNg%-9DL@2Y8lY%%^+`4-]VP$O)N(/9WPJl[eZi?WL-6J*HEZ4fR9TjNl^*%#hjD]D3Z,oj;#TkUb7gd1qRq>nRCE#%E&L\X]mfe'L)T/[5BH=*SddR*%]meXk:!0UY_nCNP$@?drdGXcq`N*e2lBgX3)Y@@Nm%,bel!D-kWi;+CL3rm)DtV;%"%]&2rN[rlX4V+[qAJOR=f7_ODj\?NcAnJ"%4jq#mAeW.%o`GYHoR$P"ibpBZeSis=[!ZcM*%+SE]%8Uie2<tn8%R<5><?Qa%<EWK(inJg][ng!$8$Ouh8bk+6RBV_+6[%G^?>*K%j^(.]m'%+?oi#Yf)".'LBpa(ET5b@_8GDslDaf9N3r6O=f`B\a.n@>*0/MP_%.]QN^Xk,c//Iel&t/LjAT)Z:jbaOhY@"A,6auoO%F<BCf??Na'I=/Toouk)"DbToqopJ#>Z8qd=l^,:R*/_1A%Y(ZhOs\MaqLrF*LVMFoqc:J*ZdK&8cVUHsiEj:5-W#fa?GGi2r<Blp%YE/1sI37>`Y/O)EeSj+;p]aB#8j9p3*ih$J<IE1urA$K:K:]$*EN<GYk2QI9qMcjQXl$g@fkO8qN/_e[?_"=#a9fGqQnHd5rJ&OC%*UmCM$nC*1:RSm\^qG3M<-$j92e"O)Se.'MLHAV`;rXp.K:SR)I]jiYP'F$7V?_R#Hi6jl!-8ko_nCNP9aT53UYkBMZrhq5SocU?%0_bDQlF.22fI/aUTbVi(p\JIYl8N,C@-YFSfns3/N^Zsc!UfX(<Xb18&r4$L0DeeboUV,\me+c;eZYWIp(?cdbDlg&bH;lX?GGi2%rUT;$jgitrHNPX]?(3T6qq^S)]f79JE=R,p?eXMDN#HMWH2*o;mIBTqq[c]ng:`K;W2S9>!DRe*Ad@0_dM>4)&^V`MLIKmJX%u4>%U!eZac%[.1gua?rQJXP%C<s@49D#1;kr@MR$*gEK'M9#H?f"O^bNJU75a(qB'@UmNp<2$'CL[,9bEM+4D@c#J&)V-jcfSl,*p7,n%s(kkc^YWj%rH[6.-GDBU>k-F,f-S3.Eppu:GCNBc5PGt$.Xp'_Y.gm-QOBY-EbE6Rg@]o2T%os?hjhCe52C[$^@hMRS8J7qrj4EC%D?$4*E,p3<o'kqWh-?RhrOK$-.<St+K!uDchQG0u]<f+8l0"E3rOM+GW@qTTCNDpeXNKm748X!n;:MGTnGW$5oBX`CKid]dCTG0p%\7sKC?6<:]_2FLPk=9Bte#e)QmnS9AY.FV_QX`Vkr33E:]_&2i*n;T[g=u)X:A8O.?8blS@L3\@oS2p0?[b2MXDM4WJ!.u(>lcDC%PC3@<Qf^55*uuUaQ>-h*h;4&ba.8eu2(b'@l?YPHQt[U;IJj"OD7\8#Y.nqg?dDX]2\S,*POq*fLJBrb5'_'X]\8j@b"8,UW.4S=%ZDO*M!d<@ZSo"<=dB5mfNjjtC3VKp#<>/gnW?'QAdan$`kBc`)?(Y7JD11/%3=jtah+YOhm_(Z+^"g;H=g(QU+7FT'm=#krelpgV%piud\@kX4Z&p->:d:D54bZT;O^*6Jn0>>2MGr3oG[G#kA+*BLP5CL+Jf_Kd+=")2*7>6dEatd[T&^:)/s.Z8>-Yp7O/#*\/HQ\03%rUPpHbFV_JA'lWgQ?]LTX/oYOE;#pBj6E@b'W]lQNjN0kXg7r1^0KQ8hGa[34_nJQZ1M:nh:phr(M@V=25>qJk)3EH5qa"t(Inkb%oKrDpN*"me9mX3`^3JB.75&K;`U;k1R9f<*hLqHE?>8K0Ms<a)KWfiM2tX,ODE,#tVI*PJ8XQs\QKkW#@1,ZV^:3jf:ZUP_PP3P1%"kg3M(BNWD]!?pn9?"ciiO*B,0<Nq@Bj'RM4keNRqm+o3,MDDWB8WcaC4.rcgNu6K(9;"\g6l19V"XgsM$nIgemH1VV7`&Ih'[p)%k!Ssrr5S:"c_KmFrJ=GoP*D!;'fK<\XNjOQDQj%sa[V)TOnJm?I=JUrA2jJDnT8jHgZRk*NRR(T]:I8,a-Ng!D2r/ig[k0k>Bc'<%gKM>dmcoAs_)!!<HbDb`k0oK.8n\&"Q<Xk`/aE`48^P3J-?!VqA>A/MJ&4@,[f"m6^VXboGgUjM&caaQq[.j?8VmEn!*6hICX;Er%g3dtG3VUm_g%N8=k)NI@&/P>oqf?CX/C&05eQJqo\f/V+m3*&LfE)JIc1CC0C\`Fb]R2Y`r5,#-4n^FB[bT]L^Ah,1dpC!M/'"?.%o]B+Kg,iYKbK#kO1%p+#aVhdjH:.DF=7O7"93Fi5AYl'@(m;0[WU8O1ASEpg/Z1Qup+.+.09!.Zk3T/Xj8<C?>-/l'O6)p;C.9al%Q(F*![F\"P8JC(DO*Iam8bRRR^3-XI2]jANFX[j&m=SJW9;&r($0=6j%VQ$XX7N??W\/3+<<&Bo?Ut>T'bF;XnY8sB]M(_7X4;/k%=?YKNZ#319m7q<eqLuJ/Wlp]8*Id"EgtDOCjfu[t@.GZ#2k%OC;M7</e9SbhrZg"Yl8,@l00VH&L(:+h'<;q1@ORf>V"/RB3oWCS%7,Gnf8\f8r,6W[CiU22(&uX\=@t!Pu=@)5=1X=e9AjpHCZXSI_ZK1eN6WiBp4MpM6(M*RA1sg,,OnOq^e63md^c+3er\WLD"*U@j%?Bgf+4GY)&TTmF7=\+X@(DZPH#O4cm<-/m^5+K<ON)%Ms(ZD\BB";9o-eca*TNuXt0>;,=6KfXqdjJMA>3YEDY"MgDZJ="_p,jK+%SU^q<\mJdbG+-dU>R2(&\1uP&/#TM=i3g0.]"IlpC'*)c5J1QF"Nf!'OhdX8$\1_!m[d<$Ho7DOq9(j7K#j?!MeH7(2hLr'rTl'n%6=]t"4>L(u!>[_)G"JV=nEc0K,JZ/DC@lGi*E"-KI4J+m50GYj+<X@c]3BQ):FB"!caML4fC.RlN<;<%)YeK)]ap[,O\?mDC\`oL%)Y9)I&:bKS9L/7L5U9=3F2EmWSe";DWmhB"(IkBY3?UZl_Qu"]KY!Odi+a,!0JcVpPXh^-=97lWGu-qa'TM0I'&dgjn>MjW&r+Ef%0XH,W*0hrU6sVQ>R,`38*n7.</J]Om[l7pD;45CUm/7VNG[.-?`qmi+9,![G71%>>'Qk:.:sBJ,.Uha88as76BZdD&O%6%S[s`R6%SD2L"A'XW&Zg&VjM;*r,;*5b,\F*eK:5$Yi7`3H<Jnp`.2Q$`bNNlnQB.d2'70j`?/4RJf>XMMD#DgmML(P>FB`fWC#8gq_0'5Zh%3qErG_..9]'#o_EDFL.0TeY>]T2-@;q,V%f-#`d#/u)]=#<%.YqncK$Mf6dfM)K>OP'eb"m6XD!_l$<(iic^)asohMO0nlHf4=b1%X%0_n4,\UeDFtG]hAhdSF68NGC3sk"+'3'N1:=TE[[>:771qi2<dNJ]gpboE';f`PL5`98k4jX5K=055j$dI(CK8'0]t_"`ACu!n%T?l*]2uCer_OZ/OCI>jmR!@%U(=jMDb`[1Z((2GK'pU@Wm?aYsRMSool[gmp`>ndR/7+k!lHrm%Rh1Y$YF5)1)UHHHAXLWFf\AlQ%:HH4jdNY]KiUs>uOPVS4iP$]IpbOKCcP5&Xka^bp0CJD#dsJ(JIonCp5;t7<_Uc:Xib&"[9DMGMr=XKag0S[0HEm%A202fJ[H%3D%S/#Fdm[h1Sm<Uia28N@09@:kYK)>GEFS$`-MU(!ComNsR>CSfbr33kaZT<X>qr6BXc])GGY9#<oe3K21J'mbaRLO<d?+jH?^.bma%YKiGRLgQ]Wp=7RiSG;E.NS_aWn'5*R?eA#p<t/70"eI[+Cc\Rp#qg=k*'E59ouf@_D2lX>[AYZj'JZH&fI0BgOu*?WG3.Iip5=aI%8k1m<PseR6orUE3>c=PAcCC0Q5C2J)?;d]Iaa*Q)@;YNZH>&eg'pK,9RXIbdpA4U`oiHRZ'`X8uUsjHH_;Dg(Y#`g<2tZBm#mWYZ%n6E<tX$c-m3`Ot-b/_2t+86^5meXu%9g)iak+lG[7d]&geu@BMG.VCn<?]5.]gG$<`rB0l<2rs5=S8_[ipt4_6aQBeF8,"'<Eq)f%/1b`+g\+e9VHrXIRie+!mVTG:T-'Q)??)gO]Q(Nj^L-ZCS(I%sAl0SUlMmfegr6OPrYKYA.HHisBB/^3g@"preB)H8qknSAB"2]B%jI^Mf<[X3!B27Mgd+\H!M,MedS63H&I4??)@'G4n..M+J2>ZL6[[Wi4kFI;c8"V!n=(SB-%p(iB[QiAll.k(c=6+Xr[pM%C]QHt"%LTf;G`T-V($q])q#jq1#]2Qh@=hPUbF0FGHZ5Of2fA!#Pe(`F7M8d$WY9igK@c@:HgPLXMnltp!I:?p.]pVuMF1sRfs(A>VI59?(%efQcI$`/>trDAV2T]$tuJ(/!_QA9s%rD>5`[J^W=5AKjgS'CuoqP2W$67Hd5QjKl6'MY>iC'Ijucs4miEQC!D[t8j)qFB*^\NQ"S%&oWSER6`B5'UdFAAnB8%0B`$ZOCJOda#_HC`BR/eP,CIb'qG!@0@Z_hQbPI2XN%m74DZXoXIcGW:!)Jmo7K`#?BW4L;C(&j:HK#j%S:4=ZprQ78]ihc#-"A<u-ZO&GVmnn#lte>'=]#!R[#);g[`m5:UPr#/2jQLq#3=C&PN0$'4>9bMXfmPKl7(1e9XEF*'g6nF<&J:T%SaSLE7.3d7jX0&Og4.$]M"&D/YD0oEH@RT&V<Rq_g,bb!h1SLLpLpjkp"Oo.TGC3WBI8/JRDZ6BU(I"Xlsj^Q$3D,P/,qc$\4Ib>%M92lZ8b1bgN,8STh)TNa@.A+^6==5;H<hVs%XSqs[0nq!="u_G[_Ag:.baKV]o)5g]j>0G]%*>CQQlXYc]:#8J2F*'mq+pkDn?N>%6=g\pI!rQd^3KIm(4p(D;=6h<"IXk`4f^?R^3))7V7u2FG1eZ1Ba/eL7N?[nS,cb,(k]'XY_0SbP"t7[8c&Xbpk@:4]*&q./S_Pa%>i^2/BB`0B"eu[DFPJD,P\t5h\ZO1:hfTS<DTjGhH??(loLLkZ@=HpDK_;H3D0)%OG.TR*DNPg(Q0m#e57WuXGDcg)*;`0&B$D6r%W4$p`L/R`"e(i_,,V6P)/sQF\rG3)S3G(\1I$e+hPX_dp;@Wb^;C77kW7B7'Gp?;+b.@g+N6`1Np*dP?K#"*8U^ErlB(t<_5iP(H%C.:dR.Ua)/,6[L\r;h4SEG9A5+oubCjW(sr[@On=S2@HMMrh*r2<<iXj,b&DPa9BP2\mE.+IM01eXbJYgkrJkniUDW\(m=jqL4#d%-]H(J"P5eQ=g]BlC8G)b_US,fr>R([NjS02@r+01J$TGL>Ke"n)MoY*Bbu&K`j.BG%m7k%;.mP*hOWedS4OpYTnBPi::abnDoOke%VJF2/XFcjn@J@>@G00[%f+$1B])-1WoP+":mX/AeKiZX6Adba"o6VY$SBJU87;8#>JMAQi5P]F>D83DK'mVj89s^f:Q0>6"beP5k%6"U[*$LqC#lQpfRenm%62XX>THM%@Kae.HtF-rlIBK0nRI'H\G=O4lRo>R+,Oe/TI&'O+9?`QEU)`*d;@cAiK6WeOH`qn6p@hmQ!%`?W)+LU$82XiPC-]<%"X[h_A`mKH+d)rH5ZDI7fF&af<#J9(<nbE;^OM,[2XM6G1HKDaTL\IT:K_3UnghGTfHID,AM4X/SFcX1M\%;d@fgaQ3LIX3OtS66WQTb#!sQ2dNh]LXX\s@VtO[U%J2Xol3%?$j@;-k,fslp;:n``?]d+&=L6H/VBe24OnkfE;$RNXIXWT2_*^&%AhiNAoBCr%k'V1$O]<h"n8dZ_Dsf'-FO?%!h-6.cs&0fQ8jDcsVq]n=Ico`u%qcCOp&*p`o&_nnF,`i3.sU#&O^/iHW2s<U-WJ<G%%5e7NorpE(6520!(,1'hS)rjNns.FtkXg&YaR?"sT$Dnb`Gh\\[*(GV?;GsdfsISljC;U45JPoZ^,teK+Xlr"EFhF-$[;I/c9W`K%#?,WtooF#%oj.h$O>"o+IZ&GWQ%*UeF[<?]L]Pq5)O;'!hf>Ed_`*W-g5(OfFpG7lTVB&@rT6AHEVs_Os/ZrA(.rV*iGti=@r<q6%8gOKuD>'Qn,_CNVg&-!E3bnTKlkJe1r+CldjNgH#BKOb=j87iPQdDM._Q:U+g2k4X+a>Z,2`eY>]Be<Z]@H-C?!NMbo/B0PqqK)T%,2cc7gm>u__2WRdYf3Y'\YjEr34peE`=;A;q7d9_in'%^J%&f/$Ng78GW67ar%;/a^\G",D&(qB^O3AF2tE`-JmAc,NaMFYQ#ahs%53ce4Em(n&"iZ7KB7&_C!.OGLTb)_A(+f:ZYCc(>b)Ye775&W&Z7H+9QJJ2L'O<(7qbGBN&?fnMHq-I"EY)=_6a"CP?F`t?9dK7!%eMl`+J1M#@J7lJ6\5o`Q,cl%2nQiI@KZL?Q)o<eZM,:-Kf7d-X#S%3!S8Xg<%07LQSu(pE>LpGZd;s&6;>Oc>;QZtA\F>::ME\,@%qRU7]Y5&KgbW9<>'u3ppg%,?u"sj@\_,gc=b0OXQ1`]FLonlDk&G_mZM6VkTU(jaL[uI%^;r:X!2'6TSKi&626.p<Bn]#XnU7EB#%Lfa;O>,CH:I_"H/%R%RCgTp6VN)g$`$Om\1gMXQ&P?lC7DV;#cN_,'MW\jJX+\k%raEfQ]]3G_Sh75@qaR=p4_BQ^N;RgVo6@teD%"9nNO=4K>=j"Vedn9m$Y`?/(bYSee1WX:X0`:7RD+QeK+[`WKa`W4,$XmFeCKlQHo\SA)be5R9:A]`7(Ak<bL.hX![pH??I;&Vc/%liBV06qhA_Z)[=:&g,Y=<Hr"^V5#_Z,-+nU>hOt.,$&+)'&/)i*81-gV<kdZXm."<ZHFfH5lj1XVCc-`C9)+/LsE2M<KiFD;5MD'%#\KFjRd>F!A<jj.k^FujTB0.m&`F;Q6ml.sC*Q;G%2h=,*tr%Z.&sjVVMNOlYX(.f.m'%81gX<9BJfsmftNUYN\?kA!?d3RRM?Z!%6<7.#^a)8Y/.4oL_ORo5;4UL9luFCK",'96#`*Y7M6Jhg6mtqh;\D*VC^aAX7QG!G\8eOK/tORS7#s58'(RZRM67Ej;*>)]<d_;3%\?=g,!3i1GQ5E+_M*TU[W"9)i\h4gR.54_dLl`<,Wn(,f6EU^?&Ktk[M,'jQgb_@#>A?/QC)hq)o*G-uA'jgT\RU/N9<o+5Xs99<%0>LRlLd<?a!a=61W.ZV93#57.VF(n*eoh8-\0a!L#M3fuPXB4JZU6^j1=6EYMOI"^iHqu4;:uM2)oWFG<3E?4h!6:tR#h45f#5e8%!CRA'0bOOXc?TNuAmMB/f`k'FCjB@3Ud>WR7Ld7?ltrKWi-=1c*#^ZXON(b,25+.&W,Vr/BFFXU#>#ken[+HRXe[/@?]QO-WF&XO%#aA`i['Cu$QB1<dJq*h5!mrg/:hUc3#_M/D(CV/EKE`UH)NE/F!(%/udQ#1QV@p!L:G#';.i-^fGbg'+/JV7W\4:8WYQ3d`k`8mi%\I];uC0dr2+[C4K,?i"U%3.)a**HVq6P,m.0uH,<U.iWs6-H+8,`\9=_BQFF;RCI,H<^I0Cb[$BBkjSdMo"ibLe+a8X9M#;:h*8b%mK+Sd^E!-Di$1MX)LrDb-imEV9LJue,kqR/*\:&[7.b\'eX$V0aE>>WL9QJD+r%-q[u)r;'HG.e"N&<e(js&dnm_!f_MZYn=6a#(%;HGH;O"RA4;PgcOZI^p$Wc`oHD>>NE=J@D)2^o=AbELfqbQ]ZGTHlq5Ko.gTLQLhR_%gAjk<pb&5?=1XD>lMfi&i@%\=J<F[sa>Q%H?q<IMXs1(*EY1LW2V#A<q2FF<7TI@(<ffqgV=Dq1%7me)Gm-L73GjS%4XQe)D911\]+IX(@b(_U,CsHZIP>iMtgcj_V2<53i67Q%D:r>L;_0CrbI-F=$JMcP.o"[Eg9Q%=/r3*;g9Q;:.EoB.U16Hm2#/0.XE)8qCU$1I.U/4eKIs;XX(SC`'1[^C>U,eah,mks-;%"#%-oMrK0c7*!6CQJiAPus3MdTP%F9rO`Q-qsc^gM<\A^=B[CYJ':B!SUTVK%9+m@bhcA-c'VX,CD;2O9.qTFEA#/RYW;=<];*Rj^]U%BDOJn`/r4Y!`8L`g2QX5THc1aMMdpbk+>^B?-h+\U4u2r9j<d6j_8Lo#Vi-,)Bf+_XiV.m+146abU8sC3$KVW=q_7pMjhW:QD_d0%.gBMJ,Im8,OLDS$o?2fd"]Uo??4G,UTV<D3Q#a!Aq$`B@Ti/=9b;6DV.'QNP6V7PNQ$6Lf?ufDZMZt>0q2OAFK!mis79IL<-5<R&%9-@>W/FCh=*dM)f.)/0:eZ^>+-CV:STH+B&;"TNE6.6D+V1sM`##^_k*"]bV#Q_LnFJL)$'#o'VaiG(WT`5H.dh%nd^_1,p<C'7)%b*eQ/"kd:EQjI3%U'f0rcZ_tZ@@2h=M]-XoJ105CN*t1fSlU<Y+BM;d`Xq9Y+D!/=+c&ef&&ZaT2[J*8gZYqZdXRW)_BG5%::+JH%E!9o>ptAE&5YS-cdTm8NjcOmH@4lfc<&Z5[:Ws]M6\3D\*>IcV`%.oJN8rib`,l9:V;[dDQn?")Q(gRd##?G.L<j8c,=dDS>SEZA%h0AF6kgL,^B[0"SgdXVS[+3l6-"!#G"!<hZ=B5l3-1Gu4nnhI1Xu5d)$,2sf'G69M(81`9.&:B=Zo<qP(%briV#WYa>[B\p0]n7s%Li]:)XWP#NTO$;PnqY1lk#eWa5\UtHok4>%bu!:%<R=38f;Mk$RBIc1=(O3-=E4E##XCub;2)j]",MSe&(>NoEeJcTkjLnF/FU@f%@j0T#-r_pBBh.#3dXP^[?JmClDoK)cH*lQSX<n]j[5?L^9GXgZ>L!$`g<pl@lSTO7N)`05S1,$Qb<r8'@9,ftN@9WbDP5J_?(Qe$%;?:#7Q<>0"'WW<KUDhi86</7=5FS&W@,X_kf>A>p?lf_c\O?M,ZLf$eC@1`f2@)Xb/crYSZ!=Z\R1_fi4P7//Qro_+G0qFC_sB1:%6O<$_+B*q^N,(c-g@5O=le1@I%#_qq-\l_+#&L@R86_J>1KFK06DY>sq)JO8<OJaV^p;?tb(L&;VCKKjJ]X.`&^'4?WCfhrP%L3I%7&jjD3.tF86T3$1&V6?6H.SCkZnU$X'^H$DoN%ko%Qp_7M#PEM:o@Qt$7Z/Zk?,upb5l+0Q,\uU/5maKNOu%jYk2h2-=bTuNi4R(%6U5eq98l;U>J'uPeBIEAJKmj?[3?WDnGol1Z0ti*2+R]dp[\LfFpC,7p\][]KKTGI!C&U21b_r6G9_nV6``$p7^ur*_u2]lj&U0G%O%Rl_lN6ZG=IO(N'Wr:^:/.2l((Q*2^_G(%^NhF\":XlupQYr?Z35jc#O8RUARI0+#RG(I.N,:=Q7#O=LeDKi#m9R].64=MF*S8[%dEIlq12?uV@eDO2Z_r"=[>>fSRCY3`6E0OM+_JU,HkJ;fiU$GT@L;]@#/,bA4q1GCZ$`'*9Z_fu6]>G+fM>2^5nf07F3"o&V?i(s%f7]m+1DT1IUt/sFHuE/H8B4$>KOAuVW[bJ=)U;6Pf$O!uf!U7"]?>jr)ok@&+]qu_HatJI%g$g!\LJL@[$M4%F)tKZcq^mD'!%J3%[g_i[[Ign8(_Y`c&T+[eATNc")HQDRhGFkP6Ze,om(6qeZ,smSHN/^+&Hn"JGBj<b)":P^jUi_)RJ96c#VgOK#g9:W&;o#`guSR!%m'D5!_;[Q"20P71,iI%gV71Gu^suaFPg_O9b4LEBiRf]F.E[3P13q"J<n71$LZLAh^g*2Sj=0\&:*Z(-8<mIuTpg[YQ9fMn6"!\,%@a6Y]=/;Of=$2'pg.u.Pi?Phi.Mu"`k)kD6'E]S;Yf,T'6]3?I`$SW(_Ebsn,tiS@W'#ud*lJe%)7;c&8$ma-1t1l<S7D34/%eMZ%pY$9T+:fL?da&'pjJ*r'\tXT-$V+:*eFg&l$-V><"JfRJ>QQsA%@Dc#A>\F\S!hH@a;N6-&XH(0#tQIB3M'Q;$DDN$qBl>!2_lM-%817MRNHd9g2QRL2irEPNUol)3"R5c<La<L]>mZ=&@OqmsT9p6WYWV[j?rGgeQ%7GM"@OhZ>b6\cFp;p)=IO<.'Wn"<SH5<Q\T`WU%I1/U4,g?;pe+:[(@p"7nP`3k>JA2(Y/K*^V@=\FsA4#U;fKhj00Y3A0BRin0(kFfRTnnM_<Yh%_OtF]O&/Of;ksR$k%4#d&A_[GQ%fjZ\')'O\dIg[$M7h]LX`M0)9NH"L)JYbY%.,bpD6EX=I&T0uJQ7k9'G?p:C6*NJ-XTFkq;_&[uZDE\c2KX%\)KK+kVAMr^:5#@L%j'A:7NeaoR7m7,5I6tZ-OX-_4&^8ejO:P(o[0I3<O9\M`Jm_8e7;?t(jaoS2TL9?HoHAtB>*C+%(+MCFS438cnYC/\D'BXqSEXE\%U0G=YG,P^UKh0?U%ou*3Yt?]I1i/$6j]Xtn-3;^o%=g$ON-Ec2\-b#0K':)01PAbN["0PLoqDH\hOub8JLD^MM6OK>RSp5-/?m)Q%du-:V]gQ9kf4qf@g&X\g)DI*oXPr/R=*16H<DN(7+V5e&$T2FND@E=-aHR)=`?Q#>f5ZI3al?Jj/C3@47,j*.Li]:)XWPlt.QYc>%J0P]%0HNn&h;2sq0ML40Ec2G6:>6N#K#7Lulbh31Z]+#1O[>9<_U\t.aDN+mg9dO4f_Q_^#Y25GA>5?!lc_#WHWE(&"Ch3l^qu;<%5ogk10O[HS8r2!D<0TJY'd"V7_4]9hn7I4(a]K:b9UQMZYWV[j@8`T"+VGA98JT<*MZ^b;_;GW>Qu,PE<]Lpcg<rfEDRb<2KdDPN%.d[P11E#n,9T]JT4f1p$]0`Ak67bJ.!@:YGl!5He<H'n;PY/1?@nJ&\04[[$^gbSHV-*[iWJ$bKiXJPW0T=Vl)Jfe+/<gPSmcDr;%GJVbV7Y\J;?#J@2Wo-VU@g0B3_3>?6m0XHLkIhk2UnnNea"iL^+tUtu&W0Q5*(pk4l`ij8_-#NZ9*+J0kZn^Rfsk*l=2<CMRQg(N%85X23,a.$WOM]DQ>SG9c/'=MQ&;t]p9Gm+r&1&c1e:%UeV]cU#!*h7E;&c;FXWOUu<!/&u;@F>%NY+.RX/%*dbQ3:@Td\>5npSgi%=O@[95)-=akR1<5#aT*-a@JU+gVm!^NJ^O?7H5de-pEBiLiH-;>.[=MN!/I?'EZ5I@)XZ4>,E+iK6<GC)]3q+/ul+f-`S?P*\:gc%h,U=?&1l/_K6:&72CP7CDNonfEt=SALi]:)X^?Gdeu_c=?4:F8K4$6eiB#C@drtpMc0u`>jGMnXE\Y4\E7"&bOO4WgG=4-*q.N*l%mg.ra6G=ZWZP8=O<?Xu^ar1%6!-+TuO6.!?pLP(k;'&G6%>%I,lE!=@/;QEND2iO2#_<S@d8>SYBg4-\+p\s>Plt2X869@hBM&=M%K4qbS"JEWieI3.$R]&WTAr[pSU/eU*/I^%O,F/r2J9c<<X%!;p"q$>7'e>B&(+;>+=@0#FSYu[kOe_II0_Q'_>a3&uM',g#XVe8L%kVPt)7U$2,LPnNMr(?QK35d_;M,mA1O?p&Wq1aq:0P[E!!A2=?#32Hb6]9=uD"Q1)"&Z^OjM%OQEJ:om3IVG0&]PFpn-]gSL3S#i%$,P+8A5GTcf-ntqbF-0]@2ZHR9!S4i4%Y=Vc(=X?`aR@l^<_XM\5R7[CtN0^&G:gVG8;1Ue,'cdhQ(gI=)VCVQ34b?"snk'HMa(<%HM<%@W>uW)!`YbG>SibX`mUA5V.fh+SUAZ6:^LeXY2_4-FI7A(f1q9!A!l!D'[/S?8k0&@oRBJ``K,U`\&u7_J0D6m]rFXl6Zc2r%1P4RL//(p.[Bd'B/H%-7dd.MT=$tGn<K%iPoQ[dm.k;Tjn78TbW!UUh0jpBBiWL",<s[S0a.@s_4ZOb=`<cSdb!B,ro"p+t;'H8l%TGTB(;DAGC*fEmac?1jDdPt6eA-"1-Wpr3PTIT@(+L%UPSmr6i_e%2D'aL03@:k#mLu.k?7&bcu%,(=$*J"Qm,=?fnkdCIBY6I/5%PSiCp(!_=i9$]:!@7l/LS?3MqK.4[cHttd*Wq#G]EUg=`>UBrU(/igad-#^D,>],A+]jG*aMFd?.]G:,0T]'`BW_g4FTY9lH8$Xs%<+nR-=F_n6;[Qp;io1$QTJ94\7rqC(+uSE6V*dJk3_*VUR"f0L$nX'\)&C#n.`E4,q%\-#"XsfXMV^sh0O42U$f_g-8d+\WelE'R%#T/dgG\*-&l)cdp/&F&VK9W,'1W2,OZCin+*a(ItR;"X=%%+6k(c4Ct%4#Llc.,Ag=sH@dOg/.J.[^o:4<?`jF1!JbP[)^]W&U,#%,2u2S&DKT"=uk/i/1llFeqg%SZ]QBs:Kkp_2%md+TF=JJC/,5h@\kbOM"3&-"<%Su&ID*I\pH;e&jn-PeMU_8.)Z=d5j?K^E<3)i%##?.mfHrB$b&JZZg':j@7Z,%qe4*po,8dOIUnH*R7;<gGA?>-3/63$6,u]rU/"*@pW\oS=kuEU5j->R*dPuu5#V0&bC'be'V/F:]%/;e952i.\C[i64GKDd>%.X>)^e4-0".3f`4WtMqX#g988?7o/cLo304%@F2>$4T<3)#d!ENo"e5Qm+*+2q!O`NJ.q+UU[$XN)qg;%1Pj_8/eEat(-!qB8r't_L3uPu.O^U+JN,8r0n_uQ%T1Xc?(UtS?l5?PPbbE-SJth*L4H!)>VR#EL+#LVa,?CZki!R0DAL3"e4qK@%<mYi%^@oa)@*5&*fIDQj&WcutY)\K-"U#EbgFDd01U1J0JnP1;Oo[jMW<)TU&/g^;E4HnK\_8cRE(*mI3Dk[bO4q]VH380hE=d+,%O!b@*;TEb7im0:pQY]b#ARmX2>1R8N<0a(A?NCZJj%(g7#!=+NJiL.0RkRsKR?EPf\h;7)KqC@L*2=iO-X&GM94#-F`ZqmMb`u"O%'t('%&M[\'&`YkI]G_1P>o`+c;$']a"LjDL;O4TWHlRbO6)ltX_gk`P@3eGXU6J8"O!+!TjN>7^cA>H+IagE9U4mNMoaucEP(nNm%<`MXS0W51!$PIuI5/tQ%JW:YtODD68U<u5.R.Fib,"P^h,8`*?hd\uR"i;1f3"<DN0N3q,q:9X3<T=fgj\@6a0)6*8WE>(P<E&%h%?MbROUV\BX=A3aZ:am*9/uHKIUcJhd\Pfb]'?e4VH6T-c(+G7^,kl;c9a,(gk)\!uW@S1&:(7UDNolbO6u0fCRB-'eWQ&?P[8++:%er,c'\Ek(U(&@/pFh"TsSWKV@)PEe"+bJ[QO4G"Tl0)NPA3_iKf78,ro[b4=8K^KBY)XY`Qm+*+\#'h<)RW<Tie;51Ort*?NS6kT%-1sh7'ha.W6c>dLM[k+>r%(_N`Ya+dhb6A`JPS7*Pda'$KV0ql&.;5Z@ldN4Q7&$`ZLfqdmc_@936\_+'<.=4DdYbj9uA+YA(drI%*\F#N%>G%",rdr6;P",i/-uPZ/G1eib+N3h-B:jOA3'k`akC-iLLpTdo"^F8KmDD'@"'p:YtRQ['k<r=F#P[OUgl)WoO'SLc[I$h%"kk],1gpZ'5fXFNVZ[$iSoP5ObJ>SDVF1uf*((/+d%Ng[>j_*Ui`pX8&Q=?ON,(c-g6mt&(c$,1c:>@E$":eCRc$epFibP3R"mSa%X3>T#-E+5V>Yh9JpgfA`Lf>ZZ#Ra=DK9-;IA;_&@!@*K$JCHK7EjR:8r+I'Z=]:1.b><LM$']?::KSHG3Yp+e)mCn`YR2=Zj98"_%bgr@pD2S-)H]uhkX(dX$VSeLG9eh7qBL3:SO,Y^_7i6st1.4+?ZmHHgR;%PPK-MMh3<nLU":%_U'M/`XKt"',RRekC[Z;G/Sacgh%""Vag;acHbL?`Tj:uruqU_ZmSL@S#C&Jit%#t6=VRUK4K`\=D5L%-p!j.mJSb8BC"j:DmTCiM0\=.8*X!UA)aP@mD$/h(34\@KMA%#\)7F@i,=Z)h]?FfI5"m'9-/C3&T!.!@lKsnQJu4SK8Y*Vd5$SQtas[2Mt8IU.8>$(-N^J'51T5cpumpCsi-aNYkk^SXDhL4TKlY%Sd1@TNGp*%C."O!F%p]s=`W2c8%(Q=kJNSFE<M/[9]=UCHl0^0Un]-P&oEReKN7^CW8Os)blp7c?uaR*W%'>aN90"J`KUX+iL+;n%aLFW1JY#5.?GJ@V\-dIE;JhLn[!lU+_:iJO4:5ST>lbJ"4<[Wp0)ZbTVQ'cLP=cTr;9j2&#,!-Drdr%GYrqZ80dVGHASj4G^k5<\%K8^2kX@?X$c?V9L+tUtr&MgE+U,p*g0EJ$kegSc7:ZLt6m!<61G*mSt&<_4:H?`O)4'l2R:eB]WFQemb_[q"(1(7Hc9F.2h\h%m6%1-6D,3(=gkC74?D9Vm8^B`hc>UfG:>5+:T\!9)$N&tf<H4adfu1qFj@>=5QY;\r?I$-TM<82sOWLeEU^_]70WR1^Jg@he*><LS3]%31=WW&ucc'n$_).B/M(A1Uj!mZY`cd0XUq^5mXjQS]+9r)MC]**FeL>BaAN"K,9?KI%;'APR(1;n]_9>!`@;KV*G2V)oVst9Ps9p%EJSHU'<N65;S^+%HAaWbj$jB#A'%5?g/e?4&a2Ui\Lj_T9&SqS/"^?Ji9>)1_K'o`$n8a")$Ug%J:f%uak/"A\1jC_&$nZ+`&:I"%eVouQ_OW+,/.OJr4'W1Gf<uNIZiT8,dH4hIaiH$H-*0fq\&/$^LfNEIAY`kTT5.BL2'UCUl^.rl,E%Ii;p7,9blNat7QSqsR/nA=%R-W]EJafsVEA.V%RN!q#`(Jd9*=X!p&qW1`<?5a*[4L+\+KUIWd3)$r%f*oUDZb_-bFjNPcR@,kJ`[/<)N-W-P[a;q+g''UO`)e0%qh`17'R??D\MXVPD(m(b3#6&g*5il?I0*Vmm==sV#]:'OLdB%d+fLJ/Bn0,Oj]_h'3,?>Q@Y#oF-jh+/bD-K<(,8OJ_A2+nOb([_%WYbF9`/IlAnT59dBG!K^a"3t:cJt9\o^-q:6gnb#TZ8dFkTk71As&)R0k(p_&.mW#-V?;9/7NV-&[R9UfbCdVioqKuZ5BTE-t6&U%=LNiGq?Y#]FJ&oGBRVZE[s"%Z&&JmeEi$p:,1E7]jcX!t//#ZbM'*SY07qleh9;+"gl^ai1^*1``>)lscC%S;I\t#XW[$s(r//<a%*>&cQ[3u9@@5]IY.@&(T%N*9j;\Pp@3<T=H-lh$BEE"p%Dc"g]M_a9/KP>L$`PU+c0$9mk4Q_F(W#e>U=u.sb!B'#.5#s$@j(08J%A`K._",80-a`UE2e96ra^m,;7?Sp'LQ+EAe?4@UZ"QLqN8;87/(6AR7"+q"SGc$QTN(tBKp`U@2RE.d3B(#BN+l"W'@PC_M"!-.Z%0gr62O!2/S7AUpV(mmZd+DaKK49NF:MDG]ncsb9*bgS^NKNoQ=5!NM`2)%BG`%[=1<m-`TY^8[2-Nl-:M-:nbh09#)>NifG&fS43%ja!%n6L2m@YJq1nYe1lIBV8m&oO^5'*(Xs&.+u,TcK3`d):)P"Q:!DF#Xp7Vq@bRd`:,+B&6"4Y_dp0:%ZKFY6*pj[`*r<cTMun3%Jc\Qs+Y6]-N>!UiYS+l.Xh$24Xkn#BX9:7ZKLMCEV.fgPK)+-m@O3E,1H1h4J&H;l0hhJS!`W[^%2LAB_K;%H2K%,#%]Uo]*J1N%%N+(G\`K[_O9UEc51?OC3Lhi^uXW+a3^*u@^d:)cH=PV\>S)-ur.=_mcHYomkrm*Jc>7#so(_TB]87\Pn4G%9_S11/FcGbo?cTE?\%EU@^1?`7Q[CSQX(91=W"Rh4%_YMs/i&aZ:9*W^L>ZJ,6K0ME(;:r0gPdNJnkhGktbJJCG[O$SUFE9sh1^lsli13e,N;&C=YCp6<0%`&:I"e]d[;isnk=9[su=a%d@nO,R1KL?StMBeHAj.#RS\#@Zl\@dRrr$/TD]Mm7Z^nR=g'^lcD:#i)1K7YgbZ@2oQs/.n1F'r2PG%*%te&pr1Hji#'\.?nbFe4c!NMJWZG[C<Da'UFu0E.71<bPiuMF!6#>p+UBSb%+?+';pnj0/r__3k"+Mdf:#I9DWVq6UN,sA++qPe%aDttkOC9bZq[l="!aC;u[=1$gLiIP(R1;M&g-0&7%JtTJaMP&F?'n(8LWkk"@A]/\XCc&PiHDk$0aod=6A1,jm<Kp76Cj\bMXUU=%SKg8(2/bs/+H@&[!HcP1%]lU`kee'n#S0%)OWlpO$q;JY6fSa(6mkkcDOh[f!h^jC!AKQnL!sr[49M2VEgt@+_bAT0Cbe3qNo^u8%:ISt0"HP#)D%k$G1Z&U-"Mln`)5*%n-Rq;.f1&UCJQ&V2+i5G#M,:-Wk+PdIR*dcgNsRN3]HKCK,+tET(fl4'/U8\"&r%k^?essV%"e&ncDZ6n;YSpV-Sif;l1a&H<IgG,QKfr,KLF[e_-sp?Y_u+0f@TcWdf#t^c9eGGk%H#/@L2g$m"k&W`(\H3I"6>`<RYp<\]OcB$%Usf.?54"@E7)jIsQu1&LGbPMlTk>n`^-\3>3ZZ\S+g'TL%3a=,K."Oa9G=*j`Aj[;#Ih$eUS_$.&3Hl6BGpuMl9n-/;6B*@.&1YC%GUW_fVmL5#oM"$Y0W^F'#A\1@7VuZ)6s.Ab;2WpVFAA*k5e;(^!#@U4r?Z4Z6AGQTQ5(5Hk5+q?2&Bc0#QeWYX'6)C/-tr)#\a:q%`(&'*9+%KRBPBdZ3@o6-+2T4nM,L9U/9=c#+kP7h1s\%1)&X98N"HK%G]b1u9ciFd[teC<)+!2"#WS?/Yoosh+J]%X%:^<PY6H4$%qXQ<iMD#ekIP_P>XJnVRA_u6ujF!+I0pjD(e>73"?G-YQUCY%qHeYiY?t$4t%QH`s#SetI@k?D.2^f8+0Acp&oWh,3jN6`1dnZ`R%#fNkI:Q1!D1SIXabg9AO('M,iqj7AYeu;X@m5-]bZ`H]6Jd!"Cku7_'c)G4OUk_k?N4_#N573,q(^=B@\2`93N/$Q5jECa-JfBt(%q%_]/K#7/Tr(-Fs-r^^$'<N.[O<g`a<UjjDl18BdN5puC;&h?&'Xe=cY[n&"dWmQB<?D'4O0VFOg#.N]WNe\g1+#C(-7__C9\qKP%q)Y_t$M-:ORJ7p>igIkUCW9l*#'3)C;:RNFq5b^[PEL\\WmU]WJ6Y*ZC[,"qF`NUtW&HWs95+Br\-DOjj2h!:Gt\j7@0i/&b72=)%r143tEm=i#BaB:UgQ3_udTgQSd@0SK5t"M@',Z:>j5B07lE2HrP`&uH-nUq<$$G$hY7<ru8#6dXRVtYRYdF8DPR,-]E\U6/V.IPu%F$Rjra)+\!*ZrNn>VR"6:6_LG1Ts?"_jim(rAk-mALG::]S.3L#N.;[6UmkDU<`QHZW&>S!0Qs$ce%F`@^TKYi4'>aC=",[9./XO%9WZORX;b)YYQ8l\%\8*e*"`[#9m!+P@q>no%Fc>(M3L!D$l;h\ARK%sCCm=WlTP]@$R\bZ?(eoH#R#X.P06sRN!)WH3'rS"DZaU^%[TbR:)<opYSrrY>>S.b'"URUIa"DY>*<uVb`7#qQI>=-iar>(q>j.ph;oq5o'kgsG^,s6MWs8q4#LS)La&m;9+d(05=;#u`+FP[C%'2`Y:MHLW[XpYG$KLIF*V.djCn3hDsTnI3T)hFBSE2n8goV!^p#"V28b=?].Z`DDB;*)@n<^E@H7cmpR$`k0q^e:ge*I@FXE>XG.%\/9<-X>cL.;!Tf2KVb(`6BR.nVf+WMIY>.d5g9+@^r4h*`K)?>SSKF'(:X]nr3-m-i)%c3\:mCZ/O<HtJn%-2U$!m_%`9dmi_N8q%^fke^!OWAX6s.A`&W5.u"Z)_R+Q(Ot*JLbhAK)s'=qqI``%uO\31)V<[MN]4!:ngCW+n,FYc;MBC%I!O.rA:"OG!6lQ&RA40p&Mk%<X&)I36X-UM:Ke^Hitu+T>D&t0N0KT>7?/bZQ..YXcQqPYU-Y1=SRPMlIV98^b46=r-YW2/*5&4E%Gu()0?:C.Ljm!K]2HA"skA?%\o_XMV1(-hKL8uXSS6h]01;Hk.u[!,-j%%k-F!-t119[')5Y\1K1S7Z4'er8^;nQ-(aq&AJ`D806r`C'dUShV^-;IOkkJ/F27b@;%HsL-/(e8YkFJAG;Hbr-S8B2a(!O6u+V9%5Z*JQSs,GQobPgA8;dFV>1jI1#+1p@%0bluOhB:D"F%(";&6Zgh_WKI]?9gc)Z;G71N%\0ahq\s^$:](uj'a7*To>O!*(PS;81<rmRo4\Vth(T'\/\ErBh/G+TN+Ut*?=9?%#3Qkr<8?V'[>b-Dg$k\N^RE7j4B)50N[T09O%;-5X]=5"NQa.5J?rXe2'.WnB1YNr8lJf%(h"r=)f)O(Ne:l7?PjI&QIObKjuUInkUnn^p<B<DM51JWTIPmaGIC@_cIjZ&2^@H_uu%lQ]_M8._JB\/&="!_995S++pEKjs,C]=J:M,@3AB$nQKW0I;GVGc)]PI(Y>ul$/:i@$HD-l[ls:`aZY>V+BEeG1FrAO`5/T7:@a:%?-$Dnog)rG-Hs<4k:/+F_ROipQP?H7"&/ln`3^\gL2eb8]J7J=":LEc&Icu,@mY,sR9>u5^g[9p0c%%mJ*X\S<]c?.r!Uf"3%k=P%13VQT\iY2Ca92p+"D:'l2Ma/H7USeWdU\_pT3\k=bN`isi.q9%V6<qeh-H@i("5-&0@4\&`F&J;Y=Muo]4klRF8nVIi7r68CG`]h%Y5I.^n;'hl6K3"KG*XCRdEB[+6?[K^0il[m`CpP18E0`-LDF&b8t(ZPS6oHsak31oY13W?qm+.\?Y]#P!fV'qS;oi!b7`P;&QiRg%!)d0ifVm">UuoBB^e1[QM2?#5a"+\RMiL'fb6#r-1sRcKAUu_9C>$=0q0VDO*Hq2O&]EZ`Xmf0aD0@i*Bm')P)NBjRP+kO#V5@qo%R#$F*]oOmkjY7FLhKZ]P%hk4k&ChQB0K">I9/I=JJ*Ac'!;<J:5c`a*#t$OV&$1e?lKHsNi_54o^@]4c*^#iYA5j>(&2i/recQ=X%^G_GrKS[H&FnN"'(89$N)/&+,'dUHb^G#_<`,+>hgU]hN?ihg*<#]1jCVc?\;lX67jRi\p;I!bV,c#h.-4^)iO>i053=WF>hdr)$%pC"CJFIAQ!)kuAG07^d([a^r%>1f1e(uOeQD.ZDTd)70DbY9r=%s<*iLTsfo+g[HX,\0qc\r=V.@j\?P*cFqh3bp%@1`J-.o@#Y*%0D8)u)Ks1!!0sL,s*/!u9>+_A_c38O[QC*#I_"lo-1]InCV:()P%"Yh1F3/_a+PHqQB8)6+h)nDiHRbb1J)7k.;:E3EINA"[Ot#W%FT.Zrn<)&&3G[4`Z]#FJlV89k%pAR#R9#@T=Z2S?Gu-m3S?8<S0Sc*OBuh@>ai[XU;J@Ug)CLlB4&KL(gO6"A0muXVM%ai$he8_g%p/j>@o0Af6og"2l\[Or+5!N"1.h8kN.6-[_7nAUf9EPI'PG[#BD:)0!f:Sk!A>HMU0!iu-F7+-lEO$Cr%;6u!2=4Y'fLi:tZ%I'q%C4D(Welu3_"*QYh6`R\=qM$RG,OS,NN-gSQ\1`+imp8o76;ZE!_pn<JZ#FX8]'`\7Mo?M1GVe#^1k:"kL=8`q0$Pa;=>s_gC@+$]%5K=X&IW*D/4;6j#dYE\^1k5\_NG)LtkIr6N."73=P+dnH49tF^B9gfg&Z\f*KneEfr:%Y]pNV\XRVHBPjg)#cI1JJ!N7]VYoUV(7%4?]qk9Bu%'`h"b/,7CZR7V7#uk*b_`H*g/p<9keYkq/dugb'+52kD!^4:YH.96+QVoOb-\EtDgZ]gFFWC\/W<#8%$@GrJJhC?IB+%-6o\SB5GV&:/$V4pNW_hq+3)0;/m5.POjZjr\?"Y5)b<BnoQ[preTrPnKDBG-]>Ca7-QrV,??c+KLB>+E#DcX7_ajL,Qu"R3"rM2%`uQrf/V1UrnUS87=XaYKD\7u8b7/aUBA_Wm*t[mBaJEUb"X`FM6b11EY(u&MeF9HHSL(9l&rHQ7C,fB(R59[kaJK(\@r(k_',(^A%VX[\5kZB?,8TQVGoCM*5_cYT:m^ZgdK;,K/L0uC:l&MW?)u+5g[2I=h]NCXpLhe%=UTr<BYbue,fj(YCA.G^P?l<RBXblRG[D/5h%N4NKtJgN]=\@X,i`gs^n%f"0>\<elG_&mj`mCgI_iTHOA@k5d1qpE973al7J\eEO.(\9K?`nPjgMGi#q9XjiN>_^gDr@`-_got"D%n9)''`)s=,_fmOCq*>PS+ko.`HRGLMGtN][8<r`%=CH86'%*ea_$Z1rf#Z\J-r$#^eFIobBk#o/*bE:Ud2KPHIG;_N,ci$?qN'Mh%lML5-'sKnFk=jLfXN0Opi01Cp'Y9b>!(Vrs(!qM=?8V%mh4G/d7\ou=WamPQ782b&]GQLqUcIt*q+F%hGWTWU2k@0/_SH"jTXTo]%dHtg3Obli+BoR4Wb93QCd0M`Lhj#m;j@_luil'8YQ-j,6,tU[F0o_CgQc*XPoh_4,)g6GIVa+U!F`b_eKU7/Y*9^%.\u">&cOn%q%Pab<P+hD.9#+)t)IBCgR\E(bPRoadTa#d:ZCsk6n#Bf[.bHe+bZQM_46s=b%1&!W=,s\ZT:geccVGekA("Y#N$/*hcfbgGD9Z2Gl%%gOA_/"r/[W&8:DM<.jO"ZS+-=2`]FpsAoS*ep>HL&!&62"adp=EkUk\qS'c.8G5QlCF9M4V;7YFs(:n%V_dLAS=6`VIHr2b!OOG%7(:kF$(@5M0]NeGO#[>(cG+Lu0em)b?f&\WO#*B>DC00#!PK84O9d+fUTC<#k`BR(!\6ul)=$q17"bJdBs<;W`2&QldT""=:<pJ!%FXSlE?T7=P;M+Xg"2'DiIY7(R;;ra)k>_[0M4da7U*5+MFoi-hHQip&l57XPGq3A:bs4+P3Sc/V1mhM!%F^eHUP2d]'Jla]d#@b]%3[(Hh5\+m#ma39:!4:K<H?!)b[HlO]U+nDP$sM</k[tLp#6LDQ)Ng@6X!B-/]r*RLbKP@%5OjuF^X*TM@Q@@I4P'c!NeG2=d?%ZS%V4Ui@T('<]#o+V&]l\2(V+Rr1P)'CZr*TL?MF7Lr7N+n-Nhhc4UpQMl'=3a4B<jtY3X3B>]r1fu4;eLTJZ]tdFl8[km,+)OZ*74(%^Ec_Dm/g"e089^!@m&(o8S>aS/0,+pO$ufjSj5*WbYc'\Vf&DI?RERT$LTJL)s2p74]\Pl>fLY[YWoQgjYJO^;4qLV\4'5K(!fJ2%cPQpHK>>!HS#4eDWHg$;02G._8P*JJN>"sI]cEpI0Rp_m6sg=#D?V^mQCZ&tr<R48/gPR,:Js8+_I=.0S6H(hPr0!m,nK.6>H=Qq%>H+a#gWRenXjF<go)*]#CfNWGHUDI>_J7#b["%3Lg(arCc?>24\2Y6?dF,UGJu/7VM+Eh`D2sqmSi&i8dTA"%>EV=9P0tNmVrj7H%nScAsnVH:_n2Tb&DQ.E1ST(J/(P%.oEi2(Gj[*:8faEuuUhZFg9glc;FTq0B3/D0:[p4p#X.c[1P)OJubrE&"<uTu9cAoI<nf'<>%>9jP&K]/Vb5\)RI,7l@]"]GPuUhF3K&V9=274e_J7X!Z8N%lM[F0Hn;">:p\OHS%$\k_TN!YCK#H3J[[7NI2[4mUT7A+,,/Jdae-%/rJ!KU(-r=PtiP<f.s<'OEcGgLP%<,ga4@iB]*:`iF%'V@?jE)S!]7e#C!#o$uNq'mI]7GV7RXTZV&m*p6g)+LkiM5Z(%LF90DD<%id;CmK4OJ_OFnW&DB4>_Q5(.MaO(t4D%H2&7,iFnCOr:[YF3C5jT>u6`/.p9GKe\0a29`XpZ:O:3+;0'oXHu<+bcfe(,aTg)CL/b%_kqicZd]E$NL>H9:5'@i14`.nm+g[l<i<f+.nN>(eOao8q;jjiKS?B3o,Z"40GjsP`F^#=#c]up%>?+f0$fN#_SXsLF/>:d1+TGZ%@Nhs)1/lPWE([Gf#eBS(MZP]:O//SXR)YP*!uMm6eesTsjD&"SKQ6O$Qm`af#EsHOElb5U(m\n`+^Tn^Ba#(^(E![[Kuc;P7V[in%SD68JF^op[!V&=;EIk+ILb[HeWJhQk.?VceG,aCjAW37X(^=Y#+YGca%+R[<KR+g`9f5GB&nRjr=iRH*%;U(A9q?$Zgb>q\-2N7+%T9h:DWjXJtNS9rRW[cU!Q.tQrfNiiR^Eg3T>LUM9`(hsoE`\*S%P8-&VjDLg%+R8\34W">[Y$DJjGu;3\"@g/SC;EZ>*qHWUD7#-%f.m^m$k#HI%l[7cQ<KCXBI4mDcGKfD3=cp"POi`JhW.@8Bf.ma2\_mSLjPOpcGNoha3cSj[Ngma;p$`iTJ>NIoTCtLq)`$\4'!+g%3Fs9p=:)rE1WunV8]WLl@E-0gB-q0^V"(HYK[ranBf9?;k@]Qaq[#@EiLI(`o.s>iQ$8Y2j0onu(L/@9k$]no4Ri-n,AEN9q`u$o%(0cYVen,OMa48Z>9-]7)B))Q=7O4SV:ruVb>"!X>IWTnD_?TSJ4s2j.+[TYDDbHIf;J<UU^D6UNB&=@22cp:_>q[fc+N_)=/:"$V%,d3J&9>3!W,Uo]EVK$W:Pcf4X]hEdkCgN\Q^r.J)YSNfE*KVMKYFo'?M&<CiHHp)G5Z:3-&r[P&b[JA7#)m,\7C2A@*Fg@DIX/4S%P497-F.8E=?jEFK=X<VHjOuf&W&IA2gg;S;5*=676o!MhM7LL]1R7r.m0XSTm+\eg=K4iYgr(J6+B6S+`]PO:XNX\mBWEqXUm%UM%\!X=>9.$9]&@n8pk.>r0\Wa;=(sOmubAj'/ButX:"Q@2)Z):_M\slbV"]klV#dLeX(cNlWd?*D9D!nQ#P*4O.)CLkilmK!08oYq-%T*T-F=^<So(i-0O>m4)SV<Ydn&hRr$kakt8nCB$$!j9inLfIGC_R_6=aOOFpNMNATLrO`934S]/G\)#`bNBkmbUPKogeLZk>b<Cd%0=AsF4Xp8%nRbJN5'O"PWJY^lAkE>-[uDt1\MhoqZttd^.s]lQ8a99S)A!@Ao6Pdlhl_m4_a_j'QqS`[?SGn9YE?,qS@E7L$?PJ^%.Q\(cABGL@OMdD^@6<q>,-&:g@]\k,W77eo\YM!=:Y[:_^E?Xn%c0XXM!q'3$?b$aKWUB+^2nd3_:ZH@*o`p"4-M`X_ZWfAkk!dB%G@<$+CS&Z$lWa&Fn.e;4a[fq3N:Y3+ic'CU^VJiM_eejO/GiUfnI`4a:4kgGK=2bQS-t1"+Q6aje<C#VK?8paQ7&cL:1GV?B6q4"%MiY4p[L5Cm@b]:QI^q]XEl>#:+,uX@();V&;L%M"(i&7+TZDQjMc)Qd+F/+m[AtDAqiT0%.uo$i&lNrd9%XogV8S%e5A@cif<1p7%UnkPg`qe_"QuNZg1i!Lj0(H9M..\`TTWf^^JI<NP]#YK9Ihr1F#Wto$:P?rFhj5Vb4Ne=MCpG9>BVHGL9k+clPUD,k8kLRkBq/9X%nIo&<eQ!9#QsVc&<%3O_kq6(km*@5i;YZ`cl`?1%YP'R%67AU<*Wr>XB8Fln=O;1P%Ahq:8KgYsBb?>'o6[q"k_Z`JG>)AkakW!n%%@Ii\ErW9/&aJJO\GplF]qh720s/LTZC_\:VMJoETLDaFcpfJSTL/a8;E(JK%7R?QBnfdT]4kf<[(XOpHGb+IRV@)<;'+3-JuY,R%U^96-W-m8b8iLuM<?Lh./X0/R6$k&KN6JAa.:cmj9CfH+J6r%LUChcsZ;-^KhIIPek+,iO(1tNEhlqIg;nH#7Vh;2kaaK%*C;D#U%s"?^%pb<"<=bMo3VO8I7_'HjU7;e`bg;S)PU_Q,Vpa:uqH%9Ls=Up"7OXJD!`,[=n]FV+Y5!0Y$2Os@K1fa!EF4U]cn#,r?LW'@T%fe%d3m>46PWl(R9"c#M[br@7pXBC<IX!8L]/=pij3L(_IL@$WfT,=j2"[s]QN69KE%!u"sW#IH!CgKh!e4,X5X:9]1!(do+=VI!\%0NTP#"te;?Y^(Mu9pRN7A1;7FU-(#W21*hXRq6R\OBXB/<#m,jE!rU[N@H$K[nWl`TFNqQ$4U5QP7X!18/PSHM$`$t1nNtW,cr=<%c,DNbn'Xk,^It[g'giC"/DiD'J$uD`?,?qBIlg!up(GrmSaca]il2Qo4ini5^aoUHfae7g0`%2KJRQnm/M\DO+%]%:0o\!42i`-N%G'X>t`)kKW-HNnq6nqDEF#9J%pHBEM\LFnT@$j'-`!m?6;.0?g)9,T/,m<6satZZ=fY#GX/:4eFa)F-b02L0A;Uh41p\EJ^U_uk+%"`V@!DKs5SU@+S-*$^Ti<qt+p"UT+$9*:<\R)1R&WFCVmR#9][9T'Qb:*d0&WN^64`Zl*>LKGQC`K`q]_rPjRiBgmJ/CO]a4"MTu%b0;ApXmkRpK)LqfrI/TSk$QLt=AELCKbRNGP7`#:1rd7mAjYZP&#\i[eql.[Rl%UrGq#37Kj[bUg^VF-M#D\W(;4L8d,Ur'&R)ip%Xh?CgR7N^$YmX-\U!-t$ZLH7;(k(jb67\E[Sf5ToXXGL78Mj0pkFnP6qk>dV)s5uU7&]A<><S[4=7J*#"1I5?Y3Q<J6\sZZdP$NE%WmU\s0aZN]W>AT\'c0g1F^=$-?g=JQUo:eZL<4_q5GAlt2p7^P"C<fE2@eMk+"o8<R#Rf[p:BVT*do6b^pe/+1.UfE,tf]e<_Pgi%,r-E,S*e-nOe_:5WY1_dPWK:&BeH9&IX[T_CLZO2)R92k+[s5elAVE!-tBPoLH^%:Fu!&>%(*DJK5jVL&60S_7LQPjBS=B5[SpBP%M+D:,N&/W^8E<sUp,\8%\,QU9n)A46Mqf">G_0?]kBUlQfa8q.(!BAbNF^=u<r1+*4r6)>0ud.eGuh@>R@R<PAgu/";H-gf_o04T%M[r7>Y(5E7*=HX_J&-f3/RUqTZ)q[[fX'GcZPpZldaq#_D-09P,Xbr<'"/o^f1aRS0Fc&,K1RH588Zb5PKPU]A6[P_a*5INis"2"%SRUYF;McK.</oiMIk!=p082fOZ^*j$A4LZt&X9[p4=GWqTo)`HXGoWDZ"U;Hb-+j9U$Jjj[5TWujl:I^pka?2jG/[;o<k,cd)i-I%\V@R5]i]f<CHh.pQJ0k[#"/SJ>5Tm;duJJ=TL$G4)@T.VUS&6rnl15*2S&1E`u!_r$9'M+:3F%aSikDROp=";$9Og&BJE7)ih)t=%JRm-,4OFF+NbDjA+,`ZBArW)rd8DF(X$c46dD!iK$de$o-+C)tjs/nqGBW&K/9]OD],SEB/5OmaSf8lmeZigTaKD<[B/'/HQ2Mn6%I4Q\B*VH_LJnB-`$3kP`40,_8M_6%C@(OS+[/jYWlS,JQ2_7HnokpFh:^1A)kntbWq<<]#aqW"&7#+[`0HAOu6IHMm9L$1GoPA3J%oE7`38P*bRNK_QU;["k,Vt:R.c#[YYq"L\s"Y5l$mF]<TK[9$mTMJ@!0`;pjrl$Mm_u91nVuM'hp#kdnq#'elhnOPes68R5ci87h%k6LW]%A1E8q<aYYT"k*[a7K,I&&3Sir:TmYVn[ZXbEqCahnT'Sf5I;]WQDOVs501@e#-P?DQ_1O9E"MVImNhRirSQIIJ`s@It%@o%ro:WRDdL3XiT90>++F4]ohEmh"FF\2mk_]Wo_%OJ%jCd&O8kitkAS(_rh'4>qW[\%WuldAJ,\KK^\m`d+)aCDi=A_f?N%p6GAmNR%q9AeDhL9p"pZ9["]mYA$nREO+mB;Sc4MUdkp<2&`TAMh^q<Orn2rsL)./rM^+92;sT)Kg^qRd[~>%AI9_PrivateDataEnd