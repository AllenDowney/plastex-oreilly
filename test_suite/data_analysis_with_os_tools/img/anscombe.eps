%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: anscombe.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 265 194
%%HiResBoundingBox: 0 0 264.3330 193.6274
%%CropBox: 0 0 264.3330 193.6274
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 9602 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFA8A87DA8FD42FF7DFF7DFD37FF7D2E527DFFA87D7DA87D7D7D84%7D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D84FD077D847D7D%7D84FD087DA8FD0BFFA85252277DFFFD057D847D7D7D847D7D7DA87D7D7D%847D7D7D847D7D7DA87D7D7D847D7D7DA87D7D7DA87D7D7D847D7D7DA87D%7D7DA87D7DFFA87D527DFF7D7DFFA8FFA8FFA8FFA8FFA884A8FFA8FFA8FF%A8FFA8FFA884A8FFA8FFA8FFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8A87DFF%A8FF7D7EFD0CFF7D7D27A8FF52A8FFA8FFA8FFA8FFA8FFA87DA8FFA8FFA8%FFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8A87D%FFA8FF53FFFFA8FFA8FF7DFD0BFFA8FD0BFFA8FD0BFFA8FD0FFF7DFD0EFF%A8FFFF53FD0BFFA8FD21FFA8FD04FF7DFD06FFA8A8FD31FFA8A8FD11FF7D%FD32FF7DFF7D7DA859FF7DFD05FF52A8FD2BFFA87DFD0BFFA852A87DA8FF%7DFD04FF7D27FD2CFF7DFF7D522752FF7D7DFFFFFF7D277DFD2BFF7D7DFD%0CFF527DF8A8FF7DA8FFFFFF52277DFD2BFF52FFFF7DA87DFF7DA8FFFFFF%847D7DFD29FFA8A8A87DFD0CFFA8A87DA8FF53FD04FF7D52A8FD28FFA8A8%A87DFD06FFA8A8FD2FFFA8FFA8A8FD11FF7EFD2EFFA8FFA8FF7DFD06FF7D%A8FD2CFFA8FD05FF7DFD11FF7DFD2DFFA8FD04FF7DFF7D7D527DFFA8A8FD%29FFA8A8A8FD05FFA8A8FD0CFF53A852A8FF7DFD2AFFA8A8FD06FF7DFF7D%527D7DFF7D7DA8FD27FFA8FFA8FD05FFA87D7DFD0BFFA8527D527DFF5284%A8FD26FFA8A8FD07FFA859FFA88452A8FFA8A8FD25FFA8FFA8FD09FFA8A8%FD0CFF7E7D52FFFF7DFD28FFA8FD09FF7DFD06FF7DFD1BFFA8FD09FFA8A8%FD0BFFA87DFD11FF7DFD25FFA8FD0CFF7DFFFFFFA8FFFFA8A8FD19FFA8FF%A8FD06FFA8A8FD0DFFA884FD0CFFA8FFA8FFFF7DFD22FFA8FD0FFF7DFF7D%525259FF7DA8A8FD19FFA8FFFFFFA8A8A8FFA8FD0DFFA8A87DFD0BFFA852%52527DFF53FD21FFA8A9A8FD0EFF7DFFA852527DFF7E7DFD1EFFA87DFD11%FF7D7EFD0CFF527D527EFF7DA8FD1FFFA8FD11FF52FFFFA8A8A8FF7DA8FD%1CFFFD04A8A9FD11FF7DFD0CFFA8A87EFFFF7DFD16FFA8A8FFA8A8A8FFA8%FD14FF7DFD06FFA8A8FD13FFA8FD1DFFA8A8FD11FF7DFD14FFFD05A8FFA8%A8A8FFA8FD13FF7DFFFFFFAFA8FF7DFD13FFA8FFA8FFFFFFA8A8A8FD16FF%AF7DFD0EFFA8A8FF7DFD11FFA8FFA8A8A8FFA8FFFD07A8FD12FF7DFFFFFF%277DFFA8A8FD13FFA8FFA8FF7DA8A8FD17FFA8A8FD0DFFA827A8FF7DA8FD%11FFA8FFA8FFFFFFA8FD05FFA8FFA8FD11FF7DFFFFA82752FF7D7EA8FD0B%FFA8FD07FFA8A8A8FFA8FFFFFFA8A8A8FD11FFA87D7DFD0DFF7D277DFF52%A8A8FD0DFFAFFFA8FFFFFFA8FD09FFA8A8A8FD0FFFA87DFFFFFF7DA8FFA8%A8FD0BFFA8FFA8FFFFFFA8FFA8FD09FFA8FD13FFAFA8FD0EFF7DFFFF7EFD%0EFFA8FFA8FFA8FFAFFD1DFF7DFD06FF7DA8FD0CFFA8A8FFFFA8A87EFD09%FFA8FD14FFA97DFD11FF7DFD0FFFFD05A8FD1EFF7DFFFFFF7DA9FFA8A8FD%0FFFA8AFA8FD1FFFA8A8FD0EFF7DFFFF84FD10FFA8FD21FF7DFFFFA8277D%FF7DA8A8FD09FFA8FFA8FFA8FD21FFA8A87DFD0DFF7D277DFF52A8FD0CFF%7DA8A8FD22FF7DFFFFFF277DFF847DFD09FFA8A8A8FD25FF7DA8FD0DFFA8%27A8FF7DA8FD0BFFA8A8A8FD23FF7DFD04FFA8FF7DFD0AFFA87DFFFFFFA8%FD23FF7DFD0EFFA8FFFF7DFD09FFA8A8A8FFA8FD24FF7DFD06FFA8A8FD07%FFA8FD07FFA8FD21FFA8A8FD11FF7DFD08FFA8FFA8FD27FF7DFD04FFA8FF%7DFD05FFFD05A8FD05FFA8FFA8FD21FF7DFD0EFFA8A8FF7DFD05FFA8FFA8%FFFFFFA8FD26FF7DFFFFFF277DFF7D7DFFFFFFA9AFFFFFA8FD29FF7D7DFD%0EFF27A8FF7DA8FFFFFFA8A8A9FD2BFF52FFFFA85252FF7DA8A8FFA8FD05%FFA8FD27FFA8A87DFD0DFF7D277DFF52A8FFA8A8FD2DFFA87DFD06FFA884%FD31FFA8A8FD11FF7DA8FD07FFA8FD29FF7DFD06FF7DA8FD32FF7DFD11FF%52FD07FFA8FFA8FD28FF7DFFFFFF527DFFA8A8FD31FFA8A8FD0DFFA852A8%FF7DFD08FFA8FD29FF7DFFFFA8527DFF7D7DA8FD2FFFA87D7DFD0DFFA852%7DFF52A8A8FD2FFFA87DFFFFFF52A8FFA8A8FD31FFA8A8FD0DFFA828FFFF%7DA8FD31FF7DFD06FF7DFD33FF7DFD11FF7DFD32FF7DFD06FF7EA8FD31FF%A884FD11FF7DFD32FF7DFFFFFF597DFF7DA8FD0AFF7EFD0BFF7EFD0AFFA8%A8FD0AFFA8FD04FF7DFD0DFFA852A8FF52FD0BFF7DFD0AFFA8A8FD0AFFA8%FD0AFFA8A8FFFFFF7DFFFFA8527DFF84527E7D7E7DA87D7E7DA87D7D7DA8%7D7E7DA87D7E7DA87D7D7DA87D7E7DA87D7E7DA87D7D7DA87D7E7DA87D7E%7D847D7D7D7E53A8FD0DFF7D527DFFFD047DA87D7E7DA87D7E7D7D7D7E7D%A87D7E7DA87D847D7D7D7E7DA87D7E7DA87D7D7D847D7E7DA87D7E7DA87D%7D7DA87D7D52FFFFA8527DFFFFFFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FF%A8FFA8FFA8FD05FFA8FFA8FFA8FD05FFA8FFA8FFA8FFA8FD05FFA8FD0FFF%8452A8FFFFFFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FD07FFA8FF%A8FFA8FD05FFA8FFA8FFA8FFA8FD05FFA8FD07FFA87DFD0AFF7D7DFD09FF%7DA852FD08FFA87EA87DFD08FFFD047DFD14FF7D7DFD0AFF7DA8FD08FFA9%84A853FD08FFA87D847DFD08FF7D7D7DA8FD08FF5252A8FD09FF277DFD09%FF522E7D7DFD07FF7D525252A8FD07FF7D52527DA8FD12FFAF5253A8FD08%FFA827A8FD08FF7D597D52A8FD07FF5252527DFD08FF5227527DFD08FFA8%52FD0AFF7D52FD09FF7D7D52A8FD08FF7DA852FD08FF52527D59FD14FF7D%52FD09FFA8527DFD09FF7DA852FD09FF7D7D52FD08FF525959A8FD14FFA8%FD17FFA8FD09FFA8FFA8FD21FFA8FD17FFA8FD09FFA8FFA8FDFCFFFD8BFF%A8FD7CFF7D7D52A8FD42FF52A82EA8FD36FF7E275259FF7D5253FD097D52%FD0B7D52FD0B7D53FD0B7D597D52527DFD0CFF5352277DFF525253FD097D%52FD157D59FD0B7D537D7D7D5252FFA8A87DA8FF7DA8FFA8FFFFFFA8FFFF%FFA8A8A8FFA8FFFFFFA8FFFFFFA8A8FFFFA8FFFFFFA8FFFFFF7DFFFFFFA8%FFFFFFA8FFFFFF7DFFFFFFA8A8FD0CFFA8A853FFFF7DA8FFFFFFA8FFFFFF%A8FFA8A8FD04FFA8FFFFFFA8FF7DFD05FFA8FFFFFFA8FF7DFFA8FFFFFFA8%FD05FF7DFFA8FF7DFD06FF7DFD0BFFA8FD0BFFA8FD1BFF7DFD11FF7DFD0B%FFAFFD26FF7DFD06FFA8A8FD31FFA884FD11FF7DFD32FF7DFF7D7DA852FF%7DA8FFFFFFA852A8FD2BFFA87DFD0BFFA852A87DA8FF59FD04FF7D52A8FD%2BFF7DFF7D522753FF7E7DFFFFFF52A884FD2BFF7D7DFD0CFF527DF8A8FF%7D7EFFFFFF527D7DFD2BFF52FFFF7DA87DFF7DAFFFFFFFA852A8FD29FFA8%A8FF7DFD0CFFA8A87DA8FF7DFD04FF7D52A8FD28FFA8A8FF7DFD06FFA8A8%FD1DFFA8FD0FFFA8FFA8FFA8A8FD11FF7DFD2EFFA8FFA8FF7DFFFFA8A8A8%FF7DFD1DFFA8FFA8FD0BFFA8FFA8A8FFFFFFA97DFD0CFFA8A87EA8FF7DFD%2BFFA8A8A8FD04FF7DFF597D527DFFA8A8FD1DFFA8FD0BFFA8A8FD06FFA8%A8FD0CFF52A852A8FF7DA8FD29FFA8A8A8FD05FF7DFFA852527DFF7D7EA8%FD26FFA8A8FD07FFA87D7DFD0CFF7D7D52A8FF52A8A8FD25FFA8A8A8FFA8%FD05FFA87DFFFFA87DFFFFA8A8FD25FFA8FFA8FD09FFA884FD0CFFA8A87D%FFFF7DFD26FFA8FFA8FD09FF7DFD06FF7DA8FD24FFA8A8FD0BFFA97DFD11%FF7DFD25FFA8FD0CFF7DFFFFFFA8FFFFA8A8FD22FFA8FD0EFFA8A8FD0CFF%A8FFA8FFFF84FD22FFA8FD0FFF7DFF7D52527DFF7DA8A8FD1EFFA8A8FD0F%FFA8A87DFD0BFFA85259527DFF52A8FD1EFFA8A8A8FD10FF7DFF7E52527D%FF847DFD1DFFA8FFA8FD11FF7DA8FD0CFF527D5284FF7D84FD1FFFA8FD11%FF53FFFFA8A8A8FF7DFD1DFFA8A8A8FD13FF7DFD0CFFA8A87DA8FF7DFD11%FFA8FD0BFF7EFD14FF7DFD06FFA8A8FD19FFA8FD05FFA8FD11FFA8A8FD11%FF7DFD12FFA8FD07FFA8A8FD16FF7DFFFFA87D7DFF7DFD19FFA8FFA8FFFF%FFA8A8A8FD11FF7DFD0DFFA87DA8FF7DFD11FF7DA8A8FD05FFA8FD18FF7D%FFFFFF277DFF7D7DFD17FFA8A9A8FFA8FD15FF7D7EFD0DFF7D277DFF7DA8%FD10FFA87DFD05FFA8FD19FF52FFFFA85253FF7DA8A8FD13FFFD07A8FD15%FFA8A87DFD0DFF7D527DFF52A8FD10FF7EA8A8FFA8A9FD1AFFA87DFFFFFF%A8FFFFA8A8FD12FFFD04A8FFA8FD19FFA8A8FD0EFFA8FFFF84FD11FFA87D%A9FD1EFF7DFD06FF7DA8FD0EFFAFFFA8A87DFFA8FFA8FD1BFF7DFD11FF7D%FD11FF7D7D7DFD1EFF7DFFFFFF7DA8FFA8AFFD0DFFFD05A8FD1FFFA8A8FD%0EFF7DFFFF7DFD10FFA8A87DFD1FFF7DFFFFA8277DFF7D7DA8FD09FFA8A8%84A8A8FFA8FD1FFFA87D7DFD0DFF7D277DFF52A8A8FD0BFFA8FFFFFF84A8%FD1EFFA87DFFFFFF277DFFA8A8FD07FFA8FFFD05A8FD23FFA8A8FD0DFFA8%27A8FF7DA8FD0BFFA8FD04FFA8A8A8FD1EFF7DFD04FFA8FF7DFD07FFA8AF%A8A87DFD27FF7DFD0EFFA8FFFF7DFD09FFA8A8A8FD05FF7D84A8FD1EFF7D%FD06FF84A8FD07FF7EA9FD28FFA884FD11FF7DFD08FFA8FD09FFA8FD1FFF%7DFFFFFF7D52FF7DA8FD04FFA8A8A8FD2BFF7DFD0EFF7DA8FF7DFD05FFA8%A8A8FD2AFF7DFFFFFF2753FF7E7DFD31FF7D7EFD0DFFA8F8A8FF7DA8FD31%FF52FFFFFF7D7DFF7DA8FFAFA8FD2EFFA87DFD0DFFA87DA8FF7DFFFFA8A8%FD2EFF7DFD06FFA87EFD31FFA8A8FD11FF7DA8FD31FF7DFD06FF7DA8FD31%FFA87DFD11FF59FD32FF7DFFFFFF5284FFA8A8FD31FFA8A8FD0DFFA852A8%FF7DFD32FF7DFFFFA8597DFF7D7DA8FD2FFFA87D7DFD0DFFA8527DFF52A8%A8FD2FFFA87DFFFFFF52A8FF84A8FD31FFA884FD0DFFA828A9FF7DFD32FF%7DFD06FF7DA8FD31FFA97DFD11FF7DFD32FF7DFFFFFFA8FFFFA8A8FD31FF%A8A8FD0EFFA8FFFF7DFD32FF7DFFFFA8527DFF7DA8A8FFA8FFA8FFA8FFA8%FF7DA8A8FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8%FFA8FFA8FFA8A8A8FFA8A87DFD0DFF7D527DFF52A8A8FFA8FFA8FFA8FFA8%A87DFFA8FFA8FFA8FFA8FFA87DA8FFA8FFA8FFA8FFA8FFA87DA8FFA8FFA8%FFA8FFA8FFA87DA8FFA87DFFFFFF527DFFA852FD317D52A8FD0DFF7D527E%FF7D52FD087D7EFD0B7D7EFD1C7D52FFFFFF7EA8FD2DFFA8FD15FFA87DA8%FFFFFFA8FD07FFA8FFFFFFA8FD17FFA8FD0BFFA8FD07FFA87DFD0AFFA87D%FD09FF7DA859FD08FFA9A8A87DFD08FF7D7D847DFD14FF7D7DFD0AFF7DA8%FD09FFA8A87DFD08FFA8A8A87DFD08FF7D7D7DA8FD08FF5252A8FD09FF28%7DFD09FF52527D7DFD07FF7D525252FD08FF7D52527DA8FD13FF5259A8FD%08FFA827A8FD08FF7D7D7D52A8FD07FF5252527DFD08FF5227527DFD08FF%7E52FD0AFF7D52FD09FF7D7D52A8FD08FF7D7E52FD08FF52527D52FD14FF%7D52FD09FFA8527DFD09FF7DA852FD08FFA97D7D52FD08FF525259A8FD14%FFA8FD17FFA8FD09FFA8FFA8FD15FFA8FD0BFFA8FD0BFFA8FD0BFFA8FD09%FFA8FFA8FFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:59:57+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T13:59:57+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T13:59:57+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>188</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7L+Y2ifmDdaobny3d3TW&#xA;cmnmGazjmjijWUahZuxiVZbKUyyWi3C8jOtOivGWriqam683WHl/yjpwkgh1y/aGy1O4vEe9VJIt&#xA;PmuJW/dzW5dmktuPLn3rviqZCz89U31fS69/9xlx/wBl+Ku+p+ef+rvpn/cMuP8AsvxVDzR/mAl3&#xA;bQpqGmvFNz9WYabcUj4rVa/6d+0dsVRH1Pzz/wBXfTP+4Zcf9l+Ku+p+ef8Aq76Z/wBwy4/7L8VU&#xA;Hj8/rfw241HTWhkilke4/RtxRGjaMKh/0/q4kY9f2cVV/qfnn/q76Z/3DLj/ALL8Vd9T88/9XfTP&#xA;+4Zcf9l+KqCR+f2v5rc6jpqwxxRSJcfo24o7SNIGQf6f1QRqev7WKq/1Pzz/ANXfTP8AuGXH/Zfi&#xA;rvqfnn/q76Z/3DLj/svxVDwx/mA93cwvqGmpFDw9KY6bcUk5LVqf6d+ydsVX2N55ntvMlvpmq3dl&#xA;eW93Z3VzG1raS2ro1tLboAxkuboMGFyew6YqyLFXYqx78wdO1/UfJmr2nl+6ntNaktpPqElq8cUh&#xA;mCkogkkBCBjsWBUjsw64qkfk/TfP1v598xXWuNK+iXDSHTXablDw9UegsUPryhSsVQ59GL4uvqV5&#xA;BVE+VdQ8/a7okGrPf6ZaC5MnC1OnXDsgSVowC/15OVQtfsjFU3+p+ef+rvpn/cMuP+y/FXfU/PP/&#xA;AFd9M/7hlx/2X4qoafH5/uLC2uJ9R023mmiSSW3bTbgmNmUFkNb8bqTTpiqv9T88/wDV30z/ALhl&#xA;x/2X4qoahH5/t7C5uINR024mhieSK3XTbgGRlUlUFL87sRTpiqv9T88/9XfTP+4Zcf8AZfirvqfn&#xA;n/q76Z/3DLj/ALL8VQ9/H+YFvaSTQahptxKtOMK6bcAtVgD0vj0BriqI+p+ef+rvpn/cMuP+y/FX&#xA;fU/PP/V30z/uGXH/AGX4qoXsfn+CFXh1HTZ3MsMZRdNuKhZJVR3/AN7zsisWPyxVC+Yp/PulaDqO&#xA;qJqmlSnT7Wa69FtNuBz9GNpOPIX/AMNeNK0OKoPzrqn5j2OuOPLlodSs5dIuWtrVIY1Ed+tzbIkk&#xA;txNLGj0illdYgU5cT16qqtg1DzDPoH5fXup2kja9LNE+oW0wS3kNw2kXfrFlHwxnlU8aCnSgO2Ks&#xA;xv7+Wz0i5vzbSTS21u85s4AZZXaNC/pRqgJdiRxUAbnFWNflhqnna80KaDzrZSWmv2dwySsyRrHL&#xA;FIoljaNoGkhYJzMXwuT8NWoTirMMVdirsVdirsVdirsVdirsVWTzwQRNNPIsUSbvI5CqO25O2KsY&#xA;S+urrz9p3qWjQWy6XqJtrgupEqtc2O/DZ02ANGHfFWVYq7FWPfmDP5mt/Jmr3Pll+GuQW0ktkBAb&#xA;p2dFLBI4qirtSi1DCv7LdMVS/wAvaz53uvzA1+y1bS5rHy5b28H6EnIgaKVlllSWUyxu7l5aKwQ0&#xA;4IByVSauqqfljNdv5TtEltvShT1fSm5q3Os8lfhG6098JVJde13z9a/mxp1lZRXU3lZ47UXEMdsz&#xA;QMZvrMc7m4FrIqmEiCQ8rqOiigVy/wAIV6PirsVdirsVdirsVdirsVdirsVYn+Yupsvk/wAw21nC&#xA;LyZdOuxdIkiqYVaBvieu1aGvHqR0xVR83fmDc6Bq7aamlCYfo99Qjvri6itrc+nd21s6EgTSjgLv&#xA;m37vkaBY1djQKrtR1mSe28k6te2VxYy3V2s8+nmOSaeB5tJu2MTJGhcshbi3w/OmKsujkWSNZFBC&#xA;uAwDKVahFd1YAg+xxVdirsVdirsVdirsVdirsVWzTRQxNLM6xxIKvI5CqB4knYYqh/rdxJLELa39&#xA;S2cK5umcKnBv5AObs3sQo98VdBYKh5zyNdS8g4eWhCsoIBjQAKn2juBXxJxVJHvoLjz/AKdFGsqt&#xA;Bpupq5khliUn6zYj4HkVVcbdUJGKslxV2KpH528yyeWPKupa9HYSal+joHuGtY3jiJVBVmLyEAKo&#xA;3NAW8FJ2xVB6F5yvdU826tobaYIrbTOQ+vx3AnHMMoWOZVQRxSSI3qIglduG7hCQMVU/yxvYZvKd&#xA;nAiyh4fV5l4ZY0NZ5Psu6qj/AOxJwlWWYFdirsVdirsVdirsVdirsVQ8t9CrSxQj6zcwgM9tEyeo&#xA;A1KV5sirUGo5EV7Yqs+r3dyIXuXNvwPKS2geqsQfh5ScUcgbGgp4HkMVST8wZ7Sx8i67EInVZdOv&#xA;VRYIZJFDNA5Jb0lYICTUs1BiqXed/MfkmHVF0XXdDbWL2a1VoIZLOGWOZZr61tkt45boxwsz3M0L&#xA;FeXFeIZytFxVVbU9DuLDyHqOmLHaaLcXKS2MfFIUjgk0i7MScB8KcVIHEdOmKsxVldQykMrCqsNw&#xA;Qe4xVvFXYq7FXYq7FUBqH6T9QfVeXHj8HD06c9/731N+H2fsb9fbFURe31rZQme6f04h1ahPQFjs&#xA;oJ2AJxVTjvpLhoHtIfVtJkWX62XVUKNuOAHJ2bod1Ap+1irdvYBatdSNdzMyvykA4Ky1p6cY+FKV&#xA;2P2vEnFUVirsVY9Pc28vnzS0ilSR4tM1MSKrAlT9YsBRgOnTFWQ4q7FUk87a3ouieVtS1LW7WS+0&#xA;qCFjeWkUBujJGRRlaKhXjT7ReigfaIGKpP5Z1TyRP5w1S30nRI7HV3+smbVltreL699VuFhvOMsZ&#xA;Mz+lcMqv6qrVtxXriqK/LS4t5PJ9jHHKjyR+t6iKwLLWeTqB0wlWU4FdirsVdirsVdirsVQ8t9Cr&#xA;yRRf6RdRKGa1iZPUoaUryZQK125EYqpm3u7oRNcSNbKBWS2gb7RrUcpaK9Omy8e9SRiqKjiijBEa&#xA;KgZi5CgAFmNWO3ck1OKrsVY9+YVxBD5H8wCWRIzJpt4qBmC8j9XfYV6nFV3mvRPKFzA2qeYzHbw2&#xA;sPom/luXtBDG1xDOCJkki9NhPbQsrghgyihxVB6hY6MqeSrPT44ZNHjvAliiESw/V00m7EPA/EGX&#xA;gBxOKsqVVRQqgKqiiqNgAOwxVvFXYq7FUNqF01tCrrxXk3Eyv9hBQnk2422p1G56jFVJNYsltTNc&#xA;zRxFEeRxyH93HWsijqUKryB8MVattWW9kT6jEZragMl05MaAMAwCgjmzFWDD4eNP2sVafRorhF+v&#xA;SvdSpIs8choojkQEAxKv2acmod23+0aDFUdFFHFEkUY4xxqFRfAKKAYquxV2KuxVj09tbxefNLeK&#xA;JI3l0zUzIyqAWP1iwNWI69cVZDirsVQmraVYavpl1peoxevYXsTwXUPJl5xyDiy8kKsKg9jiqTaJ&#xA;YeRYfM+qzaRPbyeYGr+lLeK6M0kPqMHatuZHW39RwGfii823apxVS/LS3t4/J9jJHEiSSet6jqoD&#xA;NSeTqR1wlWU4FdirsVUp7q2twDPIsYbYcjSvj93U+AxVK31S9uLh7e2UfCZC/oshmVY34DaQcAZC&#xA;Qw5fs1pU4VQ08+rr6wjLS6lGOcMCyR1EZPFFliDqvJv5qcR/MAMVUzf6zGEOocrcITILdpolklVa&#xA;EKJI0o7VB+BOPYEkHFCfWbaeBJFZmKiMTLHDx2ZialgvQk1wJRGKuxV2Kse/MK3gm8j+YDLGkhj0&#xA;28ZCyhuJ+rvuK9Diqr518tP5l8vS6VHdmylaa1uIroCQ8XtLmO5X+5kt5RUxUrHKjDqGBxVJpfLU&#xA;Gl6X5D8utPJNFptxHZ/WI2e2d/q+kXaB6xMrLy4VoG+/FWZxxrHGsaklUAUFmLNQCm7MSSfc4qux&#xA;VZO8iQSPEnqSqrFI605MBsK++KoWxvJ3WZ7mghiAImaJ7cdywKSkmigA8um/scVQ9prjXl6ILeDn&#xA;buJGjvOYMZWJuDEbfEeRWnGop1IIpiqw+XI55HfUJvrqSyLPJC6KIxKicF9MfsqB828WpsVUzt7a&#xA;G3VljB+I8mLMzsTQCpZiSdgBiqE02G/jc/WOX2AJSz8w8vd4xU8F67UHyFN1UwxV2KuxV2Ksaexg&#xA;t/P+nSxtKzT6bqbOJJpZVB+s2J+BJGZUG/RABirJcVdirsVYX5Y/LltD85at5iOpG5j1D6x6FkY3&#xA;X0frc63EvxNLJH9pf91xx16vzbfFUR+WNlDD5Ts50aUvN6vMPNLIgpPJ9lHZkT/YgYSrLMCuxVbK&#xA;zrG7IvNwCVStORA2FT0riqSLdyXEsnqu5ureNSiW8XpSsJnoU9OfltyRfj2A8RQ4VR8dpcvFbrzN&#xA;nBEoBtYiGb4T8KtKa7ceoUA1/apgVFw28EAYQxpEHYu4RQoLN1Y07nxxVfiqFtNOitmVld3EaenC&#xA;r8aIhp8I4qpP2F3ap2xVFYq7FXYqxv8AMayhufJGvNI0qmHTrx09KWWIEi3f7QjZeY9mqMVb/MLy&#xA;9qPmLyndaTp8scVzPJbP++KrG8cNzHNJE5eK6TjIkZQ8oXXf4kZajFUsn0jUrDS/IektdIl/ZXEd&#xA;tLdRpzQvDpF2jlVemzcTSuKs0iV1jRXbm4ADPSnIgbmg6VxVczBQWYgKBUk9AMVSa41K/fVYIrKK&#xA;Sa0dYX9dVH1cq7EyEyUNSI6MvEgV8emFVeWG3iiU6rMLti4lUNGPTQoPtIihiqrWvJyaeOBUekEK&#xA;SPIkarJJT1HAALU6ciOtMVX4q7FXYq7FXYq7FXYqxl4LyPz/AKe89z68cmm6mYY+Cp6Y+s2O1R9r&#xA;t1xVk2KuxV2KsC8n+RNe0bz75i1+9uoLiy1ZpGgKkG4IaUPEklIYiFhQGNeUsu32eAqCqmH5Yw3a&#xA;eU7R5bn1YX9X0oeCrwpPJX4hu1ffCVZbgVDXupWtnHI0jcnjUOYUoXox4qaVFAW25NRR3IxVLHsb&#xA;vUru01GOeOGAcGZI+Erj0pS3ESUYUkU8ZAtP9ZhhVN7e1trZWSCJYlZi7hQByY9WbxY9ycCquKux&#xA;V2KuxV2KuxV2Ksb/ADHhu5PJGumC49AJp14ZRwD81+rv8O/2fniqL843vmGz8t3s3l2xOoazw42c&#xA;AMQozED1CJnhVhGDy48hypTvirHIL7zHcaB+X15qNtTX5ZYn1CC8ItT9YOkXfrFxGknpnlU8eG3Q&#xA;heyrMIb+SZoUjhL+oivJcIeUC8lqOEh4erXtxHzpiqhd6Vc3Nk8V1Kt3I7o/puoihHFqlUCh3Wq9&#xA;2ZiDuMVRenw3ENsEuG5ScmIozSUBNQOb0Zqe+Kt3Vmlwyt6jxOgKh4yAeLEFl3DdSo3G+2xxVWjj&#xA;SNFjRQqIAqqOgA2AGKt4q7FXYq7FXYq7FXYqxp31BvP+nC5hijhXTdT+rvHK0jOv1mx3dWjjCGlN&#xA;gzYqyXFXYq7FWHeXtZ873X5ga/Zatpc1j5ct7eD9CTkQNFKyyypLKZY3dy8tFYIacEA5KpNXVW/l&#xA;zf3MXlK2W4hj4osjQJBI007hrh1q0XppxHLavIjxIwlWUcL+4MUhlNnGPikgCo0pIOys5LpQj7QU&#xA;Vr0bAqn6GllpbSHjFLI4mkMYAYyqQ/IkghnBAJrXtXY4qibW1S3RlDM7OxZ3alSTQdFCqNgBsMVV&#xA;sVdirsVdirsVdirsVdirG/zGe+XyRr31WGKVTp14JjLK0ZVPq77qFjk5H2NPniqp5+8xP5c8qXms&#xA;JcW1obYwg3F6ryQqskyRseEbRs7Uf4F5oC1OTKtWCqS32oyalo/kXUdUtIrqe8uY7i6tbPhdQmWT&#xA;Sbt29IhnSRFc1VgxFNwT1xVnET+pGj8SnMBuLCjCorQjxxVdirsVdirsVdirsVdirsVdirsVdirG&#xA;XvfX8/6fF6E0Xoabqa85U4q/+k2IqhruNsVZNirsVdirBfKnnu+1nz7r+gG406ez0nmpS2LC5ikS&#xA;RVVJPUk5S/C1ZGWFURvgDOakKor8rJIP8K28cdq8DgytLMyBVlYzOKhv2qAYSoZhgVCpp8SXAlDM&#xA;VVmkSI8eKu/Lkw25b822LU36YqisVdirsVdirsVdirsVdirsVY3+Y939X8ka6voyzerp14lYl5Ba&#xA;277vvsMVTLzDrttoemG/nhluKzQW0NtBw9WWe6mS3hjT1XiSrSSqKswA6k0xVjms+bNCms/JPmOS&#xA;6jtNHvr0XMd1dOkKJHcaTeNH6jOeKk8gtK9dsVTgefvIpFR5j0sg9D9dt/8AmvFXf498jf8AUxaZ&#xA;/wBJtv8A814qh5vzG8lR3dtAuuac6T8+cwvIOMfBajl8X7XQYqiP8e+Rv+pi0z/pNt/+a8Vd/j3y&#xA;N/1MWmf9Jtv/AM14qoP+Y3klb+G2Gu6a0csUsrTi8g4qY2jUIfi6v6hI3/ZOKq/+PfI3/UxaZ/0m&#xA;2/8AzXirv8e+Rv8AqYtM/wCk23/5rxVQT8xvJLX81sdd01Y4oopVnN5BxYyNIpQfF1T0wTv+0MVV&#xA;/wDHvkb/AKmLTP8ApNt/+a8Vd/j3yN/1MWmf9Jtv/wA14qh4fzG8lSXdzA2uaciQcOExvIOMnNan&#xA;j8X7PQ4qh7XzDoGseetOGkanaaibfTNRFwLSeOf0y9xY8efps3HlxNK+BxVluKuxV2Ksd0bzxpWr&#xA;a/d6LBDcRzW3r+lcyrGIbj6nMtvdeiVdn/cTOEfmi7nao3xVj/5deefJ8PlGxt7vW9PtLuIzrPaz&#xA;XcCSxn15NnRmDD6RhKsl/wAe+Rv+pi0z/pNt/wDmvArv8e+Rv+pi0z/pNt/+a8VUNP8AzG8k3Vhb&#xA;XMmu6bbyTxJK8D3kHKMuoYo1WG61odsVV/8AHvkb/qYtM/6Tbf8A5rxVQ1D8xvJNrYXNzHrum3Ek&#xA;ETypAl5BykKKWCLRju1KDbFVf/Hvkb/qYtM/6Tbf/mvFXf498jf9TFpn/Sbb/wDNeKoe/wDzG8lW&#xA;tpJPHrmnXDpSkKXkHI1YDajHpWuKoj/Hvkb/AKmLTP8ApNt/+a8Vd/j3yN/1MWmf9Jtv/wA14qoX&#xA;v5jeSbeFZE13TZy0sMRRLyCoEsqxs+zHZA3I+wxVKvPHnryTL5M16CPzDprzTaddxwxLeQFndoHC&#xA;qqh6kk9AMVZbrGj6frGnvYX6NJbSNG5CSSQurwyLLG6SRMkiMkiKysrAgjFWIfmJ5kuPIXlLThoN&#xA;vbRQQFrS3juFd4UjtbGeeC3ULJG3Od7ZLeM1PxONmNFKrO1JKgkFSRuDSo+7FXYqwf8AMvzzqHlW&#xA;XRBbeitvf3Dx3cssaTOEQLRIYmurEvI5fZULtStEbFWcYq7FXm3nr8x/MGga7fadGun2VjFDYSxa&#xA;veerLDCt2bwPJdKr2/EGSzWFFV/tOrFt+AVZ3oN/cajoenahc27WlxeW0NxNaP8AaieWMO0Z90Jp&#xA;iqOxV5V5w/NTzFokupRmCztksNaXT/WKi5rZHTFvQypLc6b6lw7yKojRq9VUSMByVeqg1FfHFXYq&#xA;8NT88/Mchme3l0a7t455UhlgEp9eaEgDTokNwJfXnJPoTSIok4sRFShJV7lgV2KuxV2KpTp3lTQN&#xA;O1i81iztjHqF/X6xIZJXX42Dv6cbs0cXNwGf01Xk27VOKsd/LLzxqvmn9JfX47cfVfQYfVVdfq8k&#xA;3qepYXHOSWtxbemvqEcR8Q+EYqzjFVk8ohgkmILCNS5VepCitBWm+KsP/KjzlqPm3yudR1JoDfRz&#xA;CG4FpGq26uYYpSkbpdXyShTLTnzU12ZEYEYqzPFUg87a7qWh6RBfWEEM7Pf2FpcCdnASG8u4rZ3R&#xA;UHxuPV2BZR3qacWVSryN501TXtf8w6fdxQLDpUpSEQqwkiIvby1ENwTJIGkaKzjnBUL8Mo2pRmVZ&#xA;pirHvOmvatottpk+nwQTJdapYWN607OCkF5dR27PEiD43HqbcmUDrvTiVUo/K/zzqHmqLVTf+itx&#xA;Y3Aj9K3jQJGjluCNLHdXgeQBfjVhGynqgqMVZxirz/8ANb8wdW8oyaSmlixuLq+MpTTLkstxdek0&#xA;XKO2YyQxq3pyNSpZmfgiRtyJVVNvy4803vmTRJ7y7ltbow3LW8OoWCslpcoI439SFXkmYBWkaJvj&#xA;PxIflirKsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirzv8AMbVfzG0/VCfL4ebTJNPLFLe0aR4pxqFnHJIZhFeln+qTTsiLA1OJbhJSmKpu&#xA;fM+v2Hlfy1LNpcl/5g1dYLeayd47VluDZyXU5csOCcfQf4addsVV117zqVBPlahI3H1+A0P/AAOF&#xA;W/095z/6lf8A6f4P6YqoS+avNsVzBbP5YPq3PP0h9egofTHJqmnhiqv+nvOf/Ur/APT/AAf0xV36&#xA;e85/9Sv/ANP8H9MVUX80+bUvIrM+Vz600ckyD69BTjEyK29PGVcVVv095z/6lf8A6f4P6Yq79Pec&#xA;/wDqV/8Ap/g/piqinmnza95LZjyufWhjjmcfXoKcZWdV3p4xNiqt+nvOf/Ur/wDT/B/TFXfp7zn/&#xA;ANSv/wBP8H9MVUIvNXm2W5ntk8sH1bbh6o+vQUHqDktDTwxVE6P5l1u41waVq2iHS2lt5rm1m+sx&#xA;XCyLbyRRuCIwCp/0hSK4FZHirsVY9+YM/ma38mavc+WX4a5BbSS2QEBunZ0UsEjiqKu1KLUMK/st&#xA;0xVI/J+s+errz75is9at54tFgaQaYWh4W4RJQsJjlMEXNpYzzbjNLv19P7JVRGieefNGtWS6hYeV&#xA;mbT5WcW0z30Cs6o7RklKVXdemFUw/T3nP/qV/wDp/g/pirv095z/AOpX/wCn+D+mKqNl5p823tnB&#xA;eQeVyYbmNJoib6AHjIoZaingcVVv095z/wCpX/6f4P6Yqo3vmnzbZWc95P5XIhto3mlIvoCeMalm&#xA;oKeAxVW/T3nP/qV/+n+D+mKu/T3nP/qV/wDp/g/piqhe+avNtlbPcz+WCIo6ciL6AnchRtTxOKq/&#xA;6e85/wDUr/8AT/B/TFXfp7zn/wBSv/0/wf0xVRu/NPm20iWWbyuQjSRQil9AfimkWJO38zjFVDWP&#xA;OPnDS9NudRl8pl7azikuLgi/gqscSF2IHHfYYqt85fmdY+U9TlttTsnSzTTJtRivmlhRJpYp4Ldb&#xA;WNS1QzPdLV34qPcVKhVNvNFrq+k+Q/MnpMkWo3KXZggD3TRtPpN2xj/dIWYozcSQvbtirJfMGvW+&#xA;jeWtR16WKSWDTrOa+eEKVkZYYjKV4sAVJC0+Ibd8VUvLusajfm8t9TtbWz1CykRJYbO8F6nGSNZE&#xA;JYx28iEhvsvEPEVBriqcFQSCQKjofDFXYq7FXcRUNQcgKA96H/axV2KuxV3EVLUHIihPeg/28Vdi&#xA;rsVcFAJIAqep8cVYw+pW1z+YVhbxCUS22makJfUhliXe5sQODyKquPhO6k4qyfFXYqkfnbzLJ5Y8&#xA;q6lr0dhJqX6Oge4a1jeOIlUFWYvIQAqjc0BbwUnbFUv0D8xtF13ztrvlWwKvNoUUTXFwJFJeZndJ&#xA;41jG9ICiq7E/aalBsWVd+WN7BN5Ss4EWVXh9XmXhljQ1nk+w7qqP/sScJVS1fz9c6d5vGifo1JbC&#xA;M6alzfC4ImWTVpp4IBHbekwdVe3rIfVFFNaGhwKzHFXKoUBVACgUAHQDFXYq5lDAqwBUihB6EYq7&#xA;FXYq4qGFGAI8DirsVdirioIoQCKg7+I3GKsa/Mm/t7PyNrvrCT99p13GhjillHJoGA5GNW4ip6tQ&#xA;YqoeY/OWg6Tr31SfSrq+1eLT5LmOSC2U/wCitc28Esa3MxijC85Y3l+PgirykKgDFVF9U0e5sPIe&#xA;pWCLY6Rc3CTWULqsCxQSaRdmJOA+FOKkDiNh2xVl7LDPCVYLLBKtGU0ZGRh0PYgjFULpOiaNo1p9&#xA;T0iwttOtORf6vaQpBHzalW4RhVqadcVRuKuxV2KuxV2Kpfps1/I7C4DfYBkDJwCS/tIhp8a++/8A&#xA;rNXZVMMVdiqHkvoUuVtVV5Z2oWWNSQin9p2+yv0mp7A4qpGzubqJ01Bl9JyCIIC60UV+F5KqXB7/&#xA;AAqO2+KpQ8ll/jjSbe1aOlvpepIYYitI6XFgAvFfs9OmKskxV2KpJ521vRdE8ralqWt2sl9pUELG&#xA;8tIoDdGSMijK0VCvGn2i9FA+0QMVQuleadHvvOOo6RHps9tq1tB+8vp4ok9e3hlKDiwdp/TEkrGP&#xA;1EUNVmTkKnFVP8tLi3k8n2MccqPJH63qIrAstZ5OoHTCVTqby9oE2rRazNptrJq8C+nBqTwRtcom&#xA;/wAKTFeaj422B7nAqPxV2KuxV2KuxV2KuxV2KrJ54reJppm4xr1O56mgAA3JJ2AHXFUo0vVtS1RE&#xA;eFIreOiySs/J3UMSPS4ArRwFqSxqKiqdgqgPPUGnWXkzzHM7Ktzcaber60z1kasDngrOa8a9EXYd&#xA;hirfnPR/IGoBz5pmgh4Wciu8t49my2n1i3lkbkksJCCeKCr9jQV+KhVdq9tp7yeToIiLux+vkQvL&#xA;I116kY0u84MZZWkaSooebMSetcVZOqqihVAVVFFUbAAdhireKuxV2KuxV2KuxV2KqD30C3S2o5PO&#xA;27KilggPd2HwpWm3I79q4qora3lzE66gyojkEQWzSLxArUNNVGcHboq+G+KouKKKKNYokWONAFRF&#xA;AVQB0AA6YquxVj09tbxefNLeKJI3l0zUzIyqAWP1iwNWI69cVZDirsVS/wAw22i3WhX9trhjXRp4&#xA;JI9QM0nox+gykSc5AycBx78hiqVeX9I8lWXmXW5tGuVbXLiQTa5apfzTlZJQCry2rSukTFVAU8F+&#xA;HYbYqp/lpb28fk+xkjiRJJPW9R1UBmpPJ1I64SrKcCuxV2KuxV2KuxV2KqdxcQ28LTTOEjTqx9zQ&#xA;AeJJ2AxVDma/uBE1qqQwPu8k6v6tAaUENEpUb1Ztu64qqwWNtDNJOqkzSk85HZnahNeKlieKg9FG&#xA;2Kq+Kse/MK3gm8j+YDLGkhj028ZCyhuJ+rvuK9DiqXebfy5h1zXYNdtbmKw1O2gjiWU2/q+o8GoW&#xA;moQGYrJC0kaPZceHIbOSGU4qsn8tW2l6b5E8u+tLLBptylmtwkkkEji30i7QNyiZWXlx6BvbpirM&#xA;441jjWNSSqAKCzFmoBTdmJJPucVXYq7FXYq7FXYqh3v7VbpbUMXuDSscalygPQyECiA9uVK9q4qg&#xA;7prsxKt8CPWlCw29lIyvUKzUadmhJB48tgvh8WKo6yNubOA2yBLcxqYUA4gIQCop22xVWxV2KuxV&#xA;jT2MFv5/06WNpWafTdTZxJNLKoP1mxPwJIzKg36IAMVZLirsVSTzt5VtPNflXUtAuuCpfwPFHPJE&#xA;swhkIokyoxX4o2+Jdxv3xVLvL/kNtI803utNf+vDP9b+p2oiKPH+kLlbq49WX1H9b94gEXwLwX4d&#xA;8Vd+WNlDD5Ts50aUvN6vMPNLIgpPJ9lHZkT/AGIGEqyzArsVdiqC1HVrewMayqzvKGKonGvFKcm+&#xA;IqKDkK/0xVFwyxzRJNE3KORQ6MO6sKg4qtuLiC2haaeRYokpydjQCpoPvJoMVUPXvbgQvaoscDms&#xA;j3CyLIArUoISEPxCu7MKfynFV9vYW8ErzjlJcSVDTSMXahNeK1+yv+StBiqIxV2KuxVjf5jWUNz5&#xA;I15pGlUw6deOnpSyxAkW7/aEbLzHs1RirX5i+W77zJ5SutIsWiW4mltZQJyBE6W91FPJGxaK6Sjp&#xA;GV+OGRd/iRhtiqVLoepaVof5f6I92q6hp80VpLdopkUvBo90jsokoSG4mlcVZxErrGiu3NwAGelO&#xA;RA3NB0riq7FXYq7FUun8waXFdCzSYXF8SV+qwEPICASee/GPYHdyBiqVyahqt/HNA3G3kdmjhtIX&#xA;ZZ6ohPIzVT4RKOJ4gCqkc26EoRMWk3skfGQ0RAIrf1xH6kKKopJH6VVD8q0+S77UKlOJ7e3nThPE&#xA;kqVrxdQwr40OBV6qqKFUBVUUVRsAB2GKt4q7FXYqxl4LyPz/AKe89z68cmm6mYY+Cp6Y+s2O1R9r&#xA;t1xVk2KuxV2KvPfJ35e61ov5ha/5ju5rZ7LU/X9ARNWZvWnWVPVHoxn90q8Bzll/yPTX4cVTX8sY&#xA;btPKdo8tz6sL+r6UPBV4Unkr8Q3avvhKstwK7FXYqw78wpLeL6lLcGb0kWb/AHmWNpAxeIKzeqGU&#xA;R1NGPiVwhBTzS57yfTdOa1EQgaCJpJ2EgFOI2jiYI29NixFNjRsCUdBZQwyyTVeSaT7UkjFiBWvF&#xA;R9lV9lA998VV8VdirsVdirsVY3+Y8N3J5I10wXHoBNOvDKOAfmv1d/h3+z88Vb/MK+8wWPlO6ufL&#xA;8ckmprJbKvooZJFie5jS4kRFhu2LJCzsKQSU68H+yVUtmutdm0vyHc3VuDrUtxG95Bct9XpO2kXZ&#xA;mD8Ek4ENXYJ7bYqzOMyGNTIoWQgc1UllDU3AYhaj3oMVW3E6QRGRgTuqqo6lmIVVFaDdiBviqS3X&#xA;mhBeLY2yob11ULbuSZA7syDksfOirx5Fq0Knr0qVQ503XNUjP13lFApPpwPIEkqerNJAi04UHHhx&#xA;Na0kpQlQmlroFpAiIXeVYwwjDcV4l2DsylArBiy1rXbtgSmEcccSLHGoRF2VRsBiq7FXYq7FXYq7&#xA;FXYqxp31BvP+nC5hijhXTdT+rvHK0jOv1mx3dWjjCGlNgzYqyXFXYq7FWBeT9Z89XXn3zFZ61bzx&#xA;aLA0g0wtDwtwiShYTHKYIubSxnm3GaXfr6f2SqmP5YvfnynZrPDEkA9X0JElZ3b9/JXkhjQL9DHC&#xA;VZZgVZPcQW8TTXEiwwp9qSRgqippuTtiqHW6ubgwNaRgW7mss04eNgoNKLEwViTTq1AOvxdMVYl5&#xA;4sLGOW0aeQyXUizt610ZXT01aPnGqRcQnKq/ZAFASd98IQy7STAdLszArLAYI/SV/tBOA4hqd6YE&#xA;orFXYq7FXYq7FXYqxv8AMZ75fJGvfVYYpVOnXgmMsrRlU+rvuoWOTkfY0+eKovzjr1zoPlu91S0s&#xA;ZtRu4EpbWdvFLMzyMQq8lhWRwik8nYKaKDirHIPMlxqugfl95gubZzc6hNFdXFvbxuKSTaRds4jR&#xA;zy4hmNKk7b1OKszGo2plig5EXMqCQW1KyKpFauorwHarbV2xVRe2ur+3aO9H1aN2UrFC59Tiu/xy&#xA;ADi1af3e6kbOcVRVrawWsCQQLwiQUAJLH5lmJJJ7kmuKquKuxV2KuxV2KuxV2KuxV2KsZe99fz/p&#xA;8XoTRehpuprzlTir/wCk2IqhruNsVZNirsVdirDvL3nq91b8wNf8tyadNZ2Wk28ElpcT288TXDNL&#xA;LHNIruqxmLlGBFT7VGYEjZVW/wAuNTgXydbeuj20Vv6pe4nAjiNZ3+y5NMJQyX61dTmE2cY9B/ie&#xA;4m5LRa9FjIDEmneg779MCV8NkkcrytJJNJIa1kYkKAdgiCiLTpsKnvU4qiMVQt9pljfhBdR8/TJK&#xA;EMykE06FSp7DFUSiIiKiKFRQAqgUAA2AAGKt4q7FXYq7FXYq7FWN/mPd/V/JGur6Ms3q6deJWJeQ&#xA;Wtu+777DFU017WE0bSptRe2nvFhKA29qqGQ83CVrI0caKvLk7u6qqgsxAGKsb1nXNK1Ww8la0bhr&#xA;HTNRu1uklmZbd1in0q7dVdifgJDcTRq+B74qzC29D0EaBg8TKpSQNz5rxHFuZJLVFN64qqYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYqxp9R0+68/6dDbXMU81tpuprcRxurtG31mxFHCklTVT1xVkuKuxV2Ksf&#xA;0vzpY6h5nvvLq2d3b3dlG03rToiRyxpIIi6AO0oUufgMiKHFWTku+KpZ+V0mmy+WLdIrsXN0hk9e&#xA;D1g/pUncr+6B4p068anCVZngV2KuxV2KuxV2KuxV2KuxV2KuxVjf5jX9ja+SNeW6uIoGn068SESu&#xA;qF3Nu/wryIqfYYqr+d7fy1ceWbqHzKJH0eR4FmjgNyJXkadBAkYtP37O0xQKqbk7Yqgbm406b/A0&#xA;2nTtcafcXgexuHkkmaSFtIvHjdpJS0jlk35OeR774qyvFXYqoy3kEVzBbOSJbjn6Qod+Aq2/yxVW&#xA;xV2KqLXcC3kVoSfXmjklRabFImRXNfnKuKq2KuxVRW7ga8ltAT68MccrrTYJKzqhr84mxVWxV2Kq&#xA;MV5BLcz2yEmW34eqKHbmKrv8sVSi8/5TnSP+2Zqf/URYYqnuKuxV2KsP8rx+QofN2urocs412eR5&#xA;tYR5b5oJJAypI8azsbV2jYLGxh+xshp0xVE/lnKkvkjTZENVPr0PyuJBhKsnwK7FVGzu4Lyzgu4C&#xA;WguI0liYihKOoZTQ+xxVWxVRvLuCzs57uclYLeN5ZWAqQiKWY0HsMVVsVdiqjeXkFnbPczkrFHTk&#xA;QCepAGw9ziqtirsVUbq7gtYllmJVGkjiBAr8c0ixINvFnGKpR59/5QbzF/2zL3/qHfFUX5h0K21z&#xA;TDYTzS29JoLmG5g4erFPazJcQyJ6qSpVZIlNGUg9CKYqxPzrb+RPLPkrSNL1nT59Q0jTQsVhbxEe&#xA;si2NlNK8xb1Lf+7tYJWehq3QAkgYqnEf5ceSeC8NPBSg4kTzkU7b+phtW/8AlXHkz/q3f8lp/wDq&#xA;pjasc826d+Wflm60mG/0ppLjVZ2t7PjdJCAwALEvd3VuvcCiksegBxVkf/KuPJn/AFbv+S0//VTG&#xA;1d/yrjyZ/wBW7/ktP/1UxtWI6+Pyx0jWJ9KbQb291a3W39K3t/UVpvrgmkCQPPPAj8Y7OR3Ibj8N&#xA;KlgVCrJdL8k+QNU0y01KysfUs76GO5tpPWnHKKZA6N/ed1YY2qJ/5Vx5M/6t3/Jaf/qpjasJ1rUP&#xA;yl0me4SbR7hriDU10Rw8wtOU/wBVN5yD31zap6QQ0Vi3xMRw5BlJbWmbf8q48mf9W7/ktP8A9VMb&#xA;V3/KuPJn/Vu/5LT/APVTG1eeP5j/ACmhurqCXy3qUNxbcpbxHPF4rSIAyXcoN1ySONXUvG375eQ/&#xA;d74oem6J5J8r6HeyX2l2It7uZDHJNzkkbgzBmUeozUBZQTTwwJTvFXYq7FWO6N5H0rSdfu9agmuJ&#xA;Jrn1/StpWjMNv9cmW4uvRCor/v5kDvzdtxtQbYqxbybo/wCV/mN7x9M0Sa0KCK5Ald41mtrsyNBc&#xA;wrFPIoimMb8QQrbbqMKsm/5Vx5M/6t3/ACWn/wCqmNq0/wCXfklEZ3sAqKCzM084AA3JJMmNqx/y&#xA;LpP5b+bvL8WsaXpD29k5CRRSXSO4ARWAYWtzcLGQHAKOQ691GNrTIf8AlXHkz/q3f8lp/wDqpjap&#xA;V5l8sfl1odhFc6hpUssF1dW9gqwm4l/eXkqwJ6nx8UTk+7OQO27EAtqhfLum/lvr+palp9npU0cu&#xA;mMQzyyuEmQXNxaGSHhO7cRPZSp8YU7VpQgltU/8A+VceTP8Aq3f8lp/+qmNqlHmTy3+XWhxWJv8A&#xA;SZ5k1G9ttPhEP1mVVlupVijaVufCNAzirMfYVNBjaoTyZYflr5tt7u40zS3WGzna3Znu0csykivC&#xA;3up3j6bCUI1N6YqyL/lXHkz/AKt3/Jaf/qpjasX88235Y+T4La41nRbl7CZx6t5E0jQwUkjRWlaS&#xA;ZN+UgKqgZ6Bm48UYhtUVoHlP8ufNWnTyNoM9s9tM1reafeyuJYpDGknFxDPLGeUUqMKOdm8dsVeh&#xA;4FYv+Yn+CP0LD/jHl+jfWb0uH1mvP6vN6tfqv7z0/qvrerX4PT5c/hrirKMVdirE/P8A/gf0rL/F&#xA;fr+jyf0vR+u8OHw+r9Z+p7eh9nn6/wC76csVZZirsVYN54/5Vn9du/8AEnqfpH6vZet9W+vfWfR9&#xA;W6+q+j9T/ecuX1mvpfFx5cvgxVmGl/o/9G2n6N4fo70Y/qfpf3fo8B6fCn7PGlMVROKsA81/8qtr&#xA;q36a9ev10fpn6t+ka+v+jo+XrfVP90/UOHqV/dcft71xVn68eI40402p0pirsVeP2P8Ayob6hH6P&#xA;176j9el4ev8Apz0/rHM/Wq+tt6Pqf701/dcuPq78cVewYq7FXYq7FXYqxLyD/gL/AHJf4T5f3q/X&#xA;Of1rp8Xpej9a/wCPf7Xpej+668O+KstxVTuPR+ry+t/c8G9WvTjT4untirHPIH+D/wBGXP8Ahj1/&#xA;q/rj639c+u/WPV9CLhz+v/6RT6v6XCvw8OPHbFWT4qlXmf8AQP6KH6d/45/1qypX1P8Aen63F9U/&#xA;uvi/3p9P2/m+GuKpZ5S/wR+mte/w/wAv0l63+5jl9Zpz+sXFfS9f936f1r6zX0fg9T1P2uWKsoxV&#xA;KvMn6B+p2v6b/wB5vr1j9Wr6n+9n1qP6n/d7/wC9HDr8P821cVSjyL/gf1dT/wANev63KL699Z+u&#xA;8+Hx+h6f13f0Pt+n6X7vrx74qyzFWF+fv+Ve/pXRf8VfWPrlLn9G+j9f9P0+KfW/X+qfuvR4cfU9&#xA;f4OFa/DyxVMPIP8AhH9BH/C3q/UPWf1vrP1r6x61F5et9d/0nlw405/s8afDTFX/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:0AD1BF0052D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:0BD1BF0052D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -193.627 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 193.627 li
264.333 193.627 li
264.333 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
120.083 81.9736 mo
116.933 81.9736 li
13.9326 81.9736 mo
17.083 81.9736 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B854D00D> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWCW+Helvetica /Helvetica findfont ct_VMDictPut/DVPWCW+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]DVPWCW+Helvetica nfDVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 84.3101 mo( )sh5.83594 84.3101 mo(0)sh120.083 72.1738 mo
116.933 72.1738 li
13.9326 72.1738 mo
17.083 72.1738 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWCW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWCW+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/DVPWCW+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two 205{/.notdef}rp]DVPWCW+Helvetica nfDVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 74.5054 mo( )sh5.83594 74.5054 mo(2)sh120.083 62.3735 mo
116.933 62.3735 li
13.9326 62.3735 mo
17.083 62.3735 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWCW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWCW+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/DVPWCW+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four 203{/.notdef}rp]DVPWCW+Helvetica nfDVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 64.7007 mo( )sh5.83594 64.7007 mo(4)sh120.083 52.6235 mo
116.933 52.6235 li
13.9326 52.6235 mo
17.083 52.6235 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWCW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWCW+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/DVPWCW+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]DVPWCW+Helvetica nfDVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 54.9585 mo( )sh5.83594 54.9585 mo(6)sh120.083 42.8237 mo
116.933 42.8237 li
13.9326 42.8237 mo
17.083 42.8237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWCW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWCW+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/DVPWCW+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWCW+Helvetica nfDVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 45.1616 mo( )sh5.83594 45.1616 mo(8)sh120.083 33.0234 mo
116.933 33.0234 li
13.9326 33.0234 mo
17.083 33.0234 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWCW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWCW+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/DVPWCW+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWCW+Helvetica nfDVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 35.3569 mo( 10)[1.9458 3.89209 0 ]xsh120.083 23.2236 mo
116.933 23.2236 li
13.9326 23.2236 mo
17.083 23.2236 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 25.5601 mo( 12)[1.9458 3.89209 0 ]xsh120.083 13.4736 mo
116.933 13.4736 li
13.9326 13.4736 mo
17.083 13.4736 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 15.8022 mo( 14)[1.9458 3.89209 0 ]xsh120.083 3.67383 mo
116.933 3.67383 li
13.9326 3.67383 mo
17.083 3.67383 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 6.01318 mo( 16)[1.9458 3.89209 0 ]xsh13.9326 3.67383 mo
13.9326 6.82373 li
13.9326 81.9736 mo
13.9326 78.8237 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf11.0156 91.3101 mo( )sh12.9531 91.3101 mo(0)sh38.083 3.67383 mo
38.083 6.82373 li
38.083 81.9736 mo
38.083 78.8237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWCW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWCW+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/DVPWCW+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]DVPWCW+Helvetica nfDVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf35.1563 91.3101 mo( )sh37.1094 91.3101 mo(5)sh62.1826 3.67383 mo
62.1826 6.82373 li
62.1826 81.9736 mo
62.1826 78.8237 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf57.3125 91.3101 mo( 10)[1.9458 3.89209 0 ]xsh86.333 3.67383 mo
86.333 6.82373 li
86.333 81.9736 mo
86.333 78.8237 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf81.4688 91.3101 mo( 15)[1.9458 3.89209 0 ]xsh110.433 3.67383 mo
110.433 6.82373 li
110.433 81.9736 mo
110.433 78.8237 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf105.57 91.3101 mo( 20)[1.9458 3.89209 0 ]xsh13.9326 3.67383 mo
13.9326 81.9736 li
120.083 81.9736 li
120.083 3.67383 li
13.9326 3.67383 li
13.9326 3.67383 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWCW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B64EDF9ABAB3D6B19B5B82CC49C93A7CA17E50CDDB377C52588B81292225BD4FB078DBAFD3981F1169229379F45CD94A50BD016A1B4BBDB2608F6EEE5C> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWCW+Helvetica /Encoding getdup 65 /A putpop%ADOEndSubsetFont
/DVPWCW+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight 8{/.notdef}rp /A 190{/.notdef}rp]DVPWCW+Helvetica nfDVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf23.5781 15.8022 mo(A)sh0.25 lw
64.043 42.6035 mo
64.043 41.5605 63.1963 40.7139 62.1528 40.7139 cv
61.1094 40.7139 60.2627 41.5605 60.2627 42.6035 cv
60.2627 43.647 61.1094 44.4937 62.1528 44.4937 cv
63.1963 44.4937 64.043 43.647 64.043 42.6035 cv
@
1 lc
62.1826 42.6235 mo
62.1826 42.6235 li
@
0 lc
54.4429 48.0034 mo
54.4429 46.9604 53.5962 46.1138 52.5527 46.1138 cv
51.5098 46.1138 50.6626 46.9604 50.6626 48.0034 cv
50.6626 49.0469 51.5098 49.8936 52.5527 49.8936 cv
53.5962 49.8936 54.4429 49.0469 54.4429 48.0034 cv
@
1 lc
52.5327 47.9736 mo
52.5327 47.9736 li
@
0 lc
78.563 44.8838 mo
78.563 43.8403 77.7163 42.9937 76.6729 42.9937 cv
75.6294 42.9937 74.7827 43.8403 74.7827 44.8838 cv
74.7827 45.9268 75.6294 46.7734 76.6729 46.7734 cv
77.7163 46.7734 78.563 45.9268 78.563 44.8838 cv
@
1 lc
76.6826 44.8735 mo
76.6826 44.8735 li
@
0 lc
59.2427 38.8838 mo
59.2427 37.8403 58.396 36.9937 57.353 36.9937 cv
56.3096 36.9937 55.4629 37.8403 55.4629 38.8838 cv
55.4629 39.9268 56.3096 40.7734 57.353 40.7734 cv
58.396 40.7734 59.2427 39.9268 59.2427 38.8838 cv
@
1 lc
57.3828 38.8735 mo
57.3828 38.8735 li
@
0 lc
68.9629 41.1636 mo
68.9629 40.1201 68.1162 39.2734 67.0728 39.2734 cv
66.0293 39.2734 65.1826 40.1201 65.1826 41.1636 cv
65.1826 42.207 66.0293 43.0537 67.0728 43.0537 cv
68.1162 43.0537 68.9629 42.207 68.9629 41.1636 cv
@
1 lc
67.0327 41.2236 mo
67.0327 41.2236 li
@
0 lc
83.3628 33.2437 mo
83.3628 32.2002 82.5161 31.3535 81.4727 31.3535 cv
80.4297 31.3535 79.583 32.2002 79.583 33.2437 cv
79.583 34.2871 80.4297 35.1338 81.4727 35.1338 cv
82.5161 35.1338 83.3628 34.2871 83.3628 33.2437 cv
@
1 lc
81.4829 33.2236 mo
81.4829 33.2236 li
@
0 lc
44.7227 46.4434 mo
44.7227 45.4004 43.876 44.5537 42.833 44.5537 cv
41.7896 44.5537 40.9429 45.4004 40.9429 46.4434 cv
40.9429 47.4868 41.7896 48.3335 42.833 48.3335 cv
43.876 48.3335 44.7227 47.4868 44.7227 46.4434 cv
@
1 lc
42.8828 46.5234 mo
42.8828 46.5234 li
@
0 lc
35.123 61.0835 mo
35.123 60.0405 34.2759 59.1934 33.2329 59.1934 cv
32.1895 59.1934 31.3428 60.0405 31.3428 61.0835 cv
31.3428 62.127 32.1895 62.9736 33.2329 62.9736 cv
34.2759 62.9736 35.123 62.127 35.123 61.0835 cv
@
1 lc
33.2329 61.1235 mo
33.2329 61.1235 li
@
0 lc
73.7627 28.9238 mo
73.7627 27.8804 72.916 27.0337 71.873 27.0337 cv
70.8296 27.0337 69.9829 27.8804 69.9829 28.9238 cv
69.9829 29.9668 70.8296 30.8135 71.873 30.8135 cv
72.916 30.8135 73.7627 29.9668 73.7627 28.9238 cv
@
1 lc
71.833 28.9238 mo
71.833 28.9238 li
@
0 lc
49.6426 58.4434 mo
49.6426 57.4004 48.7959 56.5537 47.7529 56.5537 cv
46.7095 56.5537 45.8628 57.4004 45.8628 58.4434 cv
45.8628 59.4868 46.7095 60.3335 47.7529 60.3335 cv
48.7959 60.3335 49.6426 59.4868 49.6426 58.4434 cv
@
1 lc
47.7329 58.3735 mo
47.7329 58.3735 li
@
0 lc
39.9229 54.1235 mo
39.9229 53.0801 39.0762 52.2334 38.0327 52.2334 cv
36.9897 52.2334 36.1426 53.0801 36.1426 54.1235 cv
36.1426 55.167 36.9897 56.0137 38.0327 56.0137 cv
39.0762 56.0137 39.9229 55.167 39.9229 54.1235 cv
@
1 lc
38.083 54.1738 mo
38.083 54.1738 li
@
0 lc
[4 2 ] 0 dsh
113.383 16.8735 mo
113.483 16.8237 li
113.583 16.7236 li
113.683 16.6738 li
113.833 16.6235 li
113.933 16.5737 li
114.033 16.5234 li
114.133 16.4736 li
114.233 16.4238 li
114.333 16.3735 li
114.433 16.3237 li
114.533 16.2734 li
114.683 16.2236 li
114.783 16.1738 li
114.883 16.1235 li
114.983 16.0234 li
115.083 15.9736 li
115.183 15.9238 li
115.283 15.8735 li
115.383 15.8237 li
115.533 15.7734 li
115.633 15.7236 li
115.733 15.6738 li
115.833 15.6235 li
115.933 15.5737 li
116.033 15.5234 li
116.133 15.4736 li
116.233 15.4238 li
116.383 15.3237 li
116.483 15.2739 li
116.583 15.2236 li
116.683 15.1738 li
116.783 15.1235 li
116.883 15.0737 li
116.983 15.0239 li
117.083 14.9736 li
117.233 14.9238 li
117.333 14.8735 li
117.433 14.8237 li
117.533 14.7739 li
117.633 14.7236 li
117.733 14.624 li
117.833 14.5737 li
117.933 14.5239 li
118.083 14.4736 li
118.183 14.4238 li
118.283 14.374 li
118.383 14.3237 li
118.483 14.2739 li
118.583 14.2236 li
118.683 14.1738 li
118.783 14.124 li
118.933 14.0737 li
119.033 14.0239 li
119.133 13.9238 li
119.233 13.874 li
119.333 13.8237 li
119.433 13.7739 li
119.533 13.7236 li
119.633 13.6738 li
119.783 13.624 li
119.883 13.5737 li
119.983 13.5239 li
120.083 13.4736 li
102.333 22.4736 mo
102.433 22.4238 li
102.533 22.3735 li
102.633 22.2734 li
102.783 22.2236 li
102.883 22.1738 li
102.983 22.1235 li
103.083 22.0737 li
103.183 22.0234 li
103.283 21.9736 li
103.383 21.9238 li
103.483 21.8735 li
103.633 21.8237 li
103.733 21.7734 li
103.833 21.7236 li
103.933 21.6738 li
104.033 21.5737 li
104.133 21.5234 li
104.233 21.4736 li
104.333 21.4238 li
104.483 21.3735 li
104.583 21.3237 li
104.683 21.2734 li
104.783 21.2236 li
104.883 21.1738 li
104.983 21.1235 li
105.083 21.0737 li
105.183 21.0239 li
105.333 20.9736 li
105.433 20.8735 li
105.533 20.8237 li
105.633 20.7739 li
105.733 20.7236 li
105.833 20.6738 li
105.933 20.6235 li
106.033 20.5737 li
106.183 20.5239 li
106.283 20.4736 li
106.383 20.4238 li
106.483 20.374 li
106.583 20.3237 li
106.683 20.2739 li
106.783 20.1738 li
106.883 20.124 li
107.033 20.0737 li
107.133 20.0239 li
107.233 19.9736 li
107.333 19.9238 li
107.433 19.874 li
107.533 19.8237 li
107.633 19.7739 li
107.733 19.7236 li
107.883 19.6738 li
107.983 19.624 li
108.083 19.5737 li
108.183 19.4736 li
108.283 19.4238 li
108.383 19.374 li
108.483 19.3237 li
108.583 19.2739 li
108.733 19.2236 li
108.833 19.1738 li
108.933 19.124 li
109.033 19.0737 li
109.133 19.0239 li
109.233 18.9736 li
109.333 18.9238 li
109.433 18.874 li
109.583 18.7739 li
109.683 18.7236 li
109.783 18.6738 li
109.883 18.624 li
109.983 18.5737 li
110.083 18.5239 li
110.183 18.4741 li
110.283 18.4238 li
110.433 18.374 li
110.533 18.3237 li
110.633 18.2739 li
110.733 18.2241 li
110.833 18.1738 li
110.933 18.0737 li
111.033 18.0239 li
111.133 17.9741 li
111.283 17.9238 li
111.383 17.874 li
111.483 17.8242 li
111.583 17.7739 li
111.683 17.7241 li
111.783 17.6738 li
111.883 17.624 li
111.983 17.5742 li
112.133 17.5239 li
112.233 17.4238 li
112.333 17.374 li
112.433 17.3242 li
112.533 17.2739 li
112.633 17.2241 li
112.733 17.1738 li
112.833 17.124 li
112.983 17.0742 li
113.083 17.0239 li
113.183 16.9741 li
113.283 16.9238 li
113.383 16.874 li
91.2827 28.0737 mo
91.3828 28.0234 li
91.4829 27.9736 li
91.583 27.9238 li
91.7329 27.8237 li
91.833 27.7734 li
91.9326 27.7236 li
92.0327 27.6738 li
92.1328 27.6235 li
92.2329 27.5737 li
92.333 27.5234 li
92.4326 27.4736 li
92.583 27.4238 li
92.6826 27.3735 li
92.7827 27.3237 li
92.8828 27.2734 li
92.9829 27.2236 li
93.083 27.1235 li
93.1831 27.0737 li
93.2827 27.0234 li
93.4331 26.9736 li
93.5327 26.9238 li
93.6328 26.8735 li
93.7329 26.8237 li
93.833 26.7734 li
93.9331 26.7236 li
94.0327 26.6738 li
94.1328 26.6235 li
94.2827 26.5737 li
94.3828 26.5239 li
94.4829 26.4238 li
94.583 26.3735 li
94.6831 26.3237 li
94.7832 26.2739 li
94.8828 26.2236 li
94.9829 26.1738 li
95.1328 26.1235 li
95.2329 26.0737 li
95.333 26.0239 li
95.4331 25.9736 li
95.5332 25.9238 li
95.6328 25.874 li
95.7329 25.8237 li
95.833 25.7236 li
95.9829 25.6738 li
96.083 25.624 li
96.1831 25.5737 li
96.2832 25.5239 li
96.3828 25.4736 li
96.4829 25.4238 li
96.583 25.374 li
96.6831 25.3237 li
96.833 25.2739 li
96.9331 25.2236 li
97.0332 25.1738 li
97.1328 25.124 li
97.2329 25.0239 li
97.333 24.9736 li
97.4331 24.9238 li
97.5332 24.874 li
97.6831 24.8237 li
97.7832 24.7739 li
97.8828 24.7236 li
97.9829 24.6738 li
98.083 24.624 li
98.1831 24.5737 li
98.2832 24.5239 li
98.3833 24.4736 li
98.5332 24.4238 li
98.6333 24.3237 li
98.7329 24.2739 li
98.833 24.2236 li
98.9331 24.1738 li
99.0332 24.124 li
99.1333 24.0737 li
99.2329 24.0239 li
99.3833 23.9741 li
99.4834 23.9238 li
99.583 23.874 li
99.6831 23.8237 li
99.7832 23.7739 li
99.8833 23.7241 li
99.9834 23.624 li
100.083 23.5737 li
100.233 23.5239 li
100.333 23.4741 li
100.433 23.4238 li
100.533 23.374 li
100.633 23.3242 li
100.733 23.2739 li
100.833 23.2241 li
100.933 23.1738 li
101.083 23.124 li
101.183 23.0742 li
101.283 23.0239 li
101.383 22.9238 li
101.483 22.874 li
101.583 22.8242 li
101.683 22.7739 li
101.783 22.7241 li
101.933 22.6738 li
102.033 22.624 li
102.133 22.5742 li
102.233 22.5239 li
102.333 22.4741 li
80.2329 33.6738 mo
80.333 33.6235 li
80.4326 33.5737 li
80.5327 33.5234 li
80.6826 33.4736 li
80.7827 33.3735 li
80.8828 33.3237 li
80.9829 33.2734 li
81.083 33.2236 li
81.1826 33.1738 li
81.2827 33.1235 li
81.3828 33.0737 li
81.5327 33.0234 li
81.6328 32.9736 li
81.7329 32.9238 li
81.833 32.8735 li
81.9331 32.8237 li
82.0327 32.7734 li
82.1328 32.6738 li
82.2329 32.6235 li
82.3828 32.5737 li
82.4829 32.5234 li
82.583 32.4736 li
82.6831 32.4238 li
82.7827 32.3735 li
82.8828 32.3237 li
82.9829 32.2739 li
83.083 32.2236 li
83.2329 32.1738 li
83.333 32.1235 li
83.4331 32.0737 li
83.5332 31.9736 li
83.6328 31.9238 li
83.7329 31.8735 li
83.833 31.8237 li
83.9331 31.7739 li
84.083 31.7236 li
84.1831 31.6738 li
84.2832 31.6235 li
84.3828 31.5737 li
84.4829 31.5239 li
84.583 31.4736 li
84.6831 31.4238 li
84.7832 31.374 li
84.9331 31.2739 li
85.0332 31.2236 li
85.1328 31.1738 li
85.2329 31.124 li
85.333 31.0737 li
85.4331 31.0239 li
85.5332 30.9736 li
85.6328 30.9238 li
85.7832 30.874 li
85.8828 30.8237 li
85.9829 30.7739 li
86.083 30.7236 li
86.1831 30.6738 li
86.2832 30.5737 li
86.3828 30.5239 li
86.4829 30.4736 li
86.6328 30.4238 li
86.7329 30.374 li
86.833 30.3237 li
86.9331 30.2739 li
87.0332 30.2236 li
87.1333 30.1738 li
87.2329 30.124 li
87.333 30.0737 li
87.4829 30.0239 li
87.583 29.9736 li
87.6831 29.874 li
87.7832 29.8237 li
87.8833 29.7739 li
87.9829 29.7236 li
88.083 29.6738 li
88.1831 29.624 li
88.333 29.5737 li
88.4331 29.5239 li
88.5332 29.4741 li
88.6333 29.4238 li
88.7334 29.374 li
88.833 29.3237 li
88.9331 29.2739 li
89.0332 29.1738 li
89.1831 29.124 li
89.2832 29.0737 li
89.3833 29.0239 li
89.4834 28.9741 li
89.583 28.9238 li
89.6831 28.874 li
89.7832 28.8242 li
89.8833 28.7739 li
90.0332 28.7241 li
90.1333 28.6738 li
90.2334 28.624 li
90.333 28.5742 li
90.4331 28.4741 li
90.5332 28.4238 li
90.6333 28.374 li
90.7334 28.3242 li
90.8833 28.2739 li
90.9834 28.2241 li
91.083 28.1738 li
91.1831 28.124 li
91.2832 28.0742 li
69.1826 39.2734 mo
69.2827 39.2236 li
69.3828 39.1738 li
69.4829 39.1235 li
69.6328 39.0737 li
69.7329 39.0234 li
69.833 38.9736 li
69.9326 38.8735 li
70.0327 38.8237 li
70.1328 38.7734 li
70.2329 38.7236 li
70.333 38.6738 li
70.4829 38.6235 li
70.583 38.5737 li
70.6831 38.5234 li
70.7827 38.4736 li
70.8828 38.4238 li
70.9829 38.3735 li
71.083 38.3237 li
71.1831 38.2236 li
71.333 38.1738 li
71.4331 38.1235 li
71.5327 38.0737 li
71.6328 38.0234 li
71.7329 37.9736 li
71.833 37.9238 li
71.9331 37.8735 li
72.0327 37.8237 li
72.1831 37.7739 li
72.2827 37.7236 li
72.3828 37.6738 li
72.4829 37.6235 li
72.583 37.5239 li
72.6831 37.4736 li
72.7832 37.4238 li
72.8828 37.3735 li
73.0332 37.3237 li
73.1328 37.2739 li
73.2329 37.2236 li
73.333 37.1738 li
73.4331 37.124 li
73.5332 37.0737 li
73.6328 37.0239 li
73.7329 36.9736 li
73.8828 36.9238 li
73.9829 36.8237 li
74.083 36.7739 li
74.1831 36.7236 li
74.2832 36.6738 li
74.3828 36.624 li
74.4829 36.5737 li
74.583 36.5239 li
74.7329 36.4736 li
74.833 36.4238 li
74.9331 36.374 li
75.0332 36.3237 li
75.1328 36.2739 li
75.2329 36.2236 li
75.333 36.124 li
75.4331 36.0737 li
75.583 36.0239 li
75.6831 35.9736 li
75.7832 35.9238 li
75.8833 35.874 li
75.9829 35.8237 li
76.083 35.7739 li
76.1831 35.7236 li
76.2832 35.6738 li
76.4331 35.624 li
76.5332 35.5737 li
76.6333 35.5239 li
76.7329 35.4238 li
76.833 35.374 li
76.9331 35.3237 li
77.0332 35.2739 li
77.1333 35.2241 li
77.2832 35.1738 li
77.3833 35.124 li
77.4829 35.0737 li
77.583 35.0239 li
77.6831 34.9741 li
77.7832 34.9238 li
77.8833 34.874 li
77.9834 34.8242 li
78.1333 34.7241 li
78.2334 34.6738 li
78.333 34.624 li
78.4331 34.5742 li
78.5332 34.5239 li
78.6333 34.4741 li
78.7334 34.4238 li
78.833 34.374 li
78.9834 34.3242 li
79.083 34.2739 li
79.1831 34.2241 li
79.2832 34.1738 li
79.3833 34.124 li
79.4834 34.0239 li
79.583 33.9741 li
79.6831 33.9238 li
79.833 33.874 li
79.9331 33.8242 li
80.0332 33.7739 li
80.1333 33.7241 li
80.2334 33.6738 li
58.1328 44.8735 mo
58.2329 44.8237 li
58.333 44.7734 li
58.4326 44.7236 li
58.583 44.6738 li
58.6826 44.6235 li
58.7827 44.5737 li
58.8828 44.5234 li
58.9829 44.4238 li
59.083 44.3735 li
59.1826 44.3237 li
59.2827 44.2734 li
59.4326 44.2236 li
59.5327 44.1738 li
59.6328 44.1235 li
59.7329 44.0737 li
59.833 44.0234 li
59.9331 43.9736 li
60.0327 43.9238 li
60.1328 43.8735 li
60.2827 43.7734 li
60.3828 43.7236 li
60.4829 43.6738 li
60.583 43.6235 li
60.6831 43.5737 li
60.7827 43.5239 li
60.8828 43.4736 li
60.9829 43.4238 li
61.1328 43.3735 li
61.2329 43.3237 li
61.333 43.2739 li
61.4331 43.2236 li
61.5327 43.1738 li
61.6328 43.0737 li
61.7329 43.0239 li
61.833 42.9736 li
61.9829 42.9238 li
62.083 42.874 li
62.1831 42.8237 li
62.2832 42.7739 li
62.3828 42.7236 li
62.4829 42.6738 li
62.583 42.624 li
62.6831 42.5737 li
62.833 42.5239 li
62.9331 42.4736 li
63.0332 42.374 li
63.1328 42.3237 li
63.2329 42.2739 li
63.333 42.2236 li
63.4331 42.1738 li
63.5332 42.124 li
63.6831 42.0737 li
63.7832 42.0239 li
63.8828 41.9736 li
63.9829 41.9238 li
64.083 41.874 li
64.1831 41.8237 li
64.2832 41.7739 li
64.3828 41.6738 li
64.5332 41.624 li
64.6328 41.5737 li
64.7329 41.5239 li
64.833 41.4736 li
64.9331 41.4238 li
65.0332 41.374 li
65.1333 41.3237 li
65.2329 41.2739 li
65.3833 41.2236 li
65.4829 41.1738 li
65.583 41.124 li
65.6831 41.0737 li
65.7832 40.9736 li
65.8833 40.9238 li
65.9829 40.874 li
66.083 40.8237 li
66.2329 40.7739 li
66.333 40.7241 li
66.4331 40.6738 li
66.5332 40.624 li
66.6333 40.5737 li
66.7334 40.5239 li
66.833 40.4741 li
66.9331 40.4238 li
67.083 40.374 li
67.1831 40.2739 li
67.2832 40.2241 li
67.3833 40.1738 li
67.4834 40.124 li
67.583 40.0742 li
67.6831 40.0239 li
67.7832 39.9741 li
67.9331 39.9238 li
68.0332 39.874 li
68.1333 39.8242 li
68.2334 39.7739 li
68.333 39.7241 li
68.4331 39.6738 li
68.5332 39.5742 li
68.6333 39.5239 li
68.7832 39.4741 li
68.8833 39.4238 li
68.9834 39.374 li
69.083 39.3242 li
69.1831 39.2739 li
47.083 50.4736 mo
47.1826 50.4238 li
47.2827 50.3735 li
47.3828 50.3237 li
47.5327 50.2734 li
47.6328 50.2236 li
47.7329 50.1738 li
47.833 50.1235 li
47.9326 50.0737 li
48.0327 49.9736 li
48.1328 49.9238 li
48.2329 49.8735 li
48.3828 49.8237 li
48.4829 49.7734 li
48.583 49.7236 li
48.6831 49.6738 li
48.7827 49.6235 li
48.8828 49.5737 li
48.9829 49.5234 li
49.083 49.4736 li
49.2329 49.4238 li
49.333 49.3237 li
49.4331 49.2734 li
49.5327 49.2236 li
49.6328 49.1738 li
49.7329 49.1235 li
49.833 49.0737 li
49.9331 49.0239 li
50.083 48.9736 li
50.1831 48.9238 li
50.2827 48.8735 li
50.3828 48.8237 li
50.4829 48.7739 li
50.583 48.7236 li
50.6831 48.6235 li
50.7832 48.5737 li
50.9331 48.5239 li
51.0332 48.4736 li
51.1328 48.4238 li
51.2329 48.374 li
51.333 48.3237 li
51.4331 48.2739 li
51.5332 48.2236 li
51.6328 48.1738 li
51.7832 48.124 li
51.8828 48.0737 li
51.9829 48.0239 li
52.083 47.9238 li
52.1831 47.874 li
52.2832 47.8237 li
52.3828 47.7739 li
52.4829 47.7236 li
52.6328 47.6738 li
52.7329 47.624 li
52.833 47.5737 li
52.9331 47.5239 li
53.0332 47.4736 li
53.1328 47.4238 li
53.2329 47.374 li
53.333 47.3237 li
53.4829 47.2236 li
53.583 47.1738 li
53.6831 47.124 li
53.7832 47.0737 li
53.8833 47.0239 li
53.9829 46.9736 li
54.083 46.9238 li
54.1831 46.874 li
54.333 46.8237 li
54.4331 46.7739 li
54.5332 46.7236 li
54.6333 46.6738 li
54.7329 46.624 li
54.833 46.5239 li
54.9331 46.4741 li
55.0332 46.4238 li
55.1831 46.374 li
55.2832 46.3237 li
55.3833 46.2739 li
55.4834 46.2241 li
55.583 46.1738 li
55.6831 46.124 li
55.7832 46.0737 li
55.8833 46.0239 li
56.0332 45.9741 li
56.1333 45.9238 li
56.2334 45.8242 li
56.333 45.7739 li
56.4331 45.7241 li
56.5332 45.6738 li
56.6333 45.624 li
56.7334 45.5742 li
56.8833 45.5239 li
56.9834 45.4741 li
57.083 45.4238 li
57.1831 45.374 li
57.2832 45.3242 li
57.3833 45.2739 li
57.4834 45.2241 li
57.583 45.124 li
57.7334 45.0742 li
57.833 45.0239 li
57.9331 44.9741 li
58.0332 44.9238 li
58.1333 44.874 li
36.0327 56.0737 mo
36.1328 56.0234 li
36.2329 55.9736 li
36.333 55.9238 li
36.4829 55.8735 li
36.583 55.8237 li
36.6826 55.7734 li
36.7827 55.7236 li
36.8828 55.6738 li
36.9829 55.6235 li
37.083 55.5234 li
37.1826 55.4736 li
37.333 55.4238 li
37.4326 55.3735 li
37.5327 55.3237 li
37.6328 55.2734 li
37.7329 55.2236 li
37.833 55.1738 li
37.9331 55.1235 li
38.0327 55.0737 li
38.1831 55.0234 li
38.2827 54.9736 li
38.3828 54.9238 li
38.4829 54.8237 li
38.583 54.7739 li
38.6831 54.7236 li
38.7827 54.6738 li
38.8828 54.6235 li
39.0327 54.5737 li
39.1328 54.5239 li
39.2329 54.4736 li
39.333 54.4238 li
39.4331 54.3735 li
39.5327 54.3237 li
39.6328 54.2739 li
39.7329 54.1738 li
39.8828 54.124 li
39.9829 54.0737 li
40.083 54.0239 li
40.1831 53.9736 li
40.2832 53.9238 li
40.3828 53.874 li
40.4829 53.8237 li
40.583 53.7739 li
40.7329 53.7236 li
40.833 53.6738 li
40.9331 53.624 li
41.0332 53.5737 li
41.1328 53.4736 li
41.2329 53.4238 li
41.333 53.374 li
41.4331 53.3237 li
41.583 53.2739 li
41.6831 53.2236 li
41.7832 53.1738 li
41.8828 53.124 li
41.9829 53.0737 li
42.083 53.0239 li
42.1831 52.9736 li
42.2832 52.9238 li
42.4331 52.874 li
42.5332 52.7739 li
42.6333 52.7236 li
42.7329 52.6738 li
42.833 52.624 li
42.9331 52.5737 li
43.0332 52.5239 li
43.1333 52.4736 li
43.2832 52.4238 li
43.3833 52.374 li
43.4829 52.3237 li
43.583 52.2739 li
43.6831 52.2241 li
43.7832 52.1738 li
43.8833 52.0737 li
43.9829 52.0239 li
44.1333 51.9741 li
44.2329 51.9238 li
44.333 51.874 li
44.4331 51.8237 li
44.5332 51.7739 li
44.6333 51.7241 li
44.7334 51.6738 li
44.833 51.624 li
44.9834 51.5742 li
45.083 51.5239 li
45.1831 51.4741 li
45.2832 51.374 li
45.3833 51.3242 li
45.4834 51.2739 li
45.583 51.2241 li
45.6831 51.1738 li
45.833 51.124 li
45.9331 51.0742 li
46.0332 51.0239 li
46.1333 50.9741 li
46.2334 50.9238 li
46.333 50.874 li
46.4331 50.8242 li
46.5332 50.7739 li
46.6831 50.6738 li
46.7832 50.624 li
46.8833 50.5742 li
46.9834 50.5239 li
47.083 50.4741 li
24.9829 61.6738 mo
25.083 61.6235 li
25.1826 61.5737 li
25.2827 61.5234 li
25.4326 61.4736 li
25.5327 61.4238 li
25.6328 61.3735 li
25.7329 61.3237 li
25.833 61.2734 li
25.9326 61.2236 li
26.0327 61.1738 li
26.1328 61.0737 li
26.2827 61.0234 li
26.3828 60.9736 li
26.4829 60.9238 li
26.583 60.8735 li
26.6831 60.8237 li
26.7827 60.7734 li
26.8828 60.7236 li
26.9829 60.6738 li
27.1328 60.6235 li
27.2329 60.5737 li
27.333 60.5234 li
27.4331 60.4736 li
27.5327 60.3735 li
27.6328 60.3237 li
27.7329 60.2739 li
27.833 60.2236 li
27.9829 60.1738 li
28.083 60.1235 li
28.1831 60.0737 li
28.2827 60.0239 li
28.3828 59.9736 li
28.4829 59.9238 li
28.583 59.8735 li
28.6831 59.8237 li
28.833 59.7236 li
28.9331 59.6738 li
29.0332 59.624 li
29.1328 59.5737 li
29.2329 59.5239 li
29.333 59.4736 li
29.4331 59.4238 li
29.5332 59.374 li
29.6831 59.3237 li
29.7832 59.2739 li
29.8828 59.2236 li
29.9829 59.1738 li
30.083 59.124 li
30.1831 59.0239 li
30.2832 58.9736 li
30.3828 58.9238 li
30.5332 58.874 li
30.6328 58.8237 li
30.7329 58.7739 li
30.833 58.7236 li
30.9331 58.6738 li
31.0332 58.624 li
31.1328 58.5737 li
31.2329 58.5239 li
31.3828 58.4736 li
31.4829 58.4238 li
31.583 58.3237 li
31.6831 58.2739 li
31.7832 58.2236 li
31.8833 58.1738 li
31.9829 58.124 li
32.083 58.0737 li
32.2329 58.0239 li
32.333 57.9736 li
32.4331 57.9238 li
32.5332 57.874 li
32.6333 57.8237 li
32.7329 57.7739 li
32.833 57.7241 li
32.9331 57.624 li
33.083 57.5737 li
33.1831 57.5239 li
33.2832 57.4741 li
33.3833 57.4238 li
33.4829 57.374 li
33.583 57.3237 li
33.6831 57.2739 li
33.7832 57.2241 li
33.9331 57.1738 li
34.0332 57.124 li
34.1333 57.0742 li
34.2334 57.0239 li
34.333 56.9238 li
34.4331 56.874 li
34.5332 56.8242 li
34.6333 56.7739 li
34.7832 56.7241 li
34.8833 56.6738 li
34.9834 56.624 li
35.083 56.5742 li
35.1831 56.5239 li
35.2832 56.4741 li
35.3833 56.4238 li
35.4834 56.374 li
35.6333 56.3242 li
35.7334 56.2241 li
35.833 56.1738 li
35.9331 56.124 li
36.0332 56.0742 li
13.9326 67.2734 mo
14.0327 67.2236 li
14.1328 67.1738 li
14.2329 67.1235 li
14.3828 67.0737 li
14.4829 67.0234 li
14.583 66.9736 li
14.6826 66.9238 li
14.7827 66.8735 li
14.8828 66.8237 li
14.9829 66.7734 li
15.083 66.7236 li
15.2329 66.6235 li
15.333 66.5737 li
15.4331 66.5234 li
15.5327 66.4736 li
15.6328 66.4238 li
15.7329 66.3735 li
15.833 66.3237 li
15.9331 66.2734 li
16.083 66.2236 li
16.1831 66.1738 li
16.2827 66.1235 li
16.3828 66.0737 li
16.4829 66.0239 li
16.583 65.9238 li
16.6831 65.8735 li
16.7827 65.8237 li
16.9331 65.7739 li
17.0327 65.7236 li
17.1328 65.6738 li
17.2329 65.6235 li
17.333 65.5737 li
17.4331 65.5239 li
17.5332 65.4736 li
17.6328 65.4238 li
17.7832 65.374 li
17.8828 65.2739 li
17.9829 65.2236 li
18.083 65.1738 li
18.1831 65.124 li
18.2832 65.0737 li
18.3828 65.0239 li
18.4829 64.9736 li
18.6328 64.9238 li
18.7329 64.874 li
18.833 64.8237 li
18.9331 64.7739 li
19.0332 64.7236 li
19.1328 64.6738 li
19.2329 64.5737 li
19.333 64.5239 li
19.4829 64.4736 li
19.583 64.4238 li
19.6831 64.374 li
19.7832 64.3237 li
19.8828 64.2739 li
19.9829 64.2236 li
20.083 64.1738 li
20.1831 64.124 li
20.333 64.0737 li
20.4331 64.0239 li
20.5332 63.9736 li
20.6333 63.874 li
20.7329 63.8237 li
20.833 63.7739 li
20.9331 63.7236 li
21.0332 63.6738 li
21.1831 63.624 li
21.2832 63.5737 li
21.3833 63.5239 li
21.4829 63.4736 li
21.583 63.4238 li
21.6831 63.374 li
21.7832 63.3237 li
21.8833 63.2739 li
22.0332 63.1738 li
22.1333 63.124 li
22.2329 63.0737 li
22.333 63.0239 li
22.4331 62.9741 li
22.5332 62.9238 li
22.6333 62.874 li
22.7334 62.8237 li
22.8833 62.7739 li
22.9834 62.7241 li
23.083 62.6738 li
23.1831 62.624 li
23.2832 62.5742 li
23.3833 62.4741 li
23.4834 62.4238 li
23.583 62.374 li
23.7334 62.3242 li
23.833 62.2739 li
23.9331 62.2241 li
24.0332 62.1738 li
24.1333 62.124 li
24.2334 62.0742 li
24.333 62.0239 li
24.4331 61.9741 li
24.583 61.9238 li
24.6831 61.874 li
24.7832 61.7739 li
24.8833 61.7241 li
24.9834 61.6738 li
@
0.5 lw
[] 0 dsh
264.083 81.9736 mo
260.933 81.9736 li
157.933 81.9736 mo
161.083 81.9736 li
13.9326 3.67383 mo
13.9326 81.9736 li
120.083 81.9736 li
120.083 3.67383 li
13.9326 3.67383 li
13.9326 3.67383 li
cp
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf147.891 84.3101 mo( )sh149.836 84.3101 mo(0)sh264.083 72.1738 mo
260.933 72.1738 li
157.933 72.1738 mo
161.083 72.1738 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf147.891 74.5054 mo( )sh149.836 74.5054 mo(2)sh264.083 62.3735 mo
260.933 62.3735 li
157.933 62.3735 mo
161.083 62.3735 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf147.891 64.7007 mo( )sh149.836 64.7007 mo(4)sh264.083 52.6235 mo
260.933 52.6235 li
157.933 52.6235 mo
161.083 52.6235 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf147.891 54.9585 mo( )sh149.836 54.9585 mo(6)sh264.083 42.8237 mo
260.933 42.8237 li
157.933 42.8237 mo
161.083 42.8237 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf147.891 45.1616 mo( )sh149.836 45.1616 mo(8)sh264.083 33.0234 mo
260.933 33.0234 li
157.933 33.0234 mo
161.083 33.0234 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf144 35.3569 mo( 10)[1.94629 3.8916 0 ]xsh264.083 23.2236 mo
260.933 23.2236 li
157.933 23.2236 mo
161.083 23.2236 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf144 25.5601 mo( 12)[1.94629 3.8916 0 ]xsh264.083 13.4736 mo
260.933 13.4736 li
157.933 13.4736 mo
161.083 13.4736 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf144 15.8022 mo( 14)[1.94629 3.8916 0 ]xsh264.083 3.67383 mo
260.933 3.67383 li
157.933 3.67383 mo
161.083 3.67383 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf144 6.01318 mo( 16)[1.94629 3.8916 0 ]xsh157.933 3.67383 mo
157.933 6.82373 li
157.933 81.9736 mo
157.933 78.8237 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf155.008 91.3101 mo( )sh156.961 91.3101 mo(0)sh182.083 3.67383 mo
182.083 6.82373 li
182.083 81.9736 mo
182.083 78.8237 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf179.156 91.3101 mo( )sh181.102 91.3101 mo(5)sh206.183 3.67383 mo
206.183 6.82373 li
206.183 81.9736 mo
206.183 78.8237 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf201.313 91.3101 mo( 10)[1.94629 3.8916 0 ]xsh230.333 3.67383 mo
230.333 6.82373 li
230.333 81.9736 mo
230.333 78.8237 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf225.469 91.3101 mo( 15)[1.94629 3.8916 0 ]xsh254.433 3.67383 mo
254.433 6.82373 li
254.433 81.9736 mo
254.433 78.8237 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf249.563 91.3101 mo( 20)[1.94629 3.8916 0 ]xsh157.933 3.67383 mo
157.933 81.9736 li
264.083 81.9736 li
264.083 3.67383 li
157.933 3.67383 li
157.933 3.67383 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWCW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B64EDF8861093A50D70CE704C3B99B255E57C25F5628D6A25DCF329FDC490B240CA8E3263684788E9E559211DF7A652BCEA6E7473D115402933A862D3C0BED9681856F5ACE8B339645A6A4CED62CD1A26855F2D51956984EE13F47812E810D9E8C98922B6C1937C1681825270D4D77D4BBDEECB712B7702AEEC61BE96AFEBE20DFCCFCC19F8646EA0A427DFBAA43CEB1ACB616853A6CD4C3E4CEE20B743FFD4303148B5B4D479ED1038084D37CCEE34880877DCE43721DF888> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWCW+Helvetica /Encoding getdup 66 /B putpop%ADOEndSubsetFont
/DVPWCW+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight 8{/.notdef}rp /A /B 189{/.notdef}rp]DVPWCW+Helvetica nfDVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf167.578 15.8022 mo(B)sh0.25 lw
208.043 37.2036 mo
208.043 36.1602 207.196 35.3135 206.152 35.3135 cv
205.109 35.3135 204.263 36.1602 204.263 37.2036 cv
204.263 38.2471 205.109 39.0938 206.152 39.0938 cv
207.196 39.0938 208.043 38.2471 208.043 37.2036 cv
@
1 lc
206.183 37.2236 mo
206.183 37.2236 li
@
0 lc
198.442 42.1235 mo
198.442 41.0801 197.596 40.2334 196.553 40.2334 cv
195.51 40.2334 194.663 41.0801 194.663 42.1235 cv
194.663 43.167 195.51 44.0137 196.553 44.0137 cv
197.596 44.0137 198.442 43.167 198.442 42.1235 cv
@
1 lc
196.533 42.1235 mo
196.533 42.1235 li
@
0 lc
222.563 39.2437 mo
222.563 38.2002 221.716 37.3535 220.673 37.3535 cv
219.63 37.3535 218.783 38.2002 218.783 39.2437 cv
218.783 40.2871 219.63 41.1338 220.673 41.1338 cv
221.716 41.1338 222.563 40.2871 222.563 39.2437 cv
@
1 lc
220.683 39.2236 mo
220.683 39.2236 li
@
0 lc
203.243 39.0034 mo
203.243 37.9604 202.396 37.1138 201.353 37.1138 cv
200.31 37.1138 199.463 37.9604 199.463 39.0034 cv
199.463 40.0469 200.31 40.8936 201.353 40.8936 cv
202.396 40.8936 203.243 40.0469 203.243 39.0034 cv
@
1 lc
201.383 39.0737 mo
201.383 39.0737 li
@
0 lc
212.963 36.6035 mo
212.963 35.5605 212.116 34.7139 211.073 34.7139 cv
210.029 34.7139 209.183 35.5605 209.183 36.6035 cv
209.183 37.647 210.029 38.4937 211.073 38.4937 cv
212.116 38.4937 212.963 37.647 212.963 36.6035 cv
@
1 lc
211.033 36.6738 mo
211.033 36.6738 li
@
0 lc
227.363 42.3638 mo
227.363 41.3203 226.516 40.4736 225.473 40.4736 cv
224.43 40.4736 223.583 41.3203 223.583 42.3638 cv
223.583 43.4067 224.43 44.2534 225.473 44.2534 cv
226.516 44.2534 227.363 43.4067 227.363 42.3638 cv
@
1 lc
225.482 42.3237 mo
225.482 42.3237 li
@
0 lc
188.723 51.9639 mo
188.723 50.9204 187.876 50.0737 186.833 50.0737 cv
185.789 50.0737 184.942 50.9204 184.942 51.9639 cv
184.942 53.0068 185.789 53.8535 186.833 53.8535 cv
187.876 53.8535 188.723 53.0068 188.723 51.9639 cv
@
1 lc
186.883 51.9736 mo
186.883 51.9736 li
@
0 lc
179.123 66.8438 mo
179.123 65.8003 178.276 64.9536 177.232 64.9536 cv
176.189 64.9536 175.343 65.8003 175.343 66.8438 cv
175.343 67.8867 176.189 68.7334 177.232 68.7334 cv
178.276 68.7334 179.123 67.8867 179.123 66.8438 cv
@
1 lc
177.232 66.8237 mo
177.232 66.8237 li
@
0 lc
217.763 37.3237 mo
217.763 36.2803 216.916 35.4336 215.873 35.4336 cv
214.829 35.4336 213.982 36.2803 213.982 37.3237 cv
213.982 38.3667 214.829 39.2139 215.873 39.2139 cv
216.916 39.2139 217.763 38.3667 217.763 37.3237 cv
@
1 lc
215.833 37.2734 mo
215.833 37.2734 li
@
0 lc
193.643 46.4434 mo
193.643 45.4004 192.796 44.5537 191.753 44.5537 cv
190.71 44.5537 189.863 45.4004 189.863 46.4434 cv
189.863 47.4868 190.71 48.3335 191.753 48.3335 cv
192.796 48.3335 193.643 47.4868 193.643 46.4434 cv
@
1 lc
191.732 46.4238 mo
191.732 46.4238 li
@
0 lc
183.923 58.8037 mo
183.923 57.7603 183.076 56.9136 182.033 56.9136 cv
180.989 56.9136 180.143 57.7603 180.143 58.8037 cv
180.143 59.8467 180.989 60.6934 182.033 60.6934 cv
183.076 60.6934 183.923 59.8467 183.923 58.8037 cv
@
1 lc
182.083 58.7734 mo
182.083 58.7734 li
@
0 lc
[4 2 ] 0 dsh
257.383 16.8735 mo
257.482 16.8237 li
257.583 16.7236 li
257.683 16.6738 li
257.833 16.6235 li
257.933 16.5737 li
258.033 16.5234 li
258.133 16.4736 li
258.232 16.4238 li
258.333 16.3735 li
258.433 16.3237 li
258.533 16.2734 li
258.683 16.2236 li
258.783 16.1738 li
258.883 16.1235 li
258.982 16.0234 li
259.083 15.9736 li
259.183 15.9238 li
259.283 15.8735 li
259.383 15.8237 li
259.533 15.7734 li
259.633 15.7236 li
259.732 15.6738 li
259.833 15.6235 li
259.933 15.5737 li
260.033 15.5234 li
260.133 15.4736 li
260.232 15.4238 li
260.383 15.3237 li
260.482 15.2739 li
260.583 15.2236 li
260.683 15.1738 li
260.783 15.1235 li
260.883 15.0737 li
260.982 15.0239 li
261.083 14.9736 li
261.232 14.9238 li
261.333 14.8735 li
261.433 14.8237 li
261.533 14.7739 li
261.633 14.7236 li
261.732 14.624 li
261.833 14.5737 li
261.933 14.5239 li
262.083 14.4736 li
262.183 14.4238 li
262.283 14.374 li
262.383 14.3237 li
262.482 14.2739 li
262.583 14.2236 li
262.683 14.1738 li
262.783 14.124 li
262.933 14.0737 li
263.033 14.0239 li
263.133 13.9238 li
263.232 13.874 li
263.333 13.8237 li
263.433 13.7739 li
263.533 13.7236 li
263.633 13.6738 li
263.783 13.624 li
263.883 13.5737 li
263.982 13.5239 li
264.083 13.4736 li
246.333 22.4736 mo
246.433 22.4238 li
246.533 22.3735 li
246.633 22.2734 li
246.783 22.2236 li
246.883 22.1738 li
246.982 22.1235 li
247.083 22.0737 li
247.183 22.0234 li
247.283 21.9736 li
247.383 21.9238 li
247.482 21.8735 li
247.633 21.8237 li
247.732 21.7734 li
247.833 21.7236 li
247.933 21.6738 li
248.033 21.5737 li
248.133 21.5234 li
248.232 21.4736 li
248.333 21.4238 li
248.482 21.3735 li
248.583 21.3237 li
248.683 21.2734 li
248.783 21.2236 li
248.883 21.1738 li
248.982 21.1235 li
249.083 21.0737 li
249.183 21.0239 li
249.333 20.9736 li
249.433 20.8735 li
249.533 20.8237 li
249.633 20.7739 li
249.732 20.7236 li
249.833 20.6738 li
249.933 20.6235 li
250.033 20.5737 li
250.183 20.5239 li
250.283 20.4736 li
250.383 20.4238 li
250.482 20.374 li
250.583 20.3237 li
250.683 20.2739 li
250.783 20.1738 li
250.883 20.124 li
251.033 20.0737 li
251.133 20.0239 li
251.232 19.9736 li
251.333 19.9238 li
251.433 19.874 li
251.533 19.8237 li
251.633 19.7739 li
251.732 19.7236 li
251.883 19.6738 li
251.982 19.624 li
252.083 19.5737 li
252.183 19.4736 li
252.283 19.4238 li
252.383 19.374 li
252.482 19.3237 li
252.583 19.2739 li
252.732 19.2236 li
252.833 19.1738 li
252.933 19.124 li
253.033 19.0737 li
253.133 19.0239 li
253.232 18.9736 li
253.333 18.9238 li
253.433 18.874 li
253.583 18.7739 li
253.683 18.7236 li
253.783 18.6738 li
253.883 18.624 li
253.982 18.5737 li
254.083 18.5239 li
254.183 18.4741 li
254.283 18.4238 li
254.433 18.374 li
254.533 18.3237 li
254.633 18.2739 li
254.732 18.2241 li
254.833 18.1738 li
254.933 18.0737 li
255.033 18.0239 li
255.133 17.9741 li
255.283 17.9238 li
255.383 17.874 li
255.482 17.8242 li
255.583 17.7739 li
255.683 17.7241 li
255.783 17.6738 li
255.883 17.624 li
255.982 17.5742 li
256.133 17.5239 li
256.232 17.4238 li
256.333 17.374 li
256.433 17.3242 li
256.533 17.2739 li
256.633 17.2241 li
256.732 17.1738 li
256.833 17.124 li
256.982 17.0742 li
257.083 17.0239 li
257.183 16.9741 li
257.283 16.9238 li
257.383 16.874 li
235.283 28.0737 mo
235.383 28.0234 li
235.482 27.9736 li
235.583 27.9238 li
235.732 27.8237 li
235.833 27.7734 li
235.933 27.7236 li
236.033 27.6738 li
236.133 27.6235 li
236.232 27.5737 li
236.333 27.5234 li
236.433 27.4736 li
236.583 27.4238 li
236.683 27.3735 li
236.783 27.3237 li
236.883 27.2734 li
236.982 27.2236 li
237.083 27.1235 li
237.183 27.0737 li
237.283 27.0234 li
237.433 26.9736 li
237.533 26.9238 li
237.633 26.8735 li
237.732 26.8237 li
237.833 26.7734 li
237.933 26.7236 li
238.033 26.6738 li
238.133 26.6235 li
238.283 26.5737 li
238.383 26.5239 li
238.482 26.4238 li
238.583 26.3735 li
238.683 26.3237 li
238.783 26.2739 li
238.883 26.2236 li
238.982 26.1738 li
239.133 26.1235 li
239.232 26.0737 li
239.333 26.0239 li
239.433 25.9736 li
239.533 25.9238 li
239.633 25.874 li
239.732 25.8237 li
239.833 25.7236 li
239.982 25.6738 li
240.083 25.624 li
240.183 25.5737 li
240.283 25.5239 li
240.383 25.4736 li
240.482 25.4238 li
240.583 25.374 li
240.683 25.3237 li
240.833 25.2739 li
240.933 25.2236 li
241.033 25.1738 li
241.133 25.124 li
241.232 25.0239 li
241.333 24.9736 li
241.433 24.9238 li
241.533 24.874 li
241.683 24.8237 li
241.783 24.7739 li
241.883 24.7236 li
241.982 24.6738 li
242.083 24.624 li
242.183 24.5737 li
242.283 24.5239 li
242.383 24.4736 li
242.533 24.4238 li
242.633 24.3237 li
242.732 24.2739 li
242.833 24.2236 li
242.933 24.1738 li
243.033 24.124 li
243.133 24.0737 li
243.232 24.0239 li
243.383 23.9741 li
243.482 23.9238 li
243.583 23.874 li
243.683 23.8237 li
243.783 23.7739 li
243.883 23.7241 li
243.982 23.624 li
244.083 23.5737 li
244.232 23.5239 li
244.333 23.4741 li
244.433 23.4238 li
244.533 23.374 li
244.633 23.3242 li
244.732 23.2739 li
244.833 23.2241 li
244.933 23.1738 li
245.083 23.124 li
245.183 23.0742 li
245.283 23.0239 li
245.383 22.9238 li
245.482 22.874 li
245.583 22.8242 li
245.683 22.7739 li
245.783 22.7241 li
245.933 22.6738 li
246.033 22.624 li
246.133 22.5742 li
246.232 22.5239 li
246.333 22.4741 li
224.232 33.6738 mo
224.333 33.6235 li
224.433 33.5737 li
224.533 33.5234 li
224.683 33.4736 li
224.783 33.3735 li
224.883 33.3237 li
224.982 33.2734 li
225.083 33.2236 li
225.183 33.1738 li
225.283 33.1235 li
225.383 33.0737 li
225.533 33.0234 li
225.633 32.9736 li
225.732 32.9238 li
225.833 32.8735 li
225.933 32.8237 li
226.033 32.7734 li
226.133 32.6738 li
226.232 32.6235 li
226.383 32.5737 li
226.482 32.5234 li
226.583 32.4736 li
226.683 32.4238 li
226.783 32.3735 li
226.883 32.3237 li
226.982 32.2739 li
227.083 32.2236 li
227.232 32.1738 li
227.333 32.1235 li
227.433 32.0737 li
227.533 31.9736 li
227.633 31.9238 li
227.732 31.8735 li
227.833 31.8237 li
227.933 31.7739 li
228.083 31.7236 li
228.183 31.6738 li
228.283 31.6235 li
228.383 31.5737 li
228.482 31.5239 li
228.583 31.4736 li
228.683 31.4238 li
228.783 31.374 li
228.933 31.2739 li
229.033 31.2236 li
229.133 31.1738 li
229.232 31.124 li
229.333 31.0737 li
229.433 31.0239 li
229.533 30.9736 li
229.633 30.9238 li
229.783 30.874 li
229.883 30.8237 li
229.982 30.7739 li
230.083 30.7236 li
230.183 30.6738 li
230.283 30.5737 li
230.383 30.5239 li
230.482 30.4736 li
230.633 30.4238 li
230.732 30.374 li
230.833 30.3237 li
230.933 30.2739 li
231.033 30.2236 li
231.133 30.1738 li
231.232 30.124 li
231.333 30.0737 li
231.482 30.0239 li
231.583 29.9736 li
231.683 29.874 li
231.783 29.8237 li
231.883 29.7739 li
231.982 29.7236 li
232.083 29.6738 li
232.183 29.624 li
232.333 29.5737 li
232.433 29.5239 li
232.533 29.4741 li
232.633 29.4238 li
232.732 29.374 li
232.833 29.3237 li
232.933 29.2739 li
233.033 29.1738 li
233.183 29.124 li
233.283 29.0737 li
233.383 29.0239 li
233.482 28.9741 li
233.583 28.9238 li
233.683 28.874 li
233.783 28.8242 li
233.883 28.7739 li
234.033 28.7241 li
234.133 28.6738 li
234.232 28.624 li
234.333 28.5742 li
234.433 28.4741 li
234.533 28.4238 li
234.633 28.374 li
234.732 28.3242 li
234.883 28.2739 li
234.982 28.2241 li
235.083 28.1738 li
235.183 28.124 li
235.283 28.0742 li
213.183 39.2734 mo
213.283 39.2236 li
213.383 39.1738 li
213.482 39.1235 li
213.633 39.0737 li
213.732 39.0234 li
213.833 38.9736 li
213.933 38.8735 li
214.033 38.8237 li
214.133 38.7734 li
214.232 38.7236 li
214.333 38.6738 li
214.482 38.6235 li
214.583 38.5737 li
214.683 38.5234 li
214.783 38.4736 li
214.883 38.4238 li
214.982 38.3735 li
215.083 38.3237 li
215.183 38.2236 li
215.333 38.1738 li
215.433 38.1235 li
215.533 38.0737 li
215.633 38.0234 li
215.732 37.9736 li
215.833 37.9238 li
215.933 37.8735 li
216.033 37.8237 li
216.183 37.7739 li
216.283 37.7236 li
216.383 37.6738 li
216.482 37.6235 li
216.583 37.5239 li
216.683 37.4736 li
216.783 37.4238 li
216.883 37.3735 li
217.033 37.3237 li
217.133 37.2739 li
217.232 37.2236 li
217.333 37.1738 li
217.433 37.124 li
217.533 37.0737 li
217.633 37.0239 li
217.732 36.9736 li
217.883 36.9238 li
217.982 36.8237 li
218.083 36.7739 li
218.183 36.7236 li
218.283 36.6738 li
218.383 36.624 li
218.482 36.5737 li
218.583 36.5239 li
218.732 36.4736 li
218.833 36.4238 li
218.933 36.374 li
219.033 36.3237 li
219.133 36.2739 li
219.232 36.2236 li
219.333 36.124 li
219.433 36.0737 li
219.583 36.0239 li
219.683 35.9736 li
219.783 35.9238 li
219.883 35.874 li
219.982 35.8237 li
220.083 35.7739 li
220.183 35.7236 li
220.283 35.6738 li
220.433 35.624 li
220.533 35.5737 li
220.633 35.5239 li
220.732 35.4238 li
220.833 35.374 li
220.933 35.3237 li
221.033 35.2739 li
221.133 35.2241 li
221.283 35.1738 li
221.383 35.124 li
221.482 35.0737 li
221.583 35.0239 li
221.683 34.9741 li
221.783 34.9238 li
221.883 34.874 li
221.982 34.8242 li
222.133 34.7241 li
222.232 34.6738 li
222.333 34.624 li
222.433 34.5742 li
222.533 34.5239 li
222.633 34.4741 li
222.732 34.4238 li
222.833 34.374 li
222.982 34.3242 li
223.083 34.2739 li
223.183 34.2241 li
223.283 34.1738 li
223.383 34.124 li
223.482 34.0239 li
223.583 33.9741 li
223.683 33.9238 li
223.833 33.874 li
223.933 33.8242 li
224.033 33.7739 li
224.133 33.7241 li
224.232 33.6738 li
202.133 44.8735 mo
202.232 44.8237 li
202.333 44.7734 li
202.433 44.7236 li
202.583 44.6738 li
202.683 44.6235 li
202.783 44.5737 li
202.883 44.5234 li
202.982 44.4238 li
203.083 44.3735 li
203.183 44.3237 li
203.283 44.2734 li
203.433 44.2236 li
203.533 44.1738 li
203.633 44.1235 li
203.732 44.0737 li
203.833 44.0234 li
203.933 43.9736 li
204.033 43.9238 li
204.133 43.8735 li
204.283 43.7734 li
204.383 43.7236 li
204.482 43.6738 li
204.583 43.6235 li
204.683 43.5737 li
204.783 43.5239 li
204.883 43.4736 li
204.982 43.4238 li
205.133 43.3735 li
205.232 43.3237 li
205.333 43.2739 li
205.433 43.2236 li
205.533 43.1738 li
205.633 43.0737 li
205.732 43.0239 li
205.833 42.9736 li
205.982 42.9238 li
206.083 42.874 li
206.183 42.8237 li
206.283 42.7739 li
206.383 42.7236 li
206.482 42.6738 li
206.583 42.624 li
206.683 42.5737 li
206.833 42.5239 li
206.933 42.4736 li
207.033 42.374 li
207.133 42.3237 li
207.232 42.2739 li
207.333 42.2236 li
207.433 42.1738 li
207.533 42.124 li
207.683 42.0737 li
207.783 42.0239 li
207.883 41.9736 li
207.982 41.9238 li
208.083 41.874 li
208.183 41.8237 li
208.283 41.7739 li
208.383 41.6738 li
208.533 41.624 li
208.633 41.5737 li
208.732 41.5239 li
208.833 41.4736 li
208.933 41.4238 li
209.033 41.374 li
209.133 41.3237 li
209.232 41.2739 li
209.383 41.2236 li
209.482 41.1738 li
209.583 41.124 li
209.683 41.0737 li
209.783 40.9736 li
209.883 40.9238 li
209.982 40.874 li
210.083 40.8237 li
210.232 40.7739 li
210.333 40.7241 li
210.433 40.6738 li
210.533 40.624 li
210.633 40.5737 li
210.732 40.5239 li
210.833 40.4741 li
210.933 40.4238 li
211.083 40.374 li
211.183 40.2739 li
211.283 40.2241 li
211.383 40.1738 li
211.482 40.124 li
211.583 40.0742 li
211.683 40.0239 li
211.783 39.9741 li
211.933 39.9238 li
212.033 39.874 li
212.133 39.8242 li
212.232 39.7739 li
212.333 39.7241 li
212.433 39.6738 li
212.533 39.5742 li
212.633 39.5239 li
212.783 39.4741 li
212.883 39.4238 li
212.982 39.374 li
213.083 39.3242 li
213.183 39.2739 li
191.083 50.4736 mo
191.183 50.4238 li
191.283 50.3735 li
191.383 50.3237 li
191.533 50.2734 li
191.633 50.2236 li
191.732 50.1738 li
191.833 50.1235 li
191.933 50.0737 li
192.033 49.9736 li
192.133 49.9238 li
192.232 49.8735 li
192.383 49.8237 li
192.482 49.7734 li
192.583 49.7236 li
192.683 49.6738 li
192.783 49.6235 li
192.883 49.5737 li
192.982 49.5234 li
193.083 49.4736 li
193.232 49.4238 li
193.333 49.3237 li
193.433 49.2734 li
193.533 49.2236 li
193.633 49.1738 li
193.732 49.1235 li
193.833 49.0737 li
193.933 49.0239 li
194.083 48.9736 li
194.183 48.9238 li
194.283 48.8735 li
194.383 48.8237 li
194.482 48.7739 li
194.583 48.7236 li
194.683 48.6235 li
194.783 48.5737 li
194.933 48.5239 li
195.033 48.4736 li
195.133 48.4238 li
195.232 48.374 li
195.333 48.3237 li
195.433 48.2739 li
195.533 48.2236 li
195.633 48.1738 li
195.783 48.124 li
195.883 48.0737 li
195.982 48.0239 li
196.083 47.9238 li
196.183 47.874 li
196.283 47.8237 li
196.383 47.7739 li
196.482 47.7236 li
196.633 47.6738 li
196.732 47.624 li
196.833 47.5737 li
196.933 47.5239 li
197.033 47.4736 li
197.133 47.4238 li
197.232 47.374 li
197.333 47.3237 li
197.482 47.2236 li
197.583 47.1738 li
197.683 47.124 li
197.783 47.0737 li
197.883 47.0239 li
197.982 46.9736 li
198.083 46.9238 li
198.183 46.874 li
198.333 46.8237 li
198.433 46.7739 li
198.533 46.7236 li
198.633 46.6738 li
198.732 46.624 li
198.833 46.5239 li
198.933 46.4741 li
199.033 46.4238 li
199.183 46.374 li
199.283 46.3237 li
199.383 46.2739 li
199.482 46.2241 li
199.583 46.1738 li
199.683 46.124 li
199.783 46.0737 li
199.883 46.0239 li
200.033 45.9741 li
200.133 45.9238 li
200.232 45.8242 li
200.333 45.7739 li
200.433 45.7241 li
200.533 45.6738 li
200.633 45.624 li
200.732 45.5742 li
200.883 45.5239 li
200.982 45.4741 li
201.083 45.4238 li
201.183 45.374 li
201.283 45.3242 li
201.383 45.2739 li
201.482 45.2241 li
201.583 45.124 li
201.732 45.0742 li
201.833 45.0239 li
201.933 44.9741 li
202.033 44.9238 li
202.133 44.874 li
180.033 56.0737 mo
180.133 56.0234 li
180.232 55.9736 li
180.333 55.9238 li
180.482 55.8735 li
180.583 55.8237 li
180.683 55.7734 li
180.783 55.7236 li
180.883 55.6738 li
180.982 55.6235 li
181.083 55.5234 li
181.183 55.4736 li
181.333 55.4238 li
181.433 55.3735 li
181.533 55.3237 li
181.633 55.2734 li
181.732 55.2236 li
181.833 55.1738 li
181.933 55.1235 li
182.033 55.0737 li
182.183 55.0234 li
182.283 54.9736 li
182.383 54.9238 li
182.482 54.8237 li
182.583 54.7739 li
182.683 54.7236 li
182.783 54.6738 li
182.883 54.6235 li
183.033 54.5737 li
183.133 54.5239 li
183.232 54.4736 li
183.333 54.4238 li
183.433 54.3735 li
183.533 54.3237 li
183.633 54.2739 li
183.732 54.1738 li
183.883 54.124 li
183.982 54.0737 li
184.083 54.0239 li
184.183 53.9736 li
184.283 53.9238 li
184.383 53.874 li
184.482 53.8237 li
184.583 53.7739 li
184.732 53.7236 li
184.833 53.6738 li
184.933 53.624 li
185.033 53.5737 li
185.133 53.4736 li
185.232 53.4238 li
185.333 53.374 li
185.433 53.3237 li
185.583 53.2739 li
185.683 53.2236 li
185.783 53.1738 li
185.883 53.124 li
185.982 53.0737 li
186.083 53.0239 li
186.183 52.9736 li
186.283 52.9238 li
186.433 52.874 li
186.533 52.7739 li
186.633 52.7236 li
186.732 52.6738 li
186.833 52.624 li
186.933 52.5737 li
187.033 52.5239 li
187.133 52.4736 li
187.283 52.4238 li
187.383 52.374 li
187.482 52.3237 li
187.583 52.2739 li
187.683 52.2241 li
187.783 52.1738 li
187.883 52.0737 li
187.982 52.0239 li
188.133 51.9741 li
188.232 51.9238 li
188.333 51.874 li
188.433 51.8237 li
188.533 51.7739 li
188.633 51.7241 li
188.732 51.6738 li
188.833 51.624 li
188.982 51.5742 li
189.083 51.5239 li
189.183 51.4741 li
189.283 51.374 li
189.383 51.3242 li
189.482 51.2739 li
189.583 51.2241 li
189.683 51.1738 li
189.833 51.124 li
189.933 51.0742 li
190.033 51.0239 li
190.133 50.9741 li
190.232 50.9238 li
190.333 50.874 li
190.433 50.8242 li
190.533 50.7739 li
190.683 50.6738 li
190.783 50.624 li
190.883 50.5742 li
190.982 50.5239 li
191.083 50.4741 li
168.982 61.6738 mo
169.083 61.6235 li
169.183 61.5737 li
169.283 61.5234 li
169.433 61.4736 li
169.533 61.4238 li
169.633 61.3735 li
169.732 61.3237 li
169.833 61.2734 li
169.933 61.2236 li
170.033 61.1738 li
170.133 61.0737 li
170.283 61.0234 li
170.383 60.9736 li
170.482 60.9238 li
170.583 60.8735 li
170.683 60.8237 li
170.783 60.7734 li
170.883 60.7236 li
170.982 60.6738 li
171.133 60.6235 li
171.232 60.5737 li
171.333 60.5234 li
171.433 60.4736 li
171.533 60.3735 li
171.633 60.3237 li
171.732 60.2739 li
171.833 60.2236 li
171.982 60.1738 li
172.083 60.1235 li
172.183 60.0737 li
172.283 60.0239 li
172.383 59.9736 li
172.482 59.9238 li
172.583 59.8735 li
172.683 59.8237 li
172.833 59.7236 li
172.933 59.6738 li
173.033 59.624 li
173.133 59.5737 li
173.232 59.5239 li
173.333 59.4736 li
173.433 59.4238 li
173.533 59.374 li
173.683 59.3237 li
173.783 59.2739 li
173.883 59.2236 li
173.982 59.1738 li
174.083 59.124 li
174.183 59.0239 li
174.283 58.9736 li
174.383 58.9238 li
174.533 58.874 li
174.633 58.8237 li
174.732 58.7739 li
174.833 58.7236 li
174.933 58.6738 li
175.032 58.624 li
175.133 58.5737 li
175.232 58.5239 li
175.383 58.4736 li
175.482 58.4238 li
175.583 58.3237 li
175.683 58.2739 li
175.782 58.2236 li
175.883 58.1738 li
175.982 58.124 li
176.083 58.0737 li
176.232 58.0239 li
176.333 57.9736 li
176.433 57.9238 li
176.532 57.874 li
176.633 57.8237 li
176.732 57.7739 li
176.833 57.7241 li
176.933 57.624 li
177.083 57.5737 li
177.183 57.5239 li
177.282 57.4741 li
177.383 57.4238 li
177.482 57.374 li
177.583 57.3237 li
177.683 57.2739 li
177.782 57.2241 li
177.933 57.1738 li
178.032 57.124 li
178.133 57.0742 li
178.232 57.0239 li
178.333 56.9238 li
178.433 56.874 li
178.532 56.8242 li
178.633 56.7739 li
178.782 56.7241 li
178.883 56.6738 li
178.982 56.624 li
179.083 56.5742 li
179.183 56.5239 li
179.282 56.4741 li
179.383 56.4238 li
179.482 56.374 li
179.633 56.3242 li
179.732 56.2241 li
179.833 56.1738 li
179.933 56.124 li
180.032 56.0742 li
157.933 67.2734 mo
158.033 67.2236 li
158.133 67.1738 li
158.232 67.1235 li
158.383 67.0737 li
158.482 67.0234 li
158.583 66.9736 li
158.683 66.9238 li
158.783 66.8735 li
158.883 66.8237 li
158.982 66.7734 li
159.083 66.7236 li
159.232 66.6235 li
159.333 66.5737 li
159.433 66.5234 li
159.533 66.4736 li
159.633 66.4238 li
159.732 66.3735 li
159.833 66.3237 li
159.933 66.2734 li
160.083 66.2236 li
160.183 66.1738 li
160.283 66.1235 li
160.383 66.0737 li
160.482 66.0239 li
160.583 65.9238 li
160.683 65.8735 li
160.783 65.8237 li
160.933 65.7739 li
161.033 65.7236 li
161.133 65.6738 li
161.232 65.6235 li
161.333 65.5737 li
161.433 65.5239 li
161.533 65.4736 li
161.633 65.4238 li
161.783 65.374 li
161.883 65.2739 li
161.982 65.2236 li
162.083 65.1738 li
162.183 65.124 li
162.283 65.0737 li
162.383 65.0239 li
162.482 64.9736 li
162.633 64.9238 li
162.732 64.874 li
162.833 64.8237 li
162.933 64.7739 li
163.033 64.7236 li
163.133 64.6738 li
163.232 64.5737 li
163.333 64.5239 li
163.482 64.4736 li
163.583 64.4238 li
163.683 64.374 li
163.783 64.3237 li
163.883 64.2739 li
163.982 64.2236 li
164.083 64.1738 li
164.183 64.124 li
164.333 64.0737 li
164.433 64.0239 li
164.532 63.9736 li
164.633 63.874 li
164.732 63.8237 li
164.833 63.7739 li
164.933 63.7236 li
165.032 63.6738 li
165.183 63.624 li
165.282 63.5737 li
165.383 63.5239 li
165.482 63.4736 li
165.583 63.4238 li
165.683 63.374 li
165.782 63.3237 li
165.883 63.2739 li
166.032 63.1738 li
166.133 63.124 li
166.232 63.0737 li
166.333 63.0239 li
166.433 62.9741 li
166.532 62.9238 li
166.633 62.874 li
166.732 62.8237 li
166.883 62.7739 li
166.982 62.7241 li
167.083 62.6738 li
167.183 62.624 li
167.282 62.5742 li
167.383 62.4741 li
167.482 62.4238 li
167.583 62.374 li
167.732 62.3242 li
167.833 62.2739 li
167.933 62.2241 li
168.032 62.1738 li
168.133 62.124 li
168.232 62.0742 li
168.333 62.0239 li
168.433 61.9741 li
168.583 61.9238 li
168.683 61.874 li
168.782 61.7739 li
168.883 61.7241 li
168.982 61.6738 li
@
0.5 lw
[] 0 dsh
120.083 182.724 mo
116.933 182.724 li
13.9326 182.724 mo
17.083 182.724 li
157.933 3.67383 mo
157.933 81.9736 li
264.083 81.9736 li
264.083 3.67383 li
157.933 3.67383 li
157.933 3.67383 li
cp
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 185.06 mo( )sh5.83594 185.06 mo(0)sh120.083 172.923 mo
116.933 172.923 li
13.9326 172.923 mo
17.083 172.923 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 175.255 mo( )sh5.83594 175.255 mo(2)sh120.083 163.125 mo
116.933 163.125 li
13.9326 163.125 mo
17.083 163.125 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 165.458 mo( )sh5.83594 165.458 mo(4)sh120.083 153.324 mo
116.933 153.324 li
13.9326 153.324 mo
17.083 153.324 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 155.662 mo( )sh5.83594 155.662 mo(6)sh120.083 143.523 mo
116.933 143.523 li
13.9326 143.523 mo
17.083 143.523 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 145.857 mo( )sh5.83594 145.857 mo(8)sh120.083 133.773 mo
116.933 133.773 li
13.9326 133.773 mo
17.083 133.773 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 136.107 mo( 10)[1.9458 3.89209 0 ]xsh120.083 123.974 mo
116.933 123.974 li
13.9326 123.974 mo
17.083 123.974 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 126.31 mo( 12)[1.9458 3.89209 0 ]xsh120.083 114.173 mo
116.933 114.173 li
13.9326 114.173 mo
17.083 114.173 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 116.505 mo( 14)[1.9458 3.89209 0 ]xsh120.083 104.375 mo
116.933 104.375 li
13.9326 104.375 mo
17.083 104.375 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf0 106.701 mo( 16)[1.9458 3.89209 0 ]xsh13.9326 104.375 mo
13.9326 107.523 li
13.9326 182.724 mo
13.9326 179.574 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf11.0156 192.052 mo( )sh12.9531 192.052 mo(0)sh38.083 104.375 mo
38.083 107.523 li
38.083 182.724 mo
38.083 179.574 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf35.1563 192.052 mo( )sh37.1094 192.052 mo(5)sh62.1826 104.375 mo
62.1826 107.523 li
62.1826 182.724 mo
62.1826 179.574 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf57.3125 192.052 mo( 10)[1.9458 3.89209 0 ]xsh86.333 104.375 mo
86.333 107.523 li
86.333 182.724 mo
86.333 179.574 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf81.4688 192.052 mo( 15)[1.9458 3.89209 0 ]xsh110.433 104.375 mo
110.433 107.523 li
110.433 182.724 mo
110.433 179.574 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf105.57 192.052 mo( 20)[1.9458 3.89209 0 ]xsh13.9326 104.375 mo
13.9326 182.724 li
120.083 182.724 li
120.083 104.375 li
13.9326 104.375 li
13.9326 104.375 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWCW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B6079F22E07CDD698967474547499A046CA6108DBC03A99D050F43EC0939593DCBE2D36ADBBAFB7F4B6F674E545889C28BDF2C528A201492F729C5289E096795ACB3E8B74F794BD95CD345203B50927FB3BCDBBCBA8BBFF702C4> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWCW+Helvetica /Encoding getdup 67 /C putpop%ADOEndSubsetFont
/DVPWCW+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight 8{/.notdef}rp /A /B /C 188{/.notdef}rp]DVPWCW+Helvetica nfDVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf23.5781 116.505 mo(C)sh0.25 lw
64.043 146.164 mo
64.043 145.121 63.1963 144.273 62.1528 144.273 cv
61.1094 144.273 60.2627 145.121 60.2627 146.164 cv
60.2627 147.207 61.1094 148.054 62.1528 148.054 cv
63.1963 148.054 64.043 147.207 64.043 146.164 cv
@
1 lc
62.1826 146.173 mo
62.1826 146.173 li
@
0 lc
54.4429 149.644 mo
54.4429 148.601 53.5962 147.753 52.5527 147.753 cv
51.5098 147.753 50.6626 148.601 50.6626 149.644 cv
50.6626 150.687 51.5098 151.533 52.5527 151.533 cv
53.5962 151.533 54.4429 150.687 54.4429 149.644 cv
@
1 lc
52.5327 149.574 mo
52.5327 149.574 li
@
0 lc
78.563 120.363 mo
78.563 119.32 77.7163 118.474 76.6729 118.474 cv
75.6294 118.474 74.7827 119.32 74.7827 120.363 cv
74.7827 121.408 75.6294 122.253 76.6729 122.253 cv
77.7163 122.253 78.563 121.408 78.563 120.363 cv
@
1 lc
76.6826 120.324 mo
76.6826 120.324 li
@
0 lc
59.2427 147.964 mo
59.2427 146.919 58.396 146.074 57.353 146.074 cv
56.3096 146.074 55.4629 146.919 55.4629 147.964 cv
55.4629 149.007 56.3096 149.853 57.353 149.853 cv
58.396 149.853 59.2427 149.007 59.2427 147.964 cv
@
1 lc
57.3828 147.923 mo
57.3828 147.923 li
@
0 lc
68.9629 144.484 mo
68.9629 143.441 68.1162 142.593 67.0728 142.593 cv
66.0293 142.593 65.1826 143.441 65.1826 144.484 cv
65.1826 145.527 66.0293 146.375 67.0728 146.375 cv
68.1162 146.375 68.9629 145.527 68.9629 144.484 cv
@
1 lc
67.0327 144.474 mo
67.0327 144.474 li
@
0 lc
83.3628 139.443 mo
83.3628 138.4 82.5161 137.554 81.4727 137.554 cv
80.4297 137.554 79.583 138.4 79.583 139.443 cv
79.583 140.488 80.4297 141.333 81.4727 141.333 cv
82.5161 141.333 83.3628 140.488 83.3628 139.443 cv
@
1 lc
81.4829 139.423 mo
81.4829 139.423 li
@
0 lc
44.7227 153.003 mo
44.7227 151.96 43.876 151.113 42.833 151.113 cv
41.7896 151.113 40.9429 151.96 40.9429 153.003 cv
40.9429 154.046 41.7896 154.894 42.833 154.894 cv
43.876 154.894 44.7227 154.046 44.7227 153.003 cv
@
1 lc
42.8828 152.974 mo
42.8828 152.974 li
@
0 lc
35.123 156.363 mo
35.123 155.32 34.2759 154.474 33.2329 154.474 cv
32.1895 154.474 31.3428 155.32 31.3428 156.363 cv
31.3428 157.408 32.1895 158.253 33.2329 158.253 cv
34.2759 158.253 35.123 157.408 35.123 156.363 cv
@
1 lc
33.2329 156.324 mo
33.2329 156.324 li
@
0 lc
73.7627 142.804 mo
73.7627 141.761 72.916 140.914 71.873 140.914 cv
70.8296 140.914 69.9829 141.761 69.9829 142.804 cv
69.9829 143.847 70.8296 144.693 71.873 144.693 cv
72.916 144.693 73.7627 143.847 73.7627 142.804 cv
@
1 lc
71.833 142.824 mo
71.833 142.824 li
@
0 lc
49.6426 151.324 mo
49.6426 150.281 48.7959 149.433 47.7529 149.433 cv
46.7095 149.433 45.8628 150.281 45.8628 151.324 cv
45.8628 152.367 46.7095 153.214 47.7529 153.214 cv
48.7959 153.214 49.6426 152.367 49.6426 151.324 cv
@
1 lc
47.7329 151.273 mo
47.7329 151.273 li
@
0 lc
39.9229 154.683 mo
39.9229 153.64 39.0762 152.794 38.0327 152.794 cv
36.9897 152.794 36.1426 153.64 36.1426 154.683 cv
36.1426 155.726 36.9897 156.574 38.0327 156.574 cv
39.0762 156.574 39.9229 155.726 39.9229 154.683 cv
@
1 lc
38.083 154.673 mo
38.083 154.673 li
@
0 lc
[4 2 ] 0 dsh
113.383 117.574 mo
113.483 117.523 li
113.583 117.474 li
113.683 117.423 li
113.833 117.375 li
113.933 117.273 li
114.033 117.224 li
114.133 117.173 li
114.233 117.125 li
114.333 117.074 li
114.433 117.023 li
114.533 116.974 li
114.683 116.923 li
114.783 116.873 li
114.883 116.824 li
114.983 116.773 li
115.083 116.724 li
115.183 116.623 li
115.283 116.574 li
115.383 116.523 li
115.533 116.474 li
115.633 116.423 li
115.733 116.373 li
115.833 116.324 li
115.933 116.273 li
116.033 116.224 li
116.133 116.173 li
116.233 116.123 li
116.383 116.074 li
116.483 116.023 li
116.583 115.923 li
116.683 115.873 li
116.783 115.824 li
116.883 115.773 li
116.983 115.724 li
117.083 115.673 li
117.233 115.623 li
117.333 115.574 li
117.433 115.523 li
117.533 115.474 li
117.633 115.423 li
117.733 115.373 li
117.833 115.324 li
117.933 115.224 li
118.083 115.173 li
118.183 115.123 li
118.283 115.074 li
118.383 115.023 li
118.483 114.974 li
118.583 114.923 li
118.683 114.873 li
118.783 114.824 li
118.933 114.773 li
119.033 114.724 li
119.133 114.673 li
119.233 114.623 li
119.333 114.523 li
119.433 114.474 li
119.533 114.423 li
119.633 114.373 li
119.783 114.324 li
119.883 114.273 li
119.983 114.222 li
120.083 114.173 li
102.333 123.173 mo
102.433 123.125 li
102.533 123.074 li
102.633 123.023 li
102.783 122.974 li
102.883 122.923 li
102.983 122.824 li
103.083 122.773 li
103.183 122.724 li
103.283 122.673 li
103.383 122.623 li
103.483 122.574 li
103.633 122.523 li
103.733 122.474 li
103.833 122.423 li
103.933 122.373 li
104.033 122.324 li
104.133 122.273 li
104.233 122.224 li
104.333 122.123 li
104.483 122.074 li
104.583 122.023 li
104.683 121.974 li
104.783 121.923 li
104.883 121.873 li
104.983 121.824 li
105.083 121.773 li
105.183 121.724 li
105.333 121.673 li
105.433 121.623 li
105.533 121.574 li
105.633 121.523 li
105.733 121.423 li
105.833 121.373 li
105.933 121.324 li
106.033 121.273 li
106.183 121.224 li
106.283 121.173 li
106.383 121.123 li
106.483 121.074 li
106.583 121.023 li
106.683 120.974 li
106.783 120.923 li
106.883 120.873 li
107.033 120.824 li
107.133 120.724 li
107.233 120.673 li
107.333 120.623 li
107.433 120.574 li
107.533 120.523 li
107.633 120.474 li
107.733 120.423 li
107.883 120.373 li
107.983 120.324 li
108.083 120.273 li
108.183 120.224 li
108.283 120.173 li
108.383 120.074 li
108.483 120.023 li
108.583 119.972 li
108.733 119.923 li
108.833 119.873 li
108.933 119.824 li
109.033 119.773 li
109.133 119.722 li
109.233 119.673 li
109.333 119.623 li
109.433 119.574 li
109.583 119.523 li
109.683 119.472 li
109.783 119.373 li
109.883 119.324 li
109.983 119.273 li
110.083 119.222 li
110.183 119.173 li
110.283 119.123 li
110.433 119.074 li
110.533 119.023 li
110.633 118.972 li
110.733 118.923 li
110.833 118.873 li
110.933 118.824 li
111.033 118.773 li
111.133 118.673 li
111.283 118.623 li
111.383 118.574 li
111.483 118.523 li
111.583 118.472 li
111.683 118.423 li
111.783 118.373 li
111.883 118.324 li
111.983 118.273 li
112.133 118.222 li
112.233 118.173 li
112.333 118.123 li
112.433 118.074 li
112.533 117.972 li
112.633 117.923 li
112.733 117.873 li
112.833 117.824 li
112.983 117.773 li
113.083 117.722 li
113.183 117.673 li
113.283 117.623 li
113.383 117.572 li
91.2827 128.773 mo
91.3828 128.724 li
91.4829 128.673 li
91.583 128.625 li
91.7329 128.574 li
91.833 128.523 li
91.9326 128.474 li
92.0327 128.423 li
92.1328 128.324 li
92.2329 128.273 li
92.333 128.224 li
92.4326 128.173 li
92.583 128.123 li
92.6826 128.074 li
92.7827 128.023 li
92.8828 127.974 li
92.9829 127.923 li
93.083 127.873 li
93.1831 127.824 li
93.2827 127.773 li
93.4331 127.724 li
93.5327 127.623 li
93.6328 127.574 li
93.7329 127.523 li
93.833 127.474 li
93.9331 127.423 li
94.0327 127.373 li
94.1328 127.324 li
94.2827 127.273 li
94.3828 127.224 li
94.4829 127.173 li
94.583 127.123 li
94.6831 127.074 li
94.7832 127.023 li
94.8828 126.923 li
94.9829 126.873 li
95.1328 126.824 li
95.2329 126.773 li
95.333 126.724 li
95.4331 126.673 li
95.5332 126.623 li
95.6328 126.574 li
95.7329 126.523 li
95.833 126.474 li
95.9829 126.423 li
96.083 126.373 li
96.1831 126.324 li
96.2832 126.224 li
96.3828 126.173 li
96.4829 126.123 li
96.583 126.074 li
96.6831 126.023 li
96.833 125.974 li
96.9331 125.923 li
97.0332 125.873 li
97.1328 125.824 li
97.2329 125.773 li
97.333 125.722 li
97.4331 125.673 li
97.5332 125.574 li
97.6831 125.523 li
97.7832 125.472 li
97.8828 125.423 li
97.9829 125.373 li
98.083 125.324 li
98.1831 125.273 li
98.2832 125.222 li
98.3833 125.173 li
98.5332 125.123 li
98.6333 125.074 li
98.7329 125.023 li
98.833 124.972 li
98.9331 124.873 li
99.0332 124.824 li
99.1333 124.773 li
99.2329 124.722 li
99.3833 124.673 li
99.4834 124.623 li
99.583 124.574 li
99.6831 124.523 li
99.7832 124.472 li
99.8833 124.423 li
99.9834 124.373 li
100.083 124.324 li
100.233 124.273 li
100.333 124.173 li
100.433 124.123 li
100.533 124.074 li
100.633 124.023 li
100.733 123.972 li
100.833 123.923 li
100.933 123.873 li
101.083 123.824 li
101.183 123.773 li
101.283 123.722 li
101.383 123.673 li
101.483 123.623 li
101.583 123.574 li
101.683 123.472 li
101.783 123.423 li
101.933 123.373 li
102.033 123.324 li
102.133 123.273 li
102.233 123.222 li
102.333 123.173 li
80.2329 134.375 mo
80.333 134.324 li
80.4326 134.273 li
80.5327 134.224 li
80.6826 134.173 li
80.7827 134.125 li
80.8828 134.074 li
80.9829 134.023 li
81.083 133.974 li
81.1826 133.923 li
81.2827 133.824 li
81.3828 133.773 li
81.5327 133.724 li
81.6328 133.673 li
81.7329 133.623 li
81.833 133.574 li
81.9331 133.523 li
82.0327 133.474 li
82.1328 133.423 li
82.2329 133.373 li
82.3828 133.324 li
82.4829 133.273 li
82.583 133.224 li
82.6831 133.123 li
82.7827 133.074 li
82.8828 133.023 li
82.9829 132.974 li
83.083 132.923 li
83.2329 132.873 li
83.333 132.824 li
83.4331 132.773 li
83.5332 132.724 li
83.6328 132.673 li
83.7329 132.623 li
83.833 132.574 li
83.9331 132.523 li
84.083 132.423 li
84.1831 132.373 li
84.2832 132.324 li
84.3828 132.273 li
84.4829 132.224 li
84.583 132.173 li
84.6831 132.123 li
84.7832 132.074 li
84.9331 132.023 li
85.0332 131.974 li
85.1328 131.923 li
85.2329 131.873 li
85.333 131.824 li
85.4331 131.724 li
85.5332 131.673 li
85.6328 131.623 li
85.7832 131.574 li
85.8828 131.523 li
85.9829 131.474 li
86.083 131.423 li
86.1831 131.373 li
86.2832 131.324 li
86.3828 131.273 li
86.4829 131.222 li
86.6328 131.173 li
86.7329 131.074 li
86.833 131.023 li
86.9331 130.972 li
87.0332 130.923 li
87.1333 130.873 li
87.2329 130.824 li
87.333 130.773 li
87.4829 130.722 li
87.583 130.673 li
87.6831 130.623 li
87.7832 130.574 li
87.8833 130.523 li
87.9829 130.472 li
88.083 130.373 li
88.1831 130.324 li
88.333 130.273 li
88.4331 130.222 li
88.5332 130.173 li
88.6333 130.123 li
88.7334 130.074 li
88.833 130.023 li
88.9331 129.972 li
89.0332 129.923 li
89.1831 129.873 li
89.2832 129.824 li
89.3833 129.773 li
89.4834 129.673 li
89.583 129.623 li
89.6831 129.574 li
89.7832 129.523 li
89.8833 129.472 li
90.0332 129.423 li
90.1333 129.373 li
90.2334 129.324 li
90.333 129.273 li
90.4331 129.222 li
90.5332 129.173 li
90.6333 129.123 li
90.7334 129.074 li
90.8833 128.972 li
90.9834 128.923 li
91.083 128.873 li
91.1831 128.824 li
91.2832 128.773 li
69.1826 139.974 mo
69.2827 139.923 li
69.3828 139.875 li
69.4829 139.824 li
69.6328 139.773 li
69.7329 139.724 li
69.833 139.673 li
69.9326 139.625 li
70.0327 139.574 li
70.1328 139.523 li
70.2329 139.474 li
70.333 139.423 li
70.4829 139.324 li
70.583 139.273 li
70.6831 139.224 li
70.7827 139.173 li
70.8828 139.123 li
70.9829 139.074 li
71.083 139.023 li
71.1831 138.974 li
71.333 138.923 li
71.4331 138.873 li
71.5327 138.824 li
71.6328 138.773 li
71.7329 138.724 li
71.833 138.623 li
71.9331 138.574 li
72.0327 138.523 li
72.1831 138.474 li
72.2827 138.423 li
72.3828 138.373 li
72.4829 138.324 li
72.583 138.273 li
72.6831 138.224 li
72.7832 138.173 li
72.8828 138.123 li
73.0332 138.074 li
73.1328 138.023 li
73.2329 137.923 li
73.333 137.873 li
73.4331 137.824 li
73.5332 137.773 li
73.6328 137.724 li
73.7329 137.673 li
73.8828 137.623 li
73.9829 137.574 li
74.083 137.523 li
74.1831 137.474 li
74.2832 137.423 li
74.3828 137.373 li
74.4829 137.324 li
74.583 137.224 li
74.7329 137.173 li
74.833 137.123 li
74.9331 137.074 li
75.0332 137.023 li
75.1328 136.972 li
75.2329 136.923 li
75.333 136.873 li
75.4331 136.824 li
75.583 136.773 li
75.6831 136.722 li
75.7832 136.673 li
75.8833 136.574 li
75.9829 136.523 li
76.083 136.472 li
76.1831 136.423 li
76.2832 136.373 li
76.4331 136.324 li
76.5332 136.273 li
76.6333 136.222 li
76.7329 136.173 li
76.833 136.123 li
76.9331 136.074 li
77.0332 136.023 li
77.1333 135.972 li
77.2832 135.873 li
77.3833 135.824 li
77.4829 135.773 li
77.583 135.722 li
77.6831 135.673 li
77.7832 135.623 li
77.8833 135.574 li
77.9834 135.523 li
78.1333 135.472 li
78.2334 135.423 li
78.333 135.373 li
78.4331 135.324 li
78.5332 135.273 li
78.6333 135.173 li
78.7334 135.123 li
78.833 135.074 li
78.9834 135.023 li
79.083 134.972 li
79.1831 134.923 li
79.2832 134.873 li
79.3833 134.824 li
79.4834 134.773 li
79.583 134.722 li
79.6831 134.673 li
79.833 134.623 li
79.9331 134.574 li
80.0332 134.472 li
80.1333 134.423 li
80.2334 134.373 li
58.1328 145.625 mo
58.2329 145.523 li
58.333 145.474 li
58.4326 145.423 li
58.583 145.375 li
58.6826 145.324 li
58.7827 145.273 li
58.8828 145.224 li
58.9829 145.173 li
59.083 145.125 li
59.1826 145.074 li
59.2827 145.023 li
59.4326 144.974 li
59.5327 144.923 li
59.6328 144.824 li
59.7329 144.773 li
59.833 144.724 li
59.9331 144.673 li
60.0327 144.623 li
60.1328 144.574 li
60.2827 144.523 li
60.3828 144.474 li
60.4829 144.423 li
60.583 144.373 li
60.6831 144.324 li
60.7827 144.273 li
60.8828 144.224 li
60.9829 144.123 li
61.1328 144.074 li
61.2329 144.023 li
61.333 143.974 li
61.4331 143.923 li
61.5327 143.873 li
61.6328 143.824 li
61.7329 143.773 li
61.833 143.724 li
61.9829 143.673 li
62.083 143.623 li
62.1831 143.574 li
62.2832 143.523 li
62.3828 143.423 li
62.4829 143.373 li
62.583 143.324 li
62.6831 143.273 li
62.833 143.224 li
62.9331 143.173 li
63.0332 143.123 li
63.1328 143.074 li
63.2329 143.023 li
63.333 142.974 li
63.4331 142.923 li
63.5332 142.873 li
63.6831 142.824 li
63.7832 142.724 li
63.8828 142.673 li
63.9829 142.623 li
64.083 142.574 li
64.1831 142.523 li
64.2832 142.474 li
64.3828 142.423 li
64.5332 142.373 li
64.6328 142.324 li
64.7329 142.273 li
64.833 142.222 li
64.9331 142.173 li
65.0332 142.074 li
65.1333 142.023 li
65.2329 141.972 li
65.3833 141.923 li
65.4829 141.873 li
65.583 141.824 li
65.6831 141.773 li
65.7832 141.722 li
65.8833 141.673 li
65.9829 141.623 li
66.083 141.574 li
66.2329 141.523 li
66.333 141.472 li
66.4331 141.373 li
66.5332 141.324 li
66.6333 141.273 li
66.7334 141.222 li
66.833 141.173 li
66.9331 141.123 li
67.083 141.074 li
67.1831 141.023 li
67.2832 140.972 li
67.3833 140.923 li
67.4834 140.873 li
67.583 140.824 li
67.6831 140.773 li
67.7832 140.673 li
67.9331 140.623 li
68.0332 140.574 li
68.1333 140.523 li
68.2334 140.472 li
68.333 140.423 li
68.4331 140.373 li
68.5332 140.324 li
68.6333 140.273 li
68.7832 140.222 li
68.8833 140.173 li
68.9834 140.123 li
69.083 140.074 li
69.1831 139.972 li
47.083 151.224 mo
47.1826 151.173 li
47.2827 151.125 li
47.3828 151.023 li
47.5327 150.974 li
47.6328 150.923 li
47.7329 150.875 li
47.833 150.824 li
47.9326 150.773 li
48.0327 150.724 li
48.1328 150.673 li
48.2329 150.623 li
48.3828 150.574 li
48.4829 150.523 li
48.583 150.474 li
48.6831 150.423 li
48.7827 150.324 li
48.8828 150.273 li
48.9829 150.224 li
49.083 150.173 li
49.2329 150.123 li
49.333 150.074 li
49.4331 150.023 li
49.5327 149.974 li
49.6328 149.923 li
49.7329 149.873 li
49.833 149.824 li
49.9331 149.773 li
50.083 149.724 li
50.1831 149.623 li
50.2827 149.574 li
50.3828 149.523 li
50.4829 149.474 li
50.583 149.423 li
50.6831 149.373 li
50.7832 149.324 li
50.9331 149.273 li
51.0332 149.224 li
51.1328 149.173 li
51.2329 149.123 li
51.333 149.074 li
51.4331 149.023 li
51.5332 148.923 li
51.6328 148.873 li
51.7832 148.824 li
51.8828 148.773 li
51.9829 148.724 li
52.083 148.673 li
52.1831 148.623 li
52.2832 148.574 li
52.3828 148.523 li
52.4829 148.474 li
52.6328 148.423 li
52.7329 148.373 li
52.833 148.273 li
52.9331 148.224 li
53.0332 148.173 li
53.1328 148.123 li
53.2329 148.074 li
53.333 148.023 li
53.4829 147.972 li
53.583 147.923 li
53.6831 147.873 li
53.7832 147.824 li
53.8833 147.773 li
53.9829 147.722 li
54.083 147.673 li
54.1831 147.574 li
54.333 147.523 li
54.4331 147.472 li
54.5332 147.423 li
54.6333 147.373 li
54.7329 147.324 li
54.833 147.273 li
54.9331 147.222 li
55.0332 147.173 li
55.1831 147.123 li
55.2832 147.074 li
55.3833 147.023 li
55.4834 146.972 li
55.583 146.873 li
55.6831 146.824 li
55.7832 146.773 li
55.8833 146.722 li
56.0332 146.673 li
56.1333 146.623 li
56.2334 146.574 li
56.333 146.523 li
56.4331 146.472 li
56.5332 146.423 li
56.6333 146.373 li
56.7334 146.324 li
56.8833 146.273 li
56.9834 146.173 li
57.083 146.123 li
57.1831 146.074 li
57.2832 146.023 li
57.3833 145.972 li
57.4834 145.923 li
57.583 145.873 li
57.7334 145.824 li
57.833 145.773 li
57.9331 145.722 li
58.0332 145.673 li
58.1333 145.623 li
36.0327 156.824 mo
36.1328 156.773 li
36.2329 156.724 li
36.333 156.673 li
36.4829 156.625 li
36.583 156.523 li
36.6826 156.474 li
36.7827 156.423 li
36.8828 156.375 li
36.9829 156.324 li
37.083 156.273 li
37.1826 156.224 li
37.333 156.173 li
37.4326 156.123 li
37.5327 156.074 li
37.6328 156.023 li
37.7329 155.974 li
37.833 155.923 li
37.9331 155.824 li
38.0327 155.773 li
38.1831 155.724 li
38.2827 155.673 li
38.3828 155.623 li
38.4829 155.574 li
38.583 155.523 li
38.6831 155.474 li
38.7827 155.423 li
38.8828 155.373 li
39.0327 155.324 li
39.1328 155.273 li
39.2329 155.224 li
39.333 155.123 li
39.4331 155.074 li
39.5327 155.023 li
39.6328 154.974 li
39.7329 154.923 li
39.8828 154.873 li
39.9829 154.824 li
40.083 154.773 li
40.1831 154.724 li
40.2832 154.673 li
40.3828 154.623 li
40.4829 154.574 li
40.583 154.523 li
40.7329 154.423 li
40.833 154.373 li
40.9331 154.324 li
41.0332 154.273 li
41.1328 154.224 li
41.2329 154.173 li
41.333 154.123 li
41.4331 154.074 li
41.583 154.023 li
41.6831 153.974 li
41.7832 153.923 li
41.8828 153.873 li
41.9829 153.773 li
42.083 153.724 li
42.1831 153.673 li
42.2832 153.623 li
42.4331 153.574 li
42.5332 153.523 li
42.6333 153.472 li
42.7329 153.423 li
42.833 153.373 li
42.9331 153.324 li
43.0332 153.273 li
43.1333 153.222 li
43.2832 153.173 li
43.3833 153.074 li
43.4829 153.023 li
43.583 152.972 li
43.6831 152.923 li
43.7832 152.873 li
43.8833 152.824 li
43.9829 152.773 li
44.1333 152.722 li
44.2329 152.673 li
44.333 152.623 li
44.4331 152.574 li
44.5332 152.523 li
44.6333 152.472 li
44.7334 152.373 li
44.833 152.324 li
44.9834 152.273 li
45.083 152.222 li
45.1831 152.173 li
45.2832 152.123 li
45.3833 152.074 li
45.4834 152.023 li
45.583 151.972 li
45.6831 151.923 li
45.833 151.873 li
45.9331 151.824 li
46.0332 151.773 li
46.1333 151.673 li
46.2334 151.623 li
46.333 151.574 li
46.4331 151.523 li
46.5332 151.472 li
46.6831 151.423 li
46.7832 151.373 li
46.8833 151.324 li
46.9834 151.273 li
47.083 151.222 li
24.9829 162.423 mo
25.083 162.375 li
25.1826 162.324 li
25.2827 162.273 li
25.4326 162.224 li
25.5327 162.173 li
25.6328 162.125 li
25.7329 162.023 li
25.833 161.974 li
25.9326 161.923 li
26.0327 161.875 li
26.1328 161.824 li
26.2827 161.773 li
26.3828 161.724 li
26.4829 161.673 li
26.583 161.623 li
26.6831 161.574 li
26.7827 161.523 li
26.8828 161.474 li
26.9829 161.423 li
27.1328 161.324 li
27.2329 161.273 li
27.333 161.224 li
27.4331 161.173 li
27.5327 161.123 li
27.6328 161.074 li
27.7329 161.023 li
27.833 160.974 li
27.9829 160.923 li
28.083 160.873 li
28.1831 160.824 li
28.2827 160.773 li
28.3828 160.724 li
28.4829 160.623 li
28.583 160.574 li
28.6831 160.523 li
28.833 160.474 li
28.9331 160.423 li
29.0332 160.373 li
29.1328 160.324 li
29.2329 160.273 li
29.333 160.224 li
29.4331 160.173 li
29.5332 160.123 li
29.6831 160.074 li
29.7832 160.023 li
29.8828 159.923 li
29.9829 159.873 li
30.083 159.824 li
30.1831 159.773 li
30.2832 159.724 li
30.3828 159.673 li
30.5332 159.623 li
30.6328 159.574 li
30.7329 159.523 li
30.833 159.474 li
30.9331 159.423 li
31.0332 159.373 li
31.1328 159.273 li
31.2329 159.224 li
31.3828 159.173 li
31.4829 159.123 li
31.583 159.074 li
31.6831 159.023 li
31.7832 158.972 li
31.8833 158.923 li
31.9829 158.873 li
32.083 158.824 li
32.2329 158.773 li
32.333 158.722 li
32.4331 158.673 li
32.5332 158.574 li
32.6333 158.523 li
32.7329 158.472 li
32.833 158.423 li
32.9331 158.373 li
33.083 158.324 li
33.1831 158.273 li
33.2832 158.222 li
33.3833 158.173 li
33.4829 158.123 li
33.583 158.074 li
33.6831 158.023 li
33.7832 157.972 li
33.9331 157.873 li
34.0332 157.824 li
34.1333 157.773 li
34.2334 157.722 li
34.333 157.673 li
34.4331 157.623 li
34.5332 157.574 li
34.6333 157.523 li
34.7832 157.472 li
34.8833 157.423 li
34.9834 157.373 li
35.083 157.324 li
35.1831 157.273 li
35.2832 157.173 li
35.3833 157.123 li
35.4834 157.074 li
35.6333 157.023 li
35.7334 156.972 li
35.833 156.923 li
35.9331 156.873 li
36.0332 156.824 li
13.9326 168.023 mo
14.0327 167.974 li
14.1328 167.923 li
14.2329 167.875 li
14.3828 167.824 li
14.4829 167.773 li
14.583 167.724 li
14.6826 167.673 li
14.7827 167.623 li
14.8828 167.523 li
14.9829 167.474 li
15.083 167.423 li
15.2329 167.373 li
15.333 167.324 li
15.4331 167.273 li
15.5327 167.224 li
15.6328 167.173 li
15.7329 167.123 li
15.833 167.074 li
15.9331 167.023 li
16.083 166.974 li
16.1831 166.923 li
16.2827 166.824 li
16.3828 166.773 li
16.4829 166.724 li
16.583 166.673 li
16.6831 166.623 li
16.7827 166.574 li
16.9331 166.523 li
17.0327 166.474 li
17.1328 166.423 li
17.2329 166.373 li
17.333 166.324 li
17.4331 166.273 li
17.5332 166.224 li
17.6328 166.123 li
17.7832 166.074 li
17.8828 166.023 li
17.9829 165.974 li
18.083 165.923 li
18.1831 165.873 li
18.2832 165.824 li
18.3828 165.773 li
18.4829 165.724 li
18.6328 165.673 li
18.7329 165.623 li
18.833 165.574 li
18.9331 165.523 li
19.0332 165.423 li
19.1328 165.373 li
19.2329 165.324 li
19.333 165.273 li
19.4829 165.224 li
19.583 165.173 li
19.6831 165.123 li
19.7832 165.074 li
19.8828 165.023 li
19.9829 164.972 li
20.083 164.923 li
20.1831 164.873 li
20.333 164.773 li
20.4331 164.722 li
20.5332 164.673 li
20.6333 164.623 li
20.7329 164.574 li
20.833 164.523 li
20.9331 164.472 li
21.0332 164.423 li
21.1831 164.373 li
21.2832 164.324 li
21.3833 164.273 li
21.4829 164.222 li
21.583 164.173 li
21.6831 164.074 li
21.7832 164.023 li
21.8833 163.972 li
22.0332 163.923 li
22.1333 163.873 li
22.2329 163.824 li
22.333 163.773 li
22.4331 163.722 li
22.5332 163.673 li
22.6333 163.623 li
22.7334 163.574 li
22.8833 163.523 li
22.9834 163.472 li
23.083 163.373 li
23.1831 163.324 li
23.2832 163.273 li
23.3833 163.222 li
23.4834 163.173 li
23.583 163.123 li
23.7334 163.074 li
23.833 163.023 li
23.9331 162.972 li
24.0332 162.923 li
24.1333 162.873 li
24.2334 162.824 li
24.333 162.773 li
24.4331 162.673 li
24.583 162.623 li
24.6831 162.574 li
24.7832 162.523 li
24.8833 162.472 li
24.9834 162.423 li
@
0.5 lw
[] 0 dsh
264.083 182.724 mo
260.933 182.724 li
157.933 182.724 mo
161.083 182.724 li
13.9326 104.375 mo
13.9326 182.724 li
120.083 182.724 li
120.083 104.375 li
13.9326 104.375 li
13.9326 104.375 li
cp
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf147.891 185.06 mo( )sh149.836 185.06 mo(0)sh264.083 172.923 mo
260.933 172.923 li
157.933 172.923 mo
161.083 172.923 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf147.891 175.255 mo( )sh149.836 175.255 mo(2)sh264.083 163.125 mo
260.933 163.125 li
157.933 163.125 mo
161.083 163.125 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf147.891 165.458 mo( )sh149.836 165.458 mo(4)sh264.083 153.324 mo
260.933 153.324 li
157.933 153.324 mo
161.083 153.324 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf147.891 155.662 mo( )sh149.836 155.662 mo(6)sh264.083 143.523 mo
260.933 143.523 li
157.933 143.523 mo
161.083 143.523 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf147.891 145.857 mo( )sh149.836 145.857 mo(8)sh264.083 133.773 mo
260.933 133.773 li
157.933 133.773 mo
161.083 133.773 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf144 136.107 mo( 10)[1.94629 3.8916 0 ]xsh264.083 123.974 mo
260.933 123.974 li
157.933 123.974 mo
161.083 123.974 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf144 126.31 mo( 12)[1.94629 3.8916 0 ]xsh264.083 114.173 mo
260.933 114.173 li
157.933 114.173 mo
161.083 114.173 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf144 116.505 mo( 14)[1.94629 3.8916 0 ]xsh264.083 104.375 mo
260.933 104.375 li
157.933 104.375 mo
161.083 104.375 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf144 106.701 mo( 16)[1.94629 3.8916 0 ]xsh157.933 104.375 mo
157.933 107.523 li
157.933 182.724 mo
157.933 179.574 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf155.008 192.052 mo( )sh156.961 192.052 mo(0)sh182.083 104.375 mo
182.083 107.523 li
182.083 182.724 mo
182.083 179.574 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf179.156 192.052 mo( )sh181.102 192.052 mo(5)sh206.183 104.375 mo
206.183 107.523 li
206.183 182.724 mo
206.183 179.574 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf201.313 192.052 mo( 10)[1.94629 3.8916 0 ]xsh230.333 104.375 mo
230.333 107.523 li
230.333 182.724 mo
230.333 179.574 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf225.469 192.052 mo( 15)[1.94629 3.8916 0 ]xsh254.433 104.375 mo
254.433 107.523 li
254.433 182.724 mo
254.433 179.574 li
@
DVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf249.563 192.052 mo( 20)[1.94629 3.8916 0 ]xsh157.933 104.375 mo
157.933 182.724 li
264.083 182.724 li
264.083 104.375 li
157.933 104.375 li
157.933 104.375 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWCW+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F1E08EB12991814F2BEFDD99E857D46CC83B089892D70768EDFB737CEBE140DF668BA679C989F178F8C7B580D23B4B614D8D70F34E9A487B4AA37370316974673AB> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWCW+Helvetica /Encoding getdup 68 /D putpop%ADOEndSubsetFont
/DVPWCW+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight 8{/.notdef}rp /A /B /C /D 187{/.notdef}rp]DVPWCW+Helvetica nfDVPWCW+Helvetica*1 [7 0 0 -7 0 0 ]msf167.578 116.505 mo(D)sh0.25 lw
198.442 150.603 mo
198.442 149.56 197.596 148.714 196.553 148.714 cv
195.51 148.714 194.663 149.56 194.663 150.603 cv
194.663 151.646 195.51 152.494 196.553 152.494 cv
197.596 152.494 198.442 151.646 198.442 150.603 cv
@
1 lc
196.533 150.523 mo
196.533 150.523 li
@
0 lc
198.442 154.443 mo
198.442 153.4 197.596 152.554 196.553 152.554 cv
195.51 152.554 194.663 153.4 194.663 154.443 cv
194.663 155.488 195.51 156.333 196.553 156.333 cv
197.596 156.333 198.442 155.488 198.442 154.443 cv
@
1 lc
196.533 154.523 mo
196.533 154.523 li
@
0 lc
198.442 144.964 mo
198.442 143.919 197.596 143.074 196.553 143.074 cv
195.51 143.074 194.663 143.919 194.663 144.964 cv
194.663 146.007 195.51 146.853 196.553 146.853 cv
197.596 146.853 198.442 146.007 198.442 144.964 cv
@
1 lc
196.533 144.974 mo
196.533 144.974 li
@
0 lc
198.442 139.443 mo
198.442 138.4 197.596 137.554 196.553 137.554 cv
195.51 137.554 194.663 138.4 194.663 139.443 cv
194.663 140.488 195.51 141.333 196.553 141.333 cv
197.596 141.333 198.442 140.488 198.442 139.443 cv
@
1 lc
196.533 139.423 mo
196.533 139.423 li
@
0 lc
198.442 141.244 mo
198.442 140.201 197.596 139.353 196.553 139.353 cv
195.51 139.353 194.663 140.201 194.663 141.244 cv
194.663 142.287 195.51 143.134 196.553 143.134 cv
197.596 143.134 198.442 142.287 198.442 141.244 cv
@
1 lc
196.533 141.224 mo
196.533 141.224 li
@
0 lc
198.442 148.205 mo
198.442 147.16 197.596 146.314 196.553 146.314 cv
195.51 146.314 194.663 147.16 194.663 148.205 cv
194.663 149.248 195.51 150.093 196.553 150.093 cv
197.596 150.093 198.442 149.248 198.442 148.205 cv
@
1 lc
196.533 148.273 mo
196.533 148.273 li
@
0 lc
198.442 157.083 mo
198.442 156.041 197.596 155.193 196.553 155.193 cv
195.51 155.193 194.663 156.041 194.663 157.083 cv
194.663 158.126 195.51 158.974 196.553 158.974 cv
197.596 158.974 198.442 158.126 198.442 157.083 cv
@
1 lc
196.533 157.023 mo
196.533 157.023 li
@
0 lc
251.603 121.564 mo
251.603 120.521 250.756 119.673 249.713 119.673 cv
248.67 119.673 247.823 120.521 247.823 121.564 cv
247.823 122.607 248.67 123.455 249.713 123.455 cv
250.756 123.455 251.603 122.607 251.603 121.564 cv
@
1 lc
249.633 121.523 mo
249.633 121.523 li
@
0 lc
198.442 155.404 mo
198.442 154.361 197.596 153.513 196.553 153.513 cv
195.51 153.513 194.663 154.361 194.663 155.404 cv
194.663 156.447 195.51 157.294 196.553 157.294 cv
197.596 157.294 198.442 156.447 198.442 155.404 cv
@
1 lc
196.533 155.474 mo
196.533 155.474 li
@
0 lc
198.442 144.003 mo
198.442 142.96 197.596 142.113 196.553 142.113 cv
195.51 142.113 194.663 142.96 194.663 144.003 cv
194.663 145.046 195.51 145.894 196.553 145.894 cv
197.596 145.894 198.442 145.046 198.442 144.003 cv
@
1 lc
196.533 143.974 mo
196.533 143.974 li
@
0 lc
198.442 148.923 mo
198.442 147.88 197.596 147.033 196.553 147.033 cv
195.51 147.033 194.663 147.88 194.663 148.923 cv
194.663 149.966 195.51 150.814 196.553 150.814 cv
197.596 150.814 198.442 149.966 198.442 148.923 cv
@
1 lc
196.533 148.974 mo
196.533 148.974 li
@
0 lc
[4 2 ] 0 dsh
257.383 117.574 mo
257.482 117.523 li
257.583 117.474 li
257.683 117.423 li
257.833 117.375 li
257.933 117.273 li
258.033 117.224 li
258.133 117.173 li
258.232 117.125 li
258.333 117.074 li
258.433 117.023 li
258.533 116.974 li
258.683 116.923 li
258.783 116.873 li
258.883 116.824 li
258.982 116.773 li
259.083 116.724 li
259.183 116.623 li
259.283 116.574 li
259.383 116.523 li
259.533 116.474 li
259.633 116.423 li
259.732 116.373 li
259.833 116.324 li
259.933 116.273 li
260.033 116.224 li
260.133 116.173 li
260.232 116.123 li
260.383 116.074 li
260.482 116.023 li
260.583 115.923 li
260.683 115.873 li
260.783 115.824 li
260.883 115.773 li
260.982 115.724 li
261.083 115.673 li
261.232 115.623 li
261.333 115.574 li
261.433 115.523 li
261.533 115.474 li
261.633 115.423 li
261.732 115.373 li
261.833 115.324 li
261.933 115.224 li
262.083 115.173 li
262.183 115.123 li
262.283 115.074 li
262.383 115.023 li
262.482 114.974 li
262.583 114.923 li
262.683 114.873 li
262.783 114.824 li
262.933 114.773 li
263.033 114.724 li
263.133 114.673 li
263.232 114.623 li
263.333 114.523 li
263.433 114.474 li
263.533 114.423 li
263.633 114.373 li
263.783 114.324 li
263.883 114.273 li
263.982 114.222 li
264.083 114.173 li
246.333 123.173 mo
246.433 123.125 li
246.533 123.074 li
246.633 123.023 li
246.783 122.974 li
246.883 122.923 li
246.982 122.824 li
247.083 122.773 li
247.183 122.724 li
247.283 122.673 li
247.383 122.623 li
247.482 122.574 li
247.633 122.523 li
247.732 122.474 li
247.833 122.423 li
247.933 122.373 li
248.033 122.324 li
248.133 122.273 li
248.232 122.224 li
248.333 122.123 li
248.482 122.074 li
248.583 122.023 li
248.683 121.974 li
248.783 121.923 li
248.883 121.873 li
248.982 121.824 li
249.083 121.773 li
249.183 121.724 li
249.333 121.673 li
249.433 121.623 li
249.533 121.574 li
249.633 121.523 li
249.732 121.423 li
249.833 121.373 li
249.933 121.324 li
250.033 121.273 li
250.183 121.224 li
250.283 121.173 li
250.383 121.123 li
250.482 121.074 li
250.583 121.023 li
250.683 120.974 li
250.783 120.923 li
250.883 120.873 li
251.033 120.824 li
251.133 120.724 li
251.232 120.673 li
251.333 120.623 li
251.433 120.574 li
251.533 120.523 li
251.633 120.474 li
251.732 120.423 li
251.883 120.373 li
251.982 120.324 li
252.083 120.273 li
252.183 120.224 li
252.283 120.173 li
252.383 120.074 li
252.482 120.023 li
252.583 119.972 li
252.732 119.923 li
252.833 119.873 li
252.933 119.824 li
253.033 119.773 li
253.133 119.722 li
253.232 119.673 li
253.333 119.623 li
253.433 119.574 li
253.583 119.523 li
253.683 119.472 li
253.783 119.373 li
253.883 119.324 li
253.982 119.273 li
254.083 119.222 li
254.183 119.173 li
254.283 119.123 li
254.433 119.074 li
254.533 119.023 li
254.633 118.972 li
254.732 118.923 li
254.833 118.873 li
254.933 118.824 li
255.033 118.773 li
255.133 118.673 li
255.283 118.623 li
255.383 118.574 li
255.482 118.523 li
255.583 118.472 li
255.683 118.423 li
255.783 118.373 li
255.883 118.324 li
255.982 118.273 li
256.133 118.222 li
256.232 118.173 li
256.333 118.123 li
256.433 118.074 li
256.533 117.972 li
256.633 117.923 li
256.732 117.873 li
256.833 117.824 li
256.982 117.773 li
257.083 117.722 li
257.183 117.673 li
257.283 117.623 li
257.383 117.572 li
235.283 128.773 mo
235.383 128.724 li
235.482 128.673 li
235.583 128.625 li
235.732 128.574 li
235.833 128.523 li
235.933 128.474 li
236.033 128.423 li
236.133 128.324 li
236.232 128.273 li
236.333 128.224 li
236.433 128.173 li
236.583 128.123 li
236.683 128.074 li
236.783 128.023 li
236.883 127.974 li
236.982 127.923 li
237.083 127.873 li
237.183 127.824 li
237.283 127.773 li
237.433 127.724 li
237.533 127.623 li
237.633 127.574 li
237.732 127.523 li
237.833 127.474 li
237.933 127.423 li
238.033 127.373 li
238.133 127.324 li
238.283 127.273 li
238.383 127.224 li
238.482 127.173 li
238.583 127.123 li
238.683 127.074 li
238.783 127.023 li
238.883 126.923 li
238.982 126.873 li
239.133 126.824 li
239.232 126.773 li
239.333 126.724 li
239.433 126.673 li
239.533 126.623 li
239.633 126.574 li
239.732 126.523 li
239.833 126.474 li
239.982 126.423 li
240.083 126.373 li
240.183 126.324 li
240.283 126.224 li
240.383 126.173 li
240.482 126.123 li
240.583 126.074 li
240.683 126.023 li
240.833 125.974 li
240.933 125.923 li
241.033 125.873 li
241.133 125.824 li
241.232 125.773 li
241.333 125.722 li
241.433 125.673 li
241.533 125.574 li
241.683 125.523 li
241.783 125.472 li
241.883 125.423 li
241.982 125.373 li
242.083 125.324 li
242.183 125.273 li
242.283 125.222 li
242.383 125.173 li
242.533 125.123 li
242.633 125.074 li
242.732 125.023 li
242.833 124.972 li
242.933 124.873 li
243.033 124.824 li
243.133 124.773 li
243.232 124.722 li
243.383 124.673 li
243.482 124.623 li
243.583 124.574 li
243.683 124.523 li
243.783 124.472 li
243.883 124.423 li
243.982 124.373 li
244.083 124.324 li
244.232 124.273 li
244.333 124.173 li
244.433 124.123 li
244.533 124.074 li
244.633 124.023 li
244.732 123.972 li
244.833 123.923 li
244.933 123.873 li
245.083 123.824 li
245.183 123.773 li
245.283 123.722 li
245.383 123.673 li
245.482 123.623 li
245.583 123.574 li
245.683 123.472 li
245.783 123.423 li
245.933 123.373 li
246.033 123.324 li
246.133 123.273 li
246.232 123.222 li
246.333 123.173 li
224.232 134.375 mo
224.333 134.324 li
224.433 134.273 li
224.533 134.224 li
224.683 134.173 li
224.783 134.125 li
224.883 134.074 li
224.982 134.023 li
225.083 133.974 li
225.183 133.923 li
225.283 133.824 li
225.383 133.773 li
225.533 133.724 li
225.633 133.673 li
225.732 133.623 li
225.833 133.574 li
225.933 133.523 li
226.033 133.474 li
226.133 133.423 li
226.232 133.373 li
226.383 133.324 li
226.482 133.273 li
226.583 133.224 li
226.683 133.123 li
226.783 133.074 li
226.883 133.023 li
226.982 132.974 li
227.083 132.923 li
227.232 132.873 li
227.333 132.824 li
227.433 132.773 li
227.533 132.724 li
227.633 132.673 li
227.732 132.623 li
227.833 132.574 li
227.933 132.523 li
228.083 132.423 li
228.183 132.373 li
228.283 132.324 li
228.383 132.273 li
228.482 132.224 li
228.583 132.173 li
228.683 132.123 li
228.783 132.074 li
228.933 132.023 li
229.033 131.974 li
229.133 131.923 li
229.232 131.873 li
229.333 131.824 li
229.433 131.724 li
229.533 131.673 li
229.633 131.623 li
229.783 131.574 li
229.883 131.523 li
229.982 131.474 li
230.083 131.423 li
230.183 131.373 li
230.283 131.324 li
230.383 131.273 li
230.482 131.222 li
230.633 131.173 li
230.732 131.074 li
230.833 131.023 li
230.933 130.972 li
231.033 130.923 li
231.133 130.873 li
231.232 130.824 li
231.333 130.773 li
231.482 130.722 li
231.583 130.673 li
231.683 130.623 li
231.783 130.574 li
231.883 130.523 li
231.982 130.472 li
232.083 130.373 li
232.183 130.324 li
232.333 130.273 li
232.433 130.222 li
232.533 130.173 li
232.633 130.123 li
232.732 130.074 li
232.833 130.023 li
232.933 129.972 li
233.033 129.923 li
233.183 129.873 li
233.283 129.824 li
233.383 129.773 li
233.482 129.673 li
233.583 129.623 li
233.683 129.574 li
233.783 129.523 li
233.883 129.472 li
234.033 129.423 li
234.133 129.373 li
234.232 129.324 li
234.333 129.273 li
234.433 129.222 li
234.533 129.173 li
234.633 129.123 li
234.732 129.074 li
234.883 128.972 li
234.982 128.923 li
235.083 128.873 li
235.183 128.824 li
235.283 128.773 li
213.183 139.974 mo
213.283 139.923 li
213.383 139.875 li
213.482 139.824 li
213.633 139.773 li
213.732 139.724 li
213.833 139.673 li
213.933 139.625 li
214.033 139.574 li
214.133 139.523 li
214.232 139.474 li
214.333 139.423 li
214.482 139.324 li
214.583 139.273 li
214.683 139.224 li
214.783 139.173 li
214.883 139.123 li
214.982 139.074 li
215.083 139.023 li
215.183 138.974 li
215.333 138.923 li
215.433 138.873 li
215.533 138.824 li
215.633 138.773 li
215.732 138.724 li
215.833 138.623 li
215.933 138.574 li
216.033 138.523 li
216.183 138.474 li
216.283 138.423 li
216.383 138.373 li
216.482 138.324 li
216.583 138.273 li
216.683 138.224 li
216.783 138.173 li
216.883 138.123 li
217.033 138.074 li
217.133 138.023 li
217.232 137.923 li
217.333 137.873 li
217.433 137.824 li
217.533 137.773 li
217.633 137.724 li
217.732 137.673 li
217.883 137.623 li
217.982 137.574 li
218.083 137.523 li
218.183 137.474 li
218.283 137.423 li
218.383 137.373 li
218.482 137.324 li
218.583 137.224 li
218.732 137.173 li
218.833 137.123 li
218.933 137.074 li
219.033 137.023 li
219.133 136.972 li
219.232 136.923 li
219.333 136.873 li
219.433 136.824 li
219.583 136.773 li
219.683 136.722 li
219.783 136.673 li
219.883 136.574 li
219.982 136.523 li
220.083 136.472 li
220.183 136.423 li
220.283 136.373 li
220.433 136.324 li
220.533 136.273 li
220.633 136.222 li
220.732 136.173 li
220.833 136.123 li
220.933 136.074 li
221.033 136.023 li
221.133 135.972 li
221.283 135.873 li
221.383 135.824 li
221.482 135.773 li
221.583 135.722 li
221.683 135.673 li
221.783 135.623 li
221.883 135.574 li
221.982 135.523 li
222.133 135.472 li
222.232 135.423 li
222.333 135.373 li
222.433 135.324 li
222.533 135.273 li
222.633 135.173 li
222.732 135.123 li
222.833 135.074 li
222.982 135.023 li
223.083 134.972 li
223.183 134.923 li
223.283 134.873 li
223.383 134.824 li
223.482 134.773 li
223.583 134.722 li
223.683 134.673 li
223.833 134.623 li
223.933 134.574 li
224.033 134.472 li
224.133 134.423 li
224.232 134.373 li
202.133 145.625 mo
202.232 145.523 li
202.333 145.474 li
202.433 145.423 li
202.583 145.375 li
202.683 145.324 li
202.783 145.273 li
202.883 145.224 li
202.982 145.173 li
203.083 145.125 li
203.183 145.074 li
203.283 145.023 li
203.433 144.974 li
203.533 144.923 li
203.633 144.824 li
203.732 144.773 li
203.833 144.724 li
203.933 144.673 li
204.033 144.623 li
204.133 144.574 li
204.283 144.523 li
204.383 144.474 li
204.482 144.423 li
204.583 144.373 li
204.683 144.324 li
204.783 144.273 li
204.883 144.224 li
204.982 144.123 li
205.133 144.074 li
205.232 144.023 li
205.333 143.974 li
205.433 143.923 li
205.533 143.873 li
205.633 143.824 li
205.732 143.773 li
205.833 143.724 li
205.982 143.673 li
206.083 143.623 li
206.183 143.574 li
206.283 143.523 li
206.383 143.423 li
206.482 143.373 li
206.583 143.324 li
206.683 143.273 li
206.833 143.224 li
206.933 143.173 li
207.033 143.123 li
207.133 143.074 li
207.232 143.023 li
207.333 142.974 li
207.433 142.923 li
207.533 142.873 li
207.683 142.824 li
207.783 142.724 li
207.883 142.673 li
207.982 142.623 li
208.083 142.574 li
208.183 142.523 li
208.283 142.474 li
208.383 142.423 li
208.533 142.373 li
208.633 142.324 li
208.732 142.273 li
208.833 142.222 li
208.933 142.173 li
209.033 142.074 li
209.133 142.023 li
209.232 141.972 li
209.383 141.923 li
209.482 141.873 li
209.583 141.824 li
209.683 141.773 li
209.783 141.722 li
209.883 141.673 li
209.982 141.623 li
210.083 141.574 li
210.232 141.523 li
210.333 141.472 li
210.433 141.373 li
210.533 141.324 li
210.633 141.273 li
210.732 141.222 li
210.833 141.173 li
210.933 141.123 li
211.083 141.074 li
211.183 141.023 li
211.283 140.972 li
211.383 140.923 li
211.482 140.873 li
211.583 140.824 li
211.683 140.773 li
211.783 140.673 li
211.933 140.623 li
212.033 140.574 li
212.133 140.523 li
212.232 140.472 li
212.333 140.423 li
212.433 140.373 li
212.533 140.324 li
212.633 140.273 li
212.783 140.222 li
212.883 140.173 li
212.982 140.123 li
213.083 140.074 li
213.183 139.972 li
191.083 151.224 mo
191.183 151.173 li
191.283 151.125 li
191.383 151.023 li
191.533 150.974 li
191.633 150.923 li
191.732 150.875 li
191.833 150.824 li
191.933 150.773 li
192.033 150.724 li
192.133 150.673 li
192.232 150.623 li
192.383 150.574 li
192.482 150.523 li
192.583 150.474 li
192.683 150.423 li
192.783 150.324 li
192.883 150.273 li
192.982 150.224 li
193.083 150.173 li
193.232 150.123 li
193.333 150.074 li
193.433 150.023 li
193.533 149.974 li
193.633 149.923 li
193.732 149.873 li
193.833 149.824 li
193.933 149.773 li
194.083 149.724 li
194.183 149.623 li
194.283 149.574 li
194.383 149.523 li
194.482 149.474 li
194.583 149.423 li
194.683 149.373 li
194.783 149.324 li
194.933 149.273 li
195.033 149.224 li
195.133 149.173 li
195.232 149.123 li
195.333 149.074 li
195.433 149.023 li
195.533 148.923 li
195.633 148.873 li
195.783 148.824 li
195.883 148.773 li
195.982 148.724 li
196.083 148.673 li
196.183 148.623 li
196.283 148.574 li
196.383 148.523 li
196.482 148.474 li
196.633 148.423 li
196.732 148.373 li
196.833 148.273 li
196.933 148.224 li
197.033 148.173 li
197.133 148.123 li
197.232 148.074 li
197.333 148.023 li
197.482 147.972 li
197.583 147.923 li
197.683 147.873 li
197.783 147.824 li
197.883 147.773 li
197.982 147.722 li
198.083 147.673 li
198.183 147.574 li
198.333 147.523 li
198.433 147.472 li
198.533 147.423 li
198.633 147.373 li
198.732 147.324 li
198.833 147.273 li
198.933 147.222 li
199.033 147.173 li
199.183 147.123 li
199.283 147.074 li
199.383 147.023 li
199.482 146.972 li
199.583 146.873 li
199.683 146.824 li
199.783 146.773 li
199.883 146.722 li
200.033 146.673 li
200.133 146.623 li
200.232 146.574 li
200.333 146.523 li
200.433 146.472 li
200.533 146.423 li
200.633 146.373 li
200.732 146.324 li
200.883 146.273 li
200.982 146.173 li
201.083 146.123 li
201.183 146.074 li
201.283 146.023 li
201.383 145.972 li
201.482 145.923 li
201.583 145.873 li
201.732 145.824 li
201.833 145.773 li
201.933 145.722 li
202.033 145.673 li
202.133 145.623 li
180.033 156.824 mo
180.133 156.773 li
180.232 156.724 li
180.333 156.673 li
180.482 156.625 li
180.583 156.523 li
180.683 156.474 li
180.783 156.423 li
180.883 156.375 li
180.982 156.324 li
181.083 156.273 li
181.183 156.224 li
181.333 156.173 li
181.433 156.123 li
181.533 156.074 li
181.633 156.023 li
181.732 155.974 li
181.833 155.923 li
181.933 155.824 li
182.033 155.773 li
182.183 155.724 li
182.283 155.673 li
182.383 155.623 li
182.482 155.574 li
182.583 155.523 li
182.683 155.474 li
182.783 155.423 li
182.883 155.373 li
183.033 155.324 li
183.133 155.273 li
183.232 155.224 li
183.333 155.123 li
183.433 155.074 li
183.533 155.023 li
183.633 154.974 li
183.732 154.923 li
183.883 154.873 li
183.982 154.824 li
184.083 154.773 li
184.183 154.724 li
184.283 154.673 li
184.383 154.623 li
184.482 154.574 li
184.583 154.523 li
184.732 154.423 li
184.833 154.373 li
184.933 154.324 li
185.033 154.273 li
185.133 154.224 li
185.232 154.173 li
185.333 154.123 li
185.433 154.074 li
185.583 154.023 li
185.683 153.974 li
185.783 153.923 li
185.883 153.873 li
185.982 153.773 li
186.083 153.724 li
186.183 153.673 li
186.283 153.623 li
186.433 153.574 li
186.533 153.523 li
186.633 153.472 li
186.732 153.423 li
186.833 153.373 li
186.933 153.324 li
187.033 153.273 li
187.133 153.222 li
187.283 153.173 li
187.383 153.074 li
187.482 153.023 li
187.583 152.972 li
187.683 152.923 li
187.783 152.873 li
187.883 152.824 li
187.982 152.773 li
188.133 152.722 li
188.232 152.673 li
188.333 152.623 li
188.433 152.574 li
188.533 152.523 li
188.633 152.472 li
188.732 152.373 li
188.833 152.324 li
188.982 152.273 li
189.083 152.222 li
189.183 152.173 li
189.283 152.123 li
189.383 152.074 li
189.482 152.023 li
189.583 151.972 li
189.683 151.923 li
189.833 151.873 li
189.933 151.824 li
190.033 151.773 li
190.133 151.673 li
190.232 151.623 li
190.333 151.574 li
190.433 151.523 li
190.533 151.472 li
190.683 151.423 li
190.783 151.373 li
190.883 151.324 li
190.982 151.273 li
191.083 151.222 li
168.982 162.423 mo
169.083 162.375 li
169.183 162.324 li
169.283 162.273 li
169.433 162.224 li
169.533 162.173 li
169.633 162.125 li
169.732 162.023 li
169.833 161.974 li
169.933 161.923 li
170.033 161.875 li
170.133 161.824 li
170.283 161.773 li
170.383 161.724 li
170.482 161.673 li
170.583 161.623 li
170.683 161.574 li
170.783 161.523 li
170.883 161.474 li
170.982 161.423 li
171.133 161.324 li
171.232 161.273 li
171.333 161.224 li
171.433 161.173 li
171.533 161.123 li
171.633 161.074 li
171.732 161.023 li
171.833 160.974 li
171.982 160.923 li
172.083 160.873 li
172.183 160.824 li
172.283 160.773 li
172.383 160.724 li
172.482 160.623 li
172.583 160.574 li
172.683 160.523 li
172.833 160.474 li
172.933 160.423 li
173.033 160.373 li
173.133 160.324 li
173.232 160.273 li
173.333 160.224 li
173.433 160.173 li
173.533 160.123 li
173.683 160.074 li
173.783 160.023 li
173.883 159.923 li
173.982 159.873 li
174.083 159.824 li
174.183 159.773 li
174.283 159.724 li
174.383 159.673 li
174.533 159.623 li
174.633 159.574 li
174.732 159.523 li
174.833 159.474 li
174.933 159.423 li
175.032 159.373 li
175.133 159.273 li
175.232 159.224 li
175.383 159.173 li
175.482 159.123 li
175.583 159.074 li
175.683 159.023 li
175.782 158.972 li
175.883 158.923 li
175.982 158.873 li
176.083 158.824 li
176.232 158.773 li
176.333 158.722 li
176.433 158.673 li
176.532 158.574 li
176.633 158.523 li
176.732 158.472 li
176.833 158.423 li
176.933 158.373 li
177.083 158.324 li
177.183 158.273 li
177.282 158.222 li
177.383 158.173 li
177.482 158.123 li
177.583 158.074 li
177.683 158.023 li
177.782 157.972 li
177.933 157.873 li
178.032 157.824 li
178.133 157.773 li
178.232 157.722 li
178.333 157.673 li
178.433 157.623 li
178.532 157.574 li
178.633 157.523 li
178.782 157.472 li
178.883 157.423 li
178.982 157.373 li
179.083 157.324 li
179.183 157.273 li
179.282 157.173 li
179.383 157.123 li
179.482 157.074 li
179.633 157.023 li
179.732 156.972 li
179.833 156.923 li
179.933 156.873 li
180.032 156.824 li
157.933 168.023 mo
158.033 167.974 li
158.133 167.923 li
158.232 167.875 li
158.383 167.824 li
158.482 167.773 li
158.583 167.724 li
158.683 167.673 li
158.783 167.623 li
158.883 167.523 li
158.982 167.474 li
159.083 167.423 li
159.232 167.373 li
159.333 167.324 li
159.433 167.273 li
159.533 167.224 li
159.633 167.173 li
159.732 167.123 li
159.833 167.074 li
159.933 167.023 li
160.083 166.974 li
160.183 166.923 li
160.283 166.824 li
160.383 166.773 li
160.482 166.724 li
160.583 166.673 li
160.683 166.623 li
160.783 166.574 li
160.933 166.523 li
161.033 166.474 li
161.133 166.423 li
161.232 166.373 li
161.333 166.324 li
161.433 166.273 li
161.533 166.224 li
161.633 166.123 li
161.783 166.074 li
161.883 166.023 li
161.982 165.974 li
162.083 165.923 li
162.183 165.873 li
162.283 165.824 li
162.383 165.773 li
162.482 165.724 li
162.633 165.673 li
162.732 165.623 li
162.833 165.574 li
162.933 165.523 li
163.033 165.423 li
163.133 165.373 li
163.232 165.324 li
163.333 165.273 li
163.482 165.224 li
163.583 165.173 li
163.683 165.123 li
163.783 165.074 li
163.883 165.023 li
163.982 164.972 li
164.083 164.923 li
164.183 164.873 li
164.333 164.773 li
164.433 164.722 li
164.532 164.673 li
164.633 164.623 li
164.732 164.574 li
164.833 164.523 li
164.933 164.472 li
165.032 164.423 li
165.183 164.373 li
165.282 164.324 li
165.383 164.273 li
165.482 164.222 li
165.583 164.173 li
165.683 164.074 li
165.782 164.023 li
165.883 163.972 li
166.032 163.923 li
166.133 163.873 li
166.232 163.824 li
166.333 163.773 li
166.433 163.722 li
166.532 163.673 li
166.633 163.623 li
166.732 163.574 li
166.883 163.523 li
166.982 163.472 li
167.083 163.373 li
167.183 163.324 li
167.282 163.273 li
167.383 163.222 li
167.482 163.173 li
167.583 163.123 li
167.732 163.074 li
167.833 163.023 li
167.933 162.972 li
168.032 162.923 li
168.133 162.873 li
168.232 162.824 li
168.333 162.773 li
168.433 162.673 li
168.583 162.623 li
168.683 162.574 li
168.782 162.523 li
168.883 162.472 li
168.982 162.423 li
@
0.5 lw
[] 0 dsh
157.933 104.375 mo
157.933 182.724 li
264.083 182.724 li
264.083 104.375 li
157.933 104.375 li
157.933 104.375 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWCW+Helvetica*1 uf/DVPWCW+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (anscombe.eps)%%CreationDate: 10/4/10 1:59 PM%AI9_DataStream%Gb"-6LO(G\Z8VX<!;Bl;@tVVEJa@p/%QNWfP&6LV-Ht=fY5VKo*Mgsic*5Oip6oW16`Uqod]9BGKg;:bR.aaTr`<Otn*CCR&m'`[%AgK(,=5k+F(C2"(Y1dB\1/TbPn>K_E.Z,E"/4;:^9EMn))DnA*G(4Ne)Dp4/EH0>GN5jP96FYhLTcR8>r<`>sYhf8Y4m=fhe>)?o%E7jQb>P]Q>UVqMUdqr.jUL&ASP)45K*A>&AVO_VjCt`[38(j.eQ\;Q]GMMoZ\Gk%(Y2I(:f15dOGM6e=TH:LF7m6Kh$kH8)q![PB%A:hgY)WjnhMPlL_oLR?<dXT*rX7fV-4;lZsSO*957-_L#pP.N#Ul@qlEli!(7Ed%8Vu!l%&rhMT'[`@R8S$g2WDoBM;ean`X4.&L%G3-*fm.;ZXnM_?77Ai_5OWR<#49'qfQfNjc<(8"f?;8'!d;?W#eAGX)aD7]+<kBl1L#9"SlS)-Fs2QWSGuERt55K"id/4Ec;]'"f%--^Gj&L)A"rc`]WW!!R"&)7&P_&_t2[ZKRt?rB6;*\F3&/=@cd5/F@s&lM(Zh&*d8Dp-\.&FhF#FI\CQ?_)W]]g:eZ3pO*%.7sms%C%;B#5+8AJccH-M%\g4'-LJOs@C0X(VeS@7(HoGY%GZ?+A^mo-&>==l]oksiUet2#BWh6/qP9]Ohf&X#PlG&=r&oUr_kDRS#X=ME%pmK7>cXKcN(@;VEI_o#\KVtP8SlR?12L-g@KMoo;HqG`Z<&+cVP0$<bXtu8m178Q86+\]NDeCh%.[,E]n/)"U;T0iE.Mh!f@M,1G%Mbp9KJZ"c*1'ql#.e()K+n(L6PQ$aEO;>r:GZ0&D,&De%:^Y2F5G8dM8KK=+"s\_l:^0Al5@N>&--3\P-MRn>?psJtC*IaD28b7.%-]B!n_m_<HBTl8VZk'!@>jrEL<%@C.4?q266=W>N67)CuhBX<n]dJ4UI3Yj]cfI0M99=X"$H<<8TdDOIACTZXR5+IGV-n]A$koY&%G@>mg'0a7raS`qOdW>0fIR5J#+8dCj86-%j.qp)/Ph,p->[BYcS<<d_W^A4%2jl:/jJ;OsF4)_i/u`!F02b.9#A%:bo#cX5_:rMM%j=-#uIR5Kh^0uDB-KJJ-$"[Ld^4<l%jh4#07p7%9>@,5<>*2l*oUMusZ52ML+jVU246[cZ3bar-%=0YQLcdTDG:4cH:220FPNV!K%krIFbA2TQ2-aY$S<:E,XIb!7LhXLd1h5]loR83&$-`^HXpZhU-\(*>]mrW]<ALabP!'QJo$#cloOS^O%=)OAS9A\`T%f_1=";Q4H%T-04Cl>Q5H*[dT1hrLC_O@YIOeDK=o.RcP%^WF64RX@l.jgNXd^O2V8;1FdZK`_(Or[.YmJPq>PU])V?b%:-HrD!92b!1L@0R*#M%bU`K?Ij2YTpk3lHSu>WZl$PNlb,6bd\590#9)/FLR"F3^3?c0s:]eeTcVu?QW$D?(oQR-b#UOnR\+)CT]3GA?8-fMf83q%TRtSKc%\TM8pm"tGBdJ'I"j9Z\?)56t2qgUY%In%JbaV4K"W*B9bZm3>F=t69Z(.ju^$GK.=7Wh;o,5ht__7CA^f&a@SGh8nUAa164Y"6m^%EmO:1b&`-#b/L2t8^\AX41tJ-cbhQgG"GZa(A'>DOkrZ#@kS,l11#)\aJ4M.P?SVsW+8c.$._a9OQWcE+XNd<e:t_,D$-X)*2d?T%Og<DM_e#MWnr2'LQ]]l<.[;/eP58:Vp'm]fSFd)J7A;h>NMVS1;<L?A%U'6,=Yh9o68e[1;5/)_4<kP/hj52Fj3c"r'u'DGe/jg_%V8%O!,,)2>;dOa8Pj8Bm+B0ZY<<:7cI?\IkFHL3/DET-C3oDr];02Ng7#(%HH*-*^$*)R89JpO.PbHB[ZjHu:PY*/gO+P4&b$%]A%Q&nU0CId4`b"Q?ErCtNQ=!E'YB3]lnf-rEN7%tUr0;Il$V-^\YAZR0]'bh"<[kS=\H$A@+\9+.G5VNh[<Q:daX5em3XWiZ[+(].<%QZt8l9FjHg\MrT[0>JAYm`(qpQ#=`*0?^-QA_Ku@!LiU@'];EZ9k@&A[6e"u7Io1_?/Q`7I['dReYK#emL+>F5q.(IUa<I1\A]/2%92OA.]-O6@)7gi"##jkl+F("bNS!kthAn)Z8R(\]KN2T8Z4\?S]7]Ar4[PaoBdEr?.^3*T?<&gFTQbiR=sFb"iFJB-85?om]e@d.%6E`Y+<sV_R`5;OUa?6Lb;r2A%>fnN_Fj&g"<KPPR]+hRuA6n-$:%^QBiYi[HkngPi@'tco>Brt,UK%)R;c'&gBp?c=V&boRdome#%S4"!-;/:uPJocO?]T>tR:a.`of++Lf<)St#+/dD74?[UnO"'251_*B"P&]]/,*ucjRQ=K,p,"'nCk&5o32+V-]uC5i@^#sb'%")"%152NiDX,o7YYHd:U!E*^PZ9-0mZ.d)Fq\\&3$?]UH/(a/@W(;6W$J,eTcBS4H<u?"@Rduh,q]Fh"[#l/P4E=0o^l:g[_YN`:T-b-%MqjUT;W_MmYS][O&p\S@$+XVibhAA:1dOQE1d!oboN>^M&:(YXH!,RuYQaJ][M3F;U[V?0Kk!M!8AFa11?G>MPh33-(HgU9*G(S9%DrB)Or_C<?RV'?`^tB%oA"(NS0eKYH@/.[^pI)#):Jtc^Z/i;^g4n#=lQW/3\#2Deld<2!T4u$;V&FJ@d%$-iJ,4LqWaYV0d:`;;%N7bojPF6F=Q;U(Be$aB\.:mG[ARker,:aM4#U1peV,D#qhD/`<^5M<0dM_7/H<XA*/kIHdUpQ:g(9g4k1PjOGc7pS3PbkriA>YWT%b%HP5")\_9+mVIXjtNr0mD7XUh^(/%]ciQ!M?ad&j@L:G=00%f@AQX6;H"badmA@BUT>*mIH_3;0'2Io,,:[\K\K-SS-!i1(dG'/%mP8(03UB_-mP!cEi%KXh#Y#IE0B&^XAl'HE7C[]DDt$tqIV31pb7]i:9>GY6hC%@G'8..^I59.0lqeuh<UQ1)0(bYoB;m78Qc"9u%SDPYhAF9Nu,18K"cB7#T/s.lNISQNDe9BDT9XTQM/WK!uWLkiJ(bbEY($4f5an\D.01ktkEgB[89Yr=!<7]+]6:oU]B.Ct[i]SDV%ZB'$h60kPXccZ(ecdhX<<8+NhqNk&S,$#%#.Gkt5q^cmZ/s0^e#6.Y/67;S1j:s#6rk,7pU:>?"Sf(QuPP[VDVFU]ML4JV&9%k`A%p#[""=#tnjKYFa`5c'C=;:*C[=L,bjW^cP\k=4.r.W:KCGEog=ASss8Xd5g27?u).*LB1G,[6GndY,-Y^HtAO6"HG=kmA-8^T>p_%UsDj]J`sKD.\.j]X7%Rk6LP56\q2D]aJJFaS5a-he-U&WPD`a#'YgY]"O_NHi#Q$a9Asqc<7`2)nl30PGTW$VAP*"?B:oLNY\,sl%ER`,lQ`6fPgO)oT&[E`UeYhUB=iDnJMcY6r8UPOhdc;)fF%aUuZF$6$BUBq.R["csY:*&3'`R+k;=]N6c*g_O2%U(+^*t+#RVRrQ%e'`,hF.89rASnMJZVZc@2ejF6R93aWZ7Z0kSPeH`>$<R\,Y\>S8Z@b2&b*;UR6T-Al(l?71+HF1<2F[\c&qSlD,-o0?VtH@SJ-.L%"3lC(;u3>n%@p0_j!>SX1h1*cNjS4Ek""Ms$_m41<-jnW@Waoa;R=R^!^2@J#,@)->FWb('!gNO"fY7UMFfQ1M6eaCkr5_-IlR]R%$&s`l86V0&A@CYf61#>.`[0]p!11g.o1Y^mP)LgX&6+h@.Z+@5"M&YDp62jUJtg$0m+R>CL'lEk,oS$RM4Bi1e[AI00Q7ed,`8kR%?N+!_!=cK.gb#]o8HW:m<uX0oa;h4MP:Uq@1MV9"^*Q@3Nn'BA,GDA-QG;,/Y8[^p%TV0].1M^-$%iT/p[$Z2-cS,Ye@&L!oKASp%pMAUT':&DL[fTN,,UKusAMS-Io182X5^r;n=f/>m=q:ArKhocAd5il`8`UOcQA5h>F'0QLp_Hj2bK/,268qIS9q+\[o%S836@/sC%Cg("X)-KS]b-HnHW_0Q@OU3<r:D:C,CR=-3H)+J]/8De50?6[r<&mu%<.LQEb->ZdCD]WDO<n$u$Z.#gnd3R"Bn'dZ[73pP5e5bR%gFVnsER4gB\ZotYFYOeV#@HP[ni)#<h4@;q^1X(*M>^0SPP2N8s6@$o1<J2#W;]j;m([$*<i8)I:WB[;#X+1_S*a7SgTAN=p#^AE%Nh&m*h,ZU\/f4,uDO!0GUduNX(99AUUZSrXfkpaN<`dJ+pZo?[VHeBc^ZgZaafB:De[G$`LK*.SANEeYN`)a8X7sR;V!NVr*Dg;P%9%a70b*3U2P+km_W%U&/b-pSB?gU^lKf[k(a-qh@Z14VQlG=shm3\2.`Z!<D[loQWlQ`(<n2lB]kgfR47Mep9KT.?VD66o]0`6:I%q>-]$-DPmfh5cTc@\aN,F4'tpdV=9Oo&\O"\6C&)qin:=h<DH$ktfhro'a?JrE+!<rS"/"-iY6H>+]Y2<N"`/^O,WnF4u<YEe-:J%?>BF_g)e-S>D%FuA*nb)]Cd6E'<SE4Zee,(-uXNW#AA/Nh>!G5WG_G7PA^8=U4+;NBQq(Z+cLe2X>en=4IM/@[+M0]jk'Ra8ABki%'PmI40>*AYM/fB_#>urKUjc+RCj#aB^]IAhVU56<q<N*$-SnqtNX!"kGc)tg`h.3m^=[''%9QdTW9)YC[52L4!l8r[m^#B2gf?Il%5G4a7n%j+)QA@2[Vj;"aqE%JR7Tnt\R?6QeI"+O;f-@-=&Lhfs$Ct,gal>Q4-#Q;2>Ip8-nu)^J2'-sNeD"LXHM-D+f))C?MUe2@%6]`loG-ipr4mdaL8(1eR5+S?p39[i$@a-r[cZ`=--Er?epRC][f?UOhTngPt(rK=`h].1BF`ukPZ%]'VU7Yr\f.jZ5Z*Cuf+r)9f%PH.j.[g%icc/6FIn!QuBdN/V)mMMZeqfc64U(>@JVuMVI_W5WMLV`b*!<eMO3m9""nF:362B(<5P>8gGl?n'#cp2p00KM*3%9h4-%Jq4E3E<:ZFW_[8:kIpRjIDs6>&i$cZ@FM=IR8g7O6neIBl:!$?/%*!QqMN)/V3Qp]f`/>U?gSROc9^DA>.a7TJ+jk6mX'ojQL($]%ckD(emtdhWBL9Mkf69-+-gCA`mM%gaNX!tk;?(^q$Y%8[>gt.Y.toV0=6%YboH!b;6JaubeiJ;ga`l-YB,IqUmq)^RgKuJoNB[[d%dEBrSl<i/lcD5;ad<-*rQq&Z\d<,<"E\ePSQ2\%LP\s*#j):XhImt@npkA]mT28_KP#O^$;LUIuO)"oa2K&UZr(jK/=@]7t5+4Q-%UBV-u.kQlr/fLd4l_Cob55lu1G-EOfcL-X<l>!-/\H(])G2(Vu,F5':?X'N.3>hE;ZJf`FrP.(B_3!rXndRXC<po:KTiKVs9aEIX%BSYOEXHISM)hJ=>b4Tt,fZ)a<Hrk:/CBr%m>OU06/,4If8q8"jIM&0VO@6f].STp2e'PS;D2jAinc[`?-@[8IpVfo(LonK8<jJYs%r;gX_G#n(>=!GB2Ff0up=FSDpS>6,!I'P7/\+9#IqJ_Dmpk-<Wf1LGPFQN=`>A9dL+0KRn#B\IZEU<I$&D2K,hZdr#n/Sp5G53Gl%.kIZ*ECoQ;Qdfn^8aRjke8B"mmA?6"DItornk6hMIS"e'0+"iW-/fTR,eW-'KNJ)7n;:Qc?L^\*.t1'7,qKA+KI,TBYU$joQ@r>V%P42(G&mbl;_CK%dGU4mIYCn4\Q+/*P&sn8Qif`e'>S:A"9>W3!8U)O6$*V8niK^nu]FpQa=7ITq<I@A_'jhS[`Ku6ZnKm-oHqAPt%?P6\aQ\8H1-/hjO8U-M&&mclMKNF!ViDj>YGa2AD?6tnj=,A6^<FSOEPunZ*-'j3caX,nGE_1M@>S:?hQ\8G^-/hjE8U-M*&mclN%KNH8AiDjniGa2GF?DWs@=/dM)<GG*MQ!+f,V3Zd9W?pM'C.WZ8=qY/<Q@r?(-/hjM8U-M,&mhE$K3+K&Cno3pG#@BDhaGfSg\S9=%H*q@Rr:bjC\ro8I.jp?=_jb`P>BZ>0/_.#Qei<;rhJH%8D;9u+L<hF93HT!%e&=YgB_j=g8gA@^DG3iAW&gA`\hW+EZe2eY*-jp\%LnU:;:\ku0V"rH7EiH6_R!.J9p)]D^UY1;r*UGU]+8nnt5Fg<M#-G>m_k!(N^O+d#HG!OU9LbSmFOD4ccltbEo:o1]T;f\[qPdB;%mnU>LCA1:;@3p)M.&/nY+-XIU*#bCQ2u;S/^ZqTa%b`#V'C_N#MuH`F:?AeNrRdoN+71XX9^9`eq=MFd3XE(G%LCN(1k442-^9`d%7[?-=7L/+Ai#Rac/WT/jj9uR9IXH6OO/@D%9(8.2E&@Ph^!U[Y=noG3qS-a>BE*"beY22i=#:>h3?:m"^#^HkimqO]>R.\@c9/JQ%S1_j9mgIX3s.HOm?eD48c[YluT>jO\#30U!q7dr.Kk)/NDi.i.lWs+Uri=M:Homa(WShe/R*UT9Ul^JgNU"+brp!75-'qm-\5KaK%ol!@4E7k=jEei>,k&2WBq0Uei6,P)Z"r>*i$mpcJW3ni;,a4LW;<d!6%lj>=ia!(lULkJ.K3S2oO3XY7GG3W[e6@_@R^XB,3W$)4%Ou*\E<YnaQ^\iK5DKVhi'fFAX.&h+]SL/Y]Xt>.Ao.,]I!sd+SOYWrE7k5CNp:*7g;<9B)hA5lL\\XO@C8!h*Y;@AB!fhe]B-G+5%@$!UqXIQ`>h^_cN#S,>Z+08;5\n5+D:EPG$KBZq.M`=?s;3>?<5G(]*W.9$`a[AHh85fRCeOPhCTK[+m1a.e6$BP$:P?so>9h+gT%GZ[JBgADn4U!m0_GQ+N-YY'_f+Z5l'i^2A3X?\X]>LZBT,?Z7!gKC?ucV+IJ#,Are.lZjF:KGW?cD9=\F?>]$Q!'<Ne?>]P^&Ksl%J$i?1#"*\$Zp65jjd@+>>:n)lkgd^<RQc^dK8HI)^"\Yl1F:@PCY4J9"HpJbUDt_p-%E:bT2#U5MU=*Hbf[.R7%7T>ktSd4FVXGD%'U521'LB6o:LuJEE)YM@[@7gtm7+cnml(^L(&\JCoFS!8AV(3VXQ4U])Z7\>#B*MMg$K2FQU0L*pBj<))Y@n'(s5KZn5jrn"Jr*7%ntWa2%S!RD90]s;Z*V9"H-Fb0m17_3<]YZaUVRe&=Kk%E$G(m*1lW8i7?7Y>/],;]d_N'MJZ%"W6&LhZ&\B9o<M3u_!B*ie$F+JV%fgA.6Johq#YoaFi;SKZL)@hCFUtls53<TbAG4G:U[``Q"BYg2EqQf;4ZFZp"'hp2VbV?@nEI2H*6R?[(O4@k40t0$/K.s1n?88gT%]-PrFZ]ss@l#PfU2qfH5i\fMW&0PXl4hN,,<tB6tmgND`oXNY"go4`*ETKU!V7aXBAb+:RLVlur"3GY[&0oD%aiQf"IE7(W=`U=\%A#Y,h?'__C$7+np2PKKP#+qOJp;F,d\#,OQVLJdZ7+6/=X']M,'uPWJC)[d9D-LuKg$,pcPcKiaSOp"KZn=tnN:^qOY&q!3MDb]f%"MYU0:G'-b,o)eb5e:TdZD1HB0S6ED6RXAXM/_[*0_umbPh)/;-N[S?_'D@JW/'4*0`(1@ggB2l)h.I/U569JgoRj\K3o`?8=`I&%n";,!F=,0.7tlWTWe[<^9*5`(\ero!&((UGoKNR=`CAA-Y"_d;h)+DlYm#,e5t&#%$gf8J*uktq+MpEI$7$UUVI:Z_=r\_bNnI`#%.'3'p6!:5>%SCNP9fFGlrCOBH*KE;gIB/>h*(PRT)F8=0b:+K&&c)O3f1/9/o2f#aho"YK$SM4%2_+Xb"GT`5$&)=ofB?14b7Os1%]Z*fa1hLqbDa\SM9]g96A+Q"U]r90Q2LBpX@@p_B0_q#[!L#"l+I@',2L6BL\SjD<987!@f#gYTqYpEP-+*60@)Jj,K@K]?(cMVW%7]10E]"ntLd*')F:e'FoUh.c>T$S0@V)"pEB_?-PnRW!]=t>TI=%]75?U-_Hn3la>Br-L9q9P_1g$.C++@T'm."l^CNdr.1@A[st%#HBibjsS^CbPj=cAcAFB:?,74B"crbl`r*TEAE\D_f#'aMoC\!2#Cc5P+j^q:05gWR3"J#YR%N`K>HF4!#s$fD:E-KVp(ABQ5NI;%nu+rd*::37C3M7l[a>-?`3MqKrIkaC^T>EaaGtMc^3,hr&,9Lu]50V"JH"I!('N-pJBK):9,/pT7f4/kBh#45L?+0\ZTJj)_kmV3%Jd[MhL5lYKVJc%!Rb+Z#0KD4lrMCf)^npAq^9"\>AU[o6)MNALjVql'noDhe&97BC+BD[\d@I+K&WQcZV]mj[ph^.Liuqja"nA;m%3km3]";DgTFG<>nkZ]%1:^dC[O2c$MG[t(m7/6VSD+)P,5m-+cRLkXUJKZ%*$,%6N9,,o=PI2ckXq3Z^W*Xr8Mo#/[2aHU)Fn+ZD%SLCmSEC$_crPV2US@`RT\6/NJ/"HL.M"$`Bhn@6kb(E@K0Do3JbhYr"V9_j.kA]g'Y?q(d*qtqt6?qrKq<\\VDlrm]V[nj&J3VhJ%?MGa3V<AF3m/"9FhI@*UQ1,SWQgq=75"-J@rPWd?+8]Lj/Z+_-akkM7p.&\U\ehoCqNO'hD\kp=rHc64^&-8,I%4O*o8u6:l3lt>%pq(W^XYh\sMMEjgr)Q#3QPpFeB,SPJnE/=Eq>PF@r=AZJn#^4Z(,UtcJ+.CsJM/(>@P-UNn*^\f;CcE[qnpeK&9[fY-ZutK<KR4V%36pKf6t>8q0Db!\W%3J>k6m6tQ2ZaSbWN%LXUQ<^j';!)k[j[W7P1O9iVfd+6R<kT2I.'dGLet*a(cF(qcK!d?5nqp46*6dld!I0%(Q2W*dHj5=eRm4@r(HtH],!,;o_#8(B\I,tp_36<2<kQ7Z]3@:/:<MJeMVYR#d)nm]/??Qa(oV8Jm"k(qj4;]*H'@Cd#Bn(H3isr%cVFuh?*1cY9cN1DKp)V67XY<eCiXC+576cq'0-!d``54KY)OC&qKFmnj7aM17]V<]%;ll'V4PK>e,ISsDA4\h7[]gtqpET/^BT[P%oQ(pu'VE!b#W3MBW/[NPaK3rPRD9W.S!le[M;J-VXO6dilZ`BKUsXg@10%K?n\!5nP"+>L+'3'6*j1F;SJU<UGQ"`*[I<gSVGYhM%C%ehLgAbIIeVkCUmrYo5-B0A(epaMm.H<nXO3_(mAG6/5@PlZd8hUj6T9V$g)W`H$cEV)Y)lMldWhrX,7;B9U<A2sqN!XlTcNSc,%GLre@e53bk2QQ;@eEGq9:t'+;pZMA[,<oqOr:3cp`qm'geW)C/1qKM&l/Bs,.UL38N>gnn^!F-a;;@&YD#1O:ehCn3NB?U#?Q1qM%ZMAST7?WL9UXuDQ$LLHlZ.>rFPIO2ZcZ/C8kW38&k]CiNX$3H27XY<;ffO*"0l?Q[I2;]<C\3FpHe[=7DR>__oEFZ7rj/-R=RW`f%2G>('cNe[FbSokf:Q`=L[8AarWnF_Rp)ed*.qmT!CLd%e[*bL^GOsI_d?bhVa_u+n\FE\I_lL[,ZmQ;%r=C'&VN%`B^2:j=7c>&V%!Q%&><A&`ndBIN;S-oS\eb!_m24FKo@a^M0harh,A@==Sq?"G#WSRn>.r=VY&)!0/,+KZIb0Xfi^Jf&[Jb.1O'l*AKX;u$NCrf2-%:3'c"0.[eA\Fk'OBnY)0p6\:F9<MO6X[&XY9r"KJ8&2mm%]1:EUQqgU;*b-5p-!+Ja.I0`)I:$:^:D+?MRhJFNG_^_o_h*rdY((M%h+7"QQTl"Wh(@.?Z/6AE&pQ5_LZMJ-U8N;%(G\LQk"itYdC.G$knHJnfV!$V2M0eFOm,fI]\A=b:Tno]Ep_fS=[AG?SIXRn=#]R`%:Kno8o;AMcm[*cL7ksEg^)f.]qgA83a8G2p*>m/fT1TgXY.r-`o=&Y@#3VjZ8!A`O+)9=rh<qtg:&V(+HdQ^fmd@,821KqeI^*e\%2#.b`TB[kKJ,!;)J,:\b*&`<Cq@btMH7Dk[/JrskJ,AX!X_mnK*Uin&k"k#]gN<m]nU&[0>P"bH9K[4loP@kS=AXr@s39u!^7F's%%c0pPqDZ:1K`(IjUna<,rH/'0IbrF\T3pMK4k$=f?(k<)Ge.rr;(4u+%r%.]*l1P0Pp5p=0V[67hbl9mgq,$6nAR`\ptcf8XgO4n%9=aQb9mYR/0h$Rl0+MHTc!oenV:%]._.j:kLoOS31_?),@\(2%#VCVX1-,kb<t&u,<e\f3Mf";[j0cM>$Yld?CZ6ZV,`0$p/NuD!%?l_='pG\3cr@l4-%O/pUY#1tX1s#6VF'iZ_i_d7g;j0\5Y`lX*]p^eSpgVaO00mOg=rE2eA!P!'[AR6X7Q6AHd4`&XC6rg[f,qkh%.d)9YHCZDP77*XcD/F*jWJuos;]G!W'q%N)hk=HG\Z9EY\8dA@YOkrM7TV,5W+i#/FtdVe\H\57LO/Bp@uW^e>;TMh:RX3LP(TW/%b`,7g#rn*Z=ef'\NMb#sm`ZURIY:!(eEf4YO!oKp9?bu<?Hc8,Z,dfJK<[*V\W<k/hEd-g;,bjD<)IZ+L480#8lF)dk&C80?N'bh%l9eG$b]--<(f@=ZgQ.RDe;rV_<`'J%,qTi-mRl;0Lo:We?c%N5pl+hHrD`ph^PlCJ5SIo3p&]Zt!-re",r\(+BT8JH'"FO,>ib`H%P/UDQj,Oe(JGNc*(i8#!r3i]J;@B7[*rM0FN#iFP\.JOTQNHXYn];,\[Z!%jBEZX-^:q=,W">&fr;M.*+T7+d%SXJ;nil;;ASg&!%2*Q'(8)VEDXfml`F\\&](G)1l81mbu-9D-'Ijh9O\^C2jopq;8h>#n59FfX8R*OXPW]Gd0o*>0aSef69j23pSMk5P=F>/2LqbR+7%BRT^YB#M!TD#AACC9\G*0j<uI^AL$pcEjh;FgVnU"h^NkArTLKmL-P"r+@b\llI$l!CQ?*^[,mDcr8L^O"u"dd%a4m5jub7L`rG>%AJTUG(XW]/Pj)m`#"e_`di3I3^/$["[\$#'g)8`tTYbVYiH8<`0nsP/>tMDKqM"XQ]fQ2?EnSW7l$T`Yog`ZtmidmT7#&ho1ER@g%q^3?2ll.MMnk3\DmK)9I*f'A[=109)0H9NAb&j)^:O_uaPUsP!;o2Y-dY4@$B_G22o"^)KaET!AKu-dNGfIn5]<8kO%HC_ACD>1R%Q$N'Dh4'-Qe]ai+o?21ml`=YBpkONSpo_G@=k$O1=7)n!s%r@07#e<Q*>KS%dZkhlmE'3=f<9oG1-,*pX/CR6JrP0h_L$S]b[O0M%T;V`5iQ%sA>aT$bBiXu2_Ol_J=MfB5B07Cr^H^t>os(<dU2lTrT3p+D\#Cb1;\`JEO]kP^/c+B_mo"M_X@iipQ2Wc-PS$P9GNo#t%fsBE.;n*3I#45MRa7GXkc5/u,BLT#7D<o1!F&cAme]Ldj@dfGUb$m/-Al'6*-,k*^.40:20l\7l8]S-Dcls+n1P4rE+kPGLQfmLk%Ku-38_@;*,k+[P!5+(F/NnJ3S?28WaT(0/Ub"6L,DN3l`AUKt_8=`>f>0QOtT[&9Bl57nQNMTp1^NCqU(c$hZ/FPLof]T%\DF?V)%Nq`\&'q;>kUa$f7P3n(B>M@KCAuBAi_trYoWZFtNf6<$Nf5>-iYXZT+*I52'BnSD>F-5ULK\,bG`(^>G8rZ&*7\[<-_\g4Ff`l^B%s-fPLL0]thd\p(c!<D*n!fl>i-NNWs$#[8:pW\OIk3d+^SKkSu-2mZ13rZS@akBa1_T<nY$UL2iS9IhMT:<S+f#ZcZ"WnDG*3K3s%9=5s"J$bFC`/8n2/:)s'SWu6FBsp!N4BApNmZ"`J),<&0'nn>ZoQn2\G)Mi'87YGH04;0``V"%dh,7p..T@BtrnW-[`.:OhGKfXH%g7e>LK/4BK4?/CJ")CDRa4b%V^"s!rK./<K;?QInN+U7X5ac!,</e9:qbV(p(gd`uWV8\hq90&8/9QAE*=*n;Zdc8,fBAn.>%)L^%/2J<qhZ40^=B=.Q!R+0*m$HLEG\p40%8YJ`ON`Ws5>Da+m,b*s(#a4S&>Gk0kMIr1'D;jA5p__T"F/Bmq#]+t?0Up:HLeTgOLgV&%g<gmd1B9]6da+M.U)?1-8!p*)l.5@0'L0T8LZN*,WT/f$KrZ\4D0n]I2u;,(^,$Ze5]BgMn]d`u/u!';>9b4Mm>0oIqRhI'Z47.2%oW:T!#DL8rg"p77>^<j!QPB.\CorVN=`]#P.;5][LD;(I\2&V=Pl2tNIC%L7F]5!biX=DhUHeS0T6nuqYP*^t<Fr78*3OR>)L`@,%$@gc,CX@%#6A)9tUT,U(eWnnnQ#0Z/qO$(.R4o4\$0m>22#D!CB_&<Z_aBJukW;QO%H_7"1\WJ-;.ieCi.e&<Elc'aAMpT/iW.@7%cPNPH_ET]Jh5Z8hce_0ujq,qApHI(_5GE_jnGGBPmYr$,YIGVhd?pu$9D'(@L_l_$i5q3d.ERsX6Xu,1OPVH/Ts0Ysr8Gr%$eXb)%:_fbM\8b`u%&VJb)3$o4(U/Hn<13Q)WDenD0c<tLX3aCSk46]RU"Da#?Cbus4.T641JlH$Z+G9`H_qS4!.o0oZdn)@TJk>\id*.L%O6fthVCKeqGc%Nrn`e@dYYOqK^IL7!RpY/*+s;085/>Cg6H0L9Wm&":Kr%rbWbSW?3nRRNg:\)Jn,="gF#g^%9:C8>:.*MMbHoR[%.0fH)j6qtB;'^-dcg7R'G/C?RamMsBD7suUiB_N#d^Prg:W)phKi4<sSVg70_kuID!(G_;act/J<&^WKm9:/[gT]fg*HSfjWp_em%aR<Y`UWS%eFm(kjCC?"[g#?&LV7MiI7um;Rea4f%KrC.!>.'*j25arNQdmG5D([RsQ3U>uX?W'j@op\`S<]rV;_`$iMKE=<`le1<%Z&osOBRADcPt)@eD,Fj_lRPWeRJ*^@Y)GTEH(uNsN#h/H<>Ir?KrE4+bfKS1lqZ>h`;k5dF&&?1&Tj@uD\I)f*3KPt>?,B9&3dXj%16sI.J%=(lo4P)q<4TV)LeS5ao&srZ?1jntp7ML-o>6:.g4KmUmdS#IcDXUjK20hfbiqK-m6N+HUsA9nVjoDp*d"E:A3M(rCC`JV%>AubJ3bo6e'5p1g5'14+%m&6FE'>@)G##GoCi\U&H%"nX4m4:)]=E=Q$lI3_jaH5a5'5?sFI;7#1e9P!"POgK$b`VN]X]E:j*&s@%%WL8N]O-QI@f72InE0.i@oFlo`NIO\YCK[&CIKTi9lEUMg<Vm(f;gfQ8l"V-?k7Pc41!Cec_3/IFl+41fW$@qV5.$nbs"=NE?FNH%,*1+(pg1&X7&_eAHTl<UClS<3FifL&b(<@u?03^*PT2=.o#m/pM[XG_Cu[clG6__q$DMLDO5'ZEe].1,*jr"$6Rt$`Tt*)cd9/ef%ZWl&aa$aP*c)Bk1B/^XY2J.EAO--+>cgU5;!Q_#.ZZ%1GQrR`Cjn]&0Q*DZ<>C%Wj?Eo^9*Fa'.8F1IFoVsZe^#I2VeAB23+oH*K%0oO0AA:$]qMn<e/9gW'a==Fa?HN!e<H=Y/n\@f(5UO"W/noO("VYK]7Z!GZRp^A^4=aAo8+./&f$S:)+g*P3PSlV,aF_$M(GHQXf%2%(@JFn2'u7^3k*!ulL*c@oF2VSi3cp>`LNM/fd;E"iH;gn1W&.i0(4"7NlX)ln:/'XRG"ES7O3nB!JD=b]8IVjKsD45'YaQoYP-%LGp0\&N!Q!)!oBDeELR(dp(Q&b?7mI("bneJ[=q,J]BukG'Dp(f6hdH?Zg%#71YpsHcE/>Tb0D#[FTM$fS2jm"U'^0@XLZ3?0,m8%BRaj_-dKjs`nLQ"h!FaK+Ybf[Bo[m,G<U&S>p"F/R;ji5+R>+:)W=;`)e\t;KA4[97s84DXI*_5P)ikJGFZ4a)0u^rii8tJ<-c_E%IdD1iY]4E#E4JR8Yp5V#*HO0On>9'L-jq5SF=L!)W-:'k^ef)pjAmL8jidoI)+LcN\1[G[ZJ3Tl;p:t7mPH\rf'-AI3-TIR2)=0;%jsR$ch/R7Dc0%bF,HbZ\%4ua.=fM(SB@P#dD;`geg$hHUK8.Bac>>ks4*IWd+d.PY)k)bgUV0.Z=L*SP^^\Oh,NEk+T/WrC`YSWl%,i$#pQr(iU3Cg]ES[k2%0.'jeeD+oVgm1EdG[SiK,AqC9`l11dbfSX4*P(\/7&/0bd#C+dlCagSSIQ*0ZC)Z#6_ce[pG'hY@NN9F%-`4[CHb[/&j+\"=^]o72HTdWJemPV)f@h]?JNBbJG;%o,25Y[cK:CBVGn)k^177&5kI!OE<mU6eVTtGkS5&o9O8RsEn'AWAm/>n5%>,]a0&#\.Sd2m:KNQPZ/c/^J?g)nW,B#Io'39'h4on`4n+&8S`SXIC%p4m.Q"Ai`tVuCY:ellj(3L`7'rmo]N?gM1WW!)%+,kDU[%raO/i,&\LS7/A_c1pr1QF^u/"]D(auF1^$+#_a:&6JC"#)V2e$%54^$9dg\HhC)(qm%.HYO+lB5Qt6'[[im`_R4H5Bh$MFTA0\H+%hFkTmd<Db&TqSomkeO47O[kWB40M&BG.nFS>aZr!9k`Wu29.USWJrjqI,$]Oi=Vi%W2[`g)DJ>7rAN.sYG@c#[iqon9U9iClNYu$%a?*YQf]s+R=(ZpKC26;aC8Ek/8769M!-%M/f`[X\FSf$cq=VZNQ!ZDXl#?$Pb-*jH,'E%1b-/hJ(0qKZgP/H^mQ=D94n;.WpV\<L%hBS*2H]L9en"#5b[SplTI0"a5BZ=GrhI9'_%5hReV,ksP\(1eO_ej)G$AYaWgj/50i!P5gAkYl/?/[KV^)b/!R`cGkU#'fb=#a-h%dSj4,ZZG#.=#`6e[PK#m=^9p5:@3([RP;So:nWjTDf?m:U[pp-B*V"R$dNKU93#S<'?KYs2HGCe]k//'cj^LaN6\GpeBd3&e58%S%/(4[k5I<E@W"n94g*qe-_YA)32=To1Krf9Kb?:89S02nNjkoK5^AB.!De8rl?@;?_+(r`F,et,QY=HY]IKMeE+K>,jj:a1P(#]BC%jNO\U'=sn%ZLesnG;^B2JJ#S.)%WS=WfYKP(93<$f]n3VZWhO@?8#!IiEbF.d\p"l4#WnbIPu7jHa7[8qd\_rpN^r,h"%[%@$"F$%C"?t@aqq*t9f8sG@O_-J^=t+cC0eUte[.)0Xg?cWBqpKsHWD22>U@:YR5C@;>JKG0De@:42BI&%\C"D)B=Gt&SS=j\9D7,aQS<1=%@99FFRPm2FhsUA9)tb;cDVm-hg<N68If-Z9&Y\2_X/@C\=RL%[le@`Cfm_i$&*LAI'Aq6LPE&CW3dSn`(f=F/'C9Fn;]&/=C7Z`n%J]TLe_&D)?4dWN1<G(p!!=>i:U3<:"/0#u7ZHL^.dNu$?<Ct@:cg3,^Z&@$m=!fpPm?5eR9QCWNE$]iMC56obfeO2MbjG7=80V]D%L"eAJ/+&PA3?R.e>o\+0j0Qufi4N!K/P@s,dV'B^o>`l[&u>skc7E[Cmcr/gc:6:KOZ/g54cBX&F@NudX:;fYhK24So*)f#VUKab%'R"Y,l,K31B$\N.YH`*.(/MX.N5u'1n^a2T/jb@QhK2LfjS?LRe1R_@Z_c6!->tpi4U\NIp!T>TaHt2n[V%dB3[;Y+nP/MkS'K*A%c7lE<>i'Qld&J:K=5J$g?,Gc_VquM2S<AZaF@OJ'f#)at9kQ;4p)0a_HIEa3jo1"dcC<+X.LZ:!)859..-@cnSS&YCAIP[ik(Pab%d5?eI*;DP-l&:#S%!&/hktPgO94o6NCE@CTG&J%$3ZJ+A)8,3m.PS>-T%0<jTu_RSUJLU+S'Hhd1#;^_Hda^fO=j;!7%p#+j.&^M%K*[6RHIEa9G<i&=1MfEZ!#/b[N@6:W*iT46Z7BR1V!Imu/46&3fm^/A]@god_GH_S1"k$'F`r'JDt;Erq-ocIMP<j_c:o\GOU5iX%6QEF8!oFLY]fPME@jo]J8Xj#2nTMA,'#Ob&7ldoKPN0o(*NKi7<K"W%L.kVhg7.<4s+"%5Sc+ZaboE;:DJ!Z4=)%)uQ#+I'+1o!P%1dr7n7!E^M\YJ^sg,[U+&JJEX*4AO_2g:]P4^-Qb(s\<,:8:ZC:3<BYN8$15Q7LXNq3."!GI,;C443oEcP#CJEMbXo7]-<qR(H(0%3q3r-^iZ2N)ZVtkjZu6Ac(d]R[lc#og)auKktIY*'Y2Y#K"BWOJ*F9PI-@)F^tSW$lAQ3iEho-Yd#bodKg1\`_\C;o!_.(mr/'_-%2N'kBd$`Wm?G"p8VERs#>!o"+]X*@(kfnA+Bg!PT%%Ef55)-Gi]fN9I_g8arou>Y]M8PaA]GOYeO_'l-4\g$]3O8"'b%r'c/1oJ.%X=`3t.&9*'*c=*!$A^2'KYs#M`IOA_9G=;!Ci'I?H#h."]ir!&k^tUB-XPC#H;?&JS(^]r%Hd@4+^&Dn7d\u@F8TMR*j]E3*</"@%dq,l[e]>dP\.7;obf!aHL2NPC10EF7j*KjJ'(CFZ$M.o2`k=*&X`XVZb_7PLfMcado(NPO]UK+k(#XpMZmMGE%6Tj7D@X]>C<X[5%&WX>o_[LaLnlF)-iD0&n1sU+(ddtk>Vg"a^D\dgHUJ,t)DaSAr]6Q0n3R;YWXW,<GH'$u[c1btCj)/bT>1NN7b!C7\>K8?H2TJhQ%;+N&n':WJGG8)Nrhm)n:=1*%:bO]`.JRbffS1@jjgtF;a$_%%inJ?L]C$=W!>`Vh`FsE7fX&Hn"o&fR_V_=d\/IFD0VA8a*-ef2l%l?Qj!@lA3u3`9RB:(4hsf]i)N@Ik<hl6tdpBQI.<.^mZt[q$qRoLc8SF*Zq:82YO!_YQ!W4jfB2PJ]"e<s5X*R)-hNnF3ri@17:U%)+IJmSGBZQ`_OuG3]W<Ek>(bBo4)I$5Ls;+o5p$sRgh05U*Cc3_Sa<C0%pmJo/Ls*8&YrR>Wq9EEJ8d^Ak/HDle1.8'm7Vm\joFD%6TZTZAI%h\g=W&]M=gs0-3)Q<%Zaof^od(Z+*he\ppY/38bhTQqtBgerp>pD";cF[8P)FuhVa1WSuc4,IA_\Zrc%+[(e<'HIC+k`%<0]R^l[p@/e1l7$JrTH(+1!eJQ5SlB[TWQr`XT,54?$t2\[L?2GM^T7nD6!]&kl?sYk\spNE3*T8#9(b'AhG]Er'8-ReH"S=SVl$%*mf08=kC%M:A<>`#qth^F`>)Q<#\89@E*'MqhGIT`L/X,<F-3\g^V(M/asFcCRFqseL_]AE`pj\8)pf5276;EpPj@6HWa"uRLqMg%2:A6/c()Z%gr@SPDtIo"$$4fU/P29j?Y__P[sGdOBD)0L,tHGYT)a"-_O,I>Vn@#s]9/cKkeuJEC$qnj.t`Wf<_3QL2L:hH+B<VH%IhoAa[>BZiL;_mIkJ2)'0;C-KOhiY.CouK`H!;.X+L>Wk\_+,@0@d"B@J7qcFggiW:/'#NVf$S+1TrW.Mf!ZEBjk(b;QJ7/j?f,#%4;si$V<-'McshB"#@4'EE*IJ-49<*i/kNMYep:elFOFB-WAdl@\&Og_1iW+)l"f8#?H;CdB?F`&gbINf%^t_l2ptp`8Gk?$E9KOe%Ib\7P2)N3TT!AT`BHJHd<Ne9dILQ/'SB/r5ENRDjBU6I>&.&W.fbg7l`j*:GXjdE;0ht1*K)@#87E'$XU;aBb87h4:#;X0G=!(+g%o!jjF.n7ZhUM.FQDS<mFcJ3#,V[/Ao6(;Of.]1&OSZ;%@>q&KX=DpIOWnKpJE5[gQ=FS]\H$\:-P!)U"p^oQ"MK;ia]?gp<I&pR!%(:!)O,^4'>2f?s$ZX%&0?L%m\F2:`QACbC8jj\9BW:PH'6p**a:NsQ<=(O:8NRt-(A+l2@A^N679'_OCeX\12%FX+"a$jPt2j`q\%AsZ<6'uem]-t2<lCsF%V5(M)W18>YY;]e9b3$]hNba_O+iVI0W!d*]033,6r>t-tEhU8YFTMlptRk//0?@Yd`aO"#<Yns(T6(mfM%[.LZ/o`DL-p*NY]?$QH3o`9._,FdK&=o/1k]i".mXu-'?64&^9nsO'"o/8%i;_?dP8bm`7-f!Li8bna4C^WnYB76!-<Dl"#j3BI`%Sl\MZ[!!7D8]k\1/^+$eHj9Bsk=Eanl&mB6$d1\srn+^bC\%>D*a##PL,.$>kL,R;UY&CZ<knH>6`GA0k-;@;T%D<:lcrok)uI9s%F2s#UPh45>2O#S7rN*@%q5B^Q-a0/MaeE6a2eQG]CPJCb+IXOYT@0<><^1H(k?7EQ=kb`@rtc4:qH7J(Ro=7)jRoi#Q!FS*Vg86B%#D?=O+KqD[<^4Y(Pr<pdX=_`)5)Jk6c8O#67sPNfQ.M)j.+)]#S'``\Qe0Pe^L/+6b$A=<90TA3BA\?SIb&]lDY!>Bn+/_]?9bG*%K-P<CI!fi'C)Zo,b`^T(U.\%1[7<l&H2XhNqH8&,3qj9ae$dA;luV,3AsLuo3ien#]ZcPjccY/aZ7tVC*bNO[B=-]!e!#'jd[XSO%;tp01jn5sokb=/gY.T35[>jtU=n;)Com<pi>g8Yfc`e/qnlW;f]RJG>=F"tp?0(["?u>3q?9`$@lE^7Xr0U"/cn)c6CTk+5ln]&5%L1\NmBAP:I,e[?hTp4/I5&T.i?9_YtB2A*p=_IDKR?)8U=dn;Wom-MkV;fs)V2;-,IpP@A(G;3-cd;9'L:huAj-Z=KIb&<FM/GA(%?9b8nL0=K17;Xg+lfZR^Fk43Selht6aiERL['n9#2nq.2am/%F]o-jmo44EBcVa%N#C69LZhbPRi+L0tB:[T!n._?8YFfr<5FXW6%c@)98ZhdO=iTA;Kk>6(WB3mgORFF`uSAFA[cKjYMoq6/.5AS7ME6O6QIb'H$FiQFB?9]GZRB1kKRunT[qH;_.BY8+ncKf+[&$5<(%SN3mG!Q@qP'Uph\TClpd1O"]3GE^Y)\kB%>kBqRR["e`&JllpPFo5gN<]hKDf.MknLsm;$4?R,mY.;T7[Ga:7[TLqU[#24#lQad,%jEV!-9sGig^ap'@6kO#qEA:;SWKBTbp['ZJmGF:smgJl=o\K1:os&6J8#&5@Y^cQH)"\(0WORF6b>nIEKBl1FOM*gemrYminG_;.%+FJP,]ucPcL*B^@PRk:Hlg#]qND-Oc>,q)9eXiD%h!*BLb$FIP-FiC9*:T9'Ii9p,DR9Afh:;:-mV[9^cJ@Y%-1:I(kCe2Q6m&r5%U[:8>Z#pf>5'GgMUX@cgk%L979od5GNMFlX4*_mN%1Ae*Z'LtRSt05@MuD_6s7E`2&5p5-YeJf)=M&pkfjF3/@[.BGrdM<OELfh-%hAeJ`_`*j=c2GiAFu$//!cB'f?cq-&g;Y3k-/f3@]l!X:S_%!%]Q8CQfmQ4^0C<*bl?"i]E&W6fUk",GP4?n/G^"?nCIg!M$oH`K%mc--KW>VZgTG_NiV\r!CF1H_%EcYUHWb[6Fd5ZR3_OdQ\F6H>C0=Hj];6CP(`,bZLCc$SYm(dg\]#_m%Q`/]irn`arSI%A$l!%p@%qG)e,'?P('<i1rto7<^`N1A`hpk.>o<F5`rCldPq%OBT;n8H?*hLKG>ODXRm;JBa9HRc%5&oOR03Cr2@b4c+JEW5%ur[hB4"K%IB%iR&7#5C5&KpX&L<g<krf_S`GW_B=F,@r7\@TDOJ30mnpO+IkFH<;m4k#/;eSJfq&<i>1t[7H\dr5";?/`ForL7MU25E>T(MmiDt4%5;-L6DHJ<1l7nlgmDjiO7pif-0US+IA@L%nI/,A+.mH"LW"78F<nkY*@#aPTU=>sil.^de:5r0od*5Xu+W+pLDRk')<bY(5>chi>%!pV#S;58&F0lf%fWok?iK+!V'RGJ'p]G7+-/VGX<N)[bb0apJpkXVY64s"Ra=>D2*9B`uk'\i=,+ukPkqVmA7bi[<6(4:KPeV^o,%I[&&`BK[9N66R.l4Min2=t0#(;PT<9;;@%28;l`'p06aepmnK/*i@:YYGJ3EWOQH$b#mn.,B]_qY@9uOC+@3ZK!),ejj\%/[sQe;%rcVf7U\LB@)<Pl.rHl2\KYm?3)d1:Vk!R0*37t5+7qeUPLrr']TP(i5;jU3!D:3).I<QD0@R\)+-Uds6YMO-V^C]q=\&_p1-h.a+%r?L<0?`1M+g,"gRo[#[5Q=U';\d&5BpHrRh6+#Z2&HGM2f\c\T*sq%H$iiP^5?D$HH]LJ*2UKhA6+gOb/UT^GmpBPs?SFor6pe[X%4NPJg6.iU6P=et;9hX4^Cms+.g>MI?(a:d3\bV.JU*#Eu9L'kB*r'+4Cr"ng@/1J"$94l;8X,%\SObYt_%X)&j^TOs#b&!('=(5p%+7S2([?<k'D*Jc05_89qrOoEg+F!X7+:q'K0U@nNKmf)e]iaNDGJIWLi"D"_39*eZW^sPeRm`J3FcIN5D(4KQi@Ln.<l'Fm;4/2m%B3&H7cEt0jS?S.6)n#8>iT'8U-#RP\/n3_1.<P!9q=d,HYi;(1,cas;]5un?m.BBu-'YlZBAgNG&jF7N\Zq5cl.(,V6J9]$*T(k3%ZB';D8r<?qImr#\T4BXTV*=<1?;%0sX-qaMbH:Ak80e?9#n%j:Ro?E[2%U[>9?:W2,ZrC_OZWRlg3cn,..7p$B[g9%;c-:7He\^p%nWHpYA!QZ_#aS8kb^I2G6t;dG[mU-KGP,Aq,?(HI)uen)@^X*V*93(V/?P97aKJtET&+gQ6P&4E"_QkAX8uMd_`nA2_L$&WN?]K<%%YW1p12Wt:Z^BIj=fdgc<J8`Je[tLmqW=DRARZ<d@^hDO;Ql259WY=HT4;V1-^J[7F(ceHoo:;%\9Xt&_8HsL5FPci<tmjrR6sQK%F>:05-<>uLYFSk%(@*g6%c+<9UIH-sKj@J@BtM+"=)6.0\Jmu8R);@OQ=P(Z^Bfgn\d-V'E?fT)l2[A_^Wa-B9=am_Gmu?7!W'$1%MGF$FQ^JZ[m>ghmD)T;>)t=r9ia^(S@UY2)XLsjM^#-mX;6unXd]JJ;Mcd7L'K2+fN`(.Q630eti=$ek*ZdF5IMQU35Q$uS4qasa%_:5@0RXQm7F7>j/d`L")r'_cn*1%7Yf8,>(pP#?OEV=_C'V0c0R:0iOk6gFJe)tVT`1:FoVpZ$IIU]^17V8#k+=]%W+8Lu9r2?)@%RTO914Q\)aq8V$'JZo&n2*A,L@HO+a#87Kd?gQmnr;FmN2s\Sa;6;2^>#3g9#@d\mVM<DY%91OW'ZN(4oQh.\,L@;D!IrSRkNQ$d%H9E.J-8[A.f2DhA2k6$A*f3Cp"q'8ClfeQ^m2=/^lNFDh,[t<2+@0kE:96,,om5UBr)"B-'BGVu0o(Vt`Y0EDH=Da*P<?8+EJ\TT%m@JWP#-c\Cg8T5?UKUHp6-_uYWK![P9cilM^fJn6Sd"2II;2b'eTt\Qo1pr$Z,*UF!@tTU&k19]oct;dM+;H*Z.uk1&OlsY)6krq%fc'du.SH+EMrM`$4Q=Aa$8R[b'gTl[i!gp+adU$sio?ZjY/6t)W5a''=CfhX_1OGpnKJI7dlco827tGWN1S<79Iu3F2=#RgU=Uk@%#=kjsgc4#jD`POX4"TFZWaXQr`f5nEdo^7tR,a[jHRW(=[S3/Lgit)q<[1eU)]u7Fru<us,*WSP$Gsi3oBm^]`f\?I>nT)>b8:1,%2nf[RK#[DE:u:I(s'si/6q#i*er^NdNB&i#gNg0=Y*?SfMrMa="Pm8-b=?@o%3!3fbgGF\nWVm4?9)QVBP!a)&t-PIK1E3dB4YcA%OQ@]oBRZ!]Q+_H"1+"`fbV_.bq%2rH?q.RSEjTHko$9>(.H'-if%cJ8'BKKUZ)&EKSDg(/]QgS!@4(]V^5J)f);(HPcuPd[`8%l@%5N-2jdO=-aV]BR?Gt08GD]R0K4m?HE==iH;`5>Sj#>R.(.QW[t]!H,G,&pTB*nJIAf')2d:rAVg/4M@2FRXP!NADJ:e7^FdmiN5s%Rg&9qWp3WJpOPI\GU)#^9s!X'K;S@U3CF6G4?S@tc(O/U0$hTUCF3*Jai-q*hZ@uk+U8o'!I0J8TQ8`aSqXlH>f0(:Ml8eAN!Cug%``c(fi@\`4g9g?u33;+T*GFn(ep4p1W]YtrZ-lp@2]=mJZh@FaR72F2M*9'lGREl&^YQ`M,0p2:8B`lt%OP5^Zq'014csVap3r02%2bI<.1[AcL(c>L#+uimD<N'$h/Ph$9"3kgW]$D#4QY8NFPar.'Zek8cJD)h3?WBSDef:]6Eb4`C]rDd"pSU6fLtWAn"j<1<7L!>W%H,67:OXo+a/Kd'&/\]OQ->OZn!QK.+41.h.<);RIG%sD1%qqb9c>fUm?KT`S`uR#%!B7/!.GoA3-b>J[EoY@f`Z-J`np&!G>,)b"%(J;RmAkE?$^8gUH<,6U(`4490p`^n][Qh5(D4'MB<5Y'ag-=8LqtgVmK:P;R/+KRS9%q,[K5^1W'nkK]j>!l"@Qi>&,;C^3.S,J"%B%`CsB+%n]E6H(kGsOdg:p=Qc]]@(>i*$m&>2oMB5KJiUOgdOth;)Gu7Jor$j5T$c_R]%4A))<&5Z>9Fhm`Vah"V7d+hjt(1UU@0%(O>D+3,pJ=N#Pjq@,RZ\T)7J1j&lNir5/5ZE];WA$n;tYn9:qPr$m$[C''+XQn1h)Je5'bX^k<uUf5iD&MC6L8?a6'THOFoO.s3:%n9:q6qme3.$M6uddGA8h-KTTd3*r^dLeEUYJ;\L9eO3)0`P]S^?E'Y4A:-kH>qcZr&o5tebKdQ+Z1H0a+f,n3X)CiJ"Ta*#'HZ\X%U)SUZ3dqmMID'I$qEA==LY"H+pi_@p9>s3U<V9&lmki?d\_)1S'miQW)5];<0,l3G;dIQAo<B[9#H*"J+;E$_^S6b.X69R+A_%]i%:-:1.5;_XQ1CtWmDfDu(],qr>^_s")CBdA*j9uon@YN0ci\PWM)I<;_MqpfuUJ\6V^)/93l"WTa6d99q];>$TPJTs9_Y!Y/+i4=S%KJ5iHkE4DY8W`$_&epsADjU[A!9k"g">D[@+i;ek7=ne7G<j&5YV[OLO;`gON1(B+,*5?W\5=u'rZdOjR.AhoJ@aX!WI*[A5DYR2%&OqJpB9`aa0^Zhi*CrK-8?W--rXX,piAKbnMNDNe%OrS[mp#B_!>U9ipOb:U<]_K>RC<^]bc[J8MPu/Em0d#+,;sH^3#XA]>?&8a%<Je+H7TDiCY'.:'Db$`PjU9:5`V]uTM3q9$F>b>tRL6:e_VHo?%VA'j\-rS<$L50CNC?6GhF/1<N%2UWF'Jn;J<WMb6fh`#Jm:`b%:#0.9e`o_gBe$QfQ@m,:(NS*AT"pXj(W`:'5YaM"[eNC80WLL`Ibh34=EMj1M.pU(?"8nqi7r6Pbo2L#"q@n&#Y'6X'Q^ic"Euq6%X[$0%K"D=Hk_&\Q3^&T/-X;47a(nF\_/R:Q=:s2tMed/Li5Dr*`bC<R[74ZJ#_,mmi21,OPYJFQrn#DXYdqMP$G5tZX(F^qcRCj<%V,5Ld4M2mOT0;2^.n`+FGMIa>+77'Ql9Hj15Ho>!IT6V-OI)]CgTBaR9B6C&PWRNK)L%9j2CTmu([LJRlVli)jBDBKZNa<**N/#l%"jjI8PCFg+,l0HgknDdC'5-B;*%tHOp<mc=$'j5[P!b06i`5fiX\%AdFFXA2'072F,,-G3#8^Q>F2Go]UIkqtiqYh@:f<*gYs`[I%kcgbc:c3EX,?GPS%hCnZqAShNi7W?N2ubV29$Xg-J_UTXZuqN:pZ2sR5J^pH+&m)d07kU\<tI^?lo$"0NZ`<WM5QK'>sD;!Bd>g!%)5<_?DPF/oW\:UJg3Z&M(T/7(5hFc/2NaY(NGBn-meC6%k<TW:q2bESe<0Dg*:0@(*%hF$?,C%rerOOh6:*-8arf^>aS0:5oog"\%LO2V\o+lF(r_/aD7CZataahaYLsY[?iBqkEiD+tlcs7VuUiOC_.kht[;.W+8B`cSR]lN`-2hT0e&()Z>hVefu<8j7H0da\gCob?6%dOTW7^kMO+5l@^*WDZc^TFE%*Qbnp:7LWKf@_nUO\^S7q)X$K>Z7BM$h[lcB/@=^!(69BeQTiuM,ALTn-.'b1H((Tm+#TX^Pk-PJ%ho.[kn/*cV3e1IS&A_"nCg8ek1#+d^2R'tU;:uEp04I,R2Vno#mYnGYrQX*>DE0m'ioB1jFp#C8DuApteB#Dp:eu[XAYS]4VH%W)%i-pPbRXUW;f?3aJ+e$8X(U!pdl=pV-T\NLAK3O$f)!)<IRCm@>mn;_L[SlClT%cW7"FHGh8Kq9,Pnfbu.K0CY/?AI>!lS<VE-6BE%G2O":'C`VpZ4DIs"(,]H2%Ol8FH6)Cg2MaUR=I8Ais;c\cW+e$pH;2@?I/LM(%1ims$=Eo+#=aL<:(&?[!)(k2@oPI-rI#JVmZ\:%$?So<_\(s#%74,+-#:MUT0!\CLkJTp"<[:XK^9K;T6J+EWeqg#1`IFl^7ChY4DATE"8$%CE:kS2]_Be-a,d^J8f2EE<1[n**(?ZE%5Buil]YiLaT1sG2B_88U$ug/iN?CuK#c:EaX%3\ilHs'*@t!AHI!OA^>018-b/ePWPE5h<S?N\"eRKRF+=n<h$fP8[Ga`Aa2$u\Y%9D\l5n'<4n1QX:7dT?kANd$"[ctGhRB>M%>YSFuLr4%)_mWOk?j%Ic/R'7)n+GKg2%X5CBX2Q&[U>'?uPb'@c2rRFm4Q9^dEj&ok%,!oaBXsd:*X._El,QnpA9<:EH)":bKk9j@::E%K`A9YlX"-T1Efe4/&'KMOT$D`>o"V@<Ab[M4BM6kJq7$h]!m4XG:$U]rL,bUEm%%HG>:DVp'/E%jR7'QX-5&gh6R5&!>&o^:7K/tM5M`)k.'!BPbDL^,5'S(-:qN*loV-j_4HLK[_i1UgB''+=^/g!DsuoJ?akP-S2g%;=JS853;l0Wj0k0gEGHJ(1FIu&mND1,S<(;%M3MgOoQP2e@q@c5!fbc6#*MbK[VkmfDktrAV(FB;("[=M(V>@%Z*Rb--HK,FHN?*%hG<3miC^\9OLDitUKW\:[7Tjq/"ah/CIlHtMh16l#.uQ;A/nM,U.C;gr0PW'ZVd\9Tg:=3d1N<&&SUXu(Gd*hj1eG8ThOOG549/a%F,8Ne`t2h:"aL]8Nmj>_FL@:H/3]CqNr7Kg?JjVuBXGP+.-8=t2l0c`ou)8@pc6(Z:gI)u6^SYOC@+VD@i,aIE0K;W\+#D*l[\-#%P\=J\:m,46j>sQm.]Fh_D*?u%'k0uY$-`j-[(/QP6b%sb6,6Zd*OJ.eNorok`MnUT^lL7+O&Ll,R?,3Ka<3r7)oI4?0n02u'/DW/%jdSS/"F/Gar@<IW1)5EK(J=Ff^Y7O%Q=M'*3AH$[-8LMe6ogI*\&kA!6%fPfMe=MQB\=ROiVJ.<MlVF6_hF3I0Pc#H`(>WG^eX6S%q-ENXE-(JDInE&k3HHsbTKu=`;lDA`1h(`3JqbqO&N(=JB[C7_G.bkI#2E68U4u<,A+,q/+DA"Q0W+Ej/:tm-.VNMibIOaJ!NfJC%3"`UsRB#b]HZlP!)H*(U9oWHe)J\+flAYIBd#]e&-l?]+*8s/I&Y5T"2sB9"M.8S\*#T='ebAn%_0-R![&%=&\BSOQ+;PPNgukY$%!>G-88Es%>:L5G4DkCG4J656#";G2S[UQ_'8.aSh5'C+PU-2FAbTZPs,*XVoa0Eo)&nRU(&$!4b86a3N?;6Sk-77dT[$@Yo&mGi!%86`'nk>\RkpY&5.<uLZ7Y\hHJ[$@Yo;S#RVelMc\[V"#i!acks``-Bm2TDA<%W*N0_^nJcWTkrZq_>S6b*QsbA+X3*XXr]?NNYHH%5q?[hArA%1oD<2P]pO8,bCTp;k6c2P2'd[dqa'&+3CFM+m/`U2i7LlFqAsiC\LL2%N!g1R9RWufCFF*(%AL>-7#cm+)ENfEKa8U2%J4A$B(,YH+gYC1LGVZ%e+jGopC:G':&A,k&=UQ,nNZuAU97fX_5gWmK7j_]5[@i(]0g0%*\Y.p1MAi&n)V(#ghom)I_"0@V#-]of%NOG"\O@WD^SW!(Z#q[=dHj^R:Yl2!@b"L`*XQV,k0ie#34lO)`"h>&JBo)+RinBC`,)-U6Kp<8ASW@'Sg.G@HafM`b[?V^(c^'^%%P)5mD0Q!YdX&S+-HEXGMFd5kK@;iN<_Y!$OKB\AkX(3CoHE=5JR66GMg$u/t8o,qi'u?##a2)*.i'"CHD5F85oE?#.X]51Tj7\jU%/(:cKiu^X*,p16&_Q9EH-uG=\%_D2.5J(T)?QL,%nJ@tD,JL]p07qe]$$.8;pugpmO8Nn8JX<FU3Y=OdObQ)"6,OMcL`-X51aJ!k%"e.q/HHV#27JHp&;.Cc$#.B>\7#ckL@t.\T>0t&CMR9<j/nj>@PO04k%CBKn1I"_eZNrT/W%2_]b!P=%$P0Y1g:cqe'4K$M!'b):%7#2S6!)qmX\&#S/M#]c.*,=E"2q::be[L;H+/uXT\7Q^Z7FaeVPQ1WuSs1>91DthfARjkV6=c%1H"7?J6oMX%n5.,DUEQ%2`k^$'%nTBT.AHmo"LXl1LQ&J"C'suR1mUZfK@b#3_157GiHC^bN(qe[9"s%dQs)![MMoNi\,(bLR`Zd_O%n*%kiu]+g@/5R\huTH'1Z*@j%<=n@2gc!"TD9g0>Xum_4"QkmW;'PB!b0pA\i4RV3?$VlKKVF6`oODbq&RkDNTm1Q,^0t]]-YKih7.5$YbT_*#I5q?D@Za)IVdMuO%_W.bki<s<e%IXI[L);,GnLWF!;aFnXf"&;J);A1mgCoadL64CHpm1<heLoJQGs6np:BF+DKoN!O6H]!jE=]ahaYE,b*FKif`U,;P%q7_8NTgeRO%.XA9')$Z8.WNMl0=Rep)fnXk`pkW,B`h%[2LZV8\O@!r]<K'+E$B=!ON<4tPSJbomD_74LG.TTFsHG4$lttb-uuQ5%Dfr[#EOSfY[P=L#qIC6q.eL/lJ:)J,m:DR@IYNdbAJ)14`WEI]E\%:TN!2Ff`E5ZW(_\\TE3?6j:Gpo2P<<7mi$5YQfNW57$EoY$%$6kU`Z".iMCMud5AO+RW4,>h@/(=3X5Aqnp7md+4k[:spQ6ZFLq,9YU`cSL:k>u/VB_.H4PLf6^9Sd#R0dSKuKc")&:D]Y*0^Dm1%`orR'U]WKOOXq9B/100+9417q?/.Lk;Cej+K+p3Q`/Y'Yl7%\!'GrDbePd;u.CKqIc_6pS\$M3i7=ElrU*mU6IlOQ=Q%gC@pdP_7%'?t0Gng9c*+]?nN.7D<N"tV9^,j2=>>/^Ke<XFoH]S*%gaG*]_'9(adb;20"#bcnDP1Ml;>+7$`dji::Di+'FEa\2_-(^8ip/NB%%Y1C1AZ63>0,DTa'kg[?3:G;%jOTQ+,91eJ(B6*(;[_]njUZQ<L&:/[fA/)=I=hb2t"g4IA[Nk9PC-D[)n%sTa7e6p9AsX/5$COaY%*1V*AM7s7>(=OdD]dDJ,4O/,j=A_om(h/+]E_!'LQe.H2`Hs,'"B%Q_r*k5<]VSs(.AiJJ;dic?fA3C=<J=9<E`]N?JEYqj*7o'J%Uet'['rNr(^g5/uY3j#Z@bJ=#a6))KeQm"3L#PfO0WXVN#5tE*GCd2-G#mE&H8hqU>sOKSaNQufbd*r.s4?Kf/iGZEkq65NFRX3q%r*a?0A1Bn[$V\T[9tFOR>)+SWZmTbHT)_Itc=7lR2'd:/N"L.o?gQD[fTdIM1Gq]/[kG:6ghi=]A#U)6D4rR&R_;KnikfJt%c7=>%X]16eA(iTYV8F+R6&B"3EID_k%UWV`>7fF!4&.Ls^#`*f+rcJS;8PHKS26+#>B+@Li<gepI[S<B_Nc9uPl6B1KMK(G_,1fN3:JVF%&Z7`Q5K^MlW&pd:(nhM0GhB8LJLrh`8E>)1n1%&SK+U#u*&DOH7Mm:;TC\/.0Z"+*XnJ'E0Z"+7\mnK1K!14gek@g8k;ao`_h_cD%f/Ic($2!r""s_'6VgQQUMKNcZ,<5kI_T].OeqDgS$T5E1(a3Urk2R`>*1@9XJHO=fVS)h0fpn8QOIF/p/F9JZPk`.5ctlfmKJ0P@%k>2p=DLI(i3/;6&!cG%Ti#Jc5#YGa(dQ(9Z&W"%q;8PEX:^on8H/<C7U))XU)'`ndW&>F`P??JI4<j3"hFS[EalP*%@>#6N1ZBu6%6(;D*r@Rij6K09CUpi0.O[*471I>6W\KFk!5OomGG8B`qBkan)`L_OG,T2sUEB"SU/ME?k6j&hHlB5,m?!(ErEoii"+mf&g<5N2?%/mth78S,H\[0rA&92a.1bi/[>G@d,_pknA*JnM\@rLRaV8QDA>51TjAq.VHQgHW/^kj&YHglArk2>$&#r0!<*I%8)KeBoQk\UC6U%8ZaU:2*kr`fr>R^TJZ&XF,k1O%?L$*.;4&l%Zf/E1t!]7f(L7RJVOmfY9*j+I'm(-=;-1E%04H<Oq]'uRA5O=Q_Y-69bK\DgtT`9%92b$Be^W?kRnHZ4MSRHj_ja:sL^H\U8M=G=rci`\MRX$eD\!>5Yat`UPh9`VH/Gi?TH(@GPF$<]92_aS`>NaW92_MOTrpsM^*Mh1%,q3_c>a&n9bqi6#G\QN:QQ__b<\$U0Q_^<7)Gh`@R5YT5J7VfjQ/`CM>=VS+;?h*Q\KmI%8r)papl2OClMcrG?=O?M66Y/+;Kq,Y%#ss1r8b)/n(51[C:NUnS8nT_7^'gOoOu,]t39?<fhNdfCh0<6aQqPk(;@%aE.cc7>6OURtWb\@:#ABfl&`MHB_?!j8*9.33K79#c%;8ok<lClH2$(80U`Fj$m5k&`5#(\5OVVD??"tm_a,:P@o>!E]fg[TqqXX9@P(Se76X83/>OXK>=C>rO0+H;)TYE6f1#`XP>YLl1/%N.W0)6t;qU/(>u9qJ]J+OA=-#Z%.$cZr\0n=D[>E7rj%q2F"kk>"rgWYoo$[Wio62hke=:"+#MC8\_74VKdI7(gb&8VhrA2?L<?-%TlL.A';gLc&8q6Q/1:7*%BkY=O:X3ajh[r18V@I0]V>>C4GmhfrWd8BFMW%u6Z'!k?ZXn*bobCaW&UQt@WSp\4$L`i'5W7kB*#I@%K5Ibr#M=bm$el6I,TYf7p,Qb*?s?6^\7648(\86k;MAU)J'c#QP6a8_Y/oQMAdFud]C+l`e582_E8f&@6"+/FZ%-d-TH@BOn6E&f%+FLJmG20XH;a[=Q+?-q@%%aMVgCoFfY+i^WBe4>WEhB76'lR%cVBQ8PZ625Hb1iH.!oQ+#-@l)j(*i%U[h;.qS1=mlYR,LSN'&mC%@JD&KjN:17`TZG/r%j@mWF!@q0tJ01_QDcAkbtiEE"YWfK]FfK+X^^:8'![P*@G:68&uPVopeEb7S^gVO&5Sb$Vj#(4_KVE]*1,E%>?76sYg$rP`&?NDc_d4c&K_&JQ/6No7XTmgrac\@3X>t+bt0T$F;[h?'E2%\88.dSiYP(OpT5q#P,)5U!oO[`Vprj7h$:BoMaZN[%PLqtoE-9\s1?Ng&fLg5';If5PYa's(^c_WZSAaO$K<#KahU817<ZKBqVsk;d,NqVh_=&49_C3PbQ<uc9,`ML(BifW%8Jpt0P/WtZ%:?'riPL*\?`CBp+A/Jr`_b'29WDU)]S:lMCgXolW;bk2cO+>pXQBO#^,Et7tcSu4U4p'"GD`J+K4ouqlf"Vh=EY:ih";;NsJ<Op`%,1BL9J^F4TCakO8`IO0A1lST-057\"FQo('OJH5#,LBO0:4e=SbAn5l_lm>h'O<r3i$@MOh&2K=OE.5&J\(%(,V1a$R;rpdhfAH\%'8dO3B:OVe+/.E]H,W>lnI`Kc$Vo\l<hfs@dsca@K!X$!5V!V?"D>bHAB-"<B(.6jCoWVZ-&]`sd?W>9!lO4G4p(ABL7H3RN?osG%_$ELT_8aS$4p(2$%4;1*To#NGJ!d<K[@@@-1JTe?DBe;iI^c#/CHXU(@DkYINM;c0KFo;Wmp80=,_1s&RS'Mb"(#s[7XP=R+XDl(%T&RkNS:j'u-I#&2#(A(J$8J01Y]N#8aKOPI^n-#V!VnU#KZ7ob"&=I0,N8tRDY([8s#^Zm:;S^;[YC!=,OoAKNJ'4>2TWtrEY:ih%"Kh!2&8Z^5]+&3Ukp7]c`(*A4U)n=f7XTk'F'-a[Pb2UL,`ML(jaQ)I-R$"7g[G@\:-u2F,[:K5s1b0$lhShhP9;9I?j+A=A3m"@%IN=SjQc9r#A/3.pP@FB(3=-I5rgW`LIoGL5LUn-LM$7Mj$E6L]kX9U;8VHb+QPtj:0&H=%EP82c`,41s6VAdVTJ"sV7qk."4=B&Q%nr2r+Ofpo*IAhl2&](KIa>_^t*$@qC:*7X9mN@J`;mD&^@\(45Q0&#1UC%OCBI=0"1dJ?KW6,aj!tubg&LpG(LCEm+=es2<Z04(J%Lt9RUBf87%N8BP1ZLWqID"Abl^Q,p.S.CA^%n$Zg&JG0r`.JX0!=0o)&Xk;s0G2MEQN[ha>79<UK$-0-qn><;M[sCepp"jIKJ6&V%TKAoiB_]=SFH6S)7X)VUbQte@NF.ZdBUEoO[>^c:hUXZA_XU,dd&e'6kf<'ebqASeGQ_<3F(g6i)mu_u*"\3!n1Y+h#c/p,,ktR`%6'qA',N,[E+RYqP^dcZc3@9>1*O7aZiPc=fCEo/#a4ge<o.6$&BtS<[I!i85'33G3be?0OE/tdQ&oo/K6kNTZdjL*_a&S9Ef4^lP%ZIs_DO0%lg$8'sV,IB]qjuVM1HaHUZW]8$,pLk`G^UV,g(\+p[["'QnqM<m0]O2t%)l!QWD`c(6"]ki_7H<@Bld-:t\I1:ln:.tV%pY<`!jCkOJ`OARq5\ofIHYgr4!3<d8P5+Qs\I4?4(O(9XmXk/dd\)<6B?Q7GBN29F7Wf1ZbQNP7gI9&k`:lP0o!ggM6HI.AoRFE0%)7b[CNPd&`(I+,:\Vm):*I#=?=2VZ0`ou[R^YB!c`QQVk]C=uu87Hg*'K8)=3A"PW5Gk_QWPomGEu-4CEC'@Jhcrb8<YS_R'hI0a%'!HXRgkBCO7Ni\S-]EajY#1q(=s.=+J\i4B";Q"?)HCV4An<Oig6bo15bYk_<1othNG4)IpVWR86fH7?LT"rT_>%+abc_+=d9Mcg%W+n[CA]um<UA2r=ah]:e0N:SdW4a2o.\;u$j5-al`g/)rU^B;K4U9f^o.eNGkY4kl95b<0X3pZ7VcTY3MSO9X/'Z=oJT(2_Y!s]d%C#6H4_><<3[hp>?p#\VdSRdeX=O?L)5(qO-A"1.M'nl>!*XOElJHs0BhHM3T%6VG/>_%s%"s+I#?7eFTCa5P9_oTp!Lol'S#eF]-%^ZD]2QgA3CQqRW<#0&H\M07i'CDK51708WZIp!Tb8ke4mgIT?ZMC8E+,3U*G2hLJa&Tfr82;9O59)i-!>qhC'Qo,ooHC*5Qd!aj`%%lPq-EOPmSLnO&Zb-mO5(m/KF(2#]1es"bhCQ-UOR_ag9,EOIH`S(5\ZBjDI2f&5j=j,EBpG&^2c!&C7k-"8E(]jNQ!D;FU">*)"%^*%['G^nrX,D_)mb?4[3(]df"De&;V@0F]3mNg)d'P1M(Xah3WeO\EPS&nuC.-61eB`fPTWq&XHD3o/^lsAm#gI9K0k--+Ygjeb(%O0T3#1Qsl:Pp$=nP@rH<37UQ-a^URZ%TgeGHreOoPH`Y0nG\D]l'0SW/51=\pgh'5U<sh'XLpsiC,?P7n_ieqP;q=g-ngGMi!bqm%Y*>8tp1Lr&E+;G$_U_Ng7ADisI,o(16dY_C7mcV_`k`>sVGXdc_T14cJqoLrdTnCN._khq(N=EJZ.9G_k0[T5()W<D717*#H(e<7%E+@u:04luPP5N9]\/K4kbmgj%97&2%B^6,2I^_u0`btT=MX,):(*JGe.Or4,gg<`SIbH$sp9N^u^u@dP#_)_$)[4?<)TtJ23Cbh3%Wb<R?P[qEd4JS[?1O(&Y@eWC0LOZqq1b-9*&*=7Eit4cVK<:J<@nk$+a1HAp5W.1uE'[@s<MqN+QGl8RQ]+aYb3s-N_aUCSQOlWI%ked&[+n()$]'K,d*'m"+i]]RK8`uXW;>HPgdHtLEIY0''Y7QPb=KeIe,qjCELYYW5(kOk\?di^9-/YqoJ08UY0F\;T@"G,:4I:'r%]#'@/7%ssi57[]4M.3>Q'F6/qD_hHK2j#MAW&7CR8"pP'@Tk(=6+L&CR5<S^#:]#SKNIpJrC@W^=+i7o=a[n@<*N>:i_5e<%C$b&%.C@F)%_,=6JHROe_`ug;^A?E<@AS[P*R2#&`;IXbiBFd3TAmR]C6]rlGpJE;Q8_d^h0/WZ_rf+[L4\!90>uWQ9-A9;0/loGmNiE)%<i>+!$ea;BpI<l%Y,j&,9-?p@nbkq,G&o2+Y!rKO:4i-Y+1_!8@\$Cs&3fMX:)@B`XjL?Z6l'0J(%07oY7>+T1i#TM]LiTWMCsl#%rZi4O!jN=94H?#(W;oPHLiqVe$oMqo=A4;CO<%U66(-48U&CH\5#Qb\5c"A^i\UKm,`@$V32_&'P<]k5WkoQSLpB@"&bOr#.,g/<%Qj+ebq#&uQ=u!X0@?sqD7Z`G!-7CUHV3QoMoXq]\;uA\]Zr/h3dDI@\nZ0hSGS9qsj#l&J6YT#K+K[WQ;p:14;@F`S.,bjbpaZ:D%Y+.R>'dLfdhs".0)[Z.GI8BFD(!B-QHb:s"O]j_qG5!dpA,<5C!"^ff?I8Lopd)\oURG\cTj[#rLYb4D]Ib#:bcE"D,$E-aU,[3D%Eqf\D$-9:^3HX'O6Ghq!%u>M='?MV;Oi+YqJGb;G_(/^T=gSjT:?9clOC,\Ln>G-\hWD*Y[(#!Bj:b?*3?Y?A!Wqq.6k8.>N._\]%i@$SsI%tk6+GHR%$R[WoI3E]8b:#ncOSQ0Uk-,,m6\Rr8L=C/%4G(dulk(!Lb.E@j*7ua(LAR6Adnne@Nmu#n(PP]?s*8lYB?,gX%1p8;o$1W"I%Ak^H363U"bRiE!_$D3ccR[-XE#Ot.#:%IaMJ?#*bIjS+`MB.oD+hFfA>'(FUkkfXBH1U&NO-e:7,5d:.>hMa+lJhf%TldMFAO:6L=:l<\pc@1Vj`e[R_U>\Cj'g@G/U+IeoNu-1H61^2A%V+PKAdeA460MjNifc@[qYSVCXfG8o36-OR0Lb)"miA#,Pht>%g(UcL+="U=)B_td;OcKg><2d:S3)sKo*\:mKl),VLWFj0-i83r%S[[0!nm:Oc%Cn\6KrGBM%*D!4mWjf^OnBjUBEsLgbF,1cO+7B%CCfC?Y_5'&b$e!mK[DB^$@XB"^N^IKC@C?:#U;0MHj^:V9B?jo?l30_AKfI'.^rAd+8YDJEFEss\(+]=/#q-3oC.ROko8)Z"?t]3%D)F?3Cf"R^N6q(9$OWYEUq8='!AjK>.&keP7d:r^9K=)Ej4ElGcnPit7smV.(R#9-*mZ?'W;5opQE@VRX9]1i&:(m-HQ[4m4D.Z]%6*9&nS).:d)qf*JAGm1]#@;b%pcQ%B2H$Q\39GqfG1aTRgD@*"hY)$-gYc^SD@[8p-dQ26NE1'VldWg>4ng8gD0S.d>&S1P844gH%a'SR\M@iHu%aR*@,E.`NPSTegMeIGWE"]r$gueCojmA).P9:d#:pRJ:I\4:;h$1aWju0kN)^g.H3E&:Unr_\1IHY!d=V5b*n,F=m%G@i2=8PYl]7aMUF!A\;DTY%<4Of=\0F5XcO:g@B2>si2AIphClD3SlH#Je+WF01#l?B"r:AjI8Y@/1%?n?B,&\r7]i^CbQn_F&_(%&TkqAM9)gX6'I$Cg\#:!j5"aW;lq'jhYktD)$=]X]\jm5\HcjB(RF]OE"B2I-2o'JaS$%O&pmhD9gfEkDBt%0[PmG_'0QJK6M5"&%/h$p_*WdL7A,*^7L=KO"MIABSS6_ZPGqd+E5]*?T&K3+?;f/@g&\`c_PgCcLEJ4uUV_f&#JW?CqMD[kbHqD=+;1@1/=YUN60gad?%,%M+1oJo]Y$qUug$Q*S%d"X\%RVF&AlIT5@IB;f#oana.bmERoaL@<R!j"Fs5(nV-QBP]b`f2%VhBKg>X9l*8g,;r#kT`mK&TGTd%)'S2(@al"K)$<X$.O4"Y;,76gW6,B0]XR?2HR%3L3)iDPK648TTWQ[scs^L8`de`lDG6seaOS*k1j;FKo>`!f2GQ1^bS+s4e<QQH%O?7s-$(WS,G**AO=`)A8dsr,/OQ\6-bYD-l'6(ou%(#n(.Q/;L6Y2na`/Tha.R_k.M9'n[_T(%bJV*Ae&X!`EEfAdnWs0XL:q/*O%f>`(E39Z@&"29%[hSCO>8G9)l>AG%k[V%G.1sGf/*c-0mb=g/jgfaK;s6%>1j89jQ6"M*enp+a#Fk?O$/2,7WgnD4MQC$t7jbmiN%roDd6(1VV]`Dp#6n6CAe4c<_&)[S@Cd=!G\VC4e#WHaFX^YCpc?73QG_NL[a`h+5%\f&T*iU>-OXWhV2q=Ac]@q-\W3%DKu^U2Bm%\h_#?R3j&bfp*W3?n0Pu(Z6I:ap&F5F:fRgL!8,#g)DNuL$'MO@E#fM'-SVULOE/hT/KMP]r2Z[rVli`IHe?!7(2.iS9M1d$m(Fi%[rR^l7m)=<Kc,aLb$Y=[TdVTk(r"c!:Hs2AV,futlg/,RnQ'dVIJn:o]T0EU'hW%JjKRYC@&&Y7a6<>o#u*KmF1hCNegE<#F+3I8%:5FY.?Mq=e2/TT^*p^\rmlu;KI?W46(#2U8nmpJBX1s%dfOVD@iN1$b`1O3hd3bo=o?-S%A2sGPpDZ&-L?.=_rlIl=BRXdhjQ8G'%4s0gljt8:doDai]MlRBRiTDgGs77)i/m=jj6dK')cBGeT^Mf0ci;7`9\\ERjMEM[RSoY]bTXt06Mk?c4HA0<T#(*f!cb:>[Zhj:I%"NG7?Aqn-Gh?gY5??n5o^j,da'SGuMfQlhr'u#._kr2<L@ok%i*'6u3)(cocmbY'I##8R=*PVO>oQ?WM\NDZ3hrb-^\d-/N-SYN/%k:R76/G"@5mc(PhQf=G2qjWA3]/XUF]_/gnT,t[okdcVD*l[6r`T&>\hIrf#-a"H/chYPNQ=9Of_RU&M_;"_>`I<t]H6:Nt\iP;f%([k/_][$HFU5d2G5J95)3kWqt],KT%m!\1GhYh-SE9e5Y#KM!<69Un2H7rX=(=(_TOWOCUqj7<]bLg<#].*_^hW_b&o]YGY#61p<%Mj)t7[GcLEGk'aL,h-BPMNcb3F^aZR_F\URC4/M)7Bj=h31fM<XcJkBaTpI9ouGNc#O3P8:KB.=a4%E^-,)SAk1aa1s!W:`.qO4P%169dPC`(&0/YVUP<13IRXd@Zt\N/G$,I#?ClU85\lO-??1Yf=%OV#7@F8_+:"7GO38#ugK^)-GT='F>F;0%*aD7A^TNm^Gm0'Hdb%8SmZ:f$B6pa%0Z<+0kMja"ih1e44<qI3]DBrT2ci0CL.`=cRJI1$^'%?a"DDReS$q''$1)(O^rGS)6XekZrUin$kI!Oi4+\@aE9o%a-oi6NVSVhP.5pD8[hn^gcHKGo\o>P^YUi?iKiAAO'Z8rot6>FJ,Y1cDXX?]R-3lsM:DH%dd?:0r<]@`Dgb$C<B/+Mr%fXJJuSQM%+#0)0HASuG(U"q,87GL>1$`9AkU#*!HKDAGA,P`5q&]=1l+[,98,'mP=$CkJghK4R`fFm\Z)NdtA,]sY8Sh#1h:=-[5N&onjn4a(%*37j(iD0<oLCM4Ik3;1jQ+m[^baWgf-hjc#S$9KTc(&!\hql+d41fB[*&e.h@pL?c@q=`!fsF:rPk6e3(+5P?G;^@(_)/a0D"INu%@Wgqn%\m6T53AOS8Upbg@g]7pk'qLdX7=fb7FGg5I]B3uQS"3bqi_uDL.0Pd3Ut"bd='Ohl"jql"OlRPSN0['m;ni[W^Kn2q!KOt%^A.J(pZ2!^QD+nnO2HKTheS.GnVnVS\7a^B\+d)Po1tmk3(plsk]"a0rpo?dqu:nZ6\i#B,&%uDT0WA^2n8_\8K09%m&N88,,qc'%So>V(fs@2V)VqZX^%(+[.oOn;H'*4*_sHg=qpjXA8]T_kXmic1ddsn@MDW[i=0]?c-JMju*HSuRUn4@YjH<?H1!83dc[h6U]Q0.A%>@sUSBFZG/:DpojW<h6;Fm[!c4%HTHO2N7,\MQLsh4("FHbI<7`u3LRmrdgk]h.9eQ_P&R?]p7TD"4EI%_5-ao(JTp.C&[ml'en;%Z#g[q/t)T##'0CQV#r<4/sO?O>4>r98[g]LR4XTu=8D,k+?MKC3PW!nHEMq-h`nmA[M1C\/U%#K*oAD$obM>@d1<^c@NW8eemAoU%G5G^XrI"O1-Y(`Ha+"'-gYpHBpHN?Z_L%:qY#pkY8+02Uq:F+e[Gf'9iS;D:%lC??G![8IN5_""XQE]`ee;70[;kb/bugoG@;ag5%R'C>r(!T?ilP9#[a"sdLqW&)A(-d4n=>N8?D7>n_D#*m.pUVaFbr45jbWGF9p^MXtknr#BgGo"^Ah5cG_*!VPT<YnBgE!H:2h!hQ%m+tJ,k\lB=<t-W@-gkBEDnN[P@-dlBrQnV!2K-76]UTN$N%4VAC=gJ+>Q;3NHf=D$*i/I=2f>/T`iGGt(HZ)LX8fBLMktd^?[H*q%H[O90hI6.`m>S@>Ms[q2`-)sC4F(oc7ih&G6nRs:lgfPO4]dD#;nDM3fIlL\pFebDc82<1A`=_AaJVi$MiVf2!O9+?P"Ra:-=>/G%dVe3qc)^<YhAqt2o16E6?aVApY<84g:-\X$COPQ[FOcEm/PkN+IGC9anGN4)1I\SFqX`6,qi7X%+$EE^bHk`f0he4"0L_,dQ(RD)%VUg_XR=C:d[*aRFKcQZ3cR-agX]ZY<542uk$>)7[9V0H]Q@6]XDo\L/5j5;1BWIl4D;fru[X#<@n2Ips^OL?Bc/`LWW4eNNe4hC(%/Ou+DiJtVP]ACf>EQ$Fr'A:79(e7[I45Q+<VK##YVf]!bM,!#dnZ+e7Oi4,:`7C=c,DgNtfdY]&F2&rV4nE3uHs4CsEZ@[;cBGdY%8XM`mfs.)tg-%QCG)EtRh&L?VMRE,DA'StgEC<a/H]KH'Ep9`d,W=i?*_-j4nng>(IOse0M-"6C5'Xg/^!;PL/E?H?o5.95rfbIH%08ek:YnP4$YAo5TP7Ka<3</)hQTE^l>THaDrk9r'&[N5/I>fGoX%!_KjP/NY=WI%ojYZ6a_%]tbj6khC[l96k(4F-T39'gBYM1&`%1?8(;,VdWT]bj?-2rF=Ynm),4k.++Y_S8.Xe\u7JpJ?.</18E/hU#!qjQ"rbiqRTZrkFTYC)TUdnm&;n_He6TXJa7u4HfL3q2K:h%o%6amHH>qB@e*"'4*DN,I!t*E/4J;8Yk#MJ,dGDCnq1kLfK*_>d=#R-5PRcYdl:h&bl1'EY9/5B`;#Gf?B-k*GjEdAAgDO]jnVGV%r:MR0&s'cACAWm*(ZP>d?To^>X-DXI#$m04Q8=E=CFP-\`29l8&-)4KOi3uT=;si5A`_N'U?th-87J0UIlWZOE)qFI,IYl;pIJcB%3+D,(Gaqq423(f*+un/Tr#/)42KkT8M:JJC7,)j*6<X,N)+#qs+_0Z27E3R-j,!#Fm<_u/WVc_f]]Hjj^_Sn8)+Ol+lLd%DYVt(D%O!!h/)hd[ga'A'UpAXa]+Mq#]<AS-sqUL;mc.^DmmJ)Z/(RqhQT)X-%q?r)5WP.2;g05q7,e=iJ9IEc!h+2Xm:ODC9GA?RdUQObL%TD$oAmUN0golK<iPKmq'5&L2a=q7:K-bI"Bc\t9<^&Ii8[Sc6:)^KOfr?RGGR!q&H_kDOTA,-"ST,!&+q>+LbrqG$VDh!1aY71tX%@cHeCah=)9l5nO>+kF8\>G'Yao_6)0HfO3.`;e>$N]l1=pY.iI*WJEc%GeqMbN<?@h+\Biq`W"TFq<=lgc9WRcrAGeh8n3ZL[E^e%llQ'=kK>oBmFQN(%qd!0Ca?T1+$I-j^%:Kl)\6u5GBKM46&tX>QrDl#h8o>[mB2F#pZY/]Qq"UYc*_NfUDGj?/S86,4mYe94726<%XG<mRd>d\Agooa7BloCl$dIl7a[1($?'`ei`Z$"j4fd<7$aS-,*?O$!ln6KO[pa]Oj\/iRo9P]WWa>S;21t=JZd?@$&97`e`O.m=%I0ai9*'\)L`-:&9bOO`HJ,<XEo=4;MeR=S&G;39*bLX?I_X3oC\*^W)75qPqk.!noS&Q&`=bWWC$f.U:VXNULPNTBgCP.PunKuS!%K8H]d0-*em4T38A\,Ui?jLLdV54!54]Y7a\0j>CSE$Ds/HT:P'Silb<>B`60d]8Sp/k\3mjLO\^I_s3JfDNToE\;IG)i"G9^PuKK%Ac/F?G^?u)E/\)=V_*2^F@:KrP^Rp2S9mHT=^TpnA$\<jSib9L*LlU:LF"OKN@3IEA?,#!AC,bh.Irh'g>:#6n"@!#0CLKiSLOm1%0+QiCfF7[tbYHB/Mk@0.?h>+WcJkMq`PHm/p6On4RD[?GjP=kjCV>F5Rm00Dm6cbl[Y*dorPcU"MtrsFrUq&29XVRt/Sp3BP&2lL%M[de:>CWnZWpRIM>M*ZGQB:^_It%C#**mYnIJeHfcfjAMUPgMuqu>*l7K:A)7Ml"B0CLPpc[NMh%\V.OhYGL]U@f<Erq5H@ob[3%%>Dq?IEEm:_dDae"YB8N[cenI[R'Zc9hB#0>O5B8qPZrp1eNC"^`QM=Hr\M-1H#N5^nD:p)FRdqOLEBg7p#`;E(RCEPns%tq5GO/,%_8#p@-,%:n4!1hPjEkgc2]f`D[d5[(qt=bHcL&:DhO^L#eT[)#hsR)k\9PdM[9;fIk)$\LAYY/.Y(CKT.-t)sG84ZGVp^TRO`XcR%h4q#1BKE1W(J3fYAcDjjE+WT@X$&P%BpAp/`VAcTMkltPAbq&bFrKV92Y9/Z7SI$i4Aj":jL.3S_t(5Je,>DqS#j?9r:)YjaYD+,%21D@q+5O/2j*12jH+/h(PbQ#iUVC-YW)XlIQ3Z`hG-g5S8$hqmdCo6T4oX['-bb\oqSWfckKe1cWG#J-I(9,T(N/V%'b0oR*o$ZD%ql_"XQFG[MF09o`ri4Ld_t*1+*l%UMB$5h;BD:=7<eoJ0^#/6dK:ho>G&$KTHe@'92S*=pp8tc'=NPX):]/VIH9?Vro/ne_d;j::%na/9L^>*a4[aE&LH1%$UO]WsHA_JZ(*W>kZB<HCGI%SQ1;pkAblm,KVbS"`%"FIGRBNc?:alL"7=2D55A1F&2j7fi5)Ej3O;Et&e%.2>R),CFh9OGfq.gXU\*[l*"0h&C:hh)!%D?34TnMkhq+k=I#HD2Y3;qZknj[I47Q,='#t=1L?1p3*m?&3&*3D!E5\5d0hm[da\2%[V\5(f[B9(C36^^0Ce;s=ER=/QH,5EJ'U;fQUg=i[o+3EO4ZM"hd0dbm'ZK++o@(Lf>(hCn=-KO/(.F7idLM5D`q>NXSUAN3aN2<%ib'>RW/oSHFE+ro*Nb;A<uV'$2cB"fFgE71[XH9+??u"19kpGM;P)bS\$,hC\(\')s8JcDh3/dZ52;^YDL:_mT)<mrI/V`Bf8c#%%HZil^k`_?[DPWY8jHH(GSEBVXZ.O&ha\0rHF.AG\Dk;CUg-TiTI`q\Y"<LH]bkAp@Cs%7<?cfQ7qrN"/N!?ap]'.7MiimJ:qir.m%fD;ufLLOT1/HQac`a<9i\<fYBC7"@5oT*-5ne&.7O1h.u9tg;[]fiKG^9f\%AchbgYIhghGOCN%MOeNTT\8HSI/W0f/4J=K`3(s*%=Gjg1N\MsloCJT=V<BH(NZMP*R]SA!S"f,mr6+h>Km]+J=6$K.9j[hjibd"@eM8Jb//S?dO/o!^r3F&^@0WD)\?dVA[b^IK3;;pR%qZs?#6t2GAh6o)5>iog3PPFjJcgHLj:LCb]TNqCBQ/h<*g\&P/'A`&h=5c+Ph6lpuP;Fh/LWZNb.`[m6s7VjTAqAFdpc^OUKqg%-%n+ku_Islc"]>1rYq<RX+=l<A^pMYKOcIh4#8+'f0_Npq&S15njRCfjM.$.Rr[\j>?G3Obm5JFKbl\',a=uljo.@(hJiB>k3fQbV)%p:U7idFaT:^Aa2JHS9`YF6i^mn`C(+q.Oe@R?(#oV=)3][r2$[o7$jLdAR$7'g8e)kcK'Dr9Cei0t5HpIu<7UMqa$R*ipYPIZ[]i%.>mN]^OPD`1MUis]/]e(9Ulb\iY9AT1MT/0Q/ca&XL4#@D8Z#s12:`g3p5AqH]*j:2ETX$B\e!gEb`?RD9k?,N7opj(%q9R$n-?"%ph=Pl_8"i(j1][%LMnef2AUObj/r3VIr!q%3ifN:N3HR!0[JTpl,VDQh$EQDiVDs6Z2?PAcZ3!7hRbiG;Fd^5_$?OuT9mkBe%C%T%s*6j)%DM`3o'a^,H>drtq(MJLf\FaH<IXQ:i"`q+cfku3-b+?m_X%fj]RK/rrc%1tr\0@%595*"r9<&arFmO7mr.1r%m'^KO\^:^%U.MV8am\$=T)F3d\!-LZC__$gr&A<bnj;Y:_cJMjn]1E[O1Y,3O\8H1s8;A@mesYtSrU(fD.;ThqQ\d>?M`XG\%R1nrRd2Qr&.mP%i)7`eOLN73r]08#%pNZE5FnEQcD;$n`_1g\jMtpPbJsH]rmZ6`N2,eKR'5+fbJ.>qIHd4ODbtr^A!^O8An93#0qXRG(!9XbT5X+B%T9nGHQ9TYF*a\0GDnPo40=UC5]mADEhCh(]crU/Z0&5;Io>f[nn(o!J_k/"MaW&YEh]tDH2m"7nm=5"@@ZV2;qXaL.:G6u,s7UMT%m^m[\r3(mHZc]b<_R8?/(uNNGho,4qe**/PB-IbEZ,r8XO0V91*8AJnIH"mD:Gg=kEQW>"BDnt&=\Hpmrm0,%-[B,hNVE;qq(/%a%<<'n'F5s"&PB6G/rU%J0mD&WY4k6kLl]nHe)*bK`?3gJUoS5pq^2uEts%GLS]'VHVDHVtU5:;\nPP8SR!inG4GH]j"[=*(4@\S9f%qUS^Cg\6]#hHsQu<r`$aXfm5eq/k+q^V6i=A`K$;lScf4:ZICj6uW(nCKn48o;OqJp!fh!s7kj3D\%<oiVO^G5./)sf%-[epU]eA%T:c+'pU=e]rpoE*rI4X1-\"7.p@IaN/t]^so93DQme-DLZR<LMI<K@P1:4-h+oTp!I"W4.ROOfi2/dt']^t0qJ,8s*2n-P+I;s,'%g<RZ]YF`IQl-59ucCDUfmDg`TcTLOM[jd83m%8K=i,s?(;7gUI\[DG.J%GUF\$uCIF5bI>5AObq`ME+(FRK'J<'$=#jQ=)MnsOJ[%oCn#YJ,M\.UqV?=qY'^1-Pn/h`t@!PJnOO<@N/#?rl42D=$B1K(k8qsO.WDr^K`h5II>)aMnXE3_FLeXE;IG8SIb&tf2#bd)5!MW%rq#=ASj*2#5Q/$;jL-`@JX%r-kX>3dP2E>qd#%8<pg2MhkX>2Y/7kB':5"+o$*tKOSI#73S_8o]hV>L_T`7##'2>GTp3jtKEmiO,%IB_.^3Q\/ZSX!HOZp*:m7(%-C^VjHJ5C<:9Y>"oIHhK\UVf.(^T>*SBr7SD`n]u[AgZ_n64:YB3[eb3kZ'ADX(@h66GJ<T-[r3>V%pfc.%D`kKX\8<<?[njY`m8BFYC@dRPhW#EerT=coHu!ABfag9E`PFY)T:<.??cmRG\X6K7!j+\S%otAn)8F[Cem(hecg:#ObP6B:%\&UJ_h0JX7PT$[Hdh226qkeh?gO<+oTuVN[dYn]D++F.Pm@R_^q/1EHom;2/-(AQ.`p`]BKgqHQ/U5$VRteR\+m8+1]CI!q<[>FD%qg;:Yl[,FD@I=Y%5C`Nhr6*pL5)C&E-61IS^Y@k"*A@H\b5*^8[9ND8[XYfn\A<l'Y@#%c@7oM0B['5]U\8i=fP@Zr]Dg+@l'\/^%s7Y3t?d?t(dq/to]6ea*0PhQ/T"UFC/T1(Rk9&QNDQn7q]YtCof;/:*5C!XE2g"6+[k>+cs03fZ^"pBnBZK8Ws*Ufb`cqF6SLO9_%MoW(3hpB_d,mq.,Bgd<b/)gAd7Q'o8+2@c?c@'9bs4[+#\"5_WZ[E(^fcRq1_p3TVX8Ll$htZR92rjZ%g7@.#q"e`=hba3fesUSl%Y<TDA=*eNW;n'(kP.:!;hTI"=V\)FG#O04F2iMuW>G7\D+9(?/q<??=AhW?$(Y_.fZ+&&mhaS4fbcc1rqo>TZ:)E>YL$i2^gth7*%[J<D8gQK\_LZ%la:C+e'EsVbipn0o\V+gQMJT,$%_Sb9j[fGB--P4SZqV0IhJ7,J'*!.'LY<d])49sjClSB*ThtlLho;t8jDuV`'%4"k]-^gG2i&2^P3&F@<K1_gqpK-)+en40t6G&U"^qt&:O>e2^WnCu])4EP)6<p\LX?iToE4kd`_ZSN<A>WMcUVP^``%AliGkDjQj%]>=<0hdH<S?[dn@qtM@Ap-"r#hE#`-a1/X?)f2'jkq.(=qA>Q2^#^CZA$osE>25bs-/*U%DSN[5is+8E-FJ!Y:g`tjq#baM@h5pC%(.[b#[^R&3BG30,H5kTT%pfL5r8TAPp@1%E?6d5(2qK.Qhr)q[L><EqpLC97q/L,tic_d9')VVc[KCDDrhPV@`G=qTIqsVfV=V:h%oq18K+8V7HT83+*e3KPu*8*f;]:Q#G[]%]P6bM=L)sf,;4a7pX[.4+/r!#g4<_%RsNEo!m?0o&L\.fEU#IUgUe1X#PrAs,#r6ee#%?g,<D3UAm]f\[Je?LbS?KTU[1`#CXA9Y0<_bqF"\k<e)%m-HR#est]i8!gEh8p^!nB32ufEG:P/^1fh/oo<fPD?=ckf!Y[&5IX(F%BgVI;QT'A-b>IZ!^1s$R>b(fheVe(p4rTKc?b,b#,UC-OFQ7_jY^&[H=$M2Z5FeAGiRXE8q1nA5+$T(`[Qh..s8L=A:Z#OXNk\`A%rihK/9m;Q]mMj.ubUsse`Y8?fHN)TiI_BR$nH83rr*\'>Z'eG@C]%QQiSCu(cLB[4?'m8?p=ISnnjaKVe/XbK[Bm=@o[-DiZQ1]F%;Jt095$G@VE;/GL#OS.4gF%Jtf_IYK(O%NOb%KIQJsOSU;<Z_7YOL!gBC9RHk8nK2_<-a51/p:6f4M(_A,gR`diCC'cXqOtFiW%0%m:bV8Vs/i'orG!'VgU2\rq=HJbiV"rR`MckZtNe)g`K=A`1qf?CFnH<]3"CSs(lH+iV)0s9f(Vap6,a7s6HRYKE'OF%j+NXU$eHJ%k4*9B>$\5-m!nKnpmI-Ar5."hdTP=$[F9dZk=Watp\/H?dI/1'g?e(7Br5H"R6%JCgP9t4oN2#Lh.dl(_bh-J@0\bUs*_r^NGW%:%d!CVY)e5lMs2S%%gRi:`(=ju5J!pIllaOjWCRZEXG4bp:r;O-#XF/ahD#!u^D4S69hN_GKj)=@h\.I'4^S-X6)?+_qlIN?7s3(GV%[e85&)-^QpI-9[joAt\.1M=_K-dR8Aj&`i85CWL_pHSS's-s%;p=iVlCANF\nc.;Bf&9REqGSR#nK6GYpV5NFgTE]iSNCtDm!'UZ%](t+L[srYnq[^I>r690[IHn+l56(6Q:[d+'FnsO/mGm`j[n`J7CU8=L?9S;PS?6Kf*c(OqCN\q)q#<SYYH:$tcMoWuf>lqOIqNQY%[2Ar7hr?rX)unq?VcGnTe:4%S<i>qElJYgF;bue)+)c:Mfbn6IVc).6X?mt'4l>OZe]t1U$N7@)a]98<HLU`2k_I,qmD?":4#Mb$%IcVq]k<GNgC^ePX0it8*fuf;Vi/A2qrq4P-BD6k(qWr]+s8M*R?[hljr;3Uu&`!CIPtq:'X$+t]X`E^n\Po,MG(=p_]C3;?f,R%b%21(in^Jfm;oJhFSXEOH%lPqg9emQsLJo,t1b0cIZKIr\oD"5TNFo>&R<cnFI>j[dGs3=I4a;Sa)8smjU;]379J;C$85V*upZ-_rm%Tj%M_<]dRh!ToM%^j)+ERpDm8GhiB$.jk=!4YgEMhcZd%@!T0/e_JI_6YHoa>pmkY(TJ<XGsKmU'0pCo12<fVoOFf-KPeZ#Q>R-i%&$<ahlXmBG/tBbt.h;ni[soHDe[+DL;arrS4DPgXC0d`"K[u_pfBHH$(TJH\H-g3[^e]`5el$_3msE/TFkFeDH:MZ9=`p:,Fag%,%d?Orbf)694X.H`MSSgA6Ntm]`:.Apa=`p:,Fag%,d?OrbedVb.aChp$gJ+KM@@L_?hL06+7Bs/_b#LL`^o][)6L>9/W5DB&a"JsF%3Xsns+gr6/1,K)n_-&9sW,0!3n>Ml\X*08peM)TZ=tN$uH"UrMC[GsSS&<80$oc/JVCN1<h#<^aO,"_\6E=)6ib:p*MK-=d0Jn8[%"D<e<:t]gDi?*.Dh&kuLb?45,oSWtAj%`d",I?&#;&PpKRZ*M+=!%3P_bl7ToJV@T_tqi*Vf'8D4-Yc]-$Ojm9cH<6\D-/uMm7kD%fgFH7lPt7J@.lfWfS%BQ7`_XC:7J:=G3Zi^YHa*p_DE<o6^&(?FQ3`L:5)fO$!AD;KKb`$m0h45=6.KuX0L3VL,?XpmXu5<lp_CW%A_F6u8gA!o32^kjeF/?]*bM5l@_Y:$FHtH]2d1^8-`n]-2sYoJ7FO#&m<N9p"rgLK6$!r9GT-9*<d%M`'PnqOmrp1R7J_I\o-*1c%SD.P!A?9fB@nh`-IT>/PV.hgDM%MDeI`GRG)=mPEZTH,<X"l>G$J;Oa-X=Q(o/=dI,=H^if^>*Z4m\%<V"++iIhc8P]cf_[q!*TQ%C2A>\[4B_\=LIl\ri&k`="Ad$iuLa*D2;9DS_AGfR-pc+(MCKmCjbEr-Js'G&_[hTDH7f&j6p)#?H%f^7a$Q37WuPtB'_2"AAp;l%K];buUt5#K+]9lgPJs[^e<GkUHlQ@#NXFES*F&8Qm@qtrUsa5#I2#7@8?q@hVE4s2Fqtl"&?E`b=DQ])f<a^/)t2Cf?6TEDAV^Vg%DJ,@%fBr3MC2o,bS\C+;dir(1NI!.h:2b84<J(maoIr2M+jR6J4hbji8J*W%Ib1V:W'fl;E2W6N%Oq.Yndp)PV-<+5ef8nfomCLE%iuOohP#.X[@f"Zu:+YdX8&^mELk8a6d`1R,YpnaOI.1*))GK1h5/Nkjh9Z8Tp.)\(6_.Kr-C3(c4Fj0m7gSeJLD*,sH'_BBpVf0N%(57SC%/&"JHk,"Iq.)n7mb%Dq!YF'#,=:5=(Bj2QEun]3o6IEt]qTYVh:Mtakt=b<Q$%A"02[9JD*VA'@I9eolV'KtiqHm"9=*M1%Arf(j41eE0qslKmD>La?#Sk2kX>4_"HnYV4GACR9pm:'*1V7*!BP!`u9sTdRZ>3en,@P,;YtJ6MSR@h^Oe)C"=Ai7\rSo`rk)lpg%.jN:^c`]r&0j0pW&Hbs7p+(kuir^50kru/)=D"CT`.#`fnLE%W2d1\b_P>k.%HHW`6gBHL:2T$RESS4,;bsOJ=OYRPqY3ge":GX7%IILs`9iSoSKb9S(XBdZWdb:ej_haXk^LJfiS\XSe@77->8t5fs5=1'C"fok:/0@P+:n$+tr.u45NJGC'=1%5e`/dQrllSY5H`a!T%X5Y3r)#KO;AeAhKj-RAmmi>JPrRa3=[XgLhP4X#S(@bu*:1=!D<*[65V)mQR<ZAO$ol(f[XYAe*YV<<jWW*jn?gu`_Df#i@"OS+c%N0.+WPVM$l(e'kLR"eZ`Yr4gQh@Hr[7CoIU\<A+8ERW5r2"nB*fS;C(TcX%722Xc^ad+EQX&sAsC&)l9K7#SqiepqQKFFSP\!\5B%`Q<mFm8(,)ak<[tSf$5#=nN\:D!Kt2ejXrYA#tIPWr=GOXF85,RRS0)BOp#W@hW9QD!DN_f%=dY/,P.R6IQLk@[/65UWYAM%9b;>%or`iQfOE<b)gj>RZ//O_bLCl5+g5g(X^Rn]9e]$LW]O*RN852K]\,+C\$:A>h+I<sACS*/Jl;-9BqaBV.$Z(e.&!BH"05)9a2ZX+%AV>FJ'qSJ0O:QlS#kA"XO0P-nh#r!<]JaMB,uh`C!:_O`#LmsFiF0=PJ8nJc`-7/c)l](aA'?[2^jHPbQrd`\L([*LPpPK.6]2!:%0ih*P0HXf4pZm\grD,.d,f\WPT/Vp*L^3rT`Xi\&6QIlFX5@eonL+GMO0OKb!:^nIfR#OB1$2L(M>J.M\mlOY`mdb0i]`):pKk@j%4iN(H0AHYKmtH)gm_)F,%X]pkK5+)AIACSNb.Dpdl%O*WmQFeJ(j"JZi=8nr(i#!UqHg[%i8+k9a9iUSLmHHsp5#"i#kh-,:VRnQ%E<PW\0THY?+G_7M*s?Qbm$`&8@p\1ML)MGHPX2O7j"?Q^gbFTpK5aVHq]OZ-E$'a[!q(\[+%HbgK",GnR37R.+.tr^1KqpDPk,A;%,KSPhT14CR@h\>IX"7]]IZ+m6O[ikS;lm9\WQJ^%W6.Krf8[jIAJB#U+Rm@$[ht^23:LEo"?q,_U50e6]7_AaZ;2+A4Uo%ECHR3-%gYm%g\9LrW(b/c2pUCk(eT#LPAhV$Rdu,&>j19ldLjK<nST&fHZqt<?;bJ!<KY;\)).S?0!qoA#=2<\;<oO=F.\aA[kG2i9n'%K\%`t02;mj)I!B@*@H.I&Y-"qObB(nLi23l[[U#EYs>.Z;)@J3er3qc,]M1BYX#S_h?D]qpQ#e9FfL0glnpX5gFL]aB#7@[6\W?:FpM%%\Qf0<L,?/C())VN3OEM"P%`^$2uQo$G:,Y#.oRo70UJEZ)R6rTPbok49;BbbY\n2Y_<DkE.ffD;1^`NMtLD.,A\OS[mtj$q@#PW%Yt,*f##r&6joLIt@ZG`p)Sc]UC9bno-Hr5pD@soO!cs8oeW#+26N4ej_$`lCf^s/ebTW%a2b8cQ<7iYMPRQgrJ9aP`[TH!2hSiTU%2(%PFe//?M37VK'AIQA-W+-'66l0@,%RgrgLlO4siX"2#+9nh!W^,M@]U^=!*2UYA?l9XI8\fsX`u'@4WEK^1:&mHap]TN=J5<1#%OU%jhXKmeaV'LU#;B96M)5M#Pb1lT6N*]L*:]sY@%X_1/cDiUMG>=-#\<BjtE$qPqiD*.m_EA"q/DPYkb<f.bDP7)"&7\OO(<!#u%/;Qls)>%XJLa!+E!UNsK)jHcpHNEJ9YSY*H_4MKQN<q[,2%+SJC'K0rWN(eRZZ$/I(1Bm3/],"!pSKH\]7SoQA!1R=a<]<1`_B>_%!Zpu:0Lfb4B>%B#_"RiC#l#IV(BNE'/5l\!Y:>m]141cSKJEh?#\;"SMkS,mJ1gou'9?T0,>:2p<i"7I$FQ7N#$#Ns(Zo5XlQE6/%G3:!uWWnM1Slih%(3<NYl=n>><A0!+$5FI?CkAd"b;%M?"S=/!MU_msh$QN;$3KV9WKlka,H4_&;(P`K#eHE6Ue2)2+b(.?%'!GT%8l1FkgSok=,HF^o>0Qk98l1F+k1#k9b<B]pf%uNi.5rhZ;$6k?@m,\L^]?<i!k"CS&kYuY"mdZalCc[6W0:8/U)ni20@U)#VZO7C%GHDM;TF.I!G@]61(e;lITgS(cWe2E@Wt'`KX@`e60o(/gm*T5`"?T1t&F:Oi6)]uHWBf3EU?FHXlm1+I&<g&u@@S<\W_EjI'L@Zk%.nkc@WIl*I3HYo"$*XqlSX__HG&Z^hfX&Je<e<IrltIcu6)nWFfKlNO-&b-iBdJ`0Cq"TGrVD>0hRqZp,)C5Ygb"71(T44='(/1g%-LP9lZkDk9e[,tYcDkS)i5)FM$IiN"71f7R'U;]#\N'(m-'Z6GM/q'S;c?8Y:j,l6SNmC[=q!7mX/8Y-K2iR2BNnn\'U:][?QJo:%^k5Tb7gA@N<%WcY!3)iU"PSE+;^[MiWi74GFs,>b$09r_mt>ZkgcJs"ZbgP5i7-7rOOA\Y/VY/SJ3=23_$;bF#^0k,'En:5fE2@2%A'A?lJfUjJ8Qjd<:%-[GirL_X#ibrq#D*q7-mAZO:R8i5QYRpK[?s1u(n4VW;1f)>:Irp,!OS9s.5ZQUP=-g#KT\`:E*>sMTj`ZH%)%rWoCHiH%@r1E^P6C%co1smo1OrJh'P@EHN\QJiK!T3T$4UCn,S_65WYVW`TgoD\'cp0Q`[r>nkRsR4W4iDj8Ms(X#*<SW!Z8#-%Uc/BX2+_]jSna'L3&p%t!!dlOP+VhGB;@cp3&O9YL58<^LcHk@8Uq"AC6AQ+:8pedeFmpV"Q16HqP?%O-oFS3##K&tedS5$,cqqL%WOA#+^Wtc%R\W.M-oFSGg:f<V6-p91Qi7Cb<CS&D^o9m,1k8Mg"DDaL9bNqHS1:c]aJffAA'AqZfGnC]HPX[?<R,@3jA[ST!)Ad\%%HLJ;cp1@N!knYZ.F<T."\B'Nf(cl`!aeo:Jdb8:fF4QTM9S:Xc,,j4.^9j^WC:[93pmWR[^\41+TWLsW(!qS;5HJZ)79`n190uE%X`?k6$"4(68o*/G'oDukg.E*;+N1s.9Sc9>72V4dM]+N'<VeM%;PcS[.965ner3E.EUSI*&an`09)]7[<(Y>":9>eb!)BWtR@IG@%6j_pRkt503_/BYNJ>#X_Ig0q.(%UG89&q5\;ejdI9R<lLJ@FX&hQ)6J9AA@e70%R:$UG@)hUXj&#_6`L(T9%m.1u3oeP-Es;sB.D%X[#RQ86X^S7.^pohRGf?W,F!%Q:-n91oRN-phrHk[YbWED^S_9"K>"Fg?J[HJ9hGB4)J(g58-Vg4UEs.<2DMu8<n5EB(Jk"R_-i"%UBD.,c+g$fk[l#1<>%-O<-o0i,c=7c`k^t]&G_Ha.Kp_87P[l72A[E_bG6q-,cM7TR&hdF)9JnARh;__&7C[$`267-UBIrHS!-;J%=VVuS!^TV^0Mj-r8q9BmWWZu\WCh]p1b^$qkTj/b9q1`C&T$gJ%kC:h7W<+.fSis'>4HTa;g"nd@abROV*?1a2+rEgE,(^<[$arJ%!aUc0WhKd9SloKr%SG!/T+R<V,rHnq2+q[R:hl<IN)$?t-&@JsSg?72L(ZqZM^bY\@0`]Ba\SCPS3YIFO9eV+P+U,^2+rBfE,(^:%Zt[@U#g(DK/P9/D1P/T4[&-RZ7DFj*K2f1qAopqqSNmCYk"\ViUme,ED=0"PD[ANa.:qbi#ZB3MA;_b,6KF\:ZNOqEWTHskK2cn'%a<9"aZ"\8c^$c"Mb.^Y##D%h:hCPoLSPsSPIn"BlQMuj$e1CP9_5UR1Rh;0ZV*Af$aY+le@\Zhee4_An(pGAaC=^gF!i>$EW_B)8%/6SB+WGOj]n!C]nd&0UlTEqplKT/SaP!9U>2+q^3E,(Dd4b6OQjLE1+:F8m^EDK?%3>-P*(I8YKh<%.&"NDiJ#D1h7A"2sQPl\28%DY/B`<gBSf9\0&PEWXLJ@hbE+ke/GUr$Um%f(>;P!$G_iU;\IZaqCF,:XT'5"25E7@EK:Y$.PE?6k`@n7hTNVDTu(R2E<H3Xf(GX%T[k[ER6[l7O[i.)7mHs'*^0<7VQ=@T"DZ1\U</f\98FokCYRCc![_[,&u#]^RO(?8W&8(?XR.NEGmW\K')!tiC!MrF?,?t][91Dm%1&rK1+BFDo^*)".2,A%-c;L@5;5Y$^+jY[D+uGEa,sk=Qp3n#*-a?9s-5()@k298(bsYm'hDD>oI0.id#s8'+-GJP@l-2V&eV[u`%Y=aEon>\<Y,-OUk-M"/nW$sA6_1&6]F_T2j?BkdjjAdYS"C@AO9]T1[c9u!(i(W33$-n4+^U^:OqrX_+&Xo_79\_q7d\)H(.Lhh;%X4!Xf-_f4G\<BsOE;.Vl=aDl4o5BrO9Kan"LrlZ#fM#gUaj!4SXm4'NW`n.N?r]eFK\aCG9:Ih'7hLEFZmlBN8?5apP?&tqD6/\,%*<[7e._1s<X'4>d0eeIb`\uaD&`D$K;O,Y>1O2t=e:t(j"i+d?W\eB9Y=aFZnu=OF%6^U5W'N#t,h8)G1O6AU@:o)1`+9.Vp&mC>%=*nt$-Eh041QtmeEi=uX:]u<p^0<%-Mlh\8@rQ)cX_N8?P?*%h*e:j*V[]q."E=qhcY.lNG5@.7A$](!]$)9m/T55,dl[oqLmFe.%9cM&>s".Z?J:4"K,a2/>#QDQ=e=d`bi3RO(%8S;X)+^DY(?tcYF>TD]9$NdGWR@<)S2sL2B99,MV[X57!c_!YW<!ErZ$e&oL?>9=%K0_:q[7H'bY\K:1br@Vg!eY*HC68qL@+DRBTZ%0P-*XdeqbgQ/@?>5djNJ`HMcJUD7i;Ue=LDh]e(CkuRK.GkC68i\<^R10mCmqH%8;63#q@[lt<=;h)0EDbp%SeV(Ri.`"Uc1(h[<)Q([f[Ggc&Abt7<11GUR$qrGQsoY.F8Jm/KGu>Tb[s]$plNYT\0XZ8:Y=="tgO]%)&np""DFs<0_#=A(5^9E7P,7B)2qap2R>2SOk@lce=tJglh.,!,X=.DrY>ge$q`)aT[n>[IN<D5V%tN,m$(\*E!N3T.F8Jq/Q/&U%4+E1<B#YmgU7J[B4.s_a)3e=#2mZFtdE6&*V%uYL!_P%JfdrfG+phGWpU<\F(>kug['Wt:W\K#WcDX14SHXsUUc&St[:j9\J5M6S%B#3WeU:&8*Rt$@GB#-[-U(+QM$+4G\Z[bl1"D@h0((&=h67ihC"b^&)5`6:jd<]HAp>;VC[0><7M^2j?W\GY$UD@Rd!_+bFh(2s`%P";2K#J@IU=hpt)qeHSJs-?(L[$Q^bTu7t9=q^)+J5V;iAc\_DD6PTeSgAC+;K/M1,_:pA^I>H6i(QkmqPF:M+tuD>cqri(.M"cJ%A!H!F=X5m51hkA6B#0n(P%K%P$V7ZNmQiC3eKPH+YUR(QK,3@[<2;ef8QCAKJ5e>XdV_/nUQaOcA6%m=6<9r>/0n4IH5>BOCa%:e%qbX.\K9jaXnm,cJaV7@o6;EdK/L8lj;+i(38qIh?.Sb"f`8?6tAgtMX$X^3>e7L-nOss:uKrg0,S/-.h,sVi?[0UiZWW["O&_/'+%>&Zm;'OkBG@Hl*)>*T(>UfFD=!a7/YR&hd>=idVkRKZ2\MmR*4Bptb"cdJl25b4]#rE2Ccd[u5h.fEL@Wm[MnUal=GE1EdrIhpqP%<2;AZ3E97hJ5[aO$TV3bZ]J*32%)EEHYX!L<V!Kk`nr!9=g2nF8:HkU'di4A<:-fiUf=>>MUOCNlEcXO,rI2$<?#X&Nme[kc&-#2%77snL;mii4af4!">B*?EBP"N5;l)Z.3*#7MP#Jcq=`I-C8:B&!%&Mdf[8W?AHR5Y+EO4YlC6@)K+B>O\<g'JYAgOEKC=WB>dc+lX%5,BJ!=\5XAT9Z3%rE2Fdd[uf#WpR3ZUal=G8ZL4221VC-RC4Rc.7#;YC3d.;;[;l+-)YL#Z]\7p^UB;(#P)LRVeUXdqX35ih'n3u%:]tc6X>"'1V%-b%W2*CpGZGe_Xcer,3UBc3S(5WeXuJnMf_o$^]NML<WNH@Y1hi6+X>m(\[D#d`9XXFFVo:"<Wtm[qdq;t2[NM^X%gD7^7:9@Ee'hPe_'kkSS-2U`6Hn%[p8o@[kC6dSU+Os)t=e/KljCTu-4('cjcjE[QP+]4-DcnAP.s<RG9$do?XjWjWUh[S/?kLkW%Pm4A7;C`2[6)mq:Z[u.,cZ32?TEt6?^3chOE7V#r"(CBBWqFXE;QZKT8(r_J$!KWp<>)Zj<,5"NI5c,1!j1+d<2Dj\F)$s?Xl.\I%LbC0a8o%I(C6dAOT[YHr=e/HkZt@9hi6$,2(&O;sjC\Xm<lrYp9!+8K'pMlJ5:\.i8q'g=e118s6)dlTZXPS,Q.2lp92d,oqj"/i%LjO)UQ.G<<WE!E6G>>8DmHhZg<Vj$,VcN'.*rCDeoOj55^K(-:#H(T/clS]\,sZh?e1(LQK2\g/de;VK.^@Z:kAQX<m'6/k8o=:9%8Z><up75rWQJFX!<p@pOPZjnJHVeIBrp2qM<Vj$,V,f0_p:g4/8q6QeqHKd\HY:hXWS)o$X4B+S0PZm&m(oW#;R=DhR]9rD*_EQC%]sbu<h^\HTj#g&$r9U1n9\;Y1<U6):.()Zrp7Tnbq:Rj+<lrZ/PZkK!fjjbpeQ1Bf!Vae]8e4\!;O'C*<VpQYEbZqPp>AoPD"cph%*Tl_1WD]0J:8q92YO.MaASNQAp/tBBo&NaVb9$;TXgC5deC;\s8rjWC<GS'e:=N76k3S6,Tk\SRpT7%fCR]`QNA3ug_4Ooblleu:%&ahVT;^F>K*2oiJ[KWo`WtoM;lq+4?TKR>88oF@AeTR55lp7XNS'(X][E2ZGQ.^flF"(*@G;>L_Plg?hWDoOV8dQfJ\Q92MQq\t_%QVs(MAM0f/"j1@JPmWbdPcE#K,*u2mg?_D2;O]i?5#e-6[/<Np!>:kqVGq]"PKB&h'I].o<@LaT;lVt#a^e"D!jp#De>gEW4jKs+%$.'_TQ`:0:dj\:r9r:jhP+,"?<2DL@:8pj&p1./Ejm5R=>3bHo5da47dPO2jPhD;$"=V\I<Fe9&bbe>c5FG6F8q&Ob;O./"8?(%+%KC8uHP*uLH/QGA:,ZC^@RS9SXV)4T6WG8,jacrgT-^,uZWQtU(.ePg[/5;E+*3a:Z8prI_;O.)h18QJna^e"D8s@A]Wh^u).9.hA%JWqX\3?[o\e_]!\]9B8gehW^mQ25#LV(2;_Ce@^uF(loie!/o3$/\oIlA(:>Du]F>\78e2/.E;&9Y5_V&iOt!\sC-@Qg[o_:$\T"%pg/Z<E,Z/>[;aOrc(2$@S:%=Bgt^86_!*l\2nr2N*8^MV,^^uV@=9M8/Rddi-/duf7GMLP<eQH6$+8Gt.c[bi=5bE0-c0:t-YA?'%mT5"!IT;&;AnsiVGa0D@?)AeUl[BRD_T4/Gf#_XW"QY%YaQ-AjbiZ?7"ARJS[J>M+k0X*/nK\PAiaEl+B'j!gJ2IFhIT6GeAo&dO%Ghie<fnD6?%dSW[O6VrdX2E-^9@#*&.R*1RfS\"Tlh%:M$WYKG*O+O#SW[T-QoSR==lm62B:Y)\poM&%cT8g;jW*!p,OV2-?M1C@%.h=eD##p!$\ZlmA<S-J<k81.g6T\\p%5`CPB:V+lD'$JI2RBR>N!a'+e!5]sY)+OBWq"H;C.I*c,m9k;i5D.P6X#3+^`b\TNM3Z:%]#1:d'#Y\!9rtefD!?HbgI1h2]dYjpNR8V]MNpn;*ZDS2<3)g.1Q#m\Q'><hl%#VWlrb3rFX.B\%G)X"6'#cBBI[W"$<hf'J4Ziq%P:AJ?<(:NHW`[qrjl)j*W5RT!G]%W=H?j]_7Cu4frj8.QIbJbMbqW;U31P/*k"PXo-#@>_G![R#V`#E#79bCY5#HTG#^AN@g$J!c%:.8AjROk[Z::$I*?Z6J^4;gBK*X5`VVS_a.[o()eZC`k;bd>0gif-EB?B'q[<glOuhl05XMRCH`Q;<6GrT\lOroa*3(`X!Z/\38F%!gBCq/C[BX"OS!mLMW"`-Ei#7HOcJn'd@.aD6HHNY0p;p=9V2^gRT$]\]'(cm9Ia-g2s*5ON!f_`?A^CU/JX]($D-R:IgMh0L%kY%*d\bK7$`J:N-B'8"=IEF=Y*:%3mj+&GM,c.V6P_VIdlXcYU3SGB[_!1(hVChoHS913tLRN3O;hTr,cO0l6aiJ=_SnHH"L(9<NJ+I%[!Xi"2"2bXA38K[;`cHj+aLcW9PkQgP6G-s'r7Pa(25[@d2)=oQppAd7^uOiWZWB7^Jg6WQ2@&q@UX:CS)#MMUU40D_9LJAFi$#;%2K,pL3.5U7VaZ#pkjB9RZ8JT?8&Q`=^0.Bm+$C"A%9>\rm56Z&E>Geh,/OPB=7LYgDT"e[O1\UD:GC#\P:!?D=_S1sI'Ym(.TW$_%>!*`Iip%jcnibkA"%:7/9G^J*:neIa(pcpW6Ps%ppoS^bHEW<LU1OA-hBD"=hbAfS'sB)L^@!p09RY8[ZX4I0TZG%G)Kcu\J![6D%@pt2GcVPq+<,LE)pVZ6*CM3%4NiMj_c`S,>;*.Fub.!#YH0W*\ZdTBWM>4Uq-6nF.-%Ndp2Cbm.d*45DAoO#IpJJk%Zelp<#NCND%=P_*i:0QP0der"RdsHdf"fok:m!:>ePd.$LB)6*W,=!iO5b&g!nq8>W2G12TDhmgsR3j:_a]_2PCL=Eh=Qaiudd2a6Q(@/5DTacj%8J*W$I`Ih(44]@4V_ekjX;S!"Nu5+&'sBsCEMMX5#p\<1E11`I9XM6KdjU_6IQigPo";;AZXq$ll;_k=?[b68;^#Q)K.TP&h>F!j%n2JV\_haXk^LPL6TZun88*4!aL>k='5=:]TNG=IMm!:S_7Qh9;HPV-;+amtA4eq'r2iG4>>V&&=UQ\q6aW7DB2](iq6T;b,N0N\n%O8M2#ciS)#F/(_OB6'0)'a:qS=ab5uX3@%a+&(^hKP=EC,k-1K9V5I=@?_WAH\5hP[XQkjVB#qdl`!nA4uDWI7)U"X*T&OtdT$l[%=1f1k?Jb=d%TZr]8To9T0X?07oC>$7A8>3r?H&B):<VhLVl#F>_4/h-[&5/"CpcusOD1lYL_Z?)8rd"nb%R&PN`['#3au6.iXRtX%7:`cg,?A>E.lh(XLs[OiYp(u-W=t+e7]S@i`/;WL,tBKoZ2]Ye?^Lt9%ngG".lh(XLimPp@RVWNOs="t10UNB,?@3!.lh(XLnku1%`3P6,Kd2n;3WMLfYu?UA=HWE\jG4PKHratLL_Z&u8rd".@L,[uX;I'G;N=jVX/\:dhe%;q=%.M!cUs4"ECso0Ar]t*q5iY5'jEjP%0-O>]Y]Rg@b\&4l/;l)#Yq3>*`/7J[X#,%=MF_D,8$#7>AiX<h-FAp\<b+NI3F]rVTiIOC@TdO3Lh/<D7<X5n/0(p(b@oG+dL180%hN/s_A4A(0@`9dk<LQ!Y7:`cg,F4$c@tIsON`\#F8!k:$+qn/%&M#W1PoR&<"LH5_.rsmg([`$JpVOTr*O./[J-fY&Hc!YT&M#W/%PoR'gPg:i(*O-gZ=ih7+[X;,XLd;U,0ju_e&AnoIN`[&)]jF:^Yq&M.=>=8I/OumuHrb:+MCkHc(I?hnE9fq(G8q9^,?BbUW_AMZ%/PM1,ECso0k)NOU$*E9E'jF!Th^%-L&S"IIAOXZP.n1KlQ6TFH$*D(5,F6;22u6.f&)L:HL_Z'"8rd".dCFd_-t:A5j]1hFTJ7V3%Z5g,Yb@hXA*3hJ;-q>frC%k!Vm1t^a1!R.3<)gAKguX>,'A-6D=>>@ijbOY6cq9=#0d.X7*3h''E5]%YJMS$KDu$J<9mAof-<_4-%Jf+,?GJr2U*Cg=TE^`L"aAc2\`/4k6LZO>'Z)&\2`S?-Be%;9J!KL$q"B(L0<^\Df3FYFSZB?G59K5'a8$'d:<cZ-a(i,'R8tr![%:JJb1?Bla96oHPV@`8IRPp9='i)MdH74,@(,?C=t=\U3H^!k=N&9cF#*3g]n=ih7+-Le#TZ!md<dLdubS!=tu@_tZ?N`ZnHXQ51K%+kDtcA+YUgj=u3bjbVHab(0g;4%NA3=>>A+jbOY6c&.N`1#[ei*3h''E5]&D2j,S66)enCMG.V.8$&(CWH,q787j/<XOr\=GnFlC%8A$*9/;pdQ"J$#g;4rP?jbOWb3)tu@&]q-8L_UR_<K:1DafOQZ'q*9<N`['$3au6.l%g&f86([P&_X8HL_URo<K:09JQ1`e'q*<=%N`^;DAi1;hi-SIlaFdIRL_Z&t8rd".JQ1`e'ba,<N`\#e<98oNVfYs<&O^nH3au6J2(%gs!m8BNS=5-n3Ah1gEbZBXjO>a91!Q!6%[h$9F#:=7.B&SPW+`Ael0@?Y4HERY=1Qt^^L*C5-.M#BE,dWXY<c#mZ]El=0P$*&Bi6T&6N<+AQVt(BfbiD_EU1c>`!!TkWR?\bs%@OA#D^dN"\XMQe)i!37kL7>:bYq5$;VB_DG]VTQS3G-]P&b)Gh3b#K'[,.iMhueK_!Zn<`jbOXU2QO(ELh/;A)$?4!!\H_V"=e8V%8YAKp7fYbp`/76/,tG$ppT\\UMGlPd/!rgU,19W9&^*N?*0d-7Uad,%CfYSpMOCOq(!:W!El=ED@Cu_U:h6nq,?A>5.lh'ACuL1]%TnO^lbiI9Rp.eM^,?E#6<G>8TZ]ZP6bfIC^8$(CNOX+VcW\5MCX%It!S!=tu@OA-JD^([9*3is"X\*JCjG9$F<b+6A3b#KgXlu+V%Rj"n+JnEH2,Uh)DaUp%8dV;S-af8739P5YAXI*Yt=:&tEL"Y,#Wm[A-BI-0MR)u@kRnRKA8$'dj<cZ-9;b!g%Xb*dphc:@HP>iho%F6+;E;(&>8JMNpa*3g\$>0.@,As01T-5'M(&M%HSfh-,DSeWTjjO?I))u6SrL_Z?(8rd".P>`bmOj?X[=>==CJ/kg<o3'0Ib@1c^%ZO&_L$m[a!cUs4"0b:T2gk#3(3+Bi8;O&J-A3MM(@`<qO_K*T#f[:AT@\/`h$FG=`jbOY6cq9=#Z%,j9L_Z?)8rd"j]aI7;Wq(Za%J9%?'J`LDDX3)#),,:DCZ!sDJ!RKq!B!d^G<\.WY3F]D82A?2MOjQd]=;LHGdh0dS,o2MCZ-^+5N`_DMXlP9Q$V49X=L!BUjbOY6%cq9=#YpHdJ,)C5HL!d=:3)tu@Onl*>L_U<2$\DakHccpN,+k,?Z!p!W83(-Jk-L3qQGj3$W<b4AJV#SQHU/4_i(l@B7HCeD4(9dn%K.kn/*O-fP>gX-617OOKYq3o8!/21l)G#Nr<Ce;Jl)a*)'q*<=N``Q:<oo,PRE\?a=E-rGPtoF5b<eil/;nf6Td*T+3\*4"7AdDS%,?A"ulb+XjTM/uE8$"\HZ^OM%\-;,ujG7@jesE&I,=m-eJ5kWd'an,DN`_G.XQ50P$VrcN,$^Fo=L$e7S/eeMQdrqbb<k&VUd,;I%Q&\t/frX7j'alEiN`ZnHXQ52f[W\>Ii/;DPEl>8Nf2l.^clkq`PM*%uL_U:G<K:/nl)`s%'alEiN`_G.XQ50PREeEb=;G+%@TdO3%L_U:W<K:/nq5iY5'am$%@[$VhjG4P=cUs4"EQVpZ:<ac`/@KZ=ZC&*7.8V:sOs=!YjA[R)-FAp\<b+NI3F]sbN<O@@MF_D,7k>%Q%`W3Q$;C+4O.90i@q5iY5'q*B?N``QL;RN`cHrb:+MCkHc07!`p$:`RWAgO3EIkmR[*3is!UIp$e:+PFV*U0ZdL_X,T.kJFsnM$N!%(>1:Z)A?RXWn''Y.?te1g0Qah!rbSK.lh(X8kPBJA3)5$@`=4W_K*T#c#lZL/;ndHOjpJn<'"JWjKk!o<ik@]3atP?Z]ZP6XK[MI%,?AXVXLni.B-jHjIC#)8X,mR78o7VWVj990cq9=#g?BtTXOn.hGnC0C/KM)I`#<-I;F-pYh5o\`?5Skj,qUYCF68:dLeaFd8ZL43%aCcehXN5ciEl>99_@asX$V.:#af1Gr9P5YAXB8&od[S<j77XH#FB3G#C:c2t!XQ.KeX,)#8Q?Cfq5ie9'e;:E$5Da+jG4P=c:X+!%Z,/>(N`_G.XQYJjG(KC:)$)(b8o7V7WoPMt=j[g3<g'K$AgOKm\Wc9ZjG4PKFB2<H"MIljJN?A&!YkI3jG4O$8Q>hV$*E9E'q*E@%N`^9nBJgO@`f?$\&t9W+.Ru&EbeA&7RdG%F@ODgmaUp$YTp6V&@NDi#P,Jma8$#g$%PL='M_,pR/B$SW5b7_PjG4P=cUsZg@h21s%,?@2r.lh(X*q&N<`/;cO,tBMEZ,V=-Viu\m-hCK_&M*S5<&nDVjKk!o<p[Z%El<jZB-g'LaF%$/`3S%D&^+WV8$(?q<98oNOjH^\%=Kr+1aq6-ZTp6V&g)aoA6/]">8WHmgA!Mm586([P&K._3L_Y8uWZ88f1Kqm4/+t)c3F]rVUK'?4F2WsWBI-/"$[I^X2LCf,ck.f%%F=iURA3qe,@`9CY.S$SmK2^lf'p6j8N``RL0kj5(5-_tXSZW-"g13At3F]t!S*)(JHVg^^Yp/aAaUp&3HraPVgNM"b$Lh[=:6d&i%m9X-\@^TM1Y^"$pV$DFk&M#&tPoR&<&,MM8<b+BE3F]rK)jTK?A[/'VQGn.i.EJNp[hPr_,,(8AZ!n4J>rlFHro/95_6#cV&Xh-@%N``R,*[WpW=_R&UA[)TP5buJ9,tG&XN%T4jMERn<N`_EHXlP9QVlWqJ*b+d*aD*"k/.3b?20L&.i=[CZb+r'Y`/6^V<K:1D8Zh'0%(&L&Hbj<[&0-.<,O8V^l`3S%4&^*KIJ,imeWuSAgF'?Zt/+t)d3F^6W34$HqJ34KcA;ZTrQGn)XK^G>K.M9gn<cZ-94c)$0F7?4%%Aku`uhIK5/3FYG>[%\e2mIFRE@TdO3L_U0cW\c,E>0.@,%cgW(:aWT5,?A>Q.lh(X!IL0oLh3if,F6<Y0ch/VX-F[0i]ph8i+,k=%SXG>YC*cBO3+2'U*3g]n>0.AW*@aF9JboFNPm/7"X4!Y7C*cBOaJ;jW`/4Y2<?#b:e4Pa'EPOIY3FZ--iJ?%0]]"AS+XX6^DDJ,T%*3nKg<n5nNZ;&FQb<e<Y7G+k>8WHmgo,:8R%]!*AYoQB9P+Vnk<I/]dX\*I@UfFO7%QlTp\N+&iOrU_X[WKHn=9L)VT"M)rblPI,%%6BSPV*P@WW\ipi%D[#&ZBt_i7k?`BkZ+K)QGpM986cY_eQsA^=6YOk:,":?Yq/pP"?:M=#%0H#=`!&QAKfVA*'/UN[D"Y_4F?$^%ns&&P8=j#V*(ZZ)i8d225o=+<OrU_X[W'0j&G+B_@^;o_2[?YO+P=f-oDB`CU<d%[h%?\.Md&/M=Y-=Q&Els`)!kp,WmmO@3E;Mh%+K*X"b>-#.*3h'%FMtIe5RG`/"1Bl)&^+Xb0Gno)V1EaP!*5@0QGqDqYq4mKF<j3YYc8\J/@KZ=Z<0?u5a[Q9P+2VF<K:2Kk[?\U%KE-X)jbRJ&:K,"PkTEkc@TdM4$/XD'i8VTcb<i;6KAOm43[,7"(.gd00t5f`&^+WV7kBQYk"&![TnO_WKcG0V9hUPOE5]'/e4/MT%A[-q6QA(Wb=;Gu!.6oJnE5ZKO),NZ&/7Ie!AMI5QpsRBZ'>S!T3FZ,B!#"`p/@KN9Z;<k"6Y-j&7kBQM*O.0(FMtK;dLjZ3hFrN?%LRCF>m\!N>@TdO3Lt-O&/0(oGQ;@]]NiFj3#,THSb@1iL/.4K-6,8+NjbRKQ%RgqRm/<1oQGjW"=;GA*#s>;>U2U@4aq;g+91LOk%3UT`]K2L`dPu`1pLh37i77:)l?9hAldgIQ2FqCYnYq5%A8&5[%Pp;U6(62K4)GgQFa$(e0@TeXI-H':k3FZ,B!Yf)P7[53a`>4J9%(382oE6%ZZ3FZ-mLW^?N#GoQTb@9=+P(3d_aq;g+$V)`U3UfT_K0A=PA[-h2#VpQQaUu^*XE%=+#G=sljaQHMeT0jR'`npBS3(13%UFj7=$EP^I/;s>iaD1>FdLjYhrZ#'8*i)Cu/.4$MZ-nN2RY<k,27#@lWFe$`@HiSZTqs!"`>4J9(0W\,=iafC<eDd!nj'J!"sAMH%V?<gW,c='l'S,?&@IK@!Yq5&1V:r;D2]etnM_,pR/EE0sJ6HdJLh37\,lmNH7o\T+A[-q6QA#D<Wdo@b>,;5,Qo>YX9oH,8@TgW(%Vq/6-dLjZ391LOk%4D7:]aLho:a`4XTajtsrj7c>?3NA][0h#=.eT^YR)P/cLSZ5]KtP9&#_Q&)2(dn6U^CONC)+VH<:6lr=@*Tf%4Y@b[/6#FK@?7KD;(&2@Th\4^6Cj?5okCZ29SbDO[26d6q("rdM_,sS/EShX"Yi$&]5'",FMtJPj5(/fE,%&]af2sma51/`@Tb7V%#i_FUA`?H_m0,7:[26t.eQsA^<-s0i;XFWC2ZLo3b@1K@&9s?for#dAW=2*7UcJd+P3O1J8ZIDn-`L!n>&6G96s8bG#r4M`&BNd/%3au5?+c@d(-Dq>gguMEq@TcC8:'6DV3+?$HM,K1WcO(>/;CW]l/@KZ=Z<2e+'-RR*aq;g+$V)`U'c9(G@dI'W,F6;2h<@OKS";kq%_+s_+*p0i^KY&5//@N_6CCtCYp,[/m*3h&\;(h]hls>i"QGrV9D"+egOPK1fWcZ1bCuYmn/.4$MYq5#I!Ks)V)hR1-AMJZNPb<Sn%#1B.FUaem9QM5d_&^*L68$!CiWcH%`f[:AT@KAoj:C5k*&^*MBYTk.GBYa:9$[LLc;,3$L5Q]:786([P()p'O5S$LX/.6SK!KB7X%cThOgJ5b]gAYGqFQGo/M=;Gu%,rS+m3au6*5RBV>$.u^47kBRDI3h)[*J,P$""700=;Gu%,sOb%3au6jTEt0D!IKCZLh3if,F0VX%=up+qD!?c+Op4XR88O$fFMtJH__1m*^o;@mZImS;b@22T&9i)n*3h'Wm6h"4jJ=)%bA,OR<<t?><K:/s><64r/>3?DS<o7</Y`Yf%ba&]j+R.2P8sLW%98g)p`+h;/!"*]NV90CN,s5=S`+mt"VBVg#"2'.02$:OBOrst(aq:]9,FL6Je-o_a3F]D_,@1N-2YR-m&Z]IX%=ZBk>l_tl/=rrcZ,?Dti'"od5*L&$DXHqdSh%?^Lnj!f*(qY:ZLt.Z19L[;?X!Qh/3+B:K*5,]LONFJD`+l80)Cen*P>caoZXqKc%3+B:;)(:*PA#GJ0Z!,E\<11gk;^EsskVETWdO-'?>*=bs,?@H.JKb@TG5o\sX!OB?GJn6Q-;\1\;Bkn"9:IM_"Iu'6HR+)5Ce"!Y%bRnV&SU;DJWfj"e3FjEp,IT8I&Z_aK=EDDQaojB*a]qGY`(J7M,Y+rS>Y9%TC0;>'*3i[6"dFQ"*jKo\N`_.KPiRXcQqL#2=Gb.a%k_PLk91b.G$+Z;]Lt,BB9I35H7dLAW,?DuiY].NQ9Vs(*XMeXAEl:RDVBe[5KPX8&`(E_#,Y+r%.0(Y*FR03t,?@GGJ.`-6</h2=%=]KJUl'17bQ'b<<N`_/6Pj!qR%d5PcZ.]5,Peb9K'*/D9AlFj;<^Jhn3asCI;j&A+@Q#Mm@O5VbOs=!hs,I`=S]%mW`+nJh;$;1Y%,ZBjN<amg13FX9];j&A+@PT5i@O3@"Os=!hFm_[0FDUi>,??m#^2V"_9Vs(*XMeXAEl:RDVBe[5`+2J\`(ERt,Y+qZKH"e=`#'GC%jbVHIAhP./'!j%/&M#T*OrU_>ZRO!.CR;<EhMt_<b1teEb)2`?_WP-o]=p#LS-sa(`9b(t(q93C]<LV=AD];Wnt>6]:Vta5*S/k7%%qO/NWLFr"^mUpu/b^K@6YHog>pnRm(TJH\Gu3Eo_M9<Ueq[_c'#s?!Xhk^\2BB)XgD!eG%9LeNdq(>^E8<f73sc^\FBB?:g%10h%kOqZ&%-P<:R-=nO$oD6;eE.RI(gVDPh""%h46=B643\g[*/(,j?NA]<4d7],%\Yc<FIdrO?`8!ej["GZ$,=6&=MMW("-%rLZmlIA%gA[afi"0&o:=ff^q1U:g<ur'cU\Z@_l7eCrYj5FH[68k;c$%F)<S-J<k81-<?$Xe04fX"[X:F:+B%Y(+D.'ft=pV5nX00pXc7`-W%](2N?\pr:We[(^9)g2ffho<%p8+jsWPO^1dkj1'i_<VU-QlC;BOH4+Fn:r;KbQ`$DE?8sQ*X_"S+,B&0*c_CM:P)R;iCS/G6`b0Q%TTqucU$Hl]BGm8t`h44U,;[gd4>^a5,T*p/Q;N8de#o"(5s*@X;f%I4UOl463Gscs*k8!A-3_RlP=f"@Cn>7pk0M2sr)"'UP;4nC%:]q=/S4>G0%(:k(./i-cE<pATgG(U9;FY;i,t%9:Ab>I&HW7Fl?LVQ][J$i\RcrSS'2$I9P.X$H,)`(:heQ`C`O>6o5!2i2r=98o%+_!N0buJ;6-f#(ZfMk2C+gC>VDbIGEfechrS-h.bA%#<U3a#``[BI'9_FN\/pp2e[=O""+PKhYE:5jF;p,g:<Tcfqqh'e8$0ZSHY%*jM?B;S3A0`dJV`L+N;gHWnFABpc4W"uh0BCE9A`Q/bW`\M\lUdS:eYF=Pphc!Y\qQ@d#%?@jahAUgj:\\SDQ9f!0Xfi<$iPZBF*%`/'am^LJh]`,9sDZTE:kWJhqnX?;QrmoV)H`L?BnbNC*FG/r8'ke4h(%5HjQ#AidUf\0pg[<792fg=Ij:B`h_gpMsA084S6]FEj_%1=j%-o5=hC]ZL]g=K/rs,$pf<Nj5kE@8qlc409k(SQU4gGkB3pKr\<qgh?M&`$kHD^PF2lk8RmKaJS'_[u",/;p/[pNg#FW)f2cf%R$qKR*Y#P]P+r*PAr"LF8f-/i<b_"7pJJk%ZemKLSlHr(Rbc(:1WI-u`Hf852H5ObYh$>1Y%Q5Xk)2Ci00U8^.n5IK("ZF&I^2^p%5*),l><hg5QIr9Sp)L-(;88-`HcnK`G=9BL4\S%?\dFkbFXKVj4Sp./Fg?,;SYi25Zf4+:A4q()268]RZg6T"OR1J+K?qjj4l6h"%a&[@m$'VD]cBA<2/=C_+ph4hGZ>4&<g&,F$a)<>-RkKsqXSKoYaD,nKFNeWG,6YY9q\;HXs6VlE[X"@F)9g=IlJ.&)<Zt_c3qG8Q%-R1sgm@p3m@'V_d>qmO6Z]F5deM>fRc?"lN`:0Of$Ji)A2W\Bi^['gIl54coL;Y<^X^)Xck%^:@#8*24^LOA&)03*bE$oF.X0J^:%E<t4C]Lobi:Vuu[T8a\1INgnO'k]%?`JBXnnIATG@@,58oo=4WX+2pN)[rdU">bspQ#>alL-34#9hncr4#'XcALj([Vq%?$GK)*c%Z--1MGSM^R)_E+k)!QL'?1tFg\t_$+7^]nQ,Q-r@AB^?sHg?'"1S:,a$BOie/Lae$^q'd*<&1O\e2I"1oD:6$V:k;K95Y'94'@$'%Q$l.N%KZHp=%V#:f"02ug!gs8l\lF4;kEFfBn-mEgSgK#ii/;*9(k_Mh;gfNP4Y)M".dtQ;T4GLraD_-m-XDEDB(OCrd]2jUk=TW%/EZj!F=0_6g?1.?%hYR(e4NfIk.&mCkL0EFKiuoC)Y-)L&6"W(-JPK]6IM.`gLP,2iB5caL5?G1NQ*I&fA;&^4C[^82JET+QpmJ&%Q0tH(QT+lgA+frBl)NuCd<A3]4@GcWWE-Tf292824eI$HT-S,RMPlJ]);<OTCUS95:6MtUl';OjWYi81VaDAY(7V7qS'jP1/_7I+%o*e8D1pu@]8cpeRk&].FkCI<?aqCRkSaAHG/7BH<>-(a8odIYaEAs_FQqGGuE:7RJ):W4@f%3+0.FdJj!`+u$/IfY>"*$('.iul!%UfJ7-J4Lba6:D3/71$Yoi2cBR9*=-!%![HAX'5_;V1E<H'gZ_O+Bh3kn/[%)&\\?$0*6B;b_ttuZ*Y;JHj;p^]ffYj]_0Huq1-jk%?p;76Gp$;7CHU^0QtkWRHQ%\gVm*>#Jaa9P3mp:3^he<;dQk`_$\l:$%0]V;?lcO<[$W?0NJ*_k3mRlT6E"f-e89,"oh_#Ji81%8%8K_KK$M+lkJBh\O(@ql7U-<.>R'(M[4UFN@<ERk95^5^'\fY'l/"*>T!9f[J#@LklE,a1)!"Q"^!VV(W1C@Um"c*0M!6hJt&&>gb%F-(2/$*1>MYR'%mo*EQe@NN4o^#4l`,IWMc2tJrU$XPoslG!M8&W$1u2`g$5i/N9B``ZV7!p%$;:T?&j:M:ud+LgtR?3E"'OLgj5%Z&%b&&G$%KHNBW:H7sec'6'J-oEfJ+N<^VCko]ga+IphM#.<a/K<'fS#3ph;cTlmil5?N27,@P:O5(K3&S<auR'9fg#JZ;'(N*4Q%_?HSC6F[$g5mS:"4pYRY<T>A:@\5VrRiG6+lV#UJ%W4b[Mmnj]&EX/k6.H_Qk1)2)#%?%LTp6aMYg/Fp`+BPB,uhptH%GL'Xh)aa%$oa[086cI-cgf@kQ$8]?Dsh#7mf[oW#G\T:m=/j1N"pGBkNO)Jj;Z[!%ga=ZH5XD;;tCIiZ9>*`P]'Y_J4uGNQp2V4FRfn4ORGA8%$$mst=bLogs3P4?I_Zf$_nZE.+'Jpb#+7C(0J<H;.bh1F!1>`t0GZCVNfL:F>UkB1D?-)"#%8pR7gUHd!MFX]*FZ?RN?.#_!guLf%ItQp6Llj^P_[:56gq\0H$r!Pl*g$CFari7:0Yj7g_GJ+&3`EIka=A6\H<=V&)8*M8't@6B@%l\3B_;W24WjbnN6J"4<ZolR"btcC%0-CGTXe:>HGrJ\]#N!ZhfcY[YV9L'_HH76?JfJ%Lm(p=;kL(1MGlZnkOSf%7(98j7od/ZAe)h1\'"j>pi<qDXAmj*TYW"!<?Z9_<%_Uf=K`#+2H"Qg;Ug1"CI8B`=48/18qe)h1\+st[35R3du.+#f-boa$5W'^jo3!&Y"KTdlZKYaP1$OjMf%LE.?R5T7CQJeD`FQ-^4%12ZGe/AXVJ"?ej18YB]jU(DG0dcM#$"b9782jbB]/sQrL=Fj,7%iB4d;+(o,+6lLL1I+_=\?N\`eDSd;%-@_D9:I`)(B?()c<ssF%!To6+4-dr*/@;Jh?32i7^cW!GP%c8WjO,T0ae`,?P>&:o#+9'(9JXk/e.n?`@:"M1(?SU3-K\jf/C;M9R@o0fZU!s[H5>^-5gKMA%#O%QUpHF%_=U=c%0G3`$"CiCb;.4EU;58jGD73hN#m3Gb=k6AGT<,h%eV[%(oI:&>n?IW9V>46c.S-?eF.S/aVGi./(3nmI(02^/%,1K2[`J5bgFNaMKA*C.rPKGX'j[58.R)Mm-]Ei%qBX-ejFC\7+c-VSB.5jQ&dah!/Ad96NfF0@l6[KDEQEplA.SG\Fe"O&U*Jp$'%13=d>.*Ku"7k$#W#9p"M$lt1h8_QO)q;<P!FJO:t'@0V+Z.UX,R%TX7X&(1-<hU!MX[JOE>(pnql;\)pT\^&bDHQ900pra013=ei%?DpB>Qk=EqBeRiTUqK#@PP,,B!q]fl7gH^DkY_"!^l`CJ^m@1;$X`I<076?e^$na"9jk;&Nd4FE'/8m/H"(n&3I,]XjQ+]SO=*:W%&9?4_+FM##KAb")Hk<q.O:R#24?<aSo&q3DaeKQ9U!)/d:!CGK"#20_%`5jYo0J`[n.N^;`E6PX:*L^30Ssl_`6P08dP>oPd^0Y(%@+)D+_SpdLXjj9Wei$Pq*DG2B^q9qHjJJ2MG:$$7U(/B4)-B/$LDHpAU#;h:]fIl*j"K0tod.K5dBjP':8H/.bARS/9e-5Q,.3fi%(Ha/pYg@qldn6#%Nd3"rHXP\:o:B`aJ/gBq+0^8H&'abcO"^S):@J`WGY&qGFi$hCi#MfC-[5k]h?i%)ojsm>cpg&_5+mm+;RUr_%?4gQdYarN2k+=2Ve(Q1T4LDM#J$>7#_,l18,p*24,=k`;&?1&m!jXqq=QSpt_'caW&"_i*-Ab>?H"`5nGR,qg85peT6ee5c$?p1]%'Uf%ZR\VbBGVi!+HBs=7B<Vr_UIe'6J4J_r'p.N#-HXCZbJR9^3cImdd!WW+iLgO);thgR;2/F$J4Gf&AI.!r7*rcF8P1f.quW.\%B6f=(!"1C%6RtGp1Z6K4KOt4D-Aos3jC*J+;a?M$Qm=-`BJ`:\HBO%!6?OM,Vl3"DLF<ZeMm:!L*'BZ81m-glfp2_]n7\QCoFqg5%*ag.A8!ATQ;EVlC;2Gttc1!jRDI-bN8n<0[-KqJ6[uhqhSOerDAH7iN'<pbqJ.`-6#3Z\g;hBe("G34F@A45U9iRP^gH22\",Jc[%!=U/H;O'fBcsg<ill(uA=7H+t/VNtP7[$e_!0(T!:)]tU$tN3Abs324cjZ^I#u+4ad#?cM#Si_"<<f\+6tIL#8lQ#CW'k2>ND`_N%aW779YZ6<F,q<,>#;6+JM<#/k.ioGn<FK91)O8YXjA?6.5TZ3;%,b!?b!6js!k8L!P)h3&6_&TtJ4ZQbO+B]&fW*&g7A,9(V'uM'%Zj:adWAJ20lk$E6%4+u<5gTa9R&H3>V'%!BP6/$9G4:@h?mKo/0s>QN_:M;X"M!Q4BI-28H4G^RdO_$oYHKco"D(2'7S(kfr8e*(%^g*&.j`'_H:7+fr^-a04[Np-8gEEOq_U<Ke7%&N.,^3q,b$si[Y2tf"+XY=R81'V'N+>i.b"*k]H5Bu;MK&r#42`DDfhsnV$%*Ni%op+$cUf'e/81Kn-N20>Xb6T_cY)MF>l,o=I_2Ig6Nnb+A5$r/^GOLk1FHU>ke4HMMRh91'Yo1Z[&t:J\K9njQ,>a`ZS8p\b-(qdr%<L=>]9-l/7aAg;;P"_]'>B0sbZ3i"r5p$5UdXb;JmMi6je7MD.qF/cIV%fD]<%>-jae]W>O^'AE)9J^SQCcbQb2k.\bRRq\n]e-f%i?aa]=%6*P5fh'CP+%M4.]MZX*F`=]o&>aD8PS8gBKOZE8snnEc"[8n*FdU9%]"6'=gBduD8?=i:8ROVZ;?;hLp(G`MKu$VNU92\%--WD>%*Uk3;O$X:`VeMkZt?DpKEp@mi6j0Y)8W0?phG/E!@JK!I\SH*)*t-&ati\CAkQhUSP*PaAKaQLateQB/QQ"@NtS1%bcQsl%h)?=qoZKS&02ZpGbn?KX>ad)m,H+T@?5>'d.00X>k"Z0m4/ab4`dX],[E>jcFTHahQ"J.\"=e8K?W-t3<15*`'<!a/YqiGkjVj68%eAP=<A7`W$UFZ_>^nmG314`&/maZKb8$<3f[:t6V'`l+l.5OU`Rf5e`Nd9o?\Q#EiHMeJEVbRs2k&%<0?O+qPS-'CSmZa+c.nt+]%O@0*HM+?=joZ3$>#u$d6/5s@Y)PQ:lclR8f%O0.qQAOeK,qY;oC"<o/$90FUZ,Da>UKM=fJOm,sAr::$;Obe;+__%kKihdC*k?oq%Y_,KQP[soYAgtn+,0a)Q#s9\90A@S]ne0U+YmW!:s161HqFYQNn7\]O9V>8YHs+ZJQe5!id4DQENQMs$VSu@3n]ejS_D5]QQhY/L%&dc_a,0^gf#s9\=08nd+"Yg7EAr4csdJP:K'DCd*MTl8JQ.))=3^?$Y_5(5^14`#r//*k>atf)MV(>OGkZIm%J1bQ(aJ<(Y9I*N8%blfAYg.Z&*/C;M7;O`M:9!t(kDc]\@(<^"c!NrFU!="Za==3U;KOl?g8m%r3QqLO.nu.j.PAf7$'UoF+G3/:+Z)P=_RY`jNXdM_T%d[H"L.Ue`9UJdBa4=Xd-Y]2Tp=Jc+d;con_'dgX?;@1N7+t`)qLKW2f^`lT`J5./NfZYjr0!T-N\>]UfbtKI\ZHORl.Ef@j,E]@W%?rAGs9I?%1b[aU(<n\Z(,pZLCGtF_cGH*>ncX]qQap]WY@V$mK8l]IYWDmFUP=e-pTEQW$_V+Z%aiqppX=jSYOnQYY6n/5*"#/nA%V2Zn#&u6snpb7sU:!!KI]eIK5UF]--_3gIO)9Oa.;W`cndL4n;a<_pfMPF6`_Y4]S[MGR3qd<98b)F7)=dmc0Fs7B0b3Z)3A(C]n%-B7_\nsM$YSXE'Ed[:t0.\2t@`\,]-`ck>f&sX@3O-G7:@U<QDb"O"EWlu_db/t,6Q)`%R;Q7f4,%\o>MfgG!Y6$eI16lIsW\@j/%O\0A#&?2I;-BV2,>)s1bLbO*RZ8-&_]gu4:hgn`P.l2FW:f_2+;>GH>B_knj(,.OhZq+nCn7[s4bi$l8V3u`fYH5Dg1nXt\?<LRN%$Q:T2Po2,&)_[+DO;Ebr$lU]JiTi=(,UtTno+irdAo'\pO-dgf?U>5D/Y+!hNu%!($m%"MRFu:RhHgt<bWFe<"*82!N%MYqRPKLc%A`RF-WJqUKap]=CSJnp-B[I0!#*0N,bmYLB&t0\BG)M#c`_N9QTpZ-cR&GX-A`RF-hD$1j+OVH:=[8cOZEf!O$Y<ncQ<i0g=U\B*%<>Y.<ZghK2;_+!Y/E"oBV--'Y1A8$+`1oanZXCsoOjYepA[bK9(@3l@LR5tV?/SpPUICo_J4>GbAH@c+MTPu9Q%bRD:gH=mY[t:3%6&mP/7?Xs,7gmou$YWMB?5B#TZq+(1n7[r5/C(#EMj4H&.L.Vb<Koar"#,eQ2la`.eHJ?E\6<%NUN5k0(p5(H2umHnaq?I%+Qtcb%;^a*^(FXj-7oWSp@-u8R,SH3X3O;OH(+@KQrE+"=VGKL+i_a1p7%^rUJ$2b8"WM`FehE$N5ajgK4Q9_KP\+nV/J=Ku+b?/:Ac[r.%$-`Mm/Q.i;4Ba!\Mso_lUR-ZIMBM8Ro`aWPZ8WPUaoWV9&sWV_>'SuR@fEo1BGU(cKkA.j?Fb>abV>I2/0n+"9s]A-IN@-'GuUND%O@Q,s$]%cVZB.U'.LQ`L(5g7dF/8BpZ5>)cbfQYYRY=EbV-1U0<18M/.]$:hUf*Wb#>'hQA\m>l6<RG^Ulq!s6n2JF^nfZb>KEV'%Q%_oS--S\"Q-q3Cr)0=IMf1j1g(mn=eX)q]81?A'GuR,:O@Zb_[ZF$+.LV)tWj;Dc>rd+3W1X:Q$Q@P*fKpM,!bNa<;J0%#I$&E8%`>ip_bR,8RcE'#$;PZ*!cB68[b@4ddM98F7Q)LcD86R8g.uBLjZ@YRm.P$?TU9`c$Bli_5&ipSfKP'UN@gB]18>S-ncB/kkbmGe_%d]?tWWldpXQ)Z\,QfpX[_UrU&,V(C5<3ifm8Z=3jLfC[cP"E&Z=imJ&R[$PrWG-f3-iotcFf88N-':f"<Y255A0m@YTsBhO,p4^`%<!'@g8-]1^>BYo-AAqlM_M-,>)O7,"jAALk8feuU3=_2f8P8Rhl+J9k*/#b4=g;PIBEr@m<hgl7=Hi"XG]A\L83U&o,;#(>B%m>S%fVlWR>cF5g([h.;o+jqhpZcM-+q7S8eu[MU<2;B%\?nkD<cDc<fW=#Z.VW%V9<4:gFYhMq-SLA]'LCs=\#mUhH>GpJP*Qhn=sYaN%aAbo@(2GS48o@\,Pbm0:i6j*c=[AobEjK4.DjB+Z^'go<>1T_M&n.]d.V2c!V,b[DcLQJt?uThVZE0]s=a#MaH[2Ym0Iui><N47.%<*CS+/#]gQCfW6h9Y;q=O@sCj:hc3#XA5UW_QmW(Y8k/@`>57!@9EicQgfT"X+]U7.IN-u/NKsar!W-=k!`ZF/Dnpg\uRl;P)'2E%6\9<LbofemJOX-=iroDZgg+4O>BT49-0>PCK3u'5\uOA]g["4Tea':,d`NfY.P!B^.r5#Y"O6&)eN79Ap@;8YRT6Q+<-le90/^a"%CL`?K)f1_+<d0jHQt`D%D":IK]<\k\":<kjD7=g1Ct#iKl=ZLOaV-k*n5pt(2V[`Ll>ErM9<1"k2L0"Z\(S-,f>Ohn'b)=CgXp=A%h-)^^Bm"4EL6kq%b9e_sYNu#P+OT"J2L0$"Fc@!oV:FC6)uFe/h.G-E?/rN%VWjhcXL,RlCpMJ]A(fq=L37'EB^X0O.@JnLA^e*D%lGg-om?^FTfu!>LEd;Bl_oa;ZX_p%d]X59'Cr8mrc"<0)<]?LBgNKV><jj3sh*O#fC#s&?PF%`gQ*ne.X..0gbd@4hb9f$ImNJ(D%[.:H,kquA6]!?Ko"@V-1@8rS]<qhkrG\3eUCjQ-#oWG8)dCg!tl2?t6*jR5ZU!c?;Z.GqcLMViYW9tgu*7MN-S(c3RB9c2p^Jrq0%VRKnnVJBul]W1q6FXI0qiM19KRhB&`Cpl\KODZu2_,ZF7KFVU<?V.\gd9R^E7b)o5fgZdiCQp(kU(:.+Y>n'%^:Y<=[?5<*h.r0j%<9Z9^2DV(D,MT0.f2T1UFg'Kf;>SG449e`qZ5+>ZI@DUC^_j$i9>ZZ<SYa2_9^17:2l_=Yg%61sFgKcn)JO?#fsCdZdVKP6<8DC(%DH,G/.bpu6ZR">)dTJJUe=C0g8)7<+]gl9)^*Sp@mOZI<W]\*s[ZM_=)qd^2]dDE%e_=QT2QH1&:OJC5o,N+&NU=m:W=br0U5c2-%8tq:pD'dS!7W`K8)caA46lT-EJN`+hIXl_/m?^GGH#!5=)-n3/7b+Ufd72Zu@Ym"CDDfNoWjJ4P2QCXF:MeN"?r+`r<4A-jFrFB7%9!XG8kh=*9WpVCZ2QA%u4:iQ_*)Q<hb0'un2$K2a!3k96VhDmTNpH2C#<5_Ek=TF?letg`cbW^E?HZIA"jM!9$YP\<_Tg:RK_'1!%DEcG-]GaOfr#ACdj0_R:BdHGlW_#2/Uo^&b;jL-J9re#n8[MR9WTqf\KW)(C6;6!@30bdG8d`gTjqOQc33+qZk[@d,VlDrdA#[2.%Yr#b5"K/PE7S+cYba_!Z+(sQp"$Or1iDfL55k!7TUA(MmRc%-\c6t,pS!d1\kMn,KI%\N*24U]G</ApYLC$`;CGe_ACRpkl>cWqW%[E]#'S6*V-l;&]D9ll][<5)E)0t>g1>70!Ij*\!#JKF")`/XWf]@R"+XYY(:f?./E/p3m`EMXZ:$_7e!(pAWleJEW*Q'XMIWF#Q*%7r@6T]Vl(3M(I]PX3!-ak:kH[C/`Bde+Sa`ShW*NbP(ln>*ijW<4$I@B%9k.]kBWcUUF5cC2P8#iDe3Smp9%aCU7bT/XoD>DH'sr%ge[#K7K.g><fU%&MA8nJdWDH&I0ZH$>q!\D?ft32(7*/alPuP/leM-=eT@Lfbu[NfQg3"HX]/YWYs6e+4-oh637\%S-Zh$=d.2Y[%?l%W_T'OADBX[S/frM6\rV^(2?<ZLe6HkM,WVSEVd_?'*M4_?X@]AJXqAJdp:F4=L70ZLtL4=\hI%cWkjm17hPPPZS`)62citto9%f9ok]j5n%NG"X=1ran4?o>"-.&+Fh=o).r=.im`>lV%i@Vo8L^`p9b[N@s1`-F/0JP:pKR1mk7c?4`I8)0O6Jh7Nt%k3hNS;,Vp#%\^JE0R;2C=\bJko2XYQY_i;O7P)f(>Fde)DHPB&&Aaa!)4c7`rlKRZ3WHMUlUe.BP@"/gR'Ra[.M5+0"3g2'g4J\s">h#S69ZKS&%R`7FB?^bT'UHEUgl/DJF=A4]lih?(EPL2]qXfRFPclgZhBH^`RO-0R7ad%*U9Ypj*B=][Q$+eJ?Vq\ME36f@[4c3d]csuGHO`"OU%]lWf57]U0;ZUjW*EW>!tE[MJi9p^@#ad"U;SOgjU)ge5[QL22s'9:5k@a\,F\^'hdI4sePb1:(iKg30>HmRl\VgQT@c<7&mgT^(g%+$m*crR#U!Ini%g.q?6(5IsAcbUh6:`L0]0Bt.$NP=\9hel2$Zo4SYaE^aN+a4^pqmu,k?GPcjgqqfXjUPo1t]"aerb,g_dik@NM%jMEe,h7\/CKRB6YipJYUW8-4AFd-N%::+?\$hs'p<0tXo"=b9ZofU*6^=]W-H.:7PT>-2JN7?SUC&^NAR'>>XUZ(P%J!W*LoBrQ)%a+Z)irCg21Gkpg,4[#;-o62XU.48Gn5CSZk9)^osb""1-cEpoMF=Ms9Btr$l(MYTSUj@GGn*e"2*7=&aPk$Qjh>147DCKSTAGauH%mS#i@H+00$EDiECs.UjABGtegmT,O3Rf<Sp_]Q&ML%SE!c[2b,pg%:CiU1T8*U5Q=^7R%IgN<=A&ftr%I<3n[A%p5FIhrs;[]*:\%XP7i(WYbMK\h@(RiMQL8Nq1`a9FobL_N!f-iOco$A)@G(%Cb-,Dmqg!14C`&UXQkGjmMie;:Fq03n&KRmc,n.Dmfdis1U(.0e1BF%q`8K+J$X"[rq]s6JNrF!XOE*SWp,?Qd&J5#b0[.2U<:i_\2(),"KgqtLBUl3JIQH92La*bAQ0ON'nfO(>1GnID9V'e660T9)-RbV%7TGkM<M>@$6`W6\61_d]:j4*M`!iaT,,u'RlDt(:;C_jNd&OT"WlbIH$7/Xh>1MR7)WB0l#j$,0neaUZ(g>Ih"!TRqY7diDXbnX&%Wm&hi:dUG@<?3*Q+f)=$*Y#4Y5<V-13A@)CROb,Td&OT"WlbIH$7/Xh>1M*t2$0L&ma9C]+JK3V<R9<)TN0gu(MHfR&QNCs<eV`t%%'9m3b!<"ZLakcmJqtmDX5]#8.PnH3LXn-*WpUgP:+=`f'jB/&>Jum7U+9Ebd&J4a$><FE)-(7&<eW</%'Ae\nX;*4$ft=#W3nu$%BN5U@AS>'T;.XE@>S0tIL/nHgVjfQId_)9!?(k7]@Qh_.A(OsEbfH[0d&J4_$><FE#utPk<eV0d%'Af_kSdm]FL+OZ,9V:'HmO'q%+h#YBWZGX+`^J1d8TV>OKG(9nXm07u1]daA/&>^$"P,*>L0"!Bn8$%A("O-TTN,u#<0\>)'oJqF[&SVTd`qkm5Ge3jeb)Ngd&J/J%XV"D.oRrA*e10G%MGQhYd&J/,h8VjYE6kI$'9U.#&]oc.oq.$sJgAnXMEn4g0"0mmdEBuGXm12`0gJF\]Ot4*6k$3_;:Ye'%F'eN%e'P*k7$XHG4ec+)8DbW<J6nK(ajU;]8`$%82<H'-$_2bqb:CV<TiI0RjnT:8_Q/2f"Y!H+<qUEF!OMPT[P(Zp<KD2:i/8*J"G*4G%;<4R.<eXGO%'9k7WXQ$#f-[.j5t[E9<BXKqNPgi!!WarO7$3lU=qupo!a=.7OkZ6/+,A(id&J4bb0[/u@]HRCFH\/m1IbiAWM*=c%S16n,H3CK06".;Qd&J4db0[/uEiQ8S:q`sWWZE(+9mF#0Je2`LGBp0]<B^+YLaGNVR2T6D7:ln6.MPfmBN>(4?6^T^c?.H8?>=.R%&5rb>.S-NoZmpsGeBk3l8sQ)M4WmfN+M$JhJ6#sj#`Z``*1"o_a^q?(<^i.=!j)g+<#JliS#pIZYeJ930XN<#WA:i\LWJ=>X*S7A%!j.>(2`7rl'N8RV<H%G;bQQ>TVEh26QmtJ(iej_H7R5qp$)=`['PLJpVomAdT"caH&6NOZBN<A^]gaCc]h.jJkiW;Tl:Ip/N^@hR%H[o/iI8?1R`L=tC%B\oHVD0EL^bShUX$SO@L0"!)q)-)%G^j2:>1>X`*e*)6BqnQo^:DE[%BYLn?4+%hPYu(+<K@C8#h$A`<,L75%B$u(I9_AlaO7S<MQiu:9;YQ87B$+<lTp.#oX*OiF7Mq&pVc8WfV"lXSXJ&Ym=(4m+Rd[bc)p98JUp3lmQ(_2@%C;%N+SmG4h*g['%Fp)"!;_Bp-$?)Li$KIP0'p`LDMqmjH"49K1:XH*a]un^%*\OugX5XJd]#N807S-U7<qV-e2@d?>./F%(Frc;%(o]U?*@#]>8Pg/K%Wn?i=\!G191:/OPWA:i\LG4bQnj-ZY1n-QZl=Q6E.RU7G0A]SUcW!T'TiF5b0a?a0V66/=%B\pKLCG0u3#tKRcB=\ITN/8WUM_Xu%;e9WB%jod3Lp"B\6`Yg/.\Kd)8l-0jFI^kJk)PY:h,I2cd&NZB-qR81nF*,#XB0u_Xbr[/XR7ZaS<VlNa%2\"Q]o#<gi:bSd;`(Y%Rj:u7XbnX-l5B]N7@eS9\Q@)nJRtXaQ9.:qerlOQ6`Yg/.RU7Ga%5#j.]<\f<R7_p#\`(^/s>7iV^5D>Q(_2D:)2-UfWe:tQAVXs%[&RcWBa!MI/&=KOHDm>,AKrkCTt@QTVTR8cfMCtm7W\ARc/t%G]%J@*b0[.0Ybi"CR`CU>/Bn]ae?.h`Oh/#$:6hMQ4VR4?eotn$%:_h?WSoo3fVRs7KEiR9O$!Pm>a^Q5;f0&,iL/s"kWdn.Ce?Ki(Om3'L)-YS^`&*'Fmn$MhKH[UPWXQ#p0k$M($B$e2A:]:@\:Gp(%$><Gcoo^M4/gE6\.[3kCBN7jp&rd4BKc7HE\STdBWZ\1]d&N\.FU@(,nW75^XU<$H)-YQHYquOQlBPaEX*WE`k,Uq!_!SZU3MZ\b%P_Ug=d&Ko9eI8Rk0953(nkhcTK((7_<C'6BTiF6;8pc5500.r$\>_T$Ud1tI0i`s/"Yj#3<qW[ENM-.V0i`s/`>)</p,7n+!rd^3%bsO\[9hh=K.RU7gS16n,HL=ZM1I63[W1d42j]#MQkQ\2[.RU7_/<V?]V(S'p]?3K)C1pV.2A2_jdH.-X<lMn%%<S%rWA:i\#8CGg%\C3S4/r1Ik6T,:YWi$73.>>KV;+%DDOGt/^'hYG\[&Q?8dg0.A8uXSQW^lr"^.8aWa,ME#<JFPn+Wgkk'hYG\[&SoOBEU/1e$HR,%fbS7$:YAmD<BX5mJQB`5,;lhX'N8RV<DUWF,UnO%+#UDTLoE/:.^#/=CBR$i4^h<VOTMWlj]$N_8<9-p0bF^c:6hMQ5u8<CWjm)L%XoY?&EiKPMlB*c;4Qb2m]?3VAYd.`51n(4>)-RcN<#JjS'cV:jWL,/&X*Qgb7ZbDc0']=>@\[fj8Z=JPWi)c5R*!^aihGijPu;1,%<DPm-#kCYuWXQ#pd3b<d1ri)ABNBN1NFp."h.S:8$><G#,.RpIdn3N<%'Ag*,M*3V"ia*h5?<`-a-@A]p#AZ`<#Jlio0-X-"OSr%%pQS[:G+_hua?q0pH?d<*Nfgo*<)==VWh-jH8Iu`^F9>\9b\D]e7!Am8TIQU74T^8&dOHImd&N[]E@Fef3L8oqZ=96rd&Q1l>[*f)%;E'o!WA:h1LoE/:Wi&XOlPR<_`C\ld<h.ZV,q2iK<^ju!r>8H^<C!U:O=EVuH4GTti3U3kh.fule?(&H<JFOC`Cerg.](;7WZ\.\%d&N\PTHU\r'sD%Z<R4ZYj"NmA9Uf&&9\jM7V[@*;O$[Mi,,gNi]%J@+b0[/uEiQ8S[+q,uN5Tt?>>+'WH"0X2+OE3G.,;H98BW#,%ojc2rVs;tfNTais]%a<2WOpD)0;[@_*?.AHJs\%&h\sF4)-Rai0;Z!S9U2;O;+51XZmoi!Zmn_]<3&G^9GPpS+Jm6-Wb>M6>>:qn%)-RbLP]fEpJs\$\<EU5+nnp<("9Mp)#Z@Z2XbnGY"^2X5WA:h1R]P#cWZ\.\d&J4bb0[/i/^ULKXjF(]nkqiU67Goh<^i4=)Hmlo%<#JjS:&,]^<^kJd,=AN;2J2=$ZH5dk<eYRo%'>C61GuNhaJgr%.[nT2d&OU-Wicr0HE>Jn/2:L2(N7+6AqN$-@nB@ZTiKKNV1r#>%PF!1k'oJtGZmlu461_1`'rHoMcj&9+P#>k)<A\@kDC_3X'PLJpV97/bkUBM["LjYl<#Jl)[4u#la<iDpZmluu!On.bQ>(#4.&G)5%Wr@U;7Zcb)WA:h1RW]Vf>*ZK1>*ZKB8J#1!$+)/r;e9WB1jS3lX]haVNrt&:)-Rd9;us+YVG0U9<b6-%<b6,!*Oh?WWA:h1#\sHE%'hpl,BN:-mAS>(K3E=Z:ggKCSXi_7i7X)+bgf]e=AS>(#)6'<05u8<CWbCs#6`WO6<JFOCdk2n5X0T0!X0ORJ%aAULN>bt8`)IUX%'hpl,BN6IY$><H3R&Vk@qC:s]d&O0%?hB'6j2R7P.\KehjJ.H1Kjq%jXbnGM27+jSWA:h1aJf5E($Cc./BpsNWM*=3b"3&E$3aE1%Xbmc:F_=9@Q(_2D:6hMQEG?;QTiG6"TN,,5Mo=GKJuT6]MA%B1el\*8%'9l"Wdn-hWI;C5<eZ.*%'@Ybo9I+hN0M?Q`(/WcP#Gq*%<KL-jBN:StW#oFtW![3<SD%^gBN<V!BN:A<)KDrP:6hMQ5u*]=<H2KCmOT(rAS>)0DAiS)[FY[t<L0"+qI67</5M3=BN<WR`j%8:%4gZ[hVa`pnmFsM*.VhCn2k)0i8nWEYV!]d0N7=uk.497NH/bXf/5Me#LR"e2m2B/n[8S:mqX+Zb3_ntCns#@/Yk#_'h,U%+WOp:d%-ZoZ>C>UYjW[oaKW[ol3"I>0r)siDm\q)uK9V,7U32V&F'?bJnGoeKC.SK9&cs2T&96k!6DCJ@$e,*NK*7O<8M.7H-[1rN,!iK;Q%4lrZf]S9HuD:c#I?)fQ0cN+t"Zmn^!ZmojhAE&6'NOmFuYu17`VqCBk<b6-%<b6-lfNmTqOh.SU0iH`J;a0KLo#+)T<Lt&ll2.qJ%o,:et[7qlZWLob9Z=B\J2,>*h>Kmg+V6)lM;7Df<53fTIe7N#SX3/o?$E_J!2.*"V=^%Iu=W2kR4M]1p$E_J)$E_HSeHhN(=^%Iu%=ZSFWd(DKsR-q-Ab!pq_ASHj!ASm-%AZ\LbWqkLPBN:?.NR4[p=J8_tA%nl'$\I;KalT:P<b6,]IRE^DKiVc!BR[;%g9PL-<Rqq!%<L-[!<Rt2a<S#/.@1-luHn<XE/.L!FLb9W([&Rbk/C:Du'oan01M\MJ.Vi%I+L)ad2_.R$'l@N-P*$YdQ*m=^L;MZMCM6`!(2-^6%`e8nDASm!!ASJ6/%FJSqC_g;?C1pVu:5uLD)YO><Q'IgC5iA3tU+`<nc2,RP%B[e,+[NK8je@K1ASm!!ASF[VQ<ZM2%'@\+QuF1Y%Ct-h3XGoX]em(CRBN<XOTiG5U1][AebH@O==_eoVIB+a>WWq2kLb?k-Zmoi!Zmn^;Os%=ue'P+r*?%5<CT!;g<EX*h7m2.7A!%HU%g_OR'O2AFQ.2H$O3CBhgX7(CPKiVceBO!`Y[Qpn!19RAHUCbSGplgf#)Hp.4jJ.H1ASm-%ASom-k^K\]W[t:!WiY#DX0T#tX0Pd&%#]!^0C1pVu`[='I=`3e-24@YcT*1-cei",/[+'"2.?.rj`mR^_RACX%Q*hbr?"MS&BN:?nN?EdjHBAnT<L-[!<S!PA1r&"FFIH>_%P!l&%jJ;&tZZ8SLM13?6kqo`T6E@CM6pFKb,<`+^7XA0F3U't'EDkN5X=_f!/?R:!XH>c(kh?HHaqF;7F;a=ok4n.Kbq[YaqI67U%ou0H4"HF4#Q)-hmTW`0r*O&ZbCSY-SCpYBH/m9he2Hh]CCm7+>91:'J\[ECo>*ZKMiG*cq;OYb0XjF)L%FH[5b=AT:`^m-H[C5E?%>*ZMB#`-3A`Y'::X]?GiX]A_&8uJ)RTmB(7N3l_rD:peR.VhEEAr1NUAr1NU`i>>e2N*TZ2N*TZ2N*TZ2N+_$]0NF>9p)0pU0#YW%d:K,uqI660IIY]sIIY]sI501!!nS/jPpN_1V7CF7[,h#GButA=duraYV^9A<:F)98SsEVcFq(Rrg'Xt))Y96,39Fq'EQlo.ig?V[%[2a7=<^$A9pV!q!X0T*JBKcidZ_p"r(^07aD_MIPCu46LL/qkXao\]fdL*,!g86#=rMIiP5c_1i1kN*lJ.T5uggm::<qX+kHY?EF%(2-][\;VgA\!rl2eBk4sD&P]!p?f:RX0TTiV=5f;JNM%L?>=.ReuB9U&pTV,!j0Vnd+kbb[]RoV/DW,aRL;I?Aoj0$!j0Vn$E\V'%E2H.]`0^i,D@<g$/#NS:hC3jTH,K5B?<BC//2qi'd&JW3.>$]e6E@CK1uGCFp@9,*Q*gd!Q0CC]ZmoiAZmoj$NOZ=Mao\]fb0\q'%jX)W<[&Ra?/^UN!<K2Om`=kG&n5pt(2Re*g<b:MB8J#06C1pVu<bPLaMM=CUI>(^5Bh[0]jX-?*S`M1K270B"nkqiUZ8P)U>*ZKi%,9Zif5c_1g1]jBn9GbsIp:/f2A>MPlZ8<hNA%B]Q%B[dod03^=V40q>?YqY%>32td6`[N$6E@CM(5\O*9jVRJ<S$T3<EU3.]@kuH%D:d.7XPG]7qT;K_<b6!H&bhBV][Y<.X=_f!/.L"_6Z+YXTN,-0)WC1=:Q9ngV^IGg1/gQ@Z??b\b"@dALb@"1ZmojHBM8]5D7`'6%ZEultZ8C_0*\ufDm"3L1=<p#0bh<-#b0ks@)Oh#!l@'<]n52-6U#]96S"UinL/qmQ*a2P`f^?J:Ca2<J$J@n'<Y_p"J6$5qJQ?>r%KiVc%Hk8^A'XE],XX[j#!Ndh^)];gZa>Pf\W[QWCd&JYQ1kJ]Y?=$""ZF3*#$K4I/<Y`K2%';"4)Zd&j$9'`IWXs&YBN9f(5A:6g%f3VcNX0T0JKX'#52_qb?&8l#l<Dg8gTiHec,G8%jE$I`NZF3*#HA_YY6FF[fqKHRD[LpldU22&AWs[NLL/o%pN=;p=A/cCiQ*mV(%Uj6+:<EV@?!rD=Y(O<8_g.J*!%';!I)];gZLc.#q.VfF!.SE-L>0YFf,=AL=d7/jk'r$ZrXXZ^X)-U%]2?I&^'Q%Ao<L/M35[SB]%27+iK$acpqD.I<[+kt)bW^=.VTiDWaLB4NGBiY1h!:Bgam.3I@qTFqlrq5$L5CNFfqmR[Ip?&!>94`U!oBY;KHi)Wg?[V\(o?D42%s5h/=:N*uDnCR./oY[0UJ,@K_5Q1/t5NQn\E;@P8r54<)>fYZlYP:VKqVAd`)Q3JOZ]FbYrA"Jc5CWM.2fF08eQ6+,rUjOTs8Kp6%[lM@l^b$YPs7dJHqXEauL\KDos76*fcd!-[rO]6squ"XpmXP/ZpOE%qgV:H!po@bMpA*nOnb/GrJ,&g4g[F!Ir9TmphZ!8]2fHJ2%5)4LZQfnD>k*qG#Ie`Qoj1@67r;"81AEEWZkjZn_s38=YgLpNo,#m%N~>%AI9_PrivateDataEnd