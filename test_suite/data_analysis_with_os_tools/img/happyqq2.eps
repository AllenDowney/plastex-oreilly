%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: happyqq2.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: SamreshNarayan Singh
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 262 201
%%HiResBoundingBox: 0 0 261.6338 200.5962
%%CropBox: 0 0 261.6338 200.5962
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 7390 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD33FFA87DA8FFFFFFA8FFFFFFA8A8A8FD07FFA8A8FF7D7DFFA8A8%FFA8A8FD61FF5927FD04527DFD04522752277D2E5252FF522852FF275252%7DF852275227FD60FF7DA87D27277D5253277D7D52272752522752A87D52%7DA87DA87D5227A8525252A8FD62FFA8FFFFA8A8FFA8FFA8AFA85252FFA8%FFA8FFFFFFA8FFA8FFA8FFA8A8A8FDC6FFA87DA87DFD0FFF7DA87DA87DA8%FD0EFF7DA87DA87DA8FD0EFF7DA87DA87DAFFD0DFFA87DA87DA87DFD2CFF%525252277DFD0EFF7D527D525227A8FD0CFFA8527DFD0452FD0DFF7D5252%52275252FD0DFF7D52527D7D5259FD2BFF7D27A82752A8FD0DFF5252277D%7D5252FD0CFFA8277D527D7D2752FD0CFF7D2752277D52277DFD0CFF7D27%7D27A852277DFD2AFFA8AFFFFFA8FD0FFFA8A8A8FFA8FD0EFFA9FD04FFA8%FD10FFA8FFFFA8FD0DFFA8FFA8AFFFFFA8FD13FF7D52FF527DFD06FFA8FF%FFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FD0BFFA8FFFFFF%A8FFFFFFA8FD0BFFA8FFFFFFA8FFFFFFA8FD0BFFA8FFFFFFA8FFFFFFA8FD%0BFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FF527DFF5252FFA87D7D847D7D%7D7E7D7D7D7E7D7D7D7E7D7D7D847D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E%7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7EFD077D7E7D7D7D7E7D7D%7D7E7D7D7D7EFD077D7E7D7D7D7E7D7D7D7E7D7D7D7EFD077D7E7D7D7D7E%7D7D7DA87D7D7D7EFD047DFFFF5252A87D7DFFA87DFD12FFA8A8FD11FFA8%A8FD12FFA8A8FD12FFA8A8FD12FF7DFD0BFFA8FD07FF7DA8FD07FFA8A8FD%08FF7D7D84A97DA8A8FD2BFFA8FD2DFFA8FFFFFFA8A8FD07FFA8A8FD07FF%A87DFD08FF537D5227275227A8FD05FFA8A8FD50FFA8A8A8FFFFFFA8FD07%FF7DFD08FF7DA8FD08FF7D7D5252527D52A8FD06FFA8FD23FFA8FD3AFF84%A8FD07FFA87DFD04FFA8A8FF7DA8A8FD05FFA8FD65FF7DA8FD07FF7DA8FD%04FF52A8A852527D7DA8FFFF27FD5DFFA8FD08FFA8A8FD07FFA87DFFFFFF%A8527D7D27A8FF2752527D7DA8FFA8A8A8FFA8FFA8A8A8FFA8FD4EFFA8A8%FD09FF7DA8FD07FF84A8FD04FF7DFD04A8FF84A8A8FFA8FD5BFFA8FD0AFF%A8A8FD07FFA87DFD39FFA8FD2BFFA8FFA8A8FD0CFF7DA9FD07FFA8A8FD62%FFA8FFA8A8A8FD0EFFA8A8FD07FFA87DFD39FFA9FD23FFA8FFFD05A8FFA8%FD0FFF7DFD05FF7E7DFF7DA8FD3AFFA8FD21FFFD05A8FFA8FD12FFA8A8FD%04FF5252FFA852FD5BFFA8A8A8FFFFFFA8FF7DA8FD0EFFA8A852AFFD04FF%5252FF7EA8FD5AFF7DA8A8FFFFFFA8FFFFA8A8FD10FF7DA8FD04FFA8FFFF%A87DFD58FFA9A8A8A8FFFFA8A8FFFFFF7DFD11FF7DA8FD07FF84A8FD56FF%A8A87DA8FD04FFA8FD04FFA8A8FD10FFA8A8FD07FFA87DFD39FFA8FD1BFF%A87D7DA8FFFFA8FD07FF7DFD11FF7DA9FD07FFA8A8FD54FFA8A8A8FD0CFF%A8A8FD10FFA8A8FD07FFA87DFD39FFA9FD1AFFA87DFFFFFFA8FD09FF84FD%11FF7DFD08FF7DA8FD3AFFA8FD19FFA8FFA9FD0CFFA8A8FD10FF84A8FD07%FFA87DFD51FFA87D52FD04A8FD0BFF7DFD11FF7DA8FD07FF7DA8FD4FFFA9%7D7D7DA8A8FD0EFFA8FD11FFA8A8FD07FFA87DFD4DFFA87D527D7DA8FD10%FF7DFD11FF7DA8FD07FF84A8FD4CFF7D7D7DA8A8FD12FFA8A8FD10FFA8A8%FFA8A8FF7EA8FFA87DFD39FFA8FD0FFFA8A8525252A8A8FD13FF84FD11FF%7DA8FF527DFF527DFFA87DFD48FF7D7D527DA8FFA8A8A8FFA8A8A8FFA8A8%A8FFA8A8A8FFA8A8A8FFFFA8A8FD0FFFA87DA8FFA852FF5252FFA87DFD39%FFA9FD0DFF7D5252A8FFFFFD15A8FFA8FD10FFA853FFFFFFA8A8AFA8FF7D%A8FD3AFFA8FD0BFF7D7DA8FD2CFFA8A8FD07FFA87DFD43FFA87D52527DFF%A8A8A8FD29FF7DA8FD07FF7DA8FD42FFA87D287DA8FFA8FD2CFFA8A8FD07%FFA87DFD41FFA87D52A8A8FFA8FD2DFF7DA8FD07FF84A8FD41FF7D52FD32%FFA8A8FD07FFA87DFD39FFA8FD05FFA87D52A8A8FFA8FD2FFF7DA9FD07FF%A8A8FD3FFF7D527EFD33FFA8A8FD07FFA87DFD39FFA8FFFFFF7D52527DA8%FD33FF7DFD08FF7DA8FD3BFFA8525252A8FD35FF84A8FD07FFA87DFD3AFF%8452597DA8FD36FF7DA8FD04FFA8A8FF7EA8FD39FF7D2759A8FD38FFA8A8%FD04FF5253FFA87DFD37FF7D7D527D7DFD39FF7DAFFD04FFA87DFF7E7DFD%36FF7D52277DFFFF7DFD37FFA87DA8FD07FFA87DFD35FF7D5252A8FFFFA8%A8FD38FF7DA9FD07FFA8A8FD33FFA852527DFD05FFA8FD38FFA8A8FD07FF%A87DFD32FF7D27527DFFFFFFA9FFA8A8FD38FF7DFD08FF7DA8FD30FFA87D%527DA8FD07FFA8FD38FF84A8FD07FFA87DFD2FFFA87D277DFD08FFA8A8FD%38FF7DA8FD07FF7DA8FD2FFFA87DA8FD0AFFA8FD38FFA8A8FD07FFA87DFD%2EFFA8527EFD0AFFA8A8FD38FF7DA8FD07FF84A8FD2DFFA8527DA8FD0BFF%A8FD38FFA8A8FD07FFA87DFD2BFFA87D52537EFD09FFA8FFA8A8FD38FF7D%A9FD07FFA8A8FD29FFA85252527DA8FD0DFFA8FD38FFA8A8FFA884FFA8A8%FFA87EFD27FFA852287D7DA8FD0CFFA8FFA8A8FD38FF7DFFFF527DA9527D%FF7D7DFD26FFA87D7DA8FD10FFA8FFA8FD37FFA87DA8A87D52A85252FFA8%59FD25FF7D5252FD13FFA8A8FD36FFA8FF59A8FFA8A8A8FFA8FF7EA8FD24%FF7D7D7DFD15FFA8FD38FFA8A8FD07FFA87DFD21FFA87D527DA8FD15FFA8%A8FD38FF7DA8FD07FF84A8FD20FFA87D7DA8A8FD17FFA8FD38FFA8A8FD07%FFA87DFD1FFFA87D7DFD17FFA8FFA8A8FD38FF7DA9FD07FFA8A8FD1EFFA8%A87EFD1BFFA8FD38FFA8A8FD07FFA87DFD1DFFA8FFA8FD19FFA9FFA8A8FD%38FF7DFD08FF7DA8FD1EFFA8FD1DFFA8FD38FF84A8FD07FFA87DFD19FFA8%FFFFFF7D7D84FD1BFFA8A8FD38FF7DA8FD07FF7DA8FD1CFFA8A8A8FD1DFF%A8FD38FFA8A8FD07FFA87DFD16FFA8A8FFA8A87DA8A8FD1DFFA8A8FD38FF%7DA8FD05FFA8FF84A8FD14FFA8FFFFFFA8A87EA8A8FD1FFFA8FD38FFA8A8%FD04FF5253FFA87DFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD05FFA8A8A8FFA8%A8A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFA87EFD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFF7DFD04FFA87D52FFA87DA8FD07FFA8FD09FFA8FFA8A884A8A8FD21FF%A8AF7DFD0FFFA8FD1BFFA8FD0BFFA87DA8FD04FF7D7DFFA884FD11FFA8FF%A8FFA8FFA8FD5DFF7DFD08FF7DA8FD12FFA8A8FD26FFA8FD3AFF84A8FD07%FFA87DFD0DFFA8FFFFFFA8AFA8FD61FF7DA8FD07FF7DA8FD0CFFA8FD68FF%A8A8FD07FFA87DFD0AFFA8A8FFFFA8A8FD65FF7DA8FD07FF84A8FD08FFA8%FFFFFFA8FD68FFA8A8FD07FFA87DFD07FFA8A8FFFFA8A8A8FD2BFFA8FD3B%FF7DA9FD07FFA8A8FD06FFA8A8FD6DFFA8A8FD07FFA87DFD07FFA8FD31FF%A8FD3BFF7DFD08FF7DA8FD75FFA8A8FD07FF847DFD13FFA8FD25FFA8A8FD%12FFA8FD13FFA8FD13FF7DA8FF7D7DFF7D7DFF7D84FD12FF7EFD13FF7EFD%13FF7DFD12FFA8A8FD12FFA8A8FD12FF7DA87D7D52A8527DFFA852FD617D%53FD137D52FFA8527DA87D52FD81FFA852A8FD11FFA852FD12FFA87DFD11%FFA87D7DFD11FFA87DA8FD11FF7D52A8FD11FF527DFD07FF7D5353FD11FF%7D52A8FD11FF7D7DFD11FFAF527DFD12FF52FD12FFA852FD12FFA82EFD06%FFA87D527DFD10FFA85252FD11FF7DA87DFD11FFA8527DFD12FF7DA8FD11%FF7D52FD12FF7D52FDD4FFA8FD6AFFA8FD0DFFA8FD5DFF5252597DA85227%52FD057D52FF7D7D27FF5252527D597D7D7D527D7D7D527DA852527D7DA8%7D597D7D27FD047DFD50FF5227277D525227525252FD0427A8592752FF7D%525227275252277D275252527DA8527DF82727522727FD0452277DA8FD4F%FFA8FD047D7E7D5252A87E527D7DFF7D7DA8FFFD047D52A8A8FD047DA87D%A8FFFD047DA8FD057DA859A8A8FD24FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T12:57:38+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T12:57:38+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T12:57:38+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>196</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAxAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FUo842+r3PlHW7bRmddYm0+6j01o3ETi5eFhCVkJXg3qEUaopiryrWNC/P/wAvhbPy&#xA;teHWYbiKWdriWeMJb3DQiMQsuqS6hcyKDGJI+M4X1Gbl8FAFUVrK/wDOQdtb3UelGa/uUmSOKaVt&#xA;IhjeERyBJYvgLV5+k1ysiivxLDxFGCql5gsfz9Fyt3p813cGO6lkitIpdLiRIZH1GFQAyRiQJB9T&#xA;kUTF/jY13X4VWOnzf+fo1a28v+o8nmdVmafTl/RKI1oIZTHO7cZGSdmCcXWtvyopHLkuFWc3w/Oy&#xA;fyvoixB7XXZLe5XUfQfTpOF0ZoxZm7eVFjaEQeoZvqqcudOA44FUj5F/MS+sPJ9m+uXunSWOjv8A&#xA;py9e6nmkOos1qwVvQuYBK4pMFeUSxgbMrVGKpZFpv/OQN5r2ietfXWn6cI501m6rpTOszQxsfRhU&#xA;SRPbmePjAzxmZVLc6VxVX/Ly2/Pi38waX/igztpUxuptYjeTTpII5JmuJEEbo0l1wUtCqIuy/Fvx&#xA;AGKvYcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVecebfP3mmy89Dyzo0dmzy2KTWkdxG&#xA;skklwRcSSFqXtvIkUcUC0b0SjP8AA0kdVOKov8qPzHn85WV4t/brbarYek1xFEtIvTmDCN1Jkkf9&#xA;56TSAOqkKy/aHxsqzzFXYq7FXhs/55eYo7qS1+t6D6n1tLe1ZvVRJmdSzQc3uFSP0x/eSzMjqaD6&#xA;vVlqVZN5E/M7XdQ823PlTzPawW+qRJW3eyQ+lI0fP1zVppjwRl9LkKjmpDFGITAr0zFXYqsnlEME&#xA;kxBYRqXKr1IUVoK03xV4tpn5z+b73TNFaKPTZdU1Cc280ZjKW73Bl0+IW1tNBe3iuUXUJJnkqTxi&#xA;YGJCGKqsl/LX8zNV1/XNQ8va9bRW+r2Kyshtk4xSJbyiKWTeedl+ORUA3Xkj8ZG6Kq9HxV2KoLXN&#xA;Ql07RdQ1CGBrqaztpriO2WvKRooy4QUruxFMVeH2f57efNQm0uz06z0ye91CsUXNOMc00jlEEZjv&#xA;ZarFt6hiM3fn6PYqzv8AK/8AMu7803epaXqsCQarYHmPQTjE9vRAsv8AezkeqW5pvxKEcHejHAr0&#xA;LFXYqlXmzVrrR/K2sataRJPdafZXF1BDIeKM8MTSKrGo2JXffFXmHl/84fNOuanaWNjHZO9/Y3Um&#xA;lE25j+uXEUl8sM3pvei4t7aSO0hephkFWKGRfhYqsn/Lb8yZ/NF1eaZqNuttqtpFDOyQqfRaKSKM&#xA;+oGLu3GV3LxclAMZFCxVyFWe4q7FXYq7FWAXXmDzLD+aIsS+of4eSOMSoNLmezZ5kCosV1DBMzSL&#xA;KweSR5UjRPh4khmCrXkHzD5u/RGvXfmaG7efTy00TXEfoRMoV3MUCtZ2L0QKAzH1VNarI29FU707&#xA;WPPF9YW94ujaYkdzGk0anU7gkLIoYV/0DrviqI+ueef+rRpn/cTuP+yDFXfXPPP/AFaNM/7idx/2&#xA;QYq76555/wCrRpn/AHE7j/sgxVD6jrPnWw0+5vpdH01orWJ55FXUp+RWNSxArYAVoMVRH1zzz/1a&#xA;NM/7idx/2QYq76555/6tGmf9xO4/7IMVd9c88/8AVo0z/uJ3H/ZBirvrnnn/AKtGmf8AcTuP+yDF&#xA;UNqOtedLCzkupdH01o46cgupT1+JgvewHjiqJ+ueef8Aq0aZ/wBxO4/7IMVd9c88/wDVo0z/ALid&#xA;x/2QYq76555/6tGmf9xO4/7IMVd9c88/9WjTP+4ncf8AZBiqG1DW/OljAs0uj6ayvNBAAupT15XE&#xA;yQqd7AbBpBX2xVE/XPPP/Vo0z/uJ3H/ZBirvrnnn/q0aZ/3E7j/sgxV31zzz/wBWjTP+4ncf9kGK&#xA;u+ueef8Aq0aZ/wBxO4/7IMVQ17rXnS09D1NH01vrEyQJx1KfZnrQmtgNtsVRP1zzz/1aNM/7idx/&#xA;2QYq76555/6tGmf9xO4/7IMVd9c88/8AVo0z/uJ3H/ZBirvrnnn/AKtGmf8AcTuP+yDFUPc6z51t&#xA;57SF9H00teSmCMjUp6BhFJNVv9A6cYj9OKoj6555/wCrRpn/AHE7j/sgxV31zzz/ANWjTP8AuJ3H&#xA;/ZBiqw6n5zEohOmaSJmHJYzqk/IjxA+oVxVf9c88/wDVo0z/ALidx/2QYqpprnmW31XT7TVdMsoL&#xA;bUZntop7W+luJFkW3luPijktLccSsDCofrTbFWQ4qlvmf/lG9W/5g7j/AJNNirvLH/KN6T/zB2//&#xA;ACaXFVX9N6N9euLD6/bfXrSIT3dp60fqxRHcSSR15In+URTFXlfmXQovOHmy51PyrqmgXd3dWmnn&#xA;TtVW8Et/ZHTbuaWZrdII5CY7j1FhkZZk2rXl0xVjs35V/m/p2n61qN35rtrW5mggih1KbV9RX6rb&#xA;25klZZLholZl9acuC9aAcOjmir3+2+sfV4vrHEXHBfWCHkvOnxcSQlRX2HyxVS1CG9lhC2koikDA&#xA;lj3FD3oejUPTelO+Kola0HIgtTcjYV/HFXYq7FXYq7FXYq7FXYqpXVfSWn+/I+9P92LiqrirsVdi&#xA;rsVdirsVdirsVdirsVdiqFtbAW9xPN6jOZiTQ+5rua70rRfBaDFVzWlo16twQPrCio360BXkR7Bi&#xA;K++KojFUi8xf8djyv/205P8AumXuKp7iqW+Z/wDlG9W/5g7j/k02Ku8sf8o3pP8AzB2//JpcVYxf&#xA;/ltc3HmHWNXg1RIk1aGeH6vJbvIYxexWNvdH1Fnj5Vh0xPSFBwZix5iihVAN+TcU3lWfSbrUUk1W&#xA;b04U1z0JJLi2so5451trV7m4uZ4wrxco2eZ+DnkBQBQquufygkvdE1TSb/XHurPUNJt9MgsmsrVb&#xA;S0ltkZY7i3hVQ6+mWrEvq1Xuz/CVVehTxSSqAkzwEGpaMISfb41cYqs+rzc0b61LRAAyUio9Opb4&#xA;K796EYq0trOOdbuU8hRaiL4d+q0j/XXFUQoIABJJA6nqfuxV2KuxV2KuxV2KuxVRuh+6Xv8AvI+3&#xA;L/di9v49sVVsVdirsVdirsVdirsVdirsVcSAKnYDqcVUWvbVblbUyATsKqm/gTSvStATTwxVT9eS&#xA;6jYWjGNagfWWWoI35GMGnL2b7P8ArdMVVooI4yWABlcL6stFDOVFAWKgVxVUxVIvMX/HY8r/APbT&#xA;k/7pl7iqe4qwTT/OV55k8ueaDPpgsorGCeKKeKf61FKfTkDx+osaR+rCUpIsbOgJoHJrQqyLyddx&#xA;XPljTGjWRQlrBG3qxSQmoiXoJFQsN/tDbAqc4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqo3dPSWv+&#xA;/Iu9P92LiqtirsVdirsVdirsVdiqnPcwW6B5pFjUmgLGlT1oPE7dMVSaW/1a+nrpEkTWpUFZiARR&#xA;l+B6NxLIWrXjsV+y1cKtNp1y7ulzdNLOUMi2kTAvxFAAXbgrIX+KhQeFSBTFV2iw6bqMEV0oeQ2j&#xA;vCFdJYlEkMhr8MqRFvTaoHw8VNQoXpgVPMVdirsVY1r99C/mTy1ZhZRLHqUjMxhlWIj9GXn2Zioi&#xA;Y/F0DV+44qyXFWOX3lvy7onlrXBo2l2emC4tJ2uBZwRW/qMsT0L+mq8iKnriqY+WP+Ub0n/mDt/+&#xA;TS4qmWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqN1X0lpX+8j6Cv+7F8cVVsVdirsVdirsVdiqVa/&#xA;5htdHtjI6+tORWO3VgrMK0rv/t+2xxVK7Sz1TXJfrOrxCHTtzHAeUbcKhuJBCyD4kRuTU3U0FKHC&#xA;hOLS3j+qiPTVNnAzEmUp8bLTqgep693X5Agg4Eo6OGKMsUUKznk7AAFm6VNOpxVLvLX/ABzpv+Y7&#xA;UP8AqOmxVNMVdirsVSLzF/x2PK//AG05P+6Ze4qnuKpb5n/5RvVv+YO4/wCTTYq7yx/yjek/8wdv&#xA;/wAmlxVMsVdirsVdirsVdirsVdirsVdirsVdirsVUbunpLWn95F1JH+7F8MVVsVdirsVdirsVSjX&#xA;PNei6MCLqYNcUr9ViKtLx68ipK0XfqdsVSfQ7/TddvbjV7ezm+sxcAsLMAG3ohbkFpx41pUrtUVY&#xA;YUMnW1Z5EmuW5yJusakiNW33A/aO/VvopgSiMVdiqV+Wv+OdN/zHah/1HTYqmmKuxV2KpF5i/wCO&#xA;x5X/AO2nJ/3TL3FUYPMWiHzB/h4XaNrX1Zr42IqXW3V1jMjUFFHOQAVNT26HFUqufMmk695U1u40&#xA;xppIIra5jM0ttcW6OVjcExNPHGJVqPtJUe+Kpp5Y/wCUb0n/AJg7f/k0uKplirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdiqlclvTFK15x9ADtzWvXFVXFXYq7FUk8wedPLWgfBqV4qXBUstrGDJKdqgcEBp&#xA;y7cqDFWEy+bPOPm2KSHSdP8AqOjS1DX7Md0WpYmYjhx6clVGqKrXrhQnOg/ltpVqYrgmSWQMXle4&#xA;RRVgQVaKF+YQdf7yrffXG1ZrDBDCpSJFjUksVUACp3J2wJX4q7FXYqlflr/jnTf8x2of9R02Kppi&#xA;rsVdiqReYv8AjseV/wDtpyf90y9xVEX3l2C61y11pbme2vrS3ktIzF6RUwzTwTyqyyRyfb+qKlRu&#xA;FZqUajBVjtp5B0Xyn5b8y/o15HGo20zzLItvGq8IXChVt4oFJ+L4ncM7ftMaDFU+8nWVnaeWNMS0&#xA;gjt1ktYJJFiRUDO0S1YhQKk064qnOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqN5T0lrT+8i+10/v&#xA;F8O/hiqtiq2WWOKN5ZXEcUYLO7EBVUCpJJ6AYq848wfnHpzTNpfliKXUtSl/dxXEaFowWGzRpTlM&#xA;R1GwU/zU6mkLvLf5dacA2o61bfpTXZWV7i0nlDxQGSrD1a/3h3qeYYitAKbltWcyaPZXEfC9iS5j&#xA;4qotpFVoFCgbJERx6rUE1PvTAlR/wp5W/wCrPY/9I0P/ADTirv8ACnlb/qz2P/SND/zTirv8KeVv&#xA;+rPY/wDSND/zTirv8KeVv+rPY/8ASND/AM04qq2mgaFZzrPaaba2861CyxQxo4qKGjKoPTFURZ2F&#xA;jZRtHZ28VtG7F3SFFjUsQAWIUDfbriqvirsVdirGtf0+wTzJ5avktolvZdSkSS6CKJWUaZeCjOBy&#xA;I+Ed+2KslxVLfM//ACjerf8AMHcf8mmxV3lj/lG9J/5g7f8A5NLiqZYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYqpXVfSWlf7yPoQP92L44qqkgCp2A6nFXlHm3zm/mrUD5X0FS9lXle3uzRuiGhJIJ4wg&#xA;ivKlXNAv+UUM28ueVNN0i2t/0dAlqQo+sXLQp9bnblUmRzXiGpXj1FaDjTAlP4oookEcShEFaKoo&#xA;NzU/ecVXYq7FXYq7FXYq7FXYq7FXYq7FUi8xf8djyv8A9tOT/umXuKp7iqT6/eWdz5d1xLeeOZ7a&#xA;3uIblY3VjHKIOfBwCeLcXU0O9CMVVvLH/KN6T/zB2/8AyaXFUyxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxVj/AJy84aB5asUm1WfgzurQ26qXlk9N1LcUHh4mgrTFXmX1L8xfzJZrldRXT/LruYTBE37o&#xA;qBVgyowaYbcW5nrtxAqQUPT/ACn5M0nyzaejaGSed6Ga6nIMjmlOwCgfIYEp9irsVdirsVdirsVd&#xA;irsVdirsVdirsVSLzF/x2PK//bTk/wC6Ze4qnuKsRPlW00DQfOLWhRIdYkutS9CKJYViZ7KOF1AU&#xA;0Ys0BkLUFS30lVNfJ1r9X8saYvrSzc7aB6ytyIrEvwr0oop0xVOcVdirsVdirsVdirsVdirsVdir&#xA;sVcSAKnYDqcVee+c/wA1NOtoTpvlm5j1DW52ESPAPXSNn2UIR8EkrMeKJXY7tsOJNKlHl/8AKzW7&#xA;q8j1nztffpKQtEV02Q+so/ebJI8u3BORIjVftb1rsW0M/wDLlstrc6taxMwtLW6SG0tthHDF9Vhl&#xA;4RqoHEcpWwJTrFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWNa/ZcfMvlq69eZvU1KRfQZ6xL/uMvN1&#xA;Wmx+HFWS4qlvmf8A5RvVv+YO4/5NNirvLH/KN6T/AMwdv/yaXFUyxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV5Z5s1bzN5w1SXy55dihl0RG4ahdmQryAPFuZDKWiqfsxhi1NyAcKGVeU/y28q+WXW4srczaiF&#xA;KtqNwfUmodiF6JGKbfAo261wJZHdf3S/8ZI+or/uxcVQOj/8dHXf+Y5P+oG2xVNMVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVSLzF/x2PK/wD205P+6Ze4qnuKpb5n/wCUb1b/AJg7j/k02Ku8sf8AKN6T&#xA;/wAwdv8A8mlxVMsVdirsVdirsVdirsVdirsVSfzB5w8ueX0B1W9SB2FUhAaSVh7RoGb6aUxV5zqP&#xA;5keZfNl82k+ULWe1iZeElwwj9Q8xRizj1UiC16g128SKGkPQPJnleLy7o6Wp9N7t6NdTRLxUsBRV&#xA;XvxQbDxNW6scCU+xVRuj+6Xt+8j78f8Adi9/4d8VQOj/APHR13/mOT/qBtsVTTFXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FUi8xf8AHY8r/wDbTk/7pl7irH7mx88Q/mSNRjivLnQy6L+6uoxaize3ETRf&#xA;VJJ4/wB/Hdn6w0vp19IFVJaiFVA+VtN85WHlTzVF5kWYu0M7211czvM8nKKQvxQ3l8iRrsE4elyH&#xA;WNablWZeTkvF8saYLuWOVjawGMxRtEAnpLRSGeWp96j5YFTnFXYq7FXYq7FXYq7FWmZVUsxCqOpO&#xA;wxVg3mP8yjHdLpnlm3Gqag5IE1GaEMpoyoEIaUj9oqQoH7XbDSFDy5+WFlO76v5phN5q1y3J4pJC&#xA;yjalXCUVm7U+yBTatcbVnlta2trAsFrCkECbJFEoRB8lUADAlVxV2KqN1/dL/wAZI+gr/uxcVQOj&#xA;/wDHR13/AJjk/wCoG2xVNMVdirsVdirsVdirsVdirsVdirsVdirsVY1r6X48yeWneaJrI6lII4RE&#xA;wlDfoy83aUyFWHXb0x8/FVkuKpb5n/5RvVv+YO4/5NNirvLH/KN6T/zB2/8AyaXFUyxV2KuxV2Ku&#xA;xV2KqN1dw20fOQneoVFFWYgVoB8h9HfFWEajYax5w1CW1uFe20CJgF4MFZqgEl+Qbk5Q8lABUA0b&#xA;euFDKtB8t6Todv6NhDxZgBJM1DIwHQEgABR2VQFHhgSmeKuxV2KuxVRu/wC6Xp/eRdTT/di4qgdH&#xA;/wCOjrv/ADHJ/wBQNtiqaYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkXmL/jseV/+2nJ/3TL3FU9x&#xA;VLfM/wDyjerf8wdx/wAmmxV3lj/lG9J/5g7f/k0uKplirsVdirsVdiqEkvalGhKG2Ycmuy6+nQVq&#xA;EoSWbbvQe/bFWPX+t3ayrZ6DEb2edv318T6hIBoWX7KcK1XlyCq1RTChkem20lvZRxyiNZt2kEQ+&#xA;HkTWlaLyp05ECvWg6YEonFXYq7FXYq7FVK6r6S0r/eR9AD/uxfHFUBo//HR13/mOT/qBtsVTTFXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FUi8xf8djyv8A9tOT/umXuKp7irzTy1551bzR5a80G/jt/wDR&#xA;LIuBaqy+hJNFN6lhcc5JK3Nt6a+oRxHxj4RhVl3lG9uZfLWmF7CeDjawKokaA8gIkow4Svse1aH2&#xA;wKnHry1p9Xk6gVrH3Fa/a7Yq19YlpX6tJ0rSsf3fbxVv15a0+ryUrStY6U8ftdMVUJ9RMPEG2maW&#xA;Qfu4U9MuxHUfboKdyTx98VSm/wBZmE8kU9k9zbyVVLdfTMbKPiDsxJLBqcfDkQhH7WFUO2jw6673&#xA;13bXUDfCvoh49/skr8Z6KRuvEUbl9raihN9M02z0yNks7KROf23LIzNxFBUl+/bAlGieX/lnk7d4&#xA;+/X9vt3xV3ry/wDLNJ0J6x9u32++Kt+vLWn1eTqBWsfcVr9rtirXry0r9Wk6E0rH2NKfbxVv1pK0&#xA;9B+tK1T7/tYq19YlpX6tJ0rSsf3fbxVRvJn9JQbd6erHuSgG0ikHZvHp74qgtJN/HfavJNp80KXF&#xA;0ktuzNAeaC3hhJHCViPiiJ+Km2Kpp68v/LPJ1I6x9u/2u+KtevLT/eaTttWPv/s+2KuM8v8Ayzyd&#xA;+8fbp+337Yq715a0+rydt6x9+v7fbFXevLSv1aToTSsfY0p9vFW/XlrT6vJ1ArWPuK1+12xVr15a&#xA;V+rSVpWlY618Pt4q368tafV5KVpWsdKeP2umKtevLSv1aToDSsfc0p9vFXCeX/lnk794/Cv8/wBG&#xA;Ku9eX/lmk6A9Y+/b7fbFW/Xlr/vPJ33rH2/2XfFWhPL/AMs8nbvH36/t9u+Kse1y8uZPMflqB7Ce&#xA;GJdSlK3TtAYmP6MvPhUJK8ld+6AbfKqrJ8VS3zP/AMo3q3/MHcf8mmxV3lj/AJRvSf8AmDt/+TS4&#xA;qmWKtMyopZiFVRVmOwAHc4qhnunYlkpHZqnN7xmXjxK1DR/aBp1Jag+fZVCcZXRIrQGW1nJFzK7H&#xA;1CSeMnOtGQqv2QB12+EDdVH2dpHaw+mjM1SWLNSpJ9lCqPoHv1xVWxV2KuxV2KuxV2KuxV2KqVzX&#xA;0xSv24/s9ftr49vHFVXFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkXmL/jseV/+2nJ/3TL3FU9x&#xA;VLfM/wDyjerf8wdx/wAmmxV3lj/lG9J/5g7f/k0uKo+aRo4XkVDIyKWEa05MQK0Fe5xVB2ImvYDN&#xA;fIvFmBjt6VjAWtGqwVnrXqQBsKD9oqqlvp4jkuWkkM0dyTWJwCtCT1rXls3H/VAHbFURBBFBGI4l&#xA;4oPck1Pck7k+5xVfirsVdirsVdirsVdirsVdiqjecfSWtKepF1qd/UWnTFVbFXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYqkXmL/jseV/+2nJ/wB0y9xVS/xxpX+LP8NejcfWOfofXeMf1b619X+ufVq8&#xA;/V9T6t+9/u+NP2q7Yqldt570rzZ5O8xXelxOI7O3uoSHltZGdlif9i3mneOtNllCt/k4qq+V/Pvk&#xA;j/DWlK/mDTI5Vs7dZYmvLcMjiJeSsC9QQeuKpp/j3yN/1MWmf9Jtv/zXirv8e+Rv+pi0z/pNt/8A&#xA;mvFXf498jf8AUxaZ/wBJtv8A814qh9R/MbyVa6fc3UWuabcSwRPLHbrewcpGRSwQUZjViKdMVRH+&#xA;PfI3/UxaZ/0m2/8AzXirv8e+Rv8AqYtM/wCk23/5rxV3+PfI3/UxaZ/0m2//ADXirv8AHvkb/qYt&#xA;M/6Tbf8A5rxVDaj+Y/ku1s5J4tc024kSnGFb2CrVYDszdK16Yqif8e+Rv+pi0z/pNt/+a8Vd/j3y&#xA;N/1MWmf9Jtv/AM14q7/Hvkb/AKmLTP8ApNt/+a8Vd/j3yN/1MWmf9Jtv/wA14qhNU/MPyXDbI8Wu&#xA;6dMxuLZCiXtvULJcIjP9ptkVix9h264qi/8AHvkb/qYtM/6Tbf8A5rxV3+PfI3/UxaZ/0m2//NeK&#xA;u/x75G/6mLTP+k23/wCa8Vd/j3yN/wBTFpn/AEm2/wDzXiqGvfzH8l2/oenrmmzetMkT8b2D4Fat&#xA;XNGOwxVE/wCPfI3/AFMWmf8ASbb/APNeKu/x75G/6mLTP+k23/5rxV3+PfI3/UxaZ/0m2/8AzXir&#xA;v8e+Rv8AqYtM/wCk23/5rxVD3P5jeSoZ7SNNc02VbmUxSOL2CkSiKSTm3xHblGF7btiqI/x75G/6&#xA;mLTP+k23/wCa8Vd/j3yN/wBTFpn/AEm2/wDzXirv8e+Rv+pi0z/pNt/+a8Vd/j3yN/1MWmf9Jtv/&#xA;AM14qlWo+avLWq+YvLFppWq2WoXKajLJLBa3EU0iRjTLwc2WNmIXkyip7kYqjrf8uPJdrqMeoWOm&#xA;rYXEJVolspJrSFWVufMQQPHDzb7Ltwq6EoxKkgqqU9joHkvT729063nW4vfhEjjUL9Q8UbtCsjIL&#xA;t4LaPfoAiV23O6qh+WHnC/8ANOjXtzevazTWV69ot1YU+rzIIopVkThPeJ/u2hpM3T4uLVVVWYYq&#xA;7FXYqkvnHzFH5f8AL93qLEJJHFJ6EskNzNbpIsbOr3JtY5nihHH43IoB3rTFUP8Al/5hu/MXlSz1&#xA;e6ktpZLlp+E1mV9J4kndIn4rLciNmjVS8fqsUaqk1BGKsixV2KuxVLNd1aaxg9K0gafUriOY2SvH&#xA;cfVucSc6XFxDFMsCnsXpy6LU4qp+TtYuda8o6JrN0iR3Wpafa3k8cYIRZJ4VkZVDFiFBbapOKpvi&#xA;rsVdiqQ+edeutC8uS6jbNBFItxaQNdXYLW9vHc3UUElxMoeElIUkMjfGvTcgb4qifKerXWseVtH1&#xA;a7g+rXWoWVvdT24qBHJNErsorU0Bbvv44qmuKuxV2Kse/MLXtX8v+S9X1vSYILm9062kuUiumdYi&#xA;salmr6YLMaDZarU/tDrirIcVdirsVdirDfzT85X3lPy/Bf2M9hBcz3It4hqRIjkdopHSJW9S3jQu&#xA;6KC8kqqicm+IgKyrMVJKgmlSATQ1H0HbFW8VdirsVYL+a/nrU/KGnWl5YPYhnMrSQXtec4iCn0oK&#xA;y26cyGJ+077fBFIa0VZ1irsVdirsVdirsVdirsVdirsVQ2p6lZaXpt3qd9J6NjYwyXN1NRm4RQoX&#xA;duKhmNFUmgFcVSe1/MPyTcyNHHrNspS2gvWaVvRT0LqF7iF+coRfihheTjWoUVIAxVDJ+an5eNqN&#xA;1p7a9aw3Nikkl565aGKJYbk2b85pQkS/vxwA5VOxFQQcVRi+fvJJmkhbXLKKWJ2QrNOkXIpbx3Tt&#xA;H6hX1EWCZHLpVQD1xVEnzb5VFlZ3x1mx+pajJ6On3X1mH0riWpX04X5cZG5AiiknFUrb8zvJI0rT&#xA;9VXUHmsNVE7WMsNtdTF0tSRPIUjiZ0jjp8TsoUda4qqwfmX+Xs0LTDzJpsaL6hb1rqKFgsUzW7vx&#xA;lZG4eqhUNTiexNRirb/mP5ASdYD5i0/kbc3hcXMTRJbho09WSUMY0VmmQJyYcq/DWhxVfefmD5Gs&#xA;51tp9esfrTy28CWsdxHLOZLsqIFEMZaT95zBB4/Z+L7NTirU35g+UYNVudMub4209m7RXM9xDPDa&#xA;JKluLpozeSIttzW3PqFRJXjU9jiqrN558mxW0Vy2t2TwTyxQRSRTpKGkmMXAD0y21LmJiegV1Y0U&#xA;1xVCH8zvy+F7DZjzBZPLcRfWInSUPCYuMzGT1lrEFUWkvIlvhpvTktVUfp3nLyhqd6tjpuuafe3r&#xA;p6qWttdQSymOgbmERmbjxNa0xVOMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSP&#xA;z3+jP8EeYf0r636L/Rl59f8Aq3H1/q/1d/V9Ln8PPhXjy2rir59b/lSX1DXf0f8A4h+0v1j0fqfq&#xA;ej9W1Lj6H1r4PS/RvrcOe/o+nx+PFUTrf+Cv8Ut/h39Of4m5xca/UPT9L/F6+v8AV/V+H1/rnL0v&#xA;V/d8Kc++KpVqX/KjvUHH/Fn1H6rafW/q3o/U/S/Rtt9T+tcvh+xw489vU5cvgwqze6/5V/8A4E8t&#xA;ev8Ap/6jXU6cvqX1r6p9aH1/61X9z6HPhT6t8fGnp98VX+a/+Vf/APKvPJ31j9MfoP8ARh/R3p/o&#xA;z1fq/pQ8fU+vfu/rfHj6X1X/AEivL0++BWHX3/Knv8b2/wBa/wAT+r/iNvq3qfo76j9d+vSc6c/3&#xA;/wBX9WvLvx/ysVRd5/yqn/nYfT/xL9U+u6l9Y+r/AKN9L67+kLD656HL95Sv1X+8/d+lX9rliqZ6&#xA;T/yrT6toX6P/AMQ8fWsaV+oV9H09C9H6xz29L1PqHP0f3nPnT4MVRn5if4J/SOvfpj/E31H9LrT9&#xA;HfUfR/Tn6Mi9P6nw/wBN9b6pTj6n7qte9MVSCD/lSn6Kk/5ST1fqVr9Z9bh9c9T9LR+ry9T/AI+v&#xA;rHoevx29P0+GFULa/wDKo/qem+p/ifj66fU/V/RnP659Y1P6ry9P4eX1r61w/Yrx9T4MCs5/L/8A&#xA;5V7/AIgj+p/pb9O/4nvvrf1/6n6n6W/Rc/1z1fq3welw9X+6+H1fs/Bir2fFXYq7FXYq7FXYq7FX&#xA;Yq7FX//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:A4ACF33645D1DF11B96BBDB365EB4FA0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:CCA6724B49D1DF11B96BBDB365EB4FA0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -200.596 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 200.596 li
261.634 200.596 li
261.634 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
258.716 179.183 mo
255.565 179.183 li
16.2656 179.183 mo
19.4155 179.183 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 46 /period putdup 48 /zero putdup 53 /five putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437917 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A75CA669> |-/period <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369E6> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/MIJMQD+Helvetica /Helvetica findfont ct_VMDictPut/MIJMQD+Helvetica*1 [45{/.notdef}rp /hyphen /period /.notdef /zero 4{/.notdef}rp /five 202{/.notdef}rp]MIJMQD+Helvetica nfMIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf0 181.521 mo(-0.5)[2.33105 3.89209 1.9458 0 ]xsh258.716 152.833 mo
255.565 152.833 li
16.2656 152.833 mo
19.4155 152.833 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQD+Helvetica /Encoding getdup 32 /space putpop%ADOEndSubsetFont
/MIJMQD+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero 4{/.notdef}rp /five 202{/.notdef}rp]MIJMQD+Helvetica nfMIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf6.21875 155.169 mo( )sh8.17188 155.169 mo(0)sh258.716 126.484 mo
255.565 126.484 li
16.2656 126.484 mo
19.4155 126.484 li
@
MIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf0.390625 128.818 mo( 0.5)[1.9458 3.89209 1.94629 0 ]xsh258.716 100.133 mo
255.565 100.133 li
16.2656 100.133 mo
19.4155 100.133 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQD+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/MIJMQD+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]MIJMQD+Helvetica nfMIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf6.21875 102.466 mo( )sh8.17188 102.466 mo(1)sh258.716 73.833 mo
255.565 73.833 li
16.2656 73.833 mo
19.4155 73.833 li
@
MIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf0.390625 76.1694 mo( 1.5)[1.9458 3.89209 1.94629 0 ]xsh258.716 47.4829 mo
255.565 47.4829 li
16.2656 47.4829 mo
19.4155 47.4829 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQD+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/MIJMQD+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]MIJMQD+Helvetica nfMIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf6.21875 49.8101 mo( )sh8.17188 49.8101 mo(2)sh258.716 21.1328 mo
255.565 21.1328 li
16.2656 21.1328 mo
19.4155 21.1328 li
@
MIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf0.390625 23.4663 mo( 2.5)[1.9458 3.89209 1.94629 0 ]xsh16.2656 179.183 mo
16.2656 176.033 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319EB739C72B00D2CC4607F53D8DAA36825DF613C6C839053BC26A7859D8AA158786D28D1E4DE04046CE941E5159199A77FA8129F02A3ECB8D9E54C278D22D0348DFB3C3C73F55886BF824DB1B2BE764C084A332EAF6E03DAE2729DE4723D54D14DE5E36772632D9593B8015D82D91A7513CF83AED18BF899FB582C1516AE5C3CE963C7A9224066B2CB5D769E52069DB2172C52452A135E45CF579C1E7FB12BEA387FFB8E1E9EB90D4F6BF80D4DDA346E7141D8646431020D523BDB64> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQD+Helvetica /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/MIJMQD+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 202{/.notdef}rp]MIJMQD+Helvetica nfMIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf13.1484 188.513 mo(-3)[2.33105 0 ]xsh56.6655 179.183 mo
56.6655 176.033 li
@
MIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf53.5547 188.513 mo(-2)[2.33105 0 ]xsh97.0654 179.183 mo
97.0654 176.033 li
@
MIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf93.9531 188.513 mo(-1)[2.33105 0 ]xsh137.516 179.183 mo
137.516 176.033 li
@
MIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf134.594 188.513 mo( )sh136.539 188.513 mo(0)sh177.916 179.183 mo
177.916 176.033 li
@
MIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf174.992 188.513 mo( )sh176.945 188.513 mo(1)sh218.315 179.183 mo
218.315 176.033 li
@
MIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf215.398 188.513 mo( )sh217.336 188.513 mo(2)sh258.716 179.183 mo
258.716 176.033 li
@
MIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf255.797 188.513 mo( )sh257.734 188.513 mo(3)sh56.6655 21.1328 mo
56.6655 24.2832 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/percent <1C60D8A8C9B59F8594089738AF9DF465F54C6E2E73D734CAE89F3829C655870E5044D20DDF1C15426538D8756B98CCE5D961A3A5C080C9710FFF37CA3959F6E311EEB75381E1C8BDAD74AE727476A05E61D4A2BF97AEC37C3D3B9E7F5D0E2CE6E8EA5A4F8E275EDEB676884813423A209F3E02ED930686F1A21545C73BD38E7E25B0C791C844FA0C45BE587987BD49776E20B5664C2E3304C8E19A9D0DD287FC3D30DDE3CE134E3F3D6BF107D058547A967EFC99FA2CC64ACAA9BD7E3A2BCA10294EB8D2112ADFBB5EAF946DD7F9387406239A48D38B5B37E29B638CB45A59734B5A96BC1C09A5526793F4C2C49A59BD8AF6343077536B54AAFCB5306BDF838BDA3E4DEF04B2071356E3> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQD+Helvetica /Encoding getdup 37 /percent putpop%ADOEndSubsetFont
/MIJMQD+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 202{/.notdef}rp]MIJMQD+Helvetica nfMIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf51.6016 16.4663 mo(5%)[3.89209 0 ]xsh97.0654 21.1328 mo
97.0654 24.2832 li
@
MIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf90.0625 16.4663 mo(32%)[3.89209 3.89209 0 ]xsh137.516 21.1328 mo
137.516 24.2832 li
@
MIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf130.508 16.4663 mo(50%)[3.8916 3.89258 0 ]xsh177.916 21.1328 mo
177.916 24.2832 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQD+Helvetica /Encoding getdup 54 /six putdup 56 /eight putpop%ADOEndSubsetFont
/MIJMQD+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five /six /.notdef /eight 199{/.notdef}rp]MIJMQD+Helvetica nfMIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf170.914 16.4663 mo(68%)[3.8916 3.89258 0 ]xsh218.315 21.1328 mo
218.315 24.2832 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7EF32A4731A9DB70B9490730918F3CC8A6CEFA5DBCDDDD5B8FF631E5F2E3BEA7592C5DB8D17DFB2B2E4B0DAC725198BC39F2911D25DCD43EC8F7F509D2A326D2C0725149B8BE60F05AAA125797CC4820A7DA7D1C0D4C7551B0568D049B61E397212F1F645896D5538A3CC2354092A21562A36F8CBFBCDB29F3C22EE7704AEF405504D83FFD0CBE4861F9ADE2B264F64EA7F79AD12731F7D0F425F88BA586942BE2189ACE567A86FE749EFE5BB706E4B2115> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQD+Helvetica /Encoding getdup 57 /nine putpop%ADOEndSubsetFont
/MIJMQD+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five /six /.notdef /eight /nine 198{/.notdef}rp]MIJMQD+Helvetica nfMIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf211.313 16.4663 mo(95%)[3.8916 3.89258 0 ]xsh0.125 lw
[0.5 1 ] 0 dsh
137.516 179.183 mo
137.516 21.1328 li
16.2656 152.833 mo
258.716 152.833 li
@
0.5 lw
[] 0 dsh
16.2656 21.1328 mo
16.2656 179.183 li
258.716 179.183 li
258.716 21.1328 li
16.2656 21.1328 li
16.2656 21.1328 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F1E08EB12991814F2BEFDD99E857D46CC83B089892D70768EDFB737CEBE140DF668BA679C989F178F8C7B580D23B4B614D8D70F34E9A487B4AA37370316974673AB> |-/M <1C60D8A8C9B6B41CC7E91641C452E31A1FF57E5819E293AAC22FFE6A989DD096F29F83DBBFB131D21D2F3E6C6DAB9DE434C529570BC24A625218D657C1F03933B1EA3B0DCFDA8AB35AF4BBEE90CCC241F177D656ECD11D47536184> |-/P <1C60D8A8C9B64EDFA3F30AE4AB14FCCB57D446AF805F45D1BE197D47C6C20943FECBF4EB404456C629F1F5342EEA681381C7461EF00E178F4482E2C7F7B39C94B8CCFF41619BA5DC67957F7F81> |-/S <1C60D8A8C9B64EDF7B9A268599F9CD8C4143A0D599CA838C6F6EFB82E6187B34759773BB4D8C1A41E190DEFABB354DFB531C99308891FC3B7E87957393F9CD35CA8C07371CAABAAF32C24CDAE22C826F234EC2B15BA06DFB54FFCB46EDDF1D277ED530855C8BB0880980568C5F76DE693CEE6004D84A502F3C6B0F55A55095F8FAF71FCF3869AA0D55975A515D287103786F2BEFCA3E30833F771676F4E4B0C078830B99B254F2B4> |-/a <1C60D8A8C9B7EF32A0B922DB529D708010F72F0E62F6CA36E98277AFD8C536E6814BFC8F2509E1B2B1B62A6BDA8D1A6ED67728D80620B28FE439D2F57DCEC5483105FEA93379701773DF23A415938C688874994BCC9880105CE27AC2270A13FA38E952045C5E8C52BEF83397E5FBEEFAB993BE33E385A5E36620F7427AB5E4423C6A4ED6DE24A89F54E52C8FAD8A45FAD4B8F6CFD50EB7D35BF120B079B932E0EE2F7685462C7EC6E9B818F0F9E1F7814D04F2B9AAFA6704B8B745452B73181F38CB34F1645F> |-/c <1C60D8A8C9B7A73DE7D498F17521D6359F9ADD96B62202C43AB7E2B6A506D4DE60506EB0B21A851A7E637BA285607D05D1170907CD76EA31977E70CEDA0DED90924EF61C48FC884B70C05F0A56FF474D664DA9646860BA> |-/d <1C60D8A8C9B7EF3272B02106CA005D490B9AADA17924914F2C970DE0CC49CEA15AE0636239F8F8972696F7F5932B166AF2D78F67482CC14B1A6381CFD7128F8DE76CDFCE15FA9EB575CCF12B456F3EB76367E9886C5281DF7AB34F68E50A05C60D95A0109B0EE1AC212C660640ECA54376F807195B77C533845305049FE68DE5BA8B1CD6F2147B0BF4B5B691FCBB3989ADBCB5DBED> |-/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C2021D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495ACA0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCDBE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553A431EECECF30F5581F5F0240E470E520EB9771> |-/f <1C60D8A8C9B854D0A3953AFC308C88F2CB7B77611DE17001C91B65CE86C8891C39A4DBCDDE1373931B89EF13785E617F99570B386BE99D1A576D0D1701D2F253DF8B3192240780F3E221EB68A6> |-/g <1C60D8A8C9B7EF326F0C168637D7A49AFFC209EC4BD7378EE8A777DA14ED0433ABB575BAA4A098791F7EC46D250F5BCBA737E6ADD6E1EA28A72C69A1D2534789ED43F588B444BB33EF91B59EF2C4FE743D22BB1490B1C3D985CEC86DB4CAEC82645FBE79A010F5150478D7CD822F749944770C7A9AD08A4C4D068AD8C66DD4250133C698BF087BA2E532A8750CA7F12CE9EAE477EA1DDA085AAD3B0D4A0456D044E2A177014C879AB81F36C957A614E7A4A934> |-/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D72A7354004D800853CB28271AB7834CF7A2CB132BAFF26EF4E9D89B> |-/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C0EAF> |-/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA563254EC441C4BC3817B6ABCAA45C3FADDF2A0C1F1BCD1456474D7370B95E3791CB0774B8A788FAD31DAB8E43BE1DDCC8C2722C438CA874C21003F548D691EAB87ADC2BE2D98ABE47C6EE8D76> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/p <1C60D8A8C9B7EF321971A47DFE20E88A554AF6C7BF26D7DE21E7159091488A77474EFAE16E717C524A15C920EA73AA47F3FA5326288E9152C7B3C170946831BD532AD7339284A44181A5422DAA5A3944CCAFE4499DA2E6E45119A891F62D3E7DB19C997B84C7105E8154EEFB4DEC8858FC770AEE75D22C6FDC3AA98F517994> |-/r <1C60D8A8C9B81F2C150546EE4CBAAF688B47B2BE559294D5CB0899F2E804995909AC00E005B47DD0AC10879B5BC7D5032F4A9752992A333ADEB05A77287D04AF74FB420D308AD8> |-/s <1C60D8A8C9B7A73DF2FC7D734CFF3CEE44DEE08B4814311F759A12C668E2414B1F185B71CDFB81A4EFE4B67531A5BC3DCC468E7336CC99F93A0F8C9CAAC21479B9DF30E1F20CC55E079066616501132E6501EACD2121153832E7EB63F4284AC03D21E5D5BD534A816A07833E9E45AAF0AF784FB128B27EB090C038A83361862615D53FB49FC431C156AA9A7FD4E2EF50395549EA0CB64112DC> |-/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B5837088353D9095E679DCF29A> |-/u <1C60D8A8C9B7EF325758E576B7BAA1EFA82EFF7976BE67CE506354F22E3D1B078EDAE7715C61BE16B3CD4B647E2C68818E308CF0BE659E73BA193580128E99771A6AFDBFEB4E9486BE6CBE5D0A068E2F3382B692BCB6E47C62554398C9E56946239346863C679F19> |-/v <1C60D8A8C9B7A73DC53FF2C839B947F31C11DB63CB8CC0B0E0518E01B2A8090086BA063BC631F5BCB6255A1F02FF856D> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQD+Helvetica /Encoding getdup 68 /D putdup 77 /M putdup 80 /P putdup 83 /S putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 105 /i putdup 108 /l putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putpop%ADOEndSubsetFont
/MIJMQD+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five /six /.notdef /eight /nine 10{/.notdef}rp /D 8{/.notdef}rp /M 2{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /d /e /f /g /.notdef /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]MIJMQD+Helvetica nfMIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf89.0313 199.021 mo(Multiples of Standard Deviation)[5.83105 3.89209 1.55371 1.9458 1.5542 3.89209 1.55371 3.89209 3.5 1.9458 3.89209 1.9458 1.94629 4.66895 1.94629 3.8916 3.8916 3.89258 3.8916 2.33105 3.89258 1.94531 5.05371 3.89258 3.5 1.55371 3.8916 1.94629 1.55371 3.89258 0 ]xsh104.977 6.01318 mo(Percentage of Points)[4.66895 3.89209 2.33105 3.5 3.8916 3.89209 1.94629 3.8916 3.89258 3.8916 1.94629 3.8916 1.94629 1.94629 4.66895 3.8916 1.55371 3.89258 1.94531 0 ]xsh221.166 73.833 mo
222.365 73.833 li
223.565 73.833 li
221.166 47.4829 mo
222.365 47.4829 li
223.565 47.4829 li
222.365 73.833 mo
222.365 47.4829 li
221.166 73.833 mo
222.365 73.833 li
223.565 73.833 li
221.166 47.4829 mo
222.365 47.4829 li
223.565 47.4829 li
177.916 73.833 mo
218.315 73.833 li
140.315 152.833 mo
141.516 152.833 li
142.716 152.833 li
140.315 100.133 mo
141.516 100.133 li
142.716 100.133 li
141.516 152.833 mo
141.516 100.133 li
140.315 152.833 mo
141.516 152.833 li
142.716 152.833 li
140.315 100.133 mo
141.516 100.133 li
142.716 100.133 li
@
MIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf35.0781 30.1147 mo(Data)[5.05371 3.89209 1.94629 0 ]xsh0.25 lw
34.9805 169.263 mo
34.9805 168.394 34.2749 167.689 33.4058 167.689 cv
32.5361 167.689 31.8306 168.394 31.8306 169.263 cv
31.8306 170.132 32.5361 170.837 33.4058 170.837 cv
34.2749 170.837 34.9805 170.132 34.9805 169.263 cv
@
1 lc
33.3657 169.283 mo
33.3657 169.283 li
@
0 lc
45.0605 165.664 mo
45.0605 164.794 44.355 164.087 43.4858 164.087 cv
42.6162 164.087 41.9106 164.794 41.9106 165.664 cv
41.9106 166.533 42.6162 167.238 43.4858 167.238 cv
44.355 167.238 45.0605 166.533 45.0605 165.664 cv
@
1 lc
43.4155 165.734 mo
43.4155 165.734 li
@
0 lc
51.3008 163.503 mo
51.3008 162.634 50.5952 161.927 49.7256 161.927 cv
48.8564 161.927 48.1504 162.634 48.1504 163.503 cv
48.1504 164.373 48.8564 165.078 49.7256 165.078 cv
50.5952 165.078 51.3008 164.373 51.3008 163.503 cv
@
1 lc
49.7158 163.583 mo
49.7158 163.583 li
@
0 lc
55.9805 159.904 mo
55.9805 159.033 55.2749 158.328 54.4058 158.328 cv
53.5361 158.328 52.8306 159.033 52.8306 159.904 cv
52.8306 160.773 53.5361 161.478 54.4058 161.478 cv
55.2749 161.478 55.9805 160.773 55.9805 159.904 cv
@
1 lc
54.4155 159.833 mo
54.4155 159.833 li
@
0 lc
59.7007 156.783 mo
59.7007 155.914 58.9951 155.208 58.1255 155.208 cv
57.2563 155.208 56.5508 155.914 56.5508 156.783 cv
56.5508 157.652 57.2563 158.359 58.1255 158.359 cv
58.9951 158.359 59.7007 157.652 59.7007 156.783 cv
@
1 lc
58.2158 156.833 mo
58.2158 156.833 li
@
0 lc
63.0605 153.423 mo
63.0605 152.554 62.355 151.847 61.4858 151.847 cv
60.6162 151.847 59.9106 152.554 59.9106 153.423 cv
59.9106 154.292 60.6162 154.998 61.4858 154.998 cv
62.355 154.998 63.0605 154.292 63.0605 153.423 cv
@
1 lc
61.4155 153.433 mo
61.4155 153.433 li
@
0 lc
65.7007 153.183 mo
65.7007 152.314 64.9951 151.609 64.1255 151.609 cv
63.2563 151.609 62.5508 152.314 62.5508 153.183 cv
62.5508 154.052 63.2563 154.757 64.1255 154.757 cv
64.9951 154.757 65.7007 154.052 65.7007 153.183 cv
@
1 lc
64.1655 153.283 mo
64.1655 153.283 li
@
0 lc
68.3408 152.943 mo
68.3408 152.074 67.6353 151.369 66.7656 151.369 cv
65.896 151.369 65.1904 152.074 65.1904 152.943 cv
65.1904 153.812 65.896 154.517 66.7656 154.517 cv
67.6353 154.517 68.3408 153.812 68.3408 152.943 cv
@
1 lc
66.6655 152.882 mo
66.6655 152.882 li
@
0 lc
70.5005 149.103 mo
70.5005 148.234 69.7949 147.529 68.9258 147.529 cv
68.0562 147.529 67.3506 148.234 67.3506 149.103 cv
67.3506 149.972 68.0562 150.677 68.9258 150.677 cv
69.7949 150.677 70.5005 149.972 70.5005 149.103 cv
@
1 lc
68.8657 149.183 mo
68.8657 149.183 li
@
0 lc
72.4204 148.623 mo
72.4204 147.753 71.7148 147.048 70.8457 147.048 cv
69.9761 147.048 69.2705 147.753 69.2705 148.623 cv
69.2705 149.492 69.9761 150.199 70.8457 150.199 cv
71.7148 150.199 72.4204 149.492 72.4204 148.623 cv
@
1 lc
70.9155 148.683 mo
70.9155 148.683 li
@
0 lc
74.3408 148.382 mo
74.3408 147.513 73.6353 146.808 72.7656 146.808 cv
71.896 146.808 71.1904 147.513 71.1904 148.382 cv
71.1904 149.251 71.896 149.958 72.7656 149.958 cv
73.6353 149.958 74.3408 149.251 74.3408 148.382 cv
@
1 lc
72.8154 148.283 mo
72.8154 148.283 li
@
0 lc
76.1406 147.904 mo
76.1406 147.033 75.4351 146.328 74.5654 146.328 cv
73.6963 146.328 72.9907 147.033 72.9907 147.904 cv
72.9907 148.773 73.6963 149.478 74.5654 149.478 cv
75.4351 149.478 76.1406 148.773 76.1406 147.904 cv
@
1 lc
74.5654 147.882 mo
74.5654 147.882 li
@
0 lc
77.7007 147.183 mo
77.7007 146.314 76.9951 145.609 76.1255 145.609 cv
75.2563 145.609 74.5508 146.314 74.5508 147.183 cv
74.5508 148.052 75.2563 148.757 76.1255 148.757 cv
76.9951 148.757 77.7007 148.052 77.7007 147.183 cv
@
1 lc
76.2158 147.183 mo
76.2158 147.183 li
@
0 lc
79.3809 145.023 mo
79.3809 144.154 78.6748 143.449 77.8057 143.449 cv
76.936 143.449 76.2305 144.154 76.2305 145.023 cv
76.2305 145.892 76.936 146.597 77.8057 146.597 cv
78.6748 146.597 79.3809 145.892 79.3809 145.023 cv
@
1 lc
77.7656 145.033 mo
77.7656 145.033 li
@
0 lc
80.8208 144.423 mo
80.8208 143.554 80.1152 142.847 79.2456 142.847 cv
78.376 142.847 77.6704 143.554 77.6704 144.423 cv
77.6704 145.292 78.376 145.998 79.2456 145.998 cv
80.1152 145.998 80.8208 145.292 80.8208 144.423 cv
@
1 lc
79.2158 144.433 mo
79.2158 144.433 li
@
0 lc
82.2607 143.583 mo
82.2607 142.714 81.5552 142.007 80.6855 142.007 cv
79.8164 142.007 79.1104 142.714 79.1104 143.583 cv
79.1104 144.453 79.8164 145.158 80.6855 145.158 cv
81.5552 145.158 82.2607 144.453 82.2607 143.583 cv
@
1 lc
80.6157 143.583 mo
80.6157 143.583 li
@
0 lc
83.4604 142.382 mo
83.4604 141.513 82.7549 140.808 81.8857 140.808 cv
81.0161 140.808 80.3105 141.513 80.3105 142.382 cv
80.3105 143.251 81.0161 143.958 81.8857 143.958 cv
82.7549 143.958 83.4604 143.251 83.4604 142.382 cv
@
1 lc
81.9155 142.333 mo
81.9155 142.333 li
@
0 lc
84.7808 138.302 mo
84.7808 137.433 84.0752 136.728 83.2056 136.728 cv
82.3364 136.728 81.6309 137.433 81.6309 138.302 cv
81.6309 139.173 82.3364 139.878 83.2056 139.878 cv
84.0752 139.878 84.7808 139.173 84.7808 138.302 cv
@
1 lc
83.2158 138.283 mo
83.2158 138.283 li
@
0 lc
85.9805 136.142 mo
85.9805 135.273 85.2749 134.568 84.4058 134.568 cv
83.5361 134.568 82.8306 135.273 82.8306 136.142 cv
82.8306 137.013 83.5361 137.718 84.4058 137.718 cv
85.2749 137.718 85.9805 137.013 85.9805 136.142 cv
@
1 lc
84.4155 136.132 mo
84.4155 136.132 li
@
0 lc
87.0605 135.183 mo
87.0605 134.314 86.355 133.609 85.4858 133.609 cv
84.6162 133.609 83.9106 134.314 83.9106 135.183 cv
83.9106 136.052 84.6162 136.757 85.4858 136.757 cv
86.355 136.757 87.0605 136.052 87.0605 135.183 cv
@
1 lc
85.5654 135.183 mo
85.5654 135.183 li
@
0 lc
88.2607 134.943 mo
88.2607 134.074 87.5552 133.369 86.6855 133.369 cv
85.8164 133.369 85.1108 134.074 85.1108 134.943 cv
85.1108 135.812 85.8164 136.517 86.6855 136.517 cv
87.5552 136.517 88.2607 135.812 88.2607 134.943 cv
@
1 lc
86.7158 135.033 mo
86.7158 135.033 li
@
0 lc
89.4604 132.783 mo
89.4604 131.914 88.7549 131.208 87.8857 131.208 cv
87.0161 131.208 86.3105 131.914 86.3105 132.783 cv
86.3105 133.652 87.0161 134.359 87.8857 134.359 cv
88.7549 134.359 89.4604 133.652 89.4604 132.783 cv
@
1 lc
87.8154 132.833 mo
87.8154 132.833 li
@
0 lc
90.4204 132.302 mo
90.4204 131.433 89.7148 130.728 88.8457 130.728 cv
87.9761 130.728 87.2705 131.433 87.2705 132.302 cv
87.2705 133.173 87.9761 133.878 88.8457 133.878 cv
89.7148 133.878 90.4204 133.173 90.4204 132.302 cv
@
1 lc
88.8657 132.333 mo
88.8657 132.333 li
@
0 lc
91.3809 132.302 mo
91.3809 131.433 90.6748 130.728 89.8057 130.728 cv
88.936 130.728 88.2305 131.433 88.2305 132.302 cv
88.2305 133.173 88.936 133.878 89.8057 133.878 cv
90.6748 133.878 91.3809 133.173 91.3809 132.302 cv
@
1 lc
89.8657 132.283 mo
89.8657 132.283 li
@
0 lc
92.3408 132.183 mo
92.3408 131.314 91.6348 130.609 90.7656 130.609 cv
89.8965 130.609 89.1904 131.314 89.1904 132.183 cv
89.1904 133.052 89.8965 133.757 90.7656 133.757 cv
91.6348 133.757 92.3408 133.052 92.3408 132.183 cv
@
1 lc
90.8657 132.183 mo
90.8657 132.183 li
@
0 lc
93.5405 130.623 mo
93.5405 129.753 92.835 129.048 91.9658 129.048 cv
91.0962 129.048 90.3906 129.753 90.3906 130.623 cv
90.3906 131.492 91.0962 132.199 91.9658 132.199 cv
92.835 132.199 93.5405 131.492 93.5405 130.623 cv
@
1 lc
91.8657 130.683 mo
91.8657 130.683 li
@
0 lc
94.3809 130.382 mo
94.3809 129.513 93.6748 128.808 92.8057 128.808 cv
91.936 128.808 91.2305 129.513 91.2305 130.382 cv
91.2305 131.251 91.936 131.958 92.8057 131.958 cv
93.6748 131.958 94.3809 131.251 94.3809 130.382 cv
@
1 lc
92.8154 130.382 mo
92.8154 130.382 li
@
0 lc
95.2207 129.904 mo
95.2207 129.033 94.5151 128.328 93.6455 128.328 cv
92.7764 128.328 92.0708 129.033 92.0708 129.904 cv
92.0708 130.773 92.7764 131.478 93.6455 131.478 cv
94.5151 131.478 95.2207 130.773 95.2207 129.904 cv
@
1 lc
93.7158 129.933 mo
93.7158 129.933 li
@
0 lc
96.1807 128.943 mo
96.1807 128.074 95.4751 127.369 94.6055 127.369 cv
93.7363 127.369 93.0308 128.074 93.0308 128.943 cv
93.0308 129.812 93.7363 130.517 94.6055 130.517 cv
95.4751 130.517 96.1807 129.812 96.1807 128.943 cv
@
1 lc
94.6157 128.933 mo
94.6157 128.933 li
@
0 lc
97.1406 128.943 mo
97.1406 128.074 96.4351 127.369 95.5654 127.369 cv
94.6963 127.369 93.9907 128.074 93.9907 128.943 cv
93.9907 129.812 94.6963 130.517 95.5654 130.517 cv
96.4351 130.517 97.1406 129.812 97.1406 128.943 cv
@
1 lc
95.4658 128.882 mo
95.4658 128.882 li
@
0 lc
97.8608 127.984 mo
97.8608 127.113 97.1553 126.408 96.2856 126.408 cv
95.416 126.408 94.7104 127.113 94.7104 127.984 cv
94.7104 128.853 95.416 129.558 96.2856 129.558 cv
97.1553 129.558 97.8608 128.853 97.8608 127.984 cv
@
1 lc
96.3154 127.984 mo
96.3154 127.984 li
@
0 lc
98.8208 127.503 mo
98.8208 126.634 98.1152 125.927 97.2456 125.927 cv
96.376 125.927 95.6704 126.634 95.6704 127.503 cv
95.6704 128.373 96.376 129.078 97.2456 129.078 cv
98.1152 129.078 98.8208 128.373 98.8208 127.503 cv
@
1 lc
97.1655 127.433 mo
97.1655 127.433 li
@
0 lc
99.5405 127.382 mo
99.5405 126.513 98.835 125.808 97.9658 125.808 cv
97.0962 125.808 96.3906 126.513 96.3906 127.382 cv
96.3906 128.251 97.0962 128.958 97.9658 128.958 cv
98.835 128.958 99.5405 128.251 99.5405 127.382 cv
@
1 lc
98.0156 127.382 mo
98.0156 127.382 li
@
0 lc
100.381 126.783 mo
100.381 125.914 99.6748 125.208 98.8057 125.208 cv
97.936 125.208 97.2305 125.914 97.2305 126.783 cv
97.2305 127.652 97.936 128.359 98.8057 128.359 cv
99.6748 128.359 100.381 127.652 100.381 126.783 cv
@
1 lc
98.8154 126.734 mo
98.8154 126.734 li
@
0 lc
101.221 126.302 mo
101.221 125.433 100.515 124.728 99.6455 124.728 cv
98.7764 124.728 98.0708 125.433 98.0708 126.302 cv
98.0708 127.173 98.7764 127.878 99.6455 127.878 cv
100.515 127.878 101.221 127.173 101.221 126.302 cv
@
1 lc
99.5654 126.283 mo
99.5654 126.283 li
@
0 lc
101.94 124.623 mo
101.94 123.753 101.235 123.048 100.366 123.048 cv
99.4961 123.048 98.7905 123.753 98.7905 124.623 cv
98.7905 125.492 99.4961 126.199 100.366 126.199 cv
101.235 126.199 101.94 125.492 101.94 124.623 cv
@
1 lc
100.366 124.683 mo
100.366 124.683 li
@
0 lc
102.661 124.142 mo
102.661 123.273 101.955 122.568 101.085 122.568 cv
100.216 122.568 99.5107 123.273 99.5107 124.142 cv
99.5107 125.013 100.216 125.718 101.085 125.718 cv
101.955 125.718 102.661 125.013 102.661 124.142 cv
@
1 lc
101.116 124.083 mo
101.116 124.083 li
@
0 lc
103.381 123.664 mo
103.381 122.794 102.675 122.087 101.806 122.087 cv
100.936 122.087 100.23 122.794 100.23 123.664 cv
100.23 124.533 100.936 125.238 101.806 125.238 cv
102.675 125.238 103.381 124.533 103.381 123.664 cv
@
1 lc
101.866 123.683 mo
101.866 123.683 li
@
0 lc
104.101 123.423 mo
104.101 122.554 103.395 121.847 102.525 121.847 cv
101.656 121.847 100.951 122.554 100.951 123.423 cv
100.951 124.292 101.656 124.998 102.525 124.998 cv
103.395 124.998 104.101 124.292 104.101 123.423 cv
@
1 lc
102.616 123.433 mo
102.616 123.433 li
@
0 lc
104.821 122.703 mo
104.821 121.833 104.115 121.128 103.246 121.128 cv
102.376 121.128 101.67 121.833 101.67 122.703 cv
101.67 123.572 102.376 124.279 103.246 124.279 cv
104.115 124.279 104.821 123.572 104.821 122.703 cv
@
1 lc
103.315 122.783 mo
103.315 122.783 li
@
0 lc
105.541 122.703 mo
105.541 121.833 104.835 121.128 103.966 121.128 cv
103.096 121.128 102.391 121.833 102.391 122.703 cv
102.391 123.572 103.096 124.279 103.966 124.279 cv
104.835 124.279 105.541 123.572 105.541 122.703 cv
@
1 lc
104.065 122.734 mo
104.065 122.734 li
@
0 lc
106.261 122.583 mo
106.261 121.714 105.555 121.007 104.686 121.007 cv
103.816 121.007 103.111 121.714 103.111 122.583 cv
103.111 123.453 103.816 124.158 104.686 124.158 cv
105.555 124.158 106.261 123.453 106.261 122.583 cv
@
1 lc
104.766 122.583 mo
104.766 122.583 li
@
0 lc
106.98 122.462 mo
106.98 121.593 106.275 120.888 105.406 120.888 cv
104.536 120.888 103.831 121.593 103.831 122.462 cv
103.831 123.332 104.536 124.039 105.406 124.039 cv
106.275 124.039 106.98 123.332 106.98 122.462 cv
@
1 lc
105.466 122.433 mo
105.466 122.433 li
@
0 lc
107.701 121.984 mo
107.701 121.113 106.995 120.408 106.125 120.408 cv
105.256 120.408 104.551 121.113 104.551 121.984 cv
104.551 122.853 105.256 123.558 106.125 123.558 cv
106.995 123.558 107.701 122.853 107.701 121.984 cv
@
1 lc
106.116 121.882 mo
106.116 121.882 li
@
0 lc
108.42 121.623 mo
108.42 120.753 107.715 120.048 106.846 120.048 cv
105.976 120.048 105.271 120.753 105.271 121.623 cv
105.271 122.492 105.976 123.199 106.846 123.199 cv
107.715 123.199 108.42 122.492 108.42 121.623 cv
@
1 lc
106.815 121.632 mo
106.815 121.632 li
@
0 lc
109.141 121.503 mo
109.141 120.634 108.435 119.927 107.565 119.927 cv
106.696 119.927 105.991 120.634 105.991 121.503 cv
105.991 122.373 106.696 123.078 107.565 123.078 cv
108.435 123.078 109.141 122.373 109.141 121.503 cv
@
1 lc
107.466 121.583 mo
107.466 121.583 li
@
0 lc
109.741 121.263 mo
109.741 120.394 109.035 119.689 108.166 119.689 cv
107.296 119.689 106.591 120.394 106.591 121.263 cv
106.591 122.132 107.296 122.837 108.166 122.837 cv
109.035 122.837 109.741 122.132 109.741 121.263 cv
@
1 lc
108.166 121.183 mo
108.166 121.183 li
@
0 lc
110.341 121.023 mo
110.341 120.154 109.635 119.449 108.766 119.449 cv
107.896 119.449 107.19 120.154 107.19 121.023 cv
107.19 121.892 107.896 122.597 108.766 122.597 cv
109.635 122.597 110.341 121.892 110.341 121.023 cv
@
1 lc
108.815 120.933 mo
108.815 120.933 li
@
0 lc
111.061 120.542 mo
111.061 119.673 110.355 118.968 109.486 118.968 cv
108.616 118.968 107.911 119.673 107.911 120.542 cv
107.911 121.412 108.616 122.119 109.486 122.119 cv
110.355 122.119 111.061 121.412 111.061 120.542 cv
@
1 lc
109.416 120.533 mo
109.416 120.533 li
@
0 lc
111.541 120.542 mo
111.541 119.673 110.835 118.968 109.966 118.968 cv
109.096 118.968 108.391 119.673 108.391 120.542 cv
108.391 121.412 109.096 122.119 109.966 122.119 cv
110.835 122.119 111.541 121.412 111.541 120.542 cv
@
1 lc
110.065 120.484 mo
110.065 120.484 li
@
0 lc
112.261 120.302 mo
112.261 119.433 111.555 118.728 110.686 118.728 cv
109.816 118.728 109.111 119.433 109.111 120.302 cv
109.111 121.173 109.816 121.878 110.686 121.878 cv
111.555 121.878 112.261 121.173 112.261 120.302 cv
@
1 lc
110.716 120.283 mo
110.716 120.283 li
@
0 lc
112.98 120.064 mo
112.98 119.193 112.275 118.488 111.406 118.488 cv
110.536 118.488 109.831 119.193 109.831 120.064 cv
109.831 120.933 110.536 121.638 111.406 121.638 cv
112.275 121.638 112.98 120.933 112.98 120.064 cv
@
1 lc
111.315 119.984 mo
111.315 119.984 li
@
0 lc
113.46 119.824 mo
113.46 118.953 112.755 118.248 111.886 118.248 cv
111.016 118.248 110.311 118.953 110.311 119.824 cv
110.311 120.693 111.016 121.398 111.886 121.398 cv
112.755 121.398 113.46 120.693 113.46 119.824 cv
@
1 lc
111.966 119.833 mo
111.966 119.833 li
@
0 lc
114.181 118.382 mo
114.181 117.513 113.475 116.808 112.605 116.808 cv
111.736 116.808 111.031 117.513 111.031 118.382 cv
111.031 119.251 111.736 119.958 112.605 119.958 cv
113.475 119.958 114.181 119.251 114.181 118.382 cv
@
1 lc
112.565 118.484 mo
112.565 118.484 li
@
0 lc
114.661 118.142 mo
114.661 117.273 113.955 116.568 113.085 116.568 cv
112.216 116.568 111.511 117.273 111.511 118.142 cv
111.511 119.013 112.216 119.718 113.085 119.718 cv
113.955 119.718 114.661 119.013 114.661 118.142 cv
@
1 lc
113.166 118.234 mo
113.166 118.234 li
@
0 lc
115.381 118.142 mo
115.381 117.273 114.675 116.568 113.806 116.568 cv
112.936 116.568 112.23 117.273 112.23 118.142 cv
112.23 119.013 112.936 119.718 113.806 119.718 cv
114.675 119.718 115.381 119.013 115.381 118.142 cv
@
1 lc
113.766 118.132 mo
113.766 118.132 li
@
0 lc
115.861 117.904 mo
115.861 117.033 115.155 116.328 114.286 116.328 cv
113.416 116.328 112.71 117.033 112.71 117.904 cv
112.71 118.773 113.416 119.478 114.286 119.478 cv
115.155 119.478 115.861 118.773 115.861 117.904 cv
@
1 lc
114.366 117.984 mo
114.366 117.984 li
@
0 lc
116.581 117.423 mo
116.581 116.554 115.875 115.847 115.006 115.847 cv
114.136 115.847 113.431 116.554 113.431 117.423 cv
113.431 118.292 114.136 118.998 115.006 118.998 cv
115.875 118.998 116.581 118.292 116.581 117.423 cv
@
1 lc
114.966 117.333 mo
114.966 117.333 li
@
0 lc
117.061 116.462 mo
117.061 115.593 116.355 114.888 115.486 114.888 cv
114.616 114.888 113.911 115.593 113.911 116.462 cv
113.911 117.332 114.616 118.039 115.486 118.039 cv
116.355 118.039 117.061 117.332 117.061 116.462 cv
@
1 lc
115.565 116.382 mo
115.565 116.382 li
@
0 lc
117.781 115.142 mo
117.781 114.273 117.075 113.568 116.206 113.568 cv
115.336 113.568 114.631 114.273 114.631 115.142 cv
114.631 116.013 115.336 116.718 116.206 116.718 cv
117.075 116.718 117.781 116.013 117.781 115.142 cv
@
1 lc
116.116 115.132 mo
116.116 115.132 li
@
0 lc
118.261 114.064 mo
118.261 113.193 117.555 112.488 116.686 112.488 cv
115.816 112.488 115.111 113.193 115.111 114.064 cv
115.111 114.933 115.816 115.638 116.686 115.638 cv
117.555 115.638 118.261 114.933 118.261 114.064 cv
@
1 lc
116.716 114.132 mo
116.716 114.132 li
@
0 lc
118.741 113.824 mo
118.741 112.953 118.035 112.248 117.166 112.248 cv
116.296 112.248 115.591 112.953 115.591 113.824 cv
115.591 114.693 116.296 115.398 117.166 115.398 cv
118.035 115.398 118.741 114.693 118.741 113.824 cv
@
1 lc
117.266 113.783 mo
117.266 113.783 li
@
0 lc
119.46 112.023 mo
119.46 111.154 118.755 110.449 117.886 110.449 cv
117.016 110.449 116.311 111.154 116.311 112.023 cv
116.311 112.892 117.016 113.597 117.886 113.597 cv
118.755 113.597 119.46 112.892 119.46 112.023 cv
@
1 lc
117.866 112.033 mo
117.866 112.033 li
@
0 lc
119.94 110.943 mo
119.94 110.074 119.235 109.369 118.366 109.369 cv
117.496 109.369 116.791 110.074 116.791 110.943 cv
116.791 111.812 117.496 112.517 118.366 112.517 cv
119.235 112.517 119.94 111.812 119.94 110.943 cv
@
1 lc
118.416 110.984 mo
118.416 110.984 li
@
0 lc
120.541 110.943 mo
120.541 110.074 119.835 109.369 118.966 109.369 cv
118.096 109.369 117.391 110.074 117.391 110.943 cv
117.391 111.812 118.096 112.517 118.966 112.517 cv
119.835 112.517 120.541 111.812 120.541 110.943 cv
@
1 lc
118.966 110.933 mo
118.966 110.933 li
@
0 lc
121.141 110.824 mo
121.141 109.953 120.435 109.248 119.565 109.248 cv
118.696 109.248 117.991 109.953 117.991 110.824 cv
117.991 111.693 118.696 112.398 119.565 112.398 cv
120.435 112.398 121.141 111.693 121.141 110.824 cv
@
1 lc
119.516 110.833 mo
119.516 110.833 li
@
0 lc
121.621 110.703 mo
121.621 109.833 120.915 109.128 120.045 109.128 cv
119.176 109.128 118.471 109.833 118.471 110.703 cv
118.471 111.572 119.176 112.279 120.045 112.279 cv
120.915 112.279 121.621 111.572 121.621 110.703 cv
@
1 lc
120.065 110.783 mo
120.065 110.783 li
@
0 lc
122.101 110.703 mo
122.101 109.833 121.395 109.128 120.525 109.128 cv
119.656 109.128 118.951 109.833 118.951 110.703 cv
118.951 111.572 119.656 112.279 120.525 112.279 cv
121.395 112.279 122.101 111.572 122.101 110.703 cv
@
1 lc
120.616 110.683 mo
120.616 110.683 li
@
0 lc
122.821 109.263 mo
122.821 108.394 122.115 107.689 121.246 107.689 cv
120.376 107.689 119.67 108.394 119.67 109.263 cv
119.67 110.132 120.376 110.837 121.246 110.837 cv
122.115 110.837 122.821 110.132 122.821 109.263 cv
@
1 lc
121.166 109.234 mo
121.166 109.234 li
@
0 lc
123.301 108.302 mo
123.301 107.433 122.595 106.728 121.726 106.728 cv
120.856 106.728 120.15 107.433 120.15 108.302 cv
120.15 109.173 120.856 109.878 121.726 109.878 cv
122.595 109.878 123.301 109.173 123.301 108.302 cv
@
1 lc
121.716 108.234 mo
121.716 108.234 li
@
0 lc
123.781 108.302 mo
123.781 107.433 123.075 106.728 122.206 106.728 cv
121.336 106.728 120.631 107.433 120.631 108.302 cv
120.631 109.173 121.336 109.878 122.206 109.878 cv
123.075 109.878 123.781 109.173 123.781 108.302 cv
@
1 lc
122.266 108.234 mo
122.266 108.234 li
@
0 lc
124.381 107.583 mo
124.381 106.714 123.675 106.007 122.806 106.007 cv
121.936 106.007 121.23 106.714 121.23 107.583 cv
121.23 108.453 121.936 109.158 122.806 109.158 cv
123.675 109.158 124.381 108.453 124.381 107.583 cv
@
1 lc
122.815 107.683 mo
122.815 107.683 li
@
0 lc
124.98 107.343 mo
124.98 106.474 124.275 105.767 123.406 105.767 cv
122.536 105.767 121.831 106.474 121.831 107.343 cv
121.831 108.212 122.536 108.917 123.406 108.917 cv
124.275 108.917 124.98 108.212 124.98 107.343 cv
@
1 lc
123.366 107.283 mo
123.366 107.283 li
@
0 lc
125.46 107.103 mo
125.46 106.234 124.755 105.529 123.886 105.529 cv
123.016 105.529 122.311 106.234 122.311 107.103 cv
122.311 107.972 123.016 108.677 123.886 108.677 cv
124.755 108.677 125.46 107.972 125.46 107.103 cv
@
1 lc
123.866 107.033 mo
123.866 107.033 li
@
0 lc
125.94 106.863 mo
125.94 105.994 125.235 105.289 124.366 105.289 cv
123.496 105.289 122.791 105.994 122.791 106.863 cv
122.791 107.732 123.496 108.439 124.366 108.439 cv
125.235 108.439 125.94 107.732 125.94 106.863 cv
@
1 lc
124.416 106.833 mo
124.416 106.833 li
@
0 lc
126.541 106.623 mo
126.541 105.753 125.835 105.048 124.966 105.048 cv
124.096 105.048 123.391 105.753 123.391 106.623 cv
123.391 107.492 124.096 108.199 124.966 108.199 cv
125.835 108.199 126.541 107.492 126.541 106.623 cv
@
1 lc
124.966 106.583 mo
124.966 106.583 li
@
0 lc
127.141 106.382 mo
127.141 105.513 126.435 104.808 125.565 104.808 cv
124.696 104.808 123.991 105.513 123.991 106.382 cv
123.991 107.251 124.696 107.958 125.565 107.958 cv
126.435 107.958 127.141 107.251 127.141 106.382 cv
@
1 lc
125.466 106.433 mo
125.466 106.433 li
@
0 lc
127.621 106.382 mo
127.621 105.513 126.915 104.808 126.045 104.808 cv
125.176 104.808 124.471 105.513 124.471 106.382 cv
124.471 107.251 125.176 107.958 126.045 107.958 cv
126.915 107.958 127.621 107.251 127.621 106.382 cv
@
1 lc
126.016 106.433 mo
126.016 106.433 li
@
0 lc
128.101 105.904 mo
128.101 105.033 127.395 104.328 126.525 104.328 cv
125.656 104.328 124.951 105.033 124.951 105.904 cv
124.951 106.773 125.656 107.478 126.525 107.478 cv
127.395 107.478 128.101 106.773 128.101 105.904 cv
@
1 lc
126.516 105.984 mo
126.516 105.984 li
@
0 lc
128.581 105.904 mo
128.581 105.033 127.875 104.328 127.006 104.328 cv
126.136 104.328 125.431 105.033 125.431 105.904 cv
125.431 106.773 126.136 107.478 127.006 107.478 cv
127.875 107.478 128.581 106.773 128.581 105.904 cv
@
1 lc
127.065 105.882 mo
127.065 105.882 li
@
0 lc
129.061 105.783 mo
129.061 104.914 128.355 104.208 127.486 104.208 cv
126.616 104.208 125.911 104.914 125.911 105.783 cv
125.911 106.652 126.616 107.359 127.486 107.359 cv
128.355 107.359 129.061 106.652 129.061 105.783 cv
@
1 lc
127.565 105.783 mo
127.565 105.783 li
@
0 lc
129.541 105.423 mo
129.541 104.554 128.835 103.847 127.966 103.847 cv
127.096 103.847 126.391 104.554 126.391 105.423 cv
126.391 106.292 127.096 106.998 127.966 106.998 cv
128.835 106.998 129.541 106.292 129.541 105.423 cv
@
1 lc
128.065 105.382 mo
128.065 105.382 li
@
0 lc
130.261 104.222 mo
130.261 103.353 129.555 102.648 128.686 102.648 cv
127.816 102.648 127.111 103.353 127.111 104.222 cv
127.111 105.093 127.816 105.798 128.686 105.798 cv
129.555 105.798 130.261 105.093 130.261 104.222 cv
@
1 lc
128.616 104.234 mo
128.616 104.234 li
@
0 lc
130.74 103.503 mo
130.74 102.634 130.035 101.927 129.166 101.927 cv
128.296 101.927 127.591 102.634 127.591 103.503 cv
127.591 104.373 128.296 105.078 129.166 105.078 cv
130.035 105.078 130.74 104.373 130.74 103.503 cv
@
1 lc
129.116 103.533 mo
129.116 103.533 li
@
0 lc
131.221 103.142 mo
131.221 102.273 130.515 101.568 129.646 101.568 cv
128.776 101.568 128.071 102.273 128.071 103.142 cv
128.071 104.013 128.776 104.718 129.646 104.718 cv
130.515 104.718 131.221 104.013 131.221 103.142 cv
@
1 lc
129.616 103.132 mo
129.616 103.132 li
@
0 lc
131.7 102.542 mo
131.7 101.673 130.995 100.968 130.126 100.968 cv
129.256 100.968 128.551 101.673 128.551 102.542 cv
128.551 103.412 129.256 104.119 130.126 104.119 cv
130.995 104.119 131.7 103.412 131.7 102.542 cv
@
1 lc
130.166 102.533 mo
130.166 102.533 li
@
0 lc
132.181 102.302 mo
132.181 101.433 131.475 100.728 130.605 100.728 cv
129.736 100.728 129.031 101.433 129.031 102.302 cv
129.031 103.173 129.736 103.878 130.605 103.878 cv
131.475 103.878 132.181 103.173 132.181 102.302 cv
@
1 lc
130.666 102.333 mo
130.666 102.333 li
@
0 lc
132.66 101.583 mo
132.66 100.713 131.955 100.008 131.086 100.008 cv
130.216 100.008 129.511 100.713 129.511 101.583 cv
129.511 102.453 130.216 103.158 131.086 103.158 cv
131.955 103.158 132.66 102.453 132.66 101.583 cv
@
1 lc
131.166 101.683 mo
131.166 101.683 li
@
0 lc
133.141 101.343 mo
133.141 100.474 132.435 99.7681 131.565 99.7681 cv
130.696 99.7681 129.99 100.474 129.99 101.343 cv
129.99 102.212 130.696 102.917 131.565 102.917 cv
132.435 102.917 133.141 102.212 133.141 101.343 cv
@
1 lc
131.666 101.283 mo
131.666 101.283 li
@
0 lc
133.74 101.223 mo
133.74 100.354 133.035 99.6479 132.166 99.6479 cv
131.296 99.6479 130.591 100.354 130.591 101.223 cv
130.591 102.093 131.296 102.798 132.166 102.798 cv
133.035 102.798 133.74 102.093 133.74 101.223 cv
@
1 lc
132.166 101.233 mo
132.166 101.233 li
@
0 lc
134.341 101.223 mo
134.341 100.354 133.635 99.6479 132.766 99.6479 cv
131.896 99.6479 131.19 100.354 131.19 101.223 cv
131.19 102.093 131.896 102.798 132.766 102.798 cv
133.635 102.798 134.341 102.093 134.341 101.223 cv
@
1 lc
132.716 101.233 mo
132.716 101.233 li
@
0 lc
134.82 101.103 mo
134.82 100.233 134.115 99.5278 133.246 99.5278 cv
132.376 99.5278 131.671 100.233 131.671 101.103 cv
131.671 101.972 132.376 102.677 133.246 102.677 cv
134.115 102.677 134.82 101.972 134.82 101.103 cv
@
1 lc
133.216 101.083 mo
133.216 101.083 li
@
0 lc
135.301 100.863 mo
135.301 99.9937 134.595 99.2881 133.726 99.2881 cv
132.856 99.2881 132.15 99.9937 132.15 100.863 cv
132.15 101.732 132.856 102.439 133.726 102.439 cv
134.595 102.439 135.301 101.732 135.301 100.863 cv
@
1 lc
133.716 100.833 mo
133.716 100.833 li
@
0 lc
135.78 100.623 mo
135.78 99.7534 135.075 99.0479 134.206 99.0479 cv
133.336 99.0479 132.631 99.7534 132.631 100.623 cv
132.631 101.492 133.336 102.199 134.206 102.199 cv
135.075 102.199 135.78 101.492 135.78 100.623 cv
@
1 lc
134.216 100.683 mo
134.216 100.683 li
@
0 lc
136.261 100.623 mo
136.261 99.7534 135.555 99.0479 134.686 99.0479 cv
133.816 99.0479 133.11 99.7534 133.11 100.623 cv
133.11 101.492 133.816 102.199 134.686 102.199 cv
135.555 102.199 136.261 101.492 136.261 100.623 cv
@
1 lc
134.716 100.583 mo
134.716 100.583 li
@
0 lc
136.74 99.9028 mo
136.74 99.0337 136.035 98.3281 135.166 98.3281 cv
134.296 98.3281 133.591 99.0337 133.591 99.9028 cv
133.591 100.772 134.296 101.478 135.166 101.478 cv
136.035 101.478 136.74 100.772 136.74 99.9028 cv
@
1 lc
135.216 99.9331 mo
135.216 99.9331 li
@
0 lc
137.221 98.9429 mo
137.221 98.0737 136.515 97.3682 135.646 97.3682 cv
134.776 97.3682 134.07 98.0737 134.07 98.9429 cv
134.07 99.8125 134.776 100.518 135.646 100.518 cv
136.515 100.518 137.221 99.8125 137.221 98.9429 cv
@
1 lc
135.716 98.9331 mo
135.716 98.9331 li
@
0 lc
137.7 98.2231 mo
137.7 97.3535 136.995 96.6479 136.126 96.6479 cv
135.256 96.6479 134.551 97.3535 134.551 98.2231 cv
134.551 99.0923 135.256 99.7979 136.126 99.7979 cv
136.995 99.7979 137.7 99.0923 137.7 98.2231 cv
@
1 lc
136.216 98.1831 mo
136.216 98.1831 li
@
0 lc
138.301 97.7432 mo
138.301 96.8735 137.595 96.168 136.726 96.168 cv
135.856 96.168 135.15 96.8735 135.15 97.7432 cv
135.15 98.6123 135.856 99.3179 136.726 99.3179 cv
137.595 99.3179 138.301 98.6123 138.301 97.7432 cv
@
1 lc
136.716 97.7832 mo
136.716 97.7832 li
@
0 lc
138.78 97.623 mo
138.78 96.7534 138.075 96.0479 137.206 96.0479 cv
136.336 96.0479 135.631 96.7534 135.631 97.623 cv
135.631 98.4922 136.336 99.1982 137.206 99.1982 cv
138.075 99.1982 138.78 98.4922 138.78 97.623 cv
@
1 lc
137.216 97.6328 mo
137.216 97.6328 li
@
0 lc
139.381 97.5029 mo
139.381 96.6338 138.675 95.9277 137.806 95.9277 cv
136.937 95.9277 136.23 96.6338 136.23 97.5029 cv
136.23 98.3726 136.937 99.0781 137.806 99.0781 cv
138.675 99.0781 139.381 98.3726 139.381 97.5029 cv
@
1 lc
137.766 97.583 mo
137.766 97.583 li
@
0 lc
139.86 97.5029 mo
139.86 96.6338 139.155 95.9277 138.285 95.9277 cv
137.416 95.9277 136.711 96.6338 136.711 97.5029 cv
136.711 98.3726 137.416 99.0781 138.285 99.0781 cv
139.155 99.0781 139.86 98.3726 139.86 97.5029 cv
@
1 lc
138.266 97.583 mo
138.266 97.583 li
@
0 lc
140.341 97.5029 mo
140.341 96.6338 139.635 95.9277 138.766 95.9277 cv
137.896 95.9277 137.19 96.6338 137.19 97.5029 cv
137.19 98.3726 137.896 99.0781 138.766 99.0781 cv
139.635 99.0781 140.341 98.3726 140.341 97.5029 cv
@
1 lc
138.766 97.4829 mo
138.766 97.4829 li
@
0 lc
140.82 97.3828 mo
140.82 96.5137 140.115 95.8081 139.246 95.8081 cv
138.376 95.8081 137.671 96.5137 137.671 97.3828 cv
137.671 98.2524 138.376 98.958 139.246 98.958 cv
140.115 98.958 140.82 98.2524 140.82 97.3828 cv
@
1 lc
139.266 97.3828 mo
139.266 97.3828 li
@
0 lc
141.301 96.7832 mo
141.301 95.9136 140.595 95.208 139.726 95.208 cv
138.856 95.208 138.15 95.9136 138.15 96.7832 cv
138.15 97.6523 138.856 98.3579 139.726 98.3579 cv
140.595 98.3579 141.301 97.6523 141.301 96.7832 cv
@
1 lc
139.766 96.7832 mo
139.766 96.7832 li
@
0 lc
141.78 95.8232 mo
141.78 94.9536 141.075 94.248 140.206 94.248 cv
139.336 94.248 138.631 94.9536 138.631 95.8232 cv
138.631 96.6924 139.336 97.3979 140.206 97.3979 cv
141.075 97.3979 141.78 96.6924 141.78 95.8232 cv
@
1 lc
140.266 95.833 mo
140.266 95.833 li
@
0 lc
142.261 94.623 mo
142.261 93.7534 141.555 93.0479 140.686 93.0479 cv
139.816 93.0479 139.11 93.7534 139.11 94.623 cv
139.11 95.4922 139.816 96.1982 140.686 96.1982 cv
141.555 96.1982 142.261 95.4922 142.261 94.623 cv
@
1 lc
140.766 94.6328 mo
140.766 94.6328 li
@
0 lc
142.74 94.3828 mo
142.74 93.5137 142.035 92.8081 141.166 92.8081 cv
140.296 92.8081 139.591 93.5137 139.591 94.3828 cv
139.591 95.2524 140.296 95.958 141.166 95.958 cv
142.035 95.958 142.74 95.2524 142.74 94.3828 cv
@
1 lc
141.266 94.4331 mo
141.266 94.4331 li
@
0 lc
143.341 94.3828 mo
143.341 93.5137 142.635 92.8081 141.766 92.8081 cv
140.896 92.8081 140.19 93.5137 140.19 94.3828 cv
140.19 95.2524 140.896 95.958 141.766 95.958 cv
142.635 95.958 143.341 95.2524 143.341 94.3828 cv
@
1 lc
141.766 94.333 mo
141.766 94.333 li
@
0 lc
143.94 93.6631 mo
143.94 92.7935 143.235 92.0879 142.365 92.0879 cv
141.496 92.0879 140.791 92.7935 140.791 93.6631 cv
140.791 94.5322 141.496 95.2378 142.365 95.2378 cv
143.235 95.2378 143.94 94.5322 143.94 93.6631 cv
@
1 lc
142.266 93.7329 mo
142.266 93.7329 li
@
0 lc
144.421 93.543 mo
144.421 92.6738 143.715 91.9678 142.846 91.9678 cv
141.977 91.9678 141.271 92.6738 141.271 93.543 cv
141.271 94.4126 141.977 95.1182 142.846 95.1182 cv
143.715 95.1182 144.421 94.4126 144.421 93.543 cv
@
1 lc
142.815 93.5332 mo
142.815 93.5332 li
@
0 lc
144.9 93.1831 mo
144.9 92.3135 144.195 91.6079 143.325 91.6079 cv
142.456 91.6079 141.751 92.3135 141.751 93.1831 cv
141.751 94.0522 142.456 94.7578 143.325 94.7578 cv
144.195 94.7578 144.9 94.0522 144.9 93.1831 cv
@
1 lc
143.315 93.083 mo
143.315 93.083 li
@
0 lc
145.381 92.9429 mo
145.381 92.0737 144.675 91.3682 143.806 91.3682 cv
142.937 91.3682 142.23 92.0737 142.23 92.9429 cv
142.23 93.8125 142.937 94.5181 143.806 94.5181 cv
144.675 94.5181 145.381 93.8125 145.381 92.9429 cv
@
1 lc
143.815 93.0332 mo
143.815 93.0332 li
@
0 lc
145.86 92.7031 mo
145.86 91.8335 145.155 91.1279 144.285 91.1279 cv
143.416 91.1279 142.711 91.8335 142.711 92.7031 cv
142.711 93.5723 143.416 94.2778 144.285 94.2778 cv
145.155 94.2778 145.86 93.5723 145.86 92.7031 cv
@
1 lc
144.315 92.7832 mo
144.315 92.7832 li
@
0 lc
146.341 92.7031 mo
146.341 91.8335 145.635 91.1279 144.766 91.1279 cv
143.896 91.1279 143.19 91.8335 143.19 92.7031 cv
143.19 93.5723 143.896 94.2778 144.766 94.2778 cv
145.635 94.2778 146.341 93.5723 146.341 92.7031 cv
@
1 lc
144.815 92.6831 mo
144.815 92.6831 li
@
0 lc
146.94 92.7031 mo
146.94 91.8335 146.235 91.1279 145.365 91.1279 cv
144.496 91.1279 143.791 91.8335 143.791 92.7031 cv
143.791 93.5723 144.496 94.2778 145.365 94.2778 cv
146.235 94.2778 146.94 93.5723 146.94 92.7031 cv
@
1 lc
145.365 92.6328 mo
145.365 92.6328 li
@
0 lc
147.541 92.2231 mo
147.541 91.3535 146.835 90.6479 145.966 90.6479 cv
145.097 90.6479 144.391 91.3535 144.391 92.2231 cv
144.391 93.0923 145.097 93.7979 145.966 93.7979 cv
146.835 93.7979 147.541 93.0923 147.541 92.2231 cv
@
1 lc
145.865 92.1831 mo
145.865 92.1831 li
@
0 lc
148.021 92.2231 mo
148.021 91.3535 147.315 90.6479 146.445 90.6479 cv
145.576 90.6479 144.871 91.3535 144.871 92.2231 cv
144.871 93.0923 145.576 93.7979 146.445 93.7979 cv
147.315 93.7979 148.021 93.0923 148.021 92.2231 cv
@
1 lc
146.365 92.1328 mo
146.365 92.1328 li
@
0 lc
148.501 91.9829 mo
148.501 91.1138 147.795 90.4082 146.926 90.4082 cv
146.057 90.4082 145.351 91.1138 145.351 91.9829 cv
145.351 92.8525 146.057 93.5581 146.926 93.5581 cv
147.795 93.5581 148.501 92.8525 148.501 91.9829 cv
@
1 lc
146.916 91.9829 mo
146.916 91.9829 li
@
0 lc
148.98 91.2632 mo
148.98 90.3936 148.275 89.688 147.405 89.688 cv
146.536 89.688 145.831 90.3936 145.831 91.2632 cv
145.831 92.1323 146.536 92.8379 147.405 92.8379 cv
148.275 92.8379 148.98 92.1323 148.98 91.2632 cv
@
1 lc
147.416 91.2329 mo
147.416 91.2329 li
@
0 lc
149.461 91.0229 mo
149.461 90.1533 148.755 89.4482 147.886 89.4482 cv
147.017 89.4482 146.311 90.1533 146.311 91.0229 cv
146.311 91.8926 147.017 92.5981 147.886 92.5981 cv
148.755 92.5981 149.461 91.8926 149.461 91.0229 cv
@
1 lc
147.916 90.9829 mo
147.916 90.9829 li
@
0 lc
149.94 90.7832 mo
149.94 89.9136 149.235 89.208 148.365 89.208 cv
147.496 89.208 146.791 89.9136 146.791 90.7832 cv
146.791 91.6523 147.496 92.3579 148.365 92.3579 cv
149.235 92.3579 149.94 91.6523 149.94 90.7832 cv
@
1 lc
148.466 90.6831 mo
148.466 90.6831 li
@
0 lc
150.541 90.3027 mo
150.541 89.4336 149.835 88.728 148.966 88.728 cv
148.097 88.728 147.391 89.4336 147.391 90.3027 cv
147.391 91.1724 148.097 91.8779 148.966 91.8779 cv
149.835 91.8779 150.541 91.1724 150.541 90.3027 cv
@
1 lc
148.966 90.3828 mo
148.966 90.3828 li
@
0 lc
151.141 89.103 mo
151.141 88.2334 150.435 87.5278 149.565 87.5278 cv
148.696 87.5278 147.99 88.2334 147.99 89.103 cv
147.99 89.9722 148.696 90.6777 149.565 90.6777 cv
150.435 90.6777 151.141 89.9722 151.141 89.103 cv
@
1 lc
149.516 89.1831 mo
149.516 89.1831 li
@
0 lc
151.621 88.623 mo
151.621 87.7534 150.915 87.0479 150.046 87.0479 cv
149.176 87.0479 148.471 87.7534 148.471 88.623 cv
148.471 89.4922 149.176 90.1982 150.046 90.1982 cv
150.915 90.1982 151.621 89.4922 151.621 88.623 cv
@
1 lc
150.016 88.5332 mo
150.016 88.5332 li
@
0 lc
152.101 88.1431 mo
152.101 87.2734 151.395 86.5679 150.525 86.5679 cv
149.656 86.5679 148.95 87.2734 148.95 88.1431 cv
148.95 89.0122 149.656 89.7178 150.525 89.7178 cv
151.395 89.7178 152.101 89.0122 152.101 88.1431 cv
@
1 lc
150.565 88.1831 mo
150.565 88.1831 li
@
0 lc
152.7 88.1431 mo
152.7 87.2734 151.995 86.5679 151.126 86.5679 cv
150.256 86.5679 149.551 87.2734 149.551 88.1431 cv
149.551 89.0122 150.256 89.7178 151.126 89.7178 cv
151.995 89.7178 152.7 89.0122 152.7 88.1431 cv
@
1 lc
151.115 88.1831 mo
151.115 88.1831 li
@
0 lc
153.181 88.1431 mo
153.181 87.2734 152.475 86.5679 151.605 86.5679 cv
150.736 86.5679 150.03 87.2734 150.03 88.1431 cv
150.03 89.0122 150.736 89.7178 151.605 89.7178 cv
152.475 89.7178 153.181 89.0122 153.181 88.1431 cv
@
1 lc
151.615 88.083 mo
151.615 88.083 li
@
0 lc
153.78 86.9429 mo
153.78 86.0737 153.075 85.3682 152.206 85.3682 cv
151.336 85.3682 150.631 86.0737 150.631 86.9429 cv
150.631 87.8125 151.336 88.5181 152.206 88.5181 cv
153.075 88.5181 153.78 87.8125 153.78 86.9429 cv
@
1 lc
152.166 86.9331 mo
152.166 86.9331 li
@
0 lc
154.261 86.2231 mo
154.261 85.3535 153.555 84.6479 152.686 84.6479 cv
151.816 84.6479 151.11 85.3535 151.11 86.2231 cv
151.11 87.0923 151.816 87.7979 152.686 87.7979 cv
153.555 87.7979 154.261 87.0923 154.261 86.2231 cv
@
1 lc
152.716 86.1831 mo
152.716 86.1831 li
@
0 lc
154.74 85.7432 mo
154.74 84.8735 154.035 84.168 153.166 84.168 cv
152.296 84.168 151.591 84.8735 151.591 85.7432 cv
151.591 86.6123 152.296 87.3179 153.166 87.3179 cv
154.035 87.3179 154.74 86.6123 154.74 85.7432 cv
@
1 lc
153.266 85.833 mo
153.266 85.833 li
@
0 lc
155.461 85.623 mo
155.461 84.7534 154.755 84.0479 153.886 84.0479 cv
153.017 84.0479 152.311 84.7534 152.311 85.623 cv
152.311 86.4922 153.017 87.1982 153.886 87.1982 cv
154.755 87.1982 155.461 86.4922 155.461 85.623 cv
@
1 lc
153.815 85.6328 mo
153.815 85.6328 li
@
0 lc
155.94 84.3027 mo
155.94 83.4336 155.235 82.728 154.365 82.728 cv
153.496 82.728 152.791 83.4336 152.791 84.3027 cv
152.791 85.1724 153.496 85.8779 154.365 85.8779 cv
155.235 85.8779 155.94 85.1724 155.94 84.3027 cv
@
1 lc
154.365 84.2329 mo
154.365 84.2329 li
@
0 lc
156.421 83.103 mo
156.421 82.2334 155.715 81.5278 154.846 81.5278 cv
153.977 81.5278 153.271 82.2334 153.271 83.103 cv
153.271 83.9722 153.977 84.6777 154.846 84.6777 cv
155.715 84.6777 156.421 83.9722 156.421 83.103 cv
@
1 lc
154.916 83.083 mo
154.916 83.083 li
@
0 lc
157.141 82.623 mo
157.141 81.7534 156.435 81.0479 155.565 81.0479 cv
154.696 81.0479 153.99 81.7534 153.99 82.623 cv
153.99 83.4922 154.696 84.1982 155.565 84.1982 cv
156.435 84.1982 157.141 83.4922 157.141 82.623 cv
@
1 lc
155.466 82.6831 mo
155.466 82.6831 li
@
0 lc
157.621 82.623 mo
157.621 81.7534 156.915 81.0479 156.046 81.0479 cv
155.176 81.0479 154.471 81.7534 154.471 82.623 cv
154.471 83.4922 155.176 84.1982 156.046 84.1982 cv
156.915 84.1982 157.621 83.4922 157.621 82.623 cv
@
1 lc
156.016 82.583 mo
156.016 82.583 li
@
0 lc
158.101 81.6631 mo
158.101 80.7935 157.395 80.0879 156.525 80.0879 cv
155.656 80.0879 154.95 80.7935 154.95 81.6631 cv
154.95 82.5322 155.656 83.2378 156.525 83.2378 cv
157.395 83.2378 158.101 82.5322 158.101 81.6631 cv
@
1 lc
156.565 81.7329 mo
156.565 81.7329 li
@
0 lc
158.7 81.4229 mo
158.7 80.5537 157.995 79.8481 157.126 79.8481 cv
156.256 79.8481 155.551 80.5537 155.551 81.4229 cv
155.551 82.2925 156.256 82.998 157.126 82.998 cv
157.995 82.998 158.7 82.2925 158.7 81.4229 cv
@
1 lc
157.115 81.3828 mo
157.115 81.3828 li
@
0 lc
159.301 81.1831 mo
159.301 80.3135 158.595 79.6079 157.726 79.6079 cv
156.856 79.6079 156.15 80.3135 156.15 81.1831 cv
156.15 82.0522 156.856 82.7578 157.726 82.7578 cv
158.595 82.7578 159.301 82.0522 159.301 81.1831 cv
@
1 lc
157.716 81.2832 mo
157.716 81.2832 li
@
0 lc
159.78 80.9429 mo
159.78 80.0737 159.075 79.3682 158.206 79.3682 cv
157.336 79.3682 156.631 80.0737 156.631 80.9429 cv
156.631 81.8125 157.336 82.5181 158.206 82.5181 cv
159.075 82.5181 159.78 81.8125 159.78 80.9429 cv
@
1 lc
158.266 80.9829 mo
158.266 80.9829 li
@
0 lc
160.501 80.9429 mo
160.501 80.0737 159.795 79.3682 158.926 79.3682 cv
158.057 79.3682 157.351 80.0737 157.351 80.9429 cv
157.351 81.8125 158.057 82.5181 158.926 82.5181 cv
159.795 82.5181 160.501 81.8125 160.501 80.9429 cv
@
1 lc
158.865 80.8828 mo
158.865 80.8828 li
@
0 lc
160.98 80.7031 mo
160.98 79.8335 160.275 79.1279 159.405 79.1279 cv
158.536 79.1279 157.831 79.8335 157.831 80.7031 cv
157.831 81.5723 158.536 82.2778 159.405 82.2778 cv
160.275 82.2778 160.98 81.5723 160.98 80.7031 cv
@
1 lc
159.416 80.7832 mo
159.416 80.7832 li
@
0 lc
161.581 80.7031 mo
161.581 79.8335 160.875 79.1279 160.006 79.1279 cv
159.137 79.1279 158.431 79.8335 158.431 80.7031 cv
158.431 81.5723 159.137 82.2778 160.006 82.2778 cv
160.875 82.2778 161.581 81.5723 161.581 80.7031 cv
@
1 lc
160.016 80.7329 mo
160.016 80.7329 li
@
0 lc
162.181 79.9829 mo
162.181 79.1138 161.475 78.4082 160.605 78.4082 cv
159.736 78.4082 159.03 79.1138 159.03 79.9829 cv
159.03 80.8525 159.736 81.5581 160.605 81.5581 cv
161.475 81.5581 162.181 80.8525 162.181 79.9829 cv
@
1 lc
160.615 79.8828 mo
160.615 79.8828 li
@
0 lc
162.78 79.5029 mo
162.78 78.6338 162.075 77.9277 161.206 77.9277 cv
160.336 77.9277 159.631 78.6338 159.631 79.5029 cv
159.631 80.3726 160.336 81.0781 161.206 81.0781 cv
162.075 81.0781 162.78 80.3726 162.78 79.5029 cv
@
1 lc
161.216 79.4829 mo
161.216 79.4829 li
@
0 lc
163.381 79.2632 mo
163.381 78.3936 162.675 77.688 161.806 77.688 cv
160.937 77.688 160.23 78.3936 160.23 79.2632 cv
160.23 80.1323 160.937 80.8379 161.806 80.8379 cv
162.675 80.8379 163.381 80.1323 163.381 79.2632 cv
@
1 lc
161.815 79.2329 mo
161.815 79.2329 li
@
0 lc
163.98 78.7832 mo
163.98 77.9136 163.275 77.208 162.405 77.208 cv
161.536 77.208 160.831 77.9136 160.831 78.7832 cv
160.831 79.6523 161.536 80.3579 162.405 80.3579 cv
163.275 80.3579 163.98 79.6523 163.98 78.7832 cv
@
1 lc
162.416 78.8828 mo
162.416 78.8828 li
@
0 lc
164.581 78.543 mo
164.581 77.6738 163.875 76.9678 163.006 76.9678 cv
162.137 76.9678 161.431 77.6738 161.431 78.543 cv
161.431 79.4126 162.137 80.1182 163.006 80.1182 cv
163.875 80.1182 164.581 79.4126 164.581 78.543 cv
@
1 lc
163.016 78.583 mo
163.016 78.583 li
@
0 lc
165.301 78.3027 mo
165.301 77.4336 164.595 76.728 163.726 76.728 cv
162.856 76.728 162.15 77.4336 162.15 78.3027 cv
162.15 79.1724 162.856 79.8779 163.726 79.8779 cv
164.595 79.8779 165.301 79.1724 165.301 78.3027 cv
@
1 lc
163.666 78.2832 mo
163.666 78.2832 li
@
0 lc
165.78 76.623 mo
165.78 75.7534 165.075 75.0479 164.206 75.0479 cv
163.336 75.0479 162.631 75.7534 162.631 76.623 cv
162.631 77.4922 163.336 78.1982 164.206 78.1982 cv
165.075 78.1982 165.78 77.4922 165.78 76.623 cv
@
1 lc
164.266 76.6328 mo
164.266 76.6328 li
@
0 lc
166.501 76.623 mo
166.501 75.7534 165.795 75.0479 164.926 75.0479 cv
164.057 75.0479 163.351 75.7534 163.351 76.623 cv
163.351 77.4922 164.057 78.1982 164.926 78.1982 cv
165.795 78.1982 166.501 77.4922 166.501 76.623 cv
@
1 lc
164.916 76.583 mo
164.916 76.583 li
@
0 lc
167.221 75.4229 mo
167.221 74.5537 166.515 73.8481 165.646 73.8481 cv
164.776 73.8481 164.07 74.5537 164.07 75.4229 cv
164.07 76.2925 164.776 76.998 165.646 76.998 cv
166.515 76.998 167.221 76.2925 167.221 75.4229 cv
@
1 lc
165.565 75.4829 mo
165.565 75.4829 li
@
0 lc
167.7 74.9429 mo
167.7 74.0737 166.995 73.3682 166.126 73.3682 cv
165.256 73.3682 164.551 74.0737 164.551 74.9429 cv
164.551 75.8125 165.256 76.5181 166.126 76.5181 cv
166.995 76.5181 167.7 75.8125 167.7 74.9429 cv
@
1 lc
166.166 75.0332 mo
166.166 75.0332 li
@
0 lc
168.421 74.7031 mo
168.421 73.8335 167.715 73.1279 166.846 73.1279 cv
165.977 73.1279 165.271 73.8335 165.271 74.7031 cv
165.271 75.5723 165.977 76.2778 166.846 76.2778 cv
167.715 76.2778 168.421 75.5723 168.421 74.7031 cv
@
1 lc
166.815 74.7329 mo
166.815 74.7329 li
@
0 lc
169.141 74.583 mo
169.141 73.7134 168.435 73.0078 167.565 73.0078 cv
166.696 73.0078 165.99 73.7134 165.99 74.583 cv
165.99 75.4521 166.696 76.1582 167.565 76.1582 cv
168.435 76.1582 169.141 75.4521 169.141 74.583 cv
@
1 lc
167.516 74.583 mo
167.516 74.583 li
@
0 lc
169.74 73.7432 mo
169.74 72.8735 169.035 72.168 168.166 72.168 cv
167.296 72.168 166.591 72.8735 166.591 73.7432 cv
166.591 74.6123 167.296 75.3179 168.166 75.3179 cv
169.035 75.3179 169.74 74.6123 169.74 73.7432 cv
@
1 lc
168.166 73.7832 mo
168.166 73.7832 li
@
0 lc
170.341 73.7432 mo
170.341 72.8735 169.635 72.168 168.766 72.168 cv
167.896 72.168 167.19 72.8735 167.19 73.7432 cv
167.19 74.6123 167.896 75.3179 168.766 75.3179 cv
169.635 75.3179 170.341 74.6123 170.341 73.7432 cv
@
1 lc
168.865 73.6831 mo
168.865 73.6831 li
@
0 lc
171.061 73.3828 mo
171.061 72.5137 170.355 71.8081 169.485 71.8081 cv
168.616 71.8081 167.91 72.5137 167.91 73.3828 cv
167.91 74.2524 168.616 74.958 169.485 74.958 cv
170.355 74.958 171.061 74.2524 171.061 73.3828 cv
@
1 lc
169.516 73.3828 mo
169.516 73.3828 li
@
0 lc
171.78 73.2632 mo
171.78 72.3936 171.075 71.688 170.206 71.688 cv
169.336 71.688 168.631 72.3936 168.631 73.2632 cv
168.631 74.1323 169.336 74.8379 170.206 74.8379 cv
171.075 74.8379 171.78 74.1323 171.78 73.2632 cv
@
1 lc
170.216 73.2329 mo
170.216 73.2329 li
@
0 lc
172.501 73.0229 mo
172.501 72.1533 171.795 71.4482 170.926 71.4482 cv
170.057 71.4482 169.351 72.1533 169.351 73.0229 cv
169.351 73.8926 170.057 74.5981 170.926 74.5981 cv
171.795 74.5981 172.501 73.8926 172.501 73.0229 cv
@
1 lc
170.916 73.0332 mo
170.916 73.0332 li
@
0 lc
173.221 72.7832 mo
173.221 71.9136 172.515 71.208 171.646 71.208 cv
170.776 71.208 170.07 71.9136 170.07 72.7832 cv
170.07 73.6523 170.776 74.3579 171.646 74.3579 cv
172.515 74.3579 173.221 73.6523 173.221 72.7832 cv
@
1 lc
171.666 72.7329 mo
171.666 72.7329 li
@
0 lc
173.94 71.8232 mo
173.94 70.9536 173.235 70.248 172.365 70.248 cv
171.496 70.248 170.791 70.9536 170.791 71.8232 cv
170.791 72.6924 171.496 73.3979 172.365 73.3979 cv
173.235 73.3979 173.94 72.6924 173.94 71.8232 cv
@
1 lc
172.365 71.8828 mo
172.365 71.8828 li
@
0 lc
174.66 71.8232 mo
174.66 70.9536 173.955 70.248 173.086 70.248 cv
172.216 70.248 171.511 70.9536 171.511 71.8232 cv
171.511 72.6924 172.216 73.3979 173.086 73.3979 cv
173.955 73.3979 174.66 72.6924 174.66 71.8232 cv
@
1 lc
173.115 71.7832 mo
173.115 71.7832 li
@
0 lc
175.381 71.103 mo
175.381 70.2334 174.675 69.5278 173.806 69.5278 cv
172.937 69.5278 172.23 70.2334 172.23 71.103 cv
172.23 71.9722 172.937 72.6777 173.806 72.6777 cv
174.675 72.6777 175.381 71.9722 175.381 71.103 cv
@
1 lc
173.865 71.1328 mo
173.865 71.1328 li
@
0 lc
176.101 70.623 mo
176.101 69.7534 175.395 69.0479 174.525 69.0479 cv
173.656 69.0479 172.95 69.7534 172.95 70.623 cv
172.95 71.4922 173.656 72.1982 174.525 72.1982 cv
175.395 72.1982 176.101 71.4922 176.101 70.623 cv
@
1 lc
174.615 70.5332 mo
174.615 70.5332 li
@
0 lc
177.061 70.3828 mo
177.061 69.5137 176.355 68.8081 175.485 68.8081 cv
174.616 68.8081 173.91 69.5137 173.91 70.3828 cv
173.91 71.2524 174.616 71.958 175.485 71.958 cv
176.355 71.958 177.061 71.2524 177.061 70.3828 cv
@
1 lc
175.416 70.4829 mo
175.416 70.4829 li
@
0 lc
177.78 70.3828 mo
177.78 69.5137 177.075 68.8081 176.206 68.8081 cv
175.336 68.8081 174.631 69.5137 174.631 70.3828 cv
174.631 71.2524 175.336 71.958 176.206 71.958 cv
177.075 71.958 177.78 71.2524 177.78 70.3828 cv
@
1 lc
176.166 70.3828 mo
176.166 70.3828 li
@
0 lc
178.501 70.1431 mo
178.501 69.2734 177.795 68.5679 176.926 68.5679 cv
176.057 68.5679 175.351 69.2734 175.351 70.1431 cv
175.351 71.0122 176.057 71.7178 176.926 71.7178 cv
177.795 71.7178 178.501 71.0122 178.501 70.1431 cv
@
1 lc
176.966 70.2329 mo
176.966 70.2329 li
@
0 lc
179.461 69.6631 mo
179.461 68.7935 178.755 68.0879 177.886 68.0879 cv
177.017 68.0879 176.311 68.7935 176.311 69.6631 cv
176.311 70.5322 177.017 71.2378 177.886 71.2378 cv
178.755 71.2378 179.461 70.5322 179.461 69.6631 cv
@
1 lc
177.815 69.6831 mo
177.815 69.6831 li
@
0 lc
180.181 68.9429 mo
180.181 68.0737 179.475 67.3682 178.605 67.3682 cv
177.736 67.3682 177.03 68.0737 177.03 68.9429 cv
177.03 69.8125 177.736 70.5181 178.605 70.5181 cv
179.475 70.5181 180.181 69.8125 180.181 68.9429 cv
@
1 lc
178.666 69.0332 mo
178.666 69.0332 li
@
0 lc
181.141 67.5029 mo
181.141 66.6338 180.435 65.9277 179.565 65.9277 cv
178.696 65.9277 177.99 66.6338 177.99 67.5029 cv
177.99 68.3726 178.696 69.0781 179.565 69.0781 cv
180.435 69.0781 181.141 68.3726 181.141 67.5029 cv
@
1 lc
179.516 67.4829 mo
179.516 67.4829 li
@
0 lc
181.86 67.5029 mo
181.86 66.6338 181.155 65.9277 180.285 65.9277 cv
179.416 65.9277 178.711 66.6338 178.711 67.5029 cv
178.711 68.3726 179.416 69.0781 180.285 69.0781 cv
181.155 69.0781 181.86 68.3726 181.86 67.5029 cv
@
1 lc
180.365 67.4331 mo
180.365 67.4331 li
@
0 lc
182.82 67.2632 mo
182.82 66.3936 182.115 65.688 181.246 65.688 cv
180.376 65.688 179.671 66.3936 179.671 67.2632 cv
179.671 68.1323 180.376 68.8379 181.246 68.8379 cv
182.115 68.8379 182.82 68.1323 182.82 67.2632 cv
@
1 lc
181.266 67.1831 mo
181.266 67.1831 li
@
0 lc
183.78 66.7832 mo
183.78 65.9136 183.075 65.208 182.206 65.208 cv
181.336 65.208 180.631 65.9136 180.631 66.7832 cv
180.631 67.6523 181.336 68.3579 182.206 68.3579 cv
183.075 68.3579 183.78 67.6523 183.78 66.7832 cv
@
1 lc
182.166 66.7832 mo
182.166 66.7832 li
@
0 lc
184.74 66.3027 mo
184.74 65.4336 184.035 64.728 183.166 64.728 cv
182.296 64.728 181.591 65.4336 181.591 66.3027 cv
181.591 67.1724 182.296 67.8779 183.166 67.8779 cv
184.035 67.8779 184.74 67.1724 184.74 66.3027 cv
@
1 lc
183.115 66.2832 mo
183.115 66.2832 li
@
0 lc
185.7 66.1831 mo
185.7 65.3135 184.995 64.6079 184.126 64.6079 cv
183.256 64.6079 182.551 65.3135 182.551 66.1831 cv
182.551 67.0522 183.256 67.7578 184.126 67.7578 cv
184.995 67.7578 185.7 67.0522 185.7 66.1831 cv
@
1 lc
184.115 66.1831 mo
184.115 66.1831 li
@
0 lc
186.66 66.063 mo
186.66 65.1934 185.955 64.4878 185.086 64.4878 cv
184.216 64.4878 183.511 65.1934 183.511 66.063 cv
183.511 66.9326 184.216 67.6382 185.086 67.6382 cv
185.955 67.6382 186.66 66.9326 186.66 66.063 cv
@
1 lc
185.115 66.1328 mo
185.115 66.1328 li
@
0 lc
187.621 64.623 mo
187.621 63.7534 186.915 63.0479 186.046 63.0479 cv
185.176 63.0479 184.471 63.7534 184.471 64.623 cv
184.471 65.4922 185.176 66.1982 186.046 66.1982 cv
186.915 66.1982 187.621 65.4922 187.621 64.623 cv
@
1 lc
186.115 64.6328 mo
186.115 64.6328 li
@
0 lc
188.82 64.1431 mo
188.82 63.2734 188.115 62.5679 187.246 62.5679 cv
186.376 62.5679 185.671 63.2734 185.671 64.1431 cv
185.671 65.0122 186.376 65.7178 187.246 65.7178 cv
188.115 65.7178 188.82 65.0122 188.82 64.1431 cv
@
1 lc
187.166 64.2329 mo
187.166 64.2329 li
@
0 lc
189.78 64.1431 mo
189.78 63.2734 189.075 62.5679 188.206 62.5679 cv
187.336 62.5679 186.631 63.2734 186.631 64.1431 cv
186.631 65.0122 187.336 65.7178 188.206 65.7178 cv
189.075 65.7178 189.78 65.0122 189.78 64.1431 cv
@
1 lc
188.266 64.1831 mo
188.266 64.1831 li
@
0 lc
190.98 63.543 mo
190.98 62.6738 190.275 61.9678 189.405 61.9678 cv
188.536 61.9678 187.831 62.6738 187.831 63.543 cv
187.831 64.4126 188.536 65.1182 189.405 65.1182 cv
190.275 65.1182 190.98 64.4126 190.98 63.543 cv
@
1 lc
189.416 63.5332 mo
189.416 63.5332 li
@
0 lc
192.181 62.9429 mo
192.181 62.0737 191.475 61.3682 190.605 61.3682 cv
189.736 61.3682 189.03 62.0737 189.03 62.9429 cv
189.03 63.8125 189.736 64.5181 190.605 64.5181 cv
191.475 64.5181 192.181 63.8125 192.181 62.9429 cv
@
1 lc
190.565 63.0332 mo
190.565 63.0332 li
@
0 lc
193.381 58.623 mo
193.381 57.7534 192.675 57.0479 191.806 57.0479 cv
190.937 57.0479 190.23 57.7534 190.23 58.623 cv
190.23 59.4922 190.937 60.1982 191.806 60.1982 cv
192.675 60.1982 193.381 59.4922 193.381 58.623 cv
@
1 lc
191.766 58.6328 mo
191.766 58.6328 li
@
0 lc
194.581 58.0229 mo
194.581 57.1533 193.875 56.4482 193.006 56.4482 cv
192.137 56.4482 191.431 57.1533 191.431 58.0229 cv
191.431 58.8926 192.137 59.5981 193.006 59.5981 cv
193.875 59.5981 194.581 58.8926 194.581 58.0229 cv
@
1 lc
193.065 58.0332 mo
193.065 58.0332 li
@
0 lc
196.021 55.623 mo
196.021 54.7534 195.315 54.0479 194.445 54.0479 cv
193.576 54.0479 192.871 54.7534 192.871 55.623 cv
192.871 56.4922 193.576 57.1982 194.445 57.1982 cv
195.315 57.1982 196.021 56.4922 196.021 55.623 cv
@
1 lc
194.365 55.6328 mo
194.365 55.6328 li
@
0 lc
197.341 55.2632 mo
197.341 54.3936 196.635 53.688 195.766 53.688 cv
194.896 53.688 194.19 54.3936 194.19 55.2632 cv
194.19 56.1323 194.896 56.8379 195.766 56.8379 cv
196.635 56.8379 197.341 56.1323 197.341 55.2632 cv
@
1 lc
195.766 55.2329 mo
195.766 55.2329 li
@
0 lc
198.78 54.543 mo
198.78 53.6738 198.075 52.9678 197.206 52.9678 cv
196.336 52.9678 195.631 53.6738 195.631 54.543 cv
195.631 55.4126 196.336 56.1182 197.206 56.1182 cv
198.075 56.1182 198.78 55.4126 198.78 54.543 cv
@
1 lc
197.216 54.5332 mo
197.216 54.5332 li
@
0 lc
200.341 53.3428 mo
200.341 52.4736 199.635 51.7681 198.766 51.7681 cv
197.896 51.7681 197.19 52.4736 197.19 53.3428 cv
197.19 54.2124 197.896 54.918 198.766 54.918 cv
199.635 54.918 200.341 54.2124 200.341 53.3428 cv
@
1 lc
198.766 53.333 mo
198.766 53.333 li
@
0 lc
202.021 52.623 mo
202.021 51.7534 201.315 51.0479 200.445 51.0479 cv
199.576 51.0479 198.871 51.7534 198.871 52.623 cv
198.871 53.4922 199.576 54.1982 200.445 54.1982 cv
201.315 54.1982 202.021 53.4922 202.021 52.623 cv
@
1 lc
200.416 52.583 mo
200.416 52.583 li
@
0 lc
203.7 49.9829 mo
203.7 49.1138 202.995 48.4082 202.126 48.4082 cv
201.256 48.4082 200.551 49.1138 200.551 49.9829 cv
200.551 50.8525 201.256 51.5581 202.126 51.5581 cv
202.995 51.5581 203.7 50.8525 203.7 49.9829 cv
@
1 lc
202.166 50.083 mo
202.166 50.083 li
@
0 lc
205.621 49.5029 mo
205.621 48.6338 204.915 47.9277 204.046 47.9277 cv
203.176 47.9277 202.471 48.6338 202.471 49.5029 cv
202.471 50.3726 203.176 51.0781 204.046 51.0781 cv
204.915 51.0781 205.621 50.3726 205.621 49.5029 cv
@
1 lc
204.065 49.4829 mo
204.065 49.4829 li
@
0 lc
207.78 48.7832 mo
207.78 47.9136 207.075 47.208 206.206 47.208 cv
205.336 47.208 204.631 47.9136 204.631 48.7832 cv
204.631 49.6523 205.336 50.3579 206.206 50.3579 cv
207.075 50.3579 207.78 49.6523 207.78 48.7832 cv
@
1 lc
206.115 48.833 mo
206.115 48.833 li
@
0 lc
209.94 45.1831 mo
209.94 44.3135 209.235 43.6079 208.365 43.6079 cv
207.496 43.6079 206.791 44.3135 206.791 45.1831 cv
206.791 46.0522 207.496 46.7578 208.365 46.7578 cv
209.235 46.7578 209.94 46.0522 209.94 45.1831 cv
@
1 lc
208.315 45.083 mo
208.315 45.083 li
@
0 lc
212.341 44.9429 mo
212.341 44.0737 211.635 43.3682 210.766 43.3682 cv
209.896 43.3682 209.19 44.0737 209.19 44.9429 cv
209.19 45.8125 209.896 46.5181 210.766 46.5181 cv
211.635 46.5181 212.341 45.8125 212.341 44.9429 cv
@
1 lc
210.815 44.9331 mo
210.815 44.9331 li
@
0 lc
215.221 44.2231 mo
215.221 43.3535 214.515 42.6479 213.646 42.6479 cv
212.776 42.6479 212.07 43.3535 212.07 44.2231 cv
212.07 45.0923 212.776 45.7979 213.646 45.7979 cv
214.515 45.7979 215.221 45.0923 215.221 44.2231 cv
@
1 lc
213.565 44.2832 mo
213.565 44.2832 li
@
0 lc
218.341 43.2632 mo
218.341 42.3936 217.635 41.688 216.766 41.688 cv
215.896 41.688 215.19 42.3936 215.19 43.2632 cv
215.19 44.1323 215.896 44.8379 216.766 44.8379 cv
217.635 44.8379 218.341 44.1323 218.341 43.2632 cv
@
1 lc
216.766 43.2832 mo
216.766 43.2832 li
@
0 lc
222.181 42.4229 mo
222.181 41.5537 221.475 40.8481 220.605 40.8481 cv
219.736 40.8481 219.03 41.5537 219.03 42.4229 cv
219.03 43.2925 219.736 43.998 220.605 43.998 cv
221.475 43.998 222.181 43.2925 222.181 42.4229 cv
@
1 lc
220.565 42.4331 mo
220.565 42.4331 li
@
0 lc
226.74 40.623 mo
226.74 39.7534 226.035 39.0479 225.166 39.0479 cv
224.296 39.0479 223.591 39.7534 223.591 40.623 cv
223.591 41.4922 224.296 42.1982 225.166 42.1982 cv
226.035 42.1982 226.74 41.4922 226.74 40.623 cv
@
1 lc
225.266 40.6831 mo
225.266 40.6831 li
@
0 lc
233.221 26.4629 mo
233.221 25.5938 232.515 24.8882 231.646 24.8882 cv
230.776 24.8882 230.07 25.5938 230.07 26.4629 cv
230.07 27.3325 230.776 28.0381 231.646 28.0381 cv
232.515 28.0381 233.221 27.3325 233.221 26.4629 cv
@
1 lc
231.565 26.4331 mo
231.565 26.4331 li
@
0 lc
243.181 25.1431 mo
243.181 24.2734 242.475 23.5679 241.605 23.5679 cv
240.736 23.5679 240.03 24.2734 240.03 25.1431 cv
240.03 26.0122 240.736 26.7178 241.605 26.7178 cv
242.475 26.7178 243.181 26.0122 243.181 25.1431 cv
@
1 lc
241.615 25.1328 mo
241.615 25.1328 li
@
0 lc
65.5806 27.7832 mo
65.5806 26.9136 64.875 26.208 64.0059 26.208 cv
63.1362 26.208 62.4307 26.9136 62.4307 27.7832 cv
62.4307 28.6523 63.1362 29.3579 64.0059 29.3579 cv
64.875 29.3579 65.5806 28.6523 65.5806 27.7832 cv
@
1 lc
64.0156 27.7832 mo
64.0156 27.7832 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQD+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/asterisk <1C60D8A8C9B7361F0DD3EC0613627F3F58E084AC1A6259469954792D377C555E3DCCD8807C15EFFADDE46A871FFD9B9B01267C4F8C1EED8DDB8EF51F18CA4927FDFBDCA5> |-/plus <1C60D8A8C9B7F3748937C736D2E6940A6C8DD35F7C4BBA55569B8D9BFD836B26ACCC98A98EB083AFD4047A9DDD99722D072CE137B5B201> |-/x <1C60D8A8C9B7A73DEE9439F61CF83FD6F0AADDB8373458EFEDE4BF6C46155F8370F02E9CE5FFD24DBE7D153354FABD4F844978ABB054761731A2B93E507FE62552012BB1EB5E1E3EE678332D9E> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQD+Helvetica /Encoding getdup 42 /asterisk putdup 43 /plus putdup 120 /x putpop%ADOEndSubsetFont
/MIJMQD+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 4{/.notdef}rp /asterisk /plus /.notdef /hyphen /period /.notdef /zero /one /two /three /.notdef /five /six /.notdef /eight /nine 10{/.notdef}rp /D 8{/.notdef}rp /M 2{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /d /e /f /g /.notdef /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t /u /v /.notdef /x 135{/.notdef}rp]MIJMQD+Helvetica nfMIJMQD+Helvetica*1 [7 0 0 -7 0 0 ]msf25.9375 37.0835 mo(0.5*x+1)[3.89209 1.9458 3.89209 2.72314 3.5 4.08789 0 ]xsh0 lc
[4 2 ] 0 dsh
33.3657 168.033 mo
35.4658 166.683 li
37.5654 165.283 li
39.6655 163.933 li
41.7656 162.583 li
43.8657 161.183 li
45.9658 159.833 li
48.0654 158.433 li
50.1655 157.083 li
52.2656 155.683 li
54.3657 154.333 li
56.5156 152.984 li
58.6157 151.583 li
60.7158 150.234 li
62.8154 148.833 li
64.9155 147.484 li
67.0156 146.083 li
69.1157 144.734 li
71.2158 143.382 li
73.3154 141.984 li
75.4155 140.632 li
77.5156 139.234 li
79.6157 137.882 li
81.7158 136.482 li
83.8657 135.132 li
85.9658 133.783 li
88.0654 132.382 li
90.1655 131.033 li
92.2656 129.632 li
94.3657 128.283 li
96.4658 126.882 li
98.5654 125.533 li
100.666 124.183 li
102.766 122.783 li
104.866 121.433 li
106.966 120.033 li
109.065 118.683 li
111.216 117.283 li
113.315 115.933 li
115.416 114.583 li
117.516 113.183 li
119.616 111.833 li
121.716 110.433 li
123.815 109.083 li
125.916 107.683 li
128.016 106.333 li
130.115 104.982 li
132.216 103.583 li
134.315 102.232 li
136.416 100.833 li
138.565 99.4829 li
140.666 98.083 li
142.766 96.7329 li
144.865 95.333 li
146.966 93.9829 li
149.065 92.6328 li
151.166 91.2329 li
153.266 89.8828 li
155.365 88.4829 li
157.466 87.1328 li
159.565 85.7329 li
161.666 84.3828 li
163.766 83.0327 li
165.916 81.6328 li
168.016 80.2827 li
170.115 78.8828 li
172.216 77.5327 li
174.315 76.1328 li
176.416 74.7827 li
178.516 73.4326 li
180.615 72.0327 li
182.716 70.6826 li
184.815 69.2827 li
186.916 67.9326 li
189.016 66.5327 li
191.115 65.1826 li
193.266 63.833 li
195.365 62.4326 li
197.466 61.083 li
199.565 59.6826 li
201.666 58.333 li
203.766 56.9326 li
205.865 55.583 li
207.966 54.2329 li
210.065 52.833 li
212.166 51.4829 li
214.266 50.083 li
216.365 48.7329 li
218.466 47.333 li
220.615 45.9829 li
222.716 44.6328 li
224.815 43.2329 li
226.916 41.8828 li
229.016 40.4829 li
231.115 39.1328 li
233.216 37.7329 li
235.315 36.3828 li
237.416 35.0327 li
239.516 33.6328 li
241.615 32.2827 li
54.0654 34.7832 mo
74.0156 34.7832 li
@
0.5 lw
[] 0 dsh
16.2656 21.1328 mo
16.2656 179.183 li
258.716 179.183 li
258.716 21.1328 li
16.2656 21.1328 li
16.2656 21.1328 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/MIJMQD+Helvetica*1 uf/MIJMQD+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (SamreshNarayan Singh) ()%%Title: (happyqq2.eps)%%CreationDate: 10/4/10 12:57 PM%AI9_DataStream%Gb"-6k?9Xa&h*\6!;?IC8nJ.X8-[$aAjsS8-qV;0HgMp<g.tfEo]-:fhmLf%^$Af,dle_OX/[[nqu)6=@as_)4pp>"kIbUll/f3B%Dh:c3'A8Vjn#uDfKUG].=G#LW<&#+\nU(Pk:<'TmC_FEZ)Kuub@5P`dNk</E<ZDXidojt#(ppp4MW2d'1e3UB_Vd(UhX@lf7G!I>%AC)-=qC;;eZ;p-"KZ\O#CsTfJ(^&)dY#STr#JII_YTlh_h?9$oa*\9hh41l;KU`j.-]dSgmU4EU0$oE-?@@WeB2F\-iU>C8I#]P3%3bHd,MPgt4b*h>'9IuaU1*$.[8nSc!Mn^sf9Eope12JkfH36rE_FK)6T=3q]n`V8i]"J]1P<jOJ?nh.F.[K_t#]*)oGHiK`+osTR%/E9H:'Adgl6-<a-$@h`&J*">@m;@D1+4!-mF>*Jr!iPs<Ibk#7RX'eP]]gt;SmEuQ_R)>g"(:Yo/:$W)g_0nO,Q)Fjcit=@pchgU%A4_KEp@L_>,MX+H(,3e!2o@>F#d$FgrO4I,!/(j--c5(ZI#CK6j\okMR4N*3jV(eh2<3dr\G7E17CYcI@[3M#qsZL\2N?;L!j0uJ%[/\Mqjj4rWq5Vnm:L:^kkKT)!4Si/LnUHl(:BlX;3hHd)EPMjNMPkJV$kk_9-6:lh+q,EuqZp"LLY?;VD[)2tJ/3K2C<tY5;a/AI%K`/BhnFmp,MF%8e*^3LOprm@/ZWO#!GoltU4I#D!Pk$pcX]44qnl@4D[8JIKPtF?E<!mB:;O%T+1Rj(ZfdtW=PaI06ZWX5lbsF#W%#+n_m=G0ks,.q&06:nEfFXe+SX]/1IGe6k)nk+VK6Ujbh9?'>F,c0uW/a%D?+$QA6bR$J,(<hW\Pa'"Ci"PCkN8PB39d)gZKfQss%r.5g&-aZ;"6s><__'dGGrk_U$'D+kh8c"3G0JE3S3gC%7U[&",-SQlD,Z'(gng9bb)*Jj!)&qf\7S_Qkefb!c(<d:QTd@!rACdQ8%X;Lkh=ti1P_?;@L?'l^]_Cq8s=b$2l,DRZ9$+4/in4?ZC?jVB7koY5I2uk2$pd<YlN/p4EC([sQ\<*,BdDO&I\4FB1A\)3D#5ndL%@!35?@<V,uR5HFIq8"H.,5;W=,;:;0_C*iafm3K0ZRP8QaH7MLG#KBX\3dG07SYXkhu]__\u#VuA97t>UgF0^(cbk63]Ag;W'u%\%XcrKN3Vc07:+2<61Kec#)q%%Vs!.:h;`f9Fj/:BV;\k(NN;Eai.Gi8C#B.dF6n)DJAI<!o*FM8LP45mg%6@NN?J7&HQb:GG%/pK]%$!1ZVIiLsNjM0b_,!g\$J&sp95FEcmjM0b_3_b(HJ'#H!LA]>-B\s]t?Tq7XjM0b_Tg4(MJ&sp9^JlCQjM0b_\P.IqJ&soEqFC<@%X;u\OFX=fe0Cfq(O%U0#a[ultR*VR$q$\^7s2'8N&sF["/!Y3*>pA07AOpNmX]1Hd/rf-BOrPslJ%7E6T.Y-F,a[Rg%?AWI?[//1%Rm3p>Ts[]9%($IRi6q*1Wl)_]p]aOP*Vb:+jD?YY;P)3"3L$8(3')LD@e,#_6L)@113.Z;MHY6g`>""1SkFctN;San/hpr11Yn6%%H;]o1+Y@\&!cp+5gbsTh?q-aHQAQD><XM@F&ubnM'3HZT&h#'4W.tF:K6@O%81iO;5YZVBpHd^GDaSC4P^Fi)iY]Y4n2>hSH-YLX%>X^&M3/J3J:l+2=0F&3P-'jZpL;HI:#0W2j_3f6".8gCO9YG%9.qt41"o1*?W(]gR4@cbh>U$qN&BA"K(^;\=,iB?/Q7g'6rEiI?%]KBK>Dd1ecIfU29kN]d@C06bM^<(30)@;cWR4!8TArB]MUYLB2aa3"9nl+'t]X@uh"[s?(>R"RgnsW5rT7p0fb)(%U,rLHU^'W\i%DqkGpPN69b,19PUekInT`le&Z\45?ka!Hb":bM[b:K-7dGk.1kBUhYUH'@b0$C3]M35Qr?T1UTr9tm<H@pFVSPd8EpJ4CqZiYXK:%H':*/o;;-gD\5`1gJH7oMG=grM4^-%XE$u?p*+[DRD9d2N4t^U/!q]4X(T^j7JISX4t/G,HpLrB'Lt0h[,7*j1F2@!-$TNI9p0_i%a=H6u!NP7'M9^b"Mka[FD^b.<_OOFTn3Jf_'jajM/l1%&F8,n"kKkT287#J4"d]ejSrm2Jck;588JkH.mSe!(dh\ukQ"5ch>h,^1%D^)YJ?5'b4qkj-7j.XtpC5nA_`Te0!oeu1@^!5])fSSp)@Jg+HdYF".kXr*_&Jq`pT;):?pm<D\K&O_4Dg;"K:bJo+)>TSK;.O7P%-EeiZ>3^AY9!i^Q:1t?+3uG(kU.G%^D-OjJ(lca-n3sZ5F9eYJ%,DKr@aH3ZHK;b/k.V.Y6YU7?r_%E#D2C+8$C+X[.T#JC0L@nm%XA\<p0snmA1kfS1j;"tq83;JTdM4*E7%hR8%H,N1\<Aoc>f3tU#-056P*8A=DH4]BKS1p4&*$7dlc=r]8;ZM?.9B;6KTg3*X!h\;%;@-\Bjh*@6[1-=S.A"bQn26fhd7Jnj&=%J8UeDY(H^H$j&g.pHDl(t=8&@RI2jX<Gpm6Xc<3Ag`;QFLLbNPln=Z8Vq*V3UEhP<A5%<YY?HT9aFi3S'uEUT!OpBCoGb^eVfUBd]`e<q$#M8#9@F"(e<P1-2?hA3@ZRPp7Ps[IE9GC(Vb&WIHbnN#k?sMIPFfUG7s54asP-%k(dNM]R$r"*$mA%1ffa2)n/I`@%pTYQ77Sh[#X!D6(6!>==3`=dYo/oAeI_M#&SEqnfC<q(6OAf+C?;i/"_Mk_Gftq7Epa2>Pb30%G::GPg)S[k,V1-%;s[6.+#%R_GTXnQ/j]BS4P^R@6l8P/6QB<.LT0S3@H<j7qItB411t&H['iq4^%SJ6@EZ#rJ2gae+#R8c+in8\%'L4BQ8HUO"$Pb1o`I+sQ'7Gg3k]@5Z=GZ>[-.q7dbqYJXagac@RuW9<,OU/JqSa&PP"[19>8H+uW1d_:f+dZkk]TNDhMD*bXL?A\%$8p6IdANMLYL6lcs!<*:)@=fse_F9O)+7%<@m6K.Kj$k7)&_b-JteN`C`fB,$gF-Y*Rm]IFEf1T8Xu_X&RA"%-&c$r__k?sEh:?l%8u[c3?6\pi$LLiqM2D1/bsK:#PQAM@FtjlPWKt[C#]ESh/sDHE/Xa#%hIRu_.;5E?:+G-')Zo,GKF:]S-;]uNLi"H1Tkd%\nOd4!%7]]P.Di8Xk\HYk)(#d)FEArLB^j@I?D,D8t4Hi<8)4!D$mBH47<g#:BQEE03Z70t%U/XUsM_Y9=od#TF'P1gcNhR8n5)U^kg8"S*%"):NW^;[ZOSgA^j9BRjeS$ki-8(O0<8\UHX]duT`hi^Y:G^%-t)9>AlGlYT&:a9/V=9iXP=gC[4fo,8cZ@7ktSJC$+FrG2S+LVeq%?R2a>3O\![Z/)TMU`QA'Q,l[An&I6/:`BbLo0P$r8YRDDn$lG\s$Z0L=d0T!XC!,.W+H.hM8U^,&WVeHb_jo7+M?$-*qd>;8\Pq[%6Z>`FW(6Jh3Za5E8=B)jQWspi`PhB/iNr'H`HX#ZqP0+&i6A.Y+4Kpj!]X9Aq-IEqU68YA5=NQ]@TVdd#D734h!QfW6MtZV+7t6]%3N_G#2l/IeUe2T8(2nEoe*^]?4qR]6Dp*:Eqeb,5QSpJS2a)/3]IG=9'r4q.V"m3RdoY&`96E_6Gu&f]lAeHlZ(gYgW]MOp=cfWk%;KX-aou%YEh-U!=6^Yl?BRk[Gmim"sB6.KBJ6C*L0)4GdS]+tZbi=o\'Hf+*N2&=dm8:&C5Z!p/a9:!r0A[^FrgrgJ53MJ3[+uCM%mHJhbN'Z_]2B'ng_L"CPNh=W%mFeC-H8HKjB#FU]+]kCfrt\)oiBmFoUT6obNi0R7!B&CL$1NAqSokhOpd$F;d;uSeT7ntO8bU1(%)T@D[G6dLYredq\he`nN$dr8JK/$P7r@gDNBW6^EGWl\qkOL8-$"5OO:LN=k8\6Lko40TH,-m&Tb4.4EaJalK'GlN!%n:(4@b`C1%6/'8ljQGT4YQ%ZG&4?Sg"S2l_g\\?P<j]N,Nq#XpV+BXd^Mn7cpj4)W=@<\LF*rT9)>=+sn64"WenNG5Bn5s`W]L/"04kJY4Rp&c%7E^SWH%HoFBlIVbRQ>_#=/'J9W`1@2c:OjR7=0.5kG1S2e7^>$Bp,23XOM(;O"9'6$ScIAVh"57JQ-E/0gQA6-5>j(IkF24mHJ(>%BJ8M(%`]gQ45OhLpH1BG*++jkDV`MP6QtVU6\Qf.#.(<"W&oaDVjt4B`?6V(Oe1S'j1&?F"L-ZDP(jP:UWn&T]l?QPq0O<1T%F`-%d]f'4o5Om@iFgOZTHC.XJ+Sb7@K*`f_I3AQ!b.6X)cdZ%Gh<E4KSBb\hJWpNrV-%GR`H%1*Q9DTEGs5nCnQhmS-),Gc"F?Po:b[$%p3PA-16/:SLrRVMe+*,7^$or['\Q0m,RigP0?5D-9LTZh+(=dbGe!qZPm7S=>M"?846&UW:B$-e6=f@Q!lGe*klk6%#c@-^9qWc\%\eltp;0=p+9^8DIYpY&Fj1T-P5J;aOU8qGD.m>1B^#TXp[*enH+O=NarZl11hTZa$UHZ?RSM.o!dECMOq:kS:58WZ*]'_n4d*u9e%/nUa4S+1_GNDEh*%9%Y5T0iL+7NWHAL!f^P5[*'/=@(\?IQIMLon$qJpOEVNafQB6BU?P>F2)M?JO-ir'.J"M=_5sO$M+)h-iN?2%/MUi2B1!OU'i-H4o5k5Sp"r<9(tuH"'&L[XT`T'*BmK?;0GmS"K9Vt#/]i@kSkcAUL1N[kZ\Kq3e$BJ&nSeQ'X5<0gp-c^6SUX[Z%c"dPt4D9f0;_NSP2$rUSi@j2'C6h8Z8W>'JmjhOJ1ht8KZ_R_52WoQ7DXWFSN0%.oIs?$J8>@p).Xoqi$JpRdIbc(i##%Z-mlC7E%_aEH@)=RO]kf5FSnqA.`bFA!mHCnL\D\#"E^V][3d8j'*Z0Up(B)dnj)YE8gVZ0?!R6T/;p5a<b@fB'1m%<O.ZgQC.^A@_N`l7sF%a-HFTN[so9*EVOPT_4r9Pc6mb.8t_N;l9R'VbI+.:78QLPeYbN%3teQDJf1(Dfoj5`dXuC5Js>GItgUmrsY5dru!GSq(l8*o4PR4%k0J"Gbb*ilR6STc1B2JLon8pF(PDOA9ul<Z&EU'baF#@qa2sd/'<B;I^Qt-r>E/NS4V6as!KZrKj(+P2'M]M4bbIht]]aYo$<$o2%)`OdG"#ZtZ[VgE$_D4"QQ6A]8?j"[OJ)XtfOQN6.j5O0Tc7/;V[Gpg;_?'G^a%hNcoPa<trj6Z'mKnW%]AC?<LP$0gNje-BBtq!A%$aUsB/Q=SlS[SP[9rt%:7BPujJ'aYl,>s<g`p3mc;CR";rs&'.PQnQdZdrLNl"h/5eb'nE($_fK[0I(C(S8rHlAZ?DP%ruIAu]5<%UX2;s:2g3#_79@ooUJ1$er9O[H$/sCJY%!<2hW1&_Yag<_L?sVg1smk'd:Cs6Gh.JqsDZoE.[knX89S!kdeGJP<)\A_\`j3lRlf@%naOkFZJWR;goLt%%d\Is`13R^YL<Xnb<KYgs"@45m/:;ki8+/=PJM(^n,BN^@ZFl+a_V;a\e<^!o=9;W&5(tnM.t4!bCmD?92=BL%RFf4M^%nRiBo*T)m&],q+e&f:gCY>&l%qs/,h^E(D^VmeqbPNB0p9CuCb^ppG`JSNL@@ASkOLU#Q2[>(^s8!DhXu+Jm0`XLX$=>k%UCHKa%q-m1gH?egXZDL/MW<@UM5CM*fVPMT:Deu*q)Z]FBplFp)oJX[h@;r=iTMs(YTuU#2IFdV:PIK"pSn[RZi0o3j,[8*r5u>@%mh&G`a,@M&K*7?&<M!&FI_M1F:^-1I.<WK8o4`P.S$Wc,]76T!q`XDLruZ7;WFV/f.dFI?o?Oj/m<Q<_ba4Ybo3=8W$Lrs^pIR!R%A^'I\MIp_+\nQ=[[<LBA8i9c%6<m3<R5"S4nD4HNSpSYork.(O&,Pn4V,\1u7!0ff((O182VOpe7JfIA?Ap7RklOYY6Ee-@.b4h5%Us2cOMpRNZUetpe+_/BR$u,-p[<=,Hk>N'X-LG,8K3lIhlru9nfjq2'nb/V/ZHP/ESDL%`';7$B6(j]>e<7"^o8EEH6:4%oelhI;%4[J,#onSGk>=M?<FBS5D_Kara3)&PaN;jNf'/2PooVA:1!Kdu4KmVur.BT*-%f-hq"An%Um=gYrn]5.nZh\_@9t)'$iD%0"AaLoN%;Y2W94%IBDBb/pmY/GS3g3(HbT$Yq>XuCefSu[`O-%&3m)&D*.#gZm@__H!DaJZg7cAS"9!n3D'_KCb:W1jQr.j^k:1:<7E">SoF%ABkA?S5n@-e?2,W0jm5!n.GAniFj\n87$&H$:&h^]S$SlqiX)J=E"#pg*mG$ATK!Xl^j#ZEim7n-*0Wpa1rnLh*R%4AIgC4jAS'a%1d!<Ab?f0VbQF#5U&lR2ZEi>'5)Al&M\q3QOTP`fRtoV6qXOjYjIJk\Ll)E^a+KiQ*&gWo>LFIlUh2&+:+"Fl+&39)5uNHDRe*eo%Qb^/'Q8PSGQC1Kgeocft/b(fKeLoAMfD,;m-HtkWI;5eH@/;bK+ILIN+/?8:!]$j5QaS,rd^Bn2n,7gqTO)url-G.PM02frB<%<K%FLA`5BrjB;+ne!QrR>;T:fCiP*B;[%U@,B))c)$lD#a_Sh[pt,*)HU0hPIWfn;a/Xb?tpU=#@c[HP63t=RRp7Yt[E:h_?B\,8&TH%rSSIt!QhD,j;kU<oDVuurtq(Z`-SA>8/`>M_Id4;oEc_'roecH;f/Q(mFkOYdS6W&SQPq/=%"/EHAJ"(r4t[1M+'D&X'cPMC+It*%b-X4*!m];jG#2<[[=c&J;*1_Y@;`Y6Got:@]tn7U4s!i=mUR(8M/!CNA<okNM]qKndbY70<U@K3RfAttVHW,6pNNC$+&:H"W[Dg1%Q'?&]O%?A7/P^ZAR@8G),DbAp<5P3Nb^8af@oRL;%f`usI<*<sr)8td2@1>5a=!F]l^7EAkTGur.HWe^F5Zo_r8Ka#rJRuo;kQLs%rkTIr"bK3nA?ib_(.bs%q2h;1-rl(:baRtH$6GJXRat@TPljQ06d2[qmJQ?':&BD@n19tTH=)ti/G=Q.[kuk<"Vj\XK+KM@)h]HU%%bn4&Ck`n/]`.%Teb$b.2a_`e;CHJ'[:\7g5bMuIf!F!H8YsP%qmQ`Lj#Z#DbR1/EcFcB'bYP)TcO<-lD!GD?Dmt9l.C1oN1?#.2%,r)JW>BK)1G[iou&H3:HQCPD4#OTI8b"2:mS+9oeo*3L#AB0gTSH0,r^J0K"]^W`85MJ?B@('I0'>c;3<gbk/f+=9L)$eAF3>26@%[tO:ICE^CL$8[U>isNJR)\\P"F__%*HcKUFFi4i1mIk3]NE3@]Y,eD[_Rkt"&$."$>13j/Y26U^f%+b]H`:7=@sl^m8.7A)`iPK]%PE#!I4DV%T+E8-9f+/7ZJSMO[rWHpW,E!QZW^1\'F='8n;sTmFjgXE)&[[V>*QX4>^fgb/14K`MGP*bX6T<NrL!U>:1^)aa1/Am]%/"ZeUo@Ls-4d.E'J6^H9p`TBu%NjPNi_2I^)@@R8c?]3)-2&s4]Mri!IDZ6#r8Go5:jUGg^MB<?qsDfno5Gh;EoHtte>Fth'\`+H%:@B8eIUBT(]C88!9$nG=g@I&hrJ(C@.d8Gf0,$-ZG)?K%qG&$%^E)ft%%g*SVM:.YdC77XIE+-,\Wj)$K]7*"clQ0l[pP]CgZ`95%*uS.s*e4!g\8`UojW@:h[FAWiEc[VX5Dme]B'AXB+]Ea"-q^&%PC_^r0u9t#__MbOid:@OQTou5BiarMM(^pQ`b[]tAo1oM0lRPB%WW!n4!^.mmMd@L^qP'B+j,8;6h>!^uLP0P[M9$EZ/$P`FEun-;+C!UsdS+?:HeBif3sQ]N>i>.qQ"'8dVTKosem?bMl@A,95EqBW%gR[.qT*Lbt-D%^o4Y)uG<;lRhd:FGN?=QK_M8K[Gr6q!AkU=G015kWfe[I+`"R\*$^:GARFo".IBmj<WFLqL<r!?(7go8>tl#uol%HFtrt['i!Y`#jt#h=EeS2K'ZiN&pY,B:6sASV(2;l.B[PiSAB\c_T%>k2u'k=jjh/`5<fu.AY7/VheY9F5<dBA[Y)+mY+N99]`rl%1[T:R90AGu3^r@d]'V6&lL_n0^m1N==1memd>Njd(;):^_joBD`QjKU:&4$jr"F;>nKX:bPgui21jph/@K6Z+X."9)b[\nrEMo#S%Yu.D?5OLFP`p@U&D@JYo:1#gD]lBr_jj<-cC2n"<l"kE=W8LF%O6Pe146/ltUN*2gi'Va5coa,NFJI8Z)Kgp`+ffp0=YKkqC=Ag!%,S*U1I:t@#n]d&5Vq%pJm=t,`oGF_\;n^E1R]U=A46h`d<FsA"h\?mRC]nB48!+[2)Nm0N]o[,IXWaOkoL.GJUOMn\G5;aZBP*].%`aY"KSL,Bc9Oi=87_Pb4'g&O9/2E3?DT8p0o79^omIV[t1Pod+KjI<Z:LWCsnZsq;oRq^2<%<Ye_bP.8rOQ^@f;GU;2nW31c1S'S%gbQ'9j%^Q@c'r#iZtn=YmHaaFdja]Rm.N=[ZmKCUShbN;_h(IXjm_)'Am.%XoJ(CXMQ"s>Y$W,,NIja"cRJ"Qr>%<ZoW6aGcM>d1%Ei0tnU>+;Oqj(roA)T-2@FjZlo2]anN'"-u=c\'mIXYEYRd5'A(>TZdmI3CNd=ej"1/BrJDp59ISL-:$n3mOBNSmRZ>SQ"cmg";J%bP+N*e,?7hVoao?,%@J-foW(0s819b478=`4KrrcHalD0>X!M76FTfT.m/a<SYeBuY%kNF'dK7j#0INXVod8U?<H8[r)TtF!kXh_%'aipubh3YO)V92%no*kZe7tr2A"TVs+'1H%'KaQF`\]LEpqOiGj_rT7@C+?X!uUEF?_:i@]nqo?6J._;I9^[>0e$CEqtT#e,4<O`%njF$$bs>5]IQJ.3,%N\#S!5,]U:b\V-Df/!/9@3!IAV#&F1>K$i#`Jt`mnM7X>J6[H7(/J;C'.6VnTd%=a?Dqn(+\d8mBM^nU#.O%q@mA@D`<(g`!jdubg"OL_!LG6e+EUWN(]9i5@+'4@]9r8XtdC[h``L@&m>?.CUYD56aP2FF17FZS!BS=?LC_QU079qo=13;0e<33%?LAn&-Df%&k2knl66W3ZcSD]K?/Fr8,Gp`@APGd$;`5CP8SUk/Lp[>$p5M-kH+UE)(:IR#Au4,GalUOI8SNC-k&U1?ohESU62':'%AD=UNq)Z+?h4$VIQZBD?hbN\99S=82AHF`3H/9@<*?F'Y*Ui%N"5dGEprg0(&UY)WE?CO9;Air[Qgil"n4HPaN/"JJ1OeX&F0pQk%TQ_&%N+ZdVHQDHKr!LuUr%&OU<AT`V%p;+p,^2MM9L"a_.h=S8a7<OF4_#t\6EFBB(?-]Mo]#O3I.>HGJC3k^5=Nnfr!latM6bU#%%%`^\If)#Yg-Id\r;s#]Lq17g8ZMMs]YE>1+q!*R,@r6HTjlU%%;ohY,"e,ko2>h!Q9*"5Gk*ZOht)h=G-1*fnSiF'kshKc2slj/%g_;A@qn@*R82*6rT=3!*IC&.E)U0`mm;6c[i_DpVHofH)B@:%1%=f,dT8d.1Bm$'Mmm]RqC#XG3mW?$b@q2Ne?g<pW(pM8\;l!,3%h;R%se&9.f;5]d/@fR$"UUc6^7_44dVk?-DbW6JXVp`;_ROd+P0CR.I"aS$#]HE9B1n=\JMVVV(<cp27&\H*@6p/dUXLB_3_mF>_%1\'7>e7'VH60]&"_)5,*1Da_P$IZ%-OJ]b`<"uUPI9")R+(6c9Z80B@Z&p@POZoA$WkN-gR]'f@\*sZl\5J^M%PG310KbHYYE+pL%$+`>rqYg0kQLdj#5c`.7BJ_$0,?Jh1g>DFoaS)XY$hSMp07L:s(%SfQ7Y`HXQ.YZNXK%Yj1goP/TM.QoVdfcK,4e`V/C+<)?r7(m%ab5J)>_mk:,sQc"KKNf1nrSZ%8NS?"P'0ZD2!##=&E-4I24*=4PTX>k.Td@n!':)jkD+2#_tdU5XQSd:9@LPZ?9s[Y:[Q`:[0Y1U%&UfJZ:R:fFUllMH"B^]9D`96-VmqZ<!R%4BL]_2^3'm<.61n[G*j]Ci''Fj$Mg8qo*gVJl#4<BT<Nh<Ra>6ROKA(LB@Qnm#Z*B>^%4@CNr%]%dIYTC00RB/jqVGU>M+UqSnH@jlg.ue!3&=I=4;E#Z@g[U%)4)B!rJ6i!Hen<"2c)?dR4pFqIA5=+::6"UL0Y-DE"&Lej%7;Vj/'&8rn_mk"I1n#04`FPLr-F5JimB:(jR!ml&T9'tT&alUl#i6EEX!cX?=^AF/V76^\dU)/J0J2m%RM"],\;3-P9IBUq@:Pjr%X2`X`.B!a20%c#@mQ0-a/%RO3\dB:Il6>U7Y@VLSK4M[ELr>Peh/]H7]>D64$7D^oWS7*c_%S'%Ss%M!e6Gi#=JQK>LSPnkfQ?"h%=.&_km)`e$kEeY9R-Bd,"\JV'X0l\6^,&]'?L*jKTNU(aoMNsCk=0'Jf=.dAWnM:rXY+;H:=cmUA_UEN[3_Xs2=5m+I<NE[mfXU=%M(:]#O3RAjBfo-Y]'o!_l&au&_]Kr7m0\;\=UGq6%b?^1jJnbAkEnG[<CUZ2R[U*a)9-f/?c&qoE=mN%C.u=7/2p/iM*keA4$WIT%Js_*g[lhUcF+MB>5to2DgeC\RCWUaeq8&+]ETIQ%YHq6)@lg'>)G#9'b+MM&2;Y!Ai16iMMq9"Q^c%Dld"K+lejPc\n=cA^;3Z^1%d,DHW:Dt/(85c'IkdXId'X1G,8dIJ[Qt%q(fj'K'Jsp">L8#`FA$&0@#b$Z`-oP>Gd6K\95`B8I)jo9>]iHr5rCA]&ArE*"bV]3f%SS![`R^.bhUQ>1><0[5iK/OXo<ul:3G1h-G-:SI4AN'+Ib:lEP_i-jpl?6Wl-sJ_Me9l<P#!f^FWa9$O"8Jm3(kB<6D`YXYGfM8R%-Mr_sTT!Cb/$(UojC'Zld[Ua]^+/G6W_Y348m7CGia\^Hf9,Rrr8VC9$]:'PL;7h$i[/CNJ-nm.mRURd/2`:)oE7??`WT%;hb*4C%[4^uR\W%%G((s8E_XQ2EcZ<]]V0h;I9+1uI((ttX/=IKhUR@R&p)TSnL<'5NmEMU\o7f;P&.^)a_lRVI3C^^;No^Qr<o;_d[!SgL%h8a%B4(OBgC6$#]h$:`Y['TF>=b2FCk1J*gUVu4fNNGJk9T.u#]9mA%C&Y@$[kT5hk!9Zi&Z-p'/)/91IP`+sD`JjdOt]j!d;FRD%8]g?h3&siSKZhcd@<4YH%r+a"T:BRQ5Ga^eYr*GVj?E7NB/:]m?k"e1iD*i^#&kdTFp\cK14[bgFG=0h)kG#&9=(MB;/^QbqiG-M%<Cf_DW:.tOKe!pe/#$YW6Z]^e'c(<MrUh*,'@i#7l#%kO8"JA7TJ9)dX-'g?9X@!D\L0QMV?5/LNd.iUY/71B!tI$Aj.MsiWg$H#%(AM9^j`[;^LhS@\^RKD@mVMpO^8K,[TT-pVCeSa_%gGJKLe?[>^VN*gFa+a";poh68)5#ETnD_:`b"-$1%Xq'#S@&%:@!bB'0dp9%'6c1=n@jNSQXiq1dEo5TGY*pmZ&ma"f>5jP2;W*)5^RXtd84<_3L\">K7k.IRA0e<R=4ZWdlobNbrLo-g=JhZ3$4,HJ&1M3i?@oi%d5$b/I':&N\<0rj>VD`0n34f7;&4\q;C)c#2keoKfKt3k\dmbT15Zq4,t3$.c4eV1FeNGC(;eo/>Jq*cFW35L/",5N=u0;j)gBG:%Db['SCF3iXH\KJ*O+*b?r%O7UBnFIM#UlollC]Kq<X=I8Do\,VDq^*"1U:gYedAh*EBA@6EE49oMY;%"CU7%0TP_.V`d=D:O0pnb%5:aqOJ>@CX]l5E[%s0@(eh#U7l#):qF"Q:=fO1DXe`H[PFsFPX?*(_Z\s?V1[GsZ"[3*X3,)C2"mL44FHa9Lhf%"YO^)*LIMd"hu%?0m=*?C2*gFF.FK&<l4\eTO;:OJfX'kS2*JEq#;587O^\>_"[PQO8t_E,+fh6d!9g[VE?%Zn?-fDVUU.D4ALJ><jb$?6;#DA@.Z3%c8AT8`dBG/Xplsa%`7He6aFN6O5HD=1`I*0\:9<LPVc\,KY9P%FCTX$;UXnUf6$jQ)VM$f+o98+E><!]\tX&81%VN$>'h68DkO?]%OOstN%ia8@7#\@h9%)X%)]L>Bb_4V11TTG<,t9;q$'p3i2AMpU`2]hS(S>Y'9Vl<VcJfb(ZWYR<X+T/MX0gPaPUkFhUY!Z5_+!$6%K?iLa:C^[_14r?E(g8YLc8pT<SDCGr%\:=4AHn\k[bt%DFOh=OjQqoWF6JQDPr%X&`j][mSTP.-FEY]^3HU"H8f;`jfn/X5kc?T(%Lkg3I*'3Bo3daE8)KP&C1[+?-ZA'>[ateo3kVNpR9gH!Qg7)ZPMbsnqGp^naP!dZ"HI8DP!k1tGNq0#G-78's=Yd;VWMGi/9oK17%/A2i]Y%#MtI=+g:Fhl#fE7/:MW,kB8iZ>:"\L`o[*6$s;YfTRg6&jR:@6'q:_o1RoR\BWS=ehk7c(J7kBqj`WdUbVr=fs<1A=bP(%B6)ZObrOfAY@Ss5Tg@bD9`ikUWPWKn$=]t(Q'X<H)bgcW[.[@32H+tZFC82Eq!F7#e<,hc,plA0It'nF0dOBa(q_s@9N>XsRGWk=%!HUm:(lMc5V'9BLL-S]6r%'jGgqGLc#hD:s)f(*4;cBr:T%r9?G1<QoHAuE]d%FQ#+d<I89Ili3Bg'$jfH<3'8HQSmR*JA7LEPhN%e7Ojn!2ci6>9utQnlYRb(-A!c(7;H]EqSnFHu4.VY7$g:Gc,P)<NUUD06r9$1%==X&knKsS>6oM/FZZ?)#3\QK+q&Oos9^1GFlif%/'5EEj3q*aQU(g13ZT-F8[*2c=gqRq\^"jHVD4Qf)g;iLpKfBO0uJ89jX/*Q"u3OEQQ.]Y$?Z-C)9M/YH-DC%>I.,Z%;GCL[!#*s%HoZTg\d%d88"9=1WLL;lmZ3f8AP]`^Rji^U6cXMa=TdE%-b%_dEA1m=N^f`.Cmm.hS1<]BKlimu$_><p`Qa]R.53<YdN%!X9S"@D%P4D17B&KnV>[Tl)#88l!NGClV"/VtT/,!QJ0mBX0>%'2?3aJ.*bVQZb,RQKm*V54<.hT[a4SDd!7I`-to^WiNe+S+GUl?L#*_n'E%*=WA.>-=B+`n:iYkV%)UZ]*DfNRa+!YfUVrZ[e5iMi;@l3Xj0%77K-[[7+\WY!9N#;NfU>OVo4`(7D"oeG-.N@*>N<7a0gK;]CbK%A!+V(rpY0o#U2+57)3nZMHFZ+1pduK130h]nR?'f%&BR7L'R$";Jl$sQEeMEm/2s;k:Ad:/ia0Q7OC)f9Qh*r&_@E6P7t@.C`#,!%6s)Wm'ub(1@<.\m!DH6'%K<T"hD)LW\2*?>=@^Y_r(_'hBPP@`K&k#PEaj?8R*3-'PL'J-[\.JDh/Yff8rXAPl>/d^SE8;c;Fh3P%L$\t1+M#eqO=D:D@bK0Z<"JN?*Gq_rH=hd<RZ5TlIp$PNS>Dd+D>A-gc6$7S+&6BIO>>hHSI`2'KW=os39.N_Fm$ZESh9.Ob0]/k%'7BJ#3-@D?c%oSJ5+HGE;.dbKk]>57_jR,0Yg.VUO'tMJ@1L(Nq/BMCbfm1f]cF:"ZQ;"aRoqh5M*t&U1(V'7ko_;c2.l:(E=n`_%b$R7"=BXf:2'#1Rg:).h+</bK_i*8H/'gkJ7a/2@#B\2_Ak`]H/P!-2"5#H$5j>K%P%"1^+J^=$noN1sJ;1d<"7I14Lp^b].H[]m%h/nM#jIIA?PiHa!R_3.30=m@eMbZVYlr"&>E>gNK`t91mCTk7=e]I;]6\J+(FbAGRb7<-qVI^ZXIB,G=`pU2_6`[S9=sKK0/qst0%WE&6F'^?l+g%`]:J\`CXGO*ID]j#,=lJ4KV;P/HiP**n)7+[TaMV;3#7Ol\">6FnZdB"Q;'t*)k(hghR276-b#fP`L<7aE*Lco,i%eF_1XY(mECWGl$)ju-Ga=XkE9I^6BmY*o]qK@mB'_C]9,<("l$(6KiTEog7[EX'q)j\EF6.\+qei#pKja](7%IEYjH*SN_0(mFqe%Gaf`L5oUs*p-a.j4Jk2DGj,=\TW'$8qo@'XkeM]WNQiKrU)h?0&)'C*QZFce/I@Tm*4Tsh:?Md]*]MpG0H[VqDH<O!p8i30E)sAh%<88O*OhH9@p+Y]+FTqWl<Z:B1^\/grW<$(S[sXm5?.Kf@?/><#\$+C)^G"%#h=s;qq%S4gJ=8o6oV@a_iqM>EEBDkrIk-:J/PbSA%[t&/o(u1."&SI>)<oomsG.,E5b>Zs5DLp*ae[NZFD8Bkc%(hMACXf^iI''hKVl<Bj>*M4gmaWf?c'L9U'J@q%3n<A%a]W8N?E".u%Ma\!*jjB?f;baP:>W$BJ.D:f2kUn\H9*'CD8p:)>9KQf80/]d=49'O&[U[m&gS3.HP;DK'\rZ=?Ggcf2WD2:AAu]R.9B_:9c*Y3e%[_SY<"bM`n!T7lQ(N7^MXM/\fo1d'.*g2`KRN(Ge4pNZ7(ThUe\h)'.-\t[;7IN\IWnZWcUK]0Ip*$m`$2.hTLcn/KI:$Va>roB+%U+n`tpad+['D$RPNi\:Vf#Cs_&'FU+(2$d!MYJp4J/">/aVbOZFf(&0FijV03N#ofMk,k#^e*DF*QIb4]0sqX8-W,)jY)b&StGl9%2nR7&SBanL*,Z=[lk&BhpP^MT"ER`Fr]'*5_Rqf?c]/4+[!K<qJBlBe]6lN-90:@\flRFmHPrHG^Xd3^1HB`oflT\A6()'1Ptbm:%pq+k"[*,=&ZGgT(m8qW21WlQCS3OH:Cc\>gS4,`Uaej-m,;5<VBC'tNG;c#&B4RRdF@Nf_G-O3uZg!EbmA@-O94u]kjjMhSX5Gn*%c:GGWcVn"W2P!\tSaNl\Q*]]h6dhNA]Y82C,N2U3l!6Y7S^I;5DO=U#2P!\tSai8fX(9Zs2<FA34.FM%`)b3]1WlOu*Fd`=3gUC^%17QQ7a(ilPFLhZ;Hqc1sXs9E2h#PQn;s_S@b,-ucQ:R1eg9Tro[+@0Ie!YMOes]<GZ+m@pS'K59^><Ze,@JlF'%`IEB-]nagrHn8%!goHk'L;2;Z1TAuR9ieUnJcdlbnH_>k2*,>3I9q!ebeVG6aDq/<kGQ\#X;<q;,]I-hJ?s5-Q,N5:]+etBtJpX6NNs/BXM!h2M70I%A=L05)Ns4LEr&FBQQ&i>h'ltPE3d-)eptY?$nAXfb:JPF-.,$K>M8JT=sH)ZC..nPCF>E.O5IcBG7JZEXQ(Thc7R$d>]XOs]:Akp%482\&>]XP$J#-Eph&9&7em<I-jFh'5Y4XA&Q>&rDY.:mC.*<@^/XMTmJ;rc<?huH\B@kqljM!Wp*he!jdsB;7cFGu=A"L[#A5+4>%BPM>(jZ.;pMkS!`K?X2IV9`lBTfIRr2<QiCjcYIBc=;>upI`N#1CrJaSmQ0'Q0'WR%%rf-KZO^BfF$gWA]Vfrh<<@$6^_b5@%(FO%YtL%163Bs7=GNG:6XcC4?-uJ.qgW/s6h#7nHq*pcfFajPQY"o+57Uq7`T*m;2g;m&7Wq'ZX&:'S`?^XQSLJBIb>&ssO]]fjmXWY2%ep[o+?"32f@,jm8ZE5":$4)VOP(fF%I=2DFD6/?fhIR&:l]EVEc0p"eN1mu9]6*#"=Tl-h->jSdXc"0%/i0?7^)IKMlb('<koc,)%!U\d)h-X-`dus4>CFb;V\/!2c:,hRAIS'TSB@Yb:aea+EJ0D=dj=XIJ&W"=m#)=7+,^\dt&3Y*%aC&M/0<XJm46U6]A8$G0Sbmc7%Qau)#3:h-$1=Y)u\(XQ%:@j<YDou;-%<pN)cB`=f3c7a(^Y%Y'/:YR.aaLA@*Hqk5E>*$%=Ij25IK!AB@[C*?Ls*_?G/I00/CBXI%&o60[Q#B5AR?)smiEOS_+0?$rEI,nFDJ*[!QK!jZ]<rp8hAHJX)<t])m9&GY)^R5tFYV!Vf*0d9]Ilu,6K/a90aOq5A>uI!#3IUr%$-qaXQ,[@&P&kQ1`.W=hk@mV3Or`#p_$nk;*2d>1`jE)Pkoa6XM:rFpbl5'RWcW1df=e0OmU!)5:#.0Okq)?!p-ah0et$3)L'65>%WE$c_Nb_/NE@&pr0XO$Oa]XX>iP)cT>?J`L4SfN+i^PtQEHX)cNT@@iCi.ceU8G_RCi<0mP2k8a=W^B"7YWA3Cs8*?`^ur;"^B9u%:,8Nh#L/QIRItBgj,/TP"=$%k^`qNc/.`gI:Ig0<M/1J*9rHco92*_pc9=L2h[OrQH2PBq2g,UdI79[^(ZQIf/SXa`28^*BWD_3B%1Y+cjd\eQP/[<.RZ:`l*qB!(^dsS[ii[nc6KGWM*5.!8o@1GZn@5GZ(0CeOFFj8_YCYC49GsAoAiL&aK2YOZ22=%V^FUq^8>1"e@%jAKMKDLMpJ"4ZK4*W0^_V3u)hiI^2`GR1tZS;QoRe*sZ%@I>5ZEkE<2Y@^@Ng2o[pG9I!3Q8%d7)L8qPm;ti(Ud*+en7([0hm@*B%N?-JCVmGN:ca6X.d7a+$);0_T's_o]pm\c)_;\sCW*4V5HEW7caLWG<Y=rg4]U&$4D-K\_MKgLdPE7![SC\%;e05PCb$1bXEE?::%bo)\Od5_W)e9Zbc>KiTA:0R)1-.'%L7OBI'$]2j)G\3XLVF*-2n!@:6<gb<n<G$D%k<!c_Q)lT(;;,Cu=H]7J%RR3iQVO64Q!B&E%=X8NO1s4A>=_Tc+ROW+tqn?'?qD^)$o7K-8o"2=bkt\SQ9VSm>H>sF:=4(h-Kfl4SPZ=6>Rj#%WAr9p>-KELo`i@^W_-r_7AKr/c%&pL4;h&f.&+S.fck110H;r\W3k,ltO$&9!)i::'a4:b;YO;`KC=BY:cY+Full*>JUXu4K+>f!'^`f<A$TT`kXD/[pFS1eKP[?N8<%ZlIc>e3P=\hRCtmIdHRZ)2Dp-etjU8p^I[f=k`0N2F3hMY)M?lc)`B#=DBq4A!<Gd0o]2p4#>8j/#+sU\r]FhRX!@^Ec[jDVS1;b%q/[%[1Zmj?\BhGF\2i_;2^E*eq9GG$F5T;%<t4Cm)lg*'a5!NnWqj>>.OU@C/5cN9Xu(=/Ib=C`RG'"Q3(AY%K=fR%2eIDpN\7rp%W\HS@`=9b%F*X9Od`?L?1rO5!dr>IEMhEom]!//U(_Nn$94e3.8r&9D5l5UnXKhgHM:-"`l&N(MS`TpPXJ<tmPAP@@4Y((E3m@]t%phcFWD;(J-%\R@s>q-6/Bb$g-//qN,362-m=IR\*Z2gHX!.+RDA-"a9!@7ZeVXYk6m8?+Q2mTRE;Ed40YPKnZb,;Hnr8OQ#VDkf_%ohmtH5.7mmq66FIfaW0V>frt+qL7s4524hteoE43p&1.+?-9&^'"07qVY#4'`ab>R]Kb"_\a!Dt<]M*kH*?,RZ#Hl6os7U/Nn8M6%Pf9bRcD,6Yn+C`?VmP0kIYt5=e^&t*^":Ta.\tV5QbD"sqGoi*fhb?!lXtdj=Lt_$o%D-uIb%0nU7p.XYFk?,l)fCM2C57.5/,Xp%H6k^L%D"IlqH6Tg]"`:)Hi7X/h&:/2Z+/E3H:"W;Ck[67<6M)LeShGb8iN)d@%#V%-dcf-O^cSca[_G*Z&X20bi3Q^XaY',8onAU%G'F(RmCdu"WidZUHKfeTeBkX`JmS"S5O2@on)JJ5YFerJ@:p@#L\LXJ\)LQ>]meNB'fdL][<qjOU8I?Z5B8j'lM(-HA8$4gTDBOj%jmVlKG"'haSlP7PZbFsc6'WtVlXq5WNAZVOh!8U$X.PWm^#H_SerDAh>Z&!)qABLb9=Oc"Hlnt*n$%HApf9St6bJIu%JT^%$h97`%3Ge-VZZZrHU2?70f?[-R-b&s::7GV]?9b4?2Q\?Hom?Y=`Hb%)=n,f_CO\.RMf[Eqr@#%4O'$RT+5\h>)FjJkX\OW)>Q%U5O3b?h%D16e`ra%fj=7PN1;V,olT,8>OEiU;'A*^X$bkb@)2d'k<M`Fr\>P;Af_f87Op%#"=WUKLag=GHP?9daV+@^>kp\J##6-erZ>9sYY%ig.0&rR=#@=#j'f>Q&O=fGa2N;tZlse^)eJn*jXJMsr@\0"0cQIb''FP'(lcHi5c4e#;YGkJB7$GuEMb[uB-@%5B7)qDltS=2*;T%_"(O@-)(VRn+F"&%"\-(ENc"B?teOkFFC?bjc97(k-FisIWUam\,%Q7Z'FbM1KD;kD1!r0qUn2O/bf*q/T:;<bcY72?9dc#_)RA%%rOmY\RtECB'!-D+&EX``R^b!f*b)-/=6dJeMp$i\Bs2@8/BHL*n6V<eW5>EgLgu;Ma(fN/7@ELB-Elo0#m?bF+Jh?22b$4JT!Ts:%[?aXZ:(ON(*rf)b^3?)[1O%I+cG;sV=+Yh">576S4n\WC_qR@/"Sm4ICS/>nr`;:rHgm4.n*OFEKQ$_EA#<N1MDO@tBTB'^>aCc"%\DL\oQe<e9W1UJb`pip/60rtAHns<OI$V=BpMZJ^m.6dYA`a*Wp2tl$gdQ,`b[[FdA6q;9kKN8XrB&K>ioeN)J%rn6SH^^EdqLg+%SNW$XV[IZi4'f3KJ_<eE)[(bn3Fm=$Gl5s<YBF56bJ#(S^-$l>6JMM:Mlk4kT]!SpXr_M2Ieu&^ZLP9:k+M%D-aMLiSZhq=?APH[%qA,2bip7+-#t]Ke=)MpRba-UCcS!5)KBOo#ik"(Gdb,$A8fPKXi?=o)!`H[$0NTq/<\ArRZ1qbap0NC#kufk0nQX3p&\JYCnN067%V/T=?.du2'VL!\LS8H!;3fpo;'Djld.>RXRB2;46ddf\!i[%O;9t0U<In]cFM!/`u<0PY:$IJoBg"r`rR_8MGi@s0_"o$:T^1_oW%(:%]d^.Z2B;C:gi"HST$l*2mh\T%gf[qANVk_nU!ShG,1?h8u#2UP4Q58b'2.gt:k>T!7u()na/]>]4\cGHYd8%T5f'JGKe?R^&o%)>*lR_F?^Q%a_]>+0=$LnaDGSI[f6;%d+66LrJm[@#>!TgQrI<Dq'C"]$C&@T.p0OMa)96./\aF'$5bq6>Q^CJU+g'rKCgPaZ>V-%NZ5>&akbb\iWA_Q37*;":bGSii*\dN-tmN6pMg6'Z%HLb0&d5!bsV>&4Y@Nng$9kY$dMnSi"[i2J&'"'q]Yd'ZKGs7XhLN#l5LJg%@gLqR&DG9u_l0-N+SRYg>+gHt(B<G+Rm-K9i^dt!KgeE%X:g(6+XCP*"`]"m<gZ2.[#mW_ko;;B`H`FSb7VDWU7Y08CksW;r8NQo%T3d$=kj9;lrlr,N-k2p]@RDLAd#c*77XKF(^q-<_USW3^D`d\Jg1aU]b)%bXPA*'ip&7jg\/K(P>U)o;k$(=(.)N5(R\fos2]Fm)%>\5eBb0c5g;l]T19.J?emTCEkDn'a8ia5Xd[<eAO%U,>GU-5js&eNbh7-g@5!E]p:hXh*PCrSmFkhIt1Vbmu!DbhqWo#*Vngd/Bo%Tlo\.H2LCM#8WT]9S?26"sD<k,m-E>%kKtT!.45&(d8E9(Pqu_cA`]lpAWkB2G>\Fl4\tB'-SFeYn41%Cn^7i3eZ[WR0K0h%_$d3%);G@EGZSca>/@*M+T!";F+@N&.EoNbRZgoGUht9"cBY,"@78N?&\8a2p6!.@SebfYT\L2t)LV`W3B:6!)]M9YB:r?.BL-V?d;1!,%69HI%5ThH'IL]-u^m8>S:O'rsU_*e@F:uQ&A0\9lJb$O=Gk`D0>:[F9kBh1%qOfOp(ff5P<rJ4_3=Fic+]:V6Yn?U&`>M^;_Q^bP%Z@F-W+Bee6P_pB+$5#mK><?Fl!`/]0Ut@<Z'AD+jfBQ-%Cb<Z&5VR)5n*E8DMZ?^\-Or$F\+&,`l4[Z&EaL1r___pA3JGZfh%#?Z%2n`-VCuHPRG#Q9\If&Jc?ntF]59B+3'iq(eh*u]qide/-)LVJS4ak6bi_dPE5,O-Nf_/l,nU<6A#_Hdu/^r;`)Y2rg1relH,[cQ;%X;e*<$#If>@)Ln!HYh:U8cbb4foiHXQ$3ZHd0cOfgI_$Hr=G"H8YI`7=(\KT_n+<bi`mO_\XL`!Fc'd7a^^MqoA9&32,-R[U3Nf4%WRbsdSZBYrV@]:C*%G5_'E!$PHkPm<l=`#jo9V-k,liu<kp="U@<QCTIf/j6-Uj[1kf%K/?!\JN3"!jYn<#5,,&Dig7;C-O4GbSi%Wm`goo]#=V<=jjJ`R%lc7_F4j?K-Qt=08]K,Oro4eQCeW>[*8>[=K^$*cjW=c\GCuXu%\?<ZtO3X+HX1crEM]XEmm;cIClu\#O@/%?fJQjg+f%1,QlCGo(hP.d!DR\AQ]\7WUP>Ma1\%WT7_,+NP:ZnCt,**1+!X7YQS_s-J))f,lTg\04Q%HG:H)9YKRMO3\?uEq[^q$%ga\5l"<7/I.W"9\V]hMsf1S,%`#TZ<U:#rO+Ing<BRS&?Lf<]-\FT'l]/&KH:BjbWdkb3dU7Emao!uXc,Ab4:`XtD.G:#c@rA8VN%"S#aB'VC="(>o.tgsYbt[+3/.&8B.1@25;^<MkS&RL_-nb]0Nneh!nIda<!;rtj<d%hKhs0>QkV\?sOm(t@TMJ9pH=2,sIb1(<<[%&,0X!htl&:KMH%'H=pTG$kia]B"u-Hq8[n?L/>k>*WTga/[Mf[I/]).ZCORj$=dJ**8IU!OWPZX['9BtqrRMOoZ$2\dO`+I8@e(4%d,oP$5kZ?6fCqr)Qj7WqTT6Inrmi72orYa2%Mfi/9/)4&-P!ZE;^r+&]SuSHY;O^d]8fYZ3U`oq'\B@5*AT"])3QFrLIbV94OmNd%"3g\a.[blACgYbt,7#GI;a?6SaAT3oUJB5%],"2iJt>uP<\Je0'Bd`\H]b_X0M:B40"Xid40+<o`;4b4cQC=]YQ<1]SK(]F."\(.%'_<9nA37D'*C32a#V$dLoZN[-_SrXpZ5<n)c.#u@qnUD-O.U9**#r"ISps_.:A;dP,nsQMEOJ`D-lQKHNFZ;C_#=4#*b6+mM1.]u%]#VN1@Yk(Z]_oD]jgTH+=@Cf<#[;_:&I/SjL'56F(jYg1COo(CGt&5MXZ=t9`Rn%$ECW4B:HH)tNfhM&L^)]'q'jrX2KX`.JQ%(o%kVI=&(M_.6gL4:m5"dL')%7KK]qBp'Wi1`5BcIG$>o#WWMX4![T!kU!3Hu&<S(*ta4B!fV_*_`Y6*(V[$.FO[C+liOY9nj"\3`qH%"Db+rRXklmElp9@6"tKoJ`'Z;K#Q3La"IJP?4DRl!XMS#^-dI5A#W0EF]s1Z]i#E?cW5Ed:Lt)F9Jur=BM/AZ_rB!EQN7I:&3CWQ%VB\`C!!83g!sEXM*q#7gT7;bai"iC]4G_1:IIA,qb8:@'5?a5*-Q*2@cIUOP#p+m])3Jq9pO$lt<&/;UcJKGUYh_5]2%VN[^uKXk%7+dqPXQb;+g([\4)H#f)7&mV1,.>WNTRjV)>:qoF`X&P#.-9u'2ShFf_Q&/X;"TVt:Yh.p;tb`;D),p:<=T[>TTmL#C;T4M7&$j(%J7r:SMO9%Hi/]Jm!HAP8_fKr&E=GNK$.doh)#%.3dDR92#pc%h7YINGUc)fDo(Zi:eWZ`-Aiq?jg`#^p(\C8K+fDIj,D`kuM3,[q%U2j9iNbJ\4GIP<_eW%UK34977a0k5Kh#PGLD%k-ne'PB/MIXr"7\"Na"q?T4X&;&m\==CFNgkj8-PamdbSeP,/h!;I-Wdo#)+R%K%^$VR4p-5O(MP=!7"S)'>CP^_5np9saRiF5&[gsT9?Vcn`2oaPW8G0]`SJ$(M+pjf"#PT<rIild=q#L+D;ubhL7'';2"[rq=f1=p1%]*o)9J5Xe9+X)?pQ^&_C.p"iq*+:jK8!lW@8X0)0blgGGrK3oaE6fo78R)<:jFSE8EB65O9hIP^O)*`9Y#7W%4&Vt"/8>gBK'LD\%FZ):'jage.8.>1l/J0qX"Lg,pGHpZ\&!XeZ^"$A@M'ldpn1Lch6p6!/?'L<<H3+T/R,fOLjUZ:lQhh201XL2B?Vo`Ycag:#+$YZ/%1<b+'*7hS7!G+15^%$kLU4s;bD4Ultj,<j[o`PN/\R;U;'AYS6T0).Vq[7c_:KC^Sp*>O_@q\kBUF#*rd0TS_#V#Nf)*\'\8[DFj%WPh:)%+m$&$X@Z:MZIA'<uc40E:GUdIkq2l2G9gpM">g3GQ>3KReM"RA`iqLRNWH"IV7<k\%-+:&\]dZUJiUo+#Ur*-GpIf1\C5h%\l!X[d(>9uRTLl?J&H9_]q#fu%*Nf4]cstEdu5u14T]R6RhJ3&$u+Wl,"TL"bhE]&$(c);hJ?1.ZmJ8/d;p$2MY+n:&oL_^NoKXs%j![*:lcOnJJ?7^WQk]q^R]KBXJXU-:=e;i<O>W%@dLp`A'k&&EF_"B4Pf]@`F?:dboJYa^Y!jSNE(#?k-#3eRD-TL4GsBamKMM(L%D%VG'KKZctpu6;7Kh+q;>SQWA1lG:`TqXDF`)&^3Y40Nan/CeM%%l4$)7GReJ4@2cqQVBB1@t"6fuGZ`mpEH&r:Vt3NV<sd.a7G7%kT6K8*0cA)bscT(h_)=CW:C\KIX2V5ZF!QMSc_T7oc-@+Uqk374X9F+'(c*KKEup2cZ5kWXXZ&a14e(&n:M//TYi#6HPX=7]4aau%8)29MO@I$#'UduVit-98"K/"XY11Xl`%<ldomif+aISAR"KYHbT133_LL__Xe#t3/CVs+/;uh(IO5Ca9H]130:P7Gp&^Bq2gEK^P%Ln5u$GedZPQ'<r=<R.90<ODdo7h7(2^pe82nm6OY#f(h"#KNN8U:M2"'TZ(\<2gX^;Q-.IF&[I?B]rkE,9\Tt-BLXEMPM&a;4W2o%p;m<1mZTCDJjCq#0&PO;ngF1UVXt(rL#'SapO\.e&3mH%aY+\@;oEZQWh$7cGR_<fF]lHqB5#n)l]@RdiV@l9glVG1GaMX$bJj0O%96Z)jgGAeGD^Yg?7K`aXK^+TkYiuNd02-O<)?m7tGa$'GTVP0h@6\9W,>i.R1h]V*J(UgcSf*;dCrc?<r8enB:Nr$i`;TFIpn574%$%@R11ooXNWgql,hG,F'#[#EPn6p9G%]/Z3GDBrs*l[UfBGZ$-o,YUIjB4mcga8DE8YR`M[9Gga$tAZ^hVX9'L`c%qGGi=@bN/pf%+;8Sd3sXQH)$Sp;3L]pG!P!7p1`9!/e_q0C%])eMbL8!U_'0uTX)Xt%1C"\FZpNI595lF/J@?UVa5?9J-"R+6?;-cAN@`Et<Gi9[%pQb*r`_C0pI_O+Z;Vgq`2RW:Dn"0J_m63Et#<4c8WT5:fXhF:2iV#*u9aD0-3OgQOSR1I#gQ.VT)h6kKF=Hg.?+ddIdJ-S[*Y;A.%V/bP26?QC=OL.AOWOa0\;'uS]AjoZ<F=+$AdVjW"kE+=F0k`pO#!eCIa&5kFD8]a#[-$@%PAEMHBI)l_?i\Bl'X-bL,?4b1b_]$`%RZ;*0Y?WdX\dtK'-\0YWZbb8(2t$?5Q7:ngY]R.E9He;&3gi=3GG(;!A.#d!%-3rD$V3oWN9^HQ$@K[+RkrD..R9GY1Bb6?&1hi5%`lR,2K\)H\O2dQ>i11('16J@@-aV'_\W:$:+!30^c7bVo&8U:7Dhi]'mHZ%[3a?H?Q%;</%Uh/F\NJ2s('cRaWrh%hD!nTk`iOtq%YBConEgU&Xd*n'S(BsCbJ%OCjj7@1J%>84kNmI1]+GM\%@PpK17UuNQcS#PU^7E&?cF<Jq]N.ZANct:V8K\W``UQd#5W!j4G-j2g%K/cu(<Y=A07B4:g[lEdks$RL:do6Yb:Pu-#1jOj,4G:mQR2P,qMReffbHN<'";3$&%u8Dh)"oc6=ShWVN8:JqI]f&VDXWUGG+%):%gakA,,R5@.I"9<_m^p)^E9q`F]e,:sGV3"1HrYp4;Uu.9j[h3L1Z1l"G&LLc#'r5NW)%.K5'(YVSJ'[?g:Pj'KWN(KJTDJm43$_l%0k`rX_'8&CN"fqR=g#D]P;D,gYSfUBi@+4<0iCFS<E,),8E.^efU>$IN^L#GmC-8i$Q_$3KMAKg6>uXB(ti`A7Qu6G/m.;_Yh=Ug%Y(e`G%$0R,LP[#o3&Mih2H5\141u<iq#%Zo9OgI;^:S_]lOo7LF%P;jT-_<-CFu+h*)dUj6sG`iK>ZbC/i!tF40HdCGcq[lDnfbi%+Si8r+_nRa2:Vk'+c,iELI\rh;AGAdM_1Y!o%<af$o4:hq_o[SU[<uHH8k&_qrldPJ)h`LA$4ccb!7?1fn0X:KOg1mZkGjGFNAEJ%b5T9YbH2+0WWtgTJl<7OieTKpbk?(ja28-Ri_jIqopoBmgkA!&$`Sak'5Wpcmdo2p>$;lUVA<]!]%Hk=,P2uN'oX@?3gRbtb`dQ,%-0*(E0]*$k-)ih`4<XmmU,1?P7C3YG.Z.#rXm-#5.NO*XGTFa:&`]:]^>A=`h5e4&bZ?KZi:GF</7M+rBBY>9$J9-S&3Dr17lkG[%<"*h8,-mHQ'@b7f+p&Pi"[rnol,d8:0oLQ,;+s^AG.?c-pta[dgfli_Ia#@9,HT9cgt6#$cq?:7Eg!"<m4EfjHn(]:IFkFFr>O)h%pH,4hnF_d]?TJVf*YH;<l`!8n_OmtF6#Gm03E%pF82roE7W-G)MGK9S5=h<*\em@0&0fUL$Sce(Sb,$e.;U$_fk]e$IF^U;VbV^6%I=,Mdb!iWZRf69;Qpfjgj9!+<oHol&g%HW`Jr?qBLBUdrnhJc0ZQsH0Y-Gu7.\5^WO!3.P-qIf0U13_D:sYQ"4c&/6=^JEkW9DGS%eX$iApgOCZJ-tPb.GuFr0?/6G+&f*`RTNi1`A:MEB:V&sn$#uQ(JUkp:dZ-)Ui?!Oi$q6Q:D^'nqt=+s<seXhY-Os781rXJF2;:n%]H6g'\;N@+M<o`KYhRXhVCPT"a0.40r.6@BpS3t;X>3$5b`#@)eRXK9E#9E^_K'\*P`6-@pm1u#4uY2B;T1S-Hf=,T<6FMIMjiFs%\P;L2hC<(pENlBN%"p\C/kU,mg65\nN?kLbD6V?M<G\nc':fRjpUUl)f*`cHX$Xi+pM@)#6r[sP/G!YTG+^hV9Z`RVfgZIrH?-*P%Ap+YO<FDRA5.Ft]9\&8>&;nO#0';]/eRGifQ3^MYnbhA5fa4HK+hk6bW>I$A4H`bQAb>>hA>%TQ$3/3BI=(jX71:o[g5Un#E\CmH%r6(QnSVn=->p(;CL_u0hQS2!i(ohXX1a3.B.3TkP?Gm,O+C^#B\8eE\4A1PKE6"'?kZ:.\,kHYMTb]A7DFKN-D/bi1M\r/kX)QSr%hr(![.pqL?Ort"W*>M*p:RW^X:X"0YP%Ug[9LBRk^s\,E'XZ11!Th%MoApsj,d%go_mg(iQ/qc`k^-=S`Jle8Sl$%PO#q3315_Q&%Vi3r`\gaijHo.sj2Iau\Jf7*ECjf&]78V#Qp9G.SQ5eb.g!um=b)?BQn8>WG1Ia[TF*^<LhtQNG&N-<h3+*G8$d$:,_rjg&H+iV)%r`Q@S]HB5pX+nQL4-GP[Ul44RiXt!6"N<OB'HYss[Q;O,fuR\.)0X'Nr?=65;:InkOAEW8b&>&.m"3p_38RHnNW;J'F#:Xl\?bSa%)PT;K]RMZjGMn]3\sVLh/Jf<r4>/3,d[Be]4K7b6&&9n=on/bs\WZNWb-<^#5?:]HC>1V/NGbM?(b-X&pc!uNL\?sEWd[nP5$@i'%WI1@_29H0Fac3JdUg<F.U`pKF@qFbS?ufAUrFscBQ'Dm(q8k@:k3@_f#mhDj*5NN?8J:p\JMLhI%use;#QK^,!mJ^OM!]Qu:EVZI%Q`uO[o$&'GM?4hEg$VjW=5aM6!4k&['q"aDecd`<#l?k2:$2UV>5;>BF3Aip#(EYs'r!-254JWb6J1[t:;X[\`5i18DjX^`(IU\U%=s&QX.bEY`1%Km?r,uD.Y@6.M(W;+7MX.R<(M$$n>uu8:N-lbJfMUo;$%c_2k4E<kUMp^&%n%G3]!cPfN=Q/$XrMaR0G`>g5q&@O%Nq1rR2rZUs^R-ME)]rXhoR2,X<Q%H'$4_V`Oa&.0'TE<aKkDAPE>=%_Se(8VmKE&jY4]/%d)dGYm6'7_gog]a&ii?'Kt(/?^lu9s%n)MK?U-ZKC/%@_^-lN`3:fZOW'Fh^5Xlf>MMT/<D<7.?d;4-)`<`_+sY3=:lM-sSdBUG;-"8]`(ebBkJ"&:j\dI#mXd6RSeKh^PP%c?9`aS6jTV(0#J#8;:p1I:XC@U=Bm,GlWWaSXl2W&WtCQR4CFSNX\!Bq"k=kZ?M\eEu:_ZJMZZD,t+,X&-ub1e?3.Mm..5VLbKPe%4T72F&Z-b*a"I`2fp.6s;\?n,G9B9rI>Y-g&0d'$#WV'(U5lbD+pfM_CfTuH9(%B=;\;>J?*#GBR#2Frru-RsD>Mo.XG>-lJ"gRC%Bo`-iOa%KF&P%U1DVe?K?u&7o"XHZ]DtP<mhD&umLL,VZQgV11$PB7p676'?,".fU&Cb@_)qN13>"#hJ6HE$N:5+LAf=bC@`/h#j%LkqLW&0AU"&/!G#&P0h-DmG.;%VF#9=t0%F`05\q=t,@@BWq=kCSfb9k?Ng6^]@P-pukJD&:p6>j/\3"$lW%hQH-f:W<'ETP`\>j%RRP.Y?>^1I&G%l!g%?e/8Sa4Dh@:?.Q"9>[hd89p>8+e(`[C(=\5hVM5(m.HYCjj(p(6YE:#;M4mjOs(h1TaJ\Y/Q$'%MCGBJ[pc%)8ZjOL,EZkHm*r_b.[VVFbA-]f:.T!c5HG;7!+#J8-W)Lq.LecSO#@3=3W]sU)8ff1<dn-nc$LCL$_A(e!Ro_+-T6c3IXLd%L5oe%<A^*;(161[b%D1QR3pH^#g3B8?BGlLg.H+U&<HkcXHg)cTfh"qggQB-^,FQEBLlc&rdqOUFX$%Q=Y"&PKBOsXf#kZ`.N7k<,gNNW%jH_\_M?[bR<7QLl;hOAa+g[8X<JG"kq,J+<aF3q;CSa_<]"!Y5'ogs%T7=K%.N7;`=h:9Lkt(t.&S7N)+L7%X@N"-X<_JO+0%GKl%RY<;J"=b9A38?#'aW[\f?0\aV*4\1McWh>4Uc>2X4cTSj7L8_f@S44E=`]8;,A+98"!4."#@>4mdZ[]&3d)cTMGMTACQ8CG+J@j/%8VF[Y-.B((*'s3iek0)m:u#KgMRCkZI``erIGU$jOka$o=HYogZttr!&ZT2ohqa#*H:G/@"/=+-XEF8BB2G8&63V;([Xi\E0EbIY%9kk0F%<@r[08<[,quRi:-Y@EN&Sh+HZ8i]XO,bH`>_Q?Bc/o:H,H0D-21f7hClW04cA+Dk:'(\Sm;3K:B6-&;8M$@UiAT36Q;M&i%-b8\G$FNjhJY?$^JfNbikmV=s.Um#&HpSJO\5+3m1qX%UM_Sm&*j2O<d&^S/?5fG[@:m/7okdcJg.'X"CYK!^MQUif0Xa\P6BZ.$%.p==%D%iRF/7G*jDmA:""/"'7Ef]?:S^<PN$&*3tEL<!12Bc3;mB%&cm2`TW_WoPeQ#/jgmk8IIYdR8N<jYV0/@%u'a6-\>T!\qA%`Ef!KD@g`39;9a3#NDSi^rMY409eK=oa\L[Om`FZ&\'JcV*KiK9OCi7,q>Z*/2I-H3E9\J"&DppAkZt(r>!.XX-B4Or1eB3T.!u5%r^WcB\$r31MskIqAa/2FEVPj3aNMKV`>h6BMRHMl4U)3"lU_aik.L_#ROI;Z$4h(-D%=V2%Ta.2>Tl`4`sj4GLN&,_6HnRg1Ca.H%]HebG*R[?9D)gJ5C(EIsi?S-?#)O<LOE]"EV2R&;ilB2s-0BmPeYMdnX%#*VX(6SqjGKD;4nd4Yg^=m"XH;h8CDJI#:(OR6rMj7V%`<rH3lr^K*cRq,H$5Ud#N`FjU1'gRk00Oc2@g/Y!MQ6*87/PY-!=@:ZZnFUTO+52#l@`%4pUm493?1h0K;S?k6ak,qO4\3jQNS]X%6agWeXaVNnE4XmY>:lE_0GFOsifTbr4",C$r>J1F(K1h6Pt;QBNHtaROq]lIOZ[[3E1B?l,?0.;LI9'HFgg4SF#`4h%Z+M@+brF^%=m0Gq3?28;m76SHja[*6*"Fu]6Qu'=m4m_DP$V#RA_)^<Cmj$Lq(>OG,HG\q>p6SteDEQ47a+Z-=m:k`akrf6XEWq!0^s9KEb0^'%aor;g7@?<S>XSbsL\ipnI/^R`X'lPPHUt0?D,mot*b*NJ-BUtYm"([OYkfg(f'G].>Yt^A]\S!h\]mto]ggU%M'?(#'Q.]aLZ[I&%?ZM-Pr5NW8Fu$L:MO/X(8YsZ"r.Kq&@G!_i^um*i"p(uq)?q?XbZriAjJC&*QcSU3Oi,?^0&\:l99+_T*%mBKELGYUS_HYVFji1Q%@$8-o&@,9-J(P#_$7Q'*I&Ukn?`iA+]g4.;n$/#$*@aWKfF0qL(n[FZJ=8'RS)GY_+bLb^(5M9_,dcqrLs_ttq`oeF]?,j6!CM+`%qp*N9G_O3FM`c"F+ROZU=*1tqmJj1foY-l!`@G[>Ui#Q8V$DAOH;1M1dGEQ=psG["F2B,ql+DHZ1"O3m9Z@%j;eYOG5]tcD8/f"A%UET(1FQSCZ0\=r/<E_`J9QBdM$2\^qg=mib9u.\ZGM-K^feXP;mWPKR>9\kDictHF64UGUdj_Bc&AN(k4T"<4TY"\.jaZ:nh2DlG%euA_o?O=KS3^MBU3)#)n'+p3E!]19l$>ihc8flmbcFgW6q)+Tl7173jRk,;:_sT&f/u#[@/HKWY=AR9t#W1Vr;>CD<1hFNFe:?,S%#N&:J3=.OIA-1HJp'bDAp)nY<N#BPEG&48Hf"h1^3YOL^h&6dl(L,:hJ^8pkQH6<k^0;eD"#E:-`R_;&ldglOXkam`j"i\niZU)*%\j7V]3uid#"QA&ll/l]$*heXJ>[ItrbTf6QXHgu?2'C5^`3H#G/^2/8O[>$J+jkggWp/:WI&[Ip8"L*3n))'2A3J;c+_`K,L#W<b%.^qm#LSLm]`;4D!s*lrIs&:nsmKQU>%aY/c2MW9+kusS_=h?QL9U,gLmW4Rj9J=/D0i%0!=ArmuWEV`<WeMt'Y]+A?=Lg;.*j#t@%8?FdsN5i,RTK(.7Qm5Q;$_KRNi(,!32o8.o>9f+QS6;71eL#u7Bt%@/OrmW3L6sL&eB,5Gh&?.]0&2tUldW%fE(o`Qf^N`*a-AM'%:$()H=nQVbD7;o0NpJ/Q"c]p\h`F;0RkDLEQYlJ7%C:lYok'.5^"'l\a<B7iX;i0'K94`<_Q@7d*n5]Uf`UBYQpE,?)^u5Kp]IF,%hk#]!#J4qjr3u$Y%NHF;ghtgE=NPHk5@)fW\\3mV&ce]3>6^\miRYUbLq?fmeXbdS>)Z%p6'm<iMmWdq8l7OJ"C5JJc78#jUd"IR%52ku&5''Vl-&`>#J?W\;_SNLF35FrT2U_.2fZn#0a5R0]MDi8(>i0#4'gU+fpTc3;W*C>>HYh:U!kkDVJ2Fl*L!"Dj.INB2mOERJ%V3d#:mO9t<mU&R*&ucN9W=0P`o>>QX#(=7@9+h2u&ua@HBO-A==9X:,OHO@AMc*RTH)>a9mO2A"Q,S9D"<J3/*c/K&=,D`XJq$+=%0)?HL?B!'hi"'`RKjqe;B:8N\+s7?d"mKZN*%f5T)+H5fbHJH>>'(I@$b2bF`W7Zi`"WA.Mq91WcsYo9AbV#<&^;Mum(7QXQ=6]X%\QXj4"UKY'.=0R$;s&AN!9o2WRK33;j=lcd*+kf8pr+R4MIEFt5p,>'qH8kW`kA%S:L#_c\;IeO?X,;s#JoCV-1pf#1lFn9,dPYP%<\0''*ZU_WNtCUc;I"Ca:/r4bY4*?W07KcJk9Ae?';=>O`\u>h<EpD[\U6J5`]tVn.t4?k-Ma//kYCcbE.t4:/&BbDpV)-ag[Ip'%>i[21H;gtXV]hg(>?!aI='-+^#nc6&HfLFE[4oW6XZ`'O@`8SGc!Hr]e'jG*MfKf!N(E4KXk!.M;S=t@[c)Zi^^7qRAlO4%cKcmE%\$7oDoeUt9,3HX.6H:>t;%@p4Q6C@(ptZO8NQ*ZuAZN#>7up2S<5nGZ'P17Z8BUP4oDo+CLo0>?Qt=!/(nVAF7QZTZ+q>Ge*S*-E%-tj'tbrXa9_8`F*0AS6$mu82ajd_V#`D?Xs8=kM]gBH8\s3H6DS]N.jR:IZ3NF+7A_Xr60s6,NV&^RU-T!,J:F4;.1VLib3r-M`g%G8EVT2#$.FnbdO7?I'li6?h2u]Fj.*:Fif%d^t=6]U?])jGVH5[ea:a]\7:jhO0-$X_fH,fCn0dBXANNcrRR[=$gP^HI>;PDsoEj%0`'K>3P@*AU<G'AV(\)s;^q)G8pF#=+8;LJQ#ZY\B2nU.@A+08;Y-$mg%!H]G'8tHmG5`2j2])TH2@H[@*;,Q5JQ*pS4+UIaIs-A%!ZIY,kbYS8,Ip"QmX:5Pf.n9Bh7YHQD/[5fNo=IaDS*VJZeg0("oEoS?Z^Dc%$tMBq-@.*S&ob"o(^hH(Ra\Z1t6@oH]dPfUthbH%hMY'O,1Og4p*.tV82a2D@4sClM,\5bq&TT1X&eEF&#3E%e".9?Zp]h4p*[L7OYhr&gn-t>Y2T@J\]I5RR&+%@lkXW7QUt_KM&p>;%,(%8P!l3WPJWF(:mFQ`Ji8KXrfl(THhGW,#W:\@.%k&P2;m[g,!-e`XfZ5]l2X]M*$1r,^(a75q@XAB41]A8hrijWfDWf+86;794%hBR9/\qja%`V]E$Ql&[46!>ga!jG^u6NJS8T;4$HLp@DOZV`Ai6t$>bTM3%$U^,U6fFQFST1$VgZcU'h:1=R`)efIq\hc5]-J:B[%ebt/$<&*n:M#o0ll8c%*Amq_Ci3Y&5W:Mt``bg^K!)-2ifq(WlCg6"&d."4#TLrRcomP^rB7WN<T3d?QNGdlHOY)H_q<!6reA-d8%!SG@(TkZ,Ub7C#4IoMk3pW"Fg\/$uLlpX]).ZnL="5*ochD!?`e>CQ!fIG8Q]%`YXTU.uMd0*[aYHeMM+X'&%O[6uS3`r_IV)U`%%",rlEg$K;up+VL#cUWebmd7]Ef-+R5;+ZQtlU:4[aMN_K&`27_?@hF^#6jiuYXo1F#L,%.lj.fe#qb$-3P9.Ecp'\md*Z-tNMn71%5t)Wi0#kCL(cZm]aFGH-ICoc3qYV;Wms]i=@)51-)e,`$o2Dk(Dnp$-jM`8PWLs[)Hf$eh7P/MB&L\`m0V!*[J^2is1La7=.N+4$%dLM3[+p_M?+Q,F90aR:6#9T3r5iY]CiB&ih5WIb7+GBZ>^,HCN6sKosN94=K!LBZ5-CY(q0_[`)5R@0c(j[*c5Tk6-5p.e:&d4$a%NIe;uVqAcRa[#>AAl%/Vn,VXs&]?:)a]/BF#dp#O``J?*+VlrS"-T`968?M1TVt7(AHO!gY)+eTi2R)h"1.HhV?)b8>n`%;LQ!Xu%RNCs\O&?X1W7i`MGg?O;7La%0d^"^=/F%[&\,gola*T$C>AY8i=!SrS#,Ugo4SDL^*\jNd3+r:#loUhj<N$ine=^pdLr7k%Oe%8.%)ai!p7blFj$&>P^NeW@B0mNU3UOWa0D-!FFG:#8a57Q8(Z@UUa5q*5IAWR6l1JY2QUjZM^P9OKE8ujNs\lEB_"1*u%XWV].e7RoY%b5Wl),/G`WeuX8(E]rp+^+&A*2F8+`Gi'/X9/]0Ea/f8>I>p6i?h;gMIO(XCN\.XueOe$mb>@2c[Y`_h;1,3Se=m\4in/9F"0D0s%dkQY<VB&+ge\<$AG:'D#3>FW]o-V%Ql0)kD17W.u>D_@OWM5\`*U_#$a.6`CjH+J.;/I$WJ6-=fjQTaG".tT!/ZFFH-L&E=IiH=*%;2&-H")@qfrFh:$Ce#(T#eGnlCI+a3BREAKW_\HJR\Wa=3%+?k(o&`bifYM-.+PPmc^&,*$n;Xjo<qU0<YdO/?!Mn]s!4TqH;+dq%4)niJV"c)JBN.*u=!?s+nZ3Vld)p!/\Pa,i,^N?c%-n3bRLE&r&WHfdT<UfMX;tW`cV%j(SW>Hip/4j`&ME4A<7&_NQirBloE(Pm%N+3;96@T#PQX[;Wb9h*BI;J=g@\XDmk/8+#?o.mTF/&_nm&CdR_(6"(+//U$pUu,F6OhPlU=s.[$1KE`_-1DG%S5$TV`Z0RH&J#K%ID%^&o9$doD"Yu4]aHO%hlnm0+rjMunfD+_MI&4J`RIP9kq68G]-q[fQ7e*2*q&#%mI*m+SJP,4mT=4j]Ycqi0ugI[*e+tX;O(9\%'q+AIT/hMnKmT597R91JE!-$s?+DOjY!?.*f$OIPXWY.p>>Jg?C)k8,@R?9W.>fhbe(R*rH@@NmWd5:'Tb]n>OolL^fr:ki("F2e%I1L4R+1U5O&HMb]VQmenRBkr+h@gqacsi4N+gJ?rqXaIs'R5_RXVKa-o0#XR)%`,;&edGT)D[8:`26QioRR,Gbl5q>#@T9q)d;?#%:[)W`q#0Eu[4kr]TL,qa&3frc7f.+4l=%Be56h&kTBWGDjYC-pR7'9&n?gU5"E7X")tZ$X*e,]3T?^+.m^tb*[ASM$F7ADm[*btA%]K%XEgHp%,]`Br.VM/c[U*04i>%iR@&*(p0s6p!\IuF3T?<_I1\mM]A_tc'<,fE3t8$fhf:D.+U8h;6L/D,J\#_OolZ@Y(m`b6&h%s#q]DeQTB6=3/UN%3(CKBC.bQ=O$!'=CaYqnG(BQqS.L,s7^_u%:8[6rm^u.^\<6UT9nqfJ,/+tg0T7-o':e^?G78+pPVPQdVE`I%HRYr-SuL8,pQ!eUR_%7l^3okL;+l0tdXF[->.W:nf4W3Ip)3!+qVKUArQ9;&#+[p(mH)Au+(ss'oPirBIK'6)B4$)WiSXK]kNh6M%^\mfkDuSh5?U$TdIse4K5C^ne^3I#O+8kWiTDn@0DMB!VkeWeBHr.2X]Va8OJd(cd/*.I[OHUF%IG[<9mi:Qc:jUo^IS\P[p3N%;%OOgSd4mgRs3VH.9,fNuPPT`VI?fp(W>8(_kC[1;/M>#Y1cdn,SBH;G[<g&=u9$3;B^MgLVImcAtIrRQ\b3NA3H)@b,4PkfU;Fg)1%\faT0Sg8#!8:Fq2b.h"FWTi\d7G=)Ale.csF([i+3Ef!(g*eCCP5N&Ak5U6lP5`ma;JZ0N4'%DgHcLq*;^Y.6(F<WaP2DV;mGG%>%*-o14a3pa$+dUdRHF7p"$q.Sj'*lhT(D!&73L$;RB4X.]E9<<iqocIh(]kI^&GkWGI.oAcj"]Um?]UtOIZC*dP]^.BYS[Ji:QOHZ%6h'i.iRhMddE6M=-"S#J6OWu'0aRaM(r#kQq`U0mA0CbEK_0`f[<Djm+_8p&=*j"]:o)"F:M8]4KB6Ic`^e%Gn&E@2cF5AWI#Q(9%VPb1NYXf#H:Zpb&@\?;b3ma+l^%U',+lq[!(1Mh+Tq>*$G99#_]@)a^kMM,W>2!aBjnppjGSh\.Q9#2_a*Hsil^9qV3;q$Inb.:i%hN?CLdV-e;3JJY-L-YBp6hnhdnZ09@eE7Cq22;_E(.&T/aW^SYX/,9Om!U![69o`5,9R[&E:B(is6f3E5M&d+[sW$\m/EaZ_I<L5%5<4>a5&Pc74l3VbIr.J-<6I)rO"R!oOT5"KZh-"o4!.%9gi=<?rr;*o:\3lnZ<[;"Z]V/"r&WO0nftj;QQMXJJ,'\)+3/j14imZk%CVT>C:AE<n.^,h53C[lM[Br*3e?\guTS:pu]XFk"_El\KSn#gFX[L#KeK1D^%UFNT9mld/f5)/t@l=\mm8H)Lj?@JU5LW!gBp:!l%],NO5A#:sZ-nMXHFl3jF0j_$S,7AVmEO=_T/1^SWB?R@:a%cSHqY:#$4J1!,AIXZJVKJG6?Rb,$d$HYR8-(eYgXbO0"3F'H3caql%\IIVIXkS*uNkG&"4*pAJ;O$Hp:"`_"6j35'h[pgPnAm7K;dY'_S>&.hDi`fkV<BosXms)a2?(dKIgh>8E?+[Fl;Q((O'q!fCdYdX%)d=8-8fnH;GW)@Op&8sc]DXogQed0B%>Ri*q]'K8dbX>0:@%=;WRh)(#`p5S0K9!VZ$a790kZfL:AE4_s!2rON5(!D'VaJaFGl/1%%>?V(g4,N#_#$VUZ.*+'[Z,7tCVBQHI#hC7p7M6"frof8:g^[VQ]BQZb8gJ=,Mh`l?I+&\%j]\PRXM56'+rm'^B<&"chVelMRM-;%ZOtF_)1P,R-q20^d2F$.)@C+i3.@8%[MqVpLAojMqp]r(G+8I9CbCJI@VraLB7*Bs0"_4F%&Zn6-^$O[/l>P8VS2MD`:he(<dP.A%lKb%j*piuRHN^NW8tNYl>C9oEnoiJ9YhUA+eEP_rr[*s1P2kpT<dSmNHRm@S+^A)u?NtOUB`]a0N?eU\caido,DSXSoXaMO0hREM%DX?a&YhgbWUHa2W)J%I%"`'-W^N5_e`DELI%?;.q^WtDF/uNB:7+$jX[e@8kdIItu<aKRtqb,DoQu@JVrO!J\;.nUo#Y0Wu4$"!G%<HL,s6j2Z/*WbTUokd)d7HnsLEjTGop`oOS7Hh'.=T]=#c1_PA0+AfG'dH$)JQmKCbV]anF1ZLP8=`egU&%rqq7nV$6pTTUZ"QRj%3kQ>-'+rm'@"J!r^)lA^B^2.:+8;Nn+QMqSPtT5?f5upH4H63>:4-li@H+81V\P>1]=#5+?+E28m_ilk].q[TemFp:]PMuujDFI7%?7cNWV9u^$W$ie;SGa>04qB]8rC)U,V+uV"+QLf3';anO's5lGV<V4S0ni?BI"?1&=R$",2Hs`3T']IFfO<(e*qsZ6*jX)rlYOfe%2j(SkDKdBsWSCj<q'JrP&_OF7M/@OH!G^o+p7+d_#A!`Q]qSJ^#+F-<`)@aCkH(U3B7Ih;e+$W5I$FRm5N_G^W42`Z8"'AVH5iqT%8oNj;RQp+;#fPN4N\MqRWqHI,3_<%6baeVLTY>6qNq4PFl;kn9*m=X&In-Cb7E;BAM,#>`]dqmsLQf)S,3eYf3Mpb/HGmfKY)Pql%HLpRnmZm&oO-]j&\SZ6lKpobM<($lOm*C4TYj;*/4hX;6'Q"^Are:on%"3:FCLA?bcT,fEH*C)U@3fM^YGog5IWC_g0q6qagM:0$%V]!+kJ,2B++`_Rg1q^P+M,Hk4?+2%lMMTTAKH6H785mG(8+mj68b1$#jLK';`@%7UnPl^!@cAj6(i]'%'R!nqlIKc.l)r_'2=/XD%`t@pt7OC_:]/FuG-6XbW3+3%]->FIhcI%RD*-lnP.nS-0C0KXB:]7J6?5+Vk1%EbKmB_jD,IZGDbV;jpZHaT]I4-2^GU,%V8AfnK%bT9+/pXfS3:cDTJLEf5U@*\b1=PAf36:H#j[;uZ**#X7g5"R6B!_$mH@O^=`*ksOYlY`(ll5a4Q:U5?0;bCI91Vo*I1mUa\_/-C2%n"!_t@XaZ=7A2nI+/?`9+sMkB8n"46#,u7Al(W!25,4?0/jl7:aVpNPWb=0J(JH8rQjDt/[;FJ7Yg='5-gKksQ1"UYhndW]Ab0QK%5"+8)OkE-T<1eQ9X[Z#QbaeVLT^H$$f1SriVbAt=d2\8<GBA^?FI\eckX<jdf'gpn09@UIK2+cJ5-tWs(m2D/@imLina,D:eK$cu%WGq%If!-fdEEc>QV3Z][,)'NrY\_4?'P/5nA1d]:-C7tl?FuL\1_J4kdZ7b^].B$L\mCG=[`(Eu?H5aM#s59.%:hQ_o,:c73Ja1M%3Ri_Lc[G%_UK"RVGL/_\p5E*]SVQ"k9@22O"Z`Dm&'3KMGXX'-:/,MO@d3OZ8lL6Z7\6%r'"YsZW90R@XT.=J")7@k7-dKr5098e%/TKajgU(GS%7tgPKUR_,4l[>\T.!f_F%sRB1R2@oOgg+YU6MBl9t0o9P@m>(0+G,3MM\6ij`4Gd"/2rPJ\1qlY.FK`2R[gD>F@Q^%O4T]dPT&E('g<?=ff0'V2E(DJgicDe@Eu-Kp)Fr,_'o]$hc+]UN\!'UjFk$E9IpqND;D'BE[,13e!ABS[Z'm[a%aLDY4];fg.&8n%7SNpR<N`P8Mc4@/O*<3aC!VpNLV/ca4f>/754OlM+BVQm)^_.+qRE41n#3IJN*62.qT;hjWRb@^rY0m.D1+$J&pe,g+]=\P':+b5%PG3_pR]Ie^hW,<GkVb<#_24tHPt:L@Y8\aEG,t^K@0\EdU>$\ccdcS+ah$UeDJN!;N$MVq8h+?D.SW;<4)eUGh6&SGFNq+Xfn%<s%9$q]p>2p8h^?TVVk#P#(29\W:9>h\%NnLPoYF#D^QASD$,F(0RQ6IN(,[q2,'et#<$QRPA9$qQ,>,)a$<J2?<JY"U$FC;dEGk=ai%=S9sd%+ekn^%[OI]Hd,dBAt7/<NP_eM+D(D/M)7H924)$B%kGn^$-9.kW(N&nVO/LS1sLK'2O&/XW(`UXHK62>YlB7[/lRG)ZOKW%Rqk\I[BV;<a#H\BY+UTlmR\]j'r`<).S(At>[^Ne5#I,R;pc5I-u)MtcCE;l'1J6Hadj)`@1C]ID@DO%^m'.iBWo4fM>)g:^*aV0%r[LbWOe))]@F\u6e5L3V/R-c'h/^SJ/p.f(A.;38H2]4H]OE/Mk``;7LIggF7EdMQ<Ypp2m$94A*nE=Td*>kqVc>ZKlKD1,m>RJ8%i]/;n^0`3]^8E<)g3Jl`/g\hLdk*cRFS]t6J&*?'L5DhXk7jCC#bNS8bU,=*>!8`QVb_msgZ0_k:Np]g#H@<;/)(pu7>+Sc@a-8[%e?o)uM"Z!eQ/n3'a`H'UMbcH@=O`@<S>R)8:Dl1*aA]mi;aNC($lke5#+dGX(*cV@I>g9##s855:Xhc:BJ8jCY:)icajV.MGoA5<%7s?XWH,Ch%B:I5Q5?'/DHG[tAShY$Xa=WIMIO/JVT75qiZ8BS*OodJW4_?m2MBXh#)83hsF5>(W.I-k79f6)Vo(E>Q;2Tg$d2JQX%8gpKmENba3.S*G0?bCPKfS,3<UEJ+;rO8e_,9n;mLcsR^1R$1?XI9h83E\Bdm')?Pf/("F=VF)2Nk@O9P,.<MlWI^27iAq%m:?(\%L5D\j,N[&H?J'soBil<Am]g3il3_B5G/PH(NS]gj5/L51Ocr/&YerpX.N36I(r'_nJ5Kj@!#M?TY%.u8";P]":Ecp/#hj^*<7qDZ%_s8>S2&gQHPXGr[k-06;Cgoe0=qJdmg82cNVQ'r2?L-NqR[6Cg<`@BK*Kh*=TqXEO8.e>hM`"*c9GB?+,qlDoLs<)C/18"d)fJ6U%0UEcsa#PV2@aETEDFkS%n'^9QgU"WsG%*U#9c^Jr#OOPBp5i@=@PlTA`[@@X8md!XEl0(s=5>Dcbd[gf9U(T`io?J`9r>s@Re'HJ%m.&B15"P?cYM#ACM+I1d\"F0dALd!%g2*5?*-lnP.7qp,C0I>F8b>5ec@*Su;K&aUoEP71cVY%ma=Ig2qeSq0fuK-FQ`(7rLRUfU%H][M'-Z)B'6mOKW.;V@`;49CR+(]A#N`'1\MOmbq)P;7hUXqG#0&%"@+gH-8&!U3Z.BK3)ES.R'WLtlL.n$jG=?Y>IZ[R`t]6?qJ%6mT*`;HQ91,8G&DMj1W/[?L0<;Y6H9f'";JVnWUU9.M?TY1L%Sh>$-%0JC<^eufU?=))jopH0P"lFFKg2YUQ)eYCs0,:Xn3H7iVS%`KDDZCWRL\\`f06ct?Fc"t"p3bcME+F5=&kONeuhPJ5`SJq2C>UmoA?JlH+'@s4!4:QU+ZF0u;eKc6gPe3a5U5jO"#YN@hn\XjjW%hMu7XaP.rL6n*FV7;H`!kerGM:dXl1Oe[!86m?Rq9H;^g.8Y[(;P<7G#nj'E9RWjp5i@G86_gA@'$NM$A3RPc]QQ`QfYl0kZbk`=%T)l$\3(c`,O*AFO/jU4VYJ]"QG%B@6#APB;(eL%.Qdgj35;``r^54?gA*[-P'"2Fa/o_P+::ZT/G>2jpOX*TY.I7e,'\V?m1%(>e%&i]sD8)\<D%`?fOjVm<XdhkB^K=2TYLcnnq0r*5([\+e3-6]SuD@9X2FgP,t4_\Dc/9=)5*l09td;^SG77WA5?c7t3clq4!Z/ikQ%4UtiW7Ej>XVjFrQg"V49B#QHafV>j;)+koU<^TRnnWg5\Jd&,1ALq"r06:hXY:)icWG.>f4=)*7.h_nA9KX&+-lgd8P(IjN!/Ihi%1GK-.0hFK)9gcj4Z<[r3D:f/W-6h!<P(F#fJ5VUd8X-d0WMH&Y'HO*K-+ZX1X[0r;N?gYs,,ld@ifi0lM!\<Q%q@D61M1`MBn'a=%i#T(XCH3M/D9*A^'9UE?J?WJjG:C[:gWNi6#!bp\MN5<C2*/",rUm2WN>F!`FB&&%Vj2r&3+LI#Xit+Wi>g9KOATu8*c2ueC6V?h%c.gOBM+H`B-"-siN23H2*0TY'SlV"UPbR?j[)OJZW3LBPjG&Mh*P3poA[S!]PeIWC[XW?T'XDk@(_7Och0O1O(F5u=r?>r";H`E'%0rn39VLhDufdj.JP?3tUd6Q/!?fVO^f?Ofm%22MH`<H4,C)[5+HF&tHl="M7I#LFcAb'Gu%$&sj@.b"mb,C/Y+sLXD8-79WET_>T%"@_/4F1\/,+E%ed6m9-978%Hka=ks[5G0(UL.-tRl&$/U$5D1S/Pq*<?D+7n4HNI[kDE5,6kgB\3Y<5E"cBI+VoX5m'QG$bMOn8j%7D$kdG<[@#a$c&Vc&I/S)'r]#H(`Uon9Xkq.lt@;cOhB.o0>oJT.<eQOe!@9@24&1Br]5ha^/OJ8R>9Zcr:jNf(^Fb[YJtkbUD;O%a:kFVA*L\qi!J%<I?-h9Y\*L9^=5hdak_B`/.[P"?-EI$<IMGL9giA"r&V8(S('8ajOl(u&'3KMGX\SC%5b3WM5TM%[AJf?MMW]6%1E6^d@lIGFN>1rRkBjc!1&d<5gK#!j^n.]/c;;Lg,Gg,#N1kGe#c&<&<7H9X/[]7$Llhh,-q1VEBal\XKU8(H"'8#-?.d"UFFHQD%++"j5k%<Q17jCd!6RH7ffuBb^)E&\6M22X<#fG=#.Dk<T=lTeq\`>O<g9n#UM4hba?AEj''oNbLFa#Ms.I9GhnN8r@GTl>(&Yoae%VC"h!:S7tkc'+1;7-%`j;HQ:Q;48DdNj@9(RZpm<U?C%5`[@?QT,6GhbPOd`noS`?^(X;Z(u=;1^q^W3Khjg6:6@kuV]Dam8>(fA%TZIlOQ=);K7%[^VI_2=YFHIln]abgGhQY(am;a7/NtX7KGj'tNQQCV(VYb&=We\m[N-?DP.!/j@QAQmGV%^`D&.KBM3?),MBcQs0%;Y&QWh4bQUQ`'hjLO6qW;I:B5GeZ@p/*oUbF]^a%dlo]9B<Q;k@D@KJ_bF]9E[Wf>/_^jO#s"Ej'm<^QQ&8%t5Ou.f#/E3e*`7SS%6cgpa8.`Ardn9aD8G%-Yn''ip<f,JQjif'0U>VG85c_="YTmiYF.,e%dqb&ELkqNfc]Siq[BrR?G=rb"S0Mq_qBR5=!^4$FaO'&1%(SeZRXL_i&,HIF)@B_g;QI(NuCU4M#/<sjDF!XfO4(=9$CAKA:U7HH,e0JR'J)o7%Kl1F93\Kl9gn#a/%s]HMpKX0<pr&BZO2`j:%OD^G1np9J]aMMIc=N2'Eo#g42MQggSjn7/aT_Zp5ZD>-2>FL?n:*q2t;a>'N0MReFNKZqZ7B$h-1p-::Sns!ADo3bpcWK8M;@6ns%Nle*$Jm%#3OIR.<nhF"S]ESIg]`XS_TZi-aLt!!XS4j8_Qi]n-L2!B`D4F;B,tcR%C0H6'8JtT;NT:LK-9"UDH!PZU`:G:l.^C%\%=.#$p_p!d=?AIqS?@k1;QBYIX9,!H)HqD7-b99RtR1S&pba6C$8qgrOBoOe:AD<7,QU[R<Z,i-rRZGGW:7d8ESQ\O"s8BkbUZ%u-%R#W"Z[[/YHK`-@6$A_cr$*1"'PGWq82VBU^G`u3nU?C%5`[@>b&gZKRbQDaMGhS9^Lcbj"4O":'Ur`hd85hg[6W,n5',1V'1_F5:%e.cSJ]dK8m.14I@.U&U*/4#u8D`:?@2<9G:?!S,Kk'bC4jRQDZc#1Qp<WEt.QDUNQ7Nu&OM!XDqLfJRG:fP*VTs^VtM(VY_DH#"&%S4KZi9Ps^EGN]?j'X\?$^7?du(<+1^.p4s>NS4kY'b'n]DDu!*),%!^h%S4(@-;^9Y_l^g.4WuLQ+=d!>l$i3H;-hDCgtIaD<J(I%Hc<qNJb"E6&M]?K=cl&3a9ifV3O3CTaH73*"HEIEE<Ih3"@[kdQjXnE:DBPT<4'X\3O1Ds;eH2M=QIQG$Vk"!-Hn,U)qJVp_W_lH%N>m:Y3Q%h3hQG[L*[F]^(*Q+7FN^.-^RL4?r;&<Sdj8r'M,Nu8MUq"0;Y,`6@k-DkM5:k%I%<<d/'Q>gG&)8"f]d$dYD2qm:7]TL%=";L"a!A(Q@PVXAU6E.)r&h)<q3bI?e&bj?74EOX9l#-=-d3ZnaO;p\H,:R#M'l\imdr@D)*!#'&pS0*7L;1c71shHo#)1q7Rp0`%JG'%?oIB>5cN?thnVO0]ViZJ-'baAlE!;)UpBY%Q&%VW9b?-[K&sCEKaZ*`dc%M13r2>Sh&NRPM7*pMM&F*sX+H`qK1)%2d.Cr5B%95K_7gMNGY"$3:oM\K=>]`0b!bkHp!enGW4ZL<2rO\<.&AN>',n-[B5^81[=8SK@MHc?]&rW%;[rut1t@hNDajoE%Wj:c+g2V"nF%M'TiLEb*sQKNg/YWP>c'I6[\qWIU[sB3;Ko^dqj8f&jnk_%F'S"HjmMpqhZPLn),(.UmR0'K,Q.m8>CeF2Vb/nc[TD1fMjd^<"df%S8`bZ@Z`$3he17#!)J>(mBpe5#^#,u)qo<7:D5ISCf)@T!t,Xk,fK'f:Vb94/KF.HRV&^O%[_.[Ogg+YE\'T\:&"G$PMZjho%q.s%&kg?Emh`!D"H>?QeBeV&EuE=*/$lcKWTT(#>?arqlGT^?'a]FKUDD45&fN5\&!YboS0LLc/PQ5!8>,/^>9jLNY0[nJ5pFCr4e5:!%$(KVaq+2,^5rE[^A(t\lL[RtaDD#4D)U#At]e)9MP7Y39*!&-<>DS0V>>nJ)#2nklQRKaB9ZoRU-ck.1Y^ss+3u09^h#3'R_]hNj%&Klf@<XN;L(pWae(qQs6&4;IGL5:+kY)(K;[3p]F=X&G/LBr299EZX]\qpQlQj>1/\<"qPp.M!]fl7I:Es47\KOZB?[bhLFY['$D%ZGhK,ZfUTt#TGDtnbj)0@tl[X^!\aoQa%8LH]Ga%k`gbUD^ekbM_*hUn]gYNG:^%1gBu7X&L0qiG=!ilFQJX]KP_2jD:f/WU4C$r%@1(:;M#b$Zb`Zi&"I@:#aO5-O@`cB%1c*4#I@`0u<3`hb3`VY#">&5GXC5s`;9\s*2/V*f!+6f"?3b%"m"S%=Oj-[)#ofH#3/](O%@q%7k'3]J<m6QdYjA&@q)HrqMG<-T5MFEC^J77Ii@*/,cL-mktA_U*%$8JJjhftX:_$2bhq2mlj8fHir*@>SrUIKm1U(3,f2-C#h%'\ST1,$!Zi.9Q`d5t10p?1<`.TH2bnj3\riaVM,;l.,U?Z&4NtO[.`d[:.h(E!/mbDK88t@j=C1LqoV\*O+Cn[V#G);h(HEb0_8l%[n#qF;Y6KJf(^FbQ5$lm0A5bqjQWV44ag;g"q:6d&&e/g0&0/bI'f]d`>d$V(#.o5<5r7#1_J];iW6BDa+GSk9chOK#4paeV<GE>%>,)a('cV#MQc;5O)&#Yl`c,`/fHt1FMJXpTCO<'u`]ppSLIOASk_QKS-QaYrV^&$p8G5cqJ0irR%%<>r56cJV2^sA\PbR?j[)No-%C<d,DhsOV-l.F@'.Y]lKeS6.\6WT%.;Olbt,6LNJ$*\WhMY\Vu;"u\46jh'S"-fqM0doXp(Fa.ACF=a-'Va>][)=;K/;HB.Db1<^%JdrJV?+_F2@(=s(R&WY66=u6k.(%-sMjFR+aK5;3;ABpMdR8c?p&kejqZKX'!%?L[2*o&/9$q]p>2tMl2,Ian'.X\UC(2c7Q7`4'%Tq6>=k(breir,>5UL?];`1Cc<&&(<O&!'<rOc%(PJ;RofJtd'!U0oU#*[s';.6:3u96;AVU!6P4,MaJ>FSb:(H57r;1\GX_C7,TK%UrAKS/5.IB(e7]5;/2Wg!o)'iUj?Jt@)^PY5uX0hU0t,HM\LPZ)7iO"CN,E1#!NNh+tZWe#[K[/bP<3aI14lZ'S__3,PqMaRtgsg%b;GnKKm"QB>RpiP6bhqs+3&+H.R(!WlmFdfdj5?l)NLM)ND0g%Cb^^[Ad]l=r9ERg&2>nMV\:7A<\sJDOe$TUPi&oD70EZ\_u`A(%'I\RD-][+!V<BiqXjKRtn.hlLP+Jr"d[@R"IpjsmfXN5DFs;CrobsC^ltC?H3tZ9+Es"s"o763C'bRF:)LTD`5]fH6F,[J,4;/T[%U/ZpPMUq"0P2B2!C';lk0+^-9)tmFSAe+Bn_OBX2`t^N*R)kD%7rr-H`t@@QG(1c[@#%:AM!U]L$s<2h+Z1"\0[a9)*g0j?PWX.a%\+h.?r1]R.pZdK%SrOKOAq'4D4^tp[D'68sF3P*INlbP_d$?"fn%_&5+/BD5&5eW&fJB+L<R2gd;t2spmI=Mli0?sWF4YMl:HVo$%LcN&KR!A0H]oa[OJZ!odHQl6f9Khp!,o<CQgaFbGL]j<*"eN44,YqYr#+j`fH(sK_BoOe:`4"--#N"2tA!&-t"7p9A"$@1%eTXM;%U<K[ml=A1p"9A-6?u0kW*\PGc<tpd2c=l36R.F`l+Z/0?2OWUuDS[\--&p0HkS>1A8t3:0?LN'X`)?<J%Bh@1_X-S3.JY`5$nc%X%e2:\i"iP)kP09]1EC9A7o<'Md-l36C]PQp\-lViBiM"%,&>KP,;2UB$d4MrN'&(SB=aJ(393C$jS.,`cD%KKlLjJFOb],fm/>b$p%#0)kZB*3+Hc-L4<*W_$C"2oM4g\Rp*-u*7Z5Ct`m7M/n"&A=s82)]I8+&J=d[YT7K`)6&E!8fVZO4\$XNA$^RJ22"en>:'?%M0ik%K+k(>+2D+n!EcZm"4h)b-V36AfhOXBNiEb<HN^5p7DGg9N@qMi<ccu/QM6GJOX5qfVg<8jQhT@Ua--o0nn?-'l<N\h]+p9!PhLN_%\hjls3SA`e4%>iH?@o%o>].:5=ek7MhB'K`9$q]p>2p8lfiubd?WFdLilODo@2l)p0+me-dtH%UN0!OIa&l7eHo-H]hL[@%V>TWu%dR463m-fJXc#luB?_32t`sO.50q,1O6;hp\'s5kPQ8#'u3QBmZaO8c2('KqR0t(hP?:+SbVSj-@p?@;ZP3-*F'1kH\8-7qYR@XsQ%N'2.`Q_$0ggZ%EW2K=C3>b3oY0lc9p_]q[i!_7=^oYf-fIGnil"J4<d<b^&O,`kDf,]QOLQFLrD/9-(E.6?mSf'";NCc246g)Cf1%_HLU-,)E^lfS09oKQ!oMph^['<U4=SfF'AK?pQ4<)NBW1^mpMiCtsYf=>snD\Tq-5/o*l3*qUmPd;LL<UD$:#m=oVaQrn)Ace-hO%Rr)U]^!^fYaZtjoIa:lHLp8eWVBCSRPm0rO_qqb5J&d\T</aNgji3"2F8YTIRQ=n?@?dNde!L>6COD6l[%%^'MFF-!-r>=2r]O_3%-iTRck'/YCA&je&UCIl_$0KkSUl(.=5naj_6T=@A@:.Z`(M]DbFdig+50BF&cV:Tp<7CUN9l#.9BueiQ[uG1[)^_.qR!sL)gh-`-%ZB*th<_W\4301uS7#\$(+U_3C3`+0k,\]/%D"BC:0+/WG0,s*QZ2dCR-`lDX7F.rINA'jUhDK"*Y[W`m\_=$kf6i)r@(tBc%U1lO%:UQtX_2#K?Yh*9c^k,Cj<E`3e,cPu3[]*2VVTh1D2n,c1U/)Jthc-sP-^L41*.Et6NesU]`e#S(L]s(udKPrPq\)[@kpWso(`"q?%#rE5%1hk0URP_=--]Pkf7F.rINA'k@QIGc6>Hu8uXIL5lbTc$?L_Y"<*Q_kOj@Za#n8G`s@W0*<3t5*b/>ic2*.TnVae3WjjEsh'%#$4G%A%[=I\3qdW9hfDB,3eTO1QK1X6EjoCko(@@?1tdP:eGOL9m<p.YJdG^h[Ft[@r4VmUj:<<82\#2.qg+.HhM[!`ei_f6O#C?%Q/.9l#PNZb:[j6>oUMB$p``M?5'd.U0R0^%jQYC62]'TS7KGlG`mQ_Wi8]I+Z^%%*mOZ<5JaQ*e;W@mY$@;Wbq2J`Ip^hDk1-QJ4%7KQdZhB'KX9$q?f>!irl\8lVM2*M+L0iF6UmD'"FF%d05Np6,B>kK)cl"diP*)enG/Oq8FQOktW`,eVh1/^J=PWX:\F%JA=3os7[%*/\X]7@)S>/oO92(0R*lSa$A"mh)m!2@"c/gq8EkRMM305cjq=;N=)!/^gRf!/qda^ucZ,q*fU!dKFCi`dk]bJkI^BY?fO-2K<ha%X!sK=Y*_1@4otkILl!>b-%R9L"]$+H=JF=06^O!)+HU]";:%mdU;.C3T"ku/,"jADbf8'L?"E2A7Z'6pB.U?aYtQ\LF-_uM,p*)"%aDGccQ]Fdj,oaE`&r/Pgj9$GOU6a.o?n5&ANrh`ib=L$%BV\0;$R_/t9GEHo;U'"'k7Xe\L@(j-2.#*^,\lp_WI?&b=D.>5;PWcB%b!5/':mfNCQB?ldU5VdJb[opXknAd+C$Jh&Mu9*jKo].k9`4Os/>ES!6,]:em-cAP6;?N-dB$>qU1bUHN"c;;U'Oko#`9H^bls!1%L*9+8De`IN'2(nKk4D]]@ZdL8ZT'jR=9<$2?b/JnC[6,/4H':kj/[\um(puP,=l\FFn_OX+OcjC$Z'(sC6UsqDK63KGi*:UMGilO%lWHQ4$sfhqa1O["T6]LsDS2Z!@&&UZ9hY;L%rC$P2J2r6gg)TU.hEq=*l87^irI/:+KgM#n&l+VDUf/Q`eBh[7<:`N*l09td;Nc'%UD$.cj0.'2XH5E1[kZO^N8#Z\2X](2AnrHX)WC/^C`g1cJVZJ?bnct:_EAMt'+s)eq1PS]b`8N6gq,Qc#jhXIQJ`LS68[&r`YVd`%B!\Na/PosarVk)VJhXAdbLK+EL6PjorpDZkhK&>;Lf+N]()8j61[RZ1,$-*K"o0tm/'PTH,t_0s`6bjq-]3eP\X@kY@Q44DM52/?%s"$$s'ju],Z'eI",7&1OS?:Gnn_VC@5MBL5WU'^&'bQ!SoY!H^STC9(Rc]Tm/_U;9,ahRFg,Tp9cOsDlLkE"r4DpN'_EA=X9<$bm%G+d&-moG1pk@,i.b..1sLljM%qLV\TU;*@X87TJ6`2q6TRed]B@oktiJ@n$s=-O'>5gpXDGf$9io+u=:.i*DFH$5Y^o9-u'S1<:$%%KiqgA)8dZ9>mFh]^[1:i>.9CLrdE>Up,SaU,;7.36L+'Zm;3:&H/K#2*/!q]3E9.^@]0K@L;c`<%k+pO4_,*0266DWl$(:"#q6@%Skk]>"chMQ3G4GB(J3\dM$WGc9u+apJ"R+:k!aejZj5[Z&\OhP4f>/7^;puAV^_dd=QF0s(b@cM$Tu[;KtosCHi6_sm8ilkKW8$A%"@Y][9uIkg23@ktpV[\l$7s$^^s[:G@]B0@=^Ys_`6rAMiD2!:@rR4RR6Rr5X3h`Pk)AB#c#%#B;%o'W'<se91^0=U0CVB5-q2I]%BoOe:e=72u-JboI'D>`bAWm1-3M;>#*U52!8G8QiDoiU("`nTR;S2BC;,]_BRj@>g'$(fI:;ZQiDU+BRLRaMA*HsqfFCOLMk/,)h%V%jV5Qg_Ok>/!!TCT6#EA_ThPqSSV;#I]m;0oBdO8Q$!:7TAH!>C1]"m.<`5.iR7CL3Es9=JqI'mZaLa$T5'67?2!9c1m!2gknOd%Cu6OUXB6*iC8qcr##7dh72cV\YjR%LJ(k<n:r@GgoaobXYXE<WA'ZnT.N2=BZP:N`3Ula(9+l9KV.bi_*1]Xr-gaae0QL,N9]&@.%04k:&Oq6K\f3od=jDk&!&N"uM%T9f,,%r1+Be&&nW.NdNQYaqS7X;K+M"-/[M+c6;C:_A#H*[A%pr-/4.i*E93IFGhHje,b1m\ZP%JPiRZ'5MuIPDJa>.gnoh[eQL>!_JSoLGkb\;pFIRC)YhdpQeH)-+@1//NAk\NCce!'ba.FHS/Y(nfG&f8TWRhH]tI*X=rr13+=/d%:6;8HlkWH^OK@\j^bBK"VW8D+g.Rrbb:Ap:d?pe8I$(>;YYEh)=Wt&'CDj.;^DKV^]E2]tR`g8BfZR65#6YWc"`.m=WI/1N5ts\'%?9)KJ?TDjnHC8.onWf;>PbR?DknY@D._&qsrdsS8L..\M)ZS"pYe\^m%u;PHNC95XL8BT;_M&VR-6e!f@TiX91m%dlH_SWP$7s$^%^s[:G@L;d&N*j6qm=pHDgs/`/oa<`*k4LAR@l]WoCh"8d#!p1@ZD@`$nqH012$p8;mM8j-9.`jU45$p+\_f!B-q2I]BoOe:`:q+B%]5Lg4aenU'd,V@u?J%FSc0+00('LD^@imM:d@/+U_#\no[^;.CL?41)&V2s;(Kds6r_c^%[quNVZj+<:JkHfPgTG1K9cR^q7n0I$%dO-tI**&67H%jUl`-0n1m`)@)D%r2Y?0m_OrT8oUACYU]8uR36+p+%Ah80LWWMQP$,?s:;\%C`9V<BiqXjKS'C^QTm6-97pT!?A"%:#QcSH[WbI=])1P:`>W@V>(+gEIh#n02O'^Yk4$SJG917=LE:*'GW/^A?Km&,,ZhXa'I(2SQI@*M,Zh9L5Db_2AdW0K#j'k;acX^%1F$pnIJ4kLYq%"m!?jtO4>\Mp*5UDD7rX>`m^MLb6Al9*IbUr,AKUN&7>>W.@2><jD'OeacXk-d7;CJJ/J["XNhH1a1bD70ClD1&%JXmaj_CG7dV5Rd_<osa5Eoe"3kVkB$d>9/2q`TGuQYh;l;-uV[dHgO_M5,&P:C)EYZ]\)u<BIl2Ul&F^,Wu837Dp#['ntRSmYN.Z%M*gj'MUpFuOJa@:ALUuXB1s<(g49h@hogQ'mUF!9#/,)r%V3C5#=Qr6B0&R]'e(AA$Ae.L$JTEI;2QiH+D%]rT2JE]MN5<C27gkl%V3&^go=&SU,"q.O)NP114&F_i&Tj*^%KMaUh<;sj!o42E>=qoaO/[t,j"URC]2eSu;8iP9RB&Fs+K$W1W09,.CNO$bfb'bEM]WVB%@:BP8[iW<ZNioV(2I['.P?hfmfUS)^CYD18,V-Zn'L'\l70Ik#Dnp>NDc!fNY?'e/mc_eB9$qQl>,.!,@H$+RcFmYK-1l&0\hIS@%2As^&^#Y#uaR1;LdZ_;.UDG=l?]a!T=/I;g#PTa&2/G'@duLP$g"X&G.Bb.BC<V7+2*UPPTVF^Cat8]W]"EMS=CE]G6sXK8AKBld%da8Pt2n`=$3][<-F",YP?`#"k#7F4Z23`eeduMjRg"TY;8uF(ZC!;.&2*,`!H;As&rO-0GWGXmM4d]=aG'[W^o(aji:*(<.$g.-)%,<3o4.<YE5R[T$P9J$QdSe4"?I7MlPe0LZsV+XG^PEP+3kn[XeWAUI3cqF!67@)<8?-EH`bC5Ld`A.=B+;o^Ir']o1>,Nl">RMZK%7,/i0(rK*U_n2dC5.mS[T_gp?%%p[d;DbQ@(8"^?I"m&(9mOXp;o7$@cibc&A/!b>P"gQR9A#jB;CCVU@`abR&i$]QRNbClG!E6b%BfB2c=@gjQ>i`t(D3nS="VO0^11%*<D"9#+@JO5Lp:TOH-%<f>FX"iQgn0[-_,5Dj'!`qui)mk8IoJ9$\%0MV3ChpIE_96t\1>-Z%7ujT^o>WGN#McQ)P%>??hX(1YZW1)Gnad@-Xj!g4L(LQoCIo!C'c_C`U53da7VoDB(DVpB3YuCGblQi1fb+Y>D:c,6-B=8V`QZb(%l]G4=$l.iTF5k>1=LJr5`>?Ju@#L&&muA&9L+GVB.=As:M?kI[9n[@c;,GYR%Wg/dF,mmrjHQJ(2`7_b7?21b1k*87l%Y$@HjP27%%sTscA_]U1X;/BbG#MPghD-nU1TU:5H'$aA`KhhpYQoJ-1k<7m2dW:o'VX+2DV^m/D\%+>.=+``COG+jU\H0*^1*3PgWgb#@&m1-%Yq<tQO,=I`Fs1WelR^hk*'M*m@?_>;@4j\G1:J`e-1!<Xd=tpt>2-Pe.@2GNYGl2p9cU^\b\?\VM'3jlIU\,#(pYXhaH4s;5>u)-%rK>%nD(-Y?-mBETJtbLBbWTqKV^P!KWG.>EEb,!@=np3ijr"h*p^[)cCb\3l<cG:Hc4>dCUuLlNSY$q+6EL.3H[g[tr.''QRYYJq%&JUOMYYU]#%faXWiXnJ%74EOX9l#.9ac"taj=;!k_V?keSL^eoo!J8hj]o'BXaY`P&UV0X:/]51.oR%2b]U'BI)IZd8m&pP>iIeG%:/Qmt;puYU=Me'uo,$l/=%k.cQo\iF/e]_52]fDD2H`n@>^)f7<`Uj)h.Mq9W]loJ-6ekCb7V(,@qeQ68X@'.b%5ie.E)?W95p#g%3H`P,e[7_Qkk+\:N].9F=MGAF2OgdMj*1MWS#jg:F<d/I;JPs:,;g&^bQJ3p=MIL-_AZeT&i0RZMGj):Rb%8PP2/8]J+/3"5`m@n%0?BF1"UIJXkHm)s'h1pO]Ek2,)-KJra]d5IUi=seMB&S-/:^R5$%Jqr\-5.;1@GR399c1*e?fE-MQ!d8>B7VLdUdWt5*85aO>LlY%%H/O)oL.-dY;E*FEUKKV8>(eVUH?scO9+!\iX&pgMOmbq)P;78You,bl1GZPA)q@uo9`[);@<#r,c`$Rb^SAYp#DZIG>_I+,Ut6-%7k.5$F=Ce>X>E>6$HbkLYHZ)9?Fa$o`\cN2M`dQeG5UjX%22MD)s:Au#R^1Xs+[ql"eYaJ^l#<C&[CM7g\I!nYiSYT6?J9]Yj-"K%C+?sAVnKrXJ@onOH1%,=nVO.ORfK4Z^?J@<_SfCH.>:M6#]#gkm)^V&#:;h8k#7X7;l7_c3\FE.T+&7W+hOUF`2ZUT/ks&r1*h43%;^QcY.=1ENDXijeTeRF9Se5(ua:b?a:FlMk9A([?A1@<g7P'OsCD._oFSTI'/.i1>&S#XHk$Ej.Bnf*CZK?.;$(_BfT&UJWScK+J%09B;QWOfaK`1'Rj?2!]!o0uUMXPMb3"J6q4A22?&PTL'n-6bN%]S0A8AP5rjmC)@]<d;e<9"Et]Zih0_ZL^',B/WTYN/8cD0U<Xc%Q@ts3H5O!Bc?u9!C%h^ENo8#+YQQC>l6]4n)@Mjam3jcRVM\7sfrHZ+P#mmBkL?lY-_@WA8K*q92bZ@$f_E\%\MI]\3?-Q3%Vk]!%3VS,ReuY?&GH:mu<5sZp1^1g=E5HSQVA/isS2."34670QkdW-HUD$9(ZcL/NpBla%57a$%pR<kOZ#06!<Q/m!g\q%MdG8`QT@/me%TB).^,.dYG(p7\MU?oA#d9P8YDfeTLFPIV5d>9)#Cj#L,%>udjm0q;l!FopTpH0l'*Oe=&Q;FP(Tn6JpUkhPaM3u<f4c8*U7?60"%a:[2C8'eGsUYTS:-gt*I@H-LT)s#!lSe)HVffFT&k@mHY[aa1hq]TEEG$^4WTkYD$8IpB9q#Fh.<q3>*ScY=.Ri?G0m3.fA7B`\(%ND1Dg>uUQ0_;>\87t,V-l]*r6`UC1gr=DZmHgc,B.T:FNhX1V`,irZVUreb#g[TsmST`MIrSBWibIS^T?:g%%:t$>TGeub:)#+/h%,sRf+("I@mQ^H<&O4aAha/B$0>I?O&JiI-Kf2Agcne3<IjG99]Ee0e6Kr(Ydga"+loDdlp/q&loA"fVS3cW(QgVs-H)b-.Ik*n%c%a[9lD&"dIj2KMJW&a=2b!u%mdCYM/g3j<Zn4V"tVitg:(qG8X[7gN]9WEXGZ35UuJ$Rl]iFGij5?/gM*gPUi_j=BB9(74Ijl`m#8%8=R!rC[Y-tSD]O3clFjUD&lEOrPVm3RY\I:A!bj!R^HC2"NI"HW<@R.]KP>@Ud?o8knY@dC0TU!/);-kT"L<%ka"YGIQ(_'9n)Wu%':Tg+4(<)3GsA-K56=)=6?L>D0Y\NgR^-:m8:+L+/@namU>JqW7OOLb%nF3@nV2msJl0<6Wo#%eZ)6^jrk;drdBX:&Kr^E'0Z6h%%_rrC86kU:`_D\JEW+a)K6e4/u:#ltakVj6Yd>=^DIao5^.jU.fpc3@_N1kM3[DMZAlc>2iA4t('[\\gO+=V"E6u6"9-0+0E8sZKs%>t@tTc-Wi;-^ME,Hi0&Z3hA(rjMef$QNmlh/,u')#oC>lY^%sCdH,r(99(=[A]`@g7$e,co.0j:afbl44^B*WY:)icWG.>f4SenV%G6b:4=RsnjU3lDSB'ZV^26b&<]PCh&>BDN)o6OS3H-*0F"iOJ]_Jl':'`!`418fKhj:nHS\1:aX'1[LM5g^(a%22B@PZ`)EKeU8.%U3V#snS9J?(P*?-7a\kJ<)R$t.SW<Q)20cZ6UI7>SdF*!AJF]m;Y6KJf(d1IhdAKonc!mS`01uWp0W2+:=tCt["c`B=ZlkBXLupm%F5)Qp-09iD;FKU(DHt+r'2=o6p=Wu[EArnQ;(0?a7;I!Sl*Sd,c<n4AXVb2%'!D563mTA$:E^f!/eP.5;RtPkX2_0b1Nt?m+do,9%>ZsTk6?Jfe=Lloc9N1JFb-Y5lSs`n^MOmbq/O&^ca)\6+1Z'nVPYlBRlL(n5'p`[,H6cHBe;U6jZ(ZG(nhuJ0'a1AeKh;YQ,[fYa%QWUf&:8O\*@4b,nNk@O9Pbd)QC:Zi(Q5%-Sl+d`A9DI5[#fObD@2YihJa[4#=tkOKpppYAo@l`S8`;`O5nfC!EDG/@d>=;]]Q44N%4\+?Mnk)gPS=8%(`"Tl?0n3nR+4$=!o(&%e8S<(P4^eL9;EVT'VH/(\naLQ:8)C*X1abn@iJfZ+JN`ll2EL`$U,7i??I.b,HU,U.%d47iVH4QZ_NDDYO]b#WKoaMR1LVLM`dO`U<+s5'V-U4_\m+shg9_2,pGG8(,^5/56kY/<:5Dh!dIU$%LFJ`2I;2UrDdi+j'g23!P%Ff'G<`6sM8F4Gi=LtOMYDTc)?eW22&A1lK7c80U@D+u[W*UA/'$Ab<e&r'me;WK3jBMHO8j:[11[d.(+'15;==fmN>N@0MjSK$.5%<JQuqq%9F_ZGgDJ;bA(7'kl-#VXBPJ;^HQo/Ls7XFI#K8NZ^oUT2Lh4SRnNk/gRp"k8'O(\hNDN*G)fjilH?9WXe8!o:n1@mgW;^%IWP>q@auWme+X_/Fnf8g2$qYR*FXE(7[j8MNU5nkNkD)#4f>/754WfA%\OlU!To,n-bl3khmi4jQ7RZ3qDF%T7[!02b7G[K\#lSu%;Rf_hHMkN:-K6#F(XcsG;D4iuBZlOILHL`a4"X0BBVMGu1[DgNgNLJ&d=L_8=#GBDD#&33$m`G$\tAu<Md>H6-`T4Z<5lX!9`ad<%S1p24;c33[GFGS4LSn(6U>rCiND;%lfUNqr?jl(NOelh\X]YVB0;T;Im4PC06IFImE8B#hU,:,W[n3_;YY"+FOW,#I8A(0ZfS6H&%UhIYg;_kiP;CX]g;Y&R"h4bQU-^M4$([l$<9Ipok>Eu,':b[3,Db=>7H6mK%W]]Z$Td`iRo1%_s#cR;nR+I6gOk5i?S17=r'W$[j%%Q(<8OX4_cAEei*,u6.PU'$q6&QWn[k41(BfM.t#D_B@I3&:F*N/+2k.3_JS$;]mlbBCBbMDEK7aB[jV*B?P;3pqmVkerX^8]EE.%j)16j1bVb!RkZut]E76-Kc<373fl@!`-7(A%'T3[;I]52@WN4)'a6u??Ga?-9:A\h-$(X,$9h=CIRDLG3bN.T[)D%NCNJs3=RmB]%O^ffGpD2=]=*;FR\CLm)A#)eA,GOiFNXW\9Z;sk0I4J$P\39^N@,lp8h'[,ug;mZt)U(2srlgpr'SCBoCNO"l+/#7@1pF>rA1@?I%NQ:1\msl]W=O6$.ZZ5`IeP'`(90),bi(/&Rq5'7;nr"llM9+hYBOT`/RBW!SG$.^Ip)Fs"k?^a&4dW$'54Xs9.a%:>,u3lqo9AFl%GnagHIL\2BQV@\U=E>SHjI@k5^sZ\P]KL9q8+J3$W<3Gb.3`g//2(Cdblr`sB(NuLYPG7t::ZJaG"&n(S>E3(QC!97DqJI^a$9B&%9)nD>hnFO7YFVp?s6V`e55a]H0>;o20D8bF^OQ%3='p@M2uE&NIf&dsJ+EX=lc5[n-,'6HV7ul?s*K+gV_9+YjTe"tq58^ir9+Y3%q*k>@h`\tF^b1k[Q_2%j]"[6lJ)4MGGi\4,JX5qAk[K^5H$o:3Y&*[Q+-&M\S8](n]\h!qOIU8@b\i4%EW`B@`S9d_-;8rqIuA&J%(R!L*AmqiJ"G+g]m%8YBkL+4LP/da[B&W4q1?WY0_/<num8NU:j#^$-343PnJt"ecJ2O"1\\$UQP8X)0`o3C9<o(6jj7BYn1WD(\%URLec@LIhqc*a"*R.&C&ZRHs7R.+s_JXZj5m3T,>gb:I_UKZq7CLHpfcmX$Vk@VElDUfi*RG<g$EheT0]c5KVAn+dS5cu8fI8&N.%PB5=0Ai#U12.sVI1M-/$2Q+5'qU_82<io4-b^&[GN;M4spNEc<*!qU;A2U(L-tk_QA:VC(8)lV>V3[/ENTV_^n$iqLaN^A\S1(?V%aU.^F0*3\bj']JYSbnObJA0LCn*<bf[$Pi`->s`f;h&DjG<,>/onIHHoB/m;/mOr-<ZK[Eb-n#B9^>WYChT2Gc>AQLD#D*3\E*'3%m-kMjBD=AKO_l7H,J@\u.H+L<].[p>B-E9-M[=t1H,FWZp>TAqo4(>h[NunbQ[^W!o=WoWp4\!m"W(F'bGMD6d:[+SICNdIU[LG2%daa>$d>WMWT+F!Gh:ss-%I+dG7]1h/W#OPC3*qf3<uoU[)=/PtlqLq1GF_*=V/tK4bi(BEbWkd#HTQ?%@sf-9ebR7S'$DoIMf-L\%aW'Rt%ecZ@ql&rXdV?0&cE"O#]AM2/k;:HE0%IbKHO\jP))oAu>sl(UMC%&iel3Q,6="Zh94k4aSG,qFhVl+kZFsB\/.?B;mf;h:%rWcMKC1"j648iYNFn:"CG`Aft<)sorG6Sqc6MF5NoMr>We*hNXno)/`aFbIK'pjD&U7QJqEoMH?lAbLXicc/mbV+;iA9Hher&S)g%FXEQ2IJ3nDCUe"o)N+qZM`DM0';rH$0@D]kQab]6?_X,4o6cSii^+T]Z[8T1==`5ZIeicdYPRHI#6/&V0gAq\F8Gg\-Z?rC\+@t)%NTY1bejhFnm?\pBpMoQoO'b%6qot1Oo$+ZDm<<L+rpK*U56'b@ID5=+Dgp%NTE"Z'0tI,BG@1=BjTe$Kktg0mrp]oFYJ:$`M#OVS%F[#[s*W=I1O+6]Yo.OI"n<9JM00ag`f<;sbp>r2Zs5C"3IfJsL?iMY;p?g1!rSi%9rKhFsDB'GfZZ:QqiI=3GO4E<`(]<OLhgYIq%]8?N0s52kRm-F+iqY9D)5ML\Z2d_"'pRhKM_`*)<=-(Zkqd5uqp;9+BoD.jhr:%tk\%ht@s*f4gr2["jPTTn4s75a8Da+*5cgO'1%r;L';ro69?T=FZ/TDd%7r7f9l"'%8*@f~>%AI9_PrivateDataEnd