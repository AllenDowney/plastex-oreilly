%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cltinaction.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 272 192
%%HiResBoundingBox: 0 0 271.6504 191.6035
%%CropBox: 0 0 271.6504 191.6035
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 12154 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD047DA8FD057D7E7DA8FD047D52A87DA87D7D7DA8527D7DA87D7D%7DA87D7D7DA87D7D7DA87D7D7DA87D7E7DA87D7D527E7D7D7DA87D8452A8%FD06FF7EFD047DA87D7E7D7D7D7E7DA8FD047D52A87DA87D7D7DA8527D7D%A87D7D7DA87D7D7DA87D7E7DA87D7D7DA87D7D7DA87D7D52A87D7D7DA87D%A8527DFD07FFA8FD19FFA8FD07FFA8FD10FFA87DFD06FFA87EFD07FFA8FD%19FFA8FD07FFA8FD10FF7D7DFD1EFFA8FFA8FFA8FFA8FD05FF7E7DA85252%A87D7D7DA87DFD05FF84A8FD06FF84A8FD14FFA8FFA8FFA8FD07FFA8FFA8%FFA8FFA8FFA8527D5327A87D7E7DA8847D7DFD05FF7D7DFD1DFFA8FFA8FF%A8FFA8FFA8FD04FFA852FF2752275227522727A8FD04FFA87DFD06FFA87D%FD13FFA8A8A8FFA8FFA8FD05FFA8A8FD04FFA8AFFF7E27A8275227275252%F8272752A8FD04FF7D7DFD2BFFA8FFA87DFD05A87DFD05FFA8A8FD06FFA8%A8FD14FFA8FD05FFA8FFA8FFA8FFA8FD05FFA8FF7D7DA9A87EA87EA87DA8%7D7D7DFD05FF7D7DFD0CFFA8A8FFA8A8A8FFA8FFA8FFAFFFA8FFFFFFA8FD%07FFA8FD14FFA87DFD06FFA87DFD13FFAFA8FD04FF7DA8FFFFA8FFA8A8FD%04FFA8FD14FF7D7EFD04FFA8FFA8FFA8FFA8A8A8FD07FFA8A8A8FFA8FFA8%FFA8FD1DFF7DA8FD06FF7DA8FD14FFA8FFFFFFA8FFA8FD05FFA8A8A8FFFF%FFA8FD13FF7D7DFFFFFFA8FFA8FFA8FFA8FFA8FD11FFA8FD07FFA8FFA8FF%A8FFA8FFA8A8A8AFA8A8A8AFA8A8A8FFFFA87DFD06FFA87DFD13FFA8AFFF%A87EFFFFA8FD04FFA8FFFFA8A8FFA8A8FD13FF7DA8FD14FFA8FD11FFA8FF%A8FFA8FFA8AFA8FD07FFA8FFFFFF7DA8FD06FF7DA8FD14FFA8FFA8FFFFFF%A8FD05FFA8FFFFA8FFFFA8FD13FF7D7DFFFFFFA8FD07FFA8FD09FFAFFD07%FFA8FD07FFA8FD08FFA8FD07FFA8A8FFFFA87DFD06FFA87DFD14FFA8A8FF%FFFFAFA8FD04FFA8FD04FFA8A8FD14FF7D7DFD14FFA8FD19FFA8FD07FFA8%FFFFFF84A8FD06FF84A8FD14FF7DFD05FFA8FD05FFA8FD04FFA8A8FD13FF%7D7DFFFFFFA8FD07FFA8FD08FFA8A8FD07FFA8FD07FFA8FD07FFA8AFFD07%FFAFA8FFFFA87DFD06FFA87DFD13FF7DA8FD04FFFD05A8FFA8A8FD04FFA8%A8FD13FF7D7DFD14FFA8FD19FFA8FD07FFA8FFFFFFA8A8FD06FFA8A8FD12%FFA8FFA8FD05FFA8FD05FFA8FD05FFA8A9FD12FF7D7DFFFFFFA8FD07FFA8%FD08FFA8A8FD07FFA8FD07FFA8FD07FFA8FD09FFAFFFFFA87DFD06FFA87D%FD11FFA8FFFFA8FD04FFA8FD05FFAFA8FD04FFA8FFA8A8FD11FF7D7EFD14%FFA8FD19FFA8FD07FFA8FFFFFF7DA8FD06FF7DA8FD10FFA8A8FFFFA8FD05%FFA8FD05FFA8FD05FFA8FFA8FD11FF7D7DFFFFFFA8FD07FFA8FD08FFAFA8%FD07FFA8FD07FFA8FD07FFA8A8FD07FFA8A8FFFFA87DFD06FFA87DFD0FFF%A8A8FFFFA8FD05FFA8A8FD04FFA8AFFD04FFA8A8FFFFA8FD10FF7DA8FD14%FFA8FD19FFA8FD07FFA8FFFFFF7DA8FD06FF7DA8FD0EFFA8A8A8FFA8FFA8%FD05FFA8FD05FFA8FD05FFA8FFFFFFA8FD0FFF7D7DFFFFFFA8FD07FFA8FD%09FFAFFD07FFA8FD07FFA8FD07FFAFA8FD07FFA8A8FFFFA87DFD06FFA87D%FD0DFFA87DA8FFAFFFA8FD05FFAFA8FD04FFA8FD06FFA8A8FFA8A87DFD04%A8FFA8FD08FF7D7DFD14FFA8FD19FFA8FD07FFA8FFFFFF84A8FD06FF84A8%FD0CFFA8A8A8FD05FFA8FD05FFA8FD05FFA8FD05FFA8FD05FF7DFD05FFA8%FD07FF7D7DFFFFFFA8FD07FFA8FD08FFA8A8FD07FFA8FD07FFA8FD07FFA8%AFFD07FFAFA8FFFFA87DFD06FFA87DFD0BFFA8A8A8FD05FFA8A8FD04FFA8%AFFD04FFA8A8FD04FFA8FD06FFA884FFFFFFA8AFFD07FF7D7DFD14FFA8FD%19FFA8FD07FFA8FFFFFFA8A8FD06FFA8A8FD08FFA8FFA8A8A8FFA8FD05FF%A8FD05FFA8FD05FFA8FD05FFA8FD05FFA8FFA8FFFFFFA8FD07FF7D7DFFFF%FFA8FD07FFA8FD08FFA8A8FD07FFA8FD07FFA8FD07FFA8FD09FFAFFFFFA8%7DFD06FFA87DFD08FFA87DA8FFFFA8FD05FFAFA8FD04FFA8FD05FFAFA8FD%04FFA8FD05FFAFA8FFFFA8A8A8FD08FF7D7EFD14FFA8FD19FFA8FD07FFA8%FFFFFF7DA8FD06FF7DA8FFFFA8FFA8FFA8A8A8FD05FFA8FD05FFA8FD05FF%A8FD05FFA8FD05FFA8FD05FFA8FD04FFA87EFD07FF7D7DFFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FD0DFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FFAFFD%07FFAFA8FFFFA87DFD06FFA87DFFFD06A87EFD0BFFA8FD05FFA8FD05FFA8%A8A8FD04FFAFFFFFA8FFA8FD06FFFD04A8FFA8FFFF7D7DFFFFA8A8A8FFA8%A8A8FFA8A8A8FFA8A87DFFA8FFA8A8A8FF7DA8A8FFA8A8A8FFA884A8FFA8%A8A8FFA884A8FFA8A8A8FFA8FF7DFFA8FFA8FFA8FF7DA8FD06FF7D7DA8A8%7DA8A8FFA8A8A8FFA8FFFD04A87DFFA8FFA8FFA8FF7DA8A8FFA8FFA8FF7D%A8A8FFA8A8A8FFA884A8FFA8FFA8FFA8A87DFFA8A87EA8A8A8527D84FD37%7D7E7D7DA8FD07FFFD357D847D7EFD047DFD82FFA8FFA8FFA8FFFFFFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0BFFA8FFA8FFA8FFFFFFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7D7E7D7D7D7E7D7D7D7E7D%7D7D7E7D7D7D847D7D7D7EFD077D7EFD077D7EFD077D7E7D7D7D7E7D7D7D%7E7D7D7D847DA8FD06FFA87D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D84%7D7D7D7EFD077D7EFD077D7EFD077D7EFD077D7E7D7D7DA8597DFFA8FFFF%FFA8FF7DA8A9FFFFFFA8FFA8A8FD04FFA8FFFFA8A8FFFFFFA8FFFFA87DFF%FFFFA8FFFFFF7DFD08FFA8FFFFA8FD04FFA87DFD06FFA87DFFA8FFFFFFA8%FF7DFFA8FFFFFFA8FFA8A8FD04FFA8FFFFA8A8FFFFFFA8FFFFA87DFFFFFF%A8FFFFFF7DA8FD06FFA8A8FFFFA8FD04FF7D84FD28FFA852848452FD067D%A87DFD05FF7DA8FD06FF7DA8FD28FFA852A85327A87DA87D847D7D7DFD05%FF7D7DFD28FFA8527D7D5228522752F8272E27A8FD04FFA87DFD06FFA87D%FD28FFA827A8275227275252F8272752FD05FF7DA8FD28FFA87DA8FF7DA8%7EA87DA87DA87DFD05FF7DA8FD06FF7DA8FD28FFA87DFD04A87DA87DA87D%7E7DFD05FF7D7DFD3AFFA87DFD06FFA87DFD1BFFFD05A8FD1AFF7D7DFD3A%FF84A8FD06FF84A8FD3AFF7D7DFD1BFFFD05A8FD1AFFA87DFD06FFA87DFD%1BFFA8FFFFFFA8FD1AFF7D7DFD1AFFA8FD1FFFA8A8FD06FFA8A8FD3AFF7D%7DFD19FFA8FFFD05A8FD1AFFA87DFD06FFA87DFD1BFFA8FFA8FFA8FD1AFF%7D7EFD1AFF7DFFFFFFA8A8FD1AFF7DA8FD06FF7DA8FD1BFFA8A8AFA8FD1B%FF7D7DFD17FFA8FF7DA8FD04FFA8A8A8FD18FFA87DFD06FFA87DFD1AFFA8%7EFFFFA97DFD1AFF7DA8FD15FFAFA8AF7DA9A8FD06FFA8A8FD17FF7DA8FD%06FF7DA8FD19FFA8FD05FFA8A8FD19FF7D7DFD15FFA8FF84FFFFA8FD04FF%A8FFFFA8A8FD16FFA87DFD06FFA87DFD18FFA8A8FFA8FFFFFFA8A8A8FD18%FF7D7DFD16FFA8FFFFFFA8FD08FFA8A9FD15FF84A8FD06FF84A8FD18FF7D%FFA8A8FD05FFA8FD18FF7D7DFD15FF7DFFFFFFA8AFFD04FFA8FFFFFFA87D%A8FFA8A8A8FD10FFA87DFD06FFA87DFD17FF7DFFA8FFA8FFFFFFA8FFA8A8%FD17FF7D7DFD14FFA8A8FD04FFA8FD09FFA8FD15FFA8A8FD06FFA8A8FD16%FFA8A8FD0AFFA8FD17FF7D7DFD14FFA8A8FFFFFFA8FD05FFA8FD05FFA8FF%FFFFA8FD10FFA87DFD06FFA87DFD16FFA8A8FFFFFFA8FFFFFFFD04A87DFD%16FF7D7EFD13FFA8A8FD05FFA8FD04FFA8A8FFA8FFA8FFA8FD13FF7DA8FD%06FF7DA8FD15FFA8A8FD09FFA8FFA8A8A8FD15FF7D7DFD12FFA8A8FFA8FF%FFFFA8A8FD04FFA8FFA8FFA8A8FFFFA8FFA8FD10FFA87DFD06FFA87DFD13%FFA8A87DFF7EFFFFFFA8FFFFFFA8FFFFFFA8A8FD15FF7DA8FD12FFA8FD07%FFA8FD09FFA8FFFFFFA8FD11FF7DA8FD06FF7DA8FD14FF7EFD0FFFA8A8A8%FD13FF7D7DFD11FF7DFD04A8FFFFFFAFA8FD04FFA8FFFFFFA8FD04FFA8A8%FFA8FD0EFFA87DFD06FFA87DFD13FFA8A8FFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFA8A8A8FD12FF7D7DFD10FF7DFFFFFFA8FD05FFA8FD09FFA8FD04FF%84A8FFA8FFA8FD0BFF84A8FD06FF84A8FD13FFA8A8FD11FFA8FD13FF7D7D%FD0DFFA8FF7DA8FD04FFA8FFFFFFA8AFFD04FFA8FFFFFFA8A8FD04FFA8A8%A8FFA8A9FD0BFFA87DFD06FFA87DFD10FFFD05A8FFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFF7DFD12FF7D7DFD0CFFA8AF7DA8A8FD09FFA8FD09FFA8%FD06FFA8A8FFA8FD0BFFA8A8FD06FFA8A8FD10FFA8A8A8FFA8FD12FFA884%FFA8FD0FFF7D7DFD0BFFA8FFA8FFFFA8FD04FFA8FFFFFFA8FD05FFA8FFFF%FFAFA8FD04FFA8FFFFA884FD0CFFA87DFD06FFA87DFD0DFFA8FFA8A8A8FF%FFA8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8A884A8FD0FFF7D7EFD%0AFFA8A8A8FFFFFFA8FD09FFA8FD09FFA8FD09FF7DFD0BFF7DA8FD06FF7D%A8FD0CFFA8FFA8A8A8FFFFFFA8FD15FF7DFD0FFF7D7DFD06FFA97DFD04A8%FFFFFFA8A8FD04FFA8FFFFAFA8FD05FFA8FFA8FD07FF7DFD04FFA8A8A87E%7DA8FD06FFA87DFD06FFA87DFD07FFA8FFFFFFA8A8A8FFA8A8FD06FFA8A8%FFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8A87DA8A8A9FFFFFFA8FD07FF7D%7D7D7E7DA87D7D527D7D847D7D7D7E7D7D52A87DA87D7D7DA8597D7DA87D%7EFD057D7E7D847DA87D7D7DA87D7D7DA87D7D52FD047DA87DA852A8FD06%FFA87D7D7E7DA87D7EFD047D527D527D7D7D52A87D7E7D847D7D53FD047D%7EFD077D7EFD057D7E7D7D527D7D7D52A87D7E7DA87DA852A8A9A8A8A8FF%A8FFA8FFA8A8A8AFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8A8A8FFA8A8FD08FFA8A9A8%A8A8FFA8A8A8A9A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8A8A8AFA8A8A8A9A8A8A8FFA8FFFD05A8FFA8A8A8FFA8FD81FFA8A8A8%A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8%A8A8A9A8A8A8A9A8A8A8AFA8A8A8A9A8A8A8FFA8A8A8A9A8A8A8FD09FFA8%A8A8A9A8A8A8AFA8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8A9A8A8A8%A9A8A8A8A9A8A8A8A9A8A8A8AFA8A8A8A9A8A8A8FFA8A8A8A9A8A8A8FF7D%7DA87DA87DA87D7D7DA87DA87DA87D7D52A87DA87DA87DA8527E7DA87DA8%7DA87D7D7DA87DA87DA87D7D7DA87DA87DA87DA87DA87DA87DA87DA859A8%FD06FFA87D7DA87DA87DA87D7D7DA87DA87DA87D7D52A87DA87DA87DA852%7E7DA87DA87DA87D7D7DA87DA87DA87D7D7DA87DA87DA87D7E7DA87DA87D%A87DA8527DFD07FFA8FD19FFA8FD07FFA8FD10FFA87DFD06FFA884FD07FF%A8FD15FFA8FFFFFFA8FD05FFA8FFA8FD10FF7D7EFD1CFFA8A8A8FD08FF7D%7D52A87D28FD067DA87DFD05FF7DA8FD06FF7DA8FD1CFF7D84FD08FF7E52%7D52A859277E7DA87D847D7D7DFD05FF7D7DFD1BFFA8FFFFA8A8FD07FF52%52527D7D5228522752F8272827A8FD04FFA87DFD06FFA87DFD1BFFA8A87D%FD08FFA82752527D275227275252F8272752FD05FF7DA8FD1AFFA8A8A8FF%A8FD08FFA8A87DFFFF7DA87EA87DA87DA87DFD05FF7DA8FD06FF7DA8FD1B%FFFD04A8FD07FFA87DA87DFFA8A8A87DA87DA87D7E7DFD05FF7D7DFD19FF%A8A8A8FFA8FFA8FD1AFFA87DFD06FFA87DFD1BFF7EFFA8A8FD1BFF7D7DFD%18FFA8FFAFFFFFFFA8FFA8FD19FF84A8FD06FF84A8FD1BFFFD04A8FD1BFF%7D7DFD19FF7EFFA8FFA8A8A87EA8FD18FFA87DFD06FFA87DFD1BFFA8FF7E%A8FD1BFF7D7DFD18FFA8A8FD04FFA8FFA8FD19FFA8A8FD06FFA8A8FD1BFF%A8FFFFA8FD1BFF7D7DFD15FFA9FD04A8FFA8FFA8FFFFA8A8FD18FFA87DFD%06FFA87DFD1BFFA8FFA8A8A8FD1AFF7D7EFD16FFA8FFA8FD05FFA8FFA8A8%FD18FF7DA8FD06FF7DA8FD1AFFA8A9FFFFA8FD1BFF7D7DFD15FFA8A8FFA8%FFFFA8FFA8A8FFFFA8FD18FFA87DFD06FFA87DFD1AFF7DA8FFA8A8A8FD1A%FF7DA8FD16FFA8FFA8FD05FFA8FFA8FFA8FD17FF7DA8FD06FF7DA8FD1AFF%7EFFFFFFA8A8FD1AFF7D7DFD15FFAFFFA8A8FFFFA8FFFFA8FFFFA8A8A8FD%16FFA87DFD06FFA87DFD1AFFA8A8FFA8A8A8FD1AFF7D7DFD16FFA8FFA8FD%05FFA8FFA8FFA8A8FD16FF84A8FD06FF84A8FD1AFFA8FFA8FFA8A8FD1AFF%7D7DFD15FFA8A8A8AFA8FFA8FFA8AFFFA8A8FF7DFD16FFA87DFD06FFA87D%FD19FFA8A8A8FFA8FF7DA8FD19FF7D7DFD16FFA8FFA8FD05FFA8FFA8FFFF%A8FD16FFA8A8FD06FFA8A8FD1AFFA8FFA8FFFFA8A8FD19FF7D7DFD15FFA8%A8FFA8A8FFA8FFA8FFFFA8A8FFA8A8FD15FFA87DFD06FFA87DFD19FFA8A8%A8FFA8FFA8A8FD19FF7D7EFD15FFA8A8FFA8FD05FFA8FFA8FFFFFFA8FD15%FF7DA8FD06FF7DA8FD19FFA8A8FFAFFD04A8FD19FF7D7DFD15FFA8AFFFAF%A8FFA8FFA8A8FFAFA8FFA8A884FD14FFA87DFD06FFA87DFD19FF7DA8A8FF%A8FFA8A8FD19FF7DA8FD14FFA8FFA8FFA8FD05FFA8FFA8FD04FFA8A8FD13%FF7DA8FD06FF7DA8FD19FFA8A8FFFFFFA8FFA8FD19FF7D7DFD13FF7DA8A8%A8FFFFAFFFA8FFFFA8FFFFAFFFA8FFA8A8FD13FFA87DFD06FFA87DFD19FF%A8A8A8FFA8FFA8A8FD19FF7D7DFD13FFA8FFFFA8FFA8FD05FFA8FFA8FD05%FF7DA8A8FD11FF84A8FD06FF84A8FD18FF7DA8A8FFA8FFFFFFA8A8FD18FF%7D7DFD07FFA8FD08FFA8A87EA8FFA8FFFFA8A8FFA8FFA8FFFFA8A8FFA8FF%FFA8A8A884FD10FFA87DFD06FFA87DFD07FFA8FD0FFFA87DA8FFA8FFA8FF%A8A87DFD07FFA8FD07FFA8FD08FF7D7DFFFFA8FFA8FFA884A8FFA8FFA8FF%7D7D52FD04A8FFA8FF7DFD04A8FFA8FF7D7EFFA8A8FFA8FF7E597DA8A8FF%A8FFA8FF7DFFA8FFA8FFA8FF7DA8FD06FF7E7DA8FFA8FFA8FFA884A8FFA8%FFA8FFA8A87DFFA8FFA8FF847D7DFD07A87D7D7DA8A8FFA8FFA8A8A8FFA8%FFA8FFA8A87DFFA8FFA8FFA8FFFD3D7DA8FD07FFFD247D59FD177DFD88FF%52A8FD06FF7D52A8FD05FFA85259FD07FF28FD07FF527DFD06FF7D52A8FD%17FF28FD07FF5252A8FD05FFA8527DFD06FFA852FD07FF27A8FD06FF7D52%A8FD0FFF7DA8FD06FFA852FD07FF527DFD06FF7D27A8FD06FF5352FD06FF%7D27A8FD17FF59A8FD06FF7D52FD07FF527DFD06FF2752FD06FFA8527DFD%06FF7D27FD10FF7EFD07FF7D7DFD06FFA87DA8FD07FF7DFD07FF7D7DFD06%FFA87DA8FD17FF7DFD07FF527DFD06FFA87DA8FD06FFA87DFD07FF7DA8FD%06FFA87DA8FDFCFFFD0AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:58:46+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T14:20:32+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T14:20:32+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>184</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7l5I8keS5/JegTTaBpss&#xA;0um2jySPaQMzM0CEsxKVJJxVOv8AAXkb/qXdM/6Qrf8A5oxVRtPy58jW0TR/oHTpeUksvJ7O3JHq&#xA;yNJx+x0XlxX2GKq3+AvI3/Uu6Z/0hW//ADRiqjb/AJc+RoZbmT9A6c/1iQS8Ws7chKRpHxT4Nh+7&#xA;5fMnFVb/AAF5G/6l3TP+kK3/AOaMVUU/LnyMt7Lc/oHTj6sccXomzt+C+mztyUcOrepQ/IYqsufJ&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:D661E9D051D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:8AE8F4E054D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -191.604 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 191.604 li
271.65 191.604 li
271.65 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0.25 0.25 mo
0.25 53.4004 li
127.4 53.4004 li
127.4 0.25 li
0.25 0.25 li
0.25 0.25 li
cp
109.25 0.25 mo
109.25 3.40039 li
109.25 53.4004 mo
109.25 50.25 li
91.0503 0.25 mo
91.0503 3.40039 li
91.0503 53.4004 mo
91.0503 50.25 li
72.9004 0.25 mo
72.9004 3.40039 li
72.9004 53.4004 mo
72.9004 50.25 li
54.75 0.25 mo
54.75 3.40039 li
54.75 53.4004 mo
54.75 50.25 li
36.6001 0.25 mo
36.6001 3.40039 li
36.6001 53.4004 mo
36.6001 50.25 li
18.4004 0.25 mo
18.4004 3.40039 li
18.4004 53.4004 mo
18.4004 50.25 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 49 /one putdup 104 /h putdup 111 /o putdup 114 /r putdup 116 /t putdup 119 /w putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/space <1C60D8A8C9B854D00D> |-/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-/h <1C60D8A8C9B7EF327C10274A017D50D0B79D52072757441F46A9E30449754F52968402CD3736F71D6E09A15E2046342DF42A864D37373E0A213DE941C6F011296A017FBEA0AE0137A10664047E> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/r <1C60D8A8C9B81F2C150546EE4CBAAF688B47B2BE559294D5CB0899F2E804995909AC00E005B47DD0AC10879B5BC7D5032F4A9752992A333ADEB05A77287D04AF74FB420D308AD8> |-/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B5837088353D9095E679DCF29A> |-/w <1C60D8A8C9B6079F1E21163FAB6AE6913AD177FF61D1DF5A13833424AA1FD61EC74DDA2BECFBF8B60BC9DF7FD3935FFD35FC8515ADAC1E367194875F1B70589701BB841A4601541FD2E8173953> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWDN+Helvetica /Helvetica findfont ct_VMDictPut/DVPWDN+Helvetica*1 [32{/.notdef}rp /space 16{/.notdef}rp /one 54{/.notdef}rp /h 6{/.notdef}rp /o 2{/.notdef}rp /r /.notdef /t 2{/.notdef}rp /w 136{/.notdef}rp]DVPWDN+Helvetica nfDVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf91.8486 9.23926 mo(1 throw)[3.89209 1.9458 1.94629 3.8916 2.33105 3.78809 0 ]xsh0.2 lw
100.15 53.4004 mo
100.15 15.7002 li
118.3 15.7002 li
118.3 53.4004 li
100.15 53.4004 li
100.15 53.4004 li
cp
82 53.4004 mo
82 17.1504 li
100.15 17.1504 li
100.15 53.4004 li
82 53.4004 li
82 53.4004 li
cp
63.8501 53.4004 mo
63.8501 6.05029 li
82 6.05029 li
82 53.4004 li
63.8501 53.4004 li
63.8501 53.4004 li
cp
45.6504 53.4004 mo
45.6504 13.5503 li
63.8501 13.5503 li
63.8501 53.4004 li
45.6504 53.4004 li
45.6504 53.4004 li
cp
27.5 53.4004 mo
27.5 12.5503 li
45.6504 12.5503 li
45.6504 53.4004 li
27.5 53.4004 li
27.5 53.4004 li
cp
9.3501 53.4004 mo
9.3501 13.8003 li
27.5 13.8003 li
27.5 53.4004 li
9.3501 53.4004 li
9.3501 53.4004 li
cp
@
0.5 lw
144.25 0.25 mo
144.25 53.4004 li
271.4 53.4004 li
271.4 0.25 li
144.25 0.25 li
144.25 0.25 li
cp
253.25 0.25 mo
253.25 3.40039 li
253.25 53.4004 mo
253.25 50.25 li
235.05 0.25 mo
235.05 3.40039 li
235.05 53.4004 mo
235.05 50.25 li
216.9 0.25 mo
216.9 3.40039 li
216.9 53.4004 mo
216.9 50.25 li
198.75 0.25 mo
198.75 3.40039 li
198.75 53.4004 mo
198.75 50.25 li
180.601 0.25 mo
180.601 3.40039 li
180.601 53.4004 mo
180.601 50.25 li
162.4 0.25 mo
162.4 3.40039 li
162.4 53.4004 mo
162.4 50.25 li
0.25 0.25 mo
0.25 53.4004 li
127.4 53.4004 li
127.4 0.25 li
0.25 0.25 li
0.25 0.25 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-/s <1C60D8A8C9B7A73DF2FC7D734CFF3CEE44DEE08B4814311F759A12C668E2414B1F185B71CDFB81A4EFE4B67531A5BC3DCC468E7336CC99F93A0F8C9CAAC21479B9DF30E1F20CC55E079066616501132E6501EACD2121153832E7EB63F4284AC03D21E5D5BD534A816A07833E9E45AAF0AF784FB128B27EB090C038A83361862615D53FB49FC431C156AA9A7FD4E2EF50395549EA0CB64112DC> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDN+Helvetica /Encoding getdup 50 /two putdup 115 /s putpop%ADOEndSubsetFont
/DVPWDN+Helvetica*1 [32{/.notdef}rp /space 16{/.notdef}rp /one /two 53{/.notdef}rp /h 6{/.notdef}rp /o 2{/.notdef}rp /r /s /t 2{/.notdef}rp /w 136{/.notdef}rp]DVPWDN+Helvetica nfDVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf232.349 9.23926 mo(2 throw)[3.8916 1.94629 1.94629 3.8916 2.33105 3.78809 0 ]xsh255.294 9.23926 mo(s)sh0.2 lw
240.601 53.4004 mo
240.601 38 li
253.4 38 li
253.4 53.4004 li
240.601 53.4004 li
240.601 53.4004 li
cp
227.75 53.4004 mo
227.75 37.8003 li
240.601 37.8003 li
240.601 53.4004 li
227.75 53.4004 li
227.75 53.4004 li
cp
214.9 53.4004 mo
214.9 4.90039 li
227.75 4.90039 li
227.75 53.4004 li
214.9 53.4004 li
214.9 53.4004 li
cp
202.05 53.4004 mo
202.05 24.1001 li
214.9 24.1001 li
214.9 53.4004 li
202.05 53.4004 li
202.05 53.4004 li
cp
189.2 53.4004 mo
189.2 6.25 li
202.05 6.25 li
202.05 53.4004 li
189.2 53.4004 li
189.2 53.4004 li
cp
176.351 53.4004 mo
176.351 35.9004 li
189.2 35.9004 li
189.2 53.4004 li
176.351 53.4004 li
176.351 53.4004 li
cp
163.5 53.4004 mo
163.5 44.4004 li
176.351 44.4004 li
176.351 53.4004 li
163.5 53.4004 li
163.5 53.4004 li
cp
150.65 53.4004 mo
150.65 47.9502 li
163.5 47.9502 li
163.5 53.4004 li
150.65 53.4004 li
150.65 53.4004 li
cp
@
0.3 lw
263.4 51.6001 mo
263.5 51.6504 li
263.65 51.6504 li
263.75 51.7002 li
263.9 51.7002 li
264 51.75 li
264.15 51.75 li
264.25 51.8003 li
264.4 51.8003 li
264.55 51.8501 li
264.65 51.8501 li
264.8 51.9004 li
264.9 51.9004 li
265.05 51.9502 li
265.15 51.9502 li
265.3 51.9502 li
265.4 52 li
265.55 52 li
265.65 52.0503 li
265.8 52.0503 li
265.95 52.0503 li
266.05 52.1001 li
266.2 52.1001 li
266.3 52.1499 li
266.45 52.1499 li
266.55 52.1499 li
266.7 52.2002 li
266.8 52.2002 li
266.95 52.25 li
267.05 52.25 li
267.2 52.25 li
267.351 52.3003 li
267.45 52.3003 li
267.601 52.3003 li
267.7 52.3501 li
267.851 52.3501 li
267.95 52.3501 li
268.101 52.3999 li
268.2 52.3999 li
268.351 52.3999 li
268.45 52.4502 li
268.601 52.4502 li
268.75 52.4502 li
268.851 52.5 li
269 52.5 li
269.101 52.5 li
269.25 52.5 li
269.351 52.5498 li
269.5 52.5498 li
269.601 52.5498 li
269.75 52.6001 li
269.851 52.6001 li
270 52.6001 li
270.15 52.6001 li
270.25 52.6499 li
270.4 52.6499 li
270.5 52.6499 li
270.65 52.6499 li
270.75 52.7002 li
270.9 52.7002 li
271 52.7002 li
271.15 52.7002 li
271.25 52.7002 li
271.4 52.75 li
250.15 46.5503 mo
250.25 46.6504 li
250.4 46.7002 li
250.55 46.8003 li
250.65 46.8501 li
250.8 46.9004 li
250.9 47 li
251.05 47.0503 li
251.15 47.1504 li
251.3 47.2002 li
251.4 47.3003 li
251.55 47.3501 li
251.65 47.4004 li
251.8 47.5 li
251.95 47.5503 li
252.05 47.6504 li
252.2 47.7002 li
252.3 47.75 li
252.45 47.8501 li
252.55 47.9004 li
252.7 47.9502 li
252.8 48 li
252.95 48.1001 li
253.05 48.1504 li
253.2 48.2002 li
253.351 48.25 li
253.45 48.3501 li
253.601 48.4004 li
253.7 48.4502 li
253.851 48.5 li
253.95 48.5503 li
254.101 48.6504 li
254.2 48.7002 li
254.351 48.75 li
254.45 48.8003 li
254.601 48.8501 li
254.75 48.8999 li
254.851 48.9502 li
255 49.0503 li
255.101 49.1001 li
255.25 49.1499 li
255.351 49.2002 li
255.5 49.25 li
255.601 49.3003 li
255.75 49.3501 li
255.851 49.3999 li
256 49.4502 li
256.15 49.5 li
256.25 49.5498 li
256.4 49.6001 li
256.5 49.6499 li
256.65 49.7002 li
256.75 49.75 li
256.9 49.7998 li
257 49.8501 li
257.15 49.8999 li
257.25 49.8999 li
257.4 49.9502 li
257.55 50 li
257.65 50.0498 li
257.8 50.1001 li
257.9 50.1499 li
258.05 50.2002 li
258.15 50.25 li
258.3 50.25 li
258.4 50.2998 li
258.55 50.3501 li
258.65 50.3999 li
258.8 50.4502 li
258.95 50.4502 li
259.05 50.5 li
259.2 50.5498 li
259.3 50.6001 li
259.45 50.6499 li
259.55 50.6499 li
259.7 50.7002 li
259.8 50.75 li
259.95 50.7998 li
260.05 50.7998 li
260.2 50.8501 li
260.351 50.8999 li
260.45 50.8999 li
260.601 50.9497 li
260.7 51 li
260.851 51 li
260.95 51.0498 li
261.101 51.1001 li
261.2 51.1001 li
261.351 51.1499 li
261.45 51.1997 li
261.601 51.1997 li
261.75 51.25 li
261.851 51.25 li
262 51.2998 li
262.101 51.3501 li
262.25 51.3501 li
262.351 51.3999 li
262.5 51.3999 li
262.601 51.4497 li
262.75 51.5 li
262.851 51.5 li
263 51.5498 li
263.15 51.5498 li
263.25 51.5996 li
263.4 51.5996 li
236.9 35.1504 mo
237.05 35.3003 li
237.15 35.4502 li
237.3 35.5503 li
237.4 35.7002 li
237.55 35.8501 li
237.65 36 li
237.8 36.1001 li
237.95 36.25 li
238.05 36.4004 li
238.2 36.5503 li
238.3 36.6504 li
238.45 36.8003 li
238.55 36.9502 li
238.7 37.0503 li
238.8 37.2002 li
238.95 37.3501 li
239.05 37.4502 li
239.2 37.6001 li
239.351 37.75 li
239.45 37.8501 li
239.601 38 li
239.7 38.1001 li
239.851 38.25 li
239.95 38.3501 li
240.101 38.5 li
240.2 38.6001 li
240.351 38.75 li
240.45 38.9004 li
240.601 39 li
240.75 39.1001 li
240.851 39.25 li
241 39.3501 li
241.101 39.5 li
241.25 39.6001 li
241.351 39.75 li
241.5 39.8501 li
241.601 40 li
241.75 40.1001 li
241.851 40.2002 li
242 40.3501 li
242.15 40.4502 li
242.25 40.5503 li
242.4 40.7002 li
242.5 40.8003 li
242.65 40.9004 li
242.75 41.0503 li
242.9 41.1504 li
243 41.2505 li
243.15 41.3501 li
243.25 41.5005 li
243.4 41.6001 li
243.55 41.7002 li
243.65 41.8003 li
243.8 41.9004 li
243.9 42.0503 li
244.05 42.1504 li
244.15 42.2505 li
244.3 42.3506 li
244.4 42.4502 li
244.55 42.5503 li
244.65 42.6504 li
244.8 42.7505 li
244.95 42.8506 li
245.05 43.0005 li
245.2 43.1006 li
245.3 43.2002 li
245.45 43.3003 li
245.55 43.4004 li
245.7 43.5005 li
245.8 43.6006 li
245.95 43.7002 li
246.05 43.8003 li
246.2 43.8506 li
246.351 43.9502 li
246.45 44.0503 li
246.601 44.1504 li
246.7 44.2505 li
246.851 44.3506 li
246.95 44.4502 li
247.101 44.5503 li
247.2 44.6006 li
247.351 44.7002 li
247.45 44.8003 li
247.601 44.9004 li
247.75 45.0005 li
247.851 45.0503 li
248 45.1504 li
248.101 45.2505 li
248.25 45.3506 li
248.351 45.4004 li
248.5 45.5005 li
248.601 45.6006 li
248.75 45.6504 li
248.851 45.7505 li
249 45.8506 li
249.15 45.9004 li
249.25 46.0005 li
249.4 46.1006 li
249.5 46.1504 li
249.65 46.2505 li
249.75 46.3003 li
249.9 46.4004 li
250 46.4502 li
250.15 46.5503 li
223.65 19.6001 mo
223.8 19.75 li
223.95 19.9004 li
224.05 20.0503 li
224.2 20.2002 li
224.3 20.3003 li
224.45 20.4502 li
224.55 20.6001 li
224.7 20.75 li
224.8 20.9004 li
224.95 21.0503 li
225.05 21.2002 li
225.2 21.3501 li
225.351 21.5 li
225.45 21.6504 li
225.601 21.8003 li
225.7 21.9502 li
225.851 22.1001 li
225.95 22.25 li
226.101 22.4004 li
226.2 22.5 li
226.351 22.6504 li
226.45 22.8501 li
226.601 23 li
226.75 23.1504 li
226.851 23.3003 li
227 23.4502 li
227.101 23.6001 li
227.25 23.75 li
227.351 23.9004 li
227.5 24.0503 li
227.601 24.2002 li
227.75 24.3501 li
227.851 24.5 li
228 24.6504 li
228.15 24.8003 li
228.25 24.9502 li
228.4 25.1001 li
228.5 25.25 li
228.65 25.4004 li
228.75 25.5503 li
228.9 25.7002 li
229 25.9004 li
229.15 26.0503 li
229.25 26.2002 li
229.4 26.3501 li
229.55 26.5 li
229.65 26.6504 li
229.8 26.8003 li
229.9 26.9502 li
230.05 27.1001 li
230.15 27.25 li
230.3 27.4004 li
230.4 27.5503 li
230.55 27.7002 li
230.65 27.9004 li
230.8 28.0503 li
230.95 28.2002 li
231.05 28.3501 li
231.2 28.5 li
231.3 28.6504 li
231.45 28.8003 li
231.55 28.9502 li
231.7 29.1001 li
231.8 29.25 li
231.95 29.4004 li
232.05 29.5503 li
232.2 29.7002 li
232.351 29.8501 li
232.45 30 li
232.601 30.1504 li
232.7 30.3003 li
232.851 30.5 li
232.95 30.6504 li
233.101 30.8003 li
233.2 30.9502 li
233.351 31.1001 li
233.45 31.25 li
233.601 31.4004 li
233.75 31.5503 li
233.851 31.7002 li
234 31.8501 li
234.101 32 li
234.25 32.1001 li
234.351 32.25 li
234.5 32.4004 li
234.601 32.5503 li
234.75 32.7002 li
234.851 32.8501 li
235 33 li
235.15 33.1504 li
235.25 33.3003 li
235.4 33.4502 li
235.5 33.6001 li
235.65 33.75 li
235.75 33.9004 li
235.9 34 li
236 34.1504 li
236.15 34.3003 li
236.25 34.4502 li
236.4 34.6001 li
236.55 34.75 li
236.65 34.8501 li
236.8 35 li
236.9 35.1504 li
210.45 9.8501 mo
210.55 9.90039 li
210.7 9.9502 li
210.8 9.9502 li
210.95 10 li
211.05 10.0503 li
211.2 10.0503 li
211.351 10.1001 li
211.45 10.1504 li
211.601 10.2002 li
211.7 10.25 li
211.851 10.3003 li
211.95 10.3501 li
212.101 10.3999 li
212.2 10.4502 li
212.351 10.5 li
212.45 10.5503 li
212.601 10.6001 li
212.75 10.6499 li
212.851 10.7002 li
213 10.75 li
213.101 10.8003 li
213.25 10.8501 li
213.351 10.9502 li
213.5 11 li
213.601 11.0498 li
213.75 11.1001 li
213.851 11.2002 li
214 11.25 li
214.15 11.3501 li
214.25 11.3999 li
214.4 11.4502 li
214.5 11.5498 li
214.65 11.6001 li
214.75 11.7002 li
214.9 11.75 li
215 11.8501 li
215.15 11.9502 li
215.25 12 li
215.4 12.1001 li
215.55 12.1499 li
215.65 12.25 li
215.8 12.3501 li
215.9 12.4502 li
216.05 12.5 li
216.15 12.6001 li
216.3 12.7002 li
216.4 12.8003 li
216.55 12.8999 li
216.65 13 li
216.8 13.0503 li
216.95 13.1499 li
217.05 13.25 li
217.2 13.3501 li
217.3 13.4502 li
217.45 13.5503 li
217.55 13.6499 li
217.7 13.75 li
217.8 13.8501 li
217.95 13.9502 li
218.05 14.1001 li
218.2 14.2002 li
218.351 14.3003 li
218.45 14.4004 li
218.601 14.5 li
218.7 14.6001 li
218.851 14.75 li
218.95 14.8501 li
219.101 14.9502 li
219.2 15.1001 li
219.351 15.2002 li
219.45 15.3003 li
219.601 15.4502 li
219.75 15.5503 li
219.851 15.6504 li
220 15.8003 li
220.101 15.9004 li
220.25 16.0503 li
220.351 16.1504 li
220.5 16.25 li
220.601 16.4004 li
220.75 16.5 li
220.851 16.6504 li
221 16.8003 li
221.15 16.9004 li
221.25 17.0503 li
221.4 17.1504 li
221.5 17.3003 li
221.65 17.4004 li
221.75 17.5503 li
221.9 17.7002 li
222 17.8003 li
222.15 17.9502 li
222.25 18.1001 li
222.4 18.2002 li
222.55 18.3501 li
222.65 18.5 li
222.8 18.6504 li
222.9 18.75 li
223.05 18.9004 li
223.15 19.0503 li
223.3 19.2002 li
223.4 19.3003 li
223.55 19.4502 li
223.65 19.6001 li
197.2 14.4004 mo
197.3 14.3003 li
197.45 14.2002 li
197.601 14.1001 li
197.7 13.9502 li
197.851 13.8501 li
197.95 13.75 li
198.101 13.6504 li
198.2 13.5503 li
198.351 13.4502 li
198.45 13.3501 li
198.601 13.25 li
198.7 13.1499 li
198.851 13.0503 li
199 13 li
199.101 12.8999 li
199.25 12.8003 li
199.351 12.7002 li
199.5 12.6001 li
199.601 12.5 li
199.75 12.4502 li
199.851 12.3501 li
200 12.25 li
200.101 12.1499 li
200.25 12.1001 li
200.4 12 li
200.5 11.9502 li
200.65 11.8501 li
200.75 11.75 li
200.9 11.7002 li
201 11.6001 li
201.15 11.5503 li
201.25 11.4502 li
201.4 11.3999 li
201.5 11.3501 li
201.65 11.25 li
201.8 11.2002 li
201.9 11.1001 li
202.05 11.0503 li
202.15 11 li
202.3 10.9502 li
202.4 10.8501 li
202.55 10.8003 li
202.65 10.75 li
202.8 10.7002 li
202.9 10.6499 li
203.05 10.6001 li
203.2 10.5503 li
203.3 10.5 li
203.45 10.4502 li
203.55 10.4004 li
203.7 10.3501 li
203.8 10.3003 li
203.95 10.25 li
204.05 10.2002 li
204.2 10.1504 li
204.3 10.1001 li
204.45 10.0503 li
204.601 10.0503 li
204.7 10 li
204.851 9.9502 li
204.95 9.9502 li
205.101 9.90039 li
205.2 9.8501 li
205.351 9.8501 li
205.45 9.80029 li
205.601 9.80029 li
205.7 9.75 li
205.851 9.75 li
206 9.7002 li
206.101 9.7002 li
206.25 9.65039 li
206.351 9.65039 li
206.5 9.65039 li
206.601 9.65039 li
206.75 9.6001 li
206.851 9.6001 li
207 9.6001 li
207.101 9.6001 li
207.25 9.55029 li
207.4 9.55029 li
207.5 9.55029 li
207.65 9.55029 li
207.75 9.55029 li
207.9 9.55029 li
208 9.55029 li
208.15 9.55029 li
208.25 9.55029 li
208.4 9.55029 li
208.55 9.6001 li
208.65 9.6001 li
208.8 9.6001 li
208.9 9.6001 li
209.05 9.65039 li
209.15 9.65039 li
209.3 9.65039 li
209.4 9.65039 li
209.55 9.7002 li
209.65 9.7002 li
209.8 9.75 li
209.95 9.75 li
210.05 9.80029 li
210.2 9.80029 li
210.3 9.8501 li
210.45 9.8501 li
183.95 29.1001 mo
184.101 28.9502 li
184.2 28.8003 li
184.351 28.6504 li
184.45 28.5 li
184.601 28.3501 li
184.7 28.2002 li
184.851 28.0503 li
185 27.9004 li
185.101 27.7002 li
185.25 27.5503 li
185.351 27.4004 li
185.5 27.25 li
185.601 27.1001 li
185.75 26.9502 li
185.851 26.8003 li
186 26.6504 li
186.101 26.5 li
186.25 26.3501 li
186.4 26.2002 li
186.5 26.0503 li
186.65 25.9004 li
186.75 25.7002 li
186.9 25.5503 li
187 25.4004 li
187.15 25.25 li
187.25 25.1001 li
187.4 24.9502 li
187.5 24.8003 li
187.65 24.6504 li
187.8 24.5 li
187.9 24.3501 li
188.05 24.2002 li
188.15 24.0503 li
188.3 23.9004 li
188.4 23.75 li
188.55 23.6001 li
188.65 23.4502 li
188.8 23.3003 li
188.9 23.1504 li
189.05 23 li
189.2 22.8501 li
189.3 22.6504 li
189.45 22.5 li
189.55 22.4004 li
189.7 22.25 li
189.8 22.1001 li
189.95 21.9502 li
190.05 21.8003 li
190.2 21.6504 li
190.3 21.5 li
190.45 21.3501 li
190.601 21.2002 li
190.7 21.0503 li
190.851 20.9004 li
190.95 20.75 li
191.101 20.6001 li
191.2 20.4502 li
191.351 20.3003 li
191.45 20.2002 li
191.601 20.0503 li
191.7 19.9004 li
191.851 19.75 li
192 19.6001 li
192.101 19.4502 li
192.25 19.3003 li
192.351 19.2002 li
192.5 19.0503 li
192.601 18.9004 li
192.75 18.75 li
192.851 18.6504 li
193 18.5 li
193.101 18.3501 li
193.25 18.2002 li
193.4 18.1001 li
193.5 17.9502 li
193.65 17.8003 li
193.75 17.7002 li
193.9 17.5503 li
194 17.4004 li
194.15 17.3003 li
194.25 17.1504 li
194.4 17.0503 li
194.5 16.9004 li
194.65 16.8003 li
194.8 16.6504 li
194.9 16.5 li
195.05 16.4004 li
195.15 16.25 li
195.3 16.1499 li
195.4 16.0503 li
195.55 15.8999 li
195.65 15.8003 li
195.8 15.6499 li
195.9 15.5503 li
196.05 15.4502 li
196.2 15.3003 li
196.3 15.2002 li
196.45 15.1001 li
196.55 14.9502 li
196.7 14.8501 li
196.8 14.75 li
196.95 14.6001 li
197.05 14.5 li
197.2 14.3999 li
170.7 42.8501 mo
170.851 42.75 li
171 42.6504 li
171.101 42.5503 li
171.25 42.4502 li
171.351 42.3501 li
171.5 42.25 li
171.601 42.1504 li
171.75 42.0503 li
171.851 41.9004 li
172 41.8003 li
172.101 41.7002 li
172.25 41.6001 li
172.4 41.5 li
172.5 41.3501 li
172.65 41.25 li
172.75 41.1499 li
172.9 41.0503 li
173 40.8999 li
173.15 40.8003 li
173.25 40.7002 li
173.4 40.5503 li
173.5 40.4502 li
173.65 40.3501 li
173.8 40.2002 li
173.9 40.1001 li
174.05 40 li
174.15 39.8501 li
174.3 39.75 li
174.4 39.6001 li
174.55 39.5 li
174.65 39.3501 li
174.8 39.25 li
174.9 39.1001 li
175.05 39 li
175.2 38.8999 li
175.3 38.75 li
175.45 38.6001 li
175.55 38.5 li
175.7 38.3501 li
175.8 38.25 li
175.95 38.1001 li
176.05 38 li
176.2 37.8501 li
176.3 37.75 li
176.45 37.6001 li
176.601 37.4502 li
176.7 37.3501 li
176.851 37.2002 li
176.95 37.0498 li
177.101 36.9502 li
177.2 36.7998 li
177.351 36.6499 li
177.45 36.5498 li
177.601 36.3999 li
177.7 36.25 li
177.851 36.1001 li
178 36 li
178.101 35.8501 li
178.25 35.7002 li
178.351 35.5498 li
178.5 35.4502 li
178.601 35.2998 li
178.75 35.1499 li
178.851 35 li
179 34.8501 li
179.101 34.75 li
179.25 34.6001 li
179.4 34.4502 li
179.5 34.2998 li
179.65 34.1499 li
179.75 34 li
179.9 33.8999 li
180 33.75 li
180.15 33.6001 li
180.25 33.4502 li
180.4 33.2998 li
180.5 33.1499 li
180.65 33 li
180.8 32.8501 li
180.9 32.7002 li
181.05 32.5498 li
181.15 32.3999 li
181.3 32.25 li
181.4 32.1001 li
181.55 32 li
181.65 31.8501 li
181.8 31.7002 li
181.9 31.5498 li
182.05 31.3999 li
182.2 31.25 li
182.3 31.1001 li
182.45 30.9502 li
182.55 30.7998 li
182.7 30.6499 li
182.8 30.5 li
182.95 30.2998 li
183.05 30.1499 li
183.2 30 li
183.3 29.8501 li
183.45 29.7002 li
183.601 29.5498 li
183.7 29.3999 li
183.851 29.25 li
183.95 29.1001 li
157.5 50.25 mo
157.601 50.2002 li
157.75 50.1504 li
157.851 50.1001 li
158 50.0503 li
158.101 50 li
158.25 49.9502 li
158.4 49.9004 li
158.5 49.9004 li
158.65 49.8501 li
158.75 49.8003 li
158.9 49.75 li
159 49.7002 li
159.15 49.6504 li
159.25 49.6001 li
159.4 49.5503 li
159.5 49.5 li
159.65 49.4502 li
159.8 49.4004 li
159.9 49.3501 li
160.05 49.3003 li
160.15 49.25 li
160.3 49.2002 li
160.4 49.1504 li
160.55 49.1001 li
160.65 49.0503 li
160.8 48.9502 li
160.9 48.9004 li
161.05 48.8501 li
161.2 48.8003 li
161.3 48.7505 li
161.45 48.7002 li
161.55 48.6504 li
161.7 48.5503 li
161.8 48.5005 li
161.95 48.4502 li
162.05 48.4004 li
162.2 48.3506 li
162.3 48.2505 li
162.45 48.2002 li
162.601 48.1504 li
162.7 48.1006 li
162.851 48.0005 li
162.95 47.9502 li
163.101 47.9004 li
163.2 47.8506 li
163.351 47.7505 li
163.45 47.7002 li
163.601 47.6504 li
163.7 47.5503 li
163.851 47.5005 li
164 47.4004 li
164.101 47.3506 li
164.25 47.3003 li
164.351 47.2002 li
164.5 47.1504 li
164.601 47.0503 li
164.75 47.0005 li
164.851 46.9004 li
165 46.8506 li
165.101 46.8003 li
165.25 46.7002 li
165.4 46.6504 li
165.5 46.5503 li
165.65 46.4502 li
165.75 46.4004 li
165.9 46.3003 li
166 46.2505 li
166.15 46.1504 li
166.25 46.1006 li
166.4 46.0005 li
166.5 45.9004 li
166.65 45.8506 li
166.8 45.7505 li
166.9 45.6504 li
167.05 45.6006 li
167.15 45.5005 li
167.3 45.4004 li
167.4 45.3506 li
167.55 45.2505 li
167.65 45.1504 li
167.8 45.0503 li
167.9 45.0005 li
168.05 44.9004 li
168.2 44.8003 li
168.3 44.7002 li
168.45 44.6001 li
168.55 44.5503 li
168.7 44.4502 li
168.8 44.3501 li
168.95 44.2505 li
169.05 44.1504 li
169.2 44.0503 li
169.3 43.9502 li
169.45 43.8501 li
169.601 43.8003 li
169.7 43.7002 li
169.851 43.6001 li
169.95 43.5 li
170.101 43.4004 li
170.2 43.3003 li
170.351 43.2002 li
170.45 43.1001 li
170.601 43 li
170.7 42.8501 li
144.25 52.75 mo
144.4 52.7002 li
144.5 52.7002 li
144.65 52.7002 li
144.75 52.7002 li
144.9 52.7002 li
145 52.6504 li
145.15 52.6504 li
145.25 52.6504 li
145.4 52.6504 li
145.5 52.6001 li
145.65 52.6001 li
145.8 52.6001 li
145.9 52.6001 li
146.05 52.5503 li
146.15 52.5503 li
146.3 52.5503 li
146.4 52.5 li
146.55 52.5 li
146.65 52.5 li
146.8 52.5 li
146.9 52.4502 li
147.05 52.4502 li
147.2 52.4502 li
147.3 52.4004 li
147.45 52.4004 li
147.55 52.4004 li
147.7 52.3501 li
147.8 52.3501 li
147.95 52.3501 li
148.05 52.3003 li
148.2 52.3003 li
148.3 52.3003 li
148.45 52.25 li
148.601 52.25 li
148.7 52.25 li
148.851 52.2002 li
148.95 52.2002 li
149.101 52.1504 li
149.2 52.1504 li
149.351 52.1504 li
149.45 52.1001 li
149.601 52.1001 li
149.7 52.0503 li
149.851 52.0503 li
150 52.0503 li
150.101 52 li
150.25 52 li
150.351 51.9502 li
150.5 51.9502 li
150.601 51.9502 li
150.75 51.9004 li
150.851 51.9004 li
151 51.8501 li
151.101 51.8501 li
151.25 51.8003 li
151.4 51.8003 li
151.5 51.75 li
151.65 51.75 li
151.75 51.7002 li
151.9 51.7002 li
152 51.6504 li
152.15 51.6504 li
152.25 51.6001 li
152.4 51.6001 li
152.5 51.5503 li
152.65 51.5503 li
152.8 51.5005 li
152.9 51.5005 li
153.05 51.4502 li
153.15 51.4004 li
153.3 51.4004 li
153.4 51.3501 li
153.55 51.3501 li
153.65 51.3003 li
153.8 51.2505 li
153.9 51.2505 li
154.05 51.2002 li
154.2 51.2002 li
154.3 51.1504 li
154.45 51.1006 li
154.55 51.1006 li
154.7 51.0503 li
154.8 51.0005 li
154.95 51.0005 li
155.05 50.9502 li
155.2 50.9004 li
155.3 50.9004 li
155.45 50.8506 li
155.601 50.8003 li
155.7 50.8003 li
155.851 50.7505 li
155.95 50.7002 li
156.101 50.6504 li
156.2 50.6504 li
156.351 50.6006 li
156.45 50.5503 li
156.601 50.5005 li
156.7 50.4502 li
156.851 50.4502 li
157 50.4004 li
157.101 50.3506 li
157.25 50.3003 li
157.351 50.2505 li
157.5 50.2505 li
@
0.5 lw
0.25 60.4004 mo
0.25 120.55 li
127.4 120.55 li
127.4 60.4004 li
0.25 60.4004 li
0.25 60.4004 li
cp
109.25 60.4004 mo
109.25 63.5503 li
109.25 120.55 mo
109.25 117.4 li
91.0503 60.4004 mo
91.0503 63.5503 li
91.0503 120.55 mo
91.0503 117.4 li
72.9004 60.4004 mo
72.9004 63.5503 li
72.9004 120.55 mo
72.9004 117.4 li
54.75 60.4004 mo
54.75 63.5503 li
54.75 120.55 mo
54.75 117.4 li
36.6001 60.4004 mo
36.6001 63.5503 li
36.6001 120.55 mo
36.6001 117.4 li
18.4004 60.4004 mo
18.4004 63.5503 li
18.4004 120.55 mo
18.4004 117.4 li
144.25 0.25 mo
144.25 53.4004 li
271.4 53.4004 li
271.4 0.25 li
144.25 0.25 li
144.25 0.25 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319EB739C72B00D2CC4607F53D8DAA36825DF613C6C839053BC26A7859D8AA158786D28D1E4DE04046CE941E5159199A77FA8129F02A3ECB8D9E54C278D22D0348DFB3C3C73F55886BF824DB1B2BE764C084A332EAF6E03DAE2729DE4723D54D14DE5E36772632D9593B8015D82D91A7513CF83AED18BF899FB582C1516AE5C3CE963C7A9224066B2CB5D769E52069DB2172C52452A135E45CF579C1E7FB12BEA387FFB8E1E9EB90D4F6BF80D4DDA346E7141D8646431020D523BDB64> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDN+Helvetica /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/DVPWDN+Helvetica*1 [32{/.notdef}rp /space 16{/.notdef}rp /one /two /three 52{/.notdef}rp /h 6{/.notdef}rp /o 2{/.notdef}rp /r /s /t 2{/.notdef}rp /w 136{/.notdef}rp]DVPWDN+Helvetica nfDVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf88.3486 69.3877 mo(3 throw)[3.89209 1.9458 1.94629 3.8916 2.33105 3.78809 0 ]xsh111.302 69.3877 mo(s)sh0.2 lw
99.9004 120.55 mo
99.9004 117.75 li
110.35 117.75 li
110.35 120.55 li
99.9004 120.55 li
99.9004 120.55 li
cp
89.4004 120.55 mo
89.4004 106.851 li
99.9004 106.851 li
99.9004 120.55 li
89.4004 120.55 li
89.4004 120.55 li
cp
78.9004 120.55 mo
78.9004 91.4004 li
89.4004 91.4004 li
89.4004 120.55 li
78.9004 120.55 li
78.9004 120.55 li
cp
68.4004 120.55 mo
68.4004 99.7002 li
78.9004 99.7002 li
78.9004 120.55 li
68.4004 120.55 li
68.4004 120.55 li
cp
57.9502 120.55 mo
57.9502 75.9502 li
68.4004 75.9502 li
68.4004 120.55 li
57.9502 120.55 li
57.9502 120.55 li
cp
47.4502 120.55 mo
47.4502 85.6504 li
57.9502 85.6504 li
57.9502 120.55 li
47.4502 120.55 li
47.4502 120.55 li
cp
36.9502 120.55 mo
36.9502 105.95 li
47.4502 105.95 li
47.4502 120.55 li
36.9502 120.55 li
36.9502 120.55 li
cp
26.4502 120.55 mo
26.4502 110.851 li
36.9502 110.851 li
36.9502 120.55 li
26.4502 120.55 li
26.4502 120.55 li
cp
16 120.55 mo
16 117.25 li
26.4502 117.25 li
26.4502 120.55 li
16 120.55 li
16 120.55 li
cp
@
0.3 lw
119.4 120.2 mo
119.5 120.2 li
119.65 120.25 li
119.75 120.25 li
119.9 120.25 li
120 120.25 li
120.15 120.25 li
120.25 120.25 li
120.4 120.25 li
120.55 120.3 li
120.65 120.3 li
120.8 120.3 li
120.9 120.3 li
121.05 120.3 li
121.15 120.3 li
121.3 120.3 li
121.4 120.3 li
121.55 120.3 li
121.65 120.351 li
121.8 120.351 li
121.95 120.351 li
122.05 120.351 li
122.2 120.351 li
122.3 120.351 li
122.45 120.351 li
122.55 120.351 li
122.7 120.351 li
122.8 120.351 li
122.95 120.351 li
123.05 120.4 li
123.2 120.4 li
123.35 120.4 li
123.45 120.4 li
123.6 120.4 li
123.7 120.4 li
123.85 120.4 li
123.95 120.4 li
124.1 120.4 li
124.2 120.4 li
124.35 120.4 li
124.45 120.4 li
124.6 120.4 li
124.75 120.4 li
124.85 120.45 li
125 120.45 li
125.1 120.45 li
125.25 120.45 li
125.35 120.45 li
125.5 120.45 li
125.6 120.45 li
125.75 120.45 li
125.85 120.45 li
126 120.45 li
126.15 120.45 li
126.25 120.45 li
126.4 120.45 li
126.5 120.45 li
126.65 120.45 li
126.75 120.45 li
126.9 120.45 li
127 120.45 li
127.15 120.45 li
127.25 120.45 li
127.4 120.45 li
106.15 118.05 mo
106.25 118.101 li
106.4 118.15 li
106.55 118.15 li
106.65 118.2 li
106.8 118.25 li
106.9 118.3 li
107.05 118.351 li
107.15 118.351 li
107.3 118.4 li
107.4 118.45 li
107.55 118.5 li
107.65 118.5 li
107.8 118.55 li
107.95 118.601 li
108.05 118.601 li
108.2 118.65 li
108.3 118.7 li
108.45 118.7 li
108.55 118.75 li
108.7 118.801 li
108.8 118.801 li
108.95 118.851 li
109.05 118.851 li
109.2 118.9 li
109.35 118.95 li
109.45 118.95 li
109.6 119 li
109.7 119 li
109.85 119.051 li
109.95 119.051 li
110.1 119.101 li
110.2 119.101 li
110.35 119.15 li
110.45 119.15 li
110.6 119.2 li
110.75 119.2 li
110.85 119.25 li
111 119.25 li
111.1 119.301 li
111.25 119.301 li
111.35 119.351 li
111.5 119.351 li
111.6 119.4 li
111.75 119.4 li
111.85 119.45 li
112 119.45 li
112.15 119.45 li
112.25 119.5 li
112.4 119.5 li
112.5 119.551 li
112.65 119.551 li
112.75 119.551 li
112.9 119.601 li
113 119.601 li
113.15 119.65 li
113.25 119.65 li
113.4 119.65 li
113.55 119.7 li
113.65 119.7 li
113.8 119.7 li
113.9 119.751 li
114.05 119.751 li
114.15 119.751 li
114.3 119.801 li
114.4 119.801 li
114.55 119.801 li
114.65 119.801 li
114.8 119.851 li
114.95 119.851 li
115.05 119.851 li
115.2 119.9 li
115.3 119.9 li
115.45 119.9 li
115.55 119.9 li
115.7 119.95 li
115.8 119.95 li
115.95 119.95 li
116.05 119.95 li
116.2 120.001 li
116.351 120.001 li
116.45 120.001 li
116.601 120.001 li
116.7 120.051 li
116.851 120.051 li
116.95 120.051 li
117.101 120.051 li
117.2 120.051 li
117.351 120.101 li
117.45 120.101 li
117.601 120.101 li
117.75 120.101 li
117.851 120.101 li
118 120.15 li
118.101 120.15 li
118.25 120.15 li
118.351 120.15 li
118.5 120.15 li
118.601 120.15 li
118.75 120.2 li
118.851 120.2 li
119 120.2 li
119.15 120.2 li
119.25 120.2 li
119.4 120.2 li
92.9004 109.65 mo
93.0503 109.8 li
93.1504 109.9 li
93.3003 110.05 li
93.4004 110.15 li
93.5503 110.3 li
93.6504 110.4 li
93.8003 110.55 li
93.9502 110.65 li
94.0503 110.75 li
94.2002 110.9 li
94.3003 111 li
94.4502 111.101 li
94.5503 111.25 li
94.7002 111.351 li
94.8003 111.45 li
94.9502 111.55 li
95.0503 111.65 li
95.2002 111.8 li
95.3501 111.9 li
95.4502 112 li
95.6001 112.1 li
95.7002 112.2 li
95.8501 112.3 li
95.9502 112.4 li
96.1001 112.5 li
96.2002 112.6 li
96.3501 112.7 li
96.4502 112.8 li
96.6001 112.9 li
96.75 113 li
96.8501 113.1 li
97 113.2 li
97.1001 113.3 li
97.25 113.399 li
97.3501 113.5 li
97.5005 113.6 li
97.6001 113.7 li
97.7505 113.8 li
97.8501 113.85 li
98.0005 113.95 li
98.1504 114.05 li
98.2505 114.149 li
98.4004 114.2 li
98.5005 114.3 li
98.6504 114.399 li
98.7505 114.5 li
98.9004 114.55 li
99.0005 114.649 li
99.1504 114.75 li
99.2505 114.8 li
99.4004 114.899 li
99.5503 114.95 li
99.6504 115.05 li
99.8003 115.1 li
99.9004 115.2 li
100.05 115.3 li
100.15 115.35 li
100.3 115.399 li
100.4 115.5 li
100.55 115.55 li
100.65 115.649 li
100.8 115.7 li
100.95 115.8 li
101.05 115.85 li
101.2 115.899 li
101.3 116 li
101.45 116.05 li
101.55 116.1 li
101.7 116.2 li
101.8 116.25 li
101.95 116.3 li
102.05 116.399 li
102.2 116.45 li
102.351 116.5 li
102.45 116.55 li
102.601 116.649 li
102.7 116.7 li
102.851 116.75 li
102.95 116.8 li
103.101 116.85 li
103.2 116.899 li
103.351 117 li
103.45 117.05 li
103.601 117.1 li
103.75 117.15 li
103.851 117.2 li
104 117.25 li
104.101 117.3 li
104.25 117.35 li
104.351 117.4 li
104.5 117.45 li
104.601 117.5 li
104.75 117.55 li
104.851 117.6 li
105 117.65 li
105.15 117.7 li
105.25 117.75 li
105.4 117.8 li
105.5 117.85 li
105.65 117.9 li
105.75 117.9 li
105.9 117.95 li
106 118 li
106.15 118.05 li
79.6504 93.1504 mo
79.8003 93.3003 li
79.9502 93.5 li
80.0503 93.6504 li
80.2002 93.8003 li
80.3003 94 li
80.4502 94.1504 li
80.5503 94.3501 li
80.7002 94.5 li
80.8003 94.7002 li
80.9502 94.8501 li
81.0503 95.0503 li
81.2002 95.2002 li
81.3501 95.4004 li
81.4502 95.5498 li
81.6001 95.75 li
81.7002 95.9004 li
81.8501 96.1006 li
81.9502 96.25 li
82.1001 96.4502 li
82.2002 96.6006 li
82.3501 96.7998 li
82.4502 96.9502 li
82.6001 97.1504 li
82.75 97.2998 li
82.8501 97.5 li
83 97.6504 li
83.1001 97.8506 li
83.2505 98 li
83.3501 98.1504 li
83.5005 98.3506 li
83.6001 98.5 li
83.7505 98.7002 li
83.8501 98.8506 li
84.0005 99.0498 li
84.1504 99.2002 li
84.2505 99.4004 li
84.4004 99.5498 li
84.5005 99.7002 li
84.6504 99.9004 li
84.7505 100.05 li
84.9004 100.25 li
85.0005 100.4 li
85.1504 100.55 li
85.2505 100.75 li
85.4004 100.9 li
85.5503 101.05 li
85.6504 101.25 li
85.8003 101.4 li
85.9004 101.55 li
86.0503 101.75 li
86.1504 101.9 li
86.3003 102.051 li
86.4004 102.25 li
86.5503 102.4 li
86.6504 102.551 li
86.8003 102.7 li
86.9502 102.9 li
87.0503 103.051 li
87.2002 103.2 li
87.3003 103.351 li
87.4502 103.5 li
87.5503 103.7 li
87.7002 103.851 li
87.8003 104 li
87.9502 104.15 li
88.0503 104.301 li
88.2002 104.45 li
88.3506 104.601 li
88.4502 104.75 li
88.6006 104.95 li
88.7002 105.101 li
88.8506 105.25 li
88.9502 105.4 li
89.1006 105.551 li
89.2002 105.7 li
89.3506 105.851 li
89.4502 106 li
89.6006 106.15 li
89.7505 106.25 li
89.8506 106.4 li
90.0005 106.551 li
90.1006 106.7 li
90.2505 106.851 li
90.3506 107 li
90.5005 107.15 li
90.6006 107.301 li
90.7505 107.4 li
90.8506 107.551 li
91.0005 107.7 li
91.1504 107.851 li
91.2505 107.95 li
91.4004 108.101 li
91.5005 108.25 li
91.6504 108.4 li
91.7505 108.5 li
91.9004 108.65 li
92.0005 108.801 li
92.1504 108.9 li
92.2505 109.051 li
92.4004 109.15 li
92.5503 109.3 li
92.6504 109.4 li
92.8003 109.55 li
92.9004 109.65 li
66.4502 80.4502 mo
66.5503 80.5 li
66.7002 80.5503 li
66.8003 80.6001 li
66.9502 80.6504 li
67.0503 80.7002 li
67.2002 80.75 li
67.3501 80.8003 li
67.4502 80.8501 li
67.6001 80.9004 li
67.7002 81 li
67.8501 81.0503 li
67.9502 81.1001 li
68.1001 81.1499 li
68.2002 81.25 li
68.3501 81.3003 li
68.4502 81.4004 li
68.6001 81.4502 li
68.75 81.5 li
68.8501 81.6001 li
69 81.7002 li
69.1001 81.75 li
69.25 81.8501 li
69.3501 81.9502 li
69.5 82 li
69.6001 82.1001 li
69.75 82.2002 li
69.8501 82.3003 li
70.0005 82.3501 li
70.1504 82.4502 li
70.2505 82.5503 li
70.4004 82.6504 li
70.5005 82.75 li
70.6504 82.8501 li
70.7505 82.9502 li
70.9004 83.0503 li
71.0005 83.1504 li
71.1504 83.3003 li
71.2505 83.4004 li
71.4004 83.5 li
71.5503 83.6001 li
71.6504 83.7002 li
71.8003 83.8501 li
71.9004 83.9502 li
72.0503 84.0503 li
72.1504 84.2002 li
72.3003 84.3003 li
72.4004 84.4502 li
72.5503 84.5503 li
72.6504 84.7002 li
72.8003 84.8003 li
72.9502 84.9502 li
73.0503 85.0503 li
73.2002 85.2002 li
73.3003 85.3501 li
73.4502 85.4502 li
73.5503 85.6001 li
73.7002 85.75 li
73.8003 85.8501 li
73.9502 86 li
74.0503 86.1504 li
74.2002 86.3003 li
74.3501 86.4004 li
74.4502 86.5503 li
74.6006 86.7002 li
74.7002 86.8501 li
74.8506 87 li
74.9502 87.1504 li
75.1006 87.3003 li
75.2002 87.4502 li
75.3506 87.6001 li
75.4502 87.75 li
75.6006 87.9004 li
75.7505 88.0503 li
75.8506 88.2002 li
76.0005 88.3501 li
76.1006 88.5 li
76.2505 88.6504 li
76.3506 88.8003 li
76.5005 89 li
76.6006 89.1504 li
76.7505 89.3003 li
76.8506 89.4502 li
77.0005 89.6001 li
77.1504 89.8003 li
77.2505 89.9502 li
77.4004 90.1001 li
77.5005 90.25 li
77.6504 90.4502 li
77.7505 90.6001 li
77.9004 90.75 li
78.0005 90.9502 li
78.1504 91.1001 li
78.2505 91.25 li
78.4004 91.4502 li
78.5503 91.6001 li
78.6504 91.75 li
78.8003 91.9502 li
78.9004 92.1001 li
79.0503 92.3003 li
79.1504 92.4502 li
79.3003 92.6001 li
79.4004 92.8003 li
79.5503 92.9502 li
79.6504 93.1504 li
53.2002 86.5503 mo
53.3003 86.4004 li
53.4502 86.3003 li
53.6001 86.1504 li
53.7002 86 li
53.8501 85.8501 li
53.9502 85.75 li
54.1001 85.6001 li
54.2002 85.4502 li
54.3501 85.3501 li
54.4502 85.2002 li
54.6001 85.0503 li
54.7002 84.9502 li
54.8501 84.8003 li
55 84.7002 li
55.1001 84.5503 li
55.25 84.4502 li
55.3501 84.3003 li
55.5 84.2002 li
55.6001 84.0503 li
55.75 83.9502 li
55.8501 83.8501 li
56 83.7002 li
56.1001 83.6001 li
56.25 83.5 li
56.4004 83.3999 li
56.5005 83.3003 li
56.6504 83.1499 li
56.7505 83.0503 li
56.9004 82.9502 li
57.0005 82.8501 li
57.1504 82.75 li
57.2505 82.6499 li
57.4004 82.5498 li
57.5005 82.4502 li
57.6504 82.3501 li
57.8003 82.2998 li
57.9004 82.2002 li
58.0503 82.1001 li
58.1504 82 li
58.3003 81.9502 li
58.4004 81.8501 li
58.5503 81.75 li
58.6504 81.7002 li
58.8003 81.6001 li
58.9004 81.5 li
59.0503 81.4502 li
59.2002 81.3999 li
59.3003 81.2998 li
59.4502 81.25 li
59.5503 81.1499 li
59.7002 81.1001 li
59.8003 81.0498 li
59.9502 81 li
60.0503 80.8999 li
60.2002 80.8501 li
60.3003 80.7998 li
60.4502 80.75 li
60.6001 80.7002 li
60.7002 80.6499 li
60.8501 80.6001 li
60.9502 80.5503 li
61.1006 80.5 li
61.2002 80.4502 li
61.3506 80.4502 li
61.4502 80.3999 li
61.6006 80.3501 li
61.7002 80.3003 li
61.8506 80.3003 li
62.0005 80.25 li
62.1006 80.25 li
62.2505 80.2002 li
62.3506 80.2002 li
62.5005 80.1504 li
62.6006 80.1504 li
62.7505 80.1001 li
62.8506 80.1001 li
63.0005 80.1001 li
63.1006 80.0503 li
63.2505 80.0503 li
63.4004 80.0503 li
63.5005 80.0503 li
63.6504 80.0503 li
63.7505 80.0503 li
63.9004 80.0503 li
64.0005 80.0503 li
64.1504 80.0503 li
64.2505 80.0503 li
64.4004 80.0503 li
64.5503 80.0503 li
64.6504 80.1001 li
64.8003 80.1001 li
64.9004 80.1001 li
65.0503 80.1504 li
65.1504 80.1504 li
65.3003 80.2002 li
65.4004 80.2002 li
65.5503 80.25 li
65.6504 80.25 li
65.8003 80.3003 li
65.9502 80.3003 li
66.0503 80.3501 li
66.2002 80.3999 li
66.3003 80.4502 li
66.4502 80.4502 li
39.9502 103.851 mo
40.1001 103.7 li
40.2002 103.5 li
40.3501 103.351 li
40.4502 103.2 li
40.6001 103.05 li
40.7002 102.9 li
40.8501 102.7 li
41 102.55 li
41.1001 102.4 li
41.25 102.25 li
41.3501 102.05 li
41.5 101.9 li
41.6001 101.75 li
41.75 101.55 li
41.8501 101.4 li
42 101.25 li
42.1001 101.05 li
42.25 100.9 li
42.4004 100.75 li
42.5 100.55 li
42.6504 100.4 li
42.75 100.25 li
42.9004 100.05 li
43 99.9004 li
43.1504 99.7002 li
43.25 99.5498 li
43.4004 99.4004 li
43.5 99.2002 li
43.6504 99.0498 li
43.8003 98.8506 li
43.9004 98.7002 li
44.0503 98.5 li
44.1504 98.3496 li
44.3003 98.1504 li
44.4004 98 li
44.5503 97.8496 li
44.6504 97.6504 li
44.8003 97.5 li
44.9004 97.2998 li
45.0503 97.1504 li
45.2002 96.9502 li
45.3003 96.7998 li
45.4502 96.5996 li
45.5503 96.4502 li
45.7002 96.25 li
45.8003 96.0996 li
45.9502 95.9004 li
46.0503 95.75 li
46.2002 95.5498 li
46.3003 95.4004 li
46.4502 95.2002 li
46.6001 95.0498 li
46.7002 94.8501 li
46.8501 94.7002 li
46.9502 94.5 li
47.1001 94.3501 li
47.2002 94.1499 li
47.3501 94 li
47.4502 93.7998 li
47.6001 93.6499 li
47.7002 93.5 li
47.8501 93.2998 li
48.0005 93.1499 li
48.1001 92.9502 li
48.2505 92.7998 li
48.3501 92.6001 li
48.5005 92.4502 li
48.6006 92.2998 li
48.7505 92.1001 li
48.8506 91.9502 li
49.0005 91.75 li
49.1006 91.6001 li
49.2505 91.4502 li
49.4004 91.25 li
49.5005 91.1001 li
49.6504 90.9502 li
49.7505 90.75 li
49.9004 90.6001 li
50.0005 90.4502 li
50.1504 90.25 li
50.2505 90.1001 li
50.4004 89.9502 li
50.5005 89.7998 li
50.6504 89.6001 li
50.8003 89.4502 li
50.9004 89.2998 li
51.0503 89.1499 li
51.1504 89 li
51.3003 88.7998 li
51.4004 88.6499 li
51.5503 88.5 li
51.6504 88.3501 li
51.8003 88.2002 li
51.9004 88.0498 li
52.0503 87.8999 li
52.2002 87.75 li
52.3003 87.6001 li
52.4502 87.4502 li
52.5503 87.2998 li
52.7002 87.1499 li
52.8003 87 li
52.9502 86.8501 li
53.0503 86.7002 li
53.2002 86.5498 li
26.7002 115.8 mo
26.8501 115.7 li
27 115.65 li
27.1001 115.55 li
27.25 115.5 li
27.3501 115.4 li
27.5 115.351 li
27.6001 115.3 li
27.75 115.2 li
27.8501 115.101 li
28 115.05 li
28.1001 114.95 li
28.25 114.9 li
28.4004 114.8 li
28.5 114.75 li
28.6504 114.65 li
28.75 114.55 li
28.9004 114.5 li
29 114.4 li
29.1504 114.3 li
29.25 114.2 li
29.4004 114.15 li
29.5 114.05 li
29.6504 113.95 li
29.8003 113.851 li
29.9004 113.8 li
30.0503 113.7 li
30.1504 113.601 li
30.3003 113.5 li
30.4004 113.4 li
30.5503 113.3 li
30.6504 113.2 li
30.8003 113.101 li
30.9004 113 li
31.0503 112.9 li
31.2002 112.801 li
31.3003 112.7 li
31.4502 112.601 li
31.5503 112.5 li
31.7002 112.4 li
31.8003 112.301 li
31.9502 112.2 li
32.0503 112.101 li
32.2002 112 li
32.3003 111.9 li
32.4502 111.801 li
32.6001 111.65 li
32.7002 111.551 li
32.8501 111.45 li
32.9502 111.351 li
33.1001 111.25 li
33.2002 111.101 li
33.3501 111 li
33.4502 110.9 li
33.6001 110.75 li
33.7002 110.65 li
33.8501 110.551 li
34.0005 110.4 li
34.1001 110.301 li
34.2505 110.15 li
34.3501 110.051 li
34.5005 109.9 li
34.6001 109.801 li
34.7505 109.65 li
34.8501 109.551 li
35.0005 109.4 li
35.1006 109.301 li
35.2505 109.15 li
35.4004 109.051 li
35.5005 108.9 li
35.6504 108.801 li
35.7505 108.65 li
35.9004 108.501 li
36.0005 108.4 li
36.1504 108.251 li
36.2505 108.101 li
36.4004 107.95 li
36.5005 107.851 li
36.6504 107.7 li
36.8003 107.551 li
36.9004 107.4 li
37.0503 107.301 li
37.1504 107.15 li
37.3003 107.001 li
37.4004 106.851 li
37.5503 106.7 li
37.6504 106.551 li
37.8003 106.4 li
37.9004 106.251 li
38.0503 106.15 li
38.2002 106.001 li
38.3003 105.851 li
38.4502 105.7 li
38.5503 105.551 li
38.7002 105.4 li
38.8003 105.251 li
38.9502 105.101 li
39.0503 104.95 li
39.2002 104.751 li
39.3003 104.601 li
39.4502 104.45 li
39.6006 104.301 li
39.7002 104.15 li
39.8506 104.001 li
39.9502 103.851 li
13.5 119.75 mo
13.6001 119.75 li
13.75 119.75 li
13.8501 119.7 li
14 119.7 li
14.1001 119.7 li
14.25 119.65 li
14.4004 119.65 li
14.5 119.65 li
14.6504 119.601 li
14.75 119.601 li
14.9004 119.55 li
15 119.55 li
15.1504 119.55 li
15.25 119.5 li
15.4004 119.5 li
15.5 119.45 li
15.6504 119.45 li
15.8003 119.45 li
15.9004 119.4 li
16.0503 119.4 li
16.1504 119.351 li
16.3003 119.351 li
16.4004 119.3 li
16.5503 119.3 li
16.6504 119.25 li
16.8003 119.25 li
16.9004 119.2 li
17.0503 119.2 li
17.2002 119.15 li
17.3003 119.15 li
17.4502 119.1 li
17.5503 119.1 li
17.7002 119.05 li
17.8003 119.05 li
17.9502 119 li
18.0503 119 li
18.2002 118.95 li
18.3003 118.95 li
18.4502 118.9 li
18.6001 118.85 li
18.7002 118.85 li
18.8501 118.8 li
18.9502 118.8 li
19.1001 118.75 li
19.2002 118.7 li
19.3501 118.7 li
19.4502 118.65 li
19.6001 118.6 li
19.7002 118.6 li
19.8501 118.55 li
20.0005 118.5 li
20.1001 118.5 li
20.2505 118.45 li
20.3501 118.399 li
20.5005 118.35 li
20.6001 118.35 li
20.7505 118.3 li
20.8501 118.25 li
21.0005 118.2 li
21.1001 118.149 li
21.2505 118.149 li
21.4004 118.1 li
21.5005 118.05 li
21.6504 118 li
21.7505 117.95 li
21.9004 117.899 li
22.0005 117.899 li
22.1504 117.85 li
22.2505 117.8 li
22.4004 117.75 li
22.5005 117.7 li
22.6504 117.649 li
22.8003 117.6 li
22.9004 117.55 li
23.0503 117.5 li
23.1504 117.45 li
23.3003 117.399 li
23.4004 117.35 li
23.5503 117.3 li
23.6504 117.25 li
23.8003 117.199 li
23.9004 117.149 li
24.0503 117.1 li
24.2002 117.05 li
24.3003 117 li
24.4502 116.899 li
24.5503 116.85 li
24.7002 116.8 li
24.8003 116.75 li
24.9502 116.699 li
25.0503 116.649 li
25.2002 116.55 li
25.3003 116.5 li
25.4502 116.449 li
25.6006 116.399 li
25.7002 116.3 li
25.8506 116.25 li
25.9502 116.199 li
26.1006 116.1 li
26.2002 116.05 li
26.3506 116 li
26.4502 115.899 li
26.6006 115.85 li
26.7002 115.8 li
0.25 120.45 mo
0.400391 120.45 li
0.5 120.45 li
0.650391 120.45 li
0.75 120.45 li
0.900391 120.45 li
1 120.45 li
1.15039 120.45 li
1.25 120.45 li
1.40039 120.45 li
1.5 120.45 li
1.65039 120.45 li
1.80029 120.45 li
1.8999 120.45 li
2.05029 120.45 li
2.1499 120.45 li
2.30029 120.45 li
2.3999 120.45 li
2.55029 120.45 li
2.6499 120.45 li
2.80029 120.45 li
2.8999 120.4 li
3.05029 120.4 li
3.2002 120.4 li
3.30029 120.4 li
3.4502 120.4 li
3.55029 120.4 li
3.7002 120.4 li
3.80029 120.4 li
3.9502 120.4 li
4.05029 120.4 li
4.2002 120.4 li
4.30029 120.4 li
4.4502 120.4 li
4.6001 120.4 li
4.7002 120.351 li
4.8501 120.351 li
4.9502 120.351 li
5.1001 120.351 li
5.2002 120.351 li
5.3501 120.351 li
5.4502 120.351 li
5.6001 120.351 li
5.7002 120.351 li
5.8501 120.351 li
6 120.351 li
6.1001 120.3 li
6.25 120.3 li
6.3501 120.3 li
6.5 120.3 li
6.6001 120.3 li
6.75 120.3 li
6.8501 120.3 li
7 120.3 li
7.1001 120.3 li
7.25 120.25 li
7.3999 120.25 li
7.5 120.25 li
7.6499 120.25 li
7.75 120.25 li
7.8999 120.25 li
8 120.25 li
8.1499 120.2 li
8.25 120.2 li
8.3999 120.2 li
8.5 120.2 li
8.6499 120.2 li
8.80029 120.2 li
8.90039 120.2 li
9.05029 120.15 li
9.15039 120.15 li
9.30029 120.15 li
9.40039 120.15 li
9.55029 120.15 li
9.65039 120.15 li
9.80029 120.101 li
9.90039 120.101 li
10.0503 120.101 li
10.2002 120.101 li
10.3003 120.101 li
10.4502 120.05 li
10.5503 120.05 li
10.7002 120.05 li
10.8003 120.05 li
10.9502 120.05 li
11.0503 120 li
11.2002 120 li
11.3003 120 li
11.4502 120 li
11.6001 119.95 li
11.7002 119.95 li
11.8501 119.95 li
11.9502 119.95 li
12.1001 119.9 li
12.2002 119.9 li
12.3501 119.9 li
12.4502 119.9 li
12.6001 119.85 li
12.7002 119.85 li
12.8501 119.85 li
13 119.8 li
13.1001 119.8 li
13.25 119.8 li
13.3501 119.8 li
13.5 119.75 li
@
0.5 lw
144.25 60.4004 mo
144.25 120.55 li
271.4 120.55 li
271.4 60.4004 li
144.25 60.4004 li
144.25 60.4004 li
cp
253.25 60.4004 mo
253.25 63.5503 li
253.25 120.55 mo
253.25 117.4 li
235.05 60.4004 mo
235.05 63.5503 li
235.05 120.55 mo
235.05 117.4 li
216.9 60.4004 mo
216.9 63.5503 li
216.9 120.55 mo
216.9 117.4 li
198.75 60.4004 mo
198.75 63.5503 li
198.75 120.55 mo
198.75 117.4 li
180.601 60.4004 mo
180.601 63.5503 li
180.601 120.55 mo
180.601 117.4 li
162.4 60.4004 mo
162.4 63.5503 li
162.4 120.55 mo
162.4 117.4 li
0.25 60.4004 mo
0.25 120.55 li
127.4 120.55 li
127.4 60.4004 li
0.25 60.4004 li
0.25 60.4004 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDN+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/DVPWDN+Helvetica*1 [32{/.notdef}rp /space 16{/.notdef}rp /one /two /three /.notdef /five 50{/.notdef}rp /h 6{/.notdef}rp /o 2{/.notdef}rp /r /s /t 2{/.notdef}rp /w 136{/.notdef}rp]DVPWDN+Helvetica nfDVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf232.349 69.3877 mo(5 throw)[3.8916 1.94629 1.94629 3.8916 2.33105 3.78809 0 ]xsh255.294 69.3877 mo(s)sh0.2 lw
245.8 120.55 mo
245.8 120.4 li
253.9 120.4 li
253.9 120.55 li
245.8 120.55 li
245.8 120.55 li
cp
237.65 120.55 mo
237.65 118.55 li
245.8 118.55 li
245.8 120.55 li
237.65 120.55 li
237.65 120.55 li
cp
229.55 120.55 mo
229.55 112.3 li
237.65 112.3 li
237.65 120.55 li
229.55 120.55 li
229.55 120.55 li
cp
221.4 120.55 mo
221.4 103.55 li
229.55 103.55 li
229.55 120.55 li
221.4 120.55 li
221.4 120.55 li
cp
213.3 120.55 mo
213.3 96.7002 li
221.4 96.7002 li
221.4 120.55 li
213.3 120.55 li
213.3 120.55 li
cp
205.15 120.55 mo
205.15 70.3003 li
213.3 70.3003 li
213.3 120.55 li
205.15 120.55 li
205.15 120.55 li
cp
197.05 120.55 mo
197.05 90.8003 li
205.15 90.8003 li
205.15 120.55 li
197.05 120.55 li
197.05 120.55 li
cp
188.95 120.55 mo
188.95 100.7 li
197.05 100.7 li
197.05 120.55 li
188.95 120.55 li
188.95 120.55 li
cp
180.8 120.55 mo
180.8 109.3 li
188.95 109.3 li
188.95 120.55 li
180.8 120.55 li
180.8 120.55 li
cp
172.7 120.55 mo
172.7 115.15 li
180.8 115.15 li
180.8 120.55 li
172.7 120.55 li
172.7 120.55 li
cp
164.55 120.55 mo
164.55 120.2 li
172.7 120.2 li
172.7 120.55 li
164.55 120.55 li
164.55 120.55 li
cp
@
0.3 lw
263.4 120.55 mo
263.5 120.55 li
263.65 120.55 li
263.75 120.55 li
263.9 120.55 li
264 120.55 li
264.15 120.55 li
264.25 120.55 li
264.4 120.55 li
264.55 120.55 li
264.65 120.55 li
264.8 120.55 li
264.9 120.55 li
265.05 120.55 li
265.15 120.55 li
265.3 120.55 li
265.4 120.55 li
265.55 120.55 li
265.65 120.55 li
265.8 120.55 li
265.95 120.55 li
266.05 120.55 li
266.2 120.55 li
266.3 120.55 li
266.45 120.55 li
266.55 120.55 li
266.7 120.55 li
266.8 120.55 li
266.95 120.55 li
267.05 120.55 li
267.2 120.55 li
267.351 120.55 li
267.45 120.55 li
267.601 120.55 li
267.7 120.55 li
267.851 120.55 li
267.95 120.55 li
268.101 120.55 li
268.2 120.55 li
268.351 120.55 li
268.45 120.55 li
268.601 120.55 li
268.75 120.55 li
268.851 120.55 li
269 120.55 li
269.101 120.55 li
269.25 120.55 li
269.351 120.55 li
269.5 120.55 li
269.601 120.55 li
269.75 120.55 li
269.851 120.55 li
270 120.55 li
270.15 120.55 li
270.25 120.55 li
270.4 120.55 li
270.5 120.55 li
270.65 120.55 li
270.75 120.55 li
270.9 120.55 li
271 120.55 li
271.15 120.55 li
271.25 120.55 li
271.4 120.55 li
250.15 120.15 mo
250.25 120.2 li
250.4 120.2 li
250.55 120.2 li
250.65 120.2 li
250.8 120.2 li
250.9 120.25 li
251.05 120.25 li
251.15 120.25 li
251.3 120.25 li
251.4 120.25 li
251.55 120.25 li
251.65 120.3 li
251.8 120.3 li
251.95 120.3 li
252.05 120.3 li
252.2 120.3 li
252.3 120.3 li
252.45 120.3 li
252.55 120.351 li
252.7 120.351 li
252.8 120.351 li
252.95 120.351 li
253.05 120.351 li
253.2 120.351 li
253.351 120.351 li
253.45 120.351 li
253.601 120.4 li
253.7 120.4 li
253.851 120.4 li
253.95 120.4 li
254.101 120.4 li
254.2 120.4 li
254.351 120.4 li
254.45 120.4 li
254.601 120.4 li
254.75 120.4 li
254.851 120.4 li
255 120.45 li
255.101 120.45 li
255.25 120.45 li
255.351 120.45 li
255.5 120.45 li
255.601 120.45 li
255.75 120.45 li
255.851 120.45 li
256 120.45 li
256.15 120.45 li
256.25 120.45 li
256.4 120.45 li
256.5 120.45 li
256.65 120.45 li
256.75 120.45 li
256.9 120.45 li
257 120.5 li
257.15 120.5 li
257.25 120.5 li
257.4 120.5 li
257.55 120.5 li
257.65 120.5 li
257.8 120.5 li
257.9 120.5 li
258.05 120.5 li
258.15 120.5 li
258.3 120.5 li
258.4 120.5 li
258.55 120.5 li
258.65 120.5 li
258.8 120.5 li
258.95 120.5 li
259.05 120.5 li
259.2 120.5 li
259.3 120.5 li
259.45 120.5 li
259.55 120.5 li
259.7 120.5 li
259.8 120.5 li
259.95 120.5 li
260.05 120.5 li
260.2 120.5 li
260.351 120.5 li
260.45 120.5 li
260.601 120.5 li
260.7 120.5 li
260.851 120.5 li
260.95 120.5 li
261.101 120.5 li
261.2 120.55 li
261.351 120.55 li
261.45 120.55 li
261.601 120.55 li
261.75 120.55 li
261.851 120.55 li
262 120.55 li
262.101 120.55 li
262.25 120.55 li
262.351 120.55 li
262.5 120.55 li
262.601 120.55 li
262.75 120.55 li
262.851 120.55 li
263 120.55 li
263.15 120.55 li
263.25 120.55 li
263.4 120.55 li
236.9 116.15 mo
237.05 116.25 li
237.15 116.351 li
237.3 116.4 li
237.4 116.5 li
237.55 116.55 li
237.65 116.65 li
237.8 116.75 li
237.95 116.8 li
238.05 116.9 li
238.2 116.95 li
238.3 117 li
238.45 117.101 li
238.55 117.15 li
238.7 117.25 li
238.8 117.3 li
238.95 117.351 li
239.05 117.45 li
239.2 117.5 li
239.351 117.55 li
239.45 117.601 li
239.601 117.65 li
239.7 117.75 li
239.851 117.8 li
239.95 117.851 li
240.101 117.9 li
240.2 117.95 li
240.351 118 li
240.45 118.05 li
240.601 118.101 li
240.75 118.2 li
240.851 118.25 li
241 118.3 li
241.101 118.351 li
241.25 118.4 li
241.351 118.4 li
241.5 118.45 li
241.601 118.5 li
241.75 118.551 li
241.851 118.601 li
242 118.65 li
242.15 118.7 li
242.25 118.75 li
242.4 118.75 li
242.5 118.801 li
242.65 118.851 li
242.75 118.9 li
242.9 118.95 li
243 118.95 li
243.15 119 li
243.25 119.051 li
243.4 119.051 li
243.55 119.101 li
243.65 119.15 li
243.8 119.15 li
243.9 119.2 li
244.05 119.25 li
244.15 119.25 li
244.3 119.301 li
244.4 119.351 li
244.55 119.351 li
244.65 119.4 li
244.8 119.4 li
244.95 119.45 li
245.05 119.45 li
245.2 119.501 li
245.3 119.501 li
245.45 119.551 li
245.55 119.551 li
245.7 119.601 li
245.8 119.601 li
245.95 119.65 li
246.05 119.65 li
246.2 119.7 li
246.351 119.7 li
246.45 119.751 li
246.601 119.751 li
246.7 119.751 li
246.851 119.801 li
246.95 119.801 li
247.101 119.851 li
247.2 119.851 li
247.351 119.851 li
247.45 119.9 li
247.601 119.9 li
247.75 119.9 li
247.851 119.95 li
248 119.95 li
248.101 119.95 li
248.25 120.001 li
248.351 120.001 li
248.5 120.001 li
248.601 120.001 li
248.75 120.051 li
248.851 120.051 li
249 120.051 li
249.15 120.101 li
249.25 120.101 li
249.4 120.101 li
249.5 120.101 li
249.65 120.15 li
249.75 120.15 li
249.9 120.15 li
250 120.15 li
250.15 120.15 li
223.65 100.101 mo
223.8 100.3 li
223.95 100.5 li
224.05 100.75 li
224.2 100.95 li
224.3 101.15 li
224.45 101.351 li
224.55 101.55 li
224.7 101.8 li
224.8 102 li
224.95 102.2 li
225.05 102.4 li
225.2 102.601 li
225.351 102.8 li
225.45 103 li
225.601 103.2 li
225.7 103.4 li
225.851 103.601 li
225.95 103.851 li
226.101 104.05 li
226.2 104.2 li
226.351 104.4 li
226.45 104.601 li
226.601 104.801 li
226.75 105 li
226.851 105.2 li
227 105.4 li
227.101 105.601 li
227.25 105.75 li
227.351 105.95 li
227.5 106.15 li
227.601 106.351 li
227.75 106.5 li
227.851 106.7 li
228 106.9 li
228.15 107.051 li
228.25 107.25 li
228.4 107.45 li
228.5 107.601 li
228.65 107.801 li
228.75 107.95 li
228.9 108.15 li
229 108.301 li
229.15 108.45 li
229.25 108.65 li
229.4 108.801 li
229.55 108.95 li
229.65 109.15 li
229.8 109.301 li
229.9 109.45 li
230.05 109.601 li
230.15 109.801 li
230.3 109.95 li
230.4 110.101 li
230.55 110.251 li
230.65 110.4 li
230.8 110.551 li
230.95 110.7 li
231.05 110.851 li
231.2 111.001 li
231.3 111.15 li
231.45 111.301 li
231.55 111.45 li
231.7 111.601 li
231.8 111.7 li
231.95 111.851 li
232.05 112.001 li
232.2 112.15 li
232.351 112.25 li
232.45 112.4 li
232.601 112.551 li
232.7 112.65 li
232.851 112.801 li
232.95 112.9 li
233.101 113.051 li
233.2 113.15 li
233.351 113.301 li
233.45 113.4 li
233.601 113.551 li
233.75 113.65 li
233.851 113.75 li
234 113.9 li
234.101 114 li
234.25 114.101 li
234.351 114.25 li
234.5 114.351 li
234.601 114.45 li
234.75 114.551 li
234.851 114.65 li
235 114.75 li
235.15 114.851 li
235.25 114.95 li
235.4 115.051 li
235.5 115.15 li
235.65 115.25 li
235.75 115.351 li
235.9 115.45 li
236 115.55 li
236.15 115.65 li
236.25 115.75 li
236.4 115.8 li
236.55 115.9 li
236.65 116 li
236.8 116.101 li
236.9 116.15 li
210.45 82 mo
210.55 82.1001 li
210.7 82.1504 li
210.8 82.25 li
210.95 82.3003 li
211.05 82.4004 li
211.2 82.4502 li
211.351 82.5503 li
211.45 82.6504 li
211.601 82.75 li
211.7 82.8501 li
211.851 82.9502 li
211.95 83.0503 li
212.101 83.1504 li
212.2 83.25 li
212.351 83.3501 li
212.45 83.4502 li
212.601 83.6001 li
212.75 83.7002 li
212.851 83.8003 li
213 83.9502 li
213.101 84.0503 li
213.25 84.2002 li
213.351 84.3003 li
213.5 84.4502 li
213.601 84.6001 li
213.75 84.75 li
213.851 84.8501 li
214 85 li
214.15 85.1504 li
214.25 85.3003 li
214.4 85.4502 li
214.5 85.6001 li
214.65 85.75 li
214.75 85.9004 li
214.9 86.1001 li
215 86.25 li
215.15 86.4004 li
215.25 86.6001 li
215.4 86.75 li
215.55 86.9004 li
215.65 87.1001 li
215.8 87.25 li
215.9 87.4502 li
216.05 87.6001 li
216.15 87.8003 li
216.3 87.9502 li
216.4 88.1504 li
216.55 88.3501 li
216.65 88.5503 li
216.8 88.7002 li
216.95 88.9004 li
217.05 89.1001 li
217.2 89.3003 li
217.3 89.5 li
217.45 89.6504 li
217.55 89.8501 li
217.7 90.0503 li
217.8 90.25 li
217.95 90.4502 li
218.05 90.6504 li
218.2 90.8501 li
218.351 91.0503 li
218.45 91.3003 li
218.601 91.5 li
218.7 91.7002 li
218.851 91.9004 li
218.95 92.1001 li
219.101 92.3003 li
219.2 92.5503 li
219.351 92.75 li
219.45 92.9502 li
219.601 93.1499 li
219.75 93.4004 li
219.851 93.6001 li
220 93.8003 li
220.101 94 li
220.25 94.25 li
220.351 94.4502 li
220.5 94.6499 li
220.601 94.8999 li
220.75 95.1001 li
220.851 95.2998 li
221 95.5498 li
221.15 95.75 li
221.25 95.9502 li
221.4 96.2002 li
221.5 96.4004 li
221.65 96.6006 li
221.75 96.8506 li
221.9 97.0498 li
222 97.25 li
222.15 97.5 li
222.25 97.7002 li
222.4 97.9502 li
222.55 98.1504 li
222.65 98.3506 li
222.8 98.6006 li
222.9 98.7998 li
223.05 99 li
223.15 99.25 li
223.3 99.4502 li
223.4 99.6504 li
223.55 99.8506 li
223.65 100.101 li
197.2 91.3003 mo
197.3 91.0503 li
197.45 90.8501 li
197.601 90.6504 li
197.7 90.4502 li
197.851 90.25 li
197.95 90.0503 li
198.101 89.8501 li
198.2 89.6504 li
198.351 89.5 li
198.45 89.3003 li
198.601 89.1001 li
198.7 88.9004 li
198.851 88.7002 li
199 88.5503 li
199.101 88.3501 li
199.25 88.1504 li
199.351 87.9502 li
199.5 87.8003 li
199.601 87.6001 li
199.75 87.4502 li
199.851 87.25 li
200 87.1001 li
200.101 86.9004 li
200.25 86.75 li
200.4 86.6001 li
200.5 86.4004 li
200.65 86.25 li
200.75 86.1001 li
200.9 85.9004 li
201 85.75 li
201.15 85.6001 li
201.25 85.4502 li
201.4 85.3003 li
201.5 85.1504 li
201.65 85 li
201.8 84.8501 li
201.9 84.75 li
202.05 84.6001 li
202.15 84.4502 li
202.3 84.3003 li
202.4 84.2002 li
202.55 84.0503 li
202.65 83.9502 li
202.8 83.8003 li
202.9 83.7002 li
203.05 83.6001 li
203.2 83.4502 li
203.3 83.3501 li
203.45 83.25 li
203.55 83.1504 li
203.7 83.0503 li
203.8 82.9502 li
203.95 82.8501 li
204.05 82.75 li
204.2 82.6504 li
204.3 82.5503 li
204.45 82.4502 li
204.601 82.4004 li
204.7 82.3003 li
204.851 82.25 li
204.95 82.1504 li
205.101 82.1001 li
205.2 82 li
205.351 81.9502 li
205.45 81.9004 li
205.601 81.8501 li
205.7 81.75 li
205.851 81.7002 li
206 81.6504 li
206.101 81.6504 li
206.25 81.6001 li
206.351 81.5503 li
206.5 81.5 li
206.601 81.4502 li
206.75 81.4502 li
206.851 81.4004 li
207 81.4004 li
207.101 81.4004 li
207.25 81.3501 li
207.4 81.3501 li
207.5 81.3501 li
207.65 81.3501 li
207.75 81.3501 li
207.9 81.3501 li
208 81.3501 li
208.15 81.3501 li
208.25 81.3501 li
208.4 81.3501 li
208.55 81.4004 li
208.65 81.4004 li
208.8 81.4004 li
208.9 81.4502 li
209.05 81.4502 li
209.15 81.5 li
209.3 81.5503 li
209.4 81.6001 li
209.55 81.6504 li
209.65 81.6504 li
209.8 81.7002 li
209.95 81.75 li
210.05 81.8501 li
210.2 81.9004 li
210.3 81.9502 li
210.45 82 li
183.95 111.601 mo
184.101 111.45 li
184.2 111.3 li
184.351 111.15 li
184.45 111 li
184.601 110.851 li
184.7 110.7 li
184.851 110.55 li
185 110.4 li
185.101 110.25 li
185.25 110.101 li
185.351 109.95 li
185.5 109.8 li
185.601 109.601 li
185.75 109.45 li
185.851 109.3 li
186 109.15 li
186.101 108.95 li
186.25 108.8 li
186.4 108.65 li
186.5 108.45 li
186.65 108.3 li
186.75 108.15 li
186.9 107.95 li
187 107.8 li
187.15 107.601 li
187.25 107.45 li
187.4 107.25 li
187.5 107.05 li
187.65 106.9 li
187.8 106.7 li
187.9 106.5 li
188.05 106.35 li
188.15 106.15 li
188.3 105.95 li
188.4 105.75 li
188.55 105.6 li
188.65 105.4 li
188.8 105.2 li
188.9 105 li
189.05 104.8 li
189.2 104.6 li
189.3 104.4 li
189.45 104.2 li
189.55 104.05 li
189.7 103.85 li
189.8 103.6 li
189.95 103.4 li
190.05 103.2 li
190.2 103 li
190.3 102.8 li
190.45 102.6 li
190.601 102.399 li
190.7 102.2 li
190.851 102 li
190.95 101.8 li
191.101 101.55 li
191.2 101.35 li
191.351 101.149 li
191.45 100.95 li
191.601 100.75 li
191.7 100.5 li
191.851 100.3 li
192 100.1 li
192.101 99.8496 li
192.25 99.6494 li
192.351 99.4502 li
192.5 99.25 li
192.601 99 li
192.75 98.7998 li
192.851 98.5996 li
193 98.3496 li
193.101 98.1494 li
193.25 97.9502 li
193.4 97.7002 li
193.5 97.5 li
193.65 97.25 li
193.75 97.0498 li
193.9 96.8496 li
194 96.5996 li
194.15 96.3994 li
194.25 96.2002 li
194.4 95.9502 li
194.5 95.75 li
194.65 95.5498 li
194.8 95.2998 li
194.9 95.0996 li
195.05 94.8999 li
195.15 94.6499 li
195.3 94.4497 li
195.4 94.25 li
195.55 94 li
195.65 93.7998 li
195.8 93.5996 li
195.9 93.3999 li
196.05 93.1499 li
196.2 92.9497 li
196.3 92.75 li
196.45 92.5498 li
196.55 92.2998 li
196.7 92.0996 li
196.8 91.8999 li
196.95 91.6997 li
197.05 91.5 li
197.2 91.2998 li
170.7 119.45 mo
170.851 119.4 li
171 119.4 li
171.101 119.351 li
171.25 119.351 li
171.351 119.3 li
171.5 119.25 li
171.601 119.25 li
171.75 119.2 li
171.851 119.15 li
172 119.15 li
172.101 119.101 li
172.25 119.05 li
172.4 119.05 li
172.5 119 li
172.65 118.95 li
172.75 118.95 li
172.9 118.9 li
173 118.85 li
173.15 118.8 li
173.25 118.75 li
173.4 118.75 li
173.5 118.7 li
173.65 118.65 li
173.8 118.6 li
173.9 118.55 li
174.05 118.5 li
174.15 118.45 li
174.3 118.4 li
174.4 118.4 li
174.55 118.35 li
174.65 118.3 li
174.8 118.25 li
174.9 118.2 li
175.05 118.1 li
175.2 118.05 li
175.3 118 li
175.45 117.95 li
175.55 117.899 li
175.7 117.85 li
175.8 117.8 li
175.95 117.75 li
176.05 117.649 li
176.2 117.6 li
176.3 117.55 li
176.45 117.5 li
176.601 117.45 li
176.7 117.35 li
176.851 117.3 li
176.95 117.25 li
177.101 117.149 li
177.2 117.1 li
177.351 117 li
177.45 116.95 li
177.601 116.899 li
177.7 116.8 li
177.851 116.75 li
178 116.649 li
178.101 116.55 li
178.25 116.5 li
178.351 116.399 li
178.5 116.35 li
178.601 116.25 li
178.75 116.149 li
178.851 116.1 li
179 116 li
179.101 115.899 li
179.25 115.8 li
179.4 115.75 li
179.5 115.649 li
179.65 115.55 li
179.75 115.45 li
179.9 115.35 li
180 115.25 li
180.15 115.15 li
180.25 115.05 li
180.4 114.95 li
180.5 114.85 li
180.65 114.75 li
180.8 114.65 li
180.9 114.55 li
181.05 114.45 li
181.15 114.35 li
181.3 114.25 li
181.4 114.1 li
181.55 114 li
181.65 113.9 li
181.8 113.75 li
181.9 113.65 li
182.05 113.55 li
182.2 113.4 li
182.3 113.3 li
182.45 113.15 li
182.55 113.05 li
182.7 112.9 li
182.8 112.8 li
182.95 112.65 li
183.05 112.55 li
183.2 112.4 li
183.3 112.25 li
183.45 112.15 li
183.601 112 li
183.7 111.851 li
183.851 111.7 li
183.95 111.601 li
157.5 120.5 mo
157.601 120.5 li
157.75 120.5 li
157.851 120.5 li
158 120.5 li
158.101 120.5 li
158.25 120.5 li
158.4 120.5 li
158.5 120.5 li
158.65 120.5 li
158.75 120.45 li
158.9 120.45 li
159 120.45 li
159.15 120.45 li
159.25 120.45 li
159.4 120.45 li
159.5 120.45 li
159.65 120.45 li
159.8 120.45 li
159.9 120.45 li
160.05 120.45 li
160.15 120.45 li
160.3 120.45 li
160.4 120.45 li
160.55 120.45 li
160.65 120.45 li
160.8 120.4 li
160.9 120.4 li
161.05 120.4 li
161.2 120.4 li
161.3 120.4 li
161.45 120.4 li
161.55 120.4 li
161.7 120.4 li
161.8 120.4 li
161.95 120.4 li
162.05 120.4 li
162.2 120.351 li
162.3 120.351 li
162.45 120.351 li
162.601 120.351 li
162.7 120.351 li
162.851 120.351 li
162.95 120.351 li
163.101 120.351 li
163.2 120.3 li
163.351 120.3 li
163.45 120.3 li
163.601 120.3 li
163.7 120.3 li
163.851 120.3 li
164 120.3 li
164.101 120.25 li
164.25 120.25 li
164.351 120.25 li
164.5 120.25 li
164.601 120.25 li
164.75 120.25 li
164.851 120.2 li
165 120.2 li
165.101 120.2 li
165.25 120.2 li
165.4 120.2 li
165.5 120.15 li
165.65 120.15 li
165.75 120.15 li
165.9 120.15 li
166 120.15 li
166.15 120.101 li
166.25 120.101 li
166.4 120.101 li
166.5 120.101 li
166.65 120.05 li
166.8 120.05 li
166.9 120.05 li
167.05 120 li
167.15 120 li
167.3 120 li
167.4 120 li
167.55 119.95 li
167.65 119.95 li
167.8 119.95 li
167.9 119.9 li
168.05 119.9 li
168.2 119.9 li
168.3 119.85 li
168.45 119.85 li
168.55 119.85 li
168.7 119.8 li
168.8 119.8 li
168.95 119.75 li
169.05 119.75 li
169.2 119.75 li
169.3 119.7 li
169.45 119.7 li
169.601 119.65 li
169.7 119.65 li
169.851 119.6 li
169.95 119.6 li
170.101 119.55 li
170.2 119.55 li
170.351 119.5 li
170.45 119.5 li
170.601 119.45 li
170.7 119.45 li
144.25 120.55 mo
144.4 120.55 li
144.5 120.55 li
144.65 120.55 li
144.75 120.55 li
144.9 120.55 li
145 120.55 li
145.15 120.55 li
145.25 120.55 li
145.4 120.55 li
145.5 120.55 li
145.65 120.55 li
145.8 120.55 li
145.9 120.55 li
146.05 120.55 li
146.15 120.55 li
146.3 120.55 li
146.4 120.55 li
146.55 120.55 li
146.65 120.55 li
146.8 120.55 li
146.9 120.55 li
147.05 120.55 li
147.2 120.55 li
147.3 120.55 li
147.45 120.55 li
147.55 120.55 li
147.7 120.55 li
147.8 120.55 li
147.95 120.55 li
148.05 120.55 li
148.2 120.55 li
148.3 120.55 li
148.45 120.55 li
148.601 120.55 li
148.7 120.55 li
148.851 120.55 li
148.95 120.55 li
149.101 120.55 li
149.2 120.55 li
149.351 120.55 li
149.45 120.55 li
149.601 120.55 li
149.7 120.55 li
149.851 120.55 li
150 120.55 li
150.101 120.55 li
150.25 120.55 li
150.351 120.55 li
150.5 120.55 li
150.601 120.55 li
150.75 120.55 li
150.851 120.55 li
151 120.55 li
151.101 120.55 li
151.25 120.55 li
151.4 120.55 li
151.5 120.55 li
151.65 120.55 li
151.75 120.55 li
151.9 120.55 li
152 120.55 li
152.15 120.55 li
152.25 120.55 li
152.4 120.55 li
152.5 120.55 li
152.65 120.55 li
152.8 120.55 li
152.9 120.55 li
153.05 120.55 li
153.15 120.55 li
153.3 120.55 li
153.4 120.55 li
153.55 120.55 li
153.65 120.55 li
153.8 120.55 li
153.9 120.55 li
154.05 120.55 li
154.2 120.55 li
154.3 120.55 li
154.45 120.55 li
154.55 120.5 li
154.7 120.5 li
154.8 120.5 li
154.95 120.5 li
155.05 120.5 li
155.2 120.5 li
155.3 120.5 li
155.45 120.5 li
155.601 120.5 li
155.7 120.5 li
155.851 120.5 li
155.95 120.5 li
156.101 120.5 li
156.2 120.5 li
156.351 120.5 li
156.45 120.5 li
156.601 120.5 li
156.7 120.5 li
156.851 120.5 li
157 120.5 li
157.101 120.5 li
157.25 120.5 li
157.351 120.5 li
157.5 120.5 li
@
0.5 lw
18.4004 127.55 mo
18.4004 130.7 li
18.4004 180.7 mo
18.4004 177.55 li
144.25 60.4004 mo
144.25 120.55 li
271.4 120.55 li
271.4 60.4004 li
144.25 60.4004 li
144.25 60.4004 li
cp
@
DVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf16.4502 190.028 mo(1)sh36.6001 127.55 mo
36.6001 130.7 li
36.6001 180.7 mo
36.6001 177.55 li
@
DVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf34.6533 190.028 mo(2)sh54.75 127.55 mo
54.75 130.7 li
54.75 180.7 mo
54.75 177.55 li
@
DVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf52.8018 190.028 mo(3)sh72.9004 127.55 mo
72.9004 130.7 li
72.9004 180.7 mo
72.9004 177.55 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDN+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/DVPWDN+Helvetica*1 [32{/.notdef}rp /space 16{/.notdef}rp /one /two /three /four /five 50{/.notdef}rp /h 6{/.notdef}rp /o 2{/.notdef}rp /r /s /t 2{/.notdef}rp /w 136{/.notdef}rp]DVPWDN+Helvetica nfDVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf70.9502 190.028 mo(4)sh91.0503 127.55 mo
91.0503 130.7 li
91.0503 180.7 mo
91.0503 177.55 li
@
DVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf89.0986 190.028 mo(5)sh109.25 127.55 mo
109.25 130.7 li
109.25 180.7 mo
109.25 177.55 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDN+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/DVPWDN+Helvetica*1 [32{/.notdef}rp /space 16{/.notdef}rp /one /two /three /four /five /six 49{/.notdef}rp /h 6{/.notdef}rp /o 2{/.notdef}rp /r /s /t 2{/.notdef}rp /w 136{/.notdef}rp]DVPWDN+Helvetica nfDVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf107.302 190.028 mo(6)sh0.25 127.55 mo
0.25 180.7 li
127.4 180.7 li
127.4 127.55 li
0.25 127.55 li
0.25 127.55 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWDN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWDN+Helvetica /Encoding getdup 48 /zero putpop%ADOEndSubsetFont
/DVPWDN+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four /five /six 49{/.notdef}rp /h 6{/.notdef}rp /o 2{/.notdef}rp /r /s /t 2{/.notdef}rp /w 136{/.notdef}rp]DVPWDN+Helvetica nfDVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf84.458 136.536 mo(10 throw)[3.89209 3.89209 1.9458 1.9458 3.89209 2.33105 3.7876 0 ]xsh111.302 136.536 mo(s)sh0.2 lw
89.3003 180.7 mo
89.3003 180.05 li
95.0503 180.05 li
95.0503 180.7 li
89.3003 180.7 li
89.3003 180.7 li
cp
83.5503 180.7 mo
83.5503 175.45 li
89.3003 175.45 li
89.3003 180.7 li
83.5503 180.7 li
83.5503 180.7 li
cp
77.8003 180.7 mo
77.8003 168.5 li
83.5503 168.5 li
83.5503 180.7 li
77.8003 180.7 li
77.8003 180.7 li
cp
72.0503 180.7 mo
72.0503 157.601 li
77.8003 157.601 li
77.8003 180.7 li
72.0503 180.7 li
72.0503 180.7 li
cp
66.3003 180.7 mo
66.3003 142.9 li
72.0503 142.9 li
72.0503 180.7 li
66.3003 180.7 li
66.3003 180.7 li
cp
60.5503 180.7 mo
60.5503 137.4 li
66.3003 137.4 li
66.3003 180.7 li
60.5503 180.7 li
60.5503 180.7 li
cp
54.8003 180.7 mo
54.8003 137.4 li
60.5503 137.4 li
60.5503 180.7 li
54.8003 180.7 li
54.8003 180.7 li
cp
49.0503 180.7 mo
49.0503 147.7 li
54.8003 147.7 li
54.8003 180.7 li
49.0503 180.7 li
49.0503 180.7 li
cp
43.3501 180.7 mo
43.3501 172.7 li
49.0503 172.7 li
49.0503 180.7 li
43.3501 180.7 li
43.3501 180.7 li
cp
37.6001 180.7 mo
37.6001 177.95 li
43.3501 177.95 li
43.3501 180.7 li
37.6001 180.7 li
37.6001 180.7 li
cp
31.8501 180.7 mo
31.8501 180.05 li
37.6001 180.05 li
37.6001 180.7 li
31.8501 180.7 li
31.8501 180.7 li
cp
26.1001 180.7 mo
26.1001 180.5 li
31.8501 180.5 li
31.8501 180.7 li
26.1001 180.7 li
26.1001 180.7 li
cp
@
0.3 lw
119.4 180.7 mo
119.5 180.7 li
119.65 180.7 li
119.75 180.7 li
119.9 180.7 li
120 180.7 li
120.15 180.7 li
120.25 180.7 li
120.4 180.7 li
120.55 180.7 li
120.65 180.7 li
120.8 180.7 li
120.9 180.7 li
121.05 180.7 li
121.15 180.7 li
121.3 180.7 li
121.4 180.7 li
121.55 180.7 li
121.65 180.7 li
121.8 180.7 li
121.95 180.7 li
122.05 180.7 li
122.2 180.7 li
122.3 180.7 li
122.45 180.7 li
122.55 180.7 li
122.7 180.7 li
122.8 180.7 li
122.95 180.7 li
123.05 180.7 li
123.2 180.7 li
123.35 180.7 li
123.45 180.7 li
123.6 180.7 li
123.7 180.7 li
123.85 180.7 li
123.95 180.7 li
124.1 180.7 li
124.2 180.7 li
124.35 180.7 li
124.45 180.7 li
124.6 180.7 li
124.75 180.7 li
124.85 180.7 li
125 180.7 li
125.1 180.7 li
125.25 180.7 li
125.35 180.7 li
125.5 180.7 li
125.6 180.7 li
125.75 180.7 li
125.85 180.7 li
126 180.7 li
126.15 180.7 li
126.25 180.7 li
126.4 180.7 li
126.5 180.7 li
126.65 180.7 li
126.75 180.7 li
126.9 180.7 li
127 180.7 li
127.15 180.7 li
127.25 180.7 li
127.4 180.7 li
106.15 180.7 mo
106.25 180.7 li
106.4 180.7 li
106.55 180.7 li
106.65 180.7 li
106.8 180.7 li
106.9 180.7 li
107.05 180.7 li
107.15 180.7 li
107.3 180.7 li
107.4 180.7 li
107.55 180.7 li
107.65 180.7 li
107.8 180.7 li
107.95 180.7 li
108.05 180.7 li
108.2 180.7 li
108.3 180.7 li
108.45 180.7 li
108.55 180.7 li
108.7 180.7 li
108.8 180.7 li
108.95 180.7 li
109.05 180.7 li
109.2 180.7 li
109.35 180.7 li
109.45 180.7 li
109.6 180.7 li
109.7 180.7 li
109.85 180.7 li
109.95 180.7 li
110.1 180.7 li
110.2 180.7 li
110.35 180.7 li
110.45 180.7 li
110.6 180.7 li
110.75 180.7 li
110.85 180.7 li
111 180.7 li
111.1 180.7 li
111.25 180.7 li
111.35 180.7 li
111.5 180.7 li
111.6 180.7 li
111.75 180.7 li
111.85 180.7 li
112 180.7 li
112.15 180.7 li
112.25 180.7 li
112.4 180.7 li
112.5 180.7 li
112.65 180.7 li
112.75 180.7 li
112.9 180.7 li
113 180.7 li
113.15 180.7 li
113.25 180.7 li
113.4 180.7 li
113.55 180.7 li
113.65 180.7 li
113.8 180.7 li
113.9 180.7 li
114.05 180.7 li
114.15 180.7 li
114.3 180.7 li
114.4 180.7 li
114.55 180.7 li
114.65 180.7 li
114.8 180.7 li
114.95 180.7 li
115.05 180.7 li
115.2 180.7 li
115.3 180.7 li
115.45 180.7 li
115.55 180.7 li
115.7 180.7 li
115.8 180.7 li
115.95 180.7 li
116.05 180.7 li
116.2 180.7 li
116.351 180.7 li
116.45 180.7 li
116.601 180.7 li
116.7 180.7 li
116.851 180.7 li
116.95 180.7 li
117.101 180.7 li
117.2 180.7 li
117.351 180.7 li
117.45 180.7 li
117.601 180.7 li
117.75 180.7 li
117.851 180.7 li
118 180.7 li
118.101 180.7 li
118.25 180.7 li
118.351 180.7 li
118.5 180.7 li
118.601 180.7 li
118.75 180.7 li
118.851 180.7 li
119 180.7 li
119.15 180.7 li
119.25 180.7 li
119.4 180.7 li
92.9004 180.101 mo
93.0503 180.101 li
93.1504 180.15 li
93.3003 180.15 li
93.4004 180.2 li
93.5503 180.2 li
93.6504 180.2 li
93.8003 180.25 li
93.9502 180.25 li
94.0503 180.25 li
94.2002 180.3 li
94.3003 180.3 li
94.4502 180.3 li
94.5503 180.351 li
94.7002 180.351 li
94.8003 180.351 li
94.9502 180.4 li
95.0503 180.4 li
95.2002 180.4 li
95.3501 180.4 li
95.4502 180.45 li
95.6001 180.45 li
95.7002 180.45 li
95.8501 180.45 li
95.9502 180.45 li
96.1001 180.5 li
96.2002 180.5 li
96.3501 180.5 li
96.4502 180.5 li
96.6001 180.5 li
96.75 180.5 li
96.8501 180.55 li
97 180.55 li
97.1001 180.55 li
97.25 180.55 li
97.3501 180.55 li
97.5005 180.55 li
97.6001 180.55 li
97.7505 180.55 li
97.8501 180.601 li
98.0005 180.601 li
98.1504 180.601 li
98.2505 180.601 li
98.4004 180.601 li
98.5005 180.601 li
98.6504 180.601 li
98.7505 180.601 li
98.9004 180.601 li
99.0005 180.601 li
99.1504 180.601 li
99.2505 180.65 li
99.4004 180.65 li
99.5503 180.65 li
99.6504 180.65 li
99.8003 180.65 li
99.9004 180.65 li
100.05 180.65 li
100.15 180.65 li
100.3 180.65 li
100.4 180.65 li
100.55 180.65 li
100.65 180.65 li
100.8 180.65 li
100.95 180.65 li
101.05 180.65 li
101.2 180.65 li
101.3 180.65 li
101.45 180.65 li
101.55 180.65 li
101.7 180.65 li
101.8 180.65 li
101.95 180.65 li
102.05 180.7 li
102.2 180.7 li
102.351 180.7 li
102.45 180.7 li
102.601 180.7 li
102.7 180.7 li
102.851 180.7 li
102.95 180.7 li
103.101 180.7 li
103.2 180.7 li
103.351 180.7 li
103.45 180.7 li
103.601 180.7 li
103.75 180.7 li
103.851 180.7 li
104 180.7 li
104.101 180.7 li
104.25 180.7 li
104.351 180.7 li
104.5 180.7 li
104.601 180.7 li
104.75 180.7 li
104.851 180.7 li
105 180.7 li
105.15 180.7 li
105.25 180.7 li
105.4 180.7 li
105.5 180.7 li
105.65 180.7 li
105.75 180.7 li
105.9 180.7 li
106 180.7 li
106.15 180.7 li
79.6504 167.351 mo
79.8003 167.65 li
79.9502 167.9 li
80.0503 168.2 li
80.2002 168.45 li
80.3003 168.7 li
80.4502 168.95 li
80.5503 169.2 li
80.7002 169.45 li
80.8003 169.7 li
80.9502 169.95 li
81.0503 170.2 li
81.2002 170.45 li
81.3501 170.7 li
81.4502 170.9 li
81.6001 171.15 li
81.7002 171.35 li
81.8501 171.55 li
81.9502 171.8 li
82.1001 172 li
82.2002 172.2 li
82.3501 172.4 li
82.4502 172.601 li
82.6001 172.8 li
82.75 173 li
82.8501 173.2 li
83 173.4 li
83.1001 173.55 li
83.2505 173.75 li
83.3501 173.9 li
83.5005 174.101 li
83.6001 174.25 li
83.7505 174.45 li
83.8501 174.601 li
84.0005 174.75 li
84.1504 174.9 li
84.2505 175.05 li
84.4004 175.2 li
84.5005 175.351 li
84.6504 175.5 li
84.7505 175.65 li
84.9004 175.8 li
85.0005 175.9 li
85.1504 176.05 li
85.2505 176.2 li
85.4004 176.3 li
85.5503 176.45 li
85.6504 176.55 li
85.8003 176.65 li
85.9004 176.8 li
86.0503 176.9 li
86.1504 177 li
86.3003 177.101 li
86.4004 177.2 li
86.5503 177.3 li
86.6504 177.4 li
86.8003 177.5 li
86.9502 177.6 li
87.0503 177.7 li
87.2002 177.8 li
87.3003 177.9 li
87.4502 177.95 li
87.5503 178.05 li
87.7002 178.15 li
87.8003 178.2 li
87.9502 178.3 li
88.0503 178.35 li
88.2002 178.45 li
88.3506 178.5 li
88.4502 178.6 li
88.6006 178.65 li
88.7002 178.7 li
88.8506 178.8 li
88.9502 178.85 li
89.1006 178.9 li
89.2002 178.95 li
89.3506 179 li
89.4502 179.1 li
89.6006 179.15 li
89.7505 179.2 li
89.8506 179.25 li
90.0005 179.3 li
90.1006 179.351 li
90.2505 179.4 li
90.3506 179.45 li
90.5005 179.45 li
90.6006 179.5 li
90.7505 179.55 li
90.8506 179.601 li
91.0005 179.65 li
91.1504 179.65 li
91.2505 179.7 li
91.4004 179.75 li
91.5005 179.8 li
91.6504 179.8 li
91.7505 179.851 li
91.9004 179.851 li
92.0005 179.9 li
92.1504 179.95 li
92.2505 179.95 li
92.4004 180 li
92.5503 180 li
92.6504 180.05 li
92.8003 180.05 li
92.9004 180.101 li
66.4502 133.4 mo
66.5503 133.55 li
66.7002 133.7 li
66.8003 133.9 li
66.9502 134.101 li
67.0503 134.3 li
67.2002 134.5 li
67.3501 134.7 li
67.4502 134.9 li
67.6001 135.15 li
67.7002 135.351 li
67.8501 135.601 li
67.9502 135.851 li
68.1001 136.101 li
68.2002 136.351 li
68.3501 136.601 li
68.4502 136.851 li
68.6001 137.15 li
68.75 137.4 li
68.8501 137.7 li
69 138 li
69.1001 138.3 li
69.25 138.601 li
69.3501 138.9 li
69.5 139.2 li
69.6001 139.5 li
69.75 139.8 li
69.8501 140.15 li
70.0005 140.45 li
70.1504 140.8 li
70.2505 141.15 li
70.4004 141.45 li
70.5005 141.8 li
70.6504 142.15 li
70.7505 142.5 li
70.9004 142.851 li
71.0005 143.2 li
71.1504 143.55 li
71.2505 143.95 li
71.4004 144.3 li
71.5503 144.65 li
71.6504 145 li
71.8003 145.4 li
71.9004 145.75 li
72.0503 146.15 li
72.1504 146.5 li
72.3003 146.9 li
72.4004 147.25 li
72.5503 147.65 li
72.6504 148.05 li
72.8003 148.4 li
72.9502 148.8 li
73.0503 149.15 li
73.2002 149.55 li
73.3003 149.95 li
73.4502 150.351 li
73.5503 150.7 li
73.7002 151.101 li
73.8003 151.5 li
73.9502 151.851 li
74.0503 152.25 li
74.2002 152.65 li
74.3501 153 li
74.4502 153.4 li
74.6006 153.8 li
74.7002 154.15 li
74.8506 154.55 li
74.9502 154.95 li
75.1006 155.3 li
75.2002 155.7 li
75.3506 156.05 li
75.4502 156.45 li
75.6006 156.8 li
75.7505 157.15 li
75.8506 157.55 li
76.0005 157.9 li
76.1006 158.25 li
76.2505 158.65 li
76.3506 159 li
76.5005 159.351 li
76.6006 159.7 li
76.7505 160.05 li
76.8506 160.4 li
77.0005 160.75 li
77.1504 161.101 li
77.2505 161.45 li
77.4004 161.8 li
77.5005 162.101 li
77.6504 162.45 li
77.7505 162.801 li
77.9004 163.101 li
78.0005 163.45 li
78.1504 163.75 li
78.2505 164.101 li
78.4004 164.4 li
78.5503 164.7 li
78.6504 165 li
78.8003 165.301 li
78.9004 165.601 li
79.0503 165.9 li
79.1504 166.2 li
79.3003 166.5 li
79.4004 166.801 li
79.5503 167.101 li
79.6504 167.351 li
53.2002 153.4 mo
53.3003 153 li
53.4502 152.65 li
53.6001 152.25 li
53.7002 151.851 li
53.8501 151.5 li
53.9502 151.101 li
54.1001 150.7 li
54.2002 150.351 li
54.3501 149.95 li
54.4502 149.55 li
54.6001 149.15 li
54.7002 148.8 li
54.8501 148.4 li
55 148.05 li
55.1001 147.65 li
55.25 147.25 li
55.3501 146.9 li
55.5 146.5 li
55.6001 146.15 li
55.75 145.75 li
55.8501 145.4 li
56 145 li
56.1001 144.65 li
56.25 144.3 li
56.4004 143.95 li
56.5005 143.55 li
56.6504 143.2 li
56.7505 142.851 li
56.9004 142.5 li
57.0005 142.15 li
57.1504 141.8 li
57.2505 141.45 li
57.4004 141.15 li
57.5005 140.8 li
57.6504 140.45 li
57.8003 140.15 li
57.9004 139.8 li
58.0503 139.5 li
58.1504 139.2 li
58.3003 138.9 li
58.4004 138.601 li
58.5503 138.3 li
58.6504 138 li
58.8003 137.7 li
58.9004 137.4 li
59.0503 137.15 li
59.2002 136.851 li
59.3003 136.601 li
59.4502 136.351 li
59.5503 136.101 li
59.7002 135.851 li
59.8003 135.601 li
59.9502 135.351 li
60.0503 135.15 li
60.2002 134.9 li
60.3003 134.7 li
60.4502 134.5 li
60.6001 134.3 li
60.7002 134.101 li
60.8501 133.9 li
60.9502 133.7 li
61.1006 133.55 li
61.2002 133.4 li
61.3506 133.25 li
61.4502 133.05 li
61.6006 132.95 li
61.7002 132.8 li
61.8506 132.65 li
62.0005 132.55 li
62.1006 132.45 li
62.2505 132.3 li
62.3506 132.25 li
62.5005 132.15 li
62.6006 132.05 li
62.7505 132 li
62.8506 131.9 li
63.0005 131.851 li
63.1006 131.8 li
63.2505 131.75 li
63.4004 131.75 li
63.5005 131.7 li
63.6504 131.7 li
63.7505 131.7 li
63.9004 131.7 li
64.0005 131.7 li
64.1504 131.7 li
64.2505 131.75 li
64.4004 131.75 li
64.5503 131.8 li
64.6504 131.851 li
64.8003 131.9 li
64.9004 132 li
65.0503 132.05 li
65.1504 132.15 li
65.3003 132.25 li
65.4004 132.3 li
65.5503 132.45 li
65.6504 132.55 li
65.8003 132.65 li
65.9502 132.8 li
66.0503 132.95 li
66.2002 133.05 li
66.3003 133.25 li
66.4502 133.4 li
39.9502 178.15 mo
40.1001 178.05 li
40.2002 177.95 li
40.3501 177.9 li
40.4502 177.8 li
40.6001 177.7 li
40.7002 177.601 li
40.8501 177.5 li
41 177.4 li
41.1001 177.3 li
41.25 177.2 li
41.3501 177.101 li
41.5 177 li
41.6001 176.9 li
41.75 176.8 li
41.8501 176.65 li
42 176.55 li
42.1001 176.45 li
42.25 176.3 li
42.4004 176.2 li
42.5 176.05 li
42.6504 175.9 li
42.75 175.801 li
42.9004 175.65 li
43 175.5 li
43.1504 175.351 li
43.25 175.2 li
43.4004 175.051 li
43.5 174.9 li
43.6504 174.75 li
43.8003 174.601 li
43.9004 174.45 li
44.0503 174.25 li
44.1504 174.101 li
44.3003 173.9 li
44.4004 173.75 li
44.5503 173.55 li
44.6504 173.4 li
44.8003 173.2 li
44.9004 173 li
45.0503 172.8 li
45.2002 172.601 li
45.3003 172.4 li
45.4502 172.2 li
45.5503 172 li
45.7002 171.8 li
45.8003 171.55 li
45.9502 171.351 li
46.0503 171.15 li
46.2002 170.9 li
46.3003 170.7 li
46.4502 170.45 li
46.6001 170.2 li
46.7002 169.95 li
46.8501 169.7 li
46.9502 169.45 li
47.1001 169.2 li
47.2002 168.95 li
47.3501 168.7 li
47.4502 168.45 li
47.6001 168.2 li
47.7002 167.9 li
47.8501 167.65 li
48.0005 167.351 li
48.1001 167.101 li
48.2505 166.801 li
48.3501 166.5 li
48.5005 166.2 li
48.6006 165.9 li
48.7505 165.601 li
48.8506 165.301 li
49.0005 165 li
49.1006 164.7 li
49.2505 164.4 li
49.4004 164.101 li
49.5005 163.75 li
49.6504 163.45 li
49.7505 163.101 li
49.9004 162.8 li
50.0005 162.45 li
50.1504 162.101 li
50.2505 161.8 li
50.4004 161.45 li
50.5005 161.101 li
50.6504 160.75 li
50.8003 160.4 li
50.9004 160.05 li
51.0503 159.7 li
51.1504 159.351 li
51.3003 159 li
51.4004 158.65 li
51.5503 158.25 li
51.6504 157.9 li
51.8003 157.55 li
51.9004 157.15 li
52.0503 156.8 li
52.2002 156.45 li
52.3003 156.05 li
52.4502 155.7 li
52.5503 155.3 li
52.7002 154.95 li
52.8003 154.55 li
52.9502 154.15 li
53.0503 153.8 li
53.2002 153.4 li
26.7002 180.65 mo
26.8501 180.65 li
27 180.65 li
27.1001 180.65 li
27.25 180.65 li
27.3501 180.65 li
27.5 180.65 li
27.6001 180.65 li
27.75 180.65 li
27.8501 180.65 li
28 180.65 li
28.1001 180.65 li
28.25 180.65 li
28.4004 180.65 li
28.5 180.601 li
28.6504 180.601 li
28.75 180.601 li
28.9004 180.601 li
29 180.601 li
29.1504 180.601 li
29.25 180.601 li
29.4004 180.601 li
29.5 180.601 li
29.6504 180.601 li
29.8003 180.601 li
29.9004 180.55 li
30.0503 180.55 li
30.1504 180.55 li
30.3003 180.55 li
30.4004 180.55 li
30.5503 180.55 li
30.6504 180.55 li
30.8003 180.55 li
30.9004 180.5 li
31.0503 180.5 li
31.2002 180.5 li
31.3003 180.5 li
31.4502 180.5 li
31.5503 180.5 li
31.7002 180.45 li
31.8003 180.45 li
31.9502 180.45 li
32.0503 180.45 li
32.2002 180.45 li
32.3003 180.4 li
32.4502 180.4 li
32.6001 180.4 li
32.7002 180.4 li
32.8501 180.351 li
32.9502 180.351 li
33.1001 180.351 li
33.2002 180.3 li
33.3501 180.3 li
33.4502 180.3 li
33.6001 180.25 li
33.7002 180.25 li
33.8501 180.25 li
34.0005 180.2 li
34.1001 180.2 li
34.2505 180.2 li
34.3501 180.15 li
34.5005 180.15 li
34.6001 180.1 li
34.7505 180.1 li
34.8501 180.05 li
35.0005 180.05 li
35.1006 180 li
35.2505 180 li
35.4004 179.95 li
35.5005 179.95 li
35.6504 179.9 li
35.7505 179.85 li
35.9004 179.85 li
36.0005 179.8 li
36.1504 179.8 li
36.2505 179.75 li
36.4004 179.7 li
36.5005 179.65 li
36.6504 179.65 li
36.8003 179.6 li
36.9004 179.55 li
37.0503 179.5 li
37.1504 179.45 li
37.3003 179.45 li
37.4004 179.4 li
37.5503 179.35 li
37.6504 179.3 li
37.8003 179.25 li
37.9004 179.2 li
38.0503 179.149 li
38.2002 179.1 li
38.3003 179 li
38.4502 178.95 li
38.5503 178.899 li
38.7002 178.85 li
38.8003 178.8 li
38.9502 178.7 li
39.0503 178.649 li
39.2002 178.6 li
39.3003 178.5 li
39.4502 178.45 li
39.6006 178.35 li
39.7002 178.3 li
39.8506 178.2 li
39.9502 178.149 li
13.5 180.7 mo
13.6001 180.7 li
13.75 180.7 li
13.8501 180.7 li
14 180.7 li
14.1001 180.7 li
14.25 180.7 li
14.4004 180.7 li
14.5 180.7 li
14.6504 180.7 li
14.75 180.7 li
14.9004 180.7 li
15 180.7 li
15.1504 180.7 li
15.25 180.7 li
15.4004 180.7 li
15.5 180.7 li
15.6504 180.7 li
15.8003 180.7 li
15.9004 180.7 li
16.0503 180.7 li
16.1504 180.7 li
16.3003 180.7 li
16.4004 180.7 li
16.5503 180.7 li
16.6504 180.7 li
16.8003 180.7 li
16.9004 180.7 li
17.0503 180.7 li
17.2002 180.7 li
17.3003 180.7 li
17.4502 180.7 li
17.5503 180.7 li
17.7002 180.7 li
17.8003 180.7 li
17.9502 180.7 li
18.0503 180.7 li
18.2002 180.7 li
18.3003 180.7 li
18.4502 180.7 li
18.6001 180.7 li
18.7002 180.7 li
18.8501 180.7 li
18.9502 180.7 li
19.1001 180.7 li
19.2002 180.7 li
19.3501 180.7 li
19.4502 180.7 li
19.6001 180.7 li
19.7002 180.7 li
19.8501 180.7 li
20.0005 180.7 li
20.1001 180.7 li
20.2505 180.7 li
20.3501 180.7 li
20.5005 180.7 li
20.6001 180.7 li
20.7505 180.7 li
20.8501 180.7 li
21.0005 180.7 li
21.1001 180.7 li
21.2505 180.7 li
21.4004 180.7 li
21.5005 180.7 li
21.6504 180.7 li
21.7505 180.7 li
21.9004 180.7 li
22.0005 180.7 li
22.1504 180.7 li
22.2505 180.7 li
22.4004 180.7 li
22.5005 180.7 li
22.6504 180.7 li
22.8003 180.7 li
22.9004 180.7 li
23.0503 180.7 li
23.1504 180.7 li
23.3003 180.7 li
23.4004 180.7 li
23.5503 180.7 li
23.6504 180.7 li
23.8003 180.7 li
23.9004 180.7 li
24.0503 180.7 li
24.2002 180.7 li
24.3003 180.7 li
24.4502 180.7 li
24.5503 180.7 li
24.7002 180.7 li
24.8003 180.7 li
24.9502 180.7 li
25.0503 180.7 li
25.2002 180.7 li
25.3003 180.7 li
25.4502 180.7 li
25.6006 180.7 li
25.7002 180.65 li
25.8506 180.65 li
25.9502 180.65 li
26.1006 180.65 li
26.2002 180.65 li
26.3506 180.65 li
26.4502 180.65 li
26.6006 180.65 li
26.7002 180.65 li
0.25 180.7 mo
0.400391 180.7 li
0.5 180.7 li
0.650391 180.7 li
0.75 180.7 li
0.900391 180.7 li
1 180.7 li
1.15039 180.7 li
1.25 180.7 li
1.40039 180.7 li
1.5 180.7 li
1.65039 180.7 li
1.80029 180.7 li
1.8999 180.7 li
2.05029 180.7 li
2.1499 180.7 li
2.30029 180.7 li
2.3999 180.7 li
2.55029 180.7 li
2.6499 180.7 li
2.80029 180.7 li
2.8999 180.7 li
3.05029 180.7 li
3.2002 180.7 li
3.30029 180.7 li
3.4502 180.7 li
3.55029 180.7 li
3.7002 180.7 li
3.80029 180.7 li
3.9502 180.7 li
4.05029 180.7 li
4.2002 180.7 li
4.30029 180.7 li
4.4502 180.7 li
4.6001 180.7 li
4.7002 180.7 li
4.8501 180.7 li
4.9502 180.7 li
5.1001 180.7 li
5.2002 180.7 li
5.3501 180.7 li
5.4502 180.7 li
5.6001 180.7 li
5.7002 180.7 li
5.8501 180.7 li
6 180.7 li
6.1001 180.7 li
6.25 180.7 li
6.3501 180.7 li
6.5 180.7 li
6.6001 180.7 li
6.75 180.7 li
6.8501 180.7 li
7 180.7 li
7.1001 180.7 li
7.25 180.7 li
7.3999 180.7 li
7.5 180.7 li
7.6499 180.7 li
7.75 180.7 li
7.8999 180.7 li
8 180.7 li
8.1499 180.7 li
8.25 180.7 li
8.3999 180.7 li
8.5 180.7 li
8.6499 180.7 li
8.80029 180.7 li
8.90039 180.7 li
9.05029 180.7 li
9.15039 180.7 li
9.30029 180.7 li
9.40039 180.7 li
9.55029 180.7 li
9.65039 180.7 li
9.80029 180.7 li
9.90039 180.7 li
10.0503 180.7 li
10.2002 180.7 li
10.3003 180.7 li
10.4502 180.7 li
10.5503 180.7 li
10.7002 180.7 li
10.8003 180.7 li
10.9502 180.7 li
11.0503 180.7 li
11.2002 180.7 li
11.3003 180.7 li
11.4502 180.7 li
11.6001 180.7 li
11.7002 180.7 li
11.8501 180.7 li
11.9502 180.7 li
12.1001 180.7 li
12.2002 180.7 li
12.3501 180.7 li
12.4502 180.7 li
12.6001 180.7 li
12.7002 180.7 li
12.8501 180.7 li
13 180.7 li
13.1001 180.7 li
13.25 180.7 li
13.3501 180.7 li
13.5 180.7 li
@
0.5 lw
162.4 127.55 mo
162.4 130.7 li
162.4 180.7 mo
162.4 177.55 li
0.25 127.55 mo
0.25 180.7 li
127.4 180.7 li
127.4 127.55 li
0.25 127.55 li
0.25 127.55 li
cp
@
DVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf160.45 190.028 mo(1)sh180.601 127.55 mo
180.601 130.7 li
180.601 180.7 mo
180.601 177.55 li
@
DVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf178.653 190.028 mo(2)sh198.75 127.55 mo
198.75 130.7 li
198.75 180.7 mo
198.75 177.55 li
@
DVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf196.794 190.028 mo(3)sh216.9 127.55 mo
216.9 130.7 li
216.9 180.7 mo
216.9 177.55 li
@
DVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf214.95 190.028 mo(4)sh235.05 127.55 mo
235.05 130.7 li
235.05 180.7 mo
235.05 177.55 li
@
DVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf233.099 190.028 mo(5)sh253.25 127.55 mo
253.25 130.7 li
253.25 180.7 mo
253.25 177.55 li
@
DVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf251.302 190.028 mo(6)sh144.25 127.55 mo
144.25 180.7 li
271.4 180.7 li
271.4 127.55 li
144.25 127.55 li
144.25 127.55 li
cp
@
DVPWDN+Helvetica*1 [7 0 0 -7 0 0 ]msf228.458 136.536 mo(50 throw)[3.8916 3.89258 1.94629 1.94531 3.89258 2.33105 3.78711 0 ]xsh255.294 136.536 mo(s)sh0.2 lw
222.601 180.7 mo
222.601 180.5 li
225.15 180.5 li
225.15 180.7 li
222.601 180.7 li
222.601 180.7 li
cp
220.05 180.7 mo
220.05 180.3 li
222.601 180.3 li
222.601 180.7 li
220.05 180.7 li
220.05 180.7 li
cp
217.45 180.7 mo
217.45 178.601 li
220.05 178.601 li
220.05 180.7 li
217.45 180.7 li
217.45 180.7 li
cp
214.9 180.7 mo
214.9 175.5 li
217.45 175.5 li
217.45 180.7 li
214.9 180.7 li
214.9 180.7 li
cp
212.3 180.7 mo
212.3 159.8 li
214.9 159.8 li
214.9 180.7 li
212.3 180.7 li
212.3 180.7 li
cp
209.75 180.7 mo
209.75 145 li
212.3 145 li
212.3 180.7 li
209.75 180.7 li
209.75 180.7 li
cp
207.2 180.7 mo
207.2 130.8 li
209.75 130.8 li
209.75 180.7 li
207.2 180.7 li
207.2 180.7 li
cp
204.601 180.7 mo
204.601 136 li
207.2 136 li
207.2 180.7 li
204.601 180.7 li
204.601 180.7 li
cp
202.05 180.7 mo
202.05 151.7 li
204.601 151.7 li
204.601 180.7 li
202.05 180.7 li
202.05 180.7 li
cp
199.5 180.7 mo
199.5 166.5 li
202.05 166.5 li
202.05 180.7 li
199.5 180.7 li
199.5 180.7 li
cp
196.9 180.7 mo
196.9 175.25 li
199.5 175.25 li
199.5 180.7 li
196.9 180.7 li
196.9 180.7 li
cp
194.351 180.7 mo
194.351 179.65 li
196.9 179.65 li
196.9 180.7 li
194.351 180.7 li
194.351 180.7 li
cp
@
0.3 lw
263.4 180.7 mo
263.5 180.7 li
263.65 180.7 li
263.75 180.7 li
263.9 180.7 li
264 180.7 li
264.15 180.7 li
264.25 180.7 li
264.4 180.7 li
264.55 180.7 li
264.65 180.7 li
264.8 180.7 li
264.9 180.7 li
265.05 180.7 li
265.15 180.7 li
265.3 180.7 li
265.4 180.7 li
265.55 180.7 li
265.65 180.7 li
265.8 180.7 li
265.95 180.7 li
266.05 180.7 li
266.2 180.7 li
266.3 180.7 li
266.45 180.7 li
266.55 180.7 li
266.7 180.7 li
266.8 180.7 li
266.95 180.7 li
267.05 180.7 li
267.2 180.7 li
267.351 180.7 li
267.45 180.7 li
267.601 180.7 li
267.7 180.7 li
267.851 180.7 li
267.95 180.7 li
268.101 180.7 li
268.2 180.7 li
268.351 180.7 li
268.45 180.7 li
268.601 180.7 li
268.75 180.7 li
268.851 180.7 li
269 180.7 li
269.101 180.7 li
269.25 180.7 li
269.351 180.7 li
269.5 180.7 li
269.601 180.7 li
269.75 180.7 li
269.851 180.7 li
270 180.7 li
270.15 180.7 li
270.25 180.7 li
270.4 180.7 li
270.5 180.7 li
270.65 180.7 li
270.75 180.7 li
270.9 180.7 li
271 180.7 li
271.15 180.7 li
271.25 180.7 li
271.4 180.7 li
250.15 180.7 mo
250.25 180.7 li
250.4 180.7 li
250.55 180.7 li
250.65 180.7 li
250.8 180.7 li
250.9 180.7 li
251.05 180.7 li
251.15 180.7 li
251.3 180.7 li
251.4 180.7 li
251.55 180.7 li
251.65 180.7 li
251.8 180.7 li
251.95 180.7 li
252.05 180.7 li
252.2 180.7 li
252.3 180.7 li
252.45 180.7 li
252.55 180.7 li
252.7 180.7 li
252.8 180.7 li
252.95 180.7 li
253.05 180.7 li
253.2 180.7 li
253.351 180.7 li
253.45 180.7 li
253.601 180.7 li
253.7 180.7 li
253.851 180.7 li
253.95 180.7 li
254.101 180.7 li
254.2 180.7 li
254.351 180.7 li
254.45 180.7 li
254.601 180.7 li
254.75 180.7 li
254.851 180.7 li
255 180.7 li
255.101 180.7 li
255.25 180.7 li
255.351 180.7 li
255.5 180.7 li
255.601 180.7 li
255.75 180.7 li
255.851 180.7 li
256 180.7 li
256.15 180.7 li
256.25 180.7 li
256.4 180.7 li
256.5 180.7 li
256.65 180.7 li
256.75 180.7 li
256.9 180.7 li
257 180.7 li
257.15 180.7 li
257.25 180.7 li
257.4 180.7 li
257.55 180.7 li
257.65 180.7 li
257.8 180.7 li
257.9 180.7 li
258.05 180.7 li
258.15 180.7 li
258.3 180.7 li
258.4 180.7 li
258.55 180.7 li
258.65 180.7 li
258.8 180.7 li
258.95 180.7 li
259.05 180.7 li
259.2 180.7 li
259.3 180.7 li
259.45 180.7 li
259.55 180.7 li
259.7 180.7 li
259.8 180.7 li
259.95 180.7 li
260.05 180.7 li
260.2 180.7 li
260.351 180.7 li
260.45 180.7 li
260.601 180.7 li
260.7 180.7 li
260.851 180.7 li
260.95 180.7 li
261.101 180.7 li
261.2 180.7 li
261.351 180.7 li
261.45 180.7 li
261.601 180.7 li
261.75 180.7 li
261.851 180.7 li
262 180.7 li
262.101 180.7 li
262.25 180.7 li
262.351 180.7 li
262.5 180.7 li
262.601 180.7 li
262.75 180.7 li
262.851 180.7 li
263 180.7 li
263.15 180.7 li
263.25 180.7 li
263.4 180.7 li
236.9 180.7 mo
237.05 180.7 li
237.15 180.7 li
237.3 180.7 li
237.4 180.7 li
237.55 180.7 li
237.65 180.7 li
237.8 180.7 li
237.95 180.7 li
238.05 180.7 li
238.2 180.7 li
238.3 180.7 li
238.45 180.7 li
238.55 180.7 li
238.7 180.7 li
238.8 180.7 li
238.95 180.7 li
239.05 180.7 li
239.2 180.7 li
239.351 180.7 li
239.45 180.7 li
239.601 180.7 li
239.7 180.7 li
239.851 180.7 li
239.95 180.7 li
240.101 180.7 li
240.2 180.7 li
240.351 180.7 li
240.45 180.7 li
240.601 180.7 li
240.75 180.7 li
240.851 180.7 li
241 180.7 li
241.101 180.7 li
241.25 180.7 li
241.351 180.7 li
241.5 180.7 li
241.601 180.7 li
241.75 180.7 li
241.851 180.7 li
242 180.7 li
242.15 180.7 li
242.25 180.7 li
242.4 180.7 li
242.5 180.7 li
242.65 180.7 li
242.75 180.7 li
242.9 180.7 li
243 180.7 li
243.15 180.7 li
243.25 180.7 li
243.4 180.7 li
243.55 180.7 li
243.65 180.7 li
243.8 180.7 li
243.9 180.7 li
244.05 180.7 li
244.15 180.7 li
244.3 180.7 li
244.4 180.7 li
244.55 180.7 li
244.65 180.7 li
244.8 180.7 li
244.95 180.7 li
245.05 180.7 li
245.2 180.7 li
245.3 180.7 li
245.45 180.7 li
245.55 180.7 li
245.7 180.7 li
245.8 180.7 li
245.95 180.7 li
246.05 180.7 li
246.2 180.7 li
246.351 180.7 li
246.45 180.7 li
246.601 180.7 li
246.7 180.7 li
246.851 180.7 li
246.95 180.7 li
247.101 180.7 li
247.2 180.7 li
247.351 180.7 li
247.45 180.7 li
247.601 180.7 li
247.75 180.7 li
247.851 180.7 li
248 180.7 li
248.101 180.7 li
248.25 180.7 li
248.351 180.7 li
248.5 180.7 li
248.601 180.7 li
248.75 180.7 li
248.851 180.7 li
249 180.7 li
249.15 180.7 li
249.25 180.7 li
249.4 180.7 li
249.5 180.7 li
249.65 180.7 li
249.75 180.7 li
249.9 180.7 li
250 180.7 li
250.15 180.7 li
223.65 180.65 mo
223.8 180.65 li
223.95 180.65 li
224.05 180.65 li
224.2 180.65 li
224.3 180.65 li
224.45 180.65 li
224.55 180.65 li
224.7 180.65 li
224.8 180.65 li
224.95 180.7 li
225.05 180.7 li
225.2 180.7 li
225.351 180.7 li
225.45 180.7 li
225.601 180.7 li
225.7 180.7 li
225.851 180.7 li
225.95 180.7 li
226.101 180.7 li
226.2 180.7 li
226.351 180.7 li
226.45 180.7 li
226.601 180.7 li
226.75 180.7 li
226.851 180.7 li
227 180.7 li
227.101 180.7 li
227.25 180.7 li
227.351 180.7 li
227.5 180.7 li
227.601 180.7 li
227.75 180.7 li
227.851 180.7 li
228 180.7 li
228.15 180.7 li
228.25 180.7 li
228.4 180.7 li
228.5 180.7 li
228.65 180.7 li
228.75 180.7 li
228.9 180.7 li
229 180.7 li
229.15 180.7 li
229.25 180.7 li
229.4 180.7 li
229.55 180.7 li
229.65 180.7 li
229.8 180.7 li
229.9 180.7 li
230.05 180.7 li
230.15 180.7 li
230.3 180.7 li
230.4 180.7 li
230.55 180.7 li
230.65 180.7 li
230.8 180.7 li
230.95 180.7 li
231.05 180.7 li
231.2 180.7 li
231.3 180.7 li
231.45 180.7 li
231.55 180.7 li
231.7 180.7 li
231.8 180.7 li
231.95 180.7 li
232.05 180.7 li
232.2 180.7 li
232.351 180.7 li
232.45 180.7 li
232.601 180.7 li
232.7 180.7 li
232.851 180.7 li
232.95 180.7 li
233.101 180.7 li
233.2 180.7 li
233.351 180.7 li
233.45 180.7 li
233.601 180.7 li
233.75 180.7 li
233.851 180.7 li
234 180.7 li
234.101 180.7 li
234.25 180.7 li
234.351 180.7 li
234.5 180.7 li
234.601 180.7 li
234.75 180.7 li
234.851 180.7 li
235 180.7 li
235.15 180.7 li
235.25 180.7 li
235.4 180.7 li
235.5 180.7 li
235.65 180.7 li
235.75 180.7 li
235.9 180.7 li
236 180.7 li
236.15 180.7 li
236.25 180.7 li
236.4 180.7 li
236.55 180.7 li
236.65 180.7 li
236.8 180.7 li
236.9 180.7 li
210.45 139.851 mo
210.55 140.601 li
210.7 141.3 li
210.8 142.05 li
210.95 142.851 li
211.05 143.601 li
211.2 144.45 li
211.351 145.25 li
211.45 146.05 li
211.601 146.9 li
211.7 147.75 li
211.851 148.601 li
211.95 149.45 li
212.101 150.3 li
212.2 151.15 li
212.351 152 li
212.45 152.851 li
212.601 153.7 li
212.75 154.55 li
212.851 155.4 li
213 156.25 li
213.101 157.05 li
213.25 157.9 li
213.351 158.7 li
213.5 159.5 li
213.601 160.25 li
213.75 161.05 li
213.851 161.8 li
214 162.55 li
214.15 163.3 li
214.25 164 li
214.4 164.7 li
214.5 165.4 li
214.65 166.05 li
214.75 166.7 li
214.9 167.351 li
215 167.95 li
215.15 168.55 li
215.25 169.101 li
215.4 169.7 li
215.55 170.2 li
215.65 170.75 li
215.8 171.25 li
215.9 171.75 li
216.05 172.2 li
216.15 172.65 li
216.3 173.101 li
216.4 173.5 li
216.55 173.9 li
216.65 174.3 li
216.8 174.65 li
216.95 175 li
217.05 175.351 li
217.2 175.65 li
217.3 175.95 li
217.45 176.25 li
217.55 176.5 li
217.7 176.8 li
217.8 177.05 li
217.95 177.25 li
218.05 177.5 li
218.2 177.7 li
218.351 177.9 li
218.45 178.101 li
218.601 178.25 li
218.7 178.45 li
218.851 178.601 li
218.95 178.75 li
219.101 178.9 li
219.2 179 li
219.351 179.15 li
219.45 179.25 li
219.601 179.351 li
219.75 179.45 li
219.851 179.55 li
220 179.65 li
220.101 179.7 li
220.25 179.8 li
220.351 179.85 li
220.5 179.95 li
220.601 180 li
220.75 180.05 li
220.851 180.101 li
221 180.15 li
221.15 180.2 li
221.25 180.25 li
221.4 180.3 li
221.5 180.3 li
221.65 180.351 li
221.75 180.4 li
221.9 180.4 li
222 180.45 li
222.15 180.45 li
222.25 180.5 li
222.4 180.5 li
222.55 180.5 li
222.65 180.55 li
222.8 180.55 li
222.9 180.55 li
223.05 180.601 li
223.15 180.601 li
223.3 180.601 li
223.4 180.601 li
223.55 180.601 li
223.65 180.65 li
197.2 178.101 mo
197.3 177.9 li
197.45 177.7 li
197.601 177.5 li
197.7 177.25 li
197.851 177.05 li
197.95 176.8 li
198.101 176.5 li
198.2 176.25 li
198.351 175.95 li
198.45 175.65 li
198.601 175.351 li
198.7 175 li
198.851 174.65 li
199 174.3 li
199.101 173.9 li
199.25 173.5 li
199.351 173.101 li
199.5 172.65 li
199.601 172.2 li
199.75 171.75 li
199.851 171.25 li
200 170.75 li
200.101 170.2 li
200.25 169.7 li
200.4 169.101 li
200.5 168.55 li
200.65 167.95 li
200.75 167.351 li
200.9 166.7 li
201 166.05 li
201.15 165.4 li
201.25 164.7 li
201.4 164 li
201.5 163.3 li
201.65 162.55 li
201.8 161.8 li
201.9 161.05 li
202.05 160.25 li
202.15 159.5 li
202.3 158.7 li
202.4 157.9 li
202.55 157.05 li
202.65 156.25 li
202.8 155.4 li
202.9 154.55 li
203.05 153.7 li
203.2 152.851 li
203.3 152 li
203.45 151.15 li
203.55 150.3 li
203.7 149.45 li
203.8 148.601 li
203.95 147.75 li
204.05 146.9 li
204.2 146.05 li
204.3 145.25 li
204.45 144.45 li
204.601 143.601 li
204.7 142.851 li
204.851 142.05 li
204.95 141.3 li
205.101 140.601 li
205.2 139.851 li
205.351 139.2 li
205.45 138.5 li
205.601 137.851 li
205.7 137.25 li
205.851 136.65 li
206 136.101 li
206.101 135.601 li
206.25 135.101 li
206.351 134.601 li
206.5 134.2 li
206.601 133.8 li
206.75 133.45 li
206.851 133.15 li
207 132.851 li
207.101 132.601 li
207.25 132.4 li
207.4 132.25 li
207.5 132.101 li
207.65 132.05 li
207.75 132 li
207.9 132 li
208 132.05 li
208.15 132.101 li
208.25 132.25 li
208.4 132.4 li
208.55 132.601 li
208.65 132.851 li
208.8 133.15 li
208.9 133.45 li
209.05 133.8 li
209.15 134.2 li
209.3 134.601 li
209.4 135.101 li
209.55 135.601 li
209.65 136.101 li
209.8 136.65 li
209.95 137.25 li
210.05 137.851 li
210.2 138.5 li
210.3 139.2 li
210.45 139.851 li
183.95 180.7 mo
184.101 180.7 li
184.2 180.7 li
184.351 180.7 li
184.45 180.7 li
184.601 180.7 li
184.7 180.7 li
184.851 180.7 li
185 180.7 li
185.101 180.7 li
185.25 180.7 li
185.351 180.7 li
185.5 180.7 li
185.601 180.7 li
185.75 180.7 li
185.851 180.7 li
186 180.7 li
186.101 180.7 li
186.25 180.7 li
186.4 180.7 li
186.5 180.7 li
186.65 180.7 li
186.75 180.7 li
186.9 180.7 li
187 180.7 li
187.15 180.7 li
187.25 180.7 li
187.4 180.7 li
187.5 180.7 li
187.65 180.7 li
187.8 180.7 li
187.9 180.7 li
188.05 180.7 li
188.15 180.7 li
188.3 180.7 li
188.4 180.7 li
188.55 180.7 li
188.65 180.7 li
188.8 180.7 li
188.9 180.7 li
189.05 180.7 li
189.2 180.7 li
189.3 180.7 li
189.45 180.7 li
189.55 180.7 li
189.7 180.7 li
189.8 180.7 li
189.95 180.7 li
190.05 180.7 li
190.2 180.7 li
190.3 180.7 li
190.45 180.7 li
190.601 180.7 li
190.7 180.7 li
190.851 180.65 li
190.95 180.65 li
191.101 180.65 li
191.2 180.65 li
191.351 180.65 li
191.45 180.65 li
191.601 180.65 li
191.7 180.65 li
191.851 180.65 li
192 180.65 li
192.101 180.601 li
192.25 180.601 li
192.351 180.601 li
192.5 180.601 li
192.601 180.601 li
192.75 180.55 li
192.851 180.55 li
193 180.55 li
193.101 180.5 li
193.25 180.5 li
193.4 180.5 li
193.5 180.45 li
193.65 180.45 li
193.75 180.4 li
193.9 180.4 li
194 180.351 li
194.15 180.3 li
194.25 180.3 li
194.4 180.25 li
194.5 180.2 li
194.65 180.15 li
194.8 180.1 li
194.9 180.05 li
195.05 180 li
195.15 179.95 li
195.3 179.85 li
195.4 179.8 li
195.55 179.7 li
195.65 179.65 li
195.8 179.55 li
195.9 179.45 li
196.05 179.35 li
196.2 179.25 li
196.3 179.15 li
196.45 179 li
196.55 178.9 li
196.7 178.75 li
196.8 178.6 li
196.95 178.45 li
197.05 178.25 li
197.2 178.1 li
170.7 180.7 mo
170.851 180.7 li
171 180.7 li
171.101 180.7 li
171.25 180.7 li
171.351 180.7 li
171.5 180.7 li
171.601 180.7 li
171.75 180.7 li
171.851 180.7 li
172 180.7 li
172.101 180.7 li
172.25 180.7 li
172.4 180.7 li
172.5 180.7 li
172.65 180.7 li
172.75 180.7 li
172.9 180.7 li
173 180.7 li
173.15 180.7 li
173.25 180.7 li
173.4 180.7 li
173.5 180.7 li
173.65 180.7 li
173.8 180.7 li
173.9 180.7 li
174.05 180.7 li
174.15 180.7 li
174.3 180.7 li
174.4 180.7 li
174.55 180.7 li
174.65 180.7 li
174.8 180.7 li
174.9 180.7 li
175.05 180.7 li
175.2 180.7 li
175.3 180.7 li
175.45 180.7 li
175.55 180.7 li
175.7 180.7 li
175.8 180.7 li
175.95 180.7 li
176.05 180.7 li
176.2 180.7 li
176.3 180.7 li
176.45 180.7 li
176.601 180.7 li
176.7 180.7 li
176.851 180.7 li
176.95 180.7 li
177.101 180.7 li
177.2 180.7 li
177.351 180.7 li
177.45 180.7 li
177.601 180.7 li
177.7 180.7 li
177.851 180.7 li
178 180.7 li
178.101 180.7 li
178.25 180.7 li
178.351 180.7 li
178.5 180.7 li
178.601 180.7 li
178.75 180.7 li
178.851 180.7 li
179 180.7 li
179.101 180.7 li
179.25 180.7 li
179.4 180.7 li
179.5 180.7 li
179.65 180.7 li
179.75 180.7 li
179.9 180.7 li
180 180.7 li
180.15 180.7 li
180.25 180.7 li
180.4 180.7 li
180.5 180.7 li
180.65 180.7 li
180.8 180.7 li
180.9 180.7 li
181.05 180.7 li
181.15 180.7 li
181.3 180.7 li
181.4 180.7 li
181.55 180.7 li
181.65 180.7 li
181.8 180.7 li
181.9 180.7 li
182.05 180.7 li
182.2 180.7 li
182.3 180.7 li
182.45 180.7 li
182.55 180.7 li
182.7 180.7 li
182.8 180.7 li
182.95 180.7 li
183.05 180.7 li
183.2 180.7 li
183.3 180.7 li
183.45 180.7 li
183.601 180.7 li
183.7 180.7 li
183.851 180.7 li
183.95 180.7 li
157.5 180.7 mo
157.601 180.7 li
157.75 180.7 li
157.851 180.7 li
158 180.7 li
158.101 180.7 li
158.25 180.7 li
158.4 180.7 li
158.5 180.7 li
158.65 180.7 li
158.75 180.7 li
158.9 180.7 li
159 180.7 li
159.15 180.7 li
159.25 180.7 li
159.4 180.7 li
159.5 180.7 li
159.65 180.7 li
159.8 180.7 li
159.9 180.7 li
160.05 180.7 li
160.15 180.7 li
160.3 180.7 li
160.4 180.7 li
160.55 180.7 li
160.65 180.7 li
160.8 180.7 li
160.9 180.7 li
161.05 180.7 li
161.2 180.7 li
161.3 180.7 li
161.45 180.7 li
161.55 180.7 li
161.7 180.7 li
161.8 180.7 li
161.95 180.7 li
162.05 180.7 li
162.2 180.7 li
162.3 180.7 li
162.45 180.7 li
162.601 180.7 li
162.7 180.7 li
162.851 180.7 li
162.95 180.7 li
163.101 180.7 li
163.2 180.7 li
163.351 180.7 li
163.45 180.7 li
163.601 180.7 li
163.7 180.7 li
163.851 180.7 li
164 180.7 li
164.101 180.7 li
164.25 180.7 li
164.351 180.7 li
164.5 180.7 li
164.601 180.7 li
164.75 180.7 li
164.851 180.7 li
165 180.7 li
165.101 180.7 li
165.25 180.7 li
165.4 180.7 li
165.5 180.7 li
165.65 180.7 li
165.75 180.7 li
165.9 180.7 li
166 180.7 li
166.15 180.7 li
166.25 180.7 li
166.4 180.7 li
166.5 180.7 li
166.65 180.7 li
166.8 180.7 li
166.9 180.7 li
167.05 180.7 li
167.15 180.7 li
167.3 180.7 li
167.4 180.7 li
167.55 180.7 li
167.65 180.7 li
167.8 180.7 li
167.9 180.7 li
168.05 180.7 li
168.2 180.7 li
168.3 180.7 li
168.45 180.7 li
168.55 180.7 li
168.7 180.7 li
168.8 180.7 li
168.95 180.7 li
169.05 180.7 li
169.2 180.7 li
169.3 180.7 li
169.45 180.7 li
169.601 180.7 li
169.7 180.7 li
169.851 180.7 li
169.95 180.7 li
170.101 180.7 li
170.2 180.7 li
170.351 180.7 li
170.45 180.7 li
170.601 180.7 li
170.7 180.7 li
144.25 180.7 mo
144.4 180.7 li
144.5 180.7 li
144.65 180.7 li
144.75 180.7 li
144.9 180.7 li
145 180.7 li
145.15 180.7 li
145.25 180.7 li
145.4 180.7 li
145.5 180.7 li
145.65 180.7 li
145.8 180.7 li
145.9 180.7 li
146.05 180.7 li
146.15 180.7 li
146.3 180.7 li
146.4 180.7 li
146.55 180.7 li
146.65 180.7 li
146.8 180.7 li
146.9 180.7 li
147.05 180.7 li
147.2 180.7 li
147.3 180.7 li
147.45 180.7 li
147.55 180.7 li
147.7 180.7 li
147.8 180.7 li
147.95 180.7 li
148.05 180.7 li
148.2 180.7 li
148.3 180.7 li
148.45 180.7 li
148.601 180.7 li
148.7 180.7 li
148.851 180.7 li
148.95 180.7 li
149.101 180.7 li
149.2 180.7 li
149.351 180.7 li
149.45 180.7 li
149.601 180.7 li
149.7 180.7 li
149.851 180.7 li
150 180.7 li
150.101 180.7 li
150.25 180.7 li
150.351 180.7 li
150.5 180.7 li
150.601 180.7 li
150.75 180.7 li
150.851 180.7 li
151 180.7 li
151.101 180.7 li
151.25 180.7 li
151.4 180.7 li
151.5 180.7 li
151.65 180.7 li
151.75 180.7 li
151.9 180.7 li
152 180.7 li
152.15 180.7 li
152.25 180.7 li
152.4 180.7 li
152.5 180.7 li
152.65 180.7 li
152.8 180.7 li
152.9 180.7 li
153.05 180.7 li
153.15 180.7 li
153.3 180.7 li
153.4 180.7 li
153.55 180.7 li
153.65 180.7 li
153.8 180.7 li
153.9 180.7 li
154.05 180.7 li
154.2 180.7 li
154.3 180.7 li
154.45 180.7 li
154.55 180.7 li
154.7 180.7 li
154.8 180.7 li
154.95 180.7 li
155.05 180.7 li
155.2 180.7 li
155.3 180.7 li
155.45 180.7 li
155.601 180.7 li
155.7 180.7 li
155.851 180.7 li
155.95 180.7 li
156.101 180.7 li
156.2 180.7 li
156.351 180.7 li
156.45 180.7 li
156.601 180.7 li
156.7 180.7 li
156.851 180.7 li
157 180.7 li
157.101 180.7 li
157.25 180.7 li
157.351 180.7 li
157.5 180.7 li
@
0.5 lw
144.25 127.55 mo
144.25 180.7 li
271.4 180.7 li
271.4 127.55 li
144.25 127.55 li
144.25 127.55 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWDN+Helvetica*1 uf/DVPWDN+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (cltinaction.eps)%%CreationDate: 10/4/10 2:20 PM%AI9_DataStream%Gb"-6kB\VgdO>%L!;?K%Z,*4GA4NqHc5@&!=XKOjHY3:;f7$[sX'=ji#K#21^Ya=g4G,r%<[aqfPnXWBqib?mh>8bss3CN'N9"%d%ae)6Vra\do"bV0hMq1Eu-a)U[.9'0)Vc-JkX'P/.:V*[bph\T4DiI5_I]#CMjo*.nrV`42>j_:*W-GMrq5ZAj^XnlDQ]o7Ydr%%F%<=8W&f4qqHWqM5(qUhEu92HrcYJj)Fdla%?)m*Q*T9Rc#XM3].Y=J93<o/nPPN)PtHY:cCSY6Y'RepC_GQ\O4YPA!+CHP)X6ljHa%9VpeH6Zsf%^D,!>F-;.SVDHo$.cW0[.[rk6EfuqcbPolK7I.9C)@u/oG/*bk-J`"9\q<b+gqjV%V0"i]=*#hc1qm`_d1cnWZY2,n%<%dF]A<Q#A!T)C7mFK&Cro<j%]/T/=^;tEBg@#/>L#Mg4rGOOa[&j$YYV]1&1$Q'"f=a'B()Q)RCWHBcX.pEgGH78q^d,d:anho/%.U:MZT<0j%(B)M]k*YmU-&F`NX)M&<V_o_"KFU`^Xkm(X#*1[>+S]J&):Y$)X','podab3HqNsB;HcRGgDRX7Dpr;SBO/p18t?IH%TC#r+]g7sf2Jb=3e]TB?/G[)VO(Xm\F7ar;5W%*_\CK%4N4)[LfOtM,oA`Kl_:9@U@D-t+!D6CurZ#Ym%Aem3\lZ%qlVK(/P%_c4%m4\GpL0Z+!J#WjJkqmeMEq!3]d8Etu^T%W:<>D+*.X>4"_V=.RF;enje*nlYL0Egue4QX><SD%;#Bb&IW09UKi9abZC?9J4$bjG)%e1-`V<iH4?Q:gYB<.[0].Qjh6dqO'=>(u.i.X?f.R#IAjL\+-/_OL2.Wqq>:$+4/9n-QL1:3<Ao)9`@MTao9P5%3:^''*>c'7@YM%Qk=^49*A"cAXF'W_S"h\Perr`:BF8=5Lb:1_'da3<hYJT%ud$oQp?d!#sQJ#AEIFpAF*iCUj!Y9>pEO*r.A0,5PTnta9n)5P@nFF%i%NT3q9]p(:a,;Er886;_<f8>_^?<^Pe\ZrK)*51=[fVh#[Bt$cm.?K0QOaSkaIY(&ZA&K!]LH&1353s(c`HMl'JbNf8J.Os.BkG%Np]T.*P>*Y9qK6"i"Kjfr=/?C0Hoo%-e*_#q1<^$;qrOX,<_.E:%p?t.s/8:aN71#H\(/[>uLfK1-,JZdP$.jN1@$VSJrG.e=sX?%f#dgM3Vc07:,%muB!UP%2Pc$Vr^Z[cJaMM=?]\`tJQW[^`ni)TS*kW5s2!I0*ho$>X>5L8YmrH3$;#KsJ-I#E*A?fHZqK8?AI8Bh%^P")Zg-8"L:Q3'L?SY3%)h5so?SI`h-,s<_09[QoNPFO]2G8L3ZaB2&p9.:8:Q3'L?a3.N)h5so?a*c^-,s<_Y>QOYNPFPHV#M\3%*7bT`ah!YmoG@=]k,0Ita],Z!,r=XL(B$s=b*e.\*L3Ic65G$DdPC_p.HE.0qL\&I_;>UuNS^ZPjk1odMUo0dTlnOXB^b!kr1E9\%&<Cr"dJT?<6@Zo-cjo=a;lrA^EfU(JInT8If1=q?(#t]8.&m_nUMglP_Z#U($F;!f:FZ4_ajY&=f1XS2EmiH(L40AD0V6'";Q>m7%k+5;1ESs%&Ls!^Vco9EgP-e)g.[cN1r"&2BV[N^NY[XmFhr-eKI^hdmVbi*C67]E+1@JtDI&AjDpllt>M2^2>MUlC.baX0Ap='F\%pl6MeK,)l70>lNIi[e?1P1G825#iFar2j#aHL'm5JVaSnW\Gml->aR6SM]2XFeWhas4?D%0one.DnLrG:8I,5\kA"]%(MF?rG>Q(%2-ZE"Sh-@T)S]MGJ#9uV/HI]t%`%tS6=D;,@l7Xha2P3_2@dH>DIi7_%MJCofe%;90V;B:kVt-TnB.N`'PdIX%L[.9SYXTiD0AE'%G[]ri1,EF#QB8Sp'Z%Qmk&6E:-/%I5\`j[W9=Va\]W3s^doQm&,^@IA]nW5\oDIh)%*Z_6'S`bnk=G;g%dJmP&+^F#3U/,2R2r/?%1:p1)QHjIH<u\>:0j.9:3$t#jAY2T]%YFEI]uJC/b4K/PSoiiK'm835P(k:L=SVR-HQpRmQgd#@+/bO9<"[J7Rrr=T>IBqbU8^2^%$>/aYXgmgTq-Gc=]lg`B*K!($)bHSUiDjjSlT?NS^.ULDlsRX-2=R3?pM<rl7UBXK,h`u%o>iohAp8n77bOStfi;XC3b0csPE68F%4?q==^sR5XIDbFm#"i?NmZgZM:$#cI20P#I^<oR^m]VsW)&Quq3[39DPT-"ZM<!RgqoAqU7$aeXG*Kg1\J"g@RJUiLSg8Q[a\:]B%#!4*4oj&8k:8:Li2.OA1%4F0dRuZ:V1R,$[-)=VN%,f4YaX58Ndh7:NAJeR=[R/T"Zq,9_o6Y#dU:9sUeraU/C^jl$7(.gL5R0R,%=&q,EqcCj0aJtu_'Ki3i-`fX8iC?2-bNT40s6o2h]%VY.mjcj<c$qV,5V"#SP6S4LkV(fpHCK2DmKQD''D0<=7J.;jhY:F)C?I?5%##^iqn"X-Q_%VP=;(Bas.bR1XS>pXHKDKW\J\t]e*I'YUU'9EMj_5)11VRe5WtjE-9$&ErC&g,jmSA+<JYe<OIIt:O(DD^ZU&U7;%A'IrQ9C)aQQKZ(c9<C2<^uRYbIS7(QG$GBl.l9Dr6HA.F#9n#h[E2aMn%^li?s081>c^j!]IXkXRP8Zd<h\g)c#9"S7Jsd=XZ"Wd%WK7#c3'-;Tn5,+R3VF]h'EZl0FH-"88e.YMLRq1N)"N.'=Dp4;;=1/SB?P<r0TlLjkF)mMULdU^)E0<KM7%o*Z^d_s&/R1C76.t4%=$_[$1/3?D;A:,l`=f:r=tiF'Fj/"T)):_Xo.-`\5<7/q7FTaGOhR,"B9omjBUO"AZ8bXbK[PK><a\QN;]&Xt!TBaE3N$"!dZk#.%fjl<O:gumhpSG8L!u<4$;Q#E3;5[.WPCJh/".#a*M,#oqd*SZ"*Nf`nM_V]2!?(`%RuP:n7n:kQ@%Ac'&sR?A.YSeB$/+kH\hO"X%Vc]bp.Vgc\EGoP0X9h+TRa"pkXjjMPbt?Qs;,V>3b0Gk,:POR^ka4\P<)u+#_MLt5<V19%ln2pO0k^.I$ZbeUQ>\>LV!eD#A#"*&%oMD,+fjbd^mt-S?7'8;i?.(1(@.mXcT'e#P3_Es_A(EY,'j7,&B5YOS8V_*3fIpC`EhMamS6X.<Xp+ZD`CtEYri(n1Uog'GI_+BZ%qgjO2[['pNdg/;K7U,`AEn8!I<p]8+oW]#n+rsa`VJe^'As&ju5]oANPf:J:OJVdnbMb2kU6fh\0ts&4Eh-t/CWXbW/-RhY'.JX!%7(&-o'"73;iZrBY5Jq_kEe^b%;[^i'PteQlGRmSMpEL7V&B7MsS*OG1KWso5+Y@BaTaDf?8gSVe^8WBL1.H&.cfc+>!P6lb)I-\:%k$J%-4B1g:haI^gIKCbP2+_:OhYpDj@#ULjTuu&<l)r4P`nRlo/:Yd_/Pg1pUArdnPLE`RIiV#Hepl6>L[mNprGCnA\mLE0A+leR%[:9)!Q")8Kg\[^B&C&)f/^nX851.EJor)>WSY9(6=f:^N]r,d`1)4RbeR;58UL]4)BWkLRgI/*\moJqjn_:%5P+a[@F[]=mU0N>r%$/Pm":S9j_mBfAN441RQVFcqogpBY@iB8)4d4$a-i.\6KrK?A4RY7N>O&hnD$Z;Lq8E?`,J<bKJ1q?:KQN`8R"XG>A2ldo__/3DP%VkPnDpo\nPM!h)9g@:O\"ZoFR><Unrr)dK^E[LU%'KH(^q_mLKV@D1W3@_5<;@Gc2,2J`r>ch$mhr/:(O/Iq?=@URCeroBVSB\RN%<AO>..FIF<?puqXAo'l!/7e-;VmVg&O,du%3^a>1#claJW\!cL=fP>UF`RQdbPW1hbdgU!3EUH-_,@>Llo!Us?=7R5,<'qVGSP9^%a#5ILf!4dP$uMm\Srkik1<V:+=V;.r_,?W6OV0o:8,&GY(--ee14./+@VlpWN87sOI:tT9Z.UsG$r<)2<36r.mm+@9nJ=4'P0V9U%0<\QSBinN+nXhn(ge=]SZ)b6USN<-^Eg;9R.\;3ZVHS=$g9f'iLNu271;u-lUOA^td=#p+O(!o\g,mmCL9-24875`MgT?VO[O!\I%XqigNN:,Gos7?4$13+T7)`Yk;dWlE">li3%h^sk;SI.Sfek]hX(&P]dJX%tN-?`[cho="pX.0\j!Gr"AFW'P\aca.sA"RMnnW#l?%6]SgWk].#9%9aFm<:2dH^9MhuY#$plp8(>%<Shmpla"2An"ium]-f*ub$b^X*8@d0"\ntf)rmY.1*r\eKrk#Hhf0?NFB?kf<#;@D%e*$(f/R#I%Q:l!m93<eq&6^*UoU6>U:VN+j>tCD$d;]&j@DC:k,gZ,OprR)_4;mo8I;1D)1[0s)UNZ+4e+2\MM9fW/Y8.9?-OS+A%CP\R@&qqKTS1)([RdEkJSuC/r-f\7eADHT0>DZ9^c'Prkhl)_gFkg/prn\^1:V%X=f&)=q;2;eka,Rj_``r44?_TtqD)&6&oN0eC%q)55$B'Qbr3^)920@;.iqkS,%WS?%jp;p,XV!<V4SJY@TM2>QJ=o\D9%22Gm^fDuUNo6HFNEa:1b[T(JLHL\eA('VK`ed!0#S7i#%-.!UeHEZ#c+=I\=edQ;qR<\02rY`./^W)-#Yhj2=lbi/o)2$dO][n5a>9A\g-#l!2e43k0]kGc\N4SE5`2H*(rmU-Y\eB.icVfi'%m15[./_!b3f7NJIqWN@UJKM6c*L1ERs%HT@Qt3Q'Y?msrpNrgp`F%$\C;8@^kQUpeO%pcKY&tSR'=?8kDL^GUI>j.m";7h3V`fQu%Ns>:O<h_hpUS)H^m8#%ULHX($U*1gd?2OqGA-?As./cHc`4q7O;V5gceV4O-"&4RH^&ID/==5V&R1/t;U_m&&ET:E93FCd@N@(`D%&(GZ0JGSLh@>!LG2XmeF+1:_AiZG,apo?UsTe57s'UUIU@D3Q!cD]rZWt<YEPOa-F]C,!Mp.;)Z;X'E[O3[Wee@6h_Y1[EiaeL2a%e7d?,0Q3//kgnXHYht3f;Q]qY&V?Z4_.[38CXW*]%k$1.I549:f^H5^'CU)9T'r\2F.Z>8Y?.Jj\!?][TSFcp%$RY_n%B7rG^9=i%Sfc!`auq)1ie10[,Ze87OG4>6UWrQAc$lF1p!9;mH^*!bL;SI#UF$O'>!J3s#Q71@g:\#M$fc^R%"nB9$A^sUlEI#P_^B).5W"/X%j*&,bCk$gXcpYH),;(\fp7%7i6jDAD`A%o\e9j0@3:4.<l[GIr9-k/#"4Hu+>UE;iTGRUY7Zkk@b,rt!mT8JF[SmcmrO^VWD#'?l%"I2&^n%N--dr"_=Y6jc$94T8G:D"GX,++sq"bB&phoPkiA7*YD'D/4]lq[i_]oTl\KH]A?X,k$n`=Bbc;:r(;Oe7*n"tDcNs4&<)%nToNnG&6V^#\eXXrmSk?6lFCq>(Q52Emc#<g`*hPLYT;2^GqaB^AM(2IRbJ%s%"6/<fB\FrdRE[BD@2;BobO5g65RRgf%W@ribVk%e[FoI4oB59]i7L,#.*Ic];PhJF1islCl6N<SbfR%]T7Qj^E0g0`pEDtC[=Nfj:!H_H`)#^%h^>&m]DaY+8oW7!?3Yno_rTJq?(>k%H3n%PrnI9gi7'S7';CjgKHV2)%5@Lf"3@G7?[gN1/NhhY<u'?"oWX<:oj3(1a5qW25^q)Z7J)Nd8Yf$u1^.un-%3%c1JOD9KcG@>%$-;.V&:<mm%XU_V_E[sD1l#DPk>sHJJ)[9\D>Bs@`+?Q=Lc2@Xq+oE<T0A]f/G\c65sGk+QX?]T?iHl$f`1^tq4">TmK2"P6fJ-7%qhEFX(rQ[U/*]#ArL%Qb5LZb*B=_+C9Xi,.dr"BrFIW4bh<+]-\#DTE\#DTE\#DTE\#KBehEI[^qP5orG3PClpPln\VVMd@3:o=.%fk-bAN?Q#K0JQX(GZO:?ORS&rHe.[A9_17f0\VZ8EdGg[]C2i"pJ8DhL'8Zmk#c"qVM?\G_Wtci4<fq)2"U`]`MaqYThXS$=R!XK%`+\n6TYJkqJ7!/0D5\!F+i!K+O&#PrQLNjf5P00/dmK1+8=CX/)b><G>$D]@(5Ba'J#8&+[*R6Js(ZbH_cDiJ;>c9!"<%.eI#S(+%3>.p<<dUUn^Zr_a#/[C`0pisUWdiP\'3Z3p7lL$d#U;nuD'U@ofDe\2+A18V!16O]rO^VP!Z>/tqIf!AB]B2`A.N`KS)^e35/EG%%T-%9a6-DJ?,\0D9Gaa,ohWV>ZCjai7rL\c,q7f%e3`Q'q3uY!j4rK@Wh*4QSIc!?5O6RkS!7+"\k&icbG.^(Mq(EZ/ru\Ieo^T-b%@W)+!d9tI<^].*-`C`T]"Yk#EWd!gmqQG'`r8hLD[>KI""Nre^.nNIGc0D>5Sj"gVU,Du?]J>Z)PlCB0L4=LnqC.peZh_YbD#X7Z%ZU'8?f^CmqUX:/.C#Gr_0d_Z?HC:&kSc8c:O%J2>IklCiiKI:A39s'Cl;%qagD\\58.qA8*4\)MZ/!i&%pjDq;]3@JGhd&B-XFK,%2Cd@fY']P[oHnFWYV41Kh8"S/Nr7TSUog?jCtKZ6`dU;6OsjMlpLo?]2X6u"DYY70F2kq(]F$*YZk`:Uro;SnbC<BEYaY:#YsjKe%RUbsH4f$^'-Y*0(EAM=iL2Hj11*3(qcHW7c.:=9C8`6HAE89[/LJ@e1*'EPRdJ,0S'rK]0=RV4RFgS1;s.COBS,Q:^h^sm`6M,l\%I7d'\=o5c;e%KPIBpp&?PCVt,opRYF&9o-&s(_A5>(;V3Q"GAJDmVUnnNZlMBh_e*dS[^P3N7M:r+Gs/>rjbb=4;7;#PD]XZkL%D%dC3g`UHsBGW`AMp23OB$/(YcJiu3HT&i@e*N\,s5Ipk,#lT<+t_/oTAI=RDeeF$'mF^l60[Lgr[9+4'2s+cV/6ek].YL`Rf6+^"_%e9gWc]OG56RiZ%Or*okSD`(&F@K2hf&)!iNH`'"l6O&85Da21Oom8<0%-SJjs4&"t^hTmmr+PKSqnm$HBjFtnihSg$*m6*^H[VYL%J%LJ+e/r,^Zi^JA8=/=+bNM3of\,2o-(&pKS+m.KnVi#9Uak%7M&Wa(7<Z'u_FA:l+A)pJ4o""CV)&]*pY!Xeb1WW?F?#^ZqE9Ef%LJSBB(Sdn=?QPK+#C@Rql^hkGlB9t(/?DB"cbLaTh4_e`Q+Z3B=-q1P3I+;W0O`%/$&$MC&gb\;,s5bIhIt]$2bApP&%=A&&9;Y0%?IS0Y%,B#fK4Yo_mdrUPC=)V.33dAcDoc&gI^\6D0T<L"B_j\V=*go-mV?>T%Zbh83AgB59M0<-913Kb,[.7_6f!7b5<_Q=Z!4Uh%;`+qVJ+X`dVPEitYKdG)_MWSP)k&2B>-\+Tm^,++X,e1dEOS,NY"IsfX^[Qlp3UEhJ+*+Cq&KQ%FVlUXeB)e7/l-Gb4)Dq66U5K)%5XE@"7#/MQ_gh8_g0>#,"L]nu,!rJHKUqr^roLEA?hRtKI!39b8@D"9X>g'n0+\7A<n#5RBZ\9]Z+g3W,ph@>:_fZ\&7WWp@ls;`%6BHBZU[M)taS9paWab4i;'1f<J;Yp%OL:M_Ri)"[Ts@E;4OdquKSS84R7Q(5LRA&Q5AC^oohg(7bDb.BD%goqXN<tN*,g!)_iK8m%$#p3F3(R"9#Rbi]i_^[m5EPPaW%,]7/N*PL`.qsaK)*$Wk,0"NK^*8Na:N>[>g93;"C1g>LX"e6a'MmOEEnLG\"f(6cgT[L'n5&P%s#ACiULJ`N7:cLh-@q:pFQ,?1)>E$s)Fu,@3crjN'Y:q?4aRP5s&*+?'^1Y;+,[QY&2`*(#OVdIOAIV-+[[8EWmJ2ZCs/Li)O8Ft%emcn-+XEBtin!`\rpc>1mCrXGNl2UEhd_WYG5Ru-Q?M&u`K:ib#b_m>!I,gT^kTD)#oTbJrq;jsq!$)K:n>?<[8U=GoNq!nBNqY4%*&o1B2!DUPj06(6SbM!^$)FNF\D>Oa7CJ.f"<g&`FYL(E@phYrX@5K'oTWPm@@bfA6"d$Ol"I!f=0(@PBcCp9:)p>,>+^U"s5c(U%T^53mloE\^a?]dkFNEHq#O;=hDaGq:"1]B_@VLqHN(@8B<15UYfMQZ7pc5X5rnuTuHGL=c%TCC_RZhIPTVg>3&X`'J8akIK6,9no%]cK%7)*5O/(/'??FQ4<B7gcW#+&lLG.>ZU,Y:R?9W+*'i=A0u,NSd10(/G8&/k?aHV"<&D6U8',GC+j>Mk1#tKkc^d2B9,tj.UNg%:uUa#Q3`][r<?ddfDq(eJImj;L=H]E#)X#(aTiNs:e76&1f'b>&l?l>!2'^dV>^@/Wn`3N"g(8&;fA)Fc:oN,,pLCqOe&\\$K%*/%k'::`+.VZSn:M0mkA"6QJ)kA%Hcm40p%!l[^TB_#,$PlJY<_;kI3fFf^:X+C"-N?Q=Wj_D97b1PAjAt)h1orNWB_n[SfB2S@l0;<%GB2m=D-JT(eSP(*h0mq7]iFrt>?,DV:SkbV<bXPKY4l\%RpV07g[TQ_&FITc^>R"kI$6-82^al2C%(:h?8#i8=pO?8/2LBI>l=f"%?bc;Br4tYj[J>X@Ju3N*#jmVG:iILXO)ffmp=:@bon$e`4U>s9d#\dLg5tV:7IAja_%*&04>BJ,TPp/!9,09J?Z;73p9'WVmX@T>%Y0(u-VoHf4:SZ5el8^q_CtA`h"oqN,fp[6!Z2B0%eiN$Nq_F`;d:bMp(d/;"2pP0p7.N*d<ZaeHFGo"@T9=D*7o<]mc_&0>gJ65?%Y=(Y*W@nP52MNlAa=Zi2dcj=X]R2m+*/Q]s/\e*>G+J&<T4`I/\5Qb]1=p(30!b"rH7\E)WVVdbm8U)$%sLI5qLY[#o^YUm(u>l-%3-kNJ<Bj52`LYQ]S#c+rl]n^'g7E>=3sD^m!a'a#^3[\fU5e!-n>gjsI%"jn6)S/WRYL7\a,V-/SL45'Vl1E;W^d[*nCcNaWRFhH%q`:tIoQBs,e[r-OFLRje<**VC/o8"me!HW7$bK1.<n,L9PIT)d_"278X*%k9'_Of(4YMMuIoa-NU.upPSc#ojVs3=)T?0GighH?Y%;5t[TStTIYF'YehF2?p/q-;FK<:..*Ccboc5&JhDSO+u5[k4S&^AK)XnB%dHr(c$PU/!KH1X`AT?<+,VqcLqhC$OmYncDa=e8==3%]?8Ck@9YeHc`,:U\n.ach`mN>E@34#<'';nZqR%M?F4UVa-E!G?)K@(C$5+dh!*eO_dOO!-GiM2O5VL5gUSBUP(uVu:*5\Jec'.4%VUNZ^nu28L0fnt2R;Qr=ESIqNX4Bl%bHB<Bl/lPo>MSI?DTs!1#mF(IKQFhdh5o=RH<UYl/DG=$Q6)c)01MjQ/ki`%qlO4Vp[sWP%e*"a!Z#-Drq9I]F9rCcKBICR-'U%IdSjo"MlNeklS\D(I+kobYmU+NY7]4&@=99'O%]a7"ctUFM1oJK6A1>.dN]PGbQtau:mbMQI%Ico9VSbdq&YF4eiGH7f^L\>sfEu)ml`tdepC;n]'7.@R3I"=?7*LUPD3>k@kVrO<R=r3bE#,RSdJi(XA3.J_BV/rV6\ZS8sEDrdQ%a]gI'ed?!V;5_s$WDfJfM:aEEG"4`TR6"Wb3k2c:SZ4d'7n7Bnb.&6a9&k-Z<3ja?7Xb,U=5I1PSK7o]5r4%H_b,T&e[)FCBgBf-%J(QtchtLWTV]$@=!a*3Iq_fY3X$bX>;J!0PV,&`rD#%agmnou:[2TL)5J"@NFa2VfHaeKN*9_bg:G!-ANftu5qmT?KhnSNM?Jaa`%U8JpJUs#r6dJiO6MuK^Ce)<9d:o7:*[p\[LFlp_pfTR3#Umo]Y`;]#gb1VZie+?S[G\VrbmG:ptrp>KjA&SB2o69CtoTV]/-'Z'K%J,A@!V.KN<Z1mX&qkqQ*=PX!enlG\KgAYe@QV?*t4kWm5%M4h"J+=PeDs(1,rE%aOJ^m:?7A%:(/J&;k*,g>Uk7'67$Reo`C\oro%W>q0DSo.e4%>^/0"'26l7^8&"TrWUBS8*6&F&^EX[][d1EiGEc\Fg$KbH6E?nkS9:.N8bs:=-K(fkt93<iY"><L\d`/=#a`W/9Un%J]bWqBQ#cFBF?@k&3&7Pi99<B8Qje/MeN_A/`5?U0lu/W<nFQ"8^s;Yl1*UQeqrF'D[ksZG8%(E+CKS5ME42]+>95Z^=KD5UIsjm%2Ou%'-Z]lK[d!G`8^s^m8ERK_*N5^CC?j+8_mO?ZC\s+d-ge:l@6<9RKQ3nNhbRR]YQ-j[.86Yae^\6+e'V?2e_$`Kf4jM#*85])%QoYCb>QaIO4'0/FV.r/2gF:\oCcY9DKBDZ8n9obgano.p:2;@oqbBFu0Qi8LEG[4W6rLM[oYS>km)e4GIA\3KE"iM!])p<RqR;h=%CoqV%4OmA'P,KGGKrZZ9Xlg'5>/Z#]5qTkdPpC9M&U-suP.#FY/&1TAhp0d?9$5kJZk%[abso#+BI1fKP[`r)?.IQ.:oN`t^a936%'Z-2-Ys18mUHm_ZT`/#3cR.(n]"^Er5?C/.SZL9ML]D9IF.Is51S@`#G;W[M+FDO&.Mt!+[KiMgPpUEJ6^CRe%<V?"<8m1WGeh;:%=0!<o%jWOgcrh/fps9EjbAr#BD,1BZ$i02W8l5D@*qsN,"St;"<-@7]W+@u8/P"d[OgWeSj#Ua:^([LdRR"#AN!29AW8EjLSQn!9%F_0V&aDHCq!K2R^,do55[UcJ4mJ6j4hQgm`Fahu?FOp,hJf`K=CAho'M"[`"BEp)d`^\jp;f-\E@78k`03=`8[<Zp2h,bP8?Z7`]%a.e\JgjR$'+TG;r5>FulHpJqGWB>%$o;&9n-9_4l4cg^P'*id>7u&&aoc`q&Vf`b^,sn"7FqrBBpJ%FAZ1<%CL1pI(</7$kYCJ+;%<0ZQ;nPDofD6T1*o;inu5.3<Je9:EG`u9GI!;0Q@(#tD#5b\?$_sD#iEW9uX>CF>2Y<8([F&*)9E^*rU\rMLbKis+j$eo6U53/Pe%>HmmS?30*)V2HL6dqg$Pker<D8A(,k9(='K0OnU)XK+#)+rKXE71jsOc@^?-BH#%3[$&#E:Y.AL?Hu(2LIMHPY<fBEl:\<Rm`UGO%FF,bt@p=+HeNsGm`ce30pc;h$=$mGOnGW43Z!t=R'4:^ZQ;n95=:uf*l@b8?@l61obVSKtf&ZM`YH!F2@6;4_R?:Y0n*J\p/X`91%qi\&HM['2:=bu]LK3idpD$AKObBWE0e69-s&u,=#Ge=GW,gt'`SR1M>CL052]&6W99r.BnIQ<.tGZmB\@,8bk2hQ%K`o9qa/>FZN%O/t4)R'AA3;plj5-8-!@as&"+c3#e\/Sc:WW_n4?EW+[VRVVT=gsWH*]PB9EK?u?"<C2WLj.1^5n_+I'5PKCD5<Do+G?3MmQpjll%hHV4G`^+5pbNAmeX&D;S"<01a<rM^FUTu!V%+/<d?1?M0ALQ$+Gf#%,JhRlTeFbR.PAJ>O7$fL]@,cd;B$IQo1p.])MNRc/Yj$HP%SNL@:EAK.a-WD-2"Fhu-P*5AuqA`;[JXoZuf=je`en#[1q635JkL#>BNu&9tUR%W?/VjBL8Km:hhtKG;T#[PTl1BCNTW:.5=3'/H%2B@sG^H@Rk>VOjDCMb?mII%N@ZK8`g9);Ze\T=VV5$mcadE0f(+&?TOjOTCBOoSV+K`R*#E&V*;!L=&2jb&\Hicm<F8o?=;kuA.G%RDuD]4lB2m`^3!D$,3'GpT#h?d#+UHkZ+TA_",)B$],+PD"iIHhp#*kR3uW'[:Eqlo*2X`Fq;f5H$[(5g'89tV.:q6$]7tX4JCPk%C9'fcgO5GPG(<l9F4u$R=?c;L#=i!jf`o<-oK748lnqgA!53?[#%!Zl=FEGe6XH"#kl?Xi2YaS!*EesIG(W/7%?bk=NlNXpbb)(a%fF^;#N"A]85<ljj%XB,Z6Bu?k&sR6GjU4-<FFD5c#3VJ)6H2biHcO(sAfq*Lo)R,(<',BL%5;K,bAEDR)0q0r%PQ"_U#S_1"]lFq%[_6(8)jO0ZGG9or$'(B0^):bD-+$?;B?E`S*O/j0o/gV:mf@sWhC9."(n(kmD2m_S.sI?48`<F.SSdo$C/_H$SQ_K9i>'HP>UIgT%Ndk$nS$a7a:PI2R0BguIQ1I_rpG<Dafg@`!A%Yqagq4eo]EqVm?`ggodI:m;K;Knk;k!D@Q/2\(XZJLjCj^Ug63K].H3,BCIL7MB%`CaMZ<f2XS(.-DV>t3^mHgs^oO:%"cBU100&j/!oA6)Gf:c'>FJ]>t:o2;r2K;-VCqe4MB;D`%ALN_gXBFm0d^J'2KZO#G=DMP-'%SEo:lnD]77!B(.R/=D]aN,p"s/T(Y+<SkS)O_t$aAl0&jgASf`U[=js=31l:;b.cp7+N/r+g\+%HZuGj,"lW*C2?qIO[8-Pe!!Vq%+hh$]k^6kHC@Xh.b^8\g*mpQpKaiPT''sH%GZUh\XeWBHLX78)Odp1o9,@uB<Q"a9]F^gd(F7l_3gQ.?j!u9>Ep(Z^m!0`j#HK`E%4eBO<X9_NXQ?aG9/0!tW,i;DD`R%f6D:6j5If\=9NQ.(sHKAV_N]6c?e;CDcj*#%tL?8Y\[O4ks%:`H!f%lmR(U@ApBt<3gd(u[)%L/(1*aC3j!hgqJ=cXoaN:`9URmsQ^[DB$k6V.W@92>+BDL%9T,DUd=JZOP_'C[D*V0.?7a>T,^"Fm'.XS\1kN$?;3mg5(K(%B&6q%QP5NcOGg2u,@bJIXGj,5RYiZtYI%k7V7=2fdS&X>YO=D>+u>kt^"g*>r;ra2;.HKe.nA]hc)_^?-6F9\`^8)jH*Se:,).r^;.%Fu%./;B=-Z1/<5WjV2UsJE6G"?(\!ZmTH*T7^5WZ_P.PE.J.c%=-*bBuF$ABGG5S'0X+\9Lsj^21J$3HWOaF?mk^O[J<%6&3eS=?m@e%W)Fpn::Kr@R7$/-5t<_/kKT^Lq26qZcENDSQUBr+6"a^9cBgo]S3^eO/N@k_?,SIMcH$ck08GQp;fa!!4h5.\*'36k3[Va^XrKKR%J6?pb=3d$tkF=hnAU_[MAG]&nXb"+4bK%EQB*-o0C,UBgpE<sm.64I%b8c)B:CeGu7_.`&I3*G5ba)Q_34W.;b@YWVo?pns\\oqB%Ki=UVoR]'/j1`iL1>$/V3]QY(1&=Pr@^MSPI\u$e56$>^d+eJiSC9lo+ZX1!Y4c.Rq`G>0Mri(^:**?r*938GDV3+\^28`9)`d8J%5iq,1Et&<#-.r)s?uE;*S_Cd1oHfGoF.(bSTcfXl84[o^/0H[06bO?h]o_S=L"jU"n+Ak*E00n/3?/#Mjua#IMMPPJ/m>D2khI!s%K!fJ2,3i/eS_PGaY):`cWK^^V8$5pk8htN[0l8='-9UF)noVH+!g\HlRl-D6OXa+\_kbh3s.(1aMA&p7XO+':ls5'HZbZ2q4u]ai%HQJe%_O/sL^#ssWjM/LM%2hO=p$sqTI&nR5-DsKgbUkop^`/3p/N8Qr?j^B$4XV&7/XRU2:RoJgQ4l'nB#(;eE.!/<`gfq;8.<0*%`a#8'Vh:@HcHMO5b(h#R"u4/n&DSF@1Am0AInZP29(D>g7;N+MPm7>:]KPeBlumPFf6fUA-D1C+P=0q&T&%N`_ZdZ1G<bfRmHj*l%HU[\A.sk`&CemG?bZ8Mg-<uU$0baa[HK&s7gf*<>=(lsAQm^2F4CY[J'K7u+(BVL=Q0)5+Rk@3kNU,UBS=S^B'66;-`2$Y+Cu`/J%.I_N[g3:_tjjd&ZS\.1`H,j-8S1nH/=''5pU+4=oPK0986'nBJ&'dlnO6o_WhQ]k_Ml_bi`'b/^KN!0__7X:3!^b)\rj3FYVdq]i%aDcI%a*hYBOrH0G\<t1,VR+@r7]2a)ihh>ADimmuEo.2pfc:<8d<se%1?qJ\8Jn]g<Kp\]?q-'52$P+1cK\ji12(Fng>!9.h#jhr%)5:9dVP1Q=3kAO+%^\4J"f.j&>%E#Po(2"OaS:>eR+1cm3B#4r-g-k@ZF<g)r7T_mLUqOI[#_'2:HWS4QB=#54QC$].*UZ*7NGZX%E+h#k#]/NBNB1`f+g4gsSSXXIjtUPq3IQjC]9jtLc:]RicTSILmW68MLCaPPHb>pN(h[<[B@j^55lj$7)6oOLQDRKlOMI'+3=hnF%:'T0'iYJ'qB=@DYNiAKt+3s!GYm'7,!Ue9lI.$fL?6`G4bD.n5qUgb:\Rm/'^R;A2Vp:((o8G4Y+-,ErR5<h<SI]A=_9OUj3Tn<M%VZ\]dCSCQC][b^UC,oK^SCQq@RkM33n#6GOHpm'%]6l@%0p1'/@Np4I&DG,l?@.QdFN+3JrnQc25_L=&,9^@IYs$[T]8)`[1X/cD%p7p#hpt7I6TH+9NR1%./\YC;nf@_+]gsZQ@'(REW,MC7tL8\p'1_a,?8fj]F4Cpq6M"CJ"e)&LAAua3gN.aqd<caq-!H!dKo1@uX%_kSD41pu=d)DH&AH8N!BYG@`"d1EcrVb;A$lNXiY.6H<7fNTd5DTpu)l5E.;>G]s@Ohg*`!$KDLaQ7@I:Yr#'e'C?9;WT5%R#\.%%;WT3#8Yk2u;WXb9go:a6G"\3E1L3K8m=I)kD\nS!HFoi/eCt.<Uu$D^#27=t<Up<qa$=\H$gnU"-8[P""0M6J9!=d'Qq&uT8;4t/%:t'"Ab`E0e+XREU!`S&3`4e@(Bf/sAS4C3QS>gJ9HK@IliU$@=@T27<e$HaLB[;hKkOTUY>;@3Dlp(oZ-c-6NE[a30M=CEgR;B]B%UM-(8*+K%1)9*sP&@0n-%l0YEL+1)S2,@CWnhok"1bGWP"iroM@!TtVn9H%=`uQ=8%b(Pui%Nk(-f!#$)W1uY8"Y?7n,,$S]m6R[%@KlEN&3Is5!_@kk_7+d$:](P`G2Z?h"1V.>Hr5J+\<&MUU+b`1Buo!e0(3U9P(Q+;B=SGIjH>\PYn=!@$J<e,;mKUi`pOYGe&\EW%GqSA]],_ineUFkuG'e1#G5LBc@J=b^aa&1,'JR$tqq\F(VGf*JnWN-9cc+?$j83R/7+%M+#$4Ob1GpPlh:m+1^q8]m@4,&rdYU\r%l/e1gY4?%gm,jI>2bJtiW[58Ghem6lKtCm1luEEmNZ!#jUG^e$LSO2&J8M38h<3E*\#-9tB'74lNJ.Y)*h$A59jt`%8[mkd&)[*X%;Rnl3XdT%6p792a+mJ3i?kPl,PpY!<Yu@#_F^fhnP)#-'?@io:L`Xb%1KA&3UB(h*C1DErI28D,rGoNJb@X<-R&dMq#bF%VXQjt$%o3=5rM6'@a7GK0Od0`ruO.l7QVi>h]_IXh@2o?q^G#l+q>J8J`&ioFPMn,A\ms0AbG7Ad=Pip+cdu[7("o%oS]FTk("c7/`'Sa5G%bbfHdoI_P]c@[-L!SMRh>WP%QIM(7TU8ds?MpA3+%\t*7k-(:%Rr7B4a1:$YpuI`pB%)UP!cqL\2P&S/+cFI>o>6XQc_`LQAE_9u%<pQ0ZksT\1&dQ%iCcYEGSLCpZ^2,im@*%FV/0p][PY3Ad=(/7J3Y?'`.*SEkksRnUr+2STF:OJ^!jh,Z_C;q2/2Whk[!qF%9MM!N%-YdCB&$K1qSZ!umr5on`l"hKNi,#uY6-N=_FGAElZKXbp'Yug!F(WmXEp3^NUs>B&-d&8!T@l(t2B@k5,aZe&^N,'F3`-"Qn]A+L%dr>qE9pk:hMoqn1M);ZN5BA_'#7SjslK&_K=`9fdJ0?o2E6`8\EHDEo.Q%;Hnd;&\4DMf["`W?q!-PB523G$Xn?<@MY$q4$MCZ!=%dY6&:K5'mCn#LN9_^sra3`.MqNE6f'C2IiJOc2sF.m267QS%^giP&BSKCV\CX@"c#0'=+Ch1ij>!:HbT3P``m1-;,Y$%k925#"a,%H$s@ACq]cPP,d<sO1\TWfPBneNeX"fRQG@6gPOtre&N]e;Acm$mcM7GNk)pQ/Wjq21VmedYiA/rF'j!$V3Z!:L9k-+B<iqC0=nIi%B%h%g*-\]dn0]m@gs(-tgn?_eI[5&XOC[WcC@nN&X#nq$2(uM7*e`rKk5\n.\NFP?iH_N'`633]A*fm<Oj5ka8Co@T?;NRbln?O4%+c"?9#-;ThTdApLjc3;%!?*TZRj+KGHG^FMrrS0bZfDeM?X5RBM:("s>@('YGIBM2$]Kg,N@cb$lE!&l[khY\\cap<bBs_fPC"l^%"cr&P:Gj&1p61/J3a0J'U7NR@gtV@>2jpSb/niHTiQa/uD8=3/]nO@)c?FK?^f(82@geFgZuL*(bhGi*[\.H>.e`Vtf\Q;eR*&f"%N#=D@o$6YdZR0Q/6[dFU4/7Ja1?1-*mhqUiD^"Y<m0:JU\#4Sa>]AR[q07qLJSRW?R-Td+CTiR'cJE<kcJ5<#ggR8#r3o\ddF_g.%[0q=tMGse9ViY`fmhn7#CP'V7aM]Sh"44(PT"F$#Nl3P^cJjWccY2P4L-&3*<mQ33SWW^r^>j+RbXWV?IeoQ)B#uD5h39i_)ObTS%S*-Y2ml0#^gW"5C$b50@\F3FFa5,O-[79l=Knn\C>SF`>`13gP*JNh?AeK/QkDhl=o-`*Qr>77aF(IPT4=&LhSTBM>RG40a>=#;S%5Q-;`3!MG>4La?.^KkBuib_<_]"C&pgK@$'UdY:sRX.8r$UI-:X2hJ.*HOe^Z@F\Pne1.TcVA]1#b*2dd/pRA*Gph*1=Z##m$9cP%dYlO(d9>CO;,V7pR':uIhk'$\NQL4BbWCEa.a4"7>.hJ.R05lMBSPa#->toINKMiY*kcORqminWAE>O&c#77&aSU+@k*QT>Mk[*h%fAbW=K.Yf@%!+Z-FcUhg/>RU;TAp:QdFkceF4R[EN[l$r1tOm":^Q0H%$;RICQCr:r\W"5dZah!LDr!Dd=\g?b<Y^-GnjGr.\u%X%):%X@"Tu$If9DN0qp&lVB<2'W%Zae[ptVj1I6Lp0/0V:fHlXiu#Z^gE[[$iBATcckCn\kk`OFY\GE+W-]u50mQmiKJQp.qB1qgQM%;`A%MP42dOSJ%Bmhnp4#flpW#%I`sbbt30'5O$:R?#&*"0BeMpGJ;8W,KQd[75d3YG"HqXYP$`+omtL>RL;&UqqOC=i(qJ';lTW+%B:!KA=_Y_@`(e-%pTO#3Bhcb)FugUk*\88$P'c*=1q]aJoX,]iUJ<W$?T"r7TOnUV:U8AX1^S6O[&qI$4'c`LWOHu\(#\KW2Dp8R%fC'j"-=P18Tp$ZQH8c`tYthAag"u[LH6G8q_<DSaZdl5#)e@SrkJ+uPi#L`"Y`RN#s6P'Gj\%EUrFE.=<S&XCDqS/8%:lo:=jC&R%_FmVc>ZcEd7%O"fR?nIAf;2\U>$+goA&S(_=_X"ti++ZU]org](1#;boI);Pd=Vr#MgH9REsK2'T^4=^pG=/?S)A*1Se=fL-nW>H%Fa>XRBu39@m\;p$\T5/6Hb;/r5&-],mF_\J=]dT191>ZU$;NSQTE*liQDU+>d*#?j^e(p-d=G`XRb9k/q.X1-As[S@.uUV_6Ok5:%&0,UuoEH/Yq-pL1$T,jL'hrnnO)@hEZY&1'3*m)oc@+RNV(hS=453,JVUCU-,%Ik@1ggi#Db.CEO.!<k!pEe62HH*Cm:#cr9m/Qu%C<II!"qWV,Y,<msP"/n4hc]i'HDaI_HQ7t)&baKan#:hT7k[Pu@l;fU+q?sYmi:!"NOqjDr/`maDb^H-9d*A_k>l1gjg7QNB^e1J%Mg2+$5Dt#@Y/X`72-sn?+*2AEm1p_sVTekW2%*KRCQe+r4B"*!ijkQh@W(r)9Eh\eO@ff-L$b^(/dG550/I2@HHcI)T0m):`6:1*%ku-D4=b'h"!,&\e:NrS*:q$"d"m@fKd,c$!QRkD*.jW=Ropc2!_[%eRJ<!bjY$$;CgYV'lo;T"q^#f<@e<+U\DpC@ng1^,g^'g/&%UdJTWQh&hcaL9_oq7Knik.?l((\Aorc$Ll]G9bj\]9LXpPIRPaq=#8G[Q!+rl;Bfegr8`mPYZC*f&A@E'AQqTa/+0\+dl)CiMC0B%*gbAae%L2e")B&m6eU>^2e=>fK$K,1DtTUgCae=M^NlPj^#//=R!%T^/fXP3rT69_b1"%QY%L*RjBb(6>Q&rn9$_R^T6&)J*cX.%%]me6.3u:1>a1ZqJJ&5Fgb]c4rHEWr^4;6"i=hq_"cF<YpBt)U\olH^igC593n+Can&FO*1p\Ho-lK:1BdcFe"kD1p8:?"A@BA;>/%a(,V'FfumV;.@5hDoSk8bIrAMp'(=,W2@2YcV]]PiRM;N]me8@P\KRGRm6(ahL#3g<Wjsl[eois]iS-s1G[.eIL\_3.]b_>oQIF1%o<!HOR?-42`.#+!DE.>aOX9.3YFkEgI\LtQj^(0LJ8;ZKfp_XhbIr?KN&O(!k06Nijqq_.qfCTZkNqDA.0!QHqAIWqamZRka6,>K%_81.Lj1ToY<YfY8<K"K@caadgCl['\p\K/k[U$\^IN080DY;K>Ym$hph<E'\B;NieT-;DqRc.R;qf,b6d[LCL[<ql7PK(;mlfX`0%]T@L=S8\(inijc*F_OU&[GL4.h,SjbVG&B&b^Zgg3=D1gePDS.35`FYZdZ0nme(W:F3*UCoAAl3O%X_uhfPbSg#)*S?/FnKp\Ho-%l8R%;I,7k=kPP&::PL7+qY=rU&_#i(3T',bl0NL&p\Ho-l6imQcZ64]o<!I./iLV\Ia5G!\X[a&4m0rW<^5_O\@M&#o4YV'o3OZ9%Q*d,F3CD(*^"70Gd=\UrqDeq<5fXX[YFi./aS>Pm]%>709(#_EMe?S?Hi9Ht2Q#ipRIBfiNX%IRf?ScIT)`=<#DgWLYFdU0pXuI_%DGP>WTC\/'/C+(ZoeSB/rWluebOarHeuZAS&D-:\e$*?lCq+i1L0a\8+m6Xf5&IQ>123"U)qJ5tA%LhDKJkuJQk3j=#[mokgSqNn%!Den+$Ft)%fiVX);RnC9##O"7^rWcqQ%m1.V7:sPHli[uH^SDP/MC*+li##uJ<IZ0Nbih.`Q7c(E&VfcppDGK:'R^tbuJq`lLXV=%</XL(Un^WR;*'#NGaFHB7rdd6@kB!4^@$MfH2XekP]#&u?dd2]r$1#+%T]C[SOQb.55d[0T#^@_l#f5APMXkDK$rE996`EYM6.4W%L$/)Ie6h#R:@dGcdINt*&Qb%!'.pQ^Z[]ES?4.`[(P>?"(C\jG>%c#;%p.L9]j[YHW[(qIf%r%Nfqka%pK6LVHFC81^=c+KoMiW6%^"-+.Q8r.IKpEu^Ks\<k@+]p'"Addm(KfH/>'em"dVug^$Ud%tF7'B+\5+jt^5m)J`puH(@:5bmY"EWQTl\[VI6l=e,9-)CoX;-5%/QJulX&<fFIl89XDjr_M<)4";MJOSJpb']8P*9"Ir(7Af:]1_N>IL&<9X)HsY-teDN9j6V$-h=QP[f+s]UVMnj1.4%].rcqopO4f%gUf^!<aYD$+j'EX4uV=sc*KYdZ2+N0gP4H@TAV3D*":/dWbY"kBoR>CGc_>/rm@Z`G^K<#.7]#SC1qO8+6fERVs8'mnIT.$I>Z*"%.mRO)_Ypn_,Kf1ml=gAc',hHXmB,X16?%Qa#Ac\FWQs?]aneI(3XS*Hg<WYZ%R9!b^7X+P6n1->HSD$=Fm!@5/@FdM=\<KX6i''?%V.M-?V[r@a`WNdBP2E&GG,*%Z`86N_nH7ERgXS:Tk]ua)9A_amN!F1n[<rg')J4?!m7%N:Ys$^=0ji:PKI(A4HB]PB+]1=di&%s"%\ruB>dEcS3g0R9kAXq5<3%IFj8ec\aHKaO@N7*jq8R4Yo7r]O'PD\@8Cf%s%">j=P+&2NU8"*G%Y'P)nIc6Q:(b:;<idMuQ,jM3O%DeP]uT>kk(C,)c$2d.lnO4%+@MI`)`-bGm[[\TLT8K-Ws=-M3lR_;7JRPcs[ZN[7Ap0'5?9j_i#982]^NOR>;k&=/,.eIU5?7Ek6%obXot_s_ed?Z:5L-nn%.m7Pnfg)IZPN?_rfe.Ik`];Y'?%`!rg6;NtrX"W;In2CLJbB<BXpn7$Udbc8Up3EsSDruU5dmNSs<MfmA%5<T$4\0!n[#U,.66Nge[a8,FUJS9;k8jEC#pZH:<EU,fApBI'i+b]Rt7H)DjotMd;57i]sO-G1$A4T=O6\)SJj(_"Cc>%#'1!Qh-%/P,Zh$^6kR=Sop!dDpYW!tZoO]7FV-)M%]^XFF\UJY[BHNY@\h*R.).nO0*YjZm>r5mqjV89Tjh!=u>10,]FYgR0`_'F51cDaf%>%3oiXpJNu;I\K&U,g)'_C8sBiEq\#b2;Q=^B4T8/hWmlnjBs]jlVs(t=\j!k_^?(Tg.bKP"L<p"kbj-J&M:o>GUP+hOj/@F"Y#b6O%lK\4l2=^>O6G5pFU#8:+ccekI<O6M]*"=t+Aa/-U!T-LL[?ucX6m=)?a^8'B:=(a9TllLT@p9hMeMu9I%N6uHbm_+)T7hbBYtW4h%\?"=-2O`Qf8us>mB?_)@`!c2@2Tt5JY*GHfEp^3F#?l'Rc0oaAhV4%W@fXprA.Q6o/tTCMCM[iW+)7Kt=GpuKD_<PY\",TBlR:dW%kW[.Kcg*.cPP,lE3j"WV04j6>H$PkkZ=9:9$et@!!sIB7D'f+!O[jXM5g%3nqU&9+`+K[<V^\"oPIc(G=da`%^=bHlAf<#,[0+*Y%3)>^P+kPIP$7>SA<&T[3BR\>KRbt&q!3N8g.-Rtuf);El\aWXAoT;D_Yo-=W?[h1g@W&Rr1n1dQ\XHB%pK't-mH?87pi;g:hd=uk%2rX0`@HI?3"nhFa6Mq#\NZA"[.aU,f\Dao)-'Arq2A)msATd[SG_eBi<#1+JU9"A\aMHo6r-knrBY0SZYG=#[StiN(ZnCl#kp-4$%2:cgEQ,NIWFY-UH+PU*(FZ"Q8Q(t1B/\1T'4k)SY:+Jo23i?+RZB?<+?\lE+\eR2-.>.K/gQlV>ddP,s-g;jTh>WIDAMa]DYk9*W%8p(g;b'UWo*##sa$s(NufCd:9%P+0EQh#VA.h`8QHS,[*;630dp7K>s?Kt*8*\1Bial3UbCNTF<';JRe(KM<UGtVm(V%O!bE*4l?%;EgG9_-S!Z*_'6]J/d.r\RZW2Iu;8!;ZX.kB_r]kE[#c`*Y+I_20TlQ(j_Fo11QVRI8CE@rBfj)S#8^XkGAH25u]o(Rb1j#A&[ot%,rsE\9CS)2k_T@r6mI[=\efp9EP3osQV$DqjU[18_ohlN:C]Za$H4)\3Yj^f/%?IAdgfB(gHqQ.*V]2iaI\J;RB3(e8.AuVBW.t+%-lII<m4EjDNppV$UO+.1WilG>!@*=Hl`"-261MN#_hYg#DXTU"o]mFMj%uZD(q+2=d=akKNu^.@MO]oj+f8jH^GRg716E"R=CgIj%oN4_U[[-,jQugL&)%\n?eHQ1C?H+,7<^0i8BYI:cT^f6O^mG'6+M8OVLhnQ5k;iki=:h.QR.>&:7aW(Zp!"-P#jPnicC/\1@li-k%J^5YS!#H:N+`?ZG]0JSX+[?k[miT71KA?jifTQ;!YtY<e+?=aQeU_]&YR_j'PX=nsKd+-kQj1q&>FN(g:"=p)JXaBQ!S#;W:#N6-%$V!,9K?;F=oJ>Yen<(8I#0^36fE?@P:,rd/P6a24F&(bRfi4h#"ZtC1':jYj'-8(-[_A6fI+Wjjhfir<.)/Cg:P1[JnG7b^<<Q$@%?&c21d)-\+mb<_q20)u^obF?TS^L<+CZ(+e.0?cB2V$LT`9XS%\8Q)U+)hI],Kh#Yd0B$N/@C`9NpklYReKVShRR8gbF^Nroj.ka%A7YtNKH]W-bR#ut/MHGUYe'R9,A*"]ZoIg;?:Y:8a379M-?Dpl(sr$09LJt?0j4'.#(;Q#7aYnnM=HQYAi\O-2FS;:UNnk?UGnbT%iu:3pFS3k?#F^!X]Ft=d7ETAQ-;s_d@&9BA$UhnEkMWjp%P3kP9<aWQK7L)dDT:_QqCI_]:7N$aL$Y6TV@t>r=^Uc1gjM[`'emmB%?>21?T9[dLRih3\$N:@W^OPibleaXCRSi!gXc,*EM]^pra\q:S51I*$SO+L><P\A5:Kou`/APrL6p(2Yo&*Bq,DWO2"a`rQ^C't.%%tPS4(XmgS,nh+.d`6KZXS%q6BDe4"T920,HpQ"W@X&!a[j$bAV7oj]U(9jN`d:m:\DEnip(NDZFCjL=5TcN=9J8'O!?rh)>O.7J%Pj,_ZMD>^0Snn4C3,<[XJaFn<pApH(J"`E<]9!I<W\6>s'6Qb\.]g@b'306Lp3&BjRhb9i_ob6Edm0DaTmD2'aX-&Ro$[PE20Kr4%Q"bMk9]2QbihD+PO1&HRD4m#NMlH7"8uq[`OSp_8:0-)6LZTIBfNcOQLQck$hnQ,>%<e#T44P.cHW;N`ADX;8oTnhkV0lU$$W(aT%FGJ_I[N!P32;G<-\)o83k!"/kaZ%erJnW)_Hl-?;mVr/:P0tPNNr\tM!.M`h@^b3)Qcrbl@LXK0e2K4Do[uCt=+V6SfZ-a/kYsAD%-/aO"d/4s^1n5bQ;N<nXX+efh1o1GD"5"Q4^:eS].,\>6AcObm_!)\b`'#M!#l4%R`(;eRPs.O4AM*bPFr4*5e=@;12^D4)4q(!f%B3Q\I;%Bd]S\J=_e#Z@<T3FVmV=7)X;VI<t_#9cm5nSX(+.4'b<HC3bS<;cVip1)'WtrDR)*.89>#JEtT!tqPC^Y*[Q!Y/+oBp:b%=*(1?QKrfUXB1DJKK%K3e^kDD<<@MZe^a?b?D;lJl\%;*o4dIIrhp0:/S(-hH?rqIhd>9]i'h^4h%,b2`aFI:L/470>(5.*=,4[D%U]<?:dQoIJP+srd-h'k8dIuW2H:(H$[SOAso);6aF$QV`OR@Q-)mCRM^_95O#!3*X,6fkT<fAT8i.9Ds8bgtm_9[KpK;8B/I\oQi%fJo?:`QrotK;8B/I`??3[GT$NE,6'RqYq$&%/6K9[,8pMYbcQ0TV/:Z),Q\LJq@UqB4NW1]\.\kr!_=323.D-p_hA,d5]jMr%-@*%j_)<#_9p4!%&3'XSGZ^gR4i5m[,8pM0MU+Xg@+'7^7`<i7/RGugUZi1)YPB5B6i_qs0r1$0U/>hpmE-#M3[29h9)^^T-[H%ZOQ_Y%G:*p8r*#h#X7"-XQcp+?WV!tr*7pO5lB=m#%(nuTqk>P\r9ECVZ80>h,77NG"Y7KG]*[=2hA)[MV=N.+A$p\$g,Xlkbohn1Q/NaK%X=jm<V-$(DY<>:mZ(\tp2UO$"/CVKn3I)Lo33>KoWirUj.%Kt0&90^,K?Y,Ka1;jSs*=6jR9pr_%<^i[.B_&Ql?ulCdjT2cZVGu#%QhC[Jk>mg8]+scULZiA"XoU%Q:$=p%`($9!IHa*[$mXP?*p(CarDA5rE"p]6gL6%hn<.MM%he5]60V<t+EP4=&S%A&(JNM)W'RJV%7+hg;aeo%[N[^+'\$@Lr5ju[l.QieIf[*B2]EImFS4Ben$:Hot0'=s;<EIPm$:/jeH(7iZ:RAjuFtUVABg_]EmhGdIP)9,9n0h54%<<YtYq!oB8]cqHE8iWBna*8>3aGcWk*c4BL2hq.ShV**pZ]aYge&g>%H536e.jX7g`du[cp(?U4`H*a;Vp6<B.Z-XuR_79d<'`'M%OZBh+c6*j/UR38nd//4r$X9\FB>MQK7V3bGJ>:Skl1<KK2K1BQ%2as'S]jZRB++AFkrF(,:%<^:Qos^E;gZ7:7e,L#`2][@os[:_%e0Ng`G7u'r#M7'dJ2\M$nX#L.hq*\RSWu4lk:l=&-q8MN\1u8-f@o)iT$4YH>^B>/"kAQ:P>>[T?0hQnoI`nlGne-;_ITZ8GqUeH%X\@l"%$JI``/`t%GNJSWg&YesYamRB\9krhY&<C[SVpd!Ds(TIX55/N](FeCq=Lg_OWDir\eojFiH@UVl[k]*]Bk?.etq?KDm:N*%=r6SfGM!K:X\6.?r<>?XTljf.i]#O&%BW:HZhQ+q6pp9l?@J4]dEoIlR&bqq&IkkcaKo!]*RW6FJ6L6kGK'G#m"f7*M<\Ac[?&oF%Ej@WWMA0`+S-"B+U:g/7g'0=s7dGg5aINYODG`LlV%P5@n;;<O7O/Y;^5>psf!rGl#N1/JQE+_4G+%"1`cLnIJ4fKR\88m$BH:q>%An.dPQQYp??O9MsBnJ9Xg+,Rm4i-EE&O1M76Ju6:H+OOP@'hW_)4K:PL7pGt%924ahUXW$(nPd.k]B=?I?[V@3e*+(r)grF`d5jo%&r*@29T`pXCfV3VrHnVk=JRsB7L1^.a!+ZVfDQGSiUL_^\SN!53.GaQ.[R9S`Pu--X`E)E>f:fj+I1,NiM(M=KrA7b$C@WJ/Onj-%<Od9ZCeg8=<oML)08i]<C_\R]Q&APNC_\R3Kj0Y]AZKcYn(XR9/mF#;CIsF^\SN!5]TYLZ>jKZbQ`\-$pYq8IOB*h3$'EWEk7%qc%0Tj<cYPpk:?m:LP:k!u?O<e4\[i&f:1k>q1d:&p&I0L$]`cHDD@32V:Rk'<D`o%%4OtIC$P2B?PP/`^R?V3/GCK+3g2ClhdX9a*/%er6f!9dF$UWaLW^^b>EN$aneR]UY*QH!jGo'%./G;O2\&5W-#5^9$+UQL8Le@;*W\M,<pm/W=1rp_At4Y`uFQN[<[dL'5+:N[<[d%+HJ+?@u9sqhT6/e=<`45>8.miYseMIE3ViP/.oYf"W,Fg7/Y1D>VsJ6nLGe4c,R#g'<``Lh(NBV`Q3uX9?R=np_DT^`HbSJk#`gV%"k(A!3L5J.iHl5MNnP&s$-RSd9g10t/Y0R[*'6c%0:2+eigCC`*h&:L0eW[E)!6RB\M>(?Hs<RdFLP!"&.T!0;G0nCb\F0QKFhEf%[F;@-6+]Y<F=s)4[(F&)1R&:Of/S7G_#/X*m(#:(e\irB_J.6Z\>PJQe(-Q'rtLU4U`G%5[B4R>l@*Sc5O1O2OV"J9KaG<Z@)aIj%EZ_87k+/&>58pdga9A[RH^)^_![hnYe-(D"F9(l&:NW6\.)&0c-,YCQJHZr:"];U^h(lAWUKm/2e05l,?.n"\duJZtfen!\CWhZ/%]f5ljb>=q0T[$@D=Tp4"/N4-!Cd,#\6[um,bh1);Qd11RXGL1D>1,FU$-Oi706)_JT!5l52TULglpNe0Sk+P3m%oas]4#@!pl#2$%caE?jhH)Jdfa_tI'fhln@@^*%=@2%W48Zh\cS]V8IXV`Rl<M:GIFp@^<'WNt-QGb\c+7@RW.]A<2lpW(`\7;OQFlTs0W!A'dF[Lq%qKRJqXB)ORO;'W3jfG^iUW*>K^m6es_DF#qO?Lp$CXq7Kes.mjhJ[98.$qQ0FfV1PNj82eXPs/,4iqXo`mi^%,n*D0R2XZ`D1=J3%,k*'#m>')5`72okCqM1N\U=YKb=5dVhj@)1X(<Me+?Nss<+DhMd^"uTadgsQ:MmsgcA9]+oN$^6T.Sk<&gbRaPUONp,hh'E9e!28%J.*RFK)0+<NtPguXbqSf;c.B2"2geRDHFK\3>QnXEdRNo3%D:cm4]VT3O%BgnC`_%=TIS$(AXS9l7BhQmWl6_6.d=Kr$,(cltGL=%fV[:BH%-bhfd"n_f5'[:`hUC+..cC00:S'>Xg=tWGCE'V?&;\51[j2[e2?*r`A8pH-dTo/4>824\T!Odkuj5U#"?l)RY+%S?r.PE%4L(iS++hcNg5<hVKV0@Z?nTlJ'0,MD)o.<C?H$gnP_%u1g<g*4&42ZGoT[0^pa`k0@N95e9rWhhacbmPN=Wkp+BYnsj?p^"5FW2"%+?2p#'_i4FCq]]WSmq!Mn1APtKM5.hdp*'3Tg9RZafE8"W.N)oZOF'2b;FR[/4W&\$39QXd8"725sN'7M#q`^%%?8.[M%G(8'hb,%J->?/JK<mdRR-4-\qUpIQ\'BYm1^%K&#=``_q524cPorErKU<-\/kP&r&L.5rBr_cHn#Xcn)'.'6.CuYjUd86XZX"KGio'-lJb:l%]_#;ig^dYaB".Jg_sOQqGpdWX<Se$>+-bl9nVO$1`4U0-S4UPhN*mK+ECME[&*F;`g_r79(,\fk(sof<+,kHbiWE(opC=$PL>_tD%-WO5YKCp#,8K"'8<S&%W/td7ij6Z`J4eIH'JA;./NPl/4!B>\mCju[\VCG(@UE'K8gcjF\pPN.Q`6)hgID1K1#St&S').k%,AInO%@5\0ujn3TsNfUkLo#)i4,gYd.6lFR=<oW,p6HeH)biM6WMja$uX[uRR@_^6GL_gZDOShj$,)o?qJLs>:91Ukrg#tO.)UD\p&SXB&%N`:ST_bpefmu:E+%6<0$0tT"GNe62;2m(+!L:V\/3P`ZqiH'ORI4S37%[`_K>Ya=+325.Z?uGCO3DI)($CJH[7ml,=YsdgDqhCV:%5V@d/,:(7Eg7ci"2>nqsI7.<m8t_`Q60<)jmm+P%+V?8+gF)lSl5o>3/fa9B2=9<ZQGTS>QL5Mdb^WUr']r#&L+_nB6"1I@NP="(%!A(Qpa??+D"2i+%B1%dpDGD8lr0a/uck$R(.Rg[rY!rTA\-\k-0-,_R3$mAl'#s;MZUX=q.1T:7BZkYp3+S,%kH9Pk@&rXUo3mHd%6b"J([E@fA1MV/D(tT-MJU<<I6Lks46'VmMqbN?ZEs.b2T+DB%^s]4*ejgiTj@GT4ki\H$LVb7?,<_g4JODl-RA5t?8(S\YaUc\F%K.6D3B)08GH@T\-7E>u`klEn\@85XWH&PW9Q8W>ACcV@f=]GhW\O0TKJN4a5Po7Fg6D$qS/Zq9J_#cj5eDO>=n-*+r\tP(beDO>=%TWpWfETGir%*T_'1Iqs]AHmhb?DN>)a..?8WE!P<287aqm+:m)i_0'R4+jWrRh%UTbZP(='lJM<"6`#f,$ie[91(Zf8&"Sa>.E?%%jp$B:_.1RG2!,"CbjQCS32=#M(hlc.BO#*-h'W!n"U]]'`M7YjVR@]iN:.C&2MXf,>'%`PZDNEMoF[+T`&E"e@sD*PV#?:ZiPBOr%_dYsu9ninS=1Xe@ju,?K]*03L%pf\Uo(1C??"A3,HZ:f(b\_SIReWt(@H:_[):__3@L8Z?9"5]udra!/$A8/*Sc<nZ.]i/M:7_ea%/KDO(f&3dQ)]Th5@7%kTlJ"-PN(%]9(lnMtc>5#mc?8!&i\Yu7FS[\dSC$K]M]Lo)*6O^L'C;gi"b3kj_K6u8j$Kb^W]r:/LcHD!%&@Gc!@"FPnUE`uQ"@pMpL_+Wf&#9,jGpC7tj2:ZejOkcr,*)2%HnVfrLcNM2JQHq*&Rl?mpb:]QT0GZd3BkY'>YKg<F*ngphQVeA%1$A<cid\4k&3C0A/`5PLo8!fb0B(X-[r>)ZR$V_kj`PK@:u4rB5e[DWD`#50(1)L@or+?o*GSNp\$.J@3Ri^23LH0?jBHr"]JV,c%R:r3un!]D[-j.).+NKQfSJ<?eJeN9,\^$pUniJ2DL6)t@TVY#$"K=@X!,ED!C7:=2fh+k]Y6lXgf=09s-!_^-Sl<qS0*M"6B=<?U%UaTlViu9Z##kr,,0,:JZ?.rIUXI-]qD3;)4,"K:aiNZi98%eX5k4rN+7$1r5S@ke&0i=_`8:?DU'ba#nJSfe>Z!n;2U_nq1>@ag;%6kCfEjmXlV<_R$)JTIt0)_37m'I+J_Mi8Aa7>cZPEj;lYQ:S:7dgrk[GYB]#'2.lceDBWZd.R@pjl!uC*HM#3DfkJ^V`-T-Lu@5S%">cRBT:Z9T*fQ?0[=,,X@eD4[QY8>GG3LjsR[o2VmkHQ.*?6cALEi84N/kBqpk!PlLq$Z'i:OS;Hgi$*`T@U@nXp4u:Z?a&+s*gB%^*'i4'OO7OR`/BCLl]k:5U7>=_b(T#E7'=!^(RgT8Sj:Kd[@WT1n*l5A>35"JVLH$RnY`G)e_LNA]<:L^jUM6&SlhqeU9u@-u.U[%Ok81b0C'EHb0eR:('1@^D"r\a?T=D@DfPPU4X7o(]63\Q5_h#co&q^`hr=.5grK.n*57Ll@"2]VE['+*B?P?XI!s]l/*u@FhAj6O%V>-ohLG/(LFnro/1#CmdK\#6uGP\6m;(mig)Df%?3&BYT7?&2MTk7:97uaLYMI"_6&r@:HU0;eg33dW),$EiA"36@/];6rk/=IjQ%+Fug^N;qKnqe?&.0oMn&2^e02pUpNlW%l3ibFCUTHdp^4U["rXpjQ`&(q,JScf=r>bk<c,Uj3Xuc#X+n%LVD!r?#\pZh=@Pg;b07%c4O+a9UM$pU;qhj\lu'Q>@YsR&9E;[kH_]P#Ro7h-0=kkl%#Y*QirMA,D>7W]4u>.D9(?0q]F3:Y5VM/QsI&>4oSU/6CL9JO@5O+%nPfmQqHqL!\pgh6RY=X:2bR2iY(.&W=3X=Cd)!n^*Qm,_XSQ;#=kp^(s0$#hP@buGQI*Yoe1=pLGNR7'??RWYB&R\6m/Ph/"ZRs^%q%FMTG5#Qa^X&9D>V0cpD'MN"^#Pbg+I\5+c<r9e^p@\qT)t_!!L!BtBGS`c;U59FAhf3U+oPQg,(rCe=Z$TRc!3-f\(b6Br;X9=%;9"&7mL89j9uCV[+ZPu)n.'Y,+\(+Km50`6l/91\.1/2d:LV?qDo[LtrrUI))JKtfOlB.Z<_tFOZ,G@%+SJbu>BGl4VO"Or(-D?`%\;)%=p8h"bK#Q=>$[!7-pN1?9WtDEHfo[Y&`(5tcHnWlG2"@sgCrUl$25GX>I=j'N_%?CSApGi*nOi_c'F3Od?<jC,$%jlJ_*RiK%Rq.=8e@?G(jlpd.q/ti\B''*YmG013EqA#1d5HDLNAD+;Z\!0M8'KB.Cig:6lQe$5l++5A@8:]PHEL8-1S\=(G.erkZD3(me&83g%,"RB;/TJ47bhs5"9N5'3,^c0JH0&run\_KT7p33I:/Qp^V[7C4F7J[2"oZ(\VaBE5TpN)U<K@lQ0V3J_>Wad]pbkJrEA=rob%G]T%C6N<>Osi4?]mZG6.:f$>+mlAoLW][?W]quWI=,s&+9mK-IHr7>1I2aJH#F)adqr>Oc1tdT-7lG"I[\^!FflJHgZ7mYd+:n"rou<*%^+^@[;sS(YDaEU0)Y,K1?T]Z._:rCVI(R*jd\E@rE2::XZ5u!L)=f@>$%/nn`B;5N\o]\(iF3][F-:IH4N8EpL+)'^M2(%t.@\fm%-/mf>B1P;D7IQ6Hd2OqH8)5$]G`B23WrY(lkD_DP"Qtd-c5/:LnR-pWqVrC:fh=,%R(&'a(Mtu"rLW$f4Q_JRp)5n8Ia$b;K"8'0%cu(LZ^5uajlNjk(S1c.Tq`4e!7YJs="ERp?T\V6`Hm->]f+B->h#0Qk\Z[7)DjkXVOC7MB#fo.RQ4"!7E,%q.3?ZduH`=XI2B$#o%(n5ERj0K;VI+aZu0AT">27.]DIS96laaQnFZLHoqPPl9Bk?l.^@raC:Qg.i-$XdsGF,,]CPPFd\AdOaj7i=AtG7dW>B65VLj0:-U%1gU;nB4<BN0=[D(hM;t5pE(#095D20`Ng5Q@rB]/pF4tUiSdt.&@ms#f1P[>AnKIa]P8b.pLi)N]P8`RKpbLcZ"PGkCILY@s7e0%%)m,Ir8*MO04k5Kl7c"J'/YBL]HuKrS(CBM?YQ_DtO;!7ino$TIfuT#t:2P#32&UL_?=!0h&4L:+Jkp2MC4DtkFLJ2"r?EfUOM`>R%RL5NVL,"B>,4.r7!CejcS'W*5'#?FnXEII95B6)?-4"%0+NR&E1jdV05'`Z=kuIZa*ZQ@d+)h1H_t%e$HF+A+huR>9Ii%R_O=!hn%0Q>P:/p<P,<QHMNap4DaaXTteP9b)e5.0MaMs12op1:P_PWtY[B)ILD8Z+F.*O\2e4b(tjiCamYAbiphlrStEelD&)EOl*5l*bnJ%J)6eG>aG*XZ`/!2^#*Z%UVo0T@2)Se]=)9N4$+/h<luMpg@sIp`E'\M+l.(+h.U5>D[Yo<8@8gn[_Fa'_3THSR:;NPZO0l%J4X4W%R+eh5\@u3c%?$EBjS7pSRh&2IGU.];IZX1*a-m_9;Ya^G-h?q4Hok1X1P`S(;=sHC7dO`u]"jbrm55`Tl)Y*+RjUdp`XRm<N0E&&%$+QF@(J52>On5E55ib(W!Y9Iig=Ha$O72cDlT`Q[X'22b4QKLWQO*\6h)<s-gam!N>3fK0%",kSHoIXB:bWa;46ql=*Y]$WW(_?o%=VqCX9P#n&#JPO>RE]V'HU&,m-gI2%HD9LSP?>`"TGSbU1("q.Y@P!gC6,.nHZ!i'oTk<)gnJ*Go39XIN8ta+d=lQYiI!]E[0D-O%G.t!om/a[T#ou*XNu`iLd@\7S)!uIWU7o9`A(<;.7Y1\:U5&%]Bh?g`Q+@_6;1FR@dO3I?5l-H12Xpo.pL=GjDAS2h"=p!@N>DE`%:,c)#%`?eT<)%$i?u??[H9aD[GZFXV&!4F2/37Y]<UibFUtC(ENW=^u8"_r!0o]o<2fWYHDY?\@hh<E49A1OOdZg7KE+`S#'K\g5%6/GHud.Xgf'n@_tCH^6K;H"^g>Gt2RcC?7p(HdusrLgDp^WQ>!E#Gp8,qm:58.ei"A!:gTN1804Lpeh2"sTn/SP"PTbX_TSU"m=r%jD<h]V5<RMRa_c>b/<1=J":/<@*2ZQ<f%b4=-d#_WJ%7%]=YBNBttNQ9sd9XafO(@FssFgj_5qD\tb2i8N@-P'?GdG$![[$<h,C;%O'Yhf,12ASek@;6L"JTY$oaHtF"+A:2]3*hiFcQt9B<q/qroin_%Jl?k?t2b-Q)d5qX3`s*T=n6AN4ti;D8U>#JOS*[.B*`c;Ls&%*m&CsP(3paagt.I7,l!tO;pEd!oj_TVg%W<=W:)uqLhukI.\Y:=>>2Z,mb"(kP3K/CBUP+'m1FU@G[!a"/G)tOG?fHL^&J%kY_Z%%'+9E6j!b05oKpR8!$T2ZiGkeS-kPsT!JGFVU%q#@&<CfRa:(ccTKAPF_YOTAKUpOeT64q(b!WK'Zq^o5ZmDsZ!ToXc&FbCkUf0-l%qQ0caRE-HD6,M:,GCb4;69m4UhEPb3a10l#A*)^lAfl[n$l">`JN(tWZ>G,j&E.o'OL-fV*#]s0n(^=L"%G9/6TF?=c9%#QLB`,l%a!Tg;:*[SOb8I3$fkr9<"5(RFCdRjLKM;PGAkVrO1LYKLI4Ff<.#bQjGpuEDC2*a<Ff&?%BPdN"B]1gp'6+P`U$eM-6<Y&qSQ!7R%KP4k*Lj>SH1a@#YiL<]t"qk6^,HB)pd`Vi8NL"=7,nn30lUK-aT"8p=eZ<p/^7MSq1qokR(,JA%X>%RdK1a@l^3g$&'4e#u@gV,j%3]CH$Qo+7gKHpXm(LDqf6CDg%`ZA(@`H]@N3E_C/fS"N9Vru-Y]j0J)itWAPFl:>EB_q#^M!-/NKr78UnFpeODF5KDa"b)YJW%PA%E.A_h=mf",reMn\s1Z+FQtmLfj'>[S+N@d#k]0bTM)++:>53]&hf[tRd^]ceU:KcO&Q3OI6]K_Gj+E8A8r-Xb[ASdu]!XM5>ST/-%_;W8G26I:IQ!!!#VSGRf6.H7c,22!>acLMPO)?IN_rcDg0bUpdL5Da\0rC+!'L9%]^pAbi-*/>`7BqIjdCpR?[F7I:q$<i5fEH&2%qiHHMY&K+(fgY`Bp1S4;S&t5Ym:4mT&N\u?m5Q,>L2d7n-%&#DD`EoU<9"OK*p.P1"G&JS@7&NRs*t(KD#6,<6#\Qk<dIKk^#08&%;9<Bb496PSId4>nqJ>ndlMn5G51ra2PL+gKRE>89-0nW1.J+hgV+1u%#hSam@K-o`]W[1/E*R:qO5'V>IJAjf%n1]_8([WLJ)3ud%^7r1XrX^!-oSRCY7q(n$]V6"PqBUOkrI=Ppho)uf6/O<As#$FEN<29=#Q6VI?[hgIGfp%>^F]2ArK#9f^Bs@7puH6LSs6%H5H/8T%WE_(CmkSHG3M&h<42+@b/;MF$>$:5eW2E2NGZp8@[QUD0B[8*%m273THV+nlZ`Rpf9Nt\WhNIT%CF?+"F/F4$AP?<SRGOB=_R5_r%j&/KI\b>YNVEMUdDbi%Fg<8R:$9q=gKP=(0d9G%JZgGj5Z;8b:>Wqpfea"ZpN+phqZCKJjhi@C(aL?VXG#?qJMZ*SG.G85o/)c>]%iY%Zt-1TIc$DG]rq%M\i"2>l1_Y@3GgY2*R>CVjoQfJ)7+8U?%LM$-2J'ri5_cs\99D_(bs4sf^c_4^YV:j.ZGUAt,SKjYd&WkKV%^EJTB9K"NdEZ(5aRXRk*?i\:%P.5==I^Q48Sr4t[\8ar4`R?79[]#.!h_GIY_+='%QYesf\$)h%/=j2FN7eJgEJVb,K"&?c);56S%Xd>8]q8ouq)M=]!`4sqN5;R!/PN3ak4_6B]5oJ.[WI+X-8FTB@D*&b>Ek*a6M""0Y>>A/;F<DKSTF@S/lr]3DLfjZ^&K.fT<>>ll%0ZjeZA<bJ])'pg_6?iM64jCC4QSImlAU8]L$.iKECLRISKP=(0d9G%JF7!Me(04h-0l?/dH>@g5gKmcEj=Z:TT4uV"1YOY-BR<2T%f:J_*=91!^g<rUcQF,O]<hRT,XrdOYlkX9a]Ru.u\jQ79XM7K2+K6KfkO?E%@Kj&M<oCYc`S.1N>@AkqZP?K&/4A)<9.%cl,![;<%Q4alK^p^Zs/fU3cmHT[Do_4M_?q4pN):Q<2&E\S,i4UaAQ:d?`7B`SM'I$,+\;]Z=1_)h)8FUeh.761SCr)&sOiLA:oH5'/TPPlu%]??G81\#96Q\2c0Ud9feW/Tt01`A[58FUeh.Ec=FW$9*=M4(2nks7-=6.s?MDHAJ_-)h<;PURakPqbF(a'gD7$/Y#h4[A%`NY0ED%qT09r63!Z7St2m;.d=k^Mp6nlC9?YI",F1H\NiMNXt4(^Q*W;9Wi/<"5sHgAkK4K3/U^;dR8uo6DMC!fPn?X-Qg(9nbL1J?lB3NZ%ksJt'Pao.Q5.HhXOJ7`^!e"Ud5T^and)VC!BVM"O`l+*U8BR:`NG0=@PpKA9Sl').b:(Q\p<lMA()^V$9N`uZY*V#cQd0<La;X)K%bAu0[qY2o(RAHC<.FH25QXj%%%c'o`@q9mg/hYV]Z?3_>N0,i+C<B^U*uQA8W(\9P;l5U.7s@;F(`t>.,h#P+BLtemM.IP#6fV+.%c579&1Gc1!P81X6N)n,0Q!(dL=si:%ZF5.<XH/#d,K$3s%8&HSQRa;GPa(l?A+30K2BIbKW$Fm&dE<7%PN&pCB^!I&C#bnCW[Pl3%QnhQr@O*GM8&UXS>n(AU>Y6Nq8#;QO<(<-p$q"V&cu`\aeTNfWV@S\r#qATqp6[U`Hk[f%R6J>Y;BLf\5.rL]N0!CN<(?SiWJn8U%pGOKGHQ1+J\YN9'O,ka5d.[*kRl&-ObNWNYdJ!2f7`O'SB8V^F2KiSfNfP^>`[AZi9PS.MDPV3d'HJ8sp4%F9[p<ioloOJ>qAo9h%!#pa'X*A5s,p<b+5X5Bfqq>`)*EdoYg??;B^i,ja.ZQ7Ga#Vn:G=1*"#(DS4+)?tW_rNq"O8//u>f^KN5*!4/@=N'[2=WJ)7XZ0Q%d_q4,Wehh<:_Q'RTdG6,qHHAZ];RSD^Z1EnJ^QuGKAt:.#l)A*c`[7Qe.E@"d;`"D!9k\aKeC'rLuVlnAD5"X?dculSi#]LNh>VD%lktnlq!<';dPi0`rs:4!HjaW(`5G@GE"e2?5"m]jB:GC<Y#]Z>E@(m;dMJ>rKZT`;%/@bZPV;QQ\#t*e\0q"M2b%-K!r9]T9`+tf%&j(JqI">SS+mK-@b`9t-fO]6u2n"KgAln.7r%b1r2n"KgArl*or%`Ws)saF5rL7`q_mK3Y-L*rOk9PL=FsZ[r4NL+l0^>!V"nf,r%'?5;uT-j*G').CQOe0+*I:Jc(a2)j.pS'jri)dE^I:IV)(A2#=^S:_Ni)eEX)>oBg08!V/s1O2$G#Ju1G1.tc0*EB*L_r4Qm,L$O%W/)0YfX<1BohPUdWkPE-OkijMWG6+[id@`j"Gl[,(d$[gkJ%&k!6"\ON2*5`S>nUN_Yc@4-GT$40S(5DNNp;/S2_X[33g<eiM7-7%L*6MUZ,r*h^TjS9DH9I@KK-_#]X3;pdoV8`s,F:K:gST\r6u;@^G.XSMr2m.acG>fM]WlGEPCW^SKZ:.A,Mi.k=aD3KfK*l@F\Y=%:=R=&$B`&EI8_PX^+ldi&F."b[V^mDgG[$3D4BHB1lEO,Iq)^e+k2jP[R$iF6Z%HPs,F:#'E#k^JJ="77ZDJ?gu-O1'_)E@it=OQ%)4(1e.3HORCP)R>!W)IsS*f!8B"=N8L1-e.Y7ka*@_^3Q9B\Z!paG5=qf*HW+pf_;Wk?*m9ND&^WB,j"oG#^;CW!p\,O"cD_d<\\%]KktifC&3"lE?AN$`*cJJRWq*2qMh'H'*qe825T1T3cdbJZrK->aAHR>U;iTWam@^Q:G4_-/THYq=PLraSAhf=FluL-$E]-.Q-VQ%AgN!7gWID,[ta=J9)9tJnEUj5$?S4,64>c-KloL8;&))W[]arm[uN8FpE8&=$r.B!^QGUT2Q-I/*pT\]S=mLi`]B][W/@+<\Tr:,%X11/)ob3QJ[=Annq/7OZ,&6fG!?oP9,$GQ=X#AJ8N2"&L*t*]X?Rsa%!qf:D?2%f4HX'pYl&0D-]CT@1TtY^?\W6N0(I<YV<F)u#%rm!V3n$T-=?4">(NU7m;2W+L)n?o62TWb?,O'\p&:N=*7@oM8&1=s;5C?TAHa+nqopSr)+5^9Kd1<LiSf<,oWI]m%\ShCuZ@ZTZf%Tj"XtpqF7)@]rtsl`6PTK.jBhf^%J-TCljuG]AGI?;\le`a$+l[cp=;=s9lsa^/=Id&r8`*/i1\hJZ_oUT%-e@219Zg;TCWPHkE$%d)$3JXiA+DK'N>.,Trg?XL/cEHFlQH!d^%_TI(5^3<^l8oQG9_<9S,OrA.b6;&T6Pb*mLSq]VLh4L06HiN*U7RuWXHJpC"(3<\r>%e8biW%4gO!1/ZeDq(Jr=f_oBLC`p,E*S`.:2baO_$G!k7TN.]#Bm\O7OP?7jbmNQ,e#B94ErX.`mFCZ&gN9BnOPH<8/+o1_RuSf`%)YH9ooum*'h&T>EHm9U:YMA!A&ltrHRLT\t/[De2e?lekq[2`J7CEptH`LoI,IFq[L-fQl`Y@$26<a"27.tPXXmJoH%>D1G)VY%&%B>2Q*.4"T;e^d5*dj.7]M!<e6>731!oq,)?/S])TAG"I'h>pZ?JLb:'2Ul:$AK'/_8Ee="Gu2^AZg'hCD\?S2<&<DKUq[6C^!0j<%UY78H&C-aj;QP'MWuK^(VR90B<7^S=7oeo(aQ6^MnHSqcQcRi&RWn"bYmN+bDP3XXI"2F3]M$`-+GP*^PRV)HQZhs>gZ7f$!?,M=%Ie*YL=^2e-5_CoMV$:a4c?.0j%3g(a^(.2Tl-d:'#j!(Y@s]:?$&IYJqQT[NjBYrlD^;(r;L##./k&cm6DdC)oe)dC_:udrCL,+Z%nbkP60O;k,HU[M.7BSp%mue0QKlX^fEATp+mmWup^N?jP2$i8K94*%((m(l@YDO@kC1$%9[?,utfHZINV+ZTl+HUfLKae*/f7MWt%P4uX4@Qf,><!ItiLIg&?P5!*nZ9\TA[8&Ucjh4M\C@mm/U'A0@2t#6+C7)0SZU$A8Or>:Xo5BT$#4]>bI7jk0>t\sc=g`$ZD%P(+%Urimq9SZU#+J*f!PusXp<]?+:e_]YBq*aIT"V&_&&rhF[hR,*t8F0VG&IfA"QZf)hB(+/C1`0IZ<pKtCr>X^OJ:9u5M[R_,NSP*C%bW!NJ"9H4I%$VoQ*%4203)Jc.d!Yis:/aOB(#]s\^4D][9A4gFq??A85TS>J0(:Lc:U0CJ"8/<%rHa@Ue`@Da1gk\'F_qa36N"?:%EOh-D_s!3>LLfNG>$)"\S/h\/OR1ckVhbP"aR2DbaEQ`Q#hmdHP+d]bn'-ZJ]Z"Qn'XIV_51FLj@U&(,UqNbFcoUT#Hq3diOP]65%GcM2p\.@gm3`I^6>8jr%#FVZ1U,FP>*Kp<Hf%2(U&*[&>(;%//G:4!hO$/C>SVeQ%&*[E)=Zk?t$RY/nI9T+!I9T)KCHM6J#=B/^%fWi17UjljC?/!8AA.RA@3fL*TK9/:(R<N=QL(60`@eqHQ:`mFoAG&_,eF625fPP.8coXt/%/(*P)<Q5Y.>,0daN.b;5D<um@RR:>%7<(*8k/?3^EW$Pl&+*6nJT^_:FB+<qLme!gSX`0b$)5"Jbn)IZd506Z,Xr3:]'\W/Fp:Ug5=^/,,<q3=.=MIG^HIgYLA?a8.COkL%>\9':%!?!?O37rP.`re.ojD<hWAH4:I7uXPYQkBX:\!"fJI+MX/Jn]H'0lrF\@#^P@2ZNi$nO[(eoLI:;ZfA!=j4mf`=.[]J1U_$%HZ+l0Y_\;bG'*n_L2f29W*q6:=.2(+qadH900cbq,t8XtIa7>^XW;%b0k/a!!r]`P%B++44^MrCeEgTlCs5p?ls;`12JRD=_+)[%%/)$rTAS#f0:`,1dNLJ[%-p$kb7X0/,e.68'<&%k"lXmL3>C;c>1FTt1p_bEOAiH$m]4@j+iE`b?T^]\7YlQATOkBpbG6rGfM&JTq%'/bT&UQO7_DI/J^8!=A*(/\n'e2k0O@((k(\n'aH,m/3J_hQm##-X09'Abul\)'Afr'WnB$@\86o)hK)-$5\"`mFO4*m-k5LUmMX%G-YF.:g(Y64RJ4_"a-B,`me.MF=F6U/2jBN@\cY2?"^dS"a6F:#6f:=_<:K2R%+lDV4=#ZACo4N_JIq;_OoFD7_ciK;DY)Sn9h'U%*1&%<1-/@[qr?<lDk3IkkJjKmFDdZ78a"s!L8LuLBrJ%HCDr)1U8@riBVl=5`(\T9i7lKZm0CA\9[\B3<eTE`]ubrK%ctid`,:em%',!B,1_]Gk;<(>P8r^Dp6=)T3Th34^F@Qug]?r<,l=MHCm!p,NQ`gY[GS<+*JZgYR6C9\]Z!!l3,=`%27`@9D<,CV$CT:7b9aL>i%lqM55DTd^E8M[9n9p/)5DNZ(NniV#XZV!0uO&i*HjOgH[9lfSsorcPL_Qlf,lD4,Z9%_gmdD\Hj<KTb73Z#ucKN-i*I'i??*DZt5%7`@LeLDG2&TJtTi\b5DnW@)M]7diL6I:oHF/Rt%/4#"RNg*`+?d)U(44.Bs6md0=BQ8biD8Ys&Mf_Ln4Bg\7Tjp?5'J9cb4`/o7r%lbr_*BhZV:`qD,79I=T?Pf\SqV8=6',t)reNg\D+S)k8p<EXLZ.u+jip7I%UC>2@fODP9]lF=&mNU,WA.Vd`*?<BR3Q[ZR"dDE;q%$$07iD]u1)@^[tZh^SV*[[Y#cg>3D5F4&'tebiW06T1R&eqE2CZ4+&7['M):T6Ae]k!Mt37<;nAB^Xk$i]L3lN(2AV=oBE&pMRMr%ZEiR'f%[<me&Zj9jUg$T!FFF@FeRp(ZX.DB/$ucYmA?0A;S,0;fAB$D\p!Tuek`su(/u-n(\0c,(IL&YVdB>Ela"_fA=t-\]l*`H%$<O(e!;j@EF+?DZjZ-/b@<Ho,A2&bJ%_%+F]M8kRk`q_J:\"+Li/8bTf</16pf-b%9g0;>2e7%*@P!1-'l5eHoSTY-)>Y<O&tgbR%(NOk>+pNCoge&?j]c3ES#a@1:;-@!iI3]%\9l7MP\Q4[rM!]/K.2R[2=u@jcgiQ'g-Il9W1PX\,3&@5,WFe^AE[.$QYJVfGMpmb,%&Jlg.C?1\f0KM5aqa#7XPLDk^jE.F\)d%>Z\QoYEZq#I4(JVGGJ^t:@I=#obJBhQ\F@0l"1Y>%X%#,@r@)op<c]HcLGscJ)F'?+m%lb3!t"IZX=]HXu#i"hJQ8&@(4]$i6=o16LGX*)NgaQ>e!Z/!HIpO*k>4G^1`-TDWG/DWnCK8C=[k<VS%-92UBX6@ni<>?MmYmB.\%.;m2Zmij_sigJb4\_W8^6N9Z$)ME3XAhK$KQD@-F`_08K]/2sBYtJ#+Tm^)C>%#S,V$VA/_Q[!bW@k9H^7og.e<figNr"pqZ!DT%%>e/&&fVJVXk_7EBGPd7^(gN"[&/`$T7K8*7VO4%3.Mq->GBD?$oa\PMZgXCYZ1"1WYoSd/U2j^OFOB7F@-j&"OINLJ?/L:>93pGM%a[M]VK)nYOhZN/3f/:3WMui`j>8KN4Xc":AeIGbtqEbToC22G+54IGu&8Q%1Na-=6'(dsM]O+dKmeMQVWcI-,f]JFk6?;(ARl5/W%gf(reCtqE\!ZT24V5iK5GGkY6a7,q*k"UM$E&:=D8t^G[3`Y\b-!^kCfH9UL!<%5JbnNlIQ^Hd--:Te*K2b$jb,%$ORYbdGKn8Yj%A0@*0cie3F6<P)4kGIrQ"gLrgZ`o>`YUV,c<JQaU5c4*.LbMF,K01HB@t-1i8LKjh7./lb&n@<98Z*hKlj^rg;$g29dTUgViDnO9%'[<)s6O[>MYp_>S$(HBQn<,^.`8IJnraG:oehCS&dM<<j(,be'_j>Jd;BTaUT+t5XI9&aqUT0+gqf,+[d5ub",fX/<irD*:(r7Hu%,ZTL3DDh&Q2Q<K9X?34sG9?uhP6P;]La0Nr@B4K)/a4jm2]9B;V45t"BA4FB_FR"0hPk?Q)4VSWUpFTH+I#^1+tg')H2l!>BpR7;%L],rCa<6?A77.os[-Imf)s3WDm3+'d.kt/j<rXsX8YT==7Ks`](;^nu,0J\op+]B8Eh),fDgdopDYuC$<&3)?\%2Tp(\<PZ;<&I&%PgZ[p2FYo!$npauS0F<h<Wt_VVCGX>"!]mTj302'`l0K&_:c[B<W&Z]HSMbZ7>)BDU-ckD?Y#@W!$>K$WZN)L,@DWB7eM(+h7XY(%,T(?q,^9P\L+G"=XTYCC-]u9Ea@o*3&5pA)a[ep0!:m,QV$'!ZjeD>Jq=ut(9/[Xn%(=hO6i'6=Ipcd$I%jhj??V>S.ZYC]PQV3f%9]N@=1Q=cD]D0f,i^r2eV8P^GPS+@6('4u_,"`&L('8<3\VLqS9(LJY09"Zp`[hE#"2A+E[9[;q([N$mA=5.ho9'Y@=_9Xl+ho*9%lJk-br;MO-UPlsQ2$KVnUmj*+nts',b2f$86>f2Y0a4%M2S!E.`f)>N4*/XtN#>P&G355r)2ss1L""3,RLplq_NYE5hq2J/1"acY%A.Z%nRm6;T71$b)>D+3"E6?IsZcE.-@BduY)acN/AUp'3.%37j_N79%%h>ZK#Nd(**[P6e\Xf>bqoJ03QMAe#3#O9t'2cKCqCGcf%NiG%oj1ej)^(mrkr4S/$k5$3-(?;[8k5NW7cOl\%c;2[CC[*aDWRKo7At?e&l?m/I>9a\`+7]Q8[Z,[aKqMOPRkS'=ncc'`@NT_:%T<G@qR&s:IK2j;(O#l1B^:$KR[Q`a\<c&e\FkM_hk52gthdFle7MpXN&$E&@q3.4tdlu1Yc_Z9<rs\-7bHFJBBc?OokhN!jbOB2;%o;FgElHQaE1NA)PX$:?<`?2p7^'loe7;,Diq'RogJqudEr<RlNA`(oY9dJr16Hfk<J5(^q#_)^uCtW.'pm)Qdd/^LkM:_s`O5SVs%jt4'rQa$r'R!hWG-GY'5^]$"@jEWYKD'fcJo9P2,JGfb&r?^g8:;;uS<@I,6be>B4'4=%V?[ir00]u&C>H\iPjt.17!;dB+qTE>P%Fd9u>M?a`f2ag=@bU98EMt&$Q]ur4bDAhhj4CSfY&RQ$L];MO,l9:*/pi9cASquQOT:G>"e,?G<-an];%kMEB2:uso3j@u9gZkF6%X$M.cW6b'.L*--"D"n<`7.UKo5@If/$s&#WH;NK)lC4rj'(@CP^Cp#d!P]gmc=#_BXU4_@drCusq%9[23p"/?X068Y)6<u6[@f_0%Y6OpY;&$F?(V/G5NWUFZK=Qb@:fV^8%9HOoM?0VM:3Dm`m"l\mE4ckK`tRL3@XJkH!V_HIIf4s26p-.5LK[Lha0rgo@M,(JgKV@@%,E1Zu349:9L!*j]W36BtOl*T>/WBUX/cYKi4GQan"3Y>*E3"KJg*$E$ib's*D1dtC_5=8o-P@+P2&%u"'K70LpP>]$qaQgiJaG2j%JSd"D9,Q=R?G-rKEF??Rk=YEnOl%r;?B"dj7Xi:I7RKUlO">#MHUdl;6=L/R&%s@f&)cb&P2u5Ur<@4gPY#ddFS@1RdEiQ8l#"iB%7KCJ[\VKld:U'9DUO\Im-E?(QU`MtK_@LI(Wk1eg!;<$>,c]K6C_,nDN-qiUXlDmiF2CHTC]$,G6#JD4_]$-r3)H6`aR<CN^Cdar%6>fo6<Y,N%'#pW*A`apV2hQ+KcYF'C/oCmR;!2rh@V;o.(%Y?DTSDH<Pr2DD=FFSH<Rq9m(u&1,COjq?[RYSn]GY6+CgrcEb`+&p%*;C2Rn,jmsNq=cD"ar;Jc<t2''Ckh&IU2W_l39cg5cT'<pX-Xllqr)C=@Gr$pW'qbb[;Ia@J%f;bdI`7(,(WIH&LCO7"$eq1Y<c?%R:BpLFJ(gVQUt$qO)/:4bMS-?=P/Uf-;aTTp2hi*$r:9OIL[G@TcH7//Yo+!Ht3A'/1al:@1W.M%m#\^Nup1tc.iLoNSfcuI*q]3%U;h+?!P[c%AWc;'"0$_K")f;>I[;6nr%8]@MnTS<pUZ90aB/%Y!O8[(VW;(6hZ_LZqO;MP?#P#1<Y2=sDp%HII9T9ZpMCYQDa(,d%ku'u]^DNrT+1JjI7blIPaGhQ>)q9&t`kpA@:"7g.gJ;Y)F8pkmF>`_o"0n^eCEV3TB>4T5X,>Y1ZtZ'(VhfJ/;P%glZ7XD3h-h<3%#Q:sb)o%tXn\&S[N`DjR\$f,jZl4#uJtP-E;e2d7&F,_3>I::Ig-)Ddl5DUbB\tOX#0)$lCWFVsX0!*%qekeKs,@glSF:4E"<Fpd%M@OgP("MgSC`+PpTpAQ=Vu,C8.EN+-/R=V%l&M,BeWDrL()N96?emt5A^H?@']YTN03spcFhN=dL0h++c)4)=IcB+XMdlStJsnU+%Gtmh,5X36f#.;#;;l$&F:Y!^"h8B[J.O4s=Eo[anre]]A`L#2d`#mG*\ATK;r1JI%+eg3r)+O,N42;T.S.O24hZ2i+#"3cj5pq>-%jDg#-7/A:h3['sPM0K8.8FQoQ?HB!dM^kOt2jXB<>5"8\X<$PW./sLZj10A,</>pJ@lrQ1VWrLe77HjH$d+nsDZHAU[qt.Z8/ILJ%DpF(2\I*dWr:Y%!"N!quQV\e"6+.k,r$qJQnUlKZZM7GhbMia5IluuFIsR(V(TJ]C#l*H%P.mWCgA"eoh[^&G$et$*[?,3J7?[og%r[@%\aS;Nd$=s'3e5IC[F;Nm>)1Oc*`])tCg_WBV;+7=6?5432pnM"B<03kV+Qe_7-BRmj,nl+2UPT:FrLjT/=3sInc]JN%rR&Od%HC`Fl'AAE?IA#./?/Gmmr]2IpT0fS7]%/NjqP.j*D^U0knP_^&+'fnkh$fn5p5)jeG2+.qgm7pmb6ir5^sFEZ\<)Ep%IC&U\/HMA%jG@j-%i[!f0M=^`1UPln3!Kenm.X_[2%+&ITf)`W&_TJ9D`OS]WS`+g1:8mpd.toQhNZkFO]=:mHhg>QK'r9[%RtpTS'AV<VFTII%U;?XT#lPG&l4Y?3`1H9bn+`NaH.0t"f#oD?iQLe%+6/h5lPl>H)^"VRQ1IMO[T3:sIAlIE%9;Y0Hd'g[3J?<%L5R\nK)Wu@TG6nT%3H/CEQ!r;h1*fXXo$54r;cQ.\aMP63[WrV%Dj01kA_lj%Tea=m6N4'lkX*@_4@USaKKR*)f-XB]N_]<T&KsrSG2:5)D,\2skM'hL%EmX@#L+r`YIl;^8BR$Bi,".&GU"K,?:smUdNsDA-1'TGg&F*o[a+L47p>),JlR,'"'1,"UA<uA"6af31j&;]8%EX&S8OpY2AT'9q%$Z&]R.G"`7c^$JEh?W:o:49d[\&^T&dK*\HVcq`b7F%ln[iNS^n7_d/UV<GZ^+N[BV>&9%h\-E(2tHg0?'jD/?Zlj3IPDb14+:=0%f?c0X8$;0dn*Ft0\)+ZTg%7[-klNZprXttk0!$Yh!])lQ-UrYle8-dSF/*2(0acu6p8tM?ad)3s-gF)!-?oc$FN@5d"aSm==7NtD%pr[n/>f%W6^0%N7\[m@:Md[,()lO1/Kbp1`<"5[g^oP7<3\_!&Jrr/A:b-9@U-PlUQ7#MXEl9@;aK$u&fqJ90otg-dPVS%dG[_B.%79.;[#Q"9B/Sl)d8B'eSMt'4bm?>?&YZ<M?j?iCM_"qf3*8OS;&+/e3**:KSL^^h_H>"B%Sk.t[kNE2hDcK&]!FgmeS6Zc4;?8k6%TV^beF_RC>("=)ZQ?IAk-%RRH&F8VP-T^>R@TC7EMq&agEXd#gi&&qnm3dW55=KN0lE3'6jP$XZj$TsM\(HE%=ZJk_+X37RbU5eh%5=_:N'=kK-VN*NDMCE"'Y).)OZ"?[(6MT#8'%p<e#\pDd6UP]bDqLgllRr?0/fhp[^_G.ab^biQg;S9+hcc`l061E7e/%bMOQX3;%[O]d-fqSHZ"K`J8eFrl\$i1Ba=!Ci/^@\P)W3MVD(:g[TUa]dNHAE<H[4e=)C0\@^/TO'?b85shfHW+IjCY(+_DX+QPU$Hjgt6*,%DTROtraD28c+oX02t%!@Hio1E`\Cl^INrYAUIB(f=,[pj`(1>cb@m$-iBN/XRbc2QOVff^Z)uR6_;[+7C.-njJ(&;-(cLrA<Rc`a%PE@)^=@[f7U'r-K=;EiJOWETT'1T:"1Y<cB*uOekC_-FSX9\Dm='lP(KAE]E'(@CP^Ojl5JWV&O!8a`J)#4cERKDjQ.XhT^']?I%%ib't9gEWJN*>*>P(os)*`1"2UbVm]HNpS02S-)K,?t6qSkgtHLESWk@[,>2*U<GXP6lF%IgdRWH5SrOq;XEGZZc8ZC?.?CPFKHrN%%5GS-04>lZaeeMmB2u'gH(PB/Wl`U#Y,uu"fVPc*ZiWTKaofShU@5l1/GaXJ(jg(JC`[kZe*`UTLYZc6LsE6ZeJhldDJ+cUYrgeP%/M[,H,);aQFgnDVg;u(\(ggbGj)Siea)GF>ai3l[$fbRm[Y>qP7TLoRj:'-E$o0QC8%HHrq0!Aq9oLW%DQo>`JPdR%N!eZra\Lr`%&4@UL*W[O@Q!<<?Qq%,_FTjckN:9nn#`s_\)pXBf=a146]ZGNGN*KP2#a"7RGS6*o>BgdB-sX&GC\"7E0@@@AM:P]"<Rf(gPK]*6%S\\'1J!&C`'T7u"r2N2@&U"duIN:mMd:%^!KQqHWj=->hFYkS(#_,WG"^+,Dl$Ea]_QP.%<Q@/o"_,?n_2akSnb?/s(4J!JIpm]f%B71KtL7:PCBc-\-S/12M_[3b.N-gs'$5.qq=i5m_J)8/h93.!<d6FVla9?#_l%PkH%eGCKJ'ohrr(B%H./[lH/JS2h0pXFlL3Y:L%)<S&#B'fL<;J#?g&H%NnU^X5*3drN=If4;JGHK[)dQc8A"gYm?p*_[^bAi*)J""=mp0OM).T#aVAJFQ$Hd_oX[h\RAqX%=3Ek-S8%TDW'1*c,U5LLi<9PC&a"@1/[>M.0m"$9?J4YQ_d8.[9j0-AMq$YYc(b90,SUDj/V$="c!B0ph2XFXX+a]ql:Z1oaCF)hht=V%@3W%`%?],qdD"6_+"`8WUFJSQA&&3Ic%t@WUuP:(RM'`krnQ0G]t&p19OK\$KhbCYYe*GXo"I!W59G]*I#aM3cJ?Zpuol0DSB^r6W)Wl%UiERUMGRX+S1<m@:uBk5/Z<dh'kUi`$`G`])k0,F1.gu9_$k,g&@KS-;=rV#qN?;#]>UQ'DLT'C0<HPt]>4bhCb-=8S]2FD@0EI<%VH+RR0)]f$GFcAs9Y`Ir<N?'Pqp*G[QDR:I58Kgtqld8-<N,r<Ua`n'!"AI#KmT^PO]@j"-`ri&k$M9G.`:+RQ)cbA%_]9n'ZdIM%o<56H[EBIj2c*@SdLSDh]Cj'9%Za<9690.C9WPCOefiKlkN37"\$jgZbATn#%p;pdrK;?]TjM]\C.!IiZ`aZOgWfu.,$14]ASnR`%ggl\Q[/6St9haPGSa\/fU-sX;KW,15:1I7A(PkYMC@L`";.g]$eQntD!D),M2<u%)i7r&%#B56_FYd]MmkjG<m?UBGBu%F2\2Q7S%G8`DrG0;&hm>uM7*J7&DiApVKeo(:m?m0AYc5?'2BM$JdQkg/!S]3=Y-2EE,e[J&]bT75U?K7*pi8?W&!&g3ljkoW%J?G8'\:"i)%Af@be`f$_1o5eTE`,0;@/#U5T'6+R:[TRAHD(l8,',-2K/`S_<?kT>T;1n&0nN^iClunNJ;uG(J$.IY.(&:U5h.a)!)rIV!cVNBf%O;a(p`YY\l.#dY](X)<e,2#S3]=>Ni-S<#kI\/Zu2[4%hc/%UZW?o/2@V`TZ27e32)PJ)P[^:cJqL6Qkg7$)gHGSXW3-Sf;)IhSg%>kf5n4(XaqgV%[DeTE#Q("Eb0#Nm8ao^L?_coTscAM7q,XPa**?j`4cj21"_a\`LGE:<9]?5S)@fdrMBjd!A1qKoMV0ElC`c3;SN%dtGVFW%?u*`pIgXr@)JtWc@pK0E-!=0PXBuo_aqf^X;YZl/U1_;po]ak9h9c(NuQ;\7Ti/IPs)k!P>NcmfFsg6h;%sgXuFQM-L[U%$27tP5ef_thn%;8PA\SP"1_^5$T@jVhsq7IIrm`$<qQ]g5I$2k\pd]Q&7%N$H@sUM3Wo!W([S_[.#Ajh.*4Q@4d8?o4d>"JSkpB*%Z-T_g_qA[*eC\E%e96r\)q\d@`/=C"Eka6I8;OTsh#B[K-mE-8Tn&M*0HF'+!Xo\C*),4MKeXd'I9XW"0-E.GD%SY,1qebb(AQ1*%/dWW5MVRW<`cMsgG83"/2^>r1"mT+S%*")/9]k3QDAP5dH6W8"TO/4qG0nFh(HV`4FL^WFo_Q?AC?,%uW#)8-c;:^Gn&J6X*>No;%2hNi`MVke!*PZ;)]=J#@"$g2ja9qL41uB&4AMFBgn\^i807J-ZmU\(-gOm<HHYoHQOhDhRfg1?mAFBc#?o7M<$2<EZ1#ZFC6Vu;c%K%_h4a:_r2/nVHB@%:<X(fEKb#KBS:N$613IUETa`4-]op%lJFmi?1rTj@pH2k2E'"2-lPEl7)[%.sD3a:0A7gu;p"El0:G8aHl*%i(J]b?erLf9]uQ!%-O;"8?WP_bRDM<98rA&`QV_#L/C1@Ql57LTNrC%0/4,0(-dF+o[7..[p>F-UV/3HG(LPIMFh?rHOWGb"sZ-\%OW5_&-lW*'Wn83U%+/Auq&/N-d9[[c)=.bT:H%@e?tTajZ8')uA%;J<*=mmQ=\-C&K_FhJ+beW[O>ZBs+.,C^JTYes+'<RVFck^)%@^6R`N:[Oe-c$$G>^\^Dkj1?bp_bV_s.&ijX$M.cW/pkdZjlOM2T=!M9^?)jjQ\O8*B*UaJ:9YKq^F<alnrp7AAqY^je-j[H$pA8%7j']Ga"!F^!i:!hcnJ0$++l!gL+q!UAeNE-lur'l7.>bmTK^]JV";EG0hj\NK:V75dPU39%!JLp=]fk?--ZOEeY'W4h+O1ci0OLo%5+U$:c?)&SA(DHKS`t/1G,EGcfU:#t@3_`>9]qTdP<F;$SmMg!q/ee.oDFL.WPQMkYH>-GSf1<#KQ3S%/-kjuTY;2kf7Wo^^D?<S%RL9>kr0lc"_*#K0\R7,;YA(-PlN+aAnEU+imeD2W%fM_in$qAOE_],a?PYGS.Z#'u_JHO#>VGIjW)K(c'<&$sfLMKL*!o#if_X;]%&r6VbW,%c=MqWj;qLI9<M:jqVO2`E]QoY[gl6L-0'_YC:b!uM1,.>3%ZaFZ29H_JWZtdciNY09!Zk6n>cWO>&*!o#uOT*iX&?Ys@%#t3OO8K_adnsMa",;&]2A24uS2(W@WMm2%-^:kH]&cDLK@_>iU9s3Z50rDEJC]`rnnEV`[aW-OV5n#I=QAA7cr<RlNA[&/7]Q(\t%LtT7*CcqD9q"9uXjg]s?-D?*N0`./l9n<0JIf3j7P0D29\CWXSlrtYl!VRc5op<KAQ+FVE35j$F+uTJq,P^qu_2ud[>RMHZjt.17%!;dB+qTE>)D=Jsf(q]ggCcqD9q"9umW%$e->VW*%4CAh25D!6lI:D=_*=57;p-3""?p::L\N.@XQ2>TGq73)IlhL?5rV2;@<:bN#%'$Q?I*ZO6.4K!LGWW=L)#n-@+RU7'&(/Sdq6JX49fDHc(>JREGr(b@J@DUrG)bl1.>^\eSo>3W)m^Jt'#Q/s-k'W5?h['":JDUY-%NC1:*1!e0Z8dskX9keVVk4q_cEX_++c%+[[peB'f>t<:@9BW!Z+c][9IWc5^<p;YXA\%q<pJD>Yh2YF<`i&^pFSeq-DTD#8@m6`a%kbho_Nmi:'H85/UkEPm8:Zj#0$d4!pV]8M@[bd5NEnSdWPQQ@pi9.S$S4^T#plV.?^sD42$q>\g"&dVKR)]k<d6)q>[fK%OnO/hd%'BQ<J@iIZtleo8WE:@NZec61$7L]j#S9;3FNdfQ!nEBT'-O&W]7e%UO/B+[^b=DBo.CHLnr`S'n`V/g]\Vs<:-M]fTcTb(GZ[pG]%l8]<Oi5o[S7AnmC=K3`hC3CBT*]hhH)0__oQt(hScjn8sbEj*F_Ap+6R;!nin]R8_qA+6HI6$2>T<M85q-^A>gPfQL25otC_*1st%hl2358h/05X0<ZSobi_d%*!j8YZ$7HF4(%IfVua53GY]8N;RWuc<9bb@,trSnhXAYl5Qn?EYLt0]nRr%%h$K/M\M95J``ur`tP@B%.Hc!k%1cmh4a#JA(A;2#b1VU1#4(\+AHrIkNhT*M55/]"[X!KRD7M@p&34U"R%002D(r7>7e%EdR%JSBO(f;:Fl()#dqF8;(_+ap%gKZor>/N#;.Z2q%fP,;R0\!R;N,keorIL*'_.[d_(oB[u$q>kjHH4\Q4!N`4KJd0D9eeHV*nBm7=;[GDCldrdGHHR])6cG!RuYl(%,<LNhe5nRoEWF/h.s\\DN5c*`IQ\PD@]_3U;&!"]=62oOE.a6#<g.S(Ccl*G\]'e(s6ui+jVAq3]TS;Lpg?FR"?r2"`H\C"m-ua`%s/'f?6i=V:pH[ptL;@-'f@(e5--KL$A$KQhZG!$7:tR\IIK0i'ie,'HZ;L=#HlX)EOAO6JHV>,nig?C#Sb6]TGT!TWZA(7Qj'R$#%V'O[_<r(@@=]NruRS`)n`_Ssq)is>_?M#g!LbV?k_Y0'DqB4:o'R^OMhZY*pa]>`r<Yrcgc0T@`=c3(1g^T"\AF'BR->MnfB)G=U%<^pi9+1qGE#H2cB@m>/&!5",X<E5Z6H02EYW*?7dT72%Ijt_B@m_$(=3T[Oc[YS76-OdNm[u3ItT3r0<&aK-oJ"IU)(Win`92^9>%9(bbSP9pntZU#;R)]CPW7V4R#31[BI',d56)3)g")H!]9q!tW.fA'J12BRnH9"CHumgFKuj_r^#&,h1(pK2$fk(T?YqRKKLB8G3W%kb:l8'ZiH#h]dg#Xq\rSOn(9r<MEA,+.u66aUhHEimQ10W`0:k*t5R)<^]N,W*^3pWFmZ::U-YrL!_(P@lOhk;1ULAO-98P5:TJV%\rCb*'KaCp:[H:T15':ej5gU[Hn^u._AL.r>onJ%ct2QqFKPV:Ke]fe>mD6qq5&Z__iF.jgg"c[A'C)%AehV_6D8G%2HhS3jrB,+%?XHBQ8DpTbN$M6N7oEE%f)ckR(ME]N^J@l.CnN79\Cp)Q>bP@>g<&Y2W=Njo$8U.l>9?FbB\-4BBf9mV3G&(S-5bkQq\ofs+.:p$%Ctu(0);6ns;[[(kW/lsM'TI=#<LDeeo""lF(WNPnDbUeoLR-tX(aI".0'jVF\e/skRhqC>$;hh1Z+S_dehfE1WXjjN4@[o2[`;-G%+fCC(mP=$[=Zp<gd8dm%-d:ji([UEEjqAe>DP<+/_nLb;KCOs+I>m0;(Uj-6']5pti%ubiAnYCLGj491fhBh%;uJf!kI$6&b'g78%LujN(?J(:j^\EX)"S6nYLMbDT9I?<4fZk2BK,GK2ZO(HE>(^cXV(lZPhm%;\#j5,6\<`5X(L(fF<704.D@+F2lRm'9Go*+.!Lg_3%g6O2H\7M.h2`E-gAldB)k$Un_7Z'r1c7H%P.m[d+kesQ=)6"#u^`$,U=#IYCjLX5;7))A[C9Mqp<df;V%++W^O,=*T*`d:POlXq5%NmFS@_fPoR*s_p.0"-#09roSkh86V"In-lYfVSl;Tg:$_4II^-kW;'MT:0>Nf`IQ00fKC!b(cB'*BJDSai<36-G"iOK!gLq(d4/Y%G$uE!Yrcptr,nu#O<+gs7Jqf2p:0g`5]3faqsKr!r8TGk/&pm+P44p2qI<sqI1>e&jbA-H01Hg4Co7H"Wj^kmH=W[Oa@'lm")asM%P2:`=@@*2o%Cabm>Goi03D>9P(8_3sPEg!"3Z^4l'%Z$Mc)4[ZMeRj4-RcG_J_6en[Gc`6bKSKaJ_8+P4'<<I($3Q;HF9`5(,A_:%gKjc(F"$FJoF$VbWGW6h$R_[oe7"WGH>[pa\XmhSk-2ue]kj]sfhMUuoWh]sW0Xl1]+Hp6l+NHj\ZHpj(okDBHH[H=5UU_%$cClr%E+`@C8%89EK2W#^ILG-39pRIg8/Tl_$qus@/8<HiRB0nZlKG@2&^Sr/4^$!.+1%>C3'fi?ZD(4nnt]#2HnM*VN3ge\@07T"K:NJj%SN4QA(h^(B@a$B3;uKk7%LZ6KU+dTN&>j0)do"(lP1]:[Ws>-lD+B$@G:![7&Z$:`A%S*YChbpR=4i_'O,&1J[uZ=D#Fhf0kPi-D%oVu`1]BMj"VX/m"*<5(8"=I^cqo!Y=6%7]<>3rHdZgnkeY1oa1go'cH+X-Pl5DgXqYYBoU$#\CfR!XXWG7E-Z;q"`(NZrNF>O:E-%!`")+I'gm="?+mo]K\+s"@`Xad=5P7=#Z4;)8F`:3I]L-Er>W0j:"Lu*(EU.N57D);8\J8bR1GFMo3"Eie(BbYFf-&E!(LdL.?,C%F)^3K1Mg<",s#.J*muq;ef'+b`pKpPp(&DT2QHsUic[0s[oS@A(UpoZ05dm(QejF^Z-j(,#rX<n86TAE]9";jXKEd^F_)MR,hT3L%:H7RYRQcfWfW>#rIr#Vtfn%C+nm:p&2k,pqX'8BPNst5tA8os,pL`++/iYU'Bs/N38J1Z12r"()=1]P!lI51Uc_[dfCIcID"G$7=%Drh(+l"]=9;2pqtk^"dgA5l)RHrZF?POQ1IXsNm/6!u"7;),53hRG"+d"9EUMIX0HeV\4b(1h'h_'JN5!Cm5R8W&-li$D51MX_<?%#K:ooVh8HkK\4Zu&bEV3?JcCck`U`^krQmW]H0OEk8<S/#@W#t@@^[_jA4&[:fu<]@8L(X;.<@.^XND/l[)>I'\9[H%X[T`j@^k\%;sY_Wh5=DnV@I8:%e*W^iJ_um::')uQthY-4-XeYm4r'ASQ[sQ32\Mkjp<R'>ORU7jQUd'GWI_RkG*,X#Mf]ON&_HaWUA?BH18cq%UZ;$[5>L-qioE,ueYLiM]QKO\K(WeYT"Kuni=+UChSl&Tmnk\O,.nBk8r/moNe5ll6B*]5<$1b]:JuV&,'<0DW0hjSWtHm;p#3d/%P.*GC:G\\SIhaumgubth18mI\TP8:b_IT&':7OnH5g9^[brbX@rT3@]2J)-V(rHY+(V2qZ0SXKaD&GD))&OJ%(&PYn9<b93/KO;%%2;5]7p!'n&9NfGV!mQ^&+>O>f1\'rHW,%_PP'=LOl:PCGC,DBlcIHSlH(F7<[efU<[EK"aNQ.5"\f/gE06B&i>i+bG9SStE\rMdr%#g^Gi:`3%G;N4_&?/00/cP'@/d8]R8\9!8=Jne9@n'.t(+$O+#?/&gs7D2=$5%-W4qY.++a/V1Uo`%">5i1,$;V05f>E))0]sQ<,%%<uaU.-d;RL2*e#]XH?m.FubG9CTcYi9b4%*W+u"@hI\EXi_Vs!cMUViT72]%Pt(l:\Lp7o=*W"1rRE';g<SgDT:bWAZSFVpUA<!%`.Z3m&H&?b.(m8oL9!gc2tpfD-cr]oek[5%1G]tS=lCC(9=g`/cs%NWKYf6Ea+YSmSo:]TKt"S7#5DT)cVU<8OAon(SYSRklP((G%o%F>4_L#O!kq!X!*N/bP=BMnE)lSaga&lFse43k9k#pf:=2qPXn%<t=@n1*5J?.sNW3</6a(R]UNh29c3aFqofD>cR[Op8rqtZFT%&"QKTa,]"+gKNJA+5'W)^>jBZllnr4a"D[<-N5CG43[?pU_S8:bcCXZfT10%1p@Xo4;p71hu4$Y<R[RkXIF?a.(lBVf3n'B$,%bp%Y@s3I"j].9@n5"s&]JUSYNfj`3HECC,s^@<\387jg.1VPWYX"dZ>/%=&+X#2Gnr79/1*Q`Wngs6'7P5(XQ(JsEP91=km(Aa($Ps+%GEI>Blj^Nk(4B8q5aJ&<9DUVjOe<p2qgpG^7:2NZOCe.i"-&37@Yu'?Ua[rEp<OG\K\GYM`;Z1!L,"-ano@'hnM4.UI?g9COSIKU%7d%%)'34qOUlO1gUDR(>I=KE:eD#oUS!OO(Ggk'&;XV9p`V@L@qk2Z"m>!t'(8LgXd)!S<hkG`E^>F+-F73XE$djk(iEB?.&$&.U%#I#i<`mp3b03?39Qc[bic,`D;I!-)sQY;T)^h#4ro^_%0$sXY12k:sR0_ud\1Xar2iA6o2>X[f+Mr!GP$+TbQMmsX`h"Z;U\/C63%^&74sg^GO5hKO=\X69ka>;&K;'g%&ik8:m8`Qhk%a5POdc=$4!7LqGgnet1cdB?)`e*57Ho$o'TLL(J3-?@&9]QuS/]>tkKj:"Lu%*6qjV%(=uO%754Xjl7bHR)-5crt`+^PBBOFq8e]%XP=4^iaabuUr;CmFC>I:Arr0Ac7jp*\VJJWLiP;JQ9igCLpH&1<A^5UKfeqm%_*3K29!TnTKUk+[9!V$tKJ@)U@%THp<_<M7!tk?&"L\l]!YHlaT'GT$'7h`/S:iU(LmX#s1>!HJoO+gc';]4nZGTk3I$@O6_5.>t%UQgWF/iD9!7C=fZI=n(f<$dq\-'LRON:JI?6n-eO"8.&eKIRl+N']&:"=tGWN']%o"T0+IA.[)T,P8/b'>%d/s-.1'Et>[OWpZGs%Y,\hl_?W_KNg%eg[4q@%)*(esF.@V=X^Ya89<r9=2IPN-9=!fg2Xh=U>E[*?!T53r\"mn$4FkN^!8q6nEWQ4hB-$ZHURcQ"Z]:+!%hid-D_hA%'R)]m%XJ;A0oWsR,f($lB,LCN7T00Cco`n==3^09e9>1lWfu3Xf3-^f%IfO,CGfdFn)!hYD0DQA,K7*t"Q[F]*Z(n$=%<X(YVBB9iS3eI9fN?C+2aXIC`nkjMVr?Z*saiF,T&tiSBk'lUd`oQKR#'jSH=U^\/lsn]rGUYqqX-.mkQ\Dt<1YHDd.J_3;p0sVa%M>K6!k>qb752XQ#4?o#6J=+[W;K<-lJC!sfZ:P@10[J&j#-_3+TBGD/]p.mT]p.<)RGd\MPh^o5i:FXHgk4kLo=^ANJpHYQ]p(V\%IQlX^aZeTTahpgRTC&K9Gn^?idnKk8k,%-a:.q5>V<$l#q$\pQ>Y!0Pr,QCo.HU-<^)S"s9"Fke05$$+;D(0YbC(',:1o<J-rJr9%6Ht#UFGJ&qpI=X;`l5c$(+\Ao'NY:f-QDF^p;sA.cDRfEoL+K5T:A#`ocJ5r<ocBUQgMGe(m\`RB]Z(P/mPr^`Z!&X<i?pP0[j-t%^Ug]1cYREDPcf-MNSW$tBds\Kd#FH*!jRa?fWT2Pr,\@;`:d?Sd6tu5Rmmakbp7$B.a0f9kc\mj2rd-/[HlOO5C+8hDk#;bZ`PNg%=t@h*QKYMjmJZ4VG28]I<t*kSC\t`oR'm($/_ue.-P5%TNW&]3VE_PLbP(5@n+-*9emu+cDT(>kc905]f%;'W>nM*f\^fdM#f?J2%bAqsmItfehGPO+ADG='D`Er3,b0`1gD4B5=/@H%*l,#k6&[4@Qf+_^ZJmX"U@^tI_lIqCF%%fUh'4F+W?[l3P(EM=&0csle/J/q_%r<RlNAMN"qGN8Cf&CXi-2?ELrq"9ui$9cD[55#JK#d\H+fQcaQnEV`[<Sa=5E=kQkRC>S#!piGHl`WPC(>M_*@HK-RRfN<tr;+TE%7CO-M>fI=`p+6jqO8T?5rFN3,>OT/%r9^`p1N/-&"PAdnf3\_T\s3$X/dL&*,9@p'&cDLK@W[-FDQLPN,c8%=C]`rnnE[8RN40d-%oi6\8/J/q_rSWM\l\Y_TC@fG4Zi3-SC^9I$loq]BSslg^q^Clrh'\NRM0Meials9ph<q%&fJ9XY@"(AtIJ[h&f\)tmCK#B%SY,h/%/]d??cS#J"Eki3_Q;>`rK;mrGoDE!2q8>B[Qs)%A!e)HR<s!gsi)e^rGJfR)^mkCUW4!5<HD(Ds3<s_FI5h(R%a=OF!P]QBCI^+P%f%^[I!O6gnJFi.+@csh/!N1A\"&@ZllG::)-`8#EqX-?9@*F\,(ei!/3/rI;3&utKdg/G>#hCX^U>-#l4"rnIB<[?>?ma0,-(=qM%l1p=^oA^"0T:"ZZ$P#BU`t)$a#Nke)Y3c<Q:Y7>_q:u(d45b>[0osDa"*:4YO_l1Bnj=L]D$T2M,\#L<bk"I.^D-0!R\'[sq4%K'%9CMTgh.D1c0)gO=*l*uak@>SnTR)R6&l:0?C@UoSM1%Gc2]5))S4YIMN^p+AV/Q:dJTsr_jAZ4V24+A$@+Bi8ciRrg3kl7,G@5lO%[X_]mppGWZ&,>g*!q_"M%jjOPq"8"rGkq8,YfI&-!e)BP2ZeFQi&?6B56?9Y)"f-32hReg"+E%nV_d6i"+E&a2Zm@.[BCtT`4UQ\%g=MO:@ZK=QN=5#mr$H<srPUh545b;fr9f)BE$e[!>![RS0$HE8GPep);nt'^\N3[)0*V8O^b5lhJn)VZ(%DY>NWfi`qo%8p?i]"1%k2n/2j?><E0*hE,A&/S6"Z&+RbhuSW9>E2?(/1pV\S#k4R/S(RceqnZCVVS_(,0Lk'-k9Z;gU<8mLpg0@YgKM`0./3rj\S&$0l:l%I4)d:!qb%+EX)-er?uFO)JnlI#0FTRTA;jdW2dJ-4K!05"&?aR1.GH"m>#$Hf$2:I:TV1+3"q+mUSpb!YZ+DopkhgA1Z2dR$O.iV%!\LoB//X>q%*%gUYS,GeKDJbJh[&Kl58XVr%KK!_!7Cqa0b9qKF`:SQO*;HfOhj!rM&@V%_31kF.#FT+^<G!??l\,0'0fnFj1+09%O`V?pk6$@!+"mT,bR)*njC^1;H`oKEN/EDs\S\-Ucc!N@QT5NmN-hG<a:)-FYGaM3B/!J1hE5Z>.b`>\k,gpLr!^$c=VNeP'_b/M%V;rFF])BS@8CqG:(G<;4RI)[_^s6E!kk8Vse&3ZH:CPb0@%P:r]3G$X?VTm+cTU=T5-[9AR<LhLXR8iPRlh@[4cR%OES0kJn:?]A%LGKGD$$d@$"7,BNiR^N$j/o,s+YuN'B5gNQX@'qSMf!W_(\`1#qL/Ob1@dm^#1hU5hhnG.XRF#i5h9#0W[K*qAR]?/S^lb"'lB-=%6gO0ASqMUFS^hLSjOe8;n@Gt&BStU5UL+N'h;Zo._Z=91&ju)g&b@c4c2CocGBYjE0AVtRU?Io4g*7JqDB9;ELr4?'J"pm&$5h$t%YjJKAG2B]1%Fk<E$$N.Q;oSTUr4T-j;cCUWca:RWDT77)RnBEt&%'7B&:X9rHgk*69J7FZ0#di;:9W^H]$g&,I7ap]]:1csCXi6"%bX]\CVB(&.2nb_*5=:+QrT\pE?;>cq`ucsFO8#df7VTW<#:T!.M!2de]=[B]:t?_7-P\oLn"caDeEbTe%1N_<qErN'/ndF;$MdWX%QpUdOP:5Kf<DOcfWqm&1jL'p7E))b%ITnBWZ%m_!/q"r-JeA^u,f\T@TVP0GV3Z!n,KTUNP/e"65gl7HLqBIRl@pRVP-&Zoe+.oS%S53=-)02(NEo%AkP?'o&gneiQg\e@ZDt>bX$)IDs1u-..+]D8<6*sF"_N2AtXsb5_T)jC`c^1mqaCM.p]R#d0M.:J]WG.m<YP3%(%gFnp:f6?bM-W4#q9^q<c?4cUiR3**l3#<^rVkK]P+?&R>hf58FckA6$M(.HtU[HRkD\Frmq6Ib`g#^EVp1:^B2Y>aj?bSJZ"SlB<%Y_c5$=`RSqLn?O7)0qPdEP&H!r9(_NRi!BD(\Z.s]OSDa6gq;b<k@D":deb+@m#03FEl0H^sK]p76a)fcW\^6H3\Zl(Ye;D*%E]8%/i/@%_D].]ILu1=]0#dRnWSb'6.F4c*oD@_r\%Uh[[GJ?j%Xj"9-O>uM(XM[?^P(D-(FtXRmek_'X*lIJce9c!le'LU>nk_!MF,2%@OPQF5alWl-qSgg78T+KQ>cgP=Tbom7=HkVL5XWO*K4&,g'tB-Ol5_`ig%3M,T)2-'qmPrY;FH1(kYHpRI<S=o_2_NdDb.R"62S2%(O:db)<r>8qaGiXA+5BL`?tlYH#Dp56/$f@5?U8/$V$P!#c.E6(5KU?N+s+58Gi(c^O=5Sg]$mm=)[ujmEg"1hnJ0O%R:?kIbdL+%7d*k>;$k*gc2(aCn5O!u=P3?/OoWa?]o#>DBU2Wrjs:<k6.iAQ'nNSrX#_6;I]]=FH,!D)"PAEDeLZ<b^TOceF.6OCot</c8fGoM%oi,OU8IXa^')s^d4]P]&6i*CT-=5UNm8YBp;12Gk=b^$cLOHuc2tR0)pJm2\7eftTH]7Hp42klBHsbu`08]4IPmIU-Di:^N)]@U9%[H;%6r9G%1K_\X8Tc"dK3n4<<oW)(I1\CWGPDPEN\4GVuhO3'"?$qL:9APmmZ)4@af0hOAb9tkZ5PHclN9[`?7:#fo&Gn\s?N"s:%3hIq^B!C%?<ue^/\3]VnD(=Pb[R9PnI8n;T.73O54UiX?r?;gNp"c;2Z!S;V^E!L)pt3sqg#%f>aSpAT26l0iD&W"V9]&a.q5,mm%NS^G6a6;Z%jqZ/DG5ac<AEPDe"*Qjq%qOjOf-4*On8=P8"mK2Vp];E>m#'<#_K"\S@DJs`N:JbT@E)`kXI+t;1Fm7\@DJt[N:JbT%FbX>WXQVagcarqh/8Y$8($52X*Z;t*Zbbu.5I1f1R"ES+o`k2Z4Y=P]N/_aGpR/]L_ZXfLd"2@MfkVJbBD1D,Bg4PkjaM)r]9fnJ%rcSYge,GZM7bn%j%<QT@rRXRhN:f!T9S*/o83Mp\1X].:+i)/q"il-pbUPRQ(a6!="@,gYDUfB_$4O\2q$Me),8KcI8]m%sU;)gD%H*sH16OQ;3,H;N8r^N\8&H.UPMa(DX\NmqhU3(sNDaa!pS$*FKMimTcPmXl`ORnBmoD(\G!of?95fu"jMZP@-4aRkKpc>o9m+iu4%!N-VPR"hVe[n:^L.RaRh[N$37Erb5PPNJN=OEAA[k]kXR3VX=kHHcJq5hBoaOp..XF5SUrop^SJJYe^Rf)e[]3TLt.H/E[^J`(I,%b.ME9*2s;KIrk8E7?cki?6K.:+C?8eS)\t^;AHDt\l8k"%S6RgbtoPY)g0)f^NDaGKh[-ZDq#_[$6Z<6$A<mY9?N?b`Vbm6(:FsP%^JWAmM#ORnVa0l5MOjmsh^F-b7":sk.PU?1"]L!9%kSL!TJW[K!kI3e[!3+X<*ug6TE!*dK5K=S_81uD.+p(F"@a8a7GTH\.S^+9%\Q:F5pF\V<R3u2\Q&hfVbqIcHW-i-(:_"@S-8mEUoW6F9)s(bHV&X&nU&?pmep9u7$`cmRrnf,BlRh3M`cm+Ki7.r$ek2\eY"=aY%(jN^$d\r`f/]#n:rtke!/o7#12ThIQ1uX_N?gX<tLB6\j.rE%aoI>k'7S@*&qh6Z;i\4asrfu&A=U$AC^T\eZ@g1dPC&R-&W!fAG%JrQT!<rue^17@&(*L1'Of-6+Z]9K1":"2e=:bDI-p0UPN>)b7,okbq-2MOgKYfoP$Y+`-L<>pFrJQ0488t`+>!nU`57LC^X]Va,E%_CE5cAME.=Q,^%/B`[(F[gKA^2OT9Hr$rYodNqlD^=l#9r94hDlXB09['J#iCmgfa?&$q5pX3fuL(,#(3K%SR2Cf[9Hbe!3N>7h?%*AY"m@i6dN4(-.VRRDhi?nJOc"l'aYX0D`4;^TWRihe%AG,5XMU0jI30OQ!M"q8\#]B!:K?>C@J*]UPG*C48?DohEYm/$+4K7Uk[%%PK+c9Eea,Gr$,q'-MdN/$rLj"pU:[_es5$NV>fr83K*bg+E%#K?5pEOGQ(UJ0hJ<pM3@enGQN'4+i+?0#I3g([2gVa?JY[BeXj&%nHoAZXonmI*u(bC1]F$a1sPfJ)N=Z#(eDpHK,T]M%7\oq^mQ=MN>Q#!,0i-H),F(]3T$WE4@(uPN@1[@aNS&_mD9YsStH:ODjN/(%-lG^m?23t;5g3W]pT0b_0nVLDZZa@:2rb)L5g2.UkmZ0;GSktu\qhQ@E5)%@-lN<EIZ"EP^*:+-)6="Ld>c=WEq7/Q*cg9rf]cDH%0Y3Yim.@>`=:OOW>q6`BKDJ>ucdZRBc[1);2@VlE7I0[sN!%pEi[7F&T>K_n?T5-[#.r4X\oI[*R,cdOcd,&e)pIj<-;KNP*Ukip%TEb#cN#S_34?qj7C,"!&%ep39mG5g>/W?jc#!6,2(O!BM0C3dt?e>YL4'gT>cZ1$bR-0e<IQh4c@@gj*q$a$#R-.OU(ra?S5N<Ak%0[Hr40T(Nf0FuD!.fmC'nFP%:WRlZmNu)#fkN>4P;Qg*c+#9..$i'OZZ#/lPJ,+DpjF6QCqbXSPH/:`LCgipE%jbGImoLT'Q?nXR%Vu';re9eta8H7%b-s>h!P\acWNqcGVL&!_a!e*=t/-W;u$hO:J'IhjnOtFm(EToZOCges@9_Y5k$Zh/DqXj]?%jak7XRX.I^ED*P%@?077Tk"OPr.Y_.HSRpuqKs\o)L'!CLQ\JVep(Vp?][flpe\8M\[aDA.+uJm>SoYhCgh36N"kdQTk%luJ=d>u9-X]>Hmm[bgft[[%P\acG/drgo[PCXh\M-Xkc\I[[+O54?St?NN<lV19bg1tc--PeOA./#,Hmm[b4?oHH+pDDq$hO:Df^Zg@^ZP:Fd/ndAn$f%qr0lM]%7go*70+S1o`s_M:I+[u+4MMr]Kc]_&_-@fX^Ce\D&b$aU>TEj[&b$_?^DZP43@G[*q=u!E^BEcPK=RWNkqS5ir.VZ&].W4C.!i&F%BB8Z@L_f,b`Up]s(?T5Jo\#&Ko[tY@oI5V4k%8HAJ@mS^cNbRGbk(GZ.+/N!))F6`9V7Yb@;]+>T9j5"DUo!ma:%V;HiS2U_'rju%C$'#Hb*Y?n`PO`%T7S7]T9gs#T8+To!QYZ?r-SM8_E>TkPVISmU,7L$`q4P5(?T5roQc9/k#Rc3o+EY!oCI6adL8kge"8DDC]V</%1bi4M0/u\M(@V],'=.rAK%%[)!C)(&5\fN[8^pm;1:2PA4JD)R[LDilg1rC+M,gJk)U,Q^kc`=Q>5ufoXA<.fQXP*K%=RYk?P]uM%-#-U6bdNi$YA\:TF'H8hZ<W"Fgr@D.pa*keFCV2=5\qr0p?UK.k@XY;9:n/0g%hD&/r@f=`G@VmR[+;eD'f&E>PmT\r-iNIGN3o'%NqqOST[k%*ZrX,/CG=4@Tte=LIr=uKk;LT<m\@2S1VM;)&DPWmR<AY:Xk_R4DI`NaF+-@J0"LNLg]bEq!ANR)5-n8R@Xna5Wd`M6%+\.9#>mU)g1.8$iH@GA`M+WDRh#IBlU.nQM1ISFtIiaQ_/>c(qRu'B((q\YV(Lo[]?[l3p?\Fp'He^W=VXB7ma*sOCr;s4:^3E;D%#AhZQo`st2pt_:Q$Jk,+<T=['?4l]5YTL]b^C4/8:Y+bGr`QUN7iXYb,P^qu_:Bh%>(u^ieH'.:&2E_-&,4g3,*+,A\mkTRc_@Pn%^\pQL"Maji=Jj,*AraJ/1[g-e"PAdnf3];?]rSHG.h49+7m&p-,P^qu`TS#.-a"Ku1%U]eNQ6JN^]+)J[VnI'`Y94tGY>t%^jZF$%rqaR)DOnf,j8daQnaP1DQKN<FHagJ*1OEEC%cBIO4oT![.JN)qj,ou\pR-?tnX/n_SXd>5NGa%Ik#jSA_/=b>I9Zt^IK"oC>i5kL%q6b`[YasQ4i"mqGG7XHPdf>u.#Bji\*\=8Ye>>>lUTQe!07,BST=:0KgZq*H#M5W_;[9lfcYkib/NmhZb_Zh=\!J\joCM[]KfOVH%3f9M43gC'\EQ$:fHi7qa%]\g^.F76BM?0X0EUmT-j*c=WDUbT=EUkOoF%SsM:WJ\>-Z9QC4NpU:F%UnW-Z9Hh>PitsC>"[?jK2j4%V`ul]0*hEf2=,>CGP-6pk(C5@]O#YfStAf[pg?C9DC27PPl,!^?OcdUCKO=qZ/QF"&_,u6]siaXe:OC_X^P"iLTAa*_k%-rTK^]J%>JjLGa_*?$G33+<LaRB,?N9,?^)k''4k$Z#YqrQVj"#D%fFGbY&3guN3Di:#&Vf?,PHj:-O('e1VrQhi?r&c1$$]3$)#W7EQ#e&a%AoI6d@\qBHZ8[(acK`1b^O1<Ufc.V*FI207qn\onJ=fWRr^;hOosqo2msq#hHEH4ekN@h2N,Uj4cS(BJZT!3lls8omk4s;S\qPEY%hR.60StC5/Hboc8qE2OQdsA4/S52l1URCikrTkTrXISdP]fTNFa!3J"jFmOQ#lj]7rc94[kNY#1U45A`+%ZA+oT<@6kL<7%J\[l[%JNjA@IguV\lqLXko-<'1U))m(U3D]'R-3''IY#;,"+`ZA!e1[_r]C72J\[mJ^b68oo*kBt!e6dB^Hg`'J\[l[JNjA@J+a@m:Ls*#%?h"VH$ZcueGR(d53I\qS`pl]PIQa'.?1+I)&AHJ9;=8u&GpFe^^ssG3arPF^)P$q)mRU0+,=+>N"=6#?PiOe-#D/,"U7\7C]S^2B%Sl7g5"il-+*!8fP$n/qHTQm@o?H%+rSm64C."N#0"NQ$*W.@Q[$n/qHTEN;c&f_!G%JU+IJ.a8`8oP1eJO6:<a++dNKM$1l.)@X2%"NQ$**!;(BMHadGr6Prg67"T#PX$Bk!pRH&$DA*Rs5dpC+TE6*rtk,5[kRQ<BBA4S&h&=R4Gj.e-i]Mur\(2I?NU&<3,O*NV#P`]%76_fn;uG-1m'!>HVZno+%:oGVaS[oWq5\^]HSWIJq>q+&%:oGV."Q+Uo@H5:<!/Q'"u:Z;AH!Lgr&"ZU!h$e-$DABZr&%:VeNi9#%JO6:>14KaDrYilU23@X7GBDSOD"j:X1(tW6C7m&V_4dM+WhLE%$Yl=aWklfM*WnG_),tf8W&5]@Sd]A,+KFj?:]pAe4c9=gG;?,5%ae54QK,U6gl?OE-6MtZ`7kpC0:*ikl"$u<%Vr0C.K@<'p:'3@5%Fbtd$Vgd]:^#>,1f+9[:^p/%2:)QXi&"8_dm+@;"#W%I+OSqp%q2l`^KkbQFBRsKg"fHnek_32Z)JHs$T_[&%DFX&l7thJa>\<U![MbO^&+$rGAmo>njhf<tAeoQE>V=7l4!$+h!#U>-cN".]0k'LD%(0%\S-!YV^d01-*7o>fA"u[V=3TL5-5F;=WN9G16`+73MFsHbqH]'t[IJLQq(;aP:W:hs%,5garp*1D(7bAgHHR%nG9G@jZVhtDG%Y`Ie3,@P#-AFnrAKdhYl`N&XU9,be3Fq"ohb5"W$`S@W4:8OK,.jqV(kS&9;M;=9V&Ng_MZ,.sKRX@NF5u>t+`O$hMWt8MU8?9qQ%@8ih<T@)8/<9M;/G.NG6Hf%c?`oL?4f2:lf5N=W6Jq5T3j1XZ/dKEhJALR7jkG:Xj:dnBKq3sQ1PsJ+dO(*Uf5c-<8n)@s0os=H-%NS%#=KSK>2bP^C5\8lFQ9I9sfWbJI:S#P*1$N0/*GD4c627NS&nqd6YRnTFUZG(*@D5V<K]#kGQ:PioEqmDQ=qZWA=$[oPRf2`Bc%bkneV7U+N7jW<<@pM2.R43[SND'_Bh]O*ao=J(gmk[\#%SYdf%Z<,2XKh\@o,6LL1)66MfNAi4G^qJbfB2O7E7nN7ep<LBWD"Tm5%HWBa.Qt\<T3_C'Q4%/p-oN#QrB9LCBHg3-50('^:9I%!MQWVXMbNlNnetESe:6A<cYL>*-is8g/jd"'&9Y6[1$a!0Tdiu!D/m[qA%pYX=ZR4@#L'CpI;p'j+.lD8YiBWp,SH'NPIWXiRNEgUHFV-W]lndsR-.7HJV3FK*OFboFMq6P*[2UQ=.&DNHq2Xd=5Q/YEWk1&cs%<K=OAd#a3T"8`hflVP&WKsU>8JQ%'(q6D0jhUJO6]jc>Z)Oa?g51/.UBWk@AR4mBDRb)6-Y$E`<O7TqCgHNagl))T(*rDKq/BA7j%\`H%DL$b\ZYNZCk82jfYq:p-E9XaWs5X)Ya#tc062'JUHD[sI?*?1*dmI4PAF:>GUl.c\9#.%gP%Z'7Z:c"8?K7=u`h-[l;Cm3HB%iI0ElRLLZgb]Moog1K%K.!Ei,k'brq)&Nq=\QJ>ZD6p#HM!Sa<iGI:RTEYOBZ]+E,D6r",8F:"ljB^JOq&GLNh\DI/BU_G85\`69%om!<VZ_S+&m:PT)g$B.M1:u4*p(c:nT,B?<Rf2H`.iUS$JGP"ig:eogCjZ>b)m_hjcTRKnlt3HWf4;WX0dG;pB)USJD>&%*Xda`g%hiM[X"+&uG!FjOh$%k0I)bFStODTXchN2T-RK7uqLd&HsRf_#g\5)jV(M$Ia)AL^JLZs,$a_QOG\qE+MO1cjS6#g2IU$fpd&32/C%GPctDrP%^UPgq(^.R%-9m@[-*ku[;o*/?B#<r,d>Ls[1neB=5q8su48(:>o%\CY<E3WUWYh2HB<r/a'TOrpuUSo-Nk:$TWt?g7^*%pQn)6@Fdm"Go%@u_8X2854#5(M$;T*>8M2n)jBn*KD13af5Yf!N/-U7`1?5`3DI4T*)bt#Mq:OD.bWc5mSj#DX//'Hn'6u`/[GmC%a&&Be:[N:kF_1kEQs's7;`d$RhPVF2?>rUiI4-3(h:;e:=q,h\2#qC5!1Xk>/rVgoK:Nh,k%W?3FS[r)<eF7<B!=(lgVR]%hjKbr%QN6u10XBgXb$K'GN>^;T:2r1O):i1jEAidoemM6m2G:h=nA^uL))f"e3mU(?*aEcWK57X]%*Yq3:q+cd$p+Q^q[C]Q1[rDSJJiV8%B%Z>^mkZZ7c@-H0@SZGW"7,88(%3q4]h[a83<R1bq;DC7qfISE)<fi<Bm?2"Z@+dOlO6b[Eur;NP;Bks_!jAe*W$7]Y;=P1:N(Y5%Qe/L/bF;lUG3[`'jc-JP48G/bgL1nAnlsa,eB?t@Yf5I7D)#+apUsh!kN@7H+"XA:oCI.XEd9b5_TjlC/oQLsQhS0EQaakubPPV3%bM-IKjaAf*jmB;6o"LIPnoiZ+GrtB05,UZV]G7lF"2LC/bN32h05kB,R!Znq3^#.>jmB,13Zdg"=62L1X6&oDQO@jFq([BQ=3K\g%0?Zr7HX<$([',e=gK,3RLUoFL0$FiKDe+:hlM`Fe9&I6lQHS#j(Zm*E\&'cA1\ZXVKmDfE%]`jk&6gdUQMFpk54=fJ0[J(WANj3m%TBGAHZ/tP2fS0.Si!lsQnnslWnqPe;H+2"<GscDY]j#*Z]cji>hCZ(hh@Nn/Dhq]O0fa.?ITc+9-jIWXF)p'mrGl?7+j]Cp^KcTX%F>V95A<m%6^FZj<^FXRi3I1ABEhDcdjnA,/jj$@Ni,lP;QJ9#YQJ2XRQ.pXnQJ6aoQJ6aoQJ6aoQJ6aoQJ6aoQ66BU@@j+c^auth%^aur2rQFRss)NJ6s1qrg?M#n[pV8>h(]?u<P$;fWqNi<M\(k<^?^Mr,?M#n[(]DPE4YY(HL&Z1?&'T(k'0ljjEm*jr!$qom/[mqK%Pl!QIPhR8^b'eAppV/9RGml+1pV/9R32`VI^F],)$n+CQDRnq-$jQ]V$n/SL"t[t]jN%2_Ip)3t"Rm:R>ETg%IgOK*#<S<Mi'<BU%"$m8("=Z;A,k%+';K*aLhD)@pEh`a.r.5#:&=m$'E$.]fJKP+$JeT11P'>,$.6%kan!I6UE$,E1F\<&O"@8i$8\os#"UBVn*!fG]%+@t?DZ_ZMMOM#(88\qq[Lt""*3#Mj]\g7N8KB*LI.6&<;KA/IpQK/M\afC(e3Y)H]FDa\<E"KtMQ?3mpJaX'R.6&<CG&dpb#3jV<%Q/p6pjYIseUd4Enn[KkK@Xea'rY11e.1lB?pV0t4Q2FJQg7X/qWTa"@,m@b-&<!TR:7mmql@IT[!jOt8s3$Q,Ys3Ni:e?5j+2m9,%'Su]R>].Z7fUi8N56kYI%`JA5r@^eR"TKJ*L2nF8#B@:##P*?UQWnKL"N^!:OFncC4t?+8==(R(5Rpa[q)e]]Z+)*l,<ufs>B2ob%Ic+j_"N^QJn4S:\4dc,GRgIb^L2q5[aCd58l81jg3"4m+0T^q)5Rn8+fnX(&*#o0'THhUq@3CBP/NGd!"<k>aoDF3X5Rn8+3B.FX%+-'?AE#?ZI`[D(IJKS4,jPV^'K^4pD*!UG&(s'O%+:![Qm)-)#%ZUWOcjSsn9FumCQ5lD%JoKP/K7cI5#D4!9%.ZN<!ASdPaFQB#%T*Kuk7(6]N0F.`%9=^(W+8Eeq!D7;6-q@ZG.=qD(SGoDhdf3tTD(1%on%s"<7$LIsbr:RN^O.ZWs7i(upeUq`0E:O^s8DEdp5a_'%qg\P2+9).5s6DW9rV)r`mGIj0\,YsH^\Z-'5C`P(?iTfnJ,&&"J+`^=p5f7La%q3VpODpErqN[HqHqfp.oGr2Ie#`$rkH1nh(ATi%VuHO:s7`\a?ThI2IfK/G=8p?,r;AkZh,"(9YQ!f?s7UC2gXk?\rf=g"%,V;^"PS@:`kVBK+92-5YP6HEmJHq@banFtYQ*lHJ+8m*%^Ab$[pQ,@MYCHH,J+n_Jo5B*L(Ott)rV#]/pE0D(gV<cDhu2LmJ+r!4s3L._qX$NHj*KPMrp0;cIepZ@r9hTIJ,b;]rUf-br;Q_%%aS/L"pg<s<^\^7qO5KkbEkM>l~>%AI9_PrivateDataEnd