%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: landau.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 262 194
%%HiResBoundingBox: 0 0 261.5283 193.6274
%%CropBox: 0 0 261.5283 193.6274
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 8520 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFFFA8FD7EFF5227FFA8FD047D7E7D7D7D7EFD077D7E7D7D7D7E7D%7D7D7E7D7D7D847D7D7D7EFD077D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D%7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D847D%7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7DA87D7D7D7E7D7D7D7E7D7D7D%7E7D7D7D7E7D7DFF5252FFFF59FFA8FFA8A8A8FFA8FFA8A87DFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A87DA8A8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8A87EFFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FF%A8FF7DA8A8FFA8FFA8FFA8FFA8A97DFD04FFA87DFD04FFA8FD1DFFA8A8FD%18FFA8FD17FFA8FD0BFFA8FD07FFA8FD07FFA8FD07FFA87DFD05FF7DFD5F%FFA8FD17FFA8FF7DFD04FFA87DFD04FFA8FD08FFA8A8FD49FFA8FD07FFA8%FD06FFAFFD06FFAFA8FD07FFA8FF7DFD05FF7DFD0DFFA8FD4BFFA8FD15FF%A8FD07FFA8FF7DFD04FFA87DFD04FFA8FD09FFA8FD07FFA8FD07FFA8FD05%FFA8FD33FFA8FD05FFA8FD07FFA8FD07FFA8FD08FFAFFF7DFD05FF7DFD05%FFA8FD71FFA8FF7DFD04FFA87EFD04FFA8A8FD08FFA8FD0FFFA8FD05FFA8%FD33FFA8FD05FFA8FD07FFA8FD07FFA8FD07FFA8FFFF7DFD05FF7DFD05FF%A8FD19FFA8FD37FFA8FD0DFFAFFD11FFA8FF7DFF7D7DFFA87DFD05FFA8A8%FD07FFA8A8FD08FFA8FD07FFA8FD36FFA8A8FD15FFA8FD07FFA8A8FF7DFF%7D52FFFF53FD05FFA8FD1FFFA8FD31FFA8FD0DFFA8FD13FF52FF7D28FFA8%7DFD06FFAFFD09FFA8FD07FFA8FD07FFA8FD05FFA8FD2FFFA8FD1FFFA8FF%FF7DFFA8FFFFFF7DFD05FFA8FD09FFA8FD09FFA8FD07FFA9FD4BFFA8FD0B%FF7DFD04FFA87DFD06FFA8FD13FFA8FD07FFA8FFFFFFA8FD2FFFA8FD05FF%A8FD07FFA8FD09FFA8FD07FFA8FFFF7DFD05FF7DFD19FFA8FD3BFFA8FD23%FF7DFD04FFA87EFD06FFA8FD09FFA8FD11FFA8FD05FFA8FD2BFFAFA8FD0E%FFA8FD07FFA8A8FD08FFA8FFFF7DFD05FF7DFD28FFAFFD2CFFA8FD05FFA8%FD1DFF7DFD04FFA87DFD06FFA8FD09FFA8FD09FFA8FD0DFFA8FD2BFFA8FD%05FFA8FD08FFA8FD08FFA8FD09FFA8FFFF7DFD05FF7DFD07FFA8FD09FFA8%FD09FFA8FD07FFA8FD51FFA8FFFFFF7DFD04FFA87DFD06FFA8A8FD1CFFA8%FD35FFA8FD07FFA8FD09FFA8FD09FFA8FFFF7DFF7D7DFFFF7DFD07FFA8FD%09FFA8FD18FFA8FD28FFA8FD05FFA8FD1BFFA8FFFFFF7DA87D52FFA87DA8%FD06FFAFA8FD09FFA8FD09FFA8FD07FFA8FD05FFA8FD27FFA8FD07FFA8FD%07FFA8FD09FFA8FD07FFA8A8FFFFA853FF527DFFFF7DFD07FFA8FD1DFFA8%FD05FFA8FD2DFFA8FD07FFA8FD13FFA8FFFFFF7DFFFFA8FFA884FD08FFA8%FD09FFA8FD0BFFA8FD07FFA8FD05FFAFFD2BFFA8FD11FFA8FD09FFAFA8FF%FFFF7DFD05FF7DFD13FFA8FD13FFA8FD43FFA8FD0DFF7DFD04FFA87DFD08%FFA8FD0AFFA9A8FD09FFA8FD0DFFA8A8FD22FFA8FD07FFA8FD07FFA8FD13%FFA8FD04FF7DFD05FF7DFD13FFA8FD19FFA8FD21FFA8FD07FFA8FD21FF7D%FD04FFA87DFD08FFA8FD0BFFA8FD0BFFA8FD07FFA8FD05FFA8FD20FFA8FD%06FFA8FD09FFA8FD09FFA8FD09FFA8FD04FF7DFD05FF7DFD09FFA8FD0BFF%A9FD13FFA8FD05FFA8FD25FFA8FD23FF7DFD04FFA87DFD08FFA8A8FD0AFF%A8A8FD0BFFA8A8FD07FFA8FD05FFA8FD1CFFA8A8FD06FFA8FD08FFA8FD0A%FFAFA8FD09FFA8FD04FF7DFD05FF7DFD09FFA8FD17FFA8FD09FFA8FD05FF%A8FD1BFFA8FD1BFFA8FD0FFF7DFFA87DFFA8A8FD09FFA8A8FD0BFFA8FD15%FFA8FD05FFA8FD19FFA8FD07FFA8FD09FFA8FD1AFF7DFF527DFFFF52FD09%FFA8FD19FFA8FD09FFA8FD04FFA8A8FD17FFA8FD07FFA8FD15FFA8FD09FF%A8FD05FF52FFA852FFA87DFD0AFFA8FD0BFFA8FD0DFFA8FD09FFA8FD04FF%A8A8FD15FFA8FD07FFA8FD09FFA8FD0BFFA8FD0AFFA8FD05FF7DFD05FF7D%FD17FFA8FD0DFFA8FD09FFA8FD05FFA8FD13FFA8FD07FFA8FD21FFA8FD05%FF7DFD04FFA87DFD0AFFA8FD0DFFA8FD0DFFA8A8FD08FFA8FD05FFA8A8FD%0FFFA8A8FD07FFA8FD0BFFA8FD0BFFA8FD09FFA8A8FD05FF7DFD05FF7DFD%18FFA9FD18FFA8FD05FFA8FD0EFFA8A8FD07FFA8FD0BFFA8FD1DFF7DFD04%FFA87DFD0AFFA8A8FD0CFFA8FD0FFFA8A8FD08FFA8FFA8FD05FFA8A8A8FF%A8FFFFFFA8FFA8FFA8FD07FFA8FD0BFFA8FD17FFA8FD06FF7DFD05FF7DFD%0BFFA8FD0DFFA8FD11FFA8FD09FFA8FD07FFA8FFFFFFA8FD0BFFA8FD19FF%A8FD11FF7DFD04FFA87EFD0BFFA8A8FD0DFFA8FD12FFA8A8FD07FFA8FFA8%FFA8FD0FFFA8FD0DFFA8FD0DFFA9FD0BFFA8FD06FF7DFD05FF7DFD0BFFA8%FD0FFFA8FD13FFA8FFA8FD09FFA8FD0BFFA8FFA8FD2FFF7DFFFFA8FFA87D%FD0CFFA8FD0EFFA8A8FD16FFA8A8FFA8FD05FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FD0DFFA8A8FD0EFFA8FD0BFFA8FD06FF7DFF527DFFFF7DFD1DFFA8FD%53FFA8FD07FF7DA85352FFA87DA8FD0BFFA8FD10FFA8A8FD19FFA8FFA8A8%A8FFA8FD15FFA8A8FD1CFFAFFD05FFA87DFF7DA8FFFF7DFD0DFFA8FD11FF%A8FD45FFA8FD0BFFA8FD07FF7DFD04FFA87EFD0DFFA8A8FD11FFA8FFA8FD%09FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FD05FFA8FFFFA8FFFFA8FF%A8FD05FFA8FFA8FD11FFA8FD0BFFA8A8FD07FF7DFD05FF7DFD0DFFA8FD15%FFA8FFA8FFA8FFA8FFFFFFA8FFA8FD0DFFA8FD0DFFA8FFA8FD15FFA8FD0D%FFA8FD07FF7DFD04FFA87EFD0EFFA8FD17FFA8FFFFFFA8FD13FFA8A8A8FD%23FFA8FD0BFFA8FD08FF7DFD05FF7DFD37FFA8FFA8FFA8FD07FFA8FD1FFF%A8FD15FF7DFD04FFA87DFD0EFFA8FD23FFFD05A8FFA8FFA8FFA8A8A8FD05%FFA8A8A8FD1BFFA8FD0DFFA8FD08FF7DFD05FF7DFD0FFFA8FD21FFA8A8A8%FD0BFFA8A9A8FD37FF7DFD04FFA87DFD0FFFA8A8FD1EFFA8A8FD0FFFA9A8%A8FD05FFA8FD17FFA8A8FD0DFFA8A8FD08FF7DFD05FF7DFD2DFFA8A8A8FD%13FFA8FD07FFA8FD23FFA8FD09FF7DFF7D52FFA8A8FD10FFA8FD1BFFA8A8%A8FD15FFA8A8FD04FFA8FFA8A8FD10FFA8A8FD0EFFA8AFFD09FF7DA87D7D%FFFF7DFD11FFA8FD19FFA8FD19FFA8A8FD06FFA8FD11FFA8FD0FFFA8FD09%FF52A8FFA8FFA87DFD11FFA8A8FD16FFA8A8FD1BFFA8A8FD07FFA8A8FD0B%FFA8A8A9FD0FFFA8FD0AFF7DFD05FF7DFD12FFA8FD15FFA8A8FD1DFFA8A8%FD09FFA8A8FD25FF7DFD04FFA87DFD12FFA8FD13FFA8A8A8FD1FFFA8A8FD%0AFFA8A8A8FFA8A8A8FD13FFA8FD0AFF7DFD05FF7DFD13FFA8FD11FFA8A8%FD22FFA8A8FD2EFF7DFD04FFA87DFD14FFA8FD0FFF84FD25FFA8A8FD22FF%A8FD0AFF7DFD05FF7DFD15FFA8FD0DFFA8FD27FFA8A8FD20FFA8FD0BFF7D%FD04FFA87DFD15FFA87DFD09FFA8A8A8FD29FFA8A8FD1EFFA8A8FD0BFF7D%FD05FF7DFD17FFA8A9FD06FFA8FD2DFFA8FD1FFFA8FD0BFF7DFFFFA8FFA8%84FD18FFA8A8A8FFA8A8A8FD2FFF84FD1DFFA8FD0CFF7DFF5259FFFF7DFD%4FFFA8FD1BFFA8FD0DFF7D7D5252FFA87DA8FD4FFF7EFD1AFFA8A8FD0BFF%A87DFF52A8FFFF7DFD51FFA8FD19FFA8FD0DFF7DFD04FFA87DFD51FFA9A8%FD17FFA8A8FD0DFF7DFD05FF7DFD52FFAFA8FD16FFAFFD0EFF7DFD04FFA8%7DFD04FF52A8A8A8287DFFFFA8FFA8FFFFFFA8FD40FFA8A8FD15FFA8FD0E%FF7DFD05FF7DFFFFFF7D2727525252A8FFFFFFA8FFFFFFA8FFA8FD40FFA8%FD14FFA8FD0FFF7DFD04FFA87EFFFFFFA852A8FFA852A8FD4BFFA8A9FD11%FFA8A8FD0FFF7DFD05FF7DFD08FFA8FD4DFFA8FD11FFAFFD10FF7DFD04FF%A87DFD08FF27A8FFFFA8FFA8FFA8FFA8FFA8FD41FFA8A8A8FD0EFFAFA8FD%10FF7DFFA8FFFFFF7DFD08FF7DA8FD4EFFA8FD0EFFA8FD11FF7DFF7D52FF%A87DFD08FFA8FD4FFFA8A8A8FD0BFFA8FD12FF7D7D7D52A8FF59FD07FF84%527DFD50FFA8A8FD09FFA8FD13FF52A87D7DFFA87DFD07FF7D527DFFFFA8%FFA8FFA8FFA8FD48FFA8A8FD07FF84FD14FF7DFD05FF7DFD08FF7DA8FD53%FFA8FFA8FFA8FFA8FD15FF7DFD04FFA87EFD08FF7DFD55FFA8FFAFFFA8FD%16FF7DFD05FF7DFD07FFA852A8FFA8FFFFFFA8FFAFFFA9FD65FF7DFD04FF%A87DFD06FF7DA87DA8FFFFA8FFFFFFA8FFA8FFA8FD64FF7DFD05FF7DFD79%FF7DFD04FFA87DFD07FFA827A8FFFFA8FFAFFFA8FFAFFFA8FD64FF7DFD05%FF7DFD06FFA87D52A8FFFFFFA8FFA8FFA8FFA8FD65FF7DFD04FFA87EFD06%FFA8A852A8FD6FFF7DFF7D7DFFFF7DFFA8FFA8FFA8FFFFFFA8A87DFFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8A8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8A87EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FF7DA8A8FFA8FFA8FFA8FFA8FF527D2727FFA9FD047D7E7D7D7D7E%FD077D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7EFD077D7E7D7D7D7E7D7D%7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E%7D7D7D7E7D7D7D847D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D%7D7E7D7D7D847D7D7D7E7D7D7D7E7D7DAFA8A8FD8EFF7D7DFD17FF7DFD17%FF7D7EFD16FFA87DA8FD16FF7D7DFD1CFF7D7DFD16FFA852A8FD15FFA87D%52FD17FF27FD17FF7D7DFD1BFF7D5252FD15FF7DA87DA8FD16FF527DFD17%FF7DA8FD16FF5252FD1CFFA8FD31FFA8FD2FFFA8FD8BFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:56:49+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T14:23:15+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T14:23:15+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7vNZ/mE35pWt6TCfJKWM&#xA;8AijuXVxO3ouJZoDGA8hdWRKMQqVNVJ4uqjI7rzff6zrENjfafaWOnXSWsUc9jNcStytILhmaRby&#xA;BftTkABOgxVe0XnpbuK3/Sul/vI5JOX6NuNvTZBSn1/vzxVW+p+ef+rvpn/cMuP+y/FUEX/MFXuO&#xA;d9poSG5igjb9G3P7xJVj/er/AKd0V5Sp/wBU4qjfqfnn/q76Z/3DLj/svxVbLaefVjYx6rpbuBVU&#xA;Om3AqfCv1/FV31Pzz/1d9M/7hlx/2X4qsktvPacCNV0wqWCtTTLkkA7A0F8e9Pl1xVf9T88/9XfT&#xA;P+4Zcf8AZfiqB06Xz/dyurX+mxRpEjGQ6bcEet6ksc0QP16h9MxDcHeuKo76n55/6u+mf9wy4/7L&#xA;8Vd9T88/9XfTP+4Zcf8AZfirvqfnn/q76Z/3DLj/ALL8Vd9T88/9XfTP+4Zcf9l+Ku+p+ef+rvpn&#xA;/cMuP+y/FUPNH+YCXdtCmoaa8U3P1ZhptxSPitVr/p37R2xVEfU/PP8A1d9M/wC4Zcf9l+Ku+p+e&#xA;f+rvpn/cMuP+y/FXfU/PP/V30z/uGXH/AGX4q76n55/6u+mf9wy4/wCy/FXfU/PP/V30z/uGXH/Z&#xA;fiqHvI/zAh9D0tQ02b1ZVjkpptx8CNWrn/TjsMVRBtPPAFTq+lgDqf0Zcf8AZfiqyC28+vDG8mqa&#xA;ZHIygvH+jbg8SRUrX6/vTFXG389CZY/0rphDKzF/0Zc0HEqKV+v035Yqv+p+ef8Aq76Z/wBwy4/7&#xA;L8VWCDzwZni/SumgoqtyOmXHE8iwoD9f6jjviqnqEfn+3sLm4g1HTbiaGJ5IrddNuAZGVSVQUvzu&#xA;xFOmKrlj88tdyW/6V0z93HHJy/Rtxv6jOKU+v9vTxVV+p+ef+rvpn/cMuP8AsvxVKfMl95+0jTby&#xA;9j1LSpTZ2N1fcG025HL6qgbhUX+3Ll17eGKszxVIvLv/AB2PNH/bTj/7plliqY3x43Vg9eJMzIzb&#xA;D4WhkPEnwLKu3iBiqMxVRvUnks547duE7xusTVpRypCmu9N8VVUdHRXRgyMAVYGoIO4IIxVvFVK0&#xA;CLbpGiMiRViVX60jJQHfseNQfDFV08ZkiZAQrHdGI5BWG6tTatDviroJRLEslOJP2kqGKsNmUlSR&#xA;VTsaHFVOFo47iS3BALVmRApAox+M8iSGPPc06VHjiqvirsVdirsVdirsVdirsVdirsVdirsVQ99J&#xA;SOOIKrtPIsXpsKhlJrIDXb+7VjviqIxVRhHK4mmFOJCxAjia+mWJNQa/acrQ9CDiqtiqlbnkZXEv&#xA;qI0hCClOHABGX3+NScVVcVUYPWMtwZKcPUAgO32Ai16f5fLriqtirF/PO/lzzVX9nRJqe1Yriv30&#xA;GKp3+nNE/S36H/SFt+lzH6w071o/rPp/z+jXnx96UxVL/Lv/AB2PNH/bTj/7plliqY6vtYtIdkhk&#xA;imkI7JDKsjn6FU4qjMVdiqG0/wBJYPQj5AWzGHi9KgL9kbduFCPbFUTiqkpCXTIZCTKvNIiOnCis&#xA;QfD4l2xVVxVRhPGWWIndSHXqfhevUkAfaDbVO2KtXES+rDcfFzhJU8abpJswNSBQGjH5Yqr4q7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FUOsySXzwitbdFZtlKcpagb/aDKEO3g2Kq0jrHG0jmioCzHc7Dc7D&#xA;FVlrHJHAqyGshq0m/IBmPJgDRdgTtt0xVfIXWN2jXnIASiE8QTTYV3pXFXRpwjVdhQUPEcVr7Dem&#xA;KrsVQ2nCP6ojxsWjmLTqSKGkzGSlPbniqJxVi/nDfyh5yPf6ldCvsLAGn3k4qpXXkW4uPPln5n+v&#xA;xx29o7SiyS3ZZXd7VrU85RMInHFgwZoDIKcQ4T4cVRPl6yhPmPzPd8pfVGoxoFEsoip+jLPrFy9O&#xA;vvxriqfXkBuLOe3B4maN4w3WnJSK/jirdpOLi1huAvETRrJx605AGn44qq4qoRiUXk440hKRsrUA&#xA;q5LK2/f4VXFVfFVOcsqiReAKEc2k2AjqOe/bYVxVUxVRuaIUuKgCKvqE0/u2+1uxUAAgMT4DFVSa&#xA;KOaJ4ZByjkUo67iqsKEbYqp2byGAJM6vcRUScqR9sAGpA6cgQ1PfFVbFXYq7FXYq7FXYq7FXYq7F&#xA;XYq5mCgsxAUCpJ6AYqh7ONAjzAANct6rkMGBPEKpqAB9hVH9euKt3VHCQd5WFRufgX4mrRlND9n5&#xA;kVBGKq+KqF2I39GGSNpEkkWpUbKYwZVZvaqAfM4qr4qpXkskNpPLEvOSONnRNzVlUkDbxxVfHGkU&#xA;aRxjjGgCoo6AAUAxVdirEPOVnDc/l7r7yNKAlpqcsRilliDAiZlLemyh1I3o1RhVl+BUi8u/8djz&#xA;R/204/8AumWWKp7iqE0razEY+zDJLEg8EjkZEH0IBiqLxVDXKolzb3DNx4kwmoqCJaUHsearv/XF&#xA;UTirTojoyOoZGBDKRUEHYgg4qst2do/jQxlWZQpPIlVYqrV/ylAbFVRgGBU9CKHFVG1L+l6bkl4j&#xA;wLEN8VOjVYLWq0rTatRiqlLLLDqMINTb3KmOgH2ZUBcGo3+JA1a/yj6VUXirsVdirsVdirsVdirs&#xA;VdirsVQGr1mijsAK/XX9KUeEAHKavehQcK+LDFUfiqhFwluZJaKfSrEjDiSK0Mm4qRUgAg/y4qr4&#xA;qoKwkvGKSkiBSkkIG3N+LAselQo2HgfcYqr4qoXgZkjRJBHI8sfGpI5BGDuop4orYqr4qtkkSKN5&#xA;JDxjQFnY9AAKk4qxvzVG8X5aaxHICrpotyrqeoItWBGKq0vnSxi83w+V5LO7W6uEZoLxkQWzlI/V&#xA;ZVq/qsFXq4j9MN8PLltiqn5ev7EeY/M9kbiIXjajG62xdfVKfoyz+IJXlTbrTFWSYqhLX4L69jP2&#xA;naOceHFoxGPp5QtiqLxVSuozJAwVQ7ijxqxIHNDySpH+UBirdvMs9vFOoZVlRXVWHFgGFQCD0OKq&#xA;mKqDBYrpXo7NcUjNN0XgHcMR2r0r8sVV8VQ09IbiO42CvSGU0FTyb90a0rszEAf5VcVV5I1kTixI&#xA;BofhYqdjXqpBxVQ067N1arI6iOdSUuIq14Srs6/KvQ9xQ4qicVdirsVdirsVdirsVdirsVQ9rIZp&#xA;Z5RyEat6KVNVPp1DMFpUHmWU+PHFVaWT04mkoW4gnioLE08AATiq22iMUCITVgKuak1Y7sd/EnFV&#xA;TFVOAuU5PwJZmIKdCtTwO/fhSuKqmKoWQxSahDEQzPAjTVBoqlv3a18SwL0+n2xVFYqhNW3024jH&#xA;2pkMKf68v7tf+GYYqk35jX9ja+SNeW6uIoGn068SESuqF3Nu/wAK8iKn2GKouPyhoMXmebzPHFMm&#xA;s3EawzzC6uRE8calUVrf1PQIWpI+DY79d8VU/Lv/AB2PNH/bTj/7plliqe4qhH/d6rERsJ4XVye7&#xA;RMpQD3o7n/axVF4q7FUPasySz27yB3VjKoqSwjlJK8q9KMGVfYYqiMVWTI0kLormNnUqsg6qSKVH&#xA;yxV0U0UvLg1eDFHHQhh1BB/zpviq50V0ZG+ywINCQaH3GKqVvI1WhkYGWKlTsOSt9luPJiBsRv1I&#xA;OKrJ5IrVxM3wRzOqSEKKc2oiOx670Cd+3bFUTirsVdirsVdirsVdirsVUbi4EbRRKR607FYwQSNg&#xA;WYkDsAPvoO+KqkUUcUSRRjjHGoVF8AooBiqjJSa4WLZo4qSSCoPxggxgj/hvoGKojFVK6CtCYWV2&#xA;E37o+n1AYEE1/ZoN6/xoMVVVUKAqgBQKADoBirsVULf1zcXLSqAgdVgIA3jCKanv9tmGKq+KoTUf&#xA;iFtD0M1xH8Xh6VZ/x9KmKpb59/5QbzF/2zL3/qHfFU9xVIvLv/HY80f9tOP/ALplliqe4qhNQ+E2&#xA;s3UQ3CVXx9WsH4erXFUXirsVQl00VvcwXJU1kYW8jg0UB6lCw7/HRV8OWKovFXYqoXEogP1iWUJa&#xA;qtJFK1oSwCvyH2QN+Vdu+1DiqviqjcpIQskR/exkELU0ZajmvEMiklahS3Q74q4G3vLVlYCSGUNH&#xA;LGaEd1dGoSKg1UjFVG1uXW5exmUq6AvbvUkSRAgVqxY8kqA1T4HvsqjMVdirsVdirsVdiq2WWKKJ&#xA;5ZXWOKNS0kjEKqqoqSSdgAMVUorf/SXupK+qw9NFJBVEDH7FAKc9i30eGKr7idIIWkben2UFOTN2&#xA;VakDkx2GKut4miiCs3KQ/FI45ULndiAzOVFegrsNsVVMVUUYSXLlZCRD+7eICg5sFepJ6/CRSnif&#xA;oVVsVakkSNGkdgqICzMegA3JOKqFhCIrVRVm5s8pLKVNZXMhHE7rQt0OKojFUJcfHqVpGfsoss4/&#xA;1lCxj6OMzYqlvn3/AJQbzF/2zL3/AKh3xVTk17V4/wAwLbQWggGk3Ol3N8lwGdrgz29xbxFWWioi&#xA;cbnxYk/y03VWeXriYeY/M8H1WUxHUY2N2DF6QP6Ms/hI5+pX/YU98VZJiqhfwPPZTwx09R42EZO1&#xA;Hp8Jr2o2+Kr7edJ7eKdK8JUV1r1owqK4qqYqtlQvE6BihZSodeqkilR7jFVlrI8lujSFfWoBMENV&#xA;EgHxgdehxVVxVplV1KsAysKMp3BB7HFVCH/RyLf0wlpEkaQSl+RJ+zwPL4q9KGpriqIxVQlSVJPW&#xA;iq5biskZZqcQ32lFeKlQxJoPi6eGKr/3dxCjVYISriheNvhIYAj4WG4+JT8jiqhY3k0jNb3cfpXk&#xA;Qq4FfTkWtBJGfA91O69+xKqLxV2KuxV2KuxVByRR6h6LcuVkrLKtOLJP8IaNgwY1QE1pTcgduqqM&#xA;xVDwn6xILgH9yFpBQ7NU7v8ACxVlYU47V6+OKojFVssqxpyZlWpCqXPEFmIVRX/KYgYq1CrrEiyE&#xA;NIAObAUBbuae5xVfiqHvzWD0uHqCdliZDXdHNJOngnI4qiMVdiqEi+PVbhvtLFFEit1CuxdnUeBK&#xA;8CfoxVJvzGuJofJGvCO1luRJp14rtEYgIx9Xf4m9R49v9Wp9sVZJiqReXf8AjseaP+2nH/3TLLFU&#xA;9xV2KoPTCFiltu9rK8XHsFPxxqPlE64qjMVdiqEfja3fqBWMd4wWVq1VZAtEalNgwHEmvXjtuTiq&#xA;LxV2KrJ4IZ4mimQSRtTkrCo2NR9xxVSMssHNpz6iPIFh9KNyyq1AA4Xn0b9rYU69K4qiMVQ72xSR&#xA;prbikrbyKa8X6dQDQNsBzodsVcHhnIhmULMhD+kTvVCCGXoStab/AEHwxVShfULdnS6AuLdVZkuo&#xA;x+8oP2XiUbtTunU/sriqKjuIJJJIo5EeSEgSorAshIqAwHSo8cVX4qpNcwhiinnIG4FE3Ibhzo1N&#xA;lqv81PxxVBNZ3eokG/X0bOv+8AIYyD/i9geJHjGtR4lhtiqZAACg2A6DFUKHe7YFaraAo6Sq28wI&#xA;DgoUYFVBp1+1uKU6qooAAUGwHQYq7FVHj6s4ZljeCOhib7TCUFlb/V4jb6TiqtirsVUG5PfIFk+C&#xA;KNmkiBIPJyBGxp1FFfFVfFXYqgtMJc3c/QTXL8V609ECA/eYq4ql/n3/AJQbzF/2zL3/AKh3xVPc&#xA;VSLy7/x2PNH/AG04/wDumWWKp7irsVQSVi1d1/YuoRIAOnOFgjs3uyyIB/q4qjcVdiqncW8NzBJB&#xA;MvOKVSrrUioPuKEfMYqoWlyVm+oTMzXESKyyuAPWQABpF47VDGjDtttQjFUXirsVdiqg9pxWU2ze&#xA;hNKQ7PTkpYU3KEgfEBRqUNO+Kuae5jSV5IOYVv3awtyZk/mIYJQjwBPt4Yq52s55GtnKPLHRzEft&#xA;L/K4HUb9GHfFXGK5iU+i4kA+zHMTtQKABIKtTYklgxqeuKqNxb29wVF9YpMQeKuVSVQGag+0A3YF&#xA;vhoPelcVaI0uWPjJbj0iF5erAyqAi8l5c1AAUePTp1xVUt5LCGIRWqqIRWi26EoDyAP92CoNW/ji&#xA;q83Erj9zCzV6NJ+7X9oGoI57cf5e4p3xVpbZ5CGuishBBWMD4ARwYGhrUq6clbtiqIxV2KqDztJI&#xA;YrV4mkikUXQYklFI5U4r+0RSgJHWvsVVWKKOKNYolCRoAqIooAB0AGKrsVdiqF08pLE10qlfrTeo&#xA;KmtVoFQjw5IoanauKorFWmZUUsxCqoqzHYADucVQ2lIy6db8wRI6CSWta+pJ8bk18WY4qlnn3/lB&#xA;vMX/AGzL3/qHfFUk/wAD6r/ys7/FHqW/1L7X1jk/1z0/qn1b6hw9Ph9X9X/Sa+pX1P2e+Kpp5eS+&#xA;/wAR+Z3E0Qs/0jGGhMTeqX/RlnuJfU409uH04qyTFXYqgdW/dJBeAf7ySq7/APGN6xyEnwRXL/7H&#xA;FUdirsVdiqldQevA0QkeEmhWWI8XUqQQRUEdR0IIPQgjFVFbqWGSOC5jd2ZRW7jT90WpvUBnaPpX&#xA;4tveuKomOSOWNZI2DxuKq6kEEHuCMVXYq7FVryxpTm4WtaciBWgqevtiqHXUNKuSYFuYJi4IaIOj&#xA;VFKkFantiqks+irGksdzFHBbEgenMEiXn2ZVYIfbkMVVrdJqtKl2biGUFowyoQpP2eLRhKr86/PF&#xA;VyyXSiISQhmbaUxMCFPY/HxJH4/PFXG9gWOSSXlEkTcHaRSo60DAnYrv1G3jiq/6xb+v6Hqp6/Hl&#xA;6XIc+Pjx60xVUxVTa4gEphMi+sE9T0QavwrTlxHxUrtiqhIb26iiNu5tI3q0jugMwUEcQqNVVLDe&#xA;rA06ca9FUUqqteIAqSTTbc9TireKuxVQvDMY1jiUM0rBWrSix1+NjX/JrTY707YqrgACg2A6DFXY&#xA;qg9XP+46WOm8/G3B8DOwi5f7HnXFUZirG/zGS+byRr31WaKJRp14ZhLE0hZPq77KVkj4n3NflirJ&#xA;MVSLy7/x2PNH/bTj/wC6ZZYqnuKuxVZNDFPDJDKoeKVSkiHoVYUI+7FVDTZJHs0WUlp4awzMepeP&#xA;4S3+ypyHscVRWKuxV2KuxVDtp9mRJxj9IzHlK8JMTsfFnjKsevjirS6dbqrqHmo9OVZ5idjXYl6r&#xA;9GKubTLB0RJoRcLHUp69ZiORqd5Cx7YqqJa2qTtOkKLO+zyhQHYbdWpU9BiqncanYwS+i8vKegPo&#xA;RhpJaHv6aBnp70xVTGozMvKOwuXT9k/ukJHjxkkRh/sgDiqHuJLEuJbvT5oZF3jnWL1HFDyNHtjI&#xA;y9TWtK7++KqsAedvrGn6is1uznnGwSeMb1YIyFHDeFWIHh0xVV/SAiMv12P6pHF8X1h2X0WWtAQ9&#xA;RxO4qGA36VG+Kolo4pOBZVfiQ6EgGhpsR774qptZWbJIjQRskxrMpRSHPWrCm/04qrAACg2A6DFX&#xA;Yq7FXYq7FUFaiG6um1BSxVUa3h5AAUDn1HTfcOVXr/KCNjiqNxV2KoS8/eXdnD1o7TOvYpGpXfxp&#xA;JIhH39sVReKpF59/5QbzF/2zL3/qHfFUYPMWiHzB/h4XaNrX1Zr42IqXW3V1jMjUFFHOQAVNT26H&#xA;FUH5d/47Hmj/ALacf/dMssVT3FXYq7FUIAINRPaO8Ff+e0Yp97Rgf8BiqLxV2KuxV2KuxV2Koe8v&#xA;re0VTIS0khIhhQFpJGArRFG59+w6nbFUMLfUL08rt2tLY/ZtYWpKR29WZTUH/JjIp/MwxVGW1pbW&#xA;sXpW0SQx1rxQBRU9Sadz44qq4q7FUJdaXbTyeuvK3u6UF1CeElB0B2KuB/K4K+2KqMd/cWsqwakF&#xA;AchYb1AVick0VXBr6bnoN6N2NTxxVWFh6LQ/UnFrBFs1qqL6LKSSaKOPFtzQqfmDirotRTmYrpDa&#xA;S8xGgkI4SFq8fSfo1eJ+HZvFRiqLxV2KuxV2KoW4mlkkFtayKsqshuWqC0cZ3+z4vx4ivTr2oVUS&#xA;iIiKiKFRQAqgUAA2AAGKt4q7FUJH+81OZ+q28axIf5Xcl5B9KiM/5nFUXiqReff+UG8xf9sy9/6h&#xA;3xVUsvKemWeq2epQy3Tz2Nrc2UIuLiW5JjvJop5C8lw0szMHt1C1egG1OlFUJ5esoT5j8z3fKX1R&#xA;qMaBRLKIqfoyz6xcvTr78a4qyTFXYq7FVC9t2uLZo0b05hRoZCK8ZF3VqdxXqO42xV1ldrdW4k4m&#xA;NwSk0RIJSRTRkJG2x79+uKq+KuxV2KuxVAT6jJJM9rp6Ca4Q8ZZmr6MJ/wAth9px14Lv4lQQcVVL&#xA;LTordmmdjPeSCkt1Ju5HXivZEHZV279anFUXirsVdirsVdiq2SOOWNo5FDxuCrowBVlIoQQeoOKp&#xA;YryaQyxzMZNLY8Y5mNWtyeiyHvH2DH7PfbcKplNDDPE0U0ayxOKPG4DKR7g7YqoC2uYpzJDPWErT&#xA;6q4HEFVovBwOS9N68vYDFWlv3SHndW0sLcgnFFM9TSvJfR5tw92C/IYq3JqmnxhS06lnUPHGnxuy&#xA;t0KotWavsMVWtcXlwsZskEaMT6k1wjqyhafZiIRiW6bkU679Cqr29rBbq4hTj6jtJIdyWdjUkk7n&#xA;/MYqq4q7FXYqhNM+O3a4O5uZHlDfzITSI07fulX+O+KovFWN/mNZQ3PkjXmkaVTDp146elLLECRb&#xA;v9oRsvMezVGKskxVIvLv/HY80f8AbTj/AO6ZZYqnuKuxV2KuxVLryGe0uW1C1QyK4AvbZerqooJE&#xA;HeRRt/lLt2XFUbbXMFzAs8DiSJ/ssPY0I9iCKEdsVVMVUbu8tbSL1bmQRoTxWvVmO4VVG7MabKNz&#xA;iqDI1DUNjzsbHvQ8biVT8v7lT8+f+oRiqOt7eC3hSGBFjiQURFFAMVVMVdirsVdirsVdirsVaZVd&#xA;SrAMrCjKdwQexxVLYC+mSx2kjFrCQiOzlYkmNjWkMjHsekbf7E78eSqZ4q7FXYq7FXYq7FXYqhtS&#xA;kkSyl9I8ZZKRRN04vKwjRvoZgcVV440ijSOMcY0AVFHQACgGKrsVSLz7/wAoN5i/7Zl7/wBQ74ql&#xA;en/mJFqfnGLRNKt4NR0qSJpf0xZ3aXAUKrfG8cKOiRmVGhBeUOXBohUcsVRvl6/tB5k8z2Rf/SW1&#xA;GNxHQ/Z/RlnvWlO3jirJMVdirsVdirsVQc2l27zNcQs9rct9uaAhS21PjQho322BZTTtirjYXVKf&#xA;pG4Hvxt/+qWKrrbTLO3l9ZVL3BBU3ErNJJxJqVDuWIWu/Ebe2KorFXYq7FXYq7FXYq7FXYq7FXYq&#xA;snghuIXhmQPFICroehBxVBWU8ttMNPu3LvubS4cisyKKkN/xYn7XiPiH7QVVMMVdirsVdirsVdiq&#xA;AuB6+rW0NKpaKbmQ+DuGiiG/YgyH6B9KqPxV2Ksb/Me/tLXyRrqzvwM+nXiRChNWNu+2wOKpmPLf&#xA;l0aydcGl2Y1ojidU9CL61x48Kevx9SnD4evTbFUH5d/47Hmj/tpx/wDdMssVR93ruh2d/badeajb&#xA;W2oXtfqdnNNGk01OvpRsQz/7EYqhdT83+XtM1e00i9ujHqF7wEEYimdR6rmOL1JERo4vUkBVPUZe&#xA;R2FTiqcYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqo3lpFdQ+m5ZSCGjlQ0dHX7LKd9x&#xA;77HoajbFVGwvJHZrS6ot9CAZANlkUmglQVPwtTp1U7e5VRmKuxV2KuxVzMFBZiAoFST0AxVA6SDJ&#xA;DJet9q9cypsRSKnGEb7isYDEH9onFUdirsVSLz7/AMoN5i/7Zl7/ANQ74qnuKpF5d/47Hmj/ALac&#xA;f/dMssVSnzp+VXl7zhq9lqWq3N4v1IRAWcEkawSCGb1l5ho3cEmqkoymn0Yqx2L8uvy/8peb/LFj&#xA;pA1PThd3M8tjp0NLrTTcx25mlmnkvEuGSVobbgvpyBwB8IFXbFXpVzBpMs1bmO3eYcV/eBC29eI+&#xA;LfehpirTjRmQq/1dkoOStwIoi8lrXsqGo9sVXW8GlK3C3jgVq8uMaoDySgrQd15/jiqKxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxVC31kbhUkif0buA8oJqVoe6sARyR+jL9IowBCrrC/FyHjkT0&#xA;LyCguLcmpUmtGU0HJGoeLU39mBAVRWKuxV2KoK/YzyJYJQibe78VgoQf+Rh+AfSR0xVG4q7FXYqk&#xA;Xn3/AJQbzF/2zL3/AKh3xVjEHmDzvP8AmNp8JtdRtNEuPUS8025tIvSgRbd2Sb65brcQMXmQf8fg&#xA;Ycgvo9XCrIPL013/AIk8zxC3rbHUYybnmNm/Rln8PDr9OKskxVhHmzzPZWnnPRLCfSxdtZy2063x&#xA;neJ7eTU3l02FoYVRhP8AakEvJhwU8tzirNPWT1TFRuQXkTwbjT/Wpxr7Vriq0XURWNuMlJTRf3cg&#xA;I/1hxqv+ypiq5Jkd3UBgYzRuSso/2JIAb6MVX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;ULfWH1gpNFIYLyEH0LgDlTl1R125o1ByX6QQwBCqnb6mPVW1vkFreNsik1jlp3ikIAb/AFftDwpv&#xA;iqOxVCX2ox23GJF9e8l/uLVT8TduR/lQftMdh86AqrrG1khV5J2El1MeU8g2G2yooPRVGw+/qTiq&#xA;JxV2KuxVjf5jzXcfkjXRBb+uH068Ep5hOC/V3+Lf7XyxVkmKpF5d/wCOx5o/7acf/dMssVT3FWE6&#xA;zqtvcedPKxj0e2nje+vdPk1K/tZor23kispritl68Uf7uQwUMyOVYbLXqFWYSTyrMsa28joaVlUx&#xA;8RU9+ThtvYYqtW6nPOtpKOIqtTF8W/RaSfrpiraXEzcK2sqciQeRi+EDuaOdvlXFVfFXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVk0MM8bRTRrLE32o3AZT33B2xVCro9mo4o06qKUVbicKA&#xA;OgUB6AewxVWtbG0tQ3oRhWkNZZCSzuR0Lu1Wb6TiqvirsVdirsVSLz7/AMoN5i/7Zl7/ANQ74qnu&#xA;KpF5d/47Hmj/ALacf/dMssVT3FXnmveYvOLee9GsLK31PTtNabjdh7GO4spYkl4tJJdWy3pT1k/u&#xA;lZoSlC8uxVcVZ3NLe+oRbxRSINmLyshB60oI37e+KrPV1b/lmg/5Hv8A9UcVXRyakXAkghVK/Eyz&#xA;MxA9gYlr9+KonFXYq7FXchUrUcgKkd6H/axV2KuxV2KuxV2KuLAEAkVPQeOKuxV2KuxV2KuxVxYC&#xA;lSBU0FfHFXYq7FXYq7FXYq5mCgsxAUCpJ6AYq7FXYqkXn3/lBvMX/bMvf+od8VSGz8medx+Y1l5p&#xA;1PXbO9sbexubFrCGzmtfTWZonUwhrm5HJmjq7seihaGoKKp5L5Uuhqd9fWevahYDUJVnntYFsWiE&#xA;iQR2/JTPazSCqQLX4+uKrv8ADusf9TRqf/IvTP8AsixV3+HdY/6mjU/+Remf9kWKpZDp1tBrU+lp&#xA;52u11q7peS6eW0n6yyhFi9QQm058eMQFQKYqmf8Ah3WP+po1P/kXpn/ZFirv8O6x/wBTRqf/ACL0&#xA;z/sixV3+HdY/6mjU/wDkXpn/AGRYq7/Dusf9TRqf/IvTP+yLFXf4d1j/AKmjU/8AkXpn/ZFiqDk8&#xA;vS22pJJL5u1CK+1BVt4UcaWrS+gJJQkaGz+Iqrux4jp8sVRn+HdY/wCpo1P/AJF6Z/2RYq7/AA7r&#xA;H/U0an/yL0z/ALIsVd/h3WP+po1P/kXpn/ZFirv8O6x/1NGp/wDIvTP+yLFXf4d1j/qaNT/5F6Z/&#xA;2RYqluraVBY3Njcar51vLOVpTb2DXDaTD6k0wp6aB7RebsBso3xVMv8ADusf9TRqf/IvTP8AsixV&#xA;3+HdY/6mjU/+Remf9kWKu/w7rH/U0an/AMi9M/7IsVd/h3WP+po1P/kXpn/ZFirv8O6x/wBTRqf/&#xA;ACL0z/sixVB6r5eljtfrepebtQt7WyYXLXEw0uKOMx/tu5swoAr32xVGf4d1j/qaNT/5F6Z/2RYq&#xA;7/Dusf8AU0an/wAi9M/7IsVd/h3WP+po1P8A5F6Z/wBkWKu/w7rH/U0an/yL0z/sixV3+HdY/wCp&#xA;o1P/AJF6Z/2RYqg9Y8vyrpN4dV83ahb6aYXW8mmGlxRrEykOWkNmoUUPWuKqtjpd1f2kV5Y+cb+7&#xA;s515wXMA0qSN1P7SOtmVYfLFVf8Aw7rH/U0an/yL0z/sixVDan5Mv9S0+50+680aqbW7ieC4RY9M&#xA;BaOVSjrX6lUVB7YqybFXYq7FXHcdae+KsK078vtTtvOkfmC71pdTt4UIjguLOOK59YxGFrh57R7a&#xA;F5Ch9OrW5pGAq03Yqs1xV2KuxV2KuxVjV15Kjutf0fW7i9e5vNHvLm6glnhtzKILq1ltzZxyQpAV&#xA;iQyhxy5sePxE9QqyXFXYq7FXYq7FWJ+fPIbeavqvC/8AqPpRXFpc1iM3O1vPT9YR0ki9Kb9yvCX4&#xA;uO/wmuKssxV2KuxV2KuxVJPO3lW081+VdS0C64Kl/A8Uc8kSzCGQiiTKjFfijb4l3G/fFU7xV2Ku&#xA;xV2KuxVKfNmi3et+XrzTLO6jsbq4VfQvJrdbtYXR1dZBC7IrMpWqEn4Wo3bFXeVNDOheX7TSmkjm&#xA;e3D+pNEkkayPI7SO/GWW5k5MzEsWkapqcVTbFXYq/wD/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:023AF29051D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:7834222855D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -193.627 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 193.627 li
261.528 193.627 li
261.528 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
261.278 182.724 mo
258.128 182.724 li
10.4282 182.724 mo
13.5781 182.724 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 52 /four putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A75CA669> |-/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWEO+Helvetica /Helvetica findfont ct_VMDictPut/DVPWEO+Helvetica*1 [45{/.notdef}rp /hyphen 6{/.notdef}rp /four 203{/.notdef}rp]DVPWEO+Helvetica nfDVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf0 185.06 mo(-4)[2.33105 0 ]xsh261.278 160.324 mo
258.128 160.324 li
10.4282 160.324 mo
13.5781 160.324 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319EB739C72B00D2CC4607F53D8DAA36825DF613C6C839053BC26A7859D8AA158786D28D1E4DE04046CE941E5159199A77FA8129F02A3ECB8D9E54C278D22D0348DFB3C3C73F55886BF824DB1B2BE764C084A332EAF6E03DAE2729DE4723D54D14DE5E36772632D9593B8015D82D91A7513CF83AED18BF899FB582C1516AE5C3CE963C7A9224066B2CB5D769E52069DB2172C52452A135E45CF579C1E7FB12BEA387FFB8E1E9EB90D4F6BF80D4DDA346E7141D8646431020D523BDB64> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEO+Helvetica /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/DVPWEO+Helvetica*1 [45{/.notdef}rp /hyphen 5{/.notdef}rp /three /four 203{/.notdef}rp]DVPWEO+Helvetica nfDVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf0 162.662 mo(-3)[2.33105 0 ]xsh261.278 137.974 mo
258.128 137.974 li
10.4282 137.974 mo
13.5781 137.974 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEO+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/DVPWEO+Helvetica*1 [45{/.notdef}rp /hyphen 4{/.notdef}rp /two /three /four 203{/.notdef}rp]DVPWEO+Helvetica nfDVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf0 140.31 mo(-2)[2.33105 0 ]xsh261.278 115.574 mo
258.128 115.574 li
10.4282 115.574 mo
13.5781 115.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEO+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/DVPWEO+Helvetica*1 [45{/.notdef}rp /hyphen 3{/.notdef}rp /one /two /three /four 203{/.notdef}rp]DVPWEO+Helvetica nfDVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf0 117.912 mo(-1)[2.33105 0 ]xsh261.278 93.1738 mo
258.128 93.1738 li
10.4282 93.1738 mo
13.5781 93.1738 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEO+Helvetica /Encoding getdup 32 /space putdup 48 /zero putpop%ADOEndSubsetFont
/DVPWEO+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]DVPWEO+Helvetica nfDVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf0.382813 95.5054 mo( )sh2.33594 95.5054 mo(0)sh261.278 70.8237 mo
258.128 70.8237 li
10.4282 70.8237 mo
13.5781 70.8237 li
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf0.382813 73.1616 mo( )sh2.33594 73.1616 mo(1)sh261.278 48.4238 mo
258.128 48.4238 li
10.4282 48.4238 mo
13.5781 48.4238 li
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf0.382813 50.7554 mo( )sh2.33594 50.7554 mo(2)sh261.278 26.0737 mo
258.128 26.0737 li
10.4282 26.0737 mo
13.5781 26.0737 li
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf0.382813 28.4116 mo( )sh2.33594 28.4116 mo(3)sh261.278 3.67383 mo
258.128 3.67383 li
10.4282 3.67383 mo
13.5781 3.67383 li
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf0.382813 6.01318 mo( )sh2.33594 6.01318 mo(4)sh35.5283 3.67383 mo
35.5283 6.82373 li
35.5283 182.724 mo
35.5283 179.574 li
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf32.4141 192.052 mo(-2)[2.33105 0 ]xsh85.6782 3.67383 mo
85.6782 6.82373 li
85.6782 182.724 mo
85.6782 179.574 li
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf82.5625 192.052 mo(-1)[2.33105 0 ]xsh135.878 3.67383 mo
135.878 6.82373 li
135.878 182.724 mo
135.878 179.574 li
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf132.953 192.052 mo( )sh134.898 192.052 mo(0)sh186.028 3.67383 mo
186.028 6.82373 li
186.028 182.724 mo
186.028 179.574 li
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf183.109 192.052 mo( )sh185.047 192.052 mo(1)sh236.178 3.67383 mo
236.178 6.82373 li
236.178 182.724 mo
236.178 179.574 li
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf233.258 192.052 mo( )sh235.203 192.052 mo(2)sh10.4282 3.67383 mo
10.4282 182.724 li
261.278 182.724 li
261.278 3.67383 li
10.4282 3.67383 li
10.4282 3.67383 li
cp
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf25.2031 178.412 mo(-2)[2.33105 0 ]xsh0.25 lw
254.979 27.4736 mo
255.229 25.5737 li
255.479 23.6738 li
255.778 21.7236 li
256.028 19.7734 li
256.278 17.8237 li
256.528 15.8735 li
256.778 13.8735 li
257.028 11.8735 li
257.278 9.82373 li
257.528 7.77344 li
257.778 5.72363 li
258.028 3.67383 li
228.878 146.724 mo
229.128 146.173 li
229.378 145.625 li
229.628 145.074 li
229.878 144.523 li
230.128 143.923 li
230.378 143.324 li
230.628 142.724 li
230.878 142.125 li
231.128 141.474 li
231.378 140.875 li
231.628 140.224 li
231.878 139.574 li
232.128 138.875 li
232.378 138.224 li
232.628 137.523 li
232.928 136.824 li
233.178 136.125 li
233.428 135.423 li
233.678 134.673 li
233.928 133.974 li
234.178 133.224 li
234.428 132.474 li
234.678 131.673 li
234.928 130.923 li
235.178 130.125 li
235.428 129.324 li
235.678 128.523 li
235.928 127.673 li
236.178 126.875 li
236.428 126.023 li
236.678 125.173 li
236.928 124.273 li
237.178 123.423 li
237.428 122.523 li
237.678 121.625 li
237.928 120.724 li
238.178 119.773 li
238.428 118.824 li
238.678 117.875 li
238.928 116.923 li
239.178 115.974 li
239.428 114.974 li
239.678 113.974 li
239.928 112.974 li
240.178 111.974 li
240.428 110.923 li
240.678 109.875 li
240.928 108.824 li
241.178 107.724 li
241.428 106.673 li
241.678 105.574 li
241.928 104.474 li
242.178 103.324 li
242.428 102.224 li
242.678 101.074 li
242.928 99.8745 li
243.178 98.7241 li
243.428 97.5234 li
243.678 96.3237 li
243.928 95.1235 li
244.229 93.8735 li
244.479 92.6738 li
244.729 91.4238 li
244.979 90.1235 li
245.229 88.8735 li
245.479 87.5737 li
245.729 86.2734 li
245.979 84.9238 li
246.229 83.5737 li
246.479 82.2236 li
246.729 80.8735 li
246.979 79.5234 li
247.229 78.1235 li
247.479 76.7236 li
247.729 75.2734 li
247.979 73.8237 li
248.229 72.3735 li
248.479 70.9238 li
248.729 69.4736 li
248.979 67.9736 li
249.229 66.4238 li
249.479 64.9238 li
249.729 63.3735 li
249.979 61.8237 li
250.229 60.2734 li
250.479 58.6738 li
250.729 57.0737 li
250.979 55.4736 li
251.229 53.8237 li
251.479 52.1738 li
251.729 50.5234 li
251.979 48.8237 li
252.229 47.1235 li
252.479 45.4238 li
252.729 43.7236 li
252.979 41.9736 li
253.229 40.2236 li
253.479 38.4238 li
253.729 36.6738 li
253.979 34.8237 li
254.229 33.0234 li
254.479 31.1738 li
254.729 29.3237 li
254.979 27.4736 li
202.778 163.523 mo
203.028 163.673 li
203.278 163.773 li
203.528 163.875 li
203.778 163.974 li
204.028 164.074 li
204.278 164.173 li
204.528 164.273 li
204.778 164.375 li
205.028 164.474 li
205.278 164.574 li
205.528 164.623 li
205.778 164.724 li
206.028 164.773 li
206.278 164.873 li
206.528 164.923 li
206.778 164.974 li
207.028 165.023 li
207.278 165.074 li
207.528 165.125 li
207.778 165.173 li
208.028 165.224 li
208.278 165.224 li
208.528 165.273 li
208.778 165.273 li
209.028 165.273 li
209.278 165.324 li
209.528 165.324 li
209.778 165.324 li
210.078 165.324 li
210.328 165.324 li
210.578 165.273 li
210.828 165.273 li
211.078 165.224 li
211.328 165.224 li
211.578 165.173 li
211.828 165.125 li
212.078 165.074 li
212.328 165.023 li
212.578 164.974 li
212.828 164.923 li
213.078 164.873 li
213.328 164.773 li
213.578 164.724 li
213.828 164.623 li
214.078 164.523 li
214.328 164.423 li
214.578 164.324 li
214.828 164.224 li
215.078 164.074 li
215.328 163.974 li
215.578 163.824 li
215.828 163.724 li
216.078 163.574 li
216.328 163.423 li
216.578 163.273 li
216.828 163.125 li
217.078 162.923 li
217.328 162.773 li
217.578 162.574 li
217.828 162.423 li
218.078 162.224 li
218.328 162.023 li
218.578 161.824 li
218.828 161.574 li
219.078 161.375 li
219.328 161.173 li
219.578 160.923 li
219.828 160.673 li
220.078 160.423 li
220.328 160.173 li
220.578 159.923 li
220.828 159.625 li
221.078 159.375 li
221.328 159.074 li
221.628 158.773 li
221.878 158.474 li
222.128 158.173 li
222.378 157.875 li
222.628 157.523 li
222.878 157.173 li
223.128 156.875 li
223.378 156.523 li
223.628 156.173 li
223.878 155.773 li
224.128 155.423 li
224.378 155.023 li
224.628 154.673 li
224.878 154.273 li
225.128 153.875 li
225.378 153.423 li
225.628 153.023 li
225.878 152.574 li
226.128 152.173 li
226.378 151.724 li
226.628 151.224 li
226.878 150.773 li
227.128 150.324 li
227.378 149.824 li
227.628 149.324 li
227.878 148.824 li
228.128 148.324 li
228.378 147.824 li
228.628 147.273 li
228.878 146.724 li
176.678 138.224 mo
176.928 138.523 li
177.178 138.824 li
177.428 139.125 li
177.678 139.423 li
177.928 139.724 li
178.178 140.023 li
178.428 140.324 li
178.678 140.625 li
178.928 140.923 li
179.178 141.224 li
179.428 141.474 li
179.678 141.773 li
179.928 142.074 li
180.178 142.375 li
180.428 142.673 li
180.678 142.974 li
180.928 143.273 li
181.178 143.574 li
181.428 143.875 li
181.678 144.173 li
181.928 144.474 li
182.178 144.773 li
182.428 145.023 li
182.678 145.324 li
182.928 145.625 li
183.178 145.923 li
183.428 146.224 li
183.678 146.523 li
183.928 146.773 li
184.178 147.074 li
184.428 147.375 li
184.678 147.673 li
184.928 147.923 li
185.178 148.224 li
185.428 148.523 li
185.678 148.773 li
185.928 149.074 li
186.178 149.324 li
186.428 149.625 li
186.678 149.923 li
186.928 150.173 li
187.229 150.474 li
187.479 150.724 li
187.729 151.023 li
187.979 151.273 li
188.229 151.523 li
188.479 151.824 li
188.729 152.074 li
188.979 152.324 li
189.229 152.623 li
189.479 152.873 li
189.729 153.123 li
189.979 153.373 li
190.229 153.623 li
190.479 153.923 li
190.729 154.173 li
190.979 154.423 li
191.229 154.673 li
191.479 154.923 li
191.729 155.173 li
191.979 155.373 li
192.229 155.623 li
192.479 155.873 li
192.729 156.123 li
192.979 156.373 li
193.229 156.574 li
193.479 156.824 li
193.729 157.074 li
193.979 157.273 li
194.229 157.523 li
194.479 157.724 li
194.729 157.974 li
194.979 158.173 li
195.229 158.373 li
195.479 158.574 li
195.729 158.824 li
195.979 159.023 li
196.229 159.224 li
196.479 159.423 li
196.729 159.623 li
196.979 159.824 li
197.229 160.023 li
197.479 160.224 li
197.729 160.423 li
197.979 160.574 li
198.229 160.773 li
198.479 160.974 li
198.778 161.123 li
199.028 161.324 li
199.278 161.474 li
199.528 161.623 li
199.778 161.824 li
200.028 161.974 li
200.278 162.123 li
200.528 162.273 li
200.778 162.423 li
201.028 162.574 li
201.278 162.724 li
201.528 162.873 li
201.778 163.023 li
202.028 163.173 li
202.278 163.273 li
202.528 163.423 li
202.778 163.523 li
150.528 111.423 mo
150.778 111.625 li
151.028 111.773 li
151.278 111.974 li
151.528 112.173 li
151.778 112.375 li
152.028 112.523 li
152.278 112.724 li
152.528 112.923 li
152.778 113.125 li
153.078 113.324 li
153.328 113.523 li
153.578 113.724 li
153.828 113.923 li
154.078 114.173 li
154.328 114.375 li
154.578 114.574 li
154.828 114.773 li
155.078 114.974 li
155.328 115.224 li
155.578 115.423 li
155.828 115.625 li
156.078 115.875 li
156.328 116.074 li
156.578 116.324 li
156.828 116.523 li
157.078 116.773 li
157.328 117.023 li
157.578 117.224 li
157.828 117.474 li
158.078 117.673 li
158.328 117.923 li
158.578 118.173 li
158.828 118.423 li
159.078 118.673 li
159.328 118.875 li
159.578 119.125 li
159.828 119.375 li
160.078 119.625 li
160.328 119.875 li
160.578 120.125 li
160.828 120.375 li
161.078 120.625 li
161.328 120.875 li
161.578 121.125 li
161.828 121.375 li
162.078 121.673 li
162.328 121.923 li
162.578 122.173 li
162.828 122.423 li
163.078 122.673 li
163.328 122.974 li
163.578 123.224 li
163.828 123.474 li
164.078 123.773 li
164.328 124.023 li
164.628 124.273 li
164.878 124.574 li
165.128 124.824 li
165.378 125.125 li
165.628 125.375 li
165.878 125.673 li
166.128 125.923 li
166.378 126.224 li
166.628 126.474 li
166.878 126.773 li
167.128 127.074 li
167.378 127.324 li
167.628 127.623 li
167.878 127.923 li
168.128 128.173 li
168.378 128.474 li
168.628 128.773 li
168.878 129.023 li
169.128 129.324 li
169.378 129.623 li
169.628 129.923 li
169.878 130.224 li
170.128 130.474 li
170.378 130.773 li
170.628 131.074 li
170.878 131.373 li
171.128 131.673 li
171.378 131.974 li
171.628 132.224 li
171.878 132.523 li
172.128 132.824 li
172.378 133.123 li
172.628 133.423 li
172.878 133.724 li
173.128 134.023 li
173.378 134.324 li
173.628 134.623 li
173.878 134.923 li
174.128 135.224 li
174.378 135.523 li
174.628 135.824 li
174.878 136.123 li
175.128 136.423 li
175.378 136.724 li
175.628 137.023 li
175.928 137.324 li
176.178 137.623 li
176.428 137.923 li
176.678 138.224 li
124.428 104.125 mo
124.678 104.074 li
124.928 104.074 li
125.178 104.023 li
125.428 103.974 li
125.678 103.923 li
125.928 103.923 li
126.178 103.875 li
126.428 103.875 li
126.678 103.824 li
126.928 103.824 li
127.178 103.773 li
127.428 103.773 li
127.678 103.724 li
127.928 103.724 li
128.178 103.724 li
128.428 103.724 li
128.678 103.724 li
128.928 103.673 li
129.178 103.673 li
129.428 103.673 li
129.678 103.673 li
129.928 103.673 li
130.228 103.673 li
130.478 103.724 li
130.728 103.724 li
130.978 103.724 li
131.228 103.724 li
131.478 103.773 li
131.728 103.773 li
131.978 103.773 li
132.229 103.824 li
132.479 103.824 li
132.729 103.875 li
132.979 103.875 li
133.229 103.923 li
133.479 103.974 li
133.729 103.974 li
133.979 104.023 li
134.229 104.074 li
134.479 104.125 li
134.729 104.173 li
134.979 104.224 li
135.229 104.273 li
135.479 104.324 li
135.729 104.375 li
135.979 104.423 li
136.229 104.474 li
136.479 104.523 li
136.729 104.625 li
136.979 104.673 li
137.229 104.724 li
137.478 104.824 li
137.728 104.875 li
137.978 104.923 li
138.228 105.023 li
138.478 105.125 li
138.728 105.173 li
138.978 105.273 li
139.228 105.375 li
139.478 105.423 li
139.728 105.523 li
139.978 105.625 li
140.228 105.724 li
140.478 105.824 li
140.728 105.923 li
140.978 106.023 li
141.228 106.125 li
141.478 106.224 li
141.778 106.324 li
142.028 106.423 li
142.278 106.523 li
142.528 106.673 li
142.778 106.773 li
143.028 106.875 li
143.278 107.023 li
143.528 107.125 li
143.778 107.273 li
144.028 107.375 li
144.278 107.523 li
144.528 107.623 li
144.778 107.773 li
145.028 107.923 li
145.278 108.074 li
145.528 108.173 li
145.778 108.324 li
146.028 108.474 li
146.278 108.623 li
146.528 108.773 li
146.778 108.923 li
147.028 109.074 li
147.278 109.224 li
147.528 109.373 li
147.778 109.523 li
148.028 109.724 li
148.278 109.873 li
148.528 110.023 li
148.778 110.173 li
149.028 110.375 li
149.278 110.523 li
149.528 110.724 li
149.778 110.875 li
150.028 111.074 li
150.278 111.224 li
150.528 111.423 li
98.3281 117.574 mo
98.5781 117.375 li
98.8281 117.224 li
99.0781 117.023 li
99.3281 116.824 li
99.5781 116.625 li
99.8281 116.474 li
100.078 116.273 li
100.328 116.125 li
100.578 115.923 li
100.828 115.724 li
101.078 115.574 li
101.328 115.375 li
101.578 115.173 li
101.828 115.023 li
102.078 114.824 li
102.328 114.673 li
102.578 114.474 li
102.828 114.324 li
103.078 114.123 li
103.328 113.974 li
103.578 113.773 li
103.828 113.623 li
104.078 113.474 li
104.328 113.273 li
104.578 113.123 li
104.828 112.923 li
105.078 112.773 li
105.328 112.623 li
105.578 112.423 li
105.828 112.273 li
106.078 112.123 li
106.328 111.974 li
106.578 111.773 li
106.828 111.623 li
107.078 111.474 li
107.378 111.324 li
107.628 111.173 li
107.878 111.023 li
108.128 110.824 li
108.378 110.673 li
108.628 110.523 li
108.878 110.373 li
109.128 110.224 li
109.378 110.074 li
109.628 109.923 li
109.878 109.773 li
110.128 109.673 li
110.378 109.523 li
110.628 109.373 li
110.878 109.224 li
111.128 109.074 li
111.378 108.974 li
111.628 108.824 li
111.878 108.673 li
112.128 108.574 li
112.378 108.423 li
112.628 108.273 li
112.878 108.173 li
113.128 108.023 li
113.378 107.923 li
113.628 107.773 li
113.878 107.673 li
114.128 107.523 li
114.378 107.423 li
114.628 107.324 li
114.878 107.173 li
115.128 107.074 li
115.378 106.974 li
115.628 106.875 li
115.878 106.724 li
116.128 106.625 li
116.378 106.523 li
116.628 106.423 li
116.878 106.324 li
117.128 106.224 li
117.378 106.125 li
117.628 106.023 li
117.878 105.923 li
118.128 105.824 li
118.378 105.773 li
118.628 105.673 li
118.929 105.574 li
119.179 105.474 li
119.429 105.423 li
119.679 105.324 li
119.929 105.224 li
120.179 105.173 li
120.429 105.074 li
120.679 105.023 li
120.929 104.923 li
121.179 104.875 li
121.429 104.824 li
121.679 104.724 li
121.929 104.673 li
122.179 104.625 li
122.429 104.523 li
122.679 104.474 li
122.929 104.423 li
123.179 104.375 li
123.429 104.324 li
123.679 104.273 li
123.929 104.224 li
124.179 104.173 li
124.429 104.125 li
72.1782 133.273 mo
72.4282 133.173 li
72.6782 133.125 li
72.9282 133.074 li
73.228 133.023 li
73.478 132.923 li
73.728 132.875 li
73.978 132.773 li
74.228 132.724 li
74.478 132.625 li
74.728 132.574 li
74.978 132.474 li
75.228 132.375 li
75.478 132.273 li
75.728 132.173 li
75.978 132.074 li
76.228 131.974 li
76.478 131.875 li
76.728 131.773 li
76.978 131.673 li
77.228 131.574 li
77.478 131.474 li
77.728 131.324 li
77.978 131.224 li
78.228 131.125 li
78.478 130.974 li
78.728 130.875 li
78.978 130.724 li
79.228 130.625 li
79.478 130.474 li
79.728 130.375 li
79.9785 130.224 li
80.2285 130.074 li
80.4785 129.974 li
80.7285 129.824 li
80.9785 129.673 li
81.2285 129.523 li
81.4785 129.375 li
81.7285 129.224 li
81.9785 129.125 li
82.2285 128.974 li
82.4785 128.824 li
82.7285 128.673 li
82.9785 128.474 li
83.2285 128.324 li
83.4785 128.173 li
83.7285 128.023 li
83.9785 127.875 li
84.2285 127.724 li
84.4785 127.523 li
84.7783 127.375 li
85.0283 127.224 li
85.2783 127.074 li
85.5283 126.875 li
85.7783 126.724 li
86.0283 126.574 li
86.2783 126.375 li
86.5283 126.224 li
86.7783 126.023 li
87.0283 125.875 li
87.2783 125.673 li
87.5283 125.523 li
87.7783 125.324 li
88.0283 125.173 li
88.2783 124.974 li
88.5283 124.824 li
88.7783 124.625 li
89.0283 124.474 li
89.2783 124.273 li
89.5283 124.074 li
89.7783 123.923 li
90.0283 123.724 li
90.2783 123.523 li
90.5283 123.375 li
90.7783 123.173 li
91.0283 122.974 li
91.2783 122.824 li
91.5283 122.625 li
91.7783 122.423 li
92.0283 122.224 li
92.2783 122.074 li
92.5283 121.875 li
92.7783 121.673 li
93.0283 121.523 li
93.2783 121.324 li
93.5283 121.125 li
93.7783 120.923 li
94.0283 120.773 li
94.2783 120.574 li
94.5283 120.373 li
94.7783 120.173 li
95.0283 120.023 li
95.2783 119.824 li
95.5283 119.623 li
95.7783 119.423 li
96.0786 119.273 li
96.3286 119.074 li
96.5786 118.873 li
96.8286 118.673 li
97.0786 118.523 li
97.3286 118.324 li
97.5786 118.123 li
97.8286 117.923 li
98.0786 117.773 li
98.3286 117.574 li
46.0781 112.974 mo
46.3281 113.523 li
46.5781 114.023 li
46.8281 114.523 li
47.0781 115.074 li
47.3281 115.574 li
47.5781 116.023 li
47.8281 116.523 li
48.0781 117.023 li
48.3281 117.474 li
48.5781 117.923 li
48.8281 118.375 li
49.0781 118.824 li
49.3281 119.273 li
49.5781 119.673 li
49.8281 120.125 li
50.0781 120.523 li
50.3784 120.923 li
50.6284 121.324 li
50.8784 121.724 li
51.1284 122.125 li
51.3784 122.474 li
51.6284 122.824 li
51.8784 123.224 li
52.1284 123.574 li
52.3784 123.923 li
52.6284 124.224 li
52.8784 124.574 li
53.1284 124.923 li
53.3784 125.224 li
53.6284 125.523 li
53.8784 125.824 li
54.1284 126.125 li
54.3784 126.423 li
54.6284 126.724 li
54.8784 126.974 li
55.1284 127.273 li
55.3784 127.523 li
55.6284 127.773 li
55.8784 128.023 li
56.1284 128.273 li
56.3784 128.523 li
56.6284 128.773 li
56.8784 128.974 li
57.1284 129.224 li
57.3784 129.423 li
57.6284 129.625 li
57.8784 129.824 li
58.1284 130.023 li
58.3784 130.224 li
58.6284 130.423 li
58.8784 130.574 li
59.1284 130.773 li
59.3784 130.923 li
59.6284 131.074 li
59.8784 131.273 li
60.1284 131.423 li
60.3784 131.574 li
60.6284 131.673 li
60.8784 131.824 li
61.1284 131.974 li
61.3784 132.074 li
61.6284 132.224 li
61.9282 132.324 li
62.1782 132.423 li
62.4282 132.523 li
62.6782 132.625 li
62.9282 132.724 li
63.1782 132.824 li
63.4282 132.923 li
63.6782 132.974 li
63.9282 133.074 li
64.1787 133.125 li
64.4287 133.224 li
64.6787 133.273 li
64.9287 133.324 li
65.1787 133.375 li
65.4287 133.423 li
65.6787 133.474 li
65.9287 133.523 li
66.1787 133.574 li
66.4287 133.574 li
66.6787 133.625 li
66.9287 133.625 li
67.1787 133.673 li
67.4287 133.673 li
67.6787 133.673 li
67.9287 133.673 li
68.1787 133.673 li
68.4287 133.673 li
68.6787 133.673 li
68.9287 133.673 li
69.1787 133.673 li
69.4287 133.673 li
69.6787 133.625 li
69.9287 133.625 li
70.1787 133.574 li
70.4287 133.574 li
70.6787 133.523 li
70.9287 133.474 li
71.1787 133.423 li
71.4287 133.423 li
71.6787 133.375 li
71.9287 133.324 li
72.1787 133.273 li
20.6782 3.67383 mo
20.728 4.07373 li
20.978 5.82373 li
21.228 7.52344 li
21.478 9.22363 li
21.728 10.9238 li
21.978 12.5737 li
22.228 14.2236 li
22.478 15.8735 li
22.728 17.4736 li
22.978 19.0737 li
23.228 20.6738 li
23.478 22.2734 li
23.728 23.8237 li
23.978 25.3735 li
24.228 26.9238 li
24.478 28.4238 li
24.728 29.9238 li
24.978 31.4238 li
25.228 32.8735 li
25.478 34.3735 li
25.728 35.8237 li
25.978 37.2236 li
26.228 38.6738 li
26.478 40.0737 li
26.728 41.4736 li
26.978 42.8237 li
27.228 44.2236 li
27.478 45.5737 li
27.7783 46.8735 li
28.0283 48.2236 li
28.2783 49.5234 li
28.5283 50.8237 li
28.7783 52.1235 li
29.0283 53.3735 li
29.2783 54.6235 li
29.5283 55.8735 li
29.7783 57.1235 li
30.0283 58.3237 li
30.2783 59.5737 li
30.5283 60.7734 li
30.7783 61.9238 li
31.0283 63.1235 li
31.2783 64.2734 li
31.5283 65.4238 li
31.7783 66.5234 li
32.0283 67.6738 li
32.2783 68.7734 li
32.5283 69.8735 li
32.7783 70.9736 li
33.0283 72.0234 li
33.2783 73.0737 li
33.5283 74.1235 li
33.7783 75.1738 li
34.0283 76.1738 li
34.2783 77.2236 li
34.5283 78.2236 li
34.7783 79.2236 li
35.0283 80.1738 li
35.2783 81.1235 li
35.5283 82.1235 li
35.7783 83.0234 li
36.0283 83.9736 li
36.2783 84.9238 li
36.5283 85.8237 li
36.7783 86.7236 li
37.0283 87.6235 li
37.2783 88.4736 li
37.5283 89.3735 li
37.7783 90.2236 li
38.0283 91.0737 li
38.2783 91.9238 li
38.5283 92.7236 li
38.7783 93.5234 li
39.0786 94.3735 li
39.3286 95.1235 li
39.5786 95.9238 li
39.8286 96.7236 li
40.0786 97.4736 li
40.3286 98.2241 li
40.5786 98.9741 li
40.8286 99.7241 li
41.0786 100.423 li
41.3286 101.125 li
41.5786 101.875 li
41.8286 102.574 li
42.0786 103.224 li
42.3286 103.923 li
42.5786 104.574 li
42.8286 105.224 li
43.0786 105.875 li
43.3286 106.523 li
43.5786 107.173 li
43.8286 107.773 li
44.0786 108.375 li
44.3286 108.974 li
44.5786 109.574 li
44.8286 110.173 li
45.0786 110.773 li
45.3286 111.324 li
45.5786 111.875 li
45.8286 112.423 li
46.0786 112.974 li
35.6279 176.074 mo
55.5781 176.074 li
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf25.2031 171.412 mo(-1)[2.33105 0 ]xsh[4 2 ] 0 dsh
220.828 89.8237 mo
221.078 89.1235 li
221.328 88.4736 li
221.628 87.7734 li
221.878 87.1235 li
222.128 86.4238 li
222.378 85.7236 li
222.628 85.0234 li
222.878 84.2734 li
223.128 83.5737 li
223.378 82.8237 li
223.628 82.0737 li
223.878 81.3237 li
224.128 80.5737 li
224.378 79.7734 li
224.628 78.9736 li
224.878 78.2236 li
225.128 77.4238 li
225.378 76.5737 li
225.628 75.7734 li
225.878 74.9238 li
226.128 74.0737 li
226.378 73.2236 li
226.628 72.3735 li
226.878 71.5234 li
227.128 70.6235 li
227.378 69.7236 li
227.628 68.8237 li
227.878 67.9238 li
228.128 67.0234 li
228.378 66.0737 li
228.628 65.1235 li
228.878 64.1738 li
229.128 63.2236 li
229.378 62.2734 li
229.628 61.2734 li
229.878 60.2734 li
230.128 59.2734 li
230.378 58.2734 li
230.628 57.2236 li
230.878 56.1738 li
231.128 55.1235 li
231.378 54.0737 li
231.628 53.0234 li
231.878 51.9238 li
232.128 50.8237 li
232.378 49.7236 li
232.628 48.6235 li
232.928 47.4736 li
233.178 46.3735 li
233.428 45.2236 li
233.678 44.0234 li
233.928 42.8735 li
234.178 41.6738 li
234.428 40.4736 li
234.678 39.2734 li
234.928 38.0737 li
235.178 36.8237 li
235.428 35.5737 li
235.678 34.3237 li
235.928 33.0737 li
236.178 31.7734 li
236.428 30.4736 li
236.678 29.1738 li
236.928 27.8735 li
237.178 26.5234 li
237.428 25.1738 li
237.678 23.8237 li
237.928 22.4736 li
238.178 21.0737 li
238.428 19.6738 li
238.678 18.2734 li
238.928 16.8735 li
239.178 15.4238 li
239.428 13.9736 li
239.678 12.5234 li
239.928 11.0737 li
240.178 9.57373 li
240.428 8.07373 li
240.678 6.57373 li
240.928 5.02344 li
241.178 3.67383 li
194.729 121.523 mo
194.979 121.474 li
195.229 121.423 li
195.479 121.375 li
195.729 121.324 li
195.979 121.273 li
196.229 121.224 li
196.479 121.125 li
196.729 121.074 li
196.979 120.974 li
197.229 120.923 li
197.479 120.824 li
197.729 120.724 li
197.979 120.673 li
198.229 120.574 li
198.479 120.474 li
198.778 120.375 li
199.028 120.224 li
199.278 120.125 li
199.528 120.023 li
199.778 119.923 li
200.028 119.773 li
200.278 119.673 li
200.528 119.523 li
200.778 119.375 li
201.028 119.224 li
201.278 119.074 li
201.528 118.923 li
201.778 118.773 li
202.028 118.625 li
202.278 118.474 li
202.528 118.273 li
202.778 118.125 li
203.028 117.923 li
203.278 117.773 li
203.528 117.574 li
203.778 117.375 li
204.028 117.173 li
204.278 116.974 li
204.528 116.773 li
204.778 116.523 li
205.028 116.324 li
205.278 116.125 li
205.528 115.875 li
205.778 115.625 li
206.028 115.375 li
206.278 115.125 li
206.528 114.875 li
206.778 114.625 li
207.028 114.375 li
207.278 114.125 li
207.528 113.824 li
207.778 113.523 li
208.028 113.273 li
208.278 112.974 li
208.528 112.673 li
208.778 112.375 li
209.028 112.074 li
209.278 111.724 li
209.528 111.423 li
209.778 111.074 li
210.078 110.773 li
210.328 110.423 li
210.578 110.074 li
210.828 109.724 li
211.078 109.375 li
211.328 108.974 li
211.578 108.625 li
211.828 108.224 li
212.078 107.875 li
212.328 107.474 li
212.578 107.074 li
212.828 106.673 li
213.078 106.224 li
213.328 105.824 li
213.578 105.423 li
213.828 104.974 li
214.078 104.523 li
214.328 104.074 li
214.578 103.625 li
214.828 103.173 li
215.078 102.673 li
215.328 102.224 li
215.578 101.724 li
215.828 101.224 li
216.078 100.724 li
216.328 100.224 li
216.578 99.7241 li
216.828 99.2241 li
217.078 98.6733 li
217.328 98.1245 li
217.578 97.624 li
217.828 97.0234 li
218.078 96.4736 li
218.328 95.9233 li
218.578 95.3237 li
218.828 94.7734 li
219.078 94.1733 li
219.328 93.5737 li
219.578 92.9736 li
219.828 92.3237 li
220.078 91.7236 li
220.328 91.0737 li
220.578 90.4233 li
220.828 89.8237 li
168.628 113.625 mo
168.878 113.773 li
169.128 113.875 li
169.378 114.023 li
169.628 114.173 li
169.878 114.324 li
170.128 114.423 li
170.378 114.574 li
170.628 114.724 li
170.878 114.875 li
171.128 114.974 li
171.378 115.125 li
171.628 115.273 li
171.878 115.423 li
172.128 115.523 li
172.378 115.673 li
172.628 115.773 li
172.878 115.923 li
173.128 116.074 li
173.378 116.173 li
173.628 116.324 li
173.878 116.423 li
174.128 116.574 li
174.378 116.724 li
174.628 116.824 li
174.878 116.974 li
175.128 117.074 li
175.378 117.224 li
175.628 117.324 li
175.928 117.423 li
176.178 117.574 li
176.428 117.673 li
176.678 117.824 li
176.928 117.923 li
177.178 118.023 li
177.428 118.173 li
177.678 118.273 li
177.928 118.373 li
178.178 118.474 li
178.428 118.623 li
178.678 118.724 li
178.928 118.824 li
179.178 118.923 li
179.428 119.023 li
179.678 119.123 li
179.928 119.224 li
180.178 119.324 li
180.428 119.423 li
180.678 119.523 li
180.928 119.623 li
181.178 119.724 li
181.428 119.824 li
181.678 119.923 li
181.928 119.974 li
182.178 120.074 li
182.428 120.173 li
182.678 120.224 li
182.928 120.324 li
183.178 120.423 li
183.428 120.474 li
183.678 120.574 li
183.928 120.623 li
184.178 120.724 li
184.428 120.773 li
184.678 120.824 li
184.928 120.923 li
185.178 120.974 li
185.428 121.023 li
185.678 121.123 li
185.928 121.173 li
186.178 121.224 li
186.428 121.273 li
186.678 121.324 li
186.928 121.373 li
187.229 121.423 li
187.479 121.474 li
187.729 121.474 li
187.979 121.523 li
188.229 121.574 li
188.479 121.623 li
188.729 121.623 li
188.979 121.673 li
189.229 121.673 li
189.479 121.724 li
189.729 121.724 li
189.979 121.773 li
190.229 121.773 li
190.479 121.773 li
190.729 121.773 li
190.979 121.824 li
191.229 121.824 li
191.479 121.824 li
191.729 121.824 li
191.979 121.773 li
192.229 121.773 li
192.479 121.773 li
192.729 121.773 li
192.979 121.724 li
193.229 121.724 li
193.479 121.673 li
193.729 121.673 li
193.979 121.623 li
194.229 121.623 li
194.479 121.574 li
194.729 121.523 li
142.528 100.673 mo
142.778 100.773 li
143.028 100.824 li
143.278 100.923 li
143.528 101.023 li
143.778 101.125 li
144.028 101.173 li
144.278 101.273 li
144.528 101.375 li
144.778 101.474 li
145.028 101.574 li
145.278 101.673 li
145.528 101.773 li
145.778 101.873 li
146.028 101.974 li
146.278 102.074 li
146.528 102.173 li
146.778 102.273 li
147.028 102.373 li
147.278 102.474 li
147.528 102.574 li
147.778 102.673 li
148.028 102.773 li
148.278 102.873 li
148.528 103.023 li
148.778 103.123 li
149.028 103.224 li
149.278 103.324 li
149.528 103.474 li
149.778 103.574 li
150.028 103.673 li
150.278 103.773 li
150.528 103.923 li
150.778 104.023 li
151.028 104.123 li
151.278 104.273 li
151.528 104.373 li
151.778 104.474 li
152.028 104.623 li
152.278 104.724 li
152.528 104.873 li
152.778 104.974 li
153.078 105.123 li
153.328 105.224 li
153.578 105.373 li
153.828 105.474 li
154.078 105.623 li
154.328 105.724 li
154.578 105.873 li
154.828 105.974 li
155.078 106.123 li
155.328 106.273 li
155.578 106.373 li
155.828 106.523 li
156.078 106.623 li
156.328 106.773 li
156.578 106.923 li
156.828 107.023 li
157.078 107.173 li
157.328 107.324 li
157.578 107.423 li
157.828 107.574 li
158.078 107.724 li
158.328 107.824 li
158.578 107.974 li
158.828 108.123 li
159.078 108.273 li
159.328 108.373 li
159.578 108.523 li
159.828 108.673 li
160.078 108.824 li
160.328 108.974 li
160.578 109.074 li
160.828 109.224 li
161.078 109.373 li
161.328 109.523 li
161.578 109.673 li
161.828 109.773 li
162.078 109.923 li
162.328 110.074 li
162.578 110.224 li
162.828 110.373 li
163.078 110.474 li
163.328 110.623 li
163.578 110.773 li
163.828 110.923 li
164.078 111.074 li
164.328 111.224 li
164.628 111.373 li
164.878 111.474 li
165.128 111.623 li
165.378 111.773 li
165.628 111.923 li
165.878 112.074 li
166.128 112.224 li
166.378 112.324 li
166.628 112.474 li
166.878 112.623 li
167.128 112.773 li
167.378 112.923 li
167.628 113.074 li
167.878 113.173 li
168.128 113.324 li
168.378 113.474 li
168.628 113.623 li
116.378 97.5732 mo
116.628 97.5732 li
116.878 97.5234 li
117.128 97.5234 li
117.378 97.5234 li
117.628 97.4736 li
117.878 97.4736 li
118.128 97.4736 li
118.378 97.4238 li
118.628 97.4238 li
118.928 97.4238 li
119.178 97.4238 li
119.428 97.4238 li
119.678 97.374 li
119.928 97.374 li
120.178 97.374 li
120.428 97.374 li
120.678 97.374 li
120.928 97.374 li
121.178 97.374 li
121.428 97.374 li
121.678 97.3232 li
121.928 97.3232 li
122.178 97.3232 li
122.428 97.3232 li
122.678 97.3232 li
122.928 97.3232 li
123.178 97.374 li
123.428 97.374 li
123.678 97.374 li
123.928 97.374 li
124.178 97.374 li
124.428 97.374 li
124.678 97.374 li
124.928 97.374 li
125.178 97.4238 li
125.428 97.4238 li
125.678 97.4238 li
125.928 97.4238 li
126.178 97.4736 li
126.428 97.4736 li
126.678 97.4736 li
126.928 97.5234 li
127.178 97.5234 li
127.428 97.5234 li
127.678 97.5732 li
127.928 97.5732 li
128.178 97.624 li
128.428 97.624 li
128.678 97.624 li
128.928 97.6738 li
129.178 97.7236 li
129.428 97.7236 li
129.678 97.7734 li
129.928 97.7734 li
130.228 97.8232 li
130.478 97.8232 li
130.728 97.874 li
130.978 97.9238 li
131.228 97.9736 li
131.478 97.9736 li
131.728 98.0229 li
131.978 98.0737 li
132.229 98.1245 li
132.479 98.1245 li
132.729 98.1733 li
132.979 98.2241 li
133.229 98.2729 li
133.479 98.3237 li
133.729 98.3745 li
133.979 98.4233 li
134.229 98.4741 li
134.479 98.5229 li
134.729 98.5737 li
134.979 98.6245 li
135.229 98.6733 li
135.479 98.7241 li
135.729 98.7729 li
135.979 98.8237 li
136.229 98.8745 li
136.479 98.9233 li
136.729 98.9741 li
136.979 99.0737 li
137.229 99.1245 li
137.479 99.1733 li
137.729 99.2241 li
137.979 99.3237 li
138.229 99.3745 li
138.479 99.4233 li
138.729 99.5229 li
138.979 99.5737 li
139.229 99.6733 li
139.479 99.7241 li
139.729 99.7749 li
139.979 99.8745 li
140.229 99.9233 li
140.478 100.025 li
140.728 100.074 li
140.978 100.173 li
141.228 100.273 li
141.478 100.324 li
141.778 100.423 li
142.028 100.523 li
142.278 100.574 li
142.528 100.673 li
90.2783 99.4741 mo
90.5283 99.4741 li
90.7783 99.5229 li
91.0283 99.5229 li
91.2783 99.5229 li
91.5283 99.5737 li
91.7783 99.5737 li
92.0283 99.5737 li
92.2783 99.5737 li
92.5283 99.5737 li
92.7783 99.6245 li
93.0283 99.6245 li
93.2783 99.6245 li
93.5283 99.6245 li
93.7783 99.6245 li
94.0283 99.6245 li
94.2783 99.6245 li
94.5283 99.6245 li
94.7783 99.6245 li
95.0283 99.6245 li
95.2783 99.5737 li
95.5283 99.5737 li
95.7783 99.5737 li
96.0781 99.5737 li
96.3281 99.5737 li
96.5781 99.5229 li
96.8281 99.5229 li
97.0781 99.5229 li
97.3281 99.5229 li
97.5781 99.4741 li
97.8281 99.4741 li
98.0781 99.4741 li
98.3281 99.4233 li
98.5781 99.4233 li
98.8281 99.4233 li
99.0781 99.3745 li
99.3281 99.3745 li
99.5781 99.3237 li
99.8281 99.3237 li
100.078 99.3237 li
100.328 99.2729 li
100.578 99.2729 li
100.828 99.2241 li
101.078 99.2241 li
101.328 99.1733 li
101.578 99.1733 li
101.828 99.1245 li
102.078 99.1245 li
102.328 99.0737 li
102.578 99.0737 li
102.828 99.0229 li
103.078 98.9741 li
103.328 98.9741 li
103.578 98.9233 li
103.828 98.9233 li
104.078 98.8726 li
104.329 98.8726 li
104.579 98.8237 li
104.829 98.7729 li
105.079 98.7729 li
105.329 98.7241 li
105.579 98.7241 li
105.829 98.6733 li
106.079 98.6226 li
106.329 98.6226 li
106.579 98.5737 li
106.829 98.5737 li
107.079 98.5229 li
107.378 98.4741 li
107.628 98.4741 li
107.878 98.4233 li
108.128 98.4233 li
108.378 98.3726 li
108.628 98.3237 li
108.878 98.3237 li
109.128 98.2729 li
109.378 98.2729 li
109.628 98.2241 li
109.878 98.1733 li
110.128 98.1733 li
110.378 98.1226 li
110.628 98.1226 li
110.878 98.0737 li
111.128 98.0737 li
111.378 98.0229 li
111.628 98.0229 li
111.878 97.9736 li
112.128 97.9229 li
112.378 97.9229 li
112.628 97.873 li
112.878 97.873 li
113.128 97.8232 li
113.378 97.8232 li
113.628 97.7734 li
113.878 97.7734 li
114.128 97.7734 li
114.378 97.7236 li
114.628 97.7236 li
114.878 97.6729 li
115.128 97.6729 li
115.378 97.623 li
115.628 97.623 li
115.878 97.623 li
116.128 97.5732 li
116.378 97.5732 li
64.1782 81.8237 mo
64.4282 82.2236 li
64.6782 82.6235 li
64.9282 82.9736 li
65.1782 83.3735 li
65.4282 83.7236 li
65.6782 84.0737 li
65.9282 84.4238 li
66.1782 84.7734 li
66.4282 85.1235 li
66.6782 85.4736 li
66.9282 85.7734 li
67.1782 86.1235 li
67.4282 86.4238 li
67.6782 86.7734 li
67.9282 87.0737 li
68.1782 87.3735 li
68.4282 87.6738 li
68.6782 87.9736 li
68.9282 88.2734 li
69.1782 88.5737 li
69.4282 88.8237 li
69.6782 89.1235 li
69.9282 89.3735 li
70.1782 89.6738 li
70.4282 89.9238 li
70.6782 90.1738 li
70.9282 90.4238 li
71.1782 90.6738 li
71.4282 90.9238 li
71.6782 91.1738 li
71.9282 91.3735 li
72.1782 91.6235 li
72.4282 91.8735 li
72.6782 92.0737 li
72.9282 92.2734 li
73.2285 92.5234 li
73.4785 92.7236 li
73.7285 92.9238 li
73.9785 93.1235 li
74.2285 93.3237 li
74.4785 93.5234 li
74.7285 93.7236 li
74.9785 93.8735 li
75.2285 94.0737 li
75.4785 94.2734 li
75.7285 94.4238 li
75.9785 94.6235 li
76.2285 94.7734 li
76.4785 94.9238 li
76.7285 95.0737 li
76.9785 95.2734 li
77.2285 95.4238 li
77.4785 95.5737 li
77.7285 95.7236 li
77.9785 95.8735 li
78.2285 95.9736 li
78.4785 96.1235 li
78.7285 96.2734 li
78.9785 96.3735 li
79.2285 96.5234 li
79.4785 96.6235 li
79.7285 96.7734 li
79.9785 96.8735 li
80.2285 96.9736 li
80.4785 97.1235 li
80.7285 97.2236 li
80.9785 97.3232 li
81.2285 97.4238 li
81.4785 97.5234 li
81.7285 97.623 li
81.9785 97.7236 li
82.2285 97.8232 li
82.4785 97.873 li
82.7285 97.9736 li
82.9785 98.0737 li
83.2285 98.1226 li
83.4785 98.2241 li
83.7285 98.2729 li
83.9785 98.3726 li
84.2285 98.4233 li
84.4785 98.5229 li
84.7783 98.5737 li
85.0283 98.6226 li
85.2783 98.6733 li
85.5283 98.7729 li
85.7783 98.8237 li
86.0283 98.8726 li
86.2783 98.9233 li
86.5283 98.9741 li
86.7783 99.0229 li
87.0283 99.0737 li
87.2783 99.1245 li
87.5283 99.1245 li
87.7783 99.1733 li
88.0283 99.2241 li
88.2783 99.2729 li
88.5288 99.2729 li
88.7788 99.3237 li
89.0288 99.3745 li
89.2788 99.3745 li
89.5288 99.4233 li
89.7788 99.4233 li
90.0288 99.4741 li
90.2788 99.4741 li
38.6782 3.67383 mo
38.7783 4.17383 li
39.0781 5.42383 li
39.3281 6.67383 li
39.5781 7.87354 li
39.8281 9.07373 li
40.0781 10.2734 li
40.3281 11.4736 li
40.5781 12.6235 li
40.8281 13.7734 li
41.0781 14.9238 li
41.3281 16.0737 li
41.5781 17.2236 li
41.8281 18.3237 li
42.0781 19.4238 li
42.3281 20.5234 li
42.5781 21.6235 li
42.8281 22.6738 li
43.0781 23.7236 li
43.3281 24.8237 li
43.5781 25.8237 li
43.8281 26.8735 li
44.0781 27.9238 li
44.3281 28.9238 li
44.5781 29.9238 li
44.8281 30.9238 li
45.0781 31.8735 li
45.3281 32.8735 li
45.5781 33.8237 li
45.8281 34.7734 li
46.0781 35.7236 li
46.3281 36.6738 li
46.5781 37.5737 li
46.8281 38.4736 li
47.0781 39.4238 li
47.3281 40.2734 li
47.5781 41.1738 li
47.8281 42.0737 li
48.0781 42.9238 li
48.3281 43.7734 li
48.5781 44.6235 li
48.8281 45.4736 li
49.0781 46.3237 li
49.3281 47.1235 li
49.5781 47.9238 li
49.8281 48.7236 li
50.0781 49.5234 li
50.3784 50.3237 li
50.6284 51.1235 li
50.8784 51.8735 li
51.1284 52.6235 li
51.3784 53.3735 li
51.6284 54.1235 li
51.8784 54.8735 li
52.1284 55.6235 li
52.3784 56.3237 li
52.6284 57.0234 li
52.8784 57.7236 li
53.1284 58.4238 li
53.3784 59.1235 li
53.6284 59.8237 li
53.8784 60.4736 li
54.1284 61.1235 li
54.3784 61.7734 li
54.6284 62.4238 li
54.8784 63.0737 li
55.1284 63.7236 li
55.3784 64.3237 li
55.6284 64.9736 li
55.8784 65.5737 li
56.1284 66.1738 li
56.3784 66.7734 li
56.6284 67.3735 li
56.8784 67.9238 li
57.1284 68.5234 li
57.3784 69.0737 li
57.6284 69.6235 li
57.8784 70.1738 li
58.1284 70.7236 li
58.3784 71.2734 li
58.6284 71.8237 li
58.8784 72.3237 li
59.1284 72.8237 li
59.3784 73.3735 li
59.6284 73.8735 li
59.8784 74.3735 li
60.1284 74.8237 li
60.3784 75.3237 li
60.6284 75.8237 li
60.8784 76.2734 li
61.1284 76.7236 li
61.3784 77.2236 li
61.6284 77.6738 li
61.9287 78.1235 li
62.1787 78.5234 li
62.4287 78.9736 li
62.6787 79.4238 li
62.9287 79.8237 li
63.1787 80.2236 li
63.4287 80.6738 li
63.6787 81.0737 li
63.9287 81.4736 li
64.1787 81.8237 li
35.6279 169.074 mo
55.5781 169.074 li
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf27.5313 164.412 mo(0)sh[2 3 ] 0 dsh
212.078 50.6235 mo
212.328 49.8735 li
212.578 49.1235 li
212.828 48.3735 li
213.078 47.6235 li
213.328 46.8735 li
213.578 46.1235 li
213.828 45.3237 li
214.078 44.5234 li
214.328 43.7236 li
214.578 42.9238 li
214.828 42.1235 li
215.078 41.2734 li
215.328 40.4736 li
215.578 39.6235 li
215.828 38.7734 li
216.078 37.9238 li
216.328 37.0737 li
216.578 36.1738 li
216.828 35.3237 li
217.078 34.4238 li
217.328 33.5234 li
217.578 32.6235 li
217.828 31.6738 li
218.078 30.7734 li
218.328 29.8237 li
218.578 28.8735 li
218.828 27.9238 li
219.078 26.9736 li
219.328 25.9736 li
219.578 25.0234 li
219.828 24.0234 li
220.078 23.0234 li
220.328 22.0234 li
220.578 20.9736 li
220.828 19.9736 li
221.078 18.9238 li
221.328 17.8735 li
221.628 16.8237 li
221.878 15.7734 li
222.128 14.6738 li
222.378 13.5737 li
222.628 12.4736 li
222.878 11.3735 li
223.128 10.2734 li
223.378 9.12354 li
223.628 7.97363 li
223.878 6.87354 li
224.128 5.67383 li
224.378 4.52344 li
224.528 3.67383 li
185.928 93.2734 mo
186.178 93.0737 li
186.428 92.9238 li
186.678 92.7236 li
186.928 92.5737 li
187.229 92.3735 li
187.479 92.1738 li
187.729 91.9736 li
187.979 91.8237 li
188.229 91.6235 li
188.479 91.4238 li
188.729 91.2236 li
188.979 90.9736 li
189.229 90.7734 li
189.479 90.5737 li
189.729 90.3237 li
189.979 90.1235 li
190.229 89.8735 li
190.479 89.6738 li
190.729 89.4238 li
190.979 89.1738 li
191.229 88.9736 li
191.479 88.7236 li
191.729 88.4736 li
191.979 88.1738 li
192.229 87.9238 li
192.479 87.6738 li
192.729 87.4238 li
192.979 87.1235 li
193.229 86.8735 li
193.479 86.5737 li
193.729 86.2734 li
193.979 85.9736 li
194.229 85.7236 li
194.479 85.4238 li
194.729 85.0737 li
194.979 84.7734 li
195.229 84.4736 li
195.479 84.1738 li
195.729 83.8237 li
195.979 83.5234 li
196.229 83.1738 li
196.479 82.8237 li
196.729 82.4736 li
196.979 82.1738 li
197.229 81.7734 li
197.479 81.4238 li
197.729 81.0737 li
197.979 80.7236 li
198.229 80.3237 li
198.479 79.9736 li
198.778 79.5737 li
199.028 79.1738 li
199.278 78.7734 li
199.528 78.3735 li
199.778 77.9736 li
200.028 77.5737 li
200.278 77.1738 li
200.528 76.7236 li
200.778 76.3237 li
201.028 75.8735 li
201.278 75.4736 li
201.528 75.0234 li
201.778 74.5737 li
202.028 74.1235 li
202.278 73.6235 li
202.528 73.1738 li
202.778 72.7236 li
203.028 72.2236 li
203.278 71.7236 li
203.528 71.2734 li
203.778 70.7734 li
204.028 70.2734 li
204.278 69.7236 li
204.528 69.2236 li
204.778 68.7236 li
205.028 68.1738 li
205.278 67.6235 li
205.528 67.1235 li
205.778 66.5737 li
206.028 65.9736 li
206.278 65.4238 li
206.528 64.8735 li
206.778 64.2734 li
207.028 63.7236 li
207.278 63.1235 li
207.528 62.5234 li
207.778 61.9238 li
208.028 61.3237 li
208.278 60.7236 li
208.528 60.0737 li
208.778 59.4736 li
209.028 58.8237 li
209.278 58.1738 li
209.528 57.5234 li
209.778 56.8735 li
210.078 56.2236 li
210.328 55.5234 li
210.578 54.8735 li
210.828 54.1738 li
211.078 53.4736 li
211.328 52.7734 li
211.578 52.0737 li
211.828 51.3237 li
212.078 50.6235 li
159.828 97.9736 mo
160.078 97.9736 li
160.328 98.0229 li
160.578 98.0737 li
160.828 98.0737 li
161.078 98.1245 li
161.328 98.1245 li
161.578 98.1733 li
161.828 98.1733 li
162.078 98.2241 li
162.328 98.2241 li
162.578 98.2729 li
162.828 98.2729 li
163.078 98.3237 li
163.328 98.3237 li
163.578 98.3237 li
163.828 98.3745 li
164.078 98.3745 li
164.328 98.3745 li
164.628 98.4233 li
164.878 98.4233 li
165.128 98.4233 li
165.378 98.4233 li
165.628 98.4741 li
165.878 98.4741 li
166.128 98.4741 li
166.378 98.4741 li
166.628 98.4741 li
166.878 98.4741 li
167.128 98.4741 li
167.378 98.4741 li
167.628 98.4741 li
167.878 98.4741 li
168.128 98.4741 li
168.378 98.4741 li
168.628 98.4741 li
168.878 98.4741 li
169.128 98.4741 li
169.378 98.4233 li
169.628 98.4233 li
169.878 98.4233 li
170.128 98.4233 li
170.378 98.3745 li
170.628 98.3745 li
170.878 98.3745 li
171.128 98.3237 li
171.378 98.3237 li
171.628 98.2729 li
171.878 98.2729 li
172.128 98.2241 li
172.378 98.2241 li
172.628 98.1733 li
172.878 98.1245 li
173.128 98.1245 li
173.378 98.0737 li
173.628 98.0229 li
173.878 97.9736 li
174.128 97.9238 li
174.378 97.874 li
174.628 97.874 li
174.878 97.8232 li
175.128 97.7734 li
175.378 97.7236 li
175.628 97.624 li
175.928 97.5732 li
176.178 97.5234 li
176.428 97.4736 li
176.678 97.4238 li
176.928 97.3232 li
177.178 97.2734 li
177.428 97.2236 li
177.678 97.1235 li
177.928 97.0732 li
178.178 96.9736 li
178.428 96.8735 li
178.678 96.8237 li
178.928 96.7236 li
179.178 96.6235 li
179.428 96.5737 li
179.678 96.4736 li
179.928 96.3735 li
180.178 96.2734 li
180.428 96.1733 li
180.678 96.0732 li
180.928 95.9736 li
181.178 95.8735 li
181.428 95.7236 li
181.678 95.6235 li
181.928 95.5234 li
182.178 95.3735 li
182.428 95.2734 li
182.678 95.1733 li
182.928 95.0234 li
183.178 94.8735 li
183.428 94.7734 li
183.678 94.6235 li
183.928 94.4736 li
184.178 94.3232 li
184.428 94.1733 li
184.678 94.0234 li
184.928 93.8735 li
185.178 93.7236 li
185.428 93.5732 li
185.678 93.4233 li
185.928 93.2734 li
133.729 92.7236 mo
133.979 92.7734 li
134.229 92.8237 li
134.479 92.8735 li
134.729 92.9238 li
134.979 93.0234 li
135.229 93.0737 li
135.479 93.1235 li
135.729 93.1738 li
135.979 93.2236 li
136.229 93.2734 li
136.479 93.3237 li
136.729 93.3735 li
136.979 93.4736 li
137.229 93.5234 li
137.479 93.5737 li
137.729 93.6235 li
137.979 93.6733 li
138.229 93.7236 li
138.479 93.7734 li
138.729 93.8237 li
138.979 93.8735 li
139.229 93.9736 li
139.479 94.0234 li
139.729 94.0737 li
139.979 94.1235 li
140.229 94.1733 li
140.479 94.2236 li
140.729 94.2734 li
140.979 94.3232 li
141.229 94.4233 li
141.479 94.4736 li
141.778 94.5234 li
142.028 94.5732 li
142.278 94.6235 li
142.528 94.6733 li
142.778 94.7236 li
143.028 94.7734 li
143.278 94.8232 li
143.528 94.9233 li
143.778 94.9736 li
144.028 95.0234 li
144.278 95.0732 li
144.528 95.1235 li
144.778 95.1733 li
145.028 95.2236 li
145.278 95.2734 li
145.528 95.3232 li
145.778 95.3735 li
146.028 95.4233 li
146.278 95.5234 li
146.528 95.5732 li
146.778 95.6235 li
147.028 95.6733 li
147.278 95.7236 li
147.528 95.7734 li
147.778 95.8232 li
148.028 95.8735 li
148.278 95.9233 li
148.528 95.9736 li
148.778 96.0234 li
149.028 96.0732 li
149.278 96.1235 li
149.528 96.1733 li
149.778 96.2231 li
150.028 96.2734 li
150.278 96.3232 li
150.528 96.3735 li
150.778 96.4233 li
151.028 96.4731 li
151.278 96.5234 li
151.528 96.5732 li
151.778 96.6235 li
152.028 96.6733 li
152.278 96.7236 li
152.528 96.7734 li
152.778 96.8232 li
153.078 96.8735 li
153.328 96.9233 li
153.578 96.9736 li
153.828 97.0234 li
154.078 97.0732 li
154.328 97.1235 li
154.578 97.1733 li
154.828 97.2236 li
155.078 97.2236 li
155.328 97.2734 li
155.578 97.3232 li
155.828 97.373 li
156.078 97.4238 li
156.328 97.4736 li
156.578 97.4736 li
156.828 97.5234 li
157.078 97.5732 li
157.328 97.624 li
157.578 97.6738 li
157.828 97.6738 li
158.078 97.7236 li
158.328 97.7734 li
158.578 97.7734 li
158.828 97.8232 li
159.078 97.874 li
159.328 97.9238 li
159.578 97.9238 li
159.828 97.9736 li
107.628 85.7734 mo
107.878 85.8735 li
108.128 85.9736 li
108.378 86.0737 li
108.628 86.1235 li
108.878 86.2236 li
109.128 86.3237 li
109.378 86.4238 li
109.628 86.5234 li
109.878 86.5737 li
110.128 86.6738 li
110.378 86.7734 li
110.628 86.8735 li
110.878 86.9238 li
111.128 87.0234 li
111.378 87.1235 li
111.628 87.1738 li
111.878 87.2734 li
112.128 87.3237 li
112.378 87.4238 li
112.628 87.5234 li
112.878 87.5737 li
113.128 87.6738 li
113.378 87.7236 li
113.628 87.8237 li
113.878 87.8735 li
114.128 87.9736 li
114.378 88.0234 li
114.628 88.1235 li
114.878 88.1738 li
115.128 88.2734 li
115.378 88.3237 li
115.628 88.3735 li
115.878 88.4736 li
116.128 88.5234 li
116.378 88.6235 li
116.628 88.6738 li
116.878 88.7236 li
117.128 88.8237 li
117.378 88.8735 li
117.628 88.9238 li
117.878 89.0234 li
118.128 89.0737 li
118.378 89.1235 li
118.628 89.2236 li
118.928 89.2734 li
119.178 89.3237 li
119.428 89.4238 li
119.678 89.4736 li
119.928 89.5234 li
120.178 89.5737 li
120.428 89.6738 li
120.678 89.7236 li
120.928 89.7734 li
121.178 89.8237 li
121.428 89.9238 li
121.678 89.9736 li
121.928 90.0234 li
122.178 90.0737 li
122.428 90.1235 li
122.678 90.2236 li
122.928 90.2734 li
123.178 90.3237 li
123.428 90.3735 li
123.678 90.4238 li
123.928 90.5234 li
124.178 90.5737 li
124.428 90.6235 li
124.678 90.6738 li
124.928 90.7236 li
125.178 90.7734 li
125.428 90.8735 li
125.678 90.9238 li
125.928 90.9736 li
126.178 91.0234 li
126.428 91.0737 li
126.678 91.1235 li
126.928 91.2236 li
127.178 91.2734 li
127.428 91.3237 li
127.678 91.3735 li
127.928 91.4233 li
128.178 91.4736 li
128.428 91.5234 li
128.678 91.5737 li
128.928 91.6733 li
129.178 91.7236 li
129.428 91.7734 li
129.678 91.8232 li
129.928 91.8735 li
130.229 91.9233 li
130.479 91.9736 li
130.729 92.0732 li
130.979 92.1235 li
131.229 92.1733 li
131.479 92.2236 li
131.729 92.2734 li
131.979 92.3232 li
132.229 92.3735 li
132.479 92.4233 li
132.729 92.4736 li
132.979 92.5732 li
133.229 92.6235 li
133.479 92.6733 li
133.729 92.7236 li
81.478 65.6235 mo
81.728 65.9736 li
81.978 66.3237 li
82.228 66.6738 li
82.478 66.9736 li
82.728 67.3237 li
82.978 67.6235 li
83.228 67.9238 li
83.478 68.2734 li
83.728 68.5737 li
83.978 68.8735 li
84.228 69.1738 li
84.478 69.4736 li
84.7783 69.7734 li
85.0283 70.0737 li
85.2783 70.3237 li
85.5283 70.6235 li
85.7783 70.9238 li
86.0283 71.1738 li
86.2783 71.4736 li
86.5283 71.7236 li
86.7783 71.9736 li
87.0283 72.2734 li
87.2783 72.5234 li
87.5283 72.7734 li
87.7783 73.0234 li
88.0283 73.2734 li
88.2783 73.5234 li
88.5283 73.7734 li
88.7783 74.0234 li
89.0283 74.2734 li
89.2783 74.4736 li
89.5283 74.7236 li
89.7783 74.9736 li
90.0283 75.1738 li
90.2783 75.4238 li
90.5283 75.6235 li
90.7783 75.8735 li
91.0283 76.0737 li
91.2783 76.2734 li
91.5283 76.4736 li
91.7783 76.7236 li
92.0283 76.9238 li
92.2783 77.1235 li
92.5283 77.3237 li
92.7783 77.5234 li
93.0283 77.7236 li
93.2783 77.9238 li
93.5283 78.1235 li
93.7783 78.2734 li
94.0283 78.4736 li
94.2783 78.6738 li
94.5283 78.8237 li
94.7783 79.0234 li
95.0283 79.2236 li
95.2783 79.3735 li
95.5283 79.5737 li
95.7783 79.7236 li
96.0786 79.8735 li
96.3286 80.0737 li
96.5786 80.2236 li
96.8286 80.3735 li
97.0786 80.5234 li
97.3286 80.7236 li
97.5786 80.8735 li
97.8286 81.0234 li
98.0786 81.1738 li
98.3286 81.3237 li
98.5786 81.4736 li
98.8286 81.6235 li
99.0786 81.7734 li
99.3286 81.9238 li
99.5786 82.0234 li
99.8286 82.1738 li
100.079 82.3237 li
100.329 82.4736 li
100.579 82.5737 li
100.829 82.7236 li
101.079 82.8735 li
101.329 82.9736 li
101.579 83.1235 li
101.829 83.2236 li
102.079 83.3735 li
102.329 83.4736 li
102.579 83.6235 li
102.829 83.7236 li
103.079 83.8735 li
103.329 83.9736 li
103.579 84.0737 li
103.829 84.2236 li
104.079 84.3237 li
104.329 84.4238 li
104.579 84.5234 li
104.829 84.6235 li
105.079 84.7734 li
105.329 84.8735 li
105.579 84.9736 li
105.829 85.0737 li
106.079 85.1738 li
106.329 85.2734 li
106.579 85.3735 li
106.829 85.4736 li
107.079 85.5737 li
107.378 85.6738 li
107.628 85.7734 li
56.0283 3.67383 mo
56.1279 4.07373 li
56.3779 5.02344 li
56.6279 5.97363 li
56.8779 6.87354 li
57.1279 7.82373 li
57.3779 8.72363 li
57.6279 9.62354 li
57.8779 10.5234 li
58.1279 11.4238 li
58.3779 12.3237 li
58.6279 13.1738 li
58.8784 14.0737 li
59.1284 14.9238 li
59.3784 15.7734 li
59.6284 16.6235 li
59.8784 17.4736 li
60.1284 18.2734 li
60.3784 19.1235 li
60.6284 19.9238 li
60.8784 20.7236 li
61.1284 21.5234 li
61.3784 22.3237 li
61.6284 23.1235 li
61.9282 23.8735 li
62.1782 24.6738 li
62.4282 25.4238 li
62.6782 26.1738 li
62.9282 26.9238 li
63.1782 27.6738 li
63.4282 28.3735 li
63.6782 29.1235 li
63.9282 29.8237 li
64.1782 30.5737 li
64.4282 31.2734 li
64.6782 31.9736 li
64.9282 32.6738 li
65.1782 33.3237 li
65.4282 34.0234 li
65.6782 34.6738 li
65.9282 35.3735 li
66.1782 36.0234 li
66.4282 36.6738 li
66.6782 37.3237 li
66.9282 37.9736 li
67.1782 38.5737 li
67.4282 39.2236 li
67.6782 39.8237 li
67.9282 40.4736 li
68.1782 41.0737 li
68.4282 41.6738 li
68.6782 42.2734 li
68.9282 42.8735 li
69.1782 43.4238 li
69.4282 44.0234 li
69.6782 44.5737 li
69.9282 45.1738 li
70.1782 45.7236 li
70.4282 46.2734 li
70.6782 46.8237 li
70.9282 47.3735 li
71.1782 47.9238 li
71.4282 48.4238 li
71.6782 48.9736 li
71.9282 49.4736 li
72.1782 50.0234 li
72.4282 50.5234 li
72.6782 51.0234 li
72.9282 51.5234 li
73.2285 52.0234 li
73.4785 52.5234 li
73.7285 52.9736 li
73.9785 53.4736 li
74.2285 53.9238 li
74.4785 54.4238 li
74.7285 54.8735 li
74.9785 55.3237 li
75.2285 55.7734 li
75.4785 56.2236 li
75.7285 56.6738 li
75.9785 57.1235 li
76.2285 57.5737 li
76.4785 57.9736 li
76.7285 58.4238 li
76.9785 58.8237 li
77.2285 59.2236 li
77.4785 59.6738 li
77.7285 60.0737 li
77.9785 60.4736 li
78.2285 60.8735 li
78.4785 61.2734 li
78.7285 61.6235 li
78.9785 62.0234 li
79.2285 62.4238 li
79.4785 62.7734 li
79.7285 63.1738 li
79.9785 63.5234 li
80.2285 63.8735 li
80.4785 64.2734 li
80.7285 64.6235 li
80.9785 64.9736 li
81.2285 65.3237 li
81.4785 65.6235 li
35.6279 162.074 mo
55.5781 162.074 li
@
DVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf27.5313 157.404 mo(1)sh[1 1.5 ] 0 dsh
200.778 33.2734 mo
201.028 32.5234 li
201.278 31.8237 li
201.528 31.0737 li
201.778 30.3237 li
202.028 29.5737 li
202.278 28.8237 li
202.528 28.0737 li
202.778 27.2734 li
203.028 26.5234 li
203.278 25.7236 li
203.528 24.9238 li
203.778 24.1235 li
204.028 23.3237 li
204.278 22.5234 li
204.528 21.6738 li
204.778 20.8735 li
205.028 20.0234 li
205.278 19.1738 li
205.528 18.3237 li
205.778 17.4736 li
206.028 16.6235 li
206.278 15.7236 li
206.528 14.8237 li
206.778 13.9736 li
207.028 13.0737 li
207.278 12.1738 li
207.528 11.2236 li
207.778 10.3237 li
208.028 9.37354 li
208.278 8.47363 li
208.528 7.52344 li
208.778 6.57373 li
209.028 5.57373 li
209.278 4.62354 li
209.528 3.67383 li
174.628 78.8735 mo
174.878 78.6738 li
175.128 78.4238 li
175.378 78.1738 li
175.628 77.9736 li
175.928 77.7236 li
176.178 77.4736 li
176.428 77.2734 li
176.678 77.0234 li
176.928 76.7734 li
177.178 76.5234 li
177.428 76.2236 li
177.678 75.9736 li
177.928 75.7236 li
178.178 75.4736 li
178.428 75.1738 li
178.678 74.9238 li
178.928 74.6235 li
179.178 74.3735 li
179.428 74.0737 li
179.678 73.7734 li
179.928 73.5234 li
180.178 73.2236 li
180.428 72.9238 li
180.678 72.6235 li
180.928 72.3237 li
181.178 71.9736 li
181.428 71.6738 li
181.678 71.3735 li
181.928 71.0234 li
182.178 70.7236 li
182.428 70.3735 li
182.678 70.0737 li
182.928 69.7236 li
183.178 69.3735 li
183.428 69.0234 li
183.678 68.6738 li
183.928 68.3237 li
184.178 67.9736 li
184.428 67.6235 li
184.678 67.2236 li
184.928 66.8735 li
185.178 66.4736 li
185.428 66.1235 li
185.678 65.7236 li
185.928 65.3237 li
186.178 64.9238 li
186.428 64.5737 li
186.678 64.1235 li
186.928 63.7236 li
187.229 63.3237 li
187.479 62.9238 li
187.729 62.4736 li
187.979 62.0737 li
188.229 61.6235 li
188.479 61.2236 li
188.729 60.7734 li
188.979 60.3237 li
189.229 59.8735 li
189.479 59.4238 li
189.729 58.9736 li
189.979 58.4736 li
190.229 58.0234 li
190.479 57.5234 li
190.729 57.0737 li
190.979 56.5737 li
191.229 56.0737 li
191.479 55.6235 li
191.729 55.1235 li
191.979 54.5737 li
192.229 54.0737 li
192.479 53.5737 li
192.729 53.0234 li
192.979 52.5234 li
193.229 51.9736 li
193.479 51.4238 li
193.729 50.9238 li
193.979 50.3735 li
194.229 49.8237 li
194.479 49.2236 li
194.729 48.6738 li
194.979 48.1235 li
195.229 47.5234 li
195.479 46.9238 li
195.729 46.3735 li
195.979 45.7734 li
196.229 45.1738 li
196.479 44.5234 li
196.729 43.9238 li
196.979 43.3237 li
197.229 42.6738 li
197.479 42.0737 li
197.729 41.4238 li
197.979 40.7734 li
198.229 40.1235 li
198.479 39.4736 li
198.778 38.8237 li
199.028 38.1235 li
199.278 37.4736 li
199.528 36.7734 li
199.778 36.0737 li
200.028 35.3735 li
200.278 34.6738 li
200.528 33.9736 li
200.778 33.2734 li
148.528 88.9736 mo
148.778 88.9736 li
149.028 88.9238 li
149.278 88.9238 li
149.528 88.9238 li
149.778 88.9238 li
150.028 88.9238 li
150.278 88.8735 li
150.528 88.8735 li
150.778 88.8735 li
151.028 88.8237 li
151.278 88.8237 li
151.528 88.8237 li
151.778 88.7734 li
152.028 88.7734 li
152.278 88.7236 li
152.528 88.7236 li
152.778 88.6738 li
153.078 88.6738 li
153.328 88.6235 li
153.578 88.5737 li
153.828 88.5737 li
154.078 88.5234 li
154.328 88.4736 li
154.578 88.4238 li
154.828 88.4238 li
155.078 88.3735 li
155.328 88.3237 li
155.578 88.2734 li
155.828 88.2236 li
156.078 88.1738 li
156.328 88.1235 li
156.578 88.0737 li
156.828 88.0234 li
157.078 87.9736 li
157.328 87.9238 li
157.578 87.8735 li
157.828 87.8237 li
158.078 87.7236 li
158.328 87.6738 li
158.578 87.6235 li
158.828 87.5239 li
159.078 87.4736 li
159.328 87.4238 li
159.578 87.3237 li
159.828 87.2739 li
160.078 87.1738 li
160.328 87.1235 li
160.578 87.0239 li
160.828 86.9238 li
161.078 86.8735 li
161.328 86.7739 li
161.578 86.6738 li
161.828 86.5737 li
162.078 86.4736 li
162.328 86.4238 li
162.578 86.3237 li
162.828 86.2236 li
163.078 86.1235 li
163.328 86.0234 li
163.578 85.9238 li
163.828 85.7734 li
164.078 85.6738 li
164.328 85.5737 li
164.628 85.4736 li
164.878 85.3237 li
165.128 85.2236 li
165.378 85.1235 li
165.628 84.9736 li
165.878 84.8735 li
166.128 84.7236 li
166.378 84.6235 li
166.628 84.4736 li
166.878 84.3237 li
167.128 84.2236 li
167.378 84.0737 li
167.628 83.9238 li
167.878 83.7734 li
168.128 83.6235 li
168.378 83.4736 li
168.628 83.3237 li
168.878 83.1738 li
169.128 83.0234 li
169.378 82.8735 li
169.628 82.6738 li
169.878 82.5234 li
170.128 82.3735 li
170.378 82.1738 li
170.628 82.0234 li
170.878 81.8237 li
171.128 81.6738 li
171.378 81.4736 li
171.628 81.3237 li
171.878 81.1235 li
172.128 80.9238 li
172.378 80.7236 li
172.628 80.5234 li
172.878 80.3237 li
173.128 80.1235 li
173.378 79.9238 li
173.628 79.7236 li
173.878 79.5239 li
174.128 79.3237 li
174.378 79.0737 li
174.628 78.8735 li
122.428 82.9238 mo
122.678 83.0737 li
122.928 83.1738 li
123.178 83.3237 li
123.428 83.4238 li
123.678 83.5234 li
123.928 83.6235 li
124.178 83.7734 li
124.428 83.8735 li
124.678 83.9736 li
124.928 84.0737 li
125.178 84.1738 li
125.428 84.2734 li
125.678 84.3735 li
125.928 84.5234 li
126.178 84.6235 li
126.428 84.7236 li
126.678 84.8237 li
126.928 84.8735 li
127.178 84.9736 li
127.428 85.0737 li
127.678 85.1738 li
127.928 85.2734 li
128.178 85.3735 li
128.428 85.4736 li
128.678 85.5234 li
128.928 85.6235 li
129.178 85.7236 li
129.428 85.8237 li
129.678 85.8735 li
129.928 85.9736 li
130.228 86.0737 li
130.478 86.1235 li
130.728 86.2236 li
130.978 86.2739 li
131.228 86.3735 li
131.478 86.4736 li
131.728 86.5239 li
131.978 86.6235 li
132.229 86.6738 li
132.479 86.7236 li
132.729 86.8237 li
132.979 86.8735 li
133.229 86.9736 li
133.479 87.0239 li
133.729 87.0737 li
133.979 87.1738 li
134.229 87.2236 li
134.478 87.2734 li
134.728 87.3237 li
134.978 87.4238 li
135.228 87.4736 li
135.478 87.5234 li
135.728 87.5737 li
135.978 87.6235 li
136.228 87.6738 li
136.478 87.7236 li
136.728 87.7734 li
136.978 87.8237 li
137.228 87.8735 li
137.478 87.9238 li
137.728 87.9736 li
137.978 88.0234 li
138.228 88.0737 li
138.478 88.1235 li
138.728 88.1738 li
138.978 88.2236 li
139.228 88.2734 li
139.478 88.2734 li
139.728 88.3237 li
139.978 88.3735 li
140.228 88.4238 li
140.478 88.4238 li
140.728 88.4736 li
140.978 88.5234 li
141.228 88.5234 li
141.478 88.5737 li
141.778 88.6235 li
142.028 88.6235 li
142.278 88.6738 li
142.528 88.6738 li
142.778 88.7236 li
143.028 88.7236 li
143.278 88.7734 li
143.528 88.7734 li
143.778 88.8237 li
144.028 88.8237 li
144.278 88.8237 li
144.528 88.8735 li
144.778 88.8735 li
145.028 88.8735 li
145.278 88.9233 li
145.528 88.9233 li
145.778 88.9233 li
146.028 88.9233 li
146.278 88.9233 li
146.528 88.9233 li
146.778 88.9736 li
147.028 88.9736 li
147.278 88.9736 li
147.528 88.9736 li
147.778 88.9736 li
148.028 88.9736 li
148.278 88.9736 li
148.528 88.9736 li
96.3281 60.5737 mo
96.5781 60.8735 li
96.8281 61.2236 li
97.0781 61.5737 li
97.3281 61.8735 li
97.5781 62.2236 li
97.8281 62.5737 li
98.0781 62.8735 li
98.3281 63.1738 li
98.5781 63.5234 li
98.8281 63.8237 li
99.0781 64.1235 li
99.3281 64.4238 li
99.5781 64.7236 li
99.8281 65.0234 li
100.078 65.3237 li
100.328 65.6235 li
100.578 65.9238 li
100.828 66.2236 li
101.078 66.5234 li
101.328 66.7734 li
101.578 67.0737 li
101.828 67.3735 li
102.078 67.6235 li
102.328 67.9238 li
102.578 68.1738 li
102.828 68.4238 li
103.078 68.7236 li
103.328 68.9736 li
103.578 69.2236 li
103.828 69.4736 li
104.078 69.7236 li
104.328 70.0234 li
104.578 70.2734 li
104.828 70.5234 li
105.078 70.7236 li
105.328 70.9736 li
105.578 71.2236 li
105.828 71.4736 li
106.078 71.7236 li
106.328 71.9238 li
106.578 72.1738 li
106.828 72.4238 li
107.078 72.6235 li
107.378 72.8735 li
107.628 73.0737 li
107.878 73.3237 li
108.128 73.5234 li
108.378 73.7236 li
108.628 73.9736 li
108.878 74.1738 li
109.128 74.3735 li
109.378 74.5737 li
109.628 74.7734 li
109.878 74.9736 li
110.128 75.1738 li
110.378 75.3735 li
110.628 75.5737 li
110.878 75.7734 li
111.128 75.9736 li
111.378 76.1738 li
111.628 76.3735 li
111.878 76.5737 li
112.128 76.7236 li
112.378 76.9238 li
112.628 77.1235 li
112.878 77.2734 li
113.128 77.4736 li
113.378 77.6738 li
113.628 77.8237 li
113.878 77.9736 li
114.128 78.1738 li
114.378 78.3237 li
114.628 78.5234 li
114.878 78.6733 li
115.128 78.8237 li
115.378 79.0234 li
115.628 79.1733 li
115.878 79.3237 li
116.128 79.4736 li
116.378 79.6235 li
116.628 79.7734 li
116.878 79.9736 li
117.128 80.1235 li
117.378 80.2734 li
117.628 80.4233 li
117.878 80.5737 li
118.128 80.6733 li
118.378 80.8237 li
118.628 80.9736 li
118.929 81.1235 li
119.179 81.2734 li
119.429 81.4233 li
119.679 81.5234 li
119.929 81.6733 li
120.179 81.8237 li
120.429 81.9238 li
120.679 82.0737 li
120.929 82.1738 li
121.179 82.3237 li
121.429 82.4736 li
121.679 82.5737 li
121.929 82.7236 li
122.179 82.8237 li
122.429 82.9238 li
70.7783 3.67383 mo
70.9282 4.32373 li
71.1782 5.12354 li
71.4282 5.97363 li
71.6782 6.77344 li
71.9282 7.57373 li
72.1782 8.37354 li
72.4282 9.17383 li
72.6782 9.97363 li
72.9282 10.7236 li
73.228 11.5234 li
73.478 12.2734 li
73.728 13.0234 li
73.978 13.8237 li
74.228 14.5737 li
74.478 15.2734 li
74.728 16.0234 li
74.978 16.7734 li
75.228 17.4736 li
75.478 18.2236 li
75.728 18.9238 li
75.978 19.6235 li
76.228 20.3237 li
76.478 21.0234 li
76.728 21.7236 li
76.978 22.4238 li
77.228 23.0737 li
77.478 23.7734 li
77.728 24.4238 li
77.978 25.0737 li
78.228 25.7236 li
78.4785 26.3735 li
78.7285 27.0234 li
78.9785 27.6738 li
79.2285 28.3237 li
79.4785 28.9238 li
79.7285 29.5737 li
79.9785 30.1738 li
80.2285 30.7734 li
80.4785 31.3735 li
80.7285 31.9736 li
80.9785 32.5737 li
81.2285 33.1738 li
81.4785 33.7734 li
81.7285 34.3735 li
81.9785 34.9238 li
82.2285 35.5234 li
82.4785 36.0737 li
82.7285 36.6235 li
82.9785 37.1738 li
83.2285 37.7236 li
83.4785 38.2734 li
83.7285 38.8237 li
83.9785 39.3735 li
84.2285 39.8735 li
84.4785 40.4238 li
84.7783 40.9238 li
85.0283 41.4736 li
85.2783 41.9736 li
85.5283 42.4736 li
85.7783 42.9736 li
86.0283 43.4736 li
86.2783 43.9736 li
86.5283 44.4736 li
86.7783 44.9736 li
87.0283 45.4736 li
87.2783 45.9238 li
87.5283 46.4238 li
87.7783 46.8735 li
88.0283 47.3237 li
88.2783 47.8237 li
88.5283 48.2734 li
88.7783 48.7236 li
89.0283 49.1738 li
89.2783 49.6235 li
89.5283 50.0234 li
89.7783 50.4736 li
90.0283 50.9238 li
90.2783 51.3237 li
90.5283 51.7734 li
90.7783 52.1738 li
91.0283 52.6235 li
91.2783 53.0234 li
91.5283 53.4238 li
91.7783 53.8237 li
92.0283 54.2236 li
92.2783 54.6235 li
92.5283 55.0234 li
92.7783 55.4238 li
93.0283 55.8237 li
93.2783 56.2236 li
93.5283 56.5737 li
93.7783 56.9736 li
94.0283 57.3237 li
94.2783 57.7236 li
94.5283 58.0737 li
94.7783 58.4238 li
95.0283 58.8237 li
95.2788 59.1738 li
95.5288 59.5234 li
95.7788 59.8735 li
96.0786 60.2236 li
96.3286 60.5737 li
35.6279 155.074 mo
55.5781 155.074 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWEO+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B7F374CC52CC6AFA2AC69E2626E08155548B3F09D592996A164FA4C0B7A39FE024A3E562036F05B86028> |-/a <1C60D8A8C9B7EF32A0B922DB529D708010F72F0E62F6CA36E98277AFD8C536E6814BFC8F2509E1B2B1B62A6BDA8D1A6ED67728D80620B28FE439D2F57DCEC5483105FEA93379701773DF23A415938C688874994BCC9880105CE27AC2270A13FA38E952045C5E8C52BEF83397E5FBEEFAB993BE33E385A5E36620F7427AB5E4423C6A4ED6DE24A89F54E52C8FAD8A45FAD4B8F6CFD50EB7D35BF120B079B932E0EE2F7685462C7EC6E9B818F0F9E1F7814D04F2B9AAFA6704B8B745452B73181F38CB34F1645F> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWEO+Helvetica /Encoding getdup 61 /equal putdup 97 /a putpop%ADOEndSubsetFont
/DVPWEO+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four 8{/.notdef}rp /equal 35{/.notdef}rp /a 158{/.notdef}rp]DVPWEO+Helvetica nfDVPWEO+Helvetica*1 [7 0 0 -7 0 0 ]msf17.6094 150.412 mo( a=2)[1.9458 3.89209 4.08789 0 ]xsh[6 2 1 2 ] 0 dsh
185.928 37.4238 mo
186.178 36.8237 li
186.428 36.1738 li
186.678 35.5737 li
186.928 34.9238 li
187.229 34.2734 li
187.479 33.6235 li
187.729 32.9736 li
187.979 32.3237 li
188.229 31.6738 li
188.479 31.0234 li
188.729 30.3237 li
188.979 29.6235 li
189.229 28.9736 li
189.479 28.2734 li
189.729 27.5737 li
189.979 26.8735 li
190.229 26.1235 li
190.479 25.4238 li
190.729 24.7236 li
190.979 23.9736 li
191.229 23.2236 li
191.479 22.4736 li
191.729 21.7236 li
191.979 20.9736 li
192.229 20.2236 li
192.479 19.4736 li
192.729 18.6738 li
192.979 17.9238 li
193.229 17.1235 li
193.479 16.3237 li
193.729 15.5234 li
193.979 14.7236 li
194.229 13.8735 li
194.479 13.0737 li
194.729 12.2236 li
194.979 11.4238 li
195.229 10.5737 li
195.479 9.72363 li
195.729 8.87354 li
195.979 8.02344 li
196.229 7.12354 li
196.479 6.27344 li
196.729 5.37354 li
196.979 4.47363 li
197.229 3.67383 li
159.828 76.5234 mo
160.078 76.3735 li
160.328 76.1738 li
160.578 75.9736 li
160.828 75.7734 li
161.078 75.5737 li
161.328 75.3735 li
161.578 75.1738 li
161.828 74.9736 li
162.078 74.7734 li
162.328 74.5737 li
162.578 74.3735 li
162.828 74.1235 li
163.078 73.9238 li
163.328 73.6738 li
163.578 73.4736 li
163.828 73.2236 li
164.078 72.9736 li
164.328 72.7734 li
164.628 72.5234 li
164.878 72.2734 li
165.128 72.0234 li
165.378 71.7734 li
165.628 71.5234 li
165.878 71.2734 li
166.128 70.9736 li
166.378 70.7236 li
166.628 70.4736 li
166.878 70.1738 li
167.128 69.9238 li
167.378 69.6235 li
167.628 69.3735 li
167.878 69.0737 li
168.128 68.7734 li
168.378 68.4736 li
168.628 68.1738 li
168.878 67.8735 li
169.128 67.5737 li
169.378 67.2734 li
169.628 66.9736 li
169.878 66.6235 li
170.128 66.3237 li
170.378 66.0234 li
170.628 65.6738 li
170.878 65.3237 li
171.128 65.0234 li
171.378 64.6738 li
171.628 64.3237 li
171.878 63.9736 li
172.128 63.6235 li
172.378 63.2734 li
172.628 62.9238 li
172.878 62.5737 li
173.128 62.1738 li
173.378 61.8237 li
173.628 61.4238 li
173.878 61.0737 li
174.128 60.6738 li
174.378 60.2734 li
174.628 59.8735 li
174.878 59.4736 li
175.128 59.0737 li
175.378 58.6738 li
175.628 58.2734 li
175.928 57.8735 li
176.178 57.4736 li
176.428 57.0234 li
176.678 56.6235 li
176.928 56.1738 li
177.178 55.7236 li
177.428 55.2734 li
177.678 54.8735 li
177.928 54.4238 li
178.178 53.9238 li
178.428 53.4736 li
178.678 53.0234 li
178.928 52.5737 li
179.178 52.0737 li
179.428 51.6235 li
179.678 51.1235 li
179.928 50.6235 li
180.178 50.1235 li
180.428 49.6738 li
180.678 49.1738 li
180.928 48.6235 li
181.178 48.1235 li
181.428 47.6235 li
181.678 47.0737 li
181.928 46.5737 li
182.178 46.0234 li
182.428 45.4736 li
182.678 44.9736 li
182.928 44.4238 li
183.178 43.8735 li
183.428 43.3237 li
183.678 42.7236 li
183.928 42.1738 li
184.178 41.5737 li
184.428 41.0234 li
184.678 40.4238 li
184.928 39.8237 li
185.178 39.2236 li
185.428 38.6235 li
185.678 38.0234 li
185.928 37.4238 li
133.729 81.4736 mo
133.979 81.5234 li
134.229 81.5737 li
134.479 81.6738 li
134.729 81.7236 li
134.979 81.7734 li
135.229 81.8735 li
135.479 81.9238 li
135.729 81.9736 li
135.979 82.0234 li
136.229 82.0737 li
136.479 82.1235 li
136.729 82.1738 li
136.979 82.2236 li
137.229 82.2734 li
137.479 82.3237 li
137.729 82.3735 li
137.979 82.4233 li
138.229 82.4233 li
138.479 82.4736 li
138.729 82.5234 li
138.979 82.5234 li
139.229 82.5737 li
139.479 82.5737 li
139.729 82.6235 li
139.979 82.6235 li
140.229 82.6235 li
140.479 82.6733 li
140.729 82.6733 li
140.979 82.6733 li
141.229 82.6733 li
141.479 82.7236 li
141.778 82.7236 li
142.028 82.7236 li
142.278 82.7236 li
142.528 82.7236 li
142.778 82.6733 li
143.028 82.6733 li
143.278 82.6733 li
143.528 82.6733 li
143.778 82.6733 li
144.028 82.6235 li
144.278 82.6235 li
144.528 82.5737 li
144.778 82.5737 li
145.028 82.5234 li
145.278 82.5234 li
145.528 82.4736 li
145.778 82.4736 li
146.028 82.4233 li
146.278 82.3735 li
146.528 82.3237 li
146.778 82.2734 li
147.028 82.2734 li
147.278 82.2236 li
147.528 82.1738 li
147.778 82.1235 li
148.028 82.0234 li
148.278 81.9736 li
148.528 81.9238 li
148.778 81.8735 li
149.028 81.8237 li
149.278 81.7236 li
149.528 81.6738 li
149.778 81.5737 li
150.028 81.5234 li
150.278 81.4238 li
150.528 81.3735 li
150.778 81.2734 li
151.028 81.1738 li
151.278 81.1235 li
151.528 81.0234 li
151.778 80.9238 li
152.028 80.8237 li
152.278 80.7236 li
152.528 80.6235 li
152.778 80.5234 li
153.078 80.4233 li
153.328 80.3237 li
153.578 80.2236 li
153.828 80.0737 li
154.078 79.9736 li
154.328 79.8735 li
154.578 79.7236 li
154.828 79.6235 li
155.078 79.4736 li
155.328 79.3735 li
155.578 79.2236 li
155.828 79.0737 li
156.078 78.9736 li
156.328 78.8237 li
156.578 78.6733 li
156.828 78.5234 li
157.078 78.3735 li
157.328 78.2236 li
157.578 78.0737 li
157.828 77.9233 li
158.078 77.7734 li
158.328 77.5737 li
158.578 77.4233 li
158.828 77.2734 li
159.078 77.0737 li
159.328 76.9233 li
159.578 76.7236 li
159.828 76.5234 li
107.628 60.3735 mo
107.878 60.7236 li
108.128 61.0737 li
108.378 61.4238 li
108.628 61.7734 li
108.878 62.0737 li
109.128 62.4238 li
109.378 62.7734 li
109.628 63.0737 li
109.878 63.3735 li
110.128 63.7236 li
110.378 64.0234 li
110.628 64.3237 li
110.878 64.6235 li
111.128 64.9736 li
111.378 65.2734 li
111.628 65.5737 li
111.878 65.8237 li
112.128 66.1235 li
112.378 66.4238 li
112.628 66.7236 li
112.878 67.0234 li
113.128 67.2734 li
113.378 67.5737 li
113.628 67.8237 li
113.878 68.1235 li
114.128 68.3735 li
114.378 68.6235 li
114.628 68.9238 li
114.878 69.1738 li
115.128 69.4238 li
115.378 69.6738 li
115.628 69.9238 li
115.878 70.1738 li
116.128 70.4238 li
116.378 70.6738 li
116.628 70.9238 li
116.878 71.1738 li
117.128 71.3735 li
117.378 71.6235 li
117.628 71.8735 li
117.878 72.0737 li
118.128 72.3237 li
118.378 72.5234 li
118.628 72.7734 li
118.928 72.9736 li
119.178 73.1738 li
119.428 73.4238 li
119.678 73.6235 li
119.928 73.8237 li
120.178 74.0234 li
120.428 74.2236 li
120.678 74.4238 li
120.928 74.6235 li
121.178 74.8237 li
121.428 75.0234 li
121.678 75.1738 li
121.928 75.3735 li
122.178 75.5737 li
122.428 75.7236 li
122.678 75.9238 li
122.928 76.1235 li
123.178 76.2734 li
123.428 76.4238 li
123.678 76.6235 li
123.928 76.7734 li
124.178 76.9238 li
124.428 77.1235 li
124.678 77.2734 li
124.928 77.4238 li
125.178 77.5737 li
125.428 77.7236 li
125.678 77.8735 li
125.928 78.0234 li
126.178 78.1738 li
126.428 78.3237 li
126.678 78.4736 li
126.928 78.5737 li
127.178 78.7236 li
127.428 78.8735 li
127.678 78.9736 li
127.928 79.1235 li
128.178 79.2734 li
128.428 79.3735 li
128.678 79.4736 li
128.928 79.6235 li
129.178 79.7236 li
129.428 79.8237 li
129.678 79.9736 li
129.928 80.0737 li
130.229 80.1738 li
130.479 80.2734 li
130.729 80.3735 li
130.979 80.4736 li
131.229 80.5737 li
131.479 80.6738 li
131.729 80.7734 li
131.979 80.8735 li
132.229 80.9736 li
132.479 81.0234 li
132.729 81.1235 li
132.979 81.2236 li
133.229 81.2734 li
133.479 81.3735 li
133.729 81.4736 li
82.0283 3.67383 mo
82.228 4.32373 li
82.478 5.17383 li
82.728 5.97363 li
82.978 6.72363 li
83.228 7.52344 li
83.478 8.32373 li
83.728 9.07373 li
83.978 9.87354 li
84.228 10.6235 li
84.478 11.3735 li
84.7783 12.1235 li
85.0283 12.8735 li
85.2783 13.6235 li
85.5283 14.3735 li
85.7783 15.0737 li
86.0283 15.8237 li
86.2783 16.5234 li
86.5283 17.2236 li
86.7783 17.9238 li
87.0283 18.6235 li
87.2783 19.3237 li
87.5283 20.0234 li
87.7783 20.7236 li
88.0283 21.3735 li
88.2783 22.0737 li
88.5283 22.7236 li
88.7783 23.4238 li
89.0283 24.0737 li
89.2783 24.7236 li
89.5283 25.3735 li
89.7783 26.0234 li
90.0283 26.6738 li
90.2783 27.2734 li
90.5283 27.9238 li
90.7783 28.5234 li
91.0283 29.1738 li
91.2783 29.7734 li
91.5283 30.3735 li
91.7783 30.9736 li
92.0283 31.5737 li
92.2783 32.1738 li
92.5283 32.7734 li
92.7783 33.3237 li
93.0283 33.9238 li
93.2783 34.5234 li
93.5283 35.0737 li
93.7783 35.6235 li
94.0283 36.2236 li
94.2783 36.7734 li
94.5283 37.3237 li
94.7783 37.8735 li
95.0283 38.4238 li
95.2783 38.9238 li
95.5283 39.4736 li
95.7783 40.0234 li
96.0781 40.5234 li
96.3281 41.0737 li
96.5781 41.5737 li
96.8286 42.0737 li
97.0786 42.5737 li
97.3286 43.0737 li
97.5786 43.5737 li
97.8286 44.0737 li
98.0786 44.5737 li
98.3286 45.0737 li
98.5786 45.5234 li
98.8286 46.0234 li
99.0786 46.5234 li
99.3286 46.9736 li
99.5786 47.4238 li
99.8286 47.9238 li
100.079 48.3735 li
100.329 48.8237 li
100.579 49.2734 li
100.829 49.7236 li
101.079 50.1738 li
101.329 50.5737 li
101.579 51.0234 li
101.829 51.4736 li
102.079 51.8735 li
102.329 52.3237 li
102.579 52.7236 li
102.829 53.1738 li
103.079 53.5737 li
103.329 53.9736 li
103.579 54.3735 li
103.829 54.7734 li
104.079 55.1738 li
104.329 55.5737 li
104.579 55.9736 li
104.829 56.3735 li
105.079 56.7236 li
105.329 57.1235 li
105.579 57.4736 li
105.829 57.8735 li
106.079 58.2236 li
106.329 58.6235 li
106.579 58.9736 li
106.829 59.3237 li
107.079 59.6738 li
107.378 60.0234 li
107.628 60.3735 li
35.6279 148.074 mo
55.5781 148.074 li
@
0.5 lw
[] 0 dsh
10.4282 3.67383 mo
10.4282 182.724 li
261.278 182.724 li
261.278 3.67383 li
10.4282 3.67383 li
10.4282 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWEO+Helvetica*1 uf/DVPWEO+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (landau.eps)%%CreationDate: 10/4/10 2:23 PM%AI9_DataStream%Gb"-6pNe=(c7&VH!;?Ib8E`a@V\".]l$]C+-4'u1Pi(?`rSq/[Z0Wp2DA^r2qu*+ModjK_4>*ob9<r(3KB:L.f^0,4b+jG&r-UEi%(\2j$9$I-1H-mE:*qV(]WE#@>QkajF0U#$83>%Ml')?o=NF&TE3qInZS=NGF*GIR:N;B<k[,<V3>Ff]tEIB[6U"]fMruYt+la3T\%=7bslhikY6,,N3LCVA>dlD)Io2=ouE*8KS.fCHT+n".f0D.uo;Vmm/j(12(92q-?5<:Jr*jS%Q:e":i\F4;G6HT49OVski+MLSu)%ZPaZ4C7%M>Wgl0kdj$=:\O8?@k61FJalZJFO+2-5>Rp_RF*p0hqa6F2dRS4:S$Ze@dI9.iR_>!kj*kbj@5*QYJt-2lVr:SO/XJjm%,f%^!_>)LTPWtX3O_5SWV13g>^C't(<i7mHNM`=Y\ECO8JQ$8<]B]>*)L7&Rr7S_JmU"39dc>#m"2No#H1K\2W%7Q&>PR$#^BH=L%n3:7Xj@Opgf&T2e+l!q-k:jo-5K@d)&XnDclaJ\o!/(R%`mX@&FGkJb(D(u"fds.^kJ\G;.Je`,Y!1,+&T3_cGe,VS+5U%uc(]JD%7l,9Gl$`2Y"nW"e^;cu#eRgHbpiGKupHF_7ro]RHUk<?^Z^EY74,hOcEh_+%EJ]l0d_PN'_Q[ILLB,:$3Ia6Qc_7M+d9I3_X]Z#4%+Y@X=?iTLHs.06hETg14iA6[Kc[6ct.i%0K.)NGA_Ga<bVkQ_Rf'Df`Gq5)0;OIquAMR(3PCZW"9YIUYREn6gHlgEQ6Hm@%q)jna%kFiUfJkmdpWBdFT"l?=[i(9aHAa4D_>-DQon92JTcg,`E%d>_40Bj!]OZ\=VQ00@N)t401?qg%rV-m!>8BEY)&UZn_(_M/4\.qPr%G@=27$!/f)pk5(AS4LmY,5?h2_`-A)0gV93R\Y?["lk21-r[=e4_9)8k6/d-M?HQ@8_t^;-bUmU-[d5A6dM#X;G*$8-jAX`:T0,o%+;m%^7V3(CTbNG]R:-.3nh,k352ci<8*1mW8^H?*HpT8!++05S,ZmCk9%o%9'c_aq/,5m`)<i5o3g:h-;rBu3:3mF6-iG7VP+%[3%+siI<-j-5C0G?n\Dj+%^V_C=0KMhrf@=/2)jB_P61,(ar:r-t%FpR/"$O"'V**.#I_)CL;_%_J/$=,'$9&NHj8"`W2-#eL..l3oY%NV"5`.BSffant-Zq'/$MPY&*IbW14`WM,@P#l\Sg:>YLE'l)8I97`:]qZOMG][uW`hUZX:Tlb.;'e!kh!'O4&$#aV+;#73a=)"#N%9A\`T%fa@(iJP;G-OAdip.bNa.<;P=P<WD.SL/QfDt97>P&'HSr8ht[3gWe!cH1R4&p^4"PJ;.+>\i6XcPNZ`aW9c<r7,QC>5KXr%SGGbN3QrLkP'JA*aqa_AitG=U<#U4PEqO1U<j/D)+\SuJ<#4:Us5@;o?"`EfCt0>$I_id(b.a\%2gX5TK\\SoUi5#U]9Hf@)b-A6%!".sQ*]s3/s0UZ[7_)"3F&'?A9Bk?,YMJ(oemSI6pbllbB&13"gX\M<jj=pmSAT:4=1uaX8UY^a2*NDF;_Y!uIqPmtE@km<Y?jrT%JW?^Rldi1X3Mj,_SurI7?0)W_Qg2^PeR"eaM'FfV:!%hDe+1$AV9LUTD8q`>H4ITBgp&;r_u8'Y7X[AARp*!E^U0,umlK83N8(aG%H!J@TQ#ZEda@)kPQ,&O6H;l7kTZnAH$,\l@lCV=>Qr0IE\pc(c!encR-#.kkjjAoIeJG_K!Y*#96B7!DpI(EhgUSKb6=!YS`\iHZ%Bt3BhRBA?Li<r_QhkkB=U\.LqEII_S&_Dt)2p@CF1NM6%BP>#T[B7rso7jN:<GJH]\7V0e6b<E9e>c>"iYl13)nQDo<N:Jk*E3=-%%,Z>'r7""<j-jDBe%B)n%=Q+?W2N[)UlN)VlS>'tH[pFF^fKm.OJCcdm[*105T]u-$'3[tP:^t*ZXpp[e@$[#OOd%71o:Y%T*\T=%D(@JFoejq&W^'@WN)D9p;J&B'F!E&.b8?sm;4d'L8n/'A(A1Xi;Q.Qn;`PRk90do;]YYm+XJqd-e[JI84cntBGl=+N%BI7X0*V\a%5m#p)e/>TfLqIl6BG_u^OJhl0;Rc3KRN\M*Ef'9$XcHMr,kQWU.(rU"=2IdDl7$Yi8Sp%Vn3MV'?/`.nFl(2D1b<op'ib'EU^s<`%&ue[CGsl</R4::#5[*:P7NA,3^!)VfA;*<+-)f0B)<SSHY$Z`?DoZ4LG>$Wq24.jER^K,#JVAPQdBGNGYnE<1F_O\(nLPPVlR"_K%@_"BuBg")idU$8?MCO+Zg"!+)*b<9t*og/@C/[(`=kE,*.]7#Db5cga2<?l/m(%+"FkfWj8R9*])HCV4H.+gUd@=+8@"8@<WRMao%o9?02DWimeO#`CJbD=ZhosdJq`5'u9^8A\JSKhHD/*T($pojBr_l0")=#,*U`#Mi"+4;D`/;A:%/S]&H"^t0n(StiF>)c3e.OV8I%4XOrg8Wt?sR3aYT8fN)G29hdT1.Cc!W?cD8Kr$,m_N+WFG`+TaT'hB:-O(#KjbgYL'\45%S;%U1USU,k88C6n;=U17PenFDOmXZl%7_54$<nB-e\(4P/8XoL=gbR@g2-I^peVW@t0_/PF5,ZKS]^cQPEroVu3J^g:02rG!CV1#Bj^h]GGcrGClStk=>-?:M1N@3l3j2)A%BpC@@ZHU+N.6OMI>h2&\V((]3/%$!OL*gmh32Wd4]Z.o*9gulbKb*-"1bEB^U",pu&o(e>ZkcM>B.Qj/=Y`NTJr,5_b.-]$7PJ81%qBgog]K1h(6;'-]b0NMG?ALE@8DA_W,=9Z)G"RB$aMrhcH[&3'(1S:5%E^Z'6;!@Q!C)R,-EhAD'c-QR'eU3'C2YUSOr!WB$nLn_%U/@+u2"'<1_J&_7)01<k;MB>4RN^G$nd:-IJglCd;"P&r81\<Z?\_OpEVL1&GCUU2;<-;C"4!@C!aHp&l_-ANe6.s-ot$$eF[@Z`%9sWk'79YIr6B6eY`XPl#>,4bKWl10'TS[Lu=Wn15<lSY3e>+_PEseO]>Zi\_cli=RXU\IUiY<B,hGksmBn_jcl@`XqD9+EOAVI4o%65fc(;^rlSq+P)VCRg+'7(*l*[hMu<VY*47G')IG<iBj`/&+@=#MsthdWr]<EaWGpnB>YF:Z6(5R73Zh.SErFk1$Vi<`>I,Pa1do%W9'tQ8rFH8Y]3[DBe)MR=m'?)6;TJ\EERUJ.3-1):VE2g>Kg2=iUPX').h]a@1:i%Kl2Fqf$1o-S#So*4%%lUA%&OO1GgioV@jlo%Qu+@b>3[k$./08`i;3ISQ>3n<SSdRkDppUdkPs8jG1M)W9AgRr[e2^1`1G,WcXBf`ms$Co@fgM:pJBLXT\Ho(ZR"")XsW00k2><i%i#5oJA8G2S[p655rlSoE;->K%4-8/-<97;'feVLgph?1k+C#<5-q`7J?!LRaOVAbA@_L$OlWCG%eqRK"YTU\1UB,VT9GQHCo?!pq%qB4,6htY<Y1n0PSO$5:jr0`UXd^1t2kY(o&-M]B1r?Hk08$^Y38JC`,ROh1[j(+u2FaO(9.p6Y1jteH33pZIN;Y!L1k"FR0DmW&t%(9T7BlLZEoq;Aq>rB&]\b)l@%\FPYX\V/l4,pi,^7(k(LYP(N[4]8.IQ0G8ZL:DP:E^\'18D+STG,1EEOflo"d5`X:f8BEfF1#hn%p$j2"P$QR'8P4.;]T^g42!Mn+VG[YhIZj)D^G!ipj44>U0`Fb?2[6Bm\(sPNRU?p[<*M<7)3',AH68ccjD<908qY^U4%]:A2O>8@%AmOXa=fNdoVZ#*<e#2%@pZL!kD`H>U.Gqn:@<+%\hY*A[.GpmlpK^*conF+W*jhf8GonZ'!\JM$DZ+3#9js.>dD(E-l//%\COgmY%m-8^sIIr-fepDn"-J.%4O#`YDBeZ"KV>$C$73EcHqn4_CHoc.fUh#<U7S-'-q5]f$!KIT#W(T]rJA3c^,7rm-Pm^J;^=)G5S))pc%4[9PnBI_4Je6h[.(7ES(HnrQ%`K[+j)dhRhI*)+()R,/AW9*(W[57(LK&F2jkcEU/8nnV$"Y)S1*6kAe7=<2iKq^HiGDT]s:$l2F%JEDsK5GZ^":b?c[$D!;GB2j<%\Bd^&)cG[MY3(I$lG?4hVnFAK2OT@eX"sd(T1Gb[X+L_1O>NYE?h/8%r+JgeK77T"6Zb:+9&I`c%$bb`8Y$ji/o[3!tF?Ycnr_rHN\FX,e<?$*Ni*]^W^T,S>PhY5.;S/LL$4p"DlX-G3`;>d6r2&h[/RAAt9>3n[_ojn'kHeV1_*\!d%\,,;4PO&b9&M;4U;\TGr`s!$,PZfc9E8fhu4:iDToNABJn+PVqP@u'@m,"*L:Ia/c#I/h$Wc84O%99%D-dN"F8'CA]oB@NpH6=+j%T?eigA+[XQj^."haf<j_[JU)uOtd\Kf`+L[&'6K#3%3QP\GLUFHdEi,?^'PTp.?St:D4SZ,++ss#m%4mhrtuLjBg10F7cCc)9p3W%_tT9HKH]A?Dp:KEjZ]E>C"P)r,F<lM#.iRUr?IGOM,nO7G-(.Y!^;tnrj2;7if*)4q1eV/C>PFOmM0#M^_(SG02L`Z:]L*$e5uOF%J#%6d^5_SJq>ZI5cLD:[ZQXn,\L"e:Z),lZp0ZDY.W+&EHMHB&H_lEs)8%g#3`Z\l4BG`2cPC2qhJZ+6m<sA]Ho%EAVX3/]TOB'f%k8ZHWV_;?S7O#ge]sas55+2m.Yi34%iBL4i1o<=5hEaets/n3s4&la=KK*Q[;$a%3%?.'u(jtEC=.cV"KY'>CXQ,IF$u"F7%9jK1%^9:QDlj)K&ib*S'7..%>VLe3bX=kW=k(sJ\O=*i>RsaoK/J#SVnIWf.pqgB'@i15&hian>J`MmfP#o<tin2CPc@:TJJ+s]gEmB17%)dOGW+(+6_^\fP\M?!+6o68U<qb(2^*m"Usi7gF[=rlJI[mcec<;s'XS*']FZi&]p<qnc$MLVPWeDFsupK*g.r#M$Er#M$Er#M$E%r#M$EV#O2rRD73ep?sj8Qg"/3/:?-cZg_Q+%[Y?;*A3WU4'X94GIUWG5L-)HdG<Bd5C7QfR/HhN^JNJK!M@EVrT%hlM'[!aRVQrP%X0@'0l:X[_`P"EQZZOY5QO:EsqFo;:k8iH*=`%M[Ae?VgM5m>%D&OHJY`(W[F6!p1%\]?k:VMf<1>K79>jeX*85&Xk?B`Mh_?%13%@=r6/ns`nAT/9>6?-2Zr[QjEQ6%=\3a'5n'Ut;3aUhL[>(+NLV9NqIa.TTA1<N>ZDlZX`)OH^@Ta[61KodP:4IY4X.:ICVhl0CR9%a`JJ!e^Y)0UACVa[/+j?/DQlOPT(g(,fSi99QaG:9;-ttS\tMqri#E?F]fi^P`5RsEOC/g;uiLuC^<&(UtI1<K_tQ.dOUc8O-&9?%+i-#7?E;nK=:jA4<rY)jHJorX;MUur)5CVbSb[@c)Z3l9p?1qL0PuBF")Ar%0iiDoj)fkKnmBn3s$'?Eo_i.s`N/N9-A-$IfD4=L%MhMR8No!?69!,i+=T?q;c9>BC=>'Am=YQHa',_s_EZ<Q,"O79(_bs,+j`+k\DF=7Z',gf:JZ)('\W#Z0b@lA)mEqS8PXcsR@C/N\%,RlT,pDGu-Lh0QJGQ%tNIa%Ac7e92A_T-s#oq``^:k-(b")6?O,"]jk5OolmZ/1a?%kQ@%'uhmkSk.\oI,NW%iW@lcc*5ecD^r/[%%XHp7)E=s&UgH=X8t,P$-dkt_q)*ka;of$TV_mW+Tb^ffakm<3)!p+2B-GMKbb0'FpRb"*:]Fu64TBa-K.T\pf,Ujk*[8:@1nXS.%aA+]/'ffR]BCjdn'l^<>P>7$MGtR"ken!>Q[3f1/#7`fdo;MZrkQS!=Csj4sa"9-KS_p@R]rlk=q]C["8oV"tRnjD@+_P._TUL'V%\k'4B`?aBq=g]NYRg=rWPCFkX[IipU^Xhes>4#Y22uB`&RTu[,Q^Y&8a1V'gq9MQ@Aa555>g+TP3GruO###l@VVd+l9uj#sTiA)M%P?DKuRCVaqQ]M4nha+$-W74^+oU"^HObtl*"OHtcXYD#OBl>]o[koYqD':;lk9tk"rcaWr-Fg&M5>l-KT\XMY>JlI)?.#huU^&hX%rsSq"XlOR^)1=%$#B*PNe*i8nQU0U-[iaCF7miV%`X3'3rfJO;YaVRI5FT40B[W0Wk/m9D:Id4sA"JGDE26LsmgX8t7T8Y<j1rJZ%eg:+=1chikH8N-J"U8:q#C]5T4KB%u.7t-rGtVbM9[B#bZ'!HDE+B*Y#Bq?.kmYeVI5JUOG(/O0*$*?Mm5ACu_&Eg:`T1`L=&6uc%Jis[hA^=no\t[T0L(u/W$nP<3*Er<5P.05el@ODp9ch2=R+,ZM,U2A7EFd[p&frf6DE@)2\thfS_ii4E6I+-!CN=];!G?[jg`<'.%r?66[`a.`LM02I>K?l")V[JO*P=,qA6;;t43*XMX87qa<=K,fPM5H>Fdt2XD,"emed9O$\AcFW6J"K=h[pkta@O@IkNS4Z8e)&-L%V%Zl\$f\.&bG)@Z_9mV50/8],:#!A7TJ^mF9$0iO@[3p7Va!ap7RP+CB<[sgF;7EJCq:(2ofA>.F;(DUOL>OiT\qok6_C-qs6*Nu%@k#&7cuiJb,.*5RfPc`_T8_n2Z1$HBA+6$SZ8IeWg#r[U5R9oM9pU"MPg+M1FoE%@g(N_F-mEA5`0;jn[d.Ek+MHb2aJIOBg=pa!%MPZecCGL#4/hVrF-?TnX;>c!=Yf\.,b#1obTet"@1:G.FltEEf2+(f[f*l5i?8Ig(0K7IN]FSY3DLXco*t=bHG<ATM6oBP:'uqbp%-4onR=`9+R;X:NcjM/`lM35@,p"cY/#7DJ;j^^!>M7?TeRT>FS\FqdT\s'+bH?h#sj'mmn4.Y*7g_h@OiO:W<mDSn/Jtq"s+q*%&%#n+;f-Z0Pu$3-RG7Nr_uTtC<%d+-t*q,>rGO5M4Z5_IS_+]pZ,Jjs\BYe%X`8@Y"7Q_B?h<QJjtgTJm;O36U%9@;nR&<b3JF6i\W%^\u\SmiMP$,P+=l%r%elh>4>8Q?K=DUgkic&4.OV"(5U)YRKjoB"=RLo5DBA9g7?61K<KY9'ru<2=7dIP#@W^3JWl^'H6^-^E&CT%Qg"pV:*;u:B"bon.C*6(VVi*J;?eq([fpTB0Pd^A'7QsN'$E&ZH!;/OB[''EdQ^XeOjgacTUe%X)+kua;?"UMgq_U*lo9)>e)u;^%\!/LL:HWUrcW1jV,otY"QnV0m<G&Ao28l>6AdpgsNW_Se-"/Xu3(P^4^slfV\3P8PL`P"7\haAN[:;De0JN]8\htHW7Oq3r2jL,J%n@!(Z"7&KL.Hq'Pf5(fBC[9TL[8\YcYhtgA,aK@`MdgNd,cnU#=VS-d%gRc<@ajf&(o\9<LZK8.6'UbI.RCrckE;LT[q:d<.$$i7%#dU`:U^dTpE$QaRAhYH+1tPI86QpQ*3#Y-VatmB;maH@[d&!eciF+?EPlS@ff'$H:/K6:u[ZarOH4l&M5A)2<&lLe-"]9\eU&Mn>%[`.8!XB^2"2nfgR06^XNGOAm8I4@X/0/K5OcspT2&3IFPn-&pA:?"AI'C(iJFFP[R-$LFt\>aSC'#$n2L$8p/8G,&E4F>frb;h;D%q3;iqg53Sp8(ftdlY95+K3,$-RI%>9NW/<H]DQhm;(BP>r3J&d?0#pFeb/@C<im?(4nFe6Fso9lDCdSqXmu'[+SPVR!<!E4@^"TX%1_qp,X$GlV)M8t>$*fm/7/(lF6+I^eWkECsB8jEL1m#?)\h)%>hN!J</;`FErI]Q)ND2jgpjBnlY!0K66MZBGY.Mg9@@V$pRljD0%EiA*T4M',MCh`r<e`Ie0h=g\,\nq#d]+7nQi6CLsZ9A.DH/:_Lj-$CB&=S%2Xk#%LQ[_W`Il:f&NBViV%r<30#[b](<MR8N1u"V7%,boRn=];)njm`,k\DOZ.FLqI7.GH_+Y]l3MhVq"Q6.8q7iVVh^kNp-mdC&gDb-k0M?9[5TC=F%fc">NcL6M,021SU903nJSoZFbm%7UTkm5C1#OCp\1)>iS;).a7r/IdLFUiC4Dg[qkhC]ph./pR9HBfK?(*#P#(FLJahGOk(pqL!4:q;ZM3Z[:O#.SK>G(m2CDD4F[jE%D&V5KA[:t<*mY5M/8=aQpi^B'keVujg4$>FF=6Q??2p-A%?7)_8@'+tnD;L2TP;qiFLto4ZY;8&^A]qgQ*kKdp$g&QO*AlH.op.c%Wt4d;e7nTmW_oo_l5eP9\p8<C2%5I2.rqs/f=4r_AI[SH4"g<!]Y-XkB#dB8fkS0WEha08OJ1(ochGs9k5;12g=(7O2qD>_>k9X&%6DG.A8.WFaZDhk!A^r3\*5"q!7WBr!Zal:R9A?Vs([eASG%KLnn^ao("O]sp)ne9EZ\U*u`nG7)N`.iq5,PjU_lL"9U\!/=ZgjF5%)YF95AoG4_caM5:kqr3MfB=B%qm*VBh.SUZjU9q"!iJK1Z/3H<2f0MI.ttF`m2GA3^LFf.>,,a^<3rKXdT<(T$!B1_gg3(ID=kHe%h`A&WoVmX#q;nH;Z6&=7FDW!`1hkY,Rs6$\D051(-'HarKiO(D&:qs!If9e97SQ9l-L=7SE]Y;kB]7"QPNMf4<c7Ok+#,V;$i[eN%#8>moYdG9.d'#:hdDBQtK19?_9"dt(c[$t*W6tRCEMU"k0den@.n7q!kZM>UgNY#4,<X9Z7s_=[_:<9ZF_EU?BQQ"Z$O4&8;"aoI%>+Z`P"jWa!hiVN/r,LN=kh>^Wod+KT/D`4QFJH]h(_A1'%Q)=r7X?RKIGItK,,inaJ1kR=n75FT.]_k1_!j0'j:C/8T8K2W\CFN'%'gi&TW,MPk@_J6EgS\:nV]/R+?C@,@k5N2lb$c3t-3iA?]RG!Jg3r;>5<T>F5I@=8LiFfANJ.8bBCkRFqkmN)i':q(.RT0,qQ,tL%hnHfES_62tb[Q10W&5Vie9cP+rQub]A0a#"p7jCPIsSSD^>\Q<o+]WERNZiun6*/KqcEVKCB*r%4*5*-<.W[p.!9J.p<1L7AG[&m%msBET:K+amQ35)#h8K2MrR5dNQ*Pmc\gNLX+NC&P'Xhl9/o6P<YI74/S'ai3H29QV5qK6[ZM1I`D]<t/5iAXEgS`F>TilM_\p[`5%+@_r`BpCFg_a<@ZWqL;p<3qd^UM=tVHX6U4/*5j>SM+)NQ]A5K`TYip/frZ8UL0#PrT%dq;SR^]GL:00<lH_d.b;'[<9EjaDmp`V%.'Q`>X$Q8Ra#>A]_Ue.#>_^mQrV#3?)XH7k\:kYhU@&^FNt3/8:7gO$>=b*pT4;F;!TSUKW_p,A'R7O,0/kE)W*JE%VGX/UA1tjH%2N9m_=Z,IPP-M1?a.h*dAT_Yaf8XXB>DMUaLXKk2:H,iu#ieD)F[(#V5m-mE/PqFM2`K?r7]0JD9asfc?)-Z1E2`Qa2`(li\.%;.%HE?s4fBTJkD513WY\>r#%[t;)[dNJ%RX04$BXG%,Z#:=5#=G7g)OF;-,a+I!UR1\6k"^tUm2H4S7)r_4ZQ&BrVZ)Ir_H(2+a])$:%E)u(./@q#">GP))W"BDP)Rf]F</S=s-JU1U9A7Q2Cj][XhodtH/&G>L3s<?T7O-SmX;7Qp.e-%u<V9oR'Y8Lf;%j"G)UV3b4IVk)%?D(Y*;#b=@AHQ^7c/5%db>$?-k7ONk,![*k>SeOUN0PSgqm%iOYs%M'*=Q[)HfIrs>*cW46^CaiF`dY='[bU]E/2WY:T57c%jWO'%d"tk-ps99fX*e\mlTbUr%Jd]N>#>3SSW%Bs"St=H<.4&aWHCCJ_oL]qOg`l_rAp]=?4>AE%3Uu\7KXZ\[-ju`:2VpQEF\mUkr(a#%JB>VC'&+;Z>17*1G5d"Umq=T&4?dR[3Zg'"+N++sd[,&kKqH)P*O)%`Rss6HK^=B0=J>VJY<>Z#?8,$gX6kQn\/NFudE!*k^>NI^%J$1+=(Zu4@TI'3/4mb]1XJ]Z@4mM5K=HB>9"2#^b'-.)'0'cZ$FIq,16CA^72:08P%DC.fjm.:%nb/06$9QFZ"]Y8n-9TVta4>(]%L+8$;c\uNJnMTc&.i'a4jRpIme8O;?9LC]YM2bLBZQBpZrSpUtp+=Y)p/I#u*Y<5N@8(1B8qoA:ZO%_?[aW1.o4nlF@.=D'!TUOZ%QU<OVm%,JfJJ3Zt2("B<nuqu=P*HoaY-li:@]E?XMWf9?$f04DBa]""9WBk_17-,>H6J#-A1i]4)D'70[J%2o5+VI9[3lVD[L#%\%-8%hj[a.OOS#!#jD)#k5m^LbB"C$ORIZC/7Agtr48r0"91.!1G2;Fu]B%GFJn<*9Ch68G=4$T4Y8BpUIDW\S_)5*qr-(3p4FoGsd%''Z@rXlqdQ)-@JsiO/-;Zt@o9`;.s_Y]S#[Uf4jHG,`okEW/r%68sO7+s$:Qjf.p,Ba1,YFW5No#2_b4,o4?KXXa95Z<UOQaiZ07%i`6@?I[(HX<XCM.$cM+;=[occbkZC=lc0%Xh.kJ&9?0Bp^.[u*_T2"C$#;Sh'a)\>[2i7r*9c#Ljf*9$gi1.cPG4"[F"O(A$Tb=k%4pL4e/d*1FfV#K?Xk+L]A\h7u6t:LbTjo0;<u+['/3Di!6<@D_Q_bo2fi$]><OR"%M$p-u28e#!XJ%4BPgjo-:"P<ejACPdRp,B?%U$;ampg]#DP_A5aa)$kBm#2iiLK:F_.`5An%m'i<T)RBFnWmID\YW<(<l>!"U_%(bpK8?Ko.78ZR(dJLFKp(;IDX:7PqJKVQfmV2%$RHasejbfe`#F;cD!;\6\G*+tHY:X^djmU?3]Y(Vfn*g)h>GZ(&caGi118K4m^?/bJ7TjCrb/<o3:;d9OWVmYH54D-(:!07Nq=T7%@j+]#$,3&Ip59lDd"\=DaJr2Z@JQJ16Gd,n*?=>*GN7%t`kg=:/J[hchS@^i_3&_??JOt$n6iD#.B*@DJl]3h4eV_6BWFTagO1Ii%42P4>*pl,s/FS;>01T6=d0?>okk3;BYh,7F!OST-2<]bYUj3JaI&n-\>oLMQZjj\_DkcP=@5gC$Q9d8Zk5MS;KS>=9#)r&V/;.\M%"n2(=51Zog/mQMq,=110<5,"]VQ3udelKN(#Gbc`_B$Og[fcd]>Qj]"SS0C3\H+%p0\lq9QBK;\d*^%Bf$IigARVWsGhZQQduEcJ%:3T_@#8S::BREJ*]IRZa;U1enXEMO&jh0G9AH`8<&pp[EfKo%<W,-\?Og!PIiCsZ'T'U9OLKRi+a]#aHTcUlk\\sd?e=tB`,5!Nl%O4-jX<f8Wp<f_Of>C>7jGBf*/KF:eW2iGR3Doa&>JlUc&8iSU9<YHBN`E?1eCTe-1>u4\B@FN8/O3^:O!)HE<:t"@$,tCn4&f)!6%7mm#O_U2atVVdthnL>lP$6A#c/Q[lD4B0lg.OPWEc#S5`b0C)q3SKJ4dCdgiRPdQpk"PYKO*?TgT#9Dr$J_+Nm(MD)oGgT7ol?bn%i`O;(Zk#9e1++<7DX5['i\mZ*jXhI[ZAmc!Y%e'InM&PDBKKq`<AK3k[,d0H9\(#%@C)mfqs@9^-EHWH<8"QL,=ThaV^G-FL[;^[%P4PftWJQT`(ieonMeK;pKm%th''sZ3YUe53eko\5KBnYh8?T!#9,B+b<Q"UUCE[r#Y=QAtHn=Mfj/X:lEppYkfrp)j5?PHOG(0ih%ZQ`B!?J!q>QU.u?/,=Ya<=I-KB9SWDq^YbX;/[H+6Io-Fl=#nFX_L]jEEpi\X.aOMSF+FVYD.&'EU3V\YSP[!U5Q1/Y7h/91@7+;%UHF<Ka+"VS\c\ENTg>XiV#B^c"Z>%XQ7/.I>u]A;3Xb+`Tl*i_\$HP"jD4,_0btCG;D'h#I[r1?\^TsqO@$h,FKKgU\[p8SdE@A;%9uKK_`Go=$:X'8GHb.S0"Dak$_Gj+ZRj(utfC\ogHYR*rZm%/I<-_T>[k4W(i-j^c4O]Gces5dGc.,oeg/B>FZ6j%J]b&_^9NjI6%g?jaOL`#&G?n^d10S8_Uokjj!'I-(,q5VS*60.*=eloE,`QMiM+5aET?hN0SrT('8XA*#E?aU_3k6O-,A#kEZF,lp2B6UF"L<cer%/V6a*p3;OiF,lnl,#Z+od&H>hAH\Q9+n6=8k8Zdc714F"TlZ6eZ\]H&3/0'N(dY&g$[R`)e'G!JN_MOE`G5mQEs*Ku@HT(oc9f=J%3:9j#'gq.(6&0$#7u(XP8>+eD]@*bSJ[^[CHAFLroDnS;@="n4X7bd>#&bS)348F";>p>.@g.gW?7._C=F.$feUHb^]39:G;dtI0%8AEMUpmI\3I#PmL=2W#8Up#[(?`GHJeah`V3;;[t?^)/.NUOtL9U+h*F6)BDaORh^WCne..gJ$gL<M[S.5<#_mHMtU7#(CTFpXg^%gB2M>"]6SuLNpV@fiT-GK@0=&l)!Mt[)H<:9V.=WlkWkm@%r\RQF-9NYhK662Kj)D&$`Blbg3`V!+7P$=YM9KG*TUO\\=_XAU5/o%LfoOIe_P=f7\3ko;L93XH8Q_R<F7/qe02c;/c6IL=O30Ie*RaO*;6[P1C<HJiab#BRI0b+\V[FJZ/CWW)V)P"Q60lVQl=$.-?cZ7%nQC)Rlh,]"3&$]o(I6c;eg9'VSo-pal_n#7(CMh=Y<2NpCQldS)l:#O>55lh#8\:1R#LWL*QR=Y'=.Zoi):2/lb9:>S3gbB%m52M%/me4/6-M&qB#/p26GHP*0up%#g`^8`r6G"b%'E>lq>S?%C]qorK7H,>S$Na>S__^O?I$(gW5.L?&QgR0ms4ii6J^c#++*9rhWcf_%MB8uPHe+qDJJEMc>-6V\E'5+.;\1AA8Ja2B*\->66[MbP3,uXW@nd^MioW`-QG>1BV(jK?MoEcbIXV%rc;&D2!BD6I@Sj39[W/u#%BsHFgFm'SUX&h)o1&5cSo+"uLS7TX#?<ssuLoRS\9HJPP"^Q^`))aF14Ee6-H,i+m0"PWE--Cjr&PgjoK6bLf!g].Q_aQ.4:;LaS%OjWEYN-K()OrH+p<\]A)/S:-MohIH#`@V9A]gYEGaF>RsB6P?+H1S:DAAjJER\e'M6=+DZUEqKIAfl7c3Ld(SaIo6s>Fn!6#"Pa1%)5:9dL7u0Q3kAO+NatB,'ni9k>%E"SnTeFm1;4k2-G=YKNX^*3K6*!=bSFr"31h)K:l@7uHX@]a_uk3l)+eo89-OJW@?*JiFd0c'%@tR@n_D]\Qe3QG0Ymq3sfe*\md:poeI#RX.n.JgCiX5$nO/ql"DV4_$I,L@cf@'`[bcK@Y>#ups5UX/hob,s+i2RU!fL`dIZI%i2%##cc+<ZM]`[.?*Ne1D@FkApRSMW3TFp:V*2HTW:KLT7h.36eXfNem9`.LZ)W.U$fMGW<=+Ok%IhOk;U&7,4g&i=%WsV'S7eGW>XN%!S#i2dWdabe_95%\Qh7eH.UY+?>SNbW<<c[UrX-knRCiKOZ*\4OZijQD1*UHR!^)`C&`A;3P6E#:mB?@d^:.N@kH>WGY(&V*+`U:%)c_]$5*?<=ER:1t/t"nI15+RHH\7]42ut3ir<_j^p+hgT]!j@2>$?8&$sjB:&Q(IG]R&Qo3uQm-jI2$acmcuW!uYk#`^K#b)M^14%AjqH/>22jT`q:lXL*l;QeDlr*E@l@F2#CE7\/qO2E3iqjjtO;#qe]D92fcT3H4(f$Cs2q\6!d9P_^1[nT,LKi.u?gYfBdoH(61rI%f9h.\fcj>i[?P=S"[Q@u%(]Rm,5#hB&ZKt)M+G<a;+0^*MBYsefT1T,1MKj:61ZhX3eml_O!OlG)NKB7>=!IOS/3kK13<eU_qn4J%7I)K:$ATd:%EoQA_I87K17W(?.27fiDWrkic;q,RBdfM-]"crq3;W8`[M\CC6K*<nI^p320u=F%^jI?=`JRnlGWQLD5=d8-E*4ht%W\R):5b/>DiY;aHCQ8W;/gA24'$H^kbqo0a?oh$*a`RXD%ipru$6sr"SRTMClbu/p^h`QM=lV'\=e5_c+ERAkL^u.F"0pUI=s.,a%?NTbmHnBj_QjWb;J:-A.n?EKq`K).6GkJ?D+-;R?^S+EdVP23(04!AdABG-)1sP;0PYu9`+]!H`l9`;;2P#HU&oegsFH&b6KT?MA%7cj!hOB28+0%fQX;m>#C;hX!(l'6.Q7iqd:Bsg$GNHUk%Z-$-IUM;?GRZHo9d[6a`":S1&X!9J+]04e)MSQji'Of&4oA$<>URCe7%bCT.l([U8s@5gn`NE$I3MnRs#2@@!*5ODnd'93ZJp#_QWUQare?GO"s_#AEQ=uW?W?FKIchqCJO/&/Xt6V5IA0D!$,[2dKcqbk$j%F"NgZPjqLT3[*_NWFQQ.'e<!l?s$04/G6Q%Q6Z[$>J1/TYs\.c24geQC`Emt@!*Ep'>8%pPk<-N:R=eBN':<CUCb([W*%mCP\*^Z%jK,FU^/\^,A$j*Qh0l4>iNsW1;Rl)lqNaYrB4lpVf]nai8`\OE(O%qGSp>^d\H^\J`U$`Bk`Wc^i1</n]h=SAa?$Z'V7S6f1nBQ$%G=Bo$%!J!Q7+5;Xdcl2<<tS/>2)JZZe^8L$N`;ciqj!(-dk)U9k]n*dTA6a#BK@ZJ^fXVV:$6[daD.I6=B8u$d<&QY1qhSiC;!S'%SX#b"pqa*gRa*CKcH<W:>;Vn9@&SuX=@k??<@j^&\I+q&l)\!f`aMm_9kW!&]Y:I(Ra+2s>%'7YQ#MWJ0Ir-[Z^O,Q$r`'Rdof\Y%p^XK31n@WH%e5fW7ap$UCrOeD.ta4i@-A$(<CG;=D514'"7It5c75.*,"JZRBKE1r3pST6]L:65Bq*&h\\qQ%&PZn<J\?R(ZI*bT%LqG&Dp>f4BdohMa[^<ek1n>*no#<-%.5]4[SC<!sEPeEiBKBqt%d6l<#r:!\JAUobS^8m;LRJ:C;WY38FMe(\)Z!^pp-U]=@]-%1%95>%"aXbV;k@TKP9tiZh==fqI;:MQscYt'?R35NanhCpppghJ?b1J.T<ab?Y0tSD]3P0E*-NU`LEom?LAn#pIWtRPE9KauO1A1Lj%m`_4"#D/u2r/Xr2F**k_V7iQ<8ol@iZCOO8[(&>p/Ve==FQY[/*L4Cf/We8qRG`tcY[aChcY;gkgsRdkE1&P,#)f3uU,s#r(/8l5%Lri?Y:Fp5JQ9?&PfGGRBbW/`q13G</Z7=@5nKtle&hD*IF<<S+!40Z8TV7(Q=Ad0mcgd14LPA&TgRo`jY@L='\")n?]iIH.*D6O:%CODhtl-L_HWgs,!anlj0-Sf>%d`]D@,I^A:7'0N,A2#QVpAU@Z$dkM^%+P]uTho=$o7f:J/@jIP,9L22S(Su-_oCV@P?!1=T#a73%Z&X:mE2KC1N%2j.g#ZNN95ZL3cRu0?-/d(rF)A#QKmO2_bq%]Moa4Iu7$XlB_NXkn@qKPF->Z!$h%]5IjOiR@FUVh8+3"_OGQm9t%4ej?AlU-(^nf1LnZHTh;RQY,$qJF>:QHNYqrFX4$j[/juai>Gh#AuA,_GcJg)qI7YkM9lXO69FCm]fd.Ha[\E)uJ,gqg`/aKJJ'B%"_Xlc0<rF,A`6bmOa%UR!4#edFZJkP"EmXP[e>Mb-:>c]G>*:_4_M:R+s3q.gasB=BHttZSgeTGGTs1^H/?ZiR,Q=`VEFP\GL!X:%>hKH>ghHRjX`N9C%]n3TT.V"Aa)DLSEY<F/3d2:daXnh$=IhM\Q$EnAIJV?=S305(`Yehnh9NRJom!oWiEFUpHfr/j)b3CG+*0TH%na0@(/\OjbVp"ZKhbJ)X6Wb$6TqN3CG9pdU7eJaIk@6,Q9I<RO67e.'b1Z%I&Rf"9(JPHFe^<NX.SXbe`bqc2=CtQZ-(<"](+%Kh%L^DhVE:u\s0IFdl))6`O.P)1l>/#KB)[&NlCPLB=9l)Pem3uh^8!Xnc_/m1X=rp&Kr,u,!f[Du%I5^FCMG,b-jnfpJ/Xf7cH17?l%;>#Qq:f$O7Y)n^iDTO\(4hJbEU+S$\mLb)odSEFJftkA13ONNr(B#@L.1eMrk&H1uK_8US@^"VR5ifM@JR@S"[a,`u`/e9S>k7kU%.ka&tUMm_jMKMK43u,&^LWc593?"KmP;V^#WodaE(lddV:7$_feD@_5[S(])QuVO?Y.'H0_XP^91RgiilPi32qpd;)n&<X%iQ5gU%[QrQ\d7.X:TJgNn_H[&^bb+5ge"1tRLY0A"I6*F^4u=k&h7p3&_FoAJp?s28X\gnjh,s&Srt']F386p5qX]8D\048:"i$81D7eH8%Q:%DVY$g#JAGU;QXu/iB^<pA6:[=Df3rm<k7XDRYQr>-P3,Y<UUW8WBb^%gK,[KhS?",7lG.&@:g\G\Y:?Jb;6#)g@0q3hkKlGGO%Z&iDY`9NP'm\dBaM\@,$Oq=.%%Lfs8RdJUO(:19PMhd"?`'405T/k)]<L;4!_9OuF^"h;8XfO@@jYF04Dn<HF)U,`Gqf[NOOjZ7J%$_$D2D69ok.a?@NHa0NVkX'7:W\Wbu6C#Mj1d9G_MpZmu@=/B9/l=X=SN:>S!1p/_nns&cSTmF[RD#u7*NQLclV%rrG4cCc)VLCf%NL;M6b!XB:0UgZ!>?b5edS%hWrO"WDO?inrLp&Be1s90rg'UTLI>Ek?]@PF(0o/V8d@4Fe[B?XKZ4&I<83q4=`lJ?$k'/U^XT^3'%"ViV4aH((5<24'aZoG`=;YQ^M5iFE![<pXqGo"hjlW2#5X4)S:G.f'WcJE3ZA-c#WK!qqae85`6B/SAA<%1UQeEfHID7H1K^a+uV%=MAkMH$U89,^Z%aaWkoQ'_Y?g\"a`TLp:,3Z%tc6B#Q!!^N"I3>i-hJ^Gc>uqA,/@^[iC;L2r_.-.MaaF!@1Zk0LELn#8(/]Z09e%q.&iX\Rj0nXi_KAgb>i[Sd+F#bHjHF/j#DX6-LpQc9`)+/@gFF\?NYgW/C\@f9[eY!*Ne3Xj8/qWFG+NHE,K(<"pHj%,eGbjM`n>%=j!&S;1P`&J1b!K>bV4$B?2i/PW9)tAg&kI!'3U&\4-M1UV4pOjpOTYZGll"lGtlqDpC(fEc4pl^.X+VUdANZ8bq^.ZE6#6+0-.%%>>dXlO@>W0RZpU7OmS2Uj`B9M>ZFZcI)_^o#/!q^jYQa=r0a@.<nXcZT9RYGJ#.prI"j6k:2\HPc_NcXTtuJrIS'ao9$W0sc0MiH%,hIq!L=0`-o6*$VQIjH@[k2r55KB]a``tFiH2Tjt%E4R`ch2+QQ/qUZcKaSfB%fma5A-<Oe`4qb?9`(R?0=N7+g7NlSn1qeA$5!+%oD1KE1ZA+q($,%/cKaT?DQ2dkEupTN"q]@uIa/&4XfNYKT6"$tk4hQ8]RJ-IB?$<,0*c.EBD&#DL-4SjUE`CT=oFYF8i,T%F1*aS%T0Ted?9^q?We+l5"aU':pJMdKa6,VJh.p=]WYUL=Dn17CMrrQsMA]PDYFe1KO:(=!/_T^k3G8#+LjW`o')Rhs1*$0,L_=dOlfXeg%cY?dPam8-NE",s;c#F9;jRojRGg5p"CK)5,`\=g8mjYH4o0sP8q*!j4e"CP(^Fte3O#?@A_/cqo?9cV:<fk?odcL.CY/MiY6WtV9%++q&i$M+&XaO$1%:R9%%7##l_.k_m-[Zl8rA]2q.H2[+,ANED$))@HJqK\:E=nDL#7Qmq#YFfl:^BO6!/ZDD/,Zo+o^Vs+@)65N_%W8g%ET.p[ST@M7Cno9N!I`q>f7Ip:8M`Kj?;t##1e:(P4oipe4-MtH)MoE@^S(GtHX.P`+I-dl@F$;eV_=/_NT?h[6@^2:JkH',+%B;[QHolJFDB4ZX$-Ej%_<^4c-Cl,fRc<:*NcFIDFH#h-o8"C%N.Bahgh9oe>5MMS_T00YPb`e4AD^F7mY'Ku9"[h3XX2sVi//V93%I%Kp*R6[apl=\fg=Yd1Qo8\eR\p!>NIa7r.L?R?foD2TT/F*;@-1gsnYNA%GOP%68o(k@j8W2U#QIjHm39ZDG<a'd?Ib:)(pBffi%*F]rLb`3/,O4^[P+#2jCGcqW^X;ai:(#"E8(@3"2]S"S.q@F=[/-@%h!G4!5518A'cpT&Nm3!2UCsHg?jgtN(G;[r\XJF!LZ7D16%DOqq:J`&5O$>^HeH6=uS\d/RqX-;aj^JKsYm8!AM2ohOp>jZVaEqOfsT;t1@+)m4lr/ti-bE#p"nQ1K-M+eT<eb3%4]6Z&\CjGX&%mW,d@_b]^/ao?=hj.d(OY1TmtcY).Uh"*(:cb1C>LYQ+p1<@/r]S%Yre+hL)>'eIfVPDDRah0<SS?@prmg67eS'-qb+/AG@bZ<Z_%VAp;U^0mnI-(V6srjpt@(f$7e9d01U](L5HaK8_iFlLg7qYA_!`K$1>WhFrI#LZO&So&@oTdbiL+m^d%R.Qu6_6`"?,o65,/\Q7R%Bt2d@#GV1HKe<NSjHE8k+/1hYnU`'k0JLjm2n?D]d"Po(^7\o9dHs[9^!.;d\GGl(SSP<fc6q)r>o-"oWkkC\dG8=QkFu3+0o<<l%=)p'E)K!C*FjnIPKM")cC2\;iaj*;EOR90p4M<,;QP7JW4P/bX)tTYsc]"FMh$6::es\5t6+0;QYmj8^cNE^ujpQ]V&$g%95q:,A%FALqs>==pBB)=SN=/Ea33@u9/h7Z4WZ/E893]K5iqWHe9rYg5J7MPf_-8NdLE#>Bi^TGP5o!t*9R_iW6B#<eb/bN0N1ALOY('I3O%%O*1`(Tl:D\;\OrPsb[+'<8d=5"J.Y\+^-ST-pmg4"aT\XX)4=pJN0BUX*1('IkLA$5)Y+?[F6g-kH#]g&n^p2>?SB^p1S!JpR&O%J([o[Bl_o0](nf=$mQ51/N<Bu)XQ[R)tg]oW'/!127hO9P*I3D39/pR\>Zp"+3`*nN<")k&7:jejXSP+;(*&E+5%gK4H(f'A55IX%d(O#mqt?gq3/nBYEQJ7-k0Z[80(2B>@e"c3+S-E+8;+6Ga<_o<nP#ZX.f?a1kegO)[j%,Z@W#Cr$,9P*1Nat\Pl&#a*/0Pj3$tUu%YItj]:/pUld]-J<V)VXtTk\L*XkM"DDP9t>g"_%WHtJG[V<cS!%b$\>IZ1oN9Fc:7HbSG;Fu(g<LitAMM"X<aFM"NG9a_PI@Y!lP%-3..&#j;SY?`g`j3<"V^Iha-Ab.kjs+Sl<g_*61h%ZP7sIaLOOTNP;45[eX:J7q/pqC@4IIL@l\Glbt?*s?'3ijApl0]p]HEH1^r%KQ.)'XVAYIU6+lp=P80q[XQ",nGt'>kG]#ZS:uK.?YB&#E0?F,*djEQ0*q\D%`2a'hm\((-2Mj'@/qL*F$K/QB*2g3L@n=N.Zfn_%B*k;1pL8h)AtDQcWuY=\8'lp[*YU)%5N'?eC*edOD(cj*Qi`tT^"oV?W-%j&E$3L;?nB>)MYG(RG*CIOSIpYQ!LI[G_]"$K;ahVd%T+%0YO#-Fd1np!`N3f&>XU6s1LaKJ/4:A.pF_\:c'nsns=Ghn?@^klt\1,u]P.cWt,UnSHf<84SNQak\<OZ_=*4SE+b[MMt.+p\3%3T(F*QZ#nK.CGAS)%]T,]uGI([BeK?..XXt5_\Y0[uTr[P[ppe"-D:jBEL"Jr4^HDI-_*Hl.<nYn0XIIXHc+X?Cntd+VMj<$Er:`%)&dWK-%nH7bNRf&*`&mHPMM!EH1fQh6MFpo&TKTNMTM(;CgRJ:B6"4*Qe?7jJur-DUOH1tf6/66n4!`m^3VA[P?8)/2rbgNS6Sm8%X'M?*S$qDrh3uIKLcZ+&Ci`+Qa1>Bc.HJIrcIP2E2qM.;ZK*P<(>'8@<\FZhgbB=BY(Ua8iC:21eI-$2qNt],!SK;;@"Ie5(CTH_%*J@5UQNJbZ)D*6.Y]YZdj">Q*W7MX9DX]tEOu_Y8&mPVO;Um:a7j-DLAhY=]X7%K<UH_)6R0JDuCe*7hTB2/.eO"=\S<girXVG@q%gP$5Tq,l`p>MOUQhY'X33aGDi><_nSbmJBeVcb.()H(!fCJ,-MnM)?nU'HNO.>hLqq/shPRLkgm!8Fh&9b-,OTo,4(0k1SoT4b7M%!G%+U[3DJlE/#-m)`=+SN3aX2Xq5@nR<l0JT%`381<flP&m'^OO&WmaQ!l7%SaWb5P#/iNVdL7G)<M82$*?U1LsPHoQM<pj:"4p.%_Ef(bL5u%2ZaC0?EX9,6N4=.74sjt,@B$]Va@9\,'AnXr<7.]`Bu3c=(TR">%AVlKquE?!`/:t-!lA,o8u5+o\Bo?oQH*2!p_:-a%4_,D*H&$Smd`h:LB'THCV!o-"d6P`_IDHXO@!$b'!*@2-&_i"`M9Dn^iUu,E&!=nB!`N\#bR7WfhuX0na4l.p*t'rM+[:'@#\U`)%?LBk`/!OTSZ#>H#^X\3!,1e!n8L%C3VBWYZ05k0!O3p$0YdTrXN`ruh*,%2KAT[[Hf&aKZ@<F?YmHBV)!]/r`nXXKK`PmPRFZZGI%#/1?*MOc.q]EO9pbhM;FPT=c8QZ,>9"25T(I2Ll_hTOS_,"uos#G>MchSV?Z7=%ol<ZrMJ%b(ig8-Ol'SL1ogW.!#brH1a=&'A$-%Gp\7?`leSlLXCh;H``orI.)D6$MK[jC)?+!N-B5S*K5:CL)?'@]X&BT@SbB4HBa4q4#)0u%M^)_3eLcj7-ompgOi/LXSAl"'_0Rc%d*4Fahpe8+(S^*S4toU[a@T[$ncO]:-U[QO]-k>#Q>3)L+Pi>qi/*QtZ$?<f%1l@5VN72HV#W>uO3`O'Y?N">-:#0+OTL2aOTIjg%-h+!`+I1GA?oVt`lo.;VBIl6ql':\p4V\7oa"nG9pNdt#(dK53?\C`_"MWf)hC>,]J5DWU5`coocr6Y=_&`_Jrb*eAIQ;e76%C'^%rHV/>IGHU8JQTRVEAA/>cb<s%#]lRA60IUQJ-XT<fG:olaScl<0!%pl>Qn+.Ko<MLaR$6461S/0f*<M;aCk#r:D'lOO^0%?`8$-A%U#_B0`#1c]ia.@*G1mr5JB$U$$PF/`0N(a_!*75R>HWhpNKm8G%C9tIh'![iQXLCJ%4de,0Hh>bkmAsr!c]%b8C2Ul<$*ru`,gL+%54`S)$f==JMFc)r"bi4XM!ZuuiJs8M(nkB7"pY2ak!`)+QJ=e!Wi_lW3RjB'CWOQHYKI_3`)7,l`f_g3aX`tlf`:'2_A\"WMdp1.%`l3O>@BYV?9Hsf]KEa1)@;#q`ateo8(:HPl7J[S#i]73ObZ3"_f`HSp<oaP21mXPhLkZKG;!M(l-]3s9M\0t\O7X_EjUDOM#E%Ak%$;,\.YZ<3T;5ZFDpFN7%k`)LieX!k/N8U8E1/(g'CH<QZgJR_&;,Y>YLZQ1#/oQ6\0;YiaSWh(\&+'O;Y[(pWau&V#<CIJ2quINT%7go-^<O/s/Ci[;9jNaUt&D8kA4\939NPFSLH^XA#mNS9=e4UUCa6N2'i!NJrHSClSmC'(7kgag`)!_)5ejn>/\dr_q4or$f>3kiR%c.a!J)B?dGX*lsR0r9`fI&-?.$[1'LOgk"T5K5i6U?WAf&GQ3pS-jKu-DOTgF;n>#:#=_/^_dbjh.BAV/4Io3frQ>1EA[s3dQE>o%_$56L]>/K`lbI?I-9c<r:_aPg$dn$L/=#7k=mJ?H*G?E_OX=C.b5fI?[!j"SNm;i!fR"1uaG)X-E4:3;qpMs&mKb"WiJeg)o]?D:%O-l9-LqsJ2Ye&66AIY(r>YH?`chB:Rda.GA5)4gKL>Nk&pslpMYMhVc[2co#IQNd('5!pCMd<u*0OL+@=>QE.N^MWNEHBPiJTGg"%EAOnOVYId//"[H)G<<2q3I+-_1JgF2jQhVCZpgZ8mMp4:%qcVnWoBiG_D\FROSBE.h9b6cfliXXhciE)rj]kdK-F3Ce(G#8O6r6e%nAZ9BD+g%+,UfX5ZD&Gn*=IoF7EiOqM#S;JX&tN^!%'A7.[FTZd)lEk@SoU7n07=Y0#T6*A/&)"1,Q4H'lJs3S:3"+"enVC<Fgd7%K<]5#,P,A9qnNmS2#B1GaK@.M#Ee$Z\/'cq.l;#0`am$5']R'7"T*C@gdJS^!]S5b%9Vu86+O$Y%pk<MXhD+lnI>]j?Hau1]hQPL%GS05C`::+L9c`ei6tpgds%O,\EUPRX,g$6O4':j^hfO)<p3:P4\&<sHa4E&?e8@U]SK`eV]PY2Uig6(X'H>/#HFF08T4IUW,(n#A%MQgU`Z273W[T(9t7!Hb?b3W"cr^Z'jGmAe+nN[nWUiVkr*pfLfK;m>bKa(r0>&!NH%n8b%2`/&OBGaW,_oY`3'Lq(VK_RVXXuTog%&&G]oDM1N>m)bTrT:"b&W^\e'eYbE[Qt&>C9&j6n'SQ$E[&,hX+N^u-)T;t0_NnLb9hF,#OLH@Il?.]qA3ROfh21!):OL!qa)L@A%^/I[a#YWtlhe[lHcui`kRL96VpZ;q=,7Ch&Sa2Ns(4W#T4E45"G'OYJd%CeFBM?EuHZ!-NS"`d2,JK1O]#jXG7>p>E&"#Fo1nmQ6%64?_&!h53::2UpE6\Kj?13%8Aj:Q)!)7bD:*[.`.$s^XWO+83n"tjmoi2jGAbTdI%AaYrS<er;'*CLCU;X_+]gh<_X5spn@T#fLH%dHh5dV-9[>!k]]&a#Bmm_HT9A?oB56]C@?mH^TaF)b6j+S$K?K[NM=fHPXi,_M1oE,L27"hLAsA'h^:hb-R"[<@l6?jS_\O<oM%H%d\FAgUJP-&A/.`m$7q7[&d\Z@0JX!2<JMIi[H+Y"n@VlP4tm-Bc'C#$:U$UgiBdJ$@1Iri9$iB"#UQ]ncXgBVjG]k=egPD[DrAa3%2"h(&$V?[QJ'gb&)#B-PKtiT8=S&7i0+PpLBG=XYMNJ+"dKSN8B_bN#F,e>)U2a3HhBKuDO=gSP7+`#Wa5#'jS*+;ZbmpKC_1@6]%&\?XaPoZBaH%ZI[*P4a#n-;P"f[5k,FGG"_m[SOLb-DRHZaf39V?d_2[W6ErefJ82n&6usTPZ*cMZjM&iPi26?dQ,fJjJ/\"a0[]%cEG1r'=,'?L]LQ1#'^]a(af%Jdb4nC`T0iqCi'R=6h/C]lY'dq?nb6(LT6nRi]VBaAM?e3QmL*]N.qWI@!9FU-J</:UTe,:0X7!$%&5Cs@Lq6a4+BBYOS!rddGP']cJQ!49MO+FZPGpZS]X%T[Nc-l&8r.'>1Vd1u-fi0J<N'5'Z:N**mYdR4f;GpHLVb/rZNht;e"/i*%HT;&oZWe@$_geN=P(120ojYCP@M!AB+nam3DY]hBZb&R()7q1>HW\R2\KH7?@B072Ae6p?Mq0U<%GK)%2GiOGYE=S/4:>_VN`")W%b?!sqn`SMTg;"hm?u^Wt!PL"i,^[=p^/lFA3(jcWqS$$HV8aQeS!%F[_3mIE[;oj0b0%QLZdoAU`#/FJ09&SXp!=8HWk2B#cH5G%%\s=dL./7(1n;":[?b'Ck,ks_#=7JQ[!_klViRTn@T`bf_frMiAW$JVqe@#U/L_Q^$Z#k2<VWAY0k,jjOclu60P(]Zf!T$-S$q8Ng%Ig9n?@\k0+"X3N#*S%%KYUF7U_8("2o%92#TLErn<$?ZsIDP:%f"mrSl666\6?oEM7_(VGl^<>G:9@g,FBUbZN=-fV4':G[]2bMK%0JRTJ`P?.92.WBA'&V@ZE*-kJAVTJ>9aJeSl6L`al+hpTkPGKRRL8qDqG!Xh`R1&s0.8JG^$dT\fPVqu@YNr9>FU6h_(qE+a\`@;%fGrs8Mq+1BD/Bcs+BTZ8Z.J0Ek"-PDmq?e3"^T?9`DA.pUs/pf)WI!JRRJV3*R!Nsk('68Zdg30#/;Fl3ip?`5cnK=/$";Tc/IWA%'2']+U;]%R08O<Ib'9@ag4oPBHHA*B2`<Ub@;SB1m?A,Y"-5QUPVg<s<=_9.I&u!QCZYgP4lJAYSMScfrEY&l@>3hJF4LahJRK^A%JZQqB7\?=u;uW:NTns/k+NsK@YOc+>?H`kC`j_I%YrcGL2c.-:Zp'&SJ"=dm&@C.@Z^MgA<eZh(':LgFUl.I3:Jg0Xe;Bg5_(pW3%@"55;\D10'Ci7<6-U1,;*@l15N(!rYLntL(i'<21r'uU-g<K2Ojp%#L@:=TDP(>bEnWeSjT?u5CbfB^=5,#4dXM:jRqr-0&h5`,S%:h$MlZU_=+L]+chA$rg0&uUS*1,i%r6-8l4S3<%#4^b9pg)eAY*otBV.t`J,\\YePWAcbh5*/=!fW&ZJ#*>(*_82-td%E;$#G&EA%M*:WcIsAR,9+OQgrj1>o\;2g5LUScfHbbrJ5Ik'Nf`USD&-d.Qi^J<8Ae2VK.t\+_A2ll.UlGr11)JBYSucPg"TRh&X16?p8M)@:%/dp-\1csG=J[Jen%qL*.0g0b>4FiaYC3oAcGTcmK3]MQFluDL=EEt@`W.kP.D`;%gNeRdFGWki#)@R-YImNXX1qVNThKEW]<i-,J%L'L>^YVSFi?@+RmW:@sP]/q\`*n\+d]c%r":RoP_@GTMjJ\giKABON%mXVW53(jd>%G#R3!ch$q*bn"`]\t,!=SXAJ?G5h3s6t18%Q6(E#+&*qD(`auHnq3&f:tl^i*Q\AD<P@-t)U1H_j,"j#&Yi1^)`OH)RY*mpG^\Y5TJD(Z2/gW(ohs!f3*.&(X(?##PB6Cd21)>f%dE>WeZhE<bl=s+[1IQpG*"?GUJ9ju/M:UAmNhVC\78A^*%67Cod9K>[d%W:B^OMbeB+CDs<fP`L(`/kNrTRjK4*P30i%]NG'e,,X%j:!d=9K(^8FmAL8_u4H?Fotg(?,tCl2NgFVeK:rhq:+7^GPDlK,kV-7SctcXDFr"s]Gl%$5*46'i++NhI`rm60/T^,PNi>)HhHIf%?t"IKn%KMId2Nm'2!lgeLIaGYMcIoIlm;O>,<p"]DWXSZ#S/P2N7J65]q=<qJm3@XA]!?oL:[A6hGDC@6P\'gh*7W?Y^/ZjUE7pC%W15N_E*aBp0")-*[)TeO@H:[6pB(%p*IK28[!P)Phr$<$]%r:bCV5"F+XZYbkU[!/&uTn+\>+gq6)\t;6_1QZ%a`7]Bc53p\\t`h%i+ieL(WZGT%<H:&E;'&%p38&>/k!5:=YN<Y7@3'I,WEanD3S)k=gA2-LL$YDaXrG).#[?Qc9aW[0.D/WjUB22GQa]V"tgKDo8)Cg%)KE#l34@&H,8AgOFahkA4@0k+[1^5h.in`^(n4ki5,t"d-Rsasm^Or7JV]5k(n=B;BIqshjr7d6)q[Y9=:JNb%kbZ\.\5Ar<T6:X%-cFH4#Yn1A(F3J].)!6JUl,M3In!%$q$?A>kn@(E4$DYbg<H@u0nMq4J&2`Up69p9I1W0b1[Q%cP1VD>:E%6NCdTd%`-X1rkVpQ"%4!KdoaT:\XYmCp'-_",0BN4/5.FW3%J&o0DWd0Cs;n0?PXeK&\4ZhP_)UH1P?h-M6pYY9ZH*m^YfBtNmkkkd([Qa7AIQobIkVr-:%@tlgS[K.^G"jgMO!M4^u#<I?-1D%"A7"c&9F-FIr9LQ9\JbFe:$E[UG4+&CmaV`@_>=gq)GX8MW<m*L$99tf)a(h"d[@4(jhJR$e%qJn\MU3l]'3/gVn4-u'JZ,$JX5b)>Z`&D#68]iXES\IZW\^IM9(_.Ri$)c`QmQK2;NK8A/D03F&V*UY5l,#&R/".9gegPn+_Ml@@%(oq%Q'KW:$61<RG`[[9b'P'XEAJMa%)$Q:VSV:(r1C?X%8ns^5RT5U@+(B?"69(#C`F70R<)WU1%:=("O%NQKB%Y]("]s_]l+F-L%:Bkn7W/SMh&<4T5=UZEcad2bt`ZZ=iRq_BZQ^8?,TI&>E_g-(1:nXoM%=-q*?r.ZrmX>m5F+tDtEH8JSF2=8#cl$me$PBh;_<8ZS%<l5f2SUWL`7+RY[pk#Y8`!SI+jKk3gNg:D(<0'Y/1UNYG2'g`'URDHS19muQLp.U;eC./nG:3U6+am]`]!)tpT&SbljK5*,C$q6;%?B5ald<L/sWZVcqip@i(5i?=(5lq.)KhMY+M%`><&T"!IiUq3.b[EoB$t5WJ^ria@_u.7tcMq0nb6r[3WW.e1P4N(jj=KY`i_C`O%4)`XlQU8^F-F"c,V2J(-5AIZD*%1PWnPCpo/T8e!gOfW%:6pcgpLLUj]ug=CYSV:^iB%u]"LdG_;0X,J1l7biDbH2ZQ3KV'qFM%=%Ick[F`]$(F)AX76J)5(RR6#S8hYab:qU@VO<j;C690P<fBiUXp[TfB0UpRr"kOog$^Mg2VD1:2VIG4OX0!k?[)tl_$X\[=<h)@RG%gRN`adjYTSH0^[bLAHNmcp@<QC4.V7PSi'3FnVre)'OOK&Q:Z-f&5&[D$,WI$)57-mE3.o^e#;l-RHk;0Tp>Qe?!?%1AJ@>UhIF0%/Zrd.VeRc.Z4s>G_E@s0'oE3X/sqV09.Cijs5f;D.oVn25qF:>==]_81lQUF&>s'X>?oRk/o@(=775?<!q]ra2<98Cl#VAB$_9J*%)b&3TSX#pHeq\-+_03a?l?\2$8)U`'1d+-"K-HVFnU2?LKJ>Ut/VV,qq1_]Z&!ZZ;'e)O79l&8hQA-Ch]kg:61o.0P7s=b.N.[rm%!A\6-?1l$TfY,]LZu`HVoAX.lE3H'5DHYoU\VJR!i>G$%<u`d=gBImUKU`T#nFjN^Kfsqpo1'=_P>>n!g_-m%*CA'DD:nF/_b!Y[%3sWXWcGd?](5CAOTNT(bNQPBF#t`*'")h9NB<_->[,:932h0P\Ksi\N2Z<piQ%ltIl7@N%)(On3^\-2[S/U!L9I<@sbgdOWPh38S%iHb9V%2]CFqil+F-V[e%OqY!M!f/L6CPQDOnMgb)nJt%W.LF)b;,=1m3#nKGFmJX!ak(kZVB=l3/bMDoIaF$se-BtM(@':?<`1"c%km-7kL\efJjY]Bk6e&f=:g5Ar)T*'s[j7"u;I/rm![!,Sq#*BH5^a3I_\W(t:QcC!?\7PK/u$uZ_7.HIn<sa0=LpdVDpc7OS0&VX%T"p54_''"iSa`2&1OMbR1#Mg"a=A."ld=e8eMf=2*Kt'O9L8()ZKI5hC`]gdJ(ksf^7]P5k1/O+`ok6!A8/KndCe,/]=a#(csfOO%lBVuk/WN?GU9Rh_Kj1[;YOPR$mjFQ,*OJRh'pt%cG<9KOnN#2CZqaNQiVcA>C)9/="%ODaQP5l>>H#GKSDn%N)eCVB8+GQm3E?gm%A`XJsMjnSO\2#[nV4F/(ia/rBW\<5E&HG3h?BH,Led,lNqS7M4Z>*=KDrmB(XO^122"#62%oN86p/9P*\\OUiPXU6%D_]p<4bZjP%33HjG7f&*N4l0(dKh3doRW<dY#Q]Jr`9#0S8f!oRD[J9h'KP5.s+,5^md?[o#\SFn;hiNVgA8Ci)l4U_2Cc>]K1]BqJ@O'&;0d,J%Ug"Ei[QdC,UGH5)k=&_,Oa<_WUK_V8@akL[ji1^1P2Se?fUei.8JGi`s-f]QQTQ$ekb4],"u[-YQhU*h\2&p4Ll;DublfXCbJEA.%*,PWEpf(.5GqY7[,)G66Z2l2_OU*HfemXMRJ5DeD,0V8J5hpA\>:1W>Mrq1q<g*>.?-P<S[9qa2%Mg9q>E$qWnZn3V0tE>uU*@<V%V_hWnWl;%hN8,"mJd;CuO*?pinFI.?h0oQ^m#G.Do*uH*#_%Uu)BYC@CqP+W`[EK<j*;I/HT!Sd02`h^XN"VIL/\*=U=)/Ako(6b%q&FY*kPRCl;MI1$"oZ:H^d9%Om4'X2=-5SI7LnsK%6gOKF/VQt.4=3k"sl^1.Q;=B)KmnQ96YY@oN,>6%Q=k8%eqD5n",R7BCPZr%gAdpcUKEYqhG=T+K.X5s@6WhN8pOI5E($^q.cjfqnc]n1.F3kcVL:C'b-N:gBM"5aP\3Dlr%22S.F3m9O%#?)X@ON!_HiF18s,hW%RTSHS_Y#=Q3g['!;G%E)9pKIq2'N6)8kVEd83bAa<$7gc[[KGd>GhOs=Z?XIGRoOl:XB8FlG7G,)d6SYlJSDEL\LT=#%-'8/Q%''%p.9kGaKfN2d\Y_'H7==1WG38Rq:[buL#%2/+E$bT]:-&A>^R7QO*OuD.mSiVo4EO9XT3Yu.n_I61skjpS`QlZ0mFm9"0'KG&.POn%V[jH/$dM(XBWC3rPh8l_V+C/O1t2=HCdoO_'-YWm^3o2s*3:QNAP:h2fm+gro)$VE[Uda2?Aoi;W=S2m,?>,NX2Zm%C-X,@)d_XJ%`sMU5O55$Q!PL,*2\&(&Q%nLTi9[-i.&Z]hfQ]u0['fIh?4n4;!iQC&Wg\4UO[\CTe&89o4bEAt'L6pUP?434CdDA0@OEDRLP5-7%G9P0)78dHnMMJF7?c\-H,"#Im0$qZ8c8o!p^hOLH<N:9N(;FXbLK<0G^7a58n9lh+mZS-]O%_pJk8M4Br@R9FHJ%$_-qi5VYNea^%h8fN\\kMu3XVA/o;+bO!N3#CP@+;n^@f1oPV1$\[mH.gorBb9Y6-f1^Ya7Qg&72eL,6#"FBqsCB'\Rc@fTVJqb8qN*mi$AF:b-kc%M1gj@ifSGUgD(c!9Y<EQE1UFXFWT$2K$Nt$V7DB;T^@hDOcj;\>9@1riLDF(T'sJ:@+d:l:bo1PBF1[GiPYT(hV`UHm&`bcTE'g>%jrGQRZSF_,:C4hjeADacEe.9dRk!=+4P9XS<^4Pbh>62ngdtnS\[1\VoS5;^<CZDrXA",&)P9OK+*\@]N.6>qo]HT#N.6>qoV^E-%']\'m1&V+pdi&2bM!5GE#'@l"5@XIVP*4\spI@o,Lg0/(It,E/k;+%VXA+3%q1oj9+6L\MjRV`mZ)$(FQTmcP'Ia=+LUd/f%lU7a%S7:Y$m"KY/<k;a[9#d"!8`R,fpNdA#dCO<1\Ze)O-3llSABfMa,n2bo?n:7ES6C&oj2cd0MINQN(Wjg35.(`<WICh<hl&;_-1End%LtAddlKe3F>694=B3V$A9;#`i<hkG+2,B\.kH&b:ZNfu^f"3ioo5i0O)n[48odj:%,I4>*=ZF/3,:YL[KFB6l182FJeDNUH7J9V&%NVe;r0bc)cNsZJVR8[nLhL:Dmk$,geT(8PGTH6qRA$=#%XjA)%'Z*7PUfq[&7k&%F[G7]rbK(%mi6;D\CF0e^kSXWT'ZL&6R.K2@%Iq3IfA+..iiXC9?H3q>f4u;jf=Wu0d@kb06e!T-7BC\!k9R<\cb(%7Ue)%^ic!YY2qTJGA2_[AX*IJXTiC/FnJnFM!/WoD%SSqt"%!=gnc"J,`5RNLPA0S/nFCr=]nI:C@7A>WmM5kK`d\`F+)+dT["Wr5LsB)ti)IhC[=GU\(;)E(kOlh..OECh\aHaCC-C`K+LeqD\l%1,,$+N+`erO0WS9TYP:=]A-a4f"kb=<KD;mS6;qV9f8;E'OqT\#:NFm7#1\)HbO;KQhKUj\ZA#@3U]V)ZUsV\2tY.<gV.4_OQUP:%h,/SE8_;D*B@Tjl5*1LTJ&.a.>u_@FF6T^S)0I6TN9'*C;K3ES"_FJEm5?GMi)5!L2nfgR06^XNGOAncW&TILKAAdT\V7DK!0SFI%^jk8ZN6t^G=U,BZ5jac&2K\F<)-O.8POc@%4_`d3:c-(5&!FhF5=c7dRB1Ll/jO[8k@=>T<4L'lmh]KtZ4k8OJ>PBS<\A`9"s99r%gC/aZ:/`j*>Ng3pj;LSo@c@96\9epG?EB\%U7K4O4=CEn-*\DFS_P:i,!YB,Z\fno)7FEnHQQEQ5PCh?4"Vcq*1`jdMrJ$sH4?j&%[LlPO"/I4j:P71G)jIJ^daMS]ap+PhHVX_OAL!0+m/X^[hq..BQ2/[M*Rf$s$&bm6-[WJm*:Y5q+Vo?XVY9p=8J\5prQb\Z]HK<E%R@N@6UT!V=6n+=f*)>&6QHqKqnDu;+Z"gSPZ`3BSHl9j@g(^E4k_ruLLVo!MUK)`\^PB?h.l/,sO\N:XH82`\(tg%0L#1%.mJ='@%C+C!fESHrKJ[Tb.+$5(8,,+tfchP_QlrCbDP<H7o*qNnf.c?k$5VGmhWP,@?A?ue<,mMdF;JnbrN9R1b,Rtd3g4d*m)om\>]PWQR%qs7Y^<GEM/EHE_fa-@AW*=?2'THHdM;uXQCOMhKaFM]0#ifPEf&[HlF0#P,8SF#I&78psh]9g2oW4[PF\o9u\T<+1[,Ip6F,aM0T%PFLdGTWsI)C(R$NhK*C/:CZH[\'TXb>NcUC#CA;EA2tJ`4fVGcjS0e$N28.>;#D(DJ)AXT&]Rhl'uYDU6Ntl[7^3^Tk<\->9aKi&%6uDAuhcj=>.lOnTE*/Z)G"3-j_$%*q>.mZd+qQ[=Be>l4<,d>:?6U+Lh"ttBUbeVdFbsKSbY[\@3t>J+4CTSd(^Nn[%A"j84V4n3%jPKM#<Q%LmJnP_q:RsV+m3$Y,42T#AQe]9H:F<(11G&N@jM?$&licN[%3@Xq?mg"Ckko((s";_doWVAcbhmRI9LJT+0,P06+47*p%Q>3'_HpT2P7#/ptbQC8m^iPU+5&S6S)h:EHiPE+\S,UY]2*$!oZ(VN0EqgJE&f@"^M7'N+"K,oR24B?][2\iFHILIg%jq7R%"dd:%8d3$E%>+E9)$U,K6Ma%M+\DdoE?_h++;B&0#iWq0mY_,Je/K;/fnf_4$7=4eLhomQ-rtddoPk22l@e)dgaE2S4=,.n^h]bT"FTi+%BiN<JIEOkejuak0,W3NS%ucZ/!eO#>iR&IkJ.QI6>X$j!!D\6>5V]b^GdB^_gBu#ij'aT@5Qqb_$4-#\<tT#:#Uap(a*^1V_h^*J%i!VSHOmkDj,fM@%*!U&6</(aa:VUHU4DPZi'uVMbncbASmT=!Cp4,,]\I,M[#.nHp(#YXSKk;PF?b?niS<[8HJmgRUrJOKCY+eoY%doVX<6>R&bk$`4%&sj@a*oh)[_+GY$6)c!5XqB9-X`7T#5V*f#8o>'Vm;ogKI3@asBa>odHST.%JnQ&;L7"Z5aX-(N?U;O/fu7q^%BfWrR'c8+6Go_VcbJ;O0/(7#r9D1Zh0u5BZ$hi%@YK2`((ajFq'j7c-$eQk6E$8;<'j9CPhqXh:]d-L%.RgbY^V.WmLiG'cnM.r?%.h#aqW+CG!i!6*(6-7RM+7Y!3]V+c\rujTTbmR,[A*N+\FXm;J7R%7YX'dNF&&3WhR;=LFePPWQ/a\2AA$;(s2-SO#]SID>jK.-o%1OD'[do,nM)j3.aIpE3lCX/]J)7"WU%D@Ga]_egK8&shAl@WB8rO[`q7K)P6-YQlSSB9N)ec(ONs-c0dODW6G\FlkJWsHtO_*O%9%FWZ`K<-C#jKet/EeQ/u0%K:<Yhj9"uVdX%KTo>th.0Tuo5O^4&;[)L.k:sV<P3h#N'(R)_X:WA+!q3lB2La^h53s+SYXn`.H^_8>%B!ApWqq0bC<9`tYm+-s50O[7s8RG<IEG0At\pXuV&#6JDL"":mR'8Hm(LZlbp3bW/+D`dFeqRIVHbgL,U,uH)Cd*RTl.<65d2OuJ%^SQdJpQL(Hq?NYG]Up!\INb7O(MUD6D#6Q/XIg%#Ru$UK-;0P*[F^i>7`3g<\%_pPmSB91LK/i?:WgDGZJ5?il4*KF8u"mbf[G(6%4acpBrY#'Ws"E9b(R_%*Qfrq:a2u"[:O]'s,P:$>cR%$=J,+B8J)Ys*k58M0n']8>dYX3M'Ds'#-%p(qjWC.B\O8KJj0a5^hj#i@%B$`tAUe@RQ0u462TXp;6N_]pojA`rG?fZrXg&NtW3&uI$[VfI\#E8pp[0G(<YUf[A>[P`FPMaOU[LY[u?iH;i`.pk5ok"&pYlF\t%2emJc=qA,Z,+mjd&%&$f66_UfkB''kmcfM,Q.1O\QW+pP$8+;;IT8`M\V-@0F,$Bcdg8c'bc5\Z5?+b\2H78`g5o?S_4_4:)JU/k%4)^S<C_lt'bc5\Z5?+b\2H78`g5o?S_4cae)JU#g4)^S<Hp3Z+dTPC&Q$`A$C*g9]dO!Fu["8Yq28q[Wp,^[b3Yqm&*_fn2bNcp0%&qgC+TR6@'%W#*9'l:IE8jcRo"i6N#"(9;u"C$aR8<Dg>fTo.+&?PNVVV]dS9e32oN@q1gU_R,GCq2b1[_,\GV1aM`11=B6PK4^<%Oa9e62Q`bZ2S,^<OB->J<JGoj?(b)R[;.M4AIod@:&($t-U\&\;t&rOVj5a38!d0odL%T63;,dVJP%M[LW'7[6\qE)2Z\b<BgFD>%;>3Iq>uU2in=]2\2#aAcc\Y<;E'4$7?p.TmFZgu3ZD\;(-H-9/%S9iMJX*f:O&ieaO&ik_O&g[Yq9`@s=c87t,:9_,4KfhY$o40G%"mc8<NuG-HQPqGuNuG.orpli_'<;qam.(=!aQ>:("6_L&P#M$a6/A;%Vqe+7Vqn+6VnTo.kl/L-`\4rWM$WG<WJmb\?&IgmR'Tqd%Wi+[J5c<J8=g<.2!hK&ad\%9Q`$-NZ]8.V<+jiD^?r+GMC9s'@p$BDH7btOUg\M]Y=l5\M3'#Ih<#b*LJlbEUPEHk#!"JhZVnkmM%31AD\/G$.[K7F8d986OXe:%]pI?eXZ[,;&5bbn0O*:@D.3g`hQ_l\;%DIjQYj7=.6[7%7AApF,P$C=(1,Fd!%[n'dkJg5jsg`gl\%$EE\gUVM"`F4uOT;A[aoGp+Ei_,VY\/M3oTE)g%<lY0+s8l0.6h',j=VujN-3Drp*YDjo"lH3WLr()Hc<A7DLSgRNL<4NrcOfCg\%'WHsk8dPc_8R7iK*4UX%9'>:/i!un=XTBAXiL82/"Y^!*9.B+i1-i?<WY-""^b&G#Y5erJOh*NSH9mk%F'A5<W@OgFlu4IJ1m![M%Gu8238Cp\q'GX&*<%nCA&c!e#BT7mAFg+i.l;DYF@U94-9!1n4,t,-TWD(O9rCG%QM.sB#Zr0st0dXY!\M@#$<Ec@2J09%pX]3=k%P6ln3l4``''<3CK;_SRHOm7V$2X)*i3[(7a,can2f&eWde<eUpP#^c\e\Pj_l3&dR&YS<Ol2XcD=*&D)8E3\>+X^@3kL<AijQcNA%@^6QT]NcId'\#:V3XQ2b8p)TZSm7m[rkOKRq?42ib`D9W?Km=s-M&4"Mq#c.eUd7JfRUR_\%p1p!@23co=S<KpO?C/]9ZZelT5%I%rJ,eGYT^Helar<1M)\ls,^;CP\M1laOTjH"k"(O&^X$+i24cPSI[:ZY5-X!"hcceeX6Xj#(o,lM5%4b8]tEsk,eU-8p(9?)KoYa:%4)e?)o2_3&qSjt]5-[0&WV0PEic9[_eL.NCGB3OJIKl22Zlbj5O7j/qKXb*UImT]P=sME$EJ<s\fhX.]CDC%GK2o`NDm>hb_(/,R%Y1US6RS)&bK_J>*]qlB(GjEW*'0:(S/!QjV6"9seG<]bNqG-lQqhSOh69fE2F&Vl$`Z*aK*Q%,IFpRO#N:"Ongj6hYM'9C?3o_hO%"nsaK*4RH-:et#/*bJI(B9u7rihN[u\AT[W@L)@6fLhM"W4\2<J\.lSF:7MW7eoGj8&%3lO,L*hmA(6?X`X!"!/Z\W@['Ljmpegf%o1hl%Sh3hQ?8Gn#T'JROiDl5f_L!283O,T)C'GcbK?*j[7<!rET8MRt)Q2>H*Op6o"'5Vle8A2">k/o=;.>b;`gqLYT@+A\YAMNQ%-`6<pf$sN6/hYNSGPP[:i&jS\`&:kAham^]IDi)ZIdig'9BlbcNVM7\k<AMmOkhM-Dhmi;YL3tgGI7k<H*mO;.h>tHEMq``>OE21%F%oBF2*+dP"BTl2l]Y",1#5I9K]g(=0B!Z"=h]SkN->Z5)"/5H1#?b0mOnl";cOpEK9pl?ocZuinue:K"IH+$-f+L7P&E>g0)6,_%E#sWr@RK8LG!B"oi:.Z'G^ACc`O*g6#5a2s]\?FdKm3F*l5Um#Y$6m`^6YhiGi!$pW`6[lA&Z[*W->VlFg-$GCEN2ER81<C&5S8^%lY!u^0#-7l1/mT"F`bO#7=M='J`E&OiMaJ!3$)QL]]un,?CQt?HE0u8,Hl!469Nq+E$qNO?RR;!V_+7oc<sa,_l3^[AN1,XjYE>U%V;-gSM_)@-64CM*H0$rS6HNnU![S^9`7g]$o2E3t"u!a-bAZn@)nb_GYIq\%T:`Q>IbOXqmcp:QX%&l@X5S:fc$6nAp?(0hj/E?l%2_CjFm^/prMC(j.4gC_nX&VeiDfN*8rH%9Wj*X@gN*U"5^gg_#HNX7hWH5t(s8@&Pe(W"%JB,B+-;^`6#nkcMJPo4n$`Huio`@^u%X'S'UU$DlH*jD6^TOG()pVC=0<pp-5o/-,(:`^$\!_W2n'2[J2!_[HPmIX1'%2UmSFl#m<#:fO=o79NhBKetD3j.Qe-.Que+E:<`%,ZX&s?UoO4U$A)%:Q5-SoCWd?^98pG<*s7R>(u.)>&D."FI_'DVd!kij&VW-<'af'T#tgbRb*\0$a08"]&8J3A/L@d22k&#)TG\t%WC(oq=#1"]rGJLj]]uJ/j1Sp"!nu=O57=@[drtH@/#IO<oHgLp?+!s)o9tW^HttRgFpkHme_=cn56Xg.g61CHS[B`M:)15`3%m0o%&mV>l>;i"O\7OV.?>[m&)nan%NHZ=Vm&^P2n7GlZS48E;$qG^]_0HLHWpll9ZjP+m5c_b3&9$*<4P@hHXXsTM#5Q7hP]d[;/#F[U%q5@rHTtBWFj.1>1nRPpEN,bs-c6HL3K"Lth6Z=*^g+_=HNGSsH/(-<ZkEThPK(B>Y9u3sjW1OW?Wk3]t:5uNZ>BCB=?/8t,&plj:%Y%"ECY)RYX?TrUP@]I%hT7-XkS*moSpY!T2%k5hGT:"p38RnB[lE2MPNH9;8E8Dl7/3%R&Sk\[1nXXBBeMr&hrKhFuN32hgOe&&P%#F8[[n)QQ7n)de*c4$3Yfo$LGl>)rmGB9le_k#r<X(c60EYViWX7bVfKpkYQc<KMKRc.p4c#>dI(Rt_mh?>k91:u!b4BZl3KpOfY%VjBE6V,7clORAuQjq-=DPtn#u&_X)@W6]1f_,!#Dn1*i$h\4I=a*$=ks6Q?fI9m7PWGreN<uiG1FfmciOW%P#%:u>i(JdC9WV(o8%;^J5oQV'W7mZ9jVg2oOrkO,_C*]J"\B\,EFX^Ytq]n#c[mCJ'O6USKR_>#gDiRCdq0q8H'ThY:&Y'4`o7s5>Tdlk>`)VT9D08E"S%So1ACNa$4Pj&WPM%QVe-4nnGlBIG)_4Eq<HUdh&ING^l475l:TU)T.P1lTHo;FYDGPT.b9Kll]Y7V^J7n<B%R?9!pY4RR,+NtsR3%Vu)sMnPk!:.B2:UePo.UYeljO8.Dc,VD;&%Z#SVidiHchBY*5L)btT>PMu/RB/8<]6YA0E.XBH"4K_GjL/WJ`Y0j6D8_<G]DJIcd%4T8+C\jr[a:@5Vo9\7gtH[)qWMt)&!C-5g!2'+EL)NX(3^3_j43OS=)>%'RfU1.)Q[bYHg75i%\"l4-D\_V5;gho)dV&PFu)2:5Z%f,TO?U5%XVe)i>(PrB.Bj\=e&[dmG77.AqEg,T1T"]fH:f@XPPgm$QS]4)#*Bl:m"*p`!E!Kt0Xh85ZE"g&>T%Y8f[=aiQ[I32*O%4&(">J."+$cMLp&n;-1Vk?*".mPA0-hJ#4M.`Mk$ntoZ=;slGJh&H:Dd'LWNGHtp*hhC4eV&EGZ"I<f*)9\`LI4=R(j1E]fr&*%S%G@%\ciup7<7_9O-UWj7CL"Lqam8_p2fWMV&Vk:%e=0\IQSVB5^m\(r+h!(C\#2JI_.gFkum4/=p)&2Xi)t"+U.gFcHA6',K4Vk.2%E,#o-17[4e^",9Y`Z]<?H;a+bh:c)(OQq7B#N*K;GTWqi5I".2lSH&.WUB1*\F+YmL/XWWUJWDXE'/V)S=[J6NG#AJj&rGAGd&[-%jp,\=CHP]4>]U"oDVXi,^9npSr4ZW3j`h."`n,5S;%>_]W-]@WY=H4p;16L=NB\p^($d>=[;.]b.b-_B`m%5QmBuctJYmceQdJd'%8Xo7Xl8sDFBf#2-iJMcC;r&`GW<O6N'a*p[9"GJPXk\Zk<g9EN!dV`p*"2!GX"(U1gFLcR9U1dHiRGqH2V`_0WZ9P36a:)*0"D%J%U`.CjY#&"NY$)7S<K#g2Rn-.KNSDdZ'\0_lX@c>!55]hW'E.XC\pf(==_bYV(#OBNNP.o?X)[rTkpmR2938\%\9+"ZO4t,a]-VNp%:Dk7D;"'og;.1]p-/qC!QO"OM/ht8X4qT#8TVn/P',9!pFIGH0PqU%SU@RCsL>EJ8cgG3q?VY+$GEHek78=fC[o4hm"8R,[7[9/*%^\j\HYlpMkCq/NdK[Os&&k^r!E^iXV2@",UL:8-8<3#"QK$$GJ%bqV1+HSt+,=>J0K"qgUbp&@Ed`7'3a\QKJPOqfYMtBsMMsM.+%2NsY'@$-qQHY.:s2culQDQq2Uh0qmM;n"9:b`r!+-8TeTdc_:0n`UROS"Y.]q'di&n_3V.<KCg"nR_BLk&o7m!F5h?kLs!RX")=r%am6RJb%Z_c:JPZm:BA))MYPPX[6g!F_]KigqWt=nWi:"Hc*R-?m%$mF:KDAl\bWE>hn'm(JJC7kj;(dtWSEo88eRXuHBGqkT931@%^j3dI=`Btg8eta1P"QBnp8o%fAT"=M0)J\,i0%lP$82-TWo0%YV$bN^9rZ"A21[qZitLDU28OR<=Ppf9\]_J1"Qt&=IH"9fRS#eh%<@Q90g2R%u^1'IK1u=QB$+F,U)1qJ.]aWj/.WbsAMrQPrkAe.._0P9Ke1jW.?a578oFt=(U3[8OeLrC$V\Nt[U?a8ZkO,^!,h4KR%8m>2-U$I'7MWlSTg2&u.aJ<$MnG+`pT%LRbh`@(or)Pg@hte>,b:t7qJU0O(ShCDqX/hZmkG?]),b@bikKC_P$sk$p<K-)kK(F;%%h0_7<2>^P[k@Ms81qq0'6#BWX_.-'C^5T+[Rf2h%:/&o]]s+D>+eueYm"R%;9NJ6ngmLcL4)i0^P4`BKSJY/M"m7baC5TWn2fZ55%YId-5n5sVY+ZPOclc]&Uk0`kd4=<V)(kVAC>,UjP\j$%\'2sT[_0I'k:fU7a\+0q8:Q2`oq'7>b>Br2?-`1*^l8$?UKVgA#4M!HD%RDQ8'WFHX'Y"]q3Gd6/5))!%:><7-.ig"pbB5_/PWj+"+-`4?#ZLD`r=r&0l]SAYTbIQ:iF3'4.BLR1B,d^.--ZldT&(biU1';D-%ARs-_:IpG,4M_Y=,^Xgm6l=$`a%_5Lm'K:s@3dqDd6nhn*eTq!,MAK?-H8UEgmp3"\T;se:d(fmKanrPE`7GPi@s\]nl$E(`O!3S%1#@NQ;qZ$$.6j*24)`8;AT,PWnl**1Pt^4P6to7iAM5^J&l]An[%C/l1#6kOIO]]omRg;eY;j*+<7uW]Xoqbu:u7J1b,dr+D)a/A%5*8">GP-gZPt>&LaN9cFT?,-8Oc?9Ah6ZWN;dGm_LBkJ1:ODWU8&l?;.]+iQ[2I:L:KEFoP?#M?<GfbI`Ds>3c?s$UgStqI@C>LJ%QQNXR:<fLlj.1AK[HgT:Ff]G(RVjS.FskU+?/+f.[8cV74"^*jS*7o`TFYBuh6mi$Kf:i9Pr$>N@5t8_M6#^eD-,jLGm*BS>U=;O%\l)Ud:&DF/VjBIt_l9*FA[q?Ka(7*Xr4!36#91/2cJ'2Fd55[!gMhJkTu9t%1d.)58ph%OZ)VhWBf2-b8fe.+2OlhYaG('Wi)FnF%)in)-G`I?Q*]/cE6EGYdVsX7pCi:h2@o_X#Y'/k\er7YU2<0B-Ggo_LSuT.:NgfEkisf^(*oEc:jme=G<ur972W_4B%)^K<L>gW%%VpR>6N+k9EgbB7.KhfOb;W_OQ4mc4;.Wib21fa*JSZ+GGnkNsM:R/SmS[\-2J+GRi?KAbYG@&9gSglf<30gDaE*TiKmDQN9nl0%6%S_86e5rP<@mSoc-%.dDCWdO[^b#;lW3`Bam%!uR)n5\L'Pc2_Y<L2/';E8Vt>pF]E3Rp!mf:c,K,I:XGl5?!pfMoo4?MmQ8b-Mo+%;k*@E<5m@a4KLQ?2W\'mfG-Gd?Iheeb&d5O[40FLlBp:hBC@1Ep>f!RNLq9%mQ9!s4?JZd[40Gi[o8deYeZd_P\6kU-2'HGR]0?O%^sS6FXJsj_`/8EA6>KhPdLB8KiiUkQ/*P8ZCuZ7RXXeSa=R%FXlbR(@]OD,,A_2e[]H#*8]]*tS=-_ccb#^_]$"=.C\uM!u.O6OY%^57=9fb3P@X#/F[Z<6HW=6NnB0mLYI*$a@(!?X9Z)I",-@Q]IP=Okt8Qa0^n!l(Qg5)C--J1GdU0o9M8r_eqeOnq_qIc]iJ[I@+8%=N*Ml:@%CWg6("LRb*k<2JuVYo%MnB[3Ml^mhIp'N9EotIGgu@76>Mt0ii,N3OSTP]QZBUZ_[f^GYS#*'fp;OHae1Z<pd$AJRd;M%K+s.0.s0_EFLtueN_+Z<%\.n;X]/;Af=dHLlBcEX\Z2gY?n8VC3ZIgiR,;j'^0eF9Wj8:?`=?/7.?piYGcp4)PcB$FlfSmQ<VZaF%MB02E@iNa'i[+N[GlC=E@N06=GG\WqaP<@b<?jV[;H9L'#*c.Y#ON6fE%o>TX^%-*%a2WFi44d&b#M/JjqZWqPN;=mD7o+;<l^TH%\#5fPEB@=."4qp'oaD!"bCj;B/>!eKTk@a.bQ-B4@E"gdl5H4SJ&LC)Yfe>dV6_W.6_?[M%8QYT*OI/KMX:uF`,J<skn`(HDpP;n%4;J?d;o"9-][cMtA^@7OBrIq%db0kg<hp[06Gn^h`=?)Gh'KnB,$`\8)_PF:!F^[?>Y9I$PGThUa7FA/PGThUVsP-JJnn>*.`)RY%;M7!>lq(.k0AmW:L0N=84iKumQ&IfJMJY?9DcZ5_Fl.3Q?DrF=Wd;<UKQg<ob>X+P5H1XqVVlQ:<M`Z$7Mf<R%<TE\^S$dm>4s]#%hFUe6RbTGh\n[Y\J9TFAV)DDk&DlpD:#TOM;3Eu['!^]1l53sZ:[/c+1Q/GTU<C)DrM=cJam(PhGGgU82mP=<cdQIYNU0O<5-\tg%dCk:VZ5^W\BS?p9SNb55j=t^Pkh&aXJX'e)ZC*KBM/BUo:tdiU[uk@GGV#lo=8A#n4>t]tM+[S>EiJoq?Fq%[s8Ta3^:_.MqiA6f%q*+1LQ.T@.01q:NiV2JeZ;<!r2A[U&CHGeTPik4LW\S7[a$f$<.fIA%AaEmga59m9o_@I?E^-`bpo5=D$X]=.SLRjYZ%%)n;l'`b%R^8\;AmlYiQ2>9:R*@JH=Vl1(iFP5j(ES4J0i>KR[]\BNK"G8:-dtm1"2cij=Y[7UDu<[`N,?4^A^ijH=8fL)E$`L6>`Q&ka/FJ]%<:4D#31!1&i3!XFBU(mVGc9EDBV]hq\!1I<V2(=?8f5Zh9.?.J(:TN@'Kf)TDCMFY?-"VZ)*rE$,WnOYges$E(?1Xc@ar381d!"l%n?P00Z-AG7atr8Ip=(gS2$7klnU,mj8h#4%1.tbK%5juB&Zib.Q;YAj`%@f"XIj$h;MniAOf"@0pQ8NL0F3kBata5APhK6_Z/Lp.%ZBXp-YYjUlKkKiUX11mG-`-0J-i62bi/1n-&74KgL>]-^PYK:Ai=F]XSEjYlmIj2DK"HE\UIf`C4W-m49hJ"FZ*HqMcJ2il;Kf3?%jURkn)R;q;b6p1&fqdurb.^*nUm1'@[M(]@DE2`/fo*$)dj-m`ZZ8W?Z1H9%P#@Hk`8m*PX?-$]=`?<*9J.bE(*$?b?>p?&_@&7D%8$KC%V0]GBf6S44KJqPD;jT%5p28l?WCP`EZcF>%DdnMC\E8QCTC=TSMj.o!-B"+/gKlKS8W$U2a!##LGSN`3np#)Q<?+TQ>3)aG%jY"($=>PVC5I<P+Q[C;NGemg##gY<*/5l2UrCm/;RN28QkEH[)/&sY]a4,X".&B%dFLtX8U6I#QZ!U]qRZqj'#8Ocf?e2`OUIeTC%eP!FVk@pdJ_S`U[gk,-:>].B#s"k%bn^Abjk,TiF[J82QB5LhoJtnBm/3(,(U6X8/>u+UBL%\W+i%4UQ7<k+*Q6JEqa&3%qS_j'7%fcfcO*it^[!C^n&Q\U.ZS$HO'8e[ec?>7:J)IiT@UhA.>>jgP+gg1d:$RQaelpRpA#L(Z*$rY5j\a$PaH5o2,OV+8BBd7bGatNVZ%5;Aoa+hrQTMa%"C42IZ;r\HCuBt3aK<F>^&>C4n5s(T6kWmC[n4eV)Hs((XsDo8Q"f%Y.iYc=o+dqZRrci19JZMNoP]qV_,lp!XU%eRUd*D,&%!dq6Ls\Q=4PT6.^q,0]\8>Xa<k^3ApQik\=cIF_jaeO_J6F]+0qH`KWrhF*'cXO47IR@XSd:3cu'/O(sE@@jYcVrjH,%\D_&4NuOCW$@('42r:ZPFQ7d3KhPO_j"\K,RDj)KFI7oc!T#9AT+^UWC&KaB.8rnTH`'P1O7>u5p/f$kAU5?64Cq,A@dfOq`A?@"%e)kV:Vb@VPR&<X5+7N$nkY5lb&r\b(:RU]cCn<Dq@_t9>iba<nb"E#Ii0+3\p)ht$R%6?HpW*$5&%iq#fAl\<Iptuu.]In)JVFb.%0cI<31osfZi@8`3(of"\/JtM#rgGm`T;9"-67ff!#9I`Y"[$"c>bB13JG6aRb%hDJ\[Dpa3Ku^oWh2q4_O@+%k%Cdk)/F]<_G'&;%o][gp;L+7MWjT!*rNEL)H20<u.48%(IHllu'_#Ga<'J::__NGSO'";HLk1=19Fc<-NDJYnn`2u6%-J18=G@Nb&ZYrW1#RYG$@!]u%*hG"/GTd8tYXef`PAQ24*aDWM6D.bOdu>,PTOG\]&kj,mED:_<<Q_;t`I`rOBfm:*aPZ_<KJbO90=(<]PJE9nmqW=k=Tsc-GTd84%eeP[ajF)%fc6:Ogi4+b9//\mA$s>qkS!d]SnerI3P@93Y+^S[:ab(iX%UY333+BjGpk'9uKc#'N?3NH=7&ocD$p=@4<5U^!>&["5%m?;>.$r/+nE$9Do]F_q;je:tHIU]j;N]!*N_@"nZ(`UKDU(#Y<f,/a9K&W43A(,ZG#+cT_\>HpY_#%ffcZA$5neqU+$Vjr*?=W"o%\_D?Tm:X<q`NeHC2+<VS?bRONPo0DcEE#g%/;pD319[t\VAsj7hTo^p@bGuL#+h.E1C$%_[\lKOaWoe&<o0'V.bE8AWP=^pb'1+*%]FZT3b'h:1Dt)I"]_2Q5"h`;fB+&sAoml4-GuO,e?@RSdhV@"5F+<5po8YcU45\u@2gFp'hY`%>#8P!H4/fg3g7*-?[hh-)\Gb)I%jYbWGPQUB]H[D^(`lacki19jZ&!\!T`qrkDee8-=`7g]$i19M$4]FO1fgFjY#2U6fm%G&%a$[gu.NU(CTrq:>OiKh#Or25,`=i=p%.^,P*`KYt0MJ"/\W&t`]]M[>U3lEWhPEN.!(Raq'Rr\%6YHTMn(\e?LnqR)ME$A+bEE=cnQ-['_H`22F@Ln`:aWhlAi,HNB%#:7k%AN6270#M,eE>q\k)7SSor4!1`68KZ4?FecWKgkI=:f5;7.p^-`#"aQe)^H@tmMjhufS*kRiQ.,jVu"&aiMaCu4=[NO0;[)l$p7Nh%2-_h*frc]D4jNl&9N5VE7EIr/RZi\eb"VLNBuZoKfRTION/Pic'*^'=e!_@`<$n."YA^/mK"&n03XBYhRG<CKY<jhF1UehEG83kF%Z+8"6d2R:pC%384.MIh%mOH[p,MZ:rl/fFU9ZsGU=.-mij"d3R8T)FSe3Oknnj(u1Ah`ZrMe/^tmOHOT:Tc.^nJ')a4@M"F:QZ+,%;e4p:E`]N=amLY"&oFd\7g$B("FlMB3:=9nN]XD`j,U21\Dq<dHpfYdZ.@]*.YCsF8B&^t)lX82\/C8fmREC1:,gm>*u0GVfVf3o%<q&t3[O;$,NlS'J1YAW7[$A/"fG)[b.Kd@1-7Zj6#oAkX"qqZ8!=.1&.K`s'*\%8u=aR(U[$k*q":lhA<1XP,59\CX\@@NQ"UAqB%0A\)^cC+r"<,>$<%i(R7g-]Ge9!O//=gn$#)6h`ZTe\/(`C"2N.SAqTqf^[[AY9UR6=kC"a$XD@pQ]JQm\Cb]4&N^A\1lm:&mUeX%;R$TC7Ol6.#q$IWW7jk_AukW'Ypl`e<,CE+0,9thg.MT&=Bha5$b3H>H'0g1"r_\@N5hF8/*s!]P=i&p_F\=sXFZLk9lk0IK"%n2%<.\0b7Ol;^1,u6A:B<GSN*sf%SbK@'*%.$1nK'%mb_9o0@LloeW<?!EN)]ZGX_?bN/QTh^,oAf(Ugi(h4/q/@I-`Cjs0-;nmBC&D%Aim)9Uo>34o\^Z4D+a;S_I98G0+hns\lF#8X9A,C**0Y+DB)\<-@IkT"@"=T<k?OsUeU(h87Je9/>b+'l+sNu)\*OJDEKDK)ip=7%0ip'(_I99F\V7pn0W;itV;)"QMj81^4VfR(Sg[^BfXBQN.ih\uH`Zkt5G:7SbcUA:l+p.ans&PC*01j3ZJ/n9Qsa@!@f!@3<.Zh?%<[upp7BBI?=Vb<nh4m#;.\0EW/!]ON>7LECftq9p"W*L#SW(Ng.c$RDXAlb_"0b[Kr4)S09bjFd,u<d^/7GC'K1S`o*9JHqG^>6Z%31ci^Ni-QFj!gGUBIf7DFO(n.WVCE6>H)_j-!7/=i)_^na.j+(nUcMcBN)fnHJE3o*d8MT=KVWo'hlMnnl"^19u'Du#@eAq[lQtc%=K-C\JZr&:T%C2El+tj02I*Ik!DfR3g66_#$uMih4XX^8nf!uI(Mm$c_o*c=:F77<E"7GR1J'<)Lk1;77kn8)JVQ0Y2-u*(2s'n*%Eo:@pdYnuOj\<;bVVLA3lYl3p^U_,Yk5K\B;]UgIk?.OZcQg(4a6*,7D2-Y.#W1E41n&855"33iS!D@#YZV8a&t]oNqdHfDg,Co?%Tc[[K')Dto/+sLlAYj_[M9SZV\_+!:*feK;(^[EL$)7ba/)?A1Cf^Cjoa5rnMK\+T9#P<fN/uVmfOYY]PoblmZmcMQ2)Zu9>hWf/%LP+;n--R;&XOn7#S!>Z^@C+t"?u3.^k!"/n](;-\XE;m]fW9a/(n6dEJRbY,anOem'%R?`WVCiXql,6k#_jh!!b4H[m_(*!.Ue`u%T1\SV`D7fTLLR1pQ>mbAE9)rU<:!eGT8L<VYuBV#(V?YkAW*%8f>O&UFKDb;;R'^^<[o-5Dk'e<h(5d.$/VphWV@_S>H(_CCFb\/%$l;qoG/2'g-#C;7;AgMVEDj&WYFSY0((r![Yl2L3AU(J2P=jI5O0C"p\hAF$H:"74p_]t==unhs_k/,,;AiS(i1i&D*K,u9cfMBl%8oVtn7jU-8O-$="4bc?>'u6D'GdXb'J)d=;*92$:)3^sE<TRL97OfS'M35phDBm;(9ttV*<2QPnN)Z[pB8ff%MWJ7(KQ>uAKC#BH%5/#mMipTPXWJ%Hr(o^392E"I$NN\9XWD)ag0iFDtp;';='Or)]9^f!$;OP?o7KTIq=TD2HNu*SS+bA*r4;90.E8EZO.[uCrlD3uq%@S"]33Vpu).jiGLYS,6Va'b`KrZ!A>Q0grDIsUhL5qRW%as/aiF*,6@^Q1!,(uH13"KaWn/).4XfZ(Nd/BM=3)_@N3fop@7"C_Th%qpD;1MVleq?9sN$LQuoOPoGXHm4[s6",iEj\WOa0(+\LT$sXPu>L\.OHOFcg\gNOR<9eL+fin5nM3Gt`EhuJ5a'e!@\dL(r/XWL_%_,]Au(*(!nK9\q:XujqG_i[2Z.OCdQ`C]0R>O,<b\uK;Z$WsAj$>7C;?4aus8nBI06L<Wq(cuumf<)o*^:u!W5=Q;kGX(I3fqNM4%W@W`H[AU`9P&"3KUP-+M^@A#eg'Kp3b,'rZFC/?(O.>btJ[6S.W_4E"m)[?pj#D7,G3#JlZ\k$jdY(5b/h<3`*Ta;67p]r/j!cr9%!Ec=ci;OoRPu<7D`[*aqNd.N;TC@c*8ngg10iKOGpEqb^V<$0RPaP-X;Hi+W;AuPA]N!&6_fC3p"D<2eRAlF+AUH+WP#\=`Ru`c7%.NO'PAh'Xh3Qb'-affi67<%roOI8_o`[UMt2Vbh?(aiNf7_"_IX]iU4in26i-'gW;/XAJC%+Vke]JTa]?h3s6qgA?67KDO7_?f)E%mAphLDiFaET/HblbUCL;!/lS>"HYKYLGPp8`bef4<iqr1H:JG"!uXkb\F"3H>IF=GXF\Y8\AtXboa+cKT/CKsHsX6ron`i0WlFGh%dfnjA0XQT_PA2tB#bYAgQ4kHHmHBXnX`dVSdB0uY=L[#3n0)$'(?ZiFm6Qd`fkS9-"-Te[n?e@\2KWe=3kT'qX`SgRY[5k:KQtan%YUh),$bBmunWqlrjbE8V=EXtRT]I2GoCEKd"V%Q_WQjVSU/#PkO">Eg]A;m#:Mof45b8liE0ibr14r]$>"AMX``l$r,i.^9C]:<o%WPRNnIB"mWX\Z&b'e4WH%15o<<,4s]L-W/XWXu+T2R>ZV=rN>deMEm6W\m<sV,1_9[6V,nb<dLO/YVk`:bBSG+baZ>p9@#n=AXfA%[9+3#7()gJ>9p5fg06"*K<kUdeRES#'WT-HC_Wlq]Cs`39(JaVCY1&V,1UNBY1UR3-Ujh7/shbm[CccH]?5,CEr3u-pF!GBkM,ZT%2S&eI+JP1VO"D=s;D$S-H)Xb9p'<%2l<6(iKTm!JFp"('[:F&$AV698l62F-a[*Ba)m!HI+I-]Hs"u:VP2-YE;D$Q?B;nk^ar)4q%N3In0KOh)/bC0haC069:;_8lXZ;dhMq`RQK)XSdq;r*1"Pf!`!h*=$OD:NaNaTsD"74]O^'GSIU_+I`5b6BI6;+RTg;L%$'_+Jb<%po5IADj%7eOao?^6MC9._UU$PHft\a-uJjtWpti`X)e7#5e.PHc0CX4,'G#T*%2>^>HtauGtC?P%@(5No0BjU9<Pk.d5JYuWfMk&%-*5j(.bT2<H<"lKOfJ[F2<:b`=VEI%C.YjIOC%VMOR'irb,HS]=5BHikE]\,Prt4#YduFSLi'eom2V#6m?gBpWEaGRWcH5C%\>%u%<eTY5g5>BST=5)Epj%efGhso4:EEE3QJ7<3WDcklYG2F7J\&4fg\C9Na<i`>44:"/(jFa<B?q-';p4Q>OL2!&HZ96X8Q5@9jBT,$%c>"/0;ceoN%)[(A+Zq;HUeZ>93-pH23'/Q\T3?+`oan(ic.TWjFcD1C]^[7E/[rc/BiL`'hl^K]<;/:j_b$U!A>8_F,K+r;Qq>HL%7u4WuU?AFEM&4E5qGH68]@[f#W]R$Qg]H"Hj/U4?2a9H=T#J0&FiW#"[Q_+<[+j!+[MQQ@X\[cXdh]DTFbeIp[Q\iSoObQt[I%d;%Vqcj8Hn/3A?M/5flAfj7eTe`bC-67-),IZg%&_slor7=M>+UJXjf(>[lfeZ!<\RaM\jP7X2k'$2)i]1`7ao$[UN(3>B\q$OFm>!,%F&R%dE0<=@)UM$IqW+7?.]2a]*D;tBI;1$'I54qs`BZenGR;VI*E&e!(,tDf9:f<>4*O5f\oVWRKRcu99:i_(6*e(GN%7>p9?8C$%Q8r;J<;GnrrH:T0-`1P*-N*F,@;$='H))J7K\M,l.!^,aPrY'k]tDK)`Gg,hUDQ`ZBGBLs][_6hD`&SSXVsu2<XkrZ.adNk#GfOX%'@-=R1ojD#n^F1@]Z=tMT!fSuVsVLaBtNn[g0m+8Fr1`QkqJ\5I;)`+^3Mr_1`YsbVJ91P%EMN9@S2emoa.0NO^^2:+%`a6AAc`a%8?o`^jR%VN6fNA1%a!pO\C3t2D)Beb]FCc"RE9E<8tQN9l=;6ZWDuVpWa22LV_$@NlgL`&ea23Njf!?J>+M$KA_.SB;)T_fQpfV)%C^-(O.Oqqr;,P.V9!)_1Rj`$O)NU>e``)o*c$7`E1EKQHN2J![Z&/%+Hf>_#`PBD?.T(U27<s;8]A]^&@5t9*(f&=l(lfLTL84I>%iMaG(3&SB`3%B"g%\_rp3(/mqiHE[;NuDiDd%`cZCJ+-LdT=KtpG@A.]s(:rAKl0E($`BBA2o"Q]TV4b/geKDF2uCA#T'i+:r-b]%Tl/,06b&MCVbcDU1#DY>e0eki.<oMuMt'cgg4<V.k$Qho?ahOg>O^eb+An]8*`Ic-$[u6sF_M54?*<7#3%DHVY3CtYnPmWdE)^j:%*0o:gLGUt-W9&*@_*<o?%fU1?Nk`;bI^<#HM<R$t0;:,S=7C'.btl7)]S!8RR^/ci<[V"LWjQP;WfhB/8laHC6)i!R3(R%$Cp6l=%le8"2AR-7>WpH@1<7RW</QL?t2^h\.D6m-*20"_XZ5jHR<V*(=<Roe`-rjD3#Gp^)*MZRkh8W(;5ol_"2)jU!L80d0iMbdO3481d%)%Qmc1EMg?;K]L4;5t+p\!<tG8k,!/6Y7l@*NnI33%B1j:.'g`WBOG,P18Go7[%S%Lc)0&0uTO1:+`54p$l/8V".5BBN!M5"ANX/%QE<a/p*"*I:!Ksj[8Y2uUin6@RT*j*JgAlm'l-^lQa%m&SO_&&Ft216<:)c!,h8,+1o[o+ZmKqdXi@*bBB=+c+grInL"<%pX(9SQ%0)NNB[UcZ^Nd@m`UY`'A<:A@Ve9`uV:$3/6E4h*@38R([T&)mp*:KU@Nd&k[a1LPij'?%0eT_o*79Pt6.b0iCQDFes)R@k*<I$2?%Z6.YVQDI@*AC77-Y0ji1f,/IQ5C<^FDi'aYO&nm,-c+]['CuTGC@LaYRedp):G3/kC@LCORMqQA3O8V/m$.\-O'"<3hB^P!i3@hi%oecrFhCdO3@'bDB2>Cu1:48+QGNgN4cd?YsZ5PhcOK8Xb%OA*kPlo-CN+&sq>nY9E9*d@b_9HZ3]$Z*B't=eWY?UB$?FT>:4J^$6%@P,O`Rr[F-ibo;:CC]IPV2j5k4[W&IL)>fuf3!K#c?NC%)UG_<qbt$ei&UKKms]nUhVb4hGj,ZDH@qRAi8lnBq$gYZK3-pfPrJA;%5/.WHWA.H2]T6g?o6Sf]^4aN#V4,6IFLD23(hfPKWA2t`LE<uF0>tXn?eUJe8aJ.$6_FUj.VNLDV+_=C#g1XN-D=*Biu-"hf,/`N%$W3dU0b\,5(iN9KL@H3oC)H,2VM=mHASRSk:o8t-#A%Y;Y>D*NGn">"R/^![H9+K^)J39>WF<e9RHhm8Aa6Y*(M.>`:S:DS;?UFn%Zud-nC7qW&9_C^Y@;8nS+\W@21PD`9BnnB"/.5=PH:<ZE2(VQ9VL!*;/i>2<dA;.XN@Zq<`f[*PKflZjYV/8-3X7UaWG14LTM"nF%##T-f/>5ZF)_G$g@H3(l2=(EBV0WN+-oL?^&Z%Z1gjKJsWRGM'U.Y)bqs0a8\"H_1Rs\pM@tHsLeW?1aX1ArbkI9\ShF(PtSXQP+%ZuU8YRYnJP4)op+Pq:=^H:_,SWH2`Q@ld=neX3V*=>_E*,utI87`;;MNJUcf=])Q+S([cb<=QKEUoGSfN)]IA;6(Zs/?8sn3NV4d%-\l8a73dRfN(4B$j)cN&jgAqMM</`]Oi1][CZM]:UDc-D%lB8^Pt-p*[`Tg^,?s8<TTQAA^(\pp5)m-nb+O)qkEnPZaj)o!a9GJ;%DU/*Z.eVc%T.VQmlLPlo^CB?7nlsBWF:,6nd%HkUkFb-(8inC0\h/,$)@SB&:)\40>I)aQ14PRcY-7f(k73']7VWqFM-F>B5Z2uZ%&4lGI#[Q^_Q-^i8Ns#b9r/p8;^`W+=eKL#V8(h=40PPV7,i,j:J]'p%LHo<uOUcqqKNa-q6<:>.*sqC?r/p&;:V,&2*97rIUJMH+%OnsWNWVb2e',,pB-'o9r`$u^ZWR'7[NZC6C%KgU67tLcN8j"e\W?os.#Lk6tjoMm44a0/nE\AG0X-cKabUOtb#L"YnC'/&_3G#0g%pUQ(WFMh[W*2le;$k]Xu<S;dhlI8(&7%Lp1NG;=RVZpTUo$igiIB$XbY:q7u/XbQplI8)f7%Lo&T_qb%]KF&,\(30YjH;J[OAo)T%/i'J2PglZC&QV]._tQd%.36-(oHinjkMS:7<_HkiP@V'8A:ILYQGQ`I_.kE:FukVd\<_4R?QgXB[;%/A9M2EjMK@0CX+l6l;6,F]%kE)a1ap0/j<D.K/PZfq`]MY^^/pQNV*1hrFO2L`Tf1N,JWcc"=_t`0c,?B5[mnt'E(a!9+`2]Y[QBGGE@H!j5doh&-#!-5DdQI"i%X;V3BLfKe+i4L+F<Pou9BN6-cJi0J3Y/_CB/>CUX<jd5KMcR71(d#c'?86V`Jb5B@<GM8uLFT\Jh_W;P<ZXu`]3q1_.b-j"b>S4V%NCnNKK="V+]A]RdZIH_B>#_IbPLHP]@3)I<WP^MDU/]&pete>oS!,1A\?ATN+7DU!pQpqaq+5b[s!68trK!%G]t^9;a+ROLBb4UU%>Wfm(U6S1Z?6OA,k,G%q(d7po%#^dj6KTu=.;!$kf[S8'LB5R&Q,>:s)O82o@0;e40X\2+rq:RK5!5Y,nT&$h_r'l/+d^+([c,,$%3'>HS]0-;bDAM$Y2sfR1I5'9m$E$0q#KsucX_ue&X;>kDm$C5sY[rhlg@03)GjP0U13msL)rg,&8(Xu1Ps/mI_.l/SEiU,P)6lB"%lbR<\rp[a=iGbuJYep3@>&ZEmW271@1Na-u6VqVCBkV*h+__4;b9CY6Ae6,"BKfB*8V;eCCDn)r_]`_";D'd8blh'(%5fO_Zl-!>%lEhG2*$hMY[oS<_csF)bm,@018)C)cC+ib=p)#0(S)dX2ffP_l'i+IOeM6D-8f(7rL/"eF[iW@%Tn?s7&lOH&Zj0cPf:XqHEk;NM%J_&TKMWG>>ftV2<ME/=_)9Rp"2I79+gr:jqgTM?93(au=6g9%0/\-e]T4f*EXBE\B!m=n#mUDJ,;MGg_nlg$g@sF+k'G#mg)%&_4%8qruR6ci0+3^Uqb_Agoue4X.!)2bEQ8/Zeo]sS84f,#l'%K[1.7'i/*8/\]<>bhe]<,&-:)7hV%L2?*-;MH1`(tsjZT>ZVO+\9b;%11V&Ad5#5?LsRp<n8boO%7^c#A]R&5"t`3hRA"0t3jYr")#NOU7(MJs[2";trq)0jZZ'@EXRh?@@FMY@ft4FOKT#%Q+2S`qBf^n4%&YrR@E&LkGiAcIjA5:G"&R:CEKR\=+Jdt$Rmqg:af%iWeVA$J67SP7L4W62MUUB%n-V3P+Y*&jg?L.#iiK'#W>.\rW%pF/^iL5eb%Z>bd:\=Osr/tlj#E]__V>YbDeQdE$"*58Kf\/lk+<KoD?5*/npE!>p':>h$#24_Mt&g!RY<DmLig5S-r_?jHn=f\P9\3cpD'=ad@%9dan6,gF^rgfrEC4i>)l:UY%+RS7lFg6%--TuU`WTP-<0DRDi9d\(b&g6)ZJgJGp]QGX,RN9"tsW+RA/V1s:c@Osq/OD*I+*,_si%F9^?<,de02\lFb/&9%HS0L^b9Q.pAP%cM^HHFdUS$MZmP_+E9chs(WQ7hR1l5WB.@95k_kOGLimYgG(B(3Yd+$l.e8c#?p>Z`l%W%8'l4]Sj^nD#IT9X$pc4qSfu29cnecNLRd<5nd*>TDD0k/1YaVr#N.ef)=A=._SL;S7*fh-K@?W/#Y01cBXiJZ*.ip<SO:a8ZuZKk%DP-9NU>ZT8IOQ3'5i088pV!<[%fH4YE:E.hBXl<R=3%fQ2kHUld?YLVG9FD._bgNhGgnu:*k1\O\+_',\s8&[]gG*I:cQ3p\+9$s%G7=J!0c[Z#NQ8/#j.S`:_XlI/>LCf)<-DKncsKaq>LCf)<-DKncsKaqZPa;(6oQ1]f8Y"Bmq^91./GM&*B\^Pkhld%63e$8(-6[T%BVg?:3@c,3jB:^)SX"m=8Fe<Rn6fq'K.4_S3]MJ&TnCha=#_R6/GF*W4;*3a9YB$D\'\"SgdZpGIN)&[o40[[rob@"Oj?(DmY='k%i33(p3^=%VcG<kGXE/@?h)YdS#F7CFZ_V.B2HdE2JT"Lg3B.+ecJ/a64e9,pJY%nW$Mlk*\[=Yref\u-Z44\c&J@mmJ1@,I#tiOb%LLJ,I6/CI;F&k4Z5AG<C)9==U)!8C)1;"[(WZ9oaW=6KLq_Opg%-H,'h5?m4oa]<Y9L74<KadqQ>P9:P:eW_9bBP_q0B42t\;VeI%qe\=ChD8c8(sM^.E%p$b_]^*m`fkcm),C"nB-pL",)?>V88p's'[oukiCQ#=Ka\=Q.C.oo'GSG..4BoY1%:9F']Vd-;%:SCWJ1d8%i-8nbE4iMh]FY1+pScn-Jjk>$YG"?5<Ji]pY;+D<(G^@S"##HL^^DmdBGT'A+dUuL"&I0S#.R#@^B,;s^gN@5"q.^8WSD@#lT6-)%GHoJ=GJFl%4U!sgd[P:M9tASpq$gYZK9ng]I=2e-ApqS?Y=ksNh)(pGpb#V)Pj=saeMh_1]Q1q!hnO0q)e,aoDEj:CHl&i%b4Y5X%D$o)F`7"DY+GKe-@f?1Q-%3[T0s"k2X3b`HFCsbV?=MB&-o\$^1l+]\&-j-\*+DSCLG3mCh[kQ&I;Xp0U%Ae6(mVfY%_'kFKMbnC%L,aENh@Kp;aW'5M+F->E1aHuFF,SNWE=.l?+\lBB2oKE*l@pu39&-WudQPuNg^ki<M&YHm/9+%I^iM6%<^)[$`'m"q``(u!_eIAX%nLSR\'Kh:V_IPcef6gI2X"$RB1rF<J=Z7<rgPs8&G2r,"h0:cA@6?^+0H<f;Nm[f9F:<Z3c?'JE+3ntem`1E%EEG"iaRCa_`F5*G%nRY.ZKFH1)IG_>P$uqOc*CJHf8B)58&X"l%m=nRKOk_<!6gtpY`=T[Q:bflt;SdGWD`:W(@1S*M_-8cb%)HHX&OY1[,%?B+_,:]>%pF$W+?"))6XAJUdLPfenPD8&L3hN$FUN+h!\ETXFDU#.X1+^.6*0H+%=RVnlLsFXN0f\]RLuHHOW/eic#Xh.=(kS^u,)/X+P`!:k%(/t]<2Fa%KbM1g_JsU[nO=GL#qZs&3]Y%r._972?T<Fl>hlLW"VGATZ*cn8T/?@QF\L&D;R.IU<^4QJR2TGKLMP6sg"F.2ZD[QQA%Cj9uT<\YRVb8mEqGc\Kj;`9=$-.7Mqc)GaS0b,a/8K0uC'l?>-/k=[#@b*9h.OMaAClIb#NjKt^VBKd^l".42_$M-!_ocA.-aGHR%d>bNl0hh=M=rYc4EG-:lN(2.s#6RNNL)&_HFMYM'8DN]Zih:R0.Me',3cK!-dPe1oIO]j9PlEL0+:_Xi[IX&e?KXl7n9fJci8NV!%)N_D$U`bSX^NVGO>k[$r;l6o2.ji9Hgq?XZLoXbTP8,9ra-4o&K`bs30Hp_8SlrrB#cVJSP"0R]$oquFYei6Q$PA#>T.ONnT1'1a%7Bh<K-K50@0OKJ=3-D5bZ,-nV"7\j$:_SXDP(Rd?]TMRB,q=YbDahX,S\7>.O9>Mi`0'DN(Fk/5Sdc86meG?ejRC<VWj6-K2%4cM%Ea<:Z4G?[52Li,jT`j<\-F#j6Jk<$k02r@6hM?u]QpZ^dTpVd<LnV>J+^uiNs3WM7f/jn*iY=!_#0crr@45IY+^qT(YU'^/7Z2qn%GVt/-TstaY@AmM!+CV3dn44D]Ml^?E:W*.1@oR&^'F`NnC_R:)nQ<V(?$Y.L=&4h^(oerH'F^iZ=i#XaZipm3W4%5Mg=??,6]G9M%:XO)Hf$N1nd5<ba_pC9JTE*B"]EP]uG2t5'41$5NTrtaIDr+HfChR-4TPX+s#$*XLoO_Z%o5KVnTikm!"BGm^8-u@=W^$llmPtqh%6cYGu>smf(\oeJ<3YmAXh6Rp?#."uFCqs?5_M7K67G,uc;$1B^cVh!Q+e7YPZ=.u4NjN5>j@@oXr,RoX%-DJm%E"r"b(^Lm#jO&f%kW%(!7ZXg,a,175_`O$#qi\\K+90&bjd,Hbd=g8("ASZPh,=(o6t+uRM8FsQEJVJ3r@/A4jhMj\_K'$*AdHJ/3REH@^c_Ok?5Cb6%AQUXI^]ck8?CrF%"nRO$`=7M;RN.]M)5$1e6fJ?7('hJ]3/a>gP#)oUPR87ch6^9$M`n;kkXf@f_-$'*%F&#A_0D<<KXW(W73@k3%_I=%?^uSo+ZC3gPVa_d[G(5s8Yh6/Sdkdp+>+[iRZND\1`V/;tHj30`+qPNZRFDc`Rsd(9/:)+j@BkNDdN$_0T7F/u!hYW9-9,s#%a'd'A_A!(sO=A1c3!bEon0FE2JeN>%'Z`qr'N=Cu%qDlu!uAmc%IHhf9XXc)VO/:CNgaE>jdWJV?\j\Ib69Wl/h\[ULG<N5EB/4#%!ZMP#Dd\#;$4:suLk:"d"Ot@.3/98Xot&<>b;Bh>A\VJ^/@U%CbDbO@?4"ojnm;k38`7?gH7X:09]!d=\[XA(^g$s@:Bo%^4AuZU%Mlg&8?k0)-@)._sbl5d3:eKia>jUL-s)JG,4S^WHZfWuM/gfLa^`3iS^k'$!$Yh[U(Xk_4^g)J&ZlGH+Y_&/EEt00d=YT%.f&XZ;%hfphfL1Mp'ZWV-I0PA^-=>4C:eZ`H,T!Y_0cDI;WJiO(YR4O_R/-Qg53Ddh._49n;$^K>t&0.&nj$![khS\&u3I<BoJN4]L!B2aF%6UFPl)YKg*o*IndjW(4d8d/jO>R["+:I`3O3La34"1,<8G$keM>)[EJ?!o$<*HN$GH]H"]q\oY"'Y'?!"t-#`J,s`^8d5N4+*.Hk%0cY68@5.qDC_7F]+@(ghR(OPlZ']?#/](s(G1.WdVAE_%JI>f2@P"Am(1UCU@+<t2mLs(b72P%fa$9`60tB0!Y*_<d5Z\AL?pIde%_(So4`=tFa79<1![o[[jj=q"Q@L@"`U+<*KGq6U<3#Vn5@Q58.^*3kTo+_pVqTorjUDn$g'I\B=/#GSh'3d2]PlY)DS<\X+F0bcK%"6M\,mDQcN"0kW!X4nm\nZQgDk4)dga(O>FHs;;Us71"B4oWW8Ui!ko%pqZ_5hck&IQ>c1Z!TD;)#*,W+#YXs1,E$h[gDi6&oW(1%Ur75p#,K2l]aRfuNQ;H%U;%2*PSb7VO:oedL6NMl`K1^\Yc13N_'K.\@ee"F.IlPi25J1F3D)i!iB%CJ7$ESS9(W-)AgQ:\&3rn$%c!,^aaL<7t'#W,"YS(lm]9!YDeg+iREf>cFM.Rs$PR%rUUr;as$W?!Oe0Cd-i;Wg.dDp[fI/-O?46:ia=gn,]7tB6=q6ia6oAspB%0':>9"-h&sn)1t:N2J/nL>s_Io=]e.[W9+]jp4'=%_gXhq;/qhHPfKg2N1\1!e#qqn)ZX@BMVug.[[pU<A9EQS".KN&U#$fXKK`c%O9.)Q5mgR<3.1.Zq/SUUp^Umo+pA0()b>Orb6CjP1)pG4A2jjFa`o!0-Gs7TS.-9D^d.tEL4eiZNCU&e%g$,n?AO.[#%00U6If`Z%!LE,nCbWolVfFB)3<gP[6(DaX$n%O2=F*oK^*s:.f,_j=Z1OnuI8fPih@+Xr.N=BZBY94:1alXrd@bSeL'oa*TQsh_,Bb$pHh6@G%6K'JML(%]L1jD!<Y;+t>Mb_8jVh28=^'A4(FB^/OTmK.%%)W)+7#r+&'*H&QDIOH1i$O1E$>s;ibhsh&5n@jBYciYKk`HU#@MjW(%-i3$SZP,Kn6V\'-530Yt.tO4(I>l:)JSP<InQ*NVgr)HBJX^>PNk(!tOodYka(Ca0)!5&DM.'_FSB/fWjsGgs*c@]R"&KZKU&f/+%f+q0rI?KtsM1ORd2)21GTI*i^AT"6-=lq&7_.@MY9uEVNhLQ9,%*,K+S+rMkFtOqUir.l8S5g'uR^e4#P*=dT#<T7/O6_[nGhZ=>%Eag^QK:HVhbh"f$i4NkLT,ER<qjF`,Lc&!Emm,kGAap7`4`M7j:RJF)\2I/!X_ot,d4.[c(5$ZHPXQ7)?nC#*%Dq,lcc7^TDa#G7%Z$;`u#@fK-EaUGE>A2$N[uY,PHCJWgU5s1K@ke/dRoie7CG%#na[7&4`Sf_[B@3GYEu"k)#L[)P;AmoWp\-!dVSHXSBee$&i@LGF%"(a1j^7+UlaZOE"Mog;g3/bU#%aJNmlNLkI=VXjNSUE5*d0Gi'Z^CO+$>%V_S!p[Nb\i-@R*8`fZP]W*E#,Qj2eOl@b<;B72#d%Z%B/03</u6Hs_P]AOaTn0J=U]Bp3/a+&S$SIa*E/cQ*2o2J/NT#-d\7D8-7riuWZWm*Dqs7uRNhr"1&0S@:X!]@n.YC$O7C#RjUOM;%XKLfEq$fJA^JGM$%kHD?=?N\O_%Cj"%Lb_0'6CDT'g'h:H&r\f::&'!50qpC`*fPL3AF?e+=@r>>M+eKAe02sJa*D#Z*:6ZS;?^,%\VUJ>%+N4).p8g-[S&>6YooKcRV6FJbX?gJ5tii$$"50H?l^h2U-J=<R90O>;q+4ic^:/'_M\s_Z!__`2)2=pTI*]X@\>&KpEunr%rd&0k@LWH5E>.a'@r>`br%4$ECZ',fS62b#aGDeDk0tb.Bs4^YU;;&a<(ea8/-^#X.#ZUh5Ff\2k`/KGXR:eK=;f;T/2g;+:_oPp%4&?]FLEN,+juS4&(hcK[()p1R$XQncMhot"GDt.=-Q>%'c1Fl7Y"TSLkpeXt@s)@"!K>"[0d"DEo,7bO@Lq6hV6=\qB$Ok),_WMV%]dnW>fKK)J=mU\RW!$-3T$9l8p#sABi&luc=mQn`6WrcL$C%RUp)7#0.Zg!i/.QT0Te)3hlr0cr3;EelE<Q;FV5aa1<&ffR>mSa8%i*i<1%Qd9M=WAdT.8_sS!OTGW)a;`kMuE3bLMLuBI1n<tLKND9P]c!&rqcGq>C74p(\s$a55+lGrQh,7r#bq'(I.lW^]*@;s6uL"%J+p"9rr(#irWmo\E*rV0msb&^Dnl5'0E,R4q3u=&o&EMqq!uTMs7LU9o_U:kpR>Oio,mu0bC<^WQC\$t0DY?,rlZp<Ir&m!BW8cF%iI;rZ5Pl95T)\e;Z*SoUc0p,[jj/DOb?t2-5Q9uX^\dO3^KPik$a,O8s,ZLFo#EumiQ#lKk^WF'pTo-I>^uXoTDe[(IoHC+YCH:B%J,?9rs5BljpktdCr9++?=24anmsk2aDgqT$:I"aLmsk"[Ie`K7hu.FumY?;fprf"2s7F4ts7#&E5CE;*5QCLs/+W3D('"*Us8'M1%\"EV+25_gr~>%AI9_PrivateDataEnd