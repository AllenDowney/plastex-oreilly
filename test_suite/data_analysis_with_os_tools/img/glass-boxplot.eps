%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: glass-boxplot.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 325 228
%%HiResBoundingBox: 0 0 324.5000 227.3008
%%CropBox: 0 0 324.5000 227.3008
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 6076 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFD23FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD%1AFFA87D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D8452FD%047DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8FD047D53847DA87D7D7DA8%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D%7DA87D7D7DA87D7D7DA87D7E7D7DFD19FF7DFD18FFA8FD19FFA8FD18FFA8%FD19FF53FD18FFA87DFD65FF7DA8FD18FF7DFD65FF7DFD18FFA87EFD1EFF%A8FFA8FFA8FD42FF7DA8FD18FF7DFD1EFFFD05A87DA8FD40FF7DFD18FFA8%7DFD1EFF7DFF7DFFFFFF7DFD40FF7DA8FD18FF7DFD19FFA8FD04FFA8FFA8%FFFFA8A8FD05FFA8FD3AFF7DFD0AFFA87D7DA87DA8527D7DA87DA87DA8A8%7DFD05FFA8A8FD11FFA8A8FFFFA8FF7EFF7DFFFFFF7DFFA8FFA8AF7DFD0A%FFA8A8FD07FFA8A8FFFF84FFA8A8FD1EFFA87DA8FD09FFA852525259527D%5252527D525252FF7DA8FD04FF7D84FD12FF7DA8A8A87DA8FFA8FFFFFFFD%05A87DA8FD0AFF7DA8FD07FF847DFFA87DA87E7DFD1EFFA87DFD0CFFA8FF%A8FFA8FFA8FFFFA8A8FFA87DFD05FFA8A8FD11FFA8A8FD04FF7DFF7DFFFF%FF7DFD05FF7DFD0AFFA8A8FD07FFA8FFFFFFA8FFA8A8FD1FFF7DA8FD18FF%7DFD19FFA8FFFFFFA8A8FFA8FFFFFFA8FD40FF7DFD18FFA87EFD1EFF7DFF%7DFFFFFF7DFD40FF7DA8FD18FF7DFD1EFFA884A8A8A87DA8FD40FF7DFD18%FFA87DFD65FF7DA8FD18FF7DFD65FF7DFD18FFA87DFD65FF7EA8FD18FF7D%FD65FF7DFD18FFA87DFD65FF7DA8FD18FF7DFD65FF7DFD18FFA87EFD65FF%7DA8FD18FF7DFD65FF7DFD18FFA87DFD28FFA8FFA8FFA8FFA8FD36FF7DA8%FD18FF7DFD25FFA8A87DA8A8A884A8A8A87EA8FD34FF7DFD18FFA87DFD25%FFA8A8A8FD08FF7DFD34FF7EA8FD18FF7DFD25FFA8FFA8FD08FFA8A8FD0B%FFA8FD27FF7DFD0EFFFD04A8FFFFA8FFFFFFA87DFD0AFFA8FD11FF7DFD08%FFA8A8A8FD08FF7DFD0CFFA8A8FFFFA87EFD11FFA8FD10FF7DA8FD0DFFA8%277D52FD047D5952FF7DA8FD08FF7D7DA8FD10FF7DFD04A884A8A8A87DFF%A8FD08FFA87DA8A8A884A8A8A884A8A8A87DFFFFFF7D7D7DFD0FFFA87DA8%FD0EFFA87DFD0EFFA87D7DA8A87D527D527DA87EFD0AFF7DFD11FF7DFFA9%FFFFFFA9FFFFA8A8A8FD08FF7EFD05FFA9FFFFFFA9FFFFA8A8FFFFA87DFD%11FFA8FD10FF7DA8FD18FF7DFD1BFFA8A8FD08FFA8A8A8FD08FFA8A8FD0B%FFA8FD27FF7DFD18FFA87DFD25FFA8A8A8FD08FF7DFD34FF7DA8FD18FF7D%FD25FFA8A87DFD09A8FD34FF7DFD18FFA87DFD28FFA8FFAFFFA8FFAFFD36%FF7EA8FD18FF7DFD65FF7DFD18FFA87DFD65FF7DA8FD18FF7DFD65FF7DFD%18FFA87EFD65FF7DA8FD18FF7DFD65FF7DFD18FFA87DFD65FF7DA8FD18FF%7DFD65FF7DFD18FFA87DFD65FF7EA8FD18FF7DFD29FFFD05A8FD37FF7DFD%18FFA87DFD29FFA87EFF7DA87DFD36FF7DA8FD18FF7DFD29FFA8FFFFA8A8%A8FD36FF7DFD0CFFA8FD0BFFA8A8FD0EFFA8FD1AFFA8A8FFA8A8A8FFA8FD%34FF7DA8FD0BFF7D53847D7D7DA87DA87DA87DA87DFD04FFA87DFD07FFA8%7DA8FD19FFA8FFFFA8A87EA8A8FD33FFA87DFD0CFF847D527DFD06527D59%A87DA8FFFFFF7D7DFD07FFA97DA8FD19FFA8A8FF7DA87DFF7DFD33FFA87D%A8FD14FFA8FFFFFF7DFD29FFA8FFFFA8A8A8FFA8FD34FF7DFD18FFA87DFD%29FFA8A8FFA8AFA8FFA8FD34FF7EA8FD18FF7DFD29FF7DA8A8847DA8FD36%FF7DFD18FFA87DFD2AFF7EFD04A8FD36FF7DA8FD18FF7DFD65FF7DFD18FF%A87EFD65FF7DA8FD18FF7DFD65FF7DFD18FFA87DFD65FF7DA8FD18FF7DFD%65FF7DFD18FFA87DFD65FF7EA8FD18FF7DFD65FF7DFD18FFA87DFD65FF7D%A8FD18FF7DFD23FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD%2DFF7DFD18FFA87EFD20FFA87D7EA884A87DA884A87DA884A87DA8A8A87D%A884A87DA87DFD2CFF7DA8FD18FF7DFD21FFA8FD10FFA8FD05FFA8FD2CFF%7DFD18FFA87DFD0EFFA8A8FD10FFA8A8FD10FF7DFD05FF7DFD0BFFA8A8FD%1FFF7DA8FD0AFF7DA8A8AF84FD08A8FF7DFD0FFF7EFD11FFA8FD10FFA8FD%05FFA8A9FD0BFFA8FD1FFF7DFD0AFFA87D7D52527D5252527D5252537DA8%7DA8FD0DFFA87D7DA87DA87DA87DA87DA87DA87DA87DA87DA8FD10FF84FD%05FF7DA87EA87DA87DA87DA87DA87DA8FD1EFF7D7DA8FD0AFFA8A8A8FFA8%A9A8FFA8FFA8FFA8FF7DFD0FFFA8FD11FFA8FD0FFFA8A8FD05FFA8FD0CFF%84FD1FFF7DFD18FFA87DFD0EFFA8FD11FFA8A8FD10FF7DFD05FF7DFD0BFF%A8FD20FF7DA8FD18FF7DFD21FF7EFD0FFFA8A8FD05FFA8FD2CFF7DFD18FF%A87EFD21FFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8A8FD%2CFF7DA8FD18FF7DFD65FF7DFD18FFA87DFD65FF7EA8FD18FF7DFD65FF7D%FD18FFA87DFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D%A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87DA8FD18FF7DA87DA87D847DA87D%A87DA87DA87DA87DA87DA87D847DA87D7D7DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87D847DA87D847DA87DA87DA87DA87DA87DA87DA87DA87D%A87D7E7DFD16FFA8FFA8FFA8FFA8FD13FFA8FFA8FFA8A8A8FD13FFA8FFA8%A8A8FD14FFA9FFFFA8A8A8FD13FFA8FFA8A8A8FFA8FD13FF84A8A87DA87D%7DFD12FFA8A8FF7D7DA852A8FD12FF7EA8FD047D53FD13FF7DFF7DA87D7D%7EFD13FFA8A85284527DA8FD12FFFD077DFD13FF52A8597D597DA8FD12FF%A87DA87D7D537DA8FD12FF7D7D7D527D7DA8FD12FFA87DA87D7D7D53FDFC%FFFDFCFFFDFCFFFD0EFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:57:11+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T13:57:11+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T13:57:11+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>180</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAtAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FU&#xA;j86TXsWhqLO4e1mmvtOtjPFx5rHcX8EMvEsGFTHIw6Yqp/4TuP8AqYNV/wCRsP8A1Rw2rv8ACdx/&#xA;1MGq/wDI2H/qjjau/wAJ3H/Uwar/AMjYf+qONq7/AAncf9TBqv8AyNh/6o42rv8ACdx/1MGq/wDI&#xA;2H/qjjau/wAJ3H/Uwar/AMjYf+qONqoWflLU/Rb635g1P1fVl48JYael6rel/unr6fGvviqv/hO4&#xA;/wCpg1X/AJGw/wDVHG1d/hO4/wCpg1X/AJGw/wDVHG1d/hO4/wCpg1X/AJGw/wDVHG1d/hO4/wCp&#xA;g1X/AJGw/wDVHG1d/hO4/wCpg1X/AJGw/wDVHG1UH8pan9ei4eYNT+p+lJ6wMsPP1eUfpU/c9OPO&#xA;v0Yqr/4TuP8AqYNV/wCRsP8A1RxtXf4TuP8AqYNV/wCRsP8A1RxtXf4TuP8AqYNV/wCRsP8A1Rxt&#xA;Xf4TuP8AqYNV/wCRsP8A1RxtXf4TuP8AqYNV/wCRsP8A1RxtVlx5TvvQk9DzBqnr8W9LlLDTlT4a&#xA;/uelcbV1v5TvvQj9fzBqnr8V9XjLDTlT4qfuelcbVf8A4TuP+pg1X/kbD/1RxtXf4TuP+pg1X/kb&#xA;D/1RxtXf4TuP+pg1X/kbD/1RxtXf4TuP+pg1X/kbD/1RxtXf4TuP+pg1X/kbD/1RxtUP5YXU7bzJ&#xA;r2nXN/PfWdulnJZm5KNInqpJ6m6InUoMVZRgV2KuxV2KuxVIvOf/ABx7f/tp6T/3U7bFU9xV2Kux&#xA;V2KuxV2KuDAkgEEg0PseuKpZqd9qSaha2NgkJknhnneSctxCwtEtAE7n1vwxVBaXf+ar+xiu1Sxj&#xA;EnKiEzEjixX+GFU00W+kv9Hsb6RBHJd28U7opJVWkQMQCewrgVGchULUciKgd6D/AG8VdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVY/pP/ACmXmD/jDYf8RmwqyDArsVYHrlh+bi6x6+jahZHTWuZP&#xA;9GmjJdbdhDw+ItRzyR+y8VJ3YkcSqWzaf+eFwbVnu7OL0GWRkjkVOZE/JklIjaq+nRVoN96iuKEQ&#xA;0P51RabPdtdWct3HFdCOxSOP4ytuPqzcqU9RpuXJa8enbFK+8Tz6uj3H6fe3djqGhfo3hx4hxqEH&#xA;q+oEUHduJJr1qFUAVZVn1r9a9BPrXD6x/uz0q8Ovblv0wKlX/Oy/4l/3T+iPR/y615/dzp9FMVTr&#xA;FXYq7FXYqxy0/Tv6X1z6j9V9H65HX1/U5cvqVtX7O1MKrof0x/iux+v/AFfj9QvfT9DnWvrWla88&#xA;VRflT/jgWv8Az0/5ONiVS3y1/ib/AA5pXo/UvR+p2/p8/V5cfSWnKm1aYqiIP0t/imy/SHof7w3n&#xA;pfV+f+/rXly5/RTFWQYFdiqTWv8AiT/El16/o/oj0YvR48+Vec9aV2504c/alMVTnFUm8w/4i52X&#xA;6I9Lh66fWPU514b1rx/Z8cVU9T/xX+lbH6j9X+qcX+sc/Upy4CnKnbl9nCqp5e/xFzvf0v6XD13+&#xA;r+nzrw2pTl+z4YFTnFXYq7FXYq7FXYq5q0PGnKm1elcVYx5c+v8A+LPMH170vW9Kw/uOXGnGb+bf&#xA;CrJ8CuxV2KuxV2KpF5z/AOOPb/8AbT0n/up22Kp7irsVdirsVdirsVcFAJIABJqfc9MVSzU7HUn1&#xA;C1vrB4RJBDPA8c4biVmaJqgp3Ho/jiqC0uw81WFjFaK9jII+VHImBPJi38cKppotjJYaPY2MjiSS&#xA;0t4oHdQQrNGgUkA9jTAqM4ioag5AUB70P+1irsVdirsVdirsVdirsVdirsVdirsVdirsVdirH9J/&#xA;5TLzB/xhsP8AiM2FWQYFdirsVdirsVSLzn/xx7f/ALaek/8AdTtsVT3FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWP6T/wApl5g/4w2H/EZsKsgwK7FXYq7FXYqk&#xA;XnP/AI49v/209J/7qdtiqe4q7FXYq7FXYq7FXYq7FXYqhL3WNIsHVL6+t7R3FUWeVIyR0qAxFcVQ&#xA;3+K/K3/V4sf+kmH/AJqxV3+K/K3/AFeLH/pJh/5qxVMLe4t7mFJ7eVJoZBVJY2DKw8QwqDiqpirs&#xA;VdirsVdirsVdirsVdirsVdirsVY/pP8AymXmD/jDYf8AEZsKsgwK7FXYqxi5/MvyTbXUtpLqSrcw&#xA;TLbzxenLVJHne3+MlaBRJE1WrSlD0Zaqogef/JZnihGtWZadC8Z9ZOJCsEIrWgardOvU9sVS7zH5&#xA;n8u6loKz2OpW9zDbajo8lxLHIpWNG1OCjOa0UfA3XwxVlltdW11As9tKk8D7pLGwdGoabMtQd8VV&#xA;MVS2fzJocGrxaRLewpfzKzLA0iBgQYwEKluXJ/WXiKb4qmWKuxV2KuxVIdL86eXbrTLS6uNUsoZ5&#xA;4Y5ZYTcRAo7oGZaFq7E03xVFf4r8rf8AV4sf+kmH/mrFUhv9S06/1W9exuobtEOhK7QSLIAf0nKa&#xA;EqThVmWBXYqxrQ/Mfl62tbiC41S0hnjv9QDxSTxo6n67NsVLAjFUx/xX5W/6vFj/ANJMP/NWKu/x&#xA;X5W/6vFj/wBJMP8AzViq2x8xaff6u9lY3MF3FHbiZ5IJFk4sX4hTxJA2xVQuvPHla11X9GT6jAly&#xA;GVHrLEFRmEx4uS2xX6uwbbYlfHFU9xV2KuxVTuLi3toXnuJUhhjFXlkYKqjxLGgGKoTRtd0rWbT6&#xA;1p1wk8dSGCOrFTUijcS1K0xVH4q7FXMwUFmICgVJPQDFWMeXb+xvfNnmCayuIrmL0rAepC6yLULN&#xA;tVSRhVk+BXYq7FWP3XkDyddXV1dT6XE9xesXupaurOzNC5J4sP2rSI/R7mqq26/L7yfd3j3lxp4e&#xA;4kaSR29WYAvP/fNxDhayr8L7fEvwtVdsVS/VvK3l/QNHI0exjsvrmr6RLdenX43GpWwBNSe2Ksyx&#xA;V2KqLWkDXkV2QfXhjkiRq7BJWRnFPnEuKq2KuxV2KuxVC6TY/o/S7Ow5+r9Ugjg9SnHl6aBOVKml&#xA;aeOKorFWG+Z9S06y1m4F5dQ2xkGiNGJpFj5CPUpC5HIivEbnwwqn3+K/K3/V4sf+kmH/AJqwK7/F&#xA;flb/AKvFj/0kw/8ANWKrPKssU2kvNC6yRSXl+8ciEMrK17MQykbEEYqm+KuxVCfUP9y36Q9T/dH1&#xA;f0qf5fPlyr+FMVal0myk1CPUHQm6j4cGqafu1mRdunS5k+/2xVGYq7FXYq7FVGzs4LO2S2gBWKOv&#xA;EEk9SSdz7nFVbFXYq7FWP6T/AMpl5g/4w2H/ABGbCrIMCuxV2KuxV2KpF5z/AOOPb/8AbT0n/up2&#xA;2Kp7irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirH9J/5TLzB/&#xA;xhsP+IzYVZBgV2KuxV2KuxVIvOf/ABx7f/tp6T/3U7bFU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVj+k/8pl5g/4w2H/EZsKsgwK7FXYq7FXYqkXnP/jj2/8A&#xA;209J/wC6nbYqnuKuxV2KuxV2KuxV2KuxV2KuxVKLm51qbWp7KyntreG3toJiZoJJmZppJlO6zQgA&#xA;CEdsVQuh6vrM9+lvfyW0kcov+JgheIqbG6S3BPOWavMPXtT3xVP45I5FLRsHUFlJUgjkpKsNu4Io&#xA;cVXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWP6T/wApl5g/4w2H/EZsKsgwK7FWOecdO8zXCWlx5fu5&#xA;Ibm3aZpLcPGkUtLaVoVfmj7G5EQNP2ScVYtw/PErzrZiQPbuyVjoV+pFLhVAJ3+sVdQxpy478eWF&#xA;CsZvzyEhZoNLeMXNuY0jPAm3LP64fkz7hUT7LV+Pb7O6lu8T8wV0yaPzBNasv17QzYTxxDiJWv7Y&#xA;y8lWQMVWQkU22A+I7nFXoEC3a26rcSRyXNDykjQohPaiF3I/4LAqW6JbeYor3Un1S5hnt5Jla0WO&#xA;J4/h9CJSV5TTcV5q/wANOtW74qm+KpNqdr5kk1qxlsrqGPT09T6xG8Tsd1AHIieMNU/Z+H4cVTnF&#xA;XYq7FXYq7FXYqldt/wApTqH/ADA2X/J67xVIbCPUX1WyFjPDA4Ou82nhaYEfpOLYBZYaffhVO/Kq&#xA;zrpLrcMrzC8v/UdFKKT9dm3VSzkA/wCscCpvirsVdirsVdirsVdirsVdirsVdirmrQ8SA1NidxX8&#xA;MVYx5dS+TzZ5gF7NFNL6Vh8cMTQrTjN+y0kx/wCGwqyfArsVdirsVdiqRec/+OPb/wDbT0n/ALqd&#xA;tiqe4q7FXYq7FXYq7FXYq7FXYq7FUqutM1X9Ky39jeQQieCGCSKe3eb+5eVwwZJoevrdKdsVUNG0&#xA;C/s7xbm7vYrkRi79NIoGh3vbhbiQsWlmrxZKL02xVPMVdirsVdirsVdirsVdirsVdirsVdirsVY/&#xA;pP8AymXmD/jDYf8AEZsKsgwK7FXYq7FXYqkXnP8A449v/wBtPSf+6nbYqnuKuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksf0n/lMvMH/GGw/4jNhVkGBXYq7FXYq7&#xA;FUi85/8AHHt/+2npP/dTtsVT3FXYq7FXYq7FXYq7FXYqgLrzBoNpO1vdala286U5wyzxo4qKiqsw&#xA;IqDXFVL/ABX5W/6vFj/0kw/81Yq7/Fflb/q8WP8A0kw/81Yq7/Fflb/q8WP/AEkw/wDNWKtf4t8q&#xA;cgv6asORBIX6zDUgUqfte+Kt/wCK/K3/AFeLH/pJh/5qxVMLa5trqBLi2lSe3lHKOaNg6MPFWWoO&#xA;KqmKuxV2KuxV2KuxV2KuxV2KuxVj+k/8pl5g/wCMNh/xGbCrIMCuxVItS86aHpt5c2940scdmI/r&#xA;d2I2aCJ5qenGzKCS7hgQADiqDk/M/wAjxmUvqQEUAYzTiKYxJwZUPJwnGlZBv0xpXL+Z/kbiDJqi&#xA;QMZI4ikiuCJJgWRagFTstTQ7d6Y0qF1/zX5f1XQWmsrwPDZalo7XUjq8Sxh9QtpFJMqoKFDyr4Yq&#xA;y+2ura6gWe2lSeB90ljYOjUNNmWoO+KqmKuxVAa5qX6N08XZZERZ7aOV5TRFjmuI4pGJqtOKOTXF&#xA;VL/Fflb/AKvFj/0kw/8ANWKu/wAV+Vv+rxY/9JMP/NWKu/xX5W/6vFj/ANJMP/NWKu/xX5W/6vFj&#xA;/wBJMP8AzViqh5bvbO8utcns547mA36gSwusiEiytqjkpIxVO8VdirsVSu5/5SnT/wDmBvf+T1pi&#xA;qaYqxjy35k8u2+jQQz6paRTRmRZInniVlIkbYqWqMJVM/wDFflb/AKvFj/0kw/8ANWBXf4r8rf8A&#xA;V4sf+kmH/mrFV2i6zDqkmoNbywz21rciCCaBg6sv1eKU1YFgSHlYbYqmWKuxV2KuxV2KuxVzMFBZ&#xA;iAoFST0AxVjHl2/sb3zZ5gmsriK5i9KwHqQusi1CzbVUkYVZPgV2KpVqflXy3qkzzajptvdyyKqO&#xA;8sasWVDyUGvXienhiqHuvInk26Qx3Gj2siNyqpjFDzpy6ePEYqqf4L8qVUjSrYMjB1YRgEMAVqCN&#xA;/ssR8jiqXeZNF0rT9MSWytY7eSfUdFSV0WhZIdSt1jUnwQE0HauKsqxV2KuxVDahYrewJCzFAs0E&#xA;9RvvbzJMB9JjpiqJxV2KuxV2KsetNa0ew1XW4r6/t7SV7xHSOeVI2KmztxyAYg0qpFcVRv8Aivyt&#xA;/wBXix/6SYf+asVd/ivyt/1eLH/pJh/5qxV3+K/K3/V4sf8ApJh/5qxVLLjzP5aPmWwkGrWZjWzv&#xA;FZ/rEXEM0tqVBPLqeJp8sVTP/Fflb/q8WP8A0kw/81Yqs8osr+XbN0IZGDsrDcEGRiCD4HCVTfAr&#xA;sVQ1pYrbT3swYsb2YTsD+yRDHDQfRFXFUTirsVdirsVdirsVdirH9J/5TLzB/wAYbD/iM2FWQYFd&#xA;irsVdirsVSHzqwXRrcnYfpTSB9J1S2AxVPsVdirsVdirsVdiqlbXUFzGZIG5oryRE0I+OF2jcb06&#xA;OhGKquKuxV2KuxV2KqTXUC3UdqzUnlR5Y0od0iKK5r02Mq/fiqrirsVdirsVdiq2aWOGJ5pDxjjU&#xA;u7bmiqKk7Yq6GWOaJJozyjkUOjbiqsKg74quxV2KuxV2KuxVjujzRv518xxqavHDp4cb7VSYj8MK&#xA;siwK7FXYq7FXYq8/1rzxoeo6I8N5b2l2n6YXS7q0S9oUaGescylEErOHjVlRV5V70FcKpb5fvvJu&#xA;s63b6VDYszzLcepNBqdxOitb3E8Hw0dSyN9W5ctqc0FPixQzL/Aflj/fE3/SXdf9VcbS7/Aflj/f&#xA;E3/SXdf9VcbV3+A/LH++Jv8ApLuv+quNq7/Aflj/AHxN/wBJd1/1VxtUm1TS/Jem6/pulXUfpDUY&#xA;riVJZdRuY2U2wViBG0nxAqxNeW1OmKGHQ+ZfJq6YJ4tJiFw8FxdCzXWph8UV1DE4MhIQhhc+pzTk&#xA;CVZRUjFXodh5N8r3djbXa28wW4iSUD63ebB1Dftujd+6g+2NpV/8B+WP98Tf9Jd1/wBVcbV3+A/L&#xA;H++Jv+ku6/6q42rv8B+WP98Tf9Jd1/1VxtULq3lHyzYaXeX31dz9UhknIlvruKOkaljzk5vxFBua&#xA;GmNqwfU9c8i2ptbtLKF4JtM+vi7l1i5XgXHNoKReu/RF+KgBbioqxAxQnvk6Hyn5lkvUj06e3FmI&#xA;zX9IXEtfUaRKPwkorVhLAVNY2R6/FQKsl/wH5Y/3xN/0l3X/AFVxtLv8B+WP98Tf9Jd1/wBVcbV3&#xA;+A/LH++Jv+ku6/6q42rv8B+WP98Tf9Jd1/1VxtWI64/kvTn1+1e0SW50hLcpbSatNCZvrSF+L+pI&#xA;PSIVWNPiqu/tihK7HXfJ9zqdrYWumLLby3NtaPPFq12fSNyqlU9BgkxkXkOShOK/tMOLhVXoX+A/&#xA;LH++Jv8ApLuv+quNpd/gPyx/vib/AKS7r/qrjau/wH5Y/wB8Tf8ASXdf9VcbV3+A/LH++Jv+ku6/&#xA;6q42qWa/oHlHRre2ubiLhDPdQWrtPqFzDT13EYKVkIdgTXjUfDU12oVWOW3nvy95bv8AURp2lQus&#xA;l7a2skkN+11dXMc3NIZo0ZZA3GhPp+rULv3FVDP/ACl5hXzDoFtq6xCAXDSr6ayCVP3Mzw8kkAXk&#xA;renyU06HAlN8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdir/AP/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:D98BA99A51D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:DA8BA99A51D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -227.301 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 227.301 li
324.5 227.301 li
324.5 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.25 227.051 mo
324.25 227.051 li
324.25 0.25 li
0.25 0.25 li
0.25 227.051 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
0.5 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
0.25 227.051 mo
324.25 227.051 li
324.25 0.25 li
0.25 0.25 li
0.25 227.051 li
@
48.8501 204.369 mo
308.05 204.369 li
308.05 22.9297 li
48.8501 22.9297 li
48.8501 204.369 li
f
163.935 146.535 mo
163.935 126.123 li
156.288 146.535 mo
156.288 126.123 li
167.564 126.123 li
167.564 146.535 li
156.288 146.535 li
156.288 141.434 mo
156.288 131.227 li
174.432 141.434 mo
174.432 131.227 li
167.564 136.33 mo
174.432 136.33 li
156.288 136.33 mo
156.288 136.33 li
177.672 191.896 mo
177.672 171.484 li
135.164 191.896 mo
135.164 171.484 li
193.872 171.484 li
193.872 191.896 li
135.164 191.896 li
89.8037 186.793 mo
89.8037 176.586 li
226.272 186.793 mo
226.272 176.586 li
193.872 181.689 mo
226.272 181.689 li
135.164 181.689 mo
89.8037 181.689 li
0 0 0 1 cmyk
@
0 lc
63.7539 139.33 mo
63.7539 133.33 li
60.7539 136.33 mo
66.7539 136.33 li
87.6006 139.33 mo
87.6006 133.33 li
84.6006 136.33 mo
90.6006 136.33 li
@
2 lc
150.456 101.176 mo
150.456 80.7637 li
146.568 101.176 mo
146.568 80.7637 li
174.044 80.7637 li
174.044 101.176 li
146.568 101.176 li
122.333 96.0728 mo
122.333 85.8667 li
207.869 96.0728 mo
207.869 85.8667 li
174.044 90.9697 mo
207.869 90.9697 li
146.568 90.9697 mo
122.333 90.9697 li
@
0 lc
76.7139 93.9697 mo
76.7139 87.9697 li
73.7139 90.9697 mo
79.7139 90.9697 li
217.33 93.9697 mo
217.33 87.9697 li
214.33 90.9697 mo
220.33 90.9697 li
219.922 93.9697 mo
219.922 87.9697 li
216.922 90.9697 mo
222.922 90.9697 li
264.893 93.9697 mo
264.893 87.9697 li
261.893 90.9697 mo
267.893 90.9697 li
@
2 lc
133.22 55.8159 mo
133.22 35.4038 li
127.776 55.8159 mo
127.776 35.4038 li
143.069 35.4038 li
143.069 55.8159 li
127.776 55.8159 li
114.687 50.7129 mo
114.687 40.5068 li
157.455 50.7129 mo
157.455 40.5068 li
143.069 45.6099 mo
157.455 45.6099 li
127.776 45.6099 mo
114.687 45.6099 li
@
0 lc
48.8501 22.9297 mo
48.8501 26.9297 li
48.8501 204.369 mo
48.8501 200.369 li
65.8276 48.6099 mo
65.8276 42.6099 li
62.8276 45.6099 mo
68.8276 45.6099 li
186.874 48.6099 mo
186.874 42.6099 li
183.874 45.6099 mo
189.874 45.6099 li
225.754 48.6099 mo
225.754 42.6099 li
222.754 45.6099 mo
228.754 45.6099 li
210.461 48.6099 mo
210.461 42.6099 li
207.461 45.6099 mo
213.461 45.6099 li
219.274 48.6099 mo
219.274 42.6099 li
216.274 45.6099 mo
222.274 45.6099 li
@
41.5542 212.271 mo
42.52 212.271 li
42.52 208.936 li
41.4702 209.146 li
41.4702 208.605 li
42.5142 208.396 li
43.1079 208.396 li
43.1079 212.271 li
44.0742 212.271 li
44.0742 212.77 li
41.5542 212.77 li
41.5542 212.271 li
41.5542 212.271 li
cp
ef
45.292 212.025 mo
45.9102 212.025 li
45.9102 212.77 li
45.292 212.77 li
45.292 212.025 li
45.292 212.025 li
cp
ef
47.2178 208.396 mo
49.54 208.396 li
49.54 208.895 li
47.7578 208.895 li
47.7578 209.969 li
47.8418 209.938 47.9321 209.914 48.0161 209.902 cv
48.1001 209.891 48.1899 209.877 48.2739 209.877 cv
48.7598 209.877 49.144 210.016 49.4321 210.279 cv
49.7202 210.551 49.8638 210.91 49.8638 211.365 cv
49.8638 211.84 49.7139 212.205 49.4199 212.465 cv
49.126 212.723 48.7119 212.848 48.1841 212.848 cv
47.998 212.848 47.812 212.83 47.6201 212.807 cv
47.4282 212.775 47.2358 212.734 47.0322 212.668 cv
47.0322 212.074 li
47.2061 212.17 47.3857 212.242 47.5781 212.289 cv
47.7642 212.338 47.9619 212.355 48.1719 212.355 cv
48.5078 212.355 48.7778 212.271 48.9761 212.092 cv
49.168 211.912 49.27 211.672 49.27 211.365 cv
49.27 211.066 49.168 210.826 48.9761 210.646 cv
48.7778 210.467 48.5078 210.375 48.1719 210.375 cv
48.0161 210.375 47.854 210.395 47.6982 210.43 cv
47.542 210.467 47.3799 210.52 47.2178 210.592 cv
47.2178 208.396 li
47.2178 208.396 li
cp
ef
51.1538 212.271 mo
52.1201 212.271 li
52.1201 208.936 li
51.0698 209.146 li
51.0698 208.605 li
52.1138 208.396 li
52.708 208.396 li
52.708 212.271 li
53.6738 212.271 li
53.6738 212.77 li
51.1538 212.77 li
51.1538 212.271 li
51.1538 212.271 li
cp
ef
56.1582 208.318 mo
56.644 208.318 57.0161 208.516 57.2798 208.9 cv
57.5381 209.289 57.6699 209.854 57.6699 210.586 cv
57.6699 211.324 57.5381 211.889 57.2798 212.271 cv
57.0161 212.656 56.644 212.848 56.1582 212.848 cv
55.666 212.848 55.2881 212.656 55.0298 212.271 cv
54.772 211.889 54.646 211.324 54.646 210.586 cv
54.646 209.854 54.772 209.289 55.0298 208.9 cv
55.2881 208.516 55.666 208.318 56.1582 208.318 cv
56.1582 208.318 li
cp
56.1582 208.785 mo
55.8521 208.785 55.624 208.936 55.4678 209.236 cv
55.312 209.535 55.2402 209.986 55.2402 210.586 cv
55.2402 211.186 55.312 211.637 55.4678 211.936 cv
55.624 212.236 55.8521 212.387 56.1582 212.387 cv
56.4639 212.387 56.6919 212.236 56.8481 211.936 cv
56.998 211.637 57.0762 211.186 57.0762 210.586 cv
57.0762 209.986 56.998 209.535 56.8481 209.236 cv
56.6919 208.936 56.4639 208.785 56.1582 208.785 cv
ef
113.65 22.9297 mo
113.65 26.9297 li
113.65 204.369 mo
113.65 200.369 li
@
106.354 212.271 mo
107.32 212.271 li
107.32 208.936 li
106.27 209.146 li
106.27 208.605 li
107.314 208.396 li
107.908 208.396 li
107.908 212.271 li
108.874 212.271 li
108.874 212.77 li
106.354 212.77 li
106.354 212.271 li
106.354 212.271 li
cp
ef
110.092 212.025 mo
110.71 212.025 li
110.71 212.77 li
110.092 212.77 li
110.092 212.025 li
110.092 212.025 li
cp
ef
112.018 208.396 mo
114.34 208.396 li
114.34 208.895 li
112.558 208.895 li
112.558 209.969 li
112.642 209.938 112.732 209.914 112.816 209.902 cv
112.9 209.891 112.99 209.877 113.074 209.877 cv
113.56 209.877 113.944 210.016 114.232 210.279 cv
114.52 210.551 114.664 210.91 114.664 211.365 cv
114.664 211.84 114.514 212.205 114.22 212.465 cv
113.926 212.723 113.512 212.848 112.984 212.848 cv
112.798 212.848 112.612 212.83 112.42 212.807 cv
112.228 212.775 112.036 212.734 111.832 212.668 cv
111.832 212.074 li
112.006 212.17 112.186 212.242 112.378 212.289 cv
112.564 212.338 112.762 212.355 112.972 212.355 cv
113.308 212.355 113.578 212.271 113.776 212.092 cv
113.968 211.912 114.07 211.672 114.07 211.365 cv
114.07 211.066 113.968 210.826 113.776 210.646 cv
113.578 210.467 113.308 210.375 112.972 210.375 cv
112.816 210.375 112.654 210.395 112.498 210.43 cv
112.342 210.467 112.18 210.52 112.018 210.592 cv
112.018 208.396 li
112.018 208.396 li
cp
ef
115.954 212.271 mo
116.92 212.271 li
116.92 208.936 li
115.87 209.146 li
115.87 208.605 li
116.914 208.396 li
117.508 208.396 li
117.508 212.271 li
118.474 212.271 li
118.474 212.77 li
115.954 212.77 li
115.954 212.271 li
115.954 212.271 li
cp
ef
119.698 208.396 mo
122.02 208.396 li
122.02 208.895 li
120.238 208.895 li
120.238 209.969 li
120.322 209.938 120.412 209.914 120.496 209.902 cv
120.58 209.891 120.67 209.877 120.754 209.877 cv
121.24 209.877 121.624 210.016 121.912 210.279 cv
122.2 210.551 122.344 210.91 122.344 211.365 cv
122.344 211.84 122.194 212.205 121.9 212.465 cv
121.606 212.723 121.192 212.848 120.664 212.848 cv
120.478 212.848 120.292 212.83 120.1 212.807 cv
119.908 212.775 119.716 212.734 119.512 212.668 cv
119.512 212.074 li
119.686 212.17 119.866 212.242 120.058 212.289 cv
120.244 212.338 120.442 212.355 120.652 212.355 cv
120.988 212.355 121.258 212.271 121.456 212.092 cv
121.648 211.912 121.75 211.672 121.75 211.365 cv
121.75 211.066 121.648 210.826 121.456 210.646 cv
121.258 210.467 120.988 210.375 120.652 210.375 cv
120.496 210.375 120.334 210.395 120.178 210.43 cv
120.022 210.467 119.86 210.52 119.698 210.592 cv
119.698 208.396 li
119.698 208.396 li
cp
ef
178.45 22.9297 mo
178.45 26.9297 li
178.45 204.369 mo
178.45 200.369 li
@
171.154 212.271 mo
172.12 212.271 li
172.12 208.936 li
171.07 209.146 li
171.07 208.605 li
172.114 208.396 li
172.708 208.396 li
172.708 212.271 li
173.674 212.271 li
173.674 212.77 li
171.154 212.77 li
171.154 212.271 li
171.154 212.271 li
cp
ef
174.892 212.025 mo
175.51 212.025 li
175.51 212.77 li
174.892 212.77 li
174.892 212.025 li
174.892 212.025 li
cp
ef
176.818 208.396 mo
179.14 208.396 li
179.14 208.895 li
177.358 208.895 li
177.358 209.969 li
177.442 209.938 177.532 209.914 177.616 209.902 cv
177.7 209.891 177.79 209.877 177.874 209.877 cv
178.36 209.877 178.744 210.016 179.032 210.279 cv
179.32 210.551 179.464 210.91 179.464 211.365 cv
179.464 211.84 179.314 212.205 179.02 212.465 cv
178.726 212.723 178.313 212.848 177.784 212.848 cv
177.598 212.848 177.412 212.83 177.22 212.807 cv
177.028 212.775 176.836 212.734 176.632 212.668 cv
176.632 212.074 li
176.806 212.17 176.986 212.242 177.178 212.289 cv
177.364 212.338 177.563 212.355 177.772 212.355 cv
178.108 212.355 178.378 212.271 178.576 212.092 cv
178.768 211.912 178.87 211.672 178.87 211.365 cv
178.87 211.066 178.768 210.826 178.576 210.646 cv
178.378 210.467 178.108 210.375 177.772 210.375 cv
177.616 210.375 177.454 210.395 177.298 210.43 cv
177.142 210.467 176.98 210.52 176.818 210.592 cv
176.818 208.396 li
176.818 208.396 li
cp
ef
181.162 212.271 mo
183.226 212.271 li
183.226 212.77 li
180.448 212.77 li
180.448 212.271 li
180.67 212.043 180.976 211.732 181.366 211.336 cv
181.75 210.945 181.996 210.693 182.098 210.58 cv
182.29 210.369 182.422 210.189 182.494 210.039 cv
182.566 209.896 182.608 209.746 182.608 209.602 cv
182.608 209.373 182.524 209.182 182.362 209.037 cv
182.2 208.895 181.99 208.816 181.726 208.816 cv
181.54 208.816 181.342 208.852 181.138 208.912 cv
180.934 208.979 180.712 209.074 180.478 209.205 cv
180.478 208.605 li
180.718 208.51 180.94 208.438 181.144 208.391 cv
181.348 208.342 181.54 208.318 181.714 208.318 cv
182.164 208.318 182.524 208.432 182.794 208.66 cv
183.064 208.889 183.202 209.188 183.202 209.566 cv
183.202 209.746 183.166 209.92 183.1 210.076 cv
183.034 210.238 182.914 210.43 182.734 210.646 cv
182.686 210.705 182.53 210.867 182.266 211.139 cv
182.002 211.408 181.636 211.785 181.162 212.271 cv
181.162 212.271 li
cp
ef
185.758 208.318 mo
186.244 208.318 186.616 208.516 186.88 208.9 cv
187.138 209.289 187.27 209.854 187.27 210.586 cv
187.27 211.324 187.138 211.889 186.88 212.271 cv
186.616 212.656 186.244 212.848 185.758 212.848 cv
185.266 212.848 184.888 212.656 184.63 212.271 cv
184.372 211.889 184.246 211.324 184.246 210.586 cv
184.246 209.854 184.372 209.289 184.63 208.9 cv
184.888 208.516 185.266 208.318 185.758 208.318 cv
185.758 208.318 li
cp
185.758 208.785 mo
185.452 208.785 185.224 208.936 185.068 209.236 cv
184.912 209.535 184.84 209.986 184.84 210.586 cv
184.84 211.186 184.912 211.637 185.068 211.936 cv
185.224 212.236 185.452 212.387 185.758 212.387 cv
186.064 212.387 186.292 212.236 186.448 211.936 cv
186.598 211.637 186.676 211.186 186.676 210.586 cv
186.676 209.986 186.598 209.535 186.448 209.236 cv
186.292 208.936 186.064 208.785 185.758 208.785 cv
ef
243.25 22.9297 mo
243.25 26.9297 li
243.25 204.369 mo
243.25 200.369 li
@
235.954 212.271 mo
236.92 212.271 li
236.92 208.936 li
235.87 209.146 li
235.87 208.605 li
236.914 208.396 li
237.508 208.396 li
237.508 212.271 li
238.474 212.271 li
238.474 212.77 li
235.954 212.77 li
235.954 212.271 li
235.954 212.271 li
cp
ef
239.692 212.025 mo
240.31 212.025 li
240.31 212.77 li
239.692 212.77 li
239.692 212.025 li
239.692 212.025 li
cp
ef
241.618 208.396 mo
243.94 208.396 li
243.94 208.895 li
242.158 208.895 li
242.158 209.969 li
242.242 209.938 242.332 209.914 242.416 209.902 cv
242.5 209.891 242.59 209.877 242.674 209.877 cv
243.16 209.877 243.544 210.016 243.832 210.279 cv
244.12 210.551 244.264 210.91 244.264 211.365 cv
244.264 211.84 244.114 212.205 243.82 212.465 cv
243.526 212.723 243.112 212.848 242.584 212.848 cv
242.398 212.848 242.212 212.83 242.02 212.807 cv
241.828 212.775 241.636 212.734 241.432 212.668 cv
241.432 212.074 li
241.606 212.17 241.786 212.242 241.978 212.289 cv
242.164 212.338 242.362 212.355 242.572 212.355 cv
242.908 212.355 243.178 212.271 243.376 212.092 cv
243.568 211.912 243.67 211.672 243.67 211.365 cv
243.67 211.066 243.568 210.826 243.376 210.646 cv
243.178 210.467 242.908 210.375 242.572 210.375 cv
242.416 210.375 242.254 210.395 242.098 210.43 cv
241.942 210.467 241.78 210.52 241.618 210.592 cv
241.618 208.396 li
241.618 208.396 li
cp
ef
245.962 212.271 mo
248.026 212.271 li
248.026 212.77 li
245.248 212.77 li
245.248 212.271 li
245.47 212.043 245.776 211.732 246.166 211.336 cv
246.55 210.945 246.796 210.693 246.898 210.58 cv
247.09 210.369 247.222 210.189 247.294 210.039 cv
247.366 209.896 247.408 209.746 247.408 209.602 cv
247.408 209.373 247.324 209.182 247.162 209.037 cv
247 208.895 246.79 208.816 246.526 208.816 cv
246.34 208.816 246.142 208.852 245.938 208.912 cv
245.734 208.979 245.512 209.074 245.278 209.205 cv
245.278 208.605 li
245.518 208.51 245.74 208.438 245.944 208.391 cv
246.148 208.342 246.34 208.318 246.514 208.318 cv
246.964 208.318 247.324 208.432 247.594 208.66 cv
247.864 208.889 248.002 209.188 248.002 209.566 cv
248.002 209.746 247.966 209.92 247.9 210.076 cv
247.834 210.238 247.714 210.43 247.534 210.646 cv
247.486 210.705 247.33 210.867 247.066 211.139 cv
246.802 211.408 246.436 211.785 245.962 212.271 cv
245.962 212.271 li
cp
ef
249.298 208.396 mo
251.62 208.396 li
251.62 208.895 li
249.838 208.895 li
249.838 209.969 li
249.922 209.938 250.012 209.914 250.096 209.902 cv
250.18 209.891 250.27 209.877 250.354 209.877 cv
250.84 209.877 251.224 210.016 251.512 210.279 cv
251.8 210.551 251.944 210.91 251.944 211.365 cv
251.944 211.84 251.794 212.205 251.5 212.465 cv
251.206 212.723 250.792 212.848 250.264 212.848 cv
250.078 212.848 249.892 212.83 249.7 212.807 cv
249.508 212.775 249.316 212.734 249.112 212.668 cv
249.112 212.074 li
249.286 212.17 249.466 212.242 249.658 212.289 cv
249.844 212.338 250.042 212.355 250.252 212.355 cv
250.588 212.355 250.858 212.271 251.056 212.092 cv
251.248 211.912 251.35 211.672 251.35 211.365 cv
251.35 211.066 251.248 210.826 251.056 210.646 cv
250.858 210.467 250.588 210.375 250.252 210.375 cv
250.096 210.375 249.934 210.395 249.778 210.43 cv
249.622 210.467 249.46 210.52 249.298 210.592 cv
249.298 208.396 li
249.298 208.396 li
cp
ef
308.05 22.9297 mo
308.05 26.9297 li
308.05 204.369 mo
308.05 200.369 li
@
300.754 212.271 mo
301.72 212.271 li
301.72 208.936 li
300.67 209.146 li
300.67 208.605 li
301.714 208.396 li
302.308 208.396 li
302.308 212.271 li
303.274 212.271 li
303.274 212.77 li
300.754 212.77 li
300.754 212.271 li
300.754 212.271 li
cp
ef
304.492 212.025 mo
305.11 212.025 li
305.11 212.77 li
304.492 212.77 li
304.492 212.025 li
304.492 212.025 li
cp
ef
306.418 208.396 mo
308.74 208.396 li
308.74 208.895 li
306.958 208.895 li
306.958 209.969 li
307.042 209.938 307.132 209.914 307.216 209.902 cv
307.3 209.891 307.39 209.877 307.474 209.877 cv
307.96 209.877 308.344 210.016 308.632 210.279 cv
308.92 210.551 309.064 210.91 309.064 211.365 cv
309.064 211.84 308.914 212.205 308.62 212.465 cv
308.326 212.723 307.912 212.848 307.384 212.848 cv
307.198 212.848 307.012 212.83 306.82 212.807 cv
306.628 212.775 306.436 212.734 306.232 212.668 cv
306.232 212.074 li
306.406 212.17 306.586 212.242 306.778 212.289 cv
306.964 212.338 307.162 212.355 307.372 212.355 cv
307.708 212.355 307.979 212.271 308.176 212.092 cv
308.368 211.912 308.47 211.672 308.47 211.365 cv
308.47 211.066 308.368 210.826 308.176 210.646 cv
307.979 210.467 307.708 210.375 307.372 210.375 cv
307.216 210.375 307.054 210.395 306.898 210.43 cv
306.742 210.467 306.58 210.52 306.418 210.592 cv
306.418 208.396 li
306.418 208.396 li
cp
ef
312.046 210.412 mo
312.328 210.473 312.55 210.598 312.706 210.789 cv
312.862 210.982 312.946 211.223 312.946 211.498 cv
312.946 211.93 312.796 212.266 312.502 212.5 cv
312.202 212.734 311.782 212.848 311.236 212.848 cv
311.05 212.848 310.858 212.83 310.666 212.793 cv
310.474 212.764 310.27 212.709 310.066 212.639 cv
310.066 212.068 li
310.229 212.164 310.408 212.236 310.606 212.283 cv
310.798 212.332 311.002 212.355 311.218 212.355 cv
311.59 212.355 311.872 212.283 312.064 212.141 cv
312.256 211.996 312.358 211.779 312.358 211.498 cv
312.358 211.246 312.268 211.041 312.088 210.898 cv
311.908 210.754 311.656 210.676 311.332 210.676 cv
310.822 210.676 li
310.822 210.189 li
311.356 210.189 li
311.644 210.189 311.866 210.137 312.022 210.016 cv
312.178 209.902 312.256 209.734 312.256 209.512 cv
312.256 209.289 312.172 209.115 312.016 208.996 cv
311.854 208.875 311.626 208.816 311.332 208.816 cv
311.17 208.816 310.996 208.834 310.81 208.869 cv
310.624 208.906 310.42 208.959 310.198 209.031 cv
310.198 208.504 li
310.42 208.443 310.63 208.396 310.828 208.365 cv
311.02 208.336 311.206 208.318 311.386 208.318 cv
311.83 208.318 312.184 208.42 312.448 208.623 cv
312.712 208.828 312.844 209.104 312.844 209.451 cv
312.844 209.691 312.772 209.896 312.634 210.064 cv
312.496 210.232 312.298 210.352 312.046 210.412 cv
312.046 210.412 li
cp
ef
315.358 208.318 mo
315.844 208.318 316.216 208.516 316.48 208.9 cv
316.738 209.289 316.87 209.854 316.87 210.586 cv
316.87 211.324 316.738 211.889 316.48 212.271 cv
316.216 212.656 315.844 212.848 315.358 212.848 cv
314.866 212.848 314.488 212.656 314.23 212.271 cv
313.972 211.889 313.846 211.324 313.846 210.586 cv
313.846 209.854 313.972 209.289 314.23 208.9 cv
314.488 208.516 314.866 208.318 315.358 208.318 cv
315.358 208.318 li
cp
315.358 208.785 mo
315.052 208.785 314.824 208.936 314.668 209.236 cv
314.512 209.535 314.44 209.986 314.44 210.586 cv
314.44 211.186 314.512 211.637 314.668 211.936 cv
314.824 212.236 315.052 212.387 315.358 212.387 cv
315.664 212.387 315.892 212.236 316.048 211.936 cv
316.198 211.637 316.276 211.186 316.276 210.586 cv
316.276 209.986 316.198 209.535 316.048 209.236 cv
315.892 208.936 315.664 208.785 315.358 208.785 cv
ef
308.05 181.689 mo
304.05 181.689 li
48.8501 181.689 mo
52.8501 181.689 li
@
16.834 179.932 mo
16.834 180.557 li
16.6299 180.375 16.4199 180.238 16.1919 180.143 cv
15.9639 180.053 15.73 180.004 15.478 180.004 cv
14.9741 180.004 14.5898 180.16 14.3262 180.467 cv
14.062 180.771 13.9302 181.209 13.9302 181.785 cv
13.9302 182.361 14.062 182.807 14.3262 183.111 cv
14.5898 183.418 14.9741 183.568 15.478 183.568 cv
15.73 183.568 15.9639 183.525 16.1919 183.43 cv
16.4199 183.34 16.6299 183.201 16.834 183.016 cv
16.834 183.635 li
16.624 183.777 16.4019 183.881 16.1738 183.945 cv
15.9458 184.012 15.7002 184.049 15.4419 184.049 cv
14.7822 184.049 14.2598 183.85 13.876 183.447 cv
13.4922 183.045 13.3062 182.494 13.3062 181.785 cv
13.3062 181.084 13.4922 180.531 13.876 180.123 cv
14.2598 179.723 14.7822 179.518 15.4419 179.518 cv
15.7061 179.518 15.9521 179.555 16.1802 179.619 cv
16.4082 179.691 16.6299 179.793 16.834 179.932 cv
16.834 179.932 li
cp
ef
19.126 180.609 mo
19.5938 180.609 19.96 180.766 20.23 181.066 cv
20.4941 181.371 20.6318 181.791 20.6318 182.332 cv
20.6318 182.871 20.4941 183.291 20.23 183.592 cv
19.96 183.898 19.5938 184.049 19.126 184.049 cv
18.6519 184.049 18.2798 183.898 18.0161 183.592 cv
17.752 183.291 17.6201 182.871 17.6201 182.332 cv
17.6201 181.791 17.752 181.371 18.0161 181.066 cv
18.2798 180.766 18.6519 180.609 19.126 180.609 cv
19.126 180.609 li
cp
19.126 181.066 mo
18.8379 181.066 18.6099 181.18 18.4419 181.408 cv
18.2739 181.637 18.1899 181.941 18.1899 182.332 cv
18.1899 182.729 18.2681 183.033 18.436 183.262 cv
18.604 183.49 18.832 183.598 19.126 183.598 cv
19.4141 183.598 19.6421 183.49 19.8101 183.262 cv
19.978 183.033 20.062 182.729 20.062 182.332 cv
20.062 181.947 19.978 181.637 19.8101 181.408 cv
19.6421 181.18 19.4141 181.066 19.126 181.066 cv
ef
24.1841 181.99 mo
24.1841 183.971 li
23.644 183.971 li
23.644 182.008 li
23.644 181.695 23.5781 181.469 23.458 181.313 cv
23.3379 181.156 23.1582 181.078 22.918 181.078 cv
22.624 181.078 22.396 181.174 22.228 181.359 cv
22.0601 181.545 21.9761 181.799 21.9761 182.115 cv
21.9761 183.971 li
21.436 183.971 li
21.436 180.688 li
21.9761 180.688 li
21.9761 181.197 li
22.1021 181.006 22.252 180.855 22.4321 180.76 cv
22.606 180.664 22.8101 180.609 23.0381 180.609 cv
23.4102 180.609 23.6982 180.73 23.8901 180.965 cv
24.082 181.197 24.1841 181.539 24.1841 181.99 cv
24.1841 181.99 li
cp
ef
25.8281 179.758 mo
25.8281 180.688 li
26.938 180.688 li
26.938 181.107 li
25.8281 181.107 li
25.8281 182.891 li
25.8281 183.16 25.8638 183.334 25.936 183.406 cv
26.0078 183.484 26.1582 183.52 26.3862 183.52 cv
26.938 183.52 li
26.938 183.971 li
26.3862 183.971 li
25.9658 183.971 25.6782 183.893 25.522 183.736 cv
25.3662 183.58 25.2881 183.299 25.2881 182.891 cv
25.2881 181.107 li
24.8921 181.107 li
24.8921 180.688 li
25.2881 180.688 li
25.2881 179.758 li
25.8281 179.758 li
25.8281 179.758 li
cp
ef
30.2622 182.098 mo
30.2622 183.971 li
29.7222 183.971 li
29.7222 183.473 li
29.5962 183.676 29.4399 183.82 29.2598 183.91 cv
29.0801 184 28.8521 184.049 28.5879 184.049 cv
28.252 184.049 27.9819 183.957 27.7842 183.771 cv
27.5859 183.586 27.4902 183.334 27.4902 183.016 cv
27.4902 182.65 27.6099 182.373 27.8618 182.182 cv
28.1079 181.996 28.4741 181.9 28.9658 181.9 cv
29.7222 181.9 li
29.7222 181.846 li
29.7222 181.6 29.6382 181.408 29.4761 181.27 cv
29.314 181.139 29.0859 181.066 28.792 181.066 cv
28.6001 181.066 28.4199 181.09 28.2402 181.139 cv
28.0601 181.186 27.8921 181.252 27.73 181.336 cv
27.73 180.838 li
27.9219 180.766 28.1138 180.705 28.2998 180.67 cv
28.4858 180.635 28.666 180.609 28.8462 180.609 cv
29.3198 180.609 29.6738 180.736 29.9082 180.982 cv
30.1421 181.229 30.2622 181.6 30.2622 182.098 cv
30.2622 182.098 li
cp
29.188 182.32 mo
28.75 182.32 28.4502 182.373 28.2822 182.471 cv
28.1138 182.572 28.0298 182.74 28.0298 182.98 cv
28.0298 183.172 28.0898 183.328 28.2158 183.436 cv
28.3418 183.551 28.5161 183.604 28.7319 183.604 cv
29.0322 183.604 29.272 183.502 29.4521 183.285 cv
29.6318 183.076 29.7222 182.793 29.7222 182.439 cv
29.7222 182.32 li
29.188 182.32 li
ef
31.2939 179.41 mo
31.834 179.41 li
31.834 180.094 li
31.2939 180.094 li
31.2939 179.41 li
31.2939 179.41 li
cp
31.2939 180.688 mo
31.834 180.688 li
31.834 183.971 li
31.2939 183.971 li
31.2939 180.688 li
ef
35.7041 181.99 mo
35.7041 183.971 li
35.1641 183.971 li
35.1641 182.008 li
35.1641 181.695 35.0981 181.469 34.978 181.313 cv
34.8579 181.156 34.6782 181.078 34.438 181.078 cv
34.144 181.078 33.916 181.174 33.748 181.359 cv
33.5801 181.545 33.4961 181.799 33.4961 182.115 cv
33.4961 183.971 li
32.9561 183.971 li
32.9561 180.688 li
33.4961 180.688 li
33.4961 181.197 li
33.6221 181.006 33.772 180.855 33.9521 180.76 cv
34.126 180.664 34.3301 180.609 34.5581 180.609 cv
34.9302 180.609 35.2178 180.73 35.4102 180.965 cv
35.6021 181.197 35.7041 181.539 35.7041 181.99 cv
35.7041 181.99 li
cp
ef
39.082 182.037 mo
39.0762 181.744 38.9922 181.51 38.8359 181.33 cv
38.6738 181.156 38.458 181.066 38.1938 181.066 cv
37.894 181.066 37.6538 181.156 37.4741 181.324 cv
37.2939 181.492 37.186 181.732 37.1621 182.037 cv
39.082 182.037 li
39.082 182.037 li
cp
39.6221 182.193 mo
39.6221 182.457 li
37.144 182.457 li
37.168 182.83 37.2759 183.117 37.48 183.311 cv
37.6782 183.502 37.9541 183.598 38.314 183.598 cv
38.5181 183.598 38.7222 183.574 38.9141 183.525 cv
39.106 183.479 39.3042 183.4 39.4961 183.291 cv
39.4961 183.803 li
39.3042 183.887 39.106 183.951 38.9019 183.988 cv
38.6982 184.023 38.4878 184.049 38.2842 184.049 cv
37.7559 184.049 37.3418 183.898 37.0361 183.598 cv
36.73 183.299 36.5801 182.885 36.5801 182.361 cv
36.5801 181.828 36.7241 181.402 37.0122 181.084 cv
37.2998 180.771 37.6958 180.609 38.188 180.609 cv
38.6318 180.609 38.98 180.754 39.2378 181.035 cv
39.4902 181.324 39.6221 181.707 39.6221 182.193 cv
ef
42.3159 181.191 mo
42.2559 181.156 42.1899 181.133 42.1182 181.113 cv
42.0459 181.102 41.9678 181.09 41.8838 181.09 cv
41.5781 181.09 41.3438 181.191 41.1821 181.391 cv
41.0142 181.588 40.936 181.869 40.936 182.242 cv
40.936 183.971 li
40.396 183.971 li
40.396 180.688 li
40.936 180.688 li
40.936 181.197 li
41.0439 181 41.1938 180.85 41.374 180.754 cv
41.5542 180.658 41.7759 180.609 42.04 180.609 cv
42.0762 180.609 42.1182 180.615 42.166 180.615 cv
42.208 180.621 42.2559 180.627 42.3159 180.641 cv
42.3159 181.191 li
42.3159 181.191 li
cp
ef
45.1479 180.783 mo
45.1479 181.293 li
44.9922 181.223 44.8359 181.162 44.6738 181.119 cv
44.5059 181.084 44.3379 181.061 44.1641 181.061 cv
43.894 181.061 43.6899 181.102 43.5581 181.186 cv
43.4258 181.27 43.3599 181.391 43.3599 181.553 cv
43.3599 181.678 43.4082 181.773 43.5039 181.846 cv
43.6001 181.918 43.792 181.99 44.0801 182.051 cv
44.2661 182.092 li
44.6499 182.176 44.9199 182.295 45.082 182.439 cv
45.2378 182.59 45.3218 182.801 45.3218 183.064 cv
45.3218 183.369 45.2021 183.609 44.9619 183.783 cv
44.7222 183.965 44.3857 184.049 43.9658 184.049 cv
43.7861 184.049 43.606 184.029 43.4141 184 cv
43.2222 183.971 43.0239 183.922 42.814 183.85 cv
42.814 183.291 li
43.0122 183.4 43.21 183.479 43.4019 183.525 cv
43.5938 183.58 43.7861 183.604 43.978 183.604 cv
44.23 183.604 44.4282 183.563 44.5659 183.479 cv
44.6982 183.395 44.77 183.268 44.77 183.105 cv
44.77 182.961 44.7158 182.848 44.6201 182.77 cv
44.5239 182.691 44.3081 182.613 43.9722 182.541 cv
43.7861 182.5 li
43.4502 182.428 43.2041 182.32 43.0601 182.176 cv
42.9102 182.031 42.8379 181.834 42.8379 181.576 cv
42.8379 181.27 42.9458 181.029 43.1621 180.861 cv
43.3779 180.693 43.6899 180.609 44.0981 180.609 cv
44.2959 180.609 44.4819 180.627 44.6621 180.658 cv
44.8359 180.688 44.998 180.73 45.1479 180.783 cv
45.1479 180.783 li
cp
ef
308.05 136.33 mo
304.05 136.33 li
48.8501 136.33 mo
52.8501 136.33 li
@
15.1182 134.236 mo
18.814 134.236 li
18.814 134.734 li
17.2598 134.734 li
17.2598 138.609 li
16.666 138.609 li
16.666 134.734 li
15.1182 134.734 li
15.1182 134.236 li
15.1182 134.236 li
cp
ef
21.8618 136.738 mo
21.8618 138.609 li
21.3218 138.609 li
21.3218 138.111 li
21.1958 138.316 21.04 138.459 20.8599 138.551 cv
20.6802 138.641 20.4521 138.688 20.188 138.688 cv
19.8521 138.688 19.582 138.598 19.3838 138.412 cv
19.186 138.227 19.0898 137.975 19.0898 137.656 cv
19.0898 137.289 19.21 137.014 19.4619 136.822 cv
19.708 136.637 20.0742 136.539 20.5659 136.539 cv
21.3218 136.539 li
21.3218 136.486 li
21.3218 136.24 21.2378 136.049 21.0762 135.91 cv
20.9141 135.777 20.686 135.705 20.3921 135.705 cv
20.2002 135.705 20.02 135.73 19.8398 135.777 cv
19.6602 135.826 19.4922 135.893 19.3301 135.977 cv
19.3301 135.479 li
19.522 135.406 19.7139 135.346 19.8999 135.311 cv
20.0859 135.273 20.2661 135.25 20.4458 135.25 cv
20.9199 135.25 21.2739 135.375 21.5078 135.621 cv
21.7422 135.867 21.8618 136.24 21.8618 136.738 cv
21.8618 136.738 li
cp
20.7881 136.959 mo
20.3501 136.959 20.0498 137.014 19.8818 137.109 cv
19.7139 137.211 19.6299 137.381 19.6299 137.619 cv
19.6299 137.813 19.6899 137.969 19.8159 138.076 cv
19.9419 138.189 20.1162 138.244 20.332 138.244 cv
20.6318 138.244 20.8721 138.143 21.0518 137.926 cv
21.2319 137.717 21.3218 137.434 21.3218 137.08 cv
21.3218 136.959 li
20.7881 136.959 li
ef
23.416 135.826 mo
23.5239 135.635 23.668 135.49 23.8418 135.395 cv
24.0161 135.299 24.2261 135.25 24.4658 135.25 cv
24.8618 135.25 25.186 135.412 25.438 135.725 cv
25.6841 136.041 25.8101 136.455 25.8101 136.973 cv
25.8101 137.488 25.6841 137.908 25.438 138.221 cv
25.186 138.531 24.8618 138.688 24.4658 138.688 cv
24.2261 138.688 24.0161 138.641 23.8418 138.551 cv
23.668 138.459 23.5239 138.316 23.416 138.117 cv
23.416 138.609 li
22.876 138.609 li
22.876 134.051 li
23.416 134.051 li
23.416 135.826 li
23.416 135.826 li
cp
25.252 136.973 mo
25.252 136.576 25.168 136.27 25.0059 136.041 cv
24.8379 135.814 24.6162 135.699 24.334 135.699 cv
24.0459 135.699 23.8242 135.814 23.6621 136.041 cv
23.4941 136.27 23.416 136.576 23.416 136.973 cv
23.416 137.367 23.4941 137.68 23.6621 137.908 cv
23.8242 138.137 24.0459 138.244 24.334 138.244 cv
24.6162 138.244 24.8379 138.137 25.0059 137.908 cv
25.168 137.68 25.252 137.367 25.252 136.973 cv
ef
26.7339 134.051 mo
27.2739 134.051 li
27.2739 138.609 li
26.7339 138.609 li
26.7339 134.051 li
26.7339 134.051 li
cp
ef
30.6821 136.678 mo
30.6758 136.385 30.5918 136.15 30.436 135.971 cv
30.2739 135.795 30.0581 135.705 29.7939 135.705 cv
29.4941 135.705 29.2539 135.795 29.0742 135.965 cv
28.894 136.133 28.7861 136.371 28.7622 136.678 cv
30.6821 136.678 li
30.6821 136.678 li
cp
31.2222 136.834 mo
31.2222 137.098 li
28.7441 137.098 li
28.7681 137.471 28.876 137.758 29.0801 137.949 cv
29.2778 138.143 29.5542 138.238 29.9141 138.238 cv
30.1182 138.238 30.3218 138.215 30.5142 138.166 cv
30.7061 138.117 30.9038 138.039 31.0962 137.932 cv
31.0962 138.441 li
30.9038 138.525 30.7061 138.592 30.502 138.627 cv
30.2979 138.664 30.0879 138.688 29.8838 138.688 cv
29.356 138.688 28.9419 138.537 28.6362 138.238 cv
28.3301 137.938 28.1802 137.523 28.1802 137.002 cv
28.1802 136.469 28.3242 136.041 28.6118 135.725 cv
28.8999 135.412 29.2959 135.25 29.7881 135.25 cv
30.2319 135.25 30.5801 135.395 30.8379 135.676 cv
31.0898 135.965 31.2222 136.348 31.2222 136.834 cv
ef
31.7021 135.328 mo
32.2422 135.328 li
32.9141 137.891 li
33.5859 135.328 li
34.2222 135.328 li
34.894 137.891 li
35.5659 135.328 li
36.106 135.328 li
35.248 138.609 li
34.6118 138.609 li
33.9038 135.922 li
33.1958 138.609 li
32.5601 138.609 li
31.7021 135.328 li
31.7021 135.328 li
cp
ef
39.6221 136.738 mo
39.6221 138.609 li
39.082 138.609 li
39.082 138.111 li
38.9561 138.316 38.7998 138.459 38.6201 138.551 cv
38.4399 138.641 38.2119 138.688 37.9482 138.688 cv
37.6118 138.688 37.3418 138.598 37.144 138.412 cv
36.9458 138.227 36.8501 137.975 36.8501 137.656 cv
36.8501 137.289 36.9702 137.014 37.2222 136.822 cv
37.4678 136.637 37.834 136.539 38.3262 136.539 cv
39.082 136.539 li
39.082 136.486 li
39.082 136.24 38.998 136.049 38.8359 135.91 cv
38.6738 135.777 38.4458 135.705 38.1519 135.705 cv
37.96 135.705 37.7798 135.73 37.6001 135.777 cv
37.4199 135.826 37.252 135.893 37.0898 135.977 cv
37.0898 135.479 li
37.2822 135.406 37.4741 135.346 37.6602 135.311 cv
37.8462 135.273 38.0259 135.25 38.2061 135.25 cv
38.6802 135.25 39.0342 135.375 39.2681 135.621 cv
39.502 135.867 39.6221 136.24 39.6221 136.738 cv
39.6221 136.738 li
cp
38.5479 136.959 mo
38.1099 136.959 37.8101 137.014 37.6421 137.109 cv
37.4741 137.211 37.3901 137.381 37.3901 137.619 cv
37.3901 137.813 37.4502 137.969 37.5762 138.076 cv
37.7021 138.189 37.876 138.244 38.0918 138.244 cv
38.3921 138.244 38.6318 138.143 38.812 137.926 cv
38.9922 137.717 39.082 137.434 39.082 137.08 cv
39.082 136.959 li
38.5479 136.959 li
ef
42.5562 135.832 mo
42.4961 135.795 42.4302 135.771 42.3579 135.754 cv
42.2861 135.742 42.208 135.73 42.124 135.73 cv
41.8179 135.73 41.584 135.832 41.4219 136.029 cv
41.2539 136.229 41.1758 136.51 41.1758 136.883 cv
41.1758 138.609 li
40.6357 138.609 li
40.6357 135.328 li
41.1758 135.328 li
41.1758 135.838 li
41.2842 135.641 41.4341 135.49 41.6138 135.395 cv
41.7939 135.299 42.0161 135.25 42.2798 135.25 cv
42.3159 135.25 42.3579 135.256 42.4058 135.256 cv
42.4482 135.262 42.4961 135.268 42.5562 135.279 cv
42.5562 135.832 li
42.5562 135.832 li
cp
ef
45.3218 136.678 mo
45.3159 136.385 45.2319 136.15 45.0762 135.971 cv
44.9141 135.795 44.6982 135.705 44.4341 135.705 cv
44.1338 135.705 43.894 135.795 43.7139 135.965 cv
43.5342 136.133 43.4258 136.371 43.4019 136.678 cv
45.3218 136.678 li
45.3218 136.678 li
cp
45.8618 136.834 mo
45.8618 137.098 li
43.3838 137.098 li
43.4082 137.471 43.5161 137.758 43.7202 137.949 cv
43.918 138.143 44.1938 138.238 44.5542 138.238 cv
44.7578 138.238 44.9619 138.215 45.1538 138.166 cv
45.3462 138.117 45.5439 138.039 45.7358 137.932 cv
45.7358 138.441 li
45.5439 138.525 45.3462 138.592 45.1421 138.627 cv
44.938 138.664 44.728 138.688 44.5239 138.688 cv
43.9961 138.688 43.582 138.537 43.2759 138.238 cv
42.9702 137.938 42.8198 137.523 42.8198 137.002 cv
42.8198 136.469 42.9639 136.041 43.252 135.725 cv
43.54 135.412 43.936 135.25 44.4282 135.25 cv
44.8721 135.25 45.2202 135.395 45.478 135.676 cv
45.73 135.965 45.8618 136.348 45.8618 136.834 cv
ef
308.05 90.9697 mo
304.05 90.9697 li
48.8501 90.9697 mo
52.8501 90.9697 li
@
21.8081 88.876 mo
22.4082 88.876 li
23.3262 92.5718 li
24.2441 88.876 li
24.9102 88.876 li
25.8281 92.5718 li
26.7461 88.876 li
27.3462 88.876 li
26.248 93.25 li
25.5039 93.25 li
24.5801 89.4517 li
23.6499 93.25 li
22.9063 93.25 li
21.8081 88.876 li
21.8081 88.876 li
cp
ef
28.1738 88.6899 mo
28.7139 88.6899 li
28.7139 89.374 li
28.1738 89.374 li
28.1738 88.6899 li
28.1738 88.6899 li
cp
28.1738 89.9678 mo
28.7139 89.9678 li
28.7139 93.25 li
28.1738 93.25 li
28.1738 89.9678 li
ef
32.584 91.27 mo
32.584 93.25 li
32.0439 93.25 li
32.0439 91.2881 li
32.0439 90.9761 31.978 90.748 31.8579 90.5918 cv
31.7378 90.436 31.5581 90.3579 31.3179 90.3579 cv
31.0239 90.3579 30.7959 90.4536 30.6279 90.6396 cv
30.46 90.8257 30.376 91.0776 30.376 91.396 cv
30.376 93.25 li
29.8359 93.25 li
29.8359 89.9678 li
30.376 89.9678 li
30.376 90.478 li
30.502 90.2856 30.6519 90.1357 30.832 90.04 cv
31.0059 89.9438 31.21 89.8896 31.438 89.8896 cv
31.8101 89.8896 32.0981 90.0098 32.29 90.2437 cv
32.4819 90.478 32.584 90.8198 32.584 91.27 cv
32.584 91.27 li
cp
ef
34.0181 91.6118 mo
34.0181 92.0078 34.0962 92.3198 34.2578 92.5479 cv
34.4199 92.7759 34.6479 92.8838 34.936 92.8838 cv
35.2178 92.8838 35.4399 92.7759 35.6079 92.5479 cv
35.77 92.3198 35.854 92.0078 35.854 91.6118 cv
35.854 91.2158 35.77 90.9097 35.6079 90.6821 cv
35.4399 90.4536 35.2178 90.3398 34.936 90.3398 cv
34.6479 90.3398 34.4199 90.4536 34.2578 90.6821 cv
34.0962 90.9097 34.0181 91.2158 34.0181 91.6118 cv
34.0181 91.6118 li
cp
35.854 90.4658 mo
35.854 88.6899 li
36.394 88.6899 li
36.394 93.25 li
35.854 93.25 li
35.854 92.7578 li
35.7402 92.9561 35.5962 93.1001 35.4219 93.1899 cv
35.248 93.2798 35.0439 93.3276 34.8042 93.3276 cv
34.4082 93.3276 34.084 93.1719 33.832 92.8599 cv
33.5801 92.5479 33.46 92.1279 33.46 91.6118 cv
33.46 91.0957 33.5801 90.6821 33.832 90.3638 cv
34.084 90.0518 34.4082 89.8896 34.8042 89.8896 cv
35.0439 89.8896 35.248 89.938 35.4219 90.0337 cv
35.5962 90.1299 35.7402 90.2739 35.854 90.4658 cv
ef
38.5659 89.8896 mo
39.0342 89.8896 39.3999 90.0459 39.6699 90.3457 cv
39.9341 90.6519 40.0718 91.0718 40.0718 91.6118 cv
40.0718 92.1519 39.9341 92.5718 39.6699 92.8721 cv
39.3999 93.1777 39.0342 93.3276 38.5659 93.3276 cv
38.0918 93.3276 37.7202 93.1777 37.4561 92.8721 cv
37.1919 92.5718 37.0601 92.1519 37.0601 91.6118 cv
37.0601 91.0718 37.1919 90.6519 37.4561 90.3457 cv
37.7202 90.0459 38.0918 89.8896 38.5659 89.8896 cv
38.5659 89.8896 li
cp
38.5659 90.3457 mo
38.2778 90.3457 38.0498 90.46 37.8818 90.688 cv
37.7139 90.916 37.6299 91.2217 37.6299 91.6118 cv
37.6299 92.0078 37.708 92.314 37.876 92.542 cv
38.0439 92.77 38.272 92.8779 38.5659 92.8779 cv
38.854 92.8779 39.082 92.77 39.25 92.542 cv
39.418 92.314 39.502 92.0078 39.502 91.6118 cv
39.502 91.228 39.418 90.916 39.25 90.688 cv
39.082 90.46 38.854 90.3457 38.5659 90.3457 cv
ef
40.8218 89.9678 mo
41.3618 89.9678 li
42.0342 92.5298 li
42.7061 89.9678 li
43.3418 89.9678 li
44.0142 92.5298 li
44.686 89.9678 li
45.2261 89.9678 li
44.3682 93.25 li
43.7319 93.25 li
43.0239 90.562 li
42.3159 93.25 li
41.6802 93.25 li
40.8218 89.9678 li
40.8218 89.9678 li
cp
ef
308.05 45.6099 mo
304.05 45.6099 li
48.8501 45.6099 mo
52.8501 45.6099 li
@
12.5981 42.7959 mo
13.1919 42.7959 li
13.1919 44.5898 li
15.3398 44.5898 li
15.3398 42.7959 li
15.9341 42.7959 li
15.9341 47.1699 li
15.3398 47.1699 li
15.3398 45.0879 li
13.1919 45.0879 li
13.1919 47.1699 li
12.5981 47.1699 li
12.5981 42.7959 li
12.5981 42.7959 li
cp
ef
19.1621 45.2378 mo
19.1563 44.9438 19.0718 44.71 18.916 44.5298 cv
18.7539 44.356 18.5381 44.2661 18.2739 44.2661 cv
17.9741 44.2661 17.7339 44.356 17.5542 44.5239 cv
17.374 44.6919 17.2661 44.9321 17.2422 45.2378 cv
19.1621 45.2378 li
19.1621 45.2378 li
cp
19.7021 45.394 mo
19.7021 45.6577 li
17.2241 45.6577 li
17.248 46.0298 17.356 46.3179 17.5601 46.5098 cv
17.7578 46.7017 18.0342 46.7979 18.394 46.7979 cv
18.5981 46.7979 18.8018 46.7739 18.9941 46.7261 cv
19.186 46.6777 19.3838 46.6001 19.5762 46.4917 cv
19.5762 47.002 li
19.3838 47.0859 19.186 47.1519 18.9819 47.188 cv
18.7778 47.2241 18.5679 47.248 18.3638 47.248 cv
17.8359 47.248 17.4219 47.0977 17.1162 46.7979 cv
16.8101 46.498 16.6602 46.084 16.6602 45.562 cv
16.6602 45.0278 16.8042 44.6021 17.0918 44.2837 cv
17.3799 43.9717 17.7759 43.8101 18.2681 43.8101 cv
18.7119 43.8101 19.0601 43.9536 19.3179 44.2358 cv
19.5698 44.5239 19.7021 44.9077 19.7021 45.394 cv
ef
23.3018 45.2979 mo
23.3018 47.1699 li
22.7622 47.1699 li
22.7622 46.6719 li
22.6362 46.876 22.48 47.02 22.2998 47.1099 cv
22.1201 47.1997 21.8921 47.248 21.6279 47.248 cv
21.292 47.248 21.022 47.1577 20.8242 46.9717 cv
20.626 46.7856 20.5298 46.5337 20.5298 46.2158 cv
20.5298 45.8501 20.6499 45.5737 20.9019 45.3818 cv
21.1479 45.1958 21.5142 45.1001 22.0059 45.1001 cv
22.7622 45.1001 li
22.7622 45.0459 li
22.7622 44.7998 22.6782 44.6079 22.5161 44.4697 cv
22.354 44.3379 22.126 44.2661 21.832 44.2661 cv
21.6401 44.2661 21.46 44.29 21.2798 44.3379 cv
21.1001 44.3857 20.9321 44.4517 20.77 44.5356 cv
20.77 44.0381 li
20.9619 43.9658 21.1538 43.9058 21.3398 43.8696 cv
21.5259 43.834 21.7061 43.8101 21.8862 43.8101 cv
22.3599 43.8101 22.7139 43.936 22.9482 44.1821 cv
23.1821 44.4277 23.3018 44.7998 23.3018 45.2979 cv
23.3018 45.2979 li
cp
22.228 45.52 mo
21.79 45.52 21.4902 45.5737 21.3218 45.6699 cv
21.1538 45.772 21.0698 45.9399 21.0698 46.1797 cv
21.0698 46.3721 21.1299 46.5278 21.2559 46.6357 cv
21.3818 46.75 21.5562 46.8037 21.772 46.8037 cv
22.0718 46.8037 22.312 46.7017 22.4922 46.4858 cv
22.6719 46.2759 22.7622 45.9937 22.7622 45.6396 cv
22.7622 45.52 li
22.228 45.52 li
ef
24.6582 45.5317 mo
24.6582 45.9277 24.7358 46.2397 24.8979 46.4678 cv
25.0601 46.6958 25.2881 46.8037 25.5762 46.8037 cv
25.8579 46.8037 26.0801 46.6958 26.248 46.4678 cv
26.4102 46.2397 26.4941 45.9277 26.4941 45.5317 cv
26.4941 45.1357 26.4102 44.8301 26.248 44.6021 cv
26.0801 44.374 25.8579 44.2598 25.5762 44.2598 cv
25.2881 44.2598 25.0601 44.374 24.8979 44.6021 cv
24.7358 44.8301 24.6582 45.1357 24.6582 45.5317 cv
24.6582 45.5317 li
cp
26.4941 44.3857 mo
26.4941 42.6099 li
27.0342 42.6099 li
27.0342 47.1699 li
26.4941 47.1699 li
26.4941 46.6777 li
26.3799 46.876 26.2358 47.02 26.062 47.1099 cv
25.8882 47.1997 25.6841 47.248 25.4438 47.248 cv
25.0479 47.248 24.7241 47.0918 24.4722 46.7798 cv
24.2202 46.4678 24.1001 46.0479 24.1001 45.5317 cv
24.1001 45.0161 24.2202 44.6021 24.4722 44.2837 cv
24.7241 43.9717 25.0479 43.8101 25.4438 43.8101 cv
25.6841 43.8101 25.8882 43.8579 26.062 43.9536 cv
26.2358 44.0498 26.3799 44.1938 26.4941 44.3857 cv
ef
28.1738 42.6099 mo
28.7139 42.6099 li
28.7139 47.1699 li
28.1738 47.1699 li
28.1738 42.6099 li
28.1738 42.6099 li
cp
ef
32.4219 45.2979 mo
32.4219 47.1699 li
31.8818 47.1699 li
31.8818 46.6719 li
31.7559 46.876 31.6001 47.02 31.4199 47.1099 cv
31.2402 47.1997 31.0122 47.248 30.748 47.248 cv
30.4121 47.248 30.1421 47.1577 29.9438 46.9717 cv
29.7461 46.7856 29.6499 46.5337 29.6499 46.2158 cv
29.6499 45.8501 29.77 45.5737 30.022 45.3818 cv
30.2681 45.1958 30.6338 45.1001 31.126 45.1001 cv
31.8818 45.1001 li
31.8818 45.0459 li
31.8818 44.7998 31.7979 44.6079 31.6362 44.4697 cv
31.4741 44.3379 31.2461 44.2661 30.9521 44.2661 cv
30.7598 44.2661 30.5801 44.29 30.3999 44.3379 cv
30.2202 44.3857 30.0518 44.4517 29.8901 44.5356 cv
29.8901 44.0381 li
30.082 43.9658 30.2739 43.9058 30.46 43.8696 cv
30.646 43.834 30.8262 43.8101 31.0059 43.8101 cv
31.48 43.8101 31.834 43.936 32.0679 44.1821 cv
32.3018 44.4277 32.4219 44.7998 32.4219 45.2979 cv
32.4219 45.2979 li
cp
31.3481 45.52 mo
30.9102 45.52 30.6099 45.5737 30.4419 45.6699 cv
30.2739 45.772 30.1899 45.9399 30.1899 46.1797 cv
30.1899 46.3721 30.25 46.5278 30.376 46.6357 cv
30.502 46.75 30.6758 46.8037 30.8921 46.8037 cv
31.1919 46.8037 31.4321 46.7017 31.6118 46.4858 cv
31.792 46.2759 31.8818 45.9937 31.8818 45.6396 cv
31.8818 45.52 li
31.3481 45.52 li
ef
36.0098 44.5181 mo
36.1421 44.2778 36.3042 44.104 36.4902 43.9839 cv
36.6758 43.8696 36.8979 43.8101 37.1563 43.8101 cv
37.4922 43.8101 37.7559 43.9297 37.9419 44.1699 cv
38.1279 44.4097 38.2241 44.752 38.2241 45.1899 cv
38.2241 47.1699 li
37.6841 47.1699 li
37.6841 45.208 li
37.6841 44.896 37.624 44.6616 37.5161 44.5059 cv
37.4019 44.356 37.2339 44.2778 37.0059 44.2778 cv
36.7241 44.2778 36.502 44.374 36.3398 44.5601 cv
36.1782 44.7456 36.1001 44.998 36.1001 45.3159 cv
36.1001 47.1699 li
35.5601 47.1699 li
35.5601 45.208 li
35.5601 44.896 35.5 44.6616 35.3921 44.5059 cv
35.2778 44.356 35.104 44.2778 34.876 44.2778 cv
34.6001 44.2778 34.3779 44.374 34.2158 44.5601 cv
34.0542 44.7456 33.9761 44.998 33.9761 45.3159 cv
33.9761 47.1699 li
33.436 47.1699 li
33.436 43.8877 li
33.9761 43.8877 li
33.9761 44.3979 li
34.0962 44.1997 34.2461 44.0498 34.4199 43.9536 cv
34.5879 43.8579 34.792 43.8101 35.0322 43.8101 cv
35.272 43.8101 35.4702 43.8696 35.6382 43.9897 cv
35.8062 44.1099 35.9258 44.29 36.0098 44.5181 cv
36.0098 44.5181 li
cp
ef
41.812 45.5317 mo
41.812 45.1357 41.728 44.8301 41.5659 44.6021 cv
41.3979 44.374 41.1758 44.2598 40.894 44.2598 cv
40.606 44.2598 40.3838 44.374 40.2222 44.6021 cv
40.0542 44.8301 39.9761 45.1357 39.9761 45.5317 cv
39.9761 45.9277 40.0542 46.2397 40.2222 46.4678 cv
40.3838 46.6958 40.606 46.8037 40.894 46.8037 cv
41.1758 46.8037 41.3979 46.6958 41.5659 46.4678 cv
41.728 46.2397 41.812 45.9277 41.812 45.5317 cv
41.812 45.5317 li
cp
39.9761 46.6777 mo
39.9761 48.4116 li
39.436 48.4116 li
39.436 43.8877 li
39.9761 43.8877 li
39.9761 44.3857 li
40.084 44.1938 40.228 44.0498 40.4019 43.9536 cv
40.5762 43.8579 40.7861 43.8101 41.0259 43.8101 cv
41.4219 43.8101 41.7461 43.9717 41.998 44.2837 cv
42.2441 44.6021 42.3701 45.0161 42.3701 45.5317 cv
42.3701 46.0479 42.2441 46.4678 41.998 46.7798 cv
41.7461 47.0918 41.4219 47.248 41.0259 47.248 cv
40.7861 47.248 40.5762 47.1997 40.4019 47.1099 cv
40.228 47.02 40.084 46.876 39.9761 46.6777 cv
ef
45.3882 43.9839 mo
45.3882 44.4937 li
45.2319 44.4219 45.0762 44.3618 44.9141 44.3198 cv
44.7461 44.2837 44.5781 44.2598 44.4038 44.2598 cv
44.1338 44.2598 43.9302 44.3018 43.7979 44.3857 cv
43.666 44.4697 43.6001 44.5898 43.6001 44.752 cv
43.6001 44.8779 43.6479 44.9741 43.7441 45.0459 cv
43.8398 45.1177 44.0322 45.1899 44.3198 45.25 cv
44.5059 45.292 li
44.8901 45.376 45.1602 45.4956 45.3218 45.6396 cv
45.478 45.79 45.562 46 45.562 46.2637 cv
45.562 46.5698 45.4419 46.8101 45.2021 46.9839 cv
44.9619 47.1641 44.626 47.248 44.2061 47.248 cv
44.0259 47.248 43.8462 47.23 43.6538 47.1997 cv
43.4619 47.1699 43.2642 47.1221 43.0542 47.0498 cv
43.0542 46.4917 li
43.252 46.6001 43.4502 46.6777 43.6421 46.7261 cv
43.834 46.7798 44.0259 46.8037 44.2178 46.8037 cv
44.4702 46.8037 44.668 46.7617 44.8062 46.6777 cv
44.938 46.5938 45.0098 46.4678 45.0098 46.3057 cv
45.0098 46.1616 44.9561 46.0479 44.8599 45.9697 cv
44.7642 45.8921 44.5479 45.814 44.2119 45.7417 cv
44.0259 45.6997 li
43.6899 45.6279 43.4438 45.52 43.2998 45.376 cv
43.1499 45.2319 43.0781 45.0337 43.0781 44.7759 cv
43.0781 44.4697 43.186 44.23 43.4019 44.062 cv
43.6182 43.894 43.9302 43.8101 44.3379 43.8101 cv
44.5361 43.8101 44.7222 43.8276 44.9019 43.8579 cv
45.0762 43.8877 45.2378 43.9297 45.3882 43.9839 cv
45.3882 43.9839 li
cp
ef
1 lw
2 lc
48.8501 204.369 mo
308.05 204.369 li
308.05 22.9297 li
48.8501 22.9297 li
48.8501 204.369 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (glass-boxplot.eps)%%CreationDate: 10/4/10 1:57 PM%AI9_DataStream%Gb!R&k?8hJdO>%LJF5]+R4KZiCqq<YK8m.PfZ$8!J.WE[`7fRO5L-[/Y,Y5QRMh+%3d\W6f<YIB3`]<`lDj8MBs[Kd]R+JODmoYY%;D]E+BE_GanUdKN)MM('n*so$P>nFGKcq0&b:YHZh5\.Pf:1U&G,n[4FLGA4<kG\9gh]r*:PI6:^3`e(Ct'u;p2dWG%*Jjj9^?<^%os&L\o(m`<Dm'iq_ZR,kK=*?nebf28&cX3II^@UM]rRd12X>Sacg9s-I,Wu@hrjZMQOT.$C9mAG*FBiP@pr45hsC$VqYap%gTG]A%>KuVXeFog:o1Pk4XlCsL_da@d6Pk3O^NiC/&&LcN7U1%&Vs+!fIAa;Gs6HrhYEe*e[J&8>[Q4pUVmFD^+_.;'4b*AO2EfBnMLK4N%o]'_^hS*YeG1e,P'N2@!em5u*6!1VEW5:q3r6LTl9e,Y3g:jb7g![8HY;""^@UL&F'gqXkp$[3rYQPu:^=8XE>+]fA99s4ranUB6%dgk$&CpcEBhDL2)b<%KPcCdAN(<u[aq.FM(:>:j(O3JD?K@X_FrHP6+aL@$-rP6gI"7?+br(dE*F7"/:9g2rS1L%o"*Q'9IT2Pue%*Z,bPX,dZdVA0d_I0OL9Rr#3rgXU2,U"]"Lia2T@`Qc005WK&GBA;q)oAF6u_U#>9!OZe>D;4Q^D8Wik:#Au$:n)3F*gH4XpuH]s%b4D9jk>a"+bqOf+@0gF2p((nn+d<=$-j>+::FNWY"f8Z9T]Xf@I'^3aAL\Gi[SlWXW*QC<pQZ*9Tb5auBfsliI1%pOpU4?U_+uH_%F+U#\$K`UG9&IIDi$Xb?)8T+9\%i-sKfQtFp]NC)T?n50M->WO_,$FWr!"Rn$2Po`;ZBQ#jomuC9VheEYs'j^_D,J]YQR1i-I&&M%:Lg<-;=?2ZYstGjrI\!%5PPO:d0e='krW''p^O'-IU\!;.o[>I#=%/\b`:6rIaZ:<!^E@mbR]0N.MA!X?E&G<;:#<%>gSO61E%?D%*D-q#"C>d(1jU!!NJmY0QGn/I$1SPK_!D28_X*pRc'lA#q8#iT7J%&\,FhS9p^(M>G(l*PCpA0iF4::h\"I.q.tZJ_j?tFb$Y!J!%2'ooakQpM(0B!@0/lkBaNQ)I)7.8VdeYhm#+,ue6-;cS$3T5]rW8Kn7?a\Xf:8&qVX4g\X:Q"k&\cpn?qLdLZL;ZhgX":KVecA5c%0F>-%2T/_:GX]Bs0%DdQ"962Uief)_B3FkdqG$u0LH_croWM)3?%T$4o[!9rZhdDrJq-#iJ`o2Rs#)e!)tf^"D/Rd7opbpq9&&)'%;8;AQc458'^Zh@6rt.JN[=b*YY4PkEU>Kd9QF#\_Q0eq:1Z>7Nn@K8Xs3JV_au=VFrt!];/sOQhprhRg\*7P>hgsfk:tos[Pcnmj%3S+`bV$j-trUp/Eg54_R^gE@DPO/DKc"@BUnMbo/HO1ju/Kdm@F.nUBV'*(f%f:#hL@]9&MV!G8CsFZ?MBr\E'c8rr@DD>^p]iK&%(MS_eg2KH0^]iXT6='H=hOr:dA1]_Af2@+9s.XG3L]*V<Y6q]+mmKX`qqU,36f5Oh?e#N(g"Hr/O!Sc+Y(cn00G<#Jn/nD.r%7%<%Es%;/of3H[_s]))"(7>?R`),/+m]!O5E-@i\Kc&d.r&lHm1M-s?D\MXHqXSX0Q0fdiE>,jL<+?<m8W_#jQdiO-2"hA;M^u%kT+GO%;$bH)E&=Y1XjN$fU29qa;.X.%Um1/N9)q:?1oihkJKrhh[>m>5f<k;[$/1KI`Ne,l:V3d&<*U[)$C9Go7mub8*@=k6fVI6fH_7K#%m:SrV'DehEJS59Q#>'=W*K'^'^*^$2=4Gm"rGDA76TEC#[=*XDELcS7L,#[8kB,#4'$$;ENp)<ZV,7i$!U#3k4$/=h^i.r;[*-B/%Pk2%oKZ';:01"W=e2r&EL%,c_O%^2Z?prH<VHfT5g2bo)l*QO=$!IinDae0O]2IibctPrJB(Uu9+[T7_lkq_MaKEXm7q93.s%[09%%u!\dA+jD\oC$Z5'p9>I-Uuier0(fR8kDe$ej?O^%UW#J/]BbibsST7e.MOC<+:]hOSm#2Hm(j7WQn!:1WD0&3rat9JSs-g%qum9%%pZi)IDFSHoi=p2;ZB-B]N(E0kpT<RM]9d_H>&-%mngnl,uV$]`G"_&hBZee8s:3AIlTRa9Vrr&pJ>s$,L8_iBe=>+M7I22dg?$V%f!aTo`\KN'g*,;WUQ,;N*=[E)#kl!_6eNCHd5<Fi9?M1L0C24iDs2[>1^(>sfH-71JC%M.h*KpQ3/nL\N_9PUc*`a3Zmi?i?/*i9%.fS0<)Rbe[8NX!IJ*ItB7su&c:G'2RA<P;s2Ro?i&]RmM8K0NcUIUe2&Efu&<oUJ3H&A#DH(m0s7ukA7j'M!7P:.Wd98Fqci(WCe%8?"c%Q%.ZsX[bqH!VQfV@tW8Bg43;1@;=o-XlDh-9NZt",PV0Z`%9-.s3kcHq7jDIkYqEI?^odj?8(Ism3q+k0YV!A9d4nI.\idG%^ds@sI:KIHP#c,d@9H6"(tmbFRq*DqPL\M%rBMs=l1l6#W%7Yq3r9t%F@2.[l?e4BBO/GgV1dqZ7]4fK7T)N:>1C<=3]:c][*uYi%Y<MomeTusKQ]CS0T=%m_eieF/s2K!&leU//3k2uO2^^1XqQU@I$&'&j-Fc'O]X"_agTB(orT::a@<U\6F^$Mj<P&d\bsoBlf9n.0%(k!r5%0etAr2WSsEqSs60!i5eD)`NH0:q&"Y1L7d1'abmc<h[*p&5DkfAM=X?/082FrlO5>-3N!?h>j/9FaN?PlL49is[Fp:Rd%%%hO\tCGY]:GmXJLqXE8b!m*#Fkf!hZ=`oDKZqXX,X9BmYYHeB'\2aD#@7^ZN'p$ngPSV&KnI_KYV*]q]*)E#T=[G?842<s@SGImJ1%riL%hJ$n"V)VPb6e,69'BYA)3P`TYOY5"jII`Z=CQKd"2o8`2Lgs6=eXlgK[>;)R4<+"oMh!RN59:k;hj$pFZD&3d:RfrH&ka1hG%-qbbOCt-.,N)=5992!r#0r/aGe@PO$UY[FN+#[@'C>t$.8n%F^@BTI\k^K-S/tZ+8lc$i[o(h>;$U['1@MDTG#!]>@@XieWLr8Pr%JiLV*MO/h!%gVH^h[K.\U/O0,?@OnkG78fnYlNt4QZn-pRc)peELCsmIcCF]N7@@ncLJ!iW3]ciK/gIpUr<PRO?/)eLk2m9iG;G9%,2*q<K1E"'*Gmr\^]MD)Q"eTHZk&gts,Ve86SVt@j*[pPR"=>bc*I,g<YIY[ec6Z>p>>N<o(_FEF]VB:nniC?hp79/qg++hf(S.k%CU_T"kTU_sBXb&BDjhM1qc]uQ_dh`0?#NUYX15gg0I+>d+5O\?=2VMRDjm5d^T-\H>IHcA=mJcH7uI:GD7kb3!:Q_JCU1WB`V;tb%O\c!MZ.!MHlT#O*B[r^>GBkke8hU*UkB6ZXJQ$0@\M<)OWp'gbUAt/`dUQJ[&M[^+@NsG%+02l1H60rl];kn#2YtR'\[OU6r=;g`%9X"0Dl*d2`Z^gBSUVi?l("="\H#/E#--(L_?a-g5(CfL+&%f4?lX0\2deH&>%6BKhgAc>&Cg0Zf/M;OS<u^B;rR^(8pE@lRnq-mE%rbGYcff"e^hlImaO7s01(ksU;T:HcdQ1p]p^N8eYs7A]iBRHH*r1.IYJ,cEZ_mmd"X-GE!gK'Z?!_;oj?&J@$1TT@nrrljRq;$>^%[9]hC]#0#&mPF,"T,tjj]j&0[C=&p>#Y,lTe/e9FjIn3.0NPnOY2;CV4r73S"LtB_RZB=,;ma!<Djj,Zh7t7e,0r<K[u4ndHDfUO%.Vm3=gB-\t%Z?CLLMF;)]ES$o]('bT>XL2tNW$)+>jjch5?9l%HMd5^d%-sA/[P8N-8TC@YMJ2$H2LLW)3Mp7?b7tm5^)ajle3su%&u\cHGAg^9p0Fp-R3k@dNF/@8dY`2%eRn!@b#YqD2]KWo?*X"r5P:O@hRDg&)I1IjK(Q@7epZGMK/D<urd__8PpO\r66I/Qs/Hl"%ec4GWmbBsKX1+.La6qi*eTd:kZuf8ahS3+[lc$3]McdPM,I]h@OtY@t],2hV=$'3_0m-f+h,pXkj,pZA?``&=b@?qbLdTfGgN'c>%lk_Te].HT/]`]Al?`Gbq'6G:f?Q3!67:n"Rq=fVu&>T"nm\Vmc[IdP6en*LJXZ!3(>/J#%X"^8d4>uNE/jk$#P+?L&od&URR8UQG%G^Npe#&E\bCsh_)h"oNF&L>a"X58:+Q`3sZg"Ot[mCW4#n)>+L:KlSqf;=ScAkP!_Hu.eu=rf^QaP^GEl`uCa))Kp14rZ&b"V]eQ%'E>",gfGGIM@s>KJ#:cMe5n0;fVnF[]6a2WA.Q^)`9CaTVuLSWim-5&eoW)uO8;"k22>*`kSL^@]\hpRL*"d*cs-4.PL[3=<][C^%=DhYHnc%0u:6fSeT5,P.Mk&>9"Q?Z7]p@>`DUbqb#V"_sol?U@UO5Q`+q<-a#FNbR*iec$8q?*(o5aTL^2>cK&*i7/GN7c<Ou5pI%B^#\-?J=L282r1[QkGmlA@KP25%KR`Q>A'ub]g2UZD:)cQIoEK#%dhbqXpmfn+J:*&1c=ae).93L==H.IBshh<Y>f"db]"E\o5F9%YK'*q8%EBtp9FL"IE=*6A_Oh4<DVj_UKt%1RZ.2g6(VZs'hV(VI1&Wk).hQHj]3>/Frs+<_-`-34g`rC':%#9;CE.L[Ls>fH=\=;%<+!cY3QqAd5.6gTkGL)aXdM):DuX2Kg-BC1o@.2AepZo-oe0Ne,1T%X[\\NeCVH1cTtdf@o%<ljl;Odd*UNJKMV?<l[GAqi/f%tG%X5C2<V"'3[KdDYu;-%0>3D/UR_FlK[>\u]JU8-"2=H5F4=`)YK9#m<'c^OcHG0>)hQhIU`1Mc$bFNU7R0lG@[?K+_JEBhhCR]NG7%IsXfeqk`).1Dc;E8L<isYT[&-F!7C>-:p'pNYL:@(>F'#:3?6!8JoKW6GMo0dX/,[Q\G!7Hi?*bpSibHmXrji;OR_ScM>CIq7Ku1%;SQcm)7-%*MVi$l^RUmDRk+JLoheY\6VW#3a^'Iln^u'IDBK";H_h5jb&FJ7PHgN*Tf!nQLT.+lpZjBZb8><4/)L82gho@U"j"kt%SudB>G=n[Qrs6)-PQ(4\9Bekg'LEm,0#eB13&7p1JZ@9c>uJ*!qb&_GjtG!G9J4kp<?$).<o7p8P*$*b1hqMQ&3#oS2*4qhAS&H6%%I#<6'g*Lm#O54lR=.:#eeZIjBun4g,>42%VXo*aAn<@]d74)<H6\X&hEHO6P$+S`^Lon/YH3!OB4nec1V6>u"TDaC6V^s4i;O8;%]6[\&)C1W+$4&jf?Xm>%impZ\j@o*e'FCn.>))a&"ZdN"`r^IgKD7`Be[%1gac=tb/Jgdida_r.33AFihc!/1_Jc:B%D3o)U1=j0%gg4&Ye6;n%,>2%!R/a&(7?V?SpG&b5VhDJddmY/?][%]+.+WZiHsrm@1IJfAYr:?Cm7nZ_DJ,:='>E2&-_^+(FUQ$].>Wr@+;'Z6%U=Thi7u@Z!N(+Jt:ajHtRMXirQ3"-U!7;bK>Pn;K]3P[$JlW]=gn4S_qWHUE@sR$XIUW2KCVsMFoBsMR/\h''s2$GGg?YBBS(k]p%h5@rcO/pgu?cLWbr75%RrTHC<bh7?D'2-M)*t+p%Ksdh&';`9c33i8Jq]%e#b4\]Rr`FRt3?<JC"8;)_TDi(Op3n'a_mk;P2/dqY%]ADClh,u^$qQbOZ5B/<ih0ph,GMG?jEP(gTqeO1,@u/cY=%_65$P1jY5>SA%s7$!`,5YJH@`8kL=iI^!m)>OJRX=!L?+k8laIB<W%$2qhUHIQZ<SaApWq=;X/71(=u_tLS)[DSjR]Ip;Q::tR-<p*SD/D.@:YC>?6O1Pk]m`j:jhX'"BAc)A[p9CmhSBpI6^Su.VRL<J*%09au04KE-R@C2q9Vr'/?mF4ne&,&p`Xj`p0mshnbW`.K,hX/mrpT_;?-$IuK^6iW*mQ"]ij!hOfGEZqPV9[;,lQp8JmFRull.OhU%O5H*]2(HWB]9H((WTi@.Y>BAa-s9odX)CJhe)lER"A`')<_B9N`ubsVh48:$V06#jbo@]`a(YgnBRd'c#LM^?n#B-3YtJtYL/i:u%4_qVa]uE,sS!d^N&m\N#PJ>kf:<iTogRW#UhqR$QhgS8`FQLNU\@Z*ClEjB&s&f,>U:Q>,l7`/uT1SJCh8ER1Za.qLme"a'iESPd%/RkW3;QSWubhA>Md]**t2mZZE:%$NA\hYb/EK\g#UTqq`]g)JcffDirX&8]l]opgC2cY0=*cIlt=uCI>It#C4J];/pZtjL%e7\`\%`)Z2"/["\?YEid1RqDW;=oCg\mX0A]W(u$W[%4DhN$EhoKPot"3o-jG`(ou4i\Na/r`W%\e=6$$mOCH*dm>M7/TeR@*7'*FP<7V#%Zh"*>qrD6rVrqu2m%dAa-1(?0IVp)rF(LnK0,`q3F-F_:*q%QSY.r9,-?f62VKn5nJe[OAlhSF'c@6Kgh).A<^:[,,oZ/Xj<8PAo%NHNBiTl+3I-;tNSq.=iVS(?i'nR_Z<41Wi#[@Nd/+234XPS30UrUaeg[F=#7mTh-8dr0g-^!g)@Fio$(DGP_r4J.@ZS_32Or_bP[%drsu'@3VPsWs`G#nbI_.Ou1eKA8-)DrV*-/f'1>Lpni>MnS`ZM\+X'Ce'*5'Wm5+Pf$)k7*d.n(n@9SX5Nc*+T[Uk$8TXM#cPuK6%jqI'&[G<(a>&RGeVqq$"fM!Z[R%H`?M06FUAaW&kiF9E?Yr2WRQ?sq&rfWZ5<]AUo_V;aqO#gQ*&!sM!m"Md_`>@^u-['6#YA>4K%4.U8uX1(gee;2GX]hr\SqE:4%F'n\9asPl.eEtD6EX]dJXnp@>,i7h:)_]@)pFb>#BW\(ZHhG4&riEhn8MTsj.:B"([+Z%LokqN9%q3J/!Rt[sWs7UZmn)5s,@,?]ZGFjCgD6NahH("N2J%!,_/bRl6RfE/h:eLceU&&7Gp"KrAc.?.a[mphNF\@-%_\i:Mp@QtkeCpga%[G/BZDhG_^Hg`RJo^/iM5@G)B/f#McroW+-P:NoH05_<GS#P:ohHgasB#;#a9"2tW!b4gZJ(n:4:&Xcul%_KoqX*b>fuou`[Kg;<%T<6?KWO8@j.Vh8s^1@EGnCC>1Q7u?#Yai,EeCq=mmJ0W5[r3VMm!kL#rH;i6ppQcSYr;p=qP9PQmDaf:4h$UFXh/64XNl_aYKX_?%n&i=t:EMX`r;3Ve]@aTbIdYL"Uj`+o5J8\6iTRb,1%tSBfCu3>pWhbg?q;B\inIY*h_OV3Y.');=)-rr=lmZJ0[6]e1te-u'2&Sh%("eeDi("ZEbDF4*O'D,6$^d@2dX!2L_u$K`g_>.B4_`0BSh4qr@$]LY\\C%6c_(_=jpj2l[/I@Z*&M;q+aNm@jpp_Gf/q[CeFMYb%m2Y/'P<31=/4Gr6hC7dPSTXruA(Q%)hUL&o9B/(D;s3F]C8X`.rAJ/+?glREr&Qi6m1]\8/ZmJ`]i4*A>'7upn_dsL>at'8Rl=9G%e'?H1rM/`/NhL[ach+Q6l#%`ol.hQhPdHA5#_H-[e5"D78El@APK\(BOjkgpj&b,:kK4@kERHoPgEEt'YT+^KglKbRh*a9(e"`>\%:/N*)lBH@=cq$>h<ja!+mdVsE&9D&_n"0-8qsjO<eG"Da8T3n?O.FJC^+Ho,SF/AGfOT(&[Xg<c`g+8rT<ljoSWB5?C9@'\k02r3%q>8g)?[eMK=]@W:?=rXiEDp4hU"3Q4hRt>nnotq>=:=l#J)_s._VONp`ji$1d'Fa$:!ijm:5T!Q4Ds[!:k=Y;\_(TJe5fo`,q9UK%Yp%lV>^iViQfO3g]"ZE0=f8Rp2Y=;U:KMe`fRPX#@.4,C!t=+1?=8P1Ia3t])4\Bs,#H=mET!-Tp]Cfm95I-2H_1N8'^hk/$:Zhh%8G@AVRTVTCQ+r'7999LTh"q#]H&*jb?FWD!_[eqUZH3dB2`$S+IKfSuG6Q;?qlenASDS^1IU)%`U11.k70^'gY?reLT?9BaMQDcV%bk]N@PoR_Kk`;gS91)TX6m<:Um=+pg$Ka4Y1Y(])%.@q:#/n0^q)(:Ub8I,EU6k[@S[i(Xo4'/ZZuur1;s<nZ_eSOcgMcB`PXCHR%n-uXoADI.9Om(o=Z?JEh4,```j,TY4]st[XRRh#EBtG"kH&5J3RN,mRN07UipA3rJa8JiJHh[fbr@qk+gC(!eicCe8os=3.^A:"*%I>@Ld\M`H$'I>Qh@E.6%2@?u(FZTO_pP'.GE][j#(15;NoZUVM/L2hO6B%$ZV&rkKX+G@;-/[EtWKb&4%c1=AY++VN=Cg;h.td<&%`3E>j042]T:KbjiF7I+PKHJeRg0$cR=YS,\]5s@QS5Sd]"]`;.hOVmQ(ZU*nA#CF0OL0#4\TE$/jaMocrbX$B@,Dprm_s4-(7)3N%$Oc%'N\&<.DEf^(0C*lj3f8=[IMk[h</$_uF5>(T9=29a;ZHFG"e=q=U-5KhJ%)I<FUGF7>>"Bs%&pjfO=DbV5P"@*;<c_pUe95p%,e8#;rQmKp\q8/KcVuIdY$[m@#2dX*an+prL904;kG4tGLDdV,oB&<u6B%a!()878:D-]XpZc=+(e`HFL;__=H]/f"EjPipq%EA<%r:J`,L22"81U;04UY/"5O@ukXVF7//[Pfc\-??':Y[?$H:YqAmouXK+b0A*odt8O\FIJ\LSTXPn-j_i2p#X-;e`<44`^^Fr;H%&J%/]Da;@j+u0ge22cg3uU8MAf#l'/)6T@>XTLo\fk^"qo<8XYek>%o2t;qj:s)T]n.-&TthnY3YBSCiVSb<%dU"W]fZpkI+(ME[&Q1%%lD$W5R/`5%AjG,AEY_(lm$(om.XF?`/k?)4=tAG;^4'ui0LV/^3<3PHHK.KQbWU,mJZ\Qbm_OqRF[^boFtRSNG?p!q;;&XA+e-r%QZ3SeG1YOFhUtW_%#%TbiKI`71[9Io#8;$+.NW`]Mlab'GWN-LKBJPc4iiLuEI0`o>)mLi"1>t!f/h=EmdFFj<'-Mo6^$P(3/G1W%j.j`ZP!rOLHk=id;iK`8/m1*?RA?hP]q<bJEW@g'a+Lu_,2U^ioADJUQA=u,0KSu=`?lkV/-_M=>c.5fq]nb<k6![^^)G,^")-rf%l\i$"Ld`E)NgGZe2.dtZ%5DF_NViZi>a8oCON3cFc1AW@VG&)OcW,_8h9(M9P*O/Laf>a&lPKOo.Rb%DK*]?3\0)c+^T;gMbCSqP%3^;sCIbH5HIW+l%@9i6nT9/[n7VF/!oS-cSlPCj+VN21CR%#'jH4k=A-GGS%SX;%a:C\]:Z<U=[_l=S;IKO3$@!RR%^BqN+2KF(F%T=:3<ja";A_ha,]8!'gWrr1IoDeft]L;nu%Ho`jb9r!^s13mmUXl?AB'm[a<dbBTsP/E:aifcmfJM`gKP7#i4+a6"Fhs"Nh0-^.q%Z,d71@#[V2ifHp>3#ft5J\?\%Y*h@!Y7#1T6W[8d`*nh;@1I8ZNEP@ochLD&#`&VSc\4tcrR<irUh$_\6$UWHE4!nhq>jn4Ni&uf%6d5ElUN3`",`WYJ?Lr6FMh*i+XaZ]f"c\Med6>#HV3-gEERh?T>0ah-g)5U>$2Xn\)4dNg/#/`M@QPI*6&V5=ne>_>m2RRoHC$2+%8Z!RM`]S.O4W`g`i[pSCe)MAPfN8Vki<[*O:E/c+R;K3WIbN%YZ?4*QLX!-E5#:h6%#IY9IeL?1EqBHMk0Gbd)G`g,hp-&g@R3_V%XeaA^ZnnXqT@aJR5X`!L@GC$^:`&]1di3Ut>:#?sI;E_9^1s%mJs(h>O"okHGk?>pc[UlY#RkV@?%*[HS#(BEHQ!hu^JASOH5U!,%If#<\$hHqE=LD"2>5INFY2<_>$*nMH.>I5#lM!lP7'ejA4+g2De-4%h-P%U7dJWHuKa\0k:t*F>Q\I#sIH%I<$%Xq4o=o!P/;]D0%q!8Z2jNI)gWi7H"gGq6CT&"g_]sj27XYVYs9AT!C#88M2A[\+ET4a[cDD?Nf?<.cfj13;E:)=jI%Z8'#S!<:T(JJ&pV7;Z-@*?+I%arH#Tg:Y(F*@5_X@dgXc`QnQ_:mkg7h0-dSD$u?r5J%NuV,'?>CWrB!H[%@W%gg.@5F@<?3>mXUj@qXeP2hOuD"apRi7eN+BVu/>%K??at)'5H,(N.J\DC/O&Hjqc:Y&ch4eGO8AZ2".8cG\.cr<)WQG-Wpf$Dm:Rct-k:@E-Y2Ep0ebkR+0VjNqINd)E9oLX)U:cCc\P%`ficVSO&#Hh\^CtZ8:_6mZ'$_d.MK!ae7tA(*#)b/j"\\jh?_?6^O?0Vs!Q0P!^U]e)UqK$kLHF3HWplF:j"CAjCB+g=t:S-/7XC%a2"Tc!i6+5j;=%l]l*QTgn)iY*a"8SSAoF,]Uo&g\8@`!*6@=-^#"cAqdGg$1tZKW`mAsV4!,WtBWe:un[!M(_<Sf$TC_&623h^e%5\&Je=S_-hUgi92,3a-n0BTf;(fDMimcrQg<2A[o;C(k=O67u#:Y@1<4Hlh<ml2-"m\GSh6mIKa,uA`>$jGn#pdT6Ba/:79g<:tQ%5#Y[Sb3N,a>g`1S\"6uh5okSo`F8(llKO"5\,OE+KcJ3PH0j#H*'ij:4W#G^Lh)qt4/r$Y'VCnjZ"OE/fm@1LC]3Laq3[4U<@e$.%hc#KjhUikrQLfc+k".;0:*,lZSihUAc]FE3QG'dg9-06af3,E>n0rU=\OfoZMa$AZ\PK;MZdc.,=^\fFMg8]YeZR\QI'<KXi!7?`%]?SWNR6m7*dZ`-Ye'aFfntm1[)#0NLLT.XH]h_8J9OGQK1%;`%X*;0Q%q_I,bKf,UgAQ&$ndtuJ"WA=aL1iXt74*=m0h>f,:jbKd%-0<>ZNNp33UA61)F;;Xm(lMtOCgLF"776D8;KHKH5*f!\md^+MD"a6LfDV$6oApUSLc"UcGa!rTq.T`6I[KWbBBJX=)p$Z!;_RfC%oR8I&Z'X00/4OW8-Mh#-U=PaFUIdH0T0M(SKl2kKnjTK6akHkph"!KDdd0TI9'^92%?r)-].t*A=df_f:qnMV`.SbOj&%s[V:-+#%5J,_l`6:oQjPTie\T]gXj"`EF@U(9D,H@4_bm2b=p'9LFWVY99rP@8Nl"P>2#bn$_oT7hVOR9UT]g&/[-=o_A)eXf/#,9<5+f0&<%1b"`A-YMol-#jcn(,mM1U)o^XpF8T/^X!-pn]2]g4>K8mWA.+lH6A7W>2h!q3R]M?2e2C!*/l+oLc$lU4gdW%1pkXm1-Ac[oGBb_%6VI*n6o.a<jl\WkH=SiCr4tY_3EaHaOJ3QEE+tQ,0749OkV/aRnmPd+:5U":UFb0c(CO.D&OR1dGrZkmWKWFH23[!S)9AepVRA7L%4gdVJ1piAIfHCIuU6L,)eH"iD)>Al"fn01nl:/9B9NZ\0=#Y*2?LJ5d&lV;I155Te5n>b)WCksZ;;EuKWd!$@Op\FE"^Rl$Z8M&t%\26GMGk9nbhENo%5+IL^ehc<?cEg'`LDr5!@]4[ahRGacB?^0jULahqc%dhA:#[']5+Iq"XC]=a4(g,?E9)e2B>fck+"lZ@J2-6)%'bW=^`fgoL\&HdUFWclbeBE6](E8Pb!KEqq6q2=B4>Dtj>Ie2eqsF@-P<GoaYS@P-(cE<RgKD`^Re.9MXkntdLE4WA1:].b).G>i%I3Y=<\Lu\]QBb2fc7@oecSL(5HQo%orq'?Le?d\m\**>R34@er95G7ggc1jO)m[J(?7XM!"tF;&n86gQN<?nM[21\e)p`B:fZp_U%-^'P7g<#P>h1%9Ok_:8K]%P6?&ieu2XgBeJhCF0ShDUY]Q)6[X`J'm#7S#`/25pg>W58MC4:XP%Y80l5EsB]VX\Ra680Z<HO]n<g%*R&)VTItU0:IaWY5NBjVKm#r38;2GrEFbk346+CQKm*#m".e`*;EcD^+R,5i%NK"9\"kpUf$!0b[UF)(SBf.Zc.:"/$E%UBC&Yq'%Ur#PS2RZ$*GUhLAI`j.Znts:s[4B:\$AU?;T@5%Z`fg`W]aF]o9h.a.e,<eP_X8Q:.:"Z%^(EOr,5242%%:66e]5,@IE\FuJR6]f%gCIe>*QZT0St#+fkqG8e$kI]pE-[-b<dB^EZ>Si:X?9/:SUSqmMfeK^P?7+RmsO)qRWnBm5AkkA=5t'[qVu@A%qMi653t0k=)YOF%mTt)eiUm!hPtu1.47ANJ1L$,?li,H.f?2XA6>?>_:Ab"0T(hJWCU7:#g=fdqKP(S9?\CBg253J#*iE[(<^tZn]8:<NM_c[J/GQGi%VNY(<g$NYDoN6<$CRr$Io;-XEXgAKukNXfQg$NZ;[8VHP4/GlsY_-SrX(f[n5;P@V>mdu7j1/8B$Q[p"h>88NjhoL#PSC@DfrS^C%Z^f_u]Z9d?3A&.oS!s36]m`UIG.Z%G\a;C=_li[s;ei4KNp7.!Bq<h]hrFTQR6"DZkN$qJV:/gj\nSpm8aH"91rBf)Q#0Ve!;qaR%qF]*!-^T1L>n21S^:t]MC=/G2UN0U]*dJ'LW7\VFf*7,]M"R4u43eFY)qA=4Rd,Psb5JY*X\nY&"@KlZmN8,@G@%/]A+aK-+f31`%YsJ$j:<f3ga0a_f0ip`T,aU?`_>m?f^+[Uiotk!QpPkllM5Q/scOncqrt2d]?FURgOm>(np$Q&!a%#XFYQ%f/\WPb;SWVQdd_#oI%hN,iCUjBMrbE@_@Y(Jr(QfRBO/XpVh5KrWMF>;;dF6TD9)b2elda[?Gpt2n:P"]!30B:9R9:F48R?)X!l&pGa\jRT82I05AQKB,.%;`7qL)a[$:VAi&M&"QF]PY7@hCHY3H?1Q+Y\?kF_Ep5>hH\T\?92Z03@s^\fVG#(.bJ%%dQu'>Zjeaa*Cq?Dc7HM]PZK[Nml/J/[%kh1&Lb,OOf*E+k%deZNUAo-.B8\&pfSFECddj6l:,JS97Cq>'4)c&@t;D-d=)!e4>An,Y1Cq?EPPb+5"[@K0[2I3*ZmOHdA2Pt<%%Ug,r5OiNh`QPorjenhoSlZKknF@d<8J+?^Jl-eY9GdHXtO9)6cj3=GocK#mf2I2J<)LIOKhWH3=rW]$=i[QX6mu-j3X3R,((Gu2f%GV>9c8::9_DmScNf=a2l[qs(S?6(+cjL)Qe5Kl[eeKrUUToYMa#.6-@,b?3BOH>[Z=0]h<!\*Tb7^AW_%k@IU]$qn"^+PcM#jpP;%dc+Y)`DaP'B4Do.CJ^GucX`=jllhe5D'!e.(6La#^@[7Hb2\nBBC86ML<B,3S\.mtO%MUi1O$+UjcU^s)f06qceKhZ?eIB#/m!Qk%G'n>Y6[-GL<Q(f)rlRp3QYO<KmSZ0)d>./d7?7"gjt7GrO8R4-7daKp_kWR91#-h]Y@![M%b1E%(5HB-;0k5r$32,$Q\S:PF`).O%C@%/i*iL##p+Vmu+cS+C<0Uclk";Eg/>>.%<ZYiWETDVY:Bhj%I3UU<JHkK%8:i:dn)*mJ>C/T4B&`VSE+s%s6.c-AD"m:AjMWZq%n$RJj-QYBo1_a`*Du<`*BIMG6Squeu1q&+ND[`%piZLYWQXSXjaJi1A'M<f.)=VLpUfNR)O1YR71`;_J>,H8!E3o/P'5P"cnV"j7%o4D7u!Gm.m!^^DWH,piC$I!=jQR5U-q'd8J.IXr^`DFnT>4do5QPDfW@#:f#:tId)A'%E$hg@PN-6\g=HHi3hk/l7d?_$5fE4+T[%^DQO8l3O(Lk2Y[j"?t_/RE1K]Zl5Qf)uZ'&C1l&JWi;9?VmVbSPUi"BZ9e%/1?:FRSQeY;L7\]CAB=8Uiu<4&8F/D)p5+UH^C<!&%.N[s4l="&0lcjes_`$k,iGO=8ncm/_b'GLTKPdZs_D^@T?HVU2_He<tI`Q1Uh"ADU)L^X@k2Q&6V=WMX%bXXQ-e<bDPGI=LGOHq:%2MdfSPanc;I/>^?@P)!B*DbhXEM%@:4SN)h4!X8iIRaOJ1NJ9a[ZY;fp"El'gI]_F9hf)[H?.>p/Ie-*SobMQVf+)lM`og6A[]oO%j@j$o`(cWAa-+o=dSk0u<e$o0%L2d^!,5+\aZdGf,dTXN>ukQYq/c*P0s/[^gQd%*iL3ndVQ18\fp.mk-8@sfA+4eRAfB,@MW(D;%^(\0eKBKb1',8>7V&6)eg6=82FfV#RB;\j_\F6/a7)&$sq:oJS5'Aftk8pgkq`+I9M`a#&=#mF\b,`G8G(tD4YpU"s;a!XrEU=4Q%aN/\qTB"(KP`m:Jmq@;ti#X"CLa,-p5G@p>`nTA8VsPjQCNK=0bP"p6i-]m"iV_/>lfWk$.'^O2cR?Eonlt5$RTZ-8-N+H\]:/2U%rtS,B4'DT^G8eSYlV)`@3fEbc@dgP'CgCDEjMT6=-fMI?J$,/1SMH.$QC'D!QM]i>:&?$q^8E:9IETe2Ha0>&(<ug4SbdYpg?Hi\%D>?B_*O`MSe?hQ!,P]L51?)cBBq6.ANI"+ANb(5rc)tD4d[n"E([!WH*)4>OVW[prQ,@fY.@kc`-0Jh9B<5$sQ$.;6Oo)ULmA5$<%qdJc*8uKKH-<;U6),J0IR.ZKtiTKi.GBPSgd5@K71\%e?r*)h2I%=VMNg39jB5\YJat\kRS6ssj;0$*Ae_O)3P0NgFM(>.fYU1\X%1#hVA/&P.6/Z5,"&29okF4&I0D7U09GMm#_K3G>?M+oE?P4\[EXO*us+n`Q'28?CR=DCd?gcKl3M;:BSFD+[uTpls&<QO,jg<LX@%Q+D(m(1SAT%haJ[Q$&E)=>aVi>+Z)F3&NF^SC(GZSCZWiK3j:^AMGs9N$tepBqRcbIJ"k28F`10[WBB$jW9S,eKher_8k"<)]N9g%45\WOU[2_Ce]0f1RjkH+r>\mGp[Q*!fGRaKdacc6N5H'rNKho*S:/QO@qXklB^rsLdJ[Q:3KC1^ghZjuB4T=DSlmVYN-l(Vp0D[C%I'J-$9CH/+\M!^*r@lWlOb=t1C1YK\%cSJ*1,^)^>)@<fiD7-1i@[L@iauO[hD3?V_N5N(o+0id,E,().aFZX!.q,A4\DYsjR&k5%e][U&_8-c+HJYtFqOW>Oh7T.LH/>bEkamFF+ea:ogWf:0pXR8.6V7d;kPEi(WIRdn"/U%ta[fSb@)"(KF0As>q>LYZV7p`Hao)5Y%lh?93]W'D.ACajVWf2\;^:?B%-^f-u3>BL0^8Eau`f?R-.?4"r$`@`pQifl,<l8MMk03qnEt:j7/AV7bF@pZO5ZrW*N-VVYT0-?o%@,;m=6>;Z8^q;[X3F=L6:OC9M""6t%LWT\BRff$2b9drE3HG2LD`,k)"dh4ROD.<3A-#/SPb&!P?=XK;0(LtDjm2XbgNXe$"%p;8%p[U,CTcW=U?A3n(;82*-fuEt=?Q("*n"Y9aN<fLAUO;'LjF?l#^<G37`qCff`qu$r4N\H\;EQT]HAr,hVdF1X_Ei=jX+%tC%2FBE%DobVT!T3RnIar@1G=*C0j)1gpn+u.&;]>U?^U;9er<BbN.e?r\r-(MfnueT[I$o1GNV'A\G%)-=Q",'j03_j\NZ]8<?,,7\lEC&\%q32)3f.VIs$Y+M707.G)a^]SI0Debagb43MH.O]r6;!,pp9($RNgOsiH%*[?G&_^'0'JGSp!Zdfql1`PYbSu!QP=pZaB/=0bt?1B%(=$n%<N^QEZ;"UV$@8Llr=l]([b`_,nVn^TIE6X2&mLJBDm]96nfF`?=Q0Frldtl[ris-%VZJr=KNJ+K<fZ-E5MCj+YPMu-OGrh7%?hR>B=g+U8l^&W2c$/9jn+pT">[L<6dcg/rA^b*3^F#*=Y$^lg=&Q3b0^nl2XD-`q^QIC5S'S/'p3D]PpUbn-YPO7C4ha,7-XSc%%s*+FIO,,%.[e8V:oh3`oeZ4/HR,6fZouhg7Ds4:0J`8JiQSH/=fCoKLZ+TChrMna_n+$'ZT"3b=)oK"L$*X17q]=X&8PI782tY+)%%/(BBr)LK?cde[Il=@QmQ^RY/^q5'Ua\(mnY$\W+';;ZChY$1Tf59jYh-j!Dpq(uBk.M9"Y$XXKSYn-/X$=D3IbCjaI#i3aA9`Pj%86-f"?o_#>YPJ]OGC'+tI^5<Y=8am;n,p>hQ_F]J;JZd1qIQFbU=2V^f2':dK%Z`;0AJ8Mq@2`!N+-UfS>V02*m;0Efrt5](d48_%Y$\VH(u\tEeSp%_rN[0UUm&`*hY#'@eM$l3A?^:VZ=!8T#g#9i]7/H'^hMK0K>-Z<rMj4rZ_T_PqILc,oOQRNm*C.LqIL%iKIkEB%hXsMT%a/+0NJ`Lp=iVS](YP.B$J4]5r'j,>Pmj,Lg<C,?O/4EtN["fSi5:`2Ju^OCm^U]b]:+^%U"iP%0pYW$T#Be``"G5u[+eXE%@=efNK0j9]iVI*==MB1RW=\,h9hZY4m?`gck/;<-qSf_o%gSB-`qSu?`Vf)NoA%RPT1rhara]O(cg.GenZ@+MZbLt'0=epR]f4!0%Im1GnT!#5E\*VUrj2trD:c^/:-etJ&kND!JVi15[o4.74_l*?fqrdQerR^\.NB(YKpZ/65LJKF[GF,H.qJ>cLNW5p+Ic'cm-GH"O%cV3*"]3aaRp&=sGlbh5[e,!*P_1fkPcF&R+kF^F4apUGj:K[@@4tjRTBAOSmc,38NnuHqAm!<S6[bF$afleb<ZJV)HiSA\4gZpY`%$M\=DFa<4Efff`j7G?Mbj`]fk$QbcFV\BAmH?ph3V/O*ih1Q`T%kf&#jV*aFT&f35ZS]GerobI2=bmJEh<pbUgRb"PR2/D/F+'FX%cIC1;5(EO<2Vi1&=5I')rTdGCDW2-]8In40keufHMfSsiC<'&m8Y"G3I/6etVX&F7G1MQ.D#=ppY1V7L[^;hjj_r\H`n4H-*nJ!P%f'E%]9)TBpcRb<h^@-N`oM2j_-JpJ#h]9@:mbGLXKMtZZ4($k!58`+CCV,SPQes^p]STkDcK@Ed=aE8Qem*Ij+dMT_a8<>9'5a8i%`cLIEZZ5d%bK[oLkKCP*$3"NM5&6B+Bm5]`qDJ#INL#d5gms.4KUXT6iaoS],Q9H2d<EfRi]#O\IibqF)8k-W@38PenKX6,f57a!%go[l\=BVfn=N:GXG0a:C?7`cjB(u#nc,H*+)_o^W3W4l?>ErPHk[,;]eDqG(+4It#iRd0mbPE#.>PI[r;u:$Jo+,@JSBU<'MqM<3%pgauO.$XL.pWf?-Wf/SNRX<NP%1iipk2'"TL+c6?M-<^;hYKb;pd&iqp3m#rqdGVEe>E0ZcFYbG%`iG7X=^QC:hUa;QCc@TqECS>%")kXAi<#L&Ut0`gJF<Z_/Om!%D9XXmT`'@D;Oq!4lgN^t05ogZqdZ>,fdPb(Dk,@,*Glnd:RiquPj+Q>;8Y95lJ/c/p+#N1Za!!m%8G`FWrG]+nS)&1uB@HP0mpC_ENUtcda.9DXB*QT+e1')Irqb[RemijU1mY=ofRhI63>rO=f6p4K?^;7gf(OkNOG7,.`<Q+Sg:mLq%YI&^4\`2q(iF`oXptM[\U,"DPo\MtQJD?cF)*jmK/-$R'b4jB9m*:sBj+GUe7N8Z#]tMZ2U\q*X!Q<mASKV1,h[&_SeN#@DZ^1*B%0EJUI`3O[aULPi>9pV+f-dUZ%e)>B"0P8M!S_DPb&@XgB1o')mI<=Uj--`!!n)<<L!i,_OCTsQMEA_,U^9JTK%CD;lb,Csu$qV=2%C30,>),02+jV6n!Sft)oNCFk'cd"iok9"cmB`=7n(uF>j*O3+SHJq4tH]K-P9SAIVfZ-Teo"OSDpWi0TAn/,L!IeEm+1uA,XN7@i%Mu96e+g#-rFWT_$F#dC=p!jekL^Kk,+M-"\`hOT?R#'p+,<7<VT'tGPGGXGF]=hBpUWZG\D#)oG(F@5+X\ZEd;Kr`W0BjO9#(DkI%%2;G%fA!Vr9MPhrUqXM;C)ptK*5X%'YFZU\II)RVEtPtB!#-X?l:c-3D,k$S0^Za6^K+(!8"Y`_C"5b+<,Q<L\`Z[/['3\&+SQ)e%k8]7Ws3,Q:e)US3T.:68/eVk//^g`jZ3U&CoD:34<CX2#(%t(A$26aSAI#.b0$[@H4?QTEY!'Q:V7E>,n@!=V!X#!HYHFUD5Kp-M%\X[=bmuV_?hRpE8M?VI!DPo^JA$XP9NBNVegp5]J(jhg(:+$=`:?VH_i+YO5Ekt^+3>u3%^9q,G"n1i4aQ(f8&I#E85FlA>";oIK%QGA%F"V;<T46I4_hfKRF?Csh(`9uD_jH`4m'(#?7AnO+:Wp?RrOjS[\hW]^-,S:a[]0#"CTP"t#qD[RI,nfpcQR@8ijIcS^#Xc8Z%rooWZM8FQrFX5I3O43<Chf)<M[dH@JDU:pl+T?-ON)#B.RYWgd&i\ME>Q',A^g-&U*Ke#WZj9[Y$?m:UR>+IuOTqPl1:%:7QttVo%B^mc4^j!qr9S5pPVe&:r0p7]aSCp;p/dJ8r=l_9"/r/-9ZT;*`1r/7:fn<+e6]D,G;ID'(7,HI]eYt<>%']RWUJQ'#^)H;f:JK6P%Hn!p&Ue3P3TnmH,+KD6N+)aKnAHjWj7%U,F@rM8B<kGi=)(dkHLsN#Ig6AAGqAq:;BoL4uNnK7;NFa5E:1mhLd+B<NLnq:a(2#7b%EQ&jCBWS*<NH#Cb%7MD4Nt&u`k0aM\E=>6FYu/`+b&uiV/47h;!)7,@0q:Y'=%m,6*C$/a&c!\-HHGKflc\'9OV]p<cMPUbi"k49%q3KdNPoJsd3GT@%_B(mj0c0<If?c#/NZPG'TXM6+QLQ1>rQauKIb2D'Z8Y;PrL3Na=)ICXn;f*+TM4`)EE`i,BmCB,/loR#OPDdZ%)9,A/DTE'ok0L"[oGOa4/neTkVmf^s$X!A8XX25hg\cB&0'_dVX"Wi(\+^j$MjT>+L,-+''MRt@GAFH[d_:lmZ`j)G^n9cBf)2t,%`\lL\^L,Y1+&2ZHY?su-O([o]gGdo45-(>b$FEpmj;&gs^&tTq!_-LoD-#kB)9@5gFms%4ID!@-k@nq%c`ZZsj7=Wpm6<19cC_^-%AS,^`*@\An'YXDQ?sUFK9A@Y?GAgOMRkkkGG<=)gbum>EkjIPfSl9Rn-tM@QDIGW[Xmkr\e98bVJ_89'61?$+Ft<#olCYNZmoCeq%@:*</dW8p_m]4@P'G;%[r`.L2e#_i1FF1TP^.`EGhHhaS'#2+:bhJok3VM(4ah<hG5HM83T@ll\[oFCI,0q4$9gj+Jj5S@JK4eMq%E\g4tXZC`X6>]"&@9\W:7N"<[?j_AK^phM00>]pLD02Ep8&P6#<aR%'e8pE6S<_bl@ctC2_V=6]?[Z3^>Pu].[.Q5IEsB(tXqRSD%If4Nk9tW0VI_]%CFBqZ2[k<cC<=J[bpZf$n7m<4%?8LBk6Z?QVU:82C]XRS*C#dKFs89/Op<1Su(j<rEHGcs#R"W*-MqNWcYkqAe%8)*f'CBZp.gg]1GIW>2DCST`MD*QlA2N*KI[tWq'IFGiBhR+j#HMpe@hqd[#mIe$HlkWZ[b8]VKqtkrV?*C[(l:&@!ec"__^<:5K%qd8ujVhei;S;l:<_VM-'WK4+1m9dl`Rc_%Ec9Gt1X\LE!c[:D@TXC\A';`9c33i8Jq]%e#aC$;9:u^<"8H&-Yg\(:&ld!B;d?g6t%'eNFpEP(gTqeO.SkN8AJ!r$Oq>]9U(Z-N<cpZmb(@r7&nP0P'lVgR4_<:XHupW^Y3]+YFHnJOg0c/pdp*@su;cFn]<d"@1/&!J@S%$aoO3I'Gl?Zshid/080d:!EX*C4f;/(eFYaSh?9,@JPNt+e[d9Ps;br2"C(]a<1>3>hf:Or'BS"LX#jpr'@kj.&BLqR>BX[d53&C%Afs[`c1S_$%OmV:;36r5s+j@#j*<8Be:IC\*lPpo8Dj,]=6A<3Yd`L%+$4upla6C&s1FjKDgTT-ppOOYK0hk[^Z-Z5`bBjm%Mr_X%cV^tk:Th>g+AI.gaNM@Gm.E"n<@1JEnI7]B'\f+ro.Gii!)MV24Q#/\jKc2,FM34fMt.F!$'3="L_1gF/i?KRdX^,qEcRZcis3/q%,4lVY;]R^>ff#=j>nO\m"fF(jmejT,AucG0L-s$.4FcE>&CH,#,n67CeY".BV<Rp`H#u"n:D5Y2h4r(ITAT)6"Vd>McqO:mZO4TF%LdDdtB:gEH;\[UJ*rYig`(fg\:J>YC9M5?`kFNmuX#$Xq!A$G&`#;b1RU-dHXOC=kCj9O3c71.gf@G/b=[d*iG#m"YXAhg7WG^35%h;q`@Q^;>(e,Yk6X,jTLUUT%`VbgKhSSrG5lo/jd9u]`4(Z?Ws,01<"B3&SqIIGtDW4iR)]BSU91kRl6@u`YdS3TRX49f6E;@`7a%$(TH$PKjJ:pC#6n:'n'=RhB3u\]FC=cdJ?c$Q9Y\g\.am9=I=+gt()h*s)U^1cbt/O,fku:pQ+7q.U9ElW\jBqC08IG'i`-,!@V1%gSNYs%[L$hM[H:#k=*1mAi2.!&PiHWAKNnVc&L/)+WnHlD1M>/FqY6DG!so1Qs2,+7\.OsNWoiebU1K-:.']rNA(edmh$g$5#[n(%7leP!%4l6><@A<a],0W8@Lm^^)/it`%^WY^COfcq5JV"b/e("!=MW^$3QGlF*N(MB-P87G/GCu[+ZGb!%Va<a_*m.nZ"Ssu]IC8!%3g712>;;'gc`<5X:&F=GGb<pIMO%0D_W;iZ/.0=e=WtdoK3B=*IA779A!e:,`g.:i2nOW#`f*cmOiT:S]?&/PQE;=NTP2OfFiR_N%bGe.qbU2<W3k.Sdde/3>45T8/>r*`]"uA!OmX9lWP51)U)nID=pWG,Pe&l=5o4-l&[usMP9l:DI4u#65h<`rLJlTBM`ZWo_:qOqg%^Pb[B4Im(]g!gEW\mga=\O0qi)+Bcf4I>qoM*?CWe/,YRDGS#opQH$-?U*DJ0Md+idC:q0Mli/$ofQL/^UPsHdM#^^YcN=s^\UUS%d:6<h-6Ck]bds!HX=&<2/$h-E4Q8phN-4l+"d\[h=W#a<#"=.3Gt5)t-Y.n"[m*Kjm10S(jS$Oq9)c%?<D@(^YKapQINMtd;adUo%"mp[k:_Pa&H`-Y$2d?0*D/qk[<FnJ-HmiOURe'Qj#jeHEojZ->#DUbg0C:<FF$C#.pMZ&;dtqZbRHQfjC2(_;>#&feWBG6X9]$Tp%X[R;VWq1,eibdFS]5UM'r9nj94QuG'q1S8">[,@5<@B<eZK>K^Sn&,kU)mOM[gIK^9::R#IbcAI\$]L'FnoC($]G&XHMmrZ3S)J\%o`iH/?8t/m.`38VX&n?gANO?'GMp+VMt7`kKPe%!*kgsbWp"<a/"+6;8[q7NG9+ApF6%&_S>fSl1>cd6-bf3.["UF/))I.WhsE']%??XL+Pkhi!Z@L`ISpn:m&52u\WAsVJkEA8Q<l':$(DkkUMg8XV5IS#3+GP9b"/OU./19f!j[)OlD]Tee+<hTRmEldR7X'ddbn4/Y%n[kq'ZW;<T.)?M5btdk*5@,b&8do`Hn%QM$!V^34IfJ%_Wr?:B(X+*%B<_EoV]Q[K.k"T(b<EE94h<5h@bIJ9=$0rNpL\]Gh;*O]%FWXi4CA[JZ$@jaiO"U.8M^q4GHc+"?/^CZL(cSNQqe?Vd1iCqOD[JsRKDg;qYJMgeFioGXc[L@S^NU%i*t%oAmt+P%@"8),)J-DQ%YG,_FO,MWINT(sXB#Pe&Cq2tbYf`XQ>/fZVj7s9X6U4m$/Gh'sbj323CGe"Qis0B3s!g(Kj+8/;jhNatU2@DOcSe,R`APhn'*\fp%:bX9dbD'rfd'fmB"OlX:$M1G\ItPufV_"`MYl(/1H4DHD"_HFF>h6Z$>NNZ)I0FC#c3q)JPlop$PdJ-.D#%mrd?4jZ-?&[AK!ns.%9\(:"e2e3G'dusVNm_Hf(cICP_X*r^R]a\'W\Gj:7,:=!HT5od.!rZGlFeU5C6=K'ACChd<o:C0Seo8Dotmq-P9J\%>eQqMqIR]*%]m**LoiP"]k<qrIA`'tf=RW8cepDF/L/#u#+sd>\+iXa$a[%8(7*S1fCH-4L.u1Rnl$XtID",(kImJ1$:p;LclktNo5p'>".#]Rm%&5Y`ZPV>l`C"R7BfjU[Ngk@eJ8pUQ=g/Kc.9cC8?,7[%p%`Z("1FsJ'gM3gMkE[!N.Zdb$_m(EiD:^0@?>.>N.]?V_g#e*T[%+E.%NT5P#8$\cj7EW_<)F6Bf*%WLH(0`o07(B[7N(G^#[uo#Yd1fesf/"Yb8=4-h?Z=&)b!B]d3`[4i@8RlkE=?2>4]t\"/5+#jaKT)B%1!S&XKb6PT"Op?r"YAB)cd6Eod5LA/N7p)k<,5FJoJS:%^c/#&@Bfl2(mPL5<48c6HCGg]1)fk7Q[S<_ANOFnZT;n<?Jm=F&I3+#%$Ne#7D&@*B>VfP]6!`.3I]R'^G!_[^K'5`?<.4)oj<._tY(;3/--USUDWh\KM(p?n7,:=!HdmsT[Of=Rp**nE7@c,`Lb.G',$88A%'SQi;i_WR=PV?GpaYpEa)3H5M>qZDWP.#n@2AJo(PDonEPMW0T`aDb$&5[56&uN-PJRFF3*Mfk\T/kZT"B5h&OOg#B1ld)04@4q&%)1tf.5X8nE)GFp&8NkL0ThoaS'9o2'*G,Z_$!/456A$_@;@>j7046'b14EhhIbD13&H?A#Q<asJ&.l:p)-K!'EQX;[!/tnSf8d[T%L5r?L3X#$_?I!&L#%Oo0YXkrO.E>&70qg#lQ#fKJah#0i?ORj;XcS(,cc#Q6JjRr5@#ZR.G+tu`J@(b"&F221b*M8s$4!eU<nVU>%=A]X,B+fl;!LMF(Kc,hTRPopUDST[%;aLN%G`t^\J2%\0'Z9Q&,\.fd%B7B)%"am:k[5hq#Xa2G2?GGe<WK/==AtlXZ-"ER&YM:@%J`@lgJ_gFeKA'PIg%cDXPjqI%'EAbjG(:,K?k$k4JC-MY[&BRLR@Z_;:gi5(17Npm1IHaJo!EX)P=\_Y/uC8\9RP<b6DhrhL0R\E%C5C"d%.ljp[jE]*$#1+R4NlZjQk%2Q3QqQ!hCQ,%\E((k%5D.C+GO`1)9.DU2$jUA2rJJnF>[es!*K[@4)fV:0.]7OfP`8"Z\@FV%q&ZGXca0QVkj\t+NoSQ@I2tYTko,!^/`ljLJia2[U!Lan)M,i18'>?E4tVBJj(DsSRJLQ5.6/Ya2G6n)&[GiuJ_j1)[XlbDC8901%>n-;#NL4]U.l&[X:bAJd<<bE!dAR:3$(!@TL`Tj[S:j7=)6tcIH9\3kS\Un5\<RXM:_DUANC4U;![bB^>=0tr!gaKKV^K<n"AEIF%XKLOPD't^TJgi#TF\OqU)CA^K6r9[\Af:Ae3_Zb@I25C.=go4@$hP(<\BV`uMs^cp.kD?n.[*_!i**"0!Q;;aKa.T3q+4]X4e#O]%R-#Zbco_D\j`#KVR&lC&i3Ip]:";4^F_gQfD3Frn.CN5p8ECoM0Jk&FPfMOu;<&-AYo97(K[atTNlS\r/B'06:iD1>*=hLQXh0ZN%,X*O_k2^mCYVh6,S:kT)TS>9Sn_PIgjC?ULcH!&h8UTW7KaLa:@Vb64-Akl<d;]j+7n/*OA:"[E#(p#AVd^kZ4[+<a3dbn^iW+RR%.uG@fEtorYD[p:#j9#K"/YN/Q4%&Zgl&t)Mj=JT"Cmq6a34^B^<`P"ber/_UK`^ffB^N%3[%b7%n>C3(+dpE!4Z-sXd--`[ErMdJ%M'CW<L.F<IM/G%[\K\`1<_HOegq+B6UJ5g8Tf:A.-@k:;$;"5uK5%?eKPINg#0W^_=q4(/7q\V5ZV#$iN3F6-dhjN5AR\2?UCnc=%.+O6SB)k9OQNW4gBqj^N!oj,U++F>_<9see@]_B_KP$l-YlOAi?0fu_U4'^]&ko>DLI&*rgE<#H\.3;J1Ed1$.+)F-B8*q"bNnl=%U`KmtVS\]mNs1>XS"\8?!>:c;W9^\o$O(;G4Vf/Ka<^iMW'FX%8glh<5cuKA?X>($\3c(1/54'h\RrYm=b+&O)N4RpcS:\'X$NQL%'7lhqMsZnK5QN_XHaC64_:;X-P9oilcsq(JVPUO@S8;Sg3b(LpKmjjjjdCL!;3M0><1CEF$S]a2PTl%ODKEgRMQGo#9JP)j=<59/%=KH,ETi,A$_@/Z*`<*jKKb[-^/5h2b-m]YliUPTqHA]'%FU2Et2E9=MV*%I@L91OhFK&qG/7M]'GL0f-%8`g_H>E_YXepcF/uuCu%Q!(4RWQ]+PiYn[PE`,lEkm:p%P.Y,@F#fqg2N(3G#.cRJk]P*7mgE/]-paNNb"]!PZb7<kOU)&T^aAM2)NK@pYcT-`9!UYke!Vnj%)u+gP#r\km)C(!J:38=a5mBRe9^gSC'$kdG<1%3Jg,tO+EZVnJL'>mI6UGFE*lD&Y;CI?/J=b"HM]2=.9JK!*c<@f!%hQe2NI->3%;<&^*DP.sC!)XXKYQRal-n(tV3D+Fk1(IB0"]&ZZd#8n;0KZ-tl!+hUpPs.HCCmn7F;T!d#%=S]d(#h5&9HI6+q2W@N-bPlTl/Z7%A>@.-U<*q?KnQpi=<[j?7mq!Hi(,eKiuT>WW>kR3O\D0!73*Y`,1$\[J]&6cn8<K:`YI/4$o_qUj"MK;(Li:V'1]OmEP?>?[KfnO%kdEW,YH)RTJDe7uc5$GoNZW"PO[4@r@uBQX>Y5;GL8`f;$rQ\n(nqq0?rCa`SCslu8VSY7>q]^BRWX\Wkkfg^+Tc7-9CI`]hpniU%\X.GffX&=3M6L>iW\N8DD!ng8Uh[!I1t>\p2:Yf]j\Ur)hTDeOZ$!KkS%VQ$$.IN^eAVnS[]I:j>K47OA*XC#=Nnl05`oB"SI?)I%B>BX4,f+$I?J$nnljH//drf1\o6-*IU=VkBZ59W\&kpmDKgF&/W\srL(C.B[Pta@4,,imtSGg?&]^5nu$;?<[J2rYO.$4K@(HdOP%,iGrA.3&=5&ch&5K"6M)5`"G"n.?'D,nGOuCsR(-,%fMP\@RS"_8^OX^9P15!#TLq<WW:Eh#G1oJd.?B,Q^>aJ1[I]6O3h]cO=)b%+Q01L=-EnLE78hBZcBT\:;hTO]S4'A/`iATRtEHs+;V;kFdW4`_[:3+'6)cEY$Rhr!/P9/KpuU>"N4jQ<]%=5(PMoU_SELC:k7sn%4-Mu3$,beVO$Wjpj7+QC]>lAt3eU=@)M+ZM1,VK?[Lb]/T8P!J'G/6TmjXq1&Cf=-=GT6'P%lZb%9cD01hchZd@cJVo4r4(`:gV'%$.0m;?8(?KS6f&Ni-L-P@?M(U@)qoHc>X@(<s],BZSg^g]A"9]0ZFnONkr%GatfJ_>(UJm5LX%mqcG!.Ka*\?PBCa$r*mk3;UeS-%]<l/cTH&\pHe`t(qG@]Wk0l^-fC?+>.)`0'J?-b3M2.0S.O=k#3Zj^2+M?X=@rXLL5bo)\6GY-66e&u'*b%DnQ1>@/i%3AIFbn:e%%'M$e*]Rr.+j2#/Tpn>acQ_$WHBoPHTe"tV3<9G&64*2m#pGOhZT(h%V@tilENhBX9C^,>K\N2Tpa6CRQt90C(`k`sQsdhl\hUgY%]QV*:W#g^C$&^[OH/RV2TlnDK;7T*LC^c=Uj@\Y*OkU?fQ\QVE2&CAqiI"AfdH0d[^_;E[WDXADcl:$/+7aaAii+*/U?[8R!Db&j%YJH3^^r0)b&BEr.eR3dP4Z3A&$S^LjcntMOOa8Q_G%^C[)W*?-%+%2&Ri-uqoA`B`9,R=)0%%0t6A/(ZjoW\9bR5SibCa0X1MpIE%i$SX[\ASAkT'arL(AbalpN8&rYA4@b&4e2[FnriY^mrK^#='h5O:l$TJhmGA"1Yu"[X>C"Uf/?XJ^*$KkkCDTc'>BHp_e["8Y.`Z%rj9QK3@];b+\+/G2<=\B_[hR#^a?EdTsVIW6_WFN>'H[%c>l`)pZef198GJh%b$NT>LF)%qhq,2#,U9@<9,X_-+\E^n0@K55Q&;$%S`mKhKj)LPnJ#[]]HcLE[r"Jd([fu^Luj>no);:<5&gbdk6S@>H.3u6M\'\QUaA=6O<`?k,Ag__q@n`K,>0c6$FltM>@L6C`VX.P%qNe+AMFf_H1UW>q8;(jmVQ_1H;OA*ql1bsfd]h"eY,tBFrFuXSgA_l*%QoQ&edXbCdEOe*ksh7pj>$3&?I,,.pNk[A9K2M>?I,)F%;Zb&/ot8sDYNJWsoR6o3ZIrP69IMWEYNN$3DTOT0;?^H^o:oDrj>$9]*(LGq*@?*[lR'GYh-Lrjbf##Lp%cH#8b"?OUVVUL(V&a@%XV[jn49i,3@FCjZ%pZIdP`6K0"5f$(GS#J'flup?csh+tJ>Tbei^#DeVn)^*i&]Xm,86,(aMG&24@Zm:UED,#!"9t(f.9#f;<EB=%UMcbO;crN;S=r$M*gMEaK<k:"!*OP#DKJ`Jk(C!_+rgr/(@!TlX,I-I"#"VY5q*4)[_dU7h/Ho_"]Ft#!tR`VD!h;]#+c;;#$ui*%8k1],(rQrpc].]-K7pu-7LZq[lX\/R$b1ql9K/?DY=#7[oN1T]Sn:0\J]AnAmmZS)5d6LIB\rub3_Ljt:5?moeR53OWg8<d-bE;,%R2V9n\CA%!l)#dTbr\\jH4a*uQ$!mVVM_VG!4r_b@e7<A"b_@,XZNeaFmH2CRl:sg^^pP^CF'fQ`#oAD'oYhA8[\_@-p\bBZ;1`p%iEcesm/fh2n/T]]$URgdFjgg%gr7)@)0ZMKLZ2DCNB7=N6=JJdism9^!a^r33s]N*9OBUE!"oVs_9G%IR.<Au@Buks@rU!gR_B7D%k+)uLo*u\Epj"HZG79'q[;OiTL1],tbVYduk&,I5'hA$qVphB)8PE)cG-I8j\&O)4#KX?a2+3a9!80-)Y??%QBRX>Z/3=#6Je`(t%Sn?YAlOLBqag-OR37>Q6Q5tubp_?V/kd)EY#3LjOYGT5@YWTM1V]f-oFqFHbnt7^GgHioNa2^G;)GmUC"%La7!sm(F"3KX74e[h0%AHrdaE$CSgFN-K=ACs11UM4LM)B>M+rWF#<\fk.C0^M,tU7_oVTOj1&'OfVpbo:8f=`t55fWM8XG!12`QE\\TpHr=uW5gm8mWU'Q%<9G8_9Se.RDm]c)p:unR&FsoQV%//P;\Tp:q>`dB2eWOa#U^dhYNZ/uU.blTL^\h/e8t`rP%Gu)EJ3F$F92Z_%A53T%-E>^ejQ>W%FGQ$D;P5.)L?L<h$Etg>a;=`3BEU"7&Lg?k!?8EgC(=R=Wi`gUBkiBY%,ds5jiAg/!()VR*f2$s!XR*fH7in7+h4BQ1ImE),$K[m%_DMB8,W#RqQU$W%"c24/'1L=T(rR*8AjR_mJNE_!KJWatN2);WR'@S:NW>.[pgLO++;?-M#9],XjiWQZ#QVW"()m8SgBg#;+4)1b%>"TXr"0s)D%]J6kSLhf,A@*76(\Vle;B6;OYDQH[peg;YY`sTE8+ZhtX_!oH?\!W#)\>)7f*6PEGp<oeGnAVtq&7A0eL\YqI+W'P%QGZ=*)iB[M25S62_"ed]WaJ311b01'b#e[^-#,+_bc%Zb5l`,aVHN\#+tV0G8'+260WkjRk)fe1FaIQ3(t<1r<h.'kQ0:3cFtb+@%>m)L$dHW'pADLQ/oF1Rq,jPOJ:eH%b)BHgD!)sE`+;lG9K&[cZqkZg`J8'pDOT>!ni:'?<,E[L1&IOI@!?b&9HBR(d!0)+I&c`Up%@B';<'F4]tLKdY!!/ruc\3P"<9=P&65gUX:M*t`"&?$o6!W[e%rJ<=I/e`2'(3a;_9Yb)[o/rAcbms)r,7>)"lES$Y>7tjZ.)5mT%X-<tqJ2)1(<'gU%Sb*1?'EDUqgkA![+TgXi!@o)de.7675hpl3.ABW=#\RaI-m2g:^iBtn3#U\(7YZt&p2pX8=e*a[6D5L2CARuh%9qP')/enr8T((21HNjbb9Xn2\5idf;0P&R793a)_rCOPmNJd=B2/qRNg>molOArEM0jO.95e2EG.BFRC(D+9?*[3pD+M8[:)8rE'%"@LL!D^9lN5Cb.CLRVTufq&dF&N'QpOC2@*Z8&dQ&DuE;:lDM<_utDA2E&@>!(c<uUdOrADb38<I"\Lk&./tb4;:1qj$%Xk1i=gM%#L@-!7Cuqj>ERb$:f_[K:H9]%Zr3@L6$pb^Ac04!(q/iZoV`OLC,6-kN^J?&a7V'S'`&(d[*_g1'eN2-GW(VBbBRl#$ul9a3TEIb%'"'#qB0D:gF+lNn[u)E9J@,:9OK0s2.M03%gI;M]k9+SR3s**ubCco*aC,7@E4I@9!jk?<C*b0^;I?+@EBkVW">GK1AK#4j_O.-_%"^U?m@>daBKN96]D!p[X!25&t\5oO?K`uQU#$.Q#h?_>H\5%c47#].sklWos_4b'1,Tiihbn*$+;KPK0TlEYgW'QprY]YWA,6;P9%gJ1&mn:`R,q]CqqW!UNR@Vj,[@="5_/h@R/3>=.\>NeJfOA2Y9#k803(a@DKk1eKgGtfHf5+?pQ#]Y[Ac&d9?6:_Wb>,DQe_Z2Z"%"^05qH%5Ab"ITe&PR-.]r7E0j-c/!$#Qa<AkpO:B#&_AKJ69+:81Bn;;IBXC/-3W6ehDi20+'oLkK/%k_&Vm"B"Ea:Kt%VbZ3IXp%J@`Xk&*[O)#U:OrMLb&iH87l"K2%FYKM(]a+/P;Gf+N>8G'*&[JVqe58%/IS>Z3]qFBkGUNKEG4it<H]NZ&psr\q4e8Urc1O0lbk%9*s!@^bclm!0o.X6W2=&G*4>qUbP%sDIcfq<XT%#OU&>qP>S]mPVe\O92#E/BMm/a..erK.*/[`+p4/CD0d2!+X'h^J0TsG(I9Dj%Q%j?DEc#+AX!`pF,N&!c>AV]l".d_)Th=oD7"CB0W/_bs`cN)&k<>S#E5P%9$&Qo3Khd13,[6FeUp<50,:,ikM$$g>E_Yt:.k@I&%Y9K$Q.A'_@ee5H<,5ld\+#A=n<$(@da$fEZ98GJj%b%Yt>LG4EqhsBrO%R;N+1\g8nb&q/XD.^0>BTCd\c<*.A>?AbENYQ0,;9JJ%]ScgAS(S?l5`]=hcO,?!$$a8uJ;BOr4HJ1W5'd4%UX[3k@M4>KCWo;(9EfP610Ea*p:C\BD#+QV&O&:*TE%dpD-'XhjR^hfBH#ZW%!($Jh""JO24!qiV#h:L?(=pK]-.ZdD7KIo"Be[P0m(b9SG.;goFiJ)B#^kJH+-K\0pR!jRO,i)He2W!JiS2a(*'YL?K6TEm4dce_%E",<BE:n`b%Zejc#`<BA4JB7J+PUrh\VpZs/;k:g0mIn9/=JBqMM:]dUkUOtj&0\k#b(fAK'mc3\>D^$Fj*ZJ#YCteCSfr%2i]fF%2&okb!!<;UI$rs0QNXu=3#T46a2I<i^*YJ.F(p`W;G(&Ik`lTCnh?e0oG6G'=YrSd&]Cd/"V#M%2X#1IUWlLupemiPU6c3AGR>Qe%f-+BcU(]fYJF5pH\\3_O:aFP"_?^RbfWul>]t77i@/&l>$(NjiZtoto-?n5Q(dL2.,RA],!5]P2+$J,X*o4,1M9L$:>f6YO=Dm']%&/+G29nFqRFKpqh"gf48.#$L1[*C'oW#CD4_pUpA3t7\1*A(#D2%HSDClsuQ$;n7/C<$AZhi)_jJc2_^aHkSNO')M%]EAB"%bjE1%,1.W^dZ>lt,>g&5/=.TiAhnL7IM'HQ4LCIk58+\a*!V\5^f!'F>t]+[`68qPULs`RQ9h\kDAXT"d,uoFVPqJg@@6,`/C)*,XV5.t%*nb_jE5e]@F&JM/QJU0&"d,D7%+LBK.7Wb7DOn&>iUBK:Zk7'b0eE\E;\uQ,jN+J\'ZpGJ1s81#$P?OD>42N5EGp.e?1NTc"B>6!%_`UJWa#eB*O7"Gf!\k8hlq@X=6=`]%&HJ3GM1c.P=b%(0%cEp49_W0B>He91blC'25;7(:ehc8o2bk\*J8-^')Hn"P)*n>u/-K&j%n&s[7!#G`-3aQK36Gf>_M.OI[QOoeU@AkP^)?Lo#4*j.8V,oMGRRo1k<5\8=`p?*Gn';Q$)i*mFQn\'q)$[m7K.-ZEYQP^MhBP""%!5S?C,R4S_%a6=aY[oKt.p@gn[\.VZ-ikS!GtS@V2i,k9_&!:\*[)Z=\#bplC'eF*pUteP2nVGpJ7nCTKB_S$__jsh"`uV06a)m\%o?!=@JU(L;",P!_$h1V++QP&29V[=_)@#BSGRl2f30AObp)=4@"&FR!["36o,6F$MUXbU5J4BeL(dL3UpLkJZK+OBM,Sn.i`!^gK%$1nN")*mDG$Y3%(i=a#T6M3<36Q]XIQj2#?6e4t^M8a<W/9ipD.1naR>6,NEE(nR`"E1tP&GSqEJf*05!/o>g\;DCs1$b>,efP*;%Qp-5#kV<^-CK_;UqL5@aLNt^KKEr#+08@IF9YO7S^QukuGsVWb!ab'/+Kc7p2Y_?4+uWMC&Q6OB@^;A%$>tRWX,3UYGUts.-J'ph%N!i1;,";Rl>9!mH]]fFJ1IPjgL:D'l,.o'U!$C"?]Pn,`cEe!Z<3$p3L7oEU@!Eb<c4kXZ3&@%.%jim1V:9NR3l_e-J3XgsNCZrR%".C\98kF/-+BMY=I=p2\*:nnp,62fBa9&&.BGesi<'cSp,_5A`'@%qHJ1tmUbbp)BJ8cN1&1BpVEIA%D[lApW>R$qC($XEg/2I]K%[[\KDo)9P]=q5=9@@6s1K/jKK6q"pq3U2F1!(&12[\OMJl,DYu6%j_hfAV:@6S"n,pn0qmB!`+.(AZd;\1.utH?n9XDD!*'l-:a8%:`RQ3l]kkW8?(Z9HkI(?Z!IMU'FZ70,dmYt+;Au@E]jaSU8WDdE&e>C;k/ZAWD,p'Ni0unJKrPVQ*PWO1!3C`8=?X$Z1rlL%C_BI%1ia[\IC5d0.`Jl&/R^.Zhi6k^'QkfanMA%8j$YS6$.:`2XI03T<@]!;2TXXGocZS[8@P;OosE<QMcPhT86pqmXc8^ZWaOPrjfRZ:%0Vu!CDEgXNeVAPed9(g(>$"%#p#19JU9XR/&C!N\p#53(W5ctFVP@q.^5!a1V6Me+mmK$6hr>MQ8<)0opiR?M@oX):Ypu,q!oSU.%0TA2*h'AB9=lHZ&/#'Ae"FOKfKdjSfSJCX%krPlkY?f_&OO*A[deB._Ht'B\^on?73\,hR]iO?u%-@l@RZpjDN(@[M+fniKYmJZ#%Yf*md\fjW>3==e/2_b#I7j&j3AF[+P!5(Bua952Q5`!=cMh#o2^ee2VWW3HXkoS"!&=At\.u-LmqF2#H,c.^I;&'';V:,MDHo7FL%BlMT=,'a2s)dG;4.#/X-;O1,H,9:<L,iSER-=5r7[;E\[((NV)q(S=l#0uTI\EX=;/>U8g^2CLeT].u#81-7iGcn#<)+k2[gH@7S%[O*"lIOL_YU`93)fPcjriPm#(MksTt=.5oh6<K9nHnM($6>r`t*.Ke9.<W]N%'(>Y]'ou!Y(A+F%nr\TBn\r2E(g_>V5nU/098'm%/ddrLFD[Tn;RhM60(r0uG^N?Z%P2M]q%QS!,Yj[Q6>\tFNZo2.$G$9E`Y+A`%RVss?PmS"/R_)Y,"(VrbZWS>6AYt5oK.@BKC3m1%g+ehPKJO;jk0?;P8B"jN&=:?A!8<0Tei[!IB>0?Ncn@GafZ(OnD3N:%!.QHR'hp(AC4*1);[/h3&]>@f1]q1<r(rZ[/>`rpmEBf\%QI;'Ai?kcd8<*%V(=!Xtaqd;K7g0IT*QJ`#oE%#,G5/('n<Y$FgtiM(#[ROVBGK%&V+iL/#@rjK.3KorAAn\5&g]4[LK"?o[BTGJ%*tL1!*C]HTFbM\2%/V"e5&jN39`VTKXlKg5f#mJ.!@-CYb9jS[/kobk%DDjknBIrO#)HR7-j$-L32Y_8dR]&=c.aS:g;3tY7Qfuj%&4D0t?Yqc]@KMA@E9LO3LtZb%]cZ_G$@)gfpr_d>G)M7iW<sfEL,Y6q/Vo*W/4E+['7u[Rlr;67q#3`M![+qplQI-8+:apX;*>5l%/X0Dna,55q6=BlNFM>H9\=n5sgjmfQ&1.\jDS.H)Y]+uFLN(+6j=mN%pndjI/KPLS(cOIn2aI<K!m)42,n5,N`-m&356+%%P2UCd%(kHoU$mPiFB]B7Yo,etQ#-AU%<1n)#+]n_C7Q+p?\=OOqU84D/X@5iQHB_PK.7NYl&@ULF#X!Bo_/!-bEulGtEcRQWlj"q"i7\ER%<[)nlndT'*Se-WSNI^igMMA#=rM2@2$*V$]AuR3b%gbpo46D28"d[`jMthAp3?<,9"E?T-G[^>GMea@T^BGSGm*dL.*``(WKT<"k%dk(W[-qu1"o)*=8nePCDSpuZ&e^-D:d-%<DJPR(&+p?s.9oE5$+<;ZL#I0&;<9a:s>X1]W_2TH*O5]sR]`3NAeR3Yhdh&6*+I4C9%k"O*Z!Z]?LMST#$G/Y&0T]h0S<_+ngAI7rI3HN*63fT2RMTiWeV=A;VBQRa\SA<XbY.WSG$N[9I=X'1l`&;`oTnhIT&m0+FA-E\Y%TjA^:nIYPT6Rj-DPuR8bHHGf(Lk#j^hkd7mI[gb79Rn#n&4QXXn<f'&BSeEA*!bGJ0*o6:OK,:@,7,\$OoWskL2BE#r1tqHhe<+Q%/b!B1iJ0#3A'oEpGc2LI":<S_(?JVJIk-$Y#fiH[C^iQF1Cb#;h)`a_UE1QZLDY,2AaugC_=,Bf!1YOukqr0d9S8@<9t[_4rR*<h%7:I+0!9betH6IU!$sf7ab'/*+*"9W\I1#`KTo0aMTl:2F&<[mg5D=pM#UH5D<"2=LD"Q^l3d0H`8WT4G+CsV;LFH\/D'm.S"GL51%)DpA6$h.-K5pZqEZ[??S?9nQN>S[En0I-Z;#NZ8QG[6=Pg;JO++A`&ANZ_BD_RLCu>9(Oj3eK"H_u)2F+B$7XdJuO-IDEPX`ZV3X%;`+lV)o^e7+#?N`%a&OY?a.UCe0+DS_g.a/[HuZ-`6@A\83gWWLp0>_L3]jT(qr'u7,nr6+(@<:kOfk[7u*!J;9jft%>/P;%6O]b%M\HF7IBN]=e`b"$]p/:cVhPu5N>)inmH3q:oTfYg$5H]ocr$+JI6]JWM]NAU@47rk'R.>CU2$@k!!q+ups-hdY5uMR-nn?e>PiB3%'cur!>lXEcJhNoZP\'Jii/"jp,odt]!ps.oTF3u3LWfg'36[Q$RFr?-LtlEZM5#@"QEUlWY:f7lJ5.h,s2#YrEs..?)?Au.JrWYk%HNDqY9sbK&UKA/g0L!#>#p=?S%a;dD!ee@CTb>-OIN=G5?HD/X]W*-9$Y-:tO%3r`+aJ/[LDmN$i5ERuZq!6K:ahgl2^`?g=`b`I%<T>;Z.<&T4[:HpZC)V;^o@F=h*6Ep\,.6hA[cNmpHH9O8ekF'3L^EYNn;JL<#m%kepjc9gio0u,*e26:kg(@b!bQ*Q.]1*haL0I\%g8F"7NNR[qC:lsMq4U/,&ch,bJ1^-"ics)`*4<5"DJO9Lm5duN,$.[Z/;h?r)WI,`]`C2)75_oT.7-c==`SgK/PR;-WGA=iHDFr2%8CYS=^pFYME\4'q'+8E8T2m=;9cgk[a-QpL`<3?E@KMA76R%=Vm!uh`a6&7lC#Qjc1FCYJJn]k"Fd$4eE-bs-jREkOK-9*nnZ>'B%3/td"6&2YK%`?p\TEMVI!LH";E]j+uB=mYgCP_RgbP)*5;1eWshrPR4Mjf]:.L87D1P84I>:D(OJ<!p)5KF%GPJdJ[AT2r=LHNqq%_9"L/ZN;JHnE:dFaWhu/De%D-@bGTd^S(Vc]F9`B[eE3pdS?BGYRM(s"CF^V9QSu,%s1U:Sp#_c5,W.t]'/c-&qcn()G+-_8Ys"t%'U[Z3JYaaG6l9cY?0rQa"d=;%HhV^S*dU=WhD"\(/J>8o27E44$Z.a;RR:+-@_Yl\k$"+6:9ttG$QhkP?R]M?o`s(\g$'GqBJha%%bcD]%+QR>04E;%-Wh%@A2);rD(2']Uo%ghm#m)9;,qO,LEBung8E5u:fgHhq-e(PIf5=U=r-C64nQSV-*b9#A6EgPIYK7lm/YAR]%G)*,J7JN4,0Y:,YaUF*]NuCraLBo29hQ71i/Kt+"Y"BjK8@5ak,[&";28`rPI8Z!0Y4bJI<5T&cp,Qq0h>(HspP2if_"G42E2[b1%&*cbl9_;2@m_tTq^`p#4V9(alEm<`U^bD'R[@=+bMX>@5AI'0*17o3jm<kbFLi[Ur6)V.B@'77h\W(O$AF,`ba&m#gifR1:6>4'l%p<_.tdsB!r@E0Zn$?:A+auQ?l]%b-1??(,TX9Yjd,Gt-G$sKjAZuK_Gl]lj?NBG(b??*)AVQ?fK/,eNpf?=mbm9.>\hhV%q.ckt1%R(<!MAq$@EY</"Skqttilb!NXQ.I22Gd$B!)Qu69P/\GCbcj$O#arCWh;-0$+Y/ADFl/BBd<QHkM]C^X>H%cn0G15F4D-Q*No"5.%+Ie_j0Frbs]/a0[290c9GpQa)fhBI"S[[uuWA:#',Gt'E$p(T!eEeln,oUTa>-BKYg9TGeOhrNRhTfX7=mJegBM*2p9]o+]oI4'$%=lXW`AC>_Y%I"e7b^jJUi3BR2[s@&Q*LRqBN24u^"W,b.M>i:+nd5CkGD+*hAD4?/gS]-];<,ogBtR?K%k;KO!)n0>$`7@1^]DA'%\]QG7F@h7i/@hbB_cDTCfhR1o?W.<Dat&M7b1"O5hS)gB0o\-\0[A&<Si\%\6PFGcZe`W]RkK^:<o`Z_A2VO4>j6:lRppn0#rgoX%;G:F&2,@Q&SilXA!e>'kcdi^9(!W:_4js(Q(Ku.7n;UV0]f(pr0(EG?bWu2Q68%Pbq/M6;7^F;0i\;2r:=MGH/0n!eeiAe%2\N.9%2$ESMF8)f3HJ(rI-;Z?Q*Fr&$Kq>^n\;&5F)'sZ:<%ZJ-RnP+[`F]IdU'6b80uKO1s,n.P]psG_=RM4m`pNCPYu#cR-o;ZY=$X><%Yi9;Wq8!WhlfsD<B,3R&WP40)B0>Z%?/)NKLbi_kBBWCMg/TT3!F:$aJ&TEnW4e!OYuEfWF=25W.h1l7F7jCWF]*Pm/@:aK'A?)s%*SQF_9^L9)&%?sq_h7ZW^<5EIC8"o0WE,E%+A10<jJqbpSulV%*$`oJB+^@EFZe)A$frZZ<*fV]j[C)fCY6c$CLl"n]4g'Q;eRf3%B+"Mfq\Wfb1pc_Y7)oCQTt#4$`CtSNa'DBj>4S,9eoJH],@m^-.G2!C_.FScTs^i&R[aahM`A*"4A<.Oh;2`$\)n]jK<PLan\aq'%][q9c;Ahh5%Fq]7Rar[i?)]qA:rZrM>]"K\E)KnH%/Kl6MlY*0rGQo:jk.<>M\!mI=4ime/5!K8D^bEQGFfXu`SFbZd>gZ!2p:;(%fi/0l"JcZ.RCTbFrB`<$k@+nWg^N^N`DBL]pXGmKS$8Z/c!<3)107VbBM&@Z'%3/g@aRRXE>`R78o4k(9utkX%jBYpB')3Zp]`]2%I`T*?lonkW&[2!CM0e&i<&i/[O'a#Q5CU$"##&q("Z4`A`YcXQ4NnV0r<q9J*Uk\"#_kB,3\lBtfT)%%d6Aok6@ab:%ujL'_!W];%@ELp"Mad]+i"84S9gR?ueJ+]?AQeb4C.2k_D5^D:X)#:"61e;*(`"Ccf.?[*or?!2\W15@(F?6n5Z@dDK3t"=kTuDD!im>,dR-Os%WNZcYk/'<?`%Qr/F+lIX7<lkI_"Or`Dj@1FXFJKO-bg$*KEA*JRX?Tl+i6Ma<ai5s)_p%_8MP><.Fn1tlZ"HbhV#VH4Ql%\j;Y&`%KC7HR0\2#0ne.4tMIS&*D(WF$Rc!(=bg7l-/kNJ"m)lmh/:JM*^!)j3V9IW;1tqYtU[,2S0?6?*5k$C'`/^A<PQOsS9242-]V\[h%M%XjTO"l`&H/c7dOM:!u4fA8QjT+Q#/<9),.-,73fHTjZ*O\siDrR:dqB#Tp[:#cP/&oRMV+@1H',Y<ob0o@.EC)HK8t$0F8?P44%`=R4<L5/EMa:B.uXJ$h"O.hG"fUtnu.6/i`ScG5FDoS?(dXZ"i"=!VV!*fR]Rpr'$b=HA==9BN5cUe+ImS^,Yp=b$RRfVbr05opg%5Bh,*`J6FdW5S*`S+A9$9RPgZ+olY&n>Qs*j:+*ee*!7RhPi>'m.U+ZSI_SQ\W=]B<lq>k>QE6JqGeM6j+']T)pAs6DhHnlN;[Q?%:.H1]UX?f`^5e$B/MNZaN[0=G^?YD[9X%Z8a9a\h&,kUE?5=C.3%,uLA;btl?n(Y9(4ARrI:^eoK[Gj7a+JTcJ2E^F>!nE=14^eM%85RPl6+Y@U)kHKYoXLCCs2A(AU[ZmZ3qT/cc@r[Di4'o*/@?nY0%.=SXE6jY:JH0gB<g`C$1Zt8G2ZT&k:KQ@9]$N#2_tfG<u$S]%U?Bh1A)tJ]c'"Sh9fO.k9,$/S*POHU78<'tKZM3`F%:u(l.BnHfTK1U^R+0K]lL,WcXURikO3dPVf)0j1j&=;o1IY^SHmhJ%58pb%AY>dr!`R/!:p.Yf4CAVls$L(nrLm>K+8r4>js(=$5SUbOhFGM<`3Pg`7MX9LW.8G,jEfn-f`)bI=X52+LHt=nRpi)g(*u=rb9]@n%NHpYs<0S&5N4tgaEn)"MT<SiFiJ<HB-NoI7<4?q8*F]E)$k@E@0YU">o]6?OFa\'r=R+(&%&0X(]Ib7Pois3]?'[*"`X/R?2'rB#%?")=s5b-Q)dM43]HK%Pn7J4mk.h1$p]d#ZO[YT[=BtYBnXT<'oQ/r!D+as&L&XAmON-gPAZo(>aQ:gb#LDVM8ZED-EM+'jpD=U@b%`*e?e-lXZlJ0EWQaK_NCh.F`le20>!KrSuWSsZW<'P\SmeuY,G\'9^3NQK@;'IG?4S:[[BQAN!9<+@Bl-c?-`."lD;%R:=]h[GUd%Y\Q$EmqRlKL1E5NQ;pgi6C*niQFGJ'A1UkE\th\-6uPtK$7A>7Oa/!?/S+.pP0-rpCXm.\HaQt9TWQpKC_cU*65='kP<5jXQ^q]f%.fVfjkud,TBQ@9^2+?b#j"M9k?`8]4:-P;=TiP(%0VQh$G'$'gE'+/e,9W:aG"\YYr"0B4YUo\HN5c#70m2h2%>3.o=&+`)G!<5'%_.`9J0c)j<H:Jc?B1R$smC26"fko+f)EQ&$<b2NKO"[3FgBqb*,ir"If5uHTZ6H=aW]?sM#]3*9:jq>P5tJ(`hpOYlMq)%DD1>$!%DVPcoc;'8<kJ14*apIc.RgOV$)f:CReNG`*:YVXi?6q4N@C@7(U5j)"6]RNo-"Ee#cB]l,T-=]qM=f:$r/e0kmEsi([NbZ.0\()a%S0F6?W5uQ]rmH_,g<@k,isY.09bZ`gfc5SM'j?P/UFQ,_A1fW?s2orgBoV[7)L5$=\uI&OBg+?IfX>`.PZlZN;)J^2LriT#44B7i%*A\JnMEAu'!9S0Ie>jc^m?\!ie>ZFNB>@!;OWdf4VqCs(W>mp+I%V;AV&KMBY[5iZ,`'1bMY>X2Rp1MT0a0H+L]VWdAgEOiHCDl@%Kp?7>4d/NRX!GL!3d!&#dn7ob7U`uMd(juXEh`c3Xt8@#cp*dkY9YCf]KC.+KYgEJgSonah\J9i.de-=!0/9hDTqBt9aAXl$\kY1%7ZFkA;nWO:dACRuX_'lCHAP\CVUqnY-i!mNn$ho)*m>%57spY%n0);dKMXDN;j9;Zd[p-C7p("+,h#^;/&XW;*%>+Gah&I\L5d`#%8c+Z014sg]Qc^o*.uC#G&TO%L@!.Pj3Y5lC&@a(10W'=L[p0`6iaQ,S9-POb;TStQG%&#[.CJ5'LOUr`*Sr:_3kXLe8pk_p/NF,8%.?^[I/K2!l'QUoZjH_<`\oN0f2S"GNA6^&sF>Q+,j9'lKYmIJ;_4@X.Y"h7YhY&'AkJp!T'hjQ8]@'j56]gsSYLBH^V09fEVNuBA%jSa-]e=G)<+/X6E+[3(9K7Q3ig6b@I5KAUM2>1b5UEOc,K7,QcNX,hZ&u8DNP;VF.9ODjuH^E0^YhRcNG<VD?+iMeK8@J2tM^l%8%a("@)h'6a7H]=lgCBaEmOQ+2A5+C>^i+UAP(!!0GHO>g,c`=FApe!PA4P-.S+NFWuEa6U,a#+UU6AdT!:(lR1_*]*cU3:%OML,R`%81\J3'A;Q]Ut)6X;NTnVBg5PC1FZ(HBfhY</CfG4;]"FKi]aW#'h`e9.32RC2H/$jM@1t0Xg`P.KbUGI#[?<f)N$ct:".9#)Q=DI%f5R`=Z[_M$btA\t`"uM[mP!m6cD$nA]*^i!!\t,UAeX5NbYXk[0$-[QCGFLJ-+Su%,Suh>Emdi)(Zn+?bJZB"4!W9!`lW7(WH$:%%<@C.e'UP`DUpuAO'Gm,C$+aH5FjSZ2Yr\[?R01q)+N@PL>DQsP7q!1o/D+hg[2BWofO_;/-;gqJECrQ^df=Oa)kpTt@`ZDk`_;oO%RgM:H<mm0nhkW:/K9Ii61cM?WLgH9R`PLgLfQ@&"!qde'OWZ'=iu5>Y/B>.MUc-;6Z'TiqY'8[s?l-C%In+qoV+YG4r,1hJ6]qXr%WLE@PlSX7L[,6aC]!GE^UEX8+oQD=p&2?kr]F]/rdkm<4</Q%8iXmER&Ta2-4BWk6(Xcqp5Eg=o(,!4qoF)H.fEN+M7bg*(P8IE_%!(j%lEur^CZ-o-&.ZL%q*8`S#UP;1SR["!I'am3k#8*'(fjK1C2I#;O-6_`[lY]SJZY<Rc<\Oi_k[8i*+_L"Y=O!53F5Lkias5,e%&eKmD5U+>3kIN;k8]:W7"!C/Z=mW#Ka4fHHb62P!kYiYLaq,8$87XbXUe//rJKbi>Mh<2`,`4RI7UPh/bTXp6b3sDr,A]^o\,556%<N2C8;J2/SXPMp*jDRU@f54S4Nhu7WG?3/NE>[>&L\ieB;?L7ZY8mp,Z)]8DcM,G,\^NXD:YIg%^1JPO"1F@*c]Jbf_Tsrnp=CSf%lB5,X*^E$BW-O'd1k7)Giu))dkpoJ'7d.S?-4N:K0M9qdke?%';IWW0n`U'B/&lC(.EVdjTh0\a46WW_8JlL,L53&^Su4IpKGcKN%4>9\dUEri(rH"[/7\<A@NIFgaM8?`!'GRc,CH)L%MM%-:J2t:dU\T:6L3p0T+sOCmdi`Fa$%c>),?_>7,,+FI)tb0?6gg@D=H%Oh%8`Hu/9*"1bR*:=@FEgnD/$=m@hcbZoYX_?*(j7q`5*H;*3Z0N;ar0(E`ABVeg8ju&ZiM7QW!krl0B=t\G+=`[CIW41;G7@CI5Pa%%Qh*1IU8'6nKo(SDa^^%T_I>Cj(W&t?,OSWGA*oTKas>:s=dlGSZKGJTF%70?o-sc9CEFprOhdq1hmCe^GL+`LbA*&J?58Af"_,gG%jUT`?=c12O42fL,aoEDAV\[9o[mHKNATZGfjsdu?%&5'AVpqK5n!R`LZ?nC^Y/IT\4\g",W)TOsn`Bu/V?/#J*)m(Z!NqkGV?@rq%P5^ck$.Zn`%FVjA>.p<_$>.B_@]EC)[^<XK3-lI,%stkWTn\IjR9-eYI4;-&Gu[5/Vn/:Q@@D$'9$OrH#1?SZ<AqkAF&stR5#BRL%W]Efc9HZX&iDm:%=5eGT3ArI[mTH+.'$NBG`-5s+!*A%'c-Go[8tWTB[m`>Vm7fHds6S>XF@K6en(l9,5<TWWpL4g#=GQ7tE/cQB%6Oe<]PVZ,nPg*=pB$bqa\eNC(0f,$G1/h>d#TE"gQ^YS)aBQmnUCY9mIEUnf$(ZU;lb4up#@]SK>As-!bVe\4)O$PM%CuW(f.c+4%n8rTWQs@kuM[RtLg!$Eoc2>I*"(j8-j9KtuGa'tN/PhMK4DqdQ.l.9tK,[],nuR:3Oh0\_k6(]6bh8^iQIB1O1PQo6Dnaorjt@f8%^JFAO#?\#'_p(t9YC?KAc-u8cn'B>K+$\OErGh]*"hGZnV_>g"]=gGBIe2rUqY&mWa/A+LgW/29r:9CMrVLfR5(@bPe"thX>nj,2%Qi-CD2j>!9bU6&3GP<aKpKEe;q<tZ=QTmSs^&RTio_Rt02s9f$&)TT8hb"DVE07ZA:Ug,mnbN"N!Cd$/q>Y%k^&IBjc[X_tp\*b"%Rr>d.^]*`GGIN(W4am>*c)Xoq^O:>#j4!Dmqn&bqG9:c'I<W:$n3K6^pY4e::@FeB5!D1ph46b/qY2-u/lf"JX&i[.m@0UF!Z9oGaT~>%AI9_PrivateDataEnd