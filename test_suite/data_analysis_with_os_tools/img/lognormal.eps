%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: lognormal.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: SamreshNarayan Singh
%%CreationDate: 10/5/10
%%BoundingBox: 0 0 265 194
%%HiResBoundingBox: 0 0 264.1612 193.6275
%%CropBox: 0 0 264.1612 193.6275
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 7436 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFA8A8FF7DA8FD7BFF7D52FF277DFFA8537E7D7D7D847D7D7D847D%7D7D847D7D7D847D7D7DA87D7D7D847D7D7D847D7D7D847D7D7D847D7D7D%847D7D7DA87D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D%7D7D847D7D7D847D7D7D847D7D7D847D7D7D84FD077D847D7D7D847D7D7D%847D7D7D847D7D7D847D7D59A8FFFFFFA87DA8527DFF7DA8A8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA884A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA884A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFD04FFA8FFA8FFFF7D%A8FD15FFA8FD17FFA8FD17FFA8FD11FFA8FD04FF7D7DFD15FFA87DFD09FF%7DFD56FFA8527DFFA859FF7D7DFD16FF7DFD09FF7EA8FD55FF7D7D7DFF52%52A85252FD09FFA8A8A8FFA8A8A8FFA8FFFFFFA87DFD09FF7DFD57FF7DFD%05FFA8A8FD16FF7DFD09FF7DA8FD5CFF7E7DFD09FFA8FFFFFFA8FFFFFFA8%FFFFFFA87DFD09FF7DFD5AFF5227FF7D7DFD0CFFA8FFFFFFA8FD05FF7DFD%09FF7DA8FD29FFA8AFA8FD2DFFA8A8FFFF7DFD15FFA87EFFFFFF7D7EFF7D%7DFF7DFD29FFA8FFFFFFA8FD2FFFA8FFA8A8A8FD13FF7DFFFFFF7D52FF27%7DFF7D7DFD2DFFA8FD2BFF7D7DFF7D527D277DFD06FFA8FFA8FFA8FFA8FD%05FF7D7DFFFFFFA87EA87D7DFF7DFD5AFF7D27FFA8597D527DFD13FF7DFD%09FF7EA8FD27FFA8FD35FFA8FF7DA8FD12FFA87DFD09FF7DFD27FFA9FD07%FFA8FD2DFF7DA8A8A87DFD13FF7DFD09FF7DA8FD27FFA8FD07FFA8FD29FF%5227A87D527DF852FD06FFA8FFA8FFA8FFA8FFA8FFFFFFA87DFD09FF7DFD%5AFFA87DFFA8FD047DFD13FF7DFD09FF7DA8FD2FFFA9FD43FFA87EFD09FF%7D7DFD30FFA8FD43FF7DFD04FFA8FD04FF7D7DFD25FFA8FD0BFFA8FD41FF%A87DFFFFFF7D7DFF7D52FF7DA8A8FD73FF7DFFFFFFA852FF2752FF7D52A8%FD24FFA8FD0BFFA8FD23FFA87E84FFA8FFFF7D52FD15FF7D7DFFFFFFAFA8%A8FFA8FF7DA8A8FD55FF277DFF2752FF7D7DFD15FFA87DFD09FF7D7EFFA8%FD53FFA8527DFFA8FFFFFFA8FD15FFA87DFD09FF7DA8FD32FFA8FD41FF7D%FD09FF7D7EFFAFFD31FFA8FD3FFFA87EFD09FF7DA8FD74FF7DFD09FF7DA8%FFA8FD21FFA8FD0FFFA8FD3FFFA87DFD09FF7DFD75FF7DFD09FF7DA8FFA8%FD21FFA8FD0FFFAFFD3FFFA87DFFFFFF7D7DFF527DFF7DA9FFFFA8FD71FF%7DFFFFFF7D52FF527DFF7D7DFFA8FD21FFA8FD4FFF7D7DFFFFFFA8A8A87D%A8FF7DFFFFFFA8FD1FFFA8FD51FF7DFD09FF7DA8FFFFA8FD32FFA8FD3DFF%A87EFD09FF7DFFFFFFA8FD1FFFAFFD51FF7DFD09FF7DA8FFFFAFFD1EFFA8%FD13FFA8FD3DFFA87DFD09FF7DFFFFFFA8FD71FF7DFD09FF7DA8FFFFFFA8%FD1DFFA8FD51FFA87DFD09FF7DFD37FFA8FD3DFF7DFD06FFA8FFFF7DA8FF%FFFFA8FD1DFFA8FD15FFA8FD3BFFA87DFD06FF53A8FF7DA8FD73FFA87DFD%06FF52A8FF7D7DFFFFFFA8FD1DFFAFFD15FFA8FD3BFF7D7DFD06FFA8A8FF%7DFD05FFA8FD1BFFA8FD53FF7DFD09FF7DA8FFFFFFA8A8FD1CFFA8FD15FF%A8FD3BFFA87DFD09FF7DFD05FFA8FD33FFA8FD3BFF7DFD09FF7DA8FD04FF%A8A8FD1DFFA8FFA8FD13FFA8FD39FFA87DFD09FF7DFD21FFA8FFA8FFFFFF%A8FD4DFF7DFD09FF7DA8FD05FFA8FD17FFA8FFA8FD07FFA8A8FD10FFA8FD%39FFA87DFD09FF7DFD06FFA9FD24FFA8FD49FF7DFFFFFFA87DFF7DA8FF7D%A8FD05FFA8FD15FFA8A8FFFFA8FD0BFFA8FD0DFFA8FD39FFA884FFFFFF52%7DA82752FF7DA8FD06FFA8FD25FFA8FD46FFA87DFFFFA8535284277DFF7D%7DFD07FFA8FD13FFA8FFFFFFA8FD0DFFA8A8FD0AFFA8FD39FF7D7DFFFFFF%A8FD05FF7DFD75FF7DFD09FF7EA8FD07FFA8FD11FFA8FD05FFA8FD0FFFA8%FD0BFFA8FD37FFA87DFD09FF7DFD09FFA8FD15FFA8FD12FFA9FD42FF7DFD%09FF7DA8FD07FFA8A8FD0EFFA8FD07FFA8FD11FFA8FFA8FD07FFA8FD37FF%A87DFD09FF7DFD09FFA8FD6BFF7DFD09FF7DA8FD09FFA8FD05FFA8FFA8FD%05FFA8FD1DFFA8FD3DFFA87EFD09FF7DFD0BFFAFFFA8FFFFFFA8FFA8FFA9%FFA8FD5DFF7DFFFFFF7D52FF52A8FF7DA8FD0AFFA8A8FD09FFA8A8A8FD05%FFA8FD19FFA8FD05FFA8FD35FFA87DFFFFFF527D84277DFF7DA8FD0AFFA8%FD0DFFA8FD5AFFA87DFFFFFF7D52A8527EFF7D7DFD09FFA8FFA8FD09FFA8%FFFFFFA8FFA8FFA8FD1AFFA8A8FFFFFFA8FD35FF7D7DFD09FF7DFD09FFA8%FFFFFFA8FD0FFFA8FD1DFFA8FFFFFFA8FD35FF7DFD09FF7DA8FD07FFA8FD%05FFA8FD07FFA8FD07FFA8FFA8FD1AFFA9A8FFFFFFA8FD33FFA87DFD09FF%7DFD0EFFA8A8FD11FFA8FD1BFFA8FD37FF7DFD09FF7DA8FD07FFA8FD06FF%A8A8FFFFFFA8FD0DFFA8A8A8FD19FFA8FFA8FD33FFA87EFD09FF7DFD07FF%A8FD08FFA8A8FD13FFA8FD4FFF7DFD09FF7DA8FD05FFA8FD0AFFA8A8FFA8%FD11FFA8FFA8FD17FFA8A8FD32FFA87DFD09FF7DFD12FFA8A8FD15FFA8FD%17FFA8FD33FF7DFFFFFF7D7DFFA8A8FF84A8FD05FFA8FD0CFFA8A8FD07FF%AFFD0DFFA8FFA8FD15FFA8FD31FFA87DFFFFFF527DA85252FF7DA8FD12FF%A8FFA8FD17FFA8FD45FFA8A87DFFFFA87D527D527DFF7D84FD15FFA8A8FD%04FFA8FD13FFA8FD11FFA8FFFFFFA8FD2DFF7E7DFD09FF7DFD17FFA8AFFD%1AFFA8FD0FFFA8FD31FF7DFD09FF7DA8FFFFFFA8FD0DFFA8FD05FFA8A8A8%FFA8FD17FFA8FFA8FD0DFFA8FFFFFFA8A8FD2AFFA87EFD09FF7DFD11FFA8%FD09FFA8A8FD1CFFA8FD0BFFA8FD05FFA8FD29FF7DFD09FF7DA8FFFFFFA8%FD17FFA8A8A8FD1BFFA8FFA8FFA8FD06FFA9A8FD05FFA8FD27FFA87DFD09%FF7DFD1FFFA8A8A8FD2BFFA8FD27FF7DFD09FF7EA8FFFFFFA8FD0BFFA8FD%09FFA9FD07FFA8A8A8FD1DFFA8FFA8FFA8FD09FFA8FD23FFA87DFD09FF7D%FFFFFFA8FD21FFA8A8A8FD1FFFA8FD09FFA8FD23FF7DFFFFFF7D52FF527D%FF7DA8FFFFFFA8FD0AFFA8FD0AFFA8FD0DFFFD05A8FD1BFFA8FFA8FFA8FF%FFFFA8FFFFFFA8FD1FFFA87DFFFFFF527DA87D7DFF7DA8FD2AFFA8FFA8FF%A8FD19FFA8FD05FFA8FD05FFA8FFA8FD1BFFA8A87DFFFFFF7D52A852A8FF%7DA8FD0DFFA8FD21FFA8FFA8A8A8FFA8FD13FFA8FD09FFA8FFA8A8A8FFA8%FD19FFA87EFD09FF7DFD19FFA8FD1BFFA8FFA8A8A8FFA8FFA8FD0DFFA8FD%0DFFA8FFFFA8A8FD17FF7DFD09FF7DA8FFA8FD15FFA8FD23FFA8FFFD05A8%A9A8FFA8FFA8FFFFFFA8FD11FFA8FFA8A8A8FFA8FFA8FFA8FFA8FD09FFA8%7DFD09FF7DFD0DFFA8FD37FFA8FFA9FFA8FFA8FFA8A9A8FFA8FFA8FD0DFF%A8FD0BFFA8FD06FFA87DFD09FF7EA8FFA8FD09FFA8FD0BFFA8FD35FFA8A8%A8AFA8FFFD0BA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA87DFD09FF7DFD0B%FFA8FD0BFFA8FD47FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFFD07A8A97DFD09%FF7DA8FD0AFFA8FD0AFFA8FD3BFFA8FFA8FD13FFA8FFFFFFA8FFFFFFA8FF%A8A87D7DFD09FF7DFD09FFA9FD6BFF7DFD05FFA8277DFF7D7DFFA8FFA8FF%FD05A8FFA8FFA8FFA8FFA8A8A8A9A87DA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8A87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFFD05A87D84A8A8FFA8A8%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8AF7D7DFD05FFA8527DFF7D52597D7D%7D53FD547D7E7D7D59FD167D537DFD06FF7DA8FD04FFA8FFFFFFA8FFFFFF%A8FFFFFFA8FD0BFFA8FD2FFFA8FD27FFA8FD0CFFA87DFD14FFA87DFF7E7D%FD15FF7DFD14FFA97DFF7DA8FD14FF847DFD14FFA87DFFA87DFD07FF7D28%A8FD13FF7D27A8527DFD14FF7D52FD14FF7D52FF5252FD14FFA828FD14FF%A852FF527DFD07FF7D52FD14FF7D527D7D52FD15FF7DFD15FF7DA8527DFD%14FF7D52FD14FF7D53A87D52FD08FFA8FD15FFA8FFA8FD2DFFA8FFA8FD15%FFA8FD15FFA8FFA8FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:56:30+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-05T08:27:06+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-05T08:27:06+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>188</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9BX9p5kh882up273d3ob&#xA;abNbT2EclusMd1JdWvpTCNzEzEReszMxaiqQg5NxZVi/kgfmF5X/AC08w33mYyT63ZRzXlkl7Mbm&#xA;pg0+ItUrcXLcHuo5WoJVqDUJECEVVmK2XnwD4tY0snxGl3AH/dQOKt/U/PP/AFd9M/7hlx/2X4q7&#xA;6n55/wCrvpn/AHDLj/svxV31Pzz/ANXfTP8AuGXH/Zfirvqfnn/q76Z/3DLj/svxVQvY/P8ABCrw&#xA;6jps7mWGMoum3FQskqo7/wC952RWLH5Yqr/U/PP/AFd9M/7hlx/2X4q76n55/wCrvpn/AHDLj/sv&#xA;xV31Pzz/ANXfTP8AuGXH/Zfirvqfnn/q76Z/3DLj/svxV31Pzz/1d9M/7hlx/wBl+KqFzH5/imtU&#xA;j1HTZUnlMczjTbikSiJ35n/TztyQL/ssVV/qfnn/AKu+mf8AcMuP+y/FXfU/PP8A1d9M/wC4Zcf9&#xA;l+Ku+p+ef+rvpn/cMuP+y/FXfU/PP/V30z/uGXH/AGX4q76n55/6u+mf9wy4/wCy/FVB4/P638Nu&#xA;NR01oZIpZHuP0bcURo2jCof9P6uJGPX9nFVf6n55/wCrvpn/AHDLj/svxV31Pzz/ANXfTP8AuGXH&#xA;/Zfirvqfnn/q76Z/3DLj/svxV31Pzz/1d9M/7hlx/wBl+Ku+p+ef+rvpn/cMuP8AsvxVKl1fzKfM&#xA;kvl9vMGiLqCW0V1HbGyl9d1dpFakP6Q58U9MHl/lYqmv1Pzz/wBXfTP+4Zcf9l+Ku+p+ef8Aq76Z&#xA;/wBwy4/7L8Vd9T88/wDV30z/ALhlx/2X4q76n55/6u+mf9wy4/7L8VcbPz1TbV9Lr2/3GXH/AGX4&#xA;q35Y1DWbmTWLTVpLea40y9W1S4tYXt45Ee0t7kH05Jbggg3BX7fbFU8xVIvPv/KDeYv+2Ze/9Q74&#xA;qnuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksd89eV28x6Vb2gWCdbe6iu&#xA;pLG8BNrdJGGUwz8Q3w/HyHwtRlG2KpS/5XJN5N0Hy2mvapo36Fgjie50KcaeZ3WMK5cBZKqzVanW&#xA;p3JOKqK6TYn83hO+tWkt4lkbyLQBasLmJVjW0e8e4jmVGd/UVAZoieHwpSjHFWfYq1IpZGVWKEig&#xA;daVHuOQI/DFUL9Suf+rhP/wMH/VLFXfUrn/q4T/8DB/1SxVEQxvHGFeRpWH7b8QT/wAAFH4Yqkvl&#xA;3/jseaP+2nH/AN0yyxV0vmd4vOcXlx7GRYpdOuNSXUi6FG+rzQxNEkalpKj6wCSwX25b0VYrb+e0&#xA;85/lV5n1VbNrEJYXSLAxkZzHLp63MbMJIoGBMdwvQFT1RnUhiq9Bs7yK7h9aJZFSpFJopIW2/wAi&#xA;VUb8MVVsVdirsVdirsVdirsVdirsVUJPXkmCRsY4k/vJAPiLbEKoZSCpB3YfLxoq0kjwyJDM/P1N&#xA;oZW4qSVQEq245O1Gf4VAp8t1URirsVdirsVdirsVdirsVdirsVYb+Zeg/lfrFjZR+f5bSKzilZrI&#xA;3t61ipkK0biyywcjx7VOKqfmDzD5Z0jzgl3dR3z6lpmhXs8SxRf6PLatcWnOON34iW4aVYlRVem/&#xA;xUquKpz5R832Xme0u57a0urJ7K4+q3FteoiSrJ6Mc4qsbyhTwnXkrEOrVVlVgRiqdTGERMZioiAq&#xA;5enGnvXbFUOE0osiBYC0qgxKAlWQbgqO4GKtV0cJ6v8Ao4QuV5/BQyHYiv8AMcVRB9K3hYqnGONS&#xA;eMakmgH7KqCT8gMVSHyldR3Wo+Z541kVG1SOgljkhfbTbMbpIqOPpGKpxd6Tpd5NHNd2cFxNEAIp&#xA;JY0dlCyJMOJYEiksMb/6yqeoGKpD5q0fSdK/L7zJbaXZW9hbvp99K8NrEkKGR7d+TlUCjkabnFWU&#xA;Yq7FXYq7FXYq7FXYq7FXYqsmk9OJn2PEVAJpU9hX3OKtW8PowrHsWAq7AAcmO7MQoUVZiSdsVdcR&#xA;tJCyo3GTZo2qwAZTVeXEqStRuK7jbFXW86XEKyoCA37LDiwINCGB6EHY4qqYq7FXYq7FXYq7FXYq&#xA;7FXYqw38y9e/K/R7Gyk8/wAVpLZyystkL2ya+USBatxVYp+J496DFUs8961oVr5jhGoaG91cWelS&#xA;32lXxufQjlmiv7H0bRUjZmBe7NueciUBAoG+Kiqp+S+u+UdT0PVIPKsEtvpGm6jJbWyTXs16ZE9K&#xA;ORZ09Z5WhSQyGkdeoJNGLAKvQJHCIztUhRUhQWP0BQScVUzdRgkcZKg0P7uSn2gvXj4n7t+mKtC6&#xA;iP7MnUDeOQda/wCT/k/51GKqqMHRXFQGAIBBU7+INCPpxVI/Lv8Ax2PNH/bTj/7plliqcG8tFu0s&#xA;zPGLuSNpktiy+o0aMqu4SvIqrOoJ6AkeOKpD50vbO58keaVtp452trC9guVjdXMcotWYxvxJ4txd&#xA;TQ70IxVNNEvp73T0muQq3Ff3ixghQG+OPqW6xsp64qj8VdirsVdirsVdirsVdiqlOXMkMag8WblI&#xA;RyFFUVHxKRT4uOx6iu2KquKuxVRiqtzKh6NSROvccWAqT0IqaAdfHfFVbFXYq7FXYq7FXYq7FXYq&#xA;7FXYqhbrStLu7iG5urOC4uLf+4mljR3jo6SfAzAlf3kSNt3UHqBiqrBaWsDzPBDHE9zJ6twyKFMk&#xA;nFU5uQPibgirU9gB2xVVxV2KuxV2KpF5d/47Hmj/ALacf/dMssVUr/yj6vm2HzPYzw2eoJYyabO5&#xA;txI8kUtzbzElw8ZqiW7rHyqFZ+VCAVZVjEfkCLyZ+Xnne1g1K41GPU4b6/8AUuliEqu9iI3LvGiC&#xA;R3aLkzcRXwrVmVZd5VhktrQW8k73LPDb3PrSBA1JIhGEpGqL8Po+HfCVTvArsVdirsVdirsVdirs&#xA;VUU4PdyN8LGJRGD8JKM3xOtR8QqOBIPtiqtirsVUbjijRzbBlYJXapEhC8akE9aHam4GKq2KuxV2&#xA;KuxV2KuxV2KuxVj/AJ71HWtO8utdaLFJPqAvNPjSCFY3kkjlvoI50USkRjlC7jkxAXqWWlQqklvJ&#xA;+csmgeWmt4tKi1MRBfNK6uXMplUopa2+oFoPjo7bmm67DcYqnUmna+PP9rqCXU76AdLuYJ7QvGLd&#xA;Ls3Fu0LiMBZGdoxL8TcgAKDjXdVkOKuxV2KuxVbIrPGyq5jZgQJFpyUkdRyDCo9xirH/AClDJDqP&#xA;meOS4kuXXVI6zSiMOa6bZncRrGm3TZcVZFiqRefiB5F8xk9Bpd7/ANQ74qidNje3ks43HF5LFFlU&#xA;9VNuVAH/ACWNcVTTFXYq7FXYq7FXYq7FXYqpW1SJHPV5GqN6DieApyA7LX9WKquKuxVqRFkRkavF&#xA;wVNCQaHbYihGKrLaRpLeN3IMhUepQFRyGzfCSab9q4qqYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYqkXl3/jseaP+2nH/AN0yyxVDX/mm9sfPVro12tpb6LdadNdRXkkrLM10l3a20cRDBY0DtdhV&#xA;3ZnYgbdGVYnp3nK/82flJ5w1G6nsLoRWt/Bbz6YT6TotiHaqPJJIhWV3VfU4MyhXKJypirPzPNLP&#xA;YXD20lnIZZIXjmMZb02iZv8AdTypu8ad64qmeKuxV2KuxV2KuxV2KrJ5RDBJKaUjVnNSFHwiu7HY&#xA;fM4q6CIRQxxAlhGoUMep4ilTiq/FXYq7FVGAKks0QoPiEgQcRQSdTQAfacMd++Kq2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxVbIzJGzKhkZQSI1pyYgdByKip9zirH/KU0k2o+Z5JLeS2dtUjrDKYy&#xA;4pptmNzG0ib9dmxVkWKpB+YP/KBeZf8AtlXv/UO+Kppqu1i8n7MLRzv48YZFkanvxU0xVF4q7FXY&#xA;q7FXYq7FXYqo3Rb01CkhjJH05dA4LfZB/ZB9vHbFVbFXYq7FXYqpShhcQuKkHkhA5U3HKpp8P7FK&#xA;nx991VXFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi8u/8djzR/204/8AumWWKp7irEfM+u6R&#xA;rn5aeZb/AEm6S9sjp2pQrcRVKM8EUsUnFujAOhAYbHqCRirK54Y5oZIZBWOVSjjpswocVUtOmkms&#xA;IJJf74ovrDoRIBRwQOhDAg4qiMVdirsVdirsVdiqjL8VzAndeUte1FXhTqN/3ngcVVsVdirsVdiq&#xA;ldRl4GAHJxR0FAfiQ8l+1t1GKqiOjorowZGAKsDUEHcEEYq3irsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVSLy7/x2PNH/bTj/wC6ZZYqnuKsP8zaHZ6P+XHmy2tmd47m11i+k9Ugn1L0TXEgFAvwh5SF&#xA;9vHFWVWdjZWUPoWdvHbQgkiKFFjWp6nioAxVR08GKS6tif7uZpEr1KT/ALyvy5s6j5YqjMVdirsV&#xA;dirsVdiqihDXkm4YRoqjoSpYksOlRUce/hiqtirsVdirsVdiqjajijR1JMbFd+R2PxLuwFfhYfqx&#xA;VWxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVbJHHLG0cih43BV0YAqykUIIPUHFWP+UrS0tNR8z29p&#xA;DHbwJqkfCKJQiCum2ZNFUAbk4qyLFUi8/AHyL5jB6HS70f8ATu+Kp7iqDlb0dUhfot0hhJ6/HHWS&#xA;Mf8AA+piqMxV2KuxV2KuxVTmm9IJ8DyF3VAEFaV6sx2AVRuSfo3oMVQ8UF1KLoTTkJLKfS9NWjZY&#xA;1AUr8fI7kH4lp4imKqv1Z1QLFO60fnVqPUVqUJapp9NfoxVqW8Fv6r3YWC3QqEnLVUhtvi2HCjfR&#xA;0360VRGKuxV2KqBol4GPSZAgOw+KMlgNzUkhiaAdjiqvirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVSLy7/x2PNH/bTj/wC6ZZYqx67sfPMP5kfpGKK8uNELov7q6iFqLR7cRGL6rJMg9eO7P1hpfTr6&#xA;QKqWaiFVJfLel+edN/KLzZD5wed9Se1umhNzP9YbgNMjSQhvXu6K1wsrAeoBvUJGDwVV6jZfXvQ/&#xA;030vXqa+jy4U7fa3xVZqUDy2paNeU8JE0A2qXjNeIJ6cxVT7E4qiIZY5okmiblHIodGHdWFQcVXY&#xA;q7FXYqtmd0id0QyuqkrGCAWIGygsQBX3xVZDAqPJLSksxVpfiLAFVC0Unoop0oN6nqTirVmP9FiN&#xA;KF15tsB8T/ExoCw3J8TiqtirsVQ7RzQM8kXOf1XQtCziiA0VmTl7b8a/LFVaKaKZOcTrIlSOSEMK&#xA;qSpFR4EUxVdiqjd7RCQdYmEldyeI+3QANX4K7U/riqtirsVdirsVdirsVdirsVdirsVdirsVdiq2&#xA;X1PTf0qepQ8OVePKm1adsVY95S+t/pDzN9c9P6x+lI+fo8uH/HNs6U5b9MVZHiqReff+UG8xf9sy&#xA;9/6h3xVPcVdiqB08fVpprAkURjNbDv6Mhrx/2D1UAbBeOKo7FXYq7FVD01mueckRBtm/cuSaEsg5&#xA;MFG3RuNTv1+lVu8Yray0PxMvBNwKs/wqKkMBVj3GKqyqFAVQAoFAB0AxV2KuxV2KqLQOJVeFljUs&#xA;WnTgD6lVpWooQwoN/DanSiq62nW4gWVVdA1apIpVgQaEEHwIxVUxVQsiRB6TU5wExMAa0C/Yrueq&#xA;cT9OKq+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpF5d/47Hmj/tpx/wDdMssVS9vP3HzufLjWP+ir&#xA;IbU3/qkyfWRZ/X6fVxH/AHPober6n2/h498VSW389x+cvyq8z6qtmbBUsLpFhdnLenLp63Mbt6kU&#xA;BBMdwvQFT1R3Uhiq9Bs76yvYfXs7iO5hJIEsLrItR1HJSRiqtiqA1asSw3cQLXMDfu4lALyqw+OF&#xA;en2gOQ3AqoLbDFVSD1LuJZ/XHoSoGRYdgVYV3cjkfmOOKqptFqWSSRGJB5B2b/hXLL+GKqNx9dij&#xA;EcU0bySB0iM3wsX4ll3UUanE1AXpv23VXWcsMcMNsWdJFX00Wc/vH9NdzX9s0FSVriqpc8yYUHIK&#xA;0g5la1AUF+o6AlQDX5d8VVsVdirsVdirsVUZYG9Q3EVTOqMixl2WNu4DABgN/wBrjUfhiq+KUOoq&#xA;OEvFWeIkFk5DoeJIxVYzFbpOvGVSK/EQGQ1HfiKgntiqtirsVdirsVdirsVdirsVdirsVdirsVWy&#xA;SRxRtJIwSNAWd2ICqoFSST0AxVj/AJSu7S71HzPcWk0dxA+qR8JYmDoaabZg0ZSRsRiqY3Plvy9d&#xA;agNSutLtJ9RCogvZYInmCxSCaNfUZS1ElRXUV2YAjfFUo81aPpOlfl95kttLsrewt30++leG1iSF&#xA;DI9u/JyqBRyNNzirKMVdiqHtqyytcsCoI4QqwoQgO7U7czv8qYqhS36MuqN/vBdyVDf75nkO4P8A&#xA;kSsfoc/5Q4qpliqkUZ7gF40McQDwuRVhIeStTw+E0+k4qqOiOpV1DKeqkVH44qgmhnS6jW3YSRxq&#xA;WMMpBC8iFBV6mRT9qlVYHcbYqiI7pGf03DRy1pxcEAmlfhb7Lbb7H54qrYq7FXYq7FXYqo3EDsHk&#xA;t+Ed2VCrO6c9gahWoVJXrtXFVju80chSJlnt3PpiQAcmUV+FiGHF1anIdKkbEEYqrxyJLGkkZ5Ru&#xA;AyMOhBFQcVXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi8u/wDHY80f9tOP/umWWKp7iqReff8AlBvM&#xA;X/bMvf8AqHfFU9xVQvSxiEKcw07CPmmxUEEs1f2aKDQ+OKq6qFAVQAoFAB0AxVbLFFLE8UqLJFIp&#xA;WSNgGVlYUIIOxBGKpZ9Zk0klLt3l08/3F2xLvGT0imJqT/kSHr0b4qF1UwtYUji+GP02kJkkUnke&#xA;bnk1W3rvt+rbFVXFVKL4p5m6FSsfWuwXlXoP5/E4qvliilQxyosiGlUYAg0NRsffFVH0biNiYZOS&#xA;cdoZancDakm7CvevL+qq5btBxEymB2FaP0+XMVWvtWuKq2KuxV2KuxVTmt4pjGZASYnEkZDFSGAI&#xA;/ZI7EgjviqDtro20/wBUvGjjknd2tCpNJASWI+Mk86/ER0AIArQ4qmGKuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxVIvLv/HY80f8AbTj/AO6ZZYqx288keYx+Yx802RsniLIRPNJIlyITbi1ez4rC6mBWrdqP&#xA;UHKUcfhB5hVL7Pybr/lj8vvP0Ws6pHq0+qLf6gl5HG8bn1LBI3LrI8oQ84jRFJUDpseKqvSbO3lg&#xA;h9OW5ku3qT60wjDb9v3SRL+GKtAF7wsQeMKcVPYs+7bewVd/c++Kq+KuxVQuRHK6WzlxzBkPEfCy&#xA;xstVY0Ozcht3FcVQgtbzT97EfWLPb/QWIDRj/ih2IFPBHNPBlApiqKs7+1u1YwPVozSWJgUkQnoH&#xA;RgGWvao364qusyTbK5FPUrIAeQIDsWAPIk1AP+10xVWxV2KuZQwKsAVIoQehGKqC2gjIMDtEoFBF&#xA;9qPb7Pwn7IHgpH6sVaE88Y/0iImhA9SGrg12rx+2N+wBp49aKqsM8MwJicOFJV6HdWHVWHYjwOKr&#xA;8VdiqhdKwVZkBLwnkQKklOjrRQSdtwP5gMVWxLNCsKR8riFmblJI45opqV7fEB9nc1+eKqsFxBcR&#xA;+pBIssdSvJCCKqaMNu4IocVVMVdirsVdirsVdirsVdirsVWyKzxsquY2YECRaclJHUcgwqPcYqx/&#xA;ylDJDqPmeOS4kuXXVI6zSiMOa6bZncRrGm3TZcVZFiqReff+UG8xf9sy9/6h3xVPcVULL4oBLQfv&#xA;iZKjurGqV9+FBiqvirsVUbZxIGmWYTQykNDQDiFAA2I+1UgmvviqtiqA1awtLmHlKvGbaKK4Q8JU&#xA;9Vgnwv8AT9no3ShxVpV1azUKvG/gXYD4YZwB4U4wuf8AkXQeOKqker2TSLFKxtp2IVYbgemzMTSi&#xA;Fvhk3/kJGKozFXYq7FXYqpy28MtC6/EPsuKqw+TCjD6MVWfV50/upzTf4ZR6g36b/C2x8W6fgq5Z&#xA;rlaerBQEElom5gUr1qEbp4KcVXJd2zkLzCuQCI3BR6N0+FqNv0xVZEvoTGILSGQ8ouI2DGpcEKgC&#xA;io5VZqlifbFW5LRaSvb8be4mKl51RSzFKU51HxCg4+NOhGKue6ERna5UQW8IUi4Zl4FSN671Xiet&#xA;dvfrRVXVgwDKQVIqCOhGKuxV2KuxV2KuxV2KuxV2KpF5d/47Hmj/ALacf/dMssVY9dfmHeWn5k/4&#xA;cuWs4NOLpAsUtUuj6tuJY7z1Gk4eg9y62ir6dTKRRv2cVS3SvOd/5s/KjzbqN1PYXQitr6C3n0wn&#xA;0nRbFXaqSSSSIRK7qvqcGZQrlE5UxV6ILmeaxZ3t5bKVz6apKY2cFyFVv3Lyr1P82KoxVCgKoAUC&#xA;gA6AYq7FVO4eRUCxMiyuwVPU6Hu1AKEkKCaYqvVVRQqgKqiiqNgAOwxVvFVFy7XUaCoRFZ2I5AE/&#xA;ZUVpxI3JpXwxVWxVbJHHLG0cih43FGRgCCD2IOKoMaPbx/7ySS2fgsL/ALsA9QsT84hX2TFXcNZi&#xA;+xLDdKNgsitC9PFpE9RSflGPoxVsahcR/wC9NlMgH25YuMyV/wAkIfVI/wCeeKu/TWmD+9nFueoW&#xA;5DQMR0qBKEJGKoyORJEV42DowqrKagjxBGKt4q7FWnRHUo6hkbZlIqCPcHFUPNp1tKhUAx1dZAUO&#xA;wdCCrcTVKggHcYqo236RX1IJJQZkJMbyJyDJyNDyQRLXjsRSoPiKYqiRJdA/HCCpag9N+Rp2JDBP&#xA;wriqkzKHabjNHO0dArCSVBQ7H042aOtfD4sVWxahx5rO8cnBQRJASzOwXk4EI5uDTcAFtsVRaSo4&#xA;HE7lQ3EghgG6VU0I6d8VXYq7FXYq7FXYqtkZkjZlQyMoJEa05MQOg5FRU+5xVj/lKaSbUfM8klvJ&#xA;bO2qR1hlMZcU02zG5jaRN+uzYqyLFUi8+/8AKDeYv+2Ze/8AUO+KpvMC08CitFLSMe1FXjT51cH6&#xA;MVVsVdiqiiepcNLJEo9KqW8oPIlHCsx9qsKfRiqtirsVQ9mRKHutj65/dsOJ/dL9ijL1DVLj/WxV&#xA;EYq7FXYq7FXYq7FUJJpGlSO0jWcJkcktJ6ahyT+1yA5V98Va/RUK7xzXEb9Q/ryvT/YyM6H6VxV3&#xA;1K9XdNQlZh0EqQsh+YRI2+5hirvT1kCv1i3Yj9n0HWp+fqtT7sVd6usf8stv/wBJD/8AVHFVOea5&#xA;kTjLp8pkXlwliaBuDFSnKNpHQg8WNCVGKqbazJbBjqFrNBCKt9a4K0YAq3xCJ5mXio3Ztj+GKoj9&#xA;K2tK8LjpX/ea4/6p4q0+q6WRxnmSHoeFwDCTvsQsoUnfviqHM3ln1FlWe1SWMFFkSREYBqVFVIO9&#xA;Biqpb28TpG2nX7mGN/3g9QXIbuVLymRwd+zYqvRdWWSUFkaEBjG7Hm5P7PwKsCr/AMEf44quW5u1&#xA;MfqRgGanFCrKUp9rmyesny3GKr47uRwxREmCMyOIJA5V1/ZPIIAfHfbFV31mSu9tKFABLfuz1pXY&#xA;OTt8sVb+tRVpxk6kf3cnbf8AlxVJvLLq+q+Z3UEA6nHTkCp/45ll2YA4qn+KsN13zToXmD8t/M9/&#xA;pFybi1i068SSQxyxEE2frKeMqoxV4pUdGAoysGBIOKssi+OeWWmy/u0NSfs7sfb4jQ/LFVbFUNcB&#xA;rkTWiGSHZeU4Wgox+JUJ78R1HSvjiqvHHHFGscahI0AVEUAKqgUAAHQDFV2KpfeXttJEOTA2Mjxw&#xA;yzU5K5ndY0jUcXDq7OFY12++iqYYq7FXYq7FXYqpTXUEMkEcrcXuXMUAoTycI0hG3T4I2O+KquKu&#xA;xV2KuxV2KqTXUC3UdqzUnlR5Y0od0iKK5r02Mq/fiqrirsVUDaBSWgcwsSSQN0JJZjVDtuz1JWhP&#xA;jirjJeITyhEqgbNG1GYhan4H4hatsPjOKti7StGSRWqRT03PRgvVQR+149N+xxVBySeX7u7eGUW8&#xA;9xGkbPzVW+CVpFQciKGpifavbFVZdJ0ZlDrZ27KwBDCNCCOo3pirv0PpQHwWsUTdQ8SiNwetQycW&#xA;H0HFVs2iafMhSYTSoaHg887LUGoNC9OuKtfoWz9QyepdciKEfW7rjv8A5PqUxVaujcFj9O/vFkjY&#xA;sZTLzLg1+FlkDx037LXFUu8qK6ap5pR5TM6arGDIwAO+mWRAPEKNgewxVkTKrKVYAqRQg7gg4qwu&#xA;Hyp5U8leRtchu2nvNE+qyS6n9YKNK1rb2SWohX0lh2W1tljX9o9SSxJxVCeWPI/5d6tpCXdppE9o&#xA;iTXFtLaz3U/qxT20z280b+ncSoSskTbq5B6g74bVNW/K7yKwYNppYOasGuLkgmoPQye2Nqv/AOVZ&#xA;+Sv+re3/AEkXPv8A8We+Nq7/AJVn5J/6t7eH+9Fz4U/35jauP5ZeRyanS1r4+rN41/n8cbVIL/Sv&#xA;y0t/Ndp5Xm0mZ7u6ETrcCVzBHJKlzNBG5M4k5uunzMtEIHHcgstW1a8mWH5a+bbe7uNM0t1hs52t&#xA;2Z7tHLMpIrwt7qd4+mwlCNTemKsi/wCVceTP+rd/yWn/AOqmNq7/AJVx5M/6t3/Jaf8A6qY2rv8A&#xA;lXHkz/q3f8lp/wDqpjau/wCVceTP+rd/yWn/AOqmNqlXmTyv+XWhWlteX+lSyJLd21nD6LXMhWa7&#xA;lFvGzEPxjWsm7MQOwqxALapr/wAq48mf9W7/AJLT/wDVTG1d/wAq48mf9W7/AJLT/wDVTG1d/wAq&#xA;48mf9W7/AJLT/wDVTG1d/wAq48mf9W7/AJLT/wDVTG1d/wAq48mf9W7/AJLT/wDVTG1Ytfw/lXZ2&#xA;HmHU5tJuBH5Xm+qX3NpYXZ3jilpD680QKt6yUZiqnqCVoxVTvQ/J/kTWNItdUt9M4wXaCSNfrXrU&#xA;B/4stp54W+aOw98bVHf8q48mf9W7/ktP/wBVMbV3/KuPJn/Vu/5LT/8AVTG1d/yrjyZ/1bv+S0//&#xA;AFUxtXf8q48mf9W7/ktP/wBVMbVIL/RPy8sPNmn6BNoVz9a1VeMF+ryfViyRzzekWaZZGZUgctwR&#xA;glV5Fea1bVPT+WfkcksdMUk9T6s1TQU/n8MbV3/KsvI3/VrXw/vZvCn8/hjau/5Vn5HrX9FrXx9W&#xA;bxr/AD+ONq4fln5HG40tQf8AjLN23/nxtULqf5feRLLTbq7bRZLhLaF5Db2zXEs0gRCeEUavVnYb&#xA;Ko642qT6L538heW9D0o6Vpstjb+YL+5gitWns0YXNq/1aZ5Jri6ELisIVfTlfkKca4Fek4qgPMH6&#xA;H/QGpfprj+hvqs/6T9SvD6t6bety4709OtaYqhfJ/wCgP0BB+gPU/RvqXHH1/rHret9Yk+s+t9a/&#xA;0j1frHP1PU+LlWuKpzirsVdirsVYZ5l/5V//AIrh/Sv1n/Ef1Nvq/wBU/SHqej6V3x4fU/h9f0vr&#xA;fo0/e09T0/2sVV/Iv+B/V1P/AA16/rcovr31n67z4fH6Hp/Xd/Q+36fpfu+vHvirLMVdirsVdiqV&#xA;eZ/0D+ih+nf+Of8AWrKlfU/3p+txfVP7r4v96fT9v5vhriqa4q7FXYq7FXYqwvXP8AV1n659b5/X&#xA;4v0z9R/SXP659Rj9Hn9T+L/eb0uFPh9ThT97xxVPPKP+H/8ADtn/AIf5fomj+hz9b1OXqN6vqfWP&#xA;33qery5+p8XKvLfFU4xV2KuxV2KsUu/8G/8AKx7P1frn+L/qP7n0f0h9X+pcpP7/ANL/AELjz5U9&#xA;Xflx78cVZXirsVdirsVS7zJ+if8AD2p/pnl+iPqk/wCkeHq8vq/pn1aeh+9+xX7HxeGKsBuP+VSf&#xA;ofS/rf6W/RP1dPqH1j9P+l9V9R/731P901/vPV+Hh6fP4PSxV//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:98C42D7B51D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:48116053EBD1DF11AFC3D21F10CD933F</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.007</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbo; Symbol</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -193.627 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 193.627 li
264.161 193.627 li
264.161 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
258.325 182.724 mo
255.175 182.724 li
15.875 182.724 mo
19.0249 182.724 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437917 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B854D00D> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/NHWRNU+Helvetica /Helvetica findfont ct_VMDictPut/NHWRNU+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]NHWRNU+Helvetica nfNHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf5.82813 185.06 mo( )sh7.78125 185.06 mo(0)sh258.325 162.824 mo
255.175 162.824 li
15.875 162.824 mo
19.0249 162.824 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369E6> |-/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNU+Helvetica /Encoding getdup 46 /period putdup 50 /two putpop%ADOEndSubsetFont
/NHWRNU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two 205{/.notdef}rp]NHWRNU+Helvetica nfNHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf0 165.162 mo( 0.2)[1.9458 3.89209 1.9458 0 ]xsh258.325 142.923 mo
255.175 142.923 li
15.875 142.923 mo
19.0249 142.923 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNU+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/NHWRNU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 203{/.notdef}rp]NHWRNU+Helvetica nfNHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf0 145.255 mo( 0.4)[1.9458 3.89209 1.9458 0 ]xsh258.325 123.023 mo
255.175 123.023 li
15.875 123.023 mo
19.0249 123.023 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNU+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/NHWRNU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]NHWRNU+Helvetica nfNHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf0 125.357 mo( 0.6)[1.9458 3.89209 1.9458 0 ]xsh258.325 103.125 mo
255.175 103.125 li
15.875 103.125 mo
19.0249 103.125 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNU+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/NHWRNU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]NHWRNU+Helvetica nfNHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf0 105.451 mo( 0.8)[1.9458 3.89209 1.9458 0 ]xsh258.325 83.2734 mo
255.175 83.2734 li
15.875 83.2734 mo
19.0249 83.2734 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNU+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/NHWRNU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]NHWRNU+Helvetica nfNHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf5.82813 85.6069 mo( )sh7.78125 85.6069 mo(1)sh258.325 63.3735 mo
255.175 63.3735 li
15.875 63.3735 mo
19.0249 63.3735 li
@
NHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf0 65.7085 mo( 1.2)[1.9458 3.89209 1.9458 0 ]xsh258.325 43.4736 mo
255.175 43.4736 li
15.875 43.4736 mo
19.0249 43.4736 li
@
NHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf0 45.8101 mo( 1.4)[1.9458 3.89209 1.9458 0 ]xsh258.325 23.5737 mo
255.175 23.5737 li
15.875 23.5737 mo
19.0249 23.5737 li
@
NHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf0 25.9116 mo( 1.6)[1.9458 3.89209 1.9458 0 ]xsh258.325 3.67383 mo
255.175 3.67383 li
15.875 3.67383 mo
19.0249 3.67383 li
@
NHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf0 6.01318 mo( 1.8)[1.9458 3.89209 1.9458 0 ]xsh15.875 3.67383 mo
15.875 6.82373 li
15.875 182.724 mo
15.875 179.574 li
@
NHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf12.9531 192.052 mo( )sh14.8984 192.052 mo(0)sh64.375 3.67383 mo
64.375 6.82373 li
64.375 182.724 mo
64.375 179.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNU+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/NHWRNU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]NHWRNU+Helvetica nfNHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf58.5313 192.052 mo( 0.5)[1.9458 3.89209 1.9458 0 ]xsh112.875 3.67383 mo
112.875 6.82373 li
112.875 182.724 mo
112.875 179.574 li
@
NHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf109.953 192.052 mo( )sh111.898 192.052 mo(1)sh161.325 3.67383 mo
161.325 6.82373 li
161.325 182.724 mo
161.325 179.574 li
@
NHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf155.484 192.052 mo( 1.5)[1.94629 3.8916 1.94629 0 ]xsh209.825 3.67383 mo
209.825 6.82373 li
209.825 182.724 mo
209.825 179.574 li
@
NHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf206.898 192.052 mo( )sh208.844 192.052 mo(2)sh258.325 3.67383 mo
258.325 6.82373 li
258.325 182.724 mo
258.325 179.574 li
@
NHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf252.484 192.052 mo( 2.5)[1.94629 3.8916 1.94629 0 ]xsh15.875 3.67383 mo
15.875 182.724 li
258.325 182.724 li
258.325 3.67383 li
15.875 3.67383 li
15.875 3.67383 li
cp
@
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 115 /sigma putdef/UniqueID 27004 def/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [-17 0 673 685 487 500] def/StdHW [92] def/StdVW [95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/sigma <1C60D8A8C9B7C05498E4B9F42DBCF0D747016AF76274FDDE26206FC6F23EB4EA4B165C74A15E79AE6ABE0440AFFEB3BBB87A7210B9846126345EF1DB62472654388095DC46EBCBAAF4B23ACE8FA5CD01F41D718A0E56D0A89E364AAA55E13856BE1C91A6812AC82970910E0F0F26332BE55E1F7CB2B7D460D2F8C9B0CFE0BF77764D4DFB0ECCE386A98B982142F663128958070A9B> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/NHWRNV+Symbol /Symbol findfont ct_VMDictPut/NHWRNV+Symbol*1 [115{/.notdef}rp /sigma 140{/.notdef}rp]NHWRNV+Symbol nfNHWRNV+Symbol*1 [7 0 0 -7 0 0 ]msf195.375 12.6616 mo(s)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B7F374CC52CC6AFA2AC69E2626E08155548B3F09D592996A164FA4C0B7A39FE024A3E562036F05B86028> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNU+Helvetica /Encoding getdup 61 /equal putpop%ADOEndSubsetFont
/NHWRNU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 4{/.notdef}rp /equal 194{/.notdef}rp]NHWRNU+Helvetica nfNHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf200.594 12.6616 mo( = )[1.94629 4.08789 0 ]xsh208.563 12.6616 mo(2)sh0.25 lw
242.775 174.974 mo
243.025 174.974 li
243.275 174.974 li
243.525 175.023 li
243.775 175.023 li
244.025 175.023 li
244.225 175.023 li
244.475 175.023 li
244.725 175.074 li
244.975 175.074 li
245.225 175.074 li
245.475 175.074 li
245.725 175.074 li
245.925 175.125 li
246.175 175.125 li
246.425 175.125 li
246.675 175.125 li
246.925 175.125 li
247.175 175.173 li
247.425 175.173 li
247.625 175.173 li
247.875 175.173 li
248.125 175.173 li
248.375 175.224 li
248.625 175.224 li
248.875 175.224 li
249.125 175.224 li
249.325 175.224 li
249.575 175.273 li
249.825 175.273 li
250.075 175.273 li
250.325 175.273 li
250.575 175.273 li
250.825 175.273 li
251.025 175.324 li
251.275 175.324 li
251.525 175.324 li
251.775 175.324 li
252.025 175.324 li
252.275 175.375 li
252.525 175.375 li
252.725 175.375 li
252.975 175.375 li
253.225 175.375 li
253.475 175.375 li
253.725 175.423 li
253.975 175.423 li
254.175 175.423 li
254.425 175.423 li
254.675 175.423 li
254.925 175.474 li
255.175 175.474 li
255.425 175.474 li
255.675 175.474 li
255.875 175.474 li
256.125 175.474 li
256.375 175.523 li
256.625 175.523 li
256.875 175.523 li
257.125 175.523 li
257.375 175.523 li
257.575 175.574 li
257.825 175.574 li
258.075 175.574 li
258.325 175.574 li
217.575 173.824 mo
217.775 173.824 li
218.025 173.824 li
218.275 173.824 li
218.525 173.875 li
218.775 173.875 li
219.025 173.875 li
219.275 173.875 li
219.475 173.923 li
219.725 173.923 li
219.975 173.923 li
220.225 173.923 li
220.475 173.974 li
220.725 173.974 li
220.975 173.974 li
221.175 173.974 li
221.425 174.023 li
221.675 174.023 li
221.925 174.023 li
222.175 174.023 li
222.425 174.074 li
222.625 174.074 li
222.875 174.074 li
223.125 174.074 li
223.375 174.074 li
223.625 174.125 li
223.875 174.125 li
224.125 174.125 li
224.325 174.125 li
224.575 174.173 li
224.825 174.173 li
225.075 174.173 li
225.325 174.173 li
225.575 174.224 li
225.825 174.224 li
226.025 174.224 li
226.275 174.224 li
226.525 174.273 li
226.775 174.273 li
227.025 174.273 li
227.275 174.273 li
227.525 174.273 li
227.725 174.324 li
227.975 174.324 li
228.225 174.324 li
228.475 174.324 li
228.725 174.375 li
228.975 174.375 li
229.225 174.375 li
229.425 174.375 li
229.675 174.423 li
229.925 174.423 li
230.175 174.423 li
230.425 174.423 li
230.675 174.423 li
230.925 174.474 li
231.125 174.474 li
231.375 174.474 li
231.625 174.474 li
231.875 174.523 li
232.125 174.523 li
232.375 174.523 li
232.575 174.523 li
232.825 174.523 li
233.075 174.574 li
233.325 174.574 li
233.575 174.574 li
233.825 174.574 li
234.075 174.625 li
234.275 174.625 li
234.525 174.625 li
234.775 174.625 li
235.025 174.625 li
235.275 174.673 li
235.525 174.673 li
235.775 174.673 li
235.975 174.673 li
236.225 174.673 li
236.475 174.724 li
236.725 174.724 li
236.975 174.724 li
237.225 174.724 li
237.475 174.773 li
237.675 174.773 li
237.925 174.773 li
238.175 174.773 li
238.425 174.773 li
238.675 174.824 li
238.925 174.824 li
239.175 174.824 li
239.375 174.824 li
239.625 174.824 li
239.875 174.875 li
240.125 174.875 li
240.375 174.875 li
240.625 174.875 li
240.875 174.875 li
241.075 174.923 li
241.325 174.923 li
241.575 174.923 li
241.825 174.923 li
242.075 174.923 li
242.325 174.974 li
242.525 174.974 li
242.775 174.974 li
192.325 172.273 mo
192.575 172.324 li
192.775 172.324 li
193.025 172.324 li
193.275 172.375 li
193.525 172.375 li
193.775 172.375 li
194.025 172.423 li
194.275 172.423 li
194.475 172.423 li
194.725 172.474 li
194.975 172.474 li
195.225 172.474 li
195.475 172.523 li
195.725 172.523 li
195.975 172.523 li
196.175 172.574 li
196.425 172.574 li
196.675 172.574 li
196.925 172.625 li
197.175 172.625 li
197.425 172.625 li
197.675 172.625 li
197.875 172.673 li
198.125 172.673 li
198.375 172.673 li
198.625 172.724 li
198.875 172.724 li
199.125 172.724 li
199.375 172.773 li
199.575 172.773 li
199.825 172.773 li
200.075 172.824 li
200.325 172.824 li
200.575 172.824 li
200.825 172.824 li
201.025 172.875 li
201.275 172.875 li
201.525 172.875 li
201.775 172.923 li
202.025 172.923 li
202.275 172.923 li
202.525 172.974 li
202.725 172.974 li
202.975 172.974 li
203.225 172.974 li
203.475 173.023 li
203.725 173.023 li
203.975 173.023 li
204.225 173.074 li
204.425 173.074 li
204.675 173.074 li
204.925 173.074 li
205.175 173.125 li
205.425 173.125 li
205.675 173.125 li
205.925 173.173 li
206.125 173.173 li
206.375 173.173 li
206.625 173.173 li
206.875 173.224 li
207.125 173.224 li
207.375 173.224 li
207.625 173.273 li
207.825 173.273 li
208.075 173.273 li
208.325 173.273 li
208.575 173.324 li
208.825 173.324 li
209.075 173.324 li
209.325 173.375 li
209.525 173.375 li
209.775 173.375 li
210.025 173.375 li
210.275 173.423 li
210.525 173.423 li
210.775 173.423 li
210.975 173.423 li
211.225 173.474 li
211.475 173.474 li
211.725 173.474 li
211.975 173.523 li
212.225 173.523 li
212.475 173.523 li
212.675 173.523 li
212.925 173.574 li
213.175 173.574 li
213.425 173.574 li
213.675 173.574 li
213.925 173.625 li
214.175 173.625 li
214.375 173.625 li
214.625 173.625 li
214.875 173.673 li
215.125 173.673 li
215.375 173.673 li
215.625 173.673 li
215.875 173.724 li
216.075 173.724 li
216.325 173.724 li
216.575 173.773 li
216.825 173.773 li
217.075 173.773 li
217.325 173.773 li
217.575 173.824 li
167.075 170.324 mo
167.325 170.324 li
167.575 170.375 li
167.825 170.375 li
168.025 170.375 li
168.275 170.423 li
168.525 170.423 li
168.775 170.474 li
169.025 170.474 li
169.275 170.523 li
169.475 170.523 li
169.725 170.523 li
169.975 170.574 li
170.225 170.574 li
170.475 170.625 li
170.725 170.625 li
170.975 170.673 li
171.175 170.673 li
171.425 170.673 li
171.675 170.724 li
171.925 170.724 li
172.175 170.773 li
172.425 170.773 li
172.675 170.824 li
172.875 170.824 li
173.125 170.824 li
173.375 170.875 li
173.625 170.875 li
173.875 170.923 li
174.125 170.923 li
174.375 170.923 li
174.575 170.974 li
174.825 170.974 li
175.075 171.023 li
175.325 171.023 li
175.575 171.023 li
175.825 171.074 li
176.075 171.074 li
176.275 171.125 li
176.525 171.125 li
176.775 171.125 li
177.025 171.173 li
177.275 171.173 li
177.525 171.224 li
177.775 171.224 li
177.975 171.224 li
178.225 171.273 li
178.475 171.273 li
178.725 171.273 li
178.975 171.324 li
179.225 171.324 li
179.425 171.375 li
179.675 171.375 li
179.925 171.375 li
180.175 171.423 li
180.425 171.423 li
180.675 171.474 li
180.925 171.474 li
181.125 171.474 li
181.375 171.523 li
181.625 171.523 li
181.875 171.523 li
182.125 171.574 li
182.375 171.574 li
182.625 171.574 li
182.825 171.625 li
183.075 171.625 li
183.325 171.673 li
183.575 171.673 li
183.825 171.673 li
184.075 171.724 li
184.325 171.724 li
184.525 171.724 li
184.775 171.773 li
185.025 171.773 li
185.275 171.773 li
185.525 171.824 li
185.775 171.824 li
186.025 171.875 li
186.225 171.875 li
186.475 171.875 li
186.725 171.923 li
186.975 171.923 li
187.225 171.923 li
187.475 171.974 li
187.725 171.974 li
187.925 171.974 li
188.175 172.025 li
188.425 172.025 li
188.675 172.025 li
188.925 172.074 li
189.175 172.074 li
189.425 172.074 li
189.625 172.125 li
189.875 172.125 li
190.125 172.125 li
190.375 172.173 li
190.625 172.173 li
190.875 172.173 li
191.075 172.224 li
191.325 172.224 li
191.575 172.224 li
191.825 172.275 li
192.075 172.275 li
192.325 172.275 li
141.825 167.574 mo
142.075 167.625 li
142.325 167.625 li
142.575 167.673 li
142.825 167.724 li
143.025 167.724 li
143.275 167.773 li
143.525 167.773 li
143.775 167.824 li
144.025 167.875 li
144.275 167.875 li
144.525 167.923 li
144.725 167.923 li
144.975 167.974 li
145.225 168.023 li
145.475 168.023 li
145.725 168.074 li
145.975 168.074 li
146.225 168.125 li
146.425 168.125 li
146.675 168.173 li
146.925 168.224 li
147.175 168.224 li
147.425 168.273 li
147.675 168.273 li
147.875 168.324 li
148.125 168.375 li
148.375 168.375 li
148.625 168.423 li
148.875 168.423 li
149.125 168.474 li
149.375 168.474 li
149.575 168.523 li
149.825 168.523 li
150.075 168.574 li
150.325 168.625 li
150.575 168.625 li
150.825 168.673 li
151.075 168.673 li
151.275 168.724 li
151.525 168.724 li
151.775 168.773 li
152.025 168.773 li
152.275 168.824 li
152.525 168.824 li
152.775 168.875 li
152.975 168.923 li
153.225 168.923 li
153.475 168.974 li
153.725 168.974 li
153.975 169.023 li
154.225 169.023 li
154.475 169.074 li
154.675 169.074 li
154.925 169.125 li
155.175 169.125 li
155.425 169.173 li
155.675 169.173 li
155.925 169.224 li
156.175 169.224 li
156.375 169.275 li
156.625 169.275 li
156.875 169.324 li
157.125 169.324 li
157.375 169.375 li
157.625 169.375 li
157.875 169.423 li
158.075 169.423 li
158.325 169.474 li
158.575 169.474 li
158.825 169.525 li
159.075 169.525 li
159.325 169.574 li
159.524 169.574 li
159.774 169.625 li
160.024 169.625 li
160.274 169.673 li
160.524 169.673 li
160.774 169.724 li
161.024 169.724 li
161.225 169.775 li
161.475 169.775 li
161.725 169.824 li
161.975 169.824 li
162.225 169.875 li
162.475 169.875 li
162.725 169.875 li
162.925 169.923 li
163.175 169.923 li
163.425 169.974 li
163.675 169.974 li
163.925 170.025 li
164.175 170.025 li
164.425 170.074 li
164.625 170.074 li
164.875 170.125 li
165.125 170.125 li
165.375 170.173 li
165.625 170.173 li
165.875 170.173 li
166.125 170.224 li
166.325 170.224 li
166.575 170.275 li
166.825 170.275 li
167.075 170.324 li
116.575 163.625 mo
116.825 163.673 li
117.075 163.724 li
117.325 163.773 li
117.575 163.824 li
117.825 163.875 li
118.025 163.875 li
118.275 163.923 li
118.525 163.974 li
118.775 164.023 li
119.025 164.074 li
119.275 164.125 li
119.525 164.173 li
119.725 164.224 li
119.975 164.273 li
120.225 164.273 li
120.475 164.324 li
120.725 164.375 li
120.975 164.423 li
121.225 164.474 li
121.425 164.523 li
121.675 164.574 li
121.925 164.574 li
122.175 164.625 li
122.425 164.673 li
122.675 164.724 li
122.925 164.773 li
123.125 164.824 li
123.375 164.875 li
123.625 164.875 li
123.875 164.923 li
124.125 164.974 li
124.375 165.023 li
124.625 165.074 li
124.825 165.074 li
125.075 165.125 li
125.325 165.173 li
125.575 165.224 li
125.825 165.275 li
126.075 165.275 li
126.325 165.324 li
126.525 165.375 li
126.775 165.423 li
127.025 165.474 li
127.275 165.474 li
127.525 165.525 li
127.775 165.574 li
127.975 165.625 li
128.225 165.625 li
128.475 165.673 li
128.725 165.724 li
128.975 165.775 li
129.225 165.775 li
129.475 165.824 li
129.675 165.875 li
129.925 165.923 li
130.175 165.923 li
130.425 165.974 li
130.675 166.025 li
130.925 166.074 li
131.175 166.074 li
131.375 166.125 li
131.625 166.173 li
131.875 166.224 li
132.125 166.224 li
132.375 166.275 li
132.625 166.324 li
132.875 166.324 li
133.075 166.375 li
133.325 166.423 li
133.575 166.474 li
133.825 166.474 li
134.075 166.525 li
134.325 166.574 li
134.575 166.574 li
134.775 166.625 li
135.025 166.673 li
135.275 166.673 li
135.525 166.724 li
135.775 166.775 li
136.024 166.775 li
136.274 166.824 li
136.475 166.875 li
136.725 166.875 li
136.975 166.923 li
137.225 166.974 li
137.475 166.974 li
137.725 167.025 li
137.925 167.074 li
138.175 167.074 li
138.425 167.125 li
138.675 167.175 li
138.925 167.175 li
139.175 167.224 li
139.425 167.275 li
139.625 167.275 li
139.875 167.324 li
140.125 167.375 li
140.375 167.375 li
140.625 167.425 li
140.875 167.474 li
141.125 167.474 li
141.325 167.525 li
141.575 167.525 li
141.825 167.574 li
91.375 157.423 mo
91.5752 157.523 li
91.8252 157.574 li
92.0752 157.673 li
92.3252 157.724 li
92.5752 157.824 li
92.8252 157.875 li
93.0752 157.974 li
93.2749 158.023 li
93.5249 158.074 li
93.7749 158.173 li
94.0249 158.224 li
94.2749 158.324 li
94.5249 158.375 li
94.7749 158.474 li
94.9751 158.523 li
95.2251 158.574 li
95.4751 158.673 li
95.7251 158.724 li
95.9751 158.824 li
96.2251 158.875 li
96.4248 158.923 li
96.6748 159.023 li
96.9253 159.074 li
97.1753 159.125 li
97.4253 159.224 li
97.6753 159.273 li
97.9253 159.324 li
98.125 159.423 li
98.375 159.474 li
98.625 159.523 li
98.875 159.625 li
99.125 159.673 li
99.375 159.724 li
99.625 159.824 li
99.8252 159.875 li
100.075 159.923 li
100.325 159.974 li
100.575 160.074 li
100.825 160.125 li
101.075 160.173 li
101.325 160.224 li
101.525 160.324 li
101.775 160.375 li
102.025 160.423 li
102.275 160.474 li
102.525 160.574 li
102.775 160.625 li
103.025 160.673 li
103.225 160.724 li
103.475 160.773 li
103.725 160.824 li
103.975 160.923 li
104.225 160.974 li
104.475 161.023 li
104.725 161.074 li
104.925 161.125 li
105.175 161.173 li
105.425 161.273 li
105.675 161.324 li
105.925 161.375 li
106.175 161.423 li
106.375 161.474 li
106.625 161.523 li
106.875 161.574 li
107.125 161.625 li
107.375 161.724 li
107.625 161.773 li
107.875 161.824 li
108.075 161.875 li
108.325 161.923 li
108.575 161.974 li
108.825 162.025 li
109.075 162.074 li
109.325 162.125 li
109.575 162.173 li
109.775 162.224 li
110.025 162.275 li
110.275 162.324 li
110.525 162.375 li
110.775 162.423 li
111.025 162.474 li
111.275 162.574 li
111.475 162.625 li
111.725 162.673 li
111.975 162.724 li
112.225 162.775 li
112.475 162.824 li
112.725 162.875 li
112.975 162.923 li
113.175 162.974 li
113.425 163.025 li
113.675 163.074 li
113.925 163.074 li
114.175 163.125 li
114.425 163.173 li
114.675 163.224 li
114.875 163.275 li
115.125 163.324 li
115.375 163.375 li
115.625 163.423 li
115.875 163.474 li
116.125 163.525 li
116.325 163.574 li
116.575 163.625 li
66.125 146.423 mo
66.375 146.574 li
66.5752 146.724 li
66.8252 146.875 li
67.0752 147.023 li
67.3252 147.173 li
67.5752 147.273 li
67.8252 147.423 li
68.0752 147.574 li
68.2749 147.724 li
68.5249 147.875 li
68.7749 147.974 li
69.0249 148.125 li
69.2749 148.273 li
69.5249 148.375 li
69.7749 148.523 li
69.9751 148.673 li
70.2251 148.773 li
70.4751 148.923 li
70.7251 149.023 li
70.9751 149.173 li
71.2251 149.273 li
71.4751 149.423 li
71.6753 149.523 li
71.9253 149.673 li
72.1753 149.773 li
72.4253 149.923 li
72.6753 150.023 li
72.9253 150.173 li
73.1753 150.273 li
73.375 150.373 li
73.625 150.523 li
73.875 150.623 li
74.125 150.724 li
74.375 150.873 li
74.625 150.974 li
74.8252 151.074 li
75.0752 151.224 li
75.3252 151.324 li
75.5752 151.423 li
75.8252 151.523 li
76.0752 151.673 li
76.3252 151.773 li
76.5254 151.873 li
76.7754 151.974 li
77.0254 152.074 li
77.2754 152.173 li
77.5254 152.324 li
77.7754 152.423 li
78.0254 152.523 li
78.2251 152.623 li
78.4751 152.724 li
78.7251 152.824 li
78.9751 152.923 li
79.2251 153.023 li
79.4751 153.123 li
79.7251 153.224 li
79.9253 153.324 li
80.1753 153.423 li
80.4253 153.523 li
80.6753 153.623 li
80.9253 153.724 li
81.1753 153.824 li
81.4253 153.923 li
81.625 154.023 li
81.875 154.123 li
82.125 154.224 li
82.375 154.273 li
82.625 154.373 li
82.875 154.474 li
83.125 154.574 li
83.3252 154.673 li
83.5752 154.773 li
83.8252 154.873 li
84.0752 154.923 li
84.3252 155.023 li
84.5752 155.123 li
84.7754 155.222 li
85.0254 155.273 li
85.2754 155.373 li
85.5254 155.472 li
85.7754 155.574 li
86.0254 155.623 li
86.2754 155.722 li
86.4751 155.824 li
86.7251 155.923 li
86.9751 155.972 li
87.2251 156.074 li
87.4751 156.173 li
87.7251 156.222 li
87.9751 156.324 li
88.1753 156.423 li
88.4253 156.472 li
88.6753 156.574 li
88.9253 156.623 li
89.1753 156.722 li
89.4253 156.824 li
89.6753 156.873 li
89.8755 156.972 li
90.1255 157.023 li
90.3755 157.123 li
90.6255 157.173 li
90.8755 157.273 li
91.1255 157.373 li
91.3755 157.423 li
40.875 121.523 mo
41.125 121.923 li
41.375 122.324 li
41.625 122.724 li
41.8252 123.074 li
42.0752 123.474 li
42.3252 123.824 li
42.5752 124.173 li
42.8252 124.523 li
43.0752 124.875 li
43.2749 125.224 li
43.5249 125.574 li
43.7749 125.923 li
44.0249 126.273 li
44.2749 126.625 li
44.5249 126.923 li
44.7749 127.273 li
44.9751 127.574 li
45.2251 127.923 li
45.4751 128.224 li
45.7251 128.523 li
45.9751 128.824 li
46.2251 129.125 li
46.4751 129.474 li
46.6753 129.724 li
46.9253 130.023 li
47.1753 130.324 li
47.4253 130.625 li
47.6753 130.923 li
47.9253 131.173 li
48.1753 131.474 li
48.375 131.773 li
48.625 132.023 li
48.875 132.324 li
49.125 132.574 li
49.375 132.824 li
49.625 133.125 li
49.875 133.375 li
50.0752 133.625 li
50.3252 133.875 li
50.5752 134.125 li
50.8252 134.375 li
51.0752 134.625 li
51.3252 134.875 li
51.5752 135.125 li
51.7754 135.375 li
52.0254 135.625 li
52.2754 135.824 li
52.5254 136.074 li
52.7754 136.324 li
53.0254 136.523 li
53.2251 136.773 li
53.4751 136.974 li
53.7251 137.224 li
53.9751 137.423 li
54.2251 137.673 li
54.4751 137.875 li
54.7251 138.074 li
54.9253 138.324 li
55.1753 138.523 li
55.4253 138.724 li
55.6753 138.923 li
55.9253 139.125 li
56.1753 139.375 li
56.4253 139.574 li
56.625 139.773 li
56.875 139.974 li
57.125 140.173 li
57.375 140.375 li
57.625 140.523 li
57.875 140.724 li
58.125 140.923 li
58.3252 141.125 li
58.5752 141.324 li
58.8252 141.474 li
59.0752 141.673 li
59.3252 141.875 li
59.5752 142.023 li
59.8252 142.224 li
60.0254 142.423 li
60.2754 142.574 li
60.5254 142.773 li
60.7754 142.923 li
61.0254 143.125 li
61.2754 143.273 li
61.5254 143.423 li
61.7251 143.625 li
61.9751 143.773 li
62.2251 143.923 li
62.4751 144.125 li
62.7251 144.273 li
62.9751 144.423 li
63.2251 144.574 li
63.4253 144.773 li
63.6753 144.923 li
63.9253 145.074 li
64.1753 145.224 li
64.4253 145.375 li
64.6753 145.523 li
64.8755 145.673 li
65.1255 145.824 li
65.3755 145.974 li
65.6255 146.125 li
65.8755 146.273 li
66.1255 146.423 li
16.125 93.3735 mo
16.375 63.9238 li
16.625 49.9736 li
16.8252 42.6738 li
17.0752 38.7236 li
17.3252 36.8237 li
17.5752 36.1235 li
17.8252 36.2734 li
18.0752 36.8735 li
18.3252 37.8735 li
18.5249 39.1235 li
18.7749 40.5234 li
19.0249 42.0234 li
19.2749 43.6235 li
19.5249 45.2734 li
19.7749 46.9238 li
20.0249 48.5737 li
20.2251 50.2236 li
20.4751 51.8735 li
20.7251 53.5234 li
20.9751 55.1235 li
21.2251 56.7236 li
21.4751 58.2734 li
21.6753 59.8237 li
21.9253 61.3237 li
22.1753 62.7734 li
22.4253 64.2236 li
22.6753 65.6738 li
22.9253 67.0234 li
23.1753 68.4238 li
23.375 69.7236 li
23.625 71.0234 li
23.875 72.3237 li
24.125 73.5737 li
24.375 74.7734 li
24.625 75.9736 li
24.875 77.1235 li
25.0752 78.2734 li
25.3252 79.3735 li
25.5752 80.4736 li
25.8252 81.5737 li
26.0752 82.6235 li
26.3252 83.6738 li
26.5752 84.6738 li
26.7749 85.6738 li
27.0254 86.6235 li
27.2754 87.5737 li
27.5254 88.5234 li
27.7754 89.4238 li
28.0254 90.3237 li
28.2754 91.1738 li
28.4751 92.0737 li
28.7251 92.9238 li
28.9751 93.7236 li
29.2251 94.5737 li
29.4751 95.3735 li
29.7251 96.1235 li
29.9751 96.9238 li
30.1753 97.6738 li
30.4253 98.4233 li
30.6753 99.1245 li
30.9253 99.8745 li
31.1753 100.574 li
31.4253 101.273 li
31.6753 101.974 li
31.875 102.625 li
32.125 103.273 li
32.375 103.923 li
32.625 104.574 li
32.875 105.224 li
33.125 105.824 li
33.3252 106.423 li
33.5752 107.023 li
33.8252 107.625 li
34.0752 108.224 li
34.3252 108.773 li
34.5752 109.375 li
34.8252 109.923 li
35.0254 110.474 li
35.2754 110.974 li
35.5254 111.523 li
35.7754 112.074 li
36.0254 112.574 li
36.2754 113.074 li
36.5254 113.574 li
36.7251 114.074 li
36.9751 114.574 li
37.2251 115.023 li
37.4751 115.523 li
37.7251 115.974 li
37.9751 116.474 li
38.2251 116.923 li
38.4253 117.375 li
38.6753 117.824 li
38.9253 118.224 li
39.1753 118.673 li
39.4253 119.125 li
39.6753 119.523 li
39.9253 119.923 li
40.1255 120.324 li
40.3755 120.773 li
40.6255 121.173 li
40.8755 121.523 li
229.975 10.3237 mo
249.925 10.3237 li
@
NHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf200.594 19.6616 mo( = )[1.94629 4.08789 0 ]xsh208.563 19.6616 mo(1)sh0.125 lw
[0.5 1 ] 0 dsh
242.775 170.923 mo
243.025 170.923 li
243.275 170.974 li
243.525 170.974 li
243.775 171.023 li
244.025 171.023 li
244.225 171.023 li
244.475 171.074 li
244.725 171.074 li
244.975 171.125 li
245.225 171.125 li
245.475 171.173 li
245.725 171.173 li
245.925 171.224 li
246.175 171.224 li
246.425 171.273 li
246.675 171.273 li
246.925 171.273 li
247.175 171.324 li
247.425 171.324 li
247.625 171.375 li
247.875 171.375 li
248.125 171.423 li
248.375 171.423 li
248.625 171.474 li
248.875 171.474 li
249.125 171.474 li
249.325 171.523 li
249.575 171.523 li
249.825 171.574 li
250.075 171.574 li
250.325 171.625 li
250.575 171.625 li
250.825 171.625 li
251.025 171.673 li
251.275 171.673 li
251.525 171.724 li
251.775 171.724 li
252.025 171.773 li
252.275 171.773 li
252.525 171.773 li
252.725 171.824 li
252.975 171.824 li
253.225 171.875 li
253.475 171.875 li
253.725 171.923 li
253.975 171.923 li
254.175 171.923 li
254.425 171.974 li
254.675 171.974 li
254.925 172.023 li
255.175 172.023 li
255.425 172.023 li
255.675 172.074 li
255.875 172.074 li
256.125 172.125 li
256.375 172.125 li
256.625 172.173 li
256.875 172.173 li
257.125 172.173 li
257.375 172.224 li
257.575 172.224 li
257.825 172.273 li
258.075 172.273 li
258.325 172.273 li
217.575 168.125 mo
217.775 168.173 li
218.025 168.173 li
218.275 168.224 li
218.525 168.273 li
218.775 168.273 li
219.025 168.324 li
219.275 168.324 li
219.475 168.375 li
219.725 168.375 li
219.975 168.423 li
220.225 168.474 li
220.475 168.474 li
220.725 168.523 li
220.975 168.523 li
221.175 168.574 li
221.425 168.625 li
221.675 168.625 li
221.925 168.673 li
222.175 168.673 li
222.425 168.724 li
222.625 168.773 li
222.875 168.773 li
223.125 168.824 li
223.375 168.824 li
223.625 168.875 li
223.875 168.875 li
224.125 168.923 li
224.325 168.974 li
224.575 168.974 li
224.825 169.023 li
225.075 169.023 li
225.325 169.074 li
225.575 169.074 li
225.825 169.125 li
226.025 169.125 li
226.275 169.173 li
226.525 169.224 li
226.775 169.224 li
227.025 169.273 li
227.275 169.273 li
227.525 169.324 li
227.725 169.324 li
227.975 169.375 li
228.225 169.375 li
228.475 169.423 li
228.725 169.423 li
228.975 169.474 li
229.225 169.523 li
229.425 169.523 li
229.675 169.574 li
229.925 169.574 li
230.175 169.625 li
230.425 169.625 li
230.675 169.673 li
230.925 169.673 li
231.125 169.724 li
231.375 169.724 li
231.625 169.775 li
231.875 169.775 li
232.125 169.824 li
232.375 169.824 li
232.575 169.875 li
232.825 169.875 li
233.075 169.923 li
233.325 169.974 li
233.575 169.974 li
233.825 170.025 li
234.075 170.025 li
234.275 170.074 li
234.525 170.074 li
234.775 170.125 li
235.025 170.125 li
235.275 170.173 li
235.525 170.173 li
235.775 170.224 li
235.975 170.224 li
236.225 170.275 li
236.475 170.275 li
236.725 170.324 li
236.975 170.324 li
237.225 170.375 li
237.475 170.375 li
237.675 170.423 li
237.925 170.423 li
238.175 170.474 li
238.425 170.474 li
238.675 170.525 li
238.925 170.525 li
239.175 170.574 li
239.375 170.574 li
239.625 170.574 li
239.875 170.625 li
240.125 170.625 li
240.375 170.673 li
240.625 170.673 li
240.875 170.724 li
241.075 170.724 li
241.325 170.775 li
241.575 170.775 li
241.825 170.824 li
242.075 170.824 li
242.325 170.875 li
242.525 170.875 li
242.775 170.923 li
192.325 164.474 mo
192.575 164.523 li
192.775 164.574 li
193.025 164.625 li
193.275 164.625 li
193.525 164.673 li
193.775 164.724 li
194.025 164.773 li
194.275 164.824 li
194.475 164.824 li
194.725 164.875 li
194.975 164.923 li
195.225 164.974 li
195.475 165.023 li
195.725 165.023 li
195.975 165.074 li
196.175 165.125 li
196.425 165.173 li
196.675 165.173 li
196.925 165.224 li
197.175 165.273 li
197.425 165.324 li
197.675 165.324 li
197.875 165.375 li
198.125 165.423 li
198.375 165.474 li
198.625 165.474 li
198.875 165.523 li
199.125 165.574 li
199.375 165.625 li
199.575 165.625 li
199.825 165.673 li
200.075 165.724 li
200.325 165.773 li
200.575 165.773 li
200.825 165.824 li
201.025 165.875 li
201.275 165.923 li
201.525 165.923 li
201.775 165.974 li
202.025 166.023 li
202.275 166.023 li
202.525 166.074 li
202.725 166.125 li
202.975 166.173 li
203.225 166.173 li
203.475 166.224 li
203.725 166.275 li
203.975 166.275 li
204.225 166.324 li
204.425 166.375 li
204.675 166.375 li
204.925 166.423 li
205.175 166.474 li
205.425 166.525 li
205.675 166.525 li
205.925 166.574 li
206.125 166.625 li
206.375 166.625 li
206.625 166.673 li
206.875 166.724 li
207.125 166.724 li
207.375 166.775 li
207.625 166.824 li
207.825 166.824 li
208.075 166.875 li
208.325 166.923 li
208.575 166.923 li
208.825 166.974 li
209.075 167.025 li
209.325 167.025 li
209.525 167.074 li
209.775 167.125 li
210.025 167.125 li
210.275 167.173 li
210.525 167.224 li
210.775 167.224 li
210.975 167.275 li
211.225 167.324 li
211.475 167.324 li
211.725 167.375 li
211.975 167.423 li
212.225 167.423 li
212.475 167.474 li
212.675 167.525 li
212.925 167.525 li
213.175 167.574 li
213.425 167.625 li
213.675 167.625 li
213.925 167.673 li
214.175 167.673 li
214.375 167.724 li
214.625 167.775 li
214.875 167.775 li
215.125 167.824 li
215.375 167.875 li
215.625 167.875 li
215.875 167.923 li
216.075 167.923 li
216.325 167.974 li
216.575 168.025 li
216.825 168.025 li
217.075 168.074 li
217.325 168.074 li
217.575 168.125 li
167.075 159.673 mo
167.325 159.724 li
167.575 159.773 li
167.825 159.824 li
168.025 159.875 li
168.275 159.923 li
168.525 159.974 li
168.775 160.023 li
169.025 160.074 li
169.275 160.125 li
169.475 160.173 li
169.725 160.224 li
169.975 160.273 li
170.225 160.324 li
170.475 160.375 li
170.725 160.423 li
170.975 160.474 li
171.175 160.523 li
171.425 160.574 li
171.675 160.673 li
171.925 160.724 li
172.175 160.773 li
172.425 160.824 li
172.675 160.875 li
172.875 160.923 li
173.125 160.974 li
173.375 161.023 li
173.625 161.074 li
173.875 161.125 li
174.125 161.173 li
174.375 161.173 li
174.575 161.224 li
174.825 161.273 li
175.075 161.324 li
175.325 161.375 li
175.575 161.423 li
175.825 161.474 li
176.075 161.525 li
176.275 161.574 li
176.525 161.625 li
176.775 161.673 li
177.025 161.724 li
177.275 161.775 li
177.525 161.824 li
177.775 161.875 li
177.975 161.923 li
178.225 161.974 li
178.475 162.025 li
178.725 162.074 li
178.975 162.125 li
179.225 162.173 li
179.425 162.224 li
179.675 162.224 li
179.925 162.275 li
180.175 162.324 li
180.425 162.375 li
180.675 162.423 li
180.925 162.474 li
181.125 162.525 li
181.375 162.574 li
181.625 162.625 li
181.875 162.673 li
182.125 162.724 li
182.375 162.724 li
182.625 162.775 li
182.825 162.824 li
183.075 162.875 li
183.325 162.923 li
183.575 162.974 li
183.825 163.025 li
184.075 163.074 li
184.325 163.125 li
184.525 163.125 li
184.775 163.173 li
185.025 163.224 li
185.275 163.275 li
185.525 163.324 li
185.775 163.375 li
186.025 163.425 li
186.225 163.474 li
186.475 163.474 li
186.725 163.525 li
186.975 163.574 li
187.225 163.625 li
187.475 163.675 li
187.725 163.724 li
187.925 163.724 li
188.175 163.775 li
188.425 163.824 li
188.675 163.875 li
188.925 163.925 li
189.175 163.974 li
189.425 163.974 li
189.625 164.025 li
189.875 164.074 li
190.125 164.125 li
190.375 164.175 li
190.625 164.224 li
190.875 164.224 li
191.075 164.275 li
191.325 164.324 li
191.575 164.375 li
191.825 164.425 li
192.075 164.425 li
192.325 164.474 li
141.825 153.173 mo
142.075 153.273 li
142.325 153.324 li
142.575 153.423 li
142.825 153.474 li
143.025 153.574 li
143.275 153.625 li
143.525 153.673 li
143.775 153.773 li
144.025 153.824 li
144.275 153.923 li
144.525 153.974 li
144.725 154.023 li
144.975 154.125 li
145.225 154.173 li
145.475 154.273 li
145.725 154.324 li
145.975 154.375 li
146.225 154.474 li
146.425 154.523 li
146.675 154.574 li
146.925 154.673 li
147.175 154.724 li
147.425 154.773 li
147.675 154.875 li
147.875 154.923 li
148.125 154.974 li
148.375 155.074 li
148.625 155.125 li
148.875 155.173 li
149.125 155.273 li
149.375 155.324 li
149.575 155.375 li
149.825 155.474 li
150.075 155.523 li
150.325 155.574 li
150.575 155.673 li
150.825 155.724 li
151.075 155.773 li
151.275 155.824 li
151.525 155.923 li
151.775 155.974 li
152.025 156.023 li
152.275 156.125 li
152.525 156.173 li
152.775 156.224 li
152.975 156.273 li
153.225 156.375 li
153.475 156.423 li
153.725 156.474 li
153.975 156.523 li
154.225 156.625 li
154.475 156.673 li
154.675 156.724 li
154.925 156.773 li
155.175 156.875 li
155.425 156.923 li
155.675 156.974 li
155.925 157.023 li
156.175 157.074 li
156.375 157.173 li
156.625 157.224 li
156.875 157.273 li
157.125 157.324 li
157.375 157.375 li
157.625 157.474 li
157.875 157.523 li
158.075 157.574 li
158.325 157.625 li
158.575 157.673 li
158.825 157.773 li
159.075 157.824 li
159.325 157.875 li
159.524 157.923 li
159.774 157.974 li
160.024 158.023 li
160.274 158.125 li
160.524 158.173 li
160.774 158.224 li
161.024 158.275 li
161.225 158.324 li
161.475 158.375 li
161.725 158.423 li
161.975 158.525 li
162.225 158.574 li
162.475 158.625 li
162.725 158.673 li
162.925 158.724 li
163.175 158.775 li
163.425 158.824 li
163.675 158.875 li
163.925 158.974 li
164.175 159.025 li
164.425 159.074 li
164.625 159.125 li
164.875 159.173 li
165.125 159.224 li
165.375 159.275 li
165.625 159.324 li
165.875 159.375 li
166.125 159.423 li
166.325 159.525 li
166.575 159.574 li
166.825 159.625 li
167.075 159.673 li
116.575 144.523 mo
116.825 144.625 li
117.075 144.724 li
117.325 144.824 li
117.575 144.923 li
117.825 145.023 li
118.025 145.125 li
118.275 145.224 li
118.525 145.273 li
118.775 145.375 li
119.025 145.474 li
119.275 145.574 li
119.525 145.673 li
119.725 145.773 li
119.975 145.873 li
120.225 145.923 li
120.475 146.023 li
120.725 146.123 li
120.975 146.224 li
121.225 146.324 li
121.425 146.423 li
121.675 146.474 li
121.925 146.574 li
122.175 146.673 li
122.425 146.773 li
122.675 146.873 li
122.925 146.923 li
123.125 147.023 li
123.375 147.123 li
123.625 147.224 li
123.875 147.273 li
124.125 147.373 li
124.375 147.474 li
124.625 147.574 li
124.825 147.623 li
125.075 147.724 li
125.325 147.824 li
125.575 147.923 li
125.825 147.974 li
126.075 148.074 li
126.325 148.173 li
126.525 148.273 li
126.775 148.324 li
127.025 148.423 li
127.275 148.523 li
127.525 148.574 li
127.775 148.673 li
127.975 148.773 li
128.225 148.824 li
128.475 148.923 li
128.725 149.023 li
128.975 149.074 li
129.225 149.173 li
129.475 149.273 li
129.675 149.324 li
129.925 149.423 li
130.175 149.523 li
130.425 149.574 li
130.675 149.673 li
130.925 149.773 li
131.175 149.824 li
131.375 149.923 li
131.625 149.974 li
131.875 150.074 li
132.125 150.173 li
132.375 150.224 li
132.625 150.324 li
132.875 150.373 li
133.075 150.474 li
133.325 150.574 li
133.575 150.623 li
133.825 150.724 li
134.075 150.773 li
134.325 150.873 li
134.575 150.974 li
134.775 151.023 li
135.025 151.123 li
135.275 151.173 li
135.525 151.273 li
135.775 151.324 li
136.024 151.423 li
136.274 151.474 li
136.475 151.574 li
136.725 151.623 li
136.975 151.724 li
137.225 151.773 li
137.475 151.873 li
137.725 151.923 li
137.925 152.023 li
138.175 152.074 li
138.425 152.173 li
138.675 152.224 li
138.925 152.324 li
139.175 152.373 li
139.425 152.474 li
139.625 152.523 li
139.875 152.623 li
140.125 152.673 li
140.375 152.773 li
140.625 152.824 li
140.875 152.923 li
141.125 152.974 li
141.325 153.074 li
141.575 153.123 li
141.825 153.173 li
91.375 133.324 mo
91.5752 133.423 li
91.8252 133.574 li
92.0752 133.673 li
92.3252 133.773 li
92.5752 133.923 li
92.8252 134.023 li
93.0752 134.125 li
93.2749 134.273 li
93.5249 134.375 li
93.7749 134.474 li
94.0249 134.625 li
94.2749 134.724 li
94.5249 134.824 li
94.7749 134.974 li
94.9751 135.074 li
95.2251 135.173 li
95.4751 135.324 li
95.7251 135.423 li
95.9751 135.523 li
96.2251 135.673 li
96.4248 135.773 li
96.6748 135.873 li
96.9253 136.023 li
97.1753 136.123 li
97.4253 136.224 li
97.6753 136.324 li
97.9253 136.474 li
98.125 136.574 li
98.375 136.673 li
98.625 136.824 li
98.875 136.923 li
99.125 137.023 li
99.375 137.123 li
99.625 137.273 li
99.8252 137.373 li
100.075 137.474 li
100.325 137.574 li
100.575 137.724 li
100.825 137.824 li
101.075 137.923 li
101.325 138.023 li
101.525 138.123 li
101.775 138.273 li
102.025 138.373 li
102.275 138.474 li
102.525 138.574 li
102.775 138.673 li
103.025 138.824 li
103.225 138.923 li
103.475 139.023 li
103.725 139.123 li
103.975 139.224 li
104.225 139.324 li
104.475 139.474 li
104.725 139.574 li
104.925 139.673 li
105.175 139.773 li
105.425 139.873 li
105.675 139.974 li
105.925 140.074 li
106.175 140.224 li
106.375 140.324 li
106.625 140.423 li
106.875 140.523 li
107.125 140.623 li
107.375 140.722 li
107.625 140.824 li
107.875 140.923 li
108.075 141.023 li
108.325 141.173 li
108.575 141.273 li
108.825 141.373 li
109.075 141.472 li
109.325 141.574 li
109.575 141.673 li
109.775 141.773 li
110.025 141.873 li
110.275 141.972 li
110.525 142.074 li
110.775 142.173 li
111.025 142.273 li
111.275 142.373 li
111.475 142.472 li
111.725 142.574 li
111.975 142.673 li
112.225 142.773 li
112.475 142.873 li
112.725 142.972 li
112.975 143.074 li
113.175 143.173 li
113.425 143.273 li
113.675 143.373 li
113.925 143.472 li
114.175 143.574 li
114.425 143.673 li
114.675 143.773 li
114.875 143.873 li
115.125 143.972 li
115.375 144.074 li
115.625 144.173 li
115.875 144.273 li
116.125 144.324 li
116.325 144.423 li
116.575 144.523 li
66.125 121.023 mo
66.375 121.125 li
66.5752 121.224 li
66.8252 121.324 li
67.0752 121.423 li
67.3252 121.523 li
67.5752 121.625 li
67.8252 121.773 li
68.0752 121.875 li
68.2749 121.974 li
68.5249 122.074 li
68.7749 122.173 li
69.0249 122.273 li
69.2749 122.423 li
69.5249 122.523 li
69.7749 122.623 li
69.9751 122.724 li
70.2251 122.873 li
70.4751 122.974 li
70.7251 123.074 li
70.9751 123.173 li
71.2251 123.324 li
71.4751 123.423 li
71.6753 123.523 li
71.9253 123.623 li
72.1753 123.773 li
72.4253 123.873 li
72.6753 123.974 li
72.9253 124.123 li
73.1753 124.224 li
73.375 124.324 li
73.625 124.474 li
73.875 124.574 li
74.125 124.724 li
74.375 124.824 li
74.625 124.923 li
74.8252 125.074 li
75.0752 125.173 li
75.3252 125.273 li
75.5752 125.423 li
75.8252 125.523 li
76.0752 125.673 li
76.3252 125.773 li
76.5254 125.923 li
76.7754 126.023 li
77.0254 126.123 li
77.2754 126.273 li
77.5254 126.373 li
77.7754 126.523 li
78.0254 126.623 li
78.2251 126.724 li
78.4751 126.873 li
78.7251 126.974 li
78.9751 127.123 li
79.2251 127.224 li
79.4751 127.373 li
79.7251 127.474 li
79.9253 127.623 li
80.1753 127.724 li
80.4253 127.824 li
80.6753 127.974 li
80.9253 128.074 li
81.1753 128.224 li
81.4253 128.324 li
81.625 128.474 li
81.875 128.574 li
82.125 128.724 li
82.375 128.824 li
82.625 128.923 li
82.875 129.074 li
83.125 129.173 li
83.3252 129.324 li
83.5752 129.423 li
83.8252 129.574 li
84.0752 129.673 li
84.3252 129.824 li
84.5752 129.923 li
84.7754 130.074 li
85.0254 130.173 li
85.2754 130.273 li
85.5254 130.423 li
85.7754 130.523 li
86.0254 130.673 li
86.2754 130.773 li
86.4751 130.923 li
86.7251 131.023 li
86.9751 131.123 li
87.2251 131.273 li
87.4751 131.373 li
87.7251 131.523 li
87.9751 131.623 li
88.1753 131.773 li
88.4253 131.873 li
88.6753 131.972 li
88.9253 132.123 li
89.1753 132.222 li
89.4253 132.373 li
89.6753 132.472 li
89.8755 132.574 li
90.1255 132.722 li
90.3755 132.824 li
90.6255 132.972 li
90.8755 133.074 li
91.1255 133.173 li
91.3755 133.324 li
40.875 121.324 mo
41.125 121.125 li
41.375 120.875 li
41.625 120.724 li
41.8252 120.523 li
42.0752 120.324 li
42.3252 120.173 li
42.5752 119.974 li
42.8252 119.824 li
43.0752 119.673 li
43.2749 119.523 li
43.5249 119.375 li
43.7749 119.224 li
44.0249 119.125 li
44.2749 118.974 li
44.5249 118.875 li
44.7749 118.724 li
44.9751 118.625 li
45.2251 118.523 li
45.4751 118.423 li
45.7251 118.324 li
45.9751 118.224 li
46.2251 118.173 li
46.4751 118.074 li
46.6753 117.974 li
46.9253 117.923 li
47.1753 117.875 li
47.4253 117.773 li
47.6753 117.724 li
47.9253 117.673 li
48.1753 117.625 li
48.375 117.574 li
48.625 117.523 li
48.875 117.474 li
49.125 117.474 li
49.375 117.423 li
49.625 117.423 li
49.875 117.375 li
50.0752 117.375 li
50.3252 117.324 li
50.5752 117.324 li
50.8252 117.324 li
51.0752 117.324 li
51.3252 117.273 li
51.5752 117.273 li
51.7754 117.273 li
52.0254 117.324 li
52.2754 117.324 li
52.5254 117.324 li
52.7754 117.324 li
53.0254 117.324 li
53.2251 117.375 li
53.4751 117.375 li
53.7251 117.423 li
53.9751 117.423 li
54.2251 117.474 li
54.4751 117.474 li
54.7251 117.523 li
54.9253 117.574 li
55.1753 117.625 li
55.4253 117.625 li
55.6753 117.673 li
55.9253 117.724 li
56.1753 117.773 li
56.4253 117.824 li
56.625 117.875 li
56.875 117.923 li
57.125 117.974 li
57.375 118.023 li
57.625 118.074 li
57.875 118.173 li
58.125 118.224 li
58.3252 118.273 li
58.5752 118.324 li
58.8252 118.423 li
59.0752 118.474 li
59.3252 118.574 li
59.5752 118.625 li
59.8252 118.673 li
60.0254 118.773 li
60.2754 118.824 li
60.5254 118.923 li
60.7754 119.023 li
61.0254 119.074 li
61.2754 119.173 li
61.5254 119.224 li
61.7251 119.324 li
61.9751 119.423 li
62.2251 119.523 li
62.4751 119.574 li
62.7251 119.673 li
62.9751 119.773 li
63.2251 119.875 li
63.4253 119.923 li
63.6753 120.023 li
63.9253 120.125 li
64.1753 120.224 li
64.4253 120.324 li
64.6753 120.423 li
64.8755 120.523 li
65.1255 120.625 li
65.3755 120.724 li
65.6255 120.824 li
65.8755 120.923 li
66.1255 121.023 li
16.125 182.724 mo
16.375 182.724 li
16.625 182.673 li
16.8252 182.625 li
17.0752 182.523 li
17.3252 182.324 li
17.5752 182.074 li
17.8252 181.773 li
18.0752 181.423 li
18.3252 180.974 li
18.5249 180.474 li
18.7749 179.875 li
19.0249 179.273 li
19.2749 178.625 li
19.5249 177.875 li
19.7749 177.125 li
20.0249 176.324 li
20.2251 175.523 li
20.4751 174.673 li
20.7251 173.773 li
20.9751 172.875 li
21.2251 171.974 li
21.4751 171.023 li
21.6753 170.074 li
21.9253 169.123 li
22.1753 168.125 li
22.4253 167.173 li
22.6753 166.173 li
22.9253 165.224 li
23.1753 164.224 li
23.375 163.224 li
23.625 162.273 li
23.875 161.273 li
24.125 160.324 li
24.375 159.373 li
24.625 158.423 li
24.875 157.474 li
25.0752 156.523 li
25.3252 155.574 li
25.5752 154.673 li
25.8252 153.773 li
26.0752 152.873 li
26.3252 151.974 li
26.5752 151.123 li
26.7749 150.273 li
27.0254 149.423 li
27.2754 148.574 li
27.5254 147.773 li
27.7754 146.923 li
28.0254 146.123 li
28.2754 145.373 li
28.4751 144.574 li
28.7251 143.824 li
28.9751 143.123 li
29.2251 142.373 li
29.4751 141.673 li
29.7251 140.974 li
29.9751 140.273 li
30.1753 139.574 li
30.4253 138.923 li
30.6753 138.273 li
30.9253 137.673 li
31.1753 137.023 li
31.4253 136.423 li
31.6753 135.824 li
31.875 135.224 li
32.125 134.673 li
32.375 134.125 li
32.625 133.574 li
32.875 133.023 li
33.125 132.523 li
33.3252 132.023 li
33.5752 131.523 li
33.8252 131.023 li
34.0752 130.574 li
34.3252 130.074 li
34.5752 129.623 li
34.8252 129.224 li
35.0254 128.773 li
35.2754 128.375 li
35.5254 127.923 li
35.7754 127.523 li
36.0254 127.173 li
36.2754 126.773 li
36.5254 126.423 li
36.7251 126.074 li
36.9751 125.724 li
37.2251 125.373 li
37.4751 125.023 li
37.7251 124.724 li
37.9751 124.423 li
38.2251 124.123 li
38.4253 123.824 li
38.6753 123.523 li
38.9253 123.224 li
39.1753 122.974 li
39.4253 122.724 li
39.6753 122.474 li
39.9253 122.224 li
40.1255 121.974 li
40.3755 121.724 li
40.6255 121.523 li
40.8755 121.324 li
229.975 17.3237 mo
249.925 17.3237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/slash <1C60D8A8C9B854D08E823E34E98D69F07852149357481CB22577590CC2367BB833216B> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNU+Helvetica /Encoding getdup 47 /slash putpop%ADOEndSubsetFont
/NHWRNU+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six /.notdef /eight 4{/.notdef}rp /equal 194{/.notdef}rp]NHWRNU+Helvetica nfNHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf200.594 26.6616 mo( = 1/2)[1.94629 4.08789 1.94629 3.8916 1.94629 0 ]xsh0.25 lw
[2 3 ] 0 dsh
242.775 174.724 mo
243.025 174.773 li
243.275 174.824 li
243.525 174.824 li
243.775 174.875 li
244.025 174.923 li
244.225 174.974 li
244.475 174.974 li
244.725 175.023 li
244.975 175.074 li
245.225 175.074 li
245.475 175.125 li
245.725 175.173 li
245.925 175.224 li
246.175 175.224 li
246.425 175.273 li
246.675 175.324 li
246.925 175.324 li
247.175 175.375 li
247.425 175.423 li
247.625 175.423 li
247.875 175.474 li
248.125 175.523 li
248.375 175.523 li
248.625 175.574 li
248.875 175.625 li
249.125 175.673 li
249.325 175.673 li
249.575 175.724 li
249.825 175.724 li
250.075 175.773 li
250.325 175.824 li
250.575 175.824 li
250.825 175.875 li
251.025 175.923 li
251.275 175.923 li
251.525 175.974 li
251.775 176.023 li
252.025 176.023 li
252.275 176.074 li
252.525 176.074 li
252.725 176.125 li
252.975 176.173 li
253.225 176.173 li
253.475 176.224 li
253.725 176.275 li
253.975 176.275 li
254.175 176.324 li
254.425 176.324 li
254.675 176.375 li
254.925 176.423 li
255.175 176.423 li
255.425 176.474 li
255.675 176.474 li
255.875 176.525 li
256.125 176.525 li
256.375 176.574 li
256.625 176.625 li
256.875 176.625 li
257.125 176.673 li
257.375 176.673 li
257.575 176.724 li
257.825 176.724 li
258.075 176.775 li
258.325 176.824 li
217.575 169.673 mo
217.775 169.724 li
218.025 169.773 li
218.275 169.824 li
218.525 169.923 li
218.775 169.974 li
219.025 170.023 li
219.275 170.074 li
219.475 170.125 li
219.725 170.224 li
219.975 170.273 li
220.225 170.324 li
220.475 170.375 li
220.725 170.423 li
220.975 170.474 li
221.175 170.574 li
221.425 170.625 li
221.675 170.673 li
221.925 170.724 li
222.175 170.773 li
222.425 170.824 li
222.625 170.875 li
222.875 170.974 li
223.125 171.023 li
223.375 171.074 li
223.625 171.125 li
223.875 171.173 li
224.125 171.224 li
224.325 171.273 li
224.575 171.324 li
224.825 171.375 li
225.075 171.423 li
225.325 171.474 li
225.575 171.523 li
225.825 171.625 li
226.025 171.673 li
226.275 171.724 li
226.525 171.773 li
226.775 171.824 li
227.025 171.875 li
227.275 171.923 li
227.525 171.974 li
227.725 172.023 li
227.975 172.074 li
228.225 172.125 li
228.475 172.173 li
228.725 172.224 li
228.975 172.275 li
229.225 172.324 li
229.425 172.375 li
229.675 172.423 li
229.925 172.474 li
230.175 172.525 li
230.425 172.574 li
230.675 172.625 li
230.925 172.673 li
231.125 172.724 li
231.375 172.724 li
231.625 172.775 li
231.875 172.824 li
232.125 172.875 li
232.375 172.923 li
232.575 172.974 li
232.825 173.025 li
233.075 173.074 li
233.325 173.125 li
233.575 173.173 li
233.825 173.224 li
234.075 173.275 li
234.275 173.275 li
234.525 173.324 li
234.775 173.375 li
235.025 173.423 li
235.275 173.474 li
235.525 173.525 li
235.775 173.574 li
235.975 173.625 li
236.225 173.625 li
236.475 173.673 li
236.725 173.724 li
236.975 173.775 li
237.225 173.824 li
237.475 173.875 li
237.675 173.875 li
237.925 173.923 li
238.175 173.974 li
238.425 174.025 li
238.675 174.074 li
238.925 174.125 li
239.175 174.125 li
239.375 174.175 li
239.625 174.224 li
239.875 174.275 li
240.125 174.324 li
240.375 174.324 li
240.625 174.375 li
240.875 174.425 li
241.075 174.474 li
241.325 174.525 li
241.575 174.525 li
241.825 174.574 li
242.075 174.625 li
242.325 174.675 li
242.525 174.675 li
242.775 174.724 li
192.325 161.423 mo
192.575 161.523 li
192.775 161.625 li
193.025 161.724 li
193.275 161.824 li
193.525 161.923 li
193.775 162.023 li
194.025 162.074 li
194.275 162.173 li
194.475 162.273 li
194.725 162.373 li
194.975 162.474 li
195.225 162.574 li
195.475 162.673 li
195.725 162.773 li
195.975 162.873 li
196.175 162.923 li
196.425 163.023 li
196.675 163.123 li
196.925 163.224 li
197.175 163.324 li
197.425 163.423 li
197.675 163.474 li
197.875 163.574 li
198.125 163.673 li
198.375 163.773 li
198.625 163.873 li
198.875 163.923 li
199.125 164.023 li
199.375 164.123 li
199.575 164.224 li
199.825 164.273 li
200.075 164.373 li
200.325 164.474 li
200.575 164.574 li
200.825 164.623 li
201.025 164.724 li
201.275 164.824 li
201.525 164.873 li
201.775 164.974 li
202.025 165.074 li
202.275 165.123 li
202.525 165.224 li
202.725 165.324 li
202.975 165.373 li
203.225 165.474 li
203.475 165.523 li
203.725 165.623 li
203.975 165.724 li
204.225 165.773 li
204.425 165.873 li
204.675 165.923 li
204.925 166.023 li
205.175 166.123 li
205.425 166.173 li
205.675 166.273 li
205.925 166.324 li
206.125 166.423 li
206.375 166.474 li
206.625 166.574 li
206.875 166.623 li
207.125 166.724 li
207.375 166.773 li
207.625 166.873 li
207.825 166.923 li
208.075 167.023 li
208.325 167.074 li
208.575 167.173 li
208.825 167.224 li
209.075 167.324 li
209.325 167.373 li
209.525 167.474 li
209.775 167.523 li
210.025 167.623 li
210.275 167.673 li
210.525 167.724 li
210.775 167.824 li
210.975 167.873 li
211.225 167.974 li
211.475 168.023 li
211.725 168.074 li
211.975 168.173 li
212.225 168.224 li
212.475 168.273 li
212.675 168.373 li
212.925 168.423 li
213.175 168.523 li
213.425 168.574 li
213.675 168.623 li
213.925 168.724 li
214.175 168.773 li
214.375 168.824 li
214.625 168.873 li
214.875 168.974 li
215.125 169.023 li
215.375 169.074 li
215.625 169.173 li
215.875 169.224 li
216.075 169.273 li
216.325 169.324 li
216.575 169.423 li
216.825 169.474 li
217.075 169.523 li
217.325 169.623 li
217.575 169.673 li
167.075 148.423 mo
167.325 148.574 li
167.575 148.724 li
167.825 148.875 li
168.025 149.023 li
168.275 149.173 li
168.525 149.324 li
168.775 149.474 li
169.025 149.625 li
169.275 149.773 li
169.475 149.923 li
169.725 150.074 li
169.975 150.224 li
170.225 150.324 li
170.475 150.474 li
170.725 150.625 li
170.975 150.773 li
171.175 150.923 li
171.425 151.074 li
171.675 151.224 li
171.925 151.375 li
172.175 151.474 li
172.425 151.625 li
172.675 151.773 li
172.875 151.923 li
173.125 152.074 li
173.375 152.173 li
173.625 152.324 li
173.875 152.474 li
174.125 152.625 li
174.375 152.724 li
174.575 152.875 li
174.825 153.023 li
175.075 153.125 li
175.325 153.273 li
175.575 153.423 li
175.825 153.574 li
176.075 153.673 li
176.275 153.824 li
176.525 153.923 li
176.775 154.074 li
177.025 154.224 li
177.275 154.324 li
177.525 154.474 li
177.775 154.574 li
177.975 154.724 li
178.225 154.873 li
178.475 154.974 li
178.725 155.123 li
178.975 155.224 li
179.225 155.373 li
179.425 155.474 li
179.675 155.623 li
179.925 155.724 li
180.175 155.873 li
180.425 155.974 li
180.675 156.123 li
180.925 156.224 li
181.125 156.324 li
181.375 156.474 li
181.625 156.574 li
181.875 156.724 li
182.125 156.824 li
182.375 156.923 li
182.625 157.074 li
182.825 157.173 li
183.075 157.273 li
183.325 157.423 li
183.575 157.523 li
183.825 157.623 li
184.075 157.773 li
184.325 157.873 li
184.525 157.974 li
184.775 158.123 li
185.025 158.224 li
185.275 158.324 li
185.525 158.423 li
185.775 158.574 li
186.025 158.673 li
186.225 158.773 li
186.475 158.873 li
186.725 159.023 li
186.975 159.123 li
187.225 159.224 li
187.475 159.324 li
187.725 159.423 li
187.925 159.523 li
188.175 159.673 li
188.425 159.773 li
188.675 159.873 li
188.925 159.974 li
189.175 160.074 li
189.425 160.173 li
189.625 160.273 li
189.875 160.373 li
190.125 160.474 li
190.375 160.623 li
190.625 160.724 li
190.875 160.824 li
191.075 160.923 li
191.325 161.023 li
191.575 161.123 li
191.825 161.222 li
192.075 161.324 li
192.325 161.423 li
141.825 129.423 mo
142.075 129.625 li
142.325 129.824 li
142.575 130.074 li
142.825 130.273 li
143.025 130.474 li
143.275 130.673 li
143.525 130.875 li
143.775 131.074 li
144.025 131.273 li
144.275 131.523 li
144.525 131.724 li
144.725 131.923 li
144.975 132.125 li
145.225 132.324 li
145.475 132.523 li
145.725 132.724 li
145.975 132.923 li
146.225 133.125 li
146.425 133.324 li
146.675 133.523 li
146.925 133.724 li
147.175 133.923 li
147.425 134.125 li
147.675 134.324 li
147.875 134.523 li
148.125 134.724 li
148.375 134.923 li
148.625 135.125 li
148.875 135.324 li
149.125 135.523 li
149.375 135.724 li
149.575 135.923 li
149.825 136.074 li
150.075 136.273 li
150.325 136.474 li
150.575 136.673 li
150.825 136.875 li
151.075 137.074 li
151.275 137.224 li
151.525 137.423 li
151.775 137.625 li
152.025 137.824 li
152.275 138.025 li
152.525 138.173 li
152.775 138.375 li
152.975 138.574 li
153.225 138.775 li
153.475 138.923 li
153.725 139.125 li
153.975 139.324 li
154.225 139.474 li
154.475 139.673 li
154.675 139.875 li
154.925 140.025 li
155.175 140.224 li
155.425 140.423 li
155.675 140.574 li
155.925 140.775 li
156.175 140.923 li
156.375 141.125 li
156.625 141.275 li
156.875 141.474 li
157.125 141.673 li
157.375 141.824 li
157.625 142.025 li
157.875 142.173 li
158.075 142.375 li
158.325 142.525 li
158.575 142.724 li
158.825 142.875 li
159.075 143.025 li
159.325 143.224 li
159.524 143.375 li
159.774 143.574 li
160.024 143.724 li
160.274 143.923 li
160.524 144.074 li
160.774 144.224 li
161.024 144.423 li
161.225 144.574 li
161.475 144.724 li
161.725 144.923 li
161.975 145.074 li
162.225 145.224 li
162.475 145.423 li
162.725 145.574 li
162.925 145.724 li
163.175 145.875 li
163.425 146.074 li
163.675 146.224 li
163.925 146.375 li
164.175 146.525 li
164.425 146.673 li
164.625 146.875 li
164.875 147.025 li
165.125 147.173 li
165.375 147.324 li
165.625 147.474 li
165.875 147.625 li
166.125 147.775 li
166.325 147.923 li
166.575 148.125 li
166.825 148.275 li
167.075 148.423 li
116.575 106.523 mo
116.825 106.724 li
117.075 106.923 li
117.325 107.173 li
117.575 107.375 li
117.825 107.574 li
118.025 107.824 li
118.275 108.023 li
118.525 108.224 li
118.775 108.423 li
119.025 108.673 li
119.275 108.875 li
119.525 109.125 li
119.725 109.324 li
119.975 109.523 li
120.225 109.773 li
120.475 109.974 li
120.725 110.173 li
120.975 110.423 li
121.225 110.625 li
121.425 110.875 li
121.675 111.074 li
121.925 111.324 li
122.175 111.523 li
122.425 111.724 li
122.675 111.974 li
122.925 112.173 li
123.125 112.423 li
123.375 112.625 li
123.625 112.875 li
123.875 113.074 li
124.125 113.324 li
124.375 113.523 li
124.625 113.773 li
124.825 113.974 li
125.075 114.224 li
125.325 114.423 li
125.575 114.673 li
125.825 114.875 li
126.075 115.125 li
126.325 115.324 li
126.525 115.574 li
126.775 115.773 li
127.025 116.023 li
127.275 116.224 li
127.525 116.474 li
127.775 116.673 li
127.975 116.923 li
128.225 117.125 li
128.475 117.375 li
128.725 117.574 li
128.975 117.824 li
129.225 118.023 li
129.475 118.273 li
129.675 118.474 li
129.925 118.724 li
130.175 118.923 li
130.425 119.173 li
130.675 119.375 li
130.925 119.625 li
131.175 119.824 li
131.375 120.074 li
131.625 120.273 li
131.875 120.523 li
132.125 120.724 li
132.375 120.923 li
132.625 121.173 li
132.875 121.375 li
133.075 121.625 li
133.325 121.824 li
133.575 122.074 li
133.825 122.273 li
134.075 122.523 li
134.325 122.724 li
134.575 122.923 li
134.775 123.173 li
135.025 123.375 li
135.275 123.625 li
135.525 123.824 li
135.775 124.023 li
136.024 124.273 li
136.274 124.474 li
136.475 124.724 li
136.725 124.923 li
136.975 125.125 li
137.225 125.375 li
137.475 125.574 li
137.725 125.773 li
137.925 126.023 li
138.175 126.224 li
138.425 126.423 li
138.675 126.673 li
138.925 126.875 li
139.175 127.074 li
139.425 127.324 li
139.625 127.523 li
139.875 127.724 li
140.125 127.923 li
140.375 128.173 li
140.625 128.375 li
140.875 128.574 li
141.125 128.773 li
141.325 129.023 li
141.575 129.224 li
141.825 129.423 li
91.375 92.7734 mo
91.5752 92.7734 li
91.8252 92.7734 li
92.0752 92.8237 li
92.3252 92.8237 li
92.5752 92.8237 li
92.8252 92.8735 li
93.0752 92.8735 li
93.2749 92.8735 li
93.5249 92.9238 li
93.7749 92.9736 li
94.0249 92.9736 li
94.2749 93.0234 li
94.5249 93.0737 li
94.7749 93.1235 li
94.9751 93.1738 li
95.2251 93.2236 li
95.4751 93.2734 li
95.7251 93.3237 li
95.9751 93.4233 li
96.2251 93.4736 li
96.4248 93.5234 li
96.6748 93.6235 li
96.9253 93.6733 li
97.1753 93.7734 li
97.4253 93.8237 li
97.6753 93.9233 li
97.9253 94.0234 li
98.125 94.0737 li
98.375 94.1733 li
98.625 94.2734 li
98.875 94.3735 li
99.125 94.4736 li
99.375 94.5737 li
99.625 94.6738 li
99.8252 94.7734 li
100.075 94.8735 li
100.325 95.0234 li
100.575 95.1235 li
100.825 95.2236 li
101.075 95.3735 li
101.325 95.4736 li
101.525 95.6235 li
101.775 95.7236 li
102.025 95.8735 li
102.275 95.9736 li
102.525 96.1235 li
102.775 96.2734 li
103.025 96.3735 li
103.225 96.5234 li
103.475 96.6738 li
103.725 96.8237 li
103.975 96.9736 li
104.225 97.0737 li
104.475 97.2236 li
104.725 97.374 li
104.925 97.5732 li
105.175 97.7236 li
105.425 97.874 li
105.675 98.0229 li
105.925 98.1733 li
106.175 98.3237 li
106.375 98.5229 li
106.625 98.6733 li
106.875 98.8237 li
107.125 98.9741 li
107.375 99.1733 li
107.625 99.3237 li
107.875 99.5229 li
108.075 99.6733 li
108.325 99.8745 li
108.575 100.023 li
108.825 100.224 li
109.075 100.375 li
109.325 100.574 li
109.575 100.773 li
109.775 100.923 li
110.025 101.125 li
110.275 101.324 li
110.525 101.523 li
110.775 101.673 li
111.025 101.875 li
111.275 102.074 li
111.475 102.273 li
111.725 102.474 li
111.975 102.625 li
112.225 102.824 li
112.475 103.023 li
112.725 103.224 li
112.975 103.423 li
113.175 103.625 li
113.425 103.824 li
113.675 104.023 li
113.925 104.224 li
114.175 104.423 li
114.425 104.625 li
114.675 104.875 li
114.875 105.074 li
115.125 105.273 li
115.375 105.474 li
115.625 105.673 li
115.875 105.875 li
116.125 106.074 li
116.325 106.324 li
116.575 106.525 li
66.125 118.224 mo
66.375 117.724 li
66.5752 117.224 li
66.8252 116.724 li
67.0752 116.224 li
67.3252 115.724 li
67.5752 115.273 li
67.8252 114.773 li
68.0752 114.324 li
68.2749 113.824 li
68.5249 113.375 li
68.7749 112.923 li
69.0249 112.474 li
69.2749 112.023 li
69.5249 111.574 li
69.7749 111.125 li
69.9751 110.724 li
70.2251 110.273 li
70.4751 109.875 li
70.7251 109.423 li
70.9751 109.023 li
71.2251 108.625 li
71.4751 108.224 li
71.6753 107.824 li
71.9253 107.423 li
72.1753 107.023 li
72.4253 106.673 li
72.6753 106.273 li
72.9253 105.923 li
73.1753 105.574 li
73.375 105.173 li
73.625 104.824 li
73.875 104.474 li
74.125 104.125 li
74.375 103.824 li
74.625 103.474 li
74.8252 103.173 li
75.0752 102.824 li
75.3252 102.523 li
75.5752 102.224 li
75.8252 101.875 li
76.0752 101.574 li
76.3252 101.324 li
76.5254 101.023 li
76.7754 100.724 li
77.0254 100.474 li
77.2754 100.173 li
77.5254 99.9233 li
77.7754 99.6733 li
78.0254 99.3745 li
78.2251 99.1245 li
78.4751 98.8745 li
78.7251 98.6733 li
78.9751 98.4233 li
79.2251 98.1733 li
79.4751 97.9736 li
79.7251 97.7236 li
79.9253 97.5234 li
80.1753 97.3232 li
80.4253 97.1235 li
80.6753 96.9238 li
80.9253 96.7236 li
81.1753 96.5234 li
81.4253 96.3237 li
81.625 96.1733 li
81.875 95.9736 li
82.125 95.8237 li
82.375 95.6733 li
82.625 95.5234 li
82.875 95.3237 li
83.125 95.1733 li
83.3252 95.0737 li
83.5752 94.9233 li
83.8252 94.7734 li
84.0752 94.6235 li
84.3252 94.5234 li
84.5752 94.3735 li
84.7754 94.2734 li
85.0254 94.1733 li
85.2754 94.0737 li
85.5254 93.9736 li
85.7754 93.8735 li
86.0254 93.7734 li
86.2754 93.6733 li
86.4751 93.5737 li
86.7251 93.5234 li
86.9751 93.4233 li
87.2251 93.3735 li
87.4751 93.3237 li
87.7251 93.2236 li
87.9751 93.1733 li
88.1753 93.1235 li
88.4253 93.0737 li
88.6753 93.0234 li
88.9253 92.9736 li
89.1753 92.9736 li
89.4253 92.9233 li
89.6753 92.8735 li
89.8755 92.8735 li
90.1255 92.8237 li
90.3755 92.8237 li
90.6255 92.8237 li
90.8755 92.7734 li
91.1255 92.7734 li
91.3755 92.7734 li
40.875 174.923 mo
41.125 174.574 li
41.375 174.224 li
41.625 173.875 li
41.8252 173.523 li
42.0752 173.173 li
42.3252 172.773 li
42.5752 172.375 li
42.8252 171.974 li
43.0752 171.574 li
43.2749 171.173 li
43.5249 170.773 li
43.7749 170.324 li
44.0249 169.923 li
44.2749 169.474 li
44.5249 169.023 li
44.7749 168.574 li
44.9751 168.074 li
45.2251 167.625 li
45.4751 167.173 li
45.7251 166.673 li
45.9751 166.173 li
46.2251 165.673 li
46.4751 165.173 li
46.6753 164.673 li
46.9253 164.173 li
47.1753 163.673 li
47.4253 163.125 li
47.6753 162.625 li
47.9253 162.074 li
48.1753 161.523 li
48.375 160.974 li
48.625 160.423 li
48.875 159.875 li
49.125 159.324 li
49.375 158.773 li
49.625 158.173 li
49.875 157.625 li
50.0752 157.074 li
50.3252 156.474 li
50.5752 155.875 li
50.8252 155.324 li
51.0752 154.724 li
51.3252 154.125 li
51.5752 153.523 li
51.7754 152.923 li
52.0254 152.324 li
52.2754 151.724 li
52.5254 151.125 li
52.7754 150.523 li
53.0254 149.923 li
53.2251 149.324 li
53.4751 148.673 li
53.7251 148.074 li
53.9751 147.474 li
54.2251 146.824 li
54.4751 146.224 li
54.7251 145.625 li
54.9253 144.974 li
55.1753 144.375 li
55.4253 143.773 li
55.6753 143.125 li
55.9253 142.523 li
56.1753 141.923 li
56.4253 141.273 li
56.625 140.673 li
56.875 140.074 li
57.125 139.423 li
57.375 138.824 li
57.625 138.224 li
57.875 137.574 li
58.125 136.974 li
58.3252 136.375 li
58.5752 135.773 li
58.8252 135.173 li
59.0752 134.574 li
59.3252 133.923 li
59.5752 133.324 li
59.8252 132.724 li
60.0254 132.125 li
60.2754 131.574 li
60.5254 130.974 li
60.7754 130.375 li
61.0254 129.773 li
61.2754 129.173 li
61.5254 128.625 li
61.7251 128.023 li
61.9751 127.474 li
62.2251 126.875 li
62.4751 126.324 li
62.7251 125.773 li
62.9751 125.173 li
63.2251 124.625 li
63.4253 124.074 li
63.6753 123.523 li
63.9253 122.974 li
64.1753 122.423 li
64.4253 121.875 li
64.6753 121.375 li
64.8755 120.824 li
65.1255 120.273 li
65.3755 119.773 li
65.6255 119.273 li
65.8755 118.724 li
66.1255 118.224 li
16.125 182.724 mo
16.375 182.724 li
16.625 182.724 li
16.8252 182.724 li
17.0752 182.724 li
17.3252 182.724 li
17.5752 182.724 li
17.8252 182.724 li
18.0752 182.724 li
18.3252 182.724 li
18.5249 182.724 li
18.7749 182.724 li
19.0249 182.724 li
19.2749 182.724 li
19.5249 182.724 li
19.7749 182.724 li
20.0249 182.724 li
20.2251 182.724 li
20.4751 182.724 li
20.7251 182.724 li
20.9751 182.724 li
21.2251 182.724 li
21.4751 182.724 li
21.6753 182.724 li
21.9253 182.724 li
22.1753 182.724 li
22.4253 182.724 li
22.6753 182.724 li
22.9253 182.724 li
23.1753 182.724 li
23.375 182.724 li
23.625 182.724 li
23.875 182.724 li
24.125 182.724 li
24.375 182.724 li
24.625 182.724 li
24.875 182.724 li
25.0752 182.724 li
25.3252 182.724 li
25.5752 182.724 li
25.8252 182.724 li
26.0752 182.673 li
26.3252 182.673 li
26.5752 182.673 li
26.7749 182.673 li
27.0254 182.673 li
27.2754 182.673 li
27.5254 182.625 li
27.7754 182.625 li
28.0254 182.625 li
28.2754 182.574 li
28.4751 182.574 li
28.7251 182.574 li
28.9751 182.523 li
29.2251 182.523 li
29.4751 182.474 li
29.7251 182.423 li
29.9751 182.423 li
30.1753 182.375 li
30.4253 182.324 li
30.6753 182.273 li
30.9253 182.224 li
31.1753 182.173 li
31.4253 182.123 li
31.6753 182.074 li
31.875 181.974 li
32.125 181.923 li
32.375 181.824 li
32.625 181.773 li
32.875 181.673 li
33.125 181.574 li
33.3252 181.474 li
33.5752 181.373 li
33.8252 181.273 li
34.0752 181.173 li
34.3252 181.023 li
34.5752 180.923 li
34.8252 180.773 li
35.0254 180.625 li
35.2754 180.474 li
35.5254 180.324 li
35.7754 180.173 li
36.0254 179.974 li
36.2754 179.824 li
36.5254 179.623 li
36.7251 179.423 li
36.9751 179.224 li
37.2251 179.023 li
37.4751 178.824 li
37.7251 178.574 li
37.9751 178.373 li
38.2251 178.123 li
38.4253 177.873 li
38.6753 177.623 li
38.9253 177.324 li
39.1753 177.074 li
39.4253 176.773 li
39.6753 176.474 li
39.9253 176.224 li
40.1255 175.873 li
40.3755 175.574 li
40.6255 175.273 li
40.8755 174.923 li
229.975 24.3237 mo
249.925 24.3237 li
@
NHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf200.594 33.6538 mo( = 1/4)[1.94629 4.08789 1.94629 3.8916 1.94629 0 ]xsh[1 1.5 ] 0 dsh
242.775 182.523 mo
243.025 182.523 li
243.275 182.523 li
243.525 182.523 li
243.775 182.523 li
244.025 182.523 li
244.225 182.523 li
244.475 182.523 li
244.725 182.523 li
244.975 182.523 li
245.225 182.523 li
245.475 182.523 li
245.725 182.574 li
245.925 182.574 li
246.175 182.574 li
246.425 182.574 li
246.675 182.574 li
246.925 182.574 li
247.175 182.574 li
247.425 182.574 li
247.625 182.574 li
247.875 182.574 li
248.125 182.574 li
248.375 182.574 li
248.625 182.574 li
248.875 182.574 li
249.125 182.574 li
249.325 182.574 li
249.575 182.574 li
249.825 182.574 li
250.075 182.574 li
250.325 182.574 li
250.575 182.574 li
250.825 182.625 li
251.025 182.625 li
251.275 182.625 li
251.525 182.625 li
251.775 182.625 li
252.025 182.625 li
252.275 182.625 li
252.525 182.625 li
252.725 182.625 li
252.975 182.625 li
253.225 182.625 li
253.475 182.625 li
253.725 182.625 li
253.975 182.625 li
254.175 182.625 li
254.425 182.625 li
254.675 182.625 li
254.925 182.625 li
255.175 182.625 li
255.425 182.625 li
255.675 182.625 li
255.875 182.625 li
256.125 182.625 li
256.375 182.625 li
256.625 182.625 li
256.875 182.625 li
257.125 182.625 li
257.375 182.625 li
257.575 182.625 li
257.825 182.625 li
258.075 182.625 li
258.325 182.625 li
217.575 181.673 mo
217.775 181.673 li
218.025 181.724 li
218.275 181.724 li
218.525 181.724 li
218.775 181.773 li
219.025 181.773 li
219.275 181.773 li
219.475 181.773 li
219.725 181.824 li
219.975 181.824 li
220.225 181.824 li
220.475 181.875 li
220.725 181.875 li
220.975 181.875 li
221.175 181.875 li
221.425 181.923 li
221.675 181.923 li
221.925 181.923 li
222.175 181.923 li
222.425 181.974 li
222.625 181.974 li
222.875 181.974 li
223.125 181.974 li
223.375 182.023 li
223.625 182.023 li
223.875 182.023 li
224.125 182.023 li
224.325 182.023 li
224.575 182.074 li
224.825 182.074 li
225.075 182.074 li
225.325 182.074 li
225.575 182.074 li
225.825 182.125 li
226.025 182.125 li
226.275 182.125 li
226.525 182.125 li
226.775 182.125 li
227.025 182.173 li
227.275 182.173 li
227.525 182.173 li
227.725 182.173 li
227.975 182.173 li
228.225 182.173 li
228.475 182.224 li
228.725 182.224 li
228.975 182.224 li
229.225 182.224 li
229.425 182.224 li
229.675 182.224 li
229.925 182.224 li
230.175 182.273 li
230.425 182.273 li
230.675 182.273 li
230.925 182.273 li
231.125 182.273 li
231.375 182.273 li
231.625 182.273 li
231.875 182.324 li
232.125 182.324 li
232.375 182.324 li
232.575 182.324 li
232.825 182.324 li
233.075 182.324 li
233.325 182.324 li
233.575 182.324 li
233.825 182.375 li
234.075 182.375 li
234.275 182.375 li
234.525 182.375 li
234.775 182.375 li
235.025 182.375 li
235.275 182.375 li
235.525 182.375 li
235.775 182.375 li
235.975 182.423 li
236.225 182.423 li
236.475 182.423 li
236.725 182.423 li
236.975 182.423 li
237.225 182.423 li
237.475 182.423 li
237.675 182.423 li
237.925 182.423 li
238.175 182.423 li
238.425 182.423 li
238.675 182.474 li
238.925 182.474 li
239.175 182.474 li
239.375 182.474 li
239.625 182.474 li
239.875 182.474 li
240.125 182.474 li
240.375 182.474 li
240.625 182.474 li
240.875 182.474 li
241.075 182.474 li
241.325 182.474 li
241.575 182.474 li
241.825 182.523 li
242.075 182.523 li
242.325 182.523 li
242.525 182.523 li
242.775 182.523 li
192.325 177.773 mo
192.575 177.824 li
192.775 177.875 li
193.025 177.974 li
193.275 178.023 li
193.525 178.125 li
193.775 178.173 li
194.025 178.224 li
194.275 178.324 li
194.475 178.375 li
194.725 178.423 li
194.975 178.474 li
195.225 178.574 li
195.475 178.625 li
195.725 178.673 li
195.975 178.724 li
196.175 178.773 li
196.425 178.824 li
196.675 178.923 li
196.925 178.974 li
197.175 179.023 li
197.425 179.074 li
197.675 179.125 li
197.875 179.173 li
198.125 179.224 li
198.375 179.273 li
198.625 179.324 li
198.875 179.375 li
199.125 179.423 li
199.375 179.474 li
199.575 179.523 li
199.825 179.574 li
200.075 179.625 li
200.325 179.673 li
200.575 179.724 li
200.825 179.773 li
201.025 179.773 li
201.275 179.824 li
201.525 179.875 li
201.775 179.923 li
202.025 179.974 li
202.275 180.023 li
202.525 180.023 li
202.725 180.074 li
202.975 180.125 li
203.225 180.173 li
203.475 180.224 li
203.725 180.224 li
203.975 180.275 li
204.225 180.324 li
204.425 180.375 li
204.675 180.375 li
204.925 180.423 li
205.175 180.474 li
205.425 180.474 li
205.675 180.525 li
205.925 180.574 li
206.125 180.574 li
206.375 180.625 li
206.625 180.673 li
206.875 180.673 li
207.125 180.724 li
207.375 180.724 li
207.625 180.775 li
207.825 180.824 li
208.075 180.824 li
208.325 180.875 li
208.575 180.875 li
208.825 180.923 li
209.075 180.923 li
209.325 180.974 li
209.525 180.974 li
209.775 181.025 li
210.025 181.025 li
210.275 181.074 li
210.525 181.074 li
210.775 181.125 li
210.975 181.125 li
211.225 181.173 li
211.475 181.173 li
211.725 181.224 li
211.975 181.224 li
212.225 181.275 li
212.475 181.275 li
212.675 181.324 li
212.925 181.324 li
213.175 181.324 li
213.425 181.375 li
213.675 181.375 li
213.925 181.423 li
214.175 181.423 li
214.375 181.423 li
214.625 181.474 li
214.875 181.474 li
215.125 181.525 li
215.375 181.525 li
215.625 181.525 li
215.875 181.574 li
216.075 181.574 li
216.325 181.574 li
216.575 181.625 li
216.825 181.625 li
217.075 181.625 li
217.325 181.673 li
217.575 181.673 li
167.075 161.724 mo
167.325 161.974 li
167.575 162.224 li
167.825 162.523 li
168.025 162.773 li
168.275 163.023 li
168.525 163.273 li
168.775 163.523 li
169.025 163.773 li
169.275 164.023 li
169.475 164.273 li
169.725 164.523 li
169.975 164.773 li
170.225 165.023 li
170.475 165.224 li
170.725 165.474 li
170.975 165.673 li
171.175 165.923 li
171.425 166.123 li
171.675 166.373 li
171.925 166.574 li
172.175 166.773 li
172.425 167.023 li
172.675 167.224 li
172.875 167.423 li
173.125 167.623 li
173.375 167.824 li
173.625 168.023 li
173.875 168.224 li
174.125 168.423 li
174.375 168.625 li
174.575 168.824 li
174.825 168.974 li
175.075 169.173 li
175.325 169.375 li
175.575 169.523 li
175.825 169.724 li
176.075 169.923 li
176.275 170.074 li
176.525 170.224 li
176.775 170.423 li
177.025 170.574 li
177.275 170.773 li
177.525 170.923 li
177.775 171.074 li
177.975 171.224 li
178.225 171.375 li
178.475 171.574 li
178.725 171.724 li
178.975 171.875 li
179.225 172.023 li
179.425 172.173 li
179.675 172.273 li
179.925 172.423 li
180.175 172.574 li
180.425 172.724 li
180.675 172.875 li
180.925 173.023 li
181.125 173.125 li
181.375 173.273 li
181.625 173.423 li
181.875 173.523 li
182.125 173.673 li
182.375 173.773 li
182.625 173.923 li
182.825 174.023 li
183.075 174.173 li
183.325 174.273 li
183.575 174.375 li
183.825 174.523 li
184.075 174.625 li
184.325 174.724 li
184.525 174.875 li
184.775 174.974 li
185.025 175.074 li
185.275 175.173 li
185.525 175.273 li
185.775 175.373 li
186.025 175.474 li
186.225 175.574 li
186.475 175.673 li
186.725 175.773 li
186.975 175.873 li
187.225 175.974 li
187.475 176.074 li
187.725 176.173 li
187.925 176.273 li
188.175 176.373 li
188.425 176.474 li
188.675 176.523 li
188.925 176.623 li
189.175 176.724 li
189.425 176.824 li
189.625 176.873 li
189.875 176.974 li
190.125 177.074 li
190.375 177.123 li
190.625 177.224 li
190.875 177.324 li
191.075 177.373 li
191.325 177.474 li
191.575 177.523 li
191.825 177.623 li
192.075 177.673 li
192.325 177.773 li
141.825 111.974 mo
142.075 112.673 li
142.325 113.375 li
142.575 114.074 li
142.825 114.773 li
143.025 115.474 li
143.275 116.125 li
143.525 116.824 li
143.775 117.523 li
144.025 118.173 li
144.275 118.824 li
144.525 119.474 li
144.725 120.173 li
144.975 120.824 li
145.225 121.474 li
145.475 122.074 li
145.725 122.724 li
145.975 123.375 li
146.225 123.974 li
146.425 124.625 li
146.675 125.224 li
146.925 125.875 li
147.175 126.474 li
147.425 127.074 li
147.675 127.673 li
147.875 128.273 li
148.125 128.875 li
148.375 129.423 li
148.625 130.023 li
148.875 130.625 li
149.125 131.173 li
149.375 131.724 li
149.575 132.324 li
149.825 132.875 li
150.075 133.423 li
150.325 133.974 li
150.575 134.523 li
150.825 135.074 li
151.075 135.625 li
151.275 136.125 li
151.525 136.673 li
151.775 137.173 li
152.025 137.724 li
152.275 138.224 li
152.525 138.724 li
152.775 139.224 li
152.975 139.724 li
153.225 140.224 li
153.475 140.724 li
153.725 141.224 li
153.975 141.673 li
154.225 142.173 li
154.475 142.625 li
154.675 143.125 li
154.925 143.574 li
155.175 144.023 li
155.425 144.474 li
155.675 144.923 li
155.925 145.375 li
156.175 145.824 li
156.375 146.273 li
156.625 146.673 li
156.875 147.125 li
157.125 147.574 li
157.375 147.974 li
157.625 148.375 li
157.875 148.824 li
158.075 149.224 li
158.325 149.625 li
158.575 150.023 li
158.825 150.423 li
159.075 150.824 li
159.325 151.224 li
159.524 151.574 li
159.774 151.974 li
160.024 152.324 li
160.274 152.724 li
160.524 153.074 li
160.774 153.474 li
161.024 153.824 li
161.225 154.173 li
161.475 154.523 li
161.725 154.875 li
161.975 155.224 li
162.225 155.574 li
162.475 155.923 li
162.725 156.224 li
162.925 156.574 li
163.175 156.923 li
163.425 157.224 li
163.675 157.574 li
163.925 157.875 li
164.175 158.173 li
164.425 158.523 li
164.625 158.824 li
164.875 159.125 li
165.125 159.423 li
165.375 159.724 li
165.625 160.023 li
165.875 160.273 li
166.125 160.574 li
166.325 160.875 li
166.575 161.173 li
166.825 161.423 li
167.075 161.724 li
116.575 31.6235 mo
116.825 32.2236 li
117.075 32.8237 li
117.325 33.4238 li
117.575 34.0234 li
117.825 34.6738 li
118.025 35.3237 li
118.275 35.9736 li
118.525 36.6235 li
118.775 37.2734 li
119.025 37.9238 li
119.275 38.6235 li
119.525 39.3237 li
119.725 40.0234 li
119.975 40.7236 li
120.225 41.4238 li
120.475 42.1235 li
120.725 42.8735 li
120.975 43.5737 li
121.225 44.3237 li
121.425 45.0737 li
121.675 45.8237 li
121.925 46.5737 li
122.175 47.3237 li
122.425 48.1235 li
122.675 48.8735 li
122.925 49.6738 li
123.125 50.4238 li
123.375 51.2236 li
123.625 52.0234 li
123.875 52.7734 li
124.125 53.5737 li
124.375 54.3735 li
124.625 55.1738 li
124.825 56.0234 li
125.075 56.8237 li
125.325 57.6235 li
125.575 58.4238 li
125.825 59.2734 li
126.075 60.0737 li
126.325 60.9238 li
126.525 61.7236 li
126.775 62.5737 li
127.025 63.3735 li
127.275 64.2236 li
127.525 65.0234 li
127.775 65.8735 li
127.975 66.7236 li
128.225 67.5234 li
128.475 68.3735 li
128.725 69.2236 li
128.975 70.0737 li
129.225 70.8735 li
129.475 71.7236 li
129.675 72.5737 li
129.925 73.4238 li
130.175 74.2236 li
130.425 75.0737 li
130.675 75.9238 li
130.925 76.7236 li
131.175 77.5737 li
131.375 78.4238 li
131.625 79.2236 li
131.875 80.0737 li
132.125 80.9238 li
132.375 81.7236 li
132.625 82.5737 li
132.875 83.3735 li
133.075 84.2236 li
133.325 85.0234 li
133.575 85.8237 li
133.825 86.6738 li
134.075 87.4736 li
134.325 88.2734 li
134.575 89.1235 li
134.775 89.9238 li
135.025 90.7236 li
135.275 91.5234 li
135.525 92.3237 li
135.775 93.1235 li
136.024 93.9238 li
136.274 94.7236 li
136.475 95.5234 li
136.725 96.2734 li
136.975 97.0737 li
137.225 97.874 li
137.475 98.6245 li
137.725 99.4233 li
137.925 100.173 li
138.175 100.923 li
138.425 101.724 li
138.675 102.474 li
138.925 103.224 li
139.175 103.974 li
139.425 104.724 li
139.625 105.474 li
139.875 106.224 li
140.125 106.923 li
140.375 107.673 li
140.625 108.423 li
140.875 109.125 li
141.125 109.824 li
141.325 110.574 li
141.575 111.273 li
141.825 111.974 li
91.375 59.3735 mo
91.5752 58.1738 li
91.8252 56.9736 li
92.0752 55.8237 li
92.3252 54.6738 li
92.5752 53.5234 li
92.8252 52.4238 li
93.0752 51.3237 li
93.2749 50.2236 li
93.5249 49.1738 li
93.7749 48.1235 li
94.0249 47.0737 li
94.2749 46.0234 li
94.5249 45.0234 li
94.7749 44.0234 li
94.9751 43.0737 li
95.2251 42.0737 li
95.4751 41.1738 li
95.7251 40.2236 li
95.9751 39.3237 li
96.2251 38.4238 li
96.4248 37.5737 li
96.6748 36.7236 li
96.9253 35.8735 li
97.1753 35.0737 li
97.4253 34.2734 li
97.6753 33.5234 li
97.9253 32.7734 li
98.125 32.0234 li
98.375 31.3237 li
98.625 30.6235 li
98.875 29.9238 li
99.125 29.2734 li
99.375 28.6235 li
99.625 28.0234 li
99.8252 27.4238 li
100.075 26.8735 li
100.325 26.3237 li
100.575 25.7734 li
100.825 25.2734 li
101.075 24.7734 li
101.325 24.2734 li
101.525 23.8237 li
101.775 23.3735 li
102.025 22.9736 li
102.275 22.5737 li
102.525 22.2236 li
102.775 21.8735 li
103.025 21.5234 li
103.225 21.2236 li
103.475 20.9238 li
103.725 20.6738 li
103.975 20.4238 li
104.225 20.1738 li
104.475 19.9736 li
104.725 19.7734 li
104.925 19.6235 li
105.175 19.4736 li
105.425 19.3237 li
105.675 19.2236 li
105.925 19.1235 li
106.175 19.0737 li
106.375 19.0234 li
106.625 18.9736 li
106.875 18.9736 li
107.125 18.9736 li
107.375 18.9736 li
107.625 19.0234 li
107.875 19.0737 li
108.075 19.1235 li
108.325 19.2236 li
108.575 19.3735 li
108.825 19.4736 li
109.075 19.6235 li
109.325 19.7734 li
109.575 19.9736 li
109.775 20.1738 li
110.025 20.3735 li
110.275 20.6235 li
110.525 20.8735 li
110.775 21.1235 li
111.025 21.3735 li
111.275 21.6738 li
111.475 21.9736 li
111.725 22.3237 li
111.975 22.6738 li
112.225 23.0234 li
112.475 23.3735 li
112.725 23.7734 li
112.975 24.1738 li
113.175 24.5737 li
113.425 24.9736 li
113.675 25.4238 li
113.925 25.8735 li
114.175 26.3237 li
114.425 26.8237 li
114.675 27.2734 li
114.875 27.7734 li
115.125 28.3237 li
115.375 28.8237 li
115.625 29.3735 li
115.875 29.9238 li
116.125 30.4736 li
116.325 31.0234 li
116.575 31.6235 li
66.125 173.125 mo
66.375 172.673 li
66.5752 172.173 li
66.8252 171.724 li
67.0752 171.224 li
67.3252 170.724 li
67.5752 170.173 li
67.8252 169.625 li
68.0752 169.074 li
68.2749 168.523 li
68.5249 167.923 li
68.7749 167.324 li
69.0249 166.673 li
69.2749 166.023 li
69.5249 165.375 li
69.7749 164.724 li
69.9751 164.023 li
70.2251 163.324 li
70.4751 162.574 li
70.7251 161.824 li
70.9751 161.074 li
71.2251 160.324 li
71.4751 159.523 li
71.6753 158.724 li
71.9253 157.875 li
72.1753 157.023 li
72.4253 156.173 li
72.6753 155.324 li
72.9253 154.423 li
73.1753 153.474 li
73.375 152.574 li
73.625 151.625 li
73.875 150.673 li
74.125 149.673 li
74.375 148.673 li
74.625 147.673 li
74.8252 146.673 li
75.0752 145.625 li
75.3252 144.574 li
75.5752 143.474 li
75.8252 142.423 li
76.0752 141.324 li
76.3252 140.173 li
76.5254 139.074 li
76.7754 137.923 li
77.0254 136.773 li
77.2754 135.574 li
77.5254 134.423 li
77.7754 133.224 li
78.0254 132.023 li
78.2251 130.773 li
78.4751 129.574 li
78.7251 128.324 li
78.9751 127.074 li
79.2251 125.773 li
79.4751 124.523 li
79.7251 123.224 li
79.9253 121.974 li
80.1753 120.625 li
80.4253 119.324 li
80.6753 118.023 li
80.9253 116.673 li
81.1753 115.375 li
81.4253 114.023 li
81.625 112.673 li
81.875 111.324 li
82.125 109.974 li
82.375 108.625 li
82.625 107.273 li
82.875 105.875 li
83.125 104.523 li
83.3252 103.125 li
83.5752 101.773 li
83.8252 100.375 li
84.0752 99.0229 li
84.3252 97.624 li
84.5752 96.2236 li
84.7754 94.8735 li
85.0254 93.4736 li
85.2754 92.0737 li
85.5254 90.7236 li
85.7754 89.3237 li
86.0254 87.9736 li
86.2754 86.6235 li
86.4751 85.2236 li
86.7251 83.8735 li
86.9751 82.5234 li
87.2251 81.1738 li
87.4751 79.8237 li
87.7251 78.4736 li
87.9751 77.1235 li
88.1753 75.8237 li
88.4253 74.4736 li
88.6753 73.1738 li
88.9253 71.8735 li
89.1753 70.5737 li
89.4253 69.2734 li
89.6753 68.0234 li
89.8755 66.7236 li
90.1255 65.4736 li
90.3755 64.2236 li
90.6255 62.9736 li
90.8755 61.7734 li
91.1255 60.5737 li
91.3755 59.3735 li
40.875 182.724 mo
41.125 182.724 li
41.375 182.724 li
41.625 182.724 li
41.8252 182.724 li
42.0752 182.724 li
42.3252 182.724 li
42.5752 182.724 li
42.8252 182.724 li
43.0752 182.724 li
43.2749 182.724 li
43.5249 182.724 li
43.7749 182.724 li
44.0249 182.724 li
44.2749 182.724 li
44.5249 182.724 li
44.7749 182.724 li
44.9751 182.724 li
45.2251 182.724 li
45.4751 182.724 li
45.7251 182.724 li
45.9751 182.724 li
46.2251 182.724 li
46.4751 182.724 li
46.6753 182.724 li
46.9253 182.724 li
47.1753 182.724 li
47.4253 182.724 li
47.6753 182.724 li
47.9253 182.673 li
48.1753 182.673 li
48.375 182.673 li
48.625 182.673 li
48.875 182.673 li
49.125 182.673 li
49.375 182.673 li
49.625 182.673 li
49.875 182.673 li
50.0752 182.625 li
50.3252 182.625 li
50.5752 182.625 li
50.8252 182.625 li
51.0752 182.625 li
51.3252 182.574 li
51.5752 182.574 li
51.7754 182.574 li
52.0254 182.523 li
52.2754 182.523 li
52.5254 182.523 li
52.7754 182.474 li
53.0254 182.474 li
53.2251 182.423 li
53.4751 182.423 li
53.7251 182.375 li
53.9751 182.324 li
54.2251 182.324 li
54.4751 182.273 li
54.7251 182.224 li
54.9253 182.173 li
55.1753 182.123 li
55.4253 182.074 li
55.6753 182.023 li
55.9253 181.974 li
56.1753 181.923 li
56.4253 181.873 li
56.625 181.773 li
56.875 181.724 li
57.125 181.623 li
57.375 181.574 li
57.625 181.474 li
57.875 181.373 li
58.125 181.273 li
58.3252 181.173 li
58.5752 181.074 li
58.8252 180.923 li
59.0752 180.824 li
59.3252 180.673 li
59.5752 180.574 li
59.8252 180.423 li
60.0254 180.273 li
60.2754 180.074 li
60.5254 179.923 li
60.7754 179.724 li
61.0254 179.574 li
61.2754 179.373 li
61.5254 179.173 li
61.7251 178.923 li
61.9751 178.724 li
62.2251 178.474 li
62.4751 178.224 li
62.7251 177.974 li
62.9751 177.724 li
63.2251 177.423 li
63.4253 177.123 li
63.6753 176.824 li
63.9253 176.523 li
64.1753 176.173 li
64.4253 175.873 li
64.6753 175.523 li
64.8755 175.123 li
65.1255 174.773 li
65.3755 174.373 li
65.6255 173.974 li
65.8755 173.523 li
66.1255 173.123 li
16.125 182.724 mo
16.375 182.724 li
16.625 182.724 li
16.8252 182.724 li
17.0752 182.724 li
17.3252 182.724 li
17.5752 182.724 li
17.8252 182.724 li
18.0752 182.724 li
18.3252 182.724 li
18.5249 182.724 li
18.7749 182.724 li
19.0249 182.724 li
19.2749 182.724 li
19.5249 182.724 li
19.7749 182.724 li
20.0249 182.724 li
20.2251 182.724 li
20.4751 182.724 li
20.7251 182.724 li
20.9751 182.724 li
21.2251 182.724 li
21.4751 182.724 li
21.6753 182.724 li
21.9253 182.724 li
22.1753 182.724 li
22.4253 182.724 li
22.6753 182.724 li
22.9253 182.724 li
23.1753 182.724 li
23.375 182.724 li
23.625 182.724 li
23.875 182.724 li
24.125 182.724 li
24.375 182.724 li
24.625 182.724 li
24.875 182.724 li
25.0752 182.724 li
25.3252 182.724 li
25.5752 182.724 li
25.8252 182.724 li
26.0752 182.724 li
26.3252 182.724 li
26.5752 182.724 li
26.7749 182.724 li
27.0254 182.724 li
27.2754 182.724 li
27.5254 182.724 li
27.7754 182.724 li
28.0254 182.724 li
28.2754 182.724 li
28.4751 182.724 li
28.7251 182.724 li
28.9751 182.724 li
29.2251 182.724 li
29.4751 182.724 li
29.7251 182.724 li
29.9751 182.724 li
30.1753 182.724 li
30.4253 182.724 li
30.6753 182.724 li
30.9253 182.724 li
31.1753 182.724 li
31.4253 182.724 li
31.6753 182.724 li
31.875 182.724 li
32.125 182.724 li
32.375 182.724 li
32.625 182.724 li
32.875 182.724 li
33.125 182.724 li
33.3252 182.724 li
33.5752 182.724 li
33.8252 182.724 li
34.0752 182.724 li
34.3252 182.724 li
34.5752 182.724 li
34.8252 182.724 li
35.0254 182.724 li
35.2754 182.724 li
35.5254 182.724 li
35.7754 182.724 li
36.0254 182.724 li
36.2754 182.724 li
36.5254 182.724 li
36.7251 182.724 li
36.9751 182.724 li
37.2251 182.724 li
37.4751 182.724 li
37.7251 182.724 li
37.9751 182.724 li
38.2251 182.724 li
38.4253 182.724 li
38.6753 182.724 li
38.9253 182.724 li
39.1753 182.724 li
39.4253 182.724 li
39.6753 182.724 li
39.9253 182.724 li
40.1255 182.724 li
40.3755 182.724 li
40.6255 182.724 li
40.8755 182.724 li
229.975 31.3237 mo
249.925 31.3237 li
@
NHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf196.375 40.6538 mo( )sh[6 2 1 2 ] 0 dsh
229.975 38.3237 mo
249.925 38.3237 li
0 0 0 0 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNHWRNV+Symbol dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/mu <1C60D8A8C9B7FBE14CA4FFF8B33A1D6625B23C041FFF97F9F247DDCB624F25B38CAD0D77E6D84467DAB5414969C1DD806982181009351289D3EFEB678F1EE8D039CDDB6593998D1C484630B5FDFE200ED2A7361AB588E564D5D5275137847BF296CE055D6F10FF7EB8393A94FBF1CFD8ED67C44E79737D8DA373F32750E1070C0CC4608DECD9236171732B6F87DA818084189CEEE0D542EDAABAF880B92EEA2AE57D37B8893457155C9B33B7EAF1> |-systemdict /gcheck known {setglobal} if end {end} ifendNHWRNV+Symbol /Encoding getdup 109 /mu putpop%ADOEndSubsetFont
/NHWRNV+Symbol*1 [109{/.notdef}rp /mu 5{/.notdef}rp /sigma 140{/.notdef}rp]NHWRNV+Symbol nfNHWRNV+Symbol*1 [7 0 0 -7 0 0 ]msf196.375 47.6616 mo(m)shNHWRNU+Helvetica*1 [7 0 0 -7 0 0 ]msf200.406 47.6616 mo( = )[1.94629 4.08789 0 ]xsh208.383 47.6616 mo(1)sh[3 3 1 3 ] 0 dsh
229.975 45.3237 mo
249.925 45.3237 li
0 0 0 0 cmyk
@
0.5 lw
[] 0 dsh
15.875 3.67383 mo
15.875 182.724 li
258.325 182.724 li
258.325 3.67383 li
15.875 3.67383 li
15.875 3.67383 li
cp
0 0 0 1 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/NHWRNU+Helvetica*1 uf/NHWRNU+Helvetica uf/Helvetica uf/NHWRNV+Symbol*1 uf/NHWRNV+Symbol uf/Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (SamreshNarayan Singh) ()%%Title: (lognormal.eps)%%CreationDate: 10/5/10 8:27 AM%AI9_DataStream%Gb"-6kBc\i&h&-FJ9q:NQja=4gL)crkF;g`ND20:G%Q5OfD]o8\"o=OKEV(_]B@jkT"uOlXR:sOe`HH>LU0:E48:36s3A4OPirl<%)0]=Z]AjdVjn73:(Xg7#9N4[l4=Z_UnjsmNaU$9f-Bg\pb/<qS0+Fdkj'c/\9M34ZE'27RMnNa"RsA9[%]8H0?0_A79tTd>H51I-%rmPcpHVCE^fkAn$8fc+'Kgt(0g?hJ^iOId8\hd1nT(0[5ERsN":1jHj1sW\m>S8*9YBWIePNIXbFlVrOEF[A`brX8j)Q2)!o[2t2%]L]`qn!DIEMEl^3^n\V:a7kAUr6SC=TE"FJqWL\Oj6!^1*'=HsgK.:&e8%f*$pg"K7MBYoPCQI%4"Z<O6/[]fJ9*(nEH`lI-gt$U%8q1u[Iq@HVc$":b*DSf?SBe]_!fY!@HJ/6URU2-ngo65tSmKWedeJ.8"[M';),fjHfTCLP&[#@*2.<4!rf:,EGuES#3W>,;BNkml%1RM\'S`Vp&$A&&Pq2[?Z:kB0P8(-=1G_8ME2G02M1J)d7Oc8i4QZS-_0ogDhc_LH)Jpip&SL$7>.RC].frh#+BM7b=KpL^,/^EUj%qp?Ep;%9g?[;i[N/m(_bVo]189/OokT99.$_aQAR:8It352&<!A$m>;M]Q5g%^&"CVA_;'#]./8G,%'od85^6jTjo0[#+X<Mb19[%s)o4YRDM/Icp(B\cX[YP1E#s=Q/nj;#_,8ThMNMi'h.]%>(t\+<\auXP"GG69L>^h&kXI6eZ.D:-3Ig7)(:+k1'=p?)(:cl5UlI4%T2;OeJl8EXe1?mC9rS8,W`=:JXX96.]39p_eLIOc7SLfp`^>%tDkX'+?:4o!5+r\7#sP$sbXnBTGm?-W:FH<$JkqcC$jffJjoh=G%$YBO6ck:mCBc1LcT.k3Y$Vt2+cmOAkkoWO6]\jIG<3,L^?6:"EJMD^"JJ*?nRUkPkoOR<!Cnu7l\\(CP$1\U!_>N4)=s>IfAkh-E%'na7t$K`_>0S'S1$hK!Hp][uKlOTUujR<:9TbP]]505:;>sdIAqM--R4TH^npQ)t!A:+OF:l<%_L'sD0)*NqKN/R=$>*dcuP`Yo2%)46u-1LYH'S'7>6L&&P4PTouDk!rfGlG=p5J_@THo$3P@LHpml5^'WLLZQ2nmku"CfdUGbaESl3.=jPu*J$99QbX&"0!C'n2_oP)%-21/<-hYT.nrJa"?maROABbEs8./GqO6g3ggIWEP=2n8UZXc%pH_9YBH/G\"%r/.l8B,aoQ";AElMr/m+UPPVBZO\Ka"-mWg*JV%%T#:Td0;47cr?hm3NV]">MoWqXoe6.(ng5"1M>ES:9;T^Joe6--:6XT"[+okor[S]()tbl[="KNll<j,.jXlh@'D4$S=/h;=l<j+C%;uRAT%Vl<AA6m;qq%rjbjsS)?nO0cg8/K_)C9!4VbGc\59*j(JO@kes>s_4b;J#VV*EW9P]_X#F?QhR>dcdmXla4[k^?>Msb@kT@%qUYX?A,lu+&&s:b/\q;C)a'Je8*lZ>2?,nj21KOD3uteJEPAm[)J!.@NEe8l1)F#a5o[=WRE)oCrCuPUo&MIR!a*SkED%25)nmV]%GWuLV?Y,J-8N]UM10&mK&de+=8gX\nWDF,m8mDS?.$%@K,MO=./OfX_ClnD$[O8`F'.)j@I\sP!rria?cuoH0-)BT>E$\6717(i6%<dGD"aROVN/7T\L8"ip+/YG!P"Qj5"b&u8.KrV^fG[;RsB2Y4,Y?W$u0@P59q?3-WPqe;c\`DO0TMQkEl23%7=&fMkIBo$32.[cu%]^]/4FH;4aGsC:#$[S3"EZ)YqJ@Q(7Jq'Slgc>O9g,;J$$5l1^KG;qO@nPce1I"6j?%Zl.kVKfF9mWt*dDeVdElpS$E[""ga5qVe%4amYNPIMegaV,(_=&E9MKa*f@bUN]Y^abQBJ0,&3AKe3n<M6*[a&Pe;GjsFp`VWo:(Sj"*6,E`b?KUdHlr;DW6=d?*h5gAjGV9?f%XC7`:>-"ClPb*\2(:o_t`O0KTlkYun<Aeoe[7qrhX%5a`WEEeI1+T&;K8_pr'Mms3K6;2`H2#B3a/^,'diD.jY!,:YU43ihI\_'\%'Q.BJmM5s]\i-Q8D4p()Z=:JF[\eUTQ(=\a%Ae5N*NKt$@S1L(V(Zj.KVmb6QJ"EQC(urA:n<9<dYj><^Ho41h?i86B'*Yc6`)_5%T9D%D-(KdTq&%)7KH@mnF[BY3l50gDA4B.'/@R!aCsVIN"jDbUbcIj#ji0/5F7bRGdOEUg]KFfOQ7"K\&3o8eH9U3gL.Xq3)KF$e%bL2HorKWrgR8HUo\2$,^TK2KPpc#Q);\<7i8b%GA(f..K#81Z98B2&(Tj1Efn.]1YVj08VR4G5LX8>4(q&BR:Yae(C?t?jMluRGq%A63R)QdP5-bgV(i#kQhY>nO66j]T7-cH7s,MfOH\hNIJW/#*tD_nT=oUKCi2=tF-1@GsfWcc@q#;:`o*1>\uA=%>Nj-fj!oG$IuJ%OP9k@WNNP\*eq4!>7,0U_WOb/MLsFt#'Lkf><<W<LHJ=Cf8'aA"goYR[_bOFCt7+e^d"ZN3N&-8e59a5/L`MNQ''2V@!<mBlp'NZ%\YMPrk4!t*#I[EO(Sh`r8Lo3fW^QWJ&[bKe?KMI90'8G40$[%67.+Qi`oWJn#Z2hcVA'mclT8k--"Y\jO]RhHU?*[V?W)%deKGb9%<0;J@9h*]hAQhKt8=?Z6:8q&S=RWbcMT\hX<rksu(!ZX_CoVa:"mo%u9t7<_&$dOW8j+)mYM#nbs+5^-aTuI79?Z9.3_ghHA;nQ]%f/pt<YG)fi#[bud`6_6r3?CalD*]SMjYZU4Kg8MOYtUGJ$-W[t\e.c],A8b>9:G/"n4`fGI(agINf74!We0Xle3UE!J;PiLW:Gh_%B@S"PbPg_kagI*V.SK;'J+M0q5c#NF+/uQ"U-U;V=J_u8r6EORU^Z"]VCg&a74Y8%9+#N!-.CeS+EMc97l9ZC$Uk5Bo.r)Q!L0J(%qcN!61<sF_3gtM:=\9E?XH7!-Ap:P-7Ze?4Nadksc_P5.7NJin,;%(5XltNh_tqOR!?Y\Z/<1V8:f6&6H<El996c9oJ'9Up#G.d9%]i,@=@G6ku*[ea*=`M@ZkH.^0$f%K1eeU5+(:q,.U8t^J\So0(8bjm[%!_1q:I%#g6gT[Zcm-[>YU3D,71h(Gn5P^^<F%j#GLEsl%g'KO:Ou[q^hC3hWVB+#"`_\.Oi&;O=MSS\&>[*!O2N3DXRaMsFo>#B5D)lUT=qFc7T_ob24`)-Q/%RBNPHBN^+Y_qLOHG[rL^WMF%&II'SjUm2%&4gIo]tss'&njDab+Jj7UuY`ofS;9MM0sbu2BMRH+69!`*P].LVR)ENd3WC65I9<JRWJcV4is6d`]hDe^EbdqN>4K[%BoLnB@YHO_*@nOo::Jhj`[]7,Cb!D!VVPQKMOho/>d8(@7["O#imqS`G'D`5p"t,Ehm'%^L=C/$`nPOo'!CJV8YiB)<0`]J?.++e%Pj'r7\k8@kDVc*IP-RGQG0#mg.V4BG-o4bC7Z,L@U9<-B.GJQcHq<:"#7XLm@Vl8:fOQIkHSCA7e:qK2=DQLR8^l=j3<fbJ5%CN\%^H(MbH3d,Qm*pPhlbqMpd6H[Za6,9;*B-&X^H):ROYJ9?70g_E7s^42.^@GoY;uE#.??s3fqdLGbg\uMhg_FfX?Y/uG0Q;9rsm)?%G6p.W*D#\5hjh&d4np0:BVO[spRdj1JOt$>ru/hO^Y?G6++H_kX4qOc:^*]HHZ+]UGCCAN1UPY0IlQgemo/lqJV;P=F[n.Waf*mY%@Kj%S"hNCNT1Wo*HXtJh6]+H`r!..N"Cg/br.DA5J#Uc9_bTs0/o2(&BF;uPQ#H-O-<\a=CcoW\`L*BY)ume"\RP#51h!sY:sZBY%l=\b#%>*28`NrTd+t3W45>]blkAW=F>Jq7,0O(p$HnUSP;,IO!+eWP2k7)UH2O$N;;Ws>Z3b@$/kC#rp>a#fPCbs](<<lQ>1?lfG%g12B'c1W"JqcG&]RVdup"JlDo]4.D=_+/Q/lh?jS.Dj!]5l-MKS#DqEWe-d=&dPUAP?D88\kg[Gih1qG<+XDtK""_1rMm@X0oenf%1%fN[/O6sSXr^,$M"\s8\-nj99=jt4,h_UOpdN<m;3,dsoY3'50,SD/PV+)a3U$GgN@2uB.lP2WA!??$!+#a26kgPGTZn":`YE:_%7o0t??nuMI:-Y63+ek[Y!:YtsV9%3j$JM%upR>)LPCO:W&2ikLd<<DQd7)Fn2+>U;^SUH30a"f.Z0B$M\*57ah[!qOZSA-@?g.B_%MmiNdm:7%WklrO[1u(Hf'trmVkuU+T<9Rs!'0qMLM+48'7]8':(sh]Q$GFh7)HBX$>WPp^m(-Y;W<_<2Ls"\rcJW-5M$IC=2iSu.%:-VSjhA&+gN^i6q;7#0FTYJN'=6p(gIu4Fd`mmrRX&%OK`@%,-AbQ:1\n[s+f5_rHGfW6(kl\W36Zp[$ki2]qCEYJ-/PQP=;86W*%I5mOWk7m%aU*E'H]8/C&a0;umZs7HQ&90?Gr]i9.AA0YNE#Y\*+nLu[Z&IW"#FR4te]%,KO3msBa_Z<G[f%*1*40\UCe%b<):U+Z%G!]e&L"Xc4*el@AT)NlOr^M$"0\_(-Z^&U:>;-ZeS'H$%m<A*er^62>^ZZ']CHTEuOPp14.#uB-'J9%:*=3Y5Ip>r85b"Q.CS>%^%D>&a8qk$c-4N3Nf\8u^R*r`2t">%T#ah$H78:i-pA=<MU5o+H;l-,u]8:\BjgcWPV3j/I`2slWOBJcLSE&8QP(bnlS@mJPCdsX_B%,N>4dOVlH(Bm''Gq\Ru\"!Do'kDk=IbAX<r6\gAoi"TZ+r:i\Or\saA>]AJ8,'a3Gj5U0uN\j'9D'3M?:Ot3*.,Y"M+c[&HYX!G`%%jR3.)*@XgW1_W^:&gWsE4[6<:luHU@Z3NbRcruE5+iHRFbI3gD`"rFXG+F379c44j;5\*4sk1M/6S,(9i*#6_B@nMVQ-RV60S"0%;T2r<>7l2GDq&3.et+AP`!%=gU%#((WI2aFJpnf%jlJuFQ+C+s1oUCO[YuaUW^"VFkmdYE%6c$u(K+D(7<:.k-\6cIF21#&4OJ'[%J1I.*3b!QRZ7A.C;[r,JK$7"=b5@J395IK'UYkGm^Q`b8?boK"+$*uc(hf%Xl8NBOrXRK>mk#"'<@3<I.5SfTR&MKFg#("a2!$#X%C%=ofO&ArF#F3A><%oPWe^h%_,G4$G70&[$"b"dZUdC(YD+YsU>$Ab?Gu1LXb+PoG]QFg5;IJ\Mdi$#@h(CmTO>jS:c_OZ@JUXMR%8Dk9Y32JA#5'.0P%LN;Ad@%`f9g(cFf2j6=SfsO0?Il9C&\L]MT(Q^Z<GajgN>dHDU!&K?j$#hTjXqb*eX6QqoGRJh-8j0!,:"(f%B@1=8'X2EBC()0U+7@V/(Etl<14>gE]:=#Adc-!6gYb%TFr/3*af##N3:&*Se%S_78KZuj;#W\SO#($LE&o,'T'qLOd.^KV:]KI$%6)DhQ5VN/$>;%iG/&l1gDVM)lKD.u6jILqKW^qB!eGAs<r7Ars`0fAOo[Vd=4?3MdKD>B+5DU9O(UmEL.DF,Y%6ps'rfVS`Z)c39%-]"P/Dk#dL<R\0GLghRUhi7//"llgOK&A!Mj_&W[iSdNrX175eNGXX,H#r>lc]oi.r1O"Hka@_^O_7:]$)%/Hl&.s2BqjVp)=du@%JYrGip4/C5!>64<%sJf6@5()ZMk)^%Ouj'j=<CCVq(:bn7K7kIjS0hBIJ49KEIbcNTh#-'a5+f(a(N]R5u6r%E4J'K!6N0'>].J#%hU,\_52D(fTBS9*8%ME8J#6HLcZC]8R;S4<UtaCkR;M4"br56-])=GG,5#Ti7Jb>lMtEVb([4/:5\]c7F;t69h'W+p[ss-)V>gsh%9)fbYQ2\NnV&n%5k,^Li?I1G&mi-[B9h/.P$n&QqBJPj5M`h!U-.4aSS)Z:rhL0'aS@ls'Z,hi6A6%Pn-oIVSHP045nS$6P0!cCD%(t->[(YO;hG+BA5:?8jRaQ,ji3>S?1F2.sF&cR'9]HX?m2"Q4\A(6V.Th49dXR`1i`+.gb-N?OC%DTL,;VN2k6[mo5+.Wg%P2XS)%\,YoGDh).aOEs.Z[UrHP&jZ=!'ePBbc2Tk"XJ('><;X#Vl\qY@.3l?4%0RR1/UU7l!Q>].qR6]nf>!d7aUUY.b:/r?CQ&2Bm*4Us%n9e\CDLg)o'Vcn@BR]oH63iW/aTc.!_tLRhYlblSAGFKrX4>1UVslV,L,R)K1d/[==?JgVoU;(q77cp6OK^VBDR7lWltlTRX8:_,%kh3^eUH0+f_`Jd6f:G^6_u?:)AA>SaZ]c_,1r/\oMV6gG^Q'+D/H8"'q0rE<-h%*3&*Cl](_%h*DYq2>(@rCuRM8Y>GO.Y2p<;^r%M4LR2/?rINcOsY0)(.AH/XY/)\t/)`SS?K'Is>#b`Gu>uooGX]rUZq""'=S9R)n0nLrpg3Lc\WW%P=R*)GZDOE$W+ma]3/#Ai3rY%5Ci?8P'8pVNS>)[p$e$KI`.oYoFUlI[+Ra.d&Q-IX>l6b%Q-E%fj.9[Gf%Qa\BmJt;h!ot:53^>UUp^/,1u>d""_:1G["ilgrIk(%dsXNPGQ3Y^5Ap/f6d+W,#=o"=cDL"?E^U=)78D>,l"iCI"g"2[YnJT\a3DF'].gYm61&hWmRd01FPb,-6;0(ES)\3ufGo+jhuPr`%o4X^O]1'R-Lj#C%i^2A3XM?[)Yc*ata0PEQE3Mr+?F(2U@qd-Hs,u/=dbduIV:1tn>MWV0qN%psZq44tZ"r;P,PP&Vn1e^-8FEhC%87"@Wj0@+ucMGc]J/.^&cu#QF-Z;SOf''f1d[1GWl;k<94X$0TM5E0X,uX=)G=LDeDSJ&Uh2-%3PL34Al2/`I2r/mRH1R#aSW8:R%Knd2nRgt^#.*ZVpN-j%oU%(pirE6>'DGAu0=lpNRF2'5E(s,E,r(@rh_!n:pLTWtUf,^Q>5qVug%Gm(3=jZ;)C*:HIGTc`k3Z``C%2@E=.:8%dKR/Oi:*Fg3\rfYu6[/!n`eCdk.%t\\G3:9>.q8IKs:52]lCS$7K@&UrZh&YFa%O]n5`FAEn]2!=?A[L*(/7`bR&qI>W%6$gA!1o4Y#.7uKfm"W`paNdpU/P51FFf*.'3J;eF.%5ktP"J4EIW1g/8f2"0Pno"&G?<'BmD=Af2@%*Hfi,IR0%h8a_MT&6%4kE4%.C;XJ`Saq(q(sHZ3Z8c4AM4<7kn/D]%2eW"flE9j0A7R$i]Shi$K/C2*idWY.Kd.YB@Q1@f=cb&6&dq6)^j2gV$<QX_9Wl:NQ0?u%g^P8-%q^/7VaJU"i*p?BP%.M89I0i-Z:'pX#i'gT2O+0lnGRbZ9c"QAe.nI*l.<.n?j]1s9oT9d=:d-&Mi,pj$P)(+4ip1(k+pOu%p7!;mU86"X?<3OGh<p8tmGS$H*e8ZB$l)AaA@_qgRTl!sGG;u0T_8FP6,@b5LH^LRJ(*dn;@7IJ[Om,#KO3%3Hd,F[dq6/*bf;X<%k^Q*bClLhnHh`4D&-Pm4dnUpjACKsG=oYF^0\l=t'VR>p@`E"g3qO"NORD%T\=hKA3SRh9'MCBek'1>9>[.hk9^3a:@d&H(_?u.(%;3i@<2G1;d,&(4#a+\1sD54<jC)^`P;;3M$,AqR<niiF142'&:I5nGtgsIAS'%Ih.Jh<=6&k1:\UqHdYb4+<!P(/Oe@m+hJr8"=4%LE/.'b#'Y,LnU-rLhpk`ij^e9BX*m_JiGA09=U1BH-bl,<0l=orI:n^T3?1>_3l&=7m)Qg$hJ80$t\I@hsdKoOWb(2N+j`lMX*ca%&>CKlGO$>pGmqO($`Ff?YDO>9$s,ffbh0%n_;TZ)66WH&gS1LZpG?A9jBs)j/Rf1LO2^GfQ2-?cQAeI2+NRT$CLK42<^[:SHL625%2CL3,*_`Y#MTSW)4iQ8f9'I_]K<q3ZVQPh:``T*u7RJL*9X?"!AKZqoc:To?>Wq=)WFnfV>$Xr0/;jq4&&\YOZC3_6;C&=QXNU6\%+Lk-kaMnSujS#q5JVtU$kgP>a-^?TdN!(Co(,agU)<jPPQ6ct]NnP9.!\Q13QoZkHR5qMil)Ir40Ho#R6/*/@^nmNQJSZ#up#W_^%Ml8>(l09no?UlcEmTZZEPiq0C&^Mj)jmD<c;o&?uYX"lbf"aiQJoOkb&p@j`m>bZ'"7&KD0'EKSGM]R!e^gqdGc=lb_YAeD&r%;h%B3%XlBn>\h]EhWQJ]R-=i59"36a=aWGD*>aJHZ:5@W9<.GToGo(*"/`JsP;a8k./k(q(RPM1IMd7l#Q7(jG+TXSQRE*=AJ^ib/V5%PM`o[n=4n.:b5k;)NAj5/A]V`<^XF9>:PlPBuRSakVsF%IniH--H(,SZ_I$M>ks+]m"kJ<BsIT-WI<AW0D:jrGO@Ym]G3b[(WfHK%T\CuB_Da,JQe)oMr47]A7i>)N[l<lt-fW];mOFemIEQX'[t?dO,TY#RK:?Fd>b"e\a%*W#_hR>PITuf3`[6Og3oUa\9$[`$pP!qa%rN,d;Hs><cn*ZdX]R6rF)C.GA^cCetq2iSlSgP0B?(c1dms;VZIgAEVKV)7,IXp(.1J%.AQ(RV72,Q$V'3T66+8U@9^7>OrWPe[^%)#\8@n@BV3;8ojSmKI2[U5Q@%+"'E.%OWXb)kH6@A3>m=]3O^j4/FS3o,BnO+6.#QkufE9o5)%c1k`uU4L0''R,,Nbd*GmVlYPIF%fk,FTGN7jOq3[)Z0E(7U?_nC8)1%*W#h^?#`o@dn<BG>Ka3WAZZJ)F`e&8fl4Z;WuD>a;f]f,,^e4O%(,6I;_jjeK8Stp:MZVKiV%N48:nh!+7Hp;FEt*#WmVjt_:ADY[L@(JdMAjf2R7f;-mVk#Qfk4_*8]r;MPR?5:e+VeGaGF5<dTZJO'unV(DL[E[ZmBrA[tU\M)k%Ve@[g^t7VE[Vu6&#3Gs!E@Z>K;]i"V+6p]>SDD?8:=";Oh3u?e;RIS6'Ot^TU0Z=4nafK@_PGZICZ;qs&MreG-$"-;e>^WL]1p9$%07C@b\P@?3Jak!)RM^6pQ?nDFI3+*%3h?%dpLGKL<pJk:p^HqT;U)`#q#*?Wc#>%bSShCk;HjrciDeDXl@j&NkNAiOJ<QJZn%j"c%XOALt$btL7G?X#6509G.GBjVu4P^G/BrC\;^CFuK-h4ktdV7h-];k,f@@'&J7<n#QW-4&E+l1_GTo?%OOad<O4[(\s3_aLh^,sj]%ZVJ^!EUXk:ZY@%JSMkr&qd8BI$c>^mGC6-!Vh`]saQYa>?:_Pd&ao3IY[Q>O@9kp>HjKKV42(.n5"n&Or&fIE@ENLFf>eeRF#_l2%mds'B?<?lFpP_0S*Gjq#`P'W9DdI2u;mT4p\_I$jfsoMk>ikY?r;#$Me*#3K#/X!=\UN?^3`VA=T@2NdU_bcRo]0f;5L#um[8Y#_%e8AV4Ob%5EA++!MA('W?2-9&9%h(NoT0tT!%(#sRWM".85C0,n]r#+MV_'Wr6^kg.;)="i'mr#k>s$L[mOaeX5c8&G.@Q1C/Sb"F%B:D,1]gA:XNT\sKE-mXh3mEG%1\Dk[+!@*in+h^(&0e)l4Lra_T\JZm<GFq_R?j_]:.%,9N?maFcQ>VuKJ5NGT=j,X`N<t@&@`S3%mFHO;C^m%9:=n`T>`a^2r]Tc7l#5Q3>GRg%c_EPj]"AtLl0X?^32u_Be./L-^&9_1R_HI"kPI2MDa0BZjdf7$B(R.,hX\*HD6sN%%TotbVrK:'i\&gK,.Z\oHSY!aAjPY+>:A:>'MJ%q8PNgi/&A36DII$I$5FX;ie+X#Sqk7m'p*_c=$g)A3Vsc\S`9,sLDR<VjPM59t%G('+26JfHRIPSLGf:hWX(OaJFAEP(Yh)`%ckh\*pXrNV$9S9g`hH%j1qUXcAI4An(9]*U1?W(+*Dni/^UUo^Emi.sF/jmk@IK-pJ%HSMR\Aq.OY0R\9j`,g.b&G*=8Xihrqg=r4d``(7VD5D4,P"acE:uD'XhX#[,,A[Oh->sQ?Y-Jk.kFD56kh_&sc6ml@@\r:kmet[?%/Qe[RkMCXl\+6gaD"KXcY^ag0NJB0CAjKG>;C#B(3kiXtXS-pdXD1da9j"?+_K6/"ac\#lOLYV0nd7RT=LePT\U78+O'>F;[hS4p%:`.nno:dY^c1-PHgH1<iDSUU%%[#K[I9;+Iapq=o1@4;HNme(P;C(^C=PZ:A^$dHLD8s/6XT5)4)\l1m+rXq8FrK'L50f-K`R9!O%F7X_-HW1$iFrJ,F0^TRZTJ,0/;m,tGEiJ$pls,aD^bFMTST`X\j-NtDVs0E)-.?R@H[?EM8u;("k,3<pbZ3-n3;9c0=(YY%BfZ^Y%Rs'\)]-h:e^="U(/(,G33^qaJdN)Xf3k^#$l4iPn(r2?Fd9NY/M0'!O:-j+!2"#J;'?-LlHs[9>NTuYPZr8N:R!&i-aH^@3V$rWQ%nTT+!!i:ZI?WY[[grlc`=BH%]s3F@"mW;mZ`$aAbLgIkRMJ1:2"^GOIESp\BJB`d_>D'IcB4FP=[P.At(a&']B#En(DWL7k;,pu3%6KL[fh3$-[+#f;)e@30](il%u,@me;pmMr]>L\b3A&Nk;'efLk*tN&j=Fetj\^5$:eFlA-LrR5bM-eTkNI=E1p#CXh\#CP:<%2..%?>AhKAP3mZo(<ms\IBJ</1ADjaSb3RYL^RGAoP2\"X"1umNCK]iXa\'[u6"5SS:q"@Q^U@R1F/jj07IbEt-Yn7+m7+<A;dRk?7?%%)WWLXGrg2EPFp1Icf_Pf5Q"rsI`bp:$=7V;Y+W(BS'(Y\VXjo+pKCied.cq0TY^I6D=(+#Z,M^m_;\O=Q-Be[+i)fgXD;J!Spkd#%QarK)a<T*r_(OkXCQAY'K]5A]?qFb*U^(*pNW\mkkG=nY>&d]n;gE,:?!\;"b)eI\ga8i;(j7PI"hZ1W$!6W<#l5c!4E#>EE"3!C%R$);rXMhP06`d@Oh/BAW2)0T%Ff_&N=VhOGCPUXumL'[VQU>q.-(RK6l0@<>BX`<lol;inGs\/2hJ"BsJqiVeIg^(fiSBbnQ74rU%Rp3W'U)bY7`AN.\6NP)mF6V"ZBTHsJAg_)@OE"439#m639[!!Zo2sVG@]Ug*dFI`h\T'R7>Y-1in_n7I$m1NRk-SQW$6mXVY8f=H%2-s&Q5g-,FYnb"!ljbj>*>N*(4$?Z"`/G)KAQgl0=0C,Ci(5[:X?+US:7>M0k+j\h,mhgL8Z/Eu6CIB`&0G,Pk;tg]AP;;BOZ[5&%1TJEV2"N]7'F6V!=-qlT21S9SJhbrESiS_\SJG1_U'e!^TuqW)[Tj88U^&563k_2]ObZ?o`F;[+,+Z#]Mq8L7b;[l?/HlMtR:!:L%"0^,KTjDQ<+:G:)=l7V=^bj`OZ-0s54%jDt+JrWsb;Y0E\i3StQA!n\>dk'Y?H6i7(o:ri2)`mm32FPT`>.?3DPH0#b=]ftCK8aC%eV^_gP)E/Lqt/N@Cs9,(Rbq3\<Yk.Q[MJ573CT@+jr-K4cQ=4]'__oMZsEl[4SKfLX$?nC\&+G*BsK3eaJ.YK8hV@qqLKLIqe.DO%<BTl(YZ-.oa\0E;.pFVC#[NemTe&HUSRr]o@8J%g0O6n@qj9OI$9?O6:#$P"Mo,(]'kPVBkZ\.4I)XN#U@5n9W.?3[4%9Yq90Q#\%Up3JW=?%R/91"9b>S@-_SpL'GfhgS85l_fu#XF7:mP"^RcPa\[)\V9d$Y0FsXppcbg91]##i6KE&*`s$2cY.G=.Ucsqt:GoP8e:b%B_R"6lN%bjE0m8_[KNf7`GP4h3FHPu>hmJLa0[7DTVArqP30&]f0d/n_mq?biseGs,9(3Ra(&>QkT=L"G>emk@Zr@3Ra9C2$n;2W%GVpHoe;(0M)gVEjVQsc"@29\>N&EcO#=!gr$,K@pk,JZ-ZLniRTDej2%,Yj1fQ)LFAF$!+pk9J&J54MsF;RoKYr%EHo%;^r9J9)7%I:1*_BIugiHo][adn@J/HZ!_mEd8Z[68<t\nh&]1H8]Gm08FjC\CB"0lI<2(P!,g5@B<sf<r8DTMfu"Z%eZ?1W<mi(b?JfKZQoPH%CN%)0%Wj9,N)l6%#0[-O(@uqW*?D1:KT82u((RBmXS2qPalmGHA\<YpQ-a3=L)+^@`b.m?mOjjeG)E2T[]pS6X`I2[e6A%^"4A#,%;AdbkX1aBl9rj1)Z/b*6CDFr;g**S3KMJBZQe,A%:/39tc]W6/2E7<<^.4Vic3Gqt$X4tn&5Ef1CZWeRG&c&Iiq$dk2XOfsm(-qa%h7.:b?-nrMFa1p(RD!cL^8.FqYgil@N;.*Yd3d`O9[U5\9YTm6i7Xc:#V>j;$eE9$7D!_2dB"qhW3Na,1sB="YuSaLYY(B_1afeo%<c(Ec2RiNuTP2]0QD0f#qA-QHqUmB:7s?#M3I3.NQ#iI_+m*GSN;/F%l-SeETs9hK*PH"88#5\!fuDDq^!G67#I&.QDGGji?CN-S%$/t]Z2.\TlZMO0@B^Eb!>cK_#(\N214F=J/Ao?u#dOq^<3hs+4\hu'.'_(Ck/DB.3BO)a&XXMaA)snc5HHFP_()#D_"4nbJ1k___%88,njb_d@6q1Wq]4ZnYd0LnJ^*HB!Z`l2J"NUQ:YD:Yf#>NfX(o)5[>0@\]`(MpIV*ujeL67rK.[^(:A>LDuXV77@[a%X3k^r:7S%bK9Li<Z"DB<GqU(A'GB!h]A9Bn9+`+(nOn$6C.dlR.]5+_c#;Ekj/aR'%+cOQ@oF<am<.M]#2$pW?^0<mQ54><[kd(m(TePl-<42%@u/f)n\rWs>0/06\kOh8'=e=`o-S'Z8(b->i^)8Q&Ve@q4<cV@W>(?90r@juI)n4u&p'4<&rLlR;[5HISnm&"0rG"mekp5TRboTs%aniYeTeV2K)nT`A>0;mE'=W,pO4LOl9@8tUHa;>X^o:ol?gX4"j>1chAA>Tq^=DQUX!&(e,p&<HacL@H<L'3<'#t(fc%<)!NgH5_%GTqe3=1CYqie\Af(PnT^R)[KU8'nNh"oYl/$sgq0Jr[poX2iRi8'o*.*UANT1[7r!TJMB>>UkKR3eECIh6D87SPc;""J'A<>W%8]%3eC,@]49A.3g3<Q"J'P>T^s!]\U3?B3d(*sMkRJ;TVFFdXW0]@*C8jtN[e+eTsKbUEp4U-/L#bkI+:Y(1b7*2EBlQ,prDqLB,A0I%deHTUB]:-Qg'S@lg3,KQ][G#e?e3E8$fPW6l$Y*u\c'rqd[?KbrKM-9Bd]k4YQfPgHS)ub'[5d"&&RhMUmi\)dp,h8morHR62U7X%&3&c-S>"o7FI"F)6deCem_kUth0;JK/6>l)daB&g+`ggO-!M=sinP9e5i]He:T]=K]<39Vd<L5=f7qtg@RHo5/WL9uCtau[/a_g<%"&I#"K&&!F`AT<]&FAPt<+Q^:>'VUPd8-kFA*OCf1^i&qLtl+UeGO(6Pfp+K_U>r%nagBO/`C?i5.=%GRoLDBY:ZT[-#TYF]upPH%1<A)&39I@931%J&b]J17/;piN/&RbV0qI:m4$D#[8Png?A]%sK-WW)TZ"ks%bW6))`N[nQpguG>c0`O@[B/Cq2Dmt)\KNF"jZ?rn%"Cjf`edUeae(b1Wh^CnA4>pr*&%hutJkf$U_-D0^E#`52XG_s=@5Ek%F:92I\)5i4&/e2@R)2r_[Reeb!jP0K1CbaGj;+sV`"lX4%YQ/.DkaCGdI73Dd<7eb50,>L$@MAAl?OLDR'.mi6rNs(kDsNl\2MF*KKnk_uOEKVoI6G^o%Y8YGD(BsF9e7P#a$XV]lpk@M7:<jX%<e59!@R_-:cmr`rj)K>\KXf\m17/,QcC]S(E%D?U`P?F1]?Y+<Zk1P@b*@MlWQ)Y`-ZcHgrpnQqRV<i-K-XPhk+1VNj5a;`D+p0c%7+>2^c^0p;)Jd7cYD.r'VXg*;3161YFIUdf5h(P00h7N6F3Bh;Cn*6'YS`O21aK*k3SKf0/M`V(G4G6ub2Tp4.l_5p1=:B*9`IA-%GDC`EB?)3;@+QT4je[\WiN;cTA:R`nUYC]D(H*g"#OCk%6;@6A1d!I\`PFSd12+oA/2Hj.`).A?F,S7Ir'!NA`E0Ig*9`cg\OZDR%:icojZPT-A_NAt\W;3JCV\PL.(WE(_0H/N]`#:5iY="d0DMHQ4hWJWfUCL`g$UR?h[Z*=]C0CS";c@o2k\s+k4j?7)L=RZ:^Y"IF%>NXcrh74@jN`ip;g5`5_3W^nn4U?RX(-8J)>ABjAD?O7$]c)5:[9CnglChhugt$<s3YDt4npPqpio*.PZ/non;EUIeO3rcnQ1gS2%4PXss(/EoKbi12))\9D]7&o'f3*Xd^/'#QLFA*VckI`P8GW=u0V2L.6G<FZdpQ.@mLN=>&`3JX6Nd*N!/(KG8[[2^<E&LI>j`n%q%,O9ooRI3Mo$ehK"&fPiX'</Ok?JCi!T?'G5?_Y4I/*g<63<tD;U=!sBiDmkZ'#$GU7it=.goT'>a^s_Y@-s+;Vcf,>3cfr+ic"t4%^U*AVLh#>L*m_Qm"Uebbq;Ug377,N@DOJQq]4\LNraLb>W3I(BPI5$=W3On#&4,&I>BD3OQe$6t0Q(M4k_!&IctD%D4%bOG)pIc^%.9U!am)\c;/A4hjh@ul)>VW#DD?tpYD-/c(b_\r/&VIu>Qik\9*F!p!Y_.b]k/OH]/$s.^Uc(/8S#]&ThQA4Mp$$*0&ZJPjl\S/d%Gd2BZUd@0/Le*5Cls0_,3.C0oVdJac7;[9#l-M+nJ;/8/,W*$]gb'L+#_cK10"-d:37XloKAimHpE`2c9^dO>CFG])LohX(-Z`fE%)"(HliFjm)Y,QUd$A[6P;D_W.'M^"mR`AId>NoeGDM1N$RCc:?[CA8;OZ[7MbQ\ulF&SE?5#u^U)E5+Ic#u.(kq3i[p2C%fYSeP@%k\nqU\t'WLF"<Ph_&Nl%e%20`le>iQh2&H=iEdXB>hB;fF:E2@bhVGqX`r6A/T5fEQ"joHs.t%,40._gVS5t$.\F:*5?.*Taq'd-%I\E@G3[b`<m8Bo#4+nj^QQt$^_;!EKR@^g"KAA(6\*\J_9r$!=hF[Q+HcBqVD6Vbiqt-7upLH<ZHj79rStT<L[QBBQ]?*OM'/T"i%Vq!]i1q<oa[@?:jG&J-.G-skqku8a_PmpHP:A*l2+P$+Eat%TX?lOQq?oL8ag1b5EVf*VbQe^Bo8^<pOK&%KMim.C$&U)'m/*?1u%+*Y/A,^jj[3gHdU$.&(!3gCrV.OU97;ZL_F`19u9:=&+S'VR&E*e0rc^['"q-jf!YCmBoC*U1^DTAKC,JMU2eZHf5@JZk&l\CF_X%cVCV2;R>>&X-I'[K=MYiZgFG]:S#*r`GQZTX\7G\X3#rU<^50XZeZe@l.Z:&<1>%R>3XY[kA$QUjG^057[`f_AWjA--WTZDkAt3s%(N!$h&Y3:d)Nr102PoW&2Nl/7T&3eY&cMN`ehQ&3YFUlZM/>k^K<jT4Bk'[Vof7#hZl"s:Sqb>JeIIJAH7g(0B/DrtOk1FEB,"!O%Onie7BK@APgE[Tu$INrb;q%==Y9TL]8FSQ#Y?WNFc?A:/9$q`MZ#n/mXj*X*N0Fiu-a,1lcIrYP?.!cc/(q"%n+8J,dk.q1Y9fX_%.$i0Flui,;3]#Zbog[DE[h"=l1\J1^3h"?MIi--MXqj`E6sAdF-*8([B,"!/XeX*(=Z)Yn8?aI#[]M?Sc=m/U9CKHdl&9*9N3`Gb%(/;9n$*Vfk3pZR`F[aas`R:jm0oJ\JSO:Uu1n@Jp*UDIdSnL/p+8BtKdht#.Hkb0M9kT.6`&bKTBKDnj3g6$]9Uf-(9kVt+8n$9c%9t)P6j*IHaN"",A`7>\uB*8Wq>A.&rVDC76do)R`U?T$P@MM0*&ZJq;d,;k8X's-VfR$,*"k$PMWAKShR[5Xu-U3NNSHZcR2RcBg%l!ib%F[kd4G4Ht2bZD8-ArWC?Tg=B[l[VoZC)!I^Feasc.^qilBQZZtOnnC?Wj=i6nEsBhS?+#eq-2,q#.5lVXQbg''F#(_Jc4&R%A86$!an#b$\a2Q?<bA_Ss2^3<bVIG6D/ZA<dbO(r'9!U\3V#[>VWQ?)R&/ffS><\O_\Z%A]-WFkC7;c"r0(uq\Wa"h0e9/YmT-VA%!a$4B8F0VoCRsUJh9#BGT9`&iBD5`BdGZ#3\J"Mc]QJmj?'E@';.PedXJcT%HZ\Jm!SBAt#>K%gY]A*c.X*Q7CQ/G\C^(V'[q?Wb%d]FJiHYC2FQNN2#e"LcA<"gW7JBfY77#HILXlDcsDu-huEX?*A\dG32r@Q@l.pKr#;]0n60BEXs)RJPLD9Ek*2.jn(gY/bI;nfY-%4t[7QGM-eFR@%0+o[Dn_EkC=3N1Hmek=Jo.dA0@*`:X;bdX-?'")BOplT3(:VEhk"*+-6Y_Lok0M4%eL#uf0`/"<2BeOU5p(p?]*%%s;htUPDCQV#hMCUS$*MfN$JtN@uBYM&JI]ek-om0LRS>CujhaK_sB%-`R@pA/`PI.)un+ZW&'"/dDMoBB<>!81PT%hUFW8EBE<^%[H;j:aW<6,_eVpDH\iEm5f`p7Dq5Rt"SqhoEnmcE_]ACnZ&OL]A[jP?>Ku6=>CgoP)=CO`I'ahgZoD"@3\oKQeR'%#(M1*tOst>F%%!O`>1RI.I;.F[p'68i>\Qiia$*:hj=gs`n@o#=L`#QsI8"m2q(p\,Aj3u<m!c.T@o@OF@OcRQ+`hg#PT:h`4cqW#I?AC;]PIS+C%BBkZe[@D<@Yohk@Y[A&9+%>A_m9+p`/r1tBO"U.lZ\=-Xej2uG5!Boo9P@H[9-a`ub@$_1S#:jY(rV[3`tq%cXtphMAe-EZ,iS=]%%;b7r[e.^(S+k94"u3fO<Bb3:pRT:5hUr0D;DRCeMK(M`/eNk2/J8K"q=mWn>YEHjr9R*;EbhtpFH?1]M2docAj=<.hT")F/t3&U%BPaYiO2_`8=1ZFM1o;>PR,+LI36$*d%E!9X0K6CC%;M/MO,=+4g43QSN`*mqaeBkF][cbZb27TG(d#5ZDb:8$ja?:_C2`k_8tp73%1D8GdpJgMc^>)2GlH$oNbLhj>[nTT`<;qL:<"fd$ft=j[@nfslaJiFQoQ\]R,\lqTh3l:#NG!04hR$4aap%I#Iqn,LjQ9M.,4KCa%qtFWdk&)H5G?WaK\CTFIU!(@)BLP/0nur9K6IX3mqKP!dfd-aQQeGL3#`?2Aa+-DSfJ?0AB:3bB):_iloO3!"]4WI]-9&X.POb2G%4P[!?;f_`36of-2br`%uDa'P1R]^Em/+oGWI'JS-41m<:Zr4H;C=dP8hM.;61^%k8gl(Duhk[&MibXk>hLaF4;*!:NRZaB2E*?,l%,b"CS>VC1KLG]:;ZXfjq.H`>kX0Zo<<3Z`12%e3,#*hp=-Cnd(gXCp9/[1=%A<!;,?ZtX:ANlp<=F5,4d\0AK)ntCA1:,1BF;Mhd%CX-KJ^9U,X.W[RTl5e6;N_2*JX]dJ0c.GP8H9W9)L%TjaITfcLG@k/b-Jj@jo@$=gp4d)l`OS-:kc&EC8CU8E3kc"S]X6m9$o1Q@%aAq=N(Y"VKMK9`CZ1a(/DV-p&>S'u6_VOi*GakUUpQ5W^0^N)l$_iba2(rI^s&*"q)JJFEj)!Jj.]XOlX'R_<Pr2[0+U6:Y6.#Ig%g&d4MX_!V8B)\qm>E,&]9F%P(T10<)<nD@$FENR(EjKMu)!nP<%OM4#k%<n4L&ddZ,m'COAb^Fd*n&bAi]l(D5c]`kVoL\@&po1?%G?22C3D7Q(:i7MYbP3JhKEA<F(Q?IEkNJK>o-"uSNZC[Nm.t9O9o!6n#Y8iK1g@fbXn@?f_B)pGou8>-G&!m_3fI\0TJ>cF`q)om%h@'UJ/]setHX-1*Q)d0o7P'UQ`iMrgSO%).ae_@\*Q=XE)Oh*N2O+cS@fTM9Kk3(b].ngO*i_,m!:@c+>"Rb4UB']$!8=h.)b0q_%NEO.\H0H_BFUZhUJD)Pd:87gVXq6U.>ri>>D@E2](-$+XiA(E<jtB@t!U;"BHGF9i,MS.Ye4Cut2"S$lC&RmW.k)RbaS*eKq95pZ%lV5N7BSBZ;;Eg'fjH=IcS<QfrP5&6Qq,G&u2j<ea\4^[58bjobi7F?\&,?,J+i5k%P,:TE,)-ke"u"'`B<C8J\/WS6?9bJ]Y/@Aa%h$mqde^)q);!*'%*-g5@OOoPInN-)m1=#2u4e[-?luICMk*AT&eSk9Y8ggkTet0eQoD2Ve8l9?6EaCurXF=r@jKdaH.,R=$Xl(kX%lY#V2`)?S7o(o=a1G\,SZs0!]os<MIqWnX6k4Q(+lF3"5W^0rUCW&)iYB6/`cT8,!SXjRQr5^(_T6:-*qg&.k&s]n7H2o;D^e/nN%XL%aTklj5:f5I'?jufi>Be).CG9-MS(:-,-q=kq<TLmAK>4VNh6SaP925$7.jn0jcA!YZ+]n:!`]RJFejZ&1O)Y3`-K+caH*I7Ub%Zhfeh2QQ$6b?8HMEu:1NA9b#gq>O9;rCk8.f>Lb5laQAjH7aF@m,[224g1K#<^16mpm-oVcpVrVOOqfd_3h<Q#'Y/BQ.O>CX.QZr%i]OE:[8s^a.W%=GesMAt+g7M!/u.>LLXN\H?9`)Npp,2D$sJK=>(,RZrN'4+OH7_2?9dbWIQBQLZW)=``loZqSDU8TSCc(jU"5fo%=9i&4jn3[/Q*td@5<T"S=oAaRl^,]YB<?hjhqDU*YFfs),`uJ9cg,4\c#Su.Dg>\=D*G[6n$Fjml3EVb<T@:8YFfqk]]%]29B>cP%[VJ/^lcAC)I5XUApsp8QA=1nCHdC75H2XhpG(TUlkOl.bZ$"#JR:PtHdjq!OoioF_d!8q^CVc+&nuSG7cYR#]<^2RciRGJ7)a7kr%eIQ?a3qE,MT@fO5Mpo=felhrf7G$6"LpbIla.+HXPh45B+Ef@aEQPkB-:=MFq1dROSL8iF))-i$Gs<V"OK\%V@[a?GcJ>FTT,F/-%W]l<ip"n?/8f+q7fhZ.H<#\kUDoB0!.UE7"."2U:U-fYL>jPE^.e#RJBVJ"\nQ;0+H4X:@n:ViY[^auGGD[)cBI_?ZEN\9k7QLLa%'5Kgmio9b)TUP10B?m]5r^]93/,g6nqSu09o4M)tHCgQG&Uf#\pEn<Mp$LegT8UY6p\eSO&WO9Ka47fc@<Cj-*7a%e`Ja3NI-:&[%H2Dk5SKs:ZG2nqG[r)S)Gkl.8lJh:pgY9C\8pUHpk;Dqm*UaN%-_B(V]PgI8f95"ba$q:-qqQRX&"fXK?<S?%RCg2E]^\BW0DcgL%j6%br/,JtMC@SOL<SuO9BO,Apm>LN0/`RpKd^P4Xk"E!;8[KPbPYf/rcsA8D)\nDh)fjTc=):!E)FCa?bbjp0Y9pj1jkY2AHHd/X%k9HXhQQoZ>nk%-`G]0gjIro'$/.<"Fh<FWX/8f_aBDUl`qO9\5D"HfJ.^q8Pa/[l\r+!1glZbH%96q]cLO*Rk;>^RpeW'ko-IGbj%?<qie/ZFAoSIMt.qacK+=Fr[d0gTl\]p5!(,&9Z0a<eNr=o"a@h;S!oV<?RO?1Of@g";?[G7XCWPKlo\Zh]UAjN?l(pk$:>aOPSq%G>Ep=daLPMh#,7<P$E6\54kCt@)i)1rLG1Z(sf5/+!+,`LUXarTutVc*PS63T(SfhZ5Y,_I4fM(VY2_s2YD\]_X!F_i`IDiPJ?X:%Ccb*?8YQ+rW?@5t70KMC69k4]pa>'1O(7gg'U>_!A(?HUS48Lh6$k2=]sF`RhIuCehrh%&d),k\+u='c01,#`UJP0?&Rf%ZUa5%j%9\[ahoV&qWR2<9j%p\%9&nIV?qce+"P;)mn,Ml:(6udZCQ^=mom;p&W[eP0E.`*\WdA#SY?dE)pcZ?P^ejfugHQFM&g0:O-V-\rh%_Y,JMmDp=Z7:Hh9eE>T^7N+o9kHrq9q)*%*Jm*@W!T"uU0#iia9*drF+T5Y%J.VkYr>k*5#EHDLMS84DY]/0B5:Ra54I<-^QP,<]%dOMCh#A-CJ:p9<@BNE``hRd:3g%1t%V:f<eHF>-MSfcB&L!/.M\+7m+j'[>K\s%j2funiDgPkZ-m/BGl)\#1$.aA$fS51Tgju.fW%.?r.O^^Y3l1()g2[Th(>V<sSHJoBWao7\?8'?N1e"4G8:/^rJ*&-)ku*>!bfoBFV/\LejE'Ec$'_L4f\P4`:<MdFXA!/8;:r4,"s%(P@Du^2#SK:ZH7^EUiHY7(,_XmUa8S^,Mdkm`*p<^2LYKjZ%a3;JCX\A2)_IT4Vn!6pK]4]U!s,Bche96YPq<jT)3rb%a&4)E4le%odCSO^kX1m'l(JV&q.R];NI4_8*ZVM:UZ\)JT00NDO`q=QlE[eGT8"(&2&5uFMPG89Rh"$hql<_H;KSN[-q.BT!Z4i]o>;mkQ+aK%fH#"2a=4;,Gp/)5Uk7<,:nHQ9#d5k]OF<;(D2gpp.^X_mdpA#k:boLf:?]/Mal?J^;([<06fc.W@SPY7Xdi8ELW3oGam!$O!,4@d%f$Rt.c1Je!]N)+pYu58.1oe!;"7D8#guV`n+/#rg-\]%a_dgFS_];Tg*3J[.+TufU+;LKS.P<W9]T2rqDQQchT^mX&-5KC:NPUPq%?2jr!=hb+!DA$gl](&e=_X5n<n+DH:?g//BMoQk+TN0gCU:(K]Q%@(['G4IGO*a4h+qb^$`?]2A(u5e5"/jIiC3Y\bYh1B<m]&-D%`f>iR>o7?*eieAZ"4qeH;A`]fD7Xq+">G*EbbN0E)55h=VI;hudkU:H?W+2,[GL()/),<MZ/bIu?O6!GdjA+2`[aL1:5IcP<gBj/%4\!EX@'Ld=L)WQOP9b?>),AXkP*mddOAm:),klcdQ/h20a:ZrM9NKTL,(caD);Kr6:FgfUH1\,+Ub!rT=j)LL)2P&bi^G$S3R$EH%<:gt3CM@9)ObhZ2!s(s^@K51*UAWbacT=ef*P;8YRf&`7%VePrfH*8Ir!EJ?BB"a.]SU)tGWRoG!!GTt&XcVFJr8Q6-96Q^M5H[T%?L*df&e[\9U&t#:=SMg+-<mU=T`W6]:[HpEE^4F""\S'/\-hkU5eURlOZL--%M7_"kR6e-cJ]@'FX&HJ/KUXX4Vd;EFKImW+,.13%Uk0G3ZY[=FZ>\&-G&:=m^$SZ,Z)ZP!h/^ruJQ<r[`lfeHcXP^8.1[mn$E3&a$gMCcTpLfPl>_=J%#Y73(Y$iQimhZWoU1'P?L2]f%V:"6?nT-m+7'iO8^;a5u0W@EF"VK9Zm$F58"UJIO_A5M)HbTk.!H%!2Go2h-aLF[n#B@#F2UFak],BF[??S<mqe1b'H[Q-r/*U5?%fQn0:!D=h;,8DGrY#U'B>5i3-&+e$MARKn"Q`ioi,a$)rK7U9h#C'gA6VpPEQ%d@U^\o[Y!.#7KVZ<Fsp[3OTnZ<nj&O#d^'aYZ!%j_/@L*8_YtjtT8RO&oeHmdFQ421fJH\g/o.o/"V51l$to[;$F*ZSd3R8HMrHh_n'2&G/A]di(V_r#_K(q$O-(Bb7kOR^b4e$"D$5%O,?Hl)7J81]UnN/OM.e*)mhOrKah#O@LC(m1tUKE-3@oqT'^L+U2(lNg<*JrCGX0\F"aP_*'`93aQ72Ba#b]1a*Y]H93bf"dU]+V%or:`*dRGFXCZ+XKXIqDsQ/feoRnKl=XT6:%:jLcOLtb"P4Q"pBLVX6^NXkS80NLT`ZffF\R+7cTZD$i3WiGI=Wel&<1Y`^/c8G@U%;*0#9VgWk"V[4=3ia-shTMMsg#PW.h:"f<S-cgIDEWP&RilKB(GRa#t;%;'pp0G<`1CnTm+_qX]4Do5FlDmFh">R5S8(5(6@8CP(%_ZL7N@c1(ri@n,YNc'5M,<1CWW7,D_gPY,H">#%tERdAi"Qdb%!eMd8"LH-I"U'&'S+K%f+U/45A$O!Xc_po=o[%lG6%DGBJflp/%!Wh#s/.dD;$kW!+T-9,brplEVJTaYh4sWd1#m*+rBIiZp,EN^?Vr&0o_Mkt7%q=hD^@MbC'`ru,nbs,Q!'q%)os_@^SkSiD^s>9n%]Ba_ug.IY?"C0e`Rg@_]^u_t?,%MK7bSgc9o?%fF&[;]K;lleh$a25nF[mR1/N4-aH;j&HE-Vn]i#O[0h`s/o_ejdii!?s460I;p%(KhhdQ,83l7L`a]fj0SVAB?R)2hZjZ2HE3#5PP%h'@$HSFpp+SNK%r8c8<%2BEZm;_Rp1#m,CK:O;g`.WlR'NW#_1G&;p_BP$8$.%k=iUY[P);tN2[bLni[?5^nL"oFF,RIm.r1@7#`>TBTL-Vf@RS7#%HAfdkE-eG5#*4=ChncNsVjr]Wbd(.=\U=_Jhd]/>j%h3:_),%0A&Ql@ucLDZ&i.r5JbB@XJ_TNW%sSL^,A<D4q5ZGJ/Ia#p6Fb:_3%8`:*95urT&L7nl5+2=<3V:-ne)t81bd2G)iiV%iSN<LDlgQ%*+e@H)tCI:]rA!S+*u7H?s5.D;.APH/j9IKZ0i9S*0qM.O%*LH8RbB(+!si4qLnPr>reKoI2.+nbqq8h$!L6U'7T=RTo\o"BD\a%%!2XDP*"`i+'%RPfo/;nq_j-l(fi]a9ouTS`7f^jV55\C8U_3kSfOiDZYEe]O4G2,D\[7VH;_(%fFkjE-9T//b8Me+OO-TBN,lJA5%:AN&b"KWXg.^>_b;$K*8kZZaj?JM&a]0F=D&')gim0b&WFgOK)LOS[LCp/M1ZN`qKO:^Ui&!T.!M,3S")#J^<8;i2J;1^4Eh:tGa%489`LiC0%i\Mp>:-1<YB;ao6;Lu3c$p0YO[Ner/=&B^-U>s@6_;k.s\_"[b^@468E?@2Ep"&S>mA"1!9;`U40iUmo'D)"rm7t4B\%IJCsC7;`e9oa0RcC,QGh]*<GtHnko6a&h<=V8jcDDud4D<[d]dPLrKd\j?kQ!sc2=Pp:PWhAG#O/V>I3"/?PAAX"G*&Yhg2*:VSs%AklW:A`o"C(Q/R;b2e+mYlt8>Ab(B7ZA:cI9HLtZe,2a@'8VpqK:;hZO?iRT7c9Xr!*Eb[&puG.1/J`q-1^!bg)pqWP6Y)cZ60]J%j8i]N>m"O^rH%$#4G/L&rR?=X;&I>UnJU#(TQ1=Y9L\Gj9->X3m%Y>?O+CU_`9lJ`&Wqjs*hb:`S!-4q&\4LM]N+N6mU5m6BLlPC%bP,B!='l&jLZ#?%@gF(Jl]]WfMF(_:MmH%o[!*$qd>L!-Q;^!hmiW@B<^t&nG0]QBXTjNF/]I>78'^kr3&lJ1+#rtCS;+8'?g`@[%-,,hPk1"/[,>J(kXE3*)D`_)i_Q]q8o-[9"Ct0EAMj5M*hb)FaP/h)bKF")I`"WDo]"gW.4HlpJ$g4?Vlp$8oh5cUW\\/d(]i*/Q%3tFYA;1I"2H&9_r"_4skT%Ku*,REdYhjL/&SHR>G2"O);,n0TWl1"d4_o&!UR/m=SKb6I;@Z]a=Sl1"mCCLo/3OnLp(iS[WV"G*N%V\(QM)MJGq)Bo!>fG>ak5E9C[6Gi(1S0WtnO:(Y7KYD#4(pO6O5$4S7,ogTAS`R46L$JI9'#7u`4@45t[A]@N$K>)%#YP&j^e*!F%Sk+9*o6s=-7]b?j/48qA+VfcaViFPc!;C^5nAjClOX+?\7fXQ6Rj8Tg`;Mp*p>\d[ZGW3=3JQZYl.CkXN9nsFNc!6D!(%`e#8@89%V'+aU^:d2+]c>CErF)>TY8hu;r!@/kmG=4A[gLjD+CTq[hM3S&0'!Y*]RLbF":6.jErK_\%hJ*-!1V\BPdJL8[aH-;gRRVbY'7n=%O+Hc2\m("%$#0'lY.$RQc`\ieACDLm?q,4W#CU+$:-G9"*akP>BTM*=Y:F:R?p&_()`?<to8_R)LaRPmRHt6:K*SZ"/=``>1D%hi%mT&@AK2P#QM_C0&+^j_(PXL,BBnif3h%eNd:?Vrem,VLb-Zk"CkBsX4.VoY'n>$TY#R0!H84c7?D]L^@iqCK>#,DI!/;3i+n9-q:%+^sDB="*NUe]7b;g49c<2_d^45$iECpRA8eg!T$d%I*R9NQB1Y(&(TUnEjc.2SF')/Tb#Q,C7brFS*F1[8?OEqt.`c[30Lq1OA#M%>+hF&O'[&n^;.Pk1Bo5V!jL*%]pPQ13.TD6>#8MKOC"SdJn?'a8ap[mo<mm]`<N_Xf&_)Y$TW\9G6J@J/Vl'M'tq[^6Y:q(J>gH7%/kdiV7kM"_=lK$NXNEK1):/cZSNkgoOK\)tdu.`seiddk^#\hMqN"5b?c)i=Me/[lO(Wf?55qn:KriBUQS&8:6Pe)Rpa<!7n>ka1%J's%*=r`5?VU@mUKBU;=/mhEAc:\uQ.RJKCO/=CpV\TTDn:m0gGCRXu]&<)VanM\niGGLAr'Snd]jhQl<_])iDREsb)cf[-`gl.N%4`"4X?![oNAht$);Ol*//\u`CgD;67q2cil!5)2Q&B29YYjKdR15<F0a?44oUk+'RC?.,.D-4^ONHD?`+a@+>RqVp,2/>]h+pk.n%<k)\+>[TiM75tUodn$rdeeK8q#'&gFJ*4BBHD#:=!oUW:-6gs&KNi!JR[Xl*ceGO9%Kpji*Bb9kI0n.^9o(s1,4=%/Asnm6.&7DO%\1!5gnO&$L.`4acZ#J1FiSLd8H*P_5+-TeJKd^U7SNd84&!q#tq4Wr5%f&j@;3U<$(cNU##:V3TIYRWs"$c+p@>jXU$_g$PaFM?^%'G0$/.@$:pd"O1HnQtOuOg^rD)-K7SY`^'e6Zt)_a:HkM"1^jA8blf<Y-t$`Ik`)X99=qA^CjShK,eB4=+5CcZm*)s+4c*`66;*X%QT5,P13oNO[TO9"Q-"YO9-BfMiqE.A:E[a7/C0Li^=__ui*7Z2;*?5!ZMST5:,A"<;&6WbMb/G.")u$*3L'1>nAYV=oD7sa%qa%k%!JNOoI1EqPkbff+V_DM&=)K,dW8f8YZ,:Mm?@X*K^ssm28qk*>H1u7BC[Kf82aX,']otDA#HJhRfK+FSOh4L>GrY"dnka`DOL'r/%`^'SH,fiDL!d#fR>6J\2)c>6=+f[`_4cYpD5j_F!MY8qB+HknnjcIEc)$t/N0^RL!*hJb6hS>IN^eM^D,\#Q$7b')W]\^ht$J4#o%KDchYAd^PU7BJt]e_)Q><:Ad>4;0AaM;H2#ViChfW:cXpd*i9\':l_'Qp->b.GkcRP#(2V)]8q@<jm*@UM#ITZ9!VSk95>YSG]UY%au=]0E4!K]:rM32qG9s]1^\Wb)bd8UKc'"`kJhUR?K/aU9Nf/Nq1Ja\qbI6jlX?1]j:`k&*cmdc2LAc0UHdR;*A6Ks-lO2a5TkDg%7U%b!A<Ma2m$EBuk94J'.#L!f&eMPY^4_$,=Zk!#=TgO?=>t5Q8E%a@7XO-WL9m[=eA98;k'WBoGlgj$lS?n5*X,4hi07m<h%L1X%]+"F?lK$m)oRL8IC-jSD;[\rD+h]j`BK;t+Ejf=&oYNVr+OYs"HJtAtJH"Pm?=7Lk]F;Qam8=>cQ8?/F@KEmX?QU<QW.iE1P@!`0%'WhJTkG\VfI:r2h3OM\#(\[*IF)$7Kk($c+nKGCK[1I+]%4I?P81h57RWrW?\1<g0US8X>&.uUcX75(D?UBl-A88s<m37_@go$:F%InmRg^3BQ(>q@F1#c4SfpWlDIJG.)2c'V=o#Y++HVQ;ucP5_LrUlO?(YK)T9jE%`DMh@^P`TM"#@h1@OAkYA[TQf59++"-8#VE1L%mB&RM1LhVR*bG0:9>>@6/Tc-CdY5.'.`MfOT;r.8MHGFV]DW!AZ`d9X\Lj"kgTK:b>B_,Rr05e#_QC.U,+?/t$hn1pETEgm_gUpW%c8%$-5&po(P0uc!lo@8<=cESkHRXlE>#;;*d=loZ[:&orQTb&H5qNZ*G=F7JO$.$48"7)4oE$qlo3EBE!;fl65L%fn^8fkk7i[OP%)Q;ijbIM,D@'BokcQZV.pge^75pW;aETU:44e-a`/g'CFE;p`F\O.:=cJN[)#""Hlo%7kAF)/EL%7l0S-g,(LI)DR`D%q=,UWr''%BNFX,/c)N-S/d'Hg,Iu$6u1bWDTL!@J=,%LWMHnm!t`B1&%H`h]K5/$VpK,OE^HFMi._sP\D.<2JFMNiA;tN@]G,>I1PIsT!8Tnj%^*pfLTh4Z+gYCh)027r`+osWUFAEh160fr6DOEh@11DS/]Ul=nDPc!Lf6..'HMjJOLLff?<quI-jgB.0Z<c@jYAuh,8:=.B>Li.3%VLI=#d73R6-2V\Wg@NogN_0RK-P[Q"^tp7-hrf'gFMJ.&Q4$&D[+E61;7r+Q>9@3PHF91G_3KP3@ltQR9,J`l:%Hpj$?]1'PpB6-%96UP5J)E;oJ;?ZBjuhQhF/R.^;R%Y.,A%k`_;*CT*qHRV^^!#NZOZe53T*95?!)i/KH(/CbeB]V2$DIa,C)`oKRBj@n=`HH!?"X*%`.m5$3\7EbS@dgAi18g5.#8B)jQ"mKY%6hl1LQE#W)c[=,4Z1B5e3#'cAY$Wls^h1]lq[;`'gV3BHqSe>Ko/`IhC?kQ<.g&5+rTO%]RU-u0n]8K5"MG^L!K+A)S-Lld(&jV\D*=&DeLQ>]Dl>1gtpj=>>PgcAW\P"&Gb%Y;r[-?*0FG:`)`NNG3O`FZ_WV%S?0c2kuugj%#gPVB@b%9[jVgo\N3&I#YDlHl:>1NMQEt<1PW83p:I,!*G&18<<Gu*$>nb`uCSSfhL"F&:A:0g2_Lkcm0D:DmA?jh]_5Wah>9ARW%?0'r%1tHMP\oAS(nR=O@L$%_hG;ZFF2Q<@@4,U)Wh*+0q,RtSSLT&U+89JknP+=*/T[!+q@/_G&%;0nDgAeNdIrTj@3d3(=p]0C1%7M)OMoDaP=Th6"u;Gn*?NA?2;;.'a;*gu$]=XR.H&qq>*@P1SmW8LQ>Uk,Hg>:q.!7-A-=r#mR&b7Xu'g]!L4Th6"uZWNhniE'Rt%D(LaI9Q>R*M1st+;5<,UNbDlLejQ4H8Qgu0V_FH*2@ju7P_k5`-6u(W$i!usiTsjAC4R]9$K0!@1JsMX-sU*@fOK!\:H:Z5Y[P^s%Xa]VF_j6-B]%?DfXg;R?`9(s?fj3I#Bmf,q[3YXi*l@M*Hf3\F8[=Zek.NW(me(a@bJ`T@$b\E![:O*u?aS[YA/@81AKh;VG#s<n%Z8u_dZH3oF&/"(:rglQdPiE'YG:0S#g!*D)0mOK!Si%HHYFc-WTPt-AN'a,0*,qb!Xq:4>:KBAXBI)6lbnbJe%m<rGiDa5Qq+tsI%YYm\d<^,GhImp7BUjV5]XW9;/1)J9;+0-h4f@c[WQ-$:0"f`Tl.N_GQA[g;G8j/h^8ZVZ(=t:[sk$NbuVR>u'I[_+JITS*BI/#Qs%APBn@ne"X7bqo69>.sm#2,ca3T[lr,$DK5Dq\;Z<2Fh2_b(n8(rHGoXOT)Q.*B&)+%j\tP\AMo]j[7.U[F?3TG*NT)Q`(u:BC3.,%qQ[?siUSU%5PPtX&)sJ.Sr(AI"L$lU%Jq$Gd@eVPI8ffKA`\PTA6Y^U/>mkXWZhSfbCd,i'SouI4Gk55cU3_rNO!0=#:1WPh1SOV%puJG7fCS&+ac-5kn"#NnpUT:ma.r-eb/aO0Y.ja^f]UCQkj+Bq=8;92>GHSa7)AnC]jjG*0X+b6(Fj$rI(32a'sjrgW.*bBl3C<Q%Y-YclntFAG`6sY$h#ja+O?DuDlA$GO/ENg9:J,eq%lf&Aa4Z6Io!'@FJd;=$*o5!i+*s"9D-$U;S>A3kchNUeJUu:8imSN#=fE=%%g3iQlkD[N,OHObUX?ai<V@kcc=c.e;YoZo$<(utf'D"/X,0_F'Mu2&cTkGPCZS&HZ.N;>onWfI-Y5D`nbTn2$jc=HQ$Z.4g2.LLk%Lf7[=mZh)i74/R!d'rph5GY/,AUCR[,O,YiCY*(glmO2:LJn\9KFe/glteoMnuD2V$!trXR!K!K\ZYi>WS,b)"k%&dSY?nG:1MXG%(i>A,/bJY'a#2pi+2un&jYu6t\I.<f`+8O.Z:]D<Nq$rmdrdioBP>!.jF(OEj'6RniQ93sFo8%sHLCRMFq-W>HDkLrs!Xfj'Xr70%h_=I+JQW4t0dV<gQq],:hh1lL)l5QK*u[9#L?8,CJq!#k$hW3?nV*(U8tc![PB=&@YKLL`N"uiCS6>hT,uct)f7JXH9M(kqCpCNE%)d@07A%`QgY@p<Ya+@"IM!10M)85nD?@'`8P#0d9r+11XU$8i5F8@d_4WcLF&\m&\1L`'Sa^Y;2BGPjE]?IPVcT3;=$7A6Eid'M-%P=`i0g%YusV('@%RRh/V5%rpij_S;VEu5BA4sL;7OVTDfXoK9Meo7s)+W*3>#*ptuN<'#pfc]EO.KC8UYYIl%l+heII8%@BCp!Cc%R6a[l`Dp$)%0d!LXN7,P0IV\H0?^)+0IYGoW[u9sK7Xc;'j6b1#)-Qf=(>)c(_h=(hi]P5#(ls`Fu:$M>!qWqA9(I!HU0'[)plX>%4eZ"Qp'n?FY3M_kGMK=pNZKFY$K%U,?c%@'Q1g8]5'^O5)'bE(O)-\,Grps#=C>.^V4h[4c2&FJf-+*g7*OjU&%rZ6bY"@:'_k[D%e1W&J3tpS'Goq+gNrte[H1I!`'"/b!U61\a!a5<cT2saXogQ:%\CPPG0a_D6GBU*!IGof)IYUhTlKbKE$I4C3D&dXPcu+.%fLL1X%Ht"<RTaf3`&BtTp$,Imd!E""0cfR],7(,8V`-`F#/4F.)E#$VdZ,Ui7)1qa"PsHDpfGBri;gAsa?Q=dRb)6Q&i[#nMdeI70I5NL&%-nfi-7BQ=u,W9c,fsSR@(Hr/300\A9Q1(>5Ysk1dDs_TKeFc?I362D%E_NoJ]ZLZ.6eI!K0S0O]F06QKDoi3Io-c'9:6m"_cT)4l%fj>flmJ88\5XGPIp;8+NAW$A"87>_2HD$nSG2uD8?,Paoc<V*SS(6lF+eUPpEs;l$Dl(e0iM^]q(u/RjJ%1!p1&+(\;Z!VtN)<Pc%-<>q9*N:N0POd\`"l>!pm"Tn'DVU?6#^l&/XU:GW@]MDM=*>P:W/9&Gk7F`eY7OJEeAYA.7Vk7A'@5,jQWM;W]_;4Le\Fh*b-UO5%-KcR!W-*3]j;=LFNQ8@8:+VUFVkRWdM3_u9)3C=lfV8N.g2P_.iaTCC-e8\5B/!TB"d>el$K"9k(0KTKP=Af7h@/P*:GKndp<ErZ%K4l9Qb*kt;Hkf]?;q>1\;uSZD.;LP)H<He7=`Z$l=0BcFXLT%Z[q?.tb*kuF3qB:ub*ks8m<*P8A^.(8I7gHCm*Eh0<G2fu<?j-X%o%N&$F'0=3[.fBt7Oi-cF/)ZN78$h<WA[-AD_+\ljnO8%::3AXVqP5o)^Z-Rr.u?1kR8%$n`Z@*(0JC6!nL[!&3!?^cbI4AO+@*5%gjA:'G:kZZ+r-l$*poO'\WGc(qcH+*V1W\rLPl?T)'R?kbec]r(iHh8nQq&H=I8K7U#Z*gkh<F(hIEO'XhHGXShKm,FQ32WB4rl,%a?#Rje/39$/]PBl-bj]o*Ke$HSgN0TE1c\Q5e._f'-Sj*@B3bd&!XRFTg+Ute8U5j@OeuB1`0.2RboqHgZVN9`o*c!=J3dH]b'e8%\Q.@Il]`TP_6<WQSX3\?@Z8-ACZhH8^Gt=T$Q_0CiB-Fp1F\'lf1KK6"k.Op&VU5N+9L:r#k%l6j1f3i`<ENtYu=$5N"()8*WmI5%eqhDj30OsOlmPK-IY92A?#\a!bMsO4dEan*(]j50"6uoufSTlDjf/n>r_,"fjn*Brs2UZ>5.$[JfEf3SDpf#`+77=b7AN-TQa<f3%je6`"pIJW\Woh7RAa`to)>C>oXMHQ^C9,e%D1is(SX1I7n81kUTspufeh_uaht$@#]Z'(sKPr(1[b(aV\J*D7"@tN3g]bm_Q(>-u%Jo,?-#VfNM<=&,BkDsY24j#?rZ_kpXT"FQp4Z'S0@]KZgV.8?Y01-7ETJ21VYh.K?iM:$?K)al*5d.6b^=\paqAIm2\HUI!CVt?A%<.ao=?AC)S#(nZpYqj'6cZc`8J/e'rq#4R2h@tqJniMV,oM0c+$L1tYX9t*&e\?K6V/W\H4fi,<P()r*$8X)d(]2b#.XY2ac7=D7%YR2IP\\,\)=N0-?np?-lpo''^r*8Zo.Ve"J8uIRb**-A:]1X5H?1SXCNt'EB+LE5n,?r2sQ-"GHCHeh/mo(DB=q5#'ifF/?@d4(e%:TX$hY;j6/,6Jm!TN.96ZPRn@Mh,[%4u`h?Vr5RIMLf24Vq+nRV?WXc=BGCi'nnSBrd\73&2'McZ*(O,>7f"69e>kD(ji\Mp<50e%dFC\Oo"+qK'OU"MCJ=iUN7Oi%am7<cN3k4s"2@UEb=Lqs]a*/cG8Y+#YV,7l]8X*L-0BVmHC'cFjmoQYmkW>&&6>r:mkW>&'Hb<U%oId8aBGu*`nlk<aZ/n>[_D)ddQ&Go.:Oq]Q52Z5,*FW$^Q/h;s=d!hNTd(3oEs#F\@H^AO4X.O&-I9p(ntC4nLoA:jDtj*q>+HMG%LV?En+P^MLofRqlo5fSf24h":WbLnZ]6S)KL+tj6_QDrBr>K:$Ls''?L%8^V6Mj3eK5!g1mV[/6X1D_AGn2OA:Xhs8g@Fupg3(;@%DUM`f&<,$,QHSUXJ8<9e/UXaRr<'2KO13J@S/cK"H+`803]c2&notPn`PDT,P/gcZYG23&-',NsFQ);2CWYTg6t)T*E%U=/_9c`T%J8<9-+Rnoe_*no,\;MKnJP:,/5-?=BQ(<AN4W9]fJ&r9i^S-44Pl#9Vr:sF/d8opQ(VoP\mY2q@l/cCcRQui23h&EK36KQg-gK(h%ZRRA>$'_XZ1>F^A'6G32YpElH=_DnR,IZ\(@`J$WHb!oP@SFQ*GN&=cCK%tU@aFkBho5Wn0)k$X@H_p?RXZGl9;Y;?D#%@eDdHD`%Qt3XiXBN5@BX5c5iGnrb:@G#m"LP.q'&Af'ZD@t-CHqOSHf9!Xk<:'Ih)\\7.S3>of5VY+AZH/EHFX"pdfoSI5*58K>qQgNM%00!%OI+?YC8I%;(;+hOUS*ORK"KJHme#psaYV=FjaOGZf2MKdS952P``8=`[T_#UabumqFFG%@'Q"";]t/aP?\l-7T(Zq,#W=i]JeP2m%"U(;9@&^TK2$=&O*aiD\hmrl@9b4IIf(*qe"IgH?WP,AV+P?;d97'>'DadkB^Phaf"Ihnc\\')t!Pso#`r;,+=Q"2.e_p*$_<$GD%%T/'EP+E49=1M<@Y[AjY<^u^AMkZe=XZ>)B91jLdT*d+]:$A@f7U*QEUkI@V;&W1'-"e'3p%e%%OM#Iu?\'^hp4`W]G)riH]jFPR%1<4-?f,/@9E_im,R?)^,\JLfP;nmV0NN,^Tor]64D+]e:qB[p>ets.po!chj)CsUHRJGo"^>Cg>i?AhEo;cIeXA'jorN;P!CK!bs%qHYm!eu%LFX'[[S)+Hdo3.jkjCmt1hOf%ip,od.(9p/`*;g+G+,ulFX_f"j3<4]]pk'?&LY(jr?ZgDafqukn6+_&&0_l&O1cg[0;%I>$T,HjWuD1u/nU"/fju:FRGgO<s+qT]8p&ms=bn.@7naSW#_b:H4=jh+qPF8JR@*9%D_^57s.NmG0.sGFP!^)CRX%^@hsT)Lg]j%,4J?Oi&\?Ch>t&K#Hi,@l5`uV\J?01*]WmUOT!4iGTQ3B07ilGB<lhU0;qgk2Bi,^Z7X+R;fn%;CZtO^CmAUTN@KAnlS,c81'_9B%>D'0i[!8]f`qU\hraP;PKM_)J659@c`n@epi(mmUS1"Y2pCXF.-K7"1@/paXIu'Z'EMb_kIS0jN:n8Pci#SQ"q`)Y%4)+;oQfnN;%6^_&')>=^o@*(#IgWBc6J330c\S:I:Y,6GB"<rHkI(85Xd30a9`"#P,Ms52#deYTi2?m.mX17`:mZ>nCrjZXMC9e#->^/dr$7WD&%EYma8QZK"Ol%D-h8>k7JMcigoT8pN*h17ZSg2Y(=%A(<UFGA>N,[Euk:WpZLX=k$[m]8KN\1BKUksSZh%m,pnhas#V9?fn'd@DeV%M:9DPVYm$bIFgD2p6t)emQRO-E!=2VSgP0B_0rngh"Rtl/+JB;10qcC.[[n3N''>&G$m`j\65-;`E=L/Hut9@"ZiJ*d;)a2aq%L.%[4TlA=`6;BqKsj.SHtR]_u4s"rG4u[ND/k[A*"PKLHFj>52Go8G#.*ON>i]ldUkc$Mg<0jrI&p:i!GrmS9RBfkR"oCHQiWuis?gb%eNLa@bq\MfLIK's+_9WKL1VJl>kB9(clVm,@BO//%i8-ViFiY9YP?#7hJeo&M:V#(Vg?8&2\J.?LC4Y(T)UYImKWm"Eicg`Xdn<s%kmXTY-)p0bH<i#[%;:EIP1lX-HUKd$h4e^`d2;BHIF;-+dFn-4N9cL*SEC#Ub7k#kf1jr`er2Cg$F@ELVhFM8ae3bsUYEM*a+72-%5i7YA7i4h`7EB$Y!a;X*'CKXkn'&32pf_'5\LNADd9`#"e-=V/DXS3!FoWV0K)=N!dA\kS.s-K>4e!*BA<d`Adps_2@XA/m094a"%DC\G-4OJP9;E5HP$7(C][;oph)u$UK5qsH(N"7!@Z$?@%p?A.-Yuj'ri6/4,[=O&TBsn#=#P&'*Csrpm!m.U\Un]uE(!dRcNL`R[%A+q.g[#HXJKP>0q%_:(`^%D#(keMIHO)W4^<o[+5)AjN%?mug0MHjKTL#O>gVj51$ZI4"Qk<Gq%>Z!#uKeD?jDCV5TcYLjM@T[2N%POLBf]H+bS6Lc!or-_Z$6i]/3)[LX<\ctKtXaC;5Mg?u]rli'S?9O:?D/A;(26Ps[PfMgt@?>&f?uXl!<f*Z4)!duW6ql4Jh;)4b%1k>2\FT!-D1K'aa%YYXt4RGPTm@?bWYdYSVi<c<riu!4L6<9=5H_.m-=C%(K)I3"i_k"l!4u1#]iT$GdmG6%,j*9K"R/[A9Z-tm"%#!COg(\\j#;<e::rs\>Q#+Gl?2Cdb?gR`q8#et>("9/3Ci]8%K)LB@m23L@@+Kru46R3/S#4]gq2DAGJFF"0F2X+n$f-ef%jR0nf%"_,Hd+dOB-0V>*Z?e5QYTdo=a)Ss'*NsA/';]u[.HUAJMjiO>#JgV<:Zc>uQ!po6(a27m#_uSb9/@K(3A9emqJ^QpK70Z%7U&dPp%X94$dP?B"2[hp7K90Yd%r6AXjPC5q_,p8jR@KlnX.k)&!,rMJs0m3=eJKW0]S,4>*DX9I20NK>>(`2W_l.q?/>CUGSilP^Q"TJGp%hR;a5gcEdY"oTOsFs`WN7Qh!1[jj+584p2)OJ3Ju\?%5MSrCW#9s8ii)@k$]97D4_<T1ZqNDjJEh*&tcq&jHM(@T8L:B@j2^]l\L%]H:>I^&Rocr*RcTko1'OT)?D0ho3NOi-X@!i;E;`h8Gqu_&)WYhno[@^3K+Y<o[!5^qbm&^=C0&mok^36>u[[e[U%&;`tsWnfj]p%88i8&)[q*2>jB:Tn+:aPpq=0%*pu28e\l\!@6XVY_8*=*oi?"k_`rSHB,Kq\2Y$&AhF@L\s8N#p_o*r&bC?#kI.YXfNu!*&C>@\9%j5Nhr&(<JE`1)2p+"f=qrZ**4DuT-2s5YgS>3r$Q;=]53,(KW28'1f#q(e;S6,pDn>4rdE0=<iEm,=X%HAD5V)gM&&Z>]2A+$G%e%heqAW`GXS@)Gdu(@s7C>S]41C4$Ea1[X?[[Iei-X)+Wb+2=^H.hgRt"^3O&SAmbK,#<paX)3IG;f`1`!hje].pO;merpW]CT(_>s%rL_r]]btAChN'g)f_,MranK.;?QAC+k?bIG7F/[.Es]/Oi(q]!qN&DeoYWC&-dCcHci<eGD",FLI9>\As6pinH'e7Q0k^3t?_kKe%r5l#7:VZc#s6RLW]@[W;h@XteUH<Dor[_qphkLX!@/k%,Vt/I>nn7i8r0_bEIWdgINW7W(e,;0'D#++k$'ODVfC/[gLYE(6H"W\>%V]W*N.%*j.Y:8Z!ULt@7ffN"%^4F8lFK*-+T)5'4!,n,iFfrTdC44r"o&^6*pWr4*?iQ1jG)ZIuHcG<N,B3<Zao?H6p[>Kgs7Y]^%HMYIgdLm<ocZ@S4L\?@Mo8hpIqMQRfrn@sE/Wu0DrV'[6)T9l2s6NOAhW!J#4RE';S?Tai[TQBZo)Cao2b3f>Yk!+AO8\mhrt@Qd%:Hfa+/&+WYSpZ#0]m*=7%R7Y_l@8WO^?G*SddcC'pqQ^am++/!qW7bKk:aRLik9buiT%]Lig4Y3iPg04h3HTaIf8"aL#L)Fiu`^G%X'^AHdnbGmkuTOdbO^4$p]&qHGMc`(AUV,=HN,X@=+C'R?G(cPI@39Dq9s]2qsd0@r9EU_r:N:&rTc,OpuJL5^\kEDqYS&'kq@M`%QS8C*j]V<;HeIl&I/j1&[u^!Sn,N$r^8LMkr<Y];EI7N!qg\VEG;"FBid8GRs'J"*s6$Rmgr<:Js5j"Ls73q\s,[3Ro(K)tr8#P<%HhfTRs5>&<07UP4h9TH(Fa^[kqD+u'X/4G=o(*Z3>@--OZCu^?iq84mmr@\lQWUOEl`8OY3gWNUH.=87o=Ok4?_!TDHY_L(H$fA7%^3-c#iS83ir3oHcs7F?=r:8>:qu#od^]*f)hs8%,s2DZoJ+p7]r0nKmXa^)?]mTj4Q[f%-hSNm9g3g+>>L8?EWcRL0[Z\r$\D?`C%h?7tlg.g;VDNpsQ@S)$)P&K#kb8[qF+0+YT?`bWVF'\,!eZH;lWiNM;Y*>`bYp;P%ag\?erhJ#OoN/`]QFX/8HaWOtVRfBhlUjb6%)GBWgP^LZcQ9SPY>CY2GXj(uo\)[LL<?9Lm;jX8RTc?;VEc5+*qF@UKg0`BnVHT;?p8Tbt`G/SGl5<4*U/OY`:+5q(<GhaXoPjc@%p2K-M_rWI5[+hn"C<Q5m8=Ec-j_2"tNZW8O[qrACO6%DDhRP5m6S6LTW\/F`W[Vef-RGa*/BR?Wnh$oRrR%Wkn(Z96gZH*(qk:=>%A!XO5Y*>`bYp;P%ag\?eHLnuP%or>[\_X^K4D:",B6:=MT.2@.Xt1luCb3[=;=\QSqd^K5Ng3o)X)5KA\L.oo3(l9GY%se7C2k^Y%rqMf:E<_cdHn+\&7\>Y8Dq8Z-HI]L;=6RXDDTVY@DJh>-ctX1\X!*0to,k_oX*rTNIOY#`:3SL87G%D"*_<Q16];bf'J$1JIeS`6%q,%),7\:*hDq8ZIGJC^ZcK,]/">.!Me^/8$$SBEV^O+Em)<Ti!7rl.q([^&mc*^iD=6j@5d:-sh`nI0+gA:9q]s_iClG&&#-faN^%2;R*YHcaIdFAG86[/=`J%:]iNHPSNRF42_uF^Qfqrp8nul/c9$gGfh3!j:q]fom3HltYpeoUEPf\,26DD;?<(`?%aE?1;kV&]`,U%/R%>^8)h!3qIJ*&G@Q,I[,[u7PE2#qpK>f/ebr\o;mP;p\;.Tgn?]LS@V*)cb;#P)g,](LYL;69hE:I<7q:F(n$bJedJf4(bW4Qn%<QEm=Qd/pq*nBRNDL6n`BOuC>D.og\<4i(2eNU@J[iqk'2M/,\,ep<\>2#'m[2Piebk,YYZ256.+4B_[oO1E,_Y`qBBM0GRs#g:&%):nMHK#P](F/?E9[]I9<kaUJ;AZ=psm=-giJ+"$HTd;pB^0BHj]^^+>r_SC$?&:><j[NaG@I67eq!%KT@a0*Ke%k)EWXg]G<Mute%s1E,k(Xh3lrSd5!I1kloY/B*ZFRk?l_qn:*]Jf+.AUg1tBW(0,*k@iEZ_[A_B=)sEiVMMe-#L$OR!,<ka6fe,eEqup5Ad7^G$BaR%UsMTsE1;1bh%g_eI5!71kB?67_N];(:$-?eOc@<^\'R%Wh:ANqIWKR'0)+f,roiIH[:*s>NZPO^Wd]*Bl<1407s;#,jg#eP\L![8%2na"E?J;HTEi7sah>?2PV]Xc5EpI!mr,D*7`Z&1NV@Q2@pZD#;/Z6:0]TP1KIMUC&]c=`4OSfL^FIR[P.5sj_h(WcZ.imr1]@P8J%Gq;&Ed^BQupQf)7ZF97=7Fq/>[PkL$D)BnE*M_9D6]E1dB4&/dr*_bOq<Ommc!>'SWR)VpP.^M[(%"m<[^s2q>oJW:NG>oNDt^>]%/0jT:3L*dKT<+YkR-uc'J"b'@hG]@tm4t#hLHMDA/Q7ArCk[;g<n/2Ukr-.s6`Xk1h1*F?XQL8X27V']HT0Yh)ts+DbFSA'(<`7t%e(7^iFIZ)Fmh:Vc>^&is[F5TR>!_I(Vg>/.lo!Dhrf%G8c0]P#pNJR\<R$lYn=3h`,4F7MLn2"pmm^&Jm/+/>Qs4+H5+ECVb<5;=%F1e2g\G4m03Zn'$]0F96l%L3"g7dmU]Dm'A6RuK3^/(ZH^[Md.T^U`1*e)fV^KjU,ml,^,S3Ggn]A'14MrK%QFgu/?B]mOt\Jqa_%2f1'@?"IrNAX_tfqVkF8a6\5"gMPin6$q5M0(&"QGKglg>2=,r_!g!]fCZ?(V5e"`:PZJ!s7Gr`7`Tq9<^ZK9Y/<n:E0k]lBe.\V%Q+]LWD6ep)D).GljDDD,bIjKb\5cc2_(<(SV%'n;DSo-9g1Z%YA3M<i@_'T#Sou4*LUlJ9\SHupZt(Pt98E8K)\8+Oh?uMjT:_uX%9!,WT_j:&BG3Q52[2ZA$kEaYqDg'7?D<g7%ASkLcnt[QB-`j@Cjl(i98[aLmXgY(A^=k*`3RBC$gDV_lQXm.WDR+H?WhYo^N"^F&%lm;,l?@>t#D-1R1=Hg:-+1c6c^XPaE\)B$K\OToYn@r/oPBZEd^KNcamH`pbVf$A9Z<(?3/ou_:m_`IJiK;aN0GV'(f&;*ke51nN%<6bu`b+:hOAWo+bGKV=K))p9(cXba?)buUQ,l:X/;/3@ckAtCB9>g[5Bqpc]s":FKO<-V6S'ocl?^gWZGA0$rBBd%:WgLN!]Z:8?%hn`U)\a^0tdP/^SQF/2@DgoqkbAD-GbrNrVq=nur)rB@dGHIp9CK?2'i_M=j2n;TH/alkCZ-&]1DH$J,hPJ[-bJpa:iIlnffNgS0%Yk[P/<Rt3"[E@:IYNd&UbV&>;kr*,7BA7CBZLY>=3+;&po\>3<(5AX?A^=``?"tj$hs"XL/tH(UNhO57-001WrImg;?H:E"RTj0b%3<m"+add"7YGEFlIRo7#QU\$7W+OZJgEZ4F[GcCB`;R5#M(Kt?h_fgWjX,$WU?*_CF?1^V:QJE%(oL%"UQcAen!Y;/K`8TZL+:pA%/k$4L(0N.MaWbLhYH0:\7X%iHe.a6U--N'NMO,k!V$eeV*h$fA/:3e>.^GCd]HV]jL/M,PQq`kj&'[4DQ&!ciQ7<DVelf$>0kDb5%p?3;cPJ)\5CVtSo^9S:2kUR$hj`&aU]$J\5V%6(lpFP-dd\9(6jHlmNVBgYIAX2-uIu%[$+4A8s<IU<Kaq]8Pg'rCHapi]88qf.C%,#9</fhiLdc?`DZ8`Wihl7$Xhh0P8F-:d@9F.q'c$%%!ZWi0P0rlu:^8WL^L]d>``1TRP.^X0Gk`W"On/k]42^\7lk-PZI@bme"p%e`;]n./;,I!EHu9\K'1Tel5DPaI%$#$KbTOJiVFl6n`h^&gR09HHbsc7e!$OW\B&)b]m$d9arbZeWr%"f4ItH^8bZB]dMEY<pZFr%F/i^L@h^nP5d>fN(oiJl1Vn$1m!fEnqU<o/o)=.2Ht\E9F/N&rrV&$]r2N*`]LP?g;k%jI2U(DcD-1$7WsW#cK3D:9T*`oF,6(pf%5MHnJBBI*+Oah9JDOMdLgg&U2a?MJ!DMhUQlS)%qs/tU1(&DQ4`2:mG2c[==QrA.^JiQi?/XRK\[Ol"%cAgO-o$7`A9p'q.HF6Iu%IqF(F$N)^?CFbbkYI51I0dC?VlBh;A+UsL4r\U+]rlj$M'_Z0kKVkt<1L@PJ4h"&&hAF.7_jpSKVQg)f+-&igfUiI2R_o&/BGQ=#%RJ=C:m+F$Qp;R6.Fj0+9D@67sPCf[958RKl@=Mm`ckQ1d@\'r:c`OK]:T^o-2Fkn<o80n)NKj6,;qR_K>GWk:cOQMWU4,i$:T^U`%r28F+VhXI]]ZJAcqM=u(CD)%`rL(2f+&RO5RdTphVUS(`YphP-?Yi=de.pYI0*ZWSrL"Nt=59DSoXY,(][0!&r:An`;WOI<piM5h%H(ib&fOWQ4ZnQ`<j679U+*$!gVs$@O%biMrj@[*p:(>f/kE]%SPF5*e"ojuZ_lho^0=7X/s%LYj48.HS$N>+PbB68RRCQF$oUd/m%Fp7o6'r8"j5I4JL(&YCb[Ib2TC=!E2DU9!5A>86NK)a'-Y)hL*H^eYN8+<.7)L/sKPhL/kfp%qG^"JWRE`Map*La0,$tkiJ<V2oO%+g-_%oBk>Jh).Y$R9ARMk^TZsS5N?A2=A&sD2A0m7K:!.N1Wr=T:'Z$MZ1YRa!o]3)LO-(;i@g_F)G>R0A3rhX+L@W>&8(T0t4`g%s't)04E8?1gV%&lm9VO1G$"$nDm[-Ns(.t](&]eeDm,&tUSd7)naa`S1$<c.1$<bSk^V2`1I_<Oe)jZXs5G?M<Pe^P9R9u!kBF1>%Y,Gq>@2=#p<^lkC<aoBB`Qo'/e_fYgC"n-ho[:,6Iq[kHdC+O2R'(5^s3T&k*F!X_Qodn&BY?+!f=q9YNS8.-5;17QS`d_k^SHkh%>oW6+)uk\hMCGW0L^>tnrsM,D2Z=f*U2kR@gA*t?;6u3A]gqJf+.?qF`ot1A40nYb#B@bgoDbc>OhneW$2`BMQ_`>9bkX+sbkX,V%kiQ-n?&*OoQ&?Hsa0u#LXJ:_]@CIPt_%HPt`&2&V5;0+JD$p9;VVlso'"k[O%nX0.m(]c,Vg\S4)rI@_r?!lNo/kdh2dY^s^AfgF%GFFS@Iq`P$o<Ih8eSK,NYPHiGQZgsR8CKWu7U$2pVU0gUMG#P]8JM$i9Da/8C;S]g@^EQBBC0rB>oW5r+.3Ao*7=S^GA2;]"1rsI%qd6bjEb^+UF%oq[4uWD:W<%nC:"nho=qKMTdrucXAo7G64!:R&#lSC-VRe6aD6'Z(e[@"XGZibiL[9HhV;VrBrKkO9=6q$:N]Hu(%a.E7'@kVNYGeGpqKS'50;M-CmT=(\>G*3S]G)3j#/JmgBeu*+-g#P-;:,9i%=kZhI5*EpYT,2EPj^['FWXX%"I^<tiT70`+,:U`Q%-EX6%E1CFm?d_i<U"PsD"`s7*A(tAEBTt=tQruJ@VqQFA?2mhaS)iArIo'[Tp@/^IQK1!Yet8et2V"sp']IBll>k/Q^8R[]29#NP%&ll5]q^9M#+oh+Fs5MR[S.sApg@3@enL(4]hjh'VEq6cjYr<XRFj)#^RXM@!90jN2=n0%&^?J(CHu/L`[I/)+\Q/?T[UDs\W2P3/%L22*l,9M:26^&H1Hi7$jk/L(@+.N41mIVg1NoXaSrJMF]Z?H'lV2[7qkd8_ZV8\b]S(d(uV;X==B%aTN2F19k^NeuhHaeJRnj;g=%:Qhj%0tlC-CVsr#B]B>Gd(7E"+Vj[rRdJ4"^#qUq[Ptj!S_Nt1j7+$o'/Y'0]N%>PK/W(A!QjC#K2u5PNSNVSP;`>8$Vf=;7jk:G%PT"hd>0q*1*kYo6BW(T8GHTZjT;?[pP##l:J!OV\3463m-Uj?^dof!:X:6iTU0.,\s/`=PVbYlkrj-3`o(6GNkSS+`XnSLu=$Ka#%0%/`WUVW#A];oOZo(6G8s/Oah1_huN8?Z2u3I1J+W;EMnlj`F0'luqE>0:0Hn)7B'^M<I/I1O@N_,VHJ(=+Ol?&Ygb>Y_IhZ-+D`%cD-*5F0"J$aXX(;YhE!:f#L[X:$L]Z%U(2rGi@Z._u'9ro>^bBNXT1CcO\:8U//ncrJMFWZZl;!Ug;29)BGW?8rp+.jf3Hi)fJAR%`"/=(C"OgDAL;7Re"gh52dTq7Em71^^%$fAN&`.fdg&n\^(`F$;UClTl(]a4hm?FhV]hs;likZ-o[/q=Qa5--;F-ImNc.ZsrKAEu%qV\a25>1fUb$Li=d$su2F1gsqkj6Rn=fY?@XY-Lf\-74m_f<&>S\<W>8c>?I\,$moF_>Xcc^M!#j7HCPX:;oN>*9\Jkr^&7rE$*c%.;+#(>`ZStX#BlFbO.kQ>e`ha@k!31?CX59nueF`l#WsEF4M&O9[`/e?J*TXkb"^EYuJ+_ID+A!T;?]_A[`O!FDZ73P+>G,Y.+7?%D7u2"R+(fr^&D0@hZV2QUMnqWrNipp.;+#(b.ZOO[1.KC6a%GHK4HW'Z4lLrY8^4bXkg2s1n2tGhep7ORf16p_gV!PjQ:E2db9n*%S')6WBM5Rb<h>O;]gj"u\LH<(;7%F1X>7[<>/h-%qH1mKMg'JjD>;AOeL0HZQQ$%AGP#N"5EpNnW#fRYZM4/TiH=5+TAC8=8,SRZ%\D6=1blN<YqI?Lb1%d0$@k;<2RjMusPBX9PF2/kS#Q0ctHg5%nMS5["QZ=&%Ue\r,r3OtGPd>RoSu:I"LK(FQg9m/-8j/=1ph)$_%9?B9G%;Ckf8rINi8[d+Ro`_N*RXNXg`])F$H(0<7lB?8SV-LiV7W6fbIY1V'V<im#X1ZV?CWho^2Q+9h=1fknp)7]U0+?S!Kuo0t%\LZU1[I$je!Is[Ck&I'Zn=*Q"Yd[3Y0'/%LduNX;Np@msCFL3$cdkTS1J9+*A!5QRe2g4$Vpd!m/ELXrg!XtV<S.pA7JsKXT9QB+%VbYP7r)$\&(Gskch4.7,c-kj36..Cc,V:LBIa=M]Zdtb5Ze&;0G`DR:[GZa)lVG[VT)-=3@P;EV8NHZBd-NaW+4l5`#-C!:f:J55%^!T9O*HOdB*>H$oMS)c6k.97SK9WR9g9m/]W>f,%S0homR\8=?eW5#,5A8orT=+TmSF+,m\Yu,BRb^OuXq'DSBZlT[G0eS!DCLql%dLrWa>-=^g9'V)="kO1:Ft&btc(JK`\Fl/?4gaTSY2Dr=)m8GTL$T9J=kbRj'_0Kfp4cdi,G^a(e#.dS!rc?Ff2An3H>dZi#Gp/f%b4)5U%B"4*7J?_0e.hAt>(0App=,pcK0O)XAS,fSc(n@+PPZli7k6XRs.Cr>b!"J5[Ga)?(-,.TpI@q$s/_J5jfit(J%;C`DFdF)%B$"A3A1&@FJ+3_me1sc9[.:$JeQraZc4=A3+38_Z,W?-0]9\U%Nq&fVK7B3X[?Ng%B_EE]%8Rrg7e%Q"XOS][ek<Q6]lViY,s)U"%r<B5cQ<NfF,]#'-_:N''XZn7IYHbOp2F4Y_$NK,qr`RtsbB\kmf!%(sP'"T]JnE'.Q>jd8Ppb[0Di?Zp>Pq?&YST-A:QXXo6'<Ue%UJT>Bs.n^KR<C%NBW'cD@mhg'hk.=QUtg8F=.e-G_;=sq;T3R+B"o5;lR1u\GHKhorp,;_#&X9qZbVHBpnO^JJ(B?5:"o*68a@uf%5"+l07r8_/d)qPm=*os?P`f(1,5t.`f2D!>lHtnVplj1]MDt<Cm<#9u3^"r`,N,2j4A(U\Y\8fAQIa)SMerW3GgiGtn+9JQi[t/.%.H6u-r1r,u?@H@ei&;Q0]u`KSogu]C.9E.oX23Zgd<^k'P3b%sG!\b0+%.U1;RWEQebf5@laT[9lo%.F:Wh>u2;UZST="0b>^K@D%^11l`mfZ42W%hEOqm3XnPg]R1/3V_02r$l4Ek^Kjee2j;[/<bg2>"KYa+*jS+*Q";H?kVINO%mCSPXLe9FWlEs'6La:H4p&`XY,s%G$Zp8.qg9c^*Y3S*C)[N%?R_S""jT<,2ZGihs6%Add>JMK-]GZX_T9#=g,@__V'G]ZNk^YhaG&G]M2iZh6)`5_FV7$T5P-GB%#f%%9kZoYPiNXJFM$&q'1ttp`O/NWHE,pWLG<?kRRjpN_RWuF9ZPm^U^PX1,O%ONT?'^@q,a,SSuAY!G-JYp,[Erf0Ttit!tnUOS=D"1%KFXh351O<h>tEs4O=k'`)b:dNoog'<[j[f&G]'m6o-#/J,BW$@Q[j1u6+Ec+KL^5+%[8o2oq#E6nHrNBj!?*mjWpsbFQ&%[M0-e;%B0D\ZV;K9Q;A8<3BlasPG"iFK`:S"bhdL<9$92i*DJ16M_-c,=a.[T?8N._`D`XmJ+Pk/VR!<]b_;W?)_XS0bVAGj^G@#U/fpY[3%#=+/dF>`"#FEXF6qWg[ui5M'R([*[;dFAm0FqA@IpM(mX%6ukC8Zr0mVJd`1Ih]HEJ<:e5CZV(@,$2!;b"T!iW`BQt$<T=[Q&l3>%lP>Bf2HPdt#+LN<Iu[]:5jrE4VfB#jRH_cSAfoGTa4XArXtA#e'Y-+DaE?DZpf\/4)on1;Uh^s22Nb/Y7P^+/Kib$jl&G;s-IOcD%RXdr\m+2Hi[0]_ibcUD2LH1Cn(eE9&,VY93ZI<nF]tm>qOKNT5$m6SRg]5b+NgklISD]#ja2(&tFIZEc8B2mq8>PkK"X9L-qFIA#%;h@Q8'CAII3b9)CU>q?96eW#b`$&tCkUE=p*9hTlHKTsce'gA`Nm4<a**"nU0%0Z>._V<CAJSRlhp%l'Cd=O_mtE.:RIop"i'u+:%cB&u6f/7>o7+Wg'>Z!5fSW9Li:;WJg(BK:1p=sg1p<3LNMQV#Hh^H(]=)/LULE`TOl('QK.(TmY^aQc8TO\@M@]PLX[6lE?ptFs]%'Y\aOfI#"jP&)"q[b+WBAEsgr2bCmn4mdql2f%`U>RBQ>Cel:>H$$B9G*>d%j;RD7Eh0W7Ug1[!CJX<]<-i3Z*D2s"Y#9.4SOr9G%J9:>CFNap5pACpPIUeF@YC<h;L.M#)HeaK9Hfg'jJ=<f),Q9UuNdQ>_l^0PQZPs*<h<BYj0U/.M5!e;.LG)Xq]'r!IFR@:cS=Uc_%"/i&P:;c>\*A3)qdlXm*1[4+iN2-iS<$UWgK>3Oj*@ur-FIe8VO`VTJL66Qu#)8Of*R9t=FJ32&PHG##0U/^r8N)eco_jNmFXE<L%dY2\Y<4WR#b>c&jTS9(]!=W`l>mJbg-s\dE_G%NNW5;6>0HqE-f:c(Z8f'rq6g;/g'P>dIJ_3Z-%U$YF\fPO@)j:TcSn9CA_uQWD%6K$Yl%ckgDlTIMI'`7V)q,6Q$jsJAOmm]N$9>(SM=2GrY\M7DH,;PFb6YeB>Y(L=?PHHtU"\RD*.i:n1RC/MVf?O(GPV,Yr%&N9I%'4K=C3MDj_J`CMm>m"JB-=$^I?m]036=;-GR%Kg=f?EhAP-+fk0Tp=GmOfu$COT^rs%JXdUhcLM=-e0m!5?n2)[G\oVqq\IQ)>\c%lcN.ES9Yp7Y&U&hC$L[fktY/qS3_@fH3;"F2"fF6aq]7>-=)6@BdVXWS3/Rk!rpo0l?cn`C7+#\k'5^=l2d+87.o,)#eOLsi9+nc%r7n#[.cBKEh\_&Y,$b:KCEd%?p<#Y3#.N/K\n8mGJTQkhJUqoib,V.U_eg7-c(f%_fB1I<L118L)?[0oFFj(#+C/JJ<M"MHoMhE.%A+3HhH=NPM4S:sq<h=VI8/.5i1&;2Jf,4FUVqr9SS>Y3\ka\R-(t>(RhAFb4Vqq]JC'ae@]5IBQMZh=(DZj[t;fAbg3)@4B>WGTn%0jH_7]g5.DQEEM?16sPCY)T7cM]Kgc2(b[kV/)0N9VpLmaVP\u2:KE[=;+(TOL4\"B$rPH-&n^9$"09Us-oWTZ2aghO%?kEFYa]q%g(!8:OE:N@D'[qDkAEt!<]O+%'`,:C`7^^T.`714FHth(:qF6C6uYEW"fBa56nhnXgi46Z=9WaaH\GM\K_<L'j+R(4?cHKb$;8BL%3nE-rVQ6q.%&O+ODD#4+kV8D6[(*A_Q*JA3]#rr@/mSXO@P1qtoJ)]81A[A2=.u"K933!Zbb_A!53C9n7NX"Z=%48ZXRE3Z_qDC$%:`4Z)V5kYbbb_@pEPSCYn8i[8.T\YZB>)/t<6feIgVR2V/gN3=Y-O(iSFs+FX.8kJd7@NR8jr'*p$0B7$1!kma9h0t:t,g;Q-mYZ%l]ol=@(Jt3BJ<^<13C\80t-]t%=U5jT2X=%;5k(?;6^LqXti>3936u3%&U(a;$PL'"a,I^.WLroF>`rP%AaT*6:9u>PH\QBO5)JQ%7lHVr&-l;1!6iM?Ps3BDc(tfpG]W+a?jW8o+!?+R,l-k;6HKI[SP\nRi`<#MA#NL\d]501U!fEb#*h@`kKK&iMm!^c^UTfEoQ$*P%E9W.AX8tttd:3VfHDAFpbaJ("Pk>qkHKNY&\9#rAA[kqHQJN%YJ>IHAZj'?`YY:p(n&SnJar"eI?(Ct=S'&8W=ont_I$<fpUFq2`%.`8"&FCh2i%B=Te`gKI18`+'iZFLajdVmX0A'VLGQuai?k$/:8koGTu9XdM7q?^Zr@B5ei<rf4f9GbeJ-IW^h1T.A\>/+"fM_d%o%5>`YpY/!%RR6E=LDZ!&@d+OrRA1#b1(7Efs"j!(IoDp@P0KfH.p]%c9_#+/N\LsQ>$B/OD!/+PXbbcnL\n9D+O1NU:."m/s!%<fE%c2_8,ed2>1Ok:NOKot#UlWc+DR]\>*4**Pi0]:1J_YEKAotiVXflY16UX=0lo3&'Yi>r&3!#,st8cU8-O@fKYpC\kTTQh=*rdS>j%<rtXsVnf:t`DNKG!5d7i:&l]$lV7F.N9a4=#ko3u!'oU:"orGQ7am&a%S-VNlshqZJ^Isc*B,(UVB[Ym2BB7M^o$-M"Q4A*^(!X6%J87[W!'Wa_!2(3B!H;fUF?4;6J5002]Jt8/PR$]"gnXqAY/"(Xp,]Z5J>_FN"n6U;U5@=M\T#B4\cQb;8H8p)LlqbJJ\c`F!n9S?%!!NFZZ2f8""*hBY*lD+\"e::Q!.7]IGWN!B!)H\S8iR-mpGY@8irTJLF9O:LP5q,Z!hHJZ9lL_1JS<se!:G,_:<,L.d-1l_!GASP%cMBVL]d,OeP1L(sm[_#9FV*KqHlW?3]#(^qkH5UK?U1OLM?rEf>S.".Y&KEU\a*K>!M6H-_?6@3E/%N+lWb]D3h>`%0V#:br)_#+%L"!TT?KYc(j6='T_K`Z/$!*t-B24UNIGIt!^nJrC,e\Z$7QOi;0W#K`\<I%Y*LB[>Vop&`FS:%CTV/XCZVUKZGs-4hccPLKEIk%J%nd>/6>[@H(/ot.=am7_q!MD(BBU*Yj1WQ8\]?[5gnEKL9X/q[%H#UZk)oYeQ("Y1*I\ia&^.r\fJ@b*h)1Xd9_uNW#FoK4)3j-CT%T.YIZ`.5Gc"VDF5ZK?'0e7GhF(f86^)$\T%YF,BhbF6eoVooWWSH4hcMuoW3oKN=u)-3e:!&CWVVZ>dQ$^nL6Qds4Dgo^[O/d#@$%$:+<$&40Y\8_"[Y>dsg-/d"jkqKd$9T(:L>RAeD<k7.t%FW(1X'A,mJ"AkH02)V!Y__?64HA5knr:SiY4QWbZK1MQIScOs7I6@ZQ%25#uA3WRZ@!2E.okH59sl8%-kV#YI]LB2N87]92bZAG6s!$LISKK:aRJ5F;**>%MABq<NLi%>N?FW'291B=r."$iFGnpjN&6"uc`%a8I%ZlF>^R6<uMHdXXB]pAe%1oc=+u7%=')!:%)b"$iE\r.%R5<\Jh]Q2`E)l+$9d5[?9YdXXAr!J+(f/KbVioU)6S66/";5cF;!%+9:[^?q1=aEkVV?\/E583aW;)5$_c0/O1=XKpY]'i@Bd^QNKp$[4SfSp3:]cJ@Z^sLC3Kk^`"]8p[',ckdWh;ob04Rl*s^r5$_dW%m]CuA)M(`JX%"5]ERb>J3j'BP:m[`T!MPP>7j-=Wq@N^M>X&:_NpB18e7EQ^!N=1m`g<qXc<eM\R<f`lk3"1\aaoAJW':LkStc3H%;<p-*]+F8u'1,urBQU\\L=^9H!>q`h[K7DNq<ea%]$gQ[h2Sdk[CNUBM)D[35>/`$_f%hL5A(6Ee8^NUKKA"#!hbR#9E<R^OU6QL%SG\op:rcQ_&F+Y0$&#l0:h/5ScN,24_jib2n,2@!!P;c9J1hpEcN3O3j6Blh!hkW):*A&+`<h2Y?Z?.?N[mj)e8`G6KXt=@>Y[.T%bg3[E0^=&Q$&CXF4TSF#[3nGnjdTV<&9V62@RQdU5r#'nCJ[^'it`=Bl=NVbr3@<O&:PKokBg&ke8[,KLcXrm$&H0PQXrQ*E>jWo%Z[<nF7;;7ST_&5_"2G#3DW>$)R.IpnZ);fR@8:od!-Q5#&F(UEX.3Oi&Tu$>+R0s<6)`PYZL_]Pe:D%Z:_tr%l8HCH#^+(?&F.Ir%!Dp7L%HD(;bSc#A?nQ-(TYnE(&aH$:(fBI`dYPKb%"';bJ7]Wq(F16j<fh>ke.HqWW,pl'Tl0O-Khs^B2E0LXlR1scW$?,4:e0.F%Tl0P82P;ZpeYP[pCKU2/mT@rJ#GQ+t<?"doBu?J]"@K+4$AMAI(_!+`)]=3'2eec)6(.>P*V'14lA1f.e4lBM!Ke$\W$AYR;+GF3%UMeLTT5qGY7NM6)Qr-?RDFWG-actYr)0J@.B%6W?'bGLbo%c$tigEV5fFFU8YT6'dUtOUi;!0?0+Oh"ZK;b9HmW,>@)0J@F0^:"0%Q[kIjAk&=m#!g\C1'"%ddX5hcrLmXpSUqGr;<ul@5FAqI<<X'$-HUJPfL_$tB;*.p\o?&S&TtElHZg*#\%NiVmJ]])m4ibt!U3aZ%cu/k7acqMbD>/en<_THMR[NeSf^O'6\7*A2rNg*WEZ=KALDs:,h`knj;+#6]rI/WdnTOpXq0ENrNOSf&"Y8HtT/GNP+g3Vp/mPYj%7,=s?^(8W^$Kb$pX-a9`c'`H^YVqiJQr"SV6g7a90qjX);[fUo,[3&FY%'%sVseT"M@ao'`LTDm&!E%H/FJ<ka42V*e4kfOfon>,%-><)kH^Ble"]$n:*f\A*\2T,bjsJ@H:A9'_'dK>'gnnOEh5pG#%\pkaV!$kS"6uVh?r&t!7,=s?erJ^E7at.qmf8IhRSXeQ:beY]%ene)+T*]X;1R"EL/Ztc<iYFK"7EIL9a:5\1DUN>q^*u6O\1:!q\gRkUc_?efq+m/iM#c1E8kQQ=A,SHkA2IZ6CP(\14,hrNOab`+%B89dA7/BK]4b<,Cb=$&(%?#;idtJ0,bbmg\:UbRm*'W2[fj8(6q3I!JT?d2*J>\k^?eJlA>JaRjCs=*3"`n:Z3L#pg?eSqcRZ[5.%1Qu,QL]H]eajuD0b?2(t,/"d,c)7$W>okfu<qGRM<,G:p0OI((8bSXi!Ag<"8.@3db)75&]JKqcDUs3]_WYs4e'4=7e.CuhI(EJP%"W[\K`=6odZ8J>R\:AJFCs?;RQmHDUpjJ>4J@\nTr>bOr%=?O5JkdhonED:Af4i=,\UZ;GNq^6&$D).dCi@N7^sb_h_4EbpGe.&+%%37a_'ck3dIK*POA4_gM$g8p/Q;$cu\4t=t8W6oH)sAWnDJ5>B`Epo-:LLhmh]UTh`Wu&1M&Q23P_;iQeKaSJB$Ie2>kiEIjpMYO%HoeDOJPS4?^+_iT\.s'U[\ciU)sAWnf-TY00qN:6Hu4WC$1=IU[-b+<GL1UA*(8Val*:cGbS9H>.,+DN\H-iZ,YQ.4-(D3I?jk*.%C`"V`G^n.hD25hNm\$%+XoUQ?%!U&eBmhO4n/?^_>X:;_O*?+>Vi+`tT%KB75rWNN8NH[-^,k\T$X1FWa(NF-FA[@s"9_%se2gnL%1jb4r3GtLZ1bS1B.s&?fC#qoH/cj@8<(IZJL&9Sl0VE;]*j4laT.W[KIr:E[8fs`%FL)`8m5Q2[46S"C5ElP']&g`Vh>d-K:8]>C%D[E=WD[E<D-F^dRj(W\Bg?l?*+/_Dfqqc5n9TJ9=-HC,`oDI7q"6G,FTU`A[PRCZD;Q`24GI<d/fLo$,R4(".!s08q,NU7hGuF'F%Dg>eF5I"k$gnYCZgnaTjjgIgmo#+j[@S\ApBC.hV&2bI[T=+6cgso_Z@]qr"f.J+T,5NReO/;^>N<(Rh9,Ch2C287W4R3[D=e@\6%qSX71m$U,J@4u<e8NAkn8S(Ac:YOa$:0MeNo2LFkE^<=6RO&m\(ccrg"YDZKp-_is(-F<b[\pcf_rVN,#/fPsQLPpqbVG3W',5'%%-&sIC/XJ_AR4Xabk%(o*o',%9peK$d',2HdKq[]OA;umJ*nef(K7[gG>RIjOAm9.['@@K\Ag4f^OT@l5YSf]J%])1d4A?*m@?*]m%B$2JqGlpJo]EBYZ_UBB[c65?DkT!8T>:sn*ctp82iHMWi'')-F/Pgr+W3bS7d(sh64E3@/Cq7L#9!dUlLGI,?90U[9Zs</n:o!+^%W2QNN2a4f^YZueCA?]>0qEA;t`0hWujUu3V%$jPV.5G!Xq:(S<E_po;aoQO;.gNLFE9/>LXrPr>KB9W._.5R`)?O"n"k]DLkoA/F%i>+9%5MguMb_6E-bslK8fE&,pi>Pr]Y4)QF[fj^A:6i0b"'LZ7299f2E%r@`?\1B(=SWRHD`Uqe/IBdEm+m2XA((gm*'8eGjk)p(%/]Wl,BK>e>6-Ci"2`+]UiKU+jEm@/U/a$@YaDtf86'f\**1U.A>h#2'*9VHZ\VX),/Ebrs1Wr'kM(D/[X3#B",an8Hq$b@qkECgL%ja)fG<dl48Oc0fRc:83Ab@NjC#Fuk(!%c0!'YnaZT)gKE%!ZenH/TIE\T442Jh'nhA*QlNa3c$QL#[2#bE[o$kHg01[-:P83!3m#%>j6\R3`KG$0c2HC%"U*7/tB:+=g$\L5#]`X`*g-uBPjtY32aH/W8.(/:jE&ZSVP>ic:k.Y")Uc1aoaFpVoh$hR"6lW;WgF/g4fh`%(Ea;b.h?S+Vj1>0C8[=%3etOli'JR02'?!Jb;G"9JE7[iY/,.<&)(F%[^[)VRV@?-VPT^SKIbZihW[^Z$g9dF.1_XeA*'.;m@hZ[%%c*R'(Q_Fiap$:ZWH-6rU.png*83;N/jR%AaoMkP/&rnOXIRCG;!!k0/jSM")9u&='*q<t$VbH;>`Rp#4m5F5jm97UO-L3rEoS5c%=g#cZLRO&X=E*3!5g.P*J<oN+goqSS?Y7JA#;!+@!ijI`3RGOVjco6?>Ag;+2-XrE@PM))L%K2igrbC[[bU0IfPJ)5cC`d1.rW^P%\^eTgflAS`NS/>&o+&+g<dublbH:D#7a%nRRPn>eKb8(.gr_WrZfP6M,)4:CJBeRi>6?fY$NM^+;5KY`!UDWZ!7h.,)[cX]!7$Q-%JCS/0;U!b^VFUR!DXm0ja&rM.:C@.A&12%WDh/b("b;S?dOF;t5XWNj>Askes'%`=.^7T^`LLDOi?_5Rh[$NX@_N#oQfA#s:r9R>%YQ_n2<WG%QPtdV"N);K<DDO'$E4N)=A"/>n-)UHeA*.@6gicA*[\4.W8*;&_FI__XF-R50nc,lDeFLtDb,r>dl1Dm\L]rI/)s/&'%U%j+Qr.O)0NPRn@jr768-(/\B8rWOp"$j%8o8S%*P0CD\:KH3Wgc3uui8lk9<6d5U^hc!NHojC-o,"b6YchYu2H'IfXZT.p>[(0D%\BT$+odm!0Ij7@#Nqp[;kT'1Mo3rZmYd]Z9k>*N(h_lNXiVuBc@CFqqJ&Q67D5.l(s0hta;uFCIWgVO\)`&PQjj&O?D.kh?jHi3#%>s$fiE4IQ>fsCa`*Oc6KTcJSAnjgut(b5Rs>&cRQ@]TRrg1WV-je=Tks$MA`Qhscu:Wh@\hM(06%pFE1pY'.<Mh*GRnAg<>:>/eQ%Ql]ij!^(/h8NGO()mj"udP54WdP5.%D1)$j!m==,@OqOBB]fL@^0</i6m'bg5]Du04_jo]MM'XS<]j@=T##HpCY'pD^L=>2OgX^!%4r,N7miU8.4KSU:DpMh%n;Wkf[kZ0s/@Q3pQn5_KDCK.cLYb@ck+P^NVKqBPP\El'V*solF[_R/^(Ksm/9``0$T<4n.%P(dX`>%%%RW"b;f,DH0M4e=YMWk9_/9bnpZm"+k+'6k7Z#QIHURUTkXdj!PCjEB2/Li*fFI)a-=e]BC>,*7K!cVt^ZlomN@5p)DDJM)!('(d.%r6k__ep%fZ!,Sa8(b<'qR]/+>+$J%b!@rA11n>l)Z#X9=@'&-acX,nC^m3XU]2*2B@4#Hdg]g>NM<5bD4=JZ@b]T.a^(K-NdsU2Y%$"]QD"L?0,hcO>"=De4fmR6Y#=*(87k%MPejr<N)-^ntXnsjC-3Uh3`q8Qu%k/qNlLcWk0$eRNm!Gi6[S7irj[8&R9=QX\!q%h>"%"`p]2Q2n@DUf72s:&)9X3!<jUb&(I<1fc6QlA_'5\^8B%\WpB+b`uDs>KrF;2ueQ^!(+n<XP=0Pe6KPL<H<0Bec9F5)SkWL#%QcG%ea9.iJ<_RWZ#V?LZE\F#>VosP<p$:!b,o"(1f\GTmN/9qY=t(LDSGs\a2#sFs3bMbgr^gk1BH(B+4DFLas+>O!ES*#iC&2RE5P)0%$aHh]E[r/_'*1F)lpQAh:r\=l/)>^h!EM][c3%/h5FF(3o$NpX\+8'2%:EbDAd`AS`g(f]J;DNc!%Y,3:'4V39BVQ2e[PQ<ja;2W%*+ZUFce1>A/"a.hc;tdS9pT#:Otg-XAY2t*k:6pIaoPWCjXLFA^%lZg!^LCQV$qn"N(=fdS^fZ1!-FNaSTEXriB%49o78q+T_!^q%"e`2EiY6q20@Uj>*PULP_NpfqA@Wa(Kh;@/*+h!0Y&gVeA2tFO+Nnm;A=5"#3AG*N>j&&Ka`?5#Ln"P)lXf"sEV0]E3A+op/&r)L%E94SX"g/g]TYQh&8J812%u`RrSbKq&;qAKtN<1W^c+>Z0Y$\/K4n.I@+j81nid\-'0NG7\S6NBQ5O=4+HbchEptq"A;!!([##Mi?%2Se)I>`JhbNf,Tab&QYL<&nj+!%ZY]`pT(4Y-%aTf6gDbX6"_bS#bX1FNr?VJ@8.:CCmjHQ/cH_W,gZ<!EG.a,J_GZ+0ft.H1P0?%B:LmjW1#3V-3."*mWa73fD+EsEmDXJ:urUfS5[_H*s#?DEPTn"\]1m8V4;TYT;ckd[pZ9W(]#""f/S5UUiYDrBW<$g-C?:''nT9D%)J=)\EmF?1!9CZbi:Ra@@ca%C9CMk$o)VfNDE34sa,L:"jVkcHkF?U?!EcmE(5c&9)b^pCS9$1]<&q*(J1B.Pb>9YN/O0Z.Epil^%W,aJ/#*j8d!^TXCkA81)Q"tpSW8efHU^3lgf7<*A;L[XRP]C*h.6-FZh*S&\k4SnBX.T]^F'aD!.-\AK7%KG1'790&.D8R>lGSTR%UQDU9-m.qrhUi7h2DaGTM!aU0)E;Meap3HcU%3bnQE_gs=^]DL-VV\nN&!3N3<SUGs69]dhYmaa%of]PRWAd3q$U3*qHJ0d3UD$a%EYVuJF3`ag6^=]97d$:_q!gW2i5\3MK,"nsXr7N+Pk2I_0r:DXJ;5TZnK"W7"f#V.>[=;]L-=-^9R65f]_e=K#26]hJ:tT4%h-Ok%rs[K8rJ/k^h1,2]c8i)jjfnUm#`%esq?",*c)'suIt9Q=h>[O"``0M.!SpR4B]hYB$Jg?.EeWqt<&lYp:ur#i'3"#.P=(Vq-=`up%:rgDp5o9hW<rd+T.gJfhXBYdJ@BLT?E4BqBrkr'P@WmF0EeWr"=?.""i5ue`'TA;-&.skdKAg[K>]BunXBYc?+KSi,[(ihc-1DCG%1Uc\dX)3^!\(R#)GpZu*nt;uP&-WN&LD8tNI=TtRT;W>P(Qd;+oe1t!hXrNcHu,ff+C,p:(T>p)ap!C)Z#YQDb#l1U*cJlb3GSYY%D1\2dR?rb$2gdESk&ebY4Mf/DTX;7MAauO+bkY,[a:9m__rLotbqSt/>;JqoNga,AJXKOnV^JHG$h1^UTpYV2.Mk@og@>aoAo7>K%jKc5l"(#,7rl*)7D>>!Z6W<*(]0i63)_PTuS7bJKjT$;'Plkc+_I`9=(2%\Xp),>M+9YZ(DA0#ih'Q)]\kT,D9XUP9&MQM9UFQKu%7op$uDA?LtWZ9Y9W,c25BV9BfY#+5%Mg']oJIDT0f*0*I.7\Ri;m-#N1=lA>B$)tqRuqa`^dcI4]eNEF.@uZB&8B@QK-Om'*.Sk^%j]G53;iYQ79KDr`Qu]EGJ]]])"=cnMkRIPsh3&e"qBio7T;u2E-u?C:hXJk1/ZE\R!+ERu+5j?Zmgl3qn+R'eX#KqY_UVICdWU2a%*GF"fUu?rJnn-$U?#g'G/eD(.PRBTR1Z\[%eP*Ntblq_%_*s&,(MK^Yb%4k!"B-pL9[/e0`)8DQ!hN@b\Nh>R;_IqO![6Y,?W9_0%m(3ITPRGi7+lrbIe4@,8"#Wt/YWn,3bJ%#m8@aB3H/*!6;D.H"%?CV:q>,pdO`I7SK9QJWBqekJDAjr?&=[:S"eMTZEg[jKb`iM%%9Jbc3.+:l#bW;5]EnRo(QmiieQ=e8CN2;q_JQccb>in'I1Ze2P*bIYqCB-'M)!PGN)?(.EN`Z:W*,>^#jV[q]b(4ps;N:e*9KC*[%1Za/]Rjk9$O[.&D4rPljg7aXL]"'^AjVT[[b-Aeh;f:-t!\)/,$;um='VsNamgGj0_^\2;W.Q5S4Oc]^A#P)07j%n2cGM;#\Ng;i%$1gFYo*KIKaT1E(`QopU"3.NQ:3CDUF'Ulir(_[Wgd="_\NnXP5WQU1!0gDf"&I2F]YKa&HOW(tf,pTS]bd?3Wt/&[JETCc)jUFj%5e6J0,#E1)hZ860$5W\]j"Ghp4M]e^PRA<e"6BTi/HFmk@LGH3n`h>pcA8mDPLHRn5WR@Y!9MEm$U?^28H?o$G8>^LC6ZMt1UkRj%3AuiSah]2(.*"pr5WL/@!9MjL![q.*.-AW+GC_+Ha:"RZo,3(!`=:?Ok=4^'Z_IdS#AD:G3DXtFP67._SfH3%oAkF0)(8#ICSDd^%,D^AFo)qpNaV%!%-;+p3#b3'\0nFp)Vk]`4*>_lM(Ni'e_3tTXa6X20*8:Z?jTs0uatY1E.0irrU`@i?OE(QKK9RUdLFL9n%Ak,m%5"mt(j?^qnWX2R`8KLD_<]WOhH(b56*.&b]jd6OpP[cu[VAsYF1Zc8d@\b!VGU)=;1E%^_3eWW9?>h]!Nm1EWj]JR6.EA"g9KD7(%0]fsE!E'Cc4@hK`3C(_Aq#i/0aX9V>Q@<8b0d26"`u57X3Nt.jjihrM.0mHgU`>m?OE0hl5fs+3JLP6?$;<Ia.59jkUqi3No0"eh%]ODPAEa$?j83*Sp"JhQc`W7OO[I1hpo5luXjg5.)Qu\ca_j'bu&59W+&mOM8Pe6I'WbhcpP:=87E(8N!7e(ru,!8]4[..aU^jksF%nbN0D2q'JD2q'ME2l!$Wf#A$mNOPa75AbjR52X-F[T:WJD692sgKH>p\##`DD15]HpEurMPU`_Y5Ae'9%;R;\h(WK1faW9pQRQO7%Usj1D!tC?4ab`;+jcTZ5+Q\b&lp/]>D2glHRj9#?+4PK:jZ#JCTNj82h*eg7V*?3dAkBF!e)Ll:TY!RU9+H.gb%UtSZTsbE[FOA<%o85]YmOIA)lD^FfeqVX5I!Y`ZNC^V@j*i-4d`TaOr(>=P:N+!Xc>R'p9Nl`=MY:\"pnj2B&EQg1,8BRl>#@:6F#J5.b,(+s.,:H&%ic:)N\^^/-%=8*jB7$lBCsF$1&^nnOku/'8c'1k]+O-.?-.t'0/_QGoD2V,Vd&(2_eqSB0)?hQ+29#I7&Lp>^j<Ik_j^ud2KO.Tm%T,brSQ(,2HEbZjgr5fO(:q9_5>Ya\IY@l:<kD18l;_C(6L+,&s7HNT(hV_2l`C#oKRc9abE$iR%ZdrB![%:b+eF9=MF$[,m]@`"O%TUjs">uX2QAgsbpkd`TDamD!U)N(utPIG$2Q(+W/2dR@%.MjrEb06I_.[Rf7@&VjFUmLgikp&tV]b=2Es"Sb=nTdfmX4oQFjntp*%.-E&U^CoY0r@:b5?\re>m9>Ef6+bk*T%MdMc8-'oJi8@S8ZPY0oh2jf`*Rb!03t)\K$"8ad2==1>gTYIQ7)Bl-hd,MGp]OrclS`t%U<6Uh:[F>op9#JF=LfR)7s>(d2bEC?l=-f"D7,;r"K^CS4aLVrb"^U??@QFf5I%[]nXfE1pT.0'EIHi+gCnqg'78IIHeT5&frj06%=`2Y?h?[8%d]W;l'79!/4i$/+mGa,PjX0A0Dg>f1H",*A\Od`b\OgR4b,l39,$rQi5Bsa.\)lW@`lh*)`N+ef-gfoic7kluX1e5F%ScEi<p,IR)R#>._%,_-JB'j?:5IG_.WqD3MX\ZTOIH%*h'78IIHeT3\gCpdEY$P\VgoOeoe;1Y<ZTU+U')$o(%gnI^-qNZ6WQ!^2%Ul2A:C2:B6auBpi3Jao*lF#.<=K5VC'l<+WR1XMHk2+NiV7/9.bou;HeL0Hpcht8,]qF%s9_E2r:!i6^K"X%sd!3-^\Y.WG.;g/I%!BXr'0bnZHD$JV@N4BW.L+?T/F/4Q7"X:#kF6O!ADI6p:l'r5M6,GYij^=q&cm5!WUX6e^]@iDLBK)D!oMQ:`![3j8'L8O:bS)?k%SRW]HYtd&MJOJXc)Rt&^bU(Q))_m[=[q`id$5>:54Jr28e&HH\Eb*0pau#WTC,3QiV4-aO.@:Lu3TFNG'09Nm![pbjbYt4kFi$6E%gn.?/-Z=5sR7dRNk0F/9QSERYQo#dJ-d5^PJ23H0j>ibbBB9B@*0aQ(k#eVc1RG\&<@?!nJqYtH<k"t:R'VSYA1leI%@Kj]96q%S%DJY"0]H"OFi8rV#!\_U^)gFC:&AcOA9.]8,;bR=8hM/>OU!'^i%UG)o!U+RZe-96>'FjPPJa.!_*(_mCja:JaF?.d0^rqie"^[4Z%0(<mlTu!'?E=T]&2grT1j$%PbF6$$sR*0k-#0^XaEsH&)5N0dsI+E\U^f`O%/os#,I(:59D^:eWjP6/>T)<>gCJM(p>k8r3do;0e%%TNXG*)R!F<QbE9:7Z4HGo,sj,s8qC""L(APKiF3OrL<QJeKZKWPN)PrESkf-_"29dnVg)*)1X_H)8cVCgM[*QnR&.-OlGY:e"-G%C\5tCbVe<07a,jK(;sGXG8`3fI..]c>RSlUpnfiZ)_or=9e^"Y")or'NcXS1ju?ea(bsY@d@)c@q*:3c^>@jVSu>$5X]!FH$plE+%J0'tq^,hJ5J2shTileHtJ[>um)Oq1ANgU2u3Q#C#b<_d(03?J^iNn?,CM*T7^79Fe`liq9;S)[dddVdR4)to/N0cU>"@fpVrp1To%`mAS.f*oS:iQKjb=0]YWp-!&%Fb^L!gWK\n2:_cM0mag(YH\:.!l/,e\T1FY-G3ST`YXLb=4i*[?EPP-=2N.G'KBR=b8iZaV`E/d%8/-Y.GNO:LTq1>kbWBMd%rQreBYN7'_TI8:1[A)qad:2%RO5aR:05/7%aQN:gn(Ts<+CGkKpWg*,g79Nn'MIdb[kHe-HtSuWZoYu%Y[Ag%jZlBN@IBX0#S_L:.t""%bajO%[\97R\`4+P"(^gZ2g;t^1$/gkRi$4CZjUBHPTI5@DN3B7=!b*7`[X6Q\#>jH>(c:(<Idt7%29%+2iJar`F/9Y@ASaf%J@&A>H)\W<`[X6Qd*0KR^b2#k2AQ<c%1KbO#Z*!h8<CB&I#AYKY+28JUhKqu1IL<Ic3>,qZuZPHZtq5M%83PiV5K,BO('!)F/FiZeo=UT"FkRa,!9G=gZltuh(l6\a4>5m5-LTYCf6NB#ErfcPA8dIhcL.tA>i,f]8i%5]WTU,LeLL7)F='f+%4l<XWU$abhh>%=4[nD9$GIgLEr97;d-jM55k033r@*`[>k6C=Z\(HDRR4CEj*o4&eBrS?E:_"ntq8d%X@$ci9)lirb9EBg7gU.NO%cK58egG!9D*rEH1j!j.85WMUQCdU8]0M!Ger'AKW;Pu+j&'A.)#c4/KB3"YNXHKm8O/ai_[]5]u8BL%g+dIBqgKTcMpg024*oETe%39Bq6g5m'bdk>5li?F%Ul?PD(i_q?%TPP@r8p2cuk/o\'gkI^lL'8n9k'#"!3u.hi&'7O0(')4l-,No$?o1<>gV6b?IKV@:Aj"t,%s*)_K2\lDer]jhC&9GI\2X)t5J8JTS=?@('DXX^WD29pUCOY?L!`6bh>`?4!95*JsT]%r4bgEtY0iq+\b;Q`TK-_FX;id<#"2)@*%JM+EUr:4<."mh[tE+9>b+%Oh,apQeA)uZqF!d79k>^3eW"3#%,!plB4OKnr]Tl2omOok=h;Q[$rJ9"%fj!PV1o*D+]J2dfB038We%L<Y^oR]3Q4!qq3%[ETWfDu*S#&l>S_\]P1+THFZ0gSZ$?P*(0!^b6NX[qgh@B-Kl\fGj)<"]BpAEab7Z\m.8@rC\'[12l=aDt[n4%X*VecV(h%jFF\d;kCu&7!-UrZ510I(%[HKm&o%^>a9L;[QMQ?$ID4#nD1:"TP`JT(!9H2SgP4c<Xe1*.3MmqA"t5ud2.!Fr##aFA%b'?Hs)qsP1i=MaQEbAQT)q*u(9^GK?44:XaR[GdPA;0hT:U_Kj0O1b3L:Wj,=,t`hD+LQ</t$'@1)I`BMp*dPeT!jL/;[^Sg#loQ%F]C=to#G[Y>Y1Wp,Q#-8]kP"3OZpqF%XXnX7J6d.DZhbnn?Zcs?W*ih)>og8l?W[7,q]%,*O\:7l`_+=H:Ip]%'/MJ*BVcW$+:j\%C(kF<+0YK\,@17qN\5ZY*OtocHRf!`=7bPIkkt@ONL/BG=)1gO^/-I9!$iQ)$NSNtDLjIET+GAtr*9*F:28%^ne9/1#L*cd%WX=P%\LlanDBlV'%.UkkG%b'K3ObdoM'Gtk$0YXP!+6<'/qCJa&B9rb%KI<\*#)T_F0!pP+j@&.=]GqmS6-Heept=N3Ttus9pf-F(T8<q%(og'LR>ksug_rFrg;7)TfAmY<2,Mr4eIQ?c9IILP9;Ke:_?OVtf=sS=lQA0W"2G@%;!*(;.A`a4k3=B']`X+1(4$K.5Gb(J5j6\m%NR$3B;s$-]m@8pfQh\%fMfLfhR(:Ks-`<XCJ>De`!uMZp*%duh*%e[bda3D&&sTrH&S5UK2^=QWK\ccE9j-Z\MeL7<_pO^'hDjGm%2"YB@O>d-T&K3FV3:Woks5r?_gA>fY8CQFF+T4;,4WsZgE-mll_MgL8dDM?H*F[.qE1RqgN'fkm\t@T53BJC?\Nm5(Lq1<X1Ln]F%$]MWVB#\((2sfX.c;Zci1Lr+Gg^KTT@^uN-9<m9Va'h%XF-%94bS^rP'Qd[h#@oIVc('Al+:L45]`84T$@6*@))>9P(c>f`\ZZll%,u=e)Zb9VGbs3mi[;H1hR8.o]gImR%mJgYDT6C5BSVT)K$h)78s1keMrEo=`]_u1sRgNYc^';RsY7JWXU'cY!-0emZ*8_Bj3Vk!g%k->d_J]tCh#@oI6QOK;*^2*kl>iqe;A1m2d&<+.^n`5Wk$LG9sElOs?TLM0ZR5#Lk6Y=OGOH:W,R03JDbiKcCG#LCtEPickM]m/0%ZgE@gjkqX6V)`n@(1]$/Es.oSI-6+*jkr5$Gr,#=mIIUQ%qRBjI'L0V1OZL:q8(.fPCj#0qM?+>EuDIYk'qQ3&<s^6L"2R$!+dls%0$mXXR9K_\bQlH[Xr9)4BIN#e"k&5fF+Ib/cJ5]pH^i12Skkr%m.o^&IVd;7J:\Upa'H!$joWQ?TK/)Sk033@N^],q*(Hh$j>d2L%F63NB_k=Pj]F\ao!Ke\T*7P=4r<F0n[f-A>6@8``*ML1H^k=*9)aM`/X:[W8n,3K%KD5?INPV+aM^dcEq[`<%n,3Ik64).r!0A.K%'=`ZYH60SK5'fs_m_/XN'Cak.?ikTAIj$Z=hL@N?DpV`K\8T_6#P&=mj0iPbF5[888TR'5%qpt:muZ[&$%b"C5\d=hm($jCc^sH"%_V&up8iV1#8($#]6jFjcS542F24*M=.Q:o80m!PK5!o/G*/ldj0%"HJj.CtJT]Qk-M,A>NZ-RdsM9a)0s#rgZBeIfjGk9gjINct4%^_l^cF-!-RqG2YskS!s?EfHOJ?nA6:%_RC^97R7+baIn^PNNA*-I$P7'\"*-7R>9ZBb&W4#<Y;sEC^bm*'&8:jq>!dUZR_$9p=^!%nH`ih1d=fXag`OYju@ntBo]8\PNJ$Z70:`17^[@3S9R`'3ThZV1mdF%7@N8^HUr5"=<`C[&m-?1jq=r)8TVuo]KpUqW6e)GA-CoX%-Y`e/-,p1Bk)s@S#0i:B$"tqGNYjU>beuAO/hmA_B9)U\3-,D)U,d;:F*_?Y''#-8F(Cr\R7jcAbaD*F^l4[Si#%HA,KU\G>_6<n%c<OiJ1M;`D=[7%b!R[RN"N8BS\HKmmTXj,TW&SjolC'Mq#\q;G95om/R7gqI"I_t)K#O-N9QA%>9<>`B1m]&X%@SNl(slN.BP#Oq%![h^/*1>!#jq<cN*jV2dk%s/fBeGgSDUKL2du`])/0pGA'!leWk%8Hi%atl^k*#O27a34pW/R0<bY!h_Rl-ZK:"l\Z"@pS8\R^_`%=`]e6WKc;AO.Co(12CdYCegdDZf]>B2f!;s:?V/IP#-41`u?lP,dHJElQTf_c&ulLeSWqY)>V)1B$FKT_ahq>S#")pIo(3mAo$On%/\"O%L)VJ7bKZKF[Dh5q1iptBUtOUD3O@k"Ul_2^%^>)-XfIruBa&R/.qa5"9XEknD>4QJ.`:DCVO2kaMT_!Gd=OAO[Uq-ra'-i3%>U2iNa$gE+Mpgn^,4^,tk%:Su9?EK&Gs9#+Bg-nW1`nn!*t=#(iG[PVL1Fd`Enu>P.r%go7*W]c:AC\M3hthLXZe1HHNnsO_&h>$%Un#+IB_G17fbV6L>/iXVApZkRj^?B^p/n?Q9M"kNA+^23)78d/Y$s"sfGe]UdbHCqTcR'PZ_YKaJNg!LGsPUU96'Me83Tid1`rYP%b:XcI[MBAQ#;&.hGI84srsOi':,=-jGTKbrQKiOj'$pLq//HP0#H^0=2k4L.L=]*)\`H^aiI76"Ejg0XbscKc?I4Ga9\T!R8_YlZ%'^p*>&D#X<[3t(E90!J6#>(L(Uin=9:Ge;q6iTHpf2?d^T\4=dKbMWqb>68dm=fW]_S_(;s%)i(,eFOaIk2=pr$,K`X]J`m1L##@%A*Z%C->;L4\c/D[`L]$bBC0.]h/JgUfkIN6S1nX<8NH,Hl4Ku*TImu$RQMrgo"lNOO/9.q0M!!aq._EeD2#mM=5)H*eL0JFK49YU%;uK#*:Wbhl<XrLtCTjA/'5fH#Fi-FrG5[\Lq3AabRl%`Vd-OXrlVGZ?QZDC*Hg;>lCTn&1c7W[F_khrcSs4"db$F?7S=?mD4VR!*%8U_DiETs_B#Q99sZ'DK#QE.,6\.mZWJbjne$X,OU+1/)^r5@IR\:6ch7EM]g<3N.pA#Xd^<NijreQ0Y'OR.U_)D6hFY,*bZg=96E%?'+D)8F9SqHRuR2D66lDldaR$B7U_/."mk5.FTn\*piZ(IoQ!8bQA>!T]M7:W!qnk/HJqU]j+m@qgW4`>V5D4Q<XA+A@_MmNm.E*%5'!%8Q:pte!A;F1!gfro3dlGS_E[+Jq//&Se?edkWos)AomCi0q0"Xom`*Zs2"pPNb\acQf[##Hq=tu&)0l=\cYqb0]_<L-RjX1A%JTAd.rBU>OD2kcFo%Q[ZJ,7jKg/I5p07NHN]oPDSiE'Cdjfe^KlX,/;`@#$krn`7qIJj(-#WhtB#CC67p$48[p%&&'rTK%:oM<7#%r9%F9rQ/C<K6u@dpMmdj_*7_kVk8A1o)0[0G^K8Hci<+MYJ,J]UG%,o`@l`4nu&,Zo@IW[EXsVb2])D(0E5UJX1*""p%)PjlG!gU%HYWGef_a'_?[r%9k@`32huE:W)mAt55C2kV%t@hKri7]$q9r,gs63U7qPQ"'Hgbl;q:2BmpXLY+rp8+;?Ms(ITD\FZ?[hRb(OI_u%rKmDr]_p;]TDn!@0V?)Wc%#]_GIqnq',?#c]taE)s5Crs$SflmnG~>%AI9_PrivateDataEnd