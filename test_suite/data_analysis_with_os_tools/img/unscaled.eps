%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: unscaled.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: SamreshNarayan Singh
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 259 194
%%HiResBoundingBox: 0 0 258.9659 193.6275
%%CropBox: 0 0 258.9659 193.6275
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 7624 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FFA87DFD7EFF5253FFFFFD057D7E7D7D7D7E7D7D7D847D7D7D%7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D847D7D7D7E7D7D7D7E7D%7D7D7E7D7D7D7E7D7D7D7E7D7D7D847D7D7D7E7D7D7D7E7D7D7D7E7D7D7D%7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D7D7D7E7D%7D7D7E7D7D7D7E7D7D7D7E7D7DFD04FF5252FF847DA8FFA8FFA8FFA8FFA8%FF7EA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7EA8A8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7EA8A8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8FF59FD04FFA8A9FFA87DFD0B%FFA8FD17FFA8FD17FFA8FD3AFF7DFD07FFA8A8FD76FF7DFD07FFA87DFD76%FF7DFD07FF7DA8FD76FF7DFD07FFA87DFD76FF7DFD07FF7DA8FD76FF7DFD%07FFA87DFD76FF7DFD07FF84A8FD76FF7DFFA87DFF7D84FFA87DFD76FF7D%FF597DFF5259FFA87DA8FD75FF52FFA87DA85252FFA87DFD76FF7DFFFFFF%A8FFFFFF7DA8FD76FF7DFD07FFA87DFD76FF7DFD07FF7DA8FD76FF7DFD07%FFA87DFD25FFA8A8FD4FFF7DFD07FF84A8FD26FFA8FD4FFF7DFD07FFA87D%FD76FF7DFD07FFA8A8FD32FFA8FD43FF7DFD07FFA87DFD31FFA8A8AFFD42%FF7DFD04FFA8A8FF7DA8FD24FFA8FD51FF7DFD04FF5252FFA852FD1BFFA8%FD07FFA8AFFD0EFFA8FD41FFA853FD05FF7DFF7EA8FD1AFFA8FFA8FD15FF%A8A8FD42FF7DFD07FFA87DFD1BFFA8FD0BFFA8FD0BFFA8FFFFFFA8FD1BFF%A8FD04FFA9A8FD1CFF7DFD07FF84A8FD12FFA8FD23FFA8A8FD1BFFA8A8FD%07FFA8FD19FF7DFD07FFA87DFD11FFA8A8A8FD49FFA8FD18FF7DFD07FFA8%A8FD24FFA8FD51FF7DFD07FFA87DFD1FFFA8FFFFFF7D84A8FD12FFA8A8FD%19FFA8FD22FF7DFD07FF7DA8FD24FFA8FD13FFA8FD19FFA8A8A8FFA8AFFD%1EFF7DFD07FFA87DFD1FFFA8FFFFFFA8FD2FFFA8FFFFFFA8FD1EFF7DFD07%FF7DA8FD1EFFA8AFFD04FFA8FD51FF7DFFA87DFF7DA8FFA87DFD2CFFA97D%A8FD16FFA8FD0BFFA8FFFFFFA8FD13FFA8FD0CFF7DFF527DA85252FFA87D%A8FD19FFA8A8FD04FFA8AFFD26FFA8FD08FFA9A8FFA8A8FD13FFA8A8FD0B%FF7DFF7D52A85252FFA87DFD1BFFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8A8%A8FD05FFA8A8FD08FFA8FD0CFFA8A8FD05FFA8FFA8FFFFFFA8FFA8A8A8FD%0FFFA8FD0BFFA87DFD07FFA8A8FD24FFA8FD0DFFA8FD09FFA8FFA8FD05FF%A8FD09FF7DA8FD08FFA8A8FD1CFF7DFD07FFA87DFD17FFA8A8FFFFA8A8A8%FD07FFA8FD09FFA8FD05FFA8A8FD06FFA8FFA8FFFFFFA8FFA8FFFFFFA8FD%04FFA8A8FFA8FD06FFA8FD1DFF7DFD07FF7DA8FD1CFFA8FFFFA8A8FD09FF%A8FFFFFFA8A8A8FD05FFA8FD0EFFA8A8FFA8FFA8FD05FFA8A8A8FD04FFA8%7DA8A8FD1BFF7DFD07FFA87DFD1BFFA8FFFFFF7DA8FFFFA8FFFFFFA8FFA8%A8A8FFFFFFA8FD11FFA87DA8FFA8FFA8A8A8FD05FFA8A8A8FD05FF7DA8A8%FFA8FD0DFFA8A9FD0BFF7DFD07FF7DA8FD1BFFA884FFA8A8FFFFA8FD05FF%A8FF7DFD17FFA8FD0BFFA8A8A8FFFFFFA8FFA8A8FD04FFA8FD09FFA8FFFF%FFA8FD0BFF7DFD07FFA87DFD04FFA9A8FD13FFAFFF7D7DA87E7DFD04A8FD%25FFAFA8A8FFA8A87DFFFD07A8FFA8A8A8FD0AFFA8A8FFFFAFA8A8A8FD08%FF7DFD07FF84A8FD04FFA8FD13FFA8A8A8FFA8FFA8A8A8FD0DFFA8FFA8FD%19FFA8FFA8A9A8FFFFFFA8FFA8FD05FFA8FD05FFA8FD0BFFA8FD09FF7DFD%07FFA87DFD19FF7DA9FD06FFA8FFA8A8A8FD07FFA8FFA87DA8FD11FFA8A8%FD08FFA8FFA8A8A8FD09FFA8FD05FFA8FD14FF7DFD04FFA87DFFA8A8FD1A%FFA8FD09FFA8FD0BFF7DFD05FFA8FD0BFFA9A8A8FD0AFFA87DFFFFFFA8FD%05FFA8A9FD1AFF7DFD04FF5259A8A87DFD13FFAFA8A8FFA8A8A9FFA8FD0D%FFA8A8A8FD05FFA8FFFFFFA8A8FFFFA8FD09FFA8FFA8FFFFA8A8FFFFFFA8%FFA8A8FFFFA8A8FD06FFA8FD19FFA87DFD04FF7D52FF7D7DFD14FF84A8FF%FFA8A8A8FFFFFFA8FD0BFFA8FD05FFA8A8FD08FFA8FD0DFFA8FD05FFA8FD%07FFA8FD05FFA8FFFFFFA8FD15FF52FD04FFA8FFFFA87DFD15FFA8FFFFFF%A8A8A8FFFFA87DA8FD04FFA8A8A8FD05FFA8A8FFFFA8FD07FFA8A8FD12FF%A8FFA8FD05FFA8A8A8FFA8FFA8A8A8FFA8A8A8FD14FF7DFD07FF7DA8FD1C%FFA8FFFFA8A8FD05FFA8A9A8FD10FFA8A8FD15FFA8FFFFFFA8A8A8FFA8FD%1DFF7DFD07FFA87DFD1BFFA8A8A8FD0BFFA8FD07FFA8FD04FFA8A8FD11FF%A8FFFFA8A8FFFFFFA8FFFFFF7DA8A8FD1EFF7DFD07FF84A8FD1CFFA8FFFF%FFA8FFA8FD05FFA8FD07FFA8A8A8FD0FFFA8FD05FFA9FFFFFFA8FFFFFFA8%A8FD04FFA8A8A8FD1DFF7DFD07FFA87DFD1FFF7DFD04A8FD0DFFA8FD0FFF%FD05A8FFFFFFA8FD07FFA8FFA8FFFFFFA8FFFFFFA8FD09FFA8FD10FF7DFD%07FFA8A8FD42FFA8FFA8FD0FFFA8FD06FFA8A8FD19FF7DFD07FFA87DFD19%FFFD07A8FD05FFA8A8FFFFA8A8A8FD15FFA8FD13FFA8FD20FF7DFD07FF7D%A8FD19FFA87DFFA8FFA8FD0BFFA8FD2AFFA8A8FD1FFF7DFFFFA8FFA8FFFF%A87DFD12FFA8A8FD05FFA8A8FD10FFA8FD18FFA9A8FD08FFA87DA8FD25FF%7DFF597DA87D7DFF7EA8FD12FFA8FD39FFFD05A8FD11FFA8FD13FF7D527D%52A85253FFA852FD23FFA8A8A8FD09FFA8FD15FFA8FD06FFAF7EA8A8AFA8%FFFFFFA8FFA8A8A8FFFFFFA8FD04FFA8A8FD11FFA859FF7DA8A87D7DFFA8%A8FD22FFA8A87DA8FD09FFA8A8FD14FFA9A8FD05FFA8A8A8FD07FFA8FFA8%FD1DFF7DFD07FFA87DFD1DFFA8FFFFFFA8FFA8FFA8FD05FFA8A8A8FD17FF%A8FD06FFAFA8FD07FFA8FD0FFFA8FD10FF7DFD07FFA8A8FD1EFFA8FFA8FD%0BFFA8A8FD16FFA8FD05FFA8FD19FFA8A9FD10FF7DFD07FFA87DFD17FFA8%A8A8FD07FFA8FD0AFFA8A8FD07FFA8A8A8FD09FFA8FFFFFFA8FD04FFA8A8%FFA8FD08FFA8A8FFA8FD0BFFA8FD10FF7DFD07FF7DA8FD18FFA8FD05FFA8%FD0CFFA9A8FD09FFA8FD0BFFA8FD09FFA8A8FD0AFFA8A8FD1CFF7DFD07FF%A87DFD1DFFA8A87DFD0BFFA8A8A8FD17FFA8FD07FFA8FD28FF7DFD07FF7D%A8FD44FFA8A8A8FD15FFA8FD19FF7DFD07FFA87DFD45FFA8FD15FFA8A8A8%FD18FF7DFD07FF84A8FD20FFA8FD55FF7DFD04FF527DFFA87DFD1FFFA8A8%A8FFFFFFA8FD31FFA8FD1EFF7DFFFFFF7DA852FFA87DA8FD23FFA8A9FD31%FFA8A8FD1DFF52FD04FFA8A8FFA87EFD25FFA8FD50FF7DFD07FF7DA8FD76%FF7DFD07FFA87DFD27FF84A9FD26FFA8FD26FF7DFD07FF7DA8FD4EFFA8A9%FD26FF7DFD07FFA87DFD4FFFA8FD26FF7DFD07FF84A8FD76FF7DFD07FFA8%7DFD76FF7DFD07FFA8A8FD76FF7DFD04FFA8FFFFA87DFD76FF7DFF7D7DFF%537DFF7DA8FD76FF7D7D7D52FF2E52FFA852FD75FFA853FFFD04A87DFF7E%A8FD76FF7DFD07FFA87DFD76FF7DFD07FF84A8FD76FF7DFD07FFA87DFD76%FF7DFD07FFA8A8FD76FF7DFD07FFA87DFD76FF7DFD07FF7DA8FD76FF7DFD%07FFA87DFD76FF7DFD07FF7DA8FD76FF7DFD04FF5252FFA87DFFA8A8A8FF%A8A8A8FFA8A87DFFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8%7DFFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A87DFFA8A8A8FF%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA87DA8FFA8A8A8FFA8A8A8FFA8A8%A8FFA8A8A8FFA8A8A8FFA87DA8FFA8A8A8FFA8A8A8FFA87DFFFFFF7D5952%FFA87D7DA87D847DA87D847DA87D7D7DA87D847DA87D847DA87D847DA87D%847DA87D847DA87D7D7DA87D847DA87D847DA87D847DA87D847DA87D847D%A87D7D7DA87D847DA87D847DA87D847DA87D847DA87D847DA87D7E7DA87D%847DA87D847DA87D847DA87D847DA87D847DA87D7E7DA87D847DA87D847D%847DFFFFA8A8527DFD8CFFA97DFF7DA8FD13FFA87DFFA8A8FD14FFA97DA8%FD14FFA87DFF7DFD14FFA87DFF7DA8FD1BFF5252A87D52FD12FFA8527DA8%7D52FD14FF7D527DFD13FFA8527DAF527EFD12FFA8527DA85252FD1AFF7D%7D52A8527DFD12FF7D7D52A8A87DFD14FF7D52A8FD14FF7D52FF7DA8FD13%FF7D52A852A8FD1DFFA8AFA8FD13FFA8FFA8FD17FFA8FD15FFA8FFA8FD15%FFA8FFA8FFA8FD08FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:18:27+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T13:18:27+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T13:18:27+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q878jR+b9I0vzJqOv&#xA;QahC68p7G01O7ivQVhWRvUWWKebiZfhLoscSJsEXqxVTzSf8e3umWl6+q6UhuoY5uA0y4+H1EDca&#xA;/X96V64qi/qfnn/q76Z/3DLj/svxVTuLfz5FbyyR6ppkrojMkY0y4qxAqF/3vPXFXW9v58lt4pJN&#xA;U0yJ3RWeM6ZcVUkVK/73jpiqp9T88/8AV30z/uGXH/Zfirvqfnn/AKu+mf8AcMuP+y/FXfU/PP8A&#xA;1d9M/wC4Zcf9l+Ku+p+ef+rvpn/cMuP+y/FVO4t/PkVvLJHqmmSuiMyRjTLirECoX/e89cVdb2/n&#xA;yW3ikk1TTIndFZ4zplxVSRUr/veOmKqn1Pzz/wBXfTP+4Zcf9l+Ku+p+ef8Aq76Z/wBwy4/7L8Vd&#xA;9T88/wDV30z/ALhlx/2X4q76n55/6u+mf9wy4/7L8VU7i38+RW8skeqaZK6IzJGNMuKsQKhf97z1&#xA;xV1vb+fJbeKSTVNMid0VnjOmXFVJFSv+946YqqfU/PP/AFd9M/7hlx/2X4q76n55/wCrvpn/AHDL&#xA;j/svxV31Pzz/ANXfTP8AuGXH/Zfirvqfnn/q76Z/3DLj/svxVQ1CPz/b2FzcQajptxNDE8kVuum3&#xA;AMjKpKoKX53YinTFVf6n55/6u+mf9wy4/wCy/FXfU/PP/V30z/uGXH/Zfirvqfnn/q76Z/3DLj/s&#xA;vxV31Pzz/wBXfTP+4Zcf9l+Ku+p+ef8Aq76Z/wBwy4/7L8VUNQj8/wBvYXNxBqOm3E0MTyRW66bc&#xA;AyMqkqgpfndiKdMVV/qfnn/q76Z/3DLj/svxV31Pzz/1d9M/7hlx/wBl+Kpf5hn8+6VoWo6qmqaV&#xA;KdPtZrownTbgc/RjaTjyF/8ADXjStDirLcVS3zP/AMo3q3/MHcf8mmxV3lj/AJRvSf8AmDt/+TS4&#xA;qmWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvPv&#xA;/KDeYv8AtmXv/UO+KpubyzF4tkZ4xePG0yWxdfVMSMqs4SvIqrOoJpSpGKpLqeu6Hq3lvXRpeo21&#xA;+bW2uIrr6rNHN6Ugib4JPTLcW9jiqO8sf8o3pP8AzB2//JpcVTLFXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkXn3/lBvMX/bMvf+od8VWX3lMP5rXzRY&#xA;SQWuqJplzpgeS39QOZpYZYpJijwu6wmA0TkK8jRlxVI9J8lXflXyn5it5dUe/tp7aZrW3pOI4FWK&#xA;QtxE890Q0har8CqbfCi71Ksj8nWUNr5a00RNK3qWsDt6sss1CYl+z6rPxHsNsCpzirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVY3+Y1lDc+SNeaRpVMOn&#xA;Xjp6UssQJFu/2hGy8x7NUYqyTFUt8z/8o3q3/MHcf8mmxV3lj/lG9J/5g7f/AJNLiqZYq7FXYq7F&#xA;XYq7FXYq7FULqA1Aon1JlVq/FyAPyrX9mv2qb06b4qisVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVSLz7/yg3mL/tmXv/UO+Kp7irFpvM1hrvl3zUtpFcRHSTd6fci5iaEtKlqsxZFe&#xA;jcCsy8WIFeo2oSqmHk6/sbzy1pptLiK4EVrAkpidX4uIlqrcSaH2xVOcVdirsVdirsVdiq1JI5FD&#xA;xsHU9GU1Gxodxiq7FULZXk1xLOkkDQiJqKT33I8Ou1duxGKorFXYqhdRs5bqFUimMDK3Ko77EdiD&#xA;tWo364qilBAAJJIHU9T92KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjf5jX9ja+SNeW6uI&#xA;oGn068SESuqF3Nu/wryIqfYYqyTFUi1nSrCx0HzHNaxenLqMVxdXjcmPOb6qsPP4iafu4UWgoNvH&#xA;FUX5Y/5RvSf+YO3/AOTS4qmWKuxV2Koe+ujaweqE5moG54qK92ajUH0YqrRSepEknFk5qG4OKMKi&#xA;tCPEYq6RFkjaNxVXBVhuNjsdxiqlaWkdrGUQsxZuTM1Kk0A7AAUAA2GKq+KtSByjBGCuQQrEVAPY&#xA;kVFcVULCO7jhK3Th35ErQ8qL4FuKV33+yPDFURiqyeJZoZIWJCyKUJU0IDCmxxVDxWr2dg0NoA8q&#xA;hjGH2Xkd+g6CvYf24qq2ZuTbJ9ZFJt6jatKnjy4/Dy405U2r0xVWxV2KuxV2KuxV2KoXT21AxN9d&#xA;VVcN8PEjfbfp25V496Urv1Vaa1uTqC3AnYQAbxVNPs048fs9fi5de3Toq3DPeNfSRPEFt1Wqvv1q&#xA;Kb9G5b7D7NN+oxVFYq7FXYq7FXYqkXn3/lBvMX/bMvf+od8VT3FUt8z/APKN6t/zB3H/ACabFXeW&#xA;P+Ub0n/mDt/+TS4qmWKuxV2KuxV2KuxVbKAYnBcxgqayCgK7dRWo2xVC6VGqWvwz+urMSGAIA7cQ&#xA;CWPbep64qhNBgv45r43V4LsGQKAKfC6159CetQKdqUxVN8VdirsVdiqEj/SP1+TmF+qU+A1HtSgp&#xA;yrWvKu3SnfFUXirsVdirsVdiqncNMsEjQIJJgpKITQE+FcVS/Tr7WH0+Se+tAtwv2Y4+QqKkV4nk&#xA;1AKHx7Ba9VUdZzSTWySyIY3atVPsaA/JhvviqtirsVdirsVdirsVSLz7/wAoN5i/7Zl7/wBQ74qx&#xA;zUfzFu7D8wTol1NY22lRSBJ4p6pdC2/R8t6+peq0qxraxyxCBqx/ar8Y2UqoTyr551DzV5U80nUP&#xA;QFxYwzJ6VtGgjjV4pCqNLHdXgeQBfjVhG6/tIKjCrMfJt39Z8taafRlh9O1gT98vHlSJfiXc1GBU&#xA;6xV2KuxV2KuxVZNJ6UMkvBpPTUt6aCrNQVoo7k9sVQS6pZzQxpOgpc1Qx/bQqW9PluByR2YAbb16&#xA;UrRV0L/Vr1bOG2YRPVmmYlmY8ftlmrUDiE3bl02C0qqrWttY280iQcVlZV5R8qlY1rwAHZBU0HQd&#xA;sVVbm4jt4TLJ9kFVAFKlnYKqitBuxA3xVLbq21C+vLO9sb0xWij95FuNw254jZq/ZIbp2odwqmNz&#xA;eW1sA08gjDdCfAdSfADueg74qrYq7FVsc0UvL03V+DFH4kGjDqpp0IxVdiqEmW/N7EYXAtgP3i7d&#xA;a78tuX2fs0IodzXpirc2oxRXsdoVYvIAeQFQORIG3U/ZNadOp23xVEsyopZiFVRVmOwAHc4qhbuS&#xA;+5wNZqskTEmQ1HTbj1P2SK7jetNiKjFW57i8S8iijg5wMPjk+Zod+g4jffr2xVf9esvW9D14zNXj&#xA;6YYFgfAgdMVV8VdirsVQt7LqCSQi1iWRGJEvKu3Sm9RxHWrb/I1xVFYq7FWN/mPd/V/JGur6Ms3q&#xA;6deJWJeQWtu+777DFWSYqlvmf/lG9W/5g7j/AJNNirvLH/KN6T/zB2//ACaXFUyxV2KuxV2KuNab&#xA;de2KoXTor+OJheSLI/L4SvhTfsOp3A7YqgLG21Nbpp7+4hmghJKsaEpRaNTYcTyqa12Hw0OxVVV0&#xA;LXBqyTOtu8KRMArMahg1TQ+DL+0vbxI3xVGLYwLdtdAH1G3I7cqBS3zKqB/maqqV7qenQwyCd1dQ&#xA;fSkiFGJLAniV/wBUHbFURHNE9os9sBLE0YeAIQA6larxJoNx0xVD24F9AHu7fiUc8Khl5Dx4txah&#xA;6EMN6dKYqv1FNQaFRZOscnL4iwB2ofEHvSvt03xVFCtN+vfFUBJotmYHijHAPx6/GOKVCpxbYotT&#xA;xXt1G+KrrzULHSbNHu5isScYw7VdzQd+rMdvp+eKoW1X6rJE1krXMF0QWl3YceXcj9oBizO+7U49&#xA;eiq57+6u5jHYDg0DESmRRuCSo69Fqh5Ls3TpiqL1PT4tQsZbSRiqycTyG9GRg67HqKqKjviqDsp4&#xA;rRoNNs0eeCJQjyklmqSasTTjt1PQdl3HHFU1ZlRSzEKqirMdgAO5xVhum6nHfahezpo8gNvOBFOx&#xA;dl+2zFXVR9r1F57BgOQPYYUMvguIpgSjAsh4yKCCVYdVNCRUYEqmKuxVDT6hbw3CQOTzfjvtQcyV&#xA;Svf4mFBTFUTirsVSLz7/AMoN5i/7Zl7/ANQ74qnuKpb5n/5RvVv+YO4/5NNirvLH/KN6T/zB2/8A&#xA;yaXFVdob46gsolX6qB8Ue9acacadPtfFyr7U6nFUXirsVdirsVSzUNZktNTtbMWzyJcUrMK03NDx&#xA;2p8A+J6kfD0qdsVSb/B+oJb6kkWpySrcrW0SU8kDp8URdQKfCetPtd/DDaGtOsL+OKz0zUbiVZQp&#xA;qVYPIQWLcmP2XZiCJPhYcabCpOKsi036qluLe3k9QQ1B69yTt/k1qFpt2HTAlZNoelzrKk0AkSY8&#xA;mVq0BLczx/lq/wARp1OKt3N1Dp6W8KRH0z8CKuwAWnwr4sey998VUrbX7O41abTYfilgqHIPdftb&#xA;fygnjX+bbFUyxV2KuxVSubW2uojFcRrLGaHiwruOhHgR2OKrbO5s5oqWjo0UfwAJ9kBdtvbbam2K&#xA;tXiXP1d/qpCTEgkgLyIFAePL4eXEbctsVQV5BrU0cNuGQBlT15VAK8gwLhgSrcSuw4/a78RiqC0n&#xA;TlsrSS30u79e4DIJpHADlFqBxLBh9rqQCv2qANhVcNI1i5e6a8mAEoVTGp4o4/aUMtXVF4gp+0CW&#xA;8cVTCS1uLPTY4rSQK0VDNK1AWFCXarcgCW3JIO1cCqmmQWqQ+pDRmcKrsKgfBtwAapVVJNF7Yqug&#xA;nvHvJYpIQsCj4H38dt+jchvt9nocVX31ml3bmFyQCQR3FR/Mp2Yex/XQ4qtl0+J7VIATyjThHM3x&#xA;OBQA1Y7/ABAUbffFUPaafe29wlbkyW6inE7bUPwBB8IAY1DdQPh98VTHFUi8+/8AKDeYv+2Ze/8A&#xA;UO+Kp7irzXy1pnnSy8t+Z/8AEjXHx2RCfWbhbn1LpYpvrVxb0kl9G3lrH6cR48aH4RXCrMPJv1//&#xA;AA1pv1z0q/VYPS9Hl9j0lpy5d8Cp1irsVdirsVSuC51M67PbyITZKvwMKdSFKt0qB1XdjU9AADRV&#xA;B6veX1pbzreoZoJWAjaOiUo4pSldqFaq3g9fhAqVRkl6bLR47iCF3jUFnD7FVALMxCjYEinwigrW&#xA;nEYFRtnfW15GXhapQ8ZYzTkjjcq47H/b6YqsEdhYK8gVYRIRyIBJNOgAFTQbmg6b4qhNTe4vbQSa&#xA;VcfHGwqUJ6GnxqBTmQN1B+FvA7YqiRqKxC3iu6R3MoXmq7qpYhRU+7Gg/wAziqHt7RbTWJGt7WiX&#xA;XxTzgAb/ABMSWFOjnoan4tvhWmKoq+s5bn0+E7QcDU8d/Dcbj4hTatV8VOKtaldy28SeiU9WRwqh&#xA;yKn/AFULJzPtyHj7YqiYzIY1MihJCAXUHkAabgGgr92KtyIsiMjV4uCpoSDQ7bEUIxVKrbRGsGiT&#xA;T3EcJcPPy+0QKClAOPEIOCqOIXrucVRfp6h+kOfqL9Up9j249Kfzct+Vem1O+Ku1C6ureNWt4DOS&#xA;dwu/yG383Sp2HU4qoaTp+nW9zeTWj85J3rNvWhBJ38d2O/8AGpKrSrb6SrM8jym4YBEG5PEEljU0&#xA;5U+0x60HfqqjDPZ3I+rllcTR8jE3Vo2FN1PiDiqX6TdtFdzWEsBiYGqsKsGbjUgsWZ3AXjR2pXps&#xA;fhxVGpqMTag9kFb1EAJbt0DdOtKH7XSu3XFUVirsVdirsVY3+Y/1/wDwRrv1X0uP6OvPX9XlXh9X&#xA;evDj3+eKskxVLfM//KN6t/zB3H/JpsVd5Y/5RvSf+YO3/wCTS4qmWKuxV2KuxV2KuxVKrPTL60vA&#xA;Fn9SyYfvFYbkgEVavIl2JBLDrvUdMVQWj6toaW91PYW8kUauqFCoRaNydRWvBBVmPFiGWtCASq4V&#xA;Tt4ra9t4zIhaNgsiBgUYVH0MpoaH7sCoWxtJrW9ljit0iseIEbKey04qorUAVb4aBRtTviqPaONn&#xA;R2QM8dSjEAlSRQ0PbbFUPdXVzFcwRR27SRyGjuOgqadRsOI+I8qeAqeiqtcCYwuIGCykfAW6V/H9&#xA;R+R6Yqho7D14YGvx6k8RY12FQWqAwX4T9la02qPDFUbiqHvr+3soVlnNA7rHGooCzuaKoqQKn54q&#xA;3b31rccRE9WZFkCkEHiwB6HuAwqO1RXqMVWXI1D61D6BUW9R6laePxcq7/Z+zx79dsVckN6NQeUy&#xA;g2rLRY96jYUFOgoamvetD0GKqC28trfKtnboIJQPWck9FJ+EEn4FQGqqFNSafDucVQet2E0k5vLJ&#xA;1lntqGe1b94OxB4Acm+DlSPkFJPIUbfCqK0kx3iLfzWwhu60cAkqWC8eY/ZLcTxJ6jdakDAqPikt&#xA;5S0kTI5U8GdSDQjqpI8PDFVTFVKe7toGRZpAjSEhAfbqdugFRUnbFVXFXYq7FUi8+/8AKDeYv+2Z&#xA;e/8AUO+Kp7iqW+Z/+Ub1b/mDuP8Ak02Ku8sf8o3pP/MHb/8AJpcVTLFXYq7FVk88UETSytxRaVPu&#xA;TQAAbkk7ADrircUscsYkjYMjdGGKpdr1zq9vDE+nResxejqBX3Wv+Sehpv3riqncWuvTzOUuRAi8&#xA;jFttU/3Z+E1biPtBtiT0pTFUbp8VwlsVueJdmJNAtSD15cQqkk+A/rirV/a3U/p+hOYeJNaEjfaj&#xA;bdSv8rfCa7jpiq3WVuzp8htOXrAg8VqCVrRt1+LYb/DvttiqtYtcGzhNxX1+AEpNASwFC1BsK9aY&#xA;qr4q7FXYq7FUNe6fa3ihZ15LRkYdmR6c0bxVuIqMVUOenw6uIxCwuplr6tPh3BPc9SE3IHzOKphi&#xA;qlc3MFtA007hI1oCT4sQqge5YgDFVOw1Kyv4vVtZBIo2PYjcj7qqRUbbYqhpbKe3u0msYwRIzGbk&#xA;QAAzBm678WqzGm/KnbbFUyxVQtLG2tFKwJxBoPGir9lR4KvYYqr4qpzW0EzI0iBmjNVP3GnuKgGh&#xA;7geGKqmKuxV2KpF59/5QbzF/2zL3/qHfFWJL5D85J50TzLPJpeoX0Un1lb9PWsZWRLGa0TTljZb8&#xA;x2rSypO7+sx51PA/DxVa8q+SdX8q+VPNMF+bQx3cM0sJtxG0rt6UhkkmlS1smYsWHFXEjL/vxuxV&#xA;mXk63mg8taaJbqW652sDKZREOA9JfhX0kj2+dT74FTnFXYq7FVssUcsZjkHJG6j/AD74q6OOOKNY&#xA;41CoooAMVXYqpzXMELIsjhWkNFH3CvsKkCp7keOKtXUzQ27yrGZGQVCDv+vYd6D6DiqV6df69Pqj&#xA;rcWYhsGUlHrXofhZTQE8t6qwBG2KpziqxZ4WleJXUyx05oCCVruKjFVCwbUGV/riKhr8FCPp6V+H&#xA;wJ38RiqKxV2KuxV2KoS9N8JoDaxq61IkY02BI2NSDxO9eNTWmx6Yqi8VYxq1jNc6+iRxOUcfvG5K&#xA;AaoEfkCDWL0+S/656YUJtpuh2mnTySW3wI44iMVoB2BNdwvRB+yCfHAlX1Ca+ijVrSJZXrQhq/QN&#xA;iKVO3LenhStFWoY9QF9I0sim1KngoHeo4+4oK8tzXY7dMVbntLiS9inW4ZIkA5RCtCQSTt9k8q0P&#xA;IGg+zQ74qrXMTywPGkhiZhQOvUfqO/Q0IPgQd8VWWqmCGKCabnMQacjVjQ1oK7txBpX78VV8Vdir&#xA;sVY3+Y1vNN5I14x3UtsI9OvGdYhERIPq7/C3qJJt/q0PvirJMVS3zP8A8o3q3/MHcf8AJpsVd5Y/&#xA;5RvSf+YO3/5NLiqZYq7FXYq7FXYqhLeC+S7meaUPA1eCivc/Dt+zxGx3PLrt0xVZqz2UMC3dzA05&#xA;gNY1ReTknfiNwNyooCd2p3piqH036vqUkWrxl1BFVU1oQUoOLbfBRt16ch4g4qm2KuxVjVkvr62S&#xA;6SWk0bE8KErVqSSKlG25bc34lW7UNalDJcCVC9juZLdlt2CyGnUlajuOQDca+NP6hVUgWVYY1mYP&#xA;KFAkcCgLU3IHzxVfiqG1Ca7ihVrWMSOWAYEE0Wh6AEVqaDrtWvbFVGaEPfWsklwIZiu1tyBJ4/Ew&#xA;StNuz/CainSmKom8hlmtnjikMTtSjg0OxqRUbivSo38MVQ0B1SK5ht3Cy24U+pOa8uhPWvUNRaEG&#xA;o35VriqPxVTuYnlgeNJDEzCgdeo/Ud+hoQfAg74qg7ePU7eeC3FJrRVPqTGgNSWNAK1HH4Qo326n&#xA;FUwxV2Koeawt5rmO4evOOlADseJJWvy5Hp9OKojFXYq7FUi8+/8AKDeYv+2Ze/8AUO+Kp7irHL3z&#xA;Fomt+WvMZ0q7S8XT0u7G8eKpVLiODm8fKlGKiRa8aiu3UHFUx8sf8o3pP/MHb/8AJpcVTLFXYq7F&#xA;XYq7FXYq0yq6lWAZWFGU7gg9jiqGg1BJr2W1CMDECSx9iB8Q/ZrX4a/a3PTFUVyFQtRyIqB3oP8A&#xA;bxV2KtcV5cqDlSnLvTwxVvFXYq7FXYq7FVCWyt5bhZ3BLqAOux4nkvId+LbjFVfFXYq7FXYqshnh&#xA;nUvC4kUEglTXcYqoQWk0d5LO1wzxyCixntU1Fe3w9BxA96nfFUVirsVdirsVdiqReff+UG8xf9sy&#xA;9/6h3xVM9T0231Kyks7h50hk48mtrie0lHFgw4zW7xSruN+LbjY7Yqk2paHaaZonmq5t2kaTVxcX&#xA;1yHIIEn1KO2olAKLwt1613riqK8nWFjZ+WtNFpbxW4ltYHlESKnJzEtWbiBU++KpzirsVdirsVdi&#xA;rsVdirsVQ09hBJdR3bsweIbAGg2qQfEdT0IqNjUYq3ZX9veIzwkkKRWvgwDKfpUg+PjiqIxV2Kux&#xA;V2KuxV2KuxV2KuxVpHR1DowZG3Vgagj2IxVtlDAqwBUihB6EYqo2tnb2sZjgXghPIgksa0A6sSeg&#xA;AxVWxV2KuxV2KuxV2Ksb/MawsbryRrzXVvFO0GnXjwmVFco4t3+JeQND7jFWSYqlvmf/AJRvVv8A&#xA;mDuP+TTYq7yx/wAo3pP/ADB2/wDyaXFUyxV2KuxV2KuxV2KuxV2KuxVbHFHGvGNAikkkKABUmpO3&#xA;jiq7FXYq7FXYq7FXYq7FXYqsnhSaGSGSvCRSj0JBowoaEdMVWWtqltF6aEtuWZmpUk9TsAPuGKq2&#xA;KuxV2KuxV2KuxV2KuxVIvPv/ACg3mL/tmXv/AFDviqG0/wA9WOpeabXSNNRL3TbzTrjULbXLe4hm&#xA;tpTa3ENvJDGImckq0/xMaUOwrvRVKNJ87yeafKvmN5rIafLa203G1ZrgzGGSKT0pXWe2tQBIEJUx&#xA;mRT/ADbYVZJ5OvYbry1ppiWVfTtYEb1YpYakRL9n1VTkPcbYFTnFXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxv8AMa9htvJGvLIsrGbTrxE9KKWUAm3f&#xA;7RjVuA92oMVTq80nS74ub2zgujJDJav60aScrebiZYTyBrHJwXkvQ0FcVSnU9C0TSfLOuDStPttP&#xA;FzbXM1yLWGOH1JDE1Xf0wvJvc4qjvLH/ACjek/8AMHb/APJpcVTLFXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkXn3/lBvMX/AGzL3/qHfFU9xVLfM/8A&#xA;yjerf8wdx/yabFXeWP8AlG9J/wCYO3/5NLiqZYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi8+/8oN5i/wC2Ze/9Q74qmep3lxZ2Ulxb2M+pTJx42ds0&#xA;CyvVgDxNxJBF8INTycbdN9sVYJ5IvPN3mDSfM1vq812RKHt9OXU7B9OdS6SIzqvoxr6LniUUPK6r&#xA;9t6mgVT3SP8AHtlplpZPpOlMbWGOHmup3FG9NAvKh0/atMVRf1zzz/1aNM/7idx/2QYqp3Fz59kg&#xA;kjj0vTI5HVlSQalcHiSKBv8AeDtirre58+xwRxyaXpkkiKqvIdSuByIFC3+8HfFVT6555/6tGmf9&#xA;xO4/7IMVd9c88/8AVo0z/uJ3H/ZBirvrnnn/AKtGmf8AcTuP+yDFXfXPPP8A1aNM/wC4ncf9kGKq&#xA;dxc+fZIJI49L0yOR1ZUkGpXB4kigb/eDtirre58+xwRxyaXpkkiKqvIdSuByIFC3+8HfFVT6555/&#xA;6tGmf9xO4/7IMVd9c88/9WjTP+4ncf8AZBirvrnnn/q0aZ/3E7j/ALIMVd9c88/9WjTP+4ncf9kG&#xA;Kqdxc+fZIJI49L0yOR1ZUkGpXB4kigb/AHg7Yq63ufPscEccml6ZJIiqryHUrgciBQt/vB3xVU+u&#xA;eef+rRpn/cTuP+yDFXfXPPP/AFaNM/7idx/2QYq76555/wCrRpn/AHE7j/sgxV31zzz/ANWjTP8A&#xA;uJ3H/ZBiqhfzfmBPY3EFvp2mW88sTpFONSuCY3ZSFcD6gPsnfFVf6555/wCrRpn/AHE7j/sgxV31&#xA;zzz/ANWjTP8AuJ3H/ZBirvrnnn/q0aZ/3E7j/sgxV31zzz/1aNM/7idx/wBkGKu+ueef+rRpn/cT&#xA;uP8AsgxVQv5vzAnsbiC307TLeeWJ0inGpXBMbspCuB9QH2Tviqv9c88/9WjTP+4ncf8AZBirvrnn&#xA;n/q0aZ/3E7j/ALIMVS7zFB5+1XQdR0uPS9KjOoWs9r6ranckJ60bR8qCw3pyrSuKsuxV2KuxV2Ks&#xA;C/Myx/MPUdPe28vwmJYpmNtNY3zQXUhexuEjeYMLZI44L54HZFlk9RFNV/YZVZa2vnK4/NAX81pq&#xA;lnoEMbx+rJd2z2czLG0YAs47k+lGWAlVzE8rMaMUUccVegYq7FXYq7FXnf5laf8AmJqM3p6Lbyix&#xA;iguUsZdN1E21wb6WAC1ubtH+qKLe3lDco1ll51BKbccVT2Cz8yS+erXVHe6i0T9G3lrcWEskAgW6&#xA;S6g+rzLFEzsTNEkrBmZuK0B4MSuKsnxV2KuxV2KoHXotTm0PUYdKlWHVJLaZLCZ/spcNGREx9g9D&#xA;iqSfl1ZeYbTRZ01pLqFnuWextr+5F5dRW/pxjjNcLJOHJmEjr8ZorAbUpirKcVdirsVdirCPzM0z&#xA;zpe/o7/DbXHwCcP9WuFtvTum9P6rcXFZIvWt4qSepEOXKo+E0xVM9It/MTebr/Urv6zFo15pth9V&#xA;sbiSAi2u1kuPrMQSBnHLiYiz8mqTQOVAAVZJirsVdirsVYR+ZmmedL39Hf4ba4+ATh/q1wtt6d03&#xA;p/Vbi4rJF61vFST1Ihy5VHwmmKtaHa+apfzFvtTvLbU7HRJbJfRhubq3ntmmkS3JQQQ3DiBoDG4+&#xA;GJubM5MvHguKs4xV2Kv/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:A410BAE64BD1DF11B96BBDB365EB4FA0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:A510BAE64BD1DF11B96BBDB365EB4FA0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -193.627 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 193.627 li
258.966 193.627 li
258.966 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
258.716 182.724 mo
255.565 182.724 li
16.2656 182.724 mo
19.4155 182.724 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 50 /two putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437917 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A75CA669> |-/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/MIJMQN+Helvetica /Helvetica findfont ct_VMDictPut/MIJMQN+Helvetica*1 [45{/.notdef}rp /hyphen 4{/.notdef}rp /two 205{/.notdef}rp]MIJMQN+Helvetica nfMIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf5.83594 185.06 mo(-2)[2.33105 0 ]xsh258.716 160.324 mo
255.565 160.324 li
16.2656 160.324 mo
19.4155 160.324 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369E6> |-/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQN+Helvetica /Encoding getdup 46 /period putdup 49 /one putdup 53 /five putpop%ADOEndSubsetFont
/MIJMQN+Helvetica*1 [45{/.notdef}rp /hyphen /period 2{/.notdef}rp /one /two 2{/.notdef}rp /five 202{/.notdef}rp]MIJMQN+Helvetica nfMIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf0 162.662 mo(-1.5)[2.33105 3.89209 1.9458 0 ]xsh258.716 137.974 mo
255.565 137.974 li
16.2656 137.974 mo
19.4155 137.974 li
@
MIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf5.83594 140.31 mo(-1)[2.33105 0 ]xsh258.716 115.574 mo
255.565 115.574 li
16.2656 115.574 mo
19.4155 115.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQN+Helvetica /Encoding getdup 48 /zero putpop%ADOEndSubsetFont
/MIJMQN+Helvetica*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]MIJMQN+Helvetica nfMIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf0 117.912 mo(-0.5)[2.33105 3.89209 1.9458 0 ]xsh258.716 93.1738 mo
255.565 93.1738 li
16.2656 93.1738 mo
19.4155 93.1738 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQN+Helvetica /Encoding getdup 32 /space putpop%ADOEndSubsetFont
/MIJMQN+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]MIJMQN+Helvetica nfMIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf6.21875 95.5054 mo( )sh8.17188 95.5054 mo(0)sh258.716 70.8237 mo
255.565 70.8237 li
16.2656 70.8237 mo
19.4155 70.8237 li
@
MIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf0.390625 73.1616 mo( 0.5)[1.9458 3.89209 1.94629 0 ]xsh258.716 48.4238 mo
255.565 48.4238 li
16.2656 48.4238 mo
19.4155 48.4238 li
@
MIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf6.21875 50.7554 mo( )sh8.17188 50.7554 mo(1)sh258.716 26.0737 mo
255.565 26.0737 li
16.2656 26.0737 mo
19.4155 26.0737 li
@
MIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf0.390625 28.4116 mo( 1.5)[1.9458 3.89209 1.94629 0 ]xsh258.716 3.67383 mo
255.565 3.67383 li
16.2656 3.67383 mo
19.4155 3.67383 li
@
MIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf6.21875 6.01318 mo( )sh8.17188 6.01318 mo(2)sh40.5156 3.67383 mo
40.5156 6.82373 li
40.5156 182.724 mo
40.5156 179.574 li
@
MIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf34.4844 192.052 mo(-0.2)[2.33105 3.89209 1.9458 0 ]xsh89.0156 3.67383 mo
89.0156 6.82373 li
89.0156 182.724 mo
89.0156 179.574 li
@
MIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf82.9766 192.052 mo(-0.1)[2.33105 3.89209 1.9458 0 ]xsh137.466 3.67383 mo
137.466 6.82373 li
137.466 182.724 mo
137.466 179.574 li
@
MIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf134.539 192.052 mo( )sh136.492 192.052 mo(0)sh185.966 3.67383 mo
185.966 6.82373 li
185.966 182.724 mo
185.966 179.574 li
@
MIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf180.125 192.052 mo( 0.1)[1.94629 3.8916 1.94629 0 ]xsh234.466 3.67383 mo
234.466 6.82373 li
234.466 182.724 mo
234.466 179.574 li
@
MIJMQN+Helvetica*1 [7 0 0 -7 0 0 ]msf228.625 192.052 mo( 0.2)[1.94629 3.8916 1.94629 0 ]xsh16.2656 3.67383 mo
16.2656 182.724 li
258.716 182.724 li
258.716 3.67383 li
16.2656 3.67383 li
16.2656 3.67383 li
cp
@
0.25 lw
100.261 144.724 mo
100.261 143.855 99.5552 143.148 98.6855 143.148 cv
97.8164 143.148 97.1108 143.855 97.1108 144.724 cv
97.1108 145.593 97.8164 146.298 98.6855 146.298 cv
99.5552 146.298 100.261 145.593 100.261 144.724 cv
@
1 lc
98.7158 144.673 mo
98.7158 144.673 li
@
0 lc
180.301 146.884 mo
180.301 146.015 179.595 145.308 178.726 145.308 cv
177.856 145.308 177.15 146.015 177.15 146.884 cv
177.15 147.753 177.856 148.458 178.726 148.458 cv
179.595 148.458 180.301 147.753 180.301 146.884 cv
@
1 lc
178.716 146.923 mo
178.716 146.923 li
@
0 lc
85.7407 135.724 mo
85.7407 134.855 85.0352 134.148 84.1655 134.148 cv
83.2964 134.148 82.5908 134.855 82.5908 135.724 cv
82.5908 136.593 83.2964 137.298 84.1655 137.298 cv
85.0352 137.298 85.7407 136.593 85.7407 135.724 cv
@
1 lc
84.1655 135.724 mo
84.1655 135.724 li
@
0 lc
197.221 138.003 mo
197.221 137.134 196.515 136.429 195.646 136.429 cv
194.776 136.429 194.07 137.134 194.07 138.003 cv
194.07 138.873 194.776 139.58 195.646 139.58 cv
196.515 139.58 197.221 138.873 197.221 138.003 cv
@
1 lc
195.666 137.974 mo
195.666 137.974 li
@
0 lc
95.4604 138.964 mo
95.4604 138.093 94.7549 137.388 93.8857 137.388 cv
93.0161 137.388 92.3105 138.093 92.3105 138.964 cv
92.3105 139.833 93.0161 140.539 93.8857 140.539 cv
94.7549 140.539 95.4604 139.833 95.4604 138.964 cv
@
1 lc
93.8657 138.875 mo
93.8657 138.875 li
@
0 lc
189.301 52.8037 mo
189.301 51.9341 188.595 51.2285 187.726 51.2285 cv
186.856 51.2285 186.15 51.9341 186.15 52.8037 cv
186.15 53.6729 186.856 54.3784 187.726 54.3784 cv
188.595 54.3784 189.301 53.6729 189.301 52.8037 cv
@
1 lc
187.815 52.8237 mo
187.815 52.8237 li
@
0 lc
160.261 123.603 mo
160.261 122.734 159.555 122.029 158.686 122.029 cv
157.816 122.029 157.11 122.734 157.11 123.603 cv
157.11 124.472 157.816 125.179 158.686 125.179 cv
159.555 125.179 160.261 124.472 160.261 123.603 cv
@
1 lc
158.615 123.523 mo
158.615 123.523 li
@
0 lc
175.141 114.964 mo
175.141 114.093 174.435 113.388 173.565 113.388 cv
172.696 113.388 171.99 114.093 171.99 114.964 cv
171.99 115.833 172.696 116.539 173.565 116.539 cv
174.435 116.539 175.141 115.833 175.141 114.964 cv
@
1 lc
173.565 114.923 mo
173.565 114.923 li
@
0 lc
160.98 117.724 mo
160.98 116.855 160.275 116.148 159.405 116.148 cv
158.536 116.148 157.831 116.855 157.831 117.724 cv
157.831 118.593 158.536 119.298 159.405 119.298 cv
160.275 119.298 160.98 118.593 160.98 117.724 cv
@
1 lc
159.315 117.724 mo
159.315 117.724 li
@
0 lc
225.78 105.125 mo
225.78 104.253 225.075 103.548 224.206 103.548 cv
223.336 103.548 222.631 104.253 222.631 105.125 cv
222.631 105.994 223.336 106.699 224.206 106.699 cv
225.075 106.699 225.78 105.994 225.78 105.125 cv
@
1 lc
224.266 105.023 mo
224.266 105.023 li
@
0 lc
179.7 112.564 mo
179.7 111.695 178.995 110.988 178.126 110.988 cv
177.256 110.988 176.551 111.695 176.551 112.564 cv
176.551 113.433 177.256 114.138 178.126 114.138 cv
178.995 114.138 179.7 113.433 179.7 112.564 cv
@
1 lc
178.115 112.574 mo
178.115 112.574 li
@
0 lc
154.021 126.244 mo
154.021 125.375 153.315 124.669 152.445 124.669 cv
151.576 124.669 150.871 125.375 150.871 126.244 cv
150.871 127.113 151.576 127.818 152.445 127.818 cv
153.315 127.818 154.021 127.113 154.021 126.244 cv
@
1 lc
152.516 126.324 mo
152.516 126.324 li
@
0 lc
198.421 73.4434 mo
198.421 72.5742 197.715 71.8687 196.846 71.8687 cv
195.977 71.8687 195.271 72.5742 195.271 73.4434 cv
195.271 74.313 195.977 75.0186 196.846 75.0186 cv
197.715 75.0186 198.421 74.313 198.421 73.4434 cv
@
1 lc
196.815 73.5234 mo
196.815 73.5234 li
@
0 lc
146.341 74.5234 mo
146.341 73.6543 145.635 72.9487 144.766 72.9487 cv
143.896 72.9487 143.19 73.6543 143.19 74.5234 cv
143.19 75.3931 143.896 76.0986 144.766 76.0986 cv
145.635 76.0986 146.341 75.3931 146.341 74.5234 cv
@
1 lc
144.666 74.5234 mo
144.666 74.5234 li
@
0 lc
215.7 95.5234 mo
215.7 94.6543 214.995 93.9487 214.126 93.9487 cv
213.256 93.9487 212.551 94.6543 212.551 95.5234 cv
212.551 96.3931 213.256 97.0986 214.126 97.0986 cv
214.995 97.0986 215.7 96.3931 215.7 95.5234 cv
@
1 lc
214.166 95.6235 mo
214.166 95.6235 li
@
0 lc
177.061 117.603 mo
177.061 116.734 176.355 116.029 175.485 116.029 cv
174.616 116.029 173.91 116.734 173.91 117.603 cv
173.91 118.472 174.616 119.179 175.485 119.179 cv
176.355 119.179 177.061 118.472 177.061 117.603 cv
@
1 lc
175.466 117.574 mo
175.466 117.574 li
@
0 lc
215.101 85.9238 mo
215.101 85.0542 214.395 84.3486 213.525 84.3486 cv
212.656 84.3486 211.95 85.0542 211.95 85.9238 cv
211.95 86.793 212.656 87.4985 213.525 87.4985 cv
214.395 87.4985 215.101 86.793 215.101 85.9238 cv
@
1 lc
213.516 85.9238 mo
213.516 85.9238 li
@
0 lc
134.581 60.7236 mo
134.581 59.854 133.875 59.1484 133.006 59.1484 cv
132.137 59.1484 131.431 59.854 131.431 60.7236 cv
131.431 61.5928 132.137 62.2988 133.006 62.2988 cv
133.875 62.2988 134.581 61.5928 134.581 60.7236 cv
@
1 lc
133.016 60.7236 mo
133.016 60.7236 li
@
0 lc
179.221 83.2837 mo
179.221 82.4141 178.515 81.7085 177.646 81.7085 cv
176.776 81.7085 176.07 82.4141 176.07 83.2837 cv
176.07 84.1528 176.776 84.8584 177.646 84.8584 cv
178.515 84.8584 179.221 84.1528 179.221 83.2837 cv
@
1 lc
177.716 83.2734 mo
177.716 83.2734 li
@
0 lc
189.78 90.9639 mo
189.78 90.0942 189.075 89.3887 188.206 89.3887 cv
187.336 89.3887 186.631 90.0942 186.631 90.9639 cv
186.631 91.833 187.336 92.5386 188.206 92.5386 cv
189.075 92.5386 189.78 91.833 189.78 90.9639 cv
@
1 lc
188.166 91.0234 mo
188.166 91.0234 li
@
0 lc
191.221 83.0435 mo
191.221 82.1743 190.515 81.4688 189.646 81.4688 cv
188.776 81.4688 188.07 82.1743 188.07 83.0435 cv
188.07 83.9131 188.776 84.6187 189.646 84.6187 cv
190.515 84.6187 191.221 83.9131 191.221 83.0435 cv
@
1 lc
189.565 83.0234 mo
189.565 83.0234 li
@
0 lc
193.381 100.324 mo
193.381 99.4546 192.675 98.7495 191.806 98.7495 cv
190.937 98.7495 190.23 99.4546 190.23 100.324 cv
190.23 101.193 190.937 101.898 191.806 101.898 cv
192.675 101.898 193.381 101.193 193.381 100.324 cv
@
1 lc
191.716 100.375 mo
191.716 100.375 li
@
0 lc
154.74 103.923 mo
154.74 103.054 154.035 102.349 153.166 102.349 cv
152.296 102.349 151.591 103.054 151.591 103.923 cv
151.591 104.792 152.296 105.5 153.166 105.5 cv
154.035 105.5 154.74 104.792 154.74 103.923 cv
@
1 lc
153.065 103.824 mo
153.065 103.824 li
@
0 lc
179.461 73.9238 mo
179.461 73.0542 178.755 72.3486 177.886 72.3486 cv
177.017 72.3486 176.311 73.0542 176.311 73.9238 cv
176.311 74.793 177.017 75.4985 177.886 75.4985 cv
178.755 75.4985 179.461 74.793 179.461 73.9238 cv
@
1 lc
177.815 74.0234 mo
177.815 74.0234 li
@
0 lc
190.501 106.083 mo
190.501 105.214 189.795 104.509 188.926 104.509 cv
188.057 104.509 187.351 105.214 187.351 106.083 cv
187.351 106.953 188.057 107.658 188.926 107.658 cv
189.795 107.658 190.501 106.953 190.501 106.083 cv
@
1 lc
188.966 106.023 mo
188.966 106.023 li
@
0 lc
198.66 78.7236 mo
198.66 77.854 197.955 77.1484 197.086 77.1484 cv
196.216 77.1484 195.511 77.854 195.511 78.7236 cv
195.511 79.5928 196.216 80.2988 197.086 80.2988 cv
197.955 80.2988 198.66 79.5928 198.66 78.7236 cv
@
1 lc
197.065 78.7734 mo
197.065 78.7734 li
@
0 lc
227.461 82.5635 mo
227.461 81.6943 226.755 80.9888 225.886 80.9888 cv
225.017 80.9888 224.311 81.6943 224.311 82.5635 cv
224.311 83.4331 225.017 84.1387 225.886 84.1387 cv
226.755 84.1387 227.461 83.4331 227.461 82.5635 cv
@
1 lc
225.916 82.6235 mo
225.916 82.6235 li
@
0 lc
182.101 90.7236 mo
182.101 89.854 181.395 89.1484 180.525 89.1484 cv
179.656 89.1484 178.95 89.854 178.95 90.7236 cv
178.95 91.5928 179.656 92.2988 180.525 92.2988 cv
181.395 92.2988 182.101 91.5928 182.101 90.7236 cv
@
1 lc
180.466 90.7734 mo
180.466 90.7734 li
@
0 lc
153.78 80.2837 mo
153.78 79.4141 153.075 78.7085 152.206 78.7085 cv
151.336 78.7085 150.631 79.4141 150.631 80.2837 cv
150.631 81.1528 151.336 81.8584 152.206 81.8584 cv
153.075 81.8584 153.78 81.1528 153.78 80.2837 cv
@
1 lc
152.166 80.2734 mo
152.166 80.2734 li
@
0 lc
181.86 81.1235 mo
181.86 80.2544 181.155 79.5488 180.285 79.5488 cv
179.416 79.5488 178.711 80.2544 178.711 81.1235 cv
178.711 81.9932 179.416 82.6987 180.285 82.6987 cv
181.155 82.6987 181.86 81.9932 181.86 81.1235 cv
@
1 lc
180.216 81.2236 mo
180.216 81.2236 li
@
0 lc
182.82 115.205 mo
182.82 114.333 182.115 113.628 181.246 113.628 cv
180.376 113.628 179.671 114.333 179.671 115.205 cv
179.671 116.074 180.376 116.779 181.246 116.779 cv
182.115 116.779 182.82 116.074 182.82 115.205 cv
@
1 lc
181.166 115.125 mo
181.166 115.125 li
@
0 lc
160.74 92.4038 mo
160.74 91.5342 160.035 90.8286 159.166 90.8286 cv
158.296 90.8286 157.591 91.5342 157.591 92.4038 cv
157.591 93.2729 158.296 93.9785 159.166 93.9785 cv
160.035 93.9785 160.74 93.2729 160.74 92.4038 cv
@
1 lc
159.266 92.3735 mo
159.266 92.3735 li
@
0 lc
194.101 118.083 mo
194.101 117.214 193.395 116.509 192.525 116.509 cv
191.656 116.509 190.95 117.214 190.95 118.083 cv
190.95 118.953 191.656 119.658 192.525 119.658 cv
193.395 119.658 194.101 118.953 194.101 118.083 cv
@
1 lc
192.516 118.023 mo
192.516 118.023 li
@
0 lc
204.66 89.2837 mo
204.66 88.4141 203.955 87.7085 203.086 87.7085 cv
202.216 87.7085 201.511 88.4141 201.511 89.2837 cv
201.511 90.1528 202.216 90.8584 203.086 90.8584 cv
203.955 90.8584 204.66 90.1528 204.66 89.2837 cv
@
1 lc
203.065 89.2734 mo
203.065 89.2734 li
@
0 lc
196.021 123.843 mo
196.021 122.974 195.315 122.269 194.445 122.269 cv
193.576 122.269 192.871 122.974 192.871 123.843 cv
192.871 124.712 193.576 125.419 194.445 125.419 cv
195.315 125.419 196.021 124.712 196.021 123.843 cv
@
1 lc
194.416 123.923 mo
194.416 123.923 li
@
0 lc
131.461 100.804 mo
131.461 99.9351 130.755 99.228 129.886 99.228 cv
129.016 99.228 128.311 99.9351 128.311 100.804 cv
128.311 101.673 129.016 102.378 129.886 102.378 cv
130.755 102.378 131.461 101.673 131.461 100.804 cv
@
1 lc
129.815 100.824 mo
129.815 100.824 li
@
0 lc
194.581 96.0034 mo
194.581 95.1343 193.875 94.4287 193.006 94.4287 cv
192.137 94.4287 191.431 95.1343 191.431 96.0034 cv
191.431 96.873 192.137 97.5791 193.006 97.5791 cv
193.875 97.5791 194.581 96.873 194.581 96.0034 cv
@
1 lc
192.966 95.9238 mo
192.966 95.9238 li
@
0 lc
205.98 81.4834 mo
205.98 80.6143 205.275 79.9087 204.405 79.9087 cv
203.536 79.9087 202.831 80.6143 202.831 81.4834 cv
202.831 82.353 203.536 83.0586 204.405 83.0586 cv
205.275 83.0586 205.98 82.353 205.98 81.4834 cv
@
1 lc
204.416 81.4736 mo
204.416 81.4736 li
@
0 lc
201.061 73.2036 mo
201.061 72.334 200.355 71.6284 199.485 71.6284 cv
198.616 71.6284 197.91 72.334 197.91 73.2036 cv
197.91 74.0732 198.616 74.7788 199.485 74.7788 cv
200.355 74.7788 201.061 74.0732 201.061 73.2036 cv
@
1 lc
199.416 73.2236 mo
199.416 73.2236 li
@
0 lc
177.9 94.3237 mo
177.9 93.4541 177.195 92.7485 176.325 92.7485 cv
175.456 92.7485 174.751 93.4541 174.751 94.3237 cv
174.751 95.1929 175.456 95.8984 176.325 95.8984 cv
177.195 95.8984 177.9 95.1929 177.9 94.3237 cv
@
1 lc
176.315 94.3735 mo
176.315 94.3735 li
@
0 lc
240.301 84.0034 mo
240.301 83.1343 239.595 82.4287 238.726 82.4287 cv
237.856 82.4287 237.15 83.1343 237.15 84.0034 cv
237.15 84.873 237.856 85.5786 238.726 85.5786 cv
239.595 85.5786 240.301 84.873 240.301 84.0034 cv
@
1 lc
238.716 83.9238 mo
238.716 83.9238 li
@
0 lc
184.501 101.763 mo
184.501 100.894 183.795 100.189 182.926 100.189 cv
182.057 100.189 181.351 100.894 181.351 101.763 cv
181.351 102.632 182.057 103.339 182.926 103.339 cv
183.795 103.339 184.501 102.632 184.501 101.763 cv
@
1 lc
182.916 101.824 mo
182.916 101.824 li
@
0 lc
171.301 124.083 mo
171.301 123.214 170.595 122.509 169.726 122.509 cv
168.856 122.509 168.15 123.214 168.15 124.083 cv
168.15 124.953 168.856 125.658 169.726 125.658 cv
170.595 125.658 171.301 124.953 171.301 124.083 cv
@
1 lc
169.815 124.023 mo
169.815 124.023 li
@
0 lc
233.94 69.3638 mo
233.94 68.4941 233.235 67.7886 232.365 67.7886 cv
231.496 67.7886 230.791 68.4941 230.791 69.3638 cv
230.791 70.2329 231.496 70.9385 232.365 70.9385 cv
233.235 70.9385 233.94 70.2329 233.94 69.3638 cv
@
1 lc
232.315 69.4238 mo
232.315 69.4238 li
@
0 lc
156.541 90.2437 mo
156.541 89.374 155.835 88.6685 154.966 88.6685 cv
154.097 88.6685 153.391 89.374 153.391 90.2437 cv
153.391 91.1128 154.097 91.8184 154.966 91.8184 cv
155.835 91.8184 156.541 91.1128 156.541 90.2437 cv
@
1 lc
154.966 90.3237 mo
154.966 90.3237 li
@
0 lc
225.061 122.404 mo
225.061 121.535 224.355 120.83 223.485 120.83 cv
222.616 120.83 221.91 121.535 221.91 122.404 cv
221.91 123.273 222.616 123.978 223.485 123.978 cv
224.355 123.978 225.061 123.273 225.061 122.404 cv
@
1 lc
223.565 122.324 mo
223.565 122.324 li
@
0 lc
179.221 74.5234 mo
179.221 73.6543 178.515 72.9487 177.646 72.9487 cv
176.776 72.9487 176.07 73.6543 176.07 74.5234 cv
176.07 75.3931 176.776 76.0986 177.646 76.0986 cv
178.515 76.0986 179.221 75.3931 179.221 74.5234 cv
@
1 lc
177.716 74.5234 mo
177.716 74.5234 li
@
0 lc
157.141 89.0435 mo
157.141 88.1743 156.435 87.4688 155.565 87.4688 cv
154.696 87.4688 153.99 88.1743 153.99 89.0435 cv
153.99 89.9131 154.696 90.6187 155.565 90.6187 cv
156.435 90.6187 157.141 89.9131 157.141 89.0435 cv
@
1 lc
155.615 89.0234 mo
155.615 89.0234 li
@
0 lc
202.501 78.2437 mo
202.501 77.374 201.795 76.6685 200.926 76.6685 cv
200.057 76.6685 199.351 77.374 199.351 78.2437 cv
199.351 79.1128 200.057 79.8184 200.926 79.8184 cv
201.795 79.8184 202.501 79.1128 202.501 78.2437 cv
@
1 lc
200.966 78.2734 mo
200.966 78.2734 li
@
0 lc
176.581 85.2036 mo
176.581 84.334 175.875 83.6284 175.006 83.6284 cv
174.137 83.6284 173.431 84.334 173.431 85.2036 cv
173.431 86.0732 174.137 86.7788 175.006 86.7788 cv
175.875 86.7788 176.581 86.0732 176.581 85.2036 cv
@
1 lc
174.916 85.1235 mo
174.916 85.1235 li
@
0 lc
233.221 79.9238 mo
233.221 79.0542 232.515 78.3486 231.646 78.3486 cv
230.776 78.3486 230.07 79.0542 230.07 79.9238 cv
230.07 80.793 230.776 81.4985 231.646 81.4985 cv
232.515 81.4985 233.221 80.793 233.221 79.9238 cv
@
1 lc
231.666 80.0234 mo
231.666 80.0234 li
@
0 lc
160.74 78.0034 mo
160.74 77.1343 160.035 76.4287 159.166 76.4287 cv
158.296 76.4287 157.591 77.1343 157.591 78.0034 cv
157.591 78.873 158.296 79.5786 159.166 79.5786 cv
160.035 79.5786 160.74 78.873 160.74 78.0034 cv
@
1 lc
159.115 78.0234 mo
159.115 78.0234 li
@
0 lc
175.86 126.003 mo
175.86 125.134 175.155 124.429 174.285 124.429 cv
173.416 124.429 172.711 125.134 172.711 126.003 cv
172.711 126.873 173.416 127.58 174.285 127.58 cv
175.155 127.58 175.86 126.873 175.86 126.003 cv
@
1 lc
174.266 126.074 mo
174.266 126.074 li
@
0 lc
198.181 78.2437 mo
198.181 77.374 197.475 76.6685 196.605 76.6685 cv
195.736 76.6685 195.03 77.374 195.03 78.2437 cv
195.03 79.1128 195.736 79.8184 196.605 79.8184 cv
197.475 79.8184 198.181 79.1128 198.181 78.2437 cv
@
1 lc
196.565 78.2236 mo
196.565 78.2236 li
@
0 lc
169.501 76.8037 mo
169.501 75.9341 168.795 75.2285 167.926 75.2285 cv
167.057 75.2285 166.351 75.9341 166.351 76.8037 cv
166.351 77.6729 167.057 78.3784 167.926 78.3784 cv
168.795 78.3784 169.501 77.6729 169.501 76.8037 cv
@
1 lc
167.916 76.7734 mo
167.916 76.7734 li
@
0 lc
178.261 114.363 mo
178.261 113.494 177.555 112.789 176.686 112.789 cv
175.816 112.789 175.11 113.494 175.11 114.363 cv
175.11 115.234 175.816 115.939 176.686 115.939 cv
177.555 115.939 178.261 115.234 178.261 114.363 cv
@
1 lc
176.716 114.375 mo
176.716 114.375 li
@
0 lc
181.621 113.283 mo
181.621 112.414 180.915 111.708 180.046 111.708 cv
179.176 111.708 178.471 112.414 178.471 113.283 cv
178.471 114.154 179.176 114.859 180.046 114.859 cv
180.915 114.859 181.621 114.154 181.621 113.283 cv
@
1 lc
180.016 113.324 mo
180.016 113.324 li
@
0 lc
160.261 68.4038 mo
160.261 67.5342 159.555 66.8286 158.686 66.8286 cv
157.816 66.8286 157.11 67.5342 157.11 68.4038 cv
157.11 69.2729 157.816 69.9785 158.686 69.9785 cv
159.555 69.9785 160.261 69.2729 160.261 68.4038 cv
@
1 lc
158.615 68.3237 mo
158.615 68.3237 li
@
0 lc
220.261 115.923 mo
220.261 115.054 219.555 114.349 218.686 114.349 cv
217.816 114.349 217.11 115.054 217.11 115.923 cv
217.11 116.792 217.816 117.5 218.686 117.5 cv
219.555 117.5 220.261 116.792 220.261 115.923 cv
@
1 lc
218.615 115.875 mo
218.615 115.875 li
@
0 lc
160.261 130.083 mo
160.261 129.214 159.555 128.509 158.686 128.509 cv
157.816 128.509 157.11 129.214 157.11 130.083 cv
157.11 130.953 157.816 131.658 158.686 131.658 cv
159.555 131.658 160.261 130.953 160.261 130.083 cv
@
1 lc
158.615 130.125 mo
158.615 130.125 li
@
0 lc
194.94 83.8838 mo
194.94 83.0142 194.235 82.3086 193.365 82.3086 cv
192.496 82.3086 191.791 83.0142 191.791 83.8838 cv
191.791 84.7529 192.496 85.4585 193.365 85.4585 cv
194.235 85.4585 194.94 84.7529 194.94 83.8838 cv
@
1 lc
193.365 83.8735 mo
193.365 83.8735 li
@
0 lc
205.621 105.843 mo
205.621 104.974 204.915 104.269 204.046 104.269 cv
203.176 104.269 202.471 104.974 202.471 105.843 cv
202.471 106.712 203.176 107.419 204.046 107.419 cv
204.915 107.419 205.621 106.712 205.621 105.843 cv
@
1 lc
204.065 105.824 mo
204.065 105.824 li
@
0 lc
175.621 119.283 mo
175.621 118.414 174.915 117.708 174.046 117.708 cv
173.176 117.708 172.471 118.414 172.471 119.283 cv
172.471 120.154 173.176 120.859 174.046 120.859 cv
174.915 120.859 175.621 120.154 175.621 119.283 cv
@
1 lc
173.966 119.273 mo
173.966 119.273 li
@
0 lc
182.101 88.8037 mo
182.101 87.9341 181.395 87.2285 180.525 87.2285 cv
179.656 87.2285 178.95 87.9341 178.95 88.8037 cv
178.95 89.6729 179.656 90.3784 180.525 90.3784 cv
181.395 90.3784 182.101 89.6729 182.101 88.8037 cv
@
1 lc
180.466 88.7734 mo
180.466 88.7734 li
@
0 lc
207.061 132.003 mo
207.061 131.134 206.355 130.429 205.485 130.429 cv
204.616 130.429 203.91 131.134 203.91 132.003 cv
203.91 132.873 204.616 133.58 205.485 133.58 cv
206.355 133.58 207.061 132.873 207.061 132.003 cv
@
1 lc
205.565 132.023 mo
205.565 132.023 li
@
0 lc
207.78 95.7637 mo
207.78 94.894 207.075 94.1885 206.206 94.1885 cv
205.336 94.1885 204.631 94.894 204.631 95.7637 cv
204.631 96.6328 205.336 97.3389 206.206 97.3389 cv
207.075 97.3389 207.78 96.6328 207.78 95.7637 cv
@
1 lc
206.166 95.8237 mo
206.166 95.8237 li
@
0 lc
206.101 93.6035 mo
206.101 92.7344 205.395 92.0288 204.525 92.0288 cv
203.656 92.0288 202.95 92.7344 202.95 93.6035 cv
202.95 94.4731 203.656 95.1787 204.525 95.1787 cv
205.395 95.1787 206.101 94.4731 206.101 93.6035 cv
@
1 lc
204.516 93.6738 mo
204.516 93.6738 li
@
0 lc
154.98 80.6436 mo
154.98 79.7744 154.275 79.0684 153.405 79.0684 cv
152.536 79.0684 151.831 79.7744 151.831 80.6436 cv
151.831 81.5132 152.536 82.2188 153.405 82.2188 cv
154.275 82.2188 154.98 81.5132 154.98 80.6436 cv
@
1 lc
153.315 80.5737 mo
153.315 80.5737 li
@
0 lc
198.181 78.7236 mo
198.181 77.854 197.475 77.1484 196.605 77.1484 cv
195.736 77.1484 195.03 77.854 195.03 78.7236 cv
195.03 79.5928 195.736 80.2988 196.605 80.2988 cv
197.475 80.2988 198.181 79.5928 198.181 78.7236 cv
@
1 lc
196.516 78.6235 mo
196.516 78.6235 li
@
0 lc
190.021 85.2036 mo
190.021 84.334 189.315 83.6284 188.445 83.6284 cv
187.576 83.6284 186.871 84.334 186.871 85.2036 cv
186.871 86.0732 187.576 86.7788 188.445 86.7788 cv
189.315 86.7788 190.021 86.0732 190.021 85.2036 cv
@
1 lc
188.416 85.1235 mo
188.416 85.1235 li
@
0 lc
167.461 92.5234 mo
167.461 91.6543 166.755 90.9487 165.886 90.9487 cv
165.017 90.9487 164.311 91.6543 164.311 92.5234 cv
164.311 93.3931 165.017 94.0986 165.886 94.0986 cv
166.755 94.0986 167.461 93.3931 167.461 92.5234 cv
@
1 lc
165.865 92.5234 mo
165.865 92.5234 li
@
0 lc
196.98 103.205 mo
196.98 102.333 196.275 101.628 195.405 101.628 cv
194.536 101.628 193.831 102.333 193.831 103.205 cv
193.831 104.074 194.536 104.779 195.405 104.779 cv
196.275 104.779 196.98 104.074 196.98 103.205 cv
@
1 lc
195.416 103.173 mo
195.416 103.173 li
@
0 lc
171.061 84.7236 mo
171.061 83.854 170.355 83.1484 169.485 83.1484 cv
168.616 83.1484 167.91 83.854 167.91 84.7236 cv
167.91 85.5928 168.616 86.2988 169.485 86.2988 cv
170.355 86.2988 171.061 85.5928 171.061 84.7236 cv
@
1 lc
169.466 84.6738 mo
169.466 84.6738 li
@
0 lc
188.101 61.4434 mo
188.101 60.5742 187.395 59.8687 186.525 59.8687 cv
185.656 59.8687 184.95 60.5742 184.95 61.4434 cv
184.95 62.313 185.656 63.0186 186.525 63.0186 cv
187.395 63.0186 188.101 62.313 188.101 61.4434 cv
@
1 lc
186.516 61.4736 mo
186.516 61.4736 li
@
0 lc
186.541 84.7236 mo
186.541 83.854 185.835 83.1484 184.966 83.1484 cv
184.097 83.1484 183.391 83.854 183.391 84.7236 cv
183.391 85.5928 184.097 86.2988 184.966 86.2988 cv
185.835 86.2988 186.541 85.5928 186.541 84.7236 cv
@
1 lc
184.966 84.6738 mo
184.966 84.6738 li
@
0 lc
181.86 97.4434 mo
181.86 96.5742 181.155 95.8687 180.285 95.8687 cv
179.416 95.8687 178.711 96.5742 178.711 97.4434 cv
178.711 98.314 179.416 99.019 180.285 99.019 cv
181.155 99.019 181.86 98.314 181.86 97.4434 cv
@
1 lc
180.216 97.5234 mo
180.216 97.5234 li
@
0 lc
159.78 111.843 mo
159.78 110.974 159.075 110.269 158.206 110.269 cv
157.336 110.269 156.631 110.974 156.631 111.843 cv
156.631 112.712 157.336 113.419 158.206 113.419 cv
159.075 113.419 159.78 112.712 159.78 111.843 cv
@
1 lc
158.266 111.824 mo
158.266 111.824 li
@
0 lc
199.141 116.884 mo
199.141 116.015 198.435 115.308 197.565 115.308 cv
196.696 115.308 195.99 116.015 195.99 116.884 cv
195.99 117.753 196.696 118.458 197.565 118.458 cv
198.435 118.458 199.141 117.753 199.141 116.884 cv
@
1 lc
197.615 116.824 mo
197.615 116.824 li
@
0 lc
185.341 69.1235 mo
185.341 68.2544 184.635 67.5488 183.766 67.5488 cv
182.896 67.5488 182.19 68.2544 182.19 69.1235 cv
182.19 69.9932 182.896 70.6987 183.766 70.6987 cv
184.635 70.6987 185.341 69.9932 185.341 69.1235 cv
@
1 lc
183.766 69.1235 mo
183.766 69.1235 li
@
0 lc
192.66 69.8438 mo
192.66 68.9741 191.955 68.2686 191.086 68.2686 cv
190.216 68.2686 189.511 68.9741 189.511 69.8438 cv
189.511 70.7129 190.216 71.4185 191.086 71.4185 cv
191.955 71.4185 192.66 70.7129 192.66 69.8438 cv
@
1 lc
191.016 69.7734 mo
191.016 69.7734 li
@
0 lc
200.101 51.3638 mo
200.101 50.4941 199.395 49.7886 198.525 49.7886 cv
197.656 49.7886 196.95 50.4941 196.95 51.3638 cv
196.95 52.2329 197.656 52.9385 198.525 52.9385 cv
199.395 52.9385 200.101 52.2329 200.101 51.3638 cv
@
1 lc
198.615 51.3735 mo
198.615 51.3735 li
@
0 lc
168.181 71.2837 mo
168.181 70.4141 167.475 69.7085 166.605 69.7085 cv
165.736 69.7085 165.03 70.4141 165.03 71.2837 cv
165.03 72.1528 165.736 72.8584 166.605 72.8584 cv
167.475 72.8584 168.181 72.1528 168.181 71.2837 cv
@
1 lc
166.615 71.3735 mo
166.615 71.3735 li
@
0 lc
191.94 98.5229 mo
191.94 97.6543 191.235 96.9487 190.365 96.9487 cv
189.496 96.9487 188.791 97.6543 188.791 98.5229 cv
188.791 99.3921 189.496 100.099 190.365 100.099 cv
191.235 100.099 191.94 99.3921 191.94 98.5229 cv
@
1 lc
190.315 98.5229 mo
190.315 98.5229 li
@
0 lc
196.261 81.3638 mo
196.261 80.4941 195.555 79.7886 194.686 79.7886 cv
193.816 79.7886 193.11 80.4941 193.11 81.3638 cv
193.11 82.2329 193.816 82.9385 194.686 82.9385 cv
195.555 82.9385 196.261 82.2329 196.261 81.3638 cv
@
1 lc
194.666 81.3237 mo
194.666 81.3237 li
@
0 lc
168.66 101.044 mo
168.66 100.173 167.955 99.4683 167.086 99.4683 cv
166.216 99.4683 165.511 100.173 165.511 101.044 cv
165.511 101.914 166.216 102.619 167.086 102.619 cv
167.955 102.619 168.66 101.914 168.66 101.044 cv
@
1 lc
167.065 101.023 mo
167.065 101.023 li
@
0 lc
236.341 83.0435 mo
236.341 82.1743 235.635 81.4688 234.766 81.4688 cv
233.896 81.4688 233.19 82.1743 233.19 83.0435 cv
233.19 83.9131 233.896 84.6187 234.766 84.6187 cv
235.635 84.6187 236.341 83.9131 236.341 83.0435 cv
@
1 lc
234.865 83.0737 mo
234.865 83.0737 li
@
0 lc
141.181 73.4434 mo
141.181 72.5742 140.475 71.8687 139.605 71.8687 cv
138.736 71.8687 138.03 72.5742 138.03 73.4434 cv
138.03 74.313 138.736 75.0186 139.605 75.0186 cv
140.475 75.0186 141.181 74.313 141.181 73.4434 cv
@
1 lc
139.615 73.3735 mo
139.615 73.3735 li
@
0 lc
199.86 97.4434 mo
199.86 96.5742 199.155 95.8687 198.285 95.8687 cv
197.416 95.8687 196.711 96.5742 196.711 97.4434 cv
196.711 98.314 197.416 99.019 198.285 99.019 cv
199.155 99.019 199.86 98.314 199.86 97.4434 cv
@
1 lc
198.266 97.5234 mo
198.266 97.5234 li
@
0 lc
195.541 101.763 mo
195.541 100.894 194.835 100.189 193.966 100.189 cv
193.097 100.189 192.391 100.894 192.391 101.763 cv
192.391 102.632 193.097 103.339 193.966 103.339 cv
194.835 103.339 195.541 102.632 195.541 101.763 cv
@
1 lc
193.916 101.724 mo
193.916 101.724 li
@
0 lc
196.021 62.1636 mo
196.021 61.2939 195.315 60.5889 194.445 60.5889 cv
193.576 60.5889 192.871 61.2939 192.871 62.1636 cv
192.871 63.0332 193.576 63.7388 194.445 63.7388 cv
195.315 63.7388 196.021 63.0332 196.021 62.1636 cv
@
1 lc
194.516 62.0737 mo
194.516 62.0737 li
@
0 lc
181.381 83.0435 mo
181.381 82.1743 180.675 81.4688 179.806 81.4688 cv
178.937 81.4688 178.23 82.1743 178.23 83.0435 cv
178.23 83.9131 178.937 84.6187 179.806 84.6187 cv
180.675 84.6187 181.381 83.9131 181.381 83.0435 cv
@
1 lc
179.716 83.0737 mo
179.716 83.0737 li
@
0 lc
208.74 115.923 mo
208.74 115.054 208.035 114.349 207.166 114.349 cv
206.296 114.349 205.591 115.054 205.591 115.923 cv
205.591 116.792 206.296 117.5 207.166 117.5 cv
208.035 117.5 208.74 116.792 208.74 115.923 cv
@
1 lc
207.065 115.875 mo
207.065 115.875 li
@
0 lc
202.74 84.7236 mo
202.74 83.854 202.035 83.1484 201.166 83.1484 cv
200.296 83.1484 199.591 83.854 199.591 84.7236 cv
199.591 85.5928 200.296 86.2988 201.166 86.2988 cv
202.035 86.2988 202.74 85.5928 202.74 84.7236 cv
@
1 lc
201.065 84.6738 mo
201.065 84.6738 li
@
0 lc
200.341 125.763 mo
200.341 124.894 199.635 124.189 198.766 124.189 cv
197.896 124.189 197.19 124.894 197.19 125.763 cv
197.19 126.632 197.896 127.339 198.766 127.339 cv
199.635 127.339 200.341 126.632 200.341 125.763 cv
@
1 lc
198.815 125.824 mo
198.815 125.824 li
@
0 lc
157.381 74.4038 mo
157.381 73.5342 156.675 72.8286 155.806 72.8286 cv
154.937 72.8286 154.23 73.5342 154.23 74.4038 cv
154.23 75.2729 154.937 75.9785 155.806 75.9785 cv
156.675 75.9785 157.381 75.2729 157.381 74.4038 cv
@
1 lc
155.716 74.3237 mo
155.716 74.3237 li
@
0 lc
153.301 105.964 mo
153.301 105.093 152.595 104.388 151.726 104.388 cv
150.856 104.388 150.15 105.093 150.15 105.964 cv
150.15 106.833 150.856 107.539 151.726 107.539 cv
152.595 107.539 153.301 106.833 153.301 105.964 cv
@
1 lc
151.766 105.974 mo
151.766 105.974 li
@
0 lc
207.301 53.5234 mo
207.301 52.6543 206.595 51.9487 205.726 51.9487 cv
204.856 51.9487 204.15 52.6543 204.15 53.5234 cv
204.15 54.3931 204.856 55.0986 205.726 55.0986 cv
206.595 55.0986 207.301 54.3931 207.301 53.5234 cv
@
1 lc
205.666 53.4238 mo
205.666 53.4238 li
@
0 lc
189.541 61.4434 mo
189.541 60.5742 188.835 59.8687 187.966 59.8687 cv
187.097 59.8687 186.391 60.5742 186.391 61.4434 cv
186.391 62.313 187.097 63.0186 187.966 63.0186 cv
188.835 63.0186 189.541 62.313 189.541 61.4434 cv
@
1 lc
187.966 61.4238 mo
187.966 61.4238 li
@
0 lc
165.9 79.4434 mo
165.9 78.5742 165.195 77.8687 164.325 77.8687 cv
163.456 77.8687 162.751 78.5742 162.751 79.4434 cv
162.751 80.313 163.456 81.0186 164.325 81.0186 cv
165.195 81.0186 165.9 80.313 165.9 79.4434 cv
@
1 lc
164.315 79.3735 mo
164.315 79.3735 li
@
0 lc
175.141 100.324 mo
175.141 99.4546 174.435 98.7495 173.565 98.7495 cv
172.696 98.7495 171.99 99.4546 171.99 100.324 cv
171.99 101.193 172.696 101.898 173.565 101.898 cv
174.435 101.898 175.141 101.193 175.141 100.324 cv
@
1 lc
173.565 100.375 mo
173.565 100.375 li
@
0 lc
193.381 109.443 mo
193.381 108.574 192.675 107.869 191.806 107.869 cv
190.937 107.869 190.23 108.574 190.23 109.443 cv
190.23 110.314 190.937 111.019 191.806 111.019 cv
192.675 111.019 193.381 110.314 193.381 109.443 cv
@
1 lc
191.865 109.523 mo
191.865 109.523 li
@
0 lc
184.501 78.3638 mo
184.501 77.4941 183.795 76.7886 182.926 76.7886 cv
182.057 76.7886 181.351 77.4941 181.351 78.3638 cv
181.351 79.2329 182.057 79.9385 182.926 79.9385 cv
183.795 79.9385 184.501 79.2329 184.501 78.3638 cv
@
1 lc
182.916 78.3735 mo
182.916 78.3735 li
@
0 lc
158.82 105.363 mo
158.82 104.494 158.115 103.789 157.246 103.789 cv
156.376 103.789 155.671 104.494 155.671 105.363 cv
155.671 106.234 156.376 106.939 157.246 106.939 cv
158.115 106.939 158.82 106.234 158.82 105.363 cv
@
1 lc
157.315 105.423 mo
157.315 105.423 li
@
0 lc
87.5405 83.2837 mo
87.5405 82.4141 86.835 81.7085 85.9658 81.7085 cv
85.0962 81.7085 84.3906 82.4141 84.3906 83.2837 cv
84.3906 84.1528 85.0962 84.8584 85.9658 84.8584 cv
86.835 84.8584 87.5405 84.1528 87.5405 83.2837 cv
@
1 lc
85.9155 83.2236 mo
85.9155 83.2236 li
@
0 lc
84.6606 103.683 mo
84.6606 102.814 83.9551 102.109 83.0854 102.109 cv
82.2163 102.109 81.5107 102.814 81.5107 103.683 cv
81.5107 104.552 82.2163 105.259 83.0854 105.259 cv
83.9551 105.259 84.6606 104.552 84.6606 103.683 cv
@
1 lc
83.0156 103.724 mo
83.0156 103.724 li
@
0 lc
102.181 101.523 mo
102.181 100.654 101.475 99.9487 100.605 99.9487 cv
99.7363 99.9487 99.0308 100.654 99.0308 101.523 cv
99.0308 102.392 99.7363 103.099 100.605 103.099 cv
101.475 103.099 102.181 102.392 102.181 101.523 cv
@
1 lc
100.516 101.423 mo
100.516 101.423 li
@
0 lc
90.9004 82.5635 mo
90.9004 81.6943 90.1948 80.9888 89.3257 80.9888 cv
88.4561 80.9888 87.7505 81.6943 87.7505 82.5635 cv
87.7505 83.4331 88.4561 84.1387 89.3257 84.1387 cv
90.1948 84.1387 90.9004 83.4331 90.9004 82.5635 cv
@
1 lc
89.2656 82.4736 mo
89.2656 82.4736 li
@
0 lc
61.6206 92.6436 mo
61.6206 91.7744 60.915 91.0684 60.0454 91.0684 cv
59.1763 91.0684 58.4707 91.7744 58.4707 92.6436 cv
58.4707 93.5132 59.1763 94.2188 60.0454 94.2188 cv
60.915 94.2188 61.6206 93.5132 61.6206 92.6436 cv
@
1 lc
60.1157 92.6235 mo
60.1157 92.6235 li
@
0 lc
74.1006 95.2837 mo
74.1006 94.4141 73.395 93.7085 72.5254 93.7085 cv
71.6563 93.7085 70.9507 94.4141 70.9507 95.2837 cv
70.9507 96.1528 71.6563 96.8584 72.5254 96.8584 cv
73.395 96.8584 74.1006 96.1528 74.1006 95.2837 cv
@
1 lc
72.4658 95.2236 mo
72.4658 95.2236 li
@
0 lc
92.8208 59.0435 mo
92.8208 58.1743 92.1152 57.4688 91.2456 57.4688 cv
90.376 57.4688 89.6704 58.1743 89.6704 59.0435 cv
89.6704 59.9131 90.376 60.6187 91.2456 60.6187 cv
92.1152 60.6187 92.8208 59.9131 92.8208 59.0435 cv
@
1 lc
91.3154 59.0737 mo
91.3154 59.0737 li
@
0 lc
104.821 91.6836 mo
104.821 90.8145 104.115 90.1084 103.246 90.1084 cv
102.376 90.1084 101.67 90.8145 101.67 91.6836 cv
101.67 92.5532 102.376 93.2588 103.246 93.2588 cv
104.115 93.2588 104.821 92.5532 104.821 91.6836 cv
@
1 lc
103.266 91.7734 mo
103.266 91.7734 li
@
0 lc
83.7007 59.0435 mo
83.7007 58.1743 82.9951 57.4688 82.1255 57.4688 cv
81.2563 57.4688 80.5508 58.1743 80.5508 59.0435 cv
80.5508 59.9131 81.2563 60.6187 82.1255 60.6187 cv
82.9951 60.6187 83.7007 59.9131 83.7007 59.0435 cv
@
1 lc
82.2158 59.0737 mo
82.2158 59.0737 li
@
0 lc
94.2607 73.6836 mo
94.2607 72.8145 93.5552 72.1084 92.6855 72.1084 cv
91.8164 72.1084 91.1108 72.8145 91.1108 73.6836 cv
91.1108 74.5532 91.8164 75.2588 92.6855 75.2588 cv
93.5552 75.2588 94.2607 74.5532 94.2607 73.6836 cv
@
1 lc
92.7656 73.6738 mo
92.7656 73.6738 li
@
0 lc
81.0605 94.3237 mo
81.0605 93.4541 80.355 92.7485 79.4858 92.7485 cv
78.6162 92.7485 77.9106 93.4541 77.9106 94.3237 cv
77.9106 95.1929 78.6162 95.8984 79.4858 95.8984 cv
80.355 95.8984 81.0605 95.1929 81.0605 94.3237 cv
@
1 lc
79.5156 94.2236 mo
79.5156 94.2236 li
@
0 lc
83.2207 96.4834 mo
83.2207 95.6143 82.5151 94.9087 81.6455 94.9087 cv
80.7764 94.9087 80.0708 95.6143 80.0708 96.4834 cv
80.0708 97.3525 80.7764 98.0581 81.6455 98.0581 cv
82.5151 98.0581 83.2207 97.3525 83.2207 96.4834 cv
@
1 lc
81.5654 96.4736 mo
81.5654 96.4736 li
@
0 lc
90.6606 118.923 mo
90.6606 118.054 89.9551 117.349 89.0854 117.349 cv
88.2163 117.349 87.5107 118.054 87.5107 118.923 cv
87.5107 119.792 88.2163 120.5 89.0854 120.5 cv
89.9551 120.5 90.6606 119.792 90.6606 118.923 cv
@
1 lc
89.0156 118.923 mo
89.0156 118.923 li
@
0 lc
86.8208 70.3237 mo
86.8208 69.4541 86.1152 68.7485 85.2456 68.7485 cv
84.376 68.7485 83.6704 69.4541 83.6704 70.3237 cv
83.6704 71.1929 84.376 71.8984 85.2456 71.8984 cv
86.1152 71.8984 86.8208 71.1929 86.8208 70.3237 cv
@
1 lc
85.2158 70.4238 mo
85.2158 70.4238 li
@
0 lc
131.461 52.8037 mo
131.461 51.9341 130.755 51.2285 129.886 51.2285 cv
129.016 51.2285 128.311 51.9341 128.311 52.8037 cv
128.311 53.6729 129.016 54.3784 129.886 54.3784 cv
130.755 54.3784 131.461 53.6729 131.461 52.8037 cv
@
1 lc
129.966 52.8735 mo
129.966 52.8735 li
@
0 lc
101.46 81.4834 mo
101.46 80.6143 100.755 79.9087 99.8857 79.9087 cv
99.0161 79.9087 98.3105 80.6143 98.3105 81.4834 cv
98.3105 82.353 99.0161 83.0586 99.8857 83.0586 cv
100.755 83.0586 101.46 82.353 101.46 81.4834 cv
@
1 lc
99.8154 81.4736 mo
99.8154 81.4736 li
@
0 lc
68.8208 92.8838 mo
68.8208 92.0142 68.1152 91.3086 67.2456 91.3086 cv
66.376 91.3086 65.6704 92.0142 65.6704 92.8838 cv
65.6704 93.7529 66.376 94.4585 67.2456 94.4585 cv
68.1152 94.4585 68.8208 93.7529 68.8208 92.8838 cv
@
1 lc
67.2656 92.8237 mo
67.2656 92.8237 li
@
0 lc
67.8608 76.3237 mo
67.8608 75.4541 67.1548 74.7485 66.2856 74.7485 cv
65.416 74.7485 64.7104 75.4541 64.7104 76.3237 cv
64.7104 77.1929 65.416 77.8984 66.2856 77.8984 cv
67.1548 77.8984 67.8608 77.1929 67.8608 76.3237 cv
@
1 lc
66.2158 76.3735 mo
66.2158 76.3735 li
@
0 lc
121.141 72.7236 mo
121.141 71.854 120.435 71.1484 119.565 71.1484 cv
118.696 71.1484 117.991 71.854 117.991 72.7236 cv
117.991 73.5928 118.696 74.2988 119.565 74.2988 cv
120.435 74.2988 121.141 73.5928 121.141 72.7236 cv
@
1 lc
119.616 72.6235 mo
119.616 72.6235 li
@
0 lc
93.0605 46.0835 mo
93.0605 45.2144 92.355 44.5088 91.4858 44.5088 cv
90.6162 44.5088 89.9106 45.2144 89.9106 46.0835 cv
89.9106 46.9531 90.6162 47.6587 91.4858 47.6587 cv
92.355 47.6587 93.0605 46.9531 93.0605 46.0835 cv
@
1 lc
91.5156 46.0737 mo
91.5156 46.0737 li
@
0 lc
72.4204 109.205 mo
72.4204 108.333 71.7148 107.628 70.8457 107.628 cv
69.9761 107.628 69.2705 108.333 69.2705 109.205 cv
69.2705 110.074 69.9761 110.779 70.8457 110.779 cv
71.7148 110.779 72.4204 110.074 72.4204 109.205 cv
@
1 lc
70.8657 109.125 mo
70.8657 109.125 li
@
0 lc
84.1807 103.923 mo
84.1807 103.054 83.4751 102.349 82.6055 102.349 cv
81.7363 102.349 81.0308 103.054 81.0308 103.923 cv
81.0308 104.792 81.7363 105.5 82.6055 105.5 cv
83.4751 105.5 84.1807 104.792 84.1807 103.923 cv
@
1 lc
82.6655 103.974 mo
82.6655 103.974 li
@
0 lc
84.1807 79.2036 mo
84.1807 78.334 83.4751 77.6284 82.6055 77.6284 cv
81.7363 77.6284 81.0308 78.334 81.0308 79.2036 cv
81.0308 80.0732 81.7363 80.7788 82.6055 80.7788 cv
83.4751 80.7788 84.1807 80.0732 84.1807 79.2036 cv
@
1 lc
82.5654 79.1235 mo
82.5654 79.1235 li
@
0 lc
75.5405 49.6836 mo
75.5405 48.8145 74.835 48.1084 73.9658 48.1084 cv
73.0962 48.1084 72.3906 48.8145 72.3906 49.6836 cv
72.3906 50.5532 73.0962 51.2588 73.9658 51.2588 cv
74.835 51.2588 75.5405 50.5532 75.5405 49.6836 cv
@
1 lc
73.9658 49.6235 mo
73.9658 49.6235 li
@
0 lc
92.8208 60.4834 mo
92.8208 59.6143 92.1152 58.9087 91.2456 58.9087 cv
90.376 58.9087 89.6704 59.6143 89.6704 60.4834 cv
89.6704 61.353 90.376 62.0586 91.2456 62.0586 cv
92.1152 62.0586 92.8208 61.353 92.8208 60.4834 cv
@
1 lc
91.2158 60.4736 mo
91.2158 60.4736 li
@
0 lc
84.9004 97.9238 mo
84.9004 97.0542 84.1948 96.3486 83.3257 96.3486 cv
82.4561 96.3486 81.7505 97.0542 81.7505 97.9238 cv
81.7505 98.7925 82.4561 99.4995 83.3257 99.4995 cv
84.1948 99.4995 84.9004 98.7925 84.9004 97.9238 cv
@
1 lc
83.3657 97.874 mo
83.3657 97.874 li
@
0 lc
121.5 42.9639 mo
121.5 42.0942 120.795 41.3887 119.926 41.3887 cv
119.056 41.3887 118.351 42.0942 118.351 42.9639 cv
118.351 43.833 119.056 44.5386 119.926 44.5386 cv
120.795 44.5386 121.5 43.833 121.5 42.9639 cv
@
1 lc
119.916 42.9238 mo
119.916 42.9238 li
@
0 lc
71.3408 86.4038 mo
71.3408 85.5342 70.6353 84.8286 69.7656 84.8286 cv
68.896 84.8286 68.1904 85.5342 68.1904 86.4038 cv
68.1904 87.2729 68.896 87.9785 69.7656 87.9785 cv
70.6353 87.9785 71.3408 87.2729 71.3408 86.4038 cv
@
1 lc
69.7656 86.4736 mo
69.7656 86.4736 li
@
0 lc
87.1807 87.3638 mo
87.1807 86.4941 86.4751 85.7886 85.6055 85.7886 cv
84.7363 85.7886 84.0308 86.4941 84.0308 87.3638 cv
84.0308 88.2329 84.7363 88.9385 85.6055 88.9385 cv
86.4751 88.9385 87.1807 88.2329 87.1807 87.3638 cv
@
1 lc
85.6157 87.4238 mo
85.6157 87.4238 li
@
0 lc
81.7808 83.1636 mo
81.7808 82.2939 81.0752 81.5889 80.2056 81.5889 cv
79.3364 81.5889 78.6309 82.2939 78.6309 83.1636 cv
78.6309 84.0332 79.3364 84.7388 80.2056 84.7388 cv
81.0752 84.7388 81.7808 84.0332 81.7808 83.1636 cv
@
1 lc
80.2158 83.1738 mo
80.2158 83.1738 li
@
0 lc
118.741 87.1235 mo
118.741 86.2544 118.035 85.5488 117.166 85.5488 cv
116.296 85.5488 115.591 86.2544 115.591 87.1235 cv
115.591 87.9932 116.296 88.6987 117.166 88.6987 cv
118.035 88.6987 118.741 87.9932 118.741 87.1235 cv
@
1 lc
117.216 87.1738 mo
117.216 87.1738 li
@
0 lc
76.0205 76.3237 mo
76.0205 75.4541 75.3149 74.7485 74.4458 74.7485 cv
73.5762 74.7485 72.8706 75.4541 72.8706 76.3237 cv
72.8706 77.1929 73.5762 77.8984 74.4458 77.8984 cv
75.3149 77.8984 76.0205 77.1929 76.0205 76.3237 cv
@
1 lc
74.4658 76.2734 mo
74.4658 76.2734 li
@
0 lc
89.7007 103.683 mo
89.7007 102.814 88.9951 102.109 88.1255 102.109 cv
87.2563 102.109 86.5508 102.814 86.5508 103.683 cv
86.5508 104.552 87.2563 105.259 88.1255 105.259 cv
88.9951 105.259 89.7007 104.552 89.7007 103.683 cv
@
1 lc
88.0654 103.673 mo
88.0654 103.673 li
@
0 lc
111.541 67.4434 mo
111.541 66.5742 110.835 65.8687 109.966 65.8687 cv
109.096 65.8687 108.391 66.5742 108.391 67.4434 cv
108.391 68.313 109.096 69.0186 109.966 69.0186 cv
110.835 69.0186 111.541 68.313 111.541 67.4434 cv
@
1 lc
109.866 67.4238 mo
109.866 67.4238 li
@
0 lc
130.381 124.804 mo
130.381 123.935 129.675 123.228 128.806 123.228 cv
127.936 123.228 127.23 123.935 127.23 124.804 cv
127.23 125.673 127.936 126.378 128.806 126.378 cv
129.675 126.378 130.381 125.673 130.381 124.804 cv
@
1 lc
128.815 124.824 mo
128.815 124.824 li
@
0 lc
72.1807 95.0435 mo
72.1807 94.1743 71.4751 93.4688 70.6055 93.4688 cv
69.7363 93.4688 69.0308 94.1743 69.0308 95.0435 cv
69.0308 95.9131 69.7363 96.6187 70.6055 96.6187 cv
71.4751 96.6187 72.1807 95.9131 72.1807 95.0435 cv
@
1 lc
70.6655 95.0234 mo
70.6655 95.0234 li
@
0 lc
78.3008 76.3237 mo
78.3008 75.4541 77.5952 74.7485 76.7256 74.7485 cv
75.8564 74.7485 75.1504 75.4541 75.1504 76.3237 cv
75.1504 77.1929 75.8564 77.8984 76.7256 77.8984 cv
77.5952 77.8984 78.3008 77.1929 78.3008 76.3237 cv
@
1 lc
76.7158 76.4238 mo
76.7158 76.4238 li
@
0 lc
99.7808 51.9639 mo
99.7808 51.0942 99.0752 50.3887 98.2056 50.3887 cv
97.3364 50.3887 96.6309 51.0942 96.6309 51.9639 cv
96.6309 52.833 97.3364 53.5386 98.2056 53.5386 cv
99.0752 53.5386 99.7808 52.833 99.7808 51.9639 cv
@
1 lc
98.2656 51.9736 mo
98.2656 51.9736 li
@
0 lc
83.4604 127.683 mo
83.4604 126.814 82.7549 126.109 81.8857 126.109 cv
81.0161 126.109 80.3105 126.814 80.3105 127.683 cv
80.3105 128.552 81.0161 129.259 81.8857 129.259 cv
82.7549 129.259 83.4604 128.552 83.4604 127.683 cv
@
1 lc
81.8154 127.724 mo
81.8154 127.724 li
@
0 lc
123.541 50.1636 mo
123.541 49.2939 122.835 48.5889 121.966 48.5889 cv
121.096 48.5889 120.391 49.2939 120.391 50.1636 cv
120.391 51.0332 121.096 51.7388 121.966 51.7388 cv
122.835 51.7388 123.541 51.0332 123.541 50.1636 cv
@
1 lc
122.016 50.1235 mo
122.016 50.1235 li
@
0 lc
61.9805 94.8037 mo
61.9805 93.9341 61.2749 93.2285 60.4058 93.2285 cv
59.5361 93.2285 58.8306 93.9341 58.8306 94.8037 cv
58.8306 95.6729 59.5361 96.3784 60.4058 96.3784 cv
61.2749 96.3784 61.9805 95.6729 61.9805 94.8037 cv
@
1 lc
60.4155 94.8735 mo
60.4155 94.8735 li
@
0 lc
106.261 93.6035 mo
106.261 92.7344 105.555 92.0288 104.686 92.0288 cv
103.816 92.0288 103.111 92.7344 103.111 93.6035 cv
103.111 94.4731 103.816 95.1787 104.686 95.1787 cv
105.555 95.1787 106.261 94.4731 106.261 93.6035 cv
@
1 lc
104.616 93.6235 mo
104.616 93.6235 li
@
0 lc
97.5005 97.2036 mo
97.5005 96.334 96.7949 95.6284 95.9258 95.6284 cv
95.0562 95.6284 94.3506 96.334 94.3506 97.2036 cv
94.3506 98.0737 95.0562 98.7788 95.9258 98.7788 cv
96.7949 98.7788 97.5005 98.0737 97.5005 97.2036 cv
@
1 lc
95.9155 97.1235 mo
95.9155 97.1235 li
@
0 lc
106.021 108.125 mo
106.021 107.253 105.315 106.548 104.446 106.548 cv
103.576 106.548 102.871 107.253 102.871 108.125 cv
102.871 108.994 103.576 109.699 104.446 109.699 cv
105.315 109.699 106.021 108.994 106.021 108.125 cv
@
1 lc
104.416 108.125 mo
104.416 108.125 li
@
0 lc
83.2207 85.3237 mo
83.2207 84.4541 82.5151 83.7485 81.6455 83.7485 cv
80.7764 83.7485 80.0708 84.4541 80.0708 85.3237 cv
80.0708 86.1929 80.7764 86.8984 81.6455 86.8984 cv
82.5151 86.8984 83.2207 86.1929 83.2207 85.3237 cv
@
1 lc
81.6157 85.3237 mo
81.6157 85.3237 li
@
0 lc
86.8208 123.125 mo
86.8208 122.253 86.1152 121.548 85.2456 121.548 cv
84.376 121.548 83.6704 122.253 83.6704 123.125 cv
83.6704 123.994 84.376 124.699 85.2456 124.699 cv
86.1152 124.699 86.8208 123.994 86.8208 123.125 cv
@
1 lc
85.3154 123.173 mo
85.3154 123.173 li
@
0 lc
75.0605 70.8037 mo
75.0605 69.9341 74.355 69.2285 73.4858 69.2285 cv
72.6162 69.2285 71.9106 69.9341 71.9106 70.8037 cv
71.9106 71.6729 72.6162 72.3784 73.4858 72.3784 cv
74.355 72.3784 75.0605 71.6729 75.0605 70.8037 cv
@
1 lc
73.4658 70.8735 mo
73.4658 70.8735 li
@
0 lc
92.8208 65.2837 mo
92.8208 64.4141 92.1152 63.7085 91.2456 63.7085 cv
90.376 63.7085 89.6704 64.4141 89.6704 65.2837 cv
89.6704 66.1528 90.376 66.8584 91.2456 66.8584 cv
92.1152 66.8584 92.8208 66.1528 92.8208 65.2837 cv
@
1 lc
91.2158 65.2734 mo
91.2158 65.2734 li
@
0 lc
77.7007 83.7637 mo
77.7007 82.894 76.9951 82.1885 76.1255 82.1885 cv
75.2563 82.1885 74.5508 82.894 74.5508 83.7637 cv
74.5508 84.6328 75.2563 85.3389 76.1255 85.3389 cv
76.9951 85.3389 77.7007 84.6328 77.7007 83.7637 cv
@
1 lc
76.2158 83.8237 mo
76.2158 83.8237 li
@
0 lc
105.781 80.1636 mo
105.781 79.2939 105.075 78.5889 104.206 78.5889 cv
103.336 78.5889 102.631 79.2939 102.631 80.1636 cv
102.631 81.0332 103.336 81.7388 104.206 81.7388 cv
105.075 81.7388 105.781 81.0332 105.781 80.1636 cv
@
1 lc
104.266 80.0737 mo
104.266 80.0737 li
@
0 lc
109.861 121.923 mo
109.861 121.054 109.155 120.349 108.286 120.349 cv
107.416 120.349 106.71 121.054 106.71 121.923 cv
106.71 122.792 107.416 123.5 108.286 123.5 cv
109.155 123.5 109.861 122.792 109.861 121.923 cv
@
1 lc
108.216 122.023 mo
108.216 122.023 li
@
0 lc
117.781 88.3237 mo
117.781 87.4541 117.075 86.7485 116.206 86.7485 cv
115.336 86.7485 114.631 87.4541 114.631 88.3237 cv
114.631 89.1929 115.336 89.8984 116.206 89.8984 cv
117.075 89.8984 117.781 89.1929 117.781 88.3237 cv
@
1 lc
116.216 88.2236 mo
116.216 88.2236 li
@
0 lc
116.701 117.603 mo
116.701 116.734 115.995 116.029 115.125 116.029 cv
114.256 116.029 113.551 116.734 113.551 117.603 cv
113.551 118.472 114.256 119.179 115.125 119.179 cv
115.995 119.179 116.701 118.472 116.701 117.603 cv
@
1 lc
115.116 117.523 mo
115.116 117.523 li
@
0 lc
76.2607 82.3237 mo
76.2607 81.4541 75.5552 80.7485 74.6855 80.7485 cv
73.8164 80.7485 73.1108 81.4541 73.1108 82.3237 cv
73.1108 83.1929 73.8164 83.8984 74.6855 83.8984 cv
75.5552 83.8984 76.2607 83.1929 76.2607 82.3237 cv
@
1 lc
74.6655 82.2236 mo
74.6655 82.2236 li
@
0 lc
112.021 123.843 mo
112.021 122.974 111.315 122.269 110.446 122.269 cv
109.576 122.269 108.871 122.974 108.871 123.843 cv
108.871 124.712 109.576 125.419 110.446 125.419 cv
111.315 125.419 112.021 124.712 112.021 123.843 cv
@
1 lc
110.366 123.773 mo
110.366 123.773 li
@
0 lc
106.261 81.3638 mo
106.261 80.4941 105.555 79.7886 104.686 79.7886 cv
103.816 79.7886 103.111 80.4941 103.111 81.3638 cv
103.111 82.2329 103.816 82.9385 104.686 82.9385 cv
105.555 82.9385 106.261 82.2329 106.261 81.3638 cv
@
1 lc
104.716 81.3237 mo
104.716 81.3237 li
@
0 lc
30.1807 84.2437 mo
30.1807 83.374 29.4751 82.6685 28.6055 82.6685 cv
27.7363 82.6685 27.0308 83.374 27.0308 84.2437 cv
27.0308 85.1128 27.7363 85.8184 28.6055 85.8184 cv
29.4751 85.8184 30.1807 85.1128 30.1807 84.2437 cv
@
1 lc
28.5156 84.2734 mo
28.5156 84.2734 li
@
0 lc
76.7407 83.5234 mo
76.7407 82.6543 76.0352 81.9487 75.1655 81.9487 cv
74.2964 81.9487 73.5908 82.6543 73.5908 83.5234 cv
73.5908 84.3931 74.2964 85.0986 75.1655 85.0986 cv
76.0352 85.0986 76.7407 84.3931 76.7407 83.5234 cv
@
1 lc
75.1157 83.6235 mo
75.1157 83.6235 li
@
0 lc
96.9004 36.2437 mo
96.9004 35.374 96.1948 34.6685 95.3257 34.6685 cv
94.4561 34.6685 93.7505 35.374 93.7505 36.2437 cv
93.7505 37.1128 94.4561 37.8184 95.3257 37.8184 cv
96.1948 37.8184 96.9004 37.1128 96.9004 36.2437 cv
@
1 lc
95.3154 36.2734 mo
95.3154 36.2734 li
@
0 lc
57.3008 54.4834 mo
57.3008 53.6143 56.5952 52.9087 55.7256 52.9087 cv
54.8564 52.9087 54.1504 53.6143 54.1504 54.4834 cv
54.1504 55.353 54.8564 56.0586 55.7256 56.0586 cv
56.5952 56.0586 57.3008 55.353 57.3008 54.4834 cv
@
1 lc
55.7656 54.4238 mo
55.7656 54.4238 li
@
0 lc
106.5 110.404 mo
106.5 109.535 105.795 108.83 104.926 108.83 cv
104.056 108.83 103.351 109.535 103.351 110.404 cv
103.351 111.273 104.056 111.978 104.926 111.978 cv
105.795 111.978 106.5 111.273 106.5 110.404 cv
@
1 lc
104.966 110.324 mo
104.966 110.324 li
@
0 lc
74.3408 90.4834 mo
74.3408 89.6143 73.6353 88.9087 72.7656 88.9087 cv
71.896 88.9087 71.1904 89.6143 71.1904 90.4834 cv
71.1904 91.353 71.896 92.0586 72.7656 92.0586 cv
73.6353 92.0586 74.3408 91.353 74.3408 90.4834 cv
@
1 lc
72.6655 90.4238 mo
72.6655 90.4238 li
@
0 lc
58.0205 113.283 mo
58.0205 112.414 57.3149 111.708 56.4458 111.708 cv
55.5762 111.708 54.8706 112.414 54.8706 113.283 cv
54.8706 114.154 55.5762 114.859 56.4458 114.859 cv
57.3149 114.859 58.0205 114.154 58.0205 113.283 cv
@
1 lc
56.5156 113.273 mo
56.5156 113.273 li
@
0 lc
69.3008 124.683 mo
69.3008 123.814 68.5952 123.109 67.7256 123.109 cv
66.8564 123.109 66.1504 123.814 66.1504 124.683 cv
66.1504 125.552 66.8564 126.259 67.7256 126.259 cv
68.5952 126.259 69.3008 125.552 69.3008 124.683 cv
@
1 lc
67.7656 124.673 mo
67.7656 124.673 li
@
0 lc
80.3408 108.003 mo
80.3408 107.134 79.6348 106.429 78.7656 106.429 cv
77.896 106.429 77.1904 107.134 77.1904 108.003 cv
77.1904 108.873 77.896 109.58 78.7656 109.58 cv
79.6348 109.58 80.3408 108.873 80.3408 108.003 cv
@
1 lc
78.6655 107.923 mo
78.6655 107.923 li
@
0 lc
77.2207 109.205 mo
77.2207 108.333 76.5151 107.628 75.6455 107.628 cv
74.7764 107.628 74.0708 108.333 74.0708 109.205 cv
74.0708 110.074 74.7764 110.779 75.6455 110.779 cv
76.5151 110.779 77.2207 110.074 77.2207 109.205 cv
@
1 lc
75.6655 109.125 mo
75.6655 109.125 li
@
0 lc
115.98 78.2437 mo
115.98 77.374 115.275 76.6685 114.406 76.6685 cv
113.536 76.6685 112.831 77.374 112.831 78.2437 cv
112.831 79.1128 113.536 79.8184 114.406 79.8184 cv
115.275 79.8184 115.98 79.1128 115.98 78.2437 cv
@
1 lc
114.416 78.1738 mo
114.416 78.1738 li
@
0 lc
106.5 71.8838 mo
106.5 71.0142 105.795 70.3086 104.926 70.3086 cv
104.056 70.3086 103.351 71.0142 103.351 71.8838 cv
103.351 72.7529 104.056 73.4585 104.926 73.4585 cv
105.795 73.4585 106.5 72.7529 106.5 71.8838 cv
@
1 lc
104.866 71.8735 mo
104.866 71.8735 li
@
0 lc
93.9004 117.603 mo
93.9004 116.734 93.1948 116.029 92.3257 116.029 cv
91.4561 116.029 90.7505 116.734 90.7505 117.603 cv
90.7505 118.472 91.4561 119.179 92.3257 119.179 cv
93.1948 119.179 93.9004 118.472 93.9004 117.603 cv
@
1 lc
92.3154 117.523 mo
92.3154 117.523 li
@
0 lc
81.7808 128.164 mo
81.7808 127.294 81.0752 126.589 80.2056 126.589 cv
79.3364 126.589 78.6309 127.294 78.6309 128.164 cv
78.6309 129.033 79.3364 129.738 80.2056 129.738 cv
81.0752 129.738 81.7808 129.033 81.7808 128.164 cv
@
1 lc
80.2656 128.173 mo
80.2656 128.173 li
@
0 lc
96.6606 108.003 mo
96.6606 107.134 95.9551 106.429 95.0854 106.429 cv
94.2163 106.429 93.5107 107.134 93.5107 108.003 cv
93.5107 108.873 94.2163 109.58 95.0854 109.58 cv
95.9551 109.58 96.6606 108.873 96.6606 108.003 cv
@
1 lc
95.1655 107.923 mo
95.1655 107.923 li
@
0 lc
83.4604 65.0435 mo
83.4604 64.1743 82.7549 63.4688 81.8857 63.4688 cv
81.0161 63.4688 80.3105 64.1743 80.3105 65.0435 cv
80.3105 65.9131 81.0161 66.6187 81.8857 66.6187 cv
82.7549 66.6187 83.4604 65.9131 83.4604 65.0435 cv
@
1 lc
81.8154 65.0234 mo
81.8154 65.0234 li
@
0 lc
72.9004 110.644 mo
72.9004 109.775 72.1948 109.068 71.3257 109.068 cv
70.4561 109.068 69.7505 109.775 69.7505 110.644 cv
69.7505 111.513 70.4561 112.218 71.3257 112.218 cv
72.1948 112.218 72.9004 111.513 72.9004 110.644 cv
@
1 lc
71.3154 110.574 mo
71.3154 110.574 li
@
0 lc
92.7007 89.0435 mo
92.7007 88.1743 91.9951 87.4688 91.1255 87.4688 cv
90.2563 87.4688 89.5508 88.1743 89.5508 89.0435 cv
89.5508 89.9131 90.2563 90.6187 91.1255 90.6187 cv
91.9951 90.6187 92.7007 89.9131 92.7007 89.0435 cv
@
1 lc
91.1157 89.1235 mo
91.1157 89.1235 li
@
0 lc
112.141 96.2437 mo
112.141 95.374 111.435 94.6685 110.565 94.6685 cv
109.696 94.6685 108.991 95.374 108.991 96.2437 cv
108.991 97.1133 109.696 97.8184 110.565 97.8184 cv
111.435 97.8184 112.141 97.1133 112.141 96.2437 cv
@
1 lc
110.565 96.2734 mo
110.565 96.2734 li
@
0 lc
83.2207 84.2437 mo
83.2207 83.374 82.5151 82.6685 81.6455 82.6685 cv
80.7764 82.6685 80.0708 83.374 80.0708 84.2437 cv
80.0708 85.1128 80.7764 85.8184 81.6455 85.8184 cv
82.5151 85.8184 83.2207 85.1128 83.2207 84.2437 cv
@
1 lc
81.6157 84.3237 mo
81.6157 84.3237 li
@
0 lc
78.9004 100.804 mo
78.9004 99.9351 78.1948 99.228 77.3257 99.228 cv
76.4561 99.228 75.7505 99.9351 75.7505 100.804 cv
75.7505 101.673 76.4561 102.378 77.3257 102.378 cv
78.1948 102.378 78.9004 101.673 78.9004 100.804 cv
@
1 lc
77.3154 100.875 mo
77.3154 100.875 li
@
0 lc
129.061 91.4434 mo
129.061 90.5742 128.355 89.8687 127.486 89.8687 cv
126.616 89.8687 125.911 90.5742 125.911 91.4434 cv
125.911 92.313 126.616 93.0186 127.486 93.0186 cv
128.355 93.0186 129.061 92.313 129.061 91.4434 cv
@
1 lc
127.466 91.4736 mo
127.466 91.4736 li
@
0 lc
94.5005 118.324 mo
94.5005 117.455 93.7949 116.75 92.9258 116.75 cv
92.0562 116.75 91.3506 117.455 91.3506 118.324 cv
91.3506 119.193 92.0562 119.898 92.9258 119.898 cv
93.7949 119.898 94.5005 119.193 94.5005 118.324 cv
@
1 lc
92.8657 118.324 mo
92.8657 118.324 li
@
0 lc
138.181 93.7236 mo
138.181 92.854 137.475 92.1484 136.605 92.1484 cv
135.736 92.1484 135.03 92.854 135.03 93.7236 cv
135.03 94.5928 135.736 95.2988 136.605 95.2988 cv
137.475 95.2988 138.181 94.5928 138.181 93.7236 cv
@
1 lc
136.516 93.7236 mo
136.516 93.7236 li
@
0 lc
110.581 128.164 mo
110.581 127.294 109.875 126.589 109.006 126.589 cv
108.136 126.589 107.431 127.294 107.431 128.164 cv
107.431 129.033 108.136 129.738 109.006 129.738 cv
109.875 129.738 110.581 129.033 110.581 128.164 cv
@
1 lc
108.966 128.125 mo
108.966 128.125 li
@
0 lc
112.5 67.9238 mo
112.5 67.0542 111.795 66.3486 110.926 66.3486 cv
110.056 66.3486 109.351 67.0542 109.351 67.9238 cv
109.351 68.793 110.056 69.4985 110.926 69.4985 cv
111.795 69.4985 112.5 68.793 112.5 67.9238 cv
@
1 lc
110.966 67.9736 mo
110.966 67.9736 li
@
0 lc
83.3408 108.964 mo
83.3408 108.093 82.6348 107.388 81.7656 107.388 cv
80.8965 107.388 80.1904 108.093 80.1904 108.964 cv
80.1904 109.833 80.8965 110.539 81.7656 110.539 cv
82.6348 110.539 83.3408 109.833 83.3408 108.964 cv
@
1 lc
81.7656 108.875 mo
81.7656 108.875 li
@
0 lc
76.1406 99.1245 mo
76.1406 98.2534 75.4351 97.5488 74.5654 97.5488 cv
73.6963 97.5488 72.9907 98.2534 72.9907 99.1245 cv
72.9907 99.9937 73.6963 100.699 74.5654 100.699 cv
75.4351 100.699 76.1406 99.9937 76.1406 99.1245 cv
@
1 lc
74.5654 99.0229 mo
74.5654 99.0229 li
@
0 lc
119.341 94.0835 mo
119.341 93.2144 118.635 92.5088 117.766 92.5088 cv
116.896 92.5088 116.19 93.2144 116.19 94.0835 cv
116.19 94.9531 116.896 95.6587 117.766 95.6587 cv
118.635 95.6587 119.341 94.9531 119.341 94.0835 cv
@
1 lc
117.766 94.1235 mo
117.766 94.1235 li
@
0 lc
100.5 97.3232 mo
100.5 96.4541 99.7949 95.7485 98.9258 95.7485 cv
98.0562 95.7485 97.3506 96.4541 97.3506 97.3232 cv
97.3506 98.1929 98.0562 98.8979 98.9258 98.8979 cv
99.7949 98.8979 100.5 98.1929 100.5 97.3232 cv
@
1 lc
98.9155 97.3232 mo
98.9155 97.3232 li
@
0 lc
79.8608 72.0034 mo
79.8608 71.1343 79.1553 70.4287 78.2856 70.4287 cv
77.416 70.4287 76.7104 71.1343 76.7104 72.0034 cv
76.7104 72.873 77.416 73.5786 78.2856 73.5786 cv
79.1553 73.5786 79.8608 72.873 79.8608 72.0034 cv
@
1 lc
78.2656 71.9736 mo
78.2656 71.9736 li
@
0 lc
112.741 87.1235 mo
112.741 86.2544 112.035 85.5488 111.166 85.5488 cv
110.296 85.5488 109.591 86.2544 109.591 87.1235 cv
109.591 87.9932 110.296 88.6987 111.166 88.6987 cv
112.035 88.6987 112.741 87.9932 112.741 87.1235 cv
@
1 lc
111.065 87.1738 mo
111.065 87.1738 li
@
0 lc
71.4604 87.1235 mo
71.4604 86.2544 70.7549 85.5488 69.8857 85.5488 cv
69.0161 85.5488 68.3105 86.2544 68.3105 87.1235 cv
68.3105 87.9932 69.0161 88.6987 69.8857 88.6987 cv
70.7549 88.6987 71.4604 87.9932 71.4604 87.1235 cv
@
1 lc
69.8154 87.1738 mo
69.8154 87.1738 li
@
0 lc
80.1006 121.443 mo
80.1006 120.574 79.395 119.869 78.5254 119.869 cv
77.6563 119.869 76.9507 120.574 76.9507 121.443 cv
76.9507 122.314 77.6563 123.019 78.5254 123.019 cv
79.395 123.019 80.1006 122.314 80.1006 121.443 cv
@
1 lc
78.5156 121.474 mo
78.5156 121.474 li
@
0 lc
117.541 90.0034 mo
117.541 89.1343 116.835 88.4287 115.966 88.4287 cv
115.096 88.4287 114.391 89.1343 114.391 90.0034 cv
114.391 90.873 115.096 91.5786 115.966 91.5786 cv
116.835 91.5786 117.541 90.873 117.541 90.0034 cv
@
1 lc
115.966 89.9238 mo
115.966 89.9238 li
@
0 lc
136.74 97.6836 mo
136.74 96.8145 136.035 96.1084 135.166 96.1084 cv
134.296 96.1084 133.591 96.8145 133.591 97.6836 cv
133.591 98.5522 134.296 99.2593 135.166 99.2593 cv
136.035 99.2593 136.74 98.5522 136.74 97.6836 cv
@
1 lc
135.266 97.7236 mo
135.266 97.7236 li
@
0 lc
120.181 102.484 mo
120.181 101.615 119.475 100.908 118.605 100.908 cv
117.736 100.908 117.031 101.615 117.031 102.484 cv
117.031 103.353 117.736 104.058 118.605 104.058 cv
119.475 104.058 120.181 103.353 120.181 102.484 cv
@
1 lc
118.616 102.523 mo
118.616 102.523 li
@
0 lc
108.661 126.484 mo
108.661 125.615 107.955 124.908 107.085 124.908 cv
106.216 124.908 105.511 125.615 105.511 126.484 cv
105.511 127.353 106.216 128.058 107.085 128.058 cv
107.955 128.058 108.661 127.353 108.661 126.484 cv
@
1 lc
107.116 126.474 mo
107.116 126.474 li
@
0 lc
84.7808 78.4834 mo
84.7808 77.6143 84.0752 76.9087 83.2056 76.9087 cv
82.3364 76.9087 81.6309 77.6143 81.6309 78.4834 cv
81.6309 79.353 82.3364 80.0586 83.2056 80.0586 cv
84.0752 80.0586 84.7808 79.353 84.7808 78.4834 cv
@
1 lc
83.2158 78.4238 mo
83.2158 78.4238 li
@
0 lc
82.5005 81.9639 mo
82.5005 81.0942 81.7949 80.3887 80.9258 80.3887 cv
80.0562 80.3887 79.3506 81.0942 79.3506 81.9639 cv
79.3506 82.833 80.0562 83.5386 80.9258 83.5386 cv
81.7949 83.5386 82.5005 82.833 82.5005 81.9639 cv
@
1 lc
81.0156 81.9736 mo
81.0156 81.9736 li
@
0 lc
129.541 76.5635 mo
129.541 75.6943 128.835 74.9888 127.966 74.9888 cv
127.096 74.9888 126.391 75.6943 126.391 76.5635 cv
126.391 77.4331 127.096 78.1387 127.966 78.1387 cv
128.835 78.1387 129.541 77.4331 129.541 76.5635 cv
@
1 lc
128.016 76.5737 mo
128.016 76.5737 li
@
0.5 lw
0 lc
16.2656 3.67383 mo
16.2656 182.724 li
258.716 182.724 li
258.716 3.67383 li
16.2656 3.67383 li
16.2656 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/MIJMQN+Helvetica*1 uf/MIJMQN+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (SamreshNarayan Singh) ()%%Title: (unscaled.eps)%%CreationDate: 10/4/10 1:18 PM%AI9_DataStream%Gb!R&pKh<%dkH)cJ9q82"[Q7AZlBb4S955r.KV(lP-CQk^OLX_I_%SDa<JirpH,^2)kg?:lL*s&lDj-LY&Lnt)g<7'mX(Z%hp%g_%blfoA#c@690P0I!E-T-?fc3''8a';O728`-,EpEHg02?IN&5jWe>nWlc0jeCd&T*\_d]h*)[nZXKm'Tt,sAF'\g(1ehe`>A*4>&h%l-\%khf#um%==B<62J.?C,[ZV6)QUJ)@6Si<:.4MDRCF]j3DF]YSg+`)(=(.ESEFig3[lsLqf/5K5S@cDD][:O.)&\%XL6j#MEbf%rMhjrTu!IX<Rdr+ao.>a&l_L'M`b<(hcn"GTJgQX]"b!Cp3!^jDq@HQN%82U,go!78AhA#:2?SD&<%h*.D`BR$>-Unnk@uGq+n'e%T?Z:cXkr?'HG^7KVXmiZ+<s)f?+'Y:%54Jk_5s>md`ZXB3On=^!.25s+Kq@.)U1/l_XCOZ2&N9Ds&8`k8h+)t#4KeK,(O!H$tJ'$%jqNM36E!)NrS&;'/3sANrFYf8GDgg[TkCZE0F$H,:DrA3/uW>8pp:[XVJ/Dtg_d[7D_nV#K`#mJ*G:#UH`Oc8hB6l=*OH_oMR$D>%7m:n\'05<,KDeS,LrMIo27p65Lh;Ml!fj!#:9I+if,og-]!W;?PcEhs7OFKi>q)GWmZqU_)JV('V%?N'2d#j!"I,[SJ%?,^R1+H]%#(.2EXAmg1YHGcA?&,>h:7bK9n2>PBPCZo*%/e7YTN3BA[5+.BKu#SSW+-Z@#H]ldhDPe@AJe5O^;22H.Me^YYm>7`Mt!NEKK>A*%4KVR<)0ibkJ`i:*H&)$ZoU#3*Zq-e*S*[\GQih_&/Jo.K67j#f)_$%:,D&^i"!`Cn(cT>8Go+I'TC<4X"J5[Ni/'^R&]#iR)u`/Q%N!\2`fHfiO/Jo:O6Cg^Pb1QVWcO#U<(($;bPIsIV:3o_4:ARF`LRth4@Pu4kW!246:OkiFOGoVj,;TORTb`TJbqQs@Go+I*TC<4X%8*1mW8^F(55+raN%mJ)d&h5&L-1+'XN!>s<N.0ELOo>ro6S3mKL)2UcdX11<kne'#5\BUVC9W1a#=c`^'1N4FP>ROA0L#8b>(jUu%HithX?20(60Y0N:;)VW?"EU@B6J[TT)6GT-K:W`K+gf&9"e/GBGLAR)Fj_nY)t]ZF#TF`I44I`A'BnM*nsoV&4XVbD:c"M\Jf=cb%K)ZGZ's!n<'*tqp.TR>&PG!=jh2Lb*rP@6?L=f*7ZcoX)joKeH0F;Y*Cp:XZrj$\R>k4bl.ek+`-!X<Ds"o]t&V%p;</UShJ'#Gj%31VBBi\1+oc'$uD0DUsXOl*\hCHG&djn%Pipe1T$$KS\k9E#+3V%P3hJ'#HGRJ[hMaZkLZ,Q&PD%R/"IP2GUBq2<7jV2D6oV50n:%Q$b2gWg'gN8gUU90j[_&3f?VWs!@1oQQgn]@I"T9^[)E?*5+Ms)tIA9D*.^hC7F,_@6gkmTGRDD?q1,;-o,#PkNl""rtk@emHNK3%[dEo\Bi:S)DnE]F2AemD%7V.+J\GDfZf]#K*[%-ppc"FJ1NEf!WXQlc/]1\5XQ<IfdBd>b>Y;"bSl^Ggb]TWHZiSM"][@DNpX2mT%IZlcN[6[k#hus$Rhesf6YQj!m1rE+h@NC#c+h3c/^g$#>97%N9)Qg,GH_RR:%[rPY9&hm,d5Pe.ZkRdMXbu:Xo]WWW(+?Sp2LuO+%Bq)U9`#fP/+?0Ep7IT:trKPeg_&BJ[=o1a_"%AXWid^aj!l[1a[t2_[<fF!l#F`rB6K#^>7P1R_YdMb1"FW(>XdiXSZu*^CJ5?jV%"^2SQ+`47oWhrpuK#(E/d6$%uMIlF'frI7E`U[6G60=Z%d<RO/K<Gm8-Dns1?l<Ve^R9)0(#!;SbQOXVo9u@k)[m7AjsktkPoQ>h%2ICjo#]Cmb8o*RS8?#&GMrcU]0nlea,q&O]9@@u3N!^-(<9,d'f,C,7V*t>%K$KW<Vc8:W?4l3Jg1HL6Xg$Bq)WQq@EFbSc/`m3/%S?Hb.IRu+o.8MP$2^r9)k%bA='MEPM9034DPF,M*6cHWX>iC9I<iff(gd+c'b.4flDG9GpfoF$p+u1NkK?Tis`4-=<NZZH'<Q'9h%GrPE;7)`WdiGJ+FH.3J9!m8MmLVA:D!DggriE^tDQ`NZ,@N'AqlEr%baa5Gp4,SliaE'i..>^(GS-e6"6;q@]dkXZ8AXdmO_Gr>I%1R@a?lo1I=Q*!ls.RdX\gnL7#G:UP2E-\&8g^nnO2<DOj1@EfO9ijoTd>=;.D1F0&B7S9pR$BdLWC5GuEtQ-H.].[:.u`%fDbDUA%X\g6EV$Ps'oKr%tB=B(mbt#\7`QmjCApfJAd+iQF5JoZ\WMdVr<N8PiW-Bejc+GfW^Gs8e]o]<Mb6jPJT>TWo0(CD<Vt(Fs3R*jh%KstQ[%>iA'c5_].2KFj)km13<j,.Gd^c5KR[,5n,KQC3d_A:XhQ.hQ!:u8GEA<PH[Y[\bHKi,'gc:QarY)-3SC:(Dpee6n>?JeSF%d\KaEqAG;>]1dp$I*0DZP[U"2/k'H24R9<>OHhd@Rjfr8gTE6@>`9'I`kC:cQrk;\>)7i%kXUcFPD48`/Bo$!;jSbTQHGQ*JOc"A%gl.0n<\3m5at%^AYbj7nM$8pg&e:mQQ`&V)hJZ*ZA"lQugL(^dHHG8J3bl5m\br;ph8lsYEf'j3EM0ItR9CS21#=c:V.L"bPh$K-%0T$:,XW"H2'eZP.H';*]_0NFtlQ)><9l4q90Wd1L1_PgE^6c&ehF)(X@cKp)%,a!DjHqgKD[Yoi506\FVpl?K1R%/Kj:V5ibLorg%9'-TrcHMYJYpXqUn9jE#S4fXC,Ft.p7BS"7h1O,oa/.)46!7mC6lV6=QHnVi=8=J)7kSs+K)KMRl,KYD2Z0$r#?51VrATCIU"M9l%'TlgT1RXh4r)E%OR;<17(UWK%A/r8#Z@apE!El1R46Tr(U<ha^^lqe7qK<X8*o#I(?RK*7bdY'h_5Yb(H]+`HF4a\Jed]`=^uVnN%:6lofKPT964oZ.T4O"i5D*.c/HA5AQe%Hp'5Ad2RB'UUe$*bP/^M`0"D]h10)tI@Q>GcZJf.XbD4m<Dsg[N>YHd"]H3GMRPHrQH3%K^DS)%!*aJo.p\TZ;Y/q%Hn5CY^MD3*:c!>9<gXJ[=t4T2_1BT^_BF!!V//7ZV"eJ.&$Pl`G?1H],2,_A)r'Xh8mme-(Tq;f9sQL%^0@\DGXhi3%@=[938l1@MS0Li^^o,On+iX.m_+fsr&]@JeJsSGJ]E:Y,eqC5;01CT^:0Rt,EmKseGa1!.<73$BJg%YaY9,)TZ>/`%^"I),gU1S&<ZdBkajX+fh.S.]=LCEbL;-S1<GE@SZ;tlQlJp/o]D:>p:"1?Tf.c\T"5^t7#*M^OC/]Gda^8lsn1@P9-.Q`"3aE.X%OR/+@4]8a:ea;n<4joTMWB)A+a.d;k3TbH'[J0FX+PB"#Cc7K"K^[u@e/Yi('Z4N'S.:^cj*&$p9(m$&^d.oEM;IIG\rG<"_U8Fr%?m'-BAA-UpGL1[9(aV\)>,0cM%DJ"$&%oG@[l8%YhideUnncs]%6jp,W8AX,40@pQ<+:@WD0D,6Z*cQ!X2k55#*$)=!nHQoiHqI\%XH2-*K2nkDEn^Ba\2f4.2L>Df-Cb%;[qd#^'iA&5?>H;Ppfh\(*h$>\2r;SgWgfR9W82h?M-gB!c$$_LLQN,E[<aWs-^0[j`('ck%P<GS$D?G#1g$IW]R#ho;0i7Rr^r3uU3@SdOrb2CaE27KDht(c)K,U0*np&O!4iJq*pDa.Lhu_$0()ekQ&(GX*O4rhUJ3`U/Mfn_s%)`DsHnIJTAo[+Tg&W$XRH&4r4de>ktN&'j,R@r\mPTS!-HGD$OO@j/]d[:6!NVe[a\03_IA2#t';$1EF3,Bn;\&h$[C@qVSqk-N\%e`qBFO<mV%F<LB6m_79Wj%d3E*hd`/lScM@obr-0E*^JD2!Mp@lf#A&g^KdKLW#_hZ`.uSh?,F6c/:DPW02P/*g<<X.4Pm)Sa-L^%#k:(_-CA`D?CTRHp7$V'25ASW*)s7j'&fS\4g)3/="N%i^7hqgqH$j/0Rd7-1!!r9Ae][se=6jR%5%3LX4D0qhVOE/+<BfTQ0]$-%NH#uDJJNhs!euHFkD\J)VtjX,##lh<7&q@E9i*^Qa]]e"n6alW,F9r=gS7qK;cAoYd0fcCB(rtVe5?WQDBmk`^A>>1g1ro#a^=<J%7>@B\3.+1T4\$.e?:0:m5!6qMT=;l);0C5)pCFiR]g)^1-?ri9I09pp['#/2+>"g&KB*J@HJJ@p8]h[R<^5jUms4st@.1q<f2'=&%dEAm^I(L<+7a9&*Y3OpN2$as%j5EMt]%:`hrg=kuDUN!!$MFFCZuM+5kalo'VX5t_$J(O6K@0_1<`!Z-(=9u!c-VA+[*.C0\Q*ig%^u7:lM*.9%YtDVdBSuQS:\NBF=lP_&)Kl6@8gWZ9H0XeZe\=YNkY-_3C;0?F*=6Sm[+tVXg$\O0:@]%),mAeL#(8/O0MR@52UDfI%lWKmcfBIo4DXcqdeo0R9N]nr&k*6H4DV)J-5nKB(OMH;Vr??]&AkAeW"&/mTQW`4cL,Vmba:iMf*W:o+I3<gb7:H`*&_oc[lLn%Q%ajXFk)2nf`=02sA_!J$54@B.`#FIlY'"n)XrA[2P5#K^WJuR["nF<t#CnT4g93goqD=qEZ56=-hm,-/sLGfaRs#\K&s%]ng^XI#m%mkgO243\[nV-.+"43adTVciEU1opYIB)`@-df0fDdf0fDdf0fDdf0fDdf0fD9)X7bV&iKJD;632T$T1emgFQU%']5f,N#%h>rmUL%+!`BDa_.@CFC&`AOTL(qEW-kqM_9T6%0O&+U[rfi]YGIpYbi#XNY+5gD721W$F<9SW^7a=&KAO`5I;7.Z4skMVgW.8:rGElS7KC^%Cr3@k2Cm;^s,u8`-c`-u7apndO'q%`STYf4hEYi1T_1>e23E2+LT:0dT_ABpL]tS\C=POPmDbgP-$?S&nc3*Q5D>0G^S!9re&Z9J%q#!p)0`6LQa41H39BN8SeCnD5(WqLcot"gRO_V6N6dr7=9<j+o<mq:_g:d>aZf)-FXChD!NpF*,"#s:&@me1SeJt.>5ti>l>^Jcc%5:7dW:JCO%J#i:sDYbOSM6m&.dmDsia7iJeWdgG2@<hJ8E7F4O>u(+Vk\tTF"0i%'4LE')P2dWk(T9"eMn8KZLK-B_qp5<%h=rWV%K42Als1b*@X+m4eB\??=H.f:,h8fB>KYpSM;p9"U>pcYLF6*%M$01kXX"jJ?1Fu`"mu@`-\<ntCs8#oRIsW=9QAu9Hq:Er+rr(TH%6,P,CH60tKm>[2aE85g[OXh[SN6;.Fs+6d`Zb3?qGYi><RofUcerM_f^YOT=F&Zot8SHt0(j#C\\Nrq#I],o>$mc7Ui;A/+#2-=j%CY47I@tLoB#Ct.l0uD?G>IXD1,C%WVIKV<>i9Jhg+)Li]ML/Jg_1-Ti$JHG[K(%da&$"oP$2E1ue417d_6_Yu08p+Cm]^%c=KVU]%i3jQ?@I&F,\23BVSsJZm#,BdVD9rR>i<GaDMT.[M>897mB_,piV<-LuC(f0U<MojZ@+tLrcLRF(Bd1h-c!b\_:G[7Or9l%9DR;m@%f2fL@qNoMH"c;Mb],#Q=$m+$3n)N,K1O.dBZ`/jFShqCgECZH>0Ql5o>BN>_N$OsedJIjN"4F#C:h]5s7]u>'Y[;0&/EG?\%DOFr%*VOh\)R$PQP\"GEjYZh9"N<DR6)YaleWN-&k/X5<-c;g@XGpW&ejoZ\[Q<Gl9ou7;3\C%3;1`^+%t->n]mlK'4r>>rp8'%LJ<gdl%nc_Ns._S."gT<[)![r$f%>'dQYNlkqE&?d,Z0b"\,l3U<%ks/)rb9qRM"k:lm97!E)%W1JH>h/D2XHVH9V1rIVT5]qhel6J,1u2?%&bLh1$c.Jj,c]=FBGs#^9u\!P>6I>/.AAG+6tO>P,?5%Y,]Cel$hBZZglg0iJiafG5<)p[p1`K!-8%hq3eeLPLDY7B03IO5P>RtW%bNDrUEBl"c,Jd^\N7,h59IDTu82];G,1WU1(3s[N\g@u\l+"aM_id@[8ts;[-LSYr1u]\%onK5bU-To2)K&F_&Ffr8YL32U"8DC^%^X5?.gKi^-l8O(m-e9mKL<A$t\RN<<8@7=+\cfOjqPuXAdCf[cSF`gB&6`[(Xa/MEU,;%Qp8W86qk)a"gTW],<:.S$c%a]nhCHJ-%Yk?kTR3WoqMKilCW@0p7@dgGLDYg;5)nraMSQap_.]G5.bA+K>p%BM*mr]6>*Pm3id8d-eg%6fMX6<E)cq*d5Yd>c#$7`b554m5A%r/Z,i[ar;WJdfh2&tr=T_fi/Sq!_GT+8<MBh`G0O,[2K*g#)YB09?>_B%,'fBZ`fH&YK)VQ?K'MW/?lt0Oi.9iS*rg=s0s8>Alj9%JTS=^Tdl@G?>G1e#BFfQKX,1lXX8lhpo)D>KTE\WPOMFRAeQ'6l4CT_2##]oA_q2EFerFAW,5s\[Q/X!NY7=pJ+2%TH7dqO0EDg:%!;uj[Vg+Rog^g3o/ugDg^UBU2m3`*=k(<>OVjd('fFY&Q\WBD*or(A+<d0@P`aEId]rDacEA]*%%YsI(f/j9c\^rqCHLX0rYrDMm%%Qm%o7S`ct:#[W7r7QHd+rO;&)o5mDX.O%f^S8PoZjC1K1aq`5RWDCMBXG>l],PR;KR:7R)<t%tJs*D(\jK+Q.VlQFP)[Tr,aT\:%ed0"h)_;G%rrDUPR4!;f83n<o^PQ1+mJ]fn9<k6'.Ua9L0?+LVYc2Q$)lf9TpRQ'g5'](SFoIMf2s4A^HEH"6YU7rmfGR8WI_5T_%#BAcbp$U07V5V\<e`Q!Af8XDK/jU09?tMW;!uiq+mF5^a:JFdI=D'UBAY[\Eq.RD9:UBH1BjY);STn3"2W)oZr/]I>J[6TSZ0P\n%XTJO+YqA+64E1=]=p&6Z4P45;0MB53ZVL'0imK16J/]k+JtM4ld-K:HU_d9EkV70aTeW.YKOoGbHNB>DA)+3`@L0JeXkRDV/"s]3%C<9`U#IioJFX5:J#!p59gNLfpqR(/n'icg)-_#t2;<(a5C5J6'khaU[`p+!G<tTY)pRiD&2Z.=_OnR2qfR]_7KJO*m9k\e0>naUC%g8O7hmDId27'fFoQLIGbDaECoqhTrUVV.XSg*)K2J3<NVOG%Yb"L+9..NTSjd\S9%(I3uIUgLF4h:pPWP)Ps5a*'[:3dfCS>8Nbi%IrN6=i<MU>h<Rq3oO_(;p6RGACS`uOIYU/<@b[6;O&4nWI3fRl\[rB*6a:ss4;?Bs`DCAh/#4H"mj#?AFJp%i8.Duc$0k(G/%'`t%ZD/4VH7nfNkr`d!]Ms41T=WG^:R1nAAoTNWWHG9/gX"KgbK31:+7E3=JT1EtETo*dT78iCmq6g%Q0[8Uh-P-/2+2@)G*Mrlo-/,F%N-#bp8r9_3'NM[c']5q*6M[scl^Q$t3VCM6HorAWZsbO#H\`ZY=K:7?Th%OBKJouVDaPJS%4)_gpq.)R'^eo.Tr$b8n?&@dkC;U`%0QrERPu#SRL8!L?-#IL3WIu>r_P0pP3QtL2h<"S_oX!7P)QWTY\S"-][tA&Tgl[an?'1F!YdnND:>`[>7*o^a<uO'B:`qmq?!Q8[%kf:5RCo81T'bc-;:%^-B\o*Kk%=UNk>e)]&rK@.dmjkoq5hONOi$n8:magV$Er.`ii8!Nsk]++[H[kJ5BHTF]?#6_3C_e*'S]2TF%;,;&>1n%QR^3qt84#`V>Io%VKbSb:4XV]/_QR\W<Q*1,Hgo4/InlFXlD0/cNh3XZN7Iu,"D(*s"i8,?fQ1#ZoGl8OM0;a%ro_r1_%Cskf!f@DKoWXj!2+1T]`(m3lpffZ<rKAWM0N8UX_<`?b3UVtE3F//^46`3BU@GG\]<;EeXRrrDO5'Y5LGKu2>QIhJ<1ZK.H7Yf1c%63T:TI*=M"rEZP+4ubKiMVcC&Zu8\[)dTJndS>dr<lh?`>ngNTS66?"F6Qts7dlt79(2W1\^B]bp?HYhj!N\DX%N%/GO%/fql:[0%"IW8tr9LCm=u8n"iS%Uc#`Z!F7St\3g&:(D>H?Gk[F+#ee).O[qi-DCUtKi6n_i29lCjjjG:p2"'m$^gd=\98meFMfF):KMh;!3k%oI07cO'<NV<_0QX1$.]qHgKPOOoBH-WU,?Z)neFK*On"RFcs:a_0`$-=<C2YXn$!^2gW-AI,0$Rs5DVomF1dUdO9!e2L?BW553kO%4]-ZGlkWhE/]W>.jT\/o7N^XA:M<b>NV.AWqRGJ3kc]s9]ClkYDY3RuosGZ$NJg7.@B%qXVn6Tn7XND9aLbZO-d#*X\E)FYj[K]4%QgR<Z#>SbL$r/aIBqqkXe?Was`d1c8NRjCb<V&tl3>h'N"WEB\7aY>6B$[n1hbW@G4k/]h^q/!2p?ptJd4]"cdV/FCETmokWYOsP%"#G;67$Lq?IB5cA)g58,]"rQYilF0]jmm&91qFVTa%_Pj5Lp`-b*2I_c/K?%@PTHM`jTrdO3hRghIn7K[!f^(NuC.i=W.``KsM<D%kiP=N1=AG_ZaX6>,0fQ4*$:X^N:sd-Num07W+74]>GFqag[)Yc4<:V[oL>`SG@]J"<"ppQSTN?Vm8S1XLuG/kne=Y3jfPjEH-3U-%_-nCnQ/b#5_p@]YraAkg^>)Gn4j>LtNMDHe;^B7/-_[.m\*%>aXF>-Qp@MLu.Xm@^Sj(/ZX4u_I`L+R7KQ=bM&oi7[Xk\TD'@'C9%1d;h4ZLk+0:Yo/jDaN4>\TOUBOL03.^9R"toN:q"@cZ@:St]87B$*QOkNC"*EqZusdnf*"h8?hIdpH8>pZGbN@Ee`+:nDQRk\b>-%.F4Dp_r^.S5Y\=%V(GIH`bH+9GgT8khL8a2$`d&<\#3<mdDaP-bL:bJNTKe*CUlQG7+M1\UK-KTl)3tBO0-f^o2BLN*a4ICSl1Lj%>pcjqI\%&rp@ib"EuXSs7d\Q'lL<9uBe&s0[\^ZE=IokY7=W@dIWR3=kJ`GRbLB?q\\K2%V]TVX`sTN=.H+Spg\n@PR[&@[$a-KI%8E7<s(b(V`TMfCj9+R<bldA.G.tPj-9!OJV(Q4".;%1-_eYb(7K\OimS[9cP]WA;FFd+:92uWHF]^I4DEnrUK6f*g-\q?C9gD3l(%Q]nQ=f-jgR94apcCn@,`ojC?qgHOM&b0J[s`2n6Z=;jtbXG=8O4i+;_7T9&*mYri!)G/OMQ-+7._R/dT@mu">=mMmGf'&#^UX]f@%C:(7W\r7T)deI4[)&r.Ol4sN#mQQY\YXY[1'7,uhEhfV7(")5Qr1YN3q`\qa+;h'%V,=$_,2M4EF/,`38#Jg2:W<\.BMN'6#Y)CX%CSROa1u'!di^WaXD]1.[j"KiU)[1N*'tk`N4Bi_X<Cr[nYg)J(At1c?^JR&LoNCX<W/'!=>Kt[$@p]dGd;r3HE!u%m@lACZ`[<@o%ar"jXCQCnVrO'fMQN%53@@.c[ISYs\W,_h,.'*3o51DO7Q7oKqJ@LifDEI$^4m3s.nlL/nCP([Ze)<"[JEct\$d`KA([=_Okf=KD%M7%Q;9A*YEjrF>)%F^BlSKr,XCilWH@nA9P*`f,rnd\#;4(\*t5NrdH&=K/q@ke$QJOL4R\Hrjj\WH`&QGW-B#]a!,&7$J<-#9E'%-#9D\Dp!(j61IP52&EW,1<RYI$J*-YOH)QhpomN]355!Gp\4eu50Q[g)$DDcACCB=O4W([Ld"5H-Y.Zu<.'j7OQCigI`)A;dTpZ%%Z93ZVI1Ub@&%T`(WqZJV.8/#&*=J_qj\9$lT+UZ1]N^3A4>0WB?Lc2VbdIlmo3h_noPCVl52J4U^dmk1H6<TXo5'Y"(f^kFn$7fC%6ru*C3ofWl5-h7^>CS>F`uc">f]_UN]CN/[O;lqt>EqVHE>[E4H?;:0d)[gDKA0N%JSM$,Sljh58%8??33JisS45qj0gYE3A5pje%rMckTLL39D+-;nR&abt[#i1ooX%03+=kto/V5+8HI'9%M1!f:"[*frM,UqhGPYC]g7prO<WIUC&8ZN?U0%@UPh7[R\;lr-j<EB2'%e,`kPc?&eD?:2$T8XsiJa(%,/\Q7+,NseI\dqRP1C$1<bgV/iuprm!i">!l8cn<H=MRi0P[>ONU9K]lpo'F4b$?MaN1a/i:@^S*g%a]EB<c"m9`*]0lY69`hDdAE$D`V`c=>h-D;U"KTDgs>mVWbQB^D1>%>ah7>^N6ih\D8/PfF@duF(l*!U-1?m:Om^CpG3tH[3rBQq%:Ro8)'i2YTfuO"&Sm7g3deR4ANN1F.4l9@,#oR>i@%Y\J^\oAB`=&&Y6^_eQE$c(1hU]F0(5+CIWGZm<]kp4[(5=OO8"4CXe?1+a%0Vb1WMrL`Om[f1)8B7ejn,"7#\L<(gJ_#+!hM9RJI;eX:+9ZLN=TJuqCM?)8EZ`S'Ni#[<UTW7s=+2,0>B%KV5+gJq6LBtU,>1W7%43n5jAd#TJ3&(U.H?&2,\Kehr(=<^N(/%^UDuj;dd4?;XQ7XKBAAYX]C5/58>_]M";59\UA\X_1)<)l8@H,;f6f6Oh;P,XVU],W^%+>-J@qes9hW1j/2G!k[QN"c)->9KOCPJdq\>PdU6BR(X'^pk\jI]tL1n9JDM!0d)(fC=i0COS9%fjEMrjWl@$;6@/M%qCH\7d><Y%Za'k2qQMSCXsLV-4t\nl!>=7<I8@2_7B'pd,I41Oi\"sVTF+9Ndk,PQZHPs(@:.r`6bL4Vm!EI&'<Oq(b3%-8*t*q'/YR7LU$)5-%ag/U#=!`TQ8J[K2-<W/^Fj2ZuC$kdSPB7<-h:q7ZWQZ;nmm5_Dj'.r'mW41f\a>4S8[CY;J?4*tVqoC)(Y_q#a(C>qKA?dZP+H4M%Za'WKHd/7^]gem[AW*\,,#$JI\p6KFLsl.f9mD7E&VC<_I"F'.5FU>=('p]7W+"$OplU6'nr\&6PU*)>2o>QVGpAhr^$OTl7jk(c%PKs%qQH`2hjmd2I7O!-!]^JQ3&4j#8P`BE)2(o%k'"a]V_E/-7//t-)>0o_T#Rb@t'g(Q;DW3ijQXqI7BaqJ`]I"Z<U2NJ"(3)0T%:Skp;9"qo@_"gCk]]6TXEU0Q1HPHPP['r)!>MV+D"DmqRB;&:,1o`4#lq+63CXIqKM@]K4ZTdj#.:N[41c@94J.d'[&dV88B4F!W%5Mu3/E>Asb@RaaKZZn<!:I\"jkM8!Z@p$YU!s6HN)rYr"Zj_A!2pa4=6Q`cn4r5@D&?&`-U*b_hN2+d+bUgE1+k7kZ[;[s%[b7.4%UKK,nG;kH<BXa;VC>D1&p!(kq0V9=:0_#8P!LoRR!J_PAl#X%V3/DeA7/kfPh>>$<D^>8b_stW3-MPO&4D$R"`Ggu8C-=S'q<5f+%)%BGG!;9$K1a$^'_loG_"t^o;-66Y3lKH4#4$_t3[lSZ*1-ZF,q#IjZ4X(@_Yb?o:g"ibhP9mYW^MNVp<N>e*Z;,&9!,QiI#I^#g%qa-VrPWXkS!jcK^C3#(r3/fqhWC2)7.+XTE=lFTUe,eHG-Mb]-M<(PAO+An,<kX6rh.dAeKdJua><;bT>J:=drFspmB@?Q?a-t/>%Kj/QQ%2#hDja.d_/-)/H^40(JdYlbsC.fo^fu4LB5JlaIhCQHp#fE(U:aaq[/TB4=G!l#;&5Cf3V`f<_h2q&YRut3t0AML3KKM0M%DMU@E3-'/4!dRI!:C0N0fC<cK<7cSe:aq&rpX;'s/Bht3(80$e/7`m5@'4;"c.CYOA!uTS6"`eZF*[(Y;fuNmGJ\IhBY!]m:1rh>%"H!J<]pG'sA't^.pDXkoc/q#@fq.QA1#71*Bp1[2D#-?\fnZUOH>gsF<D;V7o!S^0mTU(*p@pb`!FR\pYoC^NQWC!r0k)1[add8s%fO,">Qc8qboQ%[2.7-'inEeXX<tWT9YH$9!nGu_/<1Y,PREbiDS)s"3g:j[PQ^/TNElD/6H`C?>S<mM+kQ9_^`6cIc,NsBjd$uh4%h@XkjmZ.*Qkj4;O&TeN1JhtBmGt65D]0#/9TlXsJ7*mZJDr)<lmg(t'GK64.FH2@O#Wh-^_<GIn]HcX]$1IdHFP[UOpl:.6`6`d"%d,Fq7!AS\TAN33,=X;W+%`oc#Dk=*a:-S18O[.e[G0+4X7@fn.\:)fs'ea,R1#\=Y)*MaW94mG?`Alf!dX/\dPqT]F);erGm'&3+%Sh*_sk#g"4h;]fHb9IkJQTq'uRb[NO"Dj5CQLFA"pB+j%&PbPSDpf%fe#@!K0N%QsfchLc=fsluj;p'(,.T$(c2$BW:Ltp.TnDOt%KE/#.=,#Db'uWu0/'hleFrD:MBIA/+9c2TfAKQ*g5^622S(SHqVSL,6`:)#d0ns)F#mRS`%oZK];s*gqi./?a6B$[ULocD+<'pYM%4[)O6NDBajG/;mXeTquS_UVUJ2,A\O`fjH,?0QM*m6R:hT&;s"1W6XeD+]`6mD0"+\IK8'Mi6iDeSkeWDVT%TW<-PO12N..1"D+\%U[#+jGt!;SGnJTAEhe?-nNDjZpqZe"Z`@8jp["'p]%I>F]i.YW+;d>:KouVRlK&+tG3KR4krsT\IGk(EnP,8/VhjB>=>4A2#3q`h%^a93:9L2gjee<,ZRDh"u-H+Y4LGAPPM]"52kjLaj+SGOaAiBRM$RST.:@J'TZFX0[o-MTJ:Cc)a\&<o%m?SFGjm4++!:1-7)Yo1j%[lSMO^[M&"p4PT^:"^KQqUX-O!3Ar,\Rct@SY7gtC(rSPXt_0HTlO)WOR6Ss6g&FuELXIC))==KdX9dc>`lik8TE4A)`kVW(Douk%a+2r]itb_q882IkMZ#\c+8Jnm]dOb8SPtq.g`s5b-AlN]473\X?6[Bgo%<-A<%D9_aY&Vt4KU4?:KA"#g%"-4hQ`0X7*CjfaLI(4%,5TL!jL^Apg5T1#*2ptp(\>Gk<#-?Qmr[dCF;>`mQcp55m?.A8%L>X0KLMbZ-nI,0H`?6[RunH#()\%.l_ZQ[0#f)fp&31pg`Ajs%BW6gRcm2ua8RZ:R=Cah,i8JouM[Y943P#IM,#Tf.kKRIuZ.Sjq50mS\cD9A<KH%2S4=SsMQUK7S/GG4L_Qoro\0#/TBIYZY2\*0>%0u8F_YG.`ZhIP6nm4_HVFcO*tB*2R,[RW0]kWDU\A:HU[]fBoO\2kGX"\Z5\`43D3S7Z>l&)uk$\=E>PX0[MA3(=6NFqB5_3ql:I%Co\AqQ<p_?Le"UN?1h%I"CeTOFKYJ`6K@#emJI?MLR[H*Z.\0r9ND<<&\$tK\61pnViQUSp?Pq)4P]k^Jpt?@"$RpFkDtBSa!7pH%\4+HU#s4(c&NAm@Rk5],rK_t&`kqs",N9\Q!+q+DZg)";a#_c*h?"ne@=t%'C>V4;#a?S*Yfi=rHm0.VpCj)H][PL(=$BB\]OR4E%I!\1TL3)Z*)KN\$08<t;SnI<tNO)^iG22b&M\#_RNok`pY\Q4LHsUMmL?2c(ldfWLr`/S[T]=_*_s&,/LkS5b8Rj[7DE<Dco%LRF%PnWZMR_7da02<mS(]Cp'9F;YB`,3:,Nj!$XXhA1'o.S!cb9EJHXr@d^;KTGA2D%uhlW`*Y1Qu^GEjSI1gD\HFD*EnTAlbmD;lGWL%B&h&@!=Y/(piDQ0WBV1:Ons,2&ZNOZ(D;k1/o<-b+r.ps5X[)^(L$n>L#+@)+r.raGn%,joU=I1":N0.daY7eN"C?OMpTnpo3a;r%ck6[uj^Zb/lhCjAA'n*/p;)#AiG9A.,GB(_fIb>bo+ORR9<XjI'TUs7FQ^3`c6!B@>8;NRRa)`WB=3frF1Xg:V[$_;hZuGT8%uGn%85+@T]La0N>qJ21Kk^VQgNreXBMnD15R(U@+1>ii1<dH)P2Y(((U02.6#8`FE4g)O"]h4:h=<6ARi'ps-84[jhill!c.5b'4U@1`%J8b.#B[;nErGj1l\\YI987"?3<8l/soqNUD-sjL_)2d<8>m8*=piGIV[!nRl^peB`=U]-e4f=S+h,fn[8)(^1\]`4VA.Ed@\-@IL%G3ngr,%K:?G;`]1l,h%Gc,":[f9ON4Qcs<o?X==f99lCaf1'a`D3m^JbGMKlH\C4==0PmWmG96:e`MipA$JGO):^7^#la3'!d:hm%.5biHG(WcC:5uQ,I!\*0qedQbpKk[RmttnU9',f]=+jlS.s_$WenE='dAjM:e0rY`pO9X=K&Fjnkgsk;`[-p)'_`O1_5c/iO(K+B%liukXrl/F;`XU,X44cPuDS"CdEjDXSFLE4\!HBfBrfY01@E^VqPV$/4DEMCN/dEBP9<"BHEbgeFcW<4'KLjtoD&1Zi6[SYFZ]iS#%Kk*&\cXXBGI9!W(kK:J:'6CPUMt3)0a4qY4VT^=Ke0WS7.[-u-P;C>V[DJK</M.0&@[m,VfB4fDS5YaoXDkKnOn0Wd3Ub^uA0ZQD%B6=].n5&b7oSIi_Ub9JcB$VR^J%[7Ka/NF[3[IunVb9;<B'GjLRVk_Zb`'qk%\e:fhjhI.BKA(4H*Pb=:,YDC?5=8Mk9Tgu+8IlF%Ra0"jDtUK05FTkHQHjONfE.f3S3ZoAJt=<XDX&6fVJ&$RZe%W9e%)*0/2E[>.@+k7DpS('FAB8f=5TU;UZn:XkpG;g0PrY;PAinX%;d*QcSPq)1mC)i$UZnR,fkr]S>Vr"8E,)ZM/g-V.C&UdDVA9e=k7gSPS5X[(BK@M;JafD/l24q*rb+?j=M";_ArW[W&n<^ee%*D!%/NB3E#2iM=2p7MFLo)s1+L-%:NkD#u3iCF>/h&A'Ra+9I?!oL[lcI47UZjo7QN]k-\_4t=)boLK%$i8\ERAl';PZZD^A/MZc(RQ,%V"qtF'-QG+UbWL)4LoSFI.A5'CU3*TV2KWjeOa';PV2+A=6DuDVGg>n4AF%9l\Hp>,o.m-Hh]=8"8>:e:3gNT;9on:`Odr]FPYFm%cg5]G,dan#.5fp5B-)<gbWb@.@6?T9R=SobBtbkD.=K218t%W36`W[eGI.!QR1"[r,eERZZf^X.&b']nSg2LN6ZtJ:U:]ZFAk@(,%QG7H<+Pd*:caG13RrL^1VX'da`\U;&MDTMu(.FALDRP?(#rhM;IHJ^hrM@&o&GtVUn-JChbMHb&F3iCa!okj.7gj?76:4sB/C0G3%?ORTr3^hP;?A/7Q*kKfJRWI;Z=3_XRkMQ$cFg$H83d2q]s7(f,UXK'#OTBX2^*qZIL968;;2.WSM&W#]DCCjR%SZJ8"a3a].+HYo%"RE:!D^[1.0?P4@8,pn0@gLsj00Z</6@9>R=td5!EPE!R64*F=1JMag=3iLL1[bYr:g>3tc&ol,A(_0m.0=9">7LpS@-qS_@LK:9%Cecr_EjDf-h[0Y)I*"^(_S/4'lW.AHaa9@).^-FdW-$A[lKLZaCHp7$1,f_Y(JW]0LYClN10\;3c/LJqhCLF7iJim`"s7X\[PrW/%C7CNB'<fY4:1,KA?CfQ\RK&QQ!b^A+eKcT7fjVt',u*R'MAD#o5R*i.]L_b%01/_$1QZ$s"hqL6%!U(@U6_L"L:c^A<mQrfc8kH8%mU^(RE&V.$4MUDS'/S`%,f?2GQEs`QGl-mMqobf1OP)GF\`A,!3UW].1QA/`icV;Ip"/q)!kZ*S7]$Tq<L8*P_@eG7;IHW<1j>7-%')C2P^3n+2jJ1=<3I^G-_Jj+qAk@27r*2d#m8#*"-V%HY1)uAMG,HH04>/>Wm5F-r.F[C877^0Bf,U;r+B[pKHNWjW_ut:+:DLn1%)3T(()T7;Q1&kZUClkj'ah\tIG3l-f'#q;erSbY"d#Zlj1<fHYO&bEh$.k`KmQS<jq)k$.Lrj7[a4V+hG1u0`6e!F/^0RiJe&Su4%>#/Bp)$kuR[l4&?E@os'`blG_=@'a:Tm1+DS'K>TT[HCQHQ=^ih'2t)k2XQ!76`N0Y=%cZWMYedMMVZ%8QXrJ;f9Eas*#j$XNu7:%QKK.Y4?:CrFib._"Pf,.[KdremA*OhNpY4S3$&P6g1Z1pkT(T9&DMC<++&QX-rs+`6==.48,">%@q13ghQ!E!oU@9dD(nr,"*o<`%6ISh*g86%J0$JUn<aFbE#32&'HOsM"97+-[SAQ>$j^E5VY*Z_Ln4IcrWOb!f<8LBR9JgA'_knJ=fA.?^Gi`?a>Y0p<81l@6EVZ@Y%(n`b[Ds)JD_aeHuLPr_Ki?@i2CF7>F%Dst9a4NThj`oJ+T%nqeXPnoPmt)d/Qu[,P)Lo;?D02ltaaU`'i?c]nhlL72a(qi;%Yco(%+kK1NHbVMBA^<!YCsuc4^u+?D7#MS8NbS2ml91+g?13)!^,!%mrD^KmRg:bI60XDIP7Sr0.rQ"\R7/IN&R-XW\>tPnmL4qjF?\M-%Xf"HAMj[qm8^G)\"M.XQai*7X+n<X2kN5t0g*Of2rR-q5<UPE4Q/SO.o6hZWQ+W9Qa>R-BQDDQa&(`;_WKVG/dZgn7*W][7(?K<)%W3cjPRO2bnqn<k#]:[[Hj+Ek,q&^8udeuYk\ThiYp#7(X;gG^O9CeI`;dOoVdr\.rOXYH2S+Obh)f'%e%[UTfQ(;a81ZV4Y:OaCe%K?Sfe+*gM`IZ7R1S$sP*2]VZjJBJ<\jgj99i)2Aa5$"O.]^lB?Gog,c]@Rrk!R>-#UqWT8"mG-<dYSk7I)h.>dTXeb?<Y)0@qMVN%eUFsuWdR[;F+51,<`tZIr2MDQ36]UEhI%"eE7pM?^SRE""X2'*kP&i!iu#+)<PEL%CK_UVJT2$B`2\Yq>pZuE"3IY?/7uZ[i%*u>%cb]6.<j1!-F(";Hhd=)+pNmBt8E6R"I99eJ-$a=\:d?hOpC-./P*/<`i1uUW^?,ru^#fM4"*Ju)_n\dF2#k?<B$mkPf6RIeUoR1A%Z&,_JrWh\0E]Gqq-K`dF#%J\TBsqth=6VD6Xk#9t!I@@n;@MLEHUtfD!.B^PDVjWlUB(84!1L!aZeCTj`W-5*M?<Dh!uM;>A1eP5%hBp8CE_Gjp;1O+*!<#F@\>$l2$t-m"PWgN'cu0>#+?WF6T\gSOEaF%O4NRt(b3'uogB*Q/iN[bOr8FH!P#^HO-KT<naL9HkI%G_%%@7g:!S_mcY]K)/G8Q+Ff9Zf:K>Ll-(np0E%S1?%\e0Sp2BY(A(4joroTu#J.X-RPHl8R&F:i]mWR=4%kb3S5i+<3$'DCCRIIf@#t%^%;*roi%;4YFcMO2uh]1Y'KuYX[6&_I+GrZhHBe.G=0WFf?])4Z#h_rb%EqarOeO"GXF&,YFkE*=]R`tS!%+^+6W=gT#lLiKC4E*%IbmHPq((XPlc5af(6AR8,Hma6J5!T-*-qKVdq$Ye2cG+c1s%tdbj-.13,SGQ2!=#Z,D`[.6s`):ru7-ODZN^L50Ul-DkNPdf?[[O%[<P!`SCc)Gm>5/r1ZnB%L>necDn<T1DGXgA/FYjpqKYF7/1@]opOS3X8=_E;T1RP>Ab@;$)<T92a-WK0<^61=,dZ\,o0/%BYrqX?%p%-Jo-`tP%o(mVn>[u#f!I=XVZhj1tmQ'n8Goq.=`JRE[f?_j$SnI_c4!1)udpX?opu]<0KBD2u5[HZn+l7E"a+V*ShFGLBDqc0$%qRK2g,cdR)[eUg4qDlO'=\f[ncg0aGc?&qqcFeV_kKPOokIc*=(q-!==Iq\uh^hM@:AO\I?\[.5Ie2X\o<1g!hqhbelShfn5$LG?%,4bS-[fDbrINX\',,(BJ<ki@CdUj;:X>DhN?9cJZENOQ\>FWi^rFWM29pO>V)[c?g/g@Kk[h.Ub+5]1X\=?dWo(nd#N2MPYZ=W^H%raQ>WlXstOQIToJ"l<lu57dK@Go)r+YFi;!'=X"IRFfc:0oOcRFt]AXQmXnth^iqD1WK@Rp%,"]cCNR*a"sdR%,QVsH2YAZ6Wj5D%aQr"@(qQ4_:7^"_F%<qlA!oQb*uh"s<^0.sRk(\7WtN]oisWup2\BO-am0c7bj+@.>rtD[5OZk53JqnS]RF1V6ZYX@=S)75*-oV=%FC0""`)O<LlKr1>.1Eh9YIrQ\=O,c`pQi$P'/fG3NCaGsp0Z+'@bI5E?EpYl"<8c(6_J0eh'0fc"%?RDDAEJ0S]b%V]U'UT*Tko-%cRWjLB;pP75s3\Hm/"@Q#_dcI<^U7#$EZJYItSHhTD@-#SSoa]p#GU,G2<#[.HU,5;CR*5Cat^FMiq!&[>pO;Ks@<k+.PMFa.9\`%KX%k,o0^&Ld1,46TQR<j$pWU5>@l;bDP+AXb0Q(%M"2+lM(68IQd1hnVn4nLq,/:`0DaLnno>AR(^pW1jC%b`pL>mX]=3F_F"T4Q%bH?F^E&iNkcF#o^UXe!]gHRRPp25@E]SG'>_ft8o\KC3*q#%.<\GG_1?<T+IVig(a4a`>H<mP):mn-gM//0cpNqZJM06g)[fNZ(1%I2u?hRLN5>hSU>ODX""hK&]LZ6O5)'%W)pJ;c3rnRR_>'i.A&T'LKh7>C"nJM@Kig)mMZ\A#uZn?#3/@gJ]SUUOlBhWuihAZd[3=%q'knBOfKYZhTg=*[[fL.<0EO0&B#i#.-94M1J[M=,gVp!>F%tSnl[g^>,3D0XjYS7mN^b#Zl4g>SYe^magG?/Y2/n'KiUgVA1/MT%gOmql;!_ZU'Z+``iPBDF,Hj$mnWUT`d/*Jl)JSS#7qoOi#2ZK$J8_ThlUCJ:YuOGs0WO<L+31&USt&'U;V"T`kke@eNPE6sTPq<s%=KPYf?V:_'[_?3m7Z%gM,k4Z<M@o^PZal+QfT22;SSr<$1&)W]5;sf+n.Y@<P(M^."bF2!W*KB!2O%bK5fn4ra2@i&c_%ra(Dn$s%UH@/-GT`&TB0.G'W3$cCnH7]Z42h[!81QgXm':gFP2ZM*^#&AI_3rFf4J<&h\!:KHHX2lX/Q[jDp8(9lD=m$7Jaa[e7pFZM(kT(6%eUA#na6:@9MLXp'2^.hbHr%P,`ZcTVX2L^S3g-b;"hMGK/'K/SHCR>2kmU;Rq,n=]bAk2bU7X@]loLQ)jS>RB4Lt=:dG*7YrQAEg%n2,k<89C*WrNSW2$Z"iM#P4+(fI/%]>H=7^h6i`p<]Tip.@Gm"<pqYO`RRQGe;b!X2d^S@TSUVM!6b-f"rf_L>o:+eAT+\r>rlZG%,aE%jGH.=sCFrSELW>\$rkX.$D*K[P6G'Ft3"fs]TtR%7!4(Si^"G%7H'>$3i:TiB?]P_lkhDlT:3i#+:YLhKTV6XXXm,VMGn2IK%VjW@4A-Tj$V^DR3CEHXYB)l0*m1;I)#oADIpWo?IJ2MgoEYX<EU&"n$d6rd\Hu,?U864)\HaSmSO-p4-?k1jQdg?;Qn,=li.aQM_%,?XXG=O%MABX9_sJi"kPlZ@!E91c7mnJFVDH99F7JujAG0VHj'!X+`LU.qDD.$^"FQ)(a+"E=W8,sW6)2UIme76lZ!$SE(F'Pi13%%jRg7T,Nd#bA-r7"rui?"8>ZP5@p=CpDkPi45&BeilbE;!Oo2?$gjd.7GV'+pg@)sUNgg8<)>_a8d*"QK[maQbjUB":kT*`'gS]s%FM&oV:j1UITlLk3'U9p90osX2X.&bQoB8TEIOiI+W*!U(@E6*&!&;e%0G^R0eG[TG;Qe<;p=9,tb82Nd=dI,#ePN-c?eeW@\"TO"%&$I!+VGZ#1-@%JA7Sf0hDlG<RX00I#NEtXZZ[Y<$1#)FO5YMON#%gj:g[^ZWqFpiQh-A8O:NE3n1b[7i9[;#s/KnD(9rkP&m4J71%^8gLqA?5RJDR,ne-pHUTS+YO7*cA&Ycq#5lqW`D&!+Dt=a##?90Gc/DN=tA7VAuR3!,Og#<o5tDE4nM9HdN46cJ""`,jIL*cOZXp%Lo;AWp817f">@3A'lQpTDRf(Cqu2I*8@,]3Fq?J`[3Acnc#rEMI!pV6L^pGJR>;ro[F4/+$B9/n"Eq'%VgZ;cSe8YeYR/,`K]&ED%N[o]o7'FQ:B16c3MnIXK!l6[ef?pVVL1$jJr9/!aVaiDSM./sN?/J$8]QSlf&q9=>Dd\.gX!!4f,sB#NS$AVF&7-d`Q<$W3F2Ktk%/%Q:QpfTkOaEORV4ma'1KIJju1qT8CnsH"urnKgl.V6Pjp6hE<@TO'6\3k'5m:ZA"1c]sng,hs9mVf,lip?JANqm9@H"nGo6Ls;r%)Li5;U-?Mh%mr2/F^:VgjWMk;F)$gg:tp`loE^V5(h.6.9J"Kh1>C=D7u%AL:IfMNopT"I`+l<O(#KA,ZZCkFiKM.Vq*E[CXd#I+%bS2bD0O8N`'_;c5Q5c%1X7b816qXs?1l;]%J9(_kdhmU+X]H18rHq+LKY+(s@(Wm#P6EkCCi'`!*O_SR&`[16W$DS$E+,T]!7Y)p%4;ic",UF":jfYTjHOa&,[dPGCr^E<o9c<92a]<e1#A_&Tm.Qp6h%,[NZYiHDg"La<RKWt\LrN2NKN-:"$GRkH_:F[m-*nOYn)2#;%ZXV^[aqcA+S\p!9.]!us[jV-Z^@u]^L,?8>"[,`s\>/gb1p[#2(5O+IMW[7NSpf"uN3ohsN@rUJlXqRfkq@nZS>7s!W5.%kW0]%K%Hd8:'s2[kol&WpOb2k:PfVPUD2tDjG@JBs/:GN9apC!@:MM)3P$)g'D&ocJ_6,K37j&ZkqLUTT'$jEW+5QUN>9D0APQ@*Trlu%8p%)%tN<k1dL+3!s>or,sTAJj@rr#rkNZ;u\g&O:Y"n+'8Ef!D,>):_3mWbX[^R')$f&Q9K4(&eZ.dF?nYp#o5I"$&^P^;#lj#C`mZu%!.Q,]!=Z`;!e@dRD$ghfcWR`Y#k.Et#hqVC9<l$^n[9<l>6$Xb8l$#;`5Yco^]7ms$&iDOq1aIfm[.4I81G2E9iQ%,H\rIB*rr6@%V]&q>Ls33:e[X%e\cTZe(6_$$U\4FB%$EHa0h2d=B*1g=EUQ)a[6J(:2sSDYfr/bY$39p4>Kt7iT!A[,.a1XeCA`KAklUpWI5_`9%U,!=G?<c:+b(30qj`%31?XP!3bNk2krEH:)/US5c+dXtTHK!@fks_b!]X5s<HiGKJM`4$i@pXtj4s_Q"mmJ(p^8EmOR[e,BErsP#%2!+sNIq:8nf5f^)W$mVEB%tHn6rna.6)HAP04(9fF00][[BIU'N]\PBqF]?5F?8m3C40SR1"V;dB8XgaG%>ulPu],5iEdg:ER)Ut%gUF*GlM#'$$dc1Jd@toBGD;gKCF*T<YI:DR)Th+%LoUA'+2K<CbZ9/BVcBad;/0suNjIA!RT&/cckDEu@lrHD0KU"]IS.iJ]'4*S%Q1USGW<JUZ(fgZj[0I*8=6'bu/e,UO1eH7]Y_-lg^9m+lh@G/36f5Qu("/lKQ"K^`_s:s/SQjA?fO`EhC8(EDiu3?q+%!$_B3ET^%7ZoUB)RCKB=Bt\J'p!ScZQk0G@SIW[\*r)H]RuiLUs2bNVGg*]E3lkV4G'o`7<<$q%'B#lmpk!r+fFM/VmY>tMAEhg)IX&5f++Zn%4:qc]1pB7C;7O8%2)g#9-Q]XaK_YYMJpiGIgK?^t.#7!?7=;@'\-L![BVTOf&;XUM#OBKm\##Uds6-A;0&>6lX=/jrh)da@N2H-E%d_14X//T-9oTk#ZFo7kIq`ERVAI4@u[a^;@SjhOO]D*=Cf!c#jFQHF%bhb'-k`QED$=s0P8;pbaI1,IoIstWOJ.3d%<n4g6>.nVu%qJ+)29X^6;7CBjV@"=)C:ORY@g*%dF-'EMG7_*iCU`@*L@f!*24p&o%!JHFhRKg.H2IEp&mIr"12PnssQ%IH^.W1I!.4">*f\($i%RQQS-E_:CP"",<Qbc)Z&ZkqPsgAES%6JZj3@(T(V_CCe:TC4LO\JrWtIPF!p#gC(;]X\2\+L5qE(>M)3"i$Fr>G-80JmW%B^R1Ts%?uEM<R#561E/QSlDF)VC?2+TY)f.HB;]FSjC7s+h;-*E)8qmnB$Nn2l:Y)@hM_VYKIo+S?82k$jlAd[chG"ZU%5KpV6b-Bu2bsKJ%fr)kf[I9^j'2!?mVeE1e^5Bp<<X`K/d#P*7'fU<#;.EtdD;^`!@EOR:&Ee=8JV]Y]^@J%HBKN6+Bl##>V/lY7+JZXlT9ZeI_2=-F%_<r1Y%riHQZHASil1f$1!D@A"_Am*oQgubJ'>u+,43Hd_p!>>4r4`R&Q>c6ciRn&ER[7QTO!R4N)0+eRG]O2W!s\o_(3>Z9HcPFp%X'Z/$.bV/OiLOnDYBZXbS'SaB":A9LeSR/?8.tpWiMZ?gO,_ci/>!M9R!cuOpge[*a3&KTco,',O^:-s*,[#4S'NFKkH5I2h5SNX%iE#=-a+/MOoSBbdXadZLDWP4SAVZu0p<Koehq(@\!S/<M_ME+g+CDWM:MIq$>[+5J.371mb7k-BN&_RY,ch9pO^Q+o<mLNh^#5BW%jf69S@tJ86Z(4(PN=J]Pa]<$o+S*\ki1Qmc]rE%h!,r.c_L:ZKdDXoOD%G3YnmFV<P4O+-WFM'@Y0Y>S#!jC*I?mtB4dDZZ-EL1I%K_)hIHmjf<h#qW]D0j*R+Z0ul^3NZ9@LhEiG@)U,$2[\iGm$-1#JCbBX`&Y(O@[`KE1'd5HWf5k\3o6nXRd,EDPr@[K**+Rq9.cR%J7Ua:FV"5RQ]POmCdrd.J)<`D`E<i9iXj[ioqoNbN$bfe)&\/"=V>3Z#LR)\Z'McdMs7bUNu=@;?[-Puo<uiPKde@r-bl%?>G1ZK%RpXZd7oCG+i>-A7Pq5/qi>4Ci_45FL\V8LY@JlktCFAE!`Il8(NXPo-"uo>].46K<>)TY85DI^Q:WV&!M5CBRS"I&j[01Ir/oCFY%AuXaP81A@?0hsfNDq3$j/SB6+r>@o%pSNQ2:Hhp*jqls9?<]Hd=B1O47;%sWjs&*D!b^.elPDKE&1`"_K+T)3IXi9snWm4ee2&@*%jd20%LOPiV&[+4K"Eao'UgD\M%Vm/T)HUjceG)sThleX6-bRoC,@7rP1@N.0W7Caj#o8n*:d/K('dQOfI_c(A$@J>oT+EOpZpW4G%k0rWtYe\Q\;_nao[j4g6ZO%DGQ$$0;(9AaM*4$D3=C<b3GN;QucNk:'^!Kh(-[Q4:[kU&GnoN8G""?2H/#l-[*>ZJ&,R92r*\\?b%1@S.4[c5=4HN(AC6[="smcgdMf;HP78MX=;*^k]lK]qeYi[_8B81$mTLtq?K_bF=\QT%`>O2_dD\`HU(.kL%<hfV:'`:Lt'P(Xoq%gM%o>s6N&FmT>DniPZeaWcVb_(\*+q,mbsm^ePMj9+k>?T9_Wj[0JDl0IFf`$mL>8X;]=9DEdcEn*6F]+Qd8HP`i]tKKo2"CI;GL%]K!0O,5/Wn`)dF2d`l,fSUZ'609Sc:>0[fodjQ1D_h>b8<QG.UYrC/rS54ZLiHaMBlY#63=FU%=k6I\$.u/\>$LV[N[Fg5MOqOTX%&;3G4E/$X1Q"dbI.d_pjA&\,flJ5+hSFFh[@L1g2e7P'od<(U=*-N`_W'!S,<O9,U(r_UVXGY7/*P7tCq_X`GPF\=!!W&<<HQOet%6i`S`N(DW;`.;MZ80$"E%J[_K*l7tOc4Y`i1,msW`Ve!GO7(j8j`Uf[`Ca=FrRt@*4]EIHVEPQLl)!J'BD!=1N0<=sJ_NhT8Hi9n%>q\B*J="i>?n$7<F*>@3oYJe58UYh(SDQt10T"k@_#6.#_tr-QTo(,X,4L3n&up^UUfCco3LtA]<oqgY*fQuj[NJ0cl$D1eqoc&g%*iX(mk8d*J+m0hPS(ibp>i/Z:d+[o6Q/#-sDS`Cq^nF7TK:'hJ?ELDQfV(f?c"SgYI5lY%/$5&Dkf.7h]FDT!So8*[Z*!1^GD>3b%<tPM[rh>&O<ulqNEqW"_Q`uB"9SdX&+m<&-R.52:>)g#6jSWRT6A2BF@D0.*+X'aDc_t>e^PB!3;oC"6:<.nXZ7mH=<J4cMqu2;*%=`b)1r*!(OoBT#j=iX@ro1JWI\DX2nkX`bHfdf,J(i'"W"Yb*6WD-b3F0c+,kU44i?8!+nA$Cc_q5fjFfRl>njIadR!b"k/0ab$O%%o;A#%sVDmZ<$Cn7iQp1K9.]6K7FCniMC&._B.(j:Lf'FOZh(d(V`Fq)0H?s;']<Lihh^/X,`nAn#]TS\!t^D?,t#+JLn%eWae#/%(mBtgjtO.+(rRY._Wcf1NfcAYq9Uk7Wg*Do(9V-Qmgbg0^-E]k>"Gl`0tWHcIiU=Cl:;G`7r+h0KI9osCbDhpJh?l01i$4iB3eia%pa!f9&9K/STSnPEbT_6=NKP-pB&d=o*mr9p\';.,YkE]S`bZ0P'nWWd<n1YcHdSEk\35,BL.Vi7JEY^@#nc76aFQjc>A3@i6imhr%XpVs&9fgO!+1.XAS:E),-Q5rKCOY*4AUW@;?lA*3Kk!q9Q>36_0`$+n<+52)N*eQW:#?+UM'FUZDh"+FIg3cJ4oodes!5=Rq_:J8%>`-eb<TWUH`MJJA]W02-\/ueda[.bL=-^6j<?Ni><E3pKor><S9.$8\ihbeXX,:6q0KkJQ&j+=;mnhin(^5l[O.%W!\*YBXM+QD*%QH,N@1fhHPpk4*>0".k87e:aUVs]>l.O<>rUUCcg4iRMrqJ'eW(]2%kqM'$8TAA!h%HUuKg4lBYd`icZ]UD^P^ts_8*I7M.2@,;e%Fl_dSgL-2m']t5!oY(n<="ZIrDaa8uCGAu3pq8hS9pY![S*-V>MFK[8$rQr\iUm.F]-Y#,D$mm$\60oh<T=\'DoB\`hC^UAgtPda%dh6:7&R-X@;j@t'S8(X>=p^-5S_YSY`)1MVJ6;J;g#$iBH%^)p:h*jZHg5BrLja*CPt'j*SmJuar)tm:V.J7i*tmK%K66((I9hQD%9f3grGI-hd;DGq>FU5TdTBh)>=#R5/]>jEP29ZRJb;erfQ@Ur<;PdRlc6+P(B:('=,.;^Q99@s@04JsCT;+6g70=W@%c'?jAl$Lu%dK[DQ#bO1$JWFsbl$6A_&f5(M=&.j1MN=U/K?t>7]=gEGltjG&G%4V*V;4]&5qNqnDi5-_a6CT+B,e:lDlgY9qWo@Gd<1AiJPY0H%:D(hnQU00s@C`tbgR$'d-WM9OO"Zc*:F]gLT%00BU*nJ_asLEXq8(I@nohWoN%_\+Yd\h`keXh?6J4OVP%3n@-[8aCB<$b.5NTuj%ThN&=_6k7OIJ)^r%m]qVZ?:Y"KXe;rXSo>3%Z)[5B,EPJ+aLKle4BGo*.I\feLRQV*&58ir:1:G2oc>s__9nTP1"0:__9mideIXK%,P0)3htSFoU=#?^D\-gNQZL)]`X6mYNRM/kJo<V^(/o/^^O1Z9HY2@ZIecH@7a>EK$[Yk=REcjO3Guu_^0r"6YP%JCY$P49F5n88%)QLDd**Zn2*2q8_/MLBKlao*FRn/W$4\uVqO*<0Z$20/M6_7=fR=W*@iek:^6W13>s,<k@?tOuZTC]E&=p`h6KO1t!])P818J-aJ%V3h,VG1'%]BdG_@Ld`tBHeq#.7euZn,jMc4Ei*""7j[%i#JFYFnY92&RoqCQ;54@bCtu=9MsXi?H9tL7MY6NXa:B!k&^RKIrbrZu%_ZAJ9mWEo\(.+j<j<,B=E^Y"o4=h_kfdL:,Dk^BNCSaNG$gcmToTq/;H5!iM/M=QNIPTmugnBs^S80pL2S%XaYlUU8e#$Vkotgf#%V&e5r^hDh!S_g_FURo/YRsn)$4>=]gg'iX_(cUj=Qr,!hNJ^d%+<ZuNl5WKeip:g];io*u@'Eu"FP$4pg;L_#*r_O-Dp5\']rF5>%N$HEDOL6WZ2>20s".+(@/.3G-N1>;u0BeV]&7#=3`qCJIe$;RhP>=g0/BQ'WF(T@7eGcd.7ei#%T'N2:7+f'I@kQo>P`3T;+*6k6%;Pgpg)U#UZMR1`"T9Pd#IIh6;OZ:!2UX'[cE6I=/q$YHjC]ABE>7^+ngFelc$8?Zf)0#s9a)^`%!Tm=7QZJeU.0@^*O4YtWd6HtW%+,/&U+reD:Jk/MB.l'hh"+2X0[^9]lUt\<?_DcpHn8@5)]3'QnIk8t42dOpo\Wm\s`GD90VGc8s>.<9qj&a0l<k(@<@YgCDihnX!%*B&@8%,f7VhdKHo8PUR@8@AnQE9qBb`p_=;Tgcnm-]*:?%%F_<HkQc$U8*5;n.m`00iicp`!H8Y7gf]7!]er;UP6hJaitU9o_d9D%`Hg-TAP1n/#+QdKST-Ag=>;Is/_"P*&b2[kpSnaFV^6fL^VSCHgaV+g>QXe04G&PS`2X@\8LDsXe)hFj-#qN&;Efhk`Nik2e-b\_%Ju2T,gGcf[(iSJM(\9m1B7X1-?4ZK]pa;p&o\KfJq0Uc4CO-HI<(eq8p9aS>ZQ.'BN%<^#ra6a2#__H;@ec3QMTbJDW"&_K+[:5/%IcCqQl%(.5!oYgU.FiZW9WDEI9%<Zh%J`;>;h6^LY"f^J"+\Qj5UefAFq;+RNBkKGq'&9X^%PH.Wu#6%YHSa]OW[ZhR3KGW:h%&!%dQjr'TAcCVD#N<iV.i3_.l!W"--kqi6#2`1`am'9g/m6Rgk\-KZ-1D!CJH@9THm8%qm41;S8:fcSX\,C55Vr(+jt&ri@5NIZd^Ca%R`H!a84e`")ddEC5:*V^9)I@^;<(G=a]drf5U@[^Wh6-P\+Yf9^VQoi5<][N<K>Y%\b_i(C``Sb;m`?0E(`"BNZEZqgB?&6\GAKY%G*$)DUY5u!/Whe&OcolL;L>+pFQF2MEFK[Z4l/M!k\cWX`h,6EUe,GiCkm"&Vi4E"$,uBECfJH;8%*M/37Z6uG)UP\XZDW?"KCg6%/Cr@;/0/X$'_K\UU82.W5W1W#jn7VX19qlG/54.R^&PDPaQ@O-?nS"n#*YD6G&qU\BYCmd_0Fm.+IPGjeXLHO<uEiaf?O>U9"k)2%e*N*HS&&Y7Wd&KE9:)+??DABs'.l9r$2nD,V"0B1-FaUAU\&.t^\4!I[qhg!jaP6rZ4tj`[isMN--:hJ'oJSH(np^p$U&f]98$d7%bq$k_;[R@i-Q9PR><X'iKg)4B4_-Sa>8o5\?M:;"1`S'p456t7GlRDTn&Q@6jS$'3-7Z]ae89L#lTr>o;e8&*?,q"6ksE6TkpiUi%!NlC)N/8;D/el'K.\k;h]F..dC.g\&cO\+[F,i`'q@ngqg,l!fm_phMpLSkqCV;;28HsN%XCmBS<$nbS>Nu&0$[HUd5&HSe2qTk9%YG#)I>a*,o\>L>6XQqT>U*#p"LN,X_2)m6cK"mZeL-i6sq?<1".i"1%IIZ)U3-1.f1o/rLB2?g^oikYT4l0V..LG@Un+"jJHZ1Ot%'9enU+uhRmOBSgTO]5f.A+N90]35e,Z^q^0DpTE**[d@<J#7`')5HH*W](i.<,u0Ao3r+Um%S:or*Vl[RZH-"3Bp9#XBn:u4MOi\%0NGAqL47tkY\:^lW>$F[8OV7GF:]gtN`(V;qm1stDl<CFI4KbW.VD_F(M<sI$@:0hJ]uK.=Va<99KKutKP-'bUH"Vi?A]iXUON2'%hu-+ZIha$VTBP,.>-rb1ik)><am2Behq-nuPi%C$6s_N$'-tRFnu]?B9?qNGi[]?L$U,!;XP]IS_(2^QLO-t,4^RcbpA)!abUc(:%qMdG[@I<N=imHRtLLn4UeLh`,YYQl`Qc(dRO*u%']-R+$p=L`/ZV/_F6L-fq3LuX`apk(!aRN2Y2W]\_U]-H+2u$_T7oO;56A$,4%5FQVFjq7C+.5rM&mN5-5JPgr1s%fNI^^2q:-3(67)]/bR%]_g^EW][N/_uBaB2WWWjJl=$b)P%I\LOIN\`&XNiX_j?E*ANb:UqY3%Wq^Wa2_[i!as/T9b)I6tcMk.!2gjbfQo!h.::MHf<W&PT)\_fK/0s>3a<U1%;f9N9nd$d!jT\Ji+h6VU9"En6=2hg$2fQWn3V/q<%::W)6+3HoJDTnG1b&>E3RE#52apecpPcNe>UtfqGOVaR/A""FkRW=$-?K?jt#[A7]#4hC"dt(<+,)J;RfgGTidbiabPF"&UrP2UP%F?eopS61ul*^Ef#\eZ9Ti0/rMdQsKF:6Aa,Z$QSuj31i2,e5*JT)bO4Lo6V)MTQHg&O-CXOq.R)a0#dhrfMR:@*.(Q4m3^$0o&3:%"+/S_\m0CliTD/X@(DFA]r/@`s"o<""B_*";6J:b".DDRM:T5PHO2niAD"*S0u3,Z<D3uVDXt.2pdpN7eKaVdR^bo:Z\R?=5hcGG%>JI\a@!*o>43ffW9KjCE+I_U*3NotRO2,>#STnMfT@_t\Z)bEf)JVh`C@UU<B[Qe$Q>hGa^bbeApkF$5]PTl5cFrDE`[e1^6fT03%GHOq3^%f<fDTKG>dWnIZP^N2/S)l"e5<%d,`'k9j_p9SQqk"/flYfV0I]CUEq%GiZp+VL)eF@`tOfCOA9qM?u@ijHIVGk[gN*4X.%k"H<T/>][`:%t,54V424CV!0ao\oi'#pAMej+c`;[ilhN"N"SHEn).hqbSI7>\Lj\]#V4.RtH50,l]=W5PWG@5ul)3[<*>c842Y3%CES5p#1[DV\/P]<-hDsfWDt%JHJR<5hr#gqh45PC*0c&E5uRFpebp)=T\_*CW&Ar9L%C::eALI"'$R-Nn,<t;#M-rZgEl^2)Gk*#%d$&t,O$iR$1T2SI_>aX<-$U&Mr2g)@nD7_A27/%&8S<XdW[+rf3Yh"SZ?.:eU2KS.G2Oj3dSl"(Ra0#4;nADgB@'^Y9f881.&PE&%.UBe4-THWO1f,KcKQA+mcU#Ib^M9>%6+>8>0DU#Rl4*`(^OH@tHN+XP"]#2E=H,Qm(l8IcI[Z#97jrLGaX2t29"H,LX)!Pc(6(a(%/1WLe<n%h9Q"u8C7*R.cX"J4m\rtE=C<eTeF?6+/QC2;qk.uqD@^'lId?:Fgj^>KM%5s48D:iGYRn]\8bKR7Io3b!]0j(u`BM$^D%Ej5DW#+J'V2Jb0b(l=cKcC+s\b05JQ28rtbR\D**F3;=rHk4dmbd8DQP__-Bg_i`8N4>+L,ui(ak@H!Y8MrNf9Jq)g;U$X&QWY#f%Uf90p.E+V"WDk@0cC1_cQ^J(/C5TjM2+:04k*1MCrW+LjbtB@^'Z*km7O=Hr_Q`MB?=lZsW$r9*f+]fnRStEU=;[<6d+fKs.`iP7%h82g0R<c$2VAQC>;m[fb::hhK(BC<4lEJZ2M7O[q4iU2Q23US3B$j1"e&>)!9-o6^AJr<Y`;>EUUZeN!]>JB>OepG,7t"3em"C0?%Tiaf8b2gsU;L,XD9HGd8J+h:8]>\Mf25/YlM[,J$$bK<)1g438NE.Nm7P!>fIC+K5O&]iKA9C;AH;;dh:mY#mL)"j*9L^$QPu/pO%ACU/DB1Ldj]<%UG-?=uY)/T]idRkocR5A)R.e?G5-B2'=5Po-mDmR`a9u5W=7]Q_d/j"efMekK=Mf"54V!S0.\SMNg:f%B.1t57,%E&4F&il-3n`u1$g1D4FPPn'MnM0(e\iK@Fa;1Y$-,r.KBPZ^Qu]r*5uC*k7YdM&X<2G"2f0;7cqpLkEW1R3n?PTXNM=TpNiWBFDd%n*s`S>.j#<P').p49L?>J4MAPT'0?I_]uXV!@8oF5G4o_-?1+>NN$WjD(7>^.AG1cN>-(KX&XHa6.B:;=\0XILIRWMUZ8`n#1?+9%L*W&Bp;hTf/<'e7N#Ip'+_`3ub0?%MG`2<Qe`#?H@'"uj8Aaj%68AinRj#\XQ8'Y!Lr!Uf!7]J#Z+KP3*$kVbU?F:JW.^7(7S0Nr%XAJ(>0r9k_B#)c</bB3>>QU':a`:i'AJn)A!`GJMM.eQeM+R>sfA\r+ODNt;`$?Ht,I`tY@RB.XBc'SP8O@(p3c\@aOip![Z:KRD%;]4A>3ihJC6qq2i(a:Ote!j>Mfdn0bYGIn+JM.';0;7cqpNW++AV1U<`,AYnOIN!kn/Ca0Y9aX4!4%WF;\K/TQu"4[,#1ep5q8Xk%'nds3@kKRYnj]0FV[WKP7TElW&F[`;Z_@Tbej'i\-?NQ%X`%3299A3Ig`F,KbL"DTA:bF:%=2L)c-[0^9>"3)QKU:3A/h)4,QfBQ%TehZ7a\p(A#YBJih54)+e-rDh8S'AOhQ`r0(]]e2Z`*I5SM1@NJ>P3!&Omu0BS=u.@!DupN4_X&FP("Wfq8>@k7SY,Q!7`En/gnY%W5Z>"+B\riaX@8'6^m]o98@@9j%.VO%Y2p),P_RZo.i.&e<UDf8W&`L=a6aK*J]oQId:fW'".5cQ'*;q'%S+LO-UsWKQahtJ-5q9%#4%A[a%G8QegjUUO+p$-NfW3,+9FKW-`JX@]8f7Hf\ofJ<>@4ejk,/@Q/Q;KViarT_tq[tA1>@G:<e4l>B$fpAdkUjC1T]odj.J)%$!dU1=Ve1S#uH@--)nE`>B!K<==qp?$HP+dN[4][a1"$4R7p=E%TicF5+#S-atdL;_K1m:S]%!6b[a=;l_:28k9@#12\EG/<TpG4%6fKD+[cL%k.C(["OE@dR8aYbYMj&J+C[n!;8Cm;;C-q5`V,gPZEbcQ1;bB?',R4IA6^4'o74/i3co-c-$RJC\L_0rlWANm:$H^DY%!WujWW7qNNCHZNj1>P2pTu/]C85]b.%UP?V'F!>0J>g+*2+L=)!NB#1Q8B?caYl27,Rb6*!VF/M9?pijQ5k]!5jgWTi&#%?U.e##%Vq<nrL/)JspJKU-O:_Xa2Up0"CqLD7WRDsq#sc.V2@&]UZ7M)"h>R^+7/ONRWf-"A5s6@e,V$'J$UE:ja\jE#1[u,fa0V+h-&3`\%%7i7,`-gcO7kR.Q1tiRbc(L:,HT'<_:e<9j<feq+:q*h`P*%Mg>RN-s/Dbmo+C7<;K@b>cP,NE*3=.t8KUROi/"34Zn/h$4X!RVe%+PB6)Z%O54.i*Ftcc#0]6Dd.$=@;-Zk3I,XYVBI]@@U55TVfLKO8'l)*CujHV3#Z49BoV-_h9Mi;UP>AdP<(K_V-7'd5&*&ON8%K%OAnXF3E9gS(=WG\:V7/Z$3t&]S.I,,]'l\E59lo0[>Z>%dh4^/p&QqL/]uFVV18WpW&$J(&t0cP37+!C3V&ghW7u8b!8FWSKh><3%8P,"3$#Pa98';I_.BlW.,S`%@"jkNK@jOB6XB2,3ml?#2)kS6""j>SrJQn!kQ40$2>WDGNPsni9Nm1BK$UANnN$"<m5/@S&V\.*!%b_0%a/=S=5%S2gp3Kcd5L(6pC9%2bjk0b5>U//E7ml(>Z)]cs2!!HF*4[9r?*jrOH0Q%m;`H7GW18QDBYTmX7)sK1.+jqQt6;ffn%(GM6i#qm/2=:)0bU^ogm1^T<n8TU:tPbk<(-m7bR=qpAg>c&4KijF$W3@*qc"RB*f<=M+MXP6o*;j+.'W=(0"Yc24`-1N_mF%h6u%*IU:$BYC;YZI>^;)rr;u,S2SM\J>7.<\t,G>_:^_pNTgF2Z%SmJqV'X7?s>e"b`%PT4f7mD$J!<30#87L[F`^Y\dqk8ZIqEkKrX[%dPVT1nGXcWOQM(9E5fVU"r&1_;8i],(h"_hf*F5`g<&DZLrdu!%#C7sk28C/VLfeDBM^rl@(Bh0p1OcFa#_0hM1.6G[aB(G!C2SU%C#$-P=]WC?KbUP=btf@Z$oa=rl81CpUf=]9)8njrD&B@)/-'MM&9Tg=$B`-.'%RnFNKt`M-^>kG'EJ?X8uZiHXFuC%Ue@Et*t!d6%*Lp5M3jnXt'92Kj>FB:=^iF-]d6Pms:kJa$1DD=4?jScgT^H:,/(2JC*6_(@=JNmaZ;aIA'"%j6.`(KaRfG$=JU+,F&gW12B;.PC%.rh:b]GBrrLL_EtYR.*ZVhV2Uh6O+N!_Z[ID'Mb*B*BaG1oqg4"=^0i4T;^\-!Wbf)4[(-Xd#J*$7R:"$+EF]j(1h86d.BWRZJ(s%8F<YpGV:;?M:RhZ6QoUQ-a8i4-dD.6TugIbn79lm%.9?+Q0E8%Bjae!P>/koSUrX$El%q0.e9)$g!DIoUbr\geR<Y60R*n@M7c:#%<!4mBA6oTJ3%p*:U+KOMn+$DH>.i0$P'(::6WrR;ULASD@kWu[PAEi7l791\aCSmX!WcZ+!`K;mmu^d=U^C:%a)\k*U^ak4QJ/T(%+LqV67hlqpMH/<kaoS2Q0.iX0^ZkjI)=go%QG.5UOq8`FC'R.&R*j/Z-?Et8L-ZMc4.ohJ7Kb(F?ml0jRV_5-TTR.GLr)*"&4Z.U%(:>u.Q^&[b-#DTXAN@>3F%Ai0`g]#-NYW1L:&;fon8<;$f"oJ`RVEm(^:nDp@XVgdpjqX4-+o\3+HjpEM0bRI;T."G_Nlpp-EueD%0;6T8NMi2r67b'tA7S6DKX=3/4=a<-)8_^hTJZ1iPa\?nKN$>pnQKBI'TdTR17KU\d-uRS,].+u:7K@Ukbb5eKHSFc<1lNtXH>t=%5El_Q#F-\tfPjq!3OmH*VC?7'NiccVcQVhA'Gl`sR8,%H!D0%aO(_>LU64XSYJkk6+^)i5e68D'US0%R59VeK$"KIM#SJ[?`9>-t%_"r\m<K.SK=GZJ?TJGf1-.Mc[Q3a[jY[t`rnIj8T4WoUrCAe`p5fh&D1E'tfQ,%aJ;kb&n\:A*-SM7LOR(/fZk\J`^_2`P0<#;:+%-tAE[3m2&_-9]87)GporN"'Dj7!mk";G>!dOEcVDYsfNDN<LRS5)],fN%K@pC[n!;8Cm;;Ng-6O&b(IqO4H'p+#0^A"[oD3-;Vg,%.NN:/Q.1<q%:X&siZ'Nm)\\A0Gb#6X$O%ARU2_>\Pc7V=(4]@65)[uk/nBkmnQNT[*0PG`ZDEQ.4Hm%P7=pc05c@*/b7Q7U-pj1t%@"(?eC-#(.Q:fVoeT,@uPRpGZ@;=nhi+/BeKE1!XUc#_LYp+mlaY5[]4iS:t.EnkFFc"_57R@,Y`[4UrAU/5W8Crp19O;SSY`R+m%NM7Yajlh86NnSid8/B+_<B)>G`dCfb-S?1fN*H[kRB0jgE-MD#N%Rt*7f>^YS.%KKk)IcOH9ga.YJkkes46j[XdWcjG/)u5L\&q:%JZ"a!SN$F;NQ3.QfZ7Rh\"Ph2mV,L?M=)8moC&6T@pS*K=V;"9ogPu'OXG3WijM94g?*%$8CPD*a,&4^;Vu$((VO+b3AT0V.2e!,%>IF5ukAJPUiBRJf6V)X;=+o/[&JcQ6(bS0H\So.W&TW@;;tncnZUX!TchJ)qZ4ql<Kk3*CL6")-l2G7$G!qBt+KtZ@:1pgs@V94b%j+c^=H*IVQEmo*llm_"jDr1@2>GUt_LC9<-VQE^HYbMfXb"[qO>J2nW;O"2i,h$Ft2b.uX`t-rFNL1d83FVM5XdZ;M2,(<rKl+o<%jZIoqfW,".XicJR=Y^6U4Ji^rC9BJ'@"pPdJm$a$/Xi`B&uDZfR3'@nB7r'2s+NP0&bDL!0Y2:s:u]gq\R:O$PCLB9@Ea(T?1Ci_%F,8o72Ieq6])O`-(D;oCNgBuK@/&\AO8KU;U\bXpdp0m;OulH-O!H#eaRl^_cY;[&6N"X*km6N&L&5f/EHo4+rfiA\[PM7SBh)@M%N?%[7j[M-R^CU^<i._p`9/U8-Qq7S'Mgm*jcIBJC1a,H/j%W,lYu[$Nk$f7rZO_*"_cd!CVqMAVkG@UiN*q8.[Y,[B[bB1Z)?Glc%kT6FU!GEVO;KVqROb++P&..$T[T0SXg%/JL;g@2^G_5I9jNF#b;5i336kAVK`0;XVbPpi5k)!ft'S>`cS+A'H]+="9GLb$-0bCsh%l!dV<_PX:W3EPjk#"qD#3KbK.A-CrSPQpK'.pBEB9]>,K4ab'8LjZj<.n`HT1-P!1hg`L4ClXe>_MnBoq-?$:`"Gguj20K8=:`Y"%En#_!&W+aA:rHJ]?7@aIQPAW(#lGC921n8MM$V/>))\\rO1Fo%ND/<tkZ]0h7jS'S[Bc$u&^tEcB-qLt0C:&UW!:tY.:1WIk.p_*%m/E3W%9[i*Q3XC#999(`i2@R07g>qN\=?JEZLm;%6K"(=;U>Hb+^"l7Vn!3^"Gs]kO).B[3f@^ZbT"Y-o7$V#4/EP;aa[?Ob/kO#%?rp)KiS_e!]*N?q4[+fe@3PAJHq#l2O[?p)@1mU$Nd/D:9OaldGVa6`nVG,uUK3[1epqJA:P\t\3=(3sl&"*D2CXNmXLScOFO0MV%5I=d:CL*&e0P*:cmeVe$+X(-%Q9*qn1Qr@YLLY^@p\ASh1Ar*9[OX9u*fiki4)-&j.8HVb358$thdCV'3'Wu8dM$@#NeRAP4h%*m%46<mqQTV\hI5ft?,b,O)aE0dM\tp<#f?GT%jIWtM\Pj9k^$=]s>/Lr/In-=d<GV]b@%FY(\Cg8Jp=p2&NjcYO`8nOZg=L`:N89ub%$#@Sep*ojp:\UW1"Ddl.6R5oD;,\DIP,7TKbV`HG!Z3Ng'qsa<dBbc*F)M6Zr2-_3pin:r;+<U)B!fcg[PR*<pk<jm&'S\@V&(#F%@h6+RK[pF$7+>YZ([%om0%QW7\5"GR,(`A)[3%geZDfH9m#oH2i`n'DF31XYVE(rdQ9$(K(lq9\Lh_i\0[3*ld5atq^hRI,E[u8.%03B4J>FsB-V/]9\qj$>bjDk5dNal[K8EsS`#abtYj1hgh#BqoirG966nVG!*gU/5;c,oUbchTH@Wh&dP*nW:,?W*2K0uHW2F_+u1%#%)DY'WJR+@fBgLi`n'Fbcl-Y!4/o"@GkBBV]eT'RYtmemht`#QB.EJ\2?(3j0N,MgK6fOqL3^:MKI0Wl#CH<*>?PUY,>K.lMd<"%7^e_DXGUUk/7[%==qGHAG`/<Lek/iZ)DI0Eq7E+PQbEENkOcR&iBI,gff'5)R07Ao;!?Epq[Or^pE`s5DL_Q#?)4o6g^B=-VQ%\i%MCHM<.qTf_[q]Z`<g'3:+rZF3Ap_Q\e9>:[ZAt<e\HU)9e"K-cYnKWaD9f5T8P[s,H-sTP4!B/G;XHf6Ober93g1E8EKW#>gp.j%%3,bd\KVZ)57dKuk9c5mY%f,a(Oh(Y1=1`5%=g9$.%L_h*[gZCE%q^[<^ij).F"WU)cM9q'"[T6#?qWtb$e(X7JVT^,fIf3^7V[in%1sVS@"1b-6^U+7<FDoL.DDT;$1qC*Y*=`Xl[g?%.[Y<qh2N\Oe[oFuM)eN:FYi4PASk+`6&h:>?BXFpg\9n"Ds2+#6`+lhWO0s(2%1S0aa\q$MkAO@)W<qkE'k)s':;`0*qc#guIL"_qL+qkj!0<&EoE_ee:CAU-GV@#Sh,cP6FkBY]\5IAXJFU*sT<oa5OM0Q\qCgicI%mm#CN?Dcb0cS]-&etbHY3oY*XUnZkTIn!l[;C66hRVTm<kucu28R#@i8t(ZP['-@7DiFA48MXa=]5<r6GEi193fp(WT;AcJ**M7P%<j"7aWrR&Db7S;$Y#qD1ZE">ZfS8*C'/_a\4^+'8ega7+dt/"&_(qY;<^ce.KsaFlT3>a4?^(]\#Kfbk?#eN>I9b@WSPu-#H>flk%O[fPt9X!3WeBA7b0aY[@phCF'1:?"5oTXV`,3_]d?)"-j\X5k`W[eBm\kZkDNDL(#k9&Z=*7XpT">d<hB?"7@OF#19"O5`TaS=F@%!?$=QXp*"UqbrlBb!Lbkjdm@BR3a%(3_gCXBf%"O,46@P8;;q61p$tjZZf"U.aga@@ZOF8IR88:(>-WO.uH7>Z83hcdS:r-/gW)I%-k\+*6<]B(!a?O`("8&EXG0po\s6$k6FTd<Fm/PL\47QRr1`fMLcOXJp\W(R;oOjiYBnq:$'1G<D,6us?E1K"eEZK.9Eej.Up3)S%)GRSeg?MdEk!`IEr*B0ihiC8&:s4IEW&2apCkTN"MS.<VAnZm2bVd-EhD84;2u2*25:e86(lLu,66BEcdPGL0);[.[2p96RV'K&W%!RkH42sQJ@VFHM@%C)`OlJ@HU4/W0(2IY2DB0eSc+t.O*/^+C%(QjZ]V/+:Q7s`KL<.I/97bA>7,=<`#<Cq9#G^BN%N<S8#bmI=f%3g8]7RDWh"]6Zopk9j5]CRC4p"gj8[#Xb3tB'Btkl5RMqI4Ch:>b%]@Fe"u#8S$mY4PSN6.(#@"7&iE,VKfP6P*#;_dDNO6>!o=[%+^apFX.*lupoE"%@?%<!'KV?LYYjXPW=b,U;5V`cYo$WOQ5N'#@j,$c9PLlQCDf!mOH_*>_mEUgSe9WX;u5Zq@,FM3Ct^]agXmS>%E#DX4&NW:!j0$dDN0I2:UM,<;m2BckA8_*7[(o.l[V49+PpB?b3PdNjpPjRAp5OI@+gH2R=U2E33i!X_EOIo2;0PfJH2]j-G=Noc%Is>'EFg-Hn9L^?fC+37L?&<7,Due@+6t/,*AZ9-4&rkK<CL_S;p]XNW#?IHp<l897b^q46'!N$8Z#`?>rJgG+K6'?K4b*sUB8+'1%-5?!>7L049UJ:)=g[..R846ZMc1X1:OH6lFP,+n^Qq$-6O;8RdC.9*a5GA<A?WV0o6.pWUqtW0`5@s[tg+Y<)R.[2Y.qR<$`=4W;%,VftjE&h\9MR9c3rAo6ogXVdOS/tE2rZjY%bu1j$9VZ`Qf$<WibJ!-]=KSK@P"6@l)2b:X>K2Pb2fc$A3i&$"dZLW/;;MSS%VCBU%a[co.=j'D`BkKOI'2A!<S96e6kr4AqPd9:Z)Qg'*2&T*"Ipbk8"8erkUsqfR-_d%8GTToP+<O%OM3'*[e3qA*U7)A`6qU1,Hm5M"%&<j+71u:l""LKX9&b:dW-K<Ri(S=7%%D@6WIJ*rsd[HaD<uou6k^VI:^;N5#fM+<c"OWFHYF2LoUmB6g.ni:raYlTn[$g-Rp3?:A%>:W9:F"r[JeI%f>lH1.ZH];!=0e(=WCdqO.WBt)\kcCbD@o7cYWS0^;WX'3#O@]I2@PJa2=H#p.]4C,aisA;D'=.T_[5,cu9V[$m%.:Ko<Z$aK)%V`Ai3A758$bN^$68&]2]lbs(@*RoNF-T.q$%7+F'mY)\)bD4S*"C#:.lR0j+<mOY)-@mH/9tDub#5N69VZa<>?gh+%T@(h%)5I@6ZUZe*CH==')7qSh2!0cl(Zq4,lnTdL(<daT9/05e9L;M!9#_@b-"bjchfue>Z]__ZPVa3*BO=IV_<1:;')01(0/Y<W%&Ih0q(1R_uX$gB&h[%/?]l.^rce(/X6p>oYfA$X6C;NHU9L<?6Be_N>]o&1$NdK&_2ukrHVG<;:g7fIEo;'<MH?Ei\"7nlhU4qJN%6$r]VVJGZAfp-O82ec@U#Gj=iLQKT5h]u_0qjWH2Lr]+V,c)bS[DaqhjsME8^IAb#;1t0_/%"CP[c<FpP+TH/m4S_QK7p`AW<f35%W"99goG/=>]1>=?Ae^:1Um*#;.HrFYdCMgg;GUddFF&;Q]V"!3V/)C#`7P,-a1AP5f)dnPg=R-VOgAS(ffMl*$i>j=8]WGqM6R@N%%P^DbT_h#3*g(QSV,inFk$f7rWua4,*-:9""7lT'YrA8$gK#jedRFbECpM*a[J+i>(OiTtD/B)%jSqP]AktWG'nj8;NNjq7RF&Fo%_l:,IFeXiE(<pMtXg-\bm_stR^cX'jBW\YCg/nYr.+d3$G)k9YdW_s;eE4?WPF\HoFeU7JR#J*rr$r?DogH0kVGG)]Wr02$PcD/;%dqG;e3"a="&b7/-;7*Yt7PO[-#\tuR3Df\g[]XZVZ:5,88+qDQMaJo!U"7:A682O0S:TK8T+`e$5W#7G_4q$&QS2=$PggJtBO#Bl%OZdKG<A(*Qk)XB",2$S*O;;ZSbg5Xf'W^W7WQ?i(n'0?$S?<2g`nT5!D+cH_gW_!SAn#DhVG."@9[fo0MDX+A/CL7+AYcbJ7cXEO%0jYR/UlTkU]U@gmnG[L5ZH_$RP-i6HA3Aj%K@P8,"H^Ze4I/To-Web&R8qpPCdL:RM'g`RH*g/.D,s5+;HlhiESa8>%&rJ'NDOJ#%dt7t3BX5%HYmi(`rQ(p*XQ4XVg\6XW#g'9Ia#AlTlQM?V6ia!1]G\<<SE\**&i9tG)a"t!r7%C&UnkGd7cXEGmAtpgArg%W\7J'L%/t\RdI3:=4UU*.Y$1ZKtT3<5NHB;-);/nOil8tDmperugDo>?IN&7%h2<dLHWNAs51p0mYARa5lB^H)U:G%J3mK70q!^Bb&a\uM1%=`%CBZ+%-Mo0p\-+aGET7SH_DSPbc-@(cEkKI*Uc-DZ?A]Lg5?ek/iZ)DI0EeH?N?D)FEFJ&GT)_o@RO).ebdT(5\)Z6[/^cfUj8%.nufp)^"Gg.5e(N,aj=qL!pF\;e+(jAl'Pp/YfD4V2@.PoWZYa2A?$5QYpG^@.%TMd!Oq.Ur(VCFP]#RZG1(K?qmS@j2!"hS8uo?%<:da2-6f8oWA1gl'b`ZfC,gD\PtmL).A@]>e&rGQRHA^5l5lY1gO>[KN:Ft(gXau_gV$iUc>MT;I6"n[bBS1dij5+/j[#ucg!-;f%lt2eh2i/U$D@c'u%KQ7jq<[gjr06@!d$K>95qK@RB=0^:]+Sml['S7t7A[l/+'%UMe%LTs\6d@Gb,i\F8h?!(lF!RTKVUMO7al)n%!,Jo_jj*oi$JWJqEir"G";WRaHNk-UaLafQSku<7*R7&:>hEpCQE6Rt#fca\@=*2)mJRkfVAiBbr>^m>LC;jp'K$]U_nN^p_/D.Z%L%Kpr:J&iWV:V=nFm.TRll"t=IW9SOZlO;KmLecm:>A#(DFJP!R#$u5Ihg.q"u3*8T>iCprhPgUMD\c[mISG:F"sIgD+DeNb(`q<%-#9Pjkc]lu.\)QBY39lbUofH[?:`Lsd#;ie-7T:b[YuBob!\BA91'k8bKAnld['o\1s'/tY4Krl)PL=mJrV2O7N/$<Ogb\Mdtine%W]MsM]20gTToH0W6mT_=87Q`dRYdV*%;0UTFcqjY(=?fd5I5u*2=-EP@.dLRpCFgLa*]ItZ2<:;^(]`ea,FRVF'+:[U=ONG7;C)<%:LOlVBZ;s=F/B]$`lV?CD4\#/Q)(4dQq$u<Z?ENHLV-/&<f=@>opj;M'm;>#F2<VRkK!bE;`QuPae3]M,*nZW*JmA/kmUHu#?*k/%'PZDe4-[V`J0XYNQhHZ+g4p>=?]D+O>,kn-#3gro/nF4EMYe0.'1p16rfDr[pTi[ikM5MC=Ul,N'D]`#rOmm:;EN$[bu>826t0uY%=iWqor`Fp0eATp18P4l(BXH'A!)2U:?Z86X"05Q`\hT!;.:EfiD/a7Unt1cj60S"a[:u7\rQiD4,';QMQmU_`UGhMV::=jads<,j%X7;#,&qTq0,UI6E1tl$;PPT!:]i^BoJ8.U8*cS+K2F7b6[1(eLNj^/$;PS(Z,!\"4QVeq?#q=7[@1&3\8Wbh>=/'P.8KuYe,_KCq%E[9j4lfgMcTE"*H_Xt!YGWs+cm(/>GY7Xn\h=c(D(:9Cc'8jP'n$!t7qeparF!21#lM1]h@$t`k[,#6:HotGc1=DRI&'K@kT9rih%b0Mt2cV'Bm$Y3a`?`a-[d,8$X#H7m4mP1F=000`$&[t"``l?![@<5q>jVGqgLJl]KFsiJTbFTLo\HVO04^1=Hr@'7@3O+m\95_k!%o$("kk0rd[g,iMr/YL?6"QOop7aWULB?Z$04_;9/a'!1(.;:E3dD"o=8+u+L4g;-BfRK\u3j";-ZIUJ\L[=Z\$^e6,k]H@"$BS"!%+%,=4q%]8,(E_*<Bl&J.d7e=:)*QbI8#19ZN3jqTB\D$c,`B;.dX-Y'2an0=(%4#?oi]:0<)p'3+R"F9pIq)34sIO3l&?`91ntk_%M1ciucSDq=]bSqT,[$2:X#eEb8P4;eBXH'sU(s9c'=S9rrW_N.2.NN!.2#JiA%]?[M57K.f,ZER$!?pDoU@J:I46obQ70(5:6Rr)%U0tL=^dPig^n^`)")29h)'Yg&1uF$)%=O?nKK@1%k!q6_NAo95GM^3)=PW!NhfRWY._kKk('QJd?kAI57s(0n[7VJ3;i?J<a,>Ep%/1uT:eoro=0CCf9Gs!9rhe?gO.9f0:LOFJD)t(u7mlg(\I:0cno1VYdX9P'($5Tf&qa4\M\/tr^s1Tq@bB1AN<(L?4gO6+kC(((-%=dare%-SCAb-6qpU>pYQh&_VJr&\Y).;:E3d6:q6bF@IoR@i7JoD>n9&&H!6"[Y075j#+Y47M)]4"b(4VrQ3,H\j#lgsns\SjBj>%=1]SkFDZiiYYE&rfcJFe[B5[iW486"lho/80C(_T>O..1+g"UHM*1LUg+LaB\^nrm7@LnUGGJ^R0X\##\Wr1aq.!d4'P]rBOcTlP%e:Ou9:#+i&U<!i3l.?nL8GkO`N`l^'(S\`(4ed)F)Qs(WO[]kC*mhoUYLfJ)gXq?3[meSF-GoIJ\ZratJ6V!P(:97h?##GC,37+h%D/@7?CSDhjZ:EY,ED%M`=_SL39[a*$$7N?<jM_#4r1TZa>7cQ?G\IP?c81#^1PHS"BpS8.[!oG_&"@gGj7*qZh@7%r+sC\Mo7D,:%Weo)lVMqA^2FSub'jEp[>3@R+TRVEeO7nFp.E0td6#5XfUd%df9.W^0?Ra:]1\sS5=8^m7$[NK^kgOr=c9_d&(Qf:<Qa8?LnE]ff%R$4JXJ<%7H24BVf2sFj%lV4+/Fe5rnp5,B/@.V>7\R"IeXRD<,^&kPUNLSr*RRDI%FFgCZ;KN5k'O+/rGqiT5'&o7W@egM$M=6;A%o@mfX,ZUoHdqG@4!GoMUhPLP?9u+[MJkL$GY[t[E&.tIMb=86%U;X>$7,eU3VE"@pkcY/h,Ouo$b!^pCjhCn@i[k_jI,I`HGXV*h%n'js-[Y@Hdqu#!8%*GV#l&#4a@cIX$+>"G!LW3\Kh6OJ_Y>\Y$1dBmRJb5O?R>jt0T!5q1(*RE"=tm;n'p74.C:)EBPSt8[.4q:A%1quX%pI(pVmfulX\V4VckkJAd,Q%,QX*F[AXS;%oHt3)e@%KohS_)4mWjb&N/!H'c*I%r-[q6ZLKrBF2mPAJr%S2%g:eFV`S4',p%IS'k$,.fa*&$51GF8$`Hi3E$X=HAE[3gAfX#YThh239pP&BX<MSgc4uinRt>Jft%mYdF_X$ISEYX(*_EaB$g4hk`"+rFf0d78E2S%069Y-%qi`F^W=f'YSH%cgc*Q^'E&TUc[r^7!Pg_g0G8lL>dD:WAFW_J$k>&abkQWLeuXqV$;!i^MeFrLSo0[]]$OOU`#`4<q\Ak(%fJYW4I`['&Jb3\n2GGRgi?%BP61ab9,@j]k[]oEkS[F9jC]DhW?-%e*Zkk0kD5P^jg7g`Y$>j6rKG!dDelg?)%24jY1^oEI+)XD3%;t2hni[,qY*q'?`\[EPd%bbhJ+_h0e0Jj1s':Xl+4LZB@<gJp2@N+Y**bjXdA#cbY@X:eOH2!"F)_]j/LPa$AjIH0)QH1k"fQEn2%`mPXh,UG9oNsMJ3T_4#CI[Grr)'nL&R5TCG!Zu@/a>-T'Y`,IT8@&*'&O^B+Qlj_5$`Rao^0RrF;b;mXn<P#\52/Kjin=&<-RY]J%UU`BRVT?JdPsrcs$-ChSGsjb6VAbN'BgT*lP*46;)GTfJda_qkS@/r!%k.,d]eAP(0eoD1F6580Ob^@h[D(fd//RcE,][Z@l!kN-%r?/L;ki8U867/QZ(lNog,W(nQIbK4>m.#nM^S=hqU?6&+mF,"FH>6f%K#@ToH!S$Y37rJt?\*/T?Yhq'k-=UFqi8AucJ9_-4P/`h%d8F3:$k&1/hRiL`9b$8h&8dib:kf(8#M[a"6H'QK%CXesD5LgN]cLrr0n3mbY,$kS$X$h@YgrogiNh[6`:l=uO#`aQfb&p/]_u&X%=Y*HT?:f&Z!A!JA$aujKKkSTQ?Q!`iI;MhR;UScCUNQRgp4sJqMhu8.oRNrS4$B%HC@h\Q*FH2M38iK8?/]tTA#m42@ttDPXeZI%%@a.j`mN%;KAYCI9Q\g#>>W->>nosDXJ,_4&Sn,115(6Ymc5s72_s'Id$i\;jD$9]"P;^+b@"1,6Y`SEpMA48e9L;bqh\U+N')f\c%Qc%kZ's^l)ZK>\DfN4[Yju-7Q4WkipAcu8jWq3s0L/[r7l)OjG6(T*MKVW67"$`)<[]G=EX?,bg>B!+ldu8pla.%5,QVnO'hB[DL%kKchT.qe/[qM$)4dJgCsmrI#mT3oL]d%8(NrM//'&h4ql&.)LHI5EildjLjrqa-?%C%l;3,UL,m1g3s.Cj:dPHi-C8IW)a-A7H/2%(C\@1.74Yd&FSA6j'D,V'd7l%`e>n*3\oc)VM_#uEP^?VIU""!5AbPE'aIm@ZXP\A^.jg=X&1a_[e<;grhXu.5(<[8gS/PB(NGph%"oA\Y02@Q;8B02TSQC'O@L&%3G9S,W=#!//8s*kEigZni\.[V"]COs'1Nade4D'RC,e$4AQ)1FiR7@)=[OC1AnI&Z]#Nf%d@)^75%9ZVf+RD0RHikD.^G0b/eQ!"hSaFro,rbJ](NMSBS'!a;PZ!^dJ0Uc\@3K@[T%=+%(,K`PkZ&GQ*/eXcs7LuRir,^_e2J.p_CsQXQ%E%g8Z1*)eR&2&W@B8GX7T<"*N-EL<]'!a6YUL5Ye4pk6S.3W94L:!);'4muJBL_$^=![OgE=%30,-P*kch?R.:T@a_K1dc<TqZq.%0@.9Q[[/t,HZ5BLR>!t`n8PN\g8IB=nNL,2&`J!(lm?mfq1>"YYBlh$1*.$D)S/t8Ou6\emIS!/g?//6DX7VjH)]oZ),CfJ"[dW;%SHjb2nKTR5j+K;YGaD7A^0Heecg.-"C1`43R"T9(."?eoeTi<QRHn"1CTLkr8kH&8!iEdp:J.\V[cBf%@"+MGF]&_J`ctbG,!a[2%TBNajjC0c-DNV4;7]656Q9d$<SGIr(;nk",ej[LZ]gq\!h^V2iC6RmjSDU+KrG(b-E(Rt]o<bluS=jKI&6!I?h!0@%AD'@tQj%+7%B%btG^p:XafgLU[%='+),#Y^_N%$]?9[99hGU:O&>$4JKLhX6B1K.f$d49.$r;7#JiS"B<dRAk="[d^pEph$@71%jld^coec7cEW%-<mKY.r?IRWk9iabI#p=[.__s1>IcR>,t%'.4pk51d.RSb7e^l"dAZ_ZV,X8H=^o"H1@i;Mq<Z#8CWS[L3TP.VK3@V06;73gT/\Y%]MK7J3IU@pY_0E=P%^c&>,1KYBhKgF8T,3#f%HtWI)D>S*?DEM+@/';Tnp.^'6365FKGqUlDA[*9+gQgF=g'5&PGea%Rm`TQ>pRo%_9=[kY)'NoP#S[j9V[$d7?V<_puR%f,NdYulbgp4/aRG8p"kpuR5m=f0<["_kfo`$+];oATgN)gJ9^cGVE%^GAR<AiAbME^P*4Og%K>+P/H1kQH8@.WGHXI>GCtMPU-5UqkWE>`A%^[<m]`SFi+1ZkE&g</J],XJ;h,.T1#gXm<-CcR('\WNbjIu+"+=,FDZBR0^dqG@@%,UbS=^G&&2@Pt%=nd^jXX.6Gc)5&AR&Di5K7'g)@&a],c9u`LQdJ)!]68n"i$>[j3(":<1;N8.HQW..jc8^O?@N+X7;/JupRr_.k%bkoQ+Xr-TANNLhja4pa*;JrSrj/#t:g[CL@kZ3;bDC6'QG.WjGrAHQDdqkm!)f(KnC\o][,UC&l1g9(%jbXI3nI,'>"&r2Ed4Op"%jL/I+]KD;QIEW1e&XA?7_L(WJ5c.)HJL"g$:^B',TFl3"P$5(7j/n"@lW4ruX'ALn;Gp^mUN&._ZHYr/aN3`Nnn&3q9\^anOP1U+%;'ETG7qZag*(aY.*97=GOW'N77$9S`U`##GLcZ@g#]5PiUt3R)Xu&\8;FO3dOD2)IgSH@F[Jbl.MakcDpR7\?n2\n@D%*ISbcSCo%p4*6,>,s5G%\fFS3r!S`+bJ4^qe="pA<WM;=@7JR9FVJJO4WIT[T8QSk$f7ro?<2Qs7ccTg'H4FWLn2Ti.ItcTpn#639"l-O%W?H%E?A8Krg3#-.O"UWoV7bL%NNg=A0crRe4N%*R^th=R`7,<WcP>.P#S\4R7?N-Mj,;a0meEll!"#m2sul_S_W-G1TK=>\'7[?,#FH1%/;#LT66kR\5"XDPh2R56B<,IJh>8Is,Uo]EVU;obY/,m8e3q#Pm#dCZq_dI;'m+p/q:B9U:N)3Hh[h+@$#rFtKpZ[e+s@f*A0gj.%9E4%9-UP0<rQnq?8k)^@.[GTuYcYLnZMJ69ceg*N,>,JKIaPH5$k3rgOg(Q1>@4YhKjZ]eoQoHpHHI35>)UA@U/fIjN4$_p'@n[p%2JH0T7MN/V,^PhY_b')/M-h$QP?snp3,*Bp^G4m;.s/*?X^CUh7B-<G!D.rA,-qPpk.`Vtm#-WZr>s.=s&MZg;HcJ`C!TmZYE)0^%D8c>^XiP,"40%lm+uW6MmNITHR26ll<cEr=jCnU>prX"\a\57B2@U6.Q7i?E1N.Xp;8;(1g<4.t52NB(V.>IN7cWd%9n(gLNlG/E%CYDI3[eJFo\2Cu4ppdk_N_Zhmg>d7<IBQ*/EDrmp)E1rUabVn/`jdrc'DKfoc^S`d,q3P'VMBSB=[UliU.g^Tk3'*_@T1%7!*KpL%bAcI_2HFf+mJ.9*b=!g'Tf5#A=_Pp1X?okt-:o&D19O0>86ISjp&CMQ4kup&^Iqf1o?egJRYE/7L[Ji$@QpZk$mXsG[t8I!XKRli%M*9J^nBar::1;D.f(CPZlBI\Rr=FsMVD[8`MNum`.op_P[VF'r8s5@k@N(6t.8A]ama6DkIRq&9,$LQ*)l/&Pq:^PZksLJc`Ws@&%l"MK-p81&X;We4U[?un\]QbTQ70hC'WLIVH9&_TIOSlFM.nQ"!2S_0'kN=[7Z=NmMMU2T/_^+M:=i)HL7k"rdMDQ*&8PmO6PV<Ed%4Wr3u<"k7Ra^Gf&kUqW^E9OnR-Ge+!WaQM[+>:@eE6,[3-@%JOL.V6`W!<E-'JX'gN)"3>UBP=S+#e@mT07rY4R'E@O0)gbTu6c!%7fsqq9B6,j;@SBi1D/Sjl2M!3B$YEP76Y&M(&)r@52NB+V.>RQ7f,;(m7<8i@kWk1BuD&?s3daO@-F`XUHeXZqWRB#XZlSS8k4@c%*T[`?Pkult=GE`7ThB/=Na5hH:6ZX.Zp'JM.iUUXC=E$toT8(JF(0'=Rue#$jo*0m?\?I2;r2N,`.U*9CYXSjcOEQAPLR_t^R0\E%]U?9;8)@ThVWl/`N]eGGpii2@'He^H`AH;HkB&LlhIuh=mGnAM1DAc`C5QP<7Ot5T$!je`adVnlh!_a+SX&S^0D1%t9hIi*p;1U.%9L:'`.4Q0<)4>2*]-E@qW@="<ZBVF&dqG@$VjZYeng'3V4\=kNgu?tG\&m9RG9AL]lo!kuYrgj,B\_5jc&&5d.-o8,'`kgNZS!RL%]A=lE)r:TOD0Si=hPRd(>"M>TMeTQ%HBPSDG&sJVJ_=sGRSkj\E%Pq+15dgVj*L>EqP*^X^Juko-D^gIC9](adSL<FV4ACn!KA*j%itG?*YkM*]NCP8n*OW2;1`+VST3\o^P*4f@`0;<FS\iisfDBl.$3q?u0XW]\q:u:#Y=eD8jV4;X66[M"%SVAHUuIoLiGuYC19r<r%bLhb1/2K_2BAVou5]RKm<g&X.@N+X7ZT("]/p.qZ`G-b#,_e=me/5MYn+d&'B$;63/5Db+?J5mbW_)D^2OfMU35*fYZU.+!`)2TX%oMY!C.I0^&LNU!B5]2`3f==$uIs$a?,[EfUN)ti0GB[r=GW];W\5_#CAtA11V9D?ZXD!FbC@Hi6!c\nDP&ZQFS&h^pV.>IN7cXEg%iBF(:$[,5TbW,\Cn+&FQShtU6W7Y9K!o8(P"-4$b>AsRRGV[-9]sXQ1(3DbtPE8`%8Ri!WMItQSGk?6m_NWPC;USfDUOBP/9.`N!%K_*"Wag#jKfm&-b_7&^^($U%t!qb:>DUo*&U[R3f)dL:O'44?D@`M=Z$#.%Mo`^8#=3\)6c)bK\Q1qa'PpB@'8Y4<fD[%+q,rRbM%*a&*OAV"nO^bLSTR;G6`Zq>*X.Ck"+jV&;bXt;N)/mC^F>_$=CAMYZ2on8&MeIthQ;UScCUNL_&KI<JqS.W&B@-6jI9j8rS)`Baj%9fH7cj_!^?]_AA)&0163:/OWSB?"T/A>Eq_A8K4Sa%S!A6QU0rQH<<%8t(t.@@pg-#U@;Ab+K`Za&\kbmEMh=J\\Q6P`'E4M8#jm%'bF9O!g_giDl/Dr[+*`]U/3R5kPdB+i;f+%J7YObBL_%I4od$L1SY!r<(d;!d\(iQN6sQu1N0HuOT/uae)fk+MYV;IX"Psbe6Wu#%-6`(<)5D,k9_9EP4F<KtQ)(4dQq$sfj,FHn'ee#<HXq;p)<sk,pY(ff&XCRude63`Qkj=<$RqM"71)'0Kh4g^A9MSnebskK9Mmi5%+*B[g-*t3S8TQVGp:Y![kAo,fL3m>$1l&5Q?K-o`ANFGsQfI@Rbj7[Z,qduufrL-2iKqi=G%<Af26LD:D))]i0+[57c:U[.(m@@_%FnI:EO,McqHfT6:#cb68!li_[Akkdf%1RfK?R;N/Etp-7C)&'=7r8VZ9Po?r`:QT]\(A&Rct[c/+BbJJ5d0lEo""TMoSJN/9fC8"%QP[_mY#qd%D9nHk$bMVghOeB,bC\0mNdUIuc(%]`[:.oHP7W\.,h3>OY\_6iVRU#\?L)i$16)dF,UL^S1tq,Pjh]N;\qg0>e^uK`%HS6toJ>q#M_'i`+=b^&<9?T(Y*)"U56mYLP1*A55bClj-)44%F15o;'Q:\.*ZqT&LC"]P828BU/P)<")W&hcBA_<S$A+U;&8!`1*%_A"mr41j_/dr^)fk^>"]QKA.#8VfN(`k$Y5GqVk`+aH1sR]MdMUq)j^ql1<7I=UNqH=5W$ag$?I(qm5tJ!&np=Ydt2X'?Q9.GmTg%,u9<BWFkGVVU/I+o\;JXa8T@Wj[cE4i.,OKmi,Cik;T\ecI%9m=J`R4@%^nCk4o7V>0gL_&;L7NK;)`r%M,QVL"+>@;DAJ\R)347%3=hU58JrfmYG@^[.nN<R0obo&3O(=.[G]>n#NW1JNOMp"lb,#rX,h;$rhj9oqtkl9B:7N2:CEYX8SU`GNJW=umCb5tX=$s-2>3X/%*0("[%&%&P7AR:m7akU@Z1?=[h_G)FCA5>^koGe>)r%YIHZrA3k?r,'Z[s+)VXN3j4cjb@;?C^D$\o8u_i6C(D4WUh[[47"2KgbM%:s(h_l![`NIV3k]@e0]n<Gmdr)4)ti+kGE0oY^IJ.kde,GM:9R(m@KqY/]c`/]B4ublgGpjhCn@ikcThocBhjQHerQ`4pq*7B3n)%##(e?^<MXD[qb_pH&:9#7(U,Q;iL6c&\I49/*DuGT_<QijcgC)hK?#7RFi=ZTqmNuplo6HB+$Ncr8I0n8s*!aP27B$XfM7Fl/pin%EB6@-)h<RI3sJXmq(r>i!pg)0mdpjr@mID):To;E2P0Y%Vt^O+`rKWJ]'YH`K5'^9m)s>Sj<ajf;+>;YAi-[Y!Dm"0WT)uieNJH<%H+<S1"m_N*oHkb4)WC;rD>H85a#u8hp*Ni.]_TWHHgscV;aG@79u6D+X[9CfjMo(h.a5.qP*4fM)Qg&%!"_&jC]dYs]=N?A/iu@Y%agAB5DHWSO8UfIOZ&1P.)VbIm<#c?fUIZ^V/(8MhPhEDj_Yr2"38MGWP`f"N-(.6gC?>g.=64`k0`*?IZ74osoUI[YTiG&Kb0!pS%-a])K<l]X@F=Jn;]_3h^hutitOHVi*.[7'0^sgI9H8d8_-KO2].M\pl$&Af?C8!Ql:Y"J6O;IrQPm7,JWB%tA,T]B#)(R.^DUQp;%8:g]8k[V^qMNh7L7KJt.AJBQsO10]uY1h-3'Nj%Xb:'n">9ul./u&EqBO!->;pC!>*\i.Za?0n*V]mM*Ak,UBraN=:m&r9E*/.o/%UpmM5&CMg3Oc[\IPCh'&T)8<LJTjOaXfICM,b9@_PGO-g+<%A_Z'.j7?!J`O_!9'#[T,$"AdIQ[[T,;JB3U(2+5898gXoQCLtX=X%.%;BIL^b"[SD,Mq.7p(?>D:HcYACcVctsL==RGdE^*u8l6StpEs!>p.lB:CeeC7,i;XCl,-6[\+'hZqK7.WR3+-MnP<3ZU#K6=TV%901bK6[E,t;OP5jqrQ_&j+Y>JeD8Fe/jN\3!G(Bm6\i,F8p4g*6>F=W!%&=6o4FbL+kb+6iREq`ON/RIn+sFl+mCSQdCT1f+iZYm%oB1%"23/VV`@RICN3/I@0&AV;0]--HR&4Rq\o`@[UiaS8LkI=JPq&)`M4%sL3$*"hZm;In<,;T_BO+?Z"l\b/8gEK)gOcJ%A%A+P%JcW;mMmbnA!nFg,iPMRqhbcoeN`$NC@?o2mr&,3+g":\S@&Q%;9W1SWE%5-G3_;kgMeKKC-b%e'8aGFq@XaYe?Q@O%\'GeY5M`rt%gk28P_6)EKBDWR:3.YV/3mORb>(,WER"Sj0Upm\X@]%P/l(3:/,Itf=o'p=o/4Ih.1tq-%WNjHbEk;"$H&ZSF_<ee*PHb5@Koa!h%El+*hT0V22H_R8=T2PmXHX+Wi1I=TD'!gg`);APiRFo(+j12q:[??b2(Xm&iQamh[nGBB!l%.C!GUR'9mN*cmA(/2L"Yi(Xgg;V%%g"cl4A9#k#RcS/_%[i84\%t:6b_*8R0eH)TdWg]I#>-L==`Z>]m&M`/cm6-3"iZ:CV;m,PFpj1bA`JT+-h!JJ,rQgjB=FPdG_W[A%chV0&#[:+BA)dhL9l)GUnKt`<OB.[1k$f7rX%2"4&29HajbQnq/oGmfEW&jfNk@3K[uKVg^7BPQ<,Z-MUDXeaT*c!.^.F46P+"q_%NpE>F[,miUKrC[tahp!m5%U91,dg&tfN)5:i,S+B_EBV9UA'"@HiNiL3@]@OpAEEo*l@cZP8u0J'kbjrrt_J]qq#cUI2i(Nm=2ft%pWn?aj0)hild$Y[J,]#^&&8+aqgZ>Rhq]AQs3L/ks6r7frqc4>5J@*bqsXR[naUOis75:;%jCfHp]#=C[Q#SIs5>Uqrp\P6hu3(@%fDD1(s6\"5?f/Wuno);@bAZkLo]:"QgSV_=op;;#qU_o"(]O*B/,/3Ks"D<::[GhLq#-P_?b^t`dJn7ep[*;,h='8$ci8IkoCm1\%rUE\<5QBass75=pro;%+s5>'V^AI>Jr:&0rs7GUf5QCDs?f->/m>(`9j80A%r"<'0pp^-epRcp5n[G]/If8g8[t"AImt'9oK]:m;%pQ,@Q^V0Sqdp:%E~>%AI9_PrivateDataEnd