%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: trig.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: SamreshNarayan Singh
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 259 191
%%HiResBoundingBox: 0 0 258.9659 190.2032
%%CropBox: 0 0 258.9659 190.2032
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 10698 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD07FF7EFD047D7E527D7DA87D7D7DA87D7D7DA87D7D7DA87DA852%FD047DA87D7D7DA87D7D7DA87D7D7DA8527D7DA87D7D7DA87D7D7DA87D7D%7DA87D8452FD047DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87D7D7DA87D7EFD057DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%A852FD07FFA87EFD16FFA8FD23FFAFA8FD11FFA8FD11FFA8FD11FFA8FD04%FF7DFD07FF84A8FD04FFA8FFFD04A8FD6CFF7DFD07FFA87DFFA85252272E%7D525252A9FFFFA8FFA8FFA8FD64FF7DFD04FFA9A8FFA8A8FFFF277D277D%5259527DA8FFA8FFA8FFA8FFA8FD63FF7DFD04FF5252FFA87DFD06FF7E7D%FF52FD15FFA8FD1BFFA8FD07FFA8FD24FFAFFD0CFFA87DFD04FFA87DFF7D%84FFFD05A87D7DA87DFD0BFFA8A8FD07FFA8FFA8FD19FFA8A8FD06FFA8AF%A8FD19FFA8FFA8FD06FFA8A8A8FD0CFF59FD04FFA8FFFFA87DFF52525227%277D285252A8FFFFA8FFA8FFA8FFA8FFA8FFA8A8FD04FFA8A8FFFFA8FD17%FFA8FD08FFA8FFFFA8FD17FFA8FFFFA8A8FD04FFA8A8FFA8FD0CFF7DFD07%FF7DA8FFFD057D527D7D7DA8FD09FFA8FD08FFAFFD1AFFA9FFFFFFA8FD05%FFA8FFFFFFA8FD1FFFA8FFFFFFA8FD0BFF7DFD07FFA87DFD06FFA8A8FF7D%FD09FFA8FD05FFA8FFFFFFA8FFFFFFA8A8FD1AFFA8FFFFFFA8FD04FFA8FD%15FFAFA8FFFFFFA8FFFFFFA8FD04FFA8A8FD0AFF7DFD07FF84A8FD1CFFA8%FD05FFA8FD15FFA8FD07FFA9FD05FFA8FD2FFF7DFD07FFA87DFD13FFA8FD%05FFA8FFFFA8A8FD04FFA8A8FD13FFA8FD05FFA8FFFFA8A8FD05FFA8FD13%FFA8A8FD08FFA8FD05FFA8FD0AFF7DFD07FFA8A8FD1CFFA8FD21FFA8FFA8%FD1BFFA8FD05FFA8FFA8FD11FF7DFD07FFA87DFD19FFA8A9FFAFFD06FFA8%FD13FFA8FD07FFA8A8FD06FFA8FD1CFFA8A8FD05FFA8FD0AFF7DFD07FF7D%A8FD12FFA8FD27FFA8FD05FFA8FD23FFA8FD07FFA8FD09FF7DFD07FFA87D%FD13FFA8FD07FFA8FD07FFA8FD13FFA8FFFFFFA8FFFFFF7DFD07FFA8AFFD%12FFA8FD07FFA8FD07FFA8AFFD09FF7DFD07FFA87DFD1AFFA8A9FD08FFA8%FD11FFA8FD08FFA8FD08FFA8FD1AFFA8A8FD07FFA8FD09FF7DFD07FFA87D%FD11FFA8A8FD08FFA8FD07FFA8AFFD16FFA9FFFFFFA8FD1AFFA8A8FD07FF%A8FD09FFA8FD08FF7DFD07FFA8A8A8FD19FFA8A8FD08FFA8FD1AFFA8FD08%FFA8FD11FFA8FD08FFAFA8FD07FFA9FD09FF7DFD07FFA87DFD11FFA8FD08%FFA8A8FD08FFA8A8FD0FFFA8FD09FFA8FD09FFA8FD0FFFA8FD09FFA8A8FD%08FFA8FD08FF7DFD07FFA8A8A8FD19FFA8FD09FFA8FD19FFA8FD1BFFA8FD%1BFF7DFD07FFA87DFFA8FD0FFFA8FD07FFA8FFA8FD09FFA8FD0FFFA8FD09%FFA8A8FD08FFA8FD0FFFA8FD09FFA8FFA8FD07FFA8FD08FF7DFD07FF7DA8%FD1AFFA8FFA8FD18FFA8FD04FFA8FFFFFFA8FD23FFA8FFA8FD08FFA8A9FD%07FF7DFD07FFA87DFFA8FD0FFFA8FD07FFA8FD0BFFA8FD0FFFA8FD05FFA8%FFA8A8FD0AFFA8FD0FFFA8FD08FFA8A8FD09FFA8A8FD07FF7DFF7D7DFFA8%7EFF7EA8FD1CFFA8FD21FFA8FFA8FD21FFA8FD0BFFA8FD07FF7DA87D52A8%527DFFA852FFA8FD17FFA8FFFFFFA8FD07FFA8FD0FFFA8FD05FFA9FFA8FD%0BFFA8FD0FFFA8FD07FFA8A8FFFFA8FD07FFAFA8FD06FFA87DFF527D7D59%52FFA884FD10FFA8FD23FFA8FD15FFA8FD0DFFA8FD09FFA8FD0BFFA8FD07%FF7DFFFFA8FFA8FFFFA87DFFA8FD17FFA8FFFFFFA8FD07FFA8FD0FFFA8FD%07FFA8FFFFFFA8FD07FFA8A8FD0DFFAFA8FD07FFA8FFFFFFA8FD08FFAFA8%FD06FF7DFD07FFA8A8FD26FFA8FD0DFFA8FD15FFA8FD23FFA8FD07FF7DFD%07FFA87DFFA8FD0DFFA8FD09FFA8FFFFFFA8FD07FFA8FD17FFA8FFFFFFA8%FD09FFA8FD0CFFA8A8FD07FFA8FFFFFFA8FD09FFA8FD06FF7DFD07FF7DA8%FFFFA8FD15FFA8FD0DFFA8FD0DFFA8FD05FFA8FD07FFA9FD07FFA8FD0DFF%A8FD0DFFA8FD0FFF7DFD07FFA87DFFA8A8FD0CFFA8FD08FFAFA8FFFFFFA8%FD08FFA8A8FD0BFFA8FD07FFA8FFA8FFFFFFA8FD09FFA8FD0BFFA8FD09FF%A8FFFFFFA8A8FD08FFA8FD06FF7DFD07FF7DA8FFFFA8FD15FFA8FD0DFFA8%FD15FFA8FD05FFA8FD15FFA8FD1DFF7DFD07FFA87DFFFFA8A8FD0BFFA8FD%07FFA8FD05FFA8FD09FFA8FD0BFFA8FD09FFAFFFFFFFA8A8FD08FFA8FD0B%FFA8FD09FFA8FD05FFA8FD07FFA8FD06FF7DFD07FF84A8FFFFA8FD15FFA8%FD05FFA8FD1DFFA8FD23FFA8FD05FFA8FD0FFF7DFD07FFA87DFFFFFFA8FD%0BFFA8FD07FFA8A8FD04FFA8FD09FFA8FD0BFFA8FD07FFA8A8FD0EFFA8FD%0BFFA8FD08FFA8A8FD0DFFA8FD06FF7DFD07FFA8A8FD18FFA8FD05FFA8FD%1DFFA8FD05FFA8FD1DFFA8FD0FFFA8FD05FF7DFD07FFA87DFFFFFFA8FD13%FFA8FD0FFFA8FD0BFFA8FD07FFA8A8FD0EFFA8FD0BFFA8FD08FFA8FD06FF%A8FD07FFAFA8FD05FF7DFD07FF7DA8FD0EFFA8FD23FFA8FD19FFA8FD13FF%A8FD0FFFA8FD05FF7DFD07FFA87DFFFFFFA8FD13FFA8FD06FFA9A8FD07FF%A8FD0BFFA8FD07FFA8FD07FFA8FD07FFA8AFFD0AFFA8FD07FFA8A9FD06FF%A8FD09FFA8FD04FF7DFD07FF7DA8FD1EFFA8FD09FFA8FD09FFA8FD19FFA8%FD23FFA8FD05FF7DFD07FFA87DFFFFFFA8FD09FFA8A8FD08FFA8FD07FFA8%FD07FFA8FD13FFA8FD07FFA8FD12FFA8A8FD07FFA8FD07FFA8FD08FFA9FD%05FF7DFD07FF84A8FD04FFA8FD23FFA8FD11FFA8A8FD10FFA8FD09FFAFFD%19FFA8FD05FF7DFD04FFA8FFFFA87DFFFFFFA8A8FD08FFA8FD09FFA8FD07%FFA8FD08FFA8A8FD07FFA8A8FD08FFA8FD07FFA8FD08FFA8A8FD07FFA8FD%09FFA8FD07FFA8A8FD08FFA8FD04FF7DFD04FF7D52FFA87EFD04FFA8FD11%FFA8FD11FFA8FD11FFA8FD11FFA8FD09FFA8FD11FFA8FD07FFA8FD05FF7D%FD04FF5253A8A853A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8%FFA8FFA8FFA87DFD04FFA87DFF7DA8FD04FFA8FD11FFA8FD11FFA8FD11FF%A8FD2DFFA8FD0DFF7DFD07FFA87DFD04FFA9A8FD07FFA8FD07FFA8A8FD08%FFA8FD09FFA8FD07FFA8FD08FFA8A8FD07FFA8FD09FFA8FD07FFA8FD08FF%A8A8FD11FFA8FD04FF7DFD07FF7DA8FD04FFA8FD11FFA8FD09FFA8FD19FF%A8FD09FFA8FD19FFA8FD09FFA8FD0DFF7DFD07FFA87DFD05FFA8FD0FFFA8%FD09FFA8FD09FFA8FD07FFA8FD08FFA8FD12FFA8FD10FFA8A8FD09FFA8FD%07FFA8FD04FF7DFD07FF84A8FD0CFFA8FD2DFFA8FD09FFA8FD19FFA8FD13%FFA8FFFFFF7DFD07FFA87DFD05FFA8FD07FFA8FD07FFA8FD0AFFA8A8FD07%FFA8FD07FFA8FD07FFA8A8FD09FFA8A8FD07FFA8FD07FFA8FD07FFA8AFFD%0AFFA8FD07FFA8AFFFFFFF7DFD07FFA8A8FD0CFFA8FD13FFA8FD0FFFA8FD%09FFA8FD13FFA8FD0FFFA8FD13FFA8FFFFFF7DFD07FFA87DFD05FFA8FD05%FFA8A8FD08FFA8FD13FFA8FD07FFA8FD07FFA8FD0BFFA8FD07FFA8FD06FF%AFA8FD07FFA8FD0BFFA8FD09FFA8FFFF7DFD07FF7DA8FD2AFFA8FD0FFFA8%FD13FFA8FD05FFA8FD1DFFA8FFFFFF7DFD07FFA87DFD05FFA8FD05FFA8FD%09FFA8FD0BFFA8FD07FFA8A8FD04FFA8A8FD08FFA8FFA8FD09FFA8FD08FF%A8A8FD0DFFA8FD0BFFA8FD08FFA8A8FFFF7DFD07FF7DA8FD06FFA8FD0DFF%A8FD15FFA8FD23FFA8FD05FFA8FD21FF7DFD07FFA87DFD05FFA8A8FD04FF%A8FD15FFA8FD08FFA8A8FFFFFFA8FD09FFA8FFA9FD09FFA8FD08FFAFA8FF%FFFFA8FD09FFA8FD15FFA8FFFF7DFD07FF84A8FD06FFA8FD0DFFA8FD15FF%A8FD04FFA9A8FD07FFA8FD31FFA8FD0BFF7DFD07FFA87DFD06FFAFA8FFFF%FFA8FD08FFA8A8FD0BFFA8FD09FFA8FFFFFFA8FD08FFA8A8FD0BFFA8FD09%FFA8FFFFFFA8A8FD08FFA8FD0BFFA8FD09FFA8FFFF7DFD07FFA8A8FD06FF%A8FD0DFFA8FD23FFA8FD0DFFA8FD15FFA8FD0DFFA8FD0BFF7DFD07FFA87D%FD07FFA8FD0CFFA8FD0CFFA8FD09FFA8FFFFFFA8FD08FFA8FD0CFFA8FD09%FFA8FD0CFFA8A8FD15FFA8FFFF7DFD07FF7DA8FD06FFA9FFFFFFA8FD09FF%A8FD23FFA8FFA8FD0BFFA8FD15FFA8FD17FFA8FF7DFFA8A8FFA8A8FFA87D%FD07FFA8FFFFA8A8FD07FFA8FD0EFFA8A8FD07FFA8FFFFFFA8FD07FFA8A8%FFFFA8FD0AFFA8A8FD07FFA8FFFFFFA8FD07FFA8FD0FFFA8FD07FFA8A8FF%7DFF537DA8537DFF7EA8FD22FFA8FD0BFFA8FD09FFA8FD17FFA8FD0BFFA8%FD17FFA8FF7D527D527E5252FFA859FD07FFA8FD0BFFA8FD17FFA8FFFFFF%A8FD07FFA8FFFFFFA9FD0BFFA8FD07FFA8A8FFFFA8FD07FFA8A8FD0EFFA8%FD09FFA87DFF7DA8A8A87EFF84A8FD0AFFA8FD21FFA8FD1AFFA8FD08FFA8%FFA8FD09FFA8FD17FFA8FF7DFD07FFA87DFD07FFA8FD0BFFA8FD0FFFA8FD%07FFFD04A8FD08FFA8FD0FFFA8FD08FFA8A8FD09FFA8FD0FFFA8FD08FFA8%FF7DFD07FF7EA8FD08FFA8FD23FFA8FD23FFA8FFA8FD23FF7DFD07FFA87D%FD07FFA8FFA8FD19FFA8FD08FFA8A8FD09FFA8FD0FFFA8FD09FFA8FD09FF%A8FD19FFA87DFD07FF7DA8FD08FFA8FD09FFA8FD19FFA8A8FD08FFA8FFFF%FFA8FD31FFA8FD09FF59FD07FFA87DFD08FFA8A8FD07FFA8A8FD10FFA8FD%09FFA8FD08FFA8A8FFFFFFA8FD0BFFA8FD09FFA8FD09FFA8FD19FFA859FD%07FFA87DFD08FFA8A8FD08FFA8FD11FFA8FD08FFA8FD08FFA8FD11FFA8FD%08FFA8FD08FFA8FD11FFA8FD09FF7DFD07FFA87DFD09FFA8FD07FFA8AFFD%10FFA8FD09FFA8FD07FFAFA8FD04FFA9FD15FFA8FD08FFA8A8FD11FFA8FD%07FFA87DFD07FF84A8FD08FFA8AFFD1AFFA8FD08FFA8FD08FFA8FD11FFA8%FD08FFA8FD08FFA8FD1BFF52FD07FFA87DFD08FFA8A8FD07FFA8FD13FFA8%FD07FFA8FD07FFA8FD13FFA8FD07FFA8FD07FFA8A9FD12FFA8FD08FF7DFD%07FFA8A8FD24FFA8FD07FFA8FFA8FD23FFA8FD23FF7DFD07FFA87DFFA8FD%05FFA8FFA8FD07FFA8FD13FFA8FD07FFA8FD07FFA8FD13FFA8FD06FFA8A9%FD07FFA8FD13FFA9FD08FF7DFD07FF7DA8FD0AFFA8FD05FFA8FD1DFFA8FD%0BFFA8FD0FFFA8FD05FFA8FFA8FD1BFFA8FD07FF7DFD07FFA87DFFA8FD05%FFA8FFFFA8A8FD04FFAFFD14FFA8FD05FFA8FFFFA8A8FD05FFA8FD05FFA8%FD0DFFA8FD05FFA8FFFFFFA8FD05FFA8FD13FFA8A9FD04FFA8A9FF7DFD07%FF7DA8FD0AFFA8FD05FFA8FD15FFA8FD0DFFA8FD15FFA8FD0DFFA8FD1BFF%A9FF7DFD07FFA87DFFA8A8FD04FFA8FFFFFFA8FFFFFFA8FD1BFFA8FFFFFF%A8FFFFFFA8FD07FFA9FD0EFFA8A8FFFFFFA8FFFFFFA8FD04FFA8FD16FFA8%FFFFFFA8FFFF7DFD07FF84A8FFFFAFFD08FFA8FFFFFFA9FD16FFA8FFFFFF%A8FD05FFA8FFFFFFA9FD1FFFA8FFFFFFA8FD1AFFA8FFFF7DFD04FF7D7DFF%A87DFFFFFFA8FFA8FD05FFA8A8FFA8A8FD17FFA8FFA8FD06FFA8A8FFA8FD%17FFA8FFA8A8FD05FFA8A8FFA8FD17FFA8FFFFFFA8FFFF7DFFFFFFA87D52%FFA87DA8FFFFFFA8FD07FFA8A8A8FD19FFA8FD08FFA9A8FD19FFA8FD09FF%A8FD19FFA8A9FD04FF52FFFFA8A8A87DFFA87DFD76FF7DFD07FF7DA8FD3A%FFA8FD3BFF7DFD07FFA87DFD3BFFA8FD3AFF7DFD07FF7DA8FD3AFFA8FD3B%FF7DFD07FFA87DFD04FFA8FD11FFA8A8FD10FFA8A8FD10FFA8A8FD11FFA8%FD11FF7DFD11FFA8FD04FF7DFD07FFA87D7D847D7D597E7D7D7D847D7D7D%847D7D7D847D7D7DA87D7D7D847D7D7D847D7D7D847D7D7D847D7E59FD04%7D847D7D7D847D7D7D847D7D7DA87D7D7D847D7D7D847D7D7D847D7D7D84%FD077D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D%7D84FD077DA853FD08FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFFFFFA8FFA8FD0EFF52FD11FF53A8FD10FF7DFD10FFA952FD11FF%7DFD11FF7DA8FD10FF53A8FD11FF7D5259FD0FFF7D527DFD0FFFA8527EFD%0FFF527D7DFD0FFFA852A8FD0FFFA8597DFD10FF5252FD10FFA87D52A8FD%0EFFA87D27A9FD0EFFA9A87DA8FD0FFF8452A8FD10FF7DAFFD10FF27A8FD%10FF527DFD21FFA8FFFFA8A8FD22FFAFFD24FFA8FD11FFA8FD04FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:45:58+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T13:45:58+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T13:45:58+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>188</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qlvmf/lG9W/5g7j/k&#xA;02KsSXR/yy0LyRZa3rejabDZxWtr69wbCOZy8wSNfhjieR2aRwNgTirHrfzN+Q0er6tFJp1os0MS&#xA;XHoy6UBGYV0/6+Hjf0iic4A54SFHLI3w9CVU70q7/KLVNSt9NtfLtoLuWZ7OZJdLjiEF5HFJM1rK&#xA;zxger6dvI1E5CgrWjIWVZR/gLyN/1Lumf9IVv/zRirv8BeRv+pd0z/pCt/8AmjFVC/8Ay58kXVjc&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:CE0E949C4FD1DF11B96BBDB365EB4FA0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:CF0E949C4FD1DF11B96BBDB365EB4FA0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -190.203 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 190.203 li
258.966 190.203 li
258.966 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
258.716 167.6 mo
255.565 167.6 li
16.2656 167.6 mo
19.4155 167.6 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 49 /one putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437917 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A75CA669> |-/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/MIJMQZ+Helvetica /Helvetica findfont ct_VMDictPut/MIJMQZ+Helvetica*1 [45{/.notdef}rp /hyphen 3{/.notdef}rp /one 206{/.notdef}rp]MIJMQZ+Helvetica nfMIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf5.83594 169.933 mo(-1)[2.33105 0 ]xsh258.716 128.7 mo
255.565 128.7 li
16.2656 128.7 mo
19.4155 128.7 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQZ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D088E8E1B4A929D159FDB3710FCCC02057052369E6> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQZ+Helvetica /Encoding getdup 46 /period putdup 48 /zero putdup 53 /five putpop%ADOEndSubsetFont
/MIJMQZ+Helvetica*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]MIJMQZ+Helvetica nfMIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf0 131.034 mo(-0.5)[2.33105 3.89209 1.9458 0 ]xsh258.716 89.75 mo
255.565 89.75 li
16.2656 89.75 mo
19.4155 89.75 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQZ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQZ+Helvetica /Encoding getdup 32 /space putpop%ADOEndSubsetFont
/MIJMQZ+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]MIJMQZ+Helvetica nfMIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf6.21875 92.0811 mo( )sh8.17188 92.0811 mo(0)sh258.716 50.8496 mo
255.565 50.8496 li
16.2656 50.8496 mo
19.4155 50.8496 li
@
MIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf0.390625 53.1826 mo( 0.5)[1.9458 3.89209 1.94629 0 ]xsh258.716 11.9497 mo
255.565 11.9497 li
16.2656 11.9497 mo
19.4155 11.9497 li
@
MIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf6.21875 14.2842 mo( )sh8.17188 14.2842 mo(1)sh27.2656 0.25 mo
27.2656 3.3999 li
27.2656 179.3 mo
27.2656 176.149 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQZ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319EB739C72B00D2CC4607F53D8DAA36825DF613C6C839053BC26A7859D8AA158786D28D1E4DE04046CE941E5159199A77FA8129F02A3ECB8D9E54C278D22D0348DFB3C3C73F55886BF824DB1B2BE764C084A332EAF6E03DAE2729DE4723D54D14DE5E36772632D9593B8015D82D91A7513CF83AED18BF899FB582C1516AE5C3CE963C7A9224066B2CB5D769E52069DB2172C52452A135E45CF579C1E7FB12BEA387FFB8E1E9EB90D4F6BF80D4DDA346E7141D8646431020D523BDB64> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQZ+Helvetica /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/MIJMQZ+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /.notdef /three /.notdef /five 202{/.notdef}rp]MIJMQZ+Helvetica nfMIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf22.9844 188.628 mo(-3)[2.33105 0 ]xsh64.0156 0.25 mo
64.0156 3.3999 li
64.0156 179.3 mo
64.0156 176.149 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQZ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQZ+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/MIJMQZ+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 202{/.notdef}rp]MIJMQZ+Helvetica nfMIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf59.7344 188.628 mo(-2)[2.33105 0 ]xsh100.766 0.25 mo
100.766 3.3999 li
100.766 179.3 mo
100.766 176.149 li
@
MIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf96.4844 188.628 mo(-1)[2.33105 0 ]xsh137.516 0.25 mo
137.516 3.3999 li
137.516 179.3 mo
137.516 176.149 li
@
MIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf134.406 188.628 mo(0)sh174.216 0.25 mo
174.216 3.3999 li
174.216 179.3 mo
174.216 176.149 li
@
MIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf171.102 188.628 mo(1)sh210.966 0.25 mo
210.966 3.3999 li
210.966 179.3 mo
210.966 176.149 li
@
MIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf207.852 188.628 mo(2)sh247.716 0.25 mo
247.716 3.3999 li
247.716 179.3 mo
247.716 176.149 li
@
MIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf244.602 188.628 mo(3)sh0.125 lw
[0.5 1 ] 0 dsh
137.516 179.3 mo
137.516 0.25 li
16.2656 89.75 mo
258.716 89.75 li
@
0.5 lw
[] 0 dsh
16.2656 0.25 mo
16.2656 179.3 li
258.716 179.3 li
258.716 0.25 li
16.2656 0.25 li
16.2656 0.25 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQZ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B81F2C36CCD20CF8942181AC7F4474F2382F7D30DE700E9D560AD8BD19EE22EACC9412684566AC63B0B33E5FC85E602E759FFC49BF47306AE7BD9165A4E1D3> |-/parenright <1C60D8A8C9B81F2C36CCD20CF894218194033859F410DA60583B3351294315C6F5C4ACE205E4813D6F508658462783E35F08D53213E9F0ED7984671681D402251A6FDC72> |-/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D72A7354004D800853CB28271AB7834CF7A2CB132BAFF26EF4E9D89B> |-/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA563254EC441C4BC3817B6ABCAA45C3FADDF2A0C1F1BCD1456474D7370B95E3791CB0774B8A788FAD31DAB8E43BE1DDCC8C2722C438CA874C21003F548D691EAB87ADC2BE2D98ABE47C6EE8D76> |-/s <1C60D8A8C9B7A73DF2FC7D734CFF3CEE44DEE08B4814311F759A12C668E2414B1F185B71CDFB81A4EFE4B67531A5BC3DCC468E7336CC99F93A0F8C9CAAC21479B9DF30E1F20CC55E079066616501132E6501EACD2121153832E7EB63F4284AC03D21E5D5BD534A816A07833E9E45AAF0AF784FB128B27EB090C038A83361862615D53FB49FC431C156AA9A7FD4E2EF50395549EA0CB64112DC> |-/x <1C60D8A8C9B7A73DEE9439F61CF83FD6F0AADDB8373458EFEDE4BF6C46155F8370F02E9CE5FFD24DBE7D153354FABD4F844978ABB054761731A2B93E507FE62552012BB1EB5E1E3EE678332D9E> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQZ+Helvetica /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 105 /i putdup 110 /n putdup 115 /s putdup 120 /x putpop%ADOEndSubsetFont
/MIJMQZ+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 51{/.notdef}rp /i 4{/.notdef}rp /n 4{/.notdef}rp /s 4{/.notdef}rp /x 135{/.notdef}rp]MIJMQZ+Helvetica nfMIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf21.9609 10.5811 mo(sin\(x\))[3.5 1.55371 3.89209 2.33105 3.5 0 ]xsh0.25 lw
242.916 59 mo
243.166 60.5 li
243.416 62 li
243.666 63.5 li
243.916 65 li
244.166 66.5498 li
244.416 68.0996 li
244.615 69.6499 li
244.865 71.25 li
245.115 72.7998 li
245.365 74.3999 li
245.615 75.9497 li
245.865 77.5498 li
246.115 79.1499 li
246.315 80.75 li
246.565 82.3496 li
246.815 84 li
247.065 85.5996 li
247.315 87.1997 li
247.565 88.7998 li
247.815 90.4497 li
248.016 92.0498 li
248.266 93.6499 li
248.516 95.2998 li
248.766 96.8994 li
249.016 98.5 li
249.266 100.1 li
249.516 101.7 li
249.716 103.3 li
249.966 104.899 li
250.216 106.45 li
250.466 108.05 li
250.716 109.6 li
250.966 111.149 li
251.216 112.7 li
251.416 114.25 li
251.666 115.8 li
251.916 117.3 li
252.166 118.8 li
252.416 120.3 li
252.666 121.75 li
252.916 123.25 li
253.115 124.7 li
253.365 126.149 li
253.615 127.55 li
253.865 128.95 li
254.115 130.35 li
254.365 131.7 li
254.565 133.05 li
254.815 134.399 li
255.065 135.7 li
255.315 137 li
255.565 138.3 li
255.815 139.55 li
256.065 140.75 li
256.266 141.95 li
256.516 143.149 li
256.766 144.35 li
257.016 145.45 li
257.266 146.6 li
257.516 147.7 li
257.766 148.75 li
257.966 149.8 li
258.216 150.8 li
258.466 151.8 li
258.716 152.75 li
217.716 47.3496 mo
217.966 46 li
218.166 44.6499 li
218.416 43.3496 li
218.666 42.0996 li
218.916 40.7998 li
219.166 39.5498 li
219.416 38.3496 li
219.666 37.1499 li
219.865 35.9497 li
220.115 34.7998 li
220.365 33.6499 li
220.615 32.5498 li
220.865 31.5 li
221.115 30.3999 li
221.365 29.3999 li
221.565 28.3999 li
221.815 27.3999 li
222.065 26.4497 li
222.315 25.5498 li
222.565 24.6499 li
222.815 23.75 li
223.016 22.8999 li
223.266 22.0996 li
223.516 21.2998 li
223.766 20.5498 li
224.016 19.8496 li
224.266 19.1499 li
224.516 18.5 li
224.716 17.8496 li
224.966 17.25 li
225.216 16.6499 li
225.466 16.1499 li
225.716 15.5996 li
225.966 15.1499 li
226.216 14.6997 li
226.416 14.2998 li
226.666 13.8999 li
226.916 13.5498 li
227.166 13.25 li
227.416 12.9497 li
227.666 12.75 li
227.916 12.5 li
228.115 12.3496 li
228.365 12.1997 li
228.615 12.0498 li
228.865 12 li
229.115 11.9497 li
229.365 11.9497 li
229.615 11.9497 li
229.815 12 li
230.065 12.0996 li
230.315 12.1997 li
230.565 12.3496 li
230.815 12.5498 li
231.065 12.75 li
231.315 13 li
231.516 13.2998 li
231.766 13.6499 li
232.016 14 li
232.266 14.3496 li
232.516 14.7998 li
232.766 15.25 li
232.966 15.6997 li
233.216 16.25 li
233.466 16.75 li
233.716 17.3496 li
233.966 17.9497 li
234.216 18.5996 li
234.466 19.25 li
234.666 19.9497 li
234.916 20.6997 li
235.166 21.4497 li
235.416 22.25 li
235.666 23.0498 li
235.916 23.8999 li
236.166 24.7998 li
236.365 25.6997 li
236.615 26.5996 li
236.865 27.5996 li
237.115 28.5498 li
237.365 29.5996 li
237.615 30.5996 li
237.865 31.6997 li
238.065 32.75 li
238.315 33.8999 li
238.565 35 li
238.815 36.1499 li
239.065 37.3496 li
239.315 38.5498 li
239.565 39.7998 li
239.766 41.0498 li
240.016 42.2998 li
240.266 43.5996 li
240.516 44.8999 li
240.766 46.25 li
241.016 47.5996 li
241.266 48.9497 li
241.466 50.3496 li
241.716 51.75 li
241.966 53.1499 li
242.216 54.5996 li
242.466 56.0498 li
242.716 57.5 li
242.916 59 li
192.466 167.6 mo
192.716 167.6 li
192.966 167.6 li
193.166 167.5 li
193.416 167.399 li
193.666 167.3 li
193.916 167.1 li
194.166 166.95 li
194.416 166.7 li
194.666 166.45 li
194.865 166.149 li
195.115 165.8 li
195.365 165.45 li
195.615 165.05 li
195.865 164.6 li
196.115 164.149 li
196.365 163.649 li
196.565 163.149 li
196.815 162.55 li
197.065 162 li
197.315 161.35 li
197.565 160.7 li
197.815 160.05 li
198.065 159.3 li
198.266 158.6 li
198.516 157.8 li
198.766 157 li
199.016 156.2 li
199.266 155.3 li
199.516 154.45 li
199.766 153.5 li
199.966 152.6 li
200.216 151.6 li
200.466 150.6 li
200.716 149.6 li
200.966 148.55 li
201.216 147.5 li
201.416 146.399 li
201.666 145.25 li
201.916 144.1 li
202.166 142.95 li
202.416 141.75 li
202.666 140.55 li
202.916 139.3 li
203.115 138.05 li
203.365 136.75 li
203.615 135.45 li
203.865 134.149 li
204.115 132.8 li
204.365 131.45 li
204.615 130.1 li
204.815 128.7 li
205.065 127.3 li
205.315 125.85 li
205.565 124.45 li
205.815 122.95 li
206.065 121.5 li
206.315 120 li
206.516 118.55 li
206.766 117 li
207.016 115.5 li
207.266 113.95 li
207.516 112.45 li
207.766 110.899 li
208.016 109.3 li
208.216 107.75 li
208.466 106.2 li
208.716 104.6 li
208.966 103 li
209.216 101.399 li
209.466 99.7998 li
209.716 98.2002 li
209.916 96.5996 li
210.166 95 li
210.416 93.3496 li
210.666 91.75 li
210.916 90.1499 li
211.166 88.5498 li
211.365 86.8999 li
211.615 85.2998 li
211.865 83.6997 li
212.115 82.0996 li
212.365 80.4497 li
212.615 78.8496 li
212.865 77.25 li
213.065 75.6997 li
213.315 74.0996 li
213.565 72.5 li
213.815 70.9497 li
214.065 69.3999 li
214.315 67.7998 li
214.565 66.2998 li
214.766 64.75 li
215.016 63.1997 li
215.266 61.6997 li
215.516 60.1997 li
215.766 58.6997 li
216.016 57.25 li
216.266 55.7998 li
216.466 54.3496 li
216.716 52.8999 li
216.966 51.5 li
217.216 50.0996 li
217.466 48.6997 li
217.716 47.3496 li
167.216 45.8999 mo
167.466 47.1997 li
167.716 48.5996 li
167.966 49.9497 li
168.216 51.3496 li
168.416 52.75 li
168.666 54.1997 li
168.916 55.6499 li
169.166 57.0996 li
169.416 58.5996 li
169.666 60.0498 li
169.865 61.5498 li
170.115 63.0996 li
170.365 64.5996 li
170.615 66.1499 li
170.865 67.6997 li
171.115 69.25 li
171.365 70.7998 li
171.565 72.3496 li
171.815 73.9497 li
172.065 75.5498 li
172.315 77.1499 li
172.565 78.6997 li
172.815 80.2998 li
173.065 81.9497 li
173.266 83.5498 li
173.516 85.1499 li
173.766 86.75 li
174.016 88.3999 li
174.266 90 li
174.516 91.5996 li
174.766 93.25 li
174.966 94.8496 li
175.216 96.4502 li
175.466 98.0498 li
175.716 99.6494 li
175.966 101.25 li
176.216 102.85 li
176.466 104.45 li
176.666 106.05 li
176.916 107.6 li
177.166 109.2 li
177.416 110.75 li
177.666 112.3 li
177.916 113.85 li
178.166 115.35 li
178.365 116.899 li
178.615 118.399 li
178.865 119.899 li
179.115 121.35 li
179.365 122.85 li
179.615 124.3 li
179.815 125.75 li
180.065 127.149 li
180.315 128.55 li
180.565 129.95 li
180.815 131.35 li
181.065 132.7 li
181.315 134.05 li
181.516 135.35 li
181.766 136.649 li
182.016 137.95 li
182.266 139.2 li
182.516 140.45 li
182.766 141.649 li
183.016 142.85 li
183.216 144 li
183.466 145.149 li
183.716 146.3 li
183.966 147.399 li
184.216 148.45 li
184.466 149.5 li
184.716 150.55 li
184.916 151.5 li
185.166 152.5 li
185.416 153.45 li
185.666 154.35 li
185.916 155.25 li
186.166 156.1 li
186.416 156.95 li
186.615 157.75 li
186.865 158.5 li
187.115 159.25 li
187.365 159.95 li
187.615 160.649 li
187.865 161.3 li
188.115 161.95 li
188.315 162.5 li
188.565 163.1 li
188.815 163.6 li
189.065 164.1 li
189.315 164.55 li
189.565 165 li
189.815 165.399 li
190.016 165.75 li
190.266 166.1 li
190.516 166.399 li
190.766 166.649 li
191.016 166.899 li
191.266 167.1 li
191.466 167.3 li
191.716 167.399 li
191.966 167.5 li
192.216 167.6 li
192.466 167.6 li
141.966 60.5996 mo
142.216 59.0996 li
142.466 57.6499 li
142.716 56.1997 li
142.966 54.75 li
143.216 53.2998 li
143.416 51.8496 li
143.666 50.4497 li
143.916 49.0996 li
144.166 47.6997 li
144.416 46.3496 li
144.666 45.0498 li
144.916 43.6997 li
145.115 42.4497 li
145.365 41.1499 li
145.615 39.8999 li
145.865 38.6499 li
146.115 37.4497 li
146.365 36.2998 li
146.615 35.0996 li
146.815 34 li
147.065 32.8496 li
147.315 31.7998 li
147.565 30.6997 li
147.815 29.6499 li
148.065 28.6499 li
148.266 27.6499 li
148.516 26.6997 li
148.766 25.75 li
149.016 24.8496 li
149.266 24 li
149.516 23.1499 li
149.766 22.2998 li
149.966 21.5498 li
150.216 20.75 li
150.466 20.0498 li
150.716 19.3496 li
150.966 18.6499 li
151.216 18 li
151.466 17.3999 li
151.666 16.8496 li
151.916 16.2998 li
152.166 15.75 li
152.416 15.2998 li
152.666 14.7998 li
152.916 14.3999 li
153.166 13.9995 li
153.365 13.6499 li
153.615 13.3496 li
153.865 13.0498 li
154.115 12.7998 li
154.365 12.5498 li
154.615 12.3999 li
154.865 12.1997 li
155.065 12.0996 li
155.315 11.9995 li
155.565 11.9497 li
155.815 11.9497 li
156.065 11.9497 li
156.315 11.9995 li
156.565 12.0498 li
156.766 12.1499 li
157.016 12.2998 li
157.266 12.4995 li
157.516 12.6997 li
157.766 12.9497 li
158.016 13.2495 li
158.266 13.5498 li
158.466 13.8999 li
158.716 14.2495 li
158.966 14.6499 li
159.216 15.0996 li
159.466 15.5996 li
159.716 16.0996 li
159.915 16.5996 li
160.165 17.1997 li
160.415 17.7998 li
160.665 18.3999 li
160.915 19.0996 li
161.165 19.7495 li
161.415 20.4995 li
161.615 21.2495 li
161.865 22.0498 li
162.115 22.8496 li
162.365 23.6997 li
162.615 24.5498 li
162.865 25.4497 li
163.115 26.3496 li
163.315 27.2998 li
163.565 28.2998 li
163.815 29.2998 li
164.065 30.3496 li
164.315 31.3999 li
164.565 32.4497 li
164.815 33.5498 li
165.016 34.6997 li
165.266 35.8496 li
165.516 37.0498 li
165.766 38.2495 li
166.016 39.4497 li
166.266 40.6997 li
166.516 41.9497 li
166.716 43.2495 li
166.966 44.5498 li
167.216 45.8999 li
116.716 166 mo
116.966 166.3 li
117.216 166.6 li
117.466 166.85 li
117.716 167.05 li
117.966 167.25 li
118.216 167.399 li
118.416 167.5 li
118.666 167.55 li
118.916 167.6 li
119.166 167.6 li
119.416 167.6 li
119.666 167.55 li
119.916 167.45 li
120.116 167.35 li
120.366 167.149 li
120.616 167 li
120.866 166.75 li
121.116 166.5 li
121.366 166.2 li
121.616 165.899 li
121.815 165.55 li
122.065 165.149 li
122.315 164.75 li
122.565 164.25 li
122.815 163.8 li
123.065 163.25 li
123.315 162.7 li
123.516 162.149 li
123.766 161.55 li
124.016 160.899 li
124.266 160.2 li
124.516 159.5 li
124.766 158.8 li
125.016 158 li
125.216 157.25 li
125.466 156.399 li
125.716 155.55 li
125.966 154.7 li
126.216 153.8 li
126.466 152.85 li
126.716 151.899 li
126.916 150.899 li
127.166 149.899 li
127.416 148.85 li
127.666 147.75 li
127.916 146.7 li
128.166 145.55 li
128.366 144.45 li
128.616 143.25 li
128.866 142.1 li
129.116 140.899 li
129.366 139.649 li
129.616 138.399 li
129.865 137.1 li
130.065 135.85 li
130.315 134.5 li
130.565 133.2 li
130.815 131.85 li
131.065 130.45 li
131.315 129.1 li
131.565 127.7 li
131.766 126.25 li
132.016 124.8 li
132.266 123.35 li
132.516 121.899 li
132.766 120.45 li
133.016 118.95 li
133.266 117.45 li
133.466 115.899 li
133.716 114.399 li
133.966 112.85 li
134.216 111.3 li
134.466 109.75 li
134.716 108.2 li
134.966 106.6 li
135.166 105.05 li
135.416 103.45 li
135.666 101.85 li
135.916 100.25 li
136.166 98.6494 li
136.415 97.0498 li
136.665 95.4502 li
136.865 93.7998 li
137.115 92.1997 li
137.365 90.6001 li
137.615 88.9497 li
137.865 87.3501 li
138.115 85.75 li
138.315 84.1001 li
138.565 82.5 li
138.815 80.8999 li
139.065 79.2998 li
139.315 77.6997 li
139.565 76.0996 li
139.815 74.5 li
140.016 72.9497 li
140.266 71.3496 li
140.516 69.7998 li
140.766 68.25 li
141.016 66.6997 li
141.266 65.1499 li
141.516 63.6499 li
141.716 62.1001 li
141.966 60.6001 li
91.5156 34.3999 mo
91.7656 35.5498 li
91.9658 36.6997 li
92.2158 37.8999 li
92.4658 39.0996 li
92.7158 40.3496 li
92.9658 41.5996 li
93.2158 42.8999 li
93.4658 44.1997 li
93.6655 45.5 li
93.9155 46.8496 li
94.1655 48.1997 li
94.4155 49.5996 li
94.6655 51 li
94.9155 52.3999 li
95.1655 53.7998 li
95.3657 55.25 li
95.6157 56.6997 li
95.8657 58.1997 li
96.1157 59.6499 li
96.3657 61.1499 li
96.6157 62.6499 li
96.8154 64.1997 li
97.0654 65.6997 li
97.3159 67.25 li
97.5659 68.7998 li
97.8159 70.3496 li
98.0659 71.9497 li
98.3159 73.5 li
98.5156 75.0996 li
98.7656 76.6997 li
99.0156 78.2998 li
99.2656 79.8999 li
99.5156 81.5 li
99.7656 83.0996 li
100.016 84.6997 li
100.216 86.2998 li
100.466 87.9497 li
100.716 89.5498 li
100.966 91.1499 li
101.216 92.7998 li
101.466 94.3994 li
101.716 96 li
101.916 97.5996 li
102.166 99.25 li
102.416 100.85 li
102.666 102.399 li
102.916 104 li
103.166 105.6 li
103.416 107.2 li
103.616 108.75 li
103.866 110.3 li
104.116 111.85 li
104.366 113.399 li
104.616 114.95 li
104.866 116.45 li
105.116 118 li
105.316 119.5 li
105.566 120.95 li
105.816 122.45 li
106.066 123.899 li
106.316 125.35 li
106.566 126.8 li
106.766 128.2 li
107.016 129.6 li
107.266 130.95 li
107.516 132.35 li
107.766 133.649 li
108.016 135 li
108.266 136.3 li
108.466 137.6 li
108.716 138.85 li
108.966 140.1 li
109.216 141.3 li
109.466 142.5 li
109.716 143.7 li
109.966 144.85 li
110.166 146 li
110.416 147.1 li
110.666 148.149 li
110.916 149.2 li
111.166 150.25 li
111.416 151.25 li
111.666 152.25 li
111.866 153.2 li
112.116 154.1 li
112.366 155 li
112.616 155.85 li
112.866 156.7 li
113.116 157.5 li
113.366 158.3 li
113.566 159.05 li
113.816 159.8 li
114.066 160.45 li
114.316 161.149 li
114.566 161.75 li
114.816 162.35 li
115.066 162.95 li
115.266 163.45 li
115.516 163.95 li
115.766 164.45 li
116.016 164.899 li
116.266 165.3 li
116.516 165.649 li
116.716 166 li
66.2656 74.9497 mo
66.5156 73.3496 li
66.7656 71.7998 li
66.9658 70.25 li
67.2158 68.6499 li
67.4658 67.0996 li
67.7158 65.5996 li
67.9658 64.0498 li
68.2158 62.5498 li
68.4658 61 li
68.6655 59.5498 li
68.9155 58.0498 li
69.1655 56.5996 li
69.4155 55.0996 li
69.6655 53.6997 li
69.9155 52.25 li
70.1655 50.8496 li
70.3657 49.4497 li
70.6157 48.0996 li
70.8657 46.75 li
71.1157 45.3999 li
71.3657 44.0996 li
71.6157 42.7998 li
71.8657 41.5 li
72.0659 40.25 li
72.3159 39 li
72.5659 37.7998 li
72.8159 36.5996 li
73.0659 35.4497 li
73.3159 34.2998 li
73.5659 33.1499 li
73.7656 32.0498 li
74.0156 31 li
74.2656 29.9497 li
74.5156 28.9497 li
74.7656 27.9497 li
75.0156 26.9497 li
75.2158 26.0498 li
75.4658 25.0996 li
75.7158 24.25 li
75.9658 23.3496 li
76.2158 22.5498 li
76.4658 21.75 li
76.7158 20.9497 li
76.916 20.25 li
77.166 19.5 li
77.416 18.8496 li
77.666 18.1997 li
77.916 17.5498 li
78.166 17 li
78.416 16.3999 li
78.6157 15.8999 li
78.8657 15.3999 li
79.1157 14.9497 li
79.3657 14.5 li
79.6157 14.0996 li
79.8657 13.75 li
80.1157 13.3999 li
80.3159 13.0996 li
80.5659 12.8496 li
80.8159 12.5996 li
81.0659 12.4497 li
81.3159 12.25 li
81.5659 12.1499 li
81.8159 12.0498 li
82.0156 11.9497 li
82.2656 11.9497 li
82.5156 11.9497 li
82.7656 11.9497 li
83.0156 12.0498 li
83.2656 12.1499 li
83.5156 12.25 li
83.7158 12.4497 li
83.9658 12.6499 li
84.2158 12.8999 li
84.4658 13.1499 li
84.7158 13.4497 li
84.9658 13.7998 li
85.166 14.1499 li
85.416 14.5498 li
85.666 15 li
85.916 15.4497 li
86.166 15.9497 li
86.416 16.4497 li
86.666 17.0498 li
86.8657 17.5996 li
87.1157 18.25 li
87.3657 18.8999 li
87.6157 19.5996 li
87.8657 20.2998 li
88.1157 21.0498 li
88.3657 21.7998 li
88.5659 22.5996 li
88.8159 23.4497 li
89.0659 24.2998 li
89.3159 25.1997 li
89.5659 26.0996 li
89.8159 27.0498 li
90.0659 28.0498 li
90.2661 29 li
90.5161 30.0498 li
90.7661 31.0996 li
91.0161 32.1499 li
91.2661 33.25 li
91.5161 34.3999 li
41.0156 161.6 mo
41.2656 162.2 li
41.5156 162.8 li
41.7656 163.3 li
42.0156 163.85 li
42.2158 164.3 li
42.4658 164.75 li
42.7158 165.2 li
42.9658 165.55 li
43.2158 165.899 li
43.4658 166.25 li
43.6655 166.55 li
43.9155 166.8 li
44.1655 167 li
44.4155 167.2 li
44.6655 167.35 li
44.9155 167.45 li
45.1655 167.55 li
45.3657 167.6 li
45.6157 167.6 li
45.8657 167.6 li
46.1157 167.55 li
46.3657 167.5 li
46.6157 167.35 li
46.8657 167.2 li
47.0659 167.05 li
47.3159 166.8 li
47.5659 166.6 li
47.8159 166.3 li
48.0659 166 li
48.3159 165.649 li
48.5659 165.25 li
48.7656 164.85 li
49.0156 164.399 li
49.2656 163.95 li
49.5156 163.399 li
49.7656 162.899 li
50.0156 162.3 li
50.2656 161.7 li
50.4658 161.05 li
50.7158 160.399 li
50.9658 159.7 li
51.2158 159 li
51.4658 158.25 li
51.7158 157.45 li
51.9658 156.649 li
52.166 155.8 li
52.416 154.899 li
52.666 154 li
52.916 153.1 li
53.166 152.149 li
53.416 151.149 li
53.6157 150.149 li
53.8657 149.149 li
54.1157 148.05 li
54.3657 147 li
54.6157 145.899 li
54.8657 144.75 li
55.1157 143.6 li
55.3159 142.399 li
55.5659 141.2 li
55.8159 140 li
56.0659 138.75 li
56.3159 137.45 li
56.5659 136.2 li
56.8159 134.899 li
57.0156 133.55 li
57.2656 132.2 li
57.5156 130.85 li
57.7656 129.45 li
58.0156 128.05 li
58.2656 126.649 li
58.5161 125.2 li
58.7158 123.75 li
58.9658 122.3 li
59.2158 120.85 li
59.4658 119.35 li
59.7158 117.85 li
59.9658 116.35 li
60.2158 114.8 li
60.416 113.25 li
60.666 111.75 li
60.916 110.149 li
61.166 108.6 li
61.416 107.05 li
61.666 105.45 li
61.916 103.85 li
62.1157 102.3 li
62.3657 100.7 li
62.6157 99.0996 li
62.8657 97.4502 li
63.1157 95.8496 li
63.3657 94.25 li
63.6157 92.6499 li
63.8159 91 li
64.0659 89.3999 li
64.3159 87.7998 li
64.5659 86.1997 li
64.8159 84.5498 li
65.0659 82.9497 li
65.2661 81.3496 li
65.5161 79.75 li
65.7661 78.1499 li
66.0161 76.5498 li
66.2661 74.9497 li
16.2656 26.7998 mo
16.5156 27.75 li
16.7656 28.75 li
17.0156 29.75 li
17.2158 30.7998 li
17.4658 31.8496 li
17.7158 32.9497 li
17.9658 34.0996 li
18.2158 35.1997 li
18.4658 36.3999 li
18.7158 37.5996 li
18.9155 38.7998 li
19.1655 40 li
19.4155 41.25 li
19.6655 42.5498 li
19.9155 43.8496 li
20.1655 45.1499 li
20.4155 46.5 li
20.6157 47.8496 li
20.8657 49.1997 li
21.1157 50.5996 li
21.3657 52 li
21.6157 53.3999 li
21.8657 54.8496 li
22.0659 56.2998 li
22.3159 57.7998 li
22.5659 59.25 li
22.8159 60.75 li
23.0659 62.25 li
23.3159 63.75 li
23.5659 65.2998 li
23.7656 66.8496 li
24.0156 68.3999 li
24.2656 69.9497 li
24.5156 71.5 li
24.7656 73.0996 li
25.0156 74.6499 li
25.2656 76.25 li
25.4658 77.8496 li
25.7158 79.4497 li
25.9658 81.0498 li
26.2158 82.6499 li
26.4658 84.25 li
26.7158 85.8999 li
26.9658 87.5 li
27.166 89.0996 li
27.416 90.75 li
27.666 92.3496 li
27.916 93.9502 li
28.166 95.5498 li
28.416 97.2002 li
28.666 98.7998 li
28.8657 100.399 li
29.1157 102 li
29.3657 103.6 li
29.6157 105.149 li
29.8657 106.75 li
30.1157 108.3 li
30.3657 109.899 li
30.5659 111.45 li
30.8159 113 li
31.0659 114.55 li
31.3159 116.05 li
31.5659 117.55 li
31.8159 119.05 li
32.0659 120.55 li
32.2656 122.05 li
32.5156 123.5 li
32.7656 124.95 li
33.0156 126.399 li
33.2656 127.8 li
33.5156 129.2 li
33.7158 130.6 li
33.9658 131.95 li
34.2158 133.3 li
34.4658 134.649 li
34.7158 135.95 li
34.9658 137.25 li
35.2158 138.5 li
35.416 139.75 li
35.666 141 li
35.916 142.2 li
36.166 143.399 li
36.416 144.55 li
36.666 145.649 li
36.916 146.8 li
37.1157 147.85 li
37.3657 148.95 li
37.6157 149.95 li
37.8657 151 li
38.1157 151.95 li
38.3657 152.95 li
38.6157 153.85 li
38.8159 154.75 li
39.0659 155.649 li
39.3159 156.5 li
39.5659 157.3 li
39.8159 158.1 li
40.0659 158.85 li
40.3159 159.6 li
40.5161 160.3 li
40.7661 160.95 li
41.0161 161.6 li
43.2656 8.25 mo
56.9155 8.25 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMIJMQZ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B7A73DE7D498F17521D6359F9ADD96B62202C43AB7E2B6A506D4DE60506EB0B21A851A7E637BA285607D05D1170907CD76EA31977E70CEDA0DED90924EF61C48FC884B70C05F0A56FF474D664DA9646860BA> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-systemdict /gcheck known {setglobal} if end {end} ifendMIJMQZ+Helvetica /Encoding getdup 99 /c putdup 111 /o putpop%ADOEndSubsetFont
/MIJMQZ+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 45{/.notdef}rp /c 5{/.notdef}rp /i 4{/.notdef}rp /n /o 3{/.notdef}rp /s 4{/.notdef}rp /x 135{/.notdef}rp]MIJMQZ+Helvetica nfMIJMQZ+Helvetica*1 [7 0 0 -7 0 0 ]msf20.0078 17.5889 mo(cos\(x\))[3.5 3.89209 3.5 2.33105 3.5 0 ]xsh[4 2 ] 0 dsh
242.916 161.3 mo
243.166 161.899 li
243.416 162.5 li
243.666 163.05 li
243.916 163.6 li
244.166 164.1 li
244.416 164.55 li
244.615 165 li
244.865 165.399 li
245.115 165.75 li
245.365 166.1 li
245.615 166.399 li
245.865 166.649 li
246.115 166.899 li
246.315 167.1 li
246.565 167.25 li
246.815 167.399 li
247.065 167.5 li
247.315 167.6 li
247.565 167.6 li
247.815 167.6 li
248.016 167.6 li
248.266 167.55 li
248.516 167.45 li
248.766 167.3 li
249.016 167.149 li
249.266 166.95 li
249.516 166.7 li
249.716 166.45 li
249.966 166.149 li
250.216 165.8 li
250.466 165.45 li
250.716 165.05 li
250.966 164.649 li
251.216 164.149 li
251.416 163.7 li
251.666 163.149 li
251.916 162.6 li
252.166 162 li
252.416 161.399 li
252.666 160.75 li
252.916 160.05 li
253.115 159.35 li
253.365 158.6 li
253.615 157.85 li
253.865 157.05 li
254.115 156.2 li
254.365 155.35 li
254.565 154.5 li
254.815 153.55 li
255.065 152.649 li
255.315 151.649 li
255.565 150.649 li
255.815 149.649 li
256.065 148.6 li
256.266 147.55 li
256.516 146.45 li
256.766 145.3 li
257.016 144.149 li
257.266 143 li
257.516 141.8 li
257.766 140.6 li
257.966 139.35 li
258.216 138.1 li
258.466 136.85 li
258.716 135.55 li
217.716 24.5 mo
217.966 25.3999 li
218.166 26.2998 li
218.416 27.25 li
218.666 28.25 li
218.916 29.25 li
219.166 30.2998 li
219.416 31.3496 li
219.666 32.3999 li
219.865 33.5 li
220.115 34.6499 li
220.365 35.7998 li
220.615 37 li
220.865 38.1997 li
221.115 39.3999 li
221.365 40.6499 li
221.565 41.8999 li
221.815 43.1997 li
222.065 44.5 li
222.315 45.7998 li
222.565 47.1499 li
222.815 48.5 li
223.016 49.8999 li
223.266 51.2998 li
223.516 52.6997 li
223.766 54.1499 li
224.016 55.5996 li
224.266 57.0498 li
224.516 58.5 li
224.716 60 li
224.966 61.5 li
225.216 63 li
225.466 64.5498 li
225.716 66.0498 li
225.966 67.5996 li
226.216 69.1499 li
226.416 70.75 li
226.666 72.2998 li
226.916 73.8999 li
227.166 75.4497 li
227.416 77.0498 li
227.666 78.6499 li
227.916 80.25 li
228.115 81.8496 li
228.365 83.4497 li
228.615 85.0996 li
228.865 86.6997 li
229.115 88.2998 li
229.365 89.8999 li
229.615 91.5498 li
229.815 93.1499 li
230.065 94.75 li
230.315 96.3994 li
230.565 98 li
230.815 99.5996 li
231.065 101.2 li
231.315 102.8 li
231.516 104.399 li
231.766 105.95 li
232.016 107.55 li
232.266 109.1 li
232.516 110.649 li
232.766 112.2 li
232.966 113.75 li
233.216 115.3 li
233.466 116.8 li
233.716 118.3 li
233.966 119.8 li
234.216 121.3 li
234.466 122.75 li
234.666 124.25 li
234.916 125.649 li
235.166 127.1 li
235.416 128.5 li
235.666 129.899 li
235.916 131.3 li
236.166 132.649 li
236.365 133.95 li
236.615 135.3 li
236.865 136.6 li
237.115 137.899 li
237.365 139.149 li
237.615 140.35 li
237.865 141.6 li
238.065 142.8 li
238.315 143.95 li
238.565 145.1 li
238.815 146.25 li
239.065 147.35 li
239.315 148.399 li
239.565 149.45 li
239.766 150.5 li
240.016 151.5 li
240.266 152.45 li
240.516 153.399 li
240.766 154.3 li
241.016 155.2 li
241.266 156.05 li
241.466 156.899 li
241.716 157.7 li
241.966 158.5 li
242.216 159.2 li
242.466 159.95 li
242.716 160.6 li
242.916 161.3 li
192.466 90.6499 mo
192.716 89.0498 li
192.966 87.4497 li
193.166 85.7998 li
193.416 84.1997 li
193.666 82.5996 li
193.916 81 li
194.166 79.3999 li
194.416 77.7998 li
194.666 76.1997 li
194.865 74.5996 li
195.115 72.9995 li
195.365 71.4497 li
195.615 69.8496 li
195.865 68.2998 li
196.115 66.75 li
196.365 65.25 li
196.565 63.6997 li
196.815 62.1997 li
197.065 60.6997 li
197.315 59.1997 li
197.565 57.6997 li
197.815 56.25 li
198.065 54.7998 li
198.266 53.3496 li
198.516 51.9497 li
198.766 50.5498 li
199.016 49.1499 li
199.266 47.7998 li
199.516 46.4497 li
199.766 45.0996 li
199.966 43.7998 li
200.216 42.5 li
200.466 41.1997 li
200.716 39.9497 li
200.966 38.7495 li
201.216 37.5 li
201.416 36.3496 li
201.666 35.1499 li
201.916 34.0498 li
202.166 32.8999 li
202.416 31.7998 li
202.666 30.75 li
202.916 29.6997 li
203.115 28.6997 li
203.365 27.6997 li
203.615 26.7495 li
203.865 25.7998 li
204.115 24.8999 li
204.365 24.0498 li
204.615 23.1997 li
204.815 22.3496 li
205.065 21.5498 li
205.315 20.7998 li
205.565 20.0498 li
205.815 19.3496 li
206.065 18.6997 li
206.315 18.0498 li
206.516 17.4497 li
206.766 16.8496 li
207.016 16.2998 li
207.266 15.7998 li
207.516 15.2998 li
207.766 14.8496 li
208.016 14.3999 li
208.216 14.0498 li
208.466 13.6499 li
208.716 13.3496 li
208.966 13.0498 li
209.216 12.7998 li
209.466 12.5996 li
209.716 12.3999 li
209.916 12.25 li
210.166 12.0996 li
210.416 12 li
210.666 11.9497 li
210.916 11.9497 li
211.166 11.9497 li
211.365 12 li
211.615 12.0498 li
211.865 12.1499 li
212.115 12.2998 li
212.365 12.4995 li
212.615 12.6997 li
212.865 12.9497 li
213.065 13.1997 li
213.315 13.5 li
213.565 13.8496 li
213.815 14.25 li
214.065 14.6499 li
214.315 15.0996 li
214.565 15.5498 li
214.766 16.0498 li
215.016 16.5996 li
215.266 17.1499 li
215.516 17.75 li
215.766 18.3999 li
216.016 19.0498 li
216.266 19.75 li
216.466 20.4497 li
216.716 21.1997 li
216.966 22 li
217.216 22.7998 li
217.466 23.6499 li
217.716 24.5 li
167.216 154.05 mo
167.466 154.95 li
167.716 155.85 li
167.966 156.649 li
168.216 157.5 li
168.416 158.25 li
168.666 159 li
168.916 159.75 li
169.166 160.45 li
169.416 161.1 li
169.666 161.75 li
169.865 162.35 li
170.115 162.899 li
170.365 163.45 li
170.615 163.95 li
170.865 164.399 li
171.115 164.85 li
171.365 165.25 li
171.565 165.649 li
171.815 166 li
172.065 166.3 li
172.315 166.6 li
172.565 166.85 li
172.815 167.05 li
173.065 167.25 li
173.266 167.35 li
173.516 167.5 li
173.766 167.55 li
174.016 167.6 li
174.266 167.6 li
174.516 167.6 li
174.766 167.55 li
174.966 167.45 li
175.216 167.35 li
175.466 167.2 li
175.716 167 li
175.966 166.75 li
176.216 166.5 li
176.466 166.25 li
176.666 165.899 li
176.916 165.55 li
177.166 165.149 li
177.416 164.75 li
177.666 164.3 li
177.916 163.8 li
178.166 163.3 li
178.365 162.75 li
178.615 162.149 li
178.865 161.55 li
179.115 160.899 li
179.365 160.25 li
179.615 159.55 li
179.815 158.8 li
180.065 158.05 li
180.315 157.25 li
180.565 156.45 li
180.815 155.6 li
181.065 154.7 li
181.315 153.8 li
181.516 152.899 li
181.766 151.899 li
182.016 150.95 li
182.266 149.95 li
182.516 148.899 li
182.766 147.8 li
183.016 146.75 li
183.216 145.6 li
183.466 144.5 li
183.716 143.3 li
183.966 142.149 li
184.216 140.95 li
184.466 139.7 li
184.716 138.45 li
184.916 137.2 li
185.166 135.899 li
185.416 134.6 li
185.666 133.25 li
185.916 131.899 li
186.166 130.55 li
186.416 129.149 li
186.615 127.75 li
186.865 126.3 li
187.115 124.899 li
187.365 123.45 li
187.615 121.95 li
187.865 120.5 li
188.115 119 li
188.315 117.5 li
188.565 116 li
188.815 114.45 li
189.065 112.899 li
189.315 111.35 li
189.565 109.8 li
189.815 108.25 li
190.016 106.7 li
190.266 105.1 li
190.516 103.5 li
190.766 101.899 li
191.016 100.3 li
191.266 98.7002 li
191.466 97.0996 li
191.716 95.5 li
191.966 93.8994 li
192.216 92.25 li
192.466 90.6499 li
141.966 17.5996 mo
142.216 18.1997 li
142.466 18.8496 li
142.716 19.5498 li
142.966 20.25 li
143.216 21 li
143.416 21.7998 li
143.666 22.5996 li
143.916 23.3999 li
144.166 24.25 li
144.416 25.1499 li
144.666 26.0498 li
144.916 27 li
145.115 28 li
145.365 29 li
145.615 30 li
145.865 31.0498 li
146.115 32.0996 li
146.365 33.1997 li
146.615 34.3496 li
146.815 35.5 li
147.065 36.6499 li
147.315 37.8496 li
147.565 39.0498 li
147.815 40.2998 li
148.065 41.5498 li
148.266 42.8496 li
148.516 44.1499 li
148.766 45.4497 li
149.016 46.7998 li
149.266 48.1499 li
149.516 49.5 li
149.766 50.8999 li
149.966 52.2998 li
150.216 53.75 li
150.466 55.1997 li
150.716 56.6499 li
150.966 58.0996 li
151.216 59.5996 li
151.466 61.0996 li
151.666 62.5996 li
151.916 64.0996 li
152.166 65.6499 li
152.416 67.1997 li
152.666 68.75 li
152.916 70.2998 li
153.166 71.8496 li
153.365 73.4497 li
153.615 75.0498 li
153.865 76.5996 li
154.115 78.1997 li
154.365 79.7998 li
154.615 81.3999 li
154.865 83.0498 li
155.065 84.6499 li
155.315 86.25 li
155.565 87.8496 li
155.815 89.5 li
156.065 91.0996 li
156.315 92.6997 li
156.565 94.3496 li
156.766 95.9502 li
157.016 97.5498 li
157.266 99.1494 li
157.516 100.75 li
157.766 102.35 li
158.016 103.95 li
158.266 105.55 li
158.466 107.1 li
158.716 108.7 li
158.966 110.25 li
159.216 111.8 li
159.466 113.35 li
159.716 114.899 li
159.915 116.399 li
160.165 117.899 li
160.415 119.399 li
160.665 120.899 li
160.915 122.399 li
161.165 123.85 li
161.415 125.3 li
161.615 126.7 li
161.865 128.149 li
162.115 129.5 li
162.365 130.899 li
162.615 132.25 li
162.865 133.6 li
163.115 134.95 li
163.315 136.25 li
163.565 137.55 li
163.815 138.8 li
164.065 140.05 li
164.315 141.25 li
164.565 142.45 li
164.815 143.649 li
165.016 144.8 li
165.266 145.95 li
165.516 147.05 li
165.766 148.1 li
166.016 149.149 li
166.266 150.2 li
166.516 151.2 li
166.716 152.2 li
166.966 153.149 li
167.216 154.05 li
116.716 105.55 mo
116.966 103.95 li
117.216 102.35 li
117.466 100.75 li
117.716 99.1494 li
117.966 97.5498 li
118.216 95.9502 li
118.416 94.3496 li
118.666 92.6997 li
118.916 91.0996 li
119.166 89.5 li
119.416 87.8496 li
119.666 86.25 li
119.916 84.6499 li
120.116 83.0498 li
120.366 81.3999 li
120.616 79.7998 li
120.866 78.1997 li
121.116 76.5996 li
121.366 75.0498 li
121.616 73.4497 li
121.815 71.8496 li
122.065 70.2998 li
122.315 68.75 li
122.565 67.1997 li
122.815 65.6499 li
123.065 64.0996 li
123.315 62.5996 li
123.516 61.0996 li
123.766 59.5996 li
124.016 58.0996 li
124.266 56.6499 li
124.516 55.1997 li
124.766 53.75 li
125.016 52.2998 li
125.216 50.8999 li
125.466 49.5 li
125.716 48.1499 li
125.966 46.7998 li
126.216 45.4497 li
126.466 44.1499 li
126.716 42.8496 li
126.916 41.5498 li
127.166 40.2998 li
127.416 39.0498 li
127.666 37.8496 li
127.916 36.6499 li
128.166 35.5 li
128.366 34.3496 li
128.616 33.1997 li
128.866 32.0996 li
129.116 31.0498 li
129.366 30 li
129.616 29 li
129.865 28 li
130.065 27 li
130.315 26.0498 li
130.565 25.1499 li
130.815 24.25 li
131.065 23.3999 li
131.315 22.5996 li
131.565 21.7998 li
131.766 21 li
132.016 20.25 li
132.266 19.5498 li
132.516 18.8496 li
132.766 18.1997 li
133.016 17.5996 li
133.266 17 li
133.466 16.4497 li
133.716 15.8999 li
133.966 15.4497 li
134.216 14.9497 li
134.466 14.5498 li
134.716 14.1499 li
134.966 13.75 li
135.166 13.4497 li
135.416 13.1499 li
135.666 12.8496 li
135.916 12.6499 li
136.166 12.4497 li
136.415 12.25 li
136.665 12.1499 li
136.865 12.0498 li
137.115 11.9497 li
137.365 11.9497 li
137.615 11.9497 li
137.865 11.9497 li
138.115 12.0498 li
138.315 12.1499 li
138.565 12.25 li
138.815 12.4497 li
139.065 12.6499 li
139.315 12.8496 li
139.565 13.1499 li
139.815 13.4497 li
140.016 13.75 li
140.266 14.1499 li
140.516 14.5498 li
140.766 14.9497 li
141.016 15.4497 li
141.266 15.8999 li
141.516 16.4497 li
141.716 17 li
141.966 17.5996 li
91.5156 144.5 mo
91.7656 145.6 li
91.9658 146.75 li
92.2158 147.8 li
92.4658 148.899 li
92.7158 149.95 li
92.9658 150.95 li
93.2158 151.899 li
93.4658 152.899 li
93.6655 153.8 li
93.9155 154.7 li
94.1655 155.6 li
94.4155 156.45 li
94.6655 157.25 li
94.9155 158.05 li
95.1655 158.8 li
95.3657 159.55 li
95.6157 160.25 li
95.8657 160.899 li
96.1157 161.55 li
96.3657 162.149 li
96.6157 162.75 li
96.8154 163.3 li
97.0654 163.8 li
97.3159 164.3 li
97.5659 164.75 li
97.8159 165.149 li
98.0659 165.55 li
98.3159 165.899 li
98.5156 166.25 li
98.7656 166.5 li
99.0156 166.75 li
99.2656 167 li
99.5156 167.2 li
99.7656 167.35 li
100.016 167.45 li
100.216 167.55 li
100.466 167.6 li
100.716 167.6 li
100.966 167.6 li
101.216 167.55 li
101.466 167.5 li
101.716 167.35 li
101.916 167.25 li
102.166 167.05 li
102.416 166.85 li
102.666 166.6 li
102.916 166.3 li
103.166 166 li
103.416 165.649 li
103.616 165.25 li
103.866 164.85 li
104.116 164.399 li
104.366 163.95 li
104.616 163.45 li
104.866 162.899 li
105.116 162.35 li
105.316 161.75 li
105.566 161.1 li
105.816 160.45 li
106.066 159.75 li
106.316 159 li
106.566 158.25 li
106.766 157.5 li
107.016 156.649 li
107.266 155.85 li
107.516 154.95 li
107.766 154.05 li
108.016 153.149 li
108.266 152.2 li
108.466 151.2 li
108.716 150.2 li
108.966 149.149 li
109.216 148.1 li
109.466 147.05 li
109.716 145.95 li
109.966 144.8 li
110.166 143.649 li
110.416 142.45 li
110.666 141.25 li
110.916 140.05 li
111.166 138.8 li
111.416 137.55 li
111.666 136.25 li
111.866 134.95 li
112.116 133.6 li
112.366 132.25 li
112.616 130.899 li
112.866 129.5 li
113.116 128.149 li
113.366 126.7 li
113.566 125.3 li
113.816 123.85 li
114.066 122.399 li
114.316 120.899 li
114.566 119.399 li
114.816 117.899 li
115.066 116.399 li
115.266 114.899 li
115.516 113.35 li
115.766 111.8 li
116.016 110.25 li
116.266 108.7 li
116.516 107.1 li
116.716 105.55 li
66.2656 13.3496 mo
66.5156 13.6499 li
66.7656 14.0498 li
66.9658 14.3999 li
67.2158 14.8496 li
67.4658 15.2998 li
67.7158 15.7998 li
67.9658 16.2998 li
68.2158 16.8496 li
68.4658 17.4497 li
68.6655 18.0498 li
68.9155 18.6997 li
69.1655 19.3496 li
69.4155 20.0498 li
69.6655 20.7998 li
69.9155 21.5498 li
70.1655 22.3496 li
70.3657 23.1997 li
70.6157 24.0498 li
70.8657 24.8999 li
71.1157 25.7998 li
71.3657 26.75 li
71.6157 27.6997 li
71.8657 28.6997 li
72.0659 29.6997 li
72.3159 30.75 li
72.5659 31.7998 li
72.8159 32.8999 li
73.0659 34.0498 li
73.3159 35.1499 li
73.5659 36.3496 li
73.7656 37.5 li
74.0156 38.75 li
74.2656 39.9497 li
74.5156 41.1997 li
74.7656 42.5 li
75.0156 43.7998 li
75.2158 45.0996 li
75.4658 46.4497 li
75.7158 47.7998 li
75.9658 49.1499 li
76.2158 50.5498 li
76.4658 51.9497 li
76.7158 53.3496 li
76.916 54.7998 li
77.166 56.25 li
77.416 57.6997 li
77.666 59.1997 li
77.916 60.6997 li
78.166 62.1997 li
78.416 63.6997 li
78.6157 65.25 li
78.8657 66.75 li
79.1157 68.2998 li
79.3657 69.8496 li
79.6157 71.4497 li
79.8657 73 li
80.1157 74.5996 li
80.3159 76.1997 li
80.5659 77.7998 li
80.8159 79.3999 li
81.0659 81 li
81.3159 82.5996 li
81.5659 84.1997 li
81.8159 85.7998 li
82.0156 87.4497 li
82.2656 89.0498 li
82.5156 90.6499 li
82.7656 92.25 li
83.0156 93.8994 li
83.2656 95.5 li
83.5156 97.0996 li
83.7158 98.7002 li
83.9658 100.3 li
84.2158 101.899 li
84.4658 103.5 li
84.7158 105.1 li
84.9658 106.7 li
85.166 108.25 li
85.416 109.8 li
85.666 111.35 li
85.916 112.899 li
86.166 114.45 li
86.416 116 li
86.666 117.5 li
86.8657 119 li
87.1157 120.5 li
87.3657 121.95 li
87.6157 123.45 li
87.8657 124.899 li
88.1157 126.3 li
88.3657 127.75 li
88.5659 129.149 li
88.8159 130.55 li
89.0659 131.899 li
89.3159 133.25 li
89.5659 134.6 li
89.8159 135.899 li
90.0659 137.2 li
90.2661 138.45 li
90.5161 139.7 li
90.7661 140.95 li
91.0161 142.149 li
91.2661 143.3 li
91.5161 144.5 li
41.0156 119.8 mo
41.2656 118.3 li
41.5156 116.8 li
41.7656 115.3 li
42.0156 113.75 li
42.2158 112.2 li
42.4658 110.649 li
42.7158 109.1 li
42.9658 107.55 li
43.2158 105.95 li
43.4658 104.399 li
43.6655 102.8 li
43.9155 101.2 li
44.1655 99.5996 li
44.4155 98 li
44.6655 96.3994 li
44.9155 94.75 li
45.1655 93.1499 li
45.3657 91.5498 li
45.6157 89.8999 li
45.8657 88.2998 li
46.1157 86.6997 li
46.3657 85.0996 li
46.6157 83.4497 li
46.8657 81.8496 li
47.0659 80.25 li
47.3159 78.6499 li
47.5659 77.0498 li
47.8159 75.4497 li
48.0659 73.8999 li
48.3159 72.2998 li
48.5659 70.75 li
48.7656 69.1499 li
49.0156 67.5996 li
49.2656 66.0498 li
49.5156 64.5498 li
49.7656 63 li
50.0156 61.5 li
50.2656 60 li
50.4658 58.5 li
50.7158 57.0498 li
50.9658 55.5996 li
51.2158 54.1499 li
51.4658 52.6997 li
51.7158 51.2998 li
51.9658 49.8999 li
52.166 48.5 li
52.416 47.1499 li
52.666 45.7998 li
52.916 44.5 li
53.166 43.1997 li
53.416 41.8999 li
53.6157 40.6499 li
53.8657 39.3999 li
54.1157 38.1997 li
54.3657 37 li
54.6157 35.7998 li
54.8657 34.6499 li
55.1157 33.4995 li
55.3159 32.3999 li
55.5659 31.3496 li
55.8159 30.2998 li
56.0659 29.25 li
56.3159 28.2495 li
56.5659 27.2495 li
56.8159 26.2998 li
57.0156 25.3999 li
57.2656 24.4995 li
57.5156 23.6499 li
57.7656 22.7998 li
58.0156 21.9995 li
58.2656 21.1997 li
58.5161 20.4497 li
58.7158 19.7495 li
58.9658 19.0498 li
59.2158 18.3999 li
59.4658 17.7495 li
59.7158 17.1499 li
59.9658 16.5996 li
60.2158 16.0498 li
60.416 15.5498 li
60.666 15.0996 li
60.916 14.6499 li
61.166 14.2495 li
61.416 13.8496 li
61.666 13.4995 li
61.916 13.1997 li
62.1157 12.9497 li
62.3657 12.6997 li
62.6157 12.4995 li
62.8657 12.2998 li
63.1157 12.1499 li
63.3657 12.0498 li
63.6157 11.9995 li
63.8159 11.9497 li
64.0659 11.9497 li
64.3159 11.9497 li
64.5659 11.9995 li
64.8159 12.0996 li
65.0659 12.2495 li
65.2661 12.3999 li
65.5161 12.5996 li
65.7661 12.7998 li
66.0161 13.0498 li
66.2661 13.3496 li
16.2656 135.55 mo
16.5156 136.85 li
16.7656 138.1 li
17.0156 139.35 li
17.2158 140.6 li
17.4658 141.8 li
17.7158 143 li
17.9658 144.149 li
18.2158 145.3 li
18.4658 146.45 li
18.7158 147.55 li
18.9155 148.6 li
19.1655 149.649 li
19.4155 150.649 li
19.6655 151.649 li
19.9155 152.649 li
20.1655 153.55 li
20.4155 154.5 li
20.6157 155.35 li
20.8657 156.2 li
21.1157 157.05 li
21.3657 157.85 li
21.6157 158.6 li
21.8657 159.35 li
22.0659 160.05 li
22.3159 160.75 li
22.5659 161.399 li
22.8159 162 li
23.0659 162.6 li
23.3159 163.149 li
23.5659 163.7 li
23.7656 164.149 li
24.0156 164.649 li
24.2656 165.05 li
24.5156 165.45 li
24.7656 165.8 li
25.0156 166.149 li
25.2656 166.45 li
25.4658 166.7 li
25.7158 166.95 li
25.9658 167.149 li
26.2158 167.3 li
26.4658 167.45 li
26.7158 167.55 li
26.9658 167.6 li
27.166 167.6 li
27.416 167.6 li
27.666 167.6 li
27.916 167.5 li
28.166 167.399 li
28.416 167.25 li
28.666 167.1 li
28.8657 166.899 li
29.1157 166.649 li
29.3657 166.399 li
29.6157 166.1 li
29.8657 165.75 li
30.1157 165.399 li
30.3657 165 li
30.5659 164.55 li
30.8159 164.1 li
31.0659 163.6 li
31.3159 163.05 li
31.5659 162.5 li
31.8159 161.899 li
32.0659 161.3 li
32.2656 160.6 li
32.5156 159.95 li
32.7656 159.2 li
33.0156 158.5 li
33.2656 157.7 li
33.5156 156.899 li
33.7158 156.05 li
33.9658 155.2 li
34.2158 154.3 li
34.4658 153.399 li
34.7158 152.45 li
34.9658 151.5 li
35.2158 150.5 li
35.416 149.45 li
35.666 148.399 li
35.916 147.35 li
36.166 146.25 li
36.416 145.1 li
36.666 143.95 li
36.916 142.8 li
37.1157 141.6 li
37.3657 140.35 li
37.6157 139.149 li
37.8657 137.899 li
38.1157 136.6 li
38.3657 135.3 li
38.6157 133.95 li
38.8159 132.649 li
39.0659 131.3 li
39.3159 129.899 li
39.5659 128.5 li
39.8159 127.1 li
40.0659 125.649 li
40.3159 124.25 li
40.5161 122.75 li
40.7661 121.3 li
41.0161 119.8 li
43.2656 15.25 mo
56.9155 15.25 li
@
0.5 lw
[] 0 dsh
16.2656 0.25 mo
16.2656 179.3 li
258.716 179.3 li
258.716 0.25 li
16.2656 0.25 li
16.2656 0.25 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/MIJMQZ+Helvetica*1 uf/MIJMQZ+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (SamreshNarayan Singh) ()%%Title: (trig.eps)%%CreationDate: 10/4/10 1:46 PM%AI9_DataStream%Gb!R&q-GO4djY.M!;?IC$A-V\Zno&[XNP$(>puX"!]'+Tn+Vlam3e0mP9+FmFnYEUC]?:Z3aG<WW[_#6<"b6.];&,reTiZgs'Cc/%3?tPkAlM_%W+JYaG^Q];d2[D]alH+t.V]jMd.=Vf\be/YC3G>ErU*="0IV(uh>UeF>&;et5)%&-DJ+c_pR:KaR`!]L?$LHOlLil5%B#@oNYcg8k>O?%1g]+8aULluI10JlPN`thialr'$fjBeTOo`Pe'5m\n:k*8`8+Ce$]\e!KNuH8!e>$VcrsLt2^k:DUrdNN?%M>;2%@2\a;FF89\@^7&?1-(#dK)Q\!]V`jHMkoP-k_gn3VBJGC%i<L"emR.6%pRl8Y9[iUWqk1\f8!'o5ufZqH;lbEpuL=H9nX^a1Erh5%eP.WabA$#T-ZAU[<qAQAdGt'rX#')Ph?gc+XVX=%6@X75qB(C$+Y1s1WK>Pd;7kMrm^.MK\B#r!*HrII2D)f7<nhbiJV=&eX\Y?a%\>o;\RR>"/h=_+n>`\"nM*+,"E)ck8fd?oU##9Nic;jTCpNB7gEX3Nr!L$O.6soO_`PCDS.@S_"6aG>]]FSp:YW4NmB5")9qlR>.%B-"ZOL9K0H2>HCsP\?Y9i8/,;_Z(t[T6(Y'3ZL%>[)7]j9#hp3,\;uh8HW&_Lr2:H(*]!EjJ/Rac(hEUd9(V8ojJl+8qra(%/Y7U%ps0M]8j`PW'g<'/5"u\S9-mW=Wpj(iiMiio;cP,>X&XD6]O_pVb:qk@@6cE^J6I\)XYQ9@$$AoTlBpcW]PX*6b;>n.I"P4n<@U;:%;@222Q/G65"Eg_EGZq3f#/"6D_XhN-]L.!=qFgZP=sQo&:%hgl,B<L3>(@9667p!0@7m*l7dp_,!$h7A]GW$:]7:QB_Cr\14ol:i%'7gQ/_'e.MJ"[QqJi3om8c)<ln:FH7;lrA()^"9(TeW5bTb;a92[SWBpS@8RDkqO>3?'2DKD^@*J00.?,VjrSC\!FC)#T(kJ0,_=%65B&Di!5nD$a:l9&"fZ\:]d7c$h/dE15^`X#[L%!cm%KNkW.ZF2J/b7K^)Bld#HG,?qu"Y4X^1Pm1RKV]LWM*&*a.<N&(JrGai)8%ScXB1$+1%g"+GnMjB_P63e1K]c8_<8%\XkVJT*R.@E'gVgS!__;[>$1\R8o>kY?FoW(u%mFG$0k&Ri23^-aL'3e:&_-dTn!dW6V#%KU^)N'A=!'<W%pI0:-kQ:*e,\PtMmf'Bae\h2Le_s2!H[LR=n/;.`eiirD5OP_?M+2-=3gIp'Ad/pUB]-2\;Q'!3S2Iu6RanA"%V%VNKd60DQE@lT-KRJ'#H1Nr8$hahN4pr6FJ.gNiY!:`rR/?h1C&,es.^nh1V/QUqM`9E%p@j>[*3r^k[*U<d97i00*Mq9=AN^Bd%m%.qs=;/ENn^>Qt)VEogOp=3tTjOG?X#^P0=\VJfAi^KqJA8=Y(NCUu82Nr(KBm<A]Gf>G<3I3VjhhrmefJ8`uDK(u<q^WCNHo<4qj%8*7tTmCYp2n?XTlKAT.Tf7<SQ;ce'0aXItg3IKGD!p3R/O8`KE2#89/1J'$M>?,^S1AhY-VOKhPiB@1Sb27siB^96OJC0([TcE$c%;k/^ZV]<Ysg''$"esdSq!8c":(e:.DP1D&0?8<o3Z>#S5aqh!BF&l%?,u7&`e=pgfPbbDo8h%gg_\BmcAC%sgkG)J9.a'if)aDGc%kYTQSg#$:&,%F0`RuXZ^UW5>#rAFi#kdarKOX&;.bB;OI<?bN3^O^hl?Er]\BJ-ZcgYT%&T&Wj?R"U@\D*65fD[G'^V1Oo'AN]t%%D8n$9^aUT`7kEfd]r\NJH%-k,[Hb8:Yguc?2.=_1B4>d.ZkDbabd[Y!DXk.fE2Dpd/`BWlo"AJFXU=h1I*>dclOhMrW0TdIPdC*j%Z,%_r/,%'?2ZHFnD'LK+U5HuqnTl#3B"Dq7:u!LZESF11jm@P3h/PTE?))#>O#=!])0UghC8*PAA*hPj[Q_NG-Ju8gg\KBZ]ki1f%6cS#`*)#$n><1g:r4$))pXsK)SS5s3no&G:d&HFsGY!\)hf`>IMgS.;]-'WLX)I61)p\lh!#.kHk<eg2c4<7P:3fR\5.9X%%/>XB%QE$U#akLLS7PgLBoNU3ugD"/Eh=*=9E-S*UC#Lk!U[MZa9hVZM0k*11r*ADFK?RiPGMRq\Ta]2AAQc>)"A?cj8t&L+W9#2HINmmo%@6mB,?,LF+`c5!u4K*G=G(`Ta.YbX_ZA5$(2d"fMQe6;"p">@`D&24/f@a)'_f5-ke_WC0faI!0QK-;jAeMW.an*/HK'!Ylc8jTr%DgD)kaFE6YKmDO<EX.?UpgO!Lm20#m?eL9kZ]>m2E9_]?YYb#Z?dZ0h9F$NH)ZsntfJ'O4*b>RH0hAI0?n_]ijnu7Vacof#id.)T%>M7hJWo"iJ$.@uHSs#Xj;>9B8Z[.;9^:goJOn=TQ.b?kqK1i;T/WIY[,Lq*%6n`hDfLHP:DhgR9@>,D3-)Rg-Chtq@^L`/-kA1L\%,'&H_^Eo6F5jD``b;jNO^D2O,Z-B+e(=X@pD"3r_A]lQ4)P9V3E/WuE\&879O=g0\_lIeHM9"Ci`ru(j'^OE.')YRn1N@=_*&C`@%>$N[5fl[/;M0P3)!VYq\BUO72?80(Vs$(JG\69RkcaUl#?F>BXo=$<B(%AsOP.b_1IkC5O(L;l^.)Od$n/GN[^aXJPA6g,,QSZ9h%:mqbh&=79SoN[VX]6l\W@Ll-8*UfBo4aYNR/L"V49jo*l>a!6Ga0N>'"]6L+HnAPESXMk6CFkpda2;NDHITdb_4`H]/tYqT_9uV:%(,W^sLjl-1::f2dnFK7X3hPVWmlHcBBBL;Sjoa7`@/DJnfOlSgITCuLQ(=fU5.>-OV_-il]-LLoeG"1@_!JN\qEUXVT%W!:>I7=i%q6O*R>fs0RCYZ&UMM(4XCj%;%/e+N^Ss2a0MSf+TM-M:n?c*p.'7%lqDg4sqDP(,iGPEEBGWMT8(71=,Im*Z]5.C$iHkJB_"YMOs%@nH@(kZo"l]k1T4j_%\f[[qQO0ha'W&r1r_qF$K&ZK%lfp$d#GL5fe`(!$)L4F:LD>Z'j4=Ia'R"'E8hbeQ#(s&W=8=r7.@U7DdI%f3E_]4_3C%B1`h$Q`rIdre"kcQ&Pj3<SXkpA"mmgiT6:4T?%8*M5kZW^_O+o`''Vd`)R%/D$GR]]Z<[%lHA@dkN:DtKc*sNh)kDc%TgN*_3^Gj+Jn;_f)8l'M@%",Jk]=4&/@t`$H_Hq;\:`E@UOlj[;mtERH/ai33im%)h+Ne-ESjG7I-]5S@bWf$apVHaXYfhHS];b(%-Uk?;j%jkWn(P.CO)Ms"3%O-]\&WeK+)86n>l<lI+7aQ,nZ=mc;:HPO2eV]1$!bYekO?k^@XI,"JM!>Sm'jLQ,?Pm=;OSVlp"X/i%i1?:+2')Wp)9o-,@r\3M7chY70a#"9(U8?Lq,tXepOl$;MYsq#V5j)')Ol@amol:a>AXse\7.d);3OhE0cY&bl".HXf_G:[pM+d!%?5$cN!o42g*X0jN.s$AJpbV*&Y%VX:7;`E[n`kCbXJEI@B<K-#p84t1Tog3W_#2=2-R/oLk+&]nZ<FIhZHK7H.?CM5pKQu)E@)=3%=EgRYn]fKUC`UgERj;dmH&]bc@F^hH->V!%'"4t3/@YS[OL8Z(>Q!cGLI61,R$N."P-tZ"YaROYL\[R`fX1\Yl*gil$$b2OAJMci%5mBE6nHn=ai"qS?_j2Y2(KQIFQ\kBk8%-Pk8Z'&7U;Zo@b19noPCfXg&V&1DZ1U\6Q)kVW[k$OKP-[!68S&Z)JA!JGmo\17YZHHl%#Doh4f;=o\?otpAB1Gf/!9\U'dst/ajBJV\"e0H9D#<Bu^YA1jO_<6hr8b.D*;(Kd&_5*SO1N6kT[e='2l!74II#MbC;NHgCn]6k%p<f'i[a7O*Z_a"#UXa86Z^(C1B\:P#$sW*g1OI9E7C(Or)g,&TNhL%M0<P5skj,Y4r&\-GFiaH&%/be[DrN]#fd;!P.D4BA?>U;D%/Q/Jme7i'.3Z*5igEh!SUi'84gU6<i8QSBWlA/C[nZ%`<aK"!n^V)N%f`p_LZ^H5-oZdr$c$gV9(c5T-hf8@8e8@4#fj;?&'^35C%d2QHc:?/mEW78l"YS"63p8-O@Vr)fI+(g<,HDC:9mseq@+0=T[SaN`0I*EEVg!`7!5'W,j7D8D.nC?f_GU<(XT4TJJ20'I&>kQb,%DSP_q7%d_S-@Gin%ph_Bpq\H0;)rLlHdj#8P)\mZ3n`ZQ0CATPree4doho_'(Tb)PgKcYGmV][scql[9]#/^_Fi]%E8i5;i<Y$l+%o]e*SCk3!aJMJ2C;os367lh+/V/5`2s1sYQ8;r,**s<qi`QLh]U\.[r(rRVe7IrV,gM=Q!7^Or9GB$E`UfdT8^G*/gp9fScVX/k;%cLt'rh$,P=*c!B@ch0TQl6-(WWXdpuUB+hd8@BYFBLV]&+Il<63`dK#fdGnY,.m8IQ1deG;c;jZJB..C,rMhsNGB-M20m]%OW"X3%=lF3Q&7>*s54Ep68ZL<JYWrb^-5%?@^5k<np&=0U>osN<*-OEgcg4:F]be5Zi4\dZ_:-qBo[R3-StLiaUB%?o9'<#YkoK*;-S+(@%aLlc=o&;4(5W7q8h%N%EpG"AL6DOG5]_\PXN',199P$15kL;&W7Itk*DaP./[afXlZ7u2HO>+Hl=$R+u=bdTC*t^LdK:jAR+1CJ%%7dK_)M\,^$)&Cn3^Y9U=+>qM4&;Qq*&GWo+4oK-0eY<`0e?_^26"m!uREO0.k_6cc0?egPgh[Me;+9%aV]lHET4[8g)-&L".^p#Y%5$e0Zp"XCKA]\;J(dV!M#n<L<:!_1:5iP&iU^']d:M9&,H;s3S8%nlHCH%ElP_l!^L[WW")p-VQ)5Up*B9^&[8rm/*2+^rJhWcBh%iEc+"%HK*eqYYn$,C5ann8FYgf!%.Ud,bYr6M.%lrb1dB^$9dq<r_NIXDZHq>RL0(45)[306BrNK[T:SBE`$AL&USVXqapj^BO9!%^DV?sNb0.k27Ho))Xquh[7$T\crd\]ml1(>pa>qXJh=6<[g$30)hjG2co`uKk2ehKV"bi=Xk\<kp:ga9iR1?]Y@bE$'09imTID>d%UYbGCJVIT")RFu?"NrSKA,!#/)1']RpNj$"]/tDDigQ2WfXP5UeGE*JDLhr`KD68I1V67'AJS)_oY.:#f%,FqU.LqAIbO95V!TD[%_[\G;n;lcol;FO<R`_5O^REPl,^\5@640)CQ(k2?s0i9W8X#mXs.CG=kfX2\qG1(K*_.<$8^R_l]tM5SDUDEZnCWObOg9I*Im)ME%WlDg&D!p1p2ZN5&C]5j/C=9lGXShNDWrt@C5)&\$ch'm/0C>,"mgPEZmkjq1kW/%fd<"$VUZ]"68'gH"ch6&q.]ncc_d?ml-NAYp%?A&p__pJ@HIJSdp%:krI6Y!4*E`R*;OhHd%HhJGVS'Fu_kj9MP3WS+)-$!%ng1SZ(@O<*=E$DPmkhultfOM3T*YDlu_#/\h(]eXk%q>dFAAS2[<39aA-rC/mL^KNV4;t'`RIbu1gSTGfFc\EIe`8=qh%XPdB*2n>PGr0=]7l_#Y$iPPQrsacE^_^b!]XQUSI^;E,.+.BF%U5\aZ5)0)fkmgK&bFQJu?hOD+"%h&)&>D;\WdiRR,?>W'#<qfA80UV_g67*TfDeb6+ALGr6'uiijg3VG6Q&o\rU8b=gqm^*a<>Li%b]2;USmWh`j!WELe*t[S#s"([U%!!NTA.UEN'DJbs#18\qHopb*NK+^*"D,FN!@2ff>"B.rZ!#_&*dQh^mp0J/1`m^EOe>_q(M$U%ru\%YnG8dWin=*6(5"obp%#k'(X&\?;']]7B.o_H[Qgq`9j!,Y1W6BW^T3#&4\lQ$)hZal>)hKf(pmtqIhsUpK5M)aItnZSIiB!c%+MBM^r"B:(J,X;$ORs7!h#K:']0g*<*&V)YjSZG?=Lm>b0:;R?b.I##qCbQj39%\:oqMiYhsS?_F'*?'95)n*Qo"GGYsC_f@CSt/%$mcPHi532Z8(k4^CX@da)l(``,*,gV0u7sga_bJDN#jn_n'R%SCcZ>0%hAS,q&tTGi'0<E"mq>)d5S?:#?=dG#5iR"m%Fd&i0e](%$c@G,1[*@$<F>_kE*J=cT_1M`DaW,V?)Uur&"gK,IO"[ja$E1+K]ab"<S6%lS(ABLans[i"L)C::'.lM]_A\%[;*jmJN2sS#L36T%c0/1!mpWTOBFX:RX`eLTO#:Yd,cYY![IE=mkY]%b2QFMLUM&C()nNu*EO4%2I0np9!Rg:/lNOO8@nA=eoJ"F"T6+caj^,PtOfR%A%fW-qL%efb!%mD"i%XMD.O4W,<W\SXSEuM_mL/OS.+O]p7BdrC=$_q.^@`,($Xj(O_hF%5`[(]#s3bM1?G?EW&,"5ij3qV(OFT6+L%HOtEA\4&u:!JqETWJ_86:^2Q$Bt&De$fJi!*JNm4h+gMnK42Olaeg"[')4hqh8_oeqlBNJ7*PC1Dq@'(QJt2?pX8FfRLT#L7^FJu%U$]*9d^R]e["u.O(k_5Vmfs,+5(W$a-lU)*:(ulGl^!&t,tb*DO\e%jD58XiN9h"i\L?HRe!?eQ%5qf!pVZ\0U-9S9c)(Zd91LZ;%YVcSj_?0%NBfl^_B]\S9/.G-]Ij2DgSl.b_'_t.m'r_t;=JYehe08gj-eB3tZRt`-FBFj`?<JPtD6bnJ7Ri?B=Dom0B,Umsk2@Z;%!/Y+Qn/AFT-h&hYoGV*#EOumq;nYY6i$>mF]cgTtQ<:EDlXsC?\o\-7["bVAm*`EIc@6>*g#l[R:03&5&l[N4EUKh[;"m31f@N<0%33LuIURI+<+5LQtdm<<%;n#mpSe^eB5#YC+CrPgXX5+1]Y<I2K%DV2Ai2WSJhefF)C;7.QR?qdrWS\lCVZC(WR[0CkL@`^nlLl0b%DBD8n%&'?R/(-fRh>[H,B5)!14<oZd49cC$76PJ=H^XVip&=ON>OUtF1P9LZA0Qem+8c0P+?l6&hEaLeC^mN:cR?@Pf0`O`d\)DM%R"]J1HUpD*S_*:sC40N-G>)"Qh)s<dK)jojMMPff#*L<!5D5tOWJD+."XObT[\tM]hs-:m0sLC56tNFN+mKEJ%T1uSgg"@[g)4K@%m9]h#gBeMJhB2n9<?HDD#7g8HK<u_&HQ?'cR"&C!s6aIp:?@)jGH[HR@FPjg8%"H'apk:>/677VrC29EQX8@'ij]o5E!HLFQ=%?]%b]84/qBni.nVZ/]Ha=e"&ghY!-a#7lRHT^o1G[(6A)<%@9O.QV4o:Y+rhYQ.;kQEbr_U7s!^ia5$(0OV$7+?K^WTH/=r!9]A`"A/%cqugP\!@k1:*@.W.CVe=q4D?2htd_:(T9IDqqMMcR/_$WdVnhtg/Ns!KMVuq+@7N#R"fI+o:/YQq"rB:rO;=')63:pi4O?e)SFSS%9a5BL]muN5<9gkurWutM>j%q>#U1^t1MjJ$n<<=Z1Oq&CA*RH55AgPg1M,t(AYMt;6fM6]0R@>5WSVs.h>F>,%b.l3/auL:X)seK%BN"g[#]J)VaEHnQf4iF$s6Hc0h?+;Bs1R9>m&pD3fd"Y&X3-s!]nWo$/ND[dacYNu3$iZn0*0W3XtU,H*EQp5-4+*@?4RfZ13\[<%0;0']Y$LL<=O;r;n#fig(>c8>H4V)GYaSF.ES[l?]=37NRS.o@8+=V8,4Y=#-,3WrV(o]n2qHWp609ZFY&=>'"4[UJXWI$s3WV#j%<.i-+rh'Q,pOd75QX:gm]r6A+I>5BIJ^slC$2tDiDR_F`>;tpg$DAKGd1D,SSjfq]/sZJP$^[^grOcHS!cnCle@,?<QeJuqc:Zd>%nS2h%IAk"A7GBq3=02_jei3M76f#9k(<`mnm;m49@]NgaQ0u)_Vb1^i_K_+f*`eV:l/UO183E2aadg>u9!o@+m;Bq>m+,GD2l4Pe%a`D<l%$"1Tb+ID5l0iJsQrin!^%$6[\b<Yhc2CJ8#(J,i4Z,n2rcYtRCYsM%(OmO!(CKDE2&1sLIZtUcZ[7E'_nr"M;lX0kBXbV,%iT:-RIIJQMrB;`7NLl;n@]ZBd;I5N_]70"Pp+o`/ID!.oDH=+TL@`fchcC$T=R&(i!4^Om[pt8LP_lMJmbGb3nnV,SrVgdO>:\QE%0%@9#"ahiCX+d/LN5i<:\+JWEBFt'K;H?i,(WuM=,gIoOZ@dO!fid*W6pGI(WNghP(43JE\EX$0k7=DjG"GjQ^ufG&>BT[&O[-+l%*<C-sTh)irX0fI-;31:Ce93FPbQe2.Wc]sI4+</Qp4#6=?huUjoiqH&m7Fh88DMU/s3\>@o4rGdZ2L3+pMP(/p+TU]\NBCt1_Lnk%caQr`f1QVZ?FZjj?F3G!7ZGC+S,3lT]2@t`?E+d#;qrda(C.)NeW9W+8)6/rC/h4I^?kYR\u]Rh'sC*S\=dFQ;Q\Nbo-SGLqcYFS%4ibs.>1Z@&?RoLL[*c4F'uu]ArL<.8DDVtr/GWPUO6T+4=8<%639_Jam?]`T>d&E3g=n^YC,?RDbo.tX`Zf<OUX>G-@pZnBDY0a1%](g-$NkH>O/G=s$gaMA@(Tr*H8k6ViDH'9cV)I&Z-_?;M<9q+sUSnn_We]b+*s*C>EBUMopb[<k,ZVHX=5JqfQF<*?Rd\i?cV]sB%kP6(3;;GG_Me0u.b*ATk<L_>d,R5j3klEWPar<dOOCn6Y^6l"aHHo!@p.p.b7dnn@%SUqi-?JY3W-2O4NkWe[W"jZc[*ei+;?#eI%-1BONBtLq=gZW).]9d[t$E]D%+&^PKdJ(_od6mTsW*8#6GrBuVhqIgAo^^YEqMjZ103fUAdZ*m4H8g/W[Wp>I>2A[ao]C./i+Nh6%6CYY[1nT)CN?1_Weolp7NE/qAG4YZqB;>4cX%+G#I^jhX>TFQ-)Z=A@^ZrR4hMn+3[m&F(-Y_FN,VCqNpiu\sgM"(,PBc\7oN:rq%3@]A7>.p4HnV,`Vq7[ZJrVjpm,&QsT9fdqSAZf'5dV+&;=L6=1lhurLP+^2ZDA;%R1jcg!pjT="m\31[qTbL@]mH*CNII=sN^i'4%%h#SN;5JLbn(ZC1"e=UonkasNfA*CqA<"hjV4hs0/!Z/(Blk_"8_Y06hcC^FWftr/p!P#-@\P>gVRH%C&(#"@h5ComfXfhl6]E/*%*0%t&iorOAFT">^^bc](k\aBa8[CM17n7_(UH.c&]o/dIC7,CJf'k2eXEU7aSrT+HC?)?bB4TV8/W#-m>Ani&XX3k#)3.ob:Q]cs%ffZBuVq/6!29c#bFL8(uppjVFhsX*+(H\)Cdt2\k3&LQ)+ra!4Nr@&r4g.DS0DcQ7:S4H+dc]!?ksJXc]NL1jMKq>186<FD$,<rl%krSO/nU?@sq>Me.UJJRFnt'rE*SVdaSV!^^C[L8$D9),0On</*/GM@k6*:&=.ODjmB@?`fm[)h[&*_^5rMn2mT/l/fa(q,@bl-=]%*j7M%^UJE`-f`>@H2?$W1TQ;Bj!gm.4X$<0Q"-GqT,6VKnmg5=l(rcP^2W$%oVIIb3VcWX50k0>q<m9^g&%cJfX]_g*8Z$,<<d*@%Q/oafV&8c7&ps?8Kihr*G8ibjkrr\2NbrM9+5Tf$jNl>QnojGGasiYSQ.k$g\e(I"elFH2J\#r`2;34,dC;d`]7Uck]sbCrEPXN5%r+m-s>r/_)GN:`(,ZhdXbh\QQX*7Y,qoWLTPtBM(1%S9m'siZEo\sGC^A'eHL>Jl)4e^t+FToCP`7_]h[3*>45C8phX<8VUG(eZl%Ug.7c/_>>(gY-sK+phMQ+D5?cbbhK=$d-WCfc"pT:6,QiD)I3QEW(;C^)?6WFY,MOh;.od\km6SI2eHO=2f78]J&9%%-,gfES[hG%hZ8_fekDdb`q&[EDNn>brP<ep@,\+H#cujr+)S5OCMb#9(D:2Pg>rrcZp4C=B5I1ReLVjtE19XuaI>T3_b]_j[CZ[I7^5_."TD<3%E2<\,^4U@!i&`dn)K"J'Xa/fY/"5MEDuCUYHc28`@#mE1)?m+9c(;O:F`BQ=S&aD7T<F$O\&%B=g%VPHrB(Dj;+mLCH:1sc7ts1N%"Wj9Y]%%D`e5m\`Pl'b_7;Vu9jh`Fh-%8oj?d!0Lj$@e[Bmcjl[k3*-3WS/+#eOrG/U*n8@*;pFMQ-uO5LAG1quO_26StJ'@4p'!%1@^L-\.WTG@#(bqg@Z?[\K%Lhoio8hG/WT@jbL-Hq),)WkZT!]<jjOF,CS>ne0-_7;o]j[`.93R!NcnWl>eWVhCQ_+"#8ks[*Q?P%@S4p@=d>MJ@_Jb:aTnXiM:\9HIYf<li@<In%j3q4T_Mrfg_7H/=>52d\:s'6n-FW2I6;EFSjoah5N31cr4(!IRE?FY+(BpF^Prrj%:HFDn,?=fKF9lK>KOOW)G3uFk3G3?GU:=UVP$[7(].#2tTY#hJmGfrFje]2M_&g4m.3F:@VX%,CGNk^$!=O5reUqHgT@'S;)DqPK%eRb688M4MUoVUGMHK^G_=+@Gl`ugOh39]Wn]?8HhR%N++P=jj0GbDJi+!+.5)O\PE\[BBfUm@H^RH<gBEjOq'j4`1Q(KP&^j#k(M%Yk$B4NtnWSq"uj,6?Z*n]ORQY<,Xt(*A0EiFk\U8ZOX9CF6-qcH1IT(V<78.90#N#AE)Kk!dbt^"O%?JO?+AnOF&UjHWIj.Oukn-%X$Qf$T?=nB=?_^FOKE_s[^;4\Z5flLY:@:V`C&PA[*AKTo-B.ZQ=PZ@>moA:V2GZ6-*^f+hg)tCQ!R+O#9P3ecb6D6h]Y8fU4&6(%[;AGuoDN'&)clVSXDS@A#kF]`@PdTFXZ<ehF':o*$_DU1nSQe:qU3OCPh)%(p-6gS3+?_f-UMoH.GgO!IWM@9T.hVJVn)$G,sHGG%,8)([JtG\eL;dVXnKU**2U8*+/YA#ke>tl?4$[d)An#-ic'ts9,4Z?LbW_^oLErsX"0gCBn(Tj"bepHMSmnnhM>Oh\bb<E26^#Hs%GT:>*rU"Q/Q/_2k?l&'qp#^*%X?I_=ct1RM:XFHm3jTW=?:VMVm:e'nKK^47,aE_\L2o81UR^tQNk2T;GiYNWAbCbQc3/$W5TA*K%6I^;'KFT7%iSp[Jm.0/b'miG;HS)lT#T$!4`b9p"*Dmdsn[:$ict&*f4$CLSDp*lT9Mr^pJRcD5k8E8*9ci<6lpKZ4UK/HIBVYQS%lm")YYCpi0-`Ea:)K]Hf2N4"!n.UnErGcES[4T:<C:H6]!as^p<SsF<!r1Dl."Lje^+XrQe4Ni&:$*8l:3kM"6!W_maTF/Pnk`XE%IT5LH<:<S5[(IYKa2c4Jhab]@cgOH&[j9e_j[lN[7GPrN!E((VHnl;C&^)fd)7P-G*FJmqUEAQ>O,Yck9Burn@3QtJZ%T<5!'`,A%8=%Mc4#.*VN/NdV&'6$Fj:qo7K'\7$PC+CL4#^6]'88C3]*E=Wb\q4H\Bb1jjeg35&k7@+KUd*u@,/e8(>Fr^7WsbT7GJ-hU5t6*%3E:W+]]L=j?6aL]U*J7I0W(hZY+H.DVR3pU*?Pqg`8JHF+(J"=%VLfi7H171E]gQj@4YicI-@()"\WRXM6M2;T*V?YQ_!HEjEOQ-%np0]N1&6[,4JAOta<Zi"kIiSUJHbAUl%jPj=V\^qTC%:HhJ!8UR-6ZSJgS'"S6N>6e?MekA*5#E/Lspq/#_jS'k&O,I4M"sKP.fA%+r;#9o'PNYegG3F?bWk;'cd`&Y6&*_nQ)i,X.O$UJ5%YD%Sd2$O[JBo5[K.A9-uuEHmAibeQF2rKHp!.eBDk39%k(R,X)O)[E2nX%f">Y=ZXCR(;Z_#q`KNm)11IRLDm/XK_`Us:&1D>*iOa!?`%],O"8rR/o^Q/Go._G>J;SCoC7P+A1`Dq(m)Jo0EaA=56_g?\p$S%_%bn2,0]q1!K]5aoQWug,5BT7asL"'duYq&?NfZY6C1sFlVSQYYp+l6Q>KpR5^mYC;F&c<FR-]ANQh]&KaQt#Ft_o[58ojm=K]pm_b%4@F#eQn*%)J2diE5#VJ'[((4Fos@T[7PAP$#P^E^c:qTC/BgA<?[s`e*>/0YeBh=@m.Mc.acb;$=>bHcCXiY?=g,57!&jfD#:@Z=%4mkrV:7fHjJPialC@[-H1lOYhM+i8'.*e*?C#K1Ve</*s`pJfp1<FC=O+GP-<kX*^h-(03Kf2(p?T@nRftI\<rSa+OVt0Vua-nEF%Kj4)<%2#h$m<bHB/-)0q^42CaoQeYionDG:b[LiQ(uoadDs"9V#fE&]:aa2F*H:(rAjcU/&.R8q?p&^dfoXL5l\Vua/mM1_\32b)%Ckt.C0_F0^"niej4N08-pu9&[OF@";,:,9DrE%m<ZS6I%RY*re1)K2p^jK_JDm+9``Jhq;6#TLf@sJaE;tX#3[led")7^*ZS^,WZ%0cUd^#E+pY@T&)mGA@[9c*_V%Hp$)+@_)qfd`1ZZF8>^3BCEQckhQQ!X-?KE[G)IIq+iRng(SN"#(TFa`-rE4>?IK8`(1&j,hm].%-3d+nq$?lh+DCAKa:Z:(6=?^?qO15hp8ZhV([l<"9_HMkS`puQZWU&\C[IVf;gGW&W`76>h8eg2p0#?nK.[e/:C^Y[0S@Zn(n*17%/i\KDSD>oH%\:4/0n[ar>B$S^]&3uXEd#Li3HSSendISAn]dLi(S!d(S_Z#1%\77-<X,+=[c$4,FMSi:A;,7$*4k&:3daE8*-17p%1[+?+15?i1VD>e?kStB)Qjq.<BlAQ,?+fmHqe#tY:Y@$aU_e/ggrAaADQ%q3>DNThN(gdgp7Z<3IXQeMTd%0_.hh:rpKus-.,-[s%9M[$+QAn%/Zq0A)_;u"p"q.g\cc/\.rX/ccDBDnmr9eln\/0m`itoq.O\%V,'V$N8h^)@dj1*015aVCIk'/6)\>6ZS]&p9W'g)'?%3BSX>lI=GEp>65:l1%cN$laPeL-=8\]@=inp2_rV>Wi]AQgA>A#ru!p@Lr&(B8dZpZJ1as=!U24WY0":LKST3g(FuE?o*W&Ll?ID%!0fQ0MshT,&'V`kC\q9!3fF@%;";Ibq,nSpP?t`Ilb0b4Fm<\b(<V^fVH"O5RZD@t0hB8"8WXa\d$\h1&1lYE4\S`U_GiqU2Ig3j%'rseU?tKeh!jfn#=9$JTkEa0_3#]+.53tJFRWEc#D0`8;pV?ZMWp,uU'.1+`LqqVop;!;,Gbf$LO5K^qnDX!6``hpHjRG5SR+!_k%h45%k`['21^f`VA'm%uq`?`7=jP*?t1&od^.4F>hhg[[4e_)?_&,_Rm->a]mhY+TuFh9dPb*Lj&T<u5qa9Qe+/]["s\O!_*\.t#[%o+=X)4BB&Np;/k;4J(p&lj\/*qrrP0QH,QO1)@h%5T4]#$6*X8S.Y3h\HtdI[5&BQoD#2mN>5MaN.A":d.%9H@T]KQ5O$7M*'oku%+Ja]Va=fI>fZKg7pRPHl^BSVoY\n%a-_mY^U9K?$VA>[i0hHW159hZ!`0eUeqq.N3i]3:Zp)'OQnpKZ^gd*b[SUA:9%Mfm#\I+N<%2muAtJ(YonQBC"8$0mZY2[.H8!HabY,3-9s*BH&\7)me(HUMI]kWZT\;Ng/SOnh&r&XfVBWMrPVM5@Eg)4JJ/k;F=(-R+3ArNCjA%G7YqI["L)I_HuPJBkT:jA9bQ@_._te%&BSBD@^o%UlN^GRjK?>M"<u_?F]WtEQL4s2I,/A3B>SAM6,H6mN(#@A^>eb@>s<cM0?0$%BpeSb0cQLs3Z@;/F`,/_%PpsYk:h/DCa:&Kp4uO<cE^$%bV+ac-\kE`=6Ho4_3$</2Qq#09s^S7#C1H%[[`#oX)k,!G\.;Dh]N!B%FoI.q\YL%rQ9eaJOH*RcDUh*cA!k(edJ<VlF3TIJN:Y@I+)[85a/71<ZUGV1N4=/r_bII)Fn0o>msTWUcA.lP>;48R_aoSWnCdEl%m.n^R,AuB6E'+UTB#Ms(k2sgAo04O/T)!=;c\sj0*.Y$ZiLIWLhm-#EVE9RWHC3X1?laPh,Qd),4P[AVLcpk+R/`&h"M<,a$^W#;%XFbMYY!_Z2*"V3Z6oO+n'j_<hmQ=:q)k(Co&*irec&OsV@l7HZ)8NuN"QFa(;[b0@[o],0=SZ),-D9PUWlOBD)Mkq76jYj-:,e_Q%C\#Vl(s.VfgR>e7m4V4HNL.M"D&ATp302O=0q;'L)!nqF34"P%NC*uL4R33h)4)B34AF"CS+Vd,Lm`7\9mK4)Xj\1#L9<[u:hFpN%VfSe0pgiEC0aS9K$2A#%)6#j_R?@>U*Z:qA^ZUcB.PImJ,pO/@R6sFnc52t&re94Q,9mr>$$crdBD.cWV??r5E+nOTRuEGT^d@6u%jf(Hd0m'5.3VD%#ffJ(iiE5ePE-uWU<&b]5r^\No1iZ/M`PQ-tL%6a,:5'p*&D[Q9['Q[IM,As<RANo[_E$XdiO7R9q(k8j\PIl#%1F(d;2b6Vg,.u/AEuchpompiXlJ&lIiu(]&&O6P._[s*::c?Ogo8qqq()O3A"A*DQQ>hFNk64kWoptZX*ZLU(ChGEa=l88KZeD1L%FF)jlHP)n:iR+7a$M97Q*8D!P)+4,G&R6(M'O*`UOCRPG`K+-tk4(2>O/8He=0^;VJcXcSTOoX]G5.k+g"XgmSW:.iT44-i`6"V;%QLITKKA3ZWZB@ai>Me%@AZ71dSn_&E90=k5I/;XRQM_Vb@CK']>k;eH?`WSCW3L#/MfNI_4U*4E`H;,LiDONn;.hKscT7hMV4GE:%!`HhZG;"V=*Q`2<e[/DQlor/>+0.Q>'X53BA@FM>[o'.$CG.*R0)h9PH1l$\*meRp>5)d]\rZ=I@*sbF`a\;tU2fRa9,L;,@Cj3i%O2.Mf"bBss*PgQ70&EPc(k(k!Vi+:,HH8kD2&B#s@Nclf7o,ad\h)e+1.7PgU3G&mg[0$Sd=[shnQTlO(@9`F(LA6tkC$E"Fm@JJ%Sg3U_ZXt@K:&OIbg'p6Gft$:g^JeY2BF1$e-gVrHgQ42L9laQGZCRsM5.WTM-Fp?X\?hHSq9Xsoo-*l$KtBauX%OL2\EPZ/$c^MA%n(Y@q7`+0Jg`5ae5<1":a5/TrF9uoSrr0FsnfkagBg4t-8rS'kFoe.@Uj)ZO\d@CN;eFL(R-k]:ErK=Ml29o/q.A*$`<<`abU]1.%bOD,do5S"nSQ@B!\^Q$$Cc\b)3lh&+F3(6M!YoShoH`+3'@4`uA^bq.^!8^/c@9D9T%S3l\THm*p.V&Pk7qe,h:j`.2P!o%h=u%+%-I&FZ12c<$8or4Ro?*nNSMi]R2P&2@f?)&(bGOkd:*#JR3FpTaNM#TmWOZQgH0*J"h^LZ\2OtY_8:9:IFC?RUHT%Er0&>k.F(Wlq%8?jVMl$RNQk+#0/!q<;ZfknoXACK34OBahT7\3O:S_%V5ALYkURkDL'SRXRKn&i^VZfqPRQT8[,q8LA:Rn`'7%!GG+r3GS"X@SEL%ph"^Mf*;cjOPVWKT*-n+9.D0+c]q`7`2BiM\$ft1gU`dF^,hr\J_%eVpXOQZVeoG`QVM%/[e6F0V\7/ds##$C4+W/s!O$i`SQX9K%3b<GJD!JU697aRq\M'YIY"RJZVjmq;.Id%6%h03!.:W^M=ebX:Yth8kk%E95&KNho,54"]0Tin:4N'[4+`c.cpIdok7uV)jk0E"1%3VPsdPG@9Mk0EGpb&N8[F#Z>;H-tH4#k=:"n1?GIBhB%DEu,Bbj;6WHQ]WE;L9A0bI@+l]C[T4'^4f`Q6M&''0[=+P\N66jSji*e%:0WqoC3.JX3=N;3_oA;iRJ#n/Z*8QcrV7+d\a&Z7VbElo^\??(Y(RcUs%OKlo*`TOV1mYl#1UbKioH1[CaIks11]C(S`oEQ6hsDu%&=T4?Z&A%)664Ur7#/\JL;GkK]QQ[$m/NK!%+0E2iUb2F`![_HH'oG.s)Hs28gG+@8a^cph:VsNAsGU_`@$l*SgcccQ^n,G+L+sf%h#ZJ.XSlfZ>`#j1bqX!*?ElBV;ZQo$-sJ)ng=Ji9e[\air7pC,b0,eu.K/^^%GX=!j'L/f1;=jZ5+]:A*bs<POm+W"Y31"]iUo<O%0Y@mXa:L]3Dn;-><:07>nAT0!RhHW2i3(?si66XB!.crlD:R]F3r=XT]9bA-?<&6n+VP_[Y4*Xib:SII/7]sBQjA(R4u_7_/+XB@%ru:AQ^UJNX)t(?p+(l?V`sm7!h38^6T4mRcH#pOTc?[RcZuCWkm>:GX\GVHQDn,DLn(##0:6:u;2HiX;Vjc4dIa9=F.k#%@_SfW'%+]L'FnWLm<f#e@Vhi^_i+.L*%DhZA^$p#peloA,acIC5miJ`R7F%NJ3iO.(Tdh`r6-Qp1[.u=RnMbef6CNIaRfB$uq,cdXi*h-pf%=mA%m!XkF7"D;gPPf=E)P&orY`.Vd.n7bQ)a_0MS_*$Os]MHWsNG2ti4iDN[0Q&u)0O(.mUb]k7>dqG]qrE4f;h+?`-<C<khjtZ=%dnXKlU+V#km2K&m4NI-J\`-6(^b?0\[4,@@C[nhfnf(]*$6nmE-/_8(anFD-;L7#+c\&c6pP;(#piq0S0hdVno-!gAW_%#o;J&UI%dPj/MFgp:-pp603jR^YOjTT6ZO3_f7>meI]&V"8Pl%'dAg\Pp1ZTU>R7tZ7t)(s;N]`[j9Er3#t@lG$]V-Yn^OP!XOfmOb2aBZ"T%DqWN$qTY=pefW!'^*oV^e22#.=Z==PL&E($A`%mFroeRG57'!NWOt60SAQ8"h8AB)]:O1i+*>c`L[<co<.-p?[.0OD*]EiPl,BjR%7aO;7`Cln%P0#"\3A/$)\H6m8rb[-<I9Dpuo&5c28U-'(>Dc/H44E[maYW[PA3!tD.?ApLGg:CuZL>XSn3HS`[$L]>j4ici1Qd%Y%9>\m)msT8Si>o&q2VK6XDo[5ENU?^K]+T=2Tk9c@lN$oR#9m<^Dg^5-hl#>kkc5A%&*I"4Mr0S\gXED=olnQ&FIIjsR@aY<dE*Rf%M(_&8>!)/PUV=K0Z6m/EgErJl61br!YT"qlkN4Pp>#ha;PCJ62i)VtTX]<)@nm('*:UmgT5I%1K(jC"La<dj,cm:)L$oUL!l(K)+%CR+A8$,0Me_Q?f=$"0eDkA'jpZnXX!D;7PAr?,M9I9Mip#Bt2'2TG/V&"@_)ZV/K)QgdD8BK+\G@#qi['spbPOtOj=1WA`nPQ&)d%`nJt.a'k?r'sAJG'R-ER-9mOA_re^,%tcIdYe_p@c'qh&'+RAh^m2I3o%^@,fhsUi5$"@-]X&ut"YNr544bB`!R;8'UjGTT$S]dZ%V.4Gn$_8q/c>0B^ma;FW+1#l(Okje7ccYuA4qFQ"lIC1UaNs.'6c2U2l4#Ja0o'%[mC2_GWZYd(j8>T<Fr&%:;3fITcZuXO1Vbu$%4lZ+PCVH+hjG@Emq^eU/kMS/bJ'Pmk3EFIiS9*WROu:"%Rf;IiKWrI5?$^^4eJISW8Q,ZWqE?TuP?:EXWIX$31_)BlGjRBG+.K2B%RMkrFmRditD!W`7Y3ajb@,lX"8LQJTQR=nY?7V@@;f(fK3g3Ak+<f!p0'm?oVJ4P+at1=nlVPY'*.JGi:_mFe;qc/6HKZoqYW76B%kifDDjKU^qOdWKT_r^qgia\7sfX/-X3Ik/+GH*40YW76mZYY$2&L%H6&f=4_QN\3a#;?d_,muDC%NnoX]_3E-\R!>oi^U@:>fqhA%q:P_bQgtG[Kg0f2TC7bUF1mek:lilg;Ec)`%sJ-4%%$Mk<o5"3P],o*=`_-<0DPOhR4dS7\qHgc9jd_P-2e^J)S@qLHF``RrFS&/%9"`bolFh-Mh<Pm@+<8VqCoDkgrPJ$3%DLFIloq9!me%7!mUe[&b4f5Wi2Dad';+u)^Yi>p*+qW5IBQuX-Y)IOr/o<6me$rg$EtIa%*r#MVUW[QJ$]$6cFn"q7I_d6H#oh53F0Aq)C=`?K1Z%H<ZL6jo"%^5@I_c<CB!E6Aos5*klW1d"ngc)uqub]dJN8RNVB6+SDGNHJ%4H"L?lfYbWL>;&QLTIio@H!:q:lW0?0A+ftm"1i*?9^NZa6nPNnm9(=./ru29m3_4+-]a7#^j^?rIU_2k&de6n:D"n8=f-S5F\Y:%]%)ksc7o./I[1gshWe`<LLg7.rIU@[=YA%%p\G'Nl6f-a9_\AeDn*fY`>n==$bk0;b2Al]?GGEP0#(Z=8al?DgdH):l8S<_I%aSr%6eo^@o-kaQ5/'&4lPFBULX,$!F0As?'!Z5]m?IAAq-!:L<^52Mo2FN3kEXfa>Y1Ia?GBlhhXY#c][nf]]p[]q3U=A-N8!,Y/5L^:%h_^fZ]^FgL>n!:5qTX%&?[,r3s7?Ni]m^W#`TPB7S]AEmFBa:AXaXZ=c/V-qi*6.,a\&&Zb]34+[.jEBp<3$,Va%T2I]qYYZ+c(_%oa?KUHPGX_Y@"LG'`L;1=gDuuD<\X`cb=!R;9kBk<^46HC_$49fiiCOl8LU&+7`aQJF-Y%/2lP%I_ctoXQ\l,p\Hluk&B)Rc@lXi%o-E2Y2bi)U:9cMIqM"JjB>2u947H:c.<Z5JhWkto(kV,#j'KK._pE$BET2?D!b^RUK$3NTqCs8/DtOe1Z'k%Qo6%oQCj[l0qMh?(%>jh8X"lAP-R9_nn]mde]K6J*ojS/KS9b,DkZ!ctJ6ZX)PUX=A'o+4jZ>cH?@odgX?>'&fuH@Rs[DnL:i/_[_67sRe<E,>";=c&'M%/``2^Ld]$m!`fY-IA'T6oOOWYCJW2Q^V>3EMSs_F_p*gcSH!T.XDBPSE@&](g.P_BebcWHcdZtD!^X)Va1_4LB'Z4Rg=ZB_;k"^B%GH%XoB32*45-e)J@r5MO*hJ^pC:A=2e]uDsl"L+X8NQ]oI7"]1D)^@Kb@B(eY4c'Yde2Ps<P"<ID<^2&CF&j\]1GQfl0G/;lZqGg%H@3ARQ(BVXU%DR&?'0RX-dMVfIO3_jr9S=n7rmdi5C1I""tR5q0F0:cOP./WM6F<*H`)3<k3MH[YPYf]l>lgrCam-H0#l3iCBr&O%TCIU=1OG9eCqmp_208Tcq;\or\]ReNA#"-A48FkkKVZ9rW`N8ABrTcNAS5;M6/7T/3\ED,F>/5ud\GGunP0b#J>DoFXquMB[B:Z^%N4u.GRub[?s(!\rM$Mt=-#Z_OlH68//KP\(lKcWE<'*8=)D"&jc]G[UU[;oJ=&N8uP6WO@I>U<ciji%!aZ\TUrhSmp1[Vb"dk3i-%2F^>enT_*b)P;FG3Xh?baitJN[[(40JaD+XcZ3j$SBo4'ak^5N4c#r[(JZ+?p&lH'`7>91,F1O-h2ACa0-X*Uhg*AneIh"_,mAU9%8R=!j)l6Ru.g&gJ],O8F4s$4b]NS0moB?'_:JS[<D52#.hq5&tZC_LBr3j1IILRSPOicUTTG/(3gIH<"]s3nLf6+g1I&Gn8MZ-jV%XMI]B-]o)_BbU]u!lN1(kI2mOomNh/eNFfb%Y+EOKs\YBU`J::-2@WTKC,e*n=[Kpg;4@cO):67p`lV[J%`bVg!B3oaS'p1YQq)3%p#$Dk=M-4sCKmjP9Ph7?6DH1rZJ%d/p+qN]kuBR*rCe@oMb3$^i+%E]>fc]<\oSlZ5L4L5lmHTnU9\MPWiRB`]31s$$`Lp)d\]N[%Ul\@!d%6e?+gRWX'/03-NPVc\_9&93W7g4S:DLQkKuh$=\Hku0W.E0ZPeB0<AGOJRq43:\1%*Z9g%sk%qHIUo]"2%l4tKH@l'Sm5%F4#"#niE$\PNg?LGm@0a@l&XHqA"WW*otYlI''uld_%'u2s;QQ#esT3F7PTZ.];=%C1;+2?V.\u(+H$7eMW6jFck(C:Y1,!Bggf_%#Q;<\;?;$VQ/q,'r?V75+L>(>m.7!XD=/ofgn*g]raqc)9B'\5i[7S(=Rm?.!0HQ"$Et5[-@@n*Nuaqudbh`:D[#(35<$1_W$SB,%JQ+H\ifP9d,nZ:d1u2K@@f3LZJ.p/cG#)D\+Olr(Q$W*Pq/?UKT)iq,OGc#dK29#>A8daU[_.]%b%hM:,gfh12AS^SOhlQ?9,TE[%DM^<35*FDjeuMsBi!@a>N(\[Q(iLObeIl9.,CrK5f"(.N@l+g=jg"?+].Bk@;P8RNf5MhnoOG&GFPgLb[@Oq_/,fGu1uPb6G-Sa-%WQK!LqsUW/8J2ODYmP59$^jPU@T_AZ_>#'m",33e:'6/Q77Wi!$0@2L*CtsBYEEuU58<U5APH#Ol=O2%?2#h9WE<d+_3\AHJ1scI%#Sq41nt'h(r2\qUKA5Q.00<=Da404<;6sS6Qdb7B76+YRQ`,DFFf.MI2/K/EXa1sf>C`S/jHoYA!W#<Q%ViPMcOM-"Iq;baj,Klb%,3qTc?!aZ"UHXocRGU<6O[Wl'UJ,4G*cf7pagJU]IB;_lmb1'C_qPA3676.7b1$=0/gBrjnnF>aM'/[=YWE3;a#38Cf%hW`;J1@c%)Pbe:RqntGW>mh`4WFb)cou7pjbku*@;8iLXn4fOHh-fq(T+W&;E\t.N@A>/RZcGDPQ4Wb:48F#GaL1^<p[[.f;UKi+#`6Da#@tl%5BU'A+7=$HbE^5l+(8Wi?AY%oo*E$sfi<JONuN-9>H4XFl5n^B3$T*kp;)V[S5djnql$LO^G_audqn@<]#G4$Sreg!_"u#X`M%]V%P$dLgoQmiiK_gcgO\Qgf5-1c!#U["@A`BD3I9N["ji2$Efai:_PCF:/If5<&CT#8?6]6b8,41V$hc1%[+.HR=9?(P?Tlgl^3Y0-8%V6%ZH9g#XfO3KYkis58oU=`o6Zm=8;V.k]C`5%Q"W(h$Y^C"Y%=8-._OjVL1129dgbp'LN.otZV`\p-IkI.2<a'DVYI\(F,^JA03%l%[K&15e+PBP@4NU2*o";;Sih"2)G%;WUbg54[XeIQe25=k?JQIRL1h^Z5n/<l/FQ@:EVq3-,,I<biRiYOEhqigk,)^XZVtT;@9P%%@_,YOG-%09#A5>3@Tfg*A9%1)2OVj(P#sq!$G?]CGNhm=K$ju#?uBYC`6nigXd2,(4sVEA#GERh0cQ7]7.22g.A8:S"%0tQ)3p(%S/cQj(ZUH:ETD*='`@7@NNW`P;C?DA_'3siY><)E%!GkV+ZO$]AK=aV])-!FN`8fSMB9hVlFl1Iai)IlRhLMb-lrIJGPXmlq,'U:%1qGpkI5sFp,C%%IdLeRl!E8>Cf$.67giB*?LjAa1U)a#Vid'eJ-h;Pi)X3;2dl9^c`#Kge&h%\](('Ct&tn+6c\B:SeV"4?W^)74%B'_H$JsOADY^5mi>c<NIg`@`VSBQenZi8Wd6s-k'q!jeA"PTesn5BT*@*O`G(bk]F@[m]YD=FbLL(D@R/=<]#a[:shHbV<D+4lk_%Lr]!F?PX4nHpDnA&h:'-5-,G(i1l\?CO?m/K?n'6!-jj!%gY#TXG2uGDZK>p$3S'XRgP/,ogChl*PA3]io"UYTlHl>GTZ^;D3LWD%6de7ojT#jK]0JLH8eZbpC8^^HHbpr\P[\'t>>@h^jQ,SlgoDQqc/Iq=)@"k4nWXi?83H6PJ9RTVZ4D'G./8^9j$ofXH,;kG%rF<[%p>I`mnRZO,bqU9!\#o!J3WcDQ?:j^`6qH!]Y_A#:$l3T)70^P0>^bh:h_pABMVh!/'@&,8C<!ZFno"P<m:]pn;>0F/;\i/c^0''5%XS/$LG'k`h2f6ftZ4l_0Xgd^_^;0dd`V,U@ZSS;[[oW0')<#fKg",^FI6ans5K7?"pue52AiT>Y&d73*.H`^aTni5ND(EM9j=)DS%`@-EP=-"4:0D4OL67Ld5AAaf/$K9R\M=g]-:;mDopNR[,LLhp.G6Y<Z.qKL\Y-hu&(>7e[oqq;dOMJ\](<4&Sd42Qs,Rm-k7lb,*%k@Jl?]S*'QeFlorc>lDL(*46P>ka:LMJc%s"[V5aFocDKrZt\eJo#bGHBGW/>i?7a<qfNamd+fk`!pkPC08u@B1pM'YP[LD@QV>l%#I'-E)qAH_VoBJJGe&keT0@dnSf\<_C%g'YHEMk`dg@]Kfs&Yom<WA51s*5pg3>'^>$TE;8?beJQGh`oDB[$Xe2VA!D%kEVpZ`fS%XVUMC5'Ko^fqO/iM<]E*FNKN77ja7o4!8DT05aPOc(F$I#Oa!LIfN@HCMo&c$0gAaX+X8rLOCs--.s[f=Qbd-h2M<_m/-*8?7iha%FQ-$([P+Z/_+3Z(%l30Z]\mgCic%)V@KnK.'V3m+XR'd3HUnnp9"laX`RPt)<o:aNOLr5,<0Blr&lA:fD%J>;8js9Cro_(S>F(MO%LSZ1_5]Uo1F+#(5>#go!joIYAWEPHlG4nWjrNoTo2:X20Wur]DpGB2Rnl:tcSuX;_=Y9'Z*hb\k/3j;g-JIVRQDsd#-Lsc?ZZml=%Y1Im>Z4/S`^G(:*KLFFTfordt?6%O)rsc&Ne.,F"Dq1r"[Nn\)]'&h'*<AGm%mDbIMTY)AWj:8Kj?i'gagFQJ$@RKAU';6W@C69!%.8?`o-J'"u0pfV9K(VQo[b0klBaa:@L=R.kFNc,_(:Y)=;V/T]5\#')ZAIqZ6'9(tfg&6./TC&c6@CT![_P#fV(]2o?[^n0/RYt/%YEX7_%Koo:d8X.i<bmM#jGk-<"F^16Y"MguLP\)Dp./2"D;oLW&ppC2'SX3&<0XjD,kc/gd(gf*_K)bXh3AJnYp0YrLTgJ.(nqjQ%#eSn\+662USFX:t""L.S"^4Jbd^6EY(0\I3nYS1COgqorMkl!O'`k#0Sm1<FO)l8a0-Si#7kC6b-d0%6qe>AiUbYHKE`'A/pnC@]%opf]UqSGN2D]<(a>UuIlrKE9+m6dN7JOd"3dRdPW&K+0>9$22o("6i(>C@1PKU8=u,-3oo2:A^<^4n]cM5r_i$Q5nR_KIf,AiN^,%f3@R;_Y*IhB6Q_S=i+RO@ApZ-)p@@?lJ5I_eE!=7H_*dt5%&Ut`pAi0`KUSaXA;:kaj>pqj]+uMZKgfhEonX_S(?f64a?dQA$Fh"%hml*`Gju5FruePBjAK<IpK'6qR^FVCOY5K3B3T\iJ.m+%f>l_XXN?^k8U=ni<jllN:5I']DTtP(*.'+NF73uLaVKR=Vui.c;;dlR%X9sc<8U?7M>n7P0rB%V<JrQINI,G[h/dWKj(MfL"BB5aS2BN=UEpYOg[X_i98s_]f?:BWqYcTi#@C^?XJi#j;+H)P4]9Oo5Mqt@I%Ts@]tOq6]K>s[+6I1n+T"(\eDQ@tt0Nia"Wm_1<:A``&W[A9$+VW"?ma=`'!$=Y@TYad1,P">$Y"Ym?0T^0\8$=[W?JEP'p$=[W?%J8i=3,-DGXHkjTDl9SMgo2ZFH8XisJV!NOV;%Tth5gSg_Us*d+Lmccqd`LMa`6@L4aKtA;&Dl^2mY@SRNZV91H@VJfCjlVP9&&3a%]_m/!=o\UBf^f*X@h0b]5fLRB\pSO@6?ZHe^V`=]b9l!,iQs:2n(=i'e)uI?6c3lh@m5?sYf>kjGp'jH>F=+4?oqBN(T6cn47$U[%bTfmAj`cel";A^&Wn58OIKuF+I6EW_r/Oca^EX@5)lJ3e6>fY0)jf.r_#_2moHs%+3BU<al<s]oU67nFe;c^llmbg8@'$PWM6N)^%-b9Bieb&1nl%&6?-Of&CAa!o?T/M6Jpc^VSLapnlCB/2,duqL,*;,#lN&+R556!*0eLK0pjLr'C$7:G#r*EYr\C@NYcm@V=>ZC2V%V%p)pI_(ARlm&6kC.e;N5L8u@koS]CJZ.%r.*4-K&jfejiq&1/?u5qf"6Z2o@\/;B[*@#t!qr;@GG$8h'Z+muX]=l0Q9M`/V4Y1j%SKta`r6AKn1a4giOUPiP&F0Bleqn9*`OESiqqXK*YUA?Y,L/=&`PH0OHD>EGS*gpDCSc6g9^]tg:>-9J%)I@"qo?dl>i9^>hiN94%auNOW,f>>86=&6M;I?B!;jEj,]u&a1ZtL="ir,,iCb((I8jh47Db(G\Z\:KD12Wb[Up3[H\3S2Pf-VCPC.GImOEGPH!LNW(=&hqn%.%$PF;H6Dn.$uYGJZ;8?L#5,G4^sgJO"_p<IOS]1hPsKFo0K'>=o)f=/_i1Ejn<u,+WUtU%S2&J&B5D(Q;oX!NXB=#e=kY_AmF>A%#Oerd`&_('<b!N?lo`o\RhH;)5hEtk$KCluTcdrJ&!8OQ@V5:@gC*2B+D+Xb,Qko_+Jt3(g/4=lDOI(BDOKeqDu@"]qu&<j9@Ub?%q3h1+ED)H9(clO`fAt\735HpB*SI2X$J^*eYl%*t,f8ss3!:0*.Q<ENJq)@]@,'ZP2NP$:I'b?;m&u[oHu(rA"-pcb6aH+Vq.P8)%Q9_96$P3\(HmBomPgcmk;IL^spWY"6_Pp6[1k2Wh?bm)"Bo0/K2'UBM7]OsqhZe](Fp`d,Uuh$U)3TN$AX;D/dV4m#s2$m@b@:h:%rD<MU0@&_'jY`JlK=Bh):IEhr>ttss,/obKKJ]RCH0M#M\0&=N@(5k+rU$`MnkSK@Wk=O/gae<=c$Poa-19!2YkQ`n^14W(KNi7a%XUlQ#BU>?VY.Rqa\-G4-kJi7G"R?/UeH1)ID=V^j-cBk=6<^(F%li+pSrnP.k0:4+[WO>6FE(5=[E6i&*p/-RSP`E!dFV=j.5/rC%]H*QhlOj$<NoubiZ7*HtZ_TIq-d\>lc7jLH[_>c_8dOFu<"3][K#@k@1H`MdTISYM];!@qM7;4k/%YdA#^7(2fL'(<LS^%Pq.6\;%#=?08SjhsU?TNEqg9IUaHWEOQYQNb<55%g7+gY+5?QL[%GVm4g.*/g:7b1X<+J&Gn6C(/>Up-SL`$\Ft;^r,j-\kb<;^r-iAHGjd%V4p68o'>T%3NT6J;GfjA6)nC0kYN#Q'nq#hOR0FVHp,Pb\Ptg@oT/TO<AC>E^p/geWa\Rh@<m7Z<5eutidJ`["_`?d,*JlSR`!0O%#[&3V<T1&.<[HhI4hi"_-jg]T9+*`-gHQ.J.]-/Zp/TK?<O"Tq9u.PJc$TC62?d.riX*3f[OJ_\i%oC%<Ikk'@=</b@BK%EDH#n^%Hkch>WT(*2+=/.P.\)Qo!'C!Pfb@[gi4D#KOA3P+"l9\'X=BZ+Rn]#uW5>"4U3J8<llrK<n(=<^BN0P^$M-733]j?dW=#K-C@"`,%;fG/;M>r]L:racYqgRV:/;&93M9gMde?K9Op[udX))Po>g.6MUIP0YEctLb<QU)XMT[m8m<pi(J0#j,q99T'[<toDCIs?Kf6,/]b%LeY]#73qlqC^R0jkkW?Z<CItNq8])YXt!Q.+@h9h9,j,uaMgBg[VD^%GU3FS-3tfu8I)ZQ\m2jr/9m!G:X;_nph3JiSSqoIbAp>6%8%b4+D1_aILJS2"(:EH2=GhG3)V+iWj!Pb)Ctc`k_jeCl/SC*)<f.EDFl=KHHXV,5LY[5Ir;E$a5j`!0c^gD_D"Ks!o.gphgo3HU%$E.#/'CWB#@Kgk-S4sf?Ws!1V[TOd\VtI-I@$S*RR?M93$T[)ff/?_]@@':EoJba_#+^lDXDU_9[deE5?1._.ei(SjGd:7Pq))jD%o+<(KLs,&2it`:)Y<rRpl?3ckd#@V%M`P%`E=lgbr\Ob#r"Hbj]8cF;Z2]uAP;p"ZQ/k-Wa33a["c7Y:$WN<5Vn\30;VR69HAEWJ%J$%12P)`8<Yb=0NeL2Dh3&YYg;\abZP?ik72@qLI"suZ])s"ZGj=Gk=&Di/L]4:]Q"S+I.O29\-lb!U495,ko,KV1D;e0qph>8eS%arY$:>g_jsMEeH)P"gE**W%Dj2H2il=$V8PFt,>hTDU`o$[CbegNriaZEGPJWd1LudhP^B+WQ*;,,a="bKB:;q]j`gQ#d'c*:'4l%HYi,,*<#lfqc+n*mhJ[&ohT`Ho__`TIF_cf]E7B+rY^R1(5Yn)q)l>DoO?)b,U.6K((&RsM:u6Rg>F9iCU;(NjB*oqDQCsMPqt0U%g.oeY@P*gk-,M:B\`[q-XHcUuO8Y3K:iV$gchgiKgp!fVLt@Y>9]bMSo8$;l.rMn3m%H@U.o[OISr,/6-E<0P;<rX1s"!)pC\bA2%0VAehXl_orqtepH1HH*fRh/Uik+9IVD<qD\@eSu*3-]6@T5g4nEeq'mCUegId=*IP0`V(5_T[5'Kb\71Yp0,!848h2>L#$UdsGR,%^E7`e"AZ7ulS$I-2D3\tY=FZ.YTNDR.sR^>D`jCXg29ToXC;@jS*F+nPb4"s9!An"K$=eHmlu.YJ9.l$>BKI^$gEStoa[_<R=]m&%VE=0So.^'uh(8`pWi4'X?MV;1is='cOMUNk64V31"l?Kn-Zit/GhN>jf\AmM=2:6da!.*9?e>TDY>-P+^&f@DVhk3W\:&#AN$@[?%i0MVPXb]476d40->m-IL5IpM@XhX8El(e)-"MRT@C4iA?^CRYpa_S)se0=<2i"5(DRu"ZZr:'jqc`VS+gGs),\5GoL2h3S$rZ[s1%gtIq?E^L!B7s"IYiuXYmQZe18UK5[EHm2VeK%%)uHNR:'"`5Xe@B!R!I5o![)^dq"XFlO8KAEDOYXc81LUR*h%MmJtd94>?ie`#D%k)0=jOJ%L,%\G!T[cNPlO8QLrAF4dC`!Q_Ym@A,*]<*gNqWGX8Kj,/LEH(gn;HBhIlY'S>7:&O6:bk4M(IGRoB?#6Pb:/#7B!98c%\(22/g"P"k\bN72i<\hnj#Zc+fV@90E.mr-cI"Os:sB7VIZ5Cmfn1O."E1R@g3SqKg9dF">MDjY7qb9EXEp/(;Z2CWG`<uVG*HP=%e5H\7.Ral\Y$EP;cmg*tHr`ku,I4S8$qE=MmB86'D6uo8b1TXHS>/gVoWnosq)*D_EJ+_u]HpsJb][[P1qAiBdK?33p<t9&!b[*h%'XOpGCc!5tYGHH<H:h\FIZBEdl8/Y*,3oEOMSY%%F"M[=p\ZYWk72imX$YtS3EEceYkgmM2>M8#2]C%1O0;N@Q%"X$q0\DB:<t7[%9@"DVeW[3Vq,Uk4+d"%!X>JKr3#I5ErEl>EI291Nmb$PdTd+.D[MEmII;@eXffGaS^e\miODA1d!UI=_`).2tdG6E]U`k1C(+Dms%cl4nVOXmr="tiWri.W%.alo=PR<9U.j*'cPa]]Zg(@E0sedmm:&%B=4bc]jSg!d"o4R,hW8)k:Sl>R/^L?Fr*&In=>3:rCS:^oo`%Pn,dbP5FHhG?b-9"t@_P+S5+&foG.aGs.VJo=8Q.@ao;h:]%9'<[X>rCdbR_I9F;P1qM4dZ[(+!HW]^MN4taO@<=Z$/R4V8p[`^A%q9j+:UM7%.+Qpg:Z5?U71O@+l6i#96II8[nCt6_4dbV@\=\>]@>B&0h"h=kH1R:/62e2+H(4,WM2%rWBeh?";o5\YA3`a<>Q@A"V%&kTSl^@!r3ITO.l+0*h0KQ,j[M=%G.6FqA]Y^:$n[e"j85;LdW]lm?=s1F]fb%PpuYk<T*MdY+T)o:.G_[*CDWf@WCl1^7n=Sh0b%Ji`ql2O7IG03F"ADnp)TB*dhba&oXthN"^\c@<]B%ji-UEJNN7R#C`5'T)k#\VSR"et!;#?nUFpO`9'lgufkF'@D+'O3C%?-F22E%s1hmXB-Q'P\@Dm;Z>'cQM78+41Fn06(k-p#S8?GHIr9^eS6Rs>$1h**;uHgD`Nd?&$U)SF-2'lt-0Tb0U\-F)rOl;o\T?jUp.J/c%TA['ujHQM!^g8uM3<Ai""u#@Gb@`>MC4bqlMQWhm`=Ba:/n>-#ECF$`NVt&]1m7SihVE:>`l-$.DMK)JL.JMGYih!i&pR\BMg]nh%[SY]^g"A3[`-17#A]8M)V-'&pdra`b`hst$Ad$j-c=(6>j,kVOc\LF]*m-eaNtjRY?CrL@>WY9rJX:WbT.1;Nb6dUEdZm,=\^L(5%<>qL@loJ3ohPWt5/+.JTkC'?em*g$J.m<?"V&^pT"s's/_l;'0bKP77oXmtb->.3Xc]t*rWR?`hI>KYE;l,WCHP9hjVb.>0#_tUY%GOe\/h.I#2\^L(5<LTI%*;V)EWD8]ocZeL69$dB6l1!lJc>opAgY$7)=*bcAJkhR@Fh[1cVb4ij4nlM8o0-0#m.mf*3E;N?\F+\X%nf1Di(=.2IojVg:8l'lpqF%5RqqQfXk>S4f[M7&Q:<iT6l#EWtcf\9lfhV2NH`D2'WW$s$<>sV%;]S:kaf3^Qa'=BdchCCQgSt0\%5tl[+Zti.Nk=X(t<9]K#ZL_%0HFJtN'hucKceJl[duV]X547nj,SA!HIi/!"m>Pm(+85XU>/5MM[](pd,&H]M?\S>[YV$8(+#:V)%HXpb==g,jRM>.iNp0omp3KfQhL98*m(Q9C^`<YP0DEUOI%usO@p]2H7__ptHrPh%[6*Kom4`IoU&?eFWSPXL#Gd]6tK?0>IkY5hp%O##?`!7@$eF,a]=GksfT?K^1j"oLJ!@6_N'J?n@f0h&abc9+;#pQ2Ju,5))036u%E)bqpeZCOpu0B^q(X=E#[M6Bo'+eLV$R-&-X%][`0^fI#9F(WCR[D7+?Vnp5sJ@sYYYN[p>6#olCdLUYC7#s."L?"]?e4?qP?D^s)J'eW!LXic(P$ps>_1?VuV3a`-^mN,Bo6;L<@%]tBPU@0?45NU0RoT9hf+r5^Y%s++QBrrRuALWnb@5O`E+(\?8i'n<+nWTo[bgC"sH4.cJ3R5AqAjdhfJDp79$XA*bKB%S%Yq:a1P%G@p^,QoXq+gC_B;Yh\_Ikqp>TL.FFe8hQUN;%G/?:W;I#X)h8?VqI-P;=^?4re&Oe)3pJ7<7,j\6\j*bk=>[+NQTB,;(!!+aqjik%EpI;hl?;IkJ"l7*FF/CW]jHf&7nMMa<-KRU5eW;O:i5hQ$0rO+W/".\.9]":hu4uYMQDib[gVhX/L&SKTI9c4*s_#Q7o[XpdJlUG%.=)t^pa&?JnD6T%2O051kXJNOP`-q\>4`2fko!2bh6tJ[OirQXC71TnkJ`mY.VEijfBbBVHp/e.9#"3el8;_\!HKAPV.^XqEF:p7%Tn@jF^RG%j7e:Qhqf:?Vs20;(6kFYD'@iht&WBa8@RLmOkj8m"g(oEP(F8PT]"jFcjG[Q:GoO&jb`46XacR<Rns4OF$'CM9L9-um%R"gp9,E##6UZ`o%[)@]t<Qd^-W+EAEeX@%<,rCM<@B+44'9^P_AP?6N:eNZ%Z>Q!2X3=<n?B`i3XN@H]CJIDZD-j<;WCA3f468`N%TuXa?g5olWG%>kmNiZ?H\&<&WLogR\R)GAW8[Out'HlTfP"HIF/7ijbUnCVZ9[2X@ahZuA9!u="am!7t/T5/.8WrK6<:kl2S<.Qt%)0nW4EZ#l,4mIWh;%9(<6.(eRPT?^n1(dMeb#.7H,-'5K;koeR'idsq3nf:&cH,(:UWUbJ<*:Y?Q'[<*>&R2rW];T0Gr[+[7MW/T%*MY*K$)h%((90]XJ1?%qC/j:tB7!WJ*E!:NW]HTKn.[LJb0*1P=Xck+Q\_SDDblGZXE2(TWu4nl'F1e>S#5/[Q'[?;Z;Q]50+i33%hOYe?n<:QsXsR$`3@CtuU/KI!j!p9"\6>^EY!Rtq.t;nl>Wn#X+'^r?eJ'i#]*8u`KfBa$W4&cmr<IRANa`+ID;dLW\b8"FVj(m/%I!N1B*"=S'EXS<:CC@SV8"%nX':)_A^kOQ$)aX$ak@(14El;"J?s(;#:LmSoX]%r/FWkCLM8TXsL7XeA#MM=0<PYQ_=UDNrU1F@0%"3pUO(ncfrK;"CcJeBi0J2]bd<'$?a&hbEN8N-r$;PmkG7P4Zu5bX-qJY$@p)O(hBfCb(Od<Z^`Ve,E3Xf!mu.MELEU[TgI&'>0d%]$1&GB4M+28b=Ab/@@SZGWfQp$<f'7.^><G+O/gM(_dOM[ZOP4[#@==/5-E[=jNcC7=6h.i%g.!Pfq.X*\ta;hWI/ZTI`lg&l>UE%Oj6g#Wm8FjgX&?".V!]O;e942E'iX%:kg`^@@d]S*0hp!)bcI4;KAk!8Kf7Z@+?E>'TKS7;FWspMtRN993F]G=oY1SYT5^?KF+<1%Yaq<)1kYo3$r*O^.hne:#Va3rW_S,e'H#7?3LuHI5*6T:%@QbndK_gK;Pngh+W$CP\KWJemuRQb[@g?@P0R6-QqGg_Z=ML[ckM?;%,(`)pU"+W<&Md6`-D`O5(l!UT5!ugER(/0-CaJGp/'nX+V(pPS+p&)D`3a7k=;KLU&S;^lBer/)"./8*kL=mNr_uH(K<ZP`)5N/0%AhGL,TN'KdK)q,Q#='/\-37N`>)#%+78B5q0JWp[WOX#JR3N-<,0.^?0Lo5?c)H)4EX\0Vet\l`?B5GGC7)Y?T#FiQ@QcIU)$V+f%4LL:\SQ"FA/qTd;,+8q-_MN+b?kOOpP>4KVaf0&R.gDtAeqVDM38LfPM97YQ%l:g`b:#JII$_]K.!s)lK-k55!Tk/gWbX#u]V:hd%(M5\'qH1d(FDqE$_AO(s+;u=H<(+N8]S?iJV-8O<Jk6f5CI9KpN2"E6&XBXB3+]a]YanC4W_lTm5WasW;KH:b!Mp^I8W>J4d[HC-%3b8t)keBmG:/s*O'&bjH7'301)(=1$D5=$W0UXk60OU&$r2<;U%6:F4F_eeqf8Q"u-m3=s]fZg8P#<8<c*K)NPgOHL0Rc%)N2Xr=%LE'lC7:<D`K-q3[:YA7c`Hm1T'oR<^(4+MUX*MjF$J/6bNNd_&-(m"#NTk7YJu;s(&`,?U>/kMH1PSThd@XH=QurIq;,E.H<)K(*%l7j<4-7##0@neF.jWts0L,-V=p9M?3SjI^$KVrd63\@Rd=e/JN0FJ2PEYBp4g'X)WDA)3-;XO\!Z&YcI3u,pQ:_<.G4H9?9TK),0%Y8!3j#6hgQL9^(R"b!3UUKa/fG_.Xc@p`341WC'mjVXaJ<e+6gUKX3G(q_s=C-rkM)*V1**u!5be!n4%6mQg(]/e#cW_@mT:o__N%bu$a+^`GK?8ED,>'<R)_Kf&jUU(tKYPH7qi/#qqP<er4a@o.@UR%-%I.OG=_(Q54%1W;,d.UYZm15%&UYHgS7<(>E=8q0a`b%2-L%;,Br\6#i#jg_<"bKMg+O^dq..X\b=mp_B&+T#:7Z3#mV-FI</2-m5(E(oU/DW>q#:!-*UjeD5Z.O\(k]@[&oTH7JM9FXuG\ATUD.%Ge4l`d05DACe!U*NQR'W2RnY)M_G@Q9V[PUE"7UOL=?i^U/SKfL5Ngj#dg*Geg'[GiFCCo-p2#_1!W],_D2\SdqJjF4(MtQX8oS5%N\_5U3QufjB![4O8)WI=VEmWf'!hNgRcOgV4J*u4Y>PI!5Wm@$5gp?1<(=CDjH_Lh3Nd!%lsN_9aNh3I0I],Jg"n1l$^4fY+<d+d%9Pc"g'(oUnl-4Sc<(8teM-FepN;,*Jk,'aKPS%h)iar\Q.&<HrZpL/^;`6TGCm7a6jqhtla9\FO4L&\C`1l+_Jug)OeDaDtVGLr6%P-F$U$+]9\$$COW&dFRt?ch5C1FF2TDomT'>S<G/1DGhZkqLMir\-8OVA_KX)KXA9,3NM?)H,US;)IF4.liUtF41kfrZmL]fKd(V%ENE.mJ/\%+<BcU\emauc]>bh5`8)m^2!1a;3JJr'e+qu>Pc;k/B0Mu#H0X1Jdk":c\N1Z#dfC?+:s;_eFT*V.ehq>fC!9`3W+2k_%:L1:rL&'uE9Rd\`e-/la::`&SLUlZj)6iU=Nk3MQ2iYB58:=Z8aBWkYHUBi8eTI)TUqn5BV<c>u8"*@)UZ!AMQSCuNBiC^an;>%&%3h<hH"s76D\`sA4H(?t\#3U3$3U-h34InLt#1J)`F4?<n[e`9P'I]^6WM?&K1@-qJ6nQFgH(F`p:rF'%:Af3.E(+o/!`J89!lg*u%5nW(:*02'&e459LWugr]@A2$42KdNC9W&$uX(9UQB>E0dU`0`,_80'Z"Nmf)WL'dLEZAl[V*c,13h<kI:r\ktcS9Z<r:Cta``Q!^%EG3qu;tiX][Y6L6680k;4mM-6oh5QcBS2"+`P.]JT%.>7/Lh-Q;,84TR'nj(.SMI-%A?'NFeEB=f;%gD$_ALrG_RNsL.lk^kHE$m%EVKrQaHZ^HqMVR!Q[;)n?o3cWL19\F:lBk_;n\kYNo?RgTe`3J#-spXk*%gV.cW`bI$6fO\8uF^T,j`UC6eY^=AjE-_D;DZ2M:km%+Sccce8*,$J\=^iG0hI-5Rj:#;_9U\F9YO6JAL0c@MtSp%@R2@'0C.9Y<o+0f\jW^;kG);W\p5*$;+rSRZV+,FM?Z8nTaU-CLI#"%$^X^bc$a=Oa!0ZG2$Y%F(,8nc&ER'5S6K;(p"NpO@ER)mIQPbN(?qgU%We$AO8A5tk?2=R=l<O0HH@jDe=9$[EtXD"Es8"r=O`l4%:JPA_]1IKUo/]fV3LS.Y>_mDUMjZBQ2(,`73N#\KAmobS'+0Z599tCsW7.muH#"+8e8GRZ8#V3PYCJoL_,KU0$olhNN!@U2J1db*%i&QkKk,?lA`Yoe_*;/%%W+0;-UTQZqIl]0Sef^SPEuM@h"nZpQ4Ql7gSBe3/aVs4[p"[BheS,$b-Lp=E8)8>BPH>#t(-C]!LRc1i%kM/&<)14`3EHI5OmA<-ik-gc7R`[ABh;mOM*:r#]NW(bKB\[&IlF35q)Z]02kIG`&UL&;=41_sbo6KgYlF#fc8XqRgf89<Y3Tcpo%RHL&L5'r=U`'!YEF4SbVPS$tEa!2pVk.'T!4?Ce.GMjZG`a&8.6@Z!d-Ebf!SHZqXrXNq:5jPX0k-lT&`k:b&oA#IGAW3$iT"Dg+%;0dk@g9O/,4S.>;0&q6#Eu4[^H1$&',gSSs0NY4MRV/5(Y1'!W'^*!=`kpkcr:A-Hf==J>B5TfZK8cl&b\`-V#(stOG,,@c>!RT]%5CpATH02GK4AlBT1'rui?R0sCSZFsHf/;6%ch#XrfD#tFSpK`Q1KX0..o^$o(c7an(!rVa_8.g<?00XHSiQ,::4L]B'DK95bYO"=%$NnBGFHm%fo?9d-\RrsQ/8WUuAb+&>LY*TKB1a^/Bj+bT8h<$FULC%<U6GVdZa4GTjLEM)0:;cYD?M`5EHch4E[>-!"G-d2\]TUD%jG>GWBZ+SSi.%@t<U9V9kDVaK^g-4e]rScGX1N/\mon&Wg4!@i3AkI3NS`_"b_Xc8&m<a#,(0"L6A2Pr/jY/W)Dr3)U[sn^Bc_,Y%X#!Tqhf&:FLA1T*U^3!01;n3eH*G]&\Z2m]>on`[T)"h+M8$r@*.<rYNfDac)&s-tbM.!_?aRL?b"aY=+8W%AjnIFRQh0c*alU2)%%>oFkO!0f63/<@)>0rA9$)Tq'FE\m?5OWN7.jf>EAUPU=]pSP69_?f^d1UkA<H;pJdhZ.^o[J.FbpfQFH^kYi#EC@Q87+;JS3_ml%^:g>k?\X]WDR(/iVmFUd7Y[')Hje!8"T>saBIQcm)tnGB,qh<Z)_--P).e'V=Y$if%t-U:@M3=`kj(g[1Q"kkoseL9NgWs$D`]bY%h!-Q5bU\gdP.-dl>I'9lTJnq?=GV[?rb?4F_dcBuVE_g%iXqXDVAD=#=R,Rr_][E+YIDMm#O?*=WRtQFg3h:n[?rhZ`YE>FrG'em%O'LtOA=Is_os3J^4KTZq[7`UK-mD2#-CBK=j7Hap[]7MC;k;')QDnbgQ+jgM$%2D@$TQU:n&`$Hh7T[Nq!,P-38po2_8u9!4(%3>%^A8,#2UbYJ>e+CVl@VmlI,A00`^;]&=W`%#A9dE-(BOe&P0,QHom(V5CjWk`ALfiLiHj=+3'0njB;Y+!j0,Ao:6%:Z++HH@<0QMF%1YUR:Y$;\0o't>\?D"\>gQg7Fb&3%:.VI22ec(rk.S;JA\gSYMI5O^:&t*HK9#Jim@4s]*-f]/]FETH@cc9QL>PUHE5g44l*IgEV%6Q&(+LHX(D3(?Gq:,adk7q,BI@<<bA0tAgP8RJGm=`#1b2oc"TH/aW%$3/s;iRqjglmqMb#pWV\?5`HiBK^!6>=@dJAB=8m=%phH%5-[]$2@\i3J"E:7(#q66PZ2`AgL>(_G7ET<D>(C_H49@fg"VP`0jV91hKH=I^Nddu.TFr=ML<hu2IMW-a.B_9J[ohap9`<D0HA,C%:KumfIjt4m&<MstT!i=Lo0Trnp\gBhWE258Nl,23VLt:X*;6\G+.cMnY1f^>/(%_9]e)Mg\$cWXSGaU9Dn+h8ZS.H!7u(Kc[J1RZ%22rhIFa9+MD*euX$SNZ&D\G3#T\cOu-j"NOQ5T\u;?D,9*L^Z!O!09*W&B!^I\^tS:(J)g0&*%V)+QPN_^rMr8>3U_,C6BDhi+.u%T,H6\UZp!dXrI1]m&,hU3+Les9d3'dGjK.F^=_cAfM>`!Fq*3b:l`qPg2IG_)sOt<8fXlpMO!1g5?$-tO4F6(/\NQS3c2(t9B`SF%gu'/E+4"o][m#iDc-juiqTI=70q%"1Y;RFp6%<Z)(#R!Td@8.Z84gjC5il>&^DjM@M4b`XqjK&Udu+,Qg15HrCZ=#jWs!&mEO5$T%mRbX'[e"lj'.6*#YNU*fn9VS-997Ti\t>jQ1[(a?[33'5F=,=sBXQN]4O#M2Lrn<Aj>t#%g(+9lLk5Q*#'ce*H3a9@mV+nJE"h;g%<7[7k'4Ai@Bt(SA8VjfqiQ4\<1EZMm4BXC8a*p6K?l[@phtKL,a'<"!<bdW)+R@Y1akM:%D-B8C"+I`8*7Jc?n$YmdL!<rrPc)c4%FAinkMPYTJ'<4$Q)+JtHds!YJf7/(\gHnunA>9<8R&Z9__3[eb":ID/"]W?bI%ELa3Ef%fq5a?FkFm0A+3t+ikFn:YO),'8D99Gh%C%mnbU*pVq'T6$cMcl=6H>>6.TAN4/D.f03bfA%Li6t`NGr7YZ$P><>#<m"D*;<t-=@dUp7`Rj$C",sOGq04Q6OQg6aZt?bNaugs%b;hdaN,3P=`oCWO)91^5'dgWh.jU*J-iVP(Km*B:`Q&X'9j0Fm:AbG/3]`^kbAj#eLX21\EJ>"=!YSa;q!^p68!!d"IK_[8#6aok%%jUl=Gpo2cOX`K!FqCXi,O#VW6s.r'F1Ca54cdF9S9]H=KbqLgEum^0b]erqX6IPjCCq1Fj)O//%RQZ=:5m`"2]P=Om@]dDe`b>N%_oJ!;4%SM]73If)\uUYX)g/;g&`k\C(F+Su^G-ro<t"YG,Rj=E/*5K])K<WW'jQZH[mNOGAO`WuI#5@?K_j6%%7:#fYTC7N^7EUm%6N(@<KtQ>q9gWGF)A5I678$$no'<95$O0CU^B*=Ji5tGs9JhFV`0u4YJV98:[^hfnM9dJg2q`+;pWlW5N*t<.)<PE=1OcHZnDjs5%IP7eL;oC)"!LE5g1\(#VqaY1X@\)9cf4W?a(30:ZiPs6PM!N[H(dln!Y$Z&DDNQ,GUS1#]jM;XhS%)C$Kt(9n?'S7/+g.&%j!-E_%?9Y4dj8N^c!4EJUcq1QnZXZ(g3A]`=QT&Ntlcn#=,UTX4>*l>IoNfW)kMV(oFcOI<B2$m+h>2T0p!8#4[[1ji2KH!02>WH+E;nf!%:,q_*frsU11Tt05QW2@]7:1?goF"TRorIC-),l>/d()Y/^EZs1pVrG^4OA$=VjDm/kc\_C$2r9GgN"EKV/8.FFYVWY^HYNap_XZB%ccVj,e^W8bFJUihO*H-2HPbELUi`1pJ_mQ.!;?<]mCke/B0Oe+aDg#1;ZgAoc@"2i'B]1@#"?F_P0RQ&H>jq^(5i"][WnHOhA-W$%]m&\QQ^E1a4NF1CYBSRsFDNb.5)=85I.u&HpVM2/@H1qomR<1Jq!Q[%5%9bi!i]ut';]0oe0CJjml(a7KZ^GH2D4X!E.2'UNFcjM%>j.4inS0"f:LjB_>OQVQn[S*Q=+i>"ld5kW2u:uGNJ.;j`AAd)J%dAl@tf#b6)4CmZO\j_pKjR%f^?Fe5HrsjfC?Y"mrC6u]+820%!HW8=ogS%lBU[Cq+1g_$]T9ck_K6lPPDc=8P_;]eI7g>C^AH4K:tuQ8IFe0mU7)]*!8-]Q1D$G\S6V54l+Ya+*+))Q=/If/&@#TR%M$G6u99K!7`-t;G)2QouWNcO;q^klb+C`+Ec&J^TKmQ(tId?D@;m?nJ(kE7)@IlmkSsV%#-\D#e8(pA80"6/)di>n<6M*[E^7Nen%BG7*9o0YL</O]9rgR[3,6EQ)@S]7Im89tA4jSdf,$tfBoJT86Y\/27@=LF`CJ$Wn'fO6HLVcOnmri<fHhe`t%T+3(r\4EWg&YBla%ar(f&H&FI&oV1hu7YG*93L+5Fkf['r?P/u5`N^'gH7c`#LsW2ue;4IE8gKs`d&UK['+oQ0:a/$*;tC:(9Y7rs,*K>CLeV\QJDQ[-%RUO,fnVRR'!57(T,!\YXcFUDN::Jo,n@[G9,<TmJ2RBDh`PdI1m;$ie7_Q%+]jDWM_Q*<Y<qNF9`5gqGSC#IVfa=_L4l`=FX4ho$%pILR9]NJ@ehM\g0Z@&R%[b?gS$p_gdoO*Q[jbdSoBs\%dmAN)r(\6[epQc3_nf^8`$eb)6`h>q"D]"6R6%.Z>MZi^0""4`1a8T2g%e^4:G\pA%*T@j]XqYo,RamoW'qnl8galkk`L9A+BWiNlOLX+c9A#1f,nOjn63%mJejBI"jWE-EVVTA@H/f.II$a/%,m,1R)RVf=[%e6GX[iOn7nVrfQ8oO`D3=30K8H@/,cX//8(KmaP5)*"e'gXj,@/"?63CE5Q,@XOqP;o3?(9sZhGp7fcbD*C;mk76Gh[]G*W&Bp?l%1'DYN%gia>U.iTo_d1gmKnappg2E)gH%qfCHaT&fiEic\.-5arcu-%u9!m?R*A$RNH>,WP*L<CmK]?C;[1tajWY-n*ge62V_Jq5r%<HR#S%4*"gEbd/?5Km&=!QR>6$kZb;giWO;eZ8C/=$>l^kc19MAi1P_>XH-5]mmAS9R!Glk8Rj5mm+4p=\k$,h;:AN$:eC0m0/Mr%@bKF@J3i,5I@oF<hP%Co3pJXkQU44@V?'laW8E!](HUi*dXf22^\-/ME"9(u>ZV;s4`F!VVsbpYTq?eu>sppUU9@GXVdHo.!:fgE%>'QlOS=!gOaU^Ua02lhoLqb=hi.ZmNP8[8+iVJL70rrmGe29Jo5$3*Eg*23t1E)k]$:)*'"Q=tO8n$9H\9/Di_M=]sXBP):GV-"#%mp3sHEHn[S%M=EhU;;dJ]I+_;`8TO,4Q:;pl4haMUO')9FM6X-T+H^cW^B)ehQdV3EHngHL,ch#h5b)+iO[LE`SoH>^6J,A@EaPF%.oX4jD"SPCo=KgrCQ=J''humR7m1Wj?/VZ"(T0_qK!<K55TjC39,76dgF0s2+W<!J-429UMr$@n?nY)!J:P;f3"fcu(-TAf_XTb%%/L7"JD'=OUd+C6fmC,P'qiC<4%aN<YA**`A3r<K7.XBA?2rNB<B+HHi1AVE7/+a^F5VLJs).cg&52.t0\6?D2Ptu/ScdmJX!h4mS%Agf<CDAS<t!GK%9-Y&cc$h[19ZHotdL9KQ6(-Z!E5$O5)a>.:Db;CXDCn'qH#;Wd[oX9rJRtnIA5&OG+e5l$c#jf$o^\WaO>P]\e%W2Z.,'HA=DQ@(a@)%sHciR<n(SaF?tk?umBkU/s4jIg&rcA&>*io*05g<koe6/1rcFu[lHe($dY6Xi'sXo*$BeYN+[iLH.I9pqLo%1m?D168R;c/2WRRa[.d$T/8B'qaj.2;h-\]cb3s<[k%a3codYeRG=,"J#-5D#*<LORc%s`;gZ1mI#X[f%jIGW2LpV'l3Hh*$u<We%DL"V/TufY7'J13nX0N4$r;hc[k=SQ-q-/HFEKcbD#!2nt9l?DmBZ\>3>nc]B'J1ju&^f%R=n9!tAJ:9:PJP@qWWtL>i99;.YZY'H%JJ_nZG#"K<-uI$`h!fEl@GTl+Aj]/+e'/)jJu>)t8p9HIL?Ze7mEkY37*G06LfOY4+VO0Chr(6.6A8Z$Ju_.*;t205BW<X.(!UDs%UnXjN<`Cp+J<GdjL&<)/mF;!(2PAHV&4&-V<N-VYBXKiQ/YG1QapX512.Hn^CVot2O4F<#"!"H-`ZlJ*)/0P!1iaXn7Va$+0n@Z?%*<a/kSZAAjV%AZA^Gm48hqg`Q*X8T2)FV'.65fu@$:LZ^ma/;=:RF2PTf#$S!&!`e6]uDq@6D<(ll"):i6d9R+Q1YeE;%t12,Db,%P*%Y$Hot\/4kkc_S#C9M*,Q$s5WIJ.Q5ALn9>j4!1#Q_LScgAJFk2ldOo\'W&L5\*W3a3;n.._:'!I*7b<YWk//!'3SZ.;f7\05N%5Z*G#CXEe.l`?T$Jp#WK-3L"##/HFjgZd-G+a;]"E6-j1HL*A;gKk"Vi(b5M#s-cI`G.5_rGffs&3"M+S]Z[qdR#B[jYBcCZa^[m%gWj*VaE/5Y6<=pH7k6@($]ZGE[nBWnK,"Im:HK%V+AIs*?0E=1N4)\7mV@E[1NfOhaEf:=+9_b([ZiFe#;B>\%q)bUMiau^TdrE@%JOWji>bpZuNODeJmd^Qs7oUn0d?Y,19ND49!YstXU[@-rHD)nr(<P<_@%jStAns=KA=0L4XC`Gl<lG'b/?<61,CjUt`lrGnd8h1k%1\bWFM7KpO2$9iK]+Y6"&S"g-0orlFE.HiJ&tUhA5Y/5'D%b9SiF7G$[bVNQ[AYdHqBi3I3%1=o(63a&^5RQmBpWdl47*XjdJus0%n1[\e/8^uC1eY#"--am-8P*un%4GqN]`BM*df7E\F(>bhBod-,1YYoI(]=r3-GMsQ[#NXnm/TdX=bL0s"rAI9XW'J4\29I\#a_Eo%NB\70%BYX_PF3Uo>-Hd-$OV-3=frV[@T`j<jD/>;E(Oo:U>2nbMR(!k.8P[7LhY]/BHX2FgSnh@KOR24'%9h",@XiG3^+,(<"pTi%>#R^MR;#AOR`r-Nis01"UB;WR>-i2L26@a#/UC&N1GI:HSaFcKe(QPuXjPnM"8F`89dC[_e*J'q:8;lFlnlNq`D2>)<8]Se5FANX%5Jp5HH@h<N#.OfPBgm1*"K.Li86TOQM!dZM>"S^!^8hRT9$2I)Khfeqdp`['"*X(!,2uE#T9^'%JY/6N6,?@?f.2;RRbB5H,uW>q%OXZE]D\XZA^j_)9,85S-[A5)s!G[I_]bkMYcnL'FG4-^o!GXPV,luM5JKkIt]5@0@:qO+b+[GF`nM.P<%udpS;@4sCHJ53bM=e/J%%hI+;0"l%gVEM=p@[d!I!a6Ed@_[Ga[S)^W+hCQja#*2*N&[Q\G0)N_?'c2;YQLb:O.[@F9m^QZ2ljp;%Zm\RLaYV:[b)eFea?V"%+]l:65`BOH0'ihK[<ma+Vjk3PJP:D#.JH=8nh%c`^sZ91MP(H`[%54<[aS"c>Qh:<Cs+oUdP?96K;c-lLI2_gN8\n\2iHY*#K6,k%OWf=[Rc+7Cm5bT%'1%!\mKfJmNLDM:4(3LOJf1r&>pt?m&BGZM00i1be-2@lnBu?1#qo\#VqFUT]DP5g[L(bP`bm36PnO<EI(=C.%6b0Kb@YF7(c=/9tQJY+:T=_QiW92kg6?pm6Le>i+XT=]qlR`LRMuH6^6POH<<RB/&r]s^k2Bloaj;d]3-fUYATVSD%Q\;_&kEg9g%c6;6s=^0KXakB4),NHH5FqdWF2\OD)C$?h3lduVec>tD6,D\--WZjD3<RQ1[$\\3J(k!7rMf<a:Kq4J<d`RuYD-Ar@[7rA`Y4cA[%.nuSFg>8IP2UlD:@70,mkC[0&Ci*Yh+^<^J6cdk;64rdr%:fTDg;2$dP@en^Emj^u-R[/PoAl\bD4[7S@lKO6ArJ*XdYp([:7<o4%#YQCFMR9`9Zm0:!`i1.6/VEdk<n\_A'9bo64L;E:cH<-r+QX$WY_0HkC'0E`(7f.Ob>dk&Mb9AD/Ced.2f*=^Og6lkc0ULY1dR=Z%8^m#<.8B*)PL<!^""DJ[Dnr1eRguqbEmF_Y;lBe#RXY'h\?r9j"2M:$-NJ^3eHQi*Zmts,^pH_`)OP5=:J!=j)X)MJVDTU3JXP(1%^hOT6\T-+c9pb?7Am,kKONb)/"!KJ&?bThD>`Plf;U`3&@8bR#p$L%_=CJ\;BjC`UWG*A+'/J$kQAB(K%4rl_8/lr4LUR6J02>=_%7WF%k5E#pS++>>+U^KCEX(fQ!#7t(gb%_-ETJikE!/T?nTL15Yl7'TB+hM2uki\$"!s&6JZ4$8f5=BZdUB3Ys;`Sj-Lt44[for&:%;_p(E(Eng';>q?aD<NuJlaQe+rZKlGKq8V+[hO-8E8QNQR)#7(-o695,om<?[o:]-U?99#;UEpN*.$&_MESP=^o^u&+\f*&(OSbP%/"'PlUo>s5*/+atA[79eErI[o<_Y>j\?g-Fbi)#g.MK<"Iij23[A'9i,#W8FFs@rt5>,%W^.UT)"(lE0\*aMabM_ojKH3Uk%1Ca1%B.DK.r\Aq/c\AFWkOkS'#Xl'p1<(+B\5sE#^ldLoqA2i59if8b+F%g+HjnEdNfQ`Zh&hd!h/[n%Z2rLI1P<<=%\FWo0I-s$gYd?^%6Y(-D;b_e2iN*>^.rF=?R)'6uHr^lhME-p>D-/kHEShZmEm@Z>H85.#RkTVe;eAY$jIDa_#U^APP4EmtX["&KiSLYJckO,5EkY<`%H/'U;".No<FC<RV57_S!iR\**1J0aEBgfK6S)ugPAoSdaL0<<Ob[D:]A)#2<!FaHibt8naO(-'130p;uJN2S^dK,pSZeXp.X*WeC%+dLf;P#VrLif+ZU\1FisrSf[L&b$u'alPWdUiQ@.l,p[as,H[\fs_'5-U+hn5c)r5>+M'n2Zg=tm=o%m\(t.sVXa@)1[WtiaQKun%(eNP,UEctsSd.gSk!K6Mh=b@[/Bo5$J>KYD:>0uD0ql3Bda?@X:LH"B*sG-_F&ZO(4`:KndrSZ"[!6g'NM\)9ctI_=#`Y]?#17,X%Ag&);hEXK(fpdk41jc"F@(/':%<d(cdU9OC.1LI5DX"=Y4.1=MHZp-a`](PhG-(l-[G*C_CY--a?G"c1o\-]J+X9_)))BVKZ2ge.%M^)-J["]bN%1=aCdVcZJiO3OL-:XF>G@IB(LACusm5A>f(hm/QMNOdTV\j,OUl(:X)067G[*':n@&.4F/4,d@cm#:).[tZ>>Da)T%AkR=,d;3Mm4IUs(`1pJ65WkKh'Z?b$n/r^q_@sf6/;t_lblT'*d4AZL*6eO8_U03L&WLBg>1V#^W<cKg8&h24BJbVVJOZsW&nj+[%1kA-&J.uZRMd(a%Zg\`D1lHsB7^HcrBJbXIM+0kr9eMmRkN&?lMC0.`@XV/%9G8N`NQM9iBI5BoM.S4?R:mpJOGQFqK1%P[4\.ss%FbE.>'2_:g1U2X%1_XFk6o4@f6o5R&8456gLdX'5NCZGnEJ[(?';<K11U63K&WM8p,+?VZ,bg\X7O";CB-a3;@fm4#.NED@8#6:o%N@Gu/BI<D'K4]u`3,"Nc8O5.POVBVc+\=sUZ'#eX'/`?I1\$YC1_WI&6)0Z:$CV:(UnA`"Q2i`TD$`H`D3k5ZPCNs)1SpH=1s3qY%T:+h8r#)atAP+g-p$.]TDJ1hLAo72sgO64h&UX^D9.pEf6-uFm$\Gg@J+:ht;/K!h5N[OTBCH^n5*H:=oU3?!U<f"mYE0\6]E6Gm%al$XLN#*!CkVH?n6D))U&bo&.NPK1]nK[hQYk&!i_(65m9U:jGB?$Jipad@s%cB,u*f)u&7]6F_9X^=mB*OtUp<;Id`1G)2'DBZ.%o>I6Bh@oUa>i$6We_@hXO&[njKK\@3+nX"(K&j8r>RPmj(Qd9*>qTR3FL^tljh6P!<ZggE1K8?fFZAZ,I*"U:0hhQaggedYA209t%<fOI%Nk,X7n^#o>rgCuK+jab_$\Hrgb6A5U)\,>qr[-T9GL6?K@o.:\s*c;$0CeSV3Mcq9H_q2QER0k_+RYZg&Hk<cdXohYb%qXe%9GnCnT1,3%aCiDF*U3%8\IeR1\JZT`bm,.*IR>Q-!97>;+<mF$B1.D/AX3H9jjd^sI:g#=A=m!7$eT*Xl2pmOA]+RuAr/=ZT:OIM%OO#KR#37S`d/j'e;L(esZ]lPpcZU%M!.-fnY*hF@nsO&,OaLco80jf^B8PD"ju&9IB%]s_5<:-[[!m*jn62L2/EMcQ1X!udqMaZC%"J8hW(VsaM$:aNQV2Q"6AuT@;T32L>l"?<^7f&OL[#ofLWG_p4=c+1"BZQqnrQLGl83aGV4OVPNl<[^r`9[)YIV(TjTV#Ae+S]T8%;$d/h,p%Yfk(NPLe="5\rg@=YP(.']OlW-;js17H-bhF^#Jn"B0M+O9Hqb7#/?b6?1s>nE!R:1'8O.@<4:#VdG=hq*A*+#Ik/,=Q%!mPl%K0XK0*X;4_p%TBJn(!SD&884J$Z("0gEdHVM=[t)/J"4:1hY*p,1W4(B0^No(kX:."skctc1tYBa;^t9.IqfM%Aq2S3Zh`d%C!>P@4)fWk4at>IUVH,4*ls;L-=k+\1dNpYO"Z>Q@\T8!:*uELI*"c4`&sH$L6s>%bn0KBU32s)E!Ue8!KChS0.!Q1J1?A3Aor;R%d>T\R-<`>LeYUBCdjGmTnFEBLFb=elR`sildJG()$VWBW;i$=^&]9cgVV2G5d8\",-<f/*O$kgiK8>?7N!Y6/pZ=J]0:JGcVU?.[%d;5'Q+Bg#P/T>Cj<WeqMd/XlL(-=pXBc0ASRViS.csfm4#L/WK)8%e9UP3k$Hl@L,KVM*Gg&pjrId^gIHPhJeCD$fQ(cr6T3ar1P%kf&Pi*dY)j":mX&Z:$rVd?Y&Oq13]i@:^+%7g#<n]Ei3(csnoZW=+N4Q<t9OFp4AnB2RV7p0$\N0naR.;So$)Qql9iM#kJb,pT]!%p'_[`KV#0eO3k5f3,"H8Y+e3kcYbht897i=,/Ioj;\]%$eVk]EWTm@A1K?r&I&8AciQkJ?.K#U615S6%l:p9aXNH_81tI8AJ7]Ok%,bU^&;Spb]mZd2sX%t&@bj&<P5dPc<1=3*TQ4,UNT-Xcfl>-bnZ[,l.d&_,O-o>!!&qjjS^dZ"%Q?C.Dos*8\Mr"lAK`GE/bClRo%`YgHeQ9bV,B!p&PTijrE:hV8h"prOHZU$pa$>tsPXO*F^1b/hZ$-`gt8OB`bF-=nO&=k('.p+/*bmN2s6F-`<P0g:,Sh)_!V^Dks%b3fR(b6!\I<\LXrBNF:l*1GgdLdM8"J1NNB"UIFNnc1sh7OTAbbt&%,Tc*BN.(&?615+p:-kM)EU]nW^J7B].c'SqcTc)U9,W'!r%!.8CWLd/Oi'GAYE';2'#70,$0i@9@I1TCWRBEl3O+3bW?jJ-9QeHSuk%!?SQH&\*uLcP>ZS36[-#s61eOU*<nMATSc;+1a\U\%8;%Rditj7t^G.31@t@KVQ4o)m?\#Y9\/)d3O,JN[F!pE3s/+Yc@[.nP[XoV[N<6K#rh0QAg/kV3A5M-GCG"N/@#BR;)Ga>\Bp&IoVhj%M=4IALh'ktGXt@=ZA4)i)=8]F*Ln50BVGS@Ng>L>_[S>CPctS8,8)%lg`k_)`&A;Mc.5Y.UPY<_4IWcP_P79^8Sg3qR`%Z/a[p;*%&YB1s',aDm1_HMlOJW[),#)!4Lbqg:+k$"/&L'r9;i%e%+/:@HR?<N,#8m8MicBs;-B=GfB]=GsO&dh7)2,AH>Wf;Z/gEW_S0.EO%Db)V]fVQ1V9O#?ZJ\LL:F"KVkq=cgTr96.IIJi`l+27XE_hT>kIf0)l5<UrRGqD2Mq;8@kD!g6n5CWY)jk!jhp"ahAHiNsRTAH_F%J+`FEcPr1\igo!)rnZ>D5(37W2tQ:'pHO*$q!%&/%tFKHcTaYmn\\/-?+k]4X5EsHrEhaZmI$9hH+S"PrF]rTP*c38h1#=]e#*`F%c_ga?r;Y"M(>QB+^\QliDsEsDpZ%m\IJ`b_++O7T2d^t&Df<C?pW&>5J,&?AO)Mc4q<`[FH[>SLO6\@SrUg#SVscjaqt\]rO7/Zh%rl^)s?7jK1_<,*Pn[j;LQT+pH5ukJ:~>%AI9_PrivateDataEnd