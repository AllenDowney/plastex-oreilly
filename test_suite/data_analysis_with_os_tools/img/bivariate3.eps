%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: bivariate3.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 272 186
%%HiResBoundingBox: 0 0 271.6504 185.1494
%%CropBox: 0 0 271.6504 185.1494
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 8044 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD047DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%8452A8FD06FF7EFD047DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87DA8527DFD3AFFA87DFD06FFA87EFD3AFF7D7DFD3AFF84A8FD06FF%84A8FD3AFF7D7DFD3AFFA87DFD06FFA87DFD3AFF7D7DFD3AFFA8A8FD06FF%A8A8FD32FFA8FD07FF7D7DFD17FFA8FD07FFA8A8A8FD18FFA87DFD06FFA8%7DFD33FFA8FD06FF7D7EFD16FFA8A8FD04FFA8FFFFFFA8FD19FF7DA8FD06%FF7DA8FD32FFA8FD07FF7D7DFD15FFA8A8A8FFFFA884FFA8FFA8A8A8FD18%FFA87DFD06FFA87DFD2BFFA8FFA8A87EFFA8A8A8FD06FF7DA8FD1AFF7DA8%FFFFA8FD09FFA8FD11FF7DA8FD06FF7DA8FD2AFFA8A8A8FFA8A8A8FD09FF%7D7DFD11FFA8FD08FFA87DA8FFFFA8FFA8A8FD04FFFD04A8FD0FFFA87DFD%06FFA87DFD2BFF7DFD04A8FD0AFF7D7DFD1AFFA8A8A8FD04FFAFFD08FFA8%FD0FFF84A8FD06FF84A8FD27FFA8A8FFA884A8FFA8FD0BFF7D7DFD17FFA8%FFFFFFA8A8A8FFA8A8A8FFFFFFA8FD14FFA87DFD06FFA87DFD25FFA8FF7D%A8A8FFA8FD0EFF7D7DFD12FFA8FD04FFA8A8FFA8A87DA87D7D7DFFFFFFA8%FD15FFA8A8FD06FFA8A8FD22FFFD05A8FFA8FD11FF7D7DFD11FFA8A8A8FF%A8FF7DA87DA8A8A852A87DFD04A8FFA8FD14FFA87DFD06FFA87DFD22FFA8%A8FF7E7DA8A8A8FD10FF7D7EFD15FF84A8FF7D7DFD05A87E7DFF7EA9A8FD%15FF7DA8FD06FF7DA8FD22FFA8FFA8A8A8FD13FF7D7DFD15FFA8FFFF8459%A87D7D7DA8597DA8FFA8A8A8FD14FFA87DFD06FFA87DFD20FFA87DA8A87D%7DFD14FF7DA8FD0EFFA8FD09FF7D7DA87D2E527DA884FFFFFFA8FD15FF7D%A8FD06FF7DA8FD20FFA8847DA87DA8FD14FF7D7DFD0DFFA8A8FD05FFA8A8%A87D7D7D845252277D7DA8A8A87DA8A8FD14FFA87DFD06FFA87DFD1BFFA8%FFFD077DFD16FF7D7DFD14FFA87E7DA87D7D7D522752527D7D847EA87DFD%15FF84A8FD06FF84A8FD1AFFA8FFA87D527D7EFFA8FD17FF7D7DFD13FFA8%FFA8FFA85227522727F827277D52FD04A8FFFFFFA8FD10FFA87DFD06FFA8%7DFD19FFA8A87D7D527DA8FD1AFF7D7DFD13FFA8A8FFFFA852522727F827%27527D7D7DA8A8FFFFFF7DA8FD10FFA8A8FD06FFA8A8FD1AFF7D5227A8FF%FFA8FD19FF7D7DFD13FFA8FFFFA87DA8525252272752527DA8A87DA8A8FF%FFA87DFFFFFFA8FD0CFFA87DFD06FFA87DFD17FFA8A87D5928527DFD1CFF%7D7EFD16FFFD06A8525252A87DFD06A8FFFFFFA8FD0FFF7DA8FD06FF7DA8%FD16FFA87D7DA87D7E7DFD1DFF7D7DFD0FFFA8FD05FFA8FFFD05A87D527D%7D7DA8A87DFFA8A8FFFFA8A8A8FD0EFFA87DFD06FFA87DFD13FFA8FFA8A8%527DA8A8A8FD1EFF7DA8FD0EFFA8FD0AFFA8597D527D7DA87DA87DA8FFFF%A8FD13FF7DA8FD06FF7DA8FD12FFFD04A87DA8A8FD21FF7D7DFD11FFA8A8%A9FFFFFF7EFF7D7D7DA87D7DA8A8A87D7DFFFFAFA8FD12FFA87DFD06FFA8%7DFD11FFA8A87DA87D7DA8FD22FF7D7DFD12FFAFFD04FFA87EA8FFFFFFA8%7DA8A8A87D7EA8FD15FF84A8FD06FF84A8FD0FFFA87DA87D7DA8A8A8FD23%FF7D7DFD17FFA8A9A8FFFFFF7EA8A8FFA8A853A8FD15FFA87DFD06FFA87D%FD0FFF7DA87DA87EFFA8FD24FF7D7DFD1CFF7DA8FFA9A8FD19FFA8A8FD06%FFA8A8FD0CFFA8FFA8FD2BFF7D7DFD1BFFA8A8A8FFA8FD1AFFA87DFD06FF%A87DFD0DFFA884A8FFA8AFFD27FF7D7EFD1AFFA8FFFFFFA8FD0BFFA8FD0F%FF7DA8FD06FF7DA8FD0DFFA87DFD2BFF7D7DFD11FFA8FD07FFA8AFFFFFA8%FFFFFFA8FF7DFD07FFA8FD0EFFA87DFD06FFA87DFD0DFF7DA8FD2BFF7DA8%FD10FFA8A8FD06FFA8FD07FFA8A8FD18FF7DA8FD06FF7DA8FD0AFFA8FFA8%FD2DFF7D7DFD11FFA8FD07FFA8FD07FFA8FD18FFA87DFD06FFA87DFD09FF%A8A8FD2FFF7D7DFD1CFFA8FD1DFF84A8FD06FF84A8FD3AFF7D7DFD1DFFA8%FD04FFA9A8FD16FFA87DFD06FFA87DFD3AFF7D7DFD3AFFA8A8FD06FFA8A8%FD3AFF7D7DFD3AFFA87DFD06FFA87DFD3AFF7DA8FD3AFF84A8FD06FF7DA8%FD3AFF7D52A8FD3A7D7EFD06FFA8527EFD397D59FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FDFCFFFDFCFFFDFC%FFFD0CFF597EFD3A7DA8FD06FFA8FD3D7DFFFFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8FD06FF7D84FFFFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF537DFD3AFFA87DFD06FF%A87DFD3AFF7D7DFD3AFF84A8FD06FF84A8FD2AFFA8FD0FFF7D7DFD09FFA8%FFA8FD2EFFA87DFD06FFA87DFD29FFA8A8A8FD0EFF7D7DFD09FFA87DA8A8%FD2DFFA8A8FD06FFA8A8FD29FFA9A8FD0FFF7D7DFD08FFA87DA87D7D7DFD%2CFFA87DFD06FFA87DFD28FFA87DFD10FF7D7EFD08FF7DA8FFFFA8A87DFD%2BFF7DA8FD06FF7DA8FD28FFA8AFFD10FF7D7DFD07FFA8A8FD04FFA8A87D%FD2AFFA87DFD06FFA87DFD27FFA8FD12FF7DA8FD0EFFA8A87EFD29FF7DA8%FD06FF7DA8FD27FFA8A8FD11FF7D7DFD06FFA8A8FD07FFA8A87DA8FD27FF%A87DFD06FFA87DFD27FF7DA8FD11FF7D7DFD06FFA8FD09FFA8A87DFD27FF%84A8FD06FF84A8FD25FFAF7DA8FD12FF7D7DFD05FFA8A8A8FD09FFA8A87D%A8FD25FFA87DFD06FFA87DFD25FF7DA8A8FD12FF7D7DFD06FFA8FD0CFFA8%7DFD25FFA8A8FD06FFA8A8FFFFA8A8FD20FFA8A8FD14FF7D7DFD05FFA8FD%0EFF7D7DFD24FFA87DFD06FFA87DFFA87D7DA8FFFF7EA8A8FD19FFA8A8A8%FD14FF7D7EFD05FFA8A8FD0EFFA87DFD23FF7DA8FD06FF7DA8FFFFA8FF7D%7E7D84A8FFFFFFA8FD15FFA8A8A8FD15FF7D7DFD05FFA8FD0FFFA87D7DA8%A8FD20FFA87DFD06FFA87DFFFFFFA8A87DA8A8FF7D7D527DA8FD14FFA87D%FD16FF7DA8FD04FFA8A8FD11FFA87DA8A8FD1FFF7DA8FD06FF7DA8FD09FF%A8A8FFA8A87DFFFFAFA8FD0DFF7DA8A8FD17FF7D7DFD05FFA8FD13FF847E%7DA8A8FD1CFFA87DFD06FFA87DFD0DFF7E7D527D7D847DA8FD06FFA8FFFF%FF7D7D7DA8FD17FF7D7DFD1AFFA8A87DA8A8FD1BFF84A8FD06FF84A8FD10%FFA8A9FD07A8FFA8A87EA87DA8FD1AFF7D7DFD04FFAFA8FD16FFA87DA87D%A8A8FFFFFFA8FD14FFA87DFD06FFA87DFD11FFA87E7D7D7DA87D84FD057D%A8A8FD1AFF7D7DFD04FFA8FD19FFA87E7D7E7DA97D7DA8FFFFFFA8A9FD0E%FFA8A8FD06FFA8A8FD12FFA87D527EFD05A8FFA8FD1DFF7D7DFD21FFA8A8%7D7D7D84A8FF7D7D59A8A8FFA87D7DA8FD04FF7DA8FFA87DFD06FFA87DFD%14FFA87D7D7DA8FD21FF7D7EFD26FFA8A87EA8A8FFA8FFFFFF7DA87DA9FF%FF84A8A8FF7DA8FD06FF7DA8FD16FFA8A87EA8FD20FF7D7DFFFFFFA8A8FD%22FF7E7DA8FFFFFD04A8FFFFA87EFFA8A8A8FFFFA87DFD06FFA87DFD17FF%A8A87D7DA8FD1EFF7DA8FD28FFA8FD04FFA87DA8FFFFFFA97EA8A8FFFFFF%7DA8FD06FF7DA8FD1AFF7DA884FD1DFF7D7DFD2DFFA8A8A8FFFFFFA8A8A8%FD04FFA87DFD06FFA87DFD1BFFA87D7DA8A8FD1AFF7D7DFD34FFA8FD05FF%84A8FD06FF84A8FD1CFFA8A87D7D7DFD19FF7D7DFFFFFFA8FD36FFA87DFD%06FFA87DFD1EFFA87DA8A8FD18FF7D7DFD3AFFA8A8FD06FFA8A8FD20FFA8%A87DFD17FF7D7DFD3AFFA87DFD06FFA87DFD21FF7EA87DA8A8FD14FF7D7E%FFFFA8FD37FF7DA8FD06FF7DA8FD23FFA87D7DA8FD13FF7D7DFFFFA8A8FD%36FFA87DFD06FFA87DFD23FFA8FF7E7DA8FFA8FD10FF7DA8FD3AFF7DA8FD%06FF7DA8FD26FFA8A87D7DA8FD0FFF7D7DFFA8A8FD37FFA87DFD06FFA87D%FD27FFA8A87D7D52A8A8FD0CFF7D7DFFFFA8FD37FF84A8FD06FF84A8FD2B%FFA87DFD04A8FD09FF7D7DFD3AFFA87DFD06FFA87DFD2DFF7D7D7DA8A8FF%A8A8A8FD04FF7D7DFD3AFFA8A8FD06FFA8A8FD2EFFA8FFA8FFFFFFA8FD05%FF7D7DFD3AFFA87DFD06FFA87DFD3AFF7D7DFFFFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8FD06FF7D84FFFFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF53FD3C7DA8FD07FFFD%3B7D7D%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:59:01+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T14:20:40+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T14:20:40+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>176</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7l5I8keS5/JegTTaBpss&#xA;0um2jySPaQMzM0CEsxKVJJxVOv8AAXkb/qXdM/6Qrf8A5oxV3+AvI3/Uu6Z/0hW//NGKu/wF5G/6&#xA;l3TP+kK3/wCaMVd/gLyN/wBS7pn/AEhW/wDzRirv8BeRv+pd0z/pCt/+aMVd/gLyN/1Lumf9IVv/&#xA;AM0Yq7/AXkb/AKl3TP8ApCt/+aMVd/gLyN/1Lumf9IVv/wA0Yq7/AAF5G/6l3TP+kK3/AOaMVd/g&#xA;LyN/1Lumf9IVv/zRirv8BeRv+pd0z/pCt/8AmjFXf4C8jf8AUu6Z/wBIVv8A80Yq7/AXkb/qXdM/&#xA;6Qrf/mjFUu8x+RvJMfl7VJI/L+mpIlpOyOtnACCImIIITYjFU88sf8o3pP8AzB2//JpcVd5n/wCU&#xA;b1b/AJg7j/k02KpH5c8jeSZPL2lySeX9NeR7SBndrOAkkxKSSSm5OKpj/gLyN/1Lumf9IVv/AM0Y&#xA;q7/AXkb/AKl3TP8ApCt/+aMVd/gLyN/1Lumf9IVv/wA0Yq7/AAF5G/6l3TP+kK3/AOaMVd/gLyN/&#xA;1Lumf9IVv/zRirv8BeRv+pd0z/pCt/8AmjFXf4C8jf8AUu6Z/wBIVv8A80Yq7/AXkb/qXdM/6Qrf&#xA;/mjFXf4C8jf9S7pn/SFb/wDNGKu/wF5G/wCpd0z/AKQrf/mjFXf4C8jf9S7pn/SFb/8ANGKu/wAB&#xA;eRv+pd0z/pCt/wDmjFXf4C8jf9S7pn/SFb/80YqkvnfyR5Lg8l6/NDoGmxTRabdvHIlpArKywOQy&#xA;kJUEHFU68hf8oN5d/wC2ZZf9Q6YqnuKuxV2KuxVBatf/AFO1LDkJHBWN1Xlxamx4kjkfBRu330VU&#xA;NL1ALpTXF45VYmYM7EsKVBVQ1AZCOXHYbtUYqrWepNd3LCKImzKB4rofZbp0+dTt2479RiqlZ31z&#xA;+lrm0uG5KDWGi7D9qm3xUCMtWO3Kor0GKpnirsVdirsVdiqW+Z/+Ub1b/mDuP+TTYq7yx/yjek/8&#xA;wdv/AMmlxV3mf/lG9W/5g7j/AJNNirvLH/KN6T/zB2//ACaXFUyxV2KuxV2KuxV2KuxV2KuxVxIA&#xA;qdgOpxVCzarp0Ko0lxGqSCqyVqlK0qWHwgV2qcVQeqXlvdacxgVpx6vpugBBR1FeMiMCd9gFK7kj&#xA;pscVTOCMRwRxjlRFVRzPJthT4jvU4qkvn3/lBvMX/bMvf+od8Vd5C/5Qby7/ANsyy/6h0xVPcVdi&#xA;rsVQs1vdPexTJMVhQUaPx6126Hlt16U264qisVSzXLGPV9Hmto+EyyUoK1QlG36HqCNt+vcYqk+g&#xA;8DY3ulXEnp21lSMBftKEcj49qVbiKj4g+5ruRhQmDXUKT2Vtp90pSPgkx+38JICBmHj8QC+9dqDF&#xA;KdeonMx8h6gAYpXcA1ANPDbAqW3em6iZ3uLS7Ku5A4P9kLT5NXiQCooP2q/ariqZ4q7FXYqlvmf/&#xA;AJRvVv8AmDuP+TTYq7yx/wAo3pP/ADB2/wDyaXFXeZ/+Ub1b/mDuP+TTYq7yx/yjek/8wdv/AMml&#xA;xVMsVdirsVdirsVdirsVdiqjLeW0bMjSKZVFTECDIdidkHxEmm2KpbBrVtqdrdxwwNIYw0ckbAMj&#xA;CvFiChbkvX/W341xVKdJ0bzE2nQfWGWGcSmRuR5PQlSxLHkw58WNBQqeNAOOFCfaJo8OlWYt4yWP&#xA;7R7ewFKdBtU7nvgSmGKpF59/5QbzF/2zL3/qHfFXeQv+UG8u/wDbMsv+odMVT3FXYq7FUPfWz3MH&#xA;ppIYjUGu5Bp2biUanyYYql+sXeoW7WljbW5uFuqwy3DjlStFqQtBWjFzWgopA3xVhVzqGt2+tt5b&#xA;WrR3IPJ4nLS1IYV5U+NeEaglgOjKOlMKEom/RNzNAbS8kRbZiJ4FLL6hZg8ZTi1Y1c1RITV0DM1O&#xA;Q5YVTbyfPJJBqUOmQSi6tpDVJaCQR+ox9McSBCSQwb0xUV5AOW+EKzDRrq1lvvjErXoXjJIfsM/B&#xA;Q0gXY0KoqlqcQw415dVKfYFdirsVdiqW+Z/+Ub1b/mDuP+TTYq7yx/yjek/8wdv/AMmlxV3mf/lG&#xA;9W/5g7j/AJNNirvLH/KN6T/zB2//ACaXFUyxV2KuxV2KuxV2KuxVJvMGs2EETWDXHC7uAFCpsyqS&#xA;oZuVOKkBxQv8NSvLY4qxe7SxvNQtNHs5zDqxTnJcRuwj5MvqPEvXgp9IFaHkAgH2TUlDNNP0+e1e&#xA;R5rprh5aFiVCgt3YgV37Cn7IA3pgSjcVdirsVSLz7/yg3mL/ALZl7/1DvirvIX/KDeXf+2ZZf9Q6&#xA;YqnuKuxVC6hZSXcSok7QcW5EqK9qfeOq+B3piqIkdY42kc0VAWY7nYbnYYqxrUdd19LhZNNs2ubZ&#xA;yEZSpPDYV2QGpFeRJelPhUFq0KHkvmHzdaaT50MVzK63cbH15pP3qpI7FijIprxb4lkjQqHBFQD8&#xA;RKvJbLzzZL5mkvpLqaGZiVKRgOeD0BpUxhmVasgUKA/Fl2q2Bae5eVvzB+sWMTWsaQ6heA1uQCsS&#xA;PshUIq8EUyKicQteYCnkHDBV6NoF1qb6zdRah6okVKIrKAtKinLiSv2QCCvw8mda1GKWR8hULUci&#xA;Kgd6D/bwK7FXYq7FUt8z/wDKN6t/zB3H/JpsVd5Y/wCUb0n/AJg7f/k0uKu8z/8AKN6t/wAwdx/y&#xA;abFXeWP+Ub0n/mDt/wDk0uKplirsVdirsVdiqE1PUI7K1eUkGTi3pKdgSqltz2UAVJ/jirznzb+Y&#xA;urw31lZaPLHNdRv/AKXHEA4JqNjxL8iEIqqGgZhyalaGkImLy15j8wObq9lggcE1VeJZC4AcD4WA&#xA;fYMsgHXqrcVxVl+i+V7DTWjuCokvwlJJ6UqzABitakCihQK7AAYEpzirsVdirsVSLz7/AMoN5i/7&#xA;Zl7/ANQ74q7yF/yg3l3/ALZll/1Dpiqe4q7FVskiRozuwVFFWY9AMVaR4p4eSNWNwRUEqfA+BBH3&#xA;jFUpu7OXTtFmt9OZlllY+nKBRYyw+0VQGi7b8F6mu1ahV5D5i/K39NNb/W5YrOWN2+t3LvwC/ES6&#xA;/EeIWgYLxXmzfESw+LCh5jrP5Wx6H5mlPH66lSVaImgXiW+IGrD+VuRrxB5U5DFbeqeT/LVhFp66&#xA;cZBI2myM9vNFQSK4TkQevpf3dVBSpHMqzE8cKs58vR3dggu4HmmhldRJFIKNwA5ryALq0kiOP2hS&#xA;g+zWmBUfrFjDaeY4dZkknlkZQkNshogIogBbqEBcuyr1FSa0oVU7+rzXb212Xkt+FGaAjfY126U5&#xA;dDyFePZTXAlHYq7FUt8z/wDKN6t/zB3H/JpsVd5Y/wCUb0n/AJg7f/k0uKu8z/8AKN6t/wAwdx/y&#xA;abFXeWP+Ub0n/mDt/wDk0uKplirsVdirTMqKWYhVUVZjsAB3OKoHUtWjtNMe9iUzinwKm9T3+6h2&#xA;8duuKvO9S8yeYPNek3lpYotoxZUEb0QsjEpyDMCyNyKNyBoAePUFsKG/yz/K++0LUJ7/AFJQzyqQ&#xA;eTbtyoWURqSAOQrVnavSmJKvTLaztbYMIIwgalaV6Door0UV2UbDtgSrYq7FXYq7FXYqkXn3/lBv&#xA;MX/bMvf+od8Vd5C/5Qby7/2zLL/qHTFU9xV2KrZI45Y2jkUMjChBxVCXNlcLbRwafItuEarEgnrU&#xA;8q9WPI8jX7Xc7nFUVOkjwyJG/pyMpCSUrxJFA1O9MVYTq3l7Vde9Gxuo5LZIyxa5ryqCeQVy20oT&#xA;gqbj4+Qb9lhhQkGrflxZaRxuLIvdanK4MkRZnUJI/wAPKpryc/DzP2+NOBb4lbVu+8vXFtoF/eWt&#xA;q9ubmP05YULOsbIIZHTgoDKGaD0yfoNPtlVmHk9YdS8oWtu0lw3pfBJNLxDs6nmTShBFTT4gfep3&#xA;xSyWKNYokiSvGNQq1NTQCgqTgVdirsVdiqW+Z/8AlG9W/wCYO4/5NNirvLH/ACjek/8AMHb/APJp&#xA;cVd5n/5RvVv+YO4/5NNirvLH/KN6T/zB2/8AyaXFUyxV2KrZZUiiaRyAiAsxJAFB7kgYqwS98165&#xA;eyvHBp0iwSxsiR7yeorRsTwUBC5DcefE/COlQ1SUJbB5bv8AU9GsoS0sHrzMtwN3XYpuaBfUVuTs&#xA;6/DWlT8aGqrO9G8uafpUAiiBmYEN6koUtyFfi2A3+I79ffAlNMVdirsVdirsVdirsVSLz7/yg3mL&#xA;/tmXv/UO+Ku8hf8AKDeXf+2ZZf8AUOmKp7irsVdiq0yRq6xs4Ej1KISKkL1oO9K4quxVC3eoRW09&#xA;vC6szXDcVIGw3A/42+6p7YqlLaZBp2tHUWEt3NdMwjUgHgWIJo1N27J0ogIrthVNLeysbOJ7cEFJ&#xA;QWZJW5VRQFpv1VVoP174FX6fNZS2/wDoZrEjFTswPI/GS3L4iW5cqnrWuKqtxKYYHlCFygrwXqcV&#xA;W2dwbi2SYoU512O/Q0qDtVT1U06YqrYq7FUt8z/8o3q3/MHcf8mmxV3lj/lG9J/5g7f/AJNLirvM&#xA;/wDyjerf8wdx/wAmmxV3lj/lG9J/5g7f/k0uKplirsVYn5sEkd0IrTm93fKikA1CKJY1rUEGM7fA&#xA;29G6CpwhCcQaVdiysopLnhcW4rM8Q2d23Z96Vev7R2apqu9AEppirsVdirsVdirsVdirsVdiqRef&#xA;f+UG8xf9sy9/6h3xV3kL/lBvLv8A2zLL/qHTFU9xV2KuxVQksbeS5S5YH1EAHXY8ala/6vI0xVXx&#xA;VCpp0Kag98Gb1ZF4kV26AfP9np079cVdbXN1JczRywGOND8D9jvtv+1yHxbdOh3xVbdW9pHP+kZS&#xA;3KFegJpsGUGnsJGHhvv7KqlgbVrZWtohDGxNYwoWjA0YEDatRiqIxV2KuxV2Kpb5n/5RvVv+YO4/&#xA;5NNirvLH/KN6T/zB2/8AyaXFXeZ/+Ub1b/mDuP8Ak02Ku8sf8o3pP/MHb/8AJpcVTLFULqFnNdQq&#xA;kVw1syty5pvXYjxHStR7+OKtjTrYXpvKEyncAmqhioQsB2JVQP8AM1VROKuxV2KuxV2KuxV2KuxV&#xA;2KuxVIvPv/KDeYv+2Ze/9Q74qk3krzr5Nt/Jug29xr2nQzw6daRzQyXcCujrAgZWUuCCCKEHFU5/&#xA;x75G/wCpi0z/AKTbf/mvFXf498jf9TFpn/Sbb/8ANeKu/wAe+Rv+pi0z/pNt/wDmvFXf498jf9TF&#xA;pn/Sbb/814q7/Hvkb/qYtM/6Tbf/AJrxV3+PfI3/AFMWmf8ASbb/APNeKu/x75G/6mLTP+k23/5r&#xA;xVx8+eRSKHzFpZB6j65b/wDNeKtL568iIoVfMOlqqiiqLy3AAHYfHirf+PfI3/UxaZ/0m2//ADXi&#xA;rv8AHvkb/qYtM/6Tbf8A5rxV3+PfI3/UxaZ/0m2//NeKu/x75G/6mLTP+k23/wCa8VS/zF548lS+&#xA;X9Tii8wabJLJaTrHGt5AzMzRsAAA9SScVTzy0rL5d0pWBVls7cMp2IIiXY4q7zKrN5d1VVBZms7g&#xA;Ko3JJibYYqkfl3zx5Ki8v6ZFL5g02OWO0gWSNryBWVljUEEF6gg4qmH+PfI3/UxaZ/0m2/8AzXir&#xA;v8e+Rv8AqYtM/wCk23/5rxV3+PfI3/UxaZ/0m2//ADXirv8AHvkb/qYtM/6Tbf8A5rxV3+PfI3/U&#xA;xaZ/0m2//NeKu/x75G/6mLTP+k23/wCa8Vd/j3yN/wBTFpn/AEm2/wDzXirv8e+Rv+pi0z/pNt/+&#xA;a8Vd/j3yN/1MWmf9Jtv/AM14q7/Hvkb/AKmLTP8ApNt/+a8Vd/j3yN/1MWmf9Jtv/wA14q7/AB75&#xA;G/6mLTP+k23/AOa8Vd/j3yN/1MWmf9Jtv/zXiqTedfOvk248m69b2+vadNPNp13HDDHdwM7u0DhV&#xA;VQ5JJJoAMVZtirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVSFfP3kRlDL5j0sqRUEXtuQQf9nirf+PfI3/UxaZ/0m2//ADXirv8AHvkb/qYt&#xA;M/6Tbf8A5rxV3+PfI3/UxaZ/0m2//NeKu/x75G/6mLTP+k23/wCa8Vd/j3yN/wBTFpn/AEm2/wDz&#xA;Xirv8e+Rv+pi0z/pNt/+a8Vd/j3yN/1MWmf9Jtv/AM14q7/Hvkb/AKmLTP8ApNt/+a8Vd/j3yN/1&#xA;MWmf9Jtv/wA14q7/AB75G/6mLTP+k23/AOa8Vd/j3yN/1MWmf9Jtv/zXirv8e+Rv+pi0z/pNt/8A&#xA;mvFXf498jf8AUxaZ/wBJtv8A814q4+fvIoBJ8x6WAOp+u2//ADXiqdxSxSxJLE6yRSKGjkUhlZWF&#xA;QQRsQRirpZYoonlldY4o1LSSMQqqqipJJ2AAxVJB5+8ikAjzHpZB6H67b/8ANeKu/wAe+Rv+pi0z&#xA;/pNt/wDmvFXf498jf9TFpn/Sbb/814q7/Hvkb/qYtM/6Tbf/AJrxV3+PfI3/AFMWmf8ASbb/APNe&#xA;Ku/x75G/6mLTP+k23/5rxV3+PfI3/UxaZ/0m2/8AzXirv8e+Rv8AqYtM/wCk23/5rxV3+PfI3/Ux&#xA;aZ/0m2//ADXirv8AHvkb/qYtM/6Tbf8A5rxV3+PfI3/UxaZ/0m2//NeKu/x75G/6mLTP+k23/wCa&#xA;8Vd/j3yN/wBTFpn/AEm2/wDzXirv8e+Rv+pi0z/pNt/+a8Vabz95EVSzeY9LCgVJN7bgAD/Z4q35&#xA;C/5Qby7/ANsyy/6h0xVPcVWvJGgBdgoJoCxAqfDfFW1dHBKsGAJU0NaEbEYq3irsVdirsVdirsVd&#xA;irsVdirsVS3zP/yjerf8wdx/yabFXeWP+Ub0n/mDt/8Ak0uKu8z/APKN6t/zB3H/ACabFXeWP+Ub&#xA;0n/mDt/+TS4qmWKuxV2KuxV2KuxV2KuxV2KoLVdVt9OhWSWhLmigmgAHVmO/FR3boMVRcUnqRJJx&#xA;ZOahuDijCorQjxGKrsVdiqReff8AlBvMX/bMvf8AqHfFXeQv+UG8u/8AbMsv+odMVT0kAVOwHU4q&#xA;w68s9X8y309vKRa6db1ENxHUmp33VwVkDLQr047N3FShSGmeZPLs0dxa3DXlgWVZLZi0jBfspGS3&#xA;xE/ZjWWo/mcEVxVl9lfWt9brcWsgkiao5KQaEdQaYEq+KuxV2KuxV2KuxV2KuxV2Kpb5n/5RvVv+&#xA;YO4/5NNirvLH/KN6T/zB2/8AyaXFXeZ/+Ub1b/mDuP8Ak02Ku8sf8o3pP/MHb/8AJpcVTLFXYq7F&#xA;XYq7FXYq7FXYq7FUonsr6511HloLC3UNGOtW++h5E71G3EU+1iqb4q7FXYqkXn3/AJQbzF/2zL3/&#xA;AKh3xV3kL/lBvLv/AGzLL/qHTFUx1a5aCzYo1JXIVBx5k92CrvvwBp+o9MVb0q3SCyjCBPjHMtHu&#xA;rV+ya9/hoPDwAFBiqInhinhkglXlFKpSRfFWFCNvbFWH3dhq3ly++taaxl0yYAXKMAzKAQoAHwIO&#xA;Napuo+0G344UMo0vUrbUbNbiB1f9iULX4ZF+0u4B2PtgSi8VdirsVdirsVdirsVdiqW+Z/8AlG9W&#xA;/wCYO4/5NNirvLH/ACjek/8AMHb/APJpcVd5n/5RvVv+YO4/5NNirvLH/KN6T/zB2/8AyaXFUyxV&#xA;2KuxV2KuxV2KuxV2KpP5k1sadbCKKFri6uPhWKMlWVWITn8PxH4nUDjvUjp1xVd5c0ySxtGMjOHn&#xA;bmYmAUJ1/ZX4QT3pTttiqbYq7FXYqkXn3/lBvMX/AGzL3/qHfFXeQv8AlBvLv/bMsv8AqHTFUfqK&#xA;zyy28EaRSxseU0cnE/CrLvQ12AJ6b8uPauKo7FXYq5lDAqwBUihB6EYqw/U7O68t3Mmq2RZtNJBm&#xA;tF2RAO1AKcewY/YFB0UAlCfaT5h0rVABazD1qVe3f4ZFpswI78TseNRgSmWKuxV2KuxV2KuxV2Kp&#xA;b5n/AOUb1b/mDuP+TTYq7yx/yjek/wDMHb/8mlxV3mf/AJRvVv8AmDuP+TTYqldvpt/qHlDSLe1u&#xA;vqoazgEjUPeJaHb7QG9V2r/MKYVSuPzFrmixfon6tJqV1ASqzsDuBTqKJQHcx1ND8KA71ChGWXmi&#xA;/wBPmY+Z5Y7YTgG3gRGLDtUKoZwK1FGqe42riqaaH5v0jWpnisTI3A05stFO1dqEmm3Xx264KSnW&#xA;KuxV2KuxVCalqC2drLME9Vol5vGtahd/iIUM1NuynFUn8vtdareNq13bNAi1+rxycaq1Cm1K7qrM&#xA;rEMVJNR7FWR4FdirsVdiqReff+UG8xf9sy9/6h3xV3kL/lBvLv8A2zLL/qHTFUy+q2cmoGcPW4hA&#xA;5xhhsSpClgN/sk07d6VxVF4q7FXYq7FWLaz5QhQpdaJAsN2pAKA0TiASoCkhVX9ggfsMwphtCCt9&#xA;f8zabciz1S2SK2WnozV5s3LkVVgrSGh4P9gEqADTtirJ9O17SNSJFldRz0HL4T1FeJp/qt8LeB2O&#xA;BKOLoGCFgHapVa7kDrQfTireKuxV2KuxVLfM/wDyjerf8wdx/wAmmxV3lj/lG9J/5g7f/k0uKu8z&#xA;/wDKN6t/zB3H/JpsVd5Y/wCUb0n/AJg7f/k0uKpliqFvdK02+Km8to7gp9n1FDU+/wCZH0nxOKpR&#xA;rfk+C/RRZT/oxlFAYI1pWteXEcN/f7qYbVjupaP5qsLNX1PWDNZRfEVSruxUFiD6i0rwDU5Eiu9O&#xA;QWqhFaV56dOUU3+5B+PItAxNAATUVVT9niOJAPffljSpnL+YGhQwK8rMsrDZKEryI5IA1NxIKMpp&#xA;0IrTpjSbQcn5gMzi3tbN5ZjSkxUrHRvsORI0fBWUMy82AbgV5CoONIXad5W1i5mTVrzUZoLuRjJ6&#xA;C1HFWpv+yA/FQpBXjx241q2KswAAFBsB0GBLsVdirsVdiqReff8AlBvMX/bMvf8AqHfFXeQv+UG8&#xA;u/8AbMsv+odMVRum/o+eeW6t0YPuPiFBSQhyV8OdAxHXxAxVMMVdirsVdirsVUrm0trmNoriJZUY&#xA;FSGFdiQf1gHFWNal+XWiXEf+h8rOVfiQIxKF1XivMfaK0HEgHda9zXDa0gW8i6qCNR/SM02pxFTE&#xA;jsBVUqfich19T+UhQoFVpQ42ho6x5n1hBpNrILPUYxxupuJjBpUMR9p0C/Z5KKFwRUbHFU00F9R0&#xA;yd7HVtQS4AB4SkcV5hTJ8NTVR6asxU1C02NMUoO9vPOb3MmoWTxSaZFXgkPCTkPFRyHNf5izKehX&#xA;uMUJ1da8kWhi/oomcFEUVZPUUkM1aAmNeJYtT7IrTtgSgJxrR8n6tJqsgaSSynaNKAOoMTV5cVQC&#xA;v8tNu5OFU08sf8o3pP8AzB2//JpcCu8z/wDKN6t/zB3H/JpsVd5Y/wCUb0n/AJg7f/k0uKplirsV&#xA;diqldWltd2729zGssMn2kYVBoag/MEVB7YqwzWPy6topjeaErW909eQEm1a1/aIajHdvirso+yKY&#xA;bQgdJvLHTJfqvmKNJitQLgorGMIxUysyggUk+CqkNXry2bFWeWCaY0Cy2KRei9WV41ABrSp28eIw&#xA;JRWKuxV2KuxV2KuxVIvPv/KDeYv+2Ze/9Q74qs8kzRweQNAmlbjFFpNo8jeCrbISdvbFU5s5oJoT&#xA;JCvAFmDrQVDg0avGoJr3BxVXxV2KuxV2KuxV2KuxV2KrEghjd3jjVHkNZGUAFj4kjriqWeYPLdpr&#xA;USJMxjZNi6gHknINwbxAdFcf5QHaoKqN0/T7WwtxBbKQleTMxLMzHYszHck0xVIrTyZEuqtd3Unr&#xA;RRurW8ZofsbIK8QVAWlQD8Z3bthtCaeZ/wDlG9W/5g7j/k02BLvLH/KN6T/zB2//ACaXFXeZ/wDl&#xA;G9W/5g7j/k02Ku8sf8o3pP8AzB2//JpcVTLFXYq7FXYq7FUJe6Rpd8jJeWkU6uQzc0BPICgavWoH&#xA;fFWKT6J5h8v3BvtIkFzaVpPbPVm4/wAzVPx9B+18FPhFGYYUJx5e8zvqjSJdW4spVPFY2aoJ8Fch&#xA;Q/wlW6AitCNqlSn2BXYq7FXYq7FUi8+/8oN5i/7Zl7/1Dviqj5Oufq35e6BNx58dMstug3gjFWP7&#xA;KitWPYb4qn1m0bWsTRx+ihUFYiOPEU6ce2KquKuxV2KuxV2KuxV2KuxV2KuxV2KuxVLfM/8Ayjer&#xA;f8wdx/yabFXeWP8AlG9J/wCYO3/5NLirvM//ACjerf8AMHcf8mmxV3lj/lG9J/5g7f8A5NLiqZYq&#xA;7FXYq7FXYq7FXYqkPmLypFrLhvrD2zcCpdN9z34n4WrQA8hWg2I64qk8PmDzJo0kSapZk6YG9ITV&#xA;Z3UDovqMQWKjqzj46fCSThQy+3v7O4oIZlZjX93WjjjswZD8SlTsQRUd8CVfFXYq7FUi8+/8oN5i&#xA;/wC2Ze/9Q74qhfKKag3kPy19TdUYabZc+QH/ACzpTqDt4jY+BHdVk+KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2Kpb5n/5RvVv+YO4/5NNirvLH/KN6T/zB2/8AyaXFXeZ/+Ub1b/mDuP8Ak02Ku8sf8o3p&#xA;P/MHb/8AJpcVTLFXYq7FXYq7FXYq7FXYqp3NulxA8LgFXFPiVWAPY8WBU0O+4xVic35dxcjc2t7J&#xA;b3vROrxKoBCqBUP8NSRyc9TUEUGG0UoQ6/r3lpvq/mJjfQnaCaFQXYU2ozenyNfhYHcfaJAIGKsn&#xA;0jW7bUoQ8fwuRyC70ZdqshIXkATRttj9FQlGRXEMrOsbhmjPFwOx/wBsEfOo7Yqk3n3/AJQbzF/2&#xA;zL3/AKh3xVKfKPmWx0/ypothd2mpxXdpYW0FxH+itSbjJHCqOtVtypow7HFU2/xno/8Ayz6n/wBw&#xA;nU/+ybFXf4z0f/ln1P8A7hOp/wDZNirv8Z6P/wAs+p/9wnU/+ybFXf4z0f8A5Z9T/wC4Tqf/AGTY&#xA;q7/Gej/8s+p/9wnU/wDsmxV3+M9H/wCWfU/+4Tqf/ZNirv8AGej/APLPqf8A3CdT/wCybFXf4z0f&#xA;/ln1P/uE6n/2TYq7/Gej/wDLPqf/AHCdT/7JsVd/jPR/+WfU/wDuE6n/ANk2Ku/xno//ACz6n/3C&#xA;dT/7JsVd/jPR/wDln1P/ALhOp/8AZNirv8Z6P/yz6n/3CdT/AOybFUDrvmvTrrRNQtoLXU3nntpo&#xA;4k/RWpCrvGVUVNuB1PfFU88vwSwaDpsEylJorWBJEPVWWNQQfkcVd5ggln0HUoIVLzS2s6RoOrM0&#xA;bAAfM4qkehea9OtdE0+2ntdTSeC2hjlT9FakaOkYVhUW5HUdsVR3+M9H/wCWfU/+4Tqf/ZNirv8A&#xA;Gej/APLPqf8A3CdT/wCybFXf4z0f/ln1P/uE6n/2TYq7/Gej/wDLPqf/AHCdT/7JsVd/jPR/+WfU&#xA;/wDuE6n/ANk2Ku/xno//ACz6n/3CdT/7JsVd/jPR/wDln1P/ALhOp/8AZNirv8Z6P/yz6n/3CdT/&#xA;AOybFXf4z0f/AJZ9T/7hOp/9k2Ku/wAZ6P8A8s+p/wDcJ1P/ALJsVU5/NegTpwnstRlSteL6PqTC&#xA;vjQ22KuTzXoKSvMtpqQkk+2w0nU6mn/Rtiq238z+Xrd5Hhs9TRpSC5Gk6p2qQN7fYbnYeOKpf5u8&#xA;y2OoeVNasLS01OW7u7C5gt4/0VqS8pJIWRFq1uFFWPc4q//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:4B71EAD851D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:8BE8F4E054D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -185.149 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 185.149 li
271.65 185.149 li
271.65 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0.25 0.25 mo
0.25 84.1499 li
127.4 84.1499 li
127.4 0.25 li
0.25 0.25 li
0.25 0.25 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
0.25 lw
55.4453 36.8999 mo
55.4453 36.0303 54.7397 35.3247 53.8701 35.3247 cv
53.001 35.3247 52.2954 36.0303 52.2954 36.8999 cv
52.2954 37.769 53.001 38.4746 53.8701 38.4746 cv
54.7397 38.4746 55.4453 37.769 55.4453 36.8999 cv
@
1 lc
53.8003 36.8496 mo
53.8003 36.8496 li
@
0 lc
65.0454 27.2998 mo
65.0454 26.4302 64.3394 25.7246 63.4702 25.7246 cv
62.6006 25.7246 61.895 26.4302 61.895 27.2998 cv
61.895 28.1689 62.6006 28.875 63.4702 28.875 cv
64.3394 28.875 65.0454 28.1689 65.0454 27.2998 cv
@
1 lc
63.5503 27.1997 mo
63.5503 27.1997 li
@
0 lc
77.7651 53.2197 mo
77.7651 52.3506 77.0596 51.6445 76.1904 51.6445 cv
75.3208 51.6445 74.6152 52.3506 74.6152 53.2197 cv
74.6152 54.0894 75.3208 54.7949 76.1904 54.7949 cv
77.0596 54.7949 77.7651 54.0894 77.7651 53.2197 cv
@
1 lc
76.2002 53.1499 mo
76.2002 53.1499 li
@
0 lc
59.7651 43.6196 mo
59.7651 42.7505 59.0596 42.0449 58.1904 42.0449 cv
57.3208 42.0449 56.6152 42.7505 56.6152 43.6196 cv
56.6152 44.4893 57.3208 45.1948 58.1904 45.1948 cv
59.0596 45.1948 59.7651 44.4893 59.7651 43.6196 cv
@
1 lc
58.1504 43.5498 mo
58.1504 43.5498 li
@
0 lc
63.605 44.8198 mo
63.605 43.9502 62.8994 43.2446 62.0303 43.2446 cv
61.1606 43.2446 60.4551 43.9502 60.4551 44.8198 cv
60.4551 45.689 61.1606 46.3945 62.0303 46.3945 cv
62.8994 46.3945 63.605 45.689 63.605 44.8198 cv
@
1 lc
62 44.75 mo
62 44.75 li
@
0 lc
40.5654 20.0996 mo
40.5654 19.2305 39.8594 18.5249 38.9902 18.5249 cv
38.1206 18.5249 37.415 19.2305 37.415 20.0996 cv
37.415 20.9692 38.1206 21.6748 38.9902 21.6748 cv
39.8594 21.6748 40.5654 20.9692 40.5654 20.0996 cv
@
1 lc
39.0503 20.0996 mo
39.0503 20.0996 li
@
0 lc
51.3652 48.4199 mo
51.3652 47.5503 50.6597 46.8447 49.79 46.8447 cv
48.9209 46.8447 48.2153 47.5503 48.2153 48.4199 cv
48.2153 49.2891 48.9209 49.9946 49.79 49.9946 cv
50.6597 49.9946 51.3652 49.2891 51.3652 48.4199 cv
@
1 lc
49.75 48.4497 mo
49.75 48.4497 li
@
0 lc
72.2451 12.4199 mo
72.2451 11.5503 71.5396 10.8447 70.6704 10.8447 cv
69.8008 10.8447 69.0952 11.5503 69.0952 12.4199 cv
69.0952 13.2891 69.8008 13.9946 70.6704 13.9946 cv
71.5396 13.9946 72.2451 13.2891 72.2451 12.4199 cv
@
1 lc
70.7002 12.5 mo
70.7002 12.5 li
@
0 lc
79.9253 44.8198 mo
79.9253 43.9502 79.2197 43.2446 78.3501 43.2446 cv
77.481 43.2446 76.7754 43.9502 76.7754 44.8198 cv
76.7754 45.689 77.481 46.3945 78.3501 46.3945 cv
79.2197 46.3945 79.9253 45.689 79.9253 44.8198 cv
@
1 lc
78.3003 44.8999 mo
78.3003 44.8999 li
@
0 lc
75.125 41.9399 mo
75.125 41.0703 74.4194 40.3647 73.5503 40.3647 cv
72.6807 40.3647 71.9751 41.0703 71.9751 41.9399 cv
71.9751 42.8091 72.6807 43.5146 73.5503 43.5146 cv
74.4194 43.5146 75.125 42.8091 75.125 41.9399 cv
@
1 lc
73.4502 41.9497 mo
73.4502 41.9497 li
@
0 lc
75.3652 44.3398 mo
75.3652 43.4702 74.6597 42.7646 73.79 42.7646 cv
72.9209 42.7646 72.2153 43.4702 72.2153 44.3398 cv
72.2153 45.209 72.9209 45.915 73.79 45.915 cv
74.6597 45.915 75.3652 45.209 75.3652 44.3398 cv
@
1 lc
73.8003 44.2998 mo
73.8003 44.2998 li
@
0 lc
49.4453 39.7798 mo
49.4453 38.9102 48.7397 38.2046 47.8701 38.2046 cv
47.001 38.2046 46.2954 38.9102 46.2954 39.7798 cv
46.2954 40.6494 47.001 41.355 47.8701 41.355 cv
48.7397 41.355 49.4453 40.6494 49.4453 39.7798 cv
@
1 lc
47.8501 39.8496 mo
47.8501 39.8496 li
@
0 lc
59.0454 43.6196 mo
59.0454 42.7505 58.3394 42.0449 57.4702 42.0449 cv
56.6006 42.0449 55.895 42.7505 55.895 43.6196 cv
55.895 44.4893 56.6006 45.1948 57.4702 45.1948 cv
58.3394 45.1948 59.0454 44.4893 59.0454 43.6196 cv
@
1 lc
57.4502 43.5996 mo
57.4502 43.5996 li
@
0 lc
64.5654 35.9399 mo
64.5654 35.0703 63.8594 34.3647 62.9902 34.3647 cv
62.1206 34.3647 61.415 35.0703 61.415 35.9399 cv
61.415 36.8091 62.1206 37.5146 62.9902 37.5146 cv
63.8594 37.5146 64.5654 36.8091 64.5654 35.9399 cv
@
1 lc
62.9004 35.9497 mo
62.9004 35.9497 li
@
0 lc
65.2852 42.1797 mo
65.2852 41.3105 64.5796 40.605 63.71 40.605 cv
62.8408 40.605 62.1353 41.3105 62.1353 42.1797 cv
62.1353 43.0493 62.8408 43.7549 63.71 43.7549 cv
64.5796 43.7549 65.2852 43.0493 65.2852 42.1797 cv
@
1 lc
63.8003 42.1997 mo
63.8003 42.1997 li
@
0 lc
56.645 42.6597 mo
56.645 41.7905 55.9395 41.085 55.0703 41.085 cv
54.2007 41.085 53.4951 41.7905 53.4951 42.6597 cv
53.4951 43.5293 54.2007 44.2349 55.0703 44.2349 cv
55.9395 44.2349 56.645 43.5293 56.645 42.6597 cv
@
1 lc
55.0503 42.6499 mo
55.0503 42.6499 li
@
0 lc
73.6851 47.2197 mo
73.6851 46.3506 72.9795 45.6445 72.1104 45.6445 cv
71.2407 45.6445 70.5352 46.3506 70.5352 47.2197 cv
70.5352 48.0894 71.2407 48.7949 72.1104 48.7949 cv
72.9795 48.7949 73.6851 48.0894 73.6851 47.2197 cv
@
1 lc
72.1504 47.1499 mo
72.1504 47.1499 li
@
0 lc
70.9253 56.8198 mo
70.9253 55.9502 70.2197 55.2446 69.3501 55.2446 cv
68.481 55.2446 67.7754 55.9502 67.7754 56.8198 cv
67.7754 57.689 68.481 58.3945 69.3501 58.3945 cv
70.2197 58.3945 70.9253 57.689 70.9253 56.8198 cv
@
1 lc
69.3501 56.8999 mo
69.3501 56.8999 li
@
0 lc
90.4854 45.2998 mo
90.4854 44.4302 89.7798 43.7246 88.9102 43.7246 cv
88.041 43.7246 87.335 44.4302 87.335 45.2998 cv
87.335 46.1689 88.041 46.875 88.9102 46.875 cv
89.7798 46.875 90.4854 46.1689 90.4854 45.2998 cv
@
1 lc
88.8501 45.3496 mo
88.8501 45.3496 li
@
0 lc
94.8052 48.4199 mo
94.8052 47.5503 94.0996 46.8447 93.23 46.8447 cv
92.3608 46.8447 91.6553 47.5503 91.6553 48.4199 cv
91.6553 49.2891 92.3608 49.9946 93.23 49.9946 cv
94.0996 49.9946 94.8052 49.2891 94.8052 48.4199 cv
@
1 lc
93.2002 48.5 mo
93.2002 48.5 li
@
0 lc
66.0054 41.6997 mo
66.0054 40.8306 65.2998 40.125 64.4302 40.125 cv
63.5605 40.125 62.855 40.8306 62.855 41.6997 cv
62.855 42.5693 63.5605 43.2749 64.4302 43.2749 cv
65.2998 43.2749 66.0054 42.5693 66.0054 41.6997 cv
@
1 lc
64.4004 41.7998 mo
64.4004 41.7998 li
@
0 lc
55.4453 49.6196 mo
55.4453 48.7505 54.7397 48.0449 53.8701 48.0449 cv
53.001 48.0449 52.2954 48.7505 52.2954 49.6196 cv
52.2954 50.4893 53.001 51.1948 53.8701 51.1948 cv
54.7397 51.1948 55.4453 50.4893 55.4453 49.6196 cv
@
1 lc
53.8501 49.5498 mo
53.8501 49.5498 li
@
0 lc
58.5654 54.1797 mo
58.5654 53.3105 57.8594 52.605 56.9902 52.605 cv
56.1206 52.605 55.415 53.3105 55.415 54.1797 cv
55.415 55.0493 56.1206 55.7549 56.9902 55.7549 cv
57.8594 55.7549 58.5654 55.0493 58.5654 54.1797 cv
@
1 lc
57 54.25 mo
57 54.25 li
@
0 lc
66.4854 58.8599 mo
66.4854 57.9902 65.7798 57.2847 64.9102 57.2847 cv
64.041 57.2847 63.335 57.9902 63.335 58.8599 cv
63.335 59.729 64.041 60.4346 64.9102 60.4346 cv
65.7798 60.4346 66.4854 59.729 66.4854 58.8599 cv
@
1 lc
64.9004 58.8496 mo
64.9004 58.8496 li
@
0 lc
70.8052 40.0195 mo
70.8052 39.1504 70.0996 38.4448 69.23 38.4448 cv
68.3608 38.4448 67.6553 39.1504 67.6553 40.0195 cv
67.6553 40.8892 68.3608 41.5947 69.23 41.5947 cv
70.0996 41.5947 70.8052 40.8892 70.8052 40.0195 cv
@
1 lc
69.25 40 mo
69.25 40 li
@
0 lc
79.4453 57.8999 mo
79.4453 57.0303 78.7397 56.3247 77.8701 56.3247 cv
77.001 56.3247 76.2954 57.0303 76.2954 57.8999 cv
76.2954 58.769 77.001 59.4746 77.8701 59.4746 cv
78.7397 59.4746 79.4453 58.769 79.4453 57.8999 cv
@
1 lc
77.8003 57.8999 mo
77.8003 57.8999 li
@
0 lc
65.2852 42.1797 mo
65.2852 41.3105 64.5796 40.605 63.71 40.605 cv
62.8408 40.605 62.1353 41.3105 62.1353 42.1797 cv
62.1353 43.0493 62.8408 43.7549 63.71 43.7549 cv
64.5796 43.7549 65.2852 43.0493 65.2852 42.1797 cv
@
1 lc
63.75 42.0996 mo
63.75 42.0996 li
@
0 lc
77.5254 53.6997 mo
77.5254 52.8306 76.8198 52.125 75.9502 52.125 cv
75.0806 52.125 74.375 52.8306 74.375 53.6997 cv
74.375 54.5693 75.0806 55.2749 75.9502 55.2749 cv
76.8198 55.2749 77.5254 54.5693 77.5254 53.6997 cv
@
1 lc
75.9004 53.6499 mo
75.9004 53.6499 li
@
0 lc
76.9253 56.8198 mo
76.9253 55.9502 76.2197 55.2446 75.3501 55.2446 cv
74.481 55.2446 73.7754 55.9502 73.7754 56.8198 cv
73.7754 57.689 74.481 58.3945 75.3501 58.3945 cv
76.2197 58.3945 76.9253 57.689 76.9253 56.8198 cv
@
1 lc
75.3501 56.75 mo
75.3501 56.75 li
@
0 lc
61.4453 27.2998 mo
61.4453 26.4302 60.7397 25.7246 59.8701 25.7246 cv
59.001 25.7246 58.2954 26.4302 58.2954 27.2998 cv
58.2954 28.1689 59.001 28.875 59.8701 28.875 cv
60.7397 28.875 61.4453 28.1689 61.4453 27.2998 cv
@
1 lc
59.8003 27.2998 mo
59.8003 27.2998 li
@
0 lc
66.4854 41.3398 mo
66.4854 40.4702 65.7798 39.7646 64.9102 39.7646 cv
64.041 39.7646 63.335 40.4702 63.335 41.3398 cv
63.335 42.209 64.041 42.915 64.9102 42.915 cv
65.7798 42.915 66.4854 42.209 66.4854 41.3398 cv
@
1 lc
64.9004 41.3496 mo
64.9004 41.3496 li
@
0 lc
70.3252 43.8599 mo
70.3252 42.9902 69.6196 42.2847 68.75 42.2847 cv
67.8809 42.2847 67.1753 42.9902 67.1753 43.8599 cv
67.1753 44.729 67.8809 45.4346 68.75 45.4346 cv
69.6196 45.4346 70.3252 44.729 70.3252 43.8599 cv
@
1 lc
68.6504 43.8999 mo
68.6504 43.8999 li
@
0 lc
70.3252 29.9399 mo
70.3252 29.0703 69.6196 28.3647 68.75 28.3647 cv
67.8809 28.3647 67.1753 29.0703 67.1753 29.9399 cv
67.1753 30.8091 67.8809 31.5146 68.75 31.5146 cv
69.6196 31.5146 70.3252 30.8091 70.3252 29.9399 cv
@
1 lc
68.7002 29.9497 mo
68.7002 29.9497 li
@
0 lc
67.6851 46.5 mo
67.6851 45.6304 66.9795 44.9248 66.1104 44.9248 cv
65.2407 44.9248 64.5352 45.6304 64.5352 46.5 cv
64.5352 47.3691 65.2407 48.0747 66.1104 48.0747 cv
66.9795 48.0747 67.6851 47.3691 67.6851 46.5 cv
@
1 lc
66.0503 46.4497 mo
66.0503 46.4497 li
@
0 lc
65.8853 41.9399 mo
65.8853 41.0703 65.1797 40.3647 64.3101 40.3647 cv
63.4409 40.3647 62.7354 41.0703 62.7354 41.9399 cv
62.7354 42.8091 63.4409 43.5146 64.3101 43.5146 cv
65.1797 43.5146 65.8853 42.8091 65.8853 41.9399 cv
@
1 lc
64.3003 42 mo
64.3003 42 li
@
0 lc
90.7251 44.0996 mo
90.7251 43.2305 90.0195 42.5249 89.1504 42.5249 cv
88.2808 42.5249 87.5752 43.2305 87.5752 44.0996 cv
87.5752 44.9692 88.2808 45.6748 89.1504 45.6748 cv
90.0195 45.6748 90.7251 44.9692 90.7251 44.0996 cv
@
1 lc
89.1001 44.1997 mo
89.1001 44.1997 li
@
0 lc
68.165 49.8599 mo
68.165 48.9902 67.4595 48.2847 66.5903 48.2847 cv
65.7207 48.2847 65.0151 48.9902 65.0151 49.8599 cv
65.0151 50.729 65.7207 51.4346 66.5903 51.4346 cv
67.4595 51.4346 68.165 50.729 68.165 49.8599 cv
@
1 lc
66.5503 49.9497 mo
66.5503 49.9497 li
@
0 lc
49.9253 30.6597 mo
49.9253 29.7905 49.2197 29.085 48.3501 29.085 cv
47.481 29.085 46.7754 29.7905 46.7754 30.6597 cv
46.7754 31.5293 47.481 32.2349 48.3501 32.2349 cv
49.2197 32.2349 49.9253 31.5293 49.9253 30.6597 cv
@
1 lc
48.4502 30.75 mo
48.4502 30.75 li
@
0 lc
55.4453 34.2598 mo
55.4453 33.3906 54.7397 32.6846 53.8701 32.6846 cv
53.001 32.6846 52.2954 33.3906 52.2954 34.2598 cv
52.2954 35.1294 53.001 35.835 53.8701 35.835 cv
54.7397 35.835 55.4453 35.1294 55.4453 34.2598 cv
@
1 lc
53.9004 34.1997 mo
53.9004 34.1997 li
@
0 lc
74.8853 41.46 mo
74.8853 40.5903 74.1797 39.8848 73.3101 39.8848 cv
72.4409 39.8848 71.7354 40.5903 71.7354 41.46 cv
71.7354 42.3291 72.4409 43.0347 73.3101 43.0347 cv
74.1797 43.0347 74.8853 42.3291 74.8853 41.46 cv
@
1 lc
73.3003 41.4497 mo
73.3003 41.4497 li
@
0 lc
65.5254 41.9399 mo
65.5254 41.0703 64.8193 40.3647 63.9502 40.3647 cv
63.0806 40.3647 62.375 41.0703 62.375 41.9399 cv
62.375 42.8091 63.0806 43.5146 63.9502 43.5146 cv
64.8193 43.5146 65.5254 42.8091 65.5254 41.9399 cv
@
1 lc
63.9004 42 mo
63.9004 42 li
@
0 lc
58.085 39.54 mo
58.085 38.6704 57.3794 37.9648 56.5103 37.9648 cv
55.6406 37.9648 54.9351 38.6704 54.9351 39.54 cv
54.9351 40.4092 55.6406 41.1147 56.5103 41.1147 cv
57.3794 41.1147 58.085 40.4092 58.085 39.54 cv
@
1 lc
56.5 39.5498 mo
56.5 39.5498 li
@
0 lc
53.7651 26.3398 mo
53.7651 25.4702 53.0596 24.7646 52.1904 24.7646 cv
51.3208 24.7646 50.6152 25.4702 50.6152 26.3398 cv
50.6152 27.209 51.3208 27.915 52.1904 27.915 cv
53.0596 27.915 53.7651 27.209 53.7651 26.3398 cv
@
1 lc
52.1001 26.25 mo
52.1001 26.25 li
@
0 lc
64.9253 42.8999 mo
64.9253 42.0303 64.2197 41.3247 63.3501 41.3247 cv
62.481 41.3247 61.7754 42.0303 61.7754 42.8999 cv
61.7754 43.769 62.481 44.4746 63.3501 44.4746 cv
64.2197 44.4746 64.9253 43.769 64.9253 42.8999 cv
@
1 lc
63.3501 42.9497 mo
63.3501 42.9497 li
@
0 lc
78.4854 38.0996 mo
78.4854 37.2305 77.7798 36.5249 76.9102 36.5249 cv
76.041 36.5249 75.335 37.2305 75.335 38.0996 cv
75.335 38.9692 76.041 39.6748 76.9102 39.6748 cv
77.7798 39.6748 78.4854 38.9692 78.4854 38.0996 cv
@
1 lc
76.9502 38 mo
76.9502 38 li
@
0 lc
78.0054 53.0996 mo
78.0054 52.2305 77.2998 51.5249 76.4302 51.5249 cv
75.5605 51.5249 74.855 52.2305 74.855 53.0996 cv
74.855 53.9692 75.5605 54.6748 76.4302 54.6748 cv
77.2998 54.6748 78.0054 53.9692 78.0054 53.0996 cv
@
1 lc
76.5 53.0996 mo
76.5 53.0996 li
@
0 lc
62.165 44.8198 mo
62.165 43.9502 61.4595 43.2446 60.5903 43.2446 cv
59.7207 43.2446 59.0151 43.9502 59.0151 44.8198 cv
59.0151 45.689 59.7207 46.3945 60.5903 46.3945 cv
61.4595 46.3945 62.165 45.689 62.165 44.8198 cv
@
1 lc
60.6001 44.8496 mo
60.6001 44.8496 li
@
0 lc
69.125 41.2197 mo
69.125 40.3506 68.4194 39.6445 67.5503 39.6445 cv
66.6807 39.6445 65.9751 40.3506 65.9751 41.2197 cv
65.9751 42.0894 66.6807 42.7949 67.5503 42.7949 cv
68.4194 42.7949 69.125 42.0894 69.125 41.2197 cv
@
1 lc
67.6001 41.2998 mo
67.6001 41.2998 li
@
0 lc
64.6851 14.0996 mo
64.6851 13.2305 63.9795 12.5249 63.1104 12.5249 cv
62.2407 12.5249 61.5352 13.2305 61.5352 14.0996 cv
61.5352 14.9692 62.2407 15.6748 63.1104 15.6748 cv
63.9795 15.6748 64.6851 14.9692 64.6851 14.0996 cv
@
1 lc
63.1001 14.1997 mo
63.1001 14.1997 li
@
0 lc
62.4053 37.6196 mo
62.4053 36.7505 61.6997 36.0449 60.8301 36.0449 cv
59.9609 36.0449 59.2554 36.7505 59.2554 37.6196 cv
59.2554 38.4893 59.9609 39.1948 60.8301 39.1948 cv
61.6997 39.1948 62.4053 38.4893 62.4053 37.6196 cv
@
1 lc
60.9004 37.6499 mo
60.9004 37.6499 li
@
0 lc
65.165 42.1797 mo
65.165 41.3105 64.4595 40.605 63.5903 40.605 cv
62.7207 40.605 62.0151 41.3105 62.0151 42.1797 cv
62.0151 43.0493 62.7207 43.7549 63.5903 43.7549 cv
64.4595 43.7549 65.165 43.0493 65.165 42.1797 cv
@
1 lc
63.6001 42.0996 mo
63.6001 42.0996 li
@
0 lc
65.7651 43.3799 mo
65.7651 42.5103 65.0596 41.8047 64.1904 41.8047 cv
63.3208 41.8047 62.6152 42.5103 62.6152 43.3799 cv
62.6152 44.249 63.3208 44.9546 64.1904 44.9546 cv
65.0596 44.9546 65.7651 44.249 65.7651 43.3799 cv
@
1 lc
64.2002 43.3496 mo
64.2002 43.3496 li
@
0 lc
68.4053 54.8999 mo
68.4053 54.0303 67.6997 53.3247 66.8301 53.3247 cv
65.9609 53.3247 65.2554 54.0303 65.2554 54.8999 cv
65.2554 55.769 65.9609 56.4746 66.8301 56.4746 cv
67.6997 56.4746 68.4053 55.769 68.4053 54.8999 cv
@
1 lc
66.75 54.8999 mo
66.75 54.8999 li
@
0 lc
63.125 38.8198 mo
63.125 37.9502 62.4194 37.2446 61.5503 37.2446 cv
60.6807 37.2446 59.9751 37.9502 59.9751 38.8198 cv
59.9751 39.689 60.6807 40.3945 61.5503 40.3945 cv
62.4194 40.3945 63.125 39.689 63.125 38.8198 cv
@
1 lc
61.5 38.75 mo
61.5 38.75 li
@
0 lc
57.125 40.5 mo
57.125 39.6304 56.4194 38.9248 55.5503 38.9248 cv
54.6807 38.9248 53.9751 39.6304 53.9751 40.5 cv
53.9751 41.3691 54.6807 42.0747 55.5503 42.0747 cv
56.4194 42.0747 57.125 41.3691 57.125 40.5 cv
@
1 lc
55.6504 40.5498 mo
55.6504 40.5498 li
@
0 lc
73.5654 15.54 mo
73.5654 14.6704 72.8594 13.9648 71.9902 13.9648 cv
71.1206 13.9648 70.415 14.6704 70.415 15.54 cv
70.415 16.4092 71.1206 17.1147 71.9902 17.1147 cv
72.8594 17.1147 73.5654 16.4092 73.5654 15.54 cv
@
1 lc
72 15.5498 mo
72 15.5498 li
@
0 lc
62.4053 44.46 mo
62.4053 43.5903 61.6997 42.8848 60.8301 42.8848 cv
59.9609 42.8848 59.2554 43.5903 59.2554 44.46 cv
59.2554 45.3291 59.9609 46.0347 60.8301 46.0347 cv
61.6997 46.0347 62.4053 45.3291 62.4053 44.46 cv
@
1 lc
60.8501 44.4497 mo
60.8501 44.4497 li
@
0 lc
55.085 30.0596 mo
55.085 29.1904 54.3794 28.4849 53.5103 28.4849 cv
52.6406 28.4849 51.9351 29.1904 51.9351 30.0596 cv
51.9351 30.9292 52.6406 31.6348 53.5103 31.6348 cv
54.3794 31.6348 55.085 30.9292 55.085 30.0596 cv
@
1 lc
53.5 30.0498 mo
53.5 30.0498 li
@
0 lc
73.3252 54.2998 mo
73.3252 53.4302 72.6196 52.7246 71.75 52.7246 cv
70.8809 52.7246 70.1753 53.4302 70.1753 54.2998 cv
70.1753 55.1689 70.8809 55.875 71.75 55.875 cv
72.6196 55.875 73.3252 55.1689 73.3252 54.2998 cv
@
1 lc
71.75 54.2998 mo
71.75 54.2998 li
@
0 lc
58.5654 37.6196 mo
58.5654 36.7505 57.8594 36.0449 56.9902 36.0449 cv
56.1206 36.0449 55.415 36.7505 55.415 37.6196 cv
55.415 38.4893 56.1206 39.1948 56.9902 39.1948 cv
57.8594 39.1948 58.5654 38.4893 58.5654 37.6196 cv
@
1 lc
57.0503 37.6499 mo
57.0503 37.6499 li
@
0 lc
72.3652 28.2598 mo
72.3652 27.3906 71.6597 26.6846 70.79 26.6846 cv
69.9209 26.6846 69.2153 27.3906 69.2153 28.2598 cv
69.2153 29.1294 69.9209 29.835 70.79 29.835 cv
71.6597 29.835 72.3652 29.1294 72.3652 28.2598 cv
@
1 lc
70.8003 28.1997 mo
70.8003 28.1997 li
@
0 lc
61.4453 50.8198 mo
61.4453 49.9502 60.7397 49.2446 59.8701 49.2446 cv
59.001 49.2446 58.2954 49.9502 58.2954 50.8198 cv
58.2954 51.689 59.001 52.3945 59.8701 52.3945 cv
60.7397 52.3945 61.4453 51.689 61.4453 50.8198 cv
@
1 lc
59.8501 50.75 mo
59.8501 50.75 li
@
0 lc
53.0454 53.9399 mo
53.0454 53.0703 52.3394 52.3647 51.4702 52.3647 cv
50.6006 52.3647 49.895 53.0703 49.895 53.9399 cv
49.895 54.8091 50.6006 55.5146 51.4702 55.5146 cv
52.3394 55.5146 53.0454 54.8091 53.0454 53.9399 cv
@
1 lc
51.4502 53.8496 mo
51.4502 53.8496 li
@
0 lc
62.645 41.9399 mo
62.645 41.0703 61.9395 40.3647 61.0703 40.3647 cv
60.2007 40.3647 59.4951 41.0703 59.4951 41.9399 cv
59.4951 42.8091 60.2007 43.5146 61.0703 43.5146 cv
61.9395 43.5146 62.645 42.8091 62.645 41.9399 cv
@
1 lc
61.0503 41.8999 mo
61.0503 41.8999 li
@
0 lc
66.9653 27.54 mo
66.9653 26.6704 66.2598 25.9648 65.3901 25.9648 cv
64.521 25.9648 63.8154 26.6704 63.8154 27.54 cv
63.8154 28.4092 64.521 29.1147 65.3901 29.1147 cv
66.2598 29.1147 66.9653 28.4092 66.9653 27.54 cv
@
1 lc
65.3501 27.4497 mo
65.3501 27.4497 li
@
0 lc
63.3652 46.0195 mo
63.3652 45.1504 62.6597 44.4448 61.79 44.4448 cv
60.9209 44.4448 60.2153 45.1504 60.2153 46.0195 cv
60.2153 46.8892 60.9209 47.5947 61.79 47.5947 cv
62.6597 47.5947 63.3652 46.8892 63.3652 46.0195 cv
@
1 lc
61.8501 46 mo
61.8501 46 li
@
0 lc
67.6851 40.2598 mo
67.6851 39.3906 66.9795 38.6846 66.1104 38.6846 cv
65.2407 38.6846 64.5352 39.3906 64.5352 40.2598 cv
64.5352 41.1294 65.2407 41.835 66.1104 41.835 cv
66.9795 41.835 67.6851 41.1294 67.6851 40.2598 cv
@
1 lc
66.1504 40.1997 mo
66.1504 40.1997 li
@
0 lc
71.2852 60.54 mo
71.2852 59.6704 70.5796 58.9648 69.71 58.9648 cv
68.8408 58.9648 68.1353 59.6704 68.1353 60.54 cv
68.1353 61.4092 68.8408 62.1147 69.71 62.1147 cv
70.5796 62.1147 71.2852 61.4092 71.2852 60.54 cv
@
1 lc
69.6504 60.5498 mo
69.6504 60.5498 li
@
0 lc
65.2852 42.0596 mo
65.2852 41.1904 64.5796 40.4849 63.71 40.4849 cv
62.8408 40.4849 62.1353 41.1904 62.1353 42.0596 cv
62.1353 42.9292 62.8408 43.6348 63.71 43.6348 cv
64.5796 43.6348 65.2852 42.9292 65.2852 42.0596 cv
@
1 lc
63.8003 42.0498 mo
63.8003 42.0498 li
@
0 lc
66.2451 47.9399 mo
66.2451 47.0703 65.5396 46.3647 64.6704 46.3647 cv
63.8008 46.3647 63.0952 47.0703 63.0952 47.9399 cv
63.0952 48.8091 63.8008 49.5146 64.6704 49.5146 cv
65.5396 49.5146 66.2451 48.8091 66.2451 47.9399 cv
@
1 lc
64.6504 47.9497 mo
64.6504 47.9497 li
@
0 lc
91.5654 43.8599 mo
91.5654 42.9902 90.8594 42.2847 89.9902 42.2847 cv
89.1206 42.2847 88.415 42.9902 88.415 43.8599 cv
88.415 44.729 89.1206 45.4346 89.9902 45.4346 cv
90.8594 45.4346 91.5654 44.729 91.5654 43.8599 cv
@
1 lc
90 43.7998 mo
90 43.7998 li
@
0 lc
65.0454 42.4199 mo
65.0454 41.5503 64.3394 40.8447 63.4702 40.8447 cv
62.6006 40.8447 61.895 41.5503 61.895 42.4199 cv
61.895 43.2891 62.6006 43.9946 63.4702 43.9946 cv
64.3394 43.9946 65.0454 43.2891 65.0454 42.4199 cv
@
1 lc
63.5 42.3496 mo
63.5 42.3496 li
@
0 lc
56.8853 35.2197 mo
56.8853 34.3506 56.1797 33.6445 55.3101 33.6445 cv
54.4409 33.6445 53.7354 34.3506 53.7354 35.2197 cv
53.7354 36.0894 54.4409 36.7949 55.3101 36.7949 cv
56.1797 36.7949 56.8853 36.0894 56.8853 35.2197 cv
@
1 lc
55.25 35.25 mo
55.25 35.25 li
@
0 lc
66.0054 43.5 mo
66.0054 42.6304 65.2998 41.9248 64.4302 41.9248 cv
63.5605 41.9248 62.855 42.6304 62.855 43.5 cv
62.855 44.3691 63.5605 45.0747 64.4302 45.0747 cv
65.2998 45.0747 66.0054 44.3691 66.0054 43.5 cv
@
1 lc
64.4502 43.5 mo
64.4502 43.5 li
@
0 lc
59.5254 52.2598 mo
59.5254 51.3906 58.8193 50.6846 57.9502 50.6846 cv
57.0806 50.6846 56.375 51.3906 56.375 52.2598 cv
56.375 53.1294 57.0806 53.835 57.9502 53.835 cv
58.8193 53.835 59.5254 53.1294 59.5254 52.2598 cv
@
1 lc
57.9502 52.3496 mo
57.9502 52.3496 li
@
0 lc
65.0454 42.4199 mo
65.0454 41.5503 64.3394 40.8447 63.4702 40.8447 cv
62.6006 40.8447 61.895 41.5503 61.895 42.4199 cv
61.895 43.2891 62.6006 43.9946 63.4702 43.9946 cv
64.3394 43.9946 65.0454 43.2891 65.0454 42.4199 cv
@
1 lc
63.5503 42.4497 mo
63.5503 42.4497 li
@
0 lc
66.0054 34.0195 mo
66.0054 33.1504 65.2998 32.4448 64.4302 32.4448 cv
63.5605 32.4448 62.855 33.1504 62.855 34.0195 cv
62.855 34.8892 63.5605 35.5947 64.4302 35.5947 cv
65.2998 35.5947 66.0054 34.8892 66.0054 34.0195 cv
@
1 lc
64.4004 33.9497 mo
64.4004 33.9497 li
@
0 lc
63.125 36.8999 mo
63.125 36.0303 62.4194 35.3247 61.5503 35.3247 cv
60.6807 35.3247 59.9751 36.0303 59.9751 36.8999 cv
59.9751 37.769 60.6807 38.4746 61.5503 38.4746 cv
62.4194 38.4746 63.125 37.769 63.125 36.8999 cv
@
1 lc
61.6001 36.8496 mo
61.6001 36.8496 li
@
0 lc
60.7251 52.5 mo
60.7251 51.6304 60.0195 50.9248 59.1504 50.9248 cv
58.2808 50.9248 57.5752 51.6304 57.5752 52.5 cv
57.5752 53.3691 58.2808 54.0747 59.1504 54.0747 cv
60.0195 54.0747 60.7251 53.3691 60.7251 52.5 cv
@
1 lc
59.1001 52.4497 mo
59.1001 52.4497 li
@
0 lc
90.0054 19.2598 mo
90.0054 18.3906 89.2998 17.6846 88.4302 17.6846 cv
87.5605 17.6846 86.855 18.3906 86.855 19.2598 cv
86.855 20.1294 87.5605 20.835 88.4302 20.835 cv
89.2998 20.835 90.0054 20.1294 90.0054 19.2598 cv
@
1 lc
88.4502 19.25 mo
88.4502 19.25 li
@
0 lc
66.7251 28.2598 mo
66.7251 27.3906 66.0195 26.6846 65.1504 26.6846 cv
64.2808 26.6846 63.5752 27.3906 63.5752 28.2598 cv
63.5752 29.1294 64.2808 29.835 65.1504 29.835 cv
66.0195 29.835 66.7251 29.1294 66.7251 28.2598 cv
@
1 lc
65.2002 28.3496 mo
65.2002 28.3496 li
@
0 lc
52.085 39.2998 mo
52.085 38.4302 51.3794 37.7246 50.5103 37.7246 cv
49.6406 37.7246 48.9351 38.4302 48.9351 39.2998 cv
48.9351 40.1689 49.6406 40.875 50.5103 40.875 cv
51.3794 40.875 52.085 40.1689 52.085 39.2998 cv
@
1 lc
50.4502 39.3496 mo
50.4502 39.3496 li
@
0 lc
63.3652 44.0996 mo
63.3652 43.2305 62.6597 42.5249 61.79 42.5249 cv
60.9209 42.5249 60.2153 43.2305 60.2153 44.0996 cv
60.2153 44.9692 60.9209 45.6748 61.79 45.6748 cv
62.6597 45.6748 63.3652 44.9692 63.3652 44.0996 cv
@
1 lc
61.8501 44.1997 mo
61.8501 44.1997 li
@
0 lc
79.2051 31.8599 mo
79.2051 30.9902 78.4995 30.2847 77.6304 30.2847 cv
76.7607 30.2847 76.0552 30.9902 76.0552 31.8599 cv
76.0552 32.729 76.7607 33.4346 77.6304 33.4346 cv
78.4995 33.4346 79.2051 32.729 79.2051 31.8599 cv
@
1 lc
77.6504 31.9497 mo
77.6504 31.9497 li
@
0 lc
69.3652 32.8198 mo
69.3652 31.9502 68.6597 31.2446 67.79 31.2446 cv
66.9209 31.2446 66.2153 31.9502 66.2153 32.8198 cv
66.2153 33.689 66.9209 34.3945 67.79 34.3945 cv
68.6597 34.3945 69.3652 33.689 69.3652 32.8198 cv
@
1 lc
67.7002 32.8999 mo
67.7002 32.8999 li
@
0 lc
66.7251 44.8198 mo
66.7251 43.9502 66.0195 43.2446 65.1504 43.2446 cv
64.2808 43.2446 63.5752 43.9502 63.5752 44.8198 cv
63.5752 45.689 64.2808 46.3945 65.1504 46.3945 cv
66.0195 46.3945 66.7251 45.689 66.7251 44.8198 cv
@
1 lc
65.1001 44.7998 mo
65.1001 44.7998 li
@
0 lc
60.9653 27.7798 mo
60.9653 26.9102 60.2598 26.2046 59.3901 26.2046 cv
58.521 26.2046 57.8154 26.9102 57.8154 27.7798 cv
57.8154 28.6494 58.521 29.355 59.3901 29.355 cv
60.2598 29.355 60.9653 28.6494 60.9653 27.7798 cv
@
1 lc
59.3501 27.8496 mo
59.3501 27.8496 li
@
0 lc
72.7251 49.1396 mo
72.7251 48.2705 72.0195 47.5649 71.1504 47.5649 cv
70.2808 47.5649 69.5752 48.2705 69.5752 49.1396 cv
69.5752 50.0093 70.2808 50.7148 71.1504 50.7148 cv
72.0195 50.7148 72.7251 50.0093 72.7251 49.1396 cv
@
1 lc
71.1504 49.0996 mo
71.1504 49.0996 li
@
0 lc
64.8052 50.8198 mo
64.8052 49.9502 64.0996 49.2446 63.23 49.2446 cv
62.3608 49.2446 61.6553 49.9502 61.6553 50.8198 cv
61.6553 51.689 62.3608 52.3945 63.23 52.3945 cv
64.0996 52.3945 64.8052 51.689 64.8052 50.8198 cv
@
1 lc
63.2002 50.7998 mo
63.2002 50.7998 li
@
0 lc
57.605 40.98 mo
57.605 40.1104 56.8994 39.4048 56.0303 39.4048 cv
55.1606 39.4048 54.4551 40.1104 54.4551 40.98 cv
54.4551 41.8491 55.1606 42.5547 56.0303 42.5547 cv
56.8994 42.5547 57.605 41.8491 57.605 40.98 cv
@
1 lc
55.9502 41.0498 mo
55.9502 41.0498 li
@
0 lc
66.4854 38.0996 mo
66.4854 37.2305 65.7798 36.5249 64.9102 36.5249 cv
64.041 36.5249 63.335 37.2305 63.335 38.0996 cv
63.335 38.9692 64.041 39.6748 64.9102 39.6748 cv
65.7798 39.6748 66.4854 38.9692 66.4854 38.0996 cv
@
1 lc
64.9502 38.1499 mo
64.9502 38.1499 li
@
0 lc
83.0454 45.7798 mo
83.0454 44.9102 82.3394 44.2046 81.4702 44.2046 cv
80.6006 44.2046 79.895 44.9102 79.895 45.7798 cv
79.895 46.6494 80.6006 47.355 81.4702 47.355 cv
82.3394 47.355 83.0454 46.6494 83.0454 45.7798 cv
@
1 lc
81.5 45.6997 mo
81.5 45.6997 li
@
0 lc
63.8452 43.3799 mo
63.8452 42.5103 63.1396 41.8047 62.27 41.8047 cv
61.4009 41.8047 60.6953 42.5103 60.6953 43.3799 cv
60.6953 44.249 61.4009 44.9546 62.27 44.9546 cv
63.1396 44.9546 63.8452 44.249 63.8452 43.3799 cv
@
1 lc
62.2002 43.2998 mo
62.2002 43.2998 li
@
0 lc
93.3652 20.5796 mo
93.3652 19.7104 92.6597 19.0049 91.79 19.0049 cv
90.9209 19.0049 90.2153 19.7104 90.2153 20.5796 cv
90.2153 21.4492 90.9209 22.1548 91.79 22.1548 cv
92.6597 22.1548 93.3652 21.4492 93.3652 20.5796 cv
@
1 lc
91.75 20.5498 mo
91.75 20.5498 li
@
0 lc
68.645 42.8999 mo
68.645 42.0303 67.9395 41.3247 67.0703 41.3247 cv
66.2007 41.3247 65.4951 42.0303 65.4951 42.8999 cv
65.4951 43.769 66.2007 44.4746 67.0703 44.4746 cv
67.9395 44.4746 68.645 43.769 68.645 42.8999 cv
@
1 lc
67.0503 42.9497 mo
67.0503 42.9497 li
@
0 lc
67.3252 48.1797 mo
67.3252 47.3105 66.6196 46.605 65.75 46.605 cv
64.8809 46.605 64.1753 47.3105 64.1753 48.1797 cv
64.1753 49.0493 64.8809 49.7549 65.75 49.7549 cv
66.6196 49.7549 67.3252 49.0493 67.3252 48.1797 cv
@
1 lc
65.75 48.1997 mo
65.75 48.1997 li
@
0 lc
64.3252 36.8999 mo
64.3252 36.0303 63.6196 35.3247 62.75 35.3247 cv
61.8809 35.3247 61.1753 36.0303 61.1753 36.8999 cv
61.1753 37.769 61.8809 38.4746 62.75 38.4746 cv
63.6196 38.4746 64.3252 37.769 64.3252 36.8999 cv
@
1 lc
62.8003 36.8496 mo
62.8003 36.8496 li
@
0 lc
80.645 39.2998 mo
80.645 38.4302 79.9395 37.7246 79.0703 37.7246 cv
78.2007 37.7246 77.4951 38.4302 77.4951 39.2998 cv
77.4951 40.1689 78.2007 40.875 79.0703 40.875 cv
79.9395 40.875 80.645 40.1689 80.645 39.2998 cv
@
1 lc
79.1504 39.1997 mo
79.1504 39.1997 li
@
0 lc
50.4053 39.0596 mo
50.4053 38.1904 49.6997 37.4849 48.8301 37.4849 cv
47.9609 37.4849 47.2554 38.1904 47.2554 39.0596 cv
47.2554 39.9292 47.9609 40.6348 48.8301 40.6348 cv
49.6997 40.6348 50.4053 39.9292 50.4053 39.0596 cv
@
1 lc
48.75 39.1499 mo
48.75 39.1499 li
@
0 lc
65.0454 43.1396 mo
65.0454 42.2705 64.3394 41.5649 63.4702 41.5649 cv
62.6006 41.5649 61.895 42.2705 61.895 43.1396 cv
61.895 44.0093 62.6006 44.7148 63.4702 44.7148 cv
64.3394 44.7148 65.0454 44.0093 65.0454 43.1396 cv
@
1 lc
63.4502 43.0498 mo
63.4502 43.0498 li
@
0 lc
77.5254 28.5 mo
77.5254 27.6304 76.8198 26.9248 75.9502 26.9248 cv
75.0806 26.9248 74.375 27.6304 74.375 28.5 cv
74.375 29.3691 75.0806 30.0747 75.9502 30.0747 cv
76.8198 30.0747 77.5254 29.3691 77.5254 28.5 cv
@
1 lc
75.9004 28.3999 mo
75.9004 28.3999 li
@
0 lc
64.085 61.8599 mo
64.085 60.9902 63.3794 60.2847 62.5103 60.2847 cv
61.6406 60.2847 60.9351 60.9902 60.9351 61.8599 cv
60.9351 62.729 61.6406 63.4346 62.5103 63.4346 cv
63.3794 63.4346 64.085 62.729 64.085 61.8599 cv
@
1 lc
62.5503 61.7998 mo
62.5503 61.7998 li
@
0 lc
55.6851 42.8999 mo
55.6851 42.0303 54.9795 41.3247 54.1104 41.3247 cv
53.2407 41.3247 52.5352 42.0303 52.5352 42.8999 cv
52.5352 43.769 53.2407 44.4746 54.1104 44.4746 cv
54.9795 44.4746 55.6851 43.769 55.6851 42.8999 cv
@
1 lc
54.1504 42.8496 mo
54.1504 42.8496 li
@
0 lc
82.085 32.3398 mo
82.085 31.4702 81.3794 30.7646 80.5103 30.7646 cv
79.6406 30.7646 78.9351 31.4702 78.9351 32.3398 cv
78.9351 33.209 79.6406 33.915 80.5103 33.915 cv
81.3794 33.915 82.085 33.209 82.085 32.3398 cv
@
1 lc
80.5 32.3496 mo
80.5 32.3496 li
@
0 lc
67.6851 51.2998 mo
67.6851 50.4302 66.9795 49.7246 66.1104 49.7246 cv
65.2407 49.7246 64.5352 50.4302 64.5352 51.2998 cv
64.5352 52.1689 65.2407 52.875 66.1104 52.875 cv
66.9795 52.875 67.6851 52.1689 67.6851 51.2998 cv
@
1 lc
66.1001 51.1997 mo
66.1001 51.1997 li
@
0 lc
69.125 18.6597 mo
69.125 17.7905 68.4194 17.085 67.5503 17.085 cv
66.6807 17.085 65.9751 17.7905 65.9751 18.6597 cv
65.9751 19.5293 66.6807 20.2349 67.5503 20.2349 cv
68.4194 20.2349 69.125 19.5293 69.125 18.6597 cv
@
1 lc
67.5 18.5996 mo
67.5 18.5996 li
@
0 lc
62.7651 39.54 mo
62.7651 38.6704 62.0596 37.9648 61.1904 37.9648 cv
60.3208 37.9648 59.6152 38.6704 59.6152 39.54 cv
59.6152 40.4092 60.3208 41.1147 61.1904 41.1147 cv
62.0596 41.1147 62.7651 40.4092 62.7651 39.54 cv
@
1 lc
61.2002 39.5 mo
61.2002 39.5 li
@
0 lc
66.4854 41.2197 mo
66.4854 40.3506 65.7798 39.6445 64.9102 39.6445 cv
64.041 39.6445 63.335 40.3506 63.335 41.2197 cv
63.335 42.0894 64.041 42.7949 64.9102 42.7949 cv
65.7798 42.7949 66.4854 42.0894 66.4854 41.2197 cv
@
1 lc
65 41.1997 mo
65 41.1997 li
@
0 lc
63.125 34.5 mo
63.125 33.6304 62.4194 32.9248 61.5503 32.9248 cv
60.6807 32.9248 59.9751 33.6304 59.9751 34.5 cv
59.9751 35.3691 60.6807 36.0747 61.5503 36.0747 cv
62.4194 36.0747 63.125 35.3691 63.125 34.5 cv
@
1 lc
61.5503 34.5498 mo
61.5503 34.5498 li
@
0 lc
76.5654 40.0195 mo
76.5654 39.1504 75.8594 38.4448 74.9902 38.4448 cv
74.1206 38.4448 73.415 39.1504 73.415 40.0195 cv
73.415 40.8892 74.1206 41.5947 74.9902 41.5947 cv
75.8594 41.5947 76.5654 40.8892 76.5654 40.0195 cv
@
1 lc
74.9502 40 mo
74.9502 40 li
@
0 lc
35.8853 51.0596 mo
35.8853 50.1904 35.1797 49.4849 34.3101 49.4849 cv
33.4409 49.4849 32.7354 50.1904 32.7354 51.0596 cv
32.7354 51.9292 33.4409 52.6348 34.3101 52.6348 cv
35.1797 52.6348 35.8853 51.9292 35.8853 51.0596 cv
@
1 lc
34.3003 51.0996 mo
34.3003 51.0996 li
@
0 lc
62.8853 41.46 mo
62.8853 40.5903 62.1797 39.8848 61.3101 39.8848 cv
60.4409 39.8848 59.7354 40.5903 59.7354 41.46 cv
59.7354 42.3291 60.4409 43.0347 61.3101 43.0347 cv
62.1797 43.0347 62.8853 42.3291 62.8853 41.46 cv
@
1 lc
61.4004 41.3999 mo
61.4004 41.3999 li
@
0 lc
57.8452 43.6196 mo
57.8452 42.7505 57.1396 42.0449 56.27 42.0449 cv
55.4009 42.0449 54.6953 42.7505 54.6953 43.6196 cv
54.6953 44.4893 55.4009 45.1948 56.27 45.1948 cv
57.1396 45.1948 57.8452 44.4893 57.8452 43.6196 cv
@
1 lc
56.2002 43.5996 mo
56.2002 43.5996 li
@
0 lc
60.2451 43.8599 mo
60.2451 42.9902 59.5396 42.2847 58.6704 42.2847 cv
57.8008 42.2847 57.0952 42.9902 57.0952 43.8599 cv
57.0952 44.729 57.8008 45.4346 58.6704 45.4346 cv
59.5396 45.4346 60.2451 44.729 60.2451 43.8599 cv
@
1 lc
58.75 43.7998 mo
58.75 43.7998 li
@
0 lc
59.165 44.3398 mo
59.165 43.4702 58.4595 42.7646 57.5903 42.7646 cv
56.7207 42.7646 56.0151 43.4702 56.0151 44.3398 cv
56.0151 45.209 56.7207 45.915 57.5903 45.915 cv
58.4595 45.915 59.165 45.209 59.165 44.3398 cv
@
1 lc
57.6001 44.3999 mo
57.6001 44.3999 li
@
0 lc
70.6851 50.8198 mo
70.6851 49.9502 69.9795 49.2446 69.1104 49.2446 cv
68.2407 49.2446 67.5352 49.9502 67.5352 50.8198 cv
67.5352 51.689 68.2407 52.3945 69.1104 52.3945 cv
69.9795 52.3945 70.6851 51.689 70.6851 50.8198 cv
@
1 lc
69.1001 50.75 mo
69.1001 50.75 li
@
0 lc
64.3252 35.9399 mo
64.3252 35.0703 63.6196 34.3647 62.75 34.3647 cv
61.8809 34.3647 61.1753 35.0703 61.1753 35.9399 cv
61.1753 36.8091 61.8809 37.5146 62.75 37.5146 cv
63.6196 37.5146 64.3252 36.8091 64.3252 35.9399 cv
@
1 lc
62.7002 35.9497 mo
62.7002 35.9497 li
@
0 lc
69.8452 38.5796 mo
69.8452 37.7104 69.1396 37.0049 68.27 37.0049 cv
67.4009 37.0049 66.6953 37.7104 66.6953 38.5796 cv
66.6953 39.4492 67.4009 40.1548 68.27 40.1548 cv
69.1396 40.1548 69.8452 39.4492 69.8452 38.5796 cv
@
1 lc
68.3003 38.5498 mo
68.3003 38.5498 li
@
0 lc
48.0054 37.7397 mo
48.0054 36.8701 47.2998 36.165 46.4302 36.165 cv
45.5605 36.165 44.855 36.8701 44.855 37.7397 cv
44.855 38.6094 45.5605 39.3149 46.4302 39.3149 cv
47.2998 39.3149 48.0054 38.6094 48.0054 37.7397 cv
@
1 lc
46.4004 37.75 mo
46.4004 37.75 li
@
0 lc
60.9653 21.2998 mo
60.9653 20.4302 60.2598 19.7246 59.3901 19.7246 cv
58.521 19.7246 57.8154 20.4302 57.8154 21.2998 cv
57.8154 22.1689 58.521 22.875 59.3901 22.875 cv
60.2598 22.875 60.9653 22.1689 60.9653 21.2998 cv
@
1 lc
59.3003 21.3999 mo
59.3003 21.3999 li
@
0 lc
75.9653 30.1797 mo
75.9653 29.3105 75.2598 28.605 74.3901 28.605 cv
73.521 28.605 72.8154 29.3105 72.8154 30.1797 cv
72.8154 31.0493 73.521 31.7549 74.3901 31.7549 cv
75.2598 31.7549 75.9653 31.0493 75.9653 30.1797 cv
@
1 lc
74.4004 30.0996 mo
74.4004 30.0996 li
@
0 lc
63.4854 39.6597 mo
63.4854 38.7905 62.7798 38.085 61.9102 38.085 cv
61.041 38.085 60.335 38.7905 60.335 39.6597 cv
60.335 40.5293 61.041 41.2349 61.9102 41.2349 cv
62.7798 41.2349 63.4854 40.5293 63.4854 39.6597 cv
@
1 lc
61.9004 39.6499 mo
61.9004 39.6499 li
@
0 lc
62.165 43.1396 mo
62.165 42.2705 61.4595 41.5649 60.5903 41.5649 cv
59.7207 41.5649 59.0151 42.2705 59.0151 43.1396 cv
59.0151 44.0093 59.7207 44.7148 60.5903 44.7148 cv
61.4595 44.7148 62.165 44.0093 62.165 43.1396 cv
@
1 lc
60.5 43.1499 mo
60.5 43.1499 li
@
0 lc
63.8452 23.46 mo
63.8452 22.5903 63.1396 21.8848 62.27 21.8848 cv
61.4009 21.8848 60.6953 22.5903 60.6953 23.46 cv
60.6953 24.3291 61.4009 25.0347 62.27 25.0347 cv
63.1396 25.0347 63.8452 24.3291 63.8452 23.46 cv
@
1 lc
62.3003 23.5498 mo
62.3003 23.5498 li
@
0 lc
66.2451 40.7397 mo
66.2451 39.8701 65.5396 39.165 64.6704 39.165 cv
63.8008 39.165 63.0952 39.8701 63.0952 40.7397 cv
63.0952 41.6094 63.8008 42.3149 64.6704 42.3149 cv
65.5396 42.3149 66.2451 41.6094 66.2451 40.7397 cv
@
1 lc
64.6001 40.6499 mo
64.6001 40.6499 li
@
0 lc
58.085 31.3799 mo
58.085 30.5103 57.3794 29.8047 56.5103 29.8047 cv
55.6406 29.8047 54.9351 30.5103 54.9351 31.3799 cv
54.9351 32.249 55.6406 32.9546 56.5103 32.9546 cv
57.3794 32.9546 58.085 32.249 58.085 31.3799 cv
@
1 lc
56.6001 31.3496 mo
56.6001 31.3496 li
@
0 lc
62.8853 42.6597 mo
62.8853 41.7905 62.1797 41.085 61.3101 41.085 cv
60.4409 41.085 59.7354 41.7905 59.7354 42.6597 cv
59.7354 43.5293 60.4409 44.2349 61.3101 44.2349 cv
62.1797 44.2349 62.8853 43.5293 62.8853 42.6597 cv
@
1 lc
61.3003 42.5996 mo
61.3003 42.5996 li
@
0 lc
64.9253 30.8999 mo
64.9253 30.0303 64.2197 29.3247 63.3501 29.3247 cv
62.481 29.3247 61.7754 30.0303 61.7754 30.8999 cv
61.7754 31.769 62.481 32.4746 63.3501 32.4746 cv
64.2197 32.4746 64.9253 31.769 64.9253 30.8999 cv
@
1 lc
63.3501 30.8999 mo
63.3501 30.8999 li
@
0 lc
55.9253 42.8999 mo
55.9253 42.0303 55.2197 41.3247 54.3501 41.3247 cv
53.481 41.3247 52.7754 42.0303 52.7754 42.8999 cv
52.7754 43.769 53.481 44.4746 54.3501 44.4746 cv
55.2197 44.4746 55.9253 43.769 55.9253 42.8999 cv
@
1 lc
54.4502 42.7998 mo
54.4502 42.7998 li
@
0 lc
68.8853 56.3398 mo
68.8853 55.4702 68.1797 54.7646 67.3101 54.7646 cv
66.4409 54.7646 65.7354 55.4702 65.7354 56.3398 cv
65.7354 57.209 66.4409 57.915 67.3101 57.915 cv
68.1797 57.915 68.8853 57.209 68.8853 56.3398 cv
@
1 lc
67.25 56.3496 mo
67.25 56.3496 li
@
0 lc
67.6851 36.2998 mo
67.6851 35.4302 66.9795 34.7246 66.1104 34.7246 cv
65.2407 34.7246 64.5352 35.4302 64.5352 36.2998 cv
64.5352 37.1689 65.2407 37.875 66.1104 37.875 cv
66.9795 37.875 67.6851 37.1689 67.6851 36.2998 cv
@
1 lc
66.2002 36.2998 mo
66.2002 36.2998 li
@
0 lc
61.4453 54.1797 mo
61.4453 53.3105 60.7397 52.605 59.8701 52.605 cv
59.001 52.605 58.2954 53.3105 58.2954 54.1797 cv
58.2954 55.0493 59.001 55.7549 59.8701 55.7549 cv
60.7397 55.7549 61.4453 55.0493 61.4453 54.1797 cv
@
1 lc
59.8501 54.1499 mo
59.8501 54.1499 li
@
0 lc
60.4854 17.2197 mo
60.4854 16.3506 59.7798 15.6445 58.9102 15.6445 cv
58.041 15.6445 57.335 16.3506 57.335 17.2197 cv
57.335 18.0894 58.041 18.7949 58.9102 18.7949 cv
59.7798 18.7949 60.4854 18.0894 60.4854 17.2197 cv
@
1 lc
58.8501 17.1997 mo
58.8501 17.1997 li
@
0 lc
62.645 39.54 mo
62.645 38.6704 61.9395 37.9648 61.0703 37.9648 cv
60.2007 37.9648 59.4951 38.6704 59.4951 39.54 cv
59.4951 40.4092 60.2007 41.1147 61.0703 41.1147 cv
61.9395 41.1147 62.645 40.4092 62.645 39.54 cv
@
1 lc
61.1001 39.5 mo
61.1001 39.5 li
@
0 lc
64.3252 43.1396 mo
64.3252 42.2705 63.6196 41.5649 62.75 41.5649 cv
61.8809 41.5649 61.1753 42.2705 61.1753 43.1396 cv
61.1753 44.0093 61.8809 44.7148 62.75 44.7148 cv
63.6196 44.7148 64.3252 44.0093 64.3252 43.1396 cv
@
1 lc
62.75 43.0996 mo
62.75 43.0996 li
@
0 lc
69.3652 44.3398 mo
69.3652 43.4702 68.6597 42.7646 67.79 42.7646 cv
66.9209 42.7646 66.2153 43.4702 66.2153 44.3398 cv
66.2153 45.209 66.9209 45.915 67.79 45.915 cv
68.6597 45.915 69.3652 45.209 69.3652 44.3398 cv
@
1 lc
67.75 44.3496 mo
67.75 44.3496 li
@
0 lc
42.2451 54.2998 mo
42.2451 53.4302 41.5396 52.7246 40.6704 52.7246 cv
39.8008 52.7246 39.0952 53.4302 39.0952 54.2998 cv
39.0952 55.1689 39.8008 55.875 40.6704 55.875 cv
41.5396 55.875 42.2451 55.1689 42.2451 54.2998 cv
@
1 lc
40.75 54.2998 mo
40.75 54.2998 li
@
0 lc
79.4453 67.3799 mo
79.4453 66.5103 78.7397 65.8047 77.8701 65.8047 cv
77.001 65.8047 76.2954 66.5103 76.2954 67.3799 cv
76.2954 68.249 77.001 68.9546 77.8701 68.9546 cv
78.7397 68.9546 79.4453 68.249 79.4453 67.3799 cv
@
1 lc
77.8003 67.2998 mo
77.8003 67.2998 li
@
0 lc
65.5254 39.2998 mo
65.5254 38.4302 64.8193 37.7246 63.9502 37.7246 cv
63.0806 37.7246 62.375 38.4302 62.375 39.2998 cv
62.375 40.1689 63.0806 40.875 63.9502 40.875 cv
64.8193 40.875 65.5254 40.1689 65.5254 39.2998 cv
@
1 lc
63.9004 39.2998 mo
63.9004 39.2998 li
@
0 lc
65.8853 52.0195 mo
65.8853 51.1504 65.1797 50.4448 64.3101 50.4448 cv
63.4409 50.4448 62.7354 51.1504 62.7354 52.0195 cv
62.7354 52.8892 63.4409 53.5947 64.3101 53.5947 cv
65.1797 53.5947 65.8853 52.8892 65.8853 52.0195 cv
@
1 lc
64.3003 51.9497 mo
64.3003 51.9497 li
@
0 lc
59.8853 44.3398 mo
59.8853 43.4702 59.1797 42.7646 58.3101 42.7646 cv
57.4409 42.7646 56.7354 43.4702 56.7354 44.3398 cv
56.7354 45.209 57.4409 45.915 58.3101 45.915 cv
59.1797 45.915 59.8853 45.209 59.8853 44.3398 cv
@
1 lc
58.3003 44.2998 mo
58.3003 44.2998 li
@
0 lc
73.4453 39.54 mo
73.4453 38.6704 72.7397 37.9648 71.8701 37.9648 cv
71.001 37.9648 70.2954 38.6704 70.2954 39.54 cv
70.2954 40.4092 71.001 41.1147 71.8701 41.1147 cv
72.7397 41.1147 73.4453 40.4092 73.4453 39.54 cv
@
1 lc
71.9004 39.5 mo
71.9004 39.5 li
@
0 lc
62.645 33.2998 mo
62.645 32.4302 61.9395 31.7246 61.0703 31.7246 cv
60.2007 31.7246 59.4951 32.4302 59.4951 33.2998 cv
59.4951 34.1689 60.2007 34.875 61.0703 34.875 cv
61.9395 34.875 62.645 34.1689 62.645 33.2998 cv
@
1 lc
61 33.3999 mo
61 33.3999 li
@
0 lc
74.645 24.4199 mo
74.645 23.5503 73.9395 22.8447 73.0703 22.8447 cv
72.2007 22.8447 71.4951 23.5503 71.4951 24.4199 cv
71.4951 25.2891 72.2007 25.9946 73.0703 25.9946 cv
73.9395 25.9946 74.645 25.2891 74.645 24.4199 cv
@
1 lc
73.1001 24.3496 mo
73.1001 24.3496 li
@
0 lc
81.605 36.4199 mo
81.605 35.5503 80.8994 34.8447 80.0303 34.8447 cv
79.1606 34.8447 78.4551 35.5503 78.4551 36.4199 cv
78.4551 37.2891 79.1606 37.9946 80.0303 37.9946 cv
80.8994 37.9946 81.605 37.2891 81.605 36.4199 cv
@
1 lc
80.0503 36.5 mo
80.0503 36.5 li
@
0 lc
58.3252 46.5 mo
58.3252 45.6304 57.6196 44.9248 56.75 44.9248 cv
55.8809 44.9248 55.1753 45.6304 55.1753 46.5 cv
55.1753 47.3691 55.8809 48.0747 56.75 48.0747 cv
57.6196 48.0747 58.3252 47.3691 58.3252 46.5 cv
@
1 lc
56.7002 46.4497 mo
56.7002 46.4497 li
@
0 lc
92.2852 49.2598 mo
92.2852 48.3906 91.5796 47.6846 90.71 47.6846 cv
89.8408 47.6846 89.1353 48.3906 89.1353 49.2598 cv
89.1353 50.1294 89.8408 50.835 90.71 50.835 cv
91.5796 50.835 92.2852 50.1294 92.2852 49.2598 cv
@
1 lc
90.7002 49.25 mo
90.7002 49.25 li
@
0 lc
67.4453 41.2197 mo
67.4453 40.3506 66.7397 39.6445 65.8701 39.6445 cv
65.001 39.6445 64.2954 40.3506 64.2954 41.2197 cv
64.2954 42.0894 65.001 42.7949 65.8701 42.7949 cv
66.7397 42.7949 67.4453 42.0894 67.4453 41.2197 cv
@
1 lc
65.8003 41.1997 mo
65.8003 41.1997 li
@
0 lc
77.165 43.6196 mo
77.165 42.7505 76.4595 42.0449 75.5903 42.0449 cv
74.7207 42.0449 74.0151 42.7505 74.0151 43.6196 cv
74.0151 44.4893 74.7207 45.1948 75.5903 45.1948 cv
76.4595 45.1948 77.165 44.4893 77.165 43.6196 cv
@
1 lc
75.6001 43.6997 mo
75.6001 43.6997 li
@
0 lc
58.5654 42.4199 mo
58.5654 41.5503 57.8594 40.8447 56.9902 40.8447 cv
56.1206 40.8447 55.415 41.5503 55.415 42.4199 cv
55.415 43.2891 56.1206 43.9946 56.9902 43.9946 cv
57.8594 43.9946 58.5654 43.2891 58.5654 42.4199 cv
@
1 lc
57 42.3496 mo
57 42.3496 li
@
0 lc
61.2051 40.5 mo
61.2051 39.6304 60.4995 38.9248 59.6304 38.9248 cv
58.7607 38.9248 58.0552 39.6304 58.0552 40.5 cv
58.0552 41.3691 58.7607 42.0747 59.6304 42.0747 cv
60.4995 42.0747 61.2051 41.3691 61.2051 40.5 cv
@
1 lc
59.6504 40.5 mo
59.6504 40.5 li
@
0 lc
64.8052 42.6597 mo
64.8052 41.7905 64.0996 41.085 63.23 41.085 cv
62.3608 41.085 61.6553 41.7905 61.6553 42.6597 cv
61.6553 43.5293 62.3608 44.2349 63.23 44.2349 cv
64.0996 44.2349 64.8052 43.5293 64.8052 42.6597 cv
@
1 lc
63.1504 42.6499 mo
63.1504 42.6499 li
@
0 lc
53.8853 14.9399 mo
53.8853 14.0703 53.1797 13.3647 52.3101 13.3647 cv
51.4409 13.3647 50.7354 14.0703 50.7354 14.9399 cv
50.7354 15.8091 51.4409 16.5146 52.3101 16.5146 cv
53.1797 16.5146 53.8853 15.8091 53.8853 14.9399 cv
@
1 lc
52.3003 14.9497 mo
52.3003 14.9497 li
@
0 lc
62.165 37.6196 mo
62.165 36.7505 61.4595 36.0449 60.5903 36.0449 cv
59.7207 36.0449 59.0151 36.7505 59.0151 37.6196 cv
59.0151 38.4893 59.7207 39.1948 60.5903 39.1948 cv
61.4595 39.1948 62.165 38.4893 62.165 37.6196 cv
@
1 lc
60.6504 37.5996 mo
60.6504 37.5996 li
@
0 lc
80.645 44.0996 mo
80.645 43.2305 79.9395 42.5249 79.0703 42.5249 cv
78.2007 42.5249 77.4951 43.2305 77.4951 44.0996 cv
77.4951 44.9692 78.2007 45.6748 79.0703 45.6748 cv
79.9395 45.6748 80.645 44.9692 80.645 44.0996 cv
@
1 lc
79.1504 44.1499 mo
79.1504 44.1499 li
@
0 lc
55.2051 40.7397 mo
55.2051 39.8701 54.4995 39.165 53.6304 39.165 cv
52.7607 39.165 52.0552 39.8701 52.0552 40.7397 cv
52.0552 41.6094 52.7607 42.3149 53.6304 42.3149 cv
54.4995 42.3149 55.2051 41.6094 55.2051 40.7397 cv
@
1 lc
53.6504 40.6997 mo
53.6504 40.6997 li
@
0 lc
45.125 41.2197 mo
45.125 40.3506 44.4194 39.6445 43.5503 39.6445 cv
42.6807 39.6445 41.9751 40.3506 41.9751 41.2197 cv
41.9751 42.0894 42.6807 42.7949 43.5503 42.7949 cv
44.4194 42.7949 45.125 42.0894 45.125 41.2197 cv
@
1 lc
43.5 41.2998 mo
43.5 41.2998 li
@
0 lc
66.4854 42.8999 mo
66.4854 42.0303 65.7798 41.3247 64.9102 41.3247 cv
64.041 41.3247 63.335 42.0303 63.335 42.8999 cv
63.335 43.769 64.041 44.4746 64.9102 44.4746 cv
65.7798 44.4746 66.4854 43.769 66.4854 42.8999 cv
@
1 lc
64.8501 42.7998 mo
64.8501 42.7998 li
@
0 lc
50.645 15.2998 mo
50.645 14.4302 49.9395 13.7246 49.0703 13.7246 cv
48.2007 13.7246 47.4951 14.4302 47.4951 15.2998 cv
47.4951 16.1689 48.2007 16.875 49.0703 16.875 cv
49.9395 16.875 50.645 16.1689 50.645 15.2998 cv
@
1 lc
49.0503 15.3999 mo
49.0503 15.3999 li
@
0 lc
59.5254 42.4199 mo
59.5254 41.5503 58.8193 40.8447 57.9502 40.8447 cv
57.0806 40.8447 56.375 41.5503 56.375 42.4199 cv
56.375 43.2891 57.0806 43.9946 57.9502 43.9946 cv
58.8193 43.9946 59.5254 43.2891 59.5254 42.4199 cv
@
1 lc
58 42.5 mo
58 42.5 li
@
0 lc
64.3252 43.6196 mo
64.3252 42.7505 63.6196 42.0449 62.75 42.0449 cv
61.8809 42.0449 61.1753 42.7505 61.1753 43.6196 cv
61.1753 44.4893 61.8809 45.1948 62.75 45.1948 cv
63.6196 45.1948 64.3252 44.4893 64.3252 43.6196 cv
@
1 lc
62.75 43.5498 mo
62.75 43.5498 li
@
0 lc
64.085 40.98 mo
64.085 40.1104 63.3794 39.4048 62.5103 39.4048 cv
61.6406 39.4048 60.9351 40.1104 60.9351 40.98 cv
60.9351 41.8491 61.6406 42.5547 62.5103 42.5547 cv
63.3794 42.5547 64.085 41.8491 64.085 40.98 cv
@
1 lc
62.6001 41.0498 mo
62.6001 41.0498 li
@
0 lc
57.3652 30.4199 mo
57.3652 29.5503 56.6597 28.8447 55.79 28.8447 cv
54.9209 28.8447 54.2153 29.5503 54.2153 30.4199 cv
54.2153 31.2891 54.9209 31.9946 55.79 31.9946 cv
56.6597 31.9946 57.3652 31.2891 57.3652 30.4199 cv
@
1 lc
55.8501 30.3496 mo
55.8501 30.3496 li
@
0 lc
67.2051 40.8599 mo
67.2051 39.9902 66.4995 39.2847 65.6304 39.2847 cv
64.7607 39.2847 64.0552 39.9902 64.0552 40.8599 cv
64.0552 41.729 64.7607 42.4346 65.6304 42.4346 cv
66.4995 42.4346 67.2051 41.729 67.2051 40.8599 cv
@
1 lc
65.6001 40.8496 mo
65.6001 40.8496 li
@
0 lc
58.8052 46.5 mo
58.8052 45.6304 58.0996 44.9248 57.23 44.9248 cv
56.3608 44.9248 55.6553 45.6304 55.6553 46.5 cv
55.6553 47.3691 56.3608 48.0747 57.23 48.0747 cv
58.0996 48.0747 58.8052 47.3691 58.8052 46.5 cv
@
1 lc
57.1504 46.5498 mo
57.1504 46.5498 li
@
0 lc
54.4854 46.5 mo
54.4854 45.6304 53.7798 44.9248 52.9102 44.9248 cv
52.041 44.9248 51.335 45.6304 51.335 46.5 cv
51.335 47.3691 52.041 48.0747 52.9102 48.0747 cv
53.7798 48.0747 54.4854 47.3691 54.4854 46.5 cv
@
1 lc
52.8501 46.4497 mo
52.8501 46.4497 li
@
0 lc
71.2852 46.1396 mo
71.2852 45.2705 70.5796 44.5649 69.71 44.5649 cv
68.8408 44.5649 68.1353 45.2705 68.1353 46.1396 cv
68.1353 47.0093 68.8408 47.7148 69.71 47.7148 cv
70.5796 47.7148 71.2852 47.0093 71.2852 46.1396 cv
@
1 lc
69.75 46.1499 mo
69.75 46.1499 li
@
0 lc
67.6851 48.1797 mo
67.6851 47.3105 66.9795 46.605 66.1104 46.605 cv
65.2407 46.605 64.5352 47.3105 64.5352 48.1797 cv
64.5352 49.0493 65.2407 49.7549 66.1104 49.7549 cv
66.9795 49.7549 67.6851 49.0493 67.6851 48.1797 cv
@
1 lc
66.2002 48.1997 mo
66.2002 48.1997 li
@
0 lc
71.8853 32.0996 mo
71.8853 31.2305 71.1797 30.5249 70.3101 30.5249 cv
69.4409 30.5249 68.7354 31.2305 68.7354 32.0996 cv
68.7354 32.9692 69.4409 33.6748 70.3101 33.6748 cv
71.1797 33.6748 71.8853 32.9692 71.8853 32.0996 cv
@
1 lc
70.3003 32.0498 mo
70.3003 32.0498 li
@
0 lc
74.165 40.2598 mo
74.165 39.3906 73.4595 38.6846 72.5903 38.6846 cv
71.7207 38.6846 71.0151 39.3906 71.0151 40.2598 cv
71.0151 41.1294 71.7207 41.835 72.5903 41.835 cv
73.4595 41.835 74.165 41.1294 74.165 40.2598 cv
@
1 lc
72.5 40.2998 mo
72.5 40.2998 li
@
0 lc
78.2451 75.2998 mo
78.2451 74.4302 77.5396 73.7246 76.6704 73.7246 cv
75.8008 73.7246 75.0952 74.4302 75.0952 75.2998 cv
75.0952 76.1689 75.8008 76.875 76.6704 76.875 cv
77.5396 76.875 78.2451 76.1689 78.2451 75.2998 cv
@
1 lc
76.7002 75.2998 mo
76.7002 75.2998 li
@
0 lc
63.3652 46.7397 mo
63.3652 45.8701 62.6597 45.165 61.79 45.165 cv
60.9209 45.165 60.2153 45.8701 60.2153 46.7397 cv
60.2153 47.6094 60.9209 48.3149 61.79 48.3149 cv
62.6597 48.3149 63.3652 47.6094 63.3652 46.7397 cv
@
1 lc
61.75 46.6499 mo
61.75 46.6499 li
@
0 lc
72.2451 32.3398 mo
72.2451 31.4702 71.5396 30.7646 70.6704 30.7646 cv
69.8008 30.7646 69.0952 31.4702 69.0952 32.3398 cv
69.0952 33.209 69.8008 33.915 70.6704 33.915 cv
71.5396 33.915 72.2451 33.209 72.2451 32.3398 cv
@
1 lc
70.7002 32.3999 mo
70.7002 32.3999 li
@
0 lc
70.3252 49.8599 mo
70.3252 48.9902 69.6196 48.2847 68.75 48.2847 cv
67.8809 48.2847 67.1753 48.9902 67.1753 49.8599 cv
67.1753 50.729 67.8809 51.4346 68.75 51.4346 cv
69.6196 51.4346 70.3252 50.729 70.3252 49.8599 cv
@
1 lc
68.8501 49.8999 mo
68.8501 49.8999 li
@
0 lc
69.125 42.2998 mo
69.125 41.4302 68.4194 40.7246 67.5503 40.7246 cv
66.6807 40.7246 65.9751 41.4302 65.9751 42.2998 cv
65.9751 43.1689 66.6807 43.875 67.5503 43.875 cv
68.4194 43.875 69.125 43.1689 69.125 42.2998 cv
@
1 lc
67.4502 42.2998 mo
67.4502 42.2998 li
@
0 lc
67.4453 55.8599 mo
67.4453 54.9902 66.7397 54.2847 65.8701 54.2847 cv
65.001 54.2847 64.2954 54.9902 64.2954 55.8599 cv
64.2954 56.729 65.001 57.4346 65.8701 57.4346 cv
66.7397 57.4346 67.4453 56.729 67.4453 55.8599 cv
@
1 lc
65.8501 55.8496 mo
65.8501 55.8496 li
@
0 lc
65.5254 44.0996 mo
65.5254 43.2305 64.8193 42.5249 63.9502 42.5249 cv
63.0806 42.5249 62.375 43.2305 62.375 44.0996 cv
62.375 44.9692 63.0806 45.6748 63.9502 45.6748 cv
64.8193 45.6748 65.5254 44.9692 65.5254 44.0996 cv
@
1 lc
64.0503 44.0498 mo
64.0503 44.0498 li
@
0 lc
58.085 44.3398 mo
58.085 43.4702 57.3794 42.7646 56.5103 42.7646 cv
55.6406 42.7646 54.9351 43.4702 54.9351 44.3398 cv
54.9351 45.209 55.6406 45.915 56.5103 45.915 cv
57.3794 45.915 58.085 45.209 58.085 44.3398 cv
@
1 lc
56.4502 44.3496 mo
56.4502 44.3496 li
@
0 lc
74.165 69.0596 mo
74.165 68.1904 73.4595 67.4849 72.5903 67.4849 cv
71.7207 67.4849 71.0151 68.1904 71.0151 69.0596 cv
71.0151 69.9292 71.7207 70.6348 72.5903 70.6348 cv
73.4595 70.6348 74.165 69.9292 74.165 69.0596 cv
@
1 lc
72.5503 69.0498 mo
72.5503 69.0498 li
@
0 lc
65.5254 41.6997 mo
65.5254 40.8306 64.8193 40.125 63.9502 40.125 cv
63.0806 40.125 62.375 40.8306 62.375 41.6997 cv
62.375 42.5693 63.0806 43.2749 63.9502 43.2749 cv
64.8193 43.2749 65.5254 42.5693 65.5254 41.6997 cv
@
1 lc
64 41.5996 mo
64 41.5996 li
@
0 lc
62.165 41.2197 mo
62.165 40.3506 61.4595 39.6445 60.5903 39.6445 cv
59.7207 39.6445 59.0151 40.3506 59.0151 41.2197 cv
59.0151 42.0894 59.7207 42.7949 60.5903 42.7949 cv
61.4595 42.7949 62.165 42.0894 62.165 41.2197 cv
@
1 lc
60.5 41.25 mo
60.5 41.25 li
@
0 lc
53.5254 28.7397 mo
53.5254 27.8701 52.8193 27.165 51.9502 27.165 cv
51.0806 27.165 50.375 27.8701 50.375 28.7397 cv
50.375 29.6094 51.0806 30.3149 51.9502 30.3149 cv
52.8193 30.3149 53.5254 29.6094 53.5254 28.7397 cv
@
1 lc
51.8501 28.6499 mo
51.8501 28.6499 li
@
0 lc
73.2051 52.2598 mo
73.2051 51.3906 72.4995 50.6846 71.6304 50.6846 cv
70.7607 50.6846 70.0552 51.3906 70.0552 52.2598 cv
70.0552 53.1294 70.7607 53.835 71.6304 53.835 cv
72.4995 53.835 73.2051 53.1294 73.2051 52.2598 cv
@
1 lc
71.7002 52.3496 mo
71.7002 52.3496 li
@
0 lc
42.9653 28.0195 mo
42.9653 27.1504 42.2598 26.4448 41.3901 26.4448 cv
40.521 26.4448 39.8154 27.1504 39.8154 28.0195 cv
39.8154 28.8892 40.521 29.5947 41.3901 29.5947 cv
42.2598 29.5947 42.9653 28.8892 42.9653 28.0195 cv
@
1 lc
41.3003 28.0996 mo
41.3003 28.0996 li
@
0 lc
67.2051 65.6997 mo
67.2051 64.8306 66.4995 64.125 65.6304 64.125 cv
64.7607 64.125 64.0552 64.8306 64.0552 65.6997 cv
64.0552 66.5693 64.7607 67.2749 65.6304 67.2749 cv
66.4995 67.2749 67.2051 66.5693 67.2051 65.6997 cv
@
1 lc
65.7002 65.7998 mo
65.7002 65.7998 li
@
0 lc
71.2852 43.3799 mo
71.2852 42.5103 70.5796 41.8047 69.71 41.8047 cv
68.8408 41.8047 68.1353 42.5103 68.1353 43.3799 cv
68.1353 44.249 68.8408 44.9546 69.71 44.9546 cv
70.5796 44.9546 71.2852 44.249 71.2852 43.3799 cv
@
1 lc
69.75 43.2998 mo
69.75 43.2998 li
@
0 lc
64.3252 60.8999 mo
64.3252 60.0303 63.6196 59.3247 62.75 59.3247 cv
61.8809 59.3247 61.1753 60.0303 61.1753 60.8999 cv
61.1753 61.769 61.8809 62.4746 62.75 62.4746 cv
63.6196 62.4746 64.3252 61.769 64.3252 60.8999 cv
@
1 lc
62.8003 61 mo
62.8003 61 li
@
0 lc
63.125 32.8198 mo
63.125 31.9502 62.4194 31.2446 61.5503 31.2446 cv
60.6807 31.2446 59.9751 31.9502 59.9751 32.8198 cv
59.9751 33.689 60.6807 34.3945 61.5503 34.3945 cv
62.4194 34.3945 63.125 33.689 63.125 32.8198 cv
@
1 lc
61.5 32.8999 mo
61.5 32.8999 li
@
0 lc
63.9653 41.2197 mo
63.9653 40.3506 63.2598 39.6445 62.3901 39.6445 cv
61.521 39.6445 60.8154 40.3506 60.8154 41.2197 cv
60.8154 42.0894 61.521 42.7949 62.3901 42.7949 cv
63.2598 42.7949 63.9653 42.0894 63.9653 41.2197 cv
@
1 lc
62.4004 41.2998 mo
62.4004 41.2998 li
@
0 lc
77.7651 53.46 mo
77.7651 52.5903 77.0596 51.8848 76.1904 51.8848 cv
75.3208 51.8848 74.6152 52.5903 74.6152 53.46 cv
74.6152 54.3291 75.3208 55.0347 76.1904 55.0347 cv
77.0596 55.0347 77.7651 54.3291 77.7651 53.46 cv
@
1 lc
76.1001 53.5 mo
76.1001 53.5 li
@
0 lc
69.605 41.6997 mo
69.605 40.8306 68.8994 40.125 68.0303 40.125 cv
67.1606 40.125 66.4551 40.8306 66.4551 41.6997 cv
66.4551 42.5693 67.1606 43.2749 68.0303 43.2749 cv
68.8994 43.2749 69.605 42.5693 69.605 41.6997 cv
@
1 lc
68.1001 41.6499 mo
68.1001 41.6499 li
@
0 lc
64.085 51.2998 mo
64.085 50.4302 63.3794 49.7246 62.5103 49.7246 cv
61.6406 49.7246 60.9351 50.4302 60.9351 51.2998 cv
60.9351 52.1689 61.6406 52.875 62.5103 52.875 cv
63.3794 52.875 64.085 52.1689 64.085 51.2998 cv
@
1 lc
62.5 51.3496 mo
62.5 51.3496 li
@
0 lc
54.3652 36.6597 mo
54.3652 35.7905 53.6597 35.085 52.79 35.085 cv
51.9209 35.085 51.2153 35.7905 51.2153 36.6597 cv
51.2153 37.5293 51.9209 38.2349 52.79 38.2349 cv
53.6597 38.2349 54.3652 37.5293 54.3652 36.6597 cv
@
1 lc
52.8003 36.6499 mo
52.8003 36.6499 li
@
0 lc
66.7251 28.5 mo
66.7251 27.6304 66.0195 26.9248 65.1504 26.9248 cv
64.2808 26.9248 63.5752 27.6304 63.5752 28.5 cv
63.5752 29.3691 64.2808 30.0747 65.1504 30.0747 cv
66.0195 30.0747 66.7251 29.3691 66.7251 28.5 cv
@
1 lc
65.1504 28.5498 mo
65.1504 28.5498 li
@
0 lc
69.7251 45.54 mo
69.7251 44.6704 69.0195 43.9648 68.1504 43.9648 cv
67.2808 43.9648 66.5752 44.6704 66.5752 45.54 cv
66.5752 46.4092 67.2808 47.1147 68.1504 47.1147 cv
69.0195 47.1147 69.7251 46.4092 69.7251 45.54 cv
@
1 lc
68.1504 45.4497 mo
68.1504 45.4497 li
@
0 lc
57.3652 41.3398 mo
57.3652 40.4702 56.6597 39.7646 55.79 39.7646 cv
54.9209 39.7646 54.2153 40.4702 54.2153 41.3398 cv
54.2153 42.209 54.9209 42.915 55.79 42.915 cv
56.6597 42.915 57.3652 42.209 57.3652 41.3398 cv
@
1 lc
55.75 41.3496 mo
55.75 41.3496 li
@
0 lc
57.125 56.3398 mo
57.125 55.4702 56.4194 54.7646 55.5503 54.7646 cv
54.6807 54.7646 53.9751 55.4702 53.9751 56.3398 cv
53.9751 57.209 54.6807 57.915 55.5503 57.915 cv
56.4194 57.915 57.125 57.209 57.125 56.3398 cv
@
1 lc
55.5503 56.25 mo
55.5503 56.25 li
@
0 lc
76.5654 49.8599 mo
76.5654 48.9902 75.8594 48.2847 74.9902 48.2847 cv
74.1206 48.2847 73.415 48.9902 73.415 49.8599 cv
73.415 50.729 74.1206 51.4346 74.9902 51.4346 cv
75.8594 51.4346 76.5654 50.729 76.5654 49.8599 cv
@
1 lc
74.9502 49.8999 mo
74.9502 49.8999 li
@
0 lc
64.8052 42.1797 mo
64.8052 41.3105 64.0996 40.605 63.23 40.605 cv
62.3608 40.605 61.6553 41.3105 61.6553 42.1797 cv
61.6553 43.0493 62.3608 43.7549 63.23 43.7549 cv
64.0996 43.7549 64.8052 43.0493 64.8052 42.1797 cv
@
1 lc
63.1504 42.1499 mo
63.1504 42.1499 li
@
0 lc
67.4453 32.3398 mo
67.4453 31.4702 66.7397 30.7646 65.8701 30.7646 cv
65.001 30.7646 64.2954 31.4702 64.2954 32.3398 cv
64.2954 33.209 65.001 33.915 65.8701 33.915 cv
66.7397 33.915 67.4453 33.209 67.4453 32.3398 cv
@
1 lc
65.8501 32.25 mo
65.8501 32.25 li
@
0 lc
61.2051 42.1797 mo
61.2051 41.3105 60.4995 40.605 59.6304 40.605 cv
58.7607 40.605 58.0552 41.3105 58.0552 42.1797 cv
58.0552 43.0493 58.7607 43.7549 59.6304 43.7549 cv
60.4995 43.7549 61.2051 43.0493 61.2051 42.1797 cv
@
1 lc
59.6001 42.0996 mo
59.6001 42.0996 li
@
0 lc
60.2451 18.8999 mo
60.2451 18.0303 59.5396 17.3247 58.6704 17.3247 cv
57.8008 17.3247 57.0952 18.0303 57.0952 18.8999 cv
57.0952 19.769 57.8008 20.4746 58.6704 20.4746 cv
59.5396 20.4746 60.2451 19.769 60.2451 18.8999 cv
@
1 lc
58.6504 18.8496 mo
58.6504 18.8496 li
@
0 lc
78.7251 47.0996 mo
78.7251 46.2305 78.0195 45.5249 77.1504 45.5249 cv
76.2808 45.5249 75.5752 46.2305 75.5752 47.0996 cv
75.5752 47.9692 76.2808 48.6748 77.1504 48.6748 cv
78.0195 48.6748 78.7251 47.9692 78.7251 47.0996 cv
@
1 lc
77.1504 47.0996 mo
77.1504 47.0996 li
@
0 lc
70.3252 27.0596 mo
70.3252 26.1904 69.6196 25.4849 68.75 25.4849 cv
67.8809 25.4849 67.1753 26.1904 67.1753 27.0596 cv
67.1753 27.9292 67.8809 28.6348 68.75 28.6348 cv
69.6196 28.6348 70.3252 27.9292 70.3252 27.0596 cv
@
1 lc
68.8003 27.0996 mo
68.8003 27.0996 li
@
0 lc
57.125 39.54 mo
57.125 38.6704 56.4194 37.9648 55.5503 37.9648 cv
54.6807 37.9648 53.9751 38.6704 53.9751 39.54 cv
53.9751 40.4092 54.6807 41.1147 55.5503 41.1147 cv
56.4194 41.1147 57.125 40.4092 57.125 39.54 cv
@
1 lc
55.5 39.4497 mo
55.5 39.4497 li
@
0 lc
100.325 44.8198 mo
100.325 43.9502 99.6196 43.2446 98.75 43.2446 cv
97.8809 43.2446 97.1753 43.9502 97.1753 44.8198 cv
97.1753 45.689 97.8809 46.3945 98.75 46.3945 cv
99.6196 46.3945 100.325 45.689 100.325 44.8198 cv
@
1 lc
98.75 44.8999 mo
98.75 44.8999 li
@
0 lc
65.5254 36.1797 mo
65.5254 35.3105 64.8193 34.605 63.9502 34.605 cv
63.0806 34.605 62.375 35.3105 62.375 36.1797 cv
62.375 37.0493 63.0806 37.7549 63.9502 37.7549 cv
64.8193 37.7549 65.5254 37.0493 65.5254 36.1797 cv
@
1 lc
63.8501 36.1997 mo
63.8501 36.1997 li
@
0 lc
66.7251 44.0996 mo
66.7251 43.2305 66.0195 42.5249 65.1504 42.5249 cv
64.2808 42.5249 63.5752 43.2305 63.5752 44.0996 cv
63.5752 44.9692 64.2808 45.6748 65.1504 45.6748 cv
66.0195 45.6748 66.7251 44.9692 66.7251 44.0996 cv
@
1 lc
65.2002 44.0498 mo
65.2002 44.0498 li
@
0 lc
65.7651 44.0996 mo
65.7651 43.2305 65.0596 42.5249 64.1904 42.5249 cv
63.3208 42.5249 62.6152 43.2305 62.6152 44.0996 cv
62.6152 44.9692 63.3208 45.6748 64.1904 45.6748 cv
65.0596 45.6748 65.7651 44.9692 65.7651 44.0996 cv
@
1 lc
64.1504 44 mo
64.1504 44 li
@
0 lc
64.5654 41.9399 mo
64.5654 41.0703 63.8594 40.3647 62.9902 40.3647 cv
62.1206 40.3647 61.415 41.0703 61.415 41.9399 cv
61.415 42.8091 62.1206 43.5146 62.9902 43.5146 cv
63.8594 43.5146 64.5654 42.8091 64.5654 41.9399 cv
@
1 lc
63.0503 41.8496 mo
63.0503 41.8496 li
@
0 lc
66.4854 43.8599 mo
66.4854 42.9902 65.7798 42.2847 64.9102 42.2847 cv
64.041 42.2847 63.335 42.9902 63.335 43.8599 cv
63.335 44.729 64.041 45.4346 64.9102 45.4346 cv
65.7798 45.4346 66.4854 44.729 66.4854 43.8599 cv
@
1 lc
64.9004 43.7998 mo
64.9004 43.7998 li
@
0 lc
53.2852 11.6997 mo
53.2852 10.8306 52.5796 10.125 51.71 10.125 cv
50.8408 10.125 50.1353 10.8306 50.1353 11.6997 cv
50.1353 12.5693 50.8408 13.2749 51.71 13.2749 cv
52.5796 13.2749 53.2852 12.5693 53.2852 11.6997 cv
@
1 lc
51.7002 11.5996 mo
51.7002 11.5996 li
@
0 lc
69.125 44.3398 mo
69.125 43.4702 68.4194 42.7646 67.5503 42.7646 cv
66.6807 42.7646 65.9751 43.4702 65.9751 44.3398 cv
65.9751 45.209 66.6807 45.915 67.5503 45.915 cv
68.4194 45.915 69.125 45.209 69.125 44.3398 cv
@
1 lc
67.4502 44.2998 mo
67.4502 44.2998 li
@
0 lc
58.3252 66.1797 mo
58.3252 65.3105 57.6196 64.605 56.75 64.605 cv
55.8809 64.605 55.1753 65.3105 55.1753 66.1797 cv
55.1753 67.0493 55.8809 67.7549 56.75 67.7549 cv
57.6196 67.7549 58.3252 67.0493 58.3252 66.1797 cv
@
1 lc
56.6504 66.0996 mo
56.6504 66.0996 li
@
0 lc
60.3652 42.4199 mo
60.3652 41.5503 59.6597 40.8447 58.79 40.8447 cv
57.9209 40.8447 57.2153 41.5503 57.2153 42.4199 cv
57.2153 43.2891 57.9209 43.9946 58.79 43.9946 cv
59.6597 43.9946 60.3652 43.2891 60.3652 42.4199 cv
@
1 lc
58.8003 42.4497 mo
58.8003 42.4497 li
@
0 lc
52.5654 45.2998 mo
52.5654 44.4302 51.8594 43.7246 50.9902 43.7246 cv
50.1206 43.7246 49.415 44.4302 49.415 45.2998 cv
49.415 46.1689 50.1206 46.875 50.9902 46.875 cv
51.8594 46.875 52.5654 46.1689 52.5654 45.2998 cv
@
1 lc
50.9004 45.3999 mo
50.9004 45.3999 li
@
0 lc
64.5654 34.7397 mo
64.5654 33.8701 63.8594 33.165 62.9902 33.165 cv
62.1206 33.165 61.415 33.8701 61.415 34.7397 cv
61.415 35.6094 62.1206 36.3149 62.9902 36.3149 cv
63.8594 36.3149 64.5654 35.6094 64.5654 34.7397 cv
@
1 lc
62.9004 34.7998 mo
62.9004 34.7998 li
@
0 lc
58.3252 52.0195 mo
58.3252 51.1504 57.6196 50.4448 56.75 50.4448 cv
55.8809 50.4448 55.1753 51.1504 55.1753 52.0195 cv
55.1753 52.8892 55.8809 53.5947 56.75 53.5947 cv
57.6196 53.5947 58.3252 52.8892 58.3252 52.0195 cv
@
1 lc
56.75 52 mo
56.75 52 li
@
0 lc
79.6851 49.6196 mo
79.6851 48.7505 78.9795 48.0449 78.1104 48.0449 cv
77.2407 48.0449 76.5352 48.7505 76.5352 49.6196 cv
76.5352 50.4893 77.2407 51.1948 78.1104 51.1948 cv
78.9795 51.1948 79.6851 50.4893 79.6851 49.6196 cv
@
1 lc
78.2002 49.5498 mo
78.2002 49.5498 li
@
0 lc
95.2852 65.6997 mo
95.2852 64.8306 94.5796 64.125 93.71 64.125 cv
92.8408 64.125 92.1353 64.8306 92.1353 65.6997 cv
92.1353 66.5693 92.8408 67.2749 93.71 67.2749 cv
94.5796 67.2749 95.2852 66.5693 95.2852 65.6997 cv
@
1 lc
93.75 65.7998 mo
93.75 65.7998 li
@
0 lc
63.605 25.6196 mo
63.605 24.7505 62.8994 24.0449 62.0303 24.0449 cv
61.1606 24.0449 60.4551 24.7505 60.4551 25.6196 cv
60.4551 26.4893 61.1606 27.1948 62.0303 27.1948 cv
62.8994 27.1948 63.605 26.4893 63.605 25.6196 cv
@
1 lc
61.9502 25.5996 mo
61.9502 25.5996 li
@
0 lc
63.3652 43.7397 mo
63.3652 42.8701 62.6597 42.165 61.79 42.165 cv
60.9209 42.165 60.2153 42.8701 60.2153 43.7397 cv
60.2153 44.6094 60.9209 45.3149 61.79 45.3149 cv
62.6597 45.3149 63.3652 44.6094 63.3652 43.7397 cv
@
1 lc
61.8501 43.75 mo
61.8501 43.75 li
@
0 lc
67.6851 35.9399 mo
67.6851 35.0703 66.9795 34.3647 66.1104 34.3647 cv
65.2407 34.3647 64.5352 35.0703 64.5352 35.9399 cv
64.5352 36.8091 65.2407 37.5146 66.1104 37.5146 cv
66.9795 37.5146 67.6851 36.8091 67.6851 35.9399 cv
@
1 lc
66.2002 35.9497 mo
66.2002 35.9497 li
@
0 lc
61.2051 30.8999 mo
61.2051 30.0303 60.4995 29.3247 59.6304 29.3247 cv
58.7607 29.3247 58.0552 30.0303 58.0552 30.8999 cv
58.0552 31.769 58.7607 32.4746 59.6304 32.4746 cv
60.4995 32.4746 61.2051 31.769 61.2051 30.8999 cv
@
1 lc
59.6504 30.8999 mo
59.6504 30.8999 li
@
0 lc
76.5654 37.5 mo
76.5654 36.6304 75.8594 35.9248 74.9902 35.9248 cv
74.1206 35.9248 73.415 36.6304 73.415 37.5 cv
73.415 38.3691 74.1206 39.0747 74.9902 39.0747 cv
75.8594 39.0747 76.5654 38.3691 76.5654 37.5 cv
@
1 lc
74.9004 37.5 mo
74.9004 37.5 li
@
0 lc
67.9253 48.2998 mo
67.9253 47.4302 67.2197 46.7246 66.3501 46.7246 cv
65.481 46.7246 64.7754 47.4302 64.7754 48.2998 cv
64.7754 49.1689 65.481 49.875 66.3501 49.875 cv
67.2197 49.875 67.9253 49.1689 67.9253 48.2998 cv
@
1 lc
66.4004 48.2998 mo
66.4004 48.2998 li
@
0 lc
78.7251 56.9399 mo
78.7251 56.0703 78.0195 55.3647 77.1504 55.3647 cv
76.2808 55.3647 75.5752 56.0703 75.5752 56.9399 cv
75.5752 57.8091 76.2808 58.5146 77.1504 58.5146 cv
78.0195 58.5146 78.7251 57.8091 78.7251 56.9399 cv
@
1 lc
77.25 56.9497 mo
77.25 56.9497 li
@
0 lc
53.2852 46.1396 mo
53.2852 45.2705 52.5796 44.5649 51.71 44.5649 cv
50.8408 44.5649 50.1353 45.2705 50.1353 46.1396 cv
50.1353 47.0093 50.8408 47.7148 51.71 47.7148 cv
52.5796 47.7148 53.2852 47.0093 53.2852 46.1396 cv
@
1 lc
51.8003 46.1499 mo
51.8003 46.1499 li
@
0 lc
40.5654 68.8198 mo
40.5654 67.9502 39.8594 67.2446 38.9902 67.2446 cv
38.1206 67.2446 37.415 67.9502 37.415 68.8198 cv
37.415 69.689 38.1206 70.3945 38.9902 70.3945 cv
39.8594 70.3945 40.5654 69.689 40.5654 68.8198 cv
@
1 lc
38.9502 68.7998 mo
38.9502 68.7998 li
@
0 lc
62.8853 40.7397 mo
62.8853 39.8701 62.1797 39.165 61.3101 39.165 cv
60.4409 39.165 59.7354 39.8701 59.7354 40.7397 cv
59.7354 41.6094 60.4409 42.3149 61.3101 42.3149 cv
62.1797 42.3149 62.8853 41.6094 62.8853 40.7397 cv
@
1 lc
61.3003 40.75 mo
61.3003 40.75 li
@
0 lc
64.3252 38.8198 mo
64.3252 37.9502 63.6196 37.2446 62.75 37.2446 cv
61.8809 37.2446 61.1753 37.9502 61.1753 38.8198 cv
61.1753 39.689 61.8809 40.3945 62.75 40.3945 cv
63.6196 40.3945 64.3252 39.689 64.3252 38.8198 cv
@
1 lc
62.8501 38.75 mo
62.8501 38.75 li
@
0 lc
70.3252 42.4199 mo
70.3252 41.5503 69.6196 40.8447 68.75 40.8447 cv
67.8809 40.8447 67.1753 41.5503 67.1753 42.4199 cv
67.1753 43.2891 67.8809 43.9946 68.75 43.9946 cv
69.6196 43.9946 70.3252 43.2891 70.3252 42.4199 cv
@
1 lc
68.7002 42.3999 mo
68.7002 42.3999 li
@
0 lc
66.0054 36.6597 mo
66.0054 35.7905 65.2998 35.085 64.4302 35.085 cv
63.5605 35.085 62.855 35.7905 62.855 36.6597 cv
62.855 37.5293 63.5605 38.2349 64.4302 38.2349 cv
65.2998 38.2349 66.0054 37.5293 66.0054 36.6597 cv
@
1 lc
64.4004 36.6499 mo
64.4004 36.6499 li
@
0 lc
56.4053 69.54 mo
56.4053 68.6704 55.6997 67.9648 54.8301 67.9648 cv
53.9609 67.9648 53.2554 68.6704 53.2554 69.54 cv
53.2554 70.4092 53.9609 71.1147 54.8301 71.1147 cv
55.6997 71.1147 56.4053 70.4092 56.4053 69.54 cv
@
1 lc
54.8501 69.4497 mo
54.8501 69.4497 li
@
0 lc
68.7651 38.0996 mo
68.7651 37.2305 68.0596 36.5249 67.1904 36.5249 cv
66.3208 36.5249 65.6152 37.2305 65.6152 38.0996 cv
65.6152 38.9692 66.3208 39.6748 67.1904 39.6748 cv
68.0596 39.6748 68.7651 38.9692 68.7651 38.0996 cv
@
1 lc
67.2002 38.0996 mo
67.2002 38.0996 li
@
0 lc
66.7251 37.8599 mo
66.7251 36.9902 66.0195 36.2847 65.1504 36.2847 cv
64.2808 36.2847 63.5752 36.9902 63.5752 37.8599 cv
63.5752 38.729 64.2808 39.4346 65.1504 39.4346 cv
66.0195 39.4346 66.7251 38.729 66.7251 37.8599 cv
@
1 lc
65.1504 37.8999 mo
65.1504 37.8999 li
@
0 lc
72.0054 26.3398 mo
72.0054 25.4702 71.2998 24.7646 70.4302 24.7646 cv
69.5605 24.7646 68.855 25.4702 68.855 26.3398 cv
68.855 27.209 69.5605 27.915 70.4302 27.915 cv
71.2998 27.915 72.0054 27.209 72.0054 26.3398 cv
@
1 lc
70.4502 26.25 mo
70.4502 26.25 li
@
0 lc
65.2852 42.1797 mo
65.2852 41.3105 64.5796 40.605 63.71 40.605 cv
62.8408 40.605 62.1353 41.3105 62.1353 42.1797 cv
62.1353 43.0493 62.8408 43.7549 63.71 43.7549 cv
64.5796 43.7549 65.2852 43.0493 65.2852 42.1797 cv
@
1 lc
63.8003 42.1499 mo
63.8003 42.1499 li
@
0 lc
81.8452 26.5796 mo
81.8452 25.7104 81.1396 25.0049 80.27 25.0049 cv
79.4009 25.0049 78.6953 25.7104 78.6953 26.5796 cv
78.6953 27.4492 79.4009 28.1548 80.27 28.1548 cv
81.1396 28.1548 81.8452 27.4492 81.8452 26.5796 cv
@
1 lc
80.3501 26.6499 mo
80.3501 26.6499 li
@
0 lc
63.8452 52.7397 mo
63.8452 51.8701 63.1396 51.165 62.27 51.165 cv
61.4009 51.165 60.6953 51.8701 60.6953 52.7397 cv
60.6953 53.6094 61.4009 54.3149 62.27 54.3149 cv
63.1396 54.3149 63.8452 53.6094 63.8452 52.7397 cv
@
1 lc
62.3003 52.7998 mo
62.3003 52.7998 li
@
0 lc
65.2852 42.1797 mo
65.2852 41.3105 64.5796 40.605 63.71 40.605 cv
62.8408 40.605 62.1353 41.3105 62.1353 42.1797 cv
62.1353 43.0493 62.8408 43.7549 63.71 43.7549 cv
64.5796 43.7549 65.2852 43.0493 65.2852 42.1797 cv
@
1 lc
63.8003 42.0996 mo
63.8003 42.0996 li
@
0 lc
69.3652 25.6196 mo
69.3652 24.7505 68.6597 24.0449 67.79 24.0449 cv
66.9209 24.0449 66.2153 24.7505 66.2153 25.6196 cv
66.2153 26.4893 66.9209 27.1948 67.79 27.1948 cv
68.6597 27.1948 69.3652 26.4893 69.3652 25.6196 cv
@
1 lc
67.7002 25.5996 mo
67.7002 25.5996 li
@
0 lc
75.9653 56.5796 mo
75.9653 55.7104 75.2598 55.0049 74.3901 55.0049 cv
73.521 55.0049 72.8154 55.7104 72.8154 56.5796 cv
72.8154 57.4492 73.521 58.1548 74.3901 58.1548 cv
75.2598 58.1548 75.9653 57.4492 75.9653 56.5796 cv
@
1 lc
74.4004 56.5498 mo
74.4004 56.5498 li
@
0 lc
64.5654 44.5796 mo
64.5654 43.7104 63.8594 43.0049 62.9902 43.0049 cv
62.1206 43.0049 61.415 43.7104 61.415 44.5796 cv
61.415 45.4492 62.1206 46.1548 62.9902 46.1548 cv
63.8594 46.1548 64.5654 45.4492 64.5654 44.5796 cv
@
1 lc
63.0503 44.5498 mo
63.0503 44.5498 li
@
0 lc
56.8853 32.0996 mo
56.8853 31.2305 56.1797 30.5249 55.3101 30.5249 cv
54.4409 30.5249 53.7354 31.2305 53.7354 32.0996 cv
53.7354 32.9692 54.4409 33.6748 55.3101 33.6748 cv
56.1797 33.6748 56.8853 32.9692 56.8853 32.0996 cv
@
1 lc
55.4004 32.0498 mo
55.4004 32.0498 li
@
0 lc
78.4854 59.2197 mo
78.4854 58.3506 77.7798 57.6445 76.9102 57.6445 cv
76.041 57.6445 75.335 58.3506 75.335 59.2197 cv
75.335 60.0894 76.041 60.7949 76.9102 60.7949 cv
77.7798 60.7949 78.4854 60.0894 78.4854 59.2197 cv
@
1 lc
76.8501 59.1997 mo
76.8501 59.1997 li
@
0 lc
65.2852 48.0596 mo
65.2852 47.1904 64.5796 46.4849 63.71 46.4849 cv
62.8408 46.4849 62.1353 47.1904 62.1353 48.0596 cv
62.1353 48.9292 62.8408 49.6348 63.71 49.6348 cv
64.5796 49.6348 65.2852 48.9292 65.2852 48.0596 cv
@
1 lc
63.8003 48.0498 mo
63.8003 48.0498 li
@
0 lc
60.4854 36.1797 mo
60.4854 35.3105 59.7798 34.605 58.9102 34.605 cv
58.041 34.605 57.335 35.3105 57.335 36.1797 cv
57.335 37.0493 58.041 37.7549 58.9102 37.7549 cv
59.7798 37.7549 60.4854 37.0493 60.4854 36.1797 cv
@
1 lc
58.9004 36.25 mo
58.9004 36.25 li
@
0 lc
63.8452 40.98 mo
63.8452 40.1104 63.1396 39.4048 62.27 39.4048 cv
61.4009 39.4048 60.6953 40.1104 60.6953 40.98 cv
60.6953 41.8491 61.4009 42.5547 62.27 42.5547 cv
63.1396 42.5547 63.8452 41.8491 63.8452 40.98 cv
@
1 lc
62.25 40.8999 mo
62.25 40.8999 li
@
0 lc
56.4053 40.0195 mo
56.4053 39.1504 55.6997 38.4448 54.8301 38.4448 cv
53.9609 38.4448 53.2554 39.1504 53.2554 40.0195 cv
53.2554 40.8892 53.9609 41.5947 54.8301 41.5947 cv
55.6997 41.5947 56.4053 40.8892 56.4053 40.0195 cv
@
1 lc
54.75 40.0498 mo
54.75 40.0498 li
@
0 lc
64.8052 42.6597 mo
64.8052 41.7905 64.0996 41.085 63.23 41.085 cv
62.3608 41.085 61.6553 41.7905 61.6553 42.6597 cv
61.6553 43.5293 62.3608 44.2349 63.23 44.2349 cv
64.0996 44.2349 64.8052 43.5293 64.8052 42.6597 cv
@
1 lc
63.3003 42.5996 mo
63.3003 42.5996 li
@
0 lc
64.9253 52.2598 mo
64.9253 51.3906 64.2197 50.6846 63.3501 50.6846 cv
62.481 50.6846 61.7754 51.3906 61.7754 52.2598 cv
61.7754 53.1294 62.481 53.835 63.3501 53.835 cv
64.2197 53.835 64.9253 53.1294 64.9253 52.2598 cv
@
1 lc
63.3501 52.2998 mo
63.3501 52.2998 li
@
0 lc
65.5254 42.2998 mo
65.5254 41.4302 64.8193 40.7246 63.9502 40.7246 cv
63.0806 40.7246 62.375 41.4302 62.375 42.2998 cv
62.375 43.1689 63.0806 43.875 63.9502 43.875 cv
64.8193 43.875 65.5254 43.1689 65.5254 42.2998 cv
@
1 lc
63.8501 42.2998 mo
63.8501 42.2998 li
@
0 lc
85.6851 52.5 mo
85.6851 51.6304 84.9795 50.9248 84.1104 50.9248 cv
83.2407 50.9248 82.5352 51.6304 82.5352 52.5 cv
82.5352 53.3691 83.2407 54.0747 84.1104 54.0747 cv
84.9795 54.0747 85.6851 53.3691 85.6851 52.5 cv
@
1 lc
84.1504 52.3999 mo
84.1504 52.3999 li
@
0 lc
67.085 53.2197 mo
67.085 52.3506 66.3794 51.6445 65.5103 51.6445 cv
64.6406 51.6445 63.9351 52.3506 63.9351 53.2197 cv
63.9351 54.0894 64.6406 54.7949 65.5103 54.7949 cv
66.3794 54.7949 67.085 54.0894 67.085 53.2197 cv
@
1 lc
65.5 53.1997 mo
65.5 53.1997 li
@
0 lc
70.5654 35.6997 mo
70.5654 34.8306 69.8594 34.125 68.9902 34.125 cv
68.1206 34.125 67.415 34.8306 67.415 35.6997 cv
67.415 36.5693 68.1206 37.2749 68.9902 37.2749 cv
69.8594 37.2749 70.5654 36.5693 70.5654 35.6997 cv
@
1 lc
69.0503 35.75 mo
69.0503 35.75 li
@
0 lc
68.165 46.2598 mo
68.165 45.3906 67.4595 44.6846 66.5903 44.6846 cv
65.7207 44.6846 65.0151 45.3906 65.0151 46.2598 cv
65.0151 47.1294 65.7207 47.835 66.5903 47.835 cv
67.4595 47.835 68.165 47.1294 68.165 46.2598 cv
@
1 lc
66.5 46.3496 mo
66.5 46.3496 li
@
0 lc
64.5654 47.6997 mo
64.5654 46.8306 63.8594 46.125 62.9902 46.125 cv
62.1206 46.125 61.415 46.8306 61.415 47.6997 cv
61.415 48.5693 62.1206 49.2749 62.9902 49.2749 cv
63.8594 49.2749 64.5654 48.5693 64.5654 47.6997 cv
@
1 lc
63 47.6997 mo
63 47.6997 li
@
0 lc
61.2051 16.98 mo
61.2051 16.1104 60.4995 15.4048 59.6304 15.4048 cv
58.7607 15.4048 58.0552 16.1104 58.0552 16.98 cv
58.0552 17.8491 58.7607 18.5547 59.6304 18.5547 cv
60.4995 18.5547 61.2051 17.8491 61.2051 16.98 cv
@
1 lc
59.6001 17.0498 mo
59.6001 17.0498 li
@
0 lc
71.7651 46.5 mo
71.7651 45.6304 71.0596 44.9248 70.1904 44.9248 cv
69.3208 44.9248 68.6152 45.6304 68.6152 46.5 cv
68.6152 47.3691 69.3208 48.0747 70.1904 48.0747 cv
71.0596 48.0747 71.7651 47.3691 71.7651 46.5 cv
@
1 lc
70.1504 46.4497 mo
70.1504 46.4497 li
@
0 lc
65.165 46.5 mo
65.165 45.6304 64.4595 44.9248 63.5903 44.9248 cv
62.7207 44.9248 62.0151 45.6304 62.0151 46.5 cv
62.0151 47.3691 62.7207 48.0747 63.5903 48.0747 cv
64.4595 48.0747 65.165 47.3691 65.165 46.5 cv
@
1 lc
63.6001 46.5 mo
63.6001 46.5 li
@
0 lc
65.5254 35.6997 mo
65.5254 34.8306 64.8193 34.125 63.9502 34.125 cv
63.0806 34.125 62.375 34.8306 62.375 35.6997 cv
62.375 36.5693 63.0806 37.2749 63.9502 37.2749 cv
64.8193 37.2749 65.5254 36.5693 65.5254 35.6997 cv
@
1 lc
64.0503 35.6997 mo
64.0503 35.6997 li
@
0 lc
71.5254 37.8599 mo
71.5254 36.9902 70.8193 36.2847 69.9502 36.2847 cv
69.0806 36.2847 68.375 36.9902 68.375 37.8599 cv
68.375 38.729 69.0806 39.4346 69.9502 39.4346 cv
70.8193 39.4346 71.5254 38.729 71.5254 37.8599 cv
@
1 lc
69.9502 37.9497 mo
69.9502 37.9497 li
@
0 lc
73.2051 34.5 mo
73.2051 33.6304 72.4995 32.9248 71.6304 32.9248 cv
70.7607 32.9248 70.0552 33.6304 70.0552 34.5 cv
70.0552 35.3691 70.7607 36.0747 71.6304 36.0747 cv
72.4995 36.0747 73.2051 35.3691 73.2051 34.5 cv
@
1 lc
71.6504 34.4497 mo
71.6504 34.4497 li
@
0 lc
72.9653 51.54 mo
72.9653 50.6704 72.2598 49.9648 71.3901 49.9648 cv
70.521 49.9648 69.8154 50.6704 69.8154 51.54 cv
69.8154 52.4092 70.521 53.1147 71.3901 53.1147 cv
72.2598 53.1147 72.9653 52.4092 72.9653 51.54 cv
@
1 lc
71.4502 51.5498 mo
71.4502 51.5498 li
@
0 lc
54.7251 43.1396 mo
54.7251 42.2705 54.0195 41.5649 53.1504 41.5649 cv
52.2808 41.5649 51.5752 42.2705 51.5752 43.1396 cv
51.5752 44.0093 52.2808 44.7148 53.1504 44.7148 cv
54.0195 44.7148 54.7251 44.0093 54.7251 43.1396 cv
@
1 lc
53.0503 43.0498 mo
53.0503 43.0498 li
@
0 lc
65.5254 35.6997 mo
65.5254 34.8306 64.8193 34.125 63.9502 34.125 cv
63.0806 34.125 62.375 34.8306 62.375 35.6997 cv
62.375 36.5693 63.0806 37.2749 63.9502 37.2749 cv
64.8193 37.2749 65.5254 36.5693 65.5254 35.6997 cv
@
1 lc
64.0503 35.6997 mo
64.0503 35.6997 li
@
0 lc
65.0454 42.1797 mo
65.0454 41.3105 64.3394 40.605 63.4702 40.605 cv
62.6006 40.605 61.895 41.3105 61.895 42.1797 cv
61.895 43.0493 62.6006 43.7549 63.4702 43.7549 cv
64.3394 43.7549 65.0454 43.0493 65.0454 42.1797 cv
@
1 lc
63.5503 42.1997 mo
63.5503 42.1997 li
@
0 lc
60.0054 40.5 mo
60.0054 39.6304 59.2998 38.9248 58.4302 38.9248 cv
57.5605 38.9248 56.855 39.6304 56.855 40.5 cv
56.855 41.3691 57.5605 42.0747 58.4302 42.0747 cv
59.2998 42.0747 60.0054 41.3691 60.0054 40.5 cv
@
1 lc
58.4502 40.3999 mo
58.4502 40.3999 li
@
0 lc
70.085 41.46 mo
70.085 40.5903 69.3794 39.8848 68.5103 39.8848 cv
67.6406 39.8848 66.9351 40.5903 66.9351 41.46 cv
66.9351 42.3291 67.6406 43.0347 68.5103 43.0347 cv
69.3794 43.0347 70.085 42.3291 70.085 41.46 cv
@
1 lc
68.5 41.5 mo
68.5 41.5 li
@
0 lc
49.6851 31.6196 mo
49.6851 30.7505 48.9795 30.0449 48.1104 30.0449 cv
47.2407 30.0449 46.5352 30.7505 46.5352 31.6196 cv
46.5352 32.4893 47.2407 33.1948 48.1104 33.1948 cv
48.9795 33.1948 49.6851 32.4893 49.6851 31.6196 cv
@
1 lc
48.2002 31.5996 mo
48.2002 31.5996 li
@
0 lc
84.4854 48.6597 mo
84.4854 47.7905 83.7798 47.085 82.9102 47.085 cv
82.041 47.085 81.335 47.7905 81.335 48.6597 cv
81.335 49.5293 82.041 50.2349 82.9102 50.2349 cv
83.7798 50.2349 84.4854 49.5293 84.4854 48.6597 cv
@
1 lc
82.9004 48.5996 mo
82.9004 48.5996 li
@
0 lc
54.7251 56.3398 mo
54.7251 55.4702 54.0195 54.7646 53.1504 54.7646 cv
52.2808 54.7646 51.5752 55.4702 51.5752 56.3398 cv
51.5752 57.209 52.2808 57.915 53.1504 57.915 cv
54.0195 57.915 54.7251 57.209 54.7251 56.3398 cv
@
1 lc
53.0503 56.2998 mo
53.0503 56.2998 li
@
0 lc
69.125 39.54 mo
69.125 38.6704 68.4194 37.9648 67.5503 37.9648 cv
66.6807 37.9648 65.9751 38.6704 65.9751 39.54 cv
65.9751 40.4092 66.6807 41.1147 67.5503 41.1147 cv
68.4194 41.1147 69.125 40.4092 69.125 39.54 cv
@
1 lc
67.4502 39.5 mo
67.4502 39.5 li
@
0 lc
65.2852 41.6997 mo
65.2852 40.8306 64.5796 40.125 63.71 40.125 cv
62.8408 40.125 62.1353 40.8306 62.1353 41.6997 cv
62.1353 42.5693 62.8408 43.2749 63.71 43.2749 cv
64.5796 43.2749 65.2852 42.5693 65.2852 41.6997 cv
@
1 lc
63.8003 41.5996 mo
63.8003 41.5996 li
@
0 lc
65.5254 41.9399 mo
65.5254 41.0703 64.8193 40.3647 63.9502 40.3647 cv
63.0806 40.3647 62.375 41.0703 62.375 41.9399 cv
62.375 42.8091 63.0806 43.5146 63.9502 43.5146 cv
64.8193 43.5146 65.5254 42.8091 65.5254 41.9399 cv
@
1 lc
63.9004 42 mo
63.9004 42 li
@
0 lc
57.8452 35.9399 mo
57.8452 35.0703 57.1396 34.3647 56.27 34.3647 cv
55.4009 34.3647 54.6953 35.0703 54.6953 35.9399 cv
54.6953 36.8091 55.4009 37.5146 56.27 37.5146 cv
57.1396 37.5146 57.8452 36.8091 57.8452 35.9399 cv
@
1 lc
56.2002 35.9497 mo
56.2002 35.9497 li
@
0 lc
65.5254 46.5 mo
65.5254 45.6304 64.8193 44.9248 63.9502 44.9248 cv
63.0806 44.9248 62.375 45.6304 62.375 46.5 cv
62.375 47.3691 63.0806 48.0747 63.9502 48.0747 cv
64.8193 48.0747 65.5254 47.3691 65.5254 46.5 cv
@
1 lc
63.8501 46.5 mo
63.8501 46.5 li
@
0 lc
33.8452 36.4199 mo
33.8452 35.5503 33.1396 34.8447 32.27 34.8447 cv
31.4009 34.8447 30.6953 35.5503 30.6953 36.4199 cv
30.6953 37.2891 31.4009 37.9946 32.27 37.9946 cv
33.1396 37.9946 33.8452 37.2891 33.8452 36.4199 cv
@
1 lc
32.2002 36.4497 mo
32.2002 36.4497 li
@
0 lc
57.4854 28.7397 mo
57.4854 27.8701 56.7798 27.165 55.9102 27.165 cv
55.041 27.165 54.335 27.8701 54.335 28.7397 cv
54.335 29.6094 55.041 30.3149 55.9102 30.3149 cv
56.7798 30.3149 57.4854 29.6094 57.4854 28.7397 cv
@
1 lc
55.9004 28.7998 mo
55.9004 28.7998 li
@
0 lc
70.9253 52.2598 mo
70.9253 51.3906 70.2197 50.6846 69.3501 50.6846 cv
68.481 50.6846 67.7754 51.3906 67.7754 52.2598 cv
67.7754 53.1294 68.481 53.835 69.3501 53.835 cv
70.2197 53.835 70.9253 53.1294 70.9253 52.2598 cv
@
1 lc
69.3501 52.3496 mo
69.3501 52.3496 li
@
0 lc
70.8052 44.3398 mo
70.8052 43.4702 70.0996 42.7646 69.23 42.7646 cv
68.3608 42.7646 67.6553 43.4702 67.6553 44.3398 cv
67.6553 45.209 68.3608 45.915 69.23 45.915 cv
70.0996 45.915 70.8052 45.209 70.8052 44.3398 cv
@
1 lc
69.3003 44.3496 mo
69.3003 44.3496 li
@
0 lc
64.8052 41.2197 mo
64.8052 40.3506 64.0996 39.6445 63.23 39.6445 cv
62.3608 39.6445 61.6553 40.3506 61.6553 41.2197 cv
61.6553 42.0894 62.3608 42.7949 63.23 42.7949 cv
64.0996 42.7949 64.8052 42.0894 64.8052 41.2197 cv
@
1 lc
63.1504 41.1997 mo
63.1504 41.1997 li
@
0 lc
75.3652 20.46 mo
75.3652 19.5903 74.6597 18.8848 73.79 18.8848 cv
72.9209 18.8848 72.2153 19.5903 72.2153 20.46 cv
72.2153 21.3291 72.9209 22.0347 73.79 22.0347 cv
74.6597 22.0347 75.3652 21.3291 75.3652 20.46 cv
@
1 lc
73.75 20.4497 mo
73.75 20.4497 li
@
0 lc
71.5254 31.6196 mo
71.5254 30.7505 70.8193 30.0449 69.9502 30.0449 cv
69.0806 30.0449 68.375 30.7505 68.375 31.6196 cv
68.375 32.4893 69.0806 33.1948 69.9502 33.1948 cv
70.8193 33.1948 71.5254 32.4893 71.5254 31.6196 cv
@
1 lc
69.9502 31.5498 mo
69.9502 31.5498 li
@
0 lc
45.3652 44.0996 mo
45.3652 43.2305 44.6597 42.5249 43.79 42.5249 cv
42.9209 42.5249 42.2153 43.2305 42.2153 44.0996 cv
42.2153 44.9692 42.9209 45.6748 43.79 45.6748 cv
44.6597 45.6748 45.3652 44.9692 45.3652 44.0996 cv
@
1 lc
43.75 44.1499 mo
43.75 44.1499 li
@
0 lc
57.605 46.7397 mo
57.605 45.8701 56.8994 45.165 56.0303 45.165 cv
55.1606 45.165 54.4551 45.8701 54.4551 46.7397 cv
54.4551 47.6094 55.1606 48.3149 56.0303 48.3149 cv
56.8994 48.3149 57.605 47.6094 57.605 46.7397 cv
@
1 lc
56.0503 46.6499 mo
56.0503 46.6499 li
@
0 lc
69.8452 40.98 mo
69.8452 40.1104 69.1396 39.4048 68.27 39.4048 cv
67.4009 39.4048 66.6953 40.1104 66.6953 40.98 cv
66.6953 41.8491 67.4009 42.5547 68.27 42.5547 cv
69.1396 42.5547 69.8452 41.8491 69.8452 40.98 cv
@
1 lc
68.3501 40.9497 mo
68.3501 40.9497 li
@
0 lc
76.085 44.0996 mo
76.085 43.2305 75.3794 42.5249 74.5103 42.5249 cv
73.6406 42.5249 72.9351 43.2305 72.9351 44.0996 cv
72.9351 44.9692 73.6406 45.6748 74.5103 45.6748 cv
75.3794 45.6748 76.085 44.9692 76.085 44.0996 cv
@
1 lc
74.5503 44.1997 mo
74.5503 44.1997 li
@
0 lc
57.3652 33.2998 mo
57.3652 32.4302 56.6597 31.7246 55.79 31.7246 cv
54.9209 31.7246 54.2153 32.4302 54.2153 33.2998 cv
54.2153 34.1689 54.9209 34.875 55.79 34.875 cv
56.6597 34.875 57.3652 34.1689 57.3652 33.2998 cv
@
1 lc
55.8003 33.1997 mo
55.8003 33.1997 li
@
0 lc
63.7251 20.5796 mo
63.7251 19.7104 63.0195 19.0049 62.1504 19.0049 cv
61.2808 19.0049 60.5752 19.7104 60.5752 20.5796 cv
60.5752 21.4492 61.2808 22.1548 62.1504 22.1548 cv
63.0195 22.1548 63.7251 21.4492 63.7251 20.5796 cv
@
1 lc
62.1504 20.5996 mo
62.1504 20.5996 li
@
0 lc
60.9653 45.6597 mo
60.9653 44.7905 60.2598 44.085 59.3901 44.085 cv
58.521 44.085 57.8154 44.7905 57.8154 45.6597 cv
57.8154 46.5293 58.521 47.2349 59.3901 47.2349 cv
60.2598 47.2349 60.9653 46.5293 60.9653 45.6597 cv
@
1 lc
59.3501 45.6499 mo
59.3501 45.6499 li
@
0 lc
72.9653 41.9399 mo
72.9653 41.0703 72.2598 40.3647 71.3901 40.3647 cv
70.521 40.3647 69.8154 41.0703 69.8154 41.9399 cv
69.8154 42.8091 70.521 43.5146 71.3901 43.5146 cv
72.2598 43.5146 72.9653 42.8091 72.9653 41.9399 cv
@
1 lc
71.4502 41.9497 mo
71.4502 41.9497 li
@
0 lc
63.125 52.98 mo
63.125 52.1104 62.4194 51.4048 61.5503 51.4048 cv
60.6807 51.4048 59.9751 52.1104 59.9751 52.98 cv
59.9751 53.8491 60.6807 54.5547 61.5503 54.5547 cv
62.4194 54.5547 63.125 53.8491 63.125 52.98 cv
@
1 lc
61.6001 52.8999 mo
61.6001 52.8999 li
@
0 lc
81.8452 40.5 mo
81.8452 39.6304 81.1396 38.9248 80.27 38.9248 cv
79.4009 38.9248 78.6953 39.6304 78.6953 40.5 cv
78.6953 41.3691 79.4009 42.0747 80.27 42.0747 cv
81.1396 42.0747 81.8452 41.3691 81.8452 40.5 cv
@
1 lc
80.2002 40.3999 mo
80.2002 40.3999 li
@
0 lc
63.9653 73.3799 mo
63.9653 72.5103 63.2598 71.8047 62.3901 71.8047 cv
61.521 71.8047 60.8154 72.5103 60.8154 73.3799 cv
60.8154 74.249 61.521 74.9546 62.3901 74.9546 cv
63.2598 74.9546 63.9653 74.249 63.9653 73.3799 cv
@
1 lc
62.4004 73.2998 mo
62.4004 73.2998 li
@
0 lc
69.9653 42.2998 mo
69.9653 41.4302 69.2598 40.7246 68.3901 40.7246 cv
67.521 40.7246 66.8154 41.4302 66.8154 42.2998 cv
66.8154 43.1689 67.521 43.875 68.3901 43.875 cv
69.2598 43.875 69.9653 43.1689 69.9653 42.2998 cv
@
1 lc
68.4004 42.2998 mo
68.4004 42.2998 li
@
0 lc
63.7251 45.54 mo
63.7251 44.6704 63.0195 43.9648 62.1504 43.9648 cv
61.2808 43.9648 60.5752 44.6704 60.5752 45.54 cv
60.5752 46.4092 61.2808 47.1147 62.1504 47.1147 cv
63.0195 47.1147 63.7251 46.4092 63.7251 45.54 cv
@
1 lc
62.1504 45.5996 mo
62.1504 45.5996 li
@
0.5 lw
0 lc
144.25 0.25 mo
144.25 84.1499 li
271.4 84.1499 li
271.4 0.25 li
144.25 0.25 li
144.25 0.25 li
cp
0.25 0.25 mo
0.25 84.1499 li
127.4 84.1499 li
127.4 0.25 li
0.25 0.25 li
0.25 0.25 li
cp
@
0.25 lw
189.485 54.8999 mo
189.485 54.0303 188.779 53.3247 187.91 53.3247 cv
187.041 53.3247 186.335 54.0303 186.335 54.8999 cv
186.335 55.769 187.041 56.4746 187.91 56.4746 cv
188.779 56.4746 189.485 55.769 189.485 54.8999 cv
@
1 lc
187.9 54.7998 mo
187.9 54.7998 li
@
0 lc
195.365 52.98 mo
195.365 52.1104 194.659 51.4048 193.79 51.4048 cv
192.921 51.4048 192.215 52.1104 192.215 52.98 cv
192.215 53.8491 192.921 54.5547 193.79 54.5547 cv
194.659 54.5547 195.365 53.8491 195.365 52.98 cv
@
1 lc
193.7 53 mo
193.7 53 li
@
0 lc
228.365 26.5796 mo
228.365 25.7104 227.659 25.0049 226.79 25.0049 cv
225.921 25.0049 225.215 25.7104 225.215 26.5796 cv
225.215 27.4492 225.921 28.1548 226.79 28.1548 cv
227.659 28.1548 228.365 27.4492 228.365 26.5796 cv
@
1 lc
226.8 26.5996 mo
226.8 26.5996 li
@
0 lc
189.726 52.7397 mo
189.726 51.8701 189.02 51.165 188.15 51.165 cv
187.281 51.165 186.575 51.8701 186.575 52.7397 cv
186.575 53.6094 187.281 54.3149 188.15 54.3149 cv
189.02 54.3149 189.726 53.6094 189.726 52.7397 cv
@
1 lc
188.15 52.75 mo
188.15 52.75 li
@
0 lc
207.605 43.7397 mo
207.605 42.8701 206.899 42.165 206.03 42.165 cv
205.161 42.165 204.455 42.8701 204.455 43.7397 cv
204.455 44.6094 205.161 45.3149 206.03 45.3149 cv
206.899 45.3149 207.605 44.6094 207.605 43.7397 cv
@
1 lc
206.101 43.75 mo
206.101 43.75 li
@
0 lc
226.565 33.54 mo
226.565 32.6704 225.859 31.9648 224.99 31.9648 cv
224.121 31.9648 223.415 32.6704 223.415 33.54 cv
223.415 34.4092 224.121 35.1147 224.99 35.1147 cv
225.859 35.1147 226.565 34.4092 226.565 33.54 cv
@
1 lc
224.9 33.5498 mo
224.9 33.5498 li
@
0 lc
198.005 49.6196 mo
198.005 48.7505 197.3 48.0449 196.431 48.0449 cv
195.561 48.0449 194.855 48.7505 194.855 49.6196 cv
194.855 50.4893 195.561 51.1948 196.431 51.1948 cv
197.3 51.1948 198.005 50.4893 198.005 49.6196 cv
@
1 lc
196.45 49.6499 mo
196.45 49.6499 li
@
0 lc
220.325 36.4199 mo
220.325 35.5503 219.619 34.8447 218.75 34.8447 cv
217.881 34.8447 217.175 35.5503 217.175 36.4199 cv
217.175 37.2891 217.881 37.9946 218.75 37.9946 cv
219.619 37.9946 220.325 37.2891 220.325 36.4199 cv
@
1 lc
218.65 36.5 mo
218.65 36.5 li
@
0 lc
195.845 49.6196 mo
195.845 48.7505 195.14 48.0449 194.271 48.0449 cv
193.4 48.0449 192.695 48.7505 192.695 49.6196 cv
192.695 50.4893 193.4 51.1948 194.271 51.1948 cv
195.14 51.1948 195.845 50.4893 195.845 49.6196 cv
@
1 lc
194.2 49.5498 mo
194.2 49.5498 li
@
0 lc
203.525 41.6997 mo
203.525 40.8306 202.819 40.125 201.95 40.125 cv
201.081 40.125 200.375 40.8306 200.375 41.6997 cv
200.375 42.5693 201.081 43.2749 201.95 43.2749 cv
202.819 43.2749 203.525 42.5693 203.525 41.6997 cv
@
1 lc
202.05 41.7998 mo
202.05 41.7998 li
@
0 lc
226.325 34.8599 mo
226.325 33.9902 225.619 33.2847 224.75 33.2847 cv
223.881 33.2847 223.175 33.9902 223.175 34.8599 cv
223.175 35.729 223.881 36.4346 224.75 36.4346 cv
225.619 36.4346 226.325 35.729 226.325 34.8599 cv
@
1 lc
224.7 34.8496 mo
224.7 34.8496 li
@
0 lc
217.925 37.1396 mo
217.925 36.2705 217.22 35.5649 216.351 35.5649 cv
215.48 35.5649 214.775 36.2705 214.775 37.1396 cv
214.775 38.0093 215.48 38.7148 216.351 38.7148 cv
217.22 38.7148 217.925 38.0093 217.925 37.1396 cv
@
1 lc
216.25 37.1499 mo
216.25 37.1499 li
@
0 lc
186.005 61.8599 mo
186.005 60.9902 185.3 60.2847 184.431 60.2847 cv
183.561 60.2847 182.855 60.9902 182.855 61.8599 cv
182.855 62.729 183.561 63.4346 184.431 63.4346 cv
185.3 63.4346 186.005 62.729 186.005 61.8599 cv
@
1 lc
184.45 61.8999 mo
184.45 61.8999 li
@
0 lc
209.045 41.46 mo
209.045 40.5903 208.34 39.8848 207.47 39.8848 cv
206.601 39.8848 205.896 40.5903 205.896 41.46 cv
205.896 42.3291 206.601 43.0347 207.47 43.0347 cv
208.34 43.0347 209.045 42.3291 209.045 41.46 cv
@
1 lc
207.4 41.5498 mo
207.4 41.5498 li
@
0 lc
209.285 45.6597 mo
209.285 44.7905 208.579 44.085 207.71 44.085 cv
206.841 44.085 206.135 44.7905 206.135 45.6597 cv
206.135 46.5293 206.841 47.2349 207.71 47.2349 cv
208.579 47.2349 209.285 46.5293 209.285 45.6597 cv
@
1 lc
207.75 45.6499 mo
207.75 45.6499 li
@
0 lc
196.565 52.8599 mo
196.565 51.9902 195.859 51.2847 194.99 51.2847 cv
194.121 51.2847 193.415 51.9902 193.415 52.8599 cv
193.415 53.729 194.121 54.4346 194.99 54.4346 cv
195.859 54.4346 196.565 53.729 196.565 52.8599 cv
@
1 lc
194.95 52.8496 mo
194.95 52.8496 li
@
0 lc
217.445 34.2598 mo
217.445 33.3906 216.739 32.6846 215.87 32.6846 cv
215.001 32.6846 214.295 33.3906 214.295 34.2598 cv
214.295 35.1294 215.001 35.835 215.87 35.835 cv
216.739 35.835 217.445 35.1294 217.445 34.2598 cv
@
1 lc
215.95 34.3496 mo
215.95 34.3496 li
@
0 lc
254.885 14.5796 mo
254.885 13.7104 254.18 13.0049 253.311 13.0049 cv
252.44 13.0049 251.735 13.7104 251.735 14.5796 cv
251.735 15.4492 252.44 16.1548 253.311 16.1548 cv
254.18 16.1548 254.885 15.4492 254.885 14.5796 cv
@
1 lc
253.3 14.5996 mo
253.3 14.5996 li
@
0 lc
240.005 17.6997 mo
240.005 16.8306 239.3 16.125 238.431 16.125 cv
237.561 16.125 236.855 16.8306 236.855 17.6997 cv
236.855 18.5693 237.561 19.2749 238.431 19.2749 cv
239.3 19.2749 240.005 18.5693 240.005 17.6997 cv
@
1 lc
238.4 17.7998 mo
238.4 17.7998 li
@
0 lc
221.766 37.6196 mo
221.766 36.7505 221.06 36.0449 220.19 36.0449 cv
219.321 36.0449 218.615 36.7505 218.615 37.6196 cv
218.615 38.4893 219.321 39.1948 220.19 39.1948 cv
221.06 39.1948 221.766 38.4893 221.766 37.6196 cv
@
1 lc
220.101 37.6997 mo
220.101 37.6997 li
@
0 lc
205.925 44.8198 mo
205.925 43.9502 205.22 43.2446 204.351 43.2446 cv
203.48 43.2446 202.775 43.9502 202.775 44.8198 cv
202.775 45.689 203.48 46.3945 204.351 46.3945 cv
205.22 46.3945 205.925 45.689 205.925 44.8198 cv
@
1 lc
204.45 44.8999 mo
204.45 44.8999 li
@
0 lc
210.726 38.0996 mo
210.726 37.2305 210.02 36.5249 209.15 36.5249 cv
208.281 36.5249 207.575 37.2305 207.575 38.0996 cv
207.575 38.9692 208.281 39.6748 209.15 39.6748 cv
210.02 39.6748 210.726 38.9692 210.726 38.0996 cv
@
1 lc
209.2 38 mo
209.2 38 li
@
0 lc
247.686 20.0996 mo
247.686 19.2305 246.979 18.5249 246.11 18.5249 cv
245.241 18.5249 244.535 19.2305 244.535 20.0996 cv
244.535 20.9692 245.241 21.6748 246.11 21.6748 cv
246.979 21.6748 247.686 20.9692 247.686 20.0996 cv
@
1 lc
246.2 20 mo
246.2 20 li
@
0 lc
187.445 55.3799 mo
187.445 54.5103 186.739 53.8047 185.87 53.8047 cv
185.001 53.8047 184.295 54.5103 184.295 55.3799 cv
184.295 56.249 185.001 56.9546 185.87 56.9546 cv
186.739 56.9546 187.445 56.249 187.445 55.3799 cv
@
1 lc
185.9 55.3496 mo
185.9 55.3496 li
@
0 lc
192.965 52.7397 mo
192.965 51.8701 192.26 51.165 191.391 51.165 cv
190.521 51.165 189.815 51.8701 189.815 52.7397 cv
189.815 53.6094 190.521 54.3149 191.391 54.3149 cv
192.26 54.3149 192.965 53.6094 192.965 52.7397 cv
@
1 lc
191.3 52.7998 mo
191.3 52.7998 li
@
0 lc
222.726 27.2998 mo
222.726 26.4302 222.02 25.7246 221.15 25.7246 cv
220.281 25.7246 219.575 26.4302 219.575 27.2998 cv
219.575 28.1689 220.281 28.875 221.15 28.875 cv
222.02 28.875 222.726 28.1689 222.726 27.2998 cv
@
1 lc
221.25 27.3999 mo
221.25 27.3999 li
@
0 lc
239.285 22.5 mo
239.285 21.6304 238.579 20.9248 237.71 20.9248 cv
236.841 20.9248 236.135 21.6304 236.135 22.5 cv
236.135 23.3691 236.841 24.0747 237.71 24.0747 cv
238.579 24.0747 239.285 23.3691 239.285 22.5 cv
@
1 lc
237.8 22.5498 mo
237.8 22.5498 li
@
0 lc
245.045 20.8198 mo
245.045 19.9502 244.34 19.2446 243.47 19.2446 cv
242.601 19.2446 241.896 19.9502 241.896 20.8198 cv
241.896 21.689 242.601 22.3945 243.47 22.3945 cv
244.34 22.3945 245.045 21.689 245.045 20.8198 cv
@
1 lc
243.4 20.75 mo
243.4 20.75 li
@
0 lc
201.365 46.2598 mo
201.365 45.3906 200.659 44.6846 199.79 44.6846 cv
198.921 44.6846 198.215 45.3906 198.215 46.2598 cv
198.215 47.1294 198.921 47.835 199.79 47.835 cv
200.659 47.835 201.365 47.1294 201.365 46.2598 cv
@
1 lc
199.851 46.25 mo
199.851 46.25 li
@
0 lc
208.565 43.8599 mo
208.565 42.9902 207.859 42.2847 206.99 42.2847 cv
206.121 42.2847 205.415 42.9902 205.415 43.8599 cv
205.415 44.729 206.121 45.4346 206.99 45.4346 cv
207.859 45.4346 208.565 44.729 208.565 43.8599 cv
@
1 lc
206.9 43.7998 mo
206.9 43.7998 li
@
0 lc
221.766 29.9399 mo
221.766 29.0703 221.06 28.3647 220.19 28.3647 cv
219.321 28.3647 218.615 29.0703 218.615 29.9399 cv
218.615 30.8091 219.321 31.5146 220.19 31.5146 cv
221.06 31.5146 221.766 30.8091 221.766 29.9399 cv
@
1 lc
220.25 29.8496 mo
220.25 29.8496 li
@
0 lc
226.806 32.8198 mo
226.806 31.9502 226.1 31.2446 225.23 31.2446 cv
224.36 31.2446 223.655 31.9502 223.655 32.8198 cv
223.655 33.689 224.36 34.3945 225.23 34.3945 cv
226.1 34.3945 226.806 33.689 226.806 32.8198 cv
@
1 lc
225.25 32.75 mo
225.25 32.75 li
@
0 lc
226.085 26.0996 mo
226.085 25.2305 225.38 24.5249 224.51 24.5249 cv
223.641 24.5249 222.936 25.2305 222.936 26.0996 cv
222.936 26.9692 223.641 27.6748 224.51 27.6748 cv
225.38 27.6748 226.085 26.9692 226.085 26.0996 cv
@
1 lc
224.45 26.0996 mo
224.45 26.0996 li
@
0 lc
229.925 28.7397 mo
229.925 27.8701 229.22 27.165 228.351 27.165 cv
227.48 27.165 226.775 27.8701 226.775 28.7397 cv
226.775 29.6094 227.48 30.3149 228.351 30.3149 cv
229.22 30.3149 229.925 29.6094 229.925 28.7397 cv
@
1 lc
228.25 28.75 mo
228.25 28.75 li
@
0 lc
206.885 44.0996 mo
206.885 43.2305 206.18 42.5249 205.311 42.5249 cv
204.44 42.5249 203.735 43.2305 203.735 44.0996 cv
203.735 44.9692 204.44 45.6748 205.311 45.6748 cv
206.18 45.6748 206.885 44.9692 206.885 44.0996 cv
@
1 lc
205.4 44.1997 mo
205.4 44.1997 li
@
0 lc
240.965 19.8599 mo
240.965 18.9902 240.26 18.2847 239.391 18.2847 cv
238.521 18.2847 237.815 18.9902 237.815 19.8599 cv
237.815 20.729 238.521 21.4346 239.391 21.4346 cv
240.26 21.4346 240.965 20.729 240.965 19.8599 cv
@
1 lc
239.3 19.8999 mo
239.3 19.8999 li
@
0 lc
229.325 28.2598 mo
229.325 27.3906 228.619 26.6846 227.75 26.6846 cv
226.881 26.6846 226.175 27.3906 226.175 28.2598 cv
226.175 29.1294 226.881 29.835 227.75 29.835 cv
228.619 29.835 229.325 29.1294 229.325 28.2598 cv
@
1 lc
227.75 28.25 mo
227.75 28.25 li
@
0 lc
211.686 42.6597 mo
211.686 41.7905 210.979 41.085 210.11 41.085 cv
209.241 41.085 208.535 41.7905 208.535 42.6597 cv
208.535 43.5293 209.241 44.2349 210.11 44.2349 cv
210.979 44.2349 211.686 43.5293 211.686 42.6597 cv
@
1 lc
210.101 42.75 mo
210.101 42.75 li
@
0 lc
184.565 54.4199 mo
184.565 53.5503 183.859 52.8447 182.99 52.8447 cv
182.121 52.8447 181.415 53.5503 181.415 54.4199 cv
181.415 55.2891 182.121 55.9946 182.99 55.9946 cv
183.859 55.9946 184.565 55.2891 184.565 54.4199 cv
@
1 lc
182.95 54.4497 mo
182.95 54.4497 li
@
0 lc
177.365 66.54 mo
177.365 65.6704 176.659 64.9648 175.79 64.9648 cv
174.921 64.9648 174.215 65.6704 174.215 66.54 cv
174.215 67.4092 174.921 68.1147 175.79 68.1147 cv
176.659 68.1147 177.365 67.4092 177.365 66.54 cv
@
1 lc
175.75 66.5498 mo
175.75 66.5498 li
@
0 lc
199.445 47.6997 mo
199.445 46.8306 198.739 46.125 197.87 46.125 cv
197.001 46.125 196.295 46.8306 196.295 47.6997 cv
196.295 48.5693 197.001 49.2749 197.87 49.2749 cv
198.739 49.2749 199.445 48.5693 199.445 47.6997 cv
@
1 lc
197.95 47.7998 mo
197.95 47.7998 li
@
0 lc
208.325 42.1797 mo
208.325 41.3105 207.619 40.605 206.75 40.605 cv
205.881 40.605 205.175 41.3105 205.175 42.1797 cv
205.175 43.0493 205.881 43.7549 206.75 43.7549 cv
207.619 43.7549 208.325 43.0493 208.325 42.1797 cv
@
1 lc
206.65 42.25 mo
206.65 42.25 li
@
0 lc
194.165 56.8198 mo
194.165 55.9502 193.46 55.2446 192.59 55.2446 cv
191.721 55.2446 191.016 55.9502 191.016 56.8198 cv
191.016 57.689 191.721 58.3945 192.59 58.3945 cv
193.46 58.3945 194.165 57.689 194.165 56.8198 cv
@
1 lc
192.5 56.8999 mo
192.5 56.8999 li
@
0 lc
240.965 21.6597 mo
240.965 20.7905 240.26 20.085 239.391 20.085 cv
238.521 20.085 237.815 20.7905 237.815 21.6597 cv
237.815 22.5293 238.521 23.2349 239.391 23.2349 cv
240.26 23.2349 240.965 22.5293 240.965 21.6597 cv
@
1 lc
239.45 21.6499 mo
239.45 21.6499 li
@
0 lc
206.405 44.3398 mo
206.405 43.4702 205.699 42.7646 204.83 42.7646 cv
203.961 42.7646 203.255 43.4702 203.255 44.3398 cv
203.255 45.209 203.961 45.915 204.83 45.915 cv
205.699 45.915 206.405 45.209 206.405 44.3398 cv
@
1 lc
204.851 44.25 mo
204.851 44.25 li
@
0 lc
218.885 37.8599 mo
218.885 36.9902 218.18 36.2847 217.311 36.2847 cv
216.44 36.2847 215.735 36.9902 215.735 37.8599 cv
215.735 38.729 216.44 39.4346 217.311 39.4346 cv
218.18 39.4346 218.885 38.729 218.885 37.8599 cv
@
1 lc
217.351 37.8999 mo
217.351 37.8999 li
@
0 lc
222.965 36.1797 mo
222.965 35.3105 222.26 34.605 221.391 34.605 cv
220.521 34.605 219.815 35.3105 219.815 36.1797 cv
219.815 37.0493 220.521 37.7549 221.391 37.7549 cv
222.26 37.7549 222.965 37.0493 222.965 36.1797 cv
@
1 lc
221.3 36.0996 mo
221.3 36.0996 li
@
0 lc
244.925 16.7397 mo
244.925 15.8701 244.22 15.165 243.351 15.165 cv
242.48 15.165 241.775 15.8701 241.775 16.7397 cv
241.775 17.6094 242.48 18.3149 243.351 18.3149 cv
244.22 18.3149 244.925 17.6094 244.925 16.7397 cv
@
1 lc
243.351 16.7998 mo
243.351 16.7998 li
@
0 lc
226.806 31.5 mo
226.806 30.6304 226.1 29.9248 225.23 29.9248 cv
224.36 29.9248 223.655 30.6304 223.655 31.5 cv
223.655 32.3691 224.36 33.0747 225.23 33.0747 cv
226.1 33.0747 226.806 32.3691 226.806 31.5 cv
@
1 lc
225.15 31.5 mo
225.15 31.5 li
@
0 lc
211.686 37.1396 mo
211.686 36.2705 210.979 35.5649 210.11 35.5649 cv
209.241 35.5649 208.535 36.2705 208.535 37.1396 cv
208.535 38.0093 209.241 38.7148 210.11 38.7148 cv
210.979 38.7148 211.686 38.0093 211.686 37.1396 cv
@
1 lc
210.15 37.0498 mo
210.15 37.0498 li
@
0 lc
205.085 45.54 mo
205.085 44.6704 204.38 43.9648 203.51 43.9648 cv
202.641 43.9648 201.936 44.6704 201.936 45.54 cv
201.936 46.4092 202.641 47.1147 203.51 47.1147 cv
204.38 47.1147 205.085 46.4092 205.085 45.54 cv
@
1 lc
203.5 45.5 mo
203.5 45.5 li
@
0 lc
177.125 64.7397 mo
177.125 63.8701 176.42 63.165 175.55 63.165 cv
174.681 63.165 173.976 63.8701 173.976 64.7397 cv
173.976 65.6094 174.681 66.3149 175.55 66.3149 cv
176.42 66.3149 177.125 65.6094 177.125 64.7397 cv
@
1 lc
175.5 64.75 mo
175.5 64.75 li
@
0 lc
199.205 52.5 mo
199.205 51.6304 198.5 50.9248 197.63 50.9248 cv
196.761 50.9248 196.056 51.6304 196.056 52.5 cv
196.056 53.3691 196.761 54.0747 197.63 54.0747 cv
198.5 54.0747 199.205 53.3691 199.205 52.5 cv
@
1 lc
197.55 52.5 mo
197.55 52.5 li
@
0 lc
181.205 56.8198 mo
181.205 55.9502 180.5 55.2446 179.63 55.2446 cv
178.761 55.2446 178.056 55.9502 178.056 56.8198 cv
178.056 57.689 178.761 58.3945 179.63 58.3945 cv
180.5 58.3945 181.205 57.689 181.205 56.8198 cv
@
1 lc
179.601 56.7998 mo
179.601 56.7998 li
@
0 lc
184.325 56.8198 mo
184.325 55.9502 183.619 55.2446 182.75 55.2446 cv
181.881 55.2446 181.175 55.9502 181.175 56.8198 cv
181.175 57.689 181.881 58.3945 182.75 58.3945 cv
183.619 58.3945 184.325 57.689 184.325 56.8198 cv
@
1 lc
182.8 56.7998 mo
182.8 56.7998 li
@
0 lc
207.485 46.98 mo
207.485 46.1104 206.779 45.4048 205.91 45.4048 cv
205.041 45.4048 204.335 46.1104 204.335 46.98 cv
204.335 47.8491 205.041 48.5547 205.91 48.5547 cv
206.779 48.5547 207.485 47.8491 207.485 46.98 cv
@
1 lc
205.9 46.9497 mo
205.9 46.9497 li
@
0 lc
215.285 37.6196 mo
215.285 36.7505 214.579 36.0449 213.71 36.0449 cv
212.841 36.0449 212.135 36.7505 212.135 37.6196 cv
212.135 38.4893 212.841 39.1948 213.71 39.1948 cv
214.579 39.1948 215.285 38.4893 215.285 37.6196 cv
@
1 lc
213.75 37.5498 mo
213.75 37.5498 li
@
0 lc
196.925 47.6997 mo
196.925 46.8306 196.22 46.125 195.351 46.125 cv
194.48 46.125 193.775 46.8306 193.775 47.6997 cv
193.775 48.5693 194.48 49.2749 195.351 49.2749 cv
196.22 49.2749 196.925 48.5693 196.925 47.6997 cv
@
1 lc
195.351 47.5996 mo
195.351 47.5996 li
@
0 lc
199.445 50.0996 mo
199.445 49.2305 198.739 48.5249 197.87 48.5249 cv
197.001 48.5249 196.295 49.2305 196.295 50.0996 cv
196.295 50.9692 197.001 51.6748 197.87 51.6748 cv
198.739 51.6748 199.445 50.9692 199.445 50.0996 cv
@
1 lc
197.95 50 mo
197.95 50 li
@
0 lc
182.165 57.0596 mo
182.165 56.1904 181.46 55.4849 180.59 55.4849 cv
179.721 55.4849 179.016 56.1904 179.016 57.0596 cv
179.016 57.9292 179.721 58.6348 180.59 58.6348 cv
181.46 58.6348 182.165 57.9292 182.165 57.0596 cv
@
1 lc
180.65 57.0996 mo
180.65 57.0996 li
@
0 lc
211.686 40.2598 mo
211.686 39.3906 210.979 38.6846 210.11 38.6846 cv
209.241 38.6846 208.535 39.3906 208.535 40.2598 cv
208.535 41.1294 209.241 41.835 210.11 41.835 cv
210.979 41.835 211.686 41.1294 211.686 40.2598 cv
@
1 lc
210.101 40.25 mo
210.101 40.25 li
@
0 lc
210.485 40.5 mo
210.485 39.6304 209.779 38.9248 208.91 38.9248 cv
208.041 38.9248 207.335 39.6304 207.335 40.5 cv
207.335 41.3691 208.041 42.0747 208.91 42.0747 cv
209.779 42.0747 210.485 41.3691 210.485 40.5 cv
@
1 lc
208.95 40.5996 mo
208.95 40.5996 li
@
0 lc
196.565 52.98 mo
196.565 52.1104 195.859 51.4048 194.99 51.4048 cv
194.121 51.4048 193.415 52.1104 193.415 52.98 cv
193.415 53.8491 194.121 54.5547 194.99 54.5547 cv
195.859 54.5547 196.565 53.8491 196.565 52.98 cv
@
1 lc
194.95 52.9497 mo
194.95 52.9497 li
@
0 lc
203.766 46.5 mo
203.766 45.6304 203.06 44.9248 202.19 44.9248 cv
201.321 44.9248 200.615 45.6304 200.615 46.5 cv
200.615 47.3691 201.321 48.0747 202.19 48.0747 cv
203.06 48.0747 203.766 47.3691 203.766 46.5 cv
@
1 lc
202.25 46.4497 mo
202.25 46.4497 li
@
0 lc
223.445 34.2598 mo
223.445 33.3906 222.739 32.6846 221.87 32.6846 cv
221.001 32.6846 220.295 33.3906 220.295 34.2598 cv
220.295 35.1294 221.001 35.835 221.87 35.835 cv
222.739 35.835 223.445 35.1294 223.445 34.2598 cv
@
1 lc
221.95 34.2998 mo
221.95 34.2998 li
@
0 lc
233.525 27.8999 mo
233.525 27.0303 232.819 26.3247 231.95 26.3247 cv
231.081 26.3247 230.375 27.0303 230.375 27.8999 cv
230.375 28.769 231.081 29.4746 231.95 29.4746 cv
232.819 29.4746 233.525 28.769 233.525 27.8999 cv
@
1 lc
231.95 27.8999 mo
231.95 27.8999 li
@
0 lc
202.806 50.0996 mo
202.806 49.2305 202.1 48.5249 201.23 48.5249 cv
200.36 48.5249 199.655 49.2305 199.655 50.0996 cv
199.655 50.9692 200.36 51.6748 201.23 51.6748 cv
202.1 51.6748 202.806 50.9692 202.806 50.0996 cv
@
1 lc
201.2 50 mo
201.2 50 li
@
0 lc
189.485 57.54 mo
189.485 56.6704 188.779 55.9648 187.91 55.9648 cv
187.041 55.9648 186.335 56.6704 186.335 57.54 cv
186.335 58.4092 187.041 59.1147 187.91 59.1147 cv
188.779 59.1147 189.485 58.4092 189.485 57.54 cv
@
1 lc
187.9 57.5 mo
187.9 57.5 li
@
0 lc
169.686 70.5 mo
169.686 69.6304 168.979 68.9248 168.11 68.9248 cv
167.241 68.9248 166.535 69.6304 166.535 70.5 cv
166.535 71.3691 167.241 72.0747 168.11 72.0747 cv
168.979 72.0747 169.686 71.3691 169.686 70.5 cv
@
1 lc
168.15 70.3999 mo
168.15 70.3999 li
@
0 lc
209.045 42.8999 mo
209.045 42.0303 208.34 41.3247 207.47 41.3247 cv
206.601 41.3247 205.896 42.0303 205.896 42.8999 cv
205.896 43.769 206.601 44.4746 207.47 44.4746 cv
208.34 44.4746 209.045 43.769 209.045 42.8999 cv
@
1 lc
207.4 43 mo
207.4 43 li
@
0 lc
198.965 48.4199 mo
198.965 47.5503 198.26 46.8447 197.391 46.8447 cv
196.521 46.8447 195.815 47.5503 195.815 48.4199 cv
195.815 49.2891 196.521 49.9946 197.391 49.9946 cv
198.26 49.9946 198.965 49.2891 198.965 48.4199 cv
@
1 lc
197.45 48.4497 mo
197.45 48.4497 li
@
0 lc
204.965 47.0996 mo
204.965 46.2305 204.26 45.5249 203.391 45.5249 cv
202.521 45.5249 201.815 46.2305 201.815 47.0996 cv
201.815 47.9692 202.521 48.6748 203.391 48.6748 cv
204.26 48.6748 204.965 47.9692 204.965 47.0996 cv
@
1 lc
203.4 47.0996 mo
203.4 47.0996 li
@
0 lc
208.565 43.6196 mo
208.565 42.7505 207.859 42.0449 206.99 42.0449 cv
206.121 42.0449 205.415 42.7505 205.415 43.6196 cv
205.415 44.4893 206.121 45.1948 206.99 45.1948 cv
207.859 45.1948 208.565 44.4893 208.565 43.6196 cv
@
1 lc
206.95 43.6997 mo
206.95 43.6997 li
@
0 lc
212.165 39.54 mo
212.165 38.6704 211.46 37.9648 210.59 37.9648 cv
209.721 37.9648 209.016 38.6704 209.016 39.54 cv
209.016 40.4092 209.721 41.1147 210.59 41.1147 cv
211.46 41.1147 212.165 40.4092 212.165 39.54 cv
@
1 lc
210.601 39.5 mo
210.601 39.5 li
@
0 lc
205.925 38.6997 mo
205.925 37.8306 205.22 37.125 204.351 37.125 cv
203.48 37.125 202.775 37.8306 202.775 38.6997 cv
202.775 39.5693 203.48 40.2749 204.351 40.2749 cv
205.22 40.2749 205.925 39.5693 205.925 38.6997 cv
@
1 lc
204.4 38.6997 mo
204.4 38.6997 li
@
0 lc
175.205 61.1396 mo
175.205 60.2705 174.5 59.5649 173.63 59.5649 cv
172.761 59.5649 172.056 60.2705 172.056 61.1396 cv
172.056 62.0093 172.761 62.7148 173.63 62.7148 cv
174.5 62.7148 175.205 62.0093 175.205 61.1396 cv
@
1 lc
173.65 61.0498 mo
173.65 61.0498 li
@
0 lc
188.885 51.2998 mo
188.885 50.4302 188.18 49.7246 187.311 49.7246 cv
186.44 49.7246 185.735 50.4302 185.735 51.2998 cv
185.735 52.1689 186.44 52.875 187.311 52.875 cv
188.18 52.875 188.885 52.1689 188.885 51.2998 cv
@
1 lc
187.4 51.25 mo
187.4 51.25 li
@
0 lc
215.766 42.6597 mo
215.766 41.7905 215.06 41.085 214.19 41.085 cv
213.321 41.085 212.615 41.7905 212.615 42.6597 cv
212.615 43.5293 213.321 44.2349 214.19 44.2349 cv
215.06 44.2349 215.766 43.5293 215.766 42.6597 cv
@
1 lc
214.101 42.6499 mo
214.101 42.6499 li
@
0 lc
175.205 69.0596 mo
175.205 68.1904 174.5 67.4849 173.63 67.4849 cv
172.761 67.4849 172.056 68.1904 172.056 69.0596 cv
172.056 69.9292 172.761 70.6348 173.63 70.6348 cv
174.5 70.6348 175.205 69.9292 175.205 69.0596 cv
@
1 lc
173.55 69.0498 mo
173.55 69.0498 li
@
0 lc
231.845 23.6997 mo
231.845 22.8306 231.14 22.125 230.271 22.125 cv
229.4 22.125 228.695 22.8306 228.695 23.6997 cv
228.695 24.5693 229.4 25.2749 230.271 25.2749 cv
231.14 25.2749 231.845 24.5693 231.845 23.6997 cv
@
1 lc
230.3 23.5996 mo
230.3 23.5996 li
@
0 lc
249.726 18.1797 mo
249.726 17.3105 249.02 16.605 248.15 16.605 cv
247.281 16.605 246.575 17.3105 246.575 18.1797 cv
246.575 19.0493 247.281 19.7549 248.15 19.7549 cv
249.02 19.7549 249.726 19.0493 249.726 18.1797 cv
@
1 lc
248.15 18.0996 mo
248.15 18.0996 li
@
0 lc
219.605 33.54 mo
219.605 32.6704 218.899 31.9648 218.03 31.9648 cv
217.161 31.9648 216.455 32.6704 216.455 33.54 cv
216.455 34.4092 217.161 35.1147 218.03 35.1147 cv
218.899 35.1147 219.605 34.4092 219.605 33.54 cv
@
1 lc
218 33.5996 mo
218 33.5996 li
@
0 lc
255.485 10.2598 mo
255.485 9.39063 254.779 8.68457 253.91 8.68457 cv
253.041 8.68457 252.335 9.39063 252.335 10.2598 cv
252.335 11.1294 253.041 11.835 253.91 11.835 cv
254.779 11.835 255.485 11.1294 255.485 10.2598 cv
@
1 lc
253.9 10.2998 mo
253.9 10.2998 li
@
0 lc
219.845 33.2998 mo
219.845 32.4302 219.14 31.7246 218.271 31.7246 cv
217.4 31.7246 216.695 32.4302 216.695 33.2998 cv
216.695 34.1689 217.4 34.875 218.271 34.875 cv
219.14 34.875 219.845 34.1689 219.845 33.2998 cv
@
1 lc
218.3 33.3999 mo
218.3 33.3999 li
@
0 lc
216.005 38.8198 mo
216.005 37.9502 215.3 37.2446 214.431 37.2446 cv
213.561 37.2446 212.855 37.9502 212.855 38.8198 cv
212.855 39.689 213.561 40.3945 214.431 40.3945 cv
215.3 40.3945 216.005 39.689 216.005 38.8198 cv
@
1 lc
214.4 38.7998 mo
214.4 38.7998 li
@
0 lc
204.005 45.7798 mo
204.005 44.9102 203.3 44.2046 202.431 44.2046 cv
201.561 44.2046 200.855 44.9102 200.855 45.7798 cv
200.855 46.6494 201.561 47.355 202.431 47.355 cv
203.3 47.355 204.005 46.6494 204.005 45.7798 cv
@
1 lc
202.5 45.75 mo
202.5 45.75 li
@
0 lc
233.766 23.9399 mo
233.766 23.0703 233.06 22.3647 232.19 22.3647 cv
231.321 22.3647 230.615 23.0703 230.615 23.9399 cv
230.615 24.8091 231.321 25.5146 232.19 25.5146 cv
233.06 25.5146 233.766 24.8091 233.766 23.9399 cv
@
1 lc
232.15 23.8496 mo
232.15 23.8496 li
@
0 lc
209.285 46.2598 mo
209.285 45.3906 208.579 44.6846 207.71 44.6846 cv
206.841 44.6846 206.135 45.3906 206.135 46.2598 cv
206.135 47.1294 206.841 47.835 207.71 47.835 cv
208.579 47.835 209.285 47.1294 209.285 46.2598 cv
@
1 lc
207.65 46.1997 mo
207.65 46.1997 li
@
0 lc
212.646 40.0195 mo
212.646 39.1504 211.939 38.4448 211.07 38.4448 cv
210.201 38.4448 209.495 39.1504 209.495 40.0195 cv
209.495 40.8892 210.201 41.5947 211.07 41.5947 cv
211.939 41.5947 212.646 40.8892 212.646 40.0195 cv
@
1 lc
211.05 40.0498 mo
211.05 40.0498 li
@
0 lc
179.525 63.2998 mo
179.525 62.4302 178.819 61.7246 177.95 61.7246 cv
177.081 61.7246 176.375 62.4302 176.375 63.2998 cv
176.375 64.1689 177.081 64.875 177.95 64.875 cv
178.819 64.875 179.525 64.1689 179.525 63.2998 cv
@
1 lc
178 63.3496 mo
178 63.3496 li
@
0 lc
194.285 54.4199 mo
194.285 53.5503 193.579 52.8447 192.71 52.8447 cv
191.841 52.8447 191.135 53.5503 191.135 54.4199 cv
191.135 55.2891 191.841 55.9946 192.71 55.9946 cv
193.579 55.9946 194.285 55.2891 194.285 54.4199 cv
@
1 lc
192.7 54.5 mo
192.7 54.5 li
@
0 lc
179.766 59.9399 mo
179.766 59.0703 179.06 58.3647 178.19 58.3647 cv
177.321 58.3647 176.615 59.0703 176.615 59.9399 cv
176.615 60.8091 177.321 61.5146 178.19 61.5146 cv
179.06 61.5146 179.766 60.8091 179.766 59.9399 cv
@
1 lc
178.101 59.8999 mo
178.101 59.8999 li
@
0 lc
206.165 43.3799 mo
206.165 42.5103 205.46 41.8047 204.59 41.8047 cv
203.721 41.8047 203.016 42.5103 203.016 43.3799 cv
203.016 44.249 203.721 44.9546 204.59 44.9546 cv
205.46 44.9546 206.165 44.249 206.165 43.3799 cv
@
1 lc
204.601 43.3496 mo
204.601 43.3496 li
@
0 lc
248.885 16.5 mo
248.885 15.6304 248.18 14.9248 247.311 14.9248 cv
246.44 14.9248 245.735 15.6304 245.735 16.5 cv
245.735 17.3691 246.44 18.0747 247.311 18.0747 cv
248.18 18.0747 248.885 17.3691 248.885 16.5 cv
@
1 lc
247.4 16.3999 mo
247.4 16.3999 li
@
0 lc
188.646 56.5796 mo
188.646 55.7104 187.939 55.0049 187.07 55.0049 cv
186.201 55.0049 185.495 55.7104 185.495 56.5796 cv
185.495 57.4492 186.201 58.1548 187.07 58.1548 cv
187.939 58.1548 188.646 57.4492 188.646 56.5796 cv
@
1 lc
187.05 56.5996 mo
187.05 56.5996 li
@
0 lc
211.085 38.0996 mo
211.085 37.2305 210.38 36.5249 209.51 36.5249 cv
208.641 36.5249 207.936 37.2305 207.936 38.0996 cv
207.936 38.9692 208.641 39.6748 209.51 39.6748 cv
210.38 39.6748 211.085 38.9692 211.085 38.0996 cv
@
1 lc
209.5 38.1499 mo
209.5 38.1499 li
@
0 lc
206.405 47.46 mo
206.405 46.5903 205.699 45.8848 204.83 45.8848 cv
203.961 45.8848 203.255 46.5903 203.255 47.46 cv
203.255 48.3291 203.961 49.0347 204.83 49.0347 cv
205.699 49.0347 206.405 48.3291 206.405 47.46 cv
@
1 lc
204.9 47.5 mo
204.9 47.5 li
@
0 lc
213.605 39.0596 mo
213.605 38.1904 212.899 37.4849 212.03 37.4849 cv
211.161 37.4849 210.455 38.1904 210.455 39.0596 cv
210.455 39.9292 211.161 40.6348 212.03 40.6348 cv
212.899 40.6348 213.605 39.9292 213.605 39.0596 cv
@
1 lc
212.101 39.0996 mo
212.101 39.0996 li
@
0 lc
185.165 57.7798 mo
185.165 56.9102 184.46 56.2046 183.59 56.2046 cv
182.721 56.2046 182.016 56.9102 182.016 57.7798 cv
182.016 58.6494 182.721 59.355 183.59 59.355 cv
184.46 59.355 185.165 58.6494 185.165 57.7798 cv
@
1 lc
183.601 57.8496 mo
183.601 57.8496 li
@
0 lc
179.525 62.8198 mo
179.525 61.9502 178.819 61.2446 177.95 61.2446 cv
177.081 61.2446 176.375 61.9502 176.375 62.8198 cv
176.375 63.689 177.081 64.3945 177.95 64.3945 cv
178.819 64.3945 179.525 63.689 179.525 62.8198 cv
@
1 lc
177.9 62.8999 mo
177.9 62.8999 li
@
0.5 lw
0 lc
0.25 100.95 mo
0.25 184.899 li
127.4 184.899 li
127.4 100.95 li
0.25 100.95 li
0.25 100.95 li
cp
144.25 0.25 mo
144.25 84.1499 li
271.4 84.1499 li
271.4 0.25 li
144.25 0.25 li
144.25 0.25 li
cp
@
0.25 lw
8.16504 173.7 mo
8.16504 172.83 7.45947 172.125 6.59033 172.125 cv
5.7207 172.125 5.01514 172.83 5.01514 173.7 cv
5.01514 174.569 5.7207 175.274 6.59033 175.274 cv
7.45947 175.274 8.16504 174.569 8.16504 173.7 cv
@
1 lc
6.65039 173.8 mo
6.65039 173.8 li
@
0 lc
9.60498 167.7 mo
9.60498 166.83 8.89941 166.125 8.03027 166.125 cv
7.16064 166.125 6.45508 166.83 6.45508 167.7 cv
6.45508 168.569 7.16064 169.274 8.03027 169.274 cv
8.89941 169.274 9.60498 168.569 9.60498 167.7 cv
@
1 lc
7.9502 167.649 mo
7.9502 167.649 li
@
0 lc
10.8052 160.26 mo
10.8052 159.391 10.0996 158.685 9.22998 158.685 cv
8.36084 158.685 7.65527 159.391 7.65527 160.26 cv
7.65527 161.129 8.36084 161.835 9.22998 161.835 cv
10.0996 161.835 10.8052 161.129 10.8052 160.26 cv
@
1 lc
9.25 160.25 mo
9.25 160.25 li
@
0 lc
12.0054 151.62 mo
12.0054 150.75 11.2998 150.045 10.4302 150.045 cv
9.56055 150.045 8.85498 150.75 8.85498 151.62 cv
8.85498 152.489 9.56055 153.194 10.4302 153.194 cv
11.2998 153.194 12.0054 152.489 12.0054 151.62 cv
@
1 lc
10.5 151.649 mo
10.5 151.649 li
@
0 lc
13.4453 145.14 mo
13.4453 144.271 12.7397 143.564 11.8701 143.564 cv
11.001 143.564 10.2954 144.271 10.2954 145.14 cv
10.2954 146.009 11.001 146.715 11.8701 146.715 cv
12.7397 146.715 13.4453 146.009 13.4453 145.14 cv
@
1 lc
11.8003 145.1 mo
11.8003 145.1 li
@
0 lc
14.645 136.979 mo
14.645 136.11 13.9395 135.405 13.0703 135.405 cv
12.2007 135.405 11.4951 136.11 11.4951 136.979 cv
11.4951 137.85 12.2007 138.555 13.0703 138.555 cv
13.9395 138.555 14.645 137.85 14.645 136.979 cv
@
1 lc
13.1001 136.899 mo
13.1001 136.899 li
@
0 lc
15.9653 131.7 mo
15.9653 130.83 15.2598 130.125 14.3901 130.125 cv
13.521 130.125 12.8154 130.83 12.8154 131.7 cv
12.8154 132.569 13.521 133.274 14.3901 133.274 cv
15.2598 133.274 15.9653 132.569 15.9653 131.7 cv
@
1 lc
14.4004 131.75 mo
14.4004 131.75 li
@
0 lc
17.2852 126.66 mo
17.2852 125.79 16.5796 125.085 15.71 125.085 cv
14.8408 125.085 14.1353 125.79 14.1353 126.66 cv
14.1353 127.529 14.8408 128.234 15.71 128.234 cv
16.5796 128.234 17.2852 127.529 17.2852 126.66 cv
@
1 lc
15.6504 126.7 mo
15.6504 126.7 li
@
0 lc
18.4854 122.819 mo
18.4854 121.95 17.7798 121.245 16.9102 121.245 cv
16.041 121.245 15.335 121.95 15.335 122.819 cv
15.335 123.689 16.041 124.395 16.9102 124.395 cv
17.7798 124.395 18.4854 123.689 18.4854 122.819 cv
@
1 lc
16.9502 122.899 mo
16.9502 122.899 li
@
0 lc
19.9253 118.859 mo
19.9253 117.99 19.2197 117.285 18.3501 117.285 cv
17.481 117.285 16.7754 117.99 16.7754 118.859 cv
16.7754 119.729 17.481 120.435 18.3501 120.435 cv
19.2197 120.435 19.9253 119.729 19.9253 118.859 cv
@
1 lc
18.25 118.85 mo
18.25 118.85 li
@
0 lc
21.125 115.38 mo
21.125 114.511 20.4194 113.805 19.5503 113.805 cv
18.6807 113.805 17.9751 114.511 17.9751 115.38 cv
17.9751 116.249 18.6807 116.955 19.5503 116.955 cv
20.4194 116.955 21.125 116.249 21.125 115.38 cv
@
1 lc
19.5 115.35 mo
19.5 115.35 li
@
0 lc
22.3252 115.5 mo
22.3252 114.63 21.6196 113.925 20.75 113.925 cv
19.8809 113.925 19.1753 114.63 19.1753 115.5 cv
19.1753 116.369 19.8809 117.075 20.75 117.075 cv
21.6196 117.075 22.3252 116.369 22.3252 115.5 cv
@
1 lc
20.8003 115.5 mo
20.8003 115.5 li
@
0 lc
23.7651 113.7 mo
23.7651 112.83 23.0596 112.125 22.1904 112.125 cv
21.3208 112.125 20.6152 112.83 20.6152 113.7 cv
20.6152 114.569 21.3208 115.274 22.1904 115.274 cv
23.0596 115.274 23.7651 114.569 23.7651 113.7 cv
@
1 lc
22.1001 113.75 mo
22.1001 113.75 li
@
0 lc
24.9653 111.54 mo
24.9653 110.67 24.2598 109.965 23.3901 109.965 cv
22.521 109.965 21.8154 110.67 21.8154 111.54 cv
21.8154 112.409 22.521 113.115 23.3901 113.115 cv
24.2598 113.115 24.9653 112.409 24.9653 111.54 cv
@
1 lc
23.3501 111.6 mo
23.3501 111.6 li
@
0 lc
26.165 111.899 mo
26.165 111.03 25.4595 110.325 24.5903 110.325 cv
23.7207 110.325 23.0151 111.03 23.0151 111.899 cv
23.0151 112.77 23.7207 113.475 24.5903 113.475 cv
25.4595 113.475 26.165 112.77 26.165 111.899 cv
@
1 lc
24.6504 111.899 mo
24.6504 111.899 li
@
0 lc
27.605 113.46 mo
27.605 112.591 26.8994 111.885 26.0303 111.885 cv
25.1606 111.885 24.4551 112.591 24.4551 113.46 cv
24.4551 114.329 25.1606 115.035 26.0303 115.035 cv
26.8994 115.035 27.605 114.329 27.605 113.46 cv
@
1 lc
25.9502 113.399 mo
25.9502 113.399 li
@
0 lc
28.8052 111.54 mo
28.8052 110.67 28.0996 109.965 27.23 109.965 cv
26.3608 109.965 25.6553 110.67 25.6553 111.54 cv
25.6553 112.409 26.3608 113.115 27.23 113.115 cv
28.0996 113.115 28.8052 112.409 28.8052 111.54 cv
@
1 lc
27.2002 111.6 mo
27.2002 111.6 li
@
0 lc
30.0054 113.1 mo
30.0054 112.23 29.2998 111.524 28.4302 111.524 cv
27.5605 111.524 26.855 112.23 26.855 113.1 cv
26.855 113.969 27.5605 114.675 28.4302 114.675 cv
29.2998 114.675 30.0054 113.969 30.0054 113.1 cv
@
1 lc
28.5 113.1 mo
28.5 113.1 li
@
0 lc
31.4453 113.939 mo
31.4453 113.07 30.7397 112.365 29.8701 112.365 cv
29.001 112.365 28.2954 113.07 28.2954 113.939 cv
28.2954 114.81 29.001 115.515 29.8701 115.515 cv
30.7397 115.515 31.4453 114.81 31.4453 113.939 cv
@
1 lc
29.8003 113.85 mo
29.8003 113.85 li
@
0 lc
32.645 114.42 mo
32.645 113.551 31.9395 112.845 31.0703 112.845 cv
30.2007 112.845 29.4951 113.551 29.4951 114.42 cv
29.4951 115.289 30.2007 115.995 31.0703 115.995 cv
31.9395 115.995 32.645 115.289 32.645 114.42 cv
@
1 lc
31.0503 114.35 mo
31.0503 114.35 li
@
0 lc
33.8452 115.74 mo
33.8452 114.87 33.1396 114.165 32.27 114.165 cv
31.4009 114.165 30.6953 114.87 30.6953 115.74 cv
30.6953 116.609 31.4009 117.314 32.27 117.314 cv
33.1396 117.314 33.8452 116.609 33.8452 115.74 cv
@
1 lc
32.3501 115.75 mo
32.3501 115.75 li
@
0 lc
35.2852 117.78 mo
35.2852 116.91 34.5796 116.205 33.71 116.205 cv
32.8408 116.205 32.1353 116.91 32.1353 117.78 cv
32.1353 118.649 32.8408 119.354 33.71 119.354 cv
34.5796 119.354 35.2852 118.649 35.2852 117.78 cv
@
1 lc
33.6504 117.75 mo
33.6504 117.75 li
@
0 lc
36.4854 119.939 mo
36.4854 119.07 35.7798 118.365 34.9102 118.365 cv
34.041 118.365 33.335 119.07 33.335 119.939 cv
33.335 120.81 34.041 121.515 34.9102 121.515 cv
35.7798 121.515 36.4854 120.81 36.4854 119.939 cv
@
1 lc
34.9502 119.85 mo
34.9502 119.85 li
@
0 lc
37.6851 119.7 mo
37.6851 118.83 36.9795 118.125 36.1104 118.125 cv
35.2407 118.125 34.5352 118.83 34.5352 119.7 cv
34.5352 120.569 35.2407 121.274 36.1104 121.274 cv
36.9795 121.274 37.6851 120.569 37.6851 119.7 cv
@
1 lc
36.2002 119.6 mo
36.2002 119.6 li
@
0 lc
39.125 121.859 mo
39.125 120.99 38.4194 120.285 37.5503 120.285 cv
36.6807 120.285 35.9751 120.99 35.9751 121.859 cv
35.9751 122.729 36.6807 123.435 37.5503 123.435 cv
38.4194 123.435 39.125 122.729 39.125 121.859 cv
@
1 lc
37.5 121.85 mo
37.5 121.85 li
@
0 lc
40.3252 122.819 mo
40.3252 121.95 39.6196 121.245 38.75 121.245 cv
37.8809 121.245 37.1753 121.95 37.1753 122.819 cv
37.1753 123.689 37.8809 124.395 38.75 124.395 cv
39.6196 124.395 40.3252 123.689 40.3252 122.819 cv
@
1 lc
38.8003 122.85 mo
38.8003 122.85 li
@
0 lc
41.5254 124.5 mo
41.5254 123.63 40.8193 122.925 39.9502 122.925 cv
39.0806 122.925 38.375 123.63 38.375 124.5 cv
38.375 125.369 39.0806 126.075 39.9502 126.075 cv
40.8193 126.075 41.5254 125.369 41.5254 124.5 cv
@
1 lc
40.0503 124.55 mo
40.0503 124.55 li
@
0 lc
42.9653 123.54 mo
42.9653 122.67 42.2598 121.965 41.3901 121.965 cv
40.521 121.965 39.8154 122.67 39.8154 123.54 cv
39.8154 124.409 40.521 125.115 41.3901 125.115 cv
42.2598 125.115 42.9653 124.409 42.9653 123.54 cv
@
1 lc
41.3501 123.45 mo
41.3501 123.45 li
@
0 lc
44.165 126.42 mo
44.165 125.551 43.4595 124.845 42.5903 124.845 cv
41.7207 124.845 41.0151 125.551 41.0151 126.42 cv
41.0151 127.289 41.7207 127.995 42.5903 127.995 cv
43.4595 127.995 44.165 127.289 44.165 126.42 cv
@
1 lc
42.6504 126.45 mo
42.6504 126.45 li
@
0 lc
45.4854 127.14 mo
45.4854 126.271 44.7798 125.564 43.9102 125.564 cv
43.041 125.564 42.335 126.271 42.335 127.14 cv
42.335 128.009 43.041 128.715 43.9102 128.715 cv
44.7798 128.715 45.4854 128.009 45.4854 127.14 cv
@
1 lc
43.9004 127.2 mo
43.9004 127.2 li
@
0 lc
46.8052 129.06 mo
46.8052 128.19 46.0996 127.484 45.23 127.484 cv
44.3608 127.484 43.6553 128.19 43.6553 129.06 cv
43.6553 129.929 44.3608 130.635 45.23 130.635 cv
46.0996 130.635 46.8052 129.929 46.8052 129.06 cv
@
1 lc
45.2002 129.05 mo
45.2002 129.05 li
@
0 lc
48.0054 130.5 mo
48.0054 129.63 47.2998 128.925 46.4302 128.925 cv
45.5605 128.925 44.855 129.63 44.855 130.5 cv
44.855 131.369 45.5605 132.075 46.4302 132.075 cv
47.2998 132.075 48.0054 131.369 48.0054 130.5 cv
@
1 lc
46.5 130.399 mo
46.5 130.399 li
@
0 lc
49.3252 130.74 mo
49.3252 129.87 48.6196 129.165 47.75 129.165 cv
46.8809 129.165 46.1753 129.87 46.1753 130.74 cv
46.1753 131.609 46.8809 132.314 47.75 132.314 cv
48.6196 132.314 49.3252 131.609 49.3252 130.74 cv
@
1 lc
47.75 130.75 mo
47.75 130.75 li
@
0 lc
50.645 132.899 mo
50.645 132.03 49.9395 131.325 49.0703 131.325 cv
48.2007 131.325 47.4951 132.03 47.4951 132.899 cv
47.4951 133.77 48.2007 134.475 49.0703 134.475 cv
49.9395 134.475 50.645 133.77 50.645 132.899 cv
@
1 lc
49.0503 132.899 mo
49.0503 132.899 li
@
0 lc
51.8452 133.859 mo
51.8452 132.99 51.1396 132.285 50.27 132.285 cv
49.4009 132.285 48.6953 132.99 48.6953 133.859 cv
48.6953 134.729 49.4009 135.435 50.27 135.435 cv
51.1396 135.435 51.8452 134.729 51.8452 133.859 cv
@
1 lc
50.3501 133.8 mo
50.3501 133.8 li
@
0 lc
53.165 134.819 mo
53.165 133.95 52.4595 133.245 51.5903 133.245 cv
50.7207 133.245 50.0151 133.95 50.0151 134.819 cv
50.0151 135.689 50.7207 136.395 51.5903 136.395 cv
52.4595 136.395 53.165 135.689 53.165 134.819 cv
@
1 lc
51.6001 134.899 mo
51.6001 134.899 li
@
0 lc
54.4854 136.02 mo
54.4854 135.15 53.7798 134.444 52.9102 134.444 cv
52.041 134.444 51.335 135.15 51.335 136.02 cv
51.335 136.89 52.041 137.595 52.9102 137.595 cv
53.7798 137.595 54.4854 136.89 54.4854 136.02 cv
@
1 lc
52.9004 135.95 mo
52.9004 135.95 li
@
0 lc
55.6851 135.78 mo
55.6851 134.91 54.9795 134.205 54.1104 134.205 cv
53.2407 134.205 52.5352 134.91 52.5352 135.78 cv
52.5352 136.649 53.2407 137.354 54.1104 137.354 cv
54.9795 137.354 55.6851 136.649 55.6851 135.78 cv
@
1 lc
54.2002 135.8 mo
54.2002 135.8 li
@
0 lc
57.125 136.5 mo
57.125 135.63 56.4194 134.925 55.5503 134.925 cv
54.6807 134.925 53.9751 135.63 53.9751 136.5 cv
53.9751 137.369 54.6807 138.075 55.5503 138.075 cv
56.4194 138.075 57.125 137.369 57.125 136.5 cv
@
1 lc
55.5 136.45 mo
55.5 136.45 li
@
0 lc
58.3252 138.18 mo
58.3252 137.311 57.6196 136.604 56.75 136.604 cv
55.8809 136.604 55.1753 137.311 55.1753 138.18 cv
55.1753 139.049 55.8809 139.755 56.75 139.755 cv
57.6196 139.755 58.3252 139.049 58.3252 138.18 cv
@
1 lc
56.75 138.2 mo
56.75 138.2 li
@
0 lc
59.5254 140.58 mo
59.5254 139.71 58.8193 139.005 57.9502 139.005 cv
57.0806 139.005 56.375 139.71 56.375 140.58 cv
56.375 141.449 57.0806 142.155 57.9502 142.155 cv
58.8193 142.155 59.5254 141.449 59.5254 140.58 cv
@
1 lc
58.0503 140.5 mo
58.0503 140.5 li
@
0 lc
60.9653 137.939 mo
60.9653 137.07 60.2598 136.365 59.3901 136.365 cv
58.521 136.365 57.8154 137.07 57.8154 137.939 cv
57.8154 138.81 58.521 139.515 59.3901 139.515 cv
60.2598 139.515 60.9653 138.81 60.9653 137.939 cv
@
1 lc
59.3501 138 mo
59.3501 138 li
@
0 lc
62.165 140.46 mo
62.165 139.591 61.4595 138.885 60.5903 138.885 cv
59.7207 138.885 59.0151 139.591 59.0151 140.46 cv
59.0151 141.329 59.7207 142.035 60.5903 142.035 cv
61.4595 142.035 62.165 141.329 62.165 140.46 cv
@
1 lc
60.6001 140.45 mo
60.6001 140.45 li
@
0 lc
63.4854 140.58 mo
63.4854 139.71 62.7798 139.005 61.9102 139.005 cv
61.041 139.005 60.335 139.71 60.335 140.58 cv
60.335 141.449 61.041 142.155 61.9102 142.155 cv
62.7798 142.155 63.4854 141.449 63.4854 140.58 cv
@
1 lc
61.9004 140.649 mo
61.9004 140.649 li
@
0 lc
64.8052 140.7 mo
64.8052 139.83 64.0996 139.125 63.23 139.125 cv
62.3608 139.125 61.6553 139.83 61.6553 140.7 cv
61.6553 141.569 62.3608 142.274 63.23 142.274 cv
64.0996 142.274 64.8052 141.569 64.8052 140.7 cv
@
1 lc
63.2002 140.7 mo
63.2002 140.7 li
@
0 lc
66.0054 142.979 mo
66.0054 142.11 65.2998 141.405 64.4302 141.405 cv
63.5605 141.405 62.855 142.11 62.855 142.979 cv
62.855 143.85 63.5605 144.555 64.4302 144.555 cv
65.2998 144.555 66.0054 143.85 66.0054 142.979 cv
@
1 lc
64.4502 143 mo
64.4502 143 li
@
0 lc
67.3252 140.34 mo
67.3252 139.471 66.6196 138.765 65.75 138.765 cv
64.8809 138.765 64.1753 139.471 64.1753 140.34 cv
64.1753 141.209 64.8809 141.915 65.75 141.915 cv
66.6196 141.915 67.3252 141.209 67.3252 140.34 cv
@
1 lc
65.75 140.35 mo
65.75 140.35 li
@
0 lc
68.645 143.939 mo
68.645 143.07 67.9395 142.365 67.0703 142.365 cv
66.2007 142.365 65.4951 143.07 65.4951 143.939 cv
65.4951 144.81 66.2007 145.515 67.0703 145.515 cv
67.9395 145.515 68.645 144.81 68.645 143.939 cv
@
1 lc
67.0503 144 mo
67.0503 144 li
@
0 lc
69.8452 144.18 mo
69.8452 143.311 69.1396 142.604 68.27 142.604 cv
67.4009 142.604 66.6953 143.311 66.6953 144.18 cv
66.6953 145.049 67.4009 145.755 68.27 145.755 cv
69.1396 145.755 69.8452 145.049 69.8452 144.18 cv
@
1 lc
68.3003 144.149 mo
68.3003 144.149 li
@
0 lc
71.165 144.899 mo
71.165 144.03 70.4595 143.325 69.5903 143.325 cv
68.7207 143.325 68.0151 144.03 68.0151 144.899 cv
68.0151 145.77 68.7207 146.475 69.5903 146.475 cv
70.4595 146.475 71.165 145.77 71.165 144.899 cv
@
1 lc
69.6001 145 mo
69.6001 145 li
@
0 lc
72.4854 143.7 mo
72.4854 142.83 71.7798 142.125 70.9102 142.125 cv
70.041 142.125 69.335 142.83 69.335 143.7 cv
69.335 144.569 70.041 145.274 70.9102 145.274 cv
71.7798 145.274 72.4854 144.569 72.4854 143.7 cv
@
1 lc
70.9004 143.75 mo
70.9004 143.75 li
@
0 lc
73.6851 145.38 mo
73.6851 144.511 72.9795 143.805 72.1104 143.805 cv
71.2407 143.805 70.5352 144.511 70.5352 145.38 cv
70.5352 146.249 71.2407 146.955 72.1104 146.955 cv
72.9795 146.955 73.6851 146.249 73.6851 145.38 cv
@
1 lc
72.1504 145.399 mo
72.1504 145.399 li
@
0 lc
75.125 146.1 mo
75.125 145.23 74.4194 144.524 73.5503 144.524 cv
72.6807 144.524 71.9751 145.23 71.9751 146.1 cv
71.9751 146.969 72.6807 147.675 73.5503 147.675 cv
74.4194 147.675 75.125 146.969 75.125 146.1 cv
@
1 lc
73.4502 146.1 mo
73.4502 146.1 li
@
0 lc
76.3252 145.859 mo
76.3252 144.99 75.6196 144.285 74.75 144.285 cv
73.8809 144.285 73.1753 144.99 73.1753 145.859 cv
73.1753 146.729 73.8809 147.435 74.75 147.435 cv
75.6196 147.435 76.3252 146.729 76.3252 145.859 cv
@
1 lc
74.75 145.85 mo
74.75 145.85 li
@
0 lc
77.5254 146.46 mo
77.5254 145.591 76.8198 144.885 75.9502 144.885 cv
75.0806 144.885 74.375 145.591 74.375 146.46 cv
74.375 147.329 75.0806 148.035 75.9502 148.035 cv
76.8198 148.035 77.5254 147.329 77.5254 146.46 cv
@
1 lc
76.0503 146.45 mo
76.0503 146.45 li
@
0 lc
78.9653 148.26 mo
78.9653 147.391 78.2598 146.685 77.3901 146.685 cv
76.521 146.685 75.8154 147.391 75.8154 148.26 cv
75.8154 149.129 76.521 149.835 77.3901 149.835 cv
78.2598 149.835 78.9653 149.129 78.9653 148.26 cv
@
1 lc
77.3003 148.35 mo
77.3003 148.35 li
@
0 lc
80.165 146.939 mo
80.165 146.07 79.4595 145.365 78.5903 145.365 cv
77.7207 145.365 77.0151 146.07 77.0151 146.939 cv
77.0151 147.81 77.7207 148.515 78.5903 148.515 cv
79.4595 148.515 80.165 147.81 80.165 146.939 cv
@
1 lc
78.6001 146.95 mo
78.6001 146.95 li
@
0 lc
81.4854 146.34 mo
81.4854 145.471 80.7798 144.765 79.9102 144.765 cv
79.041 144.765 78.335 145.471 78.335 146.34 cv
78.335 147.209 79.041 147.915 79.9102 147.915 cv
80.7798 147.915 81.4854 147.209 81.4854 146.34 cv
@
1 lc
79.9004 146.399 mo
79.9004 146.399 li
@
0 lc
82.8052 145.62 mo
82.8052 144.75 82.0996 144.045 81.23 144.045 cv
80.3608 144.045 79.6553 144.75 79.6553 145.62 cv
79.6553 146.489 80.3608 147.194 81.23 147.194 cv
82.0996 147.194 82.8052 146.489 82.8052 145.62 cv
@
1 lc
81.1504 145.55 mo
81.1504 145.55 li
@
0 lc
84.0054 145.859 mo
84.0054 144.99 83.2998 144.285 82.4302 144.285 cv
81.5605 144.285 80.855 144.99 80.855 145.859 cv
80.855 146.729 81.5605 147.435 82.4302 147.435 cv
83.2998 147.435 84.0054 146.729 84.0054 145.859 cv
@
1 lc
82.4502 145.8 mo
82.4502 145.8 li
@
0 lc
85.3252 148.02 mo
85.3252 147.15 84.6196 146.444 83.75 146.444 cv
82.8809 146.444 82.1753 147.15 82.1753 148.02 cv
82.1753 148.89 82.8809 149.595 83.75 149.595 cv
84.6196 149.595 85.3252 148.89 85.3252 148.02 cv
@
1 lc
83.75 147.95 mo
83.75 147.95 li
@
0 lc
86.645 148.5 mo
86.645 147.63 85.9395 146.925 85.0703 146.925 cv
84.2007 146.925 83.4951 147.63 83.4951 148.5 cv
83.4951 149.369 84.2007 150.075 85.0703 150.075 cv
85.9395 150.075 86.645 149.369 86.645 148.5 cv
@
1 lc
85 148.399 mo
85 148.399 li
@
0 lc
87.8452 149.939 mo
87.8452 149.07 87.1396 148.365 86.27 148.365 cv
85.4009 148.365 84.6953 149.07 84.6953 149.939 cv
84.6953 150.81 85.4009 151.515 86.27 151.515 cv
87.1396 151.515 87.8452 150.81 87.8452 149.939 cv
@
1 lc
86.3003 149.899 mo
86.3003 149.899 li
@
0 lc
89.165 152.1 mo
89.165 151.23 88.4595 150.524 87.5903 150.524 cv
86.7207 150.524 86.0151 151.23 86.0151 152.1 cv
86.0151 152.969 86.7207 153.675 87.5903 153.675 cv
88.4595 153.675 89.165 152.969 89.165 152.1 cv
@
1 lc
87.6001 152 mo
87.6001 152 li
@
0 lc
90.4854 151.26 mo
90.4854 150.391 89.7798 149.685 88.9102 149.685 cv
88.041 149.685 87.335 150.391 87.335 151.26 cv
87.335 152.129 88.041 152.835 88.9102 152.835 cv
89.7798 152.835 90.4854 152.129 90.4854 151.26 cv
@
1 lc
88.8501 151.25 mo
88.8501 151.25 li
@
0 lc
91.6851 148.859 mo
91.6851 147.99 90.9795 147.285 90.1104 147.285 cv
89.2407 147.285 88.5352 147.99 88.5352 148.859 cv
88.5352 149.729 89.2407 150.435 90.1104 150.435 cv
90.9795 150.435 91.6851 149.729 91.6851 148.859 cv
@
1 lc
90.1504 148.85 mo
90.1504 148.85 li
@
0 lc
93.125 147.78 mo
93.125 146.91 92.4194 146.205 91.5503 146.205 cv
90.6807 146.205 89.9751 146.91 89.9751 147.78 cv
89.9751 148.649 90.6807 149.354 91.5503 149.354 cv
92.4194 149.354 93.125 148.649 93.125 147.78 cv
@
1 lc
91.4502 147.75 mo
91.4502 147.75 li
@
0 lc
94.3252 147.78 mo
94.3252 146.91 93.6196 146.205 92.75 146.205 cv
91.8809 146.205 91.1753 146.91 91.1753 147.78 cv
91.1753 148.649 91.8809 149.354 92.75 149.354 cv
93.6196 149.354 94.3252 148.649 94.3252 147.78 cv
@
1 lc
92.7002 147.7 mo
92.7002 147.7 li
@
0 lc
95.5254 146.819 mo
95.5254 145.95 94.8193 145.245 93.9502 145.245 cv
93.0811 145.245 92.375 145.95 92.375 146.819 cv
92.375 147.689 93.0811 148.395 93.9502 148.395 cv
94.8193 148.395 95.5254 147.689 95.5254 146.819 cv
@
1 lc
94 146.899 mo
94 146.899 li
@
0 lc
96.9653 147.54 mo
96.9653 146.67 96.2598 145.965 95.3901 145.965 cv
94.521 145.965 93.8154 146.67 93.8154 147.54 cv
93.8154 148.409 94.521 149.115 95.3901 149.115 cv
96.2598 149.115 96.9653 148.409 96.9653 147.54 cv
@
1 lc
95.3003 147.55 mo
95.3003 147.55 li
@
0 lc
98.165 148.5 mo
98.165 147.63 97.4595 146.925 96.5903 146.925 cv
95.7207 146.925 95.0151 147.63 95.0151 148.5 cv
95.0151 149.369 95.7207 150.075 96.5903 150.075 cv
97.4595 150.075 98.165 149.369 98.165 148.5 cv
@
1 lc
96.6001 148.399 mo
96.6001 148.399 li
@
0 lc
99.3652 151.859 mo
99.3652 150.99 98.6597 150.285 97.79 150.285 cv
96.9209 150.285 96.2153 150.99 96.2153 151.859 cv
96.2153 152.729 96.9209 153.435 97.79 153.435 cv
98.6597 153.435 99.3652 152.729 99.3652 151.859 cv
@
1 lc
97.8501 151.899 mo
97.8501 151.899 li
@
0 lc
100.805 154.02 mo
100.805 153.15 100.1 152.444 99.23 152.444 cv
98.3608 152.444 97.6553 153.15 97.6553 154.02 cv
97.6553 154.89 98.3608 155.595 99.23 155.595 cv
100.1 155.595 100.805 154.89 100.805 154.02 cv
@
1 lc
99.1504 154 mo
99.1504 154 li
@
0 lc
102.005 155.1 mo
102.005 154.23 101.3 153.524 100.43 153.524 cv
99.5605 153.524 98.855 154.23 98.855 155.1 cv
98.855 155.969 99.5605 156.675 100.43 156.675 cv
101.3 156.675 102.005 155.969 102.005 155.1 cv
@
1 lc
100.45 155.1 mo
100.45 155.1 li
@
0 lc
103.205 153.78 mo
103.205 152.91 102.5 152.205 101.63 152.205 cv
100.761 152.205 100.055 152.91 100.055 153.78 cv
100.055 154.649 100.761 155.354 101.63 155.354 cv
102.5 155.354 103.205 154.649 103.205 153.78 cv
@
1 lc
101.7 153.75 mo
101.7 153.75 li
@
0 lc
104.645 153.3 mo
104.645 152.431 103.939 151.725 103.07 151.725 cv
102.201 151.725 101.495 152.431 101.495 153.3 cv
101.495 154.169 102.201 154.875 103.07 154.875 cv
103.939 154.875 104.645 154.169 104.645 153.3 cv
@
1 lc
103 153.35 mo
103 153.35 li
@
0 lc
105.845 148.979 mo
105.845 148.11 105.14 147.405 104.27 147.405 cv
103.401 147.405 102.695 148.11 102.695 148.979 cv
102.695 149.85 103.401 150.555 104.27 150.555 cv
105.14 150.555 105.845 149.85 105.845 148.979 cv
@
1 lc
104.3 148.899 mo
104.3 148.899 li
@
0 lc
107.045 148.5 mo
107.045 147.63 106.34 146.925 105.47 146.925 cv
104.601 146.925 103.895 147.63 103.895 148.5 cv
103.895 149.369 104.601 150.075 105.47 150.075 cv
106.34 150.075 107.045 149.369 107.045 148.5 cv
@
1 lc
105.55 148.45 mo
105.55 148.45 li
@
0 lc
108.485 147.54 mo
108.485 146.67 107.78 145.965 106.91 145.965 cv
106.041 145.965 105.335 146.67 105.335 147.54 cv
105.335 148.409 106.041 149.115 106.91 149.115 cv
107.78 149.115 108.485 148.409 108.485 147.54 cv
@
1 lc
106.85 147.45 mo
106.85 147.45 li
@
0 lc
109.685 148.5 mo
109.685 147.63 108.979 146.925 108.11 146.925 cv
107.241 146.925 106.535 147.63 106.535 148.5 cv
106.535 149.369 107.241 150.075 108.11 150.075 cv
108.979 150.075 109.685 149.369 109.685 148.5 cv
@
1 lc
108.15 148.6 mo
108.15 148.6 li
@
0 lc
110.885 148.979 mo
110.885 148.11 110.18 147.405 109.31 147.405 cv
108.441 147.405 107.735 148.11 107.735 148.979 cv
107.735 149.85 108.441 150.555 109.31 150.555 cv
110.18 150.555 110.885 149.85 110.885 148.979 cv
@
1 lc
109.4 148.899 mo
109.4 148.899 li
@
0 lc
112.325 150.899 mo
112.325 150.03 111.62 149.325 110.75 149.325 cv
109.881 149.325 109.175 150.03 109.175 150.899 cv
109.175 151.77 109.881 152.475 110.75 152.475 cv
111.62 152.475 112.325 151.77 112.325 150.899 cv
@
1 lc
110.7 150.899 mo
110.7 150.899 li
@
0 lc
113.525 154.26 mo
113.525 153.391 112.819 152.685 111.95 152.685 cv
111.081 152.685 110.375 153.391 110.375 154.26 cv
110.375 155.129 111.081 155.835 111.95 155.835 cv
112.819 155.835 113.525 155.129 113.525 154.26 cv
@
1 lc
112 154.25 mo
112 154.25 li
@
0 lc
114.725 156.66 mo
114.725 155.79 114.02 155.085 113.15 155.085 cv
112.281 155.085 111.575 155.79 111.575 156.66 cv
111.575 157.529 112.281 158.234 113.15 158.234 cv
114.02 158.234 114.725 157.529 114.725 156.66 cv
@
1 lc
113.25 156.6 mo
113.25 156.6 li
@
0 lc
116.165 154.5 mo
116.165 153.63 115.459 152.925 114.59 152.925 cv
113.721 152.925 113.015 153.63 113.015 154.5 cv
113.015 155.369 113.721 156.075 114.59 156.075 cv
115.459 156.075 116.165 155.369 116.165 154.5 cv
@
1 lc
114.55 154.45 mo
114.55 154.45 li
@
0 lc
117.365 154.5 mo
117.365 153.63 116.66 152.925 115.79 152.925 cv
114.921 152.925 114.215 153.63 114.215 154.5 cv
114.215 155.369 114.921 156.075 115.79 156.075 cv
116.66 156.075 117.365 155.369 117.365 154.5 cv
@
1 lc
115.85 154.399 mo
115.85 154.399 li
@
0 lc
118.805 152.1 mo
118.805 151.23 118.1 150.524 117.23 150.524 cv
116.361 150.524 115.655 151.23 115.655 152.1 cv
115.655 152.969 116.361 153.675 117.23 153.675 cv
118.1 153.675 118.805 152.969 118.805 152.1 cv
@
1 lc
117.15 152.149 mo
117.15 152.149 li
@
0 lc
120.005 150.42 mo
120.005 149.551 119.3 148.845 118.43 148.845 cv
117.561 148.845 116.855 149.551 116.855 150.42 cv
116.855 151.289 117.561 151.995 118.43 151.995 cv
119.3 151.995 120.005 151.289 120.005 150.42 cv
@
1 lc
118.4 150.399 mo
118.4 150.399 li
@
0 lc
121.205 148.26 mo
121.205 147.391 120.5 146.685 119.63 146.685 cv
118.761 146.685 118.055 147.391 118.055 148.26 cv
118.055 149.129 118.761 149.835 119.63 149.835 cv
120.5 149.835 121.205 149.129 121.205 148.26 cv
@
1 lc
119.7 148.35 mo
119.7 148.35 li
@
0 lc
122.645 148.02 mo
122.645 147.15 121.939 146.444 121.07 146.444 cv
120.201 146.444 119.495 147.15 119.495 148.02 cv
119.495 148.89 120.201 149.595 121.07 149.595 cv
121.939 149.595 122.645 148.89 122.645 148.02 cv
@
1 lc
121 147.95 mo
121 147.95 li
@
0.5 lw
0 lc
144.25 100.95 mo
144.25 184.899 li
271.4 184.899 li
271.4 100.95 li
144.25 100.95 li
144.25 100.95 li
cp
0.25 100.95 mo
0.25 184.899 li
127.4 184.899 li
127.4 100.95 li
0.25 100.95 li
0.25 100.95 li
cp
@
0.25 lw
186.965 143.22 mo
186.965 142.351 186.26 141.645 185.391 141.645 cv
184.521 141.645 183.815 142.351 183.815 143.22 cv
183.815 144.089 184.521 144.795 185.391 144.795 cv
186.26 144.795 186.965 144.089 186.965 143.22 cv
@
1 lc
185.351 143.2 mo
185.351 143.2 li
@
0 lc
188.165 144.66 mo
188.165 143.79 187.46 143.085 186.59 143.085 cv
185.721 143.085 185.016 143.79 185.016 144.66 cv
185.016 145.529 185.721 146.234 186.59 146.234 cv
187.46 146.234 188.165 145.529 188.165 144.66 cv
@
1 lc
186.65 144.7 mo
186.65 144.7 li
@
0 lc
189.485 144.42 mo
189.485 143.551 188.779 142.845 187.91 142.845 cv
187.041 142.845 186.335 143.551 186.335 144.42 cv
186.335 145.289 187.041 145.995 187.91 145.995 cv
188.779 145.995 189.485 145.289 189.485 144.42 cv
@
1 lc
187.9 144.5 mo
187.9 144.5 li
@
0 lc
190.806 145.14 mo
190.806 144.271 190.1 143.564 189.23 143.564 cv
188.36 143.564 187.655 144.271 187.655 145.14 cv
187.655 146.009 188.36 146.715 189.23 146.715 cv
190.1 146.715 190.806 146.009 190.806 145.14 cv
@
1 lc
189.2 145.1 mo
189.2 145.1 li
@
0 lc
192.005 145.62 mo
192.005 144.75 191.3 144.045 190.431 144.045 cv
189.561 144.045 188.855 144.75 188.855 145.62 cv
188.855 146.489 189.561 147.194 190.431 147.194 cv
191.3 147.194 192.005 146.489 192.005 145.62 cv
@
1 lc
190.5 145.6 mo
190.5 145.6 li
@
0 lc
193.325 146.1 mo
193.325 145.23 192.619 144.524 191.75 144.524 cv
190.881 144.524 190.175 145.23 190.175 146.1 cv
190.175 146.969 190.881 147.675 191.75 147.675 cv
192.619 147.675 193.325 146.969 193.325 146.1 cv
@
1 lc
191.75 146.1 mo
191.75 146.1 li
@
0 lc
194.646 148.74 mo
194.646 147.87 193.939 147.165 193.07 147.165 cv
192.201 147.165 191.495 147.87 191.495 148.74 cv
191.495 149.609 192.201 150.314 193.07 150.314 cv
193.939 150.314 194.646 149.609 194.646 148.74 cv
@
1 lc
193.05 148.8 mo
193.05 148.8 li
@
0 lc
195.845 147.06 mo
195.845 146.19 195.14 145.484 194.271 145.484 cv
193.4 145.484 192.695 146.19 192.695 147.06 cv
192.695 147.929 193.4 148.635 194.271 148.635 cv
195.14 148.635 195.845 147.929 195.845 147.06 cv
@
1 lc
194.351 147.149 mo
194.351 147.149 li
@
0 lc
197.165 148.979 mo
197.165 148.11 196.46 147.405 195.59 147.405 cv
194.721 147.405 194.016 148.11 194.016 148.979 cv
194.016 149.85 194.721 150.555 195.59 150.555 cv
196.46 150.555 197.165 149.85 197.165 148.979 cv
@
1 lc
195.601 149 mo
195.601 149 li
@
0 lc
198.485 148.26 mo
198.485 147.391 197.779 146.685 196.91 146.685 cv
196.041 146.685 195.335 147.391 195.335 148.26 cv
195.335 149.129 196.041 149.835 196.91 149.835 cv
197.779 149.835 198.485 149.129 198.485 148.26 cv
@
1 lc
196.9 148.2 mo
196.9 148.2 li
@
0 lc
199.686 151.859 mo
199.686 150.99 198.979 150.285 198.11 150.285 cv
197.241 150.285 196.535 150.99 196.535 151.859 cv
196.535 152.729 197.241 153.435 198.11 153.435 cv
198.979 153.435 199.686 152.729 199.686 151.859 cv
@
1 lc
198.2 151.899 mo
198.2 151.899 li
@
0 lc
201.125 150.18 mo
201.125 149.311 200.42 148.604 199.55 148.604 cv
198.681 148.604 197.976 149.311 197.976 150.18 cv
197.976 151.049 198.681 151.755 199.55 151.755 cv
200.42 151.755 201.125 151.049 201.125 150.18 cv
@
1 lc
199.5 150.25 mo
199.5 150.25 li
@
0 lc
202.325 151.859 mo
202.325 150.99 201.619 150.285 200.75 150.285 cv
199.881 150.285 199.175 150.99 199.175 151.859 cv
199.175 152.729 199.881 153.435 200.75 153.435 cv
201.619 153.435 202.325 152.729 202.325 151.859 cv
@
1 lc
200.75 151.95 mo
200.75 151.95 li
@
0 lc
203.525 152.1 mo
203.525 151.23 202.819 150.524 201.95 150.524 cv
201.081 150.524 200.375 151.23 200.375 152.1 cv
200.375 152.969 201.081 153.675 201.95 153.675 cv
202.819 153.675 203.525 152.969 203.525 152.1 cv
@
1 lc
202.05 152 mo
202.05 152 li
@
0 lc
204.965 153.06 mo
204.965 152.19 204.26 151.484 203.391 151.484 cv
202.521 151.484 201.815 152.19 201.815 153.06 cv
201.815 153.929 202.521 154.635 203.391 154.635 cv
204.26 154.635 204.965 153.929 204.965 153.06 cv
@
1 lc
203.351 153.149 mo
203.351 153.149 li
@
0 lc
206.165 153.06 mo
206.165 152.19 205.46 151.484 204.59 151.484 cv
203.721 151.484 203.016 152.19 203.016 153.06 cv
203.016 153.929 203.721 154.635 204.59 154.635 cv
205.46 154.635 206.165 153.929 206.165 153.06 cv
@
1 lc
204.601 153 mo
204.601 153 li
@
0 lc
207.485 155.7 mo
207.485 154.83 206.779 154.125 205.91 154.125 cv
205.041 154.125 204.335 154.83 204.335 155.7 cv
204.335 156.569 205.041 157.274 205.91 157.274 cv
206.779 157.274 207.485 156.569 207.485 155.7 cv
@
1 lc
205.9 155.6 mo
205.9 155.6 li
@
0 lc
208.806 154.74 mo
208.806 153.87 208.1 153.165 207.23 153.165 cv
206.36 153.165 205.655 153.87 205.655 154.74 cv
205.655 155.609 206.36 156.314 207.23 156.314 cv
208.1 156.314 208.806 155.609 208.806 154.74 cv
@
1 lc
207.2 154.649 mo
207.2 154.649 li
@
0 lc
210.005 156.18 mo
210.005 155.311 209.3 154.604 208.431 154.604 cv
207.561 154.604 206.855 155.311 206.855 156.18 cv
206.855 157.049 207.561 157.755 208.431 157.755 cv
209.3 157.755 210.005 157.049 210.005 156.18 cv
@
1 lc
208.45 156.1 mo
208.45 156.1 li
@
0 lc
211.325 157.14 mo
211.325 156.271 210.619 155.564 209.75 155.564 cv
208.881 155.564 208.175 156.271 208.175 157.14 cv
208.175 158.009 208.881 158.715 209.75 158.715 cv
210.619 158.715 211.325 158.009 211.325 157.14 cv
@
1 lc
209.75 157.1 mo
209.75 157.1 li
@
0 lc
212.646 157.74 mo
212.646 156.87 211.939 156.165 211.07 156.165 cv
210.201 156.165 209.495 156.87 209.495 157.74 cv
209.495 158.609 210.201 159.314 211.07 159.314 cv
211.939 159.314 212.646 158.609 212.646 157.74 cv
@
1 lc
211.05 157.75 mo
211.05 157.75 li
@
0 lc
213.845 159.06 mo
213.845 158.19 213.14 157.484 212.271 157.484 cv
211.4 157.484 210.695 158.19 210.695 159.06 cv
210.695 159.929 211.4 160.635 212.271 160.635 cv
213.14 160.635 213.845 159.929 213.845 159.06 cv
@
1 lc
212.3 159.149 mo
212.3 159.149 li
@
0 lc
215.165 159.06 mo
215.165 158.19 214.46 157.484 213.59 157.484 cv
212.721 157.484 212.016 158.19 212.016 159.06 cv
212.016 159.929 212.721 160.635 213.59 160.635 cv
214.46 160.635 215.165 159.929 215.165 159.06 cv
@
1 lc
213.601 159.05 mo
213.601 159.05 li
@
0 lc
216.485 158.1 mo
216.485 157.23 215.779 156.524 214.91 156.524 cv
214.041 156.524 213.335 157.23 213.335 158.1 cv
213.335 158.969 214.041 159.675 214.91 159.675 cv
215.779 159.675 216.485 158.969 216.485 158.1 cv
@
1 lc
214.9 158.149 mo
214.9 158.149 li
@
0 lc
217.686 160.979 mo
217.686 160.11 216.979 159.405 216.11 159.405 cv
215.241 159.405 214.535 160.11 214.535 160.979 cv
214.535 161.85 215.241 162.555 216.11 162.555 cv
216.979 162.555 217.686 161.85 217.686 160.979 cv
@
1 lc
216.15 160.899 mo
216.15 160.899 li
@
0 lc
219.125 164.1 mo
219.125 163.23 218.42 162.524 217.55 162.524 cv
216.681 162.524 215.976 163.23 215.976 164.1 cv
215.976 164.969 216.681 165.675 217.55 165.675 cv
218.42 165.675 219.125 164.969 219.125 164.1 cv
@
1 lc
217.45 164.1 mo
217.45 164.1 li
@
0 lc
220.325 162.54 mo
220.325 161.67 219.619 160.965 218.75 160.965 cv
217.881 160.965 217.175 161.67 217.175 162.54 cv
217.175 163.409 217.881 164.115 218.75 164.115 cv
219.619 164.115 220.325 163.409 220.325 162.54 cv
@
1 lc
218.75 162.55 mo
218.75 162.55 li
@
0 lc
221.525 162.899 mo
221.525 162.03 220.819 161.325 219.95 161.325 cv
219.081 161.325 218.375 162.03 218.375 162.899 cv
218.375 163.77 219.081 164.475 219.95 164.475 cv
220.819 164.475 221.525 163.77 221.525 162.899 cv
@
1 lc
220.05 162.899 mo
220.05 162.899 li
@
0 lc
222.965 164.58 mo
222.965 163.71 222.26 163.005 221.391 163.005 cv
220.521 163.005 219.815 163.71 219.815 164.58 cv
219.815 165.449 220.521 166.155 221.391 166.155 cv
222.26 166.155 222.965 165.449 222.965 164.58 cv
@
1 lc
221.3 164.5 mo
221.3 164.5 li
@
0 lc
224.165 166.74 mo
224.165 165.87 223.46 165.165 222.59 165.165 cv
221.721 165.165 221.016 165.87 221.016 166.74 cv
221.016 167.609 221.721 168.314 222.59 168.314 cv
223.46 168.314 224.165 167.609 224.165 166.74 cv
@
1 lc
222.601 166.8 mo
222.601 166.8 li
@
0 lc
225.485 165.78 mo
225.485 164.91 224.779 164.205 223.91 164.205 cv
223.041 164.205 222.335 164.91 222.335 165.78 cv
222.335 166.649 223.041 167.354 223.91 167.354 cv
224.779 167.354 225.485 166.649 225.485 165.78 cv
@
1 lc
223.9 165.7 mo
223.9 165.7 li
@
0 lc
226.806 166.14 mo
226.806 165.271 226.1 164.564 225.23 164.564 cv
224.36 164.564 223.655 165.271 223.655 166.14 cv
223.655 167.009 224.36 167.715 225.23 167.715 cv
226.1 167.715 226.806 167.009 226.806 166.14 cv
@
1 lc
225.15 166.149 mo
225.15 166.149 li
@
0 lc
228.005 166.859 mo
228.005 165.99 227.3 165.285 226.431 165.285 cv
225.561 165.285 224.855 165.99 224.855 166.859 cv
224.855 167.729 225.561 168.435 226.431 168.435 cv
227.3 168.435 228.005 167.729 228.005 166.859 cv
@
1 lc
226.45 166.85 mo
226.45 166.85 li
@
0 lc
229.325 168.42 mo
229.325 167.551 228.619 166.845 227.75 166.845 cv
226.881 166.845 226.175 167.551 226.175 168.42 cv
226.175 169.289 226.881 169.995 227.75 169.995 cv
228.619 169.995 229.325 169.289 229.325 168.42 cv
@
1 lc
227.75 168.5 mo
227.75 168.5 li
@
0 lc
230.646 169.14 mo
230.646 168.271 229.939 167.564 229.07 167.564 cv
228.201 167.564 227.495 168.271 227.495 169.14 cv
227.495 170.009 228.201 170.715 229.07 170.715 cv
229.939 170.715 230.646 170.009 230.646 169.14 cv
@
1 lc
229 169.05 mo
229 169.05 li
@
0 lc
231.845 172.5 mo
231.845 171.63 231.14 170.925 230.271 170.925 cv
229.4 170.925 228.695 171.63 228.695 172.5 cv
228.695 173.369 229.4 174.075 230.271 174.075 cv
231.14 174.075 231.845 173.369 231.845 172.5 cv
@
1 lc
230.3 172.45 mo
230.3 172.45 li
@
0 lc
233.165 171.06 mo
233.165 170.19 232.46 169.484 231.59 169.484 cv
230.721 169.484 230.016 170.19 230.016 171.06 cv
230.016 171.929 230.721 172.635 231.59 172.635 cv
232.46 172.635 233.165 171.929 233.165 171.06 cv
@
1 lc
231.601 171 mo
231.601 171 li
@
0 lc
234.485 171.3 mo
234.485 170.431 233.779 169.725 232.91 169.725 cv
232.041 169.725 231.335 170.431 231.335 171.3 cv
231.335 172.169 232.041 172.875 232.91 172.875 cv
233.779 172.875 234.485 172.169 234.485 171.3 cv
@
1 lc
232.851 171.3 mo
232.851 171.3 li
@
0 lc
235.686 170.7 mo
235.686 169.83 234.979 169.125 234.11 169.125 cv
233.241 169.125 232.535 169.83 232.535 170.7 cv
232.535 171.569 233.241 172.274 234.11 172.274 cv
234.979 172.274 235.686 171.569 235.686 170.7 cv
@
1 lc
234.15 170.7 mo
234.15 170.7 li
@
0 lc
237.125 172.26 mo
237.125 171.391 236.42 170.685 235.55 170.685 cv
234.681 170.685 233.976 171.391 233.976 172.26 cv
233.976 173.129 234.681 173.835 235.55 173.835 cv
236.42 173.835 237.125 173.129 237.125 172.26 cv
@
1 lc
235.45 172.25 mo
235.45 172.25 li
@
0 lc
238.325 172.26 mo
238.325 171.391 237.619 170.685 236.75 170.685 cv
235.881 170.685 235.175 171.391 235.175 172.26 cv
235.175 173.129 235.881 173.835 236.75 173.835 cv
237.619 173.835 238.325 173.129 238.325 172.26 cv
@
1 lc
236.7 172.3 mo
236.7 172.3 li
@
0 lc
239.525 172.979 mo
239.525 172.11 238.819 171.405 237.95 171.405 cv
237.081 171.405 236.375 172.11 236.375 172.979 cv
236.375 173.85 237.081 174.555 237.95 174.555 cv
238.819 174.555 239.525 173.85 239.525 172.979 cv
@
1 lc
238 173 mo
238 173 li
@
0 lc
240.965 173.46 mo
240.965 172.591 240.26 171.885 239.391 171.885 cv
238.521 171.885 237.815 172.591 237.815 173.46 cv
237.815 174.329 238.521 175.035 239.391 175.035 cv
240.26 175.035 240.965 174.329 240.965 173.46 cv
@
1 lc
239.3 173.55 mo
239.3 173.55 li
@
0 lc
242.165 173.939 mo
242.165 173.07 241.46 172.365 240.59 172.365 cv
239.721 172.365 239.016 173.07 239.016 173.939 cv
239.016 174.81 239.721 175.515 240.59 175.515 cv
241.46 175.515 242.165 174.81 242.165 173.939 cv
@
1 lc
240.601 173.899 mo
240.601 173.899 li
@
0 lc
243.365 174.899 mo
243.365 174.03 242.659 173.325 241.79 173.325 cv
240.921 173.325 240.215 174.03 240.215 174.899 cv
240.215 175.77 240.921 176.475 241.79 176.475 cv
242.659 176.475 243.365 175.77 243.365 174.899 cv
@
1 lc
241.851 174.85 mo
241.851 174.85 li
@
0 lc
244.806 176.819 mo
244.806 175.95 244.1 175.245 243.23 175.245 cv
242.36 175.245 241.655 175.95 241.655 176.819 cv
241.655 177.689 242.36 178.395 243.23 178.395 cv
244.1 178.395 244.806 177.689 244.806 176.819 cv
@
1 lc
243.15 176.85 mo
243.15 176.85 li
@
0 lc
246.005 177.3 mo
246.005 176.431 245.3 175.725 244.431 175.725 cv
243.561 175.725 242.855 176.431 242.855 177.3 cv
242.855 178.169 243.561 178.875 244.431 178.875 cv
245.3 178.875 246.005 178.169 246.005 177.3 cv
@
1 lc
244.45 177.25 mo
244.45 177.25 li
@
0 lc
247.205 177.06 mo
247.205 176.19 246.5 175.484 245.63 175.484 cv
244.761 175.484 244.056 176.19 244.056 177.06 cv
244.056 177.929 244.761 178.635 245.63 178.635 cv
246.5 178.635 247.205 177.929 247.205 177.06 cv
@
1 lc
245.7 177.149 mo
245.7 177.149 li
@
0 lc
248.646 175.859 mo
248.646 174.99 247.939 174.285 247.07 174.285 cv
246.201 174.285 245.495 174.99 245.495 175.859 cv
245.495 176.729 246.201 177.435 247.07 177.435 cv
247.939 177.435 248.646 176.729 248.646 175.859 cv
@
1 lc
247 175.95 mo
247 175.95 li
@
0 lc
251.045 178.02 mo
251.045 177.15 250.34 176.444 249.47 176.444 cv
248.601 176.444 247.896 177.15 247.896 178.02 cv
247.896 178.89 248.601 179.595 249.47 179.595 cv
250.34 179.595 251.045 178.89 251.045 178.02 cv
@
1 lc
249.55 178.05 mo
249.55 178.05 li
@
0 lc
258.726 178.5 mo
258.726 177.63 258.02 176.925 257.15 176.925 cv
256.281 176.925 255.575 177.63 255.575 178.5 cv
255.575 179.369 256.281 180.075 257.15 180.075 cv
258.02 180.075 258.726 179.369 258.726 178.5 cv
@
1 lc
257.25 178.5 mo
257.25 178.5 li
@
0 lc
152.165 130.74 mo
152.165 129.87 151.46 129.165 150.59 129.165 cv
149.721 129.165 149.016 129.87 149.016 130.74 cv
149.016 131.609 149.721 132.314 150.59 132.314 cv
151.46 132.314 152.165 131.609 152.165 130.74 cv
@
1 lc
150.65 130.7 mo
150.65 130.7 li
@
0 lc
153.605 129.66 mo
153.605 128.79 152.899 128.085 152.03 128.085 cv
151.161 128.085 150.455 128.79 150.455 129.66 cv
150.455 130.529 151.161 131.234 152.03 131.234 cv
152.899 131.234 153.605 130.529 153.605 129.66 cv
@
1 lc
151.95 129.649 mo
151.95 129.649 li
@
0 lc
154.806 129.78 mo
154.806 128.91 154.1 128.205 153.23 128.205 cv
152.36 128.205 151.655 128.91 151.655 129.78 cv
151.655 130.649 152.36 131.354 153.23 131.354 cv
154.1 131.354 154.806 130.649 154.806 129.78 cv
@
1 lc
153.25 129.7 mo
153.25 129.7 li
@
0 lc
156.005 130.979 mo
156.005 130.11 155.3 129.405 154.431 129.405 cv
153.561 129.405 152.855 130.11 152.855 130.979 cv
152.855 131.85 153.561 132.555 154.431 132.555 cv
155.3 132.555 156.005 131.85 156.005 130.979 cv
@
1 lc
154.5 130.899 mo
154.5 130.899 li
@
0 lc
157.445 133.74 mo
157.445 132.87 156.739 132.165 155.87 132.165 cv
155.001 132.165 154.295 132.87 154.295 133.74 cv
154.295 134.609 155.001 135.314 155.87 135.314 cv
156.739 135.314 157.445 134.609 157.445 133.74 cv
@
1 lc
155.8 133.75 mo
155.8 133.75 li
@
0 lc
158.646 133.859 mo
158.646 132.99 157.939 132.285 157.07 132.285 cv
156.201 132.285 155.495 132.99 155.495 133.859 cv
155.495 134.729 156.201 135.435 157.07 135.435 cv
157.939 135.435 158.646 134.729 158.646 133.859 cv
@
1 lc
157.101 133.95 mo
157.101 133.95 li
@
0 lc
159.965 132.899 mo
159.965 132.03 159.26 131.325 158.391 131.325 cv
157.521 131.325 156.815 132.03 156.815 132.899 cv
156.815 133.77 157.521 134.475 158.391 134.475 cv
159.26 134.475 159.965 133.77 159.965 132.899 cv
@
1 lc
158.4 132.95 mo
158.4 132.95 li
@
0 lc
161.285 133.859 mo
161.285 132.99 160.579 132.285 159.71 132.285 cv
158.841 132.285 158.135 132.99 158.135 133.859 cv
158.135 134.729 158.841 135.435 159.71 135.435 cv
160.579 135.435 161.285 134.729 161.285 133.859 cv
@
1 lc
159.65 133.8 mo
159.65 133.8 li
@
0 lc
162.485 132.18 mo
162.485 131.311 161.779 130.604 160.91 130.604 cv
160.041 130.604 159.335 131.311 159.335 132.18 cv
159.335 133.049 160.041 133.755 160.91 133.755 cv
161.779 133.755 162.485 133.049 162.485 132.18 cv
@
1 lc
160.95 132.25 mo
160.95 132.25 li
@
0 lc
163.925 132.66 mo
163.925 131.79 163.22 131.085 162.351 131.085 cv
161.48 131.085 160.775 131.79 160.775 132.66 cv
160.775 133.529 161.48 134.234 162.351 134.234 cv
163.22 134.234 163.925 133.529 163.925 132.66 cv
@
1 lc
162.25 132.7 mo
162.25 132.7 li
@
0 lc
165.125 131.46 mo
165.125 130.591 164.42 129.885 163.55 129.885 cv
162.681 129.885 161.976 130.591 161.976 131.46 cv
161.976 132.329 162.681 133.035 163.55 133.035 cv
164.42 133.035 165.125 132.329 165.125 131.46 cv
@
1 lc
163.5 131.399 mo
163.5 131.399 li
@
0 lc
166.325 131.34 mo
166.325 130.471 165.619 129.765 164.75 129.765 cv
163.881 129.765 163.175 130.471 163.175 131.34 cv
163.175 132.209 163.881 132.915 164.75 132.915 cv
165.619 132.915 166.325 132.209 166.325 131.34 cv
@
1 lc
164.8 131.35 mo
164.8 131.35 li
@
0 lc
167.766 135.54 mo
167.766 134.67 167.06 133.965 166.19 133.965 cv
165.321 133.965 164.615 134.67 164.615 135.54 cv
164.615 136.409 165.321 137.115 166.19 137.115 cv
167.06 137.115 167.766 136.409 167.766 135.54 cv
@
1 lc
166.101 135.55 mo
166.101 135.55 li
@
0 lc
168.965 135.06 mo
168.965 134.19 168.26 133.484 167.391 133.484 cv
166.521 133.484 165.815 134.19 165.815 135.06 cv
165.815 135.929 166.521 136.635 167.391 136.635 cv
168.26 136.635 168.965 135.929 168.965 135.06 cv
@
1 lc
167.351 135.149 mo
167.351 135.149 li
@
0 lc
170.165 135.54 mo
170.165 134.67 169.46 133.965 168.59 133.965 cv
167.721 133.965 167.016 134.67 167.016 135.54 cv
167.016 136.409 167.721 137.115 168.59 137.115 cv
169.46 137.115 170.165 136.409 170.165 135.54 cv
@
1 lc
168.65 135.55 mo
168.65 135.55 li
@
0 lc
171.605 135.3 mo
171.605 134.431 170.899 133.725 170.03 133.725 cv
169.161 133.725 168.455 134.431 168.455 135.3 cv
168.455 136.169 169.161 136.875 170.03 136.875 cv
170.899 136.875 171.605 136.169 171.605 135.3 cv
@
1 lc
169.95 135.399 mo
169.95 135.399 li
@
0 lc
172.806 134.58 mo
172.806 133.71 172.1 133.005 171.23 133.005 cv
170.36 133.005 169.655 133.71 169.655 134.58 cv
169.655 135.449 170.36 136.155 171.23 136.155 cv
172.1 136.155 172.806 135.449 172.806 134.58 cv
@
1 lc
171.2 134.55 mo
171.2 134.55 li
@
0 lc
174.005 134.939 mo
174.005 134.07 173.3 133.365 172.431 133.365 cv
171.561 133.365 170.855 134.07 170.855 134.939 cv
170.855 135.81 171.561 136.515 172.431 136.515 cv
173.3 136.515 174.005 135.81 174.005 134.939 cv
@
1 lc
172.5 134.95 mo
172.5 134.95 li
@
0 lc
175.445 134.58 mo
175.445 133.71 174.739 133.005 173.87 133.005 cv
173.001 133.005 172.295 133.71 172.295 134.58 cv
172.295 135.449 173.001 136.155 173.87 136.155 cv
174.739 136.155 175.445 135.449 175.445 134.58 cv
@
1 lc
173.8 134.55 mo
173.8 134.55 li
@
0 lc
176.646 138.18 mo
176.646 137.311 175.939 136.604 175.07 136.604 cv
174.201 136.604 173.495 137.311 173.495 138.18 cv
173.495 139.049 174.201 139.755 175.07 139.755 cv
175.939 139.755 176.646 139.049 176.646 138.18 cv
@
1 lc
175.05 138.1 mo
175.05 138.1 li
@
0 lc
177.845 137.7 mo
177.845 136.83 177.14 136.125 176.271 136.125 cv
175.4 136.125 174.695 136.83 174.695 137.7 cv
174.695 138.569 175.4 139.274 176.271 139.274 cv
177.14 139.274 177.845 138.569 177.845 137.7 cv
@
1 lc
176.351 137.6 mo
176.351 137.6 li
@
0 lc
179.285 138.3 mo
179.285 137.431 178.579 136.725 177.71 136.725 cv
176.841 136.725 176.135 137.431 176.135 138.3 cv
176.135 139.169 176.841 139.875 177.71 139.875 cv
178.579 139.875 179.285 139.169 179.285 138.3 cv
@
1 lc
177.65 138.3 mo
177.65 138.3 li
@
0 lc
180.485 138.899 mo
180.485 138.03 179.779 137.325 178.91 137.325 cv
178.041 137.325 177.335 138.03 177.335 138.899 cv
177.335 139.77 178.041 140.475 178.91 140.475 cv
179.779 140.475 180.485 139.77 180.485 138.899 cv
@
1 lc
178.95 138.8 mo
178.95 138.8 li
@
0 lc
181.686 139.14 mo
181.686 138.271 180.979 137.564 180.11 137.564 cv
179.241 137.564 178.535 138.271 178.535 139.14 cv
178.535 140.009 179.241 140.715 180.11 140.715 cv
180.979 140.715 181.686 140.009 181.686 139.14 cv
@
1 lc
180.2 139.05 mo
180.2 139.05 li
@
0 lc
183.125 139.14 mo
183.125 138.271 182.42 137.564 181.55 137.564 cv
180.681 137.564 179.976 138.271 179.976 139.14 cv
179.976 140.009 180.681 140.715 181.55 140.715 cv
182.42 140.715 183.125 140.009 183.125 139.14 cv
@
1 lc
181.5 139.2 mo
181.5 139.2 li
@
0 lc
184.325 139.62 mo
184.325 138.75 183.619 138.045 182.75 138.045 cv
181.881 138.045 181.175 138.75 181.175 139.62 cv
181.175 140.489 181.881 141.194 182.75 141.194 cv
183.619 141.194 184.325 140.489 184.325 139.62 cv
@
1 lc
182.8 139.649 mo
182.8 139.649 li
@
0 lc
185.525 138.899 mo
185.525 138.03 184.819 137.325 183.95 137.325 cv
183.081 137.325 182.375 138.03 182.375 138.899 cv
182.375 139.77 183.081 140.475 183.95 140.475 cv
184.819 140.475 185.525 139.77 185.525 138.899 cv
@
1 lc
184.05 139 mo
184.05 139 li
@
0 lc
186.965 137.46 mo
186.965 136.591 186.26 135.885 185.391 135.885 cv
184.521 135.885 183.815 136.591 183.815 137.46 cv
183.815 138.329 184.521 139.035 185.391 139.035 cv
186.26 139.035 186.965 138.329 186.965 137.46 cv
@
1 lc
185.351 137.55 mo
185.351 137.55 li
@
0 lc
188.165 139.62 mo
188.165 138.75 187.46 138.045 186.59 138.045 cv
185.721 138.045 185.016 138.75 185.016 139.62 cv
185.016 140.489 185.721 141.194 186.59 141.194 cv
187.46 141.194 188.165 140.489 188.165 139.62 cv
@
1 lc
186.65 139.649 mo
186.65 139.649 li
@
0 lc
189.485 142.02 mo
189.485 141.15 188.779 140.444 187.91 140.444 cv
187.041 140.444 186.335 141.15 186.335 142.02 cv
186.335 142.89 187.041 143.595 187.91 143.595 cv
188.779 143.595 189.485 142.89 189.485 142.02 cv
@
1 lc
187.9 142.05 mo
187.9 142.05 li
@
0 lc
190.806 139.38 mo
190.806 138.511 190.1 137.805 189.23 137.805 cv
188.36 137.805 187.655 138.511 187.655 139.38 cv
187.655 140.249 188.36 140.955 189.23 140.955 cv
190.1 140.955 190.806 140.249 190.806 139.38 cv
@
1 lc
189.2 139.45 mo
189.2 139.45 li
@
0 lc
192.005 144.18 mo
192.005 143.311 191.3 142.604 190.431 142.604 cv
189.561 142.604 188.855 143.311 188.855 144.18 cv
188.855 145.049 189.561 145.755 190.431 145.755 cv
191.3 145.755 192.005 145.049 192.005 144.18 cv
@
1 lc
190.5 144.1 mo
190.5 144.1 li
@
0 lc
193.325 141.899 mo
193.325 141.03 192.619 140.325 191.75 140.325 cv
190.881 140.325 190.175 141.03 190.175 141.899 cv
190.175 142.77 190.881 143.475 191.75 143.475 cv
192.619 143.475 193.325 142.77 193.325 141.899 cv
@
1 lc
191.75 141.899 mo
191.75 141.899 li
@
0 lc
194.646 142.26 mo
194.646 141.391 193.939 140.685 193.07 140.685 cv
192.201 140.685 191.495 141.391 191.495 142.26 cv
191.495 143.129 192.201 143.835 193.07 143.835 cv
193.939 143.835 194.646 143.129 194.646 142.26 cv
@
1 lc
193.05 142.3 mo
193.05 142.3 li
@
0 lc
195.845 145.62 mo
195.845 144.75 195.14 144.045 194.271 144.045 cv
193.4 144.045 192.695 144.75 192.695 145.62 cv
192.695 146.489 193.4 147.194 194.271 147.194 cv
195.14 147.194 195.845 146.489 195.845 145.62 cv
@
1 lc
194.351 145.55 mo
194.351 145.55 li
@
0 lc
197.165 142.02 mo
197.165 141.15 196.46 140.444 195.59 140.444 cv
194.721 140.444 194.016 141.15 194.016 142.02 cv
194.016 142.89 194.721 143.595 195.59 143.595 cv
196.46 143.595 197.165 142.89 197.165 142.02 cv
@
1 lc
195.601 142.1 mo
195.601 142.1 li
@
0 lc
198.485 143.46 mo
198.485 142.591 197.779 141.885 196.91 141.885 cv
196.041 141.885 195.335 142.591 195.335 143.46 cv
195.335 144.329 196.041 145.035 196.91 145.035 cv
197.779 145.035 198.485 144.329 198.485 143.46 cv
@
1 lc
196.9 143.399 mo
196.9 143.399 li
@
0 lc
199.686 146.819 mo
199.686 145.95 198.979 145.245 198.11 145.245 cv
197.241 145.245 196.535 145.95 196.535 146.819 cv
196.535 147.689 197.241 148.395 198.11 148.395 cv
198.979 148.395 199.686 147.689 199.686 146.819 cv
@
1 lc
198.2 146.75 mo
198.2 146.75 li
@
0 lc
201.125 143.46 mo
201.125 142.591 200.42 141.885 199.55 141.885 cv
198.681 141.885 197.976 142.591 197.976 143.46 cv
197.976 144.329 198.681 145.035 199.55 145.035 cv
200.42 145.035 201.125 144.329 201.125 143.46 cv
@
1 lc
199.5 143.55 mo
199.5 143.55 li
@
0 lc
202.325 143.22 mo
202.325 142.351 201.619 141.645 200.75 141.645 cv
199.881 141.645 199.175 142.351 199.175 143.22 cv
199.175 144.089 199.881 144.795 200.75 144.795 cv
201.619 144.795 202.325 144.089 202.325 143.22 cv
@
1 lc
200.75 143.149 mo
200.75 143.149 li
@
0 lc
203.525 143.7 mo
203.525 142.83 202.819 142.125 201.95 142.125 cv
201.081 142.125 200.375 142.83 200.375 143.7 cv
200.375 144.569 201.081 145.274 201.95 145.274 cv
202.819 145.274 203.525 144.569 203.525 143.7 cv
@
1 lc
202.05 143.7 mo
202.05 143.7 li
@
0 lc
204.965 144.18 mo
204.965 143.311 204.26 142.604 203.391 142.604 cv
202.521 142.604 201.815 143.311 201.815 144.18 cv
201.815 145.049 202.521 145.755 203.391 145.755 cv
204.26 145.755 204.965 145.049 204.965 144.18 cv
@
1 lc
203.351 144.149 mo
203.351 144.149 li
@
0 lc
206.165 141.3 mo
206.165 140.431 205.46 139.725 204.59 139.725 cv
203.721 139.725 203.016 140.431 203.016 141.3 cv
203.016 142.169 203.721 142.875 204.59 142.875 cv
205.46 142.875 206.165 142.169 206.165 141.3 cv
@
1 lc
204.601 141.35 mo
204.601 141.35 li
@
0 lc
207.485 143.7 mo
207.485 142.83 206.779 142.125 205.91 142.125 cv
205.041 142.125 204.335 142.83 204.335 143.7 cv
204.335 144.569 205.041 145.274 205.91 145.274 cv
206.779 145.274 207.485 144.569 207.485 143.7 cv
@
1 lc
205.9 143.649 mo
205.9 143.649 li
@
0 lc
208.806 142.26 mo
208.806 141.391 208.1 140.685 207.23 140.685 cv
206.36 140.685 205.655 141.391 205.655 142.26 cv
205.655 143.129 206.36 143.835 207.23 143.835 cv
208.1 143.835 208.806 143.129 208.806 142.26 cv
@
1 lc
207.2 142.25 mo
207.2 142.25 li
@
0 lc
210.005 142.979 mo
210.005 142.11 209.3 141.405 208.431 141.405 cv
207.561 141.405 206.855 142.11 206.855 142.979 cv
206.855 143.85 207.561 144.555 208.431 144.555 cv
209.3 144.555 210.005 143.85 210.005 142.979 cv
@
1 lc
208.45 142.95 mo
208.45 142.95 li
@
0 lc
211.325 141.3 mo
211.325 140.431 210.619 139.725 209.75 139.725 cv
208.881 139.725 208.175 140.431 208.175 141.3 cv
208.175 142.169 208.881 142.875 209.75 142.875 cv
210.619 142.875 211.325 142.169 211.325 141.3 cv
@
1 lc
209.75 141.2 mo
209.75 141.2 li
@
0 lc
212.646 142.74 mo
212.646 141.87 211.939 141.165 211.07 141.165 cv
210.201 141.165 209.495 141.87 209.495 142.74 cv
209.495 143.609 210.201 144.314 211.07 144.314 cv
211.939 144.314 212.646 143.609 212.646 142.74 cv
@
1 lc
211.05 142.649 mo
211.05 142.649 li
@
0 lc
213.845 140.58 mo
213.845 139.71 213.14 139.005 212.271 139.005 cv
211.4 139.005 210.695 139.71 210.695 140.58 cv
210.695 141.449 211.4 142.155 212.271 142.155 cv
213.14 142.155 213.845 141.449 213.845 140.58 cv
@
1 lc
212.3 140.5 mo
212.3 140.5 li
@
0 lc
215.165 139.62 mo
215.165 138.75 214.46 138.045 213.59 138.045 cv
212.721 138.045 212.016 138.75 212.016 139.62 cv
212.016 140.489 212.721 141.194 213.59 141.194 cv
214.46 141.194 215.165 140.489 215.165 139.62 cv
@
1 lc
213.601 139.7 mo
213.601 139.7 li
@
0 lc
216.485 138.42 mo
216.485 137.551 215.779 136.845 214.91 136.845 cv
214.041 136.845 213.335 137.551 213.335 138.42 cv
213.335 139.289 214.041 139.995 214.91 139.995 cv
215.779 139.995 216.485 139.289 216.485 138.42 cv
@
1 lc
214.9 138.5 mo
214.9 138.5 li
@
0 lc
217.686 136.979 mo
217.686 136.11 216.979 135.405 216.11 135.405 cv
215.241 135.405 214.535 136.11 214.535 136.979 cv
214.535 137.85 215.241 138.555 216.11 138.555 cv
216.979 138.555 217.686 137.85 217.686 136.979 cv
@
1 lc
216.15 137 mo
216.15 137 li
@
0 lc
219.125 138.18 mo
219.125 137.311 218.42 136.604 217.55 136.604 cv
216.681 136.604 215.976 137.311 215.976 138.18 cv
215.976 139.049 216.681 139.755 217.55 139.755 cv
218.42 139.755 219.125 139.049 219.125 138.18 cv
@
1 lc
217.45 138.25 mo
217.45 138.25 li
@
0 lc
220.325 138.54 mo
220.325 137.67 219.619 136.965 218.75 136.965 cv
217.881 136.965 217.175 137.67 217.175 138.54 cv
217.175 139.409 217.881 140.115 218.75 140.115 cv
219.619 140.115 220.325 139.409 220.325 138.54 cv
@
1 lc
218.75 138.55 mo
218.75 138.55 li
@
0 lc
221.525 133.38 mo
221.525 132.511 220.819 131.805 219.95 131.805 cv
219.081 131.805 218.375 132.511 218.375 133.38 cv
218.375 134.249 219.081 134.955 219.95 134.955 cv
220.819 134.955 221.525 134.249 221.525 133.38 cv
@
1 lc
220.05 133.45 mo
220.05 133.45 li
@
0 lc
222.965 134.34 mo
222.965 133.471 222.26 132.765 221.391 132.765 cv
220.521 132.765 219.815 133.471 219.815 134.34 cv
219.815 135.209 220.521 135.915 221.391 135.915 cv
222.26 135.915 222.965 135.209 222.965 134.34 cv
@
1 lc
221.3 134.25 mo
221.3 134.25 li
@
0 lc
224.165 132.899 mo
224.165 132.03 223.46 131.325 222.59 131.325 cv
221.721 131.325 221.016 132.03 221.016 132.899 cv
221.016 133.77 221.721 134.475 222.59 134.475 cv
223.46 134.475 224.165 133.77 224.165 132.899 cv
@
1 lc
222.601 132.8 mo
222.601 132.8 li
@
0 lc
225.485 131.46 mo
225.485 130.591 224.779 129.885 223.91 129.885 cv
223.041 129.885 222.335 130.591 222.335 131.46 cv
222.335 132.329 223.041 133.035 223.91 133.035 cv
224.779 133.035 225.485 132.329 225.485 131.46 cv
@
1 lc
223.9 131.5 mo
223.9 131.5 li
@
0 lc
226.806 128.58 mo
226.806 127.71 226.1 127.005 225.23 127.005 cv
224.36 127.005 223.655 127.71 223.655 128.58 cv
223.655 129.449 224.36 130.155 225.23 130.155 cv
226.1 130.155 226.806 129.449 226.806 128.58 cv
@
1 lc
225.15 128.6 mo
225.15 128.6 li
@
0 lc
228.005 126.3 mo
228.005 125.431 227.3 124.725 226.431 124.725 cv
225.561 124.725 224.855 125.431 224.855 126.3 cv
224.855 127.169 225.561 127.875 226.431 127.875 cv
227.3 127.875 228.005 127.169 228.005 126.3 cv
@
1 lc
226.45 126.3 mo
226.45 126.3 li
@
0 lc
229.325 124.74 mo
229.325 123.87 228.619 123.165 227.75 123.165 cv
226.881 123.165 226.175 123.87 226.175 124.74 cv
226.175 125.609 226.881 126.314 227.75 126.314 cv
228.619 126.314 229.325 125.609 229.325 124.74 cv
@
1 lc
227.75 124.75 mo
227.75 124.75 li
@
0 lc
230.646 124.26 mo
230.646 123.391 229.939 122.685 229.07 122.685 cv
228.201 122.685 227.495 123.391 227.495 124.26 cv
227.495 125.129 228.201 125.835 229.07 125.835 cv
229.939 125.835 230.646 125.129 230.646 124.26 cv
@
1 lc
229 124.25 mo
229 124.25 li
@
0 lc
231.845 120.66 mo
231.845 119.79 231.14 119.085 230.271 119.085 cv
229.4 119.085 228.695 119.79 228.695 120.66 cv
228.695 121.529 229.4 122.234 230.271 122.234 cv
231.14 122.234 231.845 121.529 231.845 120.66 cv
@
1 lc
230.3 120.75 mo
230.3 120.75 li
@
0 lc
233.165 121.14 mo
233.165 120.271 232.46 119.564 231.59 119.564 cv
230.721 119.564 230.016 120.271 230.016 121.14 cv
230.016 122.009 230.721 122.715 231.59 122.715 cv
232.46 122.715 233.165 122.009 233.165 121.14 cv
@
1 lc
231.601 121.05 mo
231.601 121.05 li
@
0 lc
234.485 115.26 mo
234.485 114.391 233.779 113.685 232.91 113.685 cv
232.041 113.685 231.335 114.391 231.335 115.26 cv
231.335 116.129 232.041 116.835 232.91 116.835 cv
233.779 116.835 234.485 116.129 234.485 115.26 cv
@
1 lc
232.851 115.25 mo
232.851 115.25 li
@
0 lc
235.686 113.22 mo
235.686 112.351 234.979 111.645 234.11 111.645 cv
233.241 111.645 232.535 112.351 232.535 113.22 cv
232.535 114.089 233.241 114.795 234.11 114.795 cv
234.979 114.795 235.686 114.089 235.686 113.22 cv
@
1 lc
234.15 113.3 mo
234.15 113.3 li
@
0 lc
237.125 110.1 mo
237.125 109.23 236.42 108.524 235.55 108.524 cv
234.681 108.524 233.976 109.23 233.976 110.1 cv
233.976 110.969 234.681 111.675 235.55 111.675 cv
236.42 111.675 237.125 110.969 237.125 110.1 cv
@
1 lc
235.45 110 mo
235.45 110 li
@
0 lc
238.325 108.18 mo
238.325 107.311 237.619 106.604 236.75 106.604 cv
235.881 106.604 235.175 107.311 235.175 108.18 cv
235.175 109.049 235.881 109.755 236.75 109.755 cv
237.619 109.755 238.325 109.049 238.325 108.18 cv
@
1 lc
236.7 108.2 mo
236.7 108.2 li
@
0.5 lw
0 lc
144.25 100.95 mo
144.25 184.899 li
271.4 184.899 li
271.4 100.95 li
144.25 100.95 li
144.25 100.95 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (bivariate3.eps)%%CreationDate: 10/4/10 2:20 PM%AI9_DataStream%Gb"-6q-G#`c7"!G_!bY81Lp17DA"'cAf_!sJWPO%E.@pHZ-D!LI=Ic"5;fC8lI#!-S\<@_2s[r3X]DK%P=e_E<Me,il`GI,fXtR0%rHkMWqF8jjXJ4aZs/X[:WO28Ag?9g@PcLtG0grA7\V:4=S#tGSQU\<.dVdl!3h;8]F0",".]u"fDk@B5[9`O<pA!FA[G!;,DD<OY%*+iC+lYhj1G=QR)2i[N/d4m`n[]d[)kFMHtA#Ulj9CQijpA+*YEPcBImWMsiispRs?]4AcNGb)&apL!D59#BEq`6B'7AK32!NVnk%pACq#S)T@b<ibR[@$lLX(2'dF)u#DaDS+bRCc/uRb$mRm?='8ih1fSFg[N@'d10F\8`'Q4<Dg2(PuX^F##<S?*VkX4W:AJLj'PHu%_trb1ZeOb-aQf?ZhTC"FCNn)Gs+f.[1TdAn=;#rVp=s>R2]oZ5IKC5)f+)#/NFr6JGAGNIh?J`0cbrUX,(-E"mi,Q`Z*!1J?H8mO%eM-&/edD`U^Dh%CJ@pEmf1,@1la,Mmd:2M'q`Z6:RWasE[>U=uaLaphGG--X09!Zlhc=99eh8DPViKMmpQ*QFp4hqJmIoQ\oq$(:%X7AVs?`n/D#O6f\+KK:egLpZ+CcH8O&fnk<+.gRU5!?+^euV*AL,,lGO``Z+ZKnTqS"'(gSMu/\'R(Jq0!>61jb(]`s(n0SH63(p%!rfa8TqJj=s4TA\C>8ZcD9Jib)Lku*j`qihoCsubj&hnnYro3j;`',WirfD'$.qKAFqAVo+Q-B")unu$)]Kc4@tVP,Z,*&KCiGnJ%NBaPq4HI6_X7>A\RX@VG/GYS/a:dT5rhb!ZgP$:?jB0&ir0(X\3iSRjB=p_3PN2-NnP<J0eIqFY?75`oJ+4HI:JOKiPGHE<`'8O\%q-OWnFlHuTes,9;/7("/a`2&Q%TE>D3L=S6>>_gAs-.HERS3&pmufV43p0c@Oi!4[3#8\>s5]DT&'A)!B<oSQ?]N+kVg;IRML:cB%O+6_-]QUU\q5<;D6hi%Liq;?(Z5;UNOmOXAk9[,_^c>KV8+i;2:UW=)P3o.#7Fk^acT.>>a`8\=eR&qVrSolMG%tRYg@;X`XlWJf%5Q8d0jS7m1PAMN$je!NJf<.qJ,?rD5flFA$3P*`X<b"RX2U8iQ.<6u<H(k(6[_(Tq[^n"k[N"C7on]W;jIKe[dNs&3^3hR58^?GA%PbVCT\SN3VTdKc\nOp2o^/HGZfh+%n[1eOJ3P*bNVt%gbVD4lY3q]dnAa0NGO_RJe2RS;!<Um-4Q#u,WVJ1j9r3)?B-N(2$q1Sai%IuYb'dpMpS:i]hJTtg/jn&sV\=8o7$jmQqaQ!K)nCMWJIrK[E6fB$rI/,p>VS!t$WJ*"GI/btn8b'sWpPOb7<*WMB&.Y"L+nh7&9%j_QnoD:<J%c*aRdaoBQ]QRu-a^7kQYPcBaZX]8NWXS;Xprcf9gD"VYIl<=1!D:;glebF()%K!R[@2r'lX#c,>c8knGINEf^1]EWq%QJZP;6Q+*LGc"7JNl/W$eM(R[3IB?^9M`=EGVqW8_\(555=$IN3"h_,-2B]tF;IRbDcVE!EPgUnf$[_L/B.p(9?tJ&C[rEo)p/S>%1QsdshlJ]p!bhhNeUU:+BL'0XDY;`T:[u,q\7Doh`3H7n`5,b8f<c09h.s#)`jqa2,=$^aTV#b1ahR3<HFQ1N]jnIErc&QSeWk9?%iuBLd+_B2N%WNUq6]Q.TSTCt1<RDVQ>G@Bf79T<e[BHCJbEi+Ds6'FPq20$UcFkOI(2n,jG8[Q7UXb&VKMjfX*0]Ed"WY!Ji]+3j%@7A23*?MmOd7\AM9*[D;UBKIGin.)&8P'/D#N]mO\5dReg>[-?c4]J8=7o[OB1%[ieW,Nmi*[5q#'u+ckL.bc/74^AqDYM\juSM[%2Q$_s_mY^&>;SN'>u"[k_qH)B$2098b2p9tjbPjg2,'/Q[OPM@8a;Vfk!t\do(UY$_6u+^jI-sbOY"["q*F,@))#2aQ;K(#&lk!n%Eo;?j55lj&rk9B8\tl-bC,IjuGZh=/fkO]/e5.W(h2I>Hrpa"5gq\M!a4p[*#4e8DX0U7PHCGe[k_p)E)p3]fh%Gr2EJ1<8ebkMM%9sh',"XWomZHucZ$+7!Orc-a[S(h/PfcnEFT7+"XP^JXjaB9_MDe-PcPQY(Jh24cOp3$Fa$o1\>D)G7&J#q07`ItL.L8Cc10:IQr%.1+11#g$&JPV"c]UU.tUYsVbNqR0X[[1O#/B\ak(mb3P9\-LMUKWPPtD4sAV@g_:&TZ4>WrGn^^#_dJ:]is#h.5g]sq,/ssRAJIr%hF<flEd]O@HPl'`jHAXk4Y8,1RN,MgIA!ao0h#$Dh+CU<(o,(t9&=]-Q:.MKBj"?SMXcF!O2#OK-M'`WUO&C((6Gt;easmqDf!E`%%I&i6->FS3p8&QY,>H@GZQu0'W_+UU<3+[p-RFN6A,/$Pdp,9&ZTGt-V#=)i_'&dPn[?jmrtAt%nn["n`D9Tefe4]J[UcH'UWuo'%BbY.Qq6iK,V;@q2Q294-s6"md[H"#Zad+cA$hWgDk]*+cZL???D'_^T$fp2K8:Qro8\(qbG>(Nh3'j@QWd53JCaP:HK[npGBg=__%Tm?^i=Eo0U6-D^=$?'kJdRrd%E]('6B!nIGOqh;eV,_:71r$FR8K-T'95S+1p7cMG2$fHS.sQ`!C2^sf(:;Z%I'(jS!+cs[]baMY%nVm[`$+4:o`l3ZP/S&:DHG"tqO)'HHWD!2H>EUt'XLK<X6X>:EFBjH,-$!rm&.^a@XggiRlQ5)6MpL09D2$NAG-F2QDNtt]qjZjd%k*\]7Ckn,G%<YX=-Lg0I[*bUN-8>reZjNffJ=;m0X4K]3K]8S=LYOpf)OFVh'A!%4V.E7\$i@S;X!s#9l9eUq>,^"=qh`ui#3\_]%T*&2J/[XS8?:g3oR^PhhOW*Me,g/oji"g%39K'48^pg)8i.r$7E2tUa0o+P%C"aW]4eN,)eQ]B[;89A4_cBedNefsnTk[4f=idj/%0h]qlQln1Y2<lcS>#DC.b$*hJOZg_-NNQF6\tG1DdB*4,j9uc,r"c^H>+QlJ<@smlHo4fA[%LE/.;ct"]aJBUWZH2^`V9TGMta4%%b*tF6\o]W(D0rX,[IIYBGi1A)/lUkJTsY6p>9&^4emhm/>G4&_:"M(a4Ai-[c)r=/;iH:0YTJLY$1\MYI_<]Q>9@qMn^73&C8$mr%QDti.E]37;Y5BX4%4-;L?D2K`9!\D/3FW0ckq0%eX-JFLP]+QB]QMJkl6o5ld<_9-a4@8*Us_A!m3-0gi]NFbL$[/[hfXgRqG6F7%=dnXU3UP\2=\EQ200Y^JCojc9@eZS'e\'qSnFG='l\.i#FO^<f8\=ZN\sLb4]6JAIke=aQ5QgQRqP_B;+.IZT^MkHi<3K)hhq4^k%G3eO<\,!()Qs%%:h)(!:p$P1erOL=glc^+F-@Zfm)[q&^pfBi"b4Wg,fh?^ag,tb_^3G%s]5cS:0*?a=S\710)ncQKh=?AVG&b4o%ep/ZmC:0Xq^[NIY'>O[lnc(\n3"[f#O.3GOj!=^m[%t*QpV3jFL7MWPHhcJlIA?f>r-7,%^HOd:-5DX3*(uI@qC&H=>]2RbIIU87%bqUdLI^s/U5B^@H1hr,9HFs'!qqO1.]@1W0oVT(Mpsj,oB[%ls>Kso$c`L9.8VGT_GJu6.p1kFXhG(a+Rs/\'M"s`hfQqi)O`JFI%L\bdRYhOT)$-]^q_t^e!XLF)hN[211@H3]rZ`lu`0I5pi1Vp#J^;\'-RFq6AJUG>Pd^jom2`cZ8I^A^NVYF"n.a2/&VQRZsGJDH>%.nB9!7WG+u3I?.!AUO_17e*ur5Xa<>qfZ/a&W=,*:uQ1Zn`"K\@ul'6bs;:Y3lT"reT[d5a.O6H"Wh`.EEB*[`d1]7<Z"?nYMbsO%Q8n>9rKI)!K1QKfmE&'D2PVFJSD-d^(.`[j><#d+nl7FC[/0kKV`/e#H3.N:%Q4dl85;*=k5PH9,8:0U&-lNAN2'Y'Y:Jls)[$#i%j"52/HM_XVqr7,'W--]_I/'j(oC&%/-@<DH7!SV!k,mBG9D&?V?#-q8s(=l]JA-b\qsaB.f5<DkN`E1IZBi>)r1j-J(EWM=bZ(oi%rE$\gH,jOI)5GKAM\,/\p#e8fbMf!+]I',1&e-hbKRWl,g,dJZZ]V"kSm/["NOq;)UG*M`Zh:nT'[bKDNk2L3_)1'p;2O0&e$2Em%rBn#HRFr4`lMju$H#D[\pcWuss/(XeoN1I[c;FVZ,FV^&p8ue\^&2LhffqD*QTB8lm-lln9sM@KnK4A>N0jPg<rUu1909ofoj>?M%s+dL<kP=ZAs)qO]q2j$(3Gm9<e*Hk6a1Lb,SfS*Ss/ZJaX)?U4JtBArBKY-9jH1=9q&cc+DtL'X^N3,es)^[`V63=*rm"H3^]2cj%@=i%'e]Oi19rlIEJV1tGY07!k;lf[Trrjpf&:%oj\+XZ+Ue1R+Q[ZA.rMNeCBlrZb9G8>1O'kLB-LS\BOCrZLaPu<^_oCNmgIm[W%,e7jZ]_QfqhGi"UG"o<!%M#`];1s>87_<onDKHfQ+rOX?RMOmG<FG?ZPu-p-MDopX6#7Bo?>rcKXmH>3_a`g_GZsQX)st]G&KW6X%[7p-e9kN"chR^[Ql!'D3-:Ie,Xo$6PZH7HrCV.q>r2"_OHdf"(mu"S:#IS5#r`.EO)HsUUDg#IQXB0??Ah6($'g%KVe&Y,O^>2V\%_6k8`RZ;/t`V2dfLMU2*"F;h]QtE9A`%Ym)eL5l]r4?1g\pNepD]YMm]74=o!Qk+=3iG"+hs0rqi^rH9F^7t.gULk.f'i#N,N5KU%H&D+@H#7[K=S:iI&=L8t\\$J61,KP-==r8e>LmtUCN&#ENgTSA%uRR`=#L@GO"YFtFW*\\C(%n"6Yd7.p^:_5>84L?=6$a4>5P2r%>]8IGbU`W,2X$bTRuLmD21.U3::K&*;X9++JpdInprZ_$#2d0uVr+hlom#Ls%>!);NV4msR\J*RqX1fB^2)NC41A<PC3;n)9tbtE%/L"8DC^Q2+*O-iO+i-"_AJJ?,Ar%tN2?J)T=*t*"I]?K)VhlQojhRgBQG']/pJshh8aPhfrU,dYHbKM*-!`q6oWF0Vgc@I=W_Q+I%a`7o:TC`"=?ETZed;m-'R?s#l#]\X0(fk;GYgV8uU?-8DM;GkP_Guk>or`(k_&(hdM(F;pd_.,H1-[]#U!QUK<S$\$h<4@"UaX6%%"!kZU2L59?i6qb!kFL5:(\[X7R@C2-]A1?$G73:^X/bu<`7NUaq2q:I;1<+LCd-'\$cKbP``k31S*Vle[BaeK.ZGW,NdAlgs4-u=%X4-;+6@4N]`S0s.l\;f]kOH8h%k0#cLn\['5aCbof_Y:9grP%Jn(^$K?g=iJW"Q!K=0#f_\'OI4D6(dsDjRZ*)6@jP'[o#=,a8_m%p0G5Zk#8l^6ZL%O9Fa4mgA_gmV5%.%7F5`pF<WB'EVNdg/O/=7q^\5HfDCo41=N@n2OeXaL_o+TU>F,c%dUFg@i,$WCq5CtStiS?%bltB7Mb.LYPtd@\k-%er['mEPgB1Gh2`LDQ-_kYb,&=L(*LfclI)pkt+sI8p-7!V>lXI_(7=V;GT/pD`F!)^Z3H-jYF'qLk>HCVL%27qt^kL]F2<\nON^37Y(ULMZEPMO3K16[/lf5!-@D>fH&rqj+YNX?T-^*d@Gk7L&i&#9c9\4N_>iCO23SRVK!h$MD61TA=sRaQ+9%Sb/(`?cl":]m]]<9D/s,X8AQ3JJ=8p+U:#I?9TkU^GKhq9#b]2]Ag;fZS0?Hhe%dr=Zt7K?D+`U=NO!O7H:Y@Z+BHO:eIp5Q8oFg%'ekTke.l/N;1=UaV7U)IQsRdcgKj@3n)@sVnLraDRDP0$hpe20C$U7>>,JG$NK?\f2^([(5(HmiSM.l(h@^W(lMpLAWdWcO2.JUq%BkD!5<p-pjgebA(iao3M''])bp@!sV/T>TsSZF/L38MVfoG",S4<5IUe,r2Hqd'Y4>7'U@QDH\QF\*cPkNtahb"e7tc],[Xc^Bsi%k)ijqR4->"4^40Nb,RCelqDV>B&c"C>lN=ibK1dNV>ip]Y0kgj#)QI@"i='`f9hd4\M_e\3E,i2Q\<rUD2.a.&3:\/(C55'rV/Z'%Y@gX=\TYVCDfZ3fJR*1PQ.(V,rYUqRL#8TqNI+1H'P<Js\8bSHfNS:h>>#8KikL>\8.mNR*enfXQ%\PAFAXAGmkY.N8*`9#^,"03%RBaDFZo4C[m7r9Mgs3q#-@EM]88?;\edW-o9kh[F)^Mke`/)%AU5_L5S)JlacAE#ejQ+jt6A<="#]Jq7Z]3esWk6sBK8W[!?ZCSl%o;eL%.Rn"KE,L-tTkj7<QLk+9P)Tu9i]$DcS\=m!]>"(kfRDPB3*i\*r\?*-n>S:[I-NkRc.Y8&@uHW:dm@bbIc]hm=K,`sO"EKl%53"kCAc!TX?^>%l:</t(-q\Y`O+4;L4$WI?3FC>4'lRu!ZdE*/gR:>hpp.HF4*IKmDEa=9*I#PP^=i@hq6fAQY_LeMQV*aJo++pg%5EDm%J,dFO!rI8TaO'ZffS_*rU(hffA+gXP\pWa5QIf?3,P_d`HI-B8S]s["Eq/3(8teX1Ck&Km3NO.L\+u<VYplS\FUf.!eSXX>%o&gJZ\c$@"9jMZ%AD_M^g>?O%%ulHf2PX@O]!9*.SH$`()7PpofSa@*F*ju'qYf4(9J+cmBKroR$N8ZWrhk*<KsFVK@Q/2;e,#f(%=D4W/`Cqe(`sG@R:W\=)+.k$I3n':pf;-!dhgUk=B5T%l^EjV0e;VrP.><']PLXll!\0FoAA-kQ^DXFTlQ6cZGeEa]<'#Ij4A@AK%H_PYE>%jTd]m&BSVD[jgqqJ6\`s\GtpZhMi]B".5fkX>5eu)0).o>HOoJGm#E3D<pr9\,oW&_>1ZP>+bHi*^'S(!TgQ`f09]DG2u%TnQDAa5X!A.Q12'?hnh&SQtCUZ.X;5Btfd9k_]>W\Tg)9&;:llO^^E$/!jj?U$fhboQk"/\PVJ[d\m>h;,X*(N/cHWrQ3M)lStlH%7d^*I>"YLF7-U[r\<0g*h:Q'/q,nESa&lk#D&[9>N>_aOYueON$`d+fjl/sEd]=KMbMQj(>Ml#e<%.(![e'1*ESrL=]\'bsTf\7"%R]6:%[&+(0?gB.pH5$;,?1!CqZquVob7!,_%d1P2abB0^=o.X"I<:o[kh3R^4/pRn8JJeo34"U?]!=Z+(6,Zdg%",ipNING='oTQ%&e"Y#h7OPXnl75If<^6n+Fb%3h)7Ic^V3JroY<)Mf06iSNYKW.Oi>'&NMe](kNhO*DH`aS`g>6Sc/_2%=158]I/NuW:eIhTpZ&1-%e3\Xl\p(QH6GHN[n"&X\8>3+!=mXQ)f9bNjC*sdC]t;oj/[SeERib9Po^^eiH@4CUV'OU!HF,Xqp>Po.(+XLk:NY$t?2N5Mk`%_E%R5D6W&*e51:htAgAk*QX97aYq(dI2Lep*krZ'FJJpR`mUn+m\JFL`DrhHEk$:hY&q5#Tia[`m&)9o0UsIVJ5)7H$SFF1sEL$SBD#%Rb^D4duA7@d.qlIj.7fDe_FLGKo/bn'J@$Z7mBG9p>jZAI^mbHG.W4PjFnN"R^Ufd/N&"O`hLo5rOoS`Au.&%l!la%^uMQ:cVJS,%CXfQ$Y]S_^TDHr=8pu$]d<ta`:Eup-qnNoMdTbG[%nuV5:8L'aI5!On;1b^\)h(JtGZF?=n_JJj7c*j-&*"J*:]6L5V/N>/X4H(j%cU')Zq*Y,$FR%=4C[15&lI1C]k,LjG,;$p,h]2ZBQhpFGq!H=$b1#Y$eB[s_NdU\=qG.Z<Z1Ie3GJE+I3PH3$I=AMHekCMgH#m;+%R0c[(P\qs\Wl:-mJ(n43:4;uFoY[:pIJUR&o"%1a@kIEHfinECqY&*2D<4:A;o\=IGAbi-fj^d@b?;AHIJ^HuF*<Z=FD>W,pY/s<%e#g$qRmq^^:$l)aj(@#o[4uH;Ft)OP]45Y/c`&rYc+Jt[b+8?(+$6OmI&$U'o(:DWmCBX3V[mj4X%F6>58>ciT!*VAE3)9J(/DD*%qC!r0NQ&F;j)4^.6^`A!BAGDF?+UuORFRjmG3-`ria-TGmE/6&UF_AIZ%^HO%K>mOS!fIR]h/S5jjd/YQ/$2:>LUbCMm++eV06P.%?^\-rKafKU*G1aSo;Qb4D,)lSo&<B2406)%n$0N^b2`';/<ar2>MRk6$jg^_:fb_cli*Y+Y4Y,pM2CiUkH!Z1S]e49KsE#g[i&?C%ojWp7YG8GR6MZ4YRo\aD?Dqp'8VJp:]R$r6VUb?WC2/>-m7]W!:9dVWd_%)[-==!SgWuQ[B.p5\WEi2P)L0q-/QC@4.>9NmP$&8Z%OpVrXpuV8"]!;P.39c-;gEEt$DE0i+\f\*@qlt0BTa0&GKaN5RWDJ]S>U0%YlIA@sMAP0C,A&mKhS&!dqsjC.eE;8fVDn&.a4A4L%:Q"QBN'!+:l`AChf#/LaERB"#F681ccDfs+>,f3C6+BUZI>H,Bb2^Fg!e%/_cJ3gL;dXgD<aKFr^QNJ[3$Utq"?Vg^"W&]*p=1K'%>kK[TZ5jQP]_Ibo&pu5M[\*Vo5Y'U7N#Pg*jjugj,)'9<6L:gU*ZCLor&E7"D/a#+,P!07AQu@@nrtk`cVO>ks#J%%^tYAo*NAX_%37_h`1)4[l^#b5:[o<t^HpE.;YS=D;,u[UUDCSSTRqXd&%i;>3<F_Bn28GOs.\b%emr.OhU</Z:0!Wh"#;@fJnq?j6O6*<I62p-%%K4j5XqelQ%2]&G8kkoHt1"H"\UTsCa?RmlqaZl*F=;f'$\b4jf*.trO]<U3E%QLa\/$^-tgY_u=e+-\S1Y(])Utr"WqJ:FmrG/X(%=#-H;+te9<40rqSo4'<+[<<&-;i(>'H#IMIgMQ6cLb+<"E(Z"ZjL4rjL!:"31="4_eq3gM[ZaJ<GhZLVNhqX#ZrnijH&5P5*$;%m%CaAVpfrL`0*VO75mJSKZpLssZS+EVeK"B$a`^tF_H9Wb2[ob)O>6@o^7PYoEbS\">\A2gWO7T!M;iJDJc'3*LGW"fNdlW\(O_\N8%%:c3;dLWJUAMnLI,i@7\W?Z];m%7D6XIB<?/2Zh\[Jo>p,-U\0M`3Nf;u1OO>W=YYprCpt[au'0(/-L/D!bkZ-a*?J6cjNnT?40`%&LjXl48t$eBmd1sFLMq8r>P##Rnh[frEqInkEVDMQI.#Mo?qCplB8dH?<UH;dIU?)d-uV^d[/6Ma@r)6l=MYAZ?H\QhYk(2gLOq6%m>:!)h)7jiPf>b#dDDBh;Km7:Ffdbi"b-$@FGqMFl!c2Pf4"[chfrlH1+PRfZ,k[LKb@n0RB;Y8SY*!g[SL4m84ai!DdmA(^A&<m%Q:`^@TF>-uhYZ&oY9RhfA?Bab(;"IFYf4HlXj9VRLA`ejrH?D(mB1PcerDaL42M\b<NNYYOgmY\lPC(A3Rhh.?e@J:SsA-^nWD)=%onu%ur>Eau2`IFQ<mCSqUp^k=?d@65*1tAhHplZm2'pi0\1IA2(6TEMSQ);Uc'NNQLlo=s?A&o%M$#7kUd-P%6Fs"YVH`b-P9/1:%@N!I,3_XdT]&2JLl`33cEk/#<0()Z4B797(P\%TL+[<Sdb]!/O5`/KmBnBh43_Z:C8=:U4^!mP2;PBGTKeYG>ZiK%4P#&XWh,9l:%ZIJ^s#_6`<5J;NpI7\7PoqaTnMQW%!C=>$8hn,u/)P*cZUDQt"?$#=YB0/[?'M?K%:Pqll7fS+sht"dV$DMFtNRco#:N%d=_/lfF%Z,R,HEI0HcWe;bp*_gV8[8+*?H[D+3W#a4I+j':$lpY3c;/Ys8AAqaJZ5;*M;iK_m/m25_l(k>qgs>43g#FdrL]+hD6Jg*iF71]n%/.^\5@H6:,'r_c4=nGXdkaL5Smut,9^$P9kiQIqm5.k$Eqt_M2+CrlT>K=oEOu6Zu^4qG!c1q;-(0.3a36:,R']`]jV^^*ld=%8\%g2?.bM:Tg[Ie%6jp?K1QSN7r%V1'2srTHR-d!T!m31H\B1WT<?D"5ttH1H<W?h^>]?LJ5p7kliD_Md7n!at]6j@8dH!?:/^LQc$s%FE10)5.u(_\nnQm-s;l?9o3dh:$_<g]N,H,B/&s9@5ik!>TVDXX_MuuQG)"/Lkr]JOGm:[Iqt4V2+]-9@KT=gI4VZq6X(7m1-'-O%MI+K<j@M@t:+'jK%a#6A:EFN\8o>8b.Yp\?2k@2A[(g`:[-e<2TcM#LLkX[E4Iokg-Bsq8kDfggc($e>?"b0$FHoBg$'R1TF"B8?%QrWR$O"WqYi/s[R\XHDp5BVg;,?`8`^3IlA,[0@[I02-X7+;$e29^h?_b.<-,`*;F?Lpgso=cK=m/8b>MA$q8U4$no8jdO/MI+Jl%BK>6>UGIis;tc-B1V?-9</0:W'm)3SK,3$NE#5E=1C%!dGaDu%an2^QLrTtg6(f%5>;DZqjr<KfO_hi(/b!d6D7m>i[__,%EAq+C%b!!I$@[7W'4P!^l,RW5ghWr2.d1:U[Iu`10@V;M:l-+H*'%E.;-$>/d3rQ)PM,\^"6qA7=PYP#,\r_tJ4S1&28fjGuK%S.le\$A&%Zkb,O`h86bdI3JdIi8b-khkC3psQo99CjROL^g6=-^!Db%)3^0qie]/k$,fLY79O?dX-IgrE`;l=:>"3`<;`*rB?'13/^__l$kQa%mBCDVEhBD+0`U0K+bT<m:t*Dh?O`?6HGj5,&cucFl[Ra9kRtQXUU<n)OY92aX-TRVgs.)=o??W\m(&Z$CRrj^\^]HF4d[pdQY+CN%k'=u7kltqLcP7?11!`j[E4Q<J3C\[X\k/;rd=l;0]GNNS(p&nDY0=.)=mHlJDo4uGL$X6-=`b`.V($IZY+*`#U2;oqhKq1rIH_>?%c\U8<n+I8]i?;V]k4bc_KQ[R:4aC>Y(s,Wa.?j]c1\`jb,.-0Z/>dHJL^Xeja:#K:*]=Z`$g7\T0A!`V>ASc$*aAF;@r#n#c2PQN%k-hQOkR+06jNqINd#!^T&`h;MB@%AcUWK4QcCg)+$P&[oQ^pED.#fR//j"\\=F;@7U!(`S'5)NJ+GVRMBIJKcQ7Y((%UF5^*Tb!E%QU@+16)Wo8%[08XPge\%\dT*@?TE5])0@$OEb7RW7bZV=F=l82NQ/c3B*+n6]B!?kZX,S;#B%lL9+S*m6VaC7EaDQ@B%47`F:RC'%oNlBh=8P:qNbblXJ;o-7l.oTX\;#&nEK-U4P76%;h>!MLSVU7.rPFD&a'n)5h]g%TVa]%qXC&neQ,$9@BC>&s8nt-a?n%?9fY_cq%eP=dHF-+MobBKIl^i$!'JqPA(HR2L2#7Lcm=a\,sNMBK@M`*@`X[gnW-h@,aH*1h,Z<JjsUgM.blZ#,]L@t30A@LFM2ME-mDL(Tt%ll88f8pW0^e.B_Y6afnaZXeH(%V"B./2P"MF(>15Q2-eCB%:\1[bk#BhKWiI>F+l6;!(>(XcFQm&Xbb7D9j+N@kW1;I7ANR&m].l%Nl.d[CW&rahEC=i%[27[C-,)UlBMOMCTnunXJad;4-/j4<t'HuH$hR(q(EDuAOUocH>6W0&kq03659Se^&0RH`mfd>'[?:LlPTes%gUDL<*VNn7keHIH^1t8]:/&C<_!AjoN@[H(SWk<3hQuF$=?e%E=,SBdbRE994jugj=#0"gKK`QjP!-.#EOcnrXku^pSO%ZTT7S*T%q5-jZa9o-J/UQ[(-'ANGGY1(i7*g7fITes0rp_dcG45'7lj6TDF]\3a-b$@I8g"bA2uneA8#&mF9CHOlS+P!umFakY7dp"=WAM`G%Ju?-?FY]cGPrpS!V\.N^NguW)WQgR%\ZcG63q>[=.+'speg$MBYu(Ffc#,aXB)5't^"]0+-Smn<1LhgWFj`(?\uD`UTDI2Xs"ci=%+8`b+T6hqKbq9o#1iPN>jRtE@H`hhdp?@]2@>S^YN%(g2ELG*Mg13r_`A6/hl(=dt#m4m]"1D.\,?"fM6HK3(Z8WDWb[/441Jj;S%dtB+Go#M)04=*.'EiD/Y&s(8n-mFHaJXPl)'lp1F%Hik)Cr,(?pim]\W^eD+OkM<McPb(SUNtelqF])U9$ZBEHD(Y32NmZcn*pcH%N3KV#+'"Vjil:R<bP(5sr'XnE+\BP`mLSO28P%I%cLAaDjj[^=>FN[:=s6Z[g<]le49ketP^]K0+6d8QkD!^(K"^a?L,_+c=aVEs%Y4$VKGRp&P;b(>c_S)M5qjE4=--kAODA`o64,NF%E`h3,?)%;'1$X.r1dD"RoAT835;lb1*(<0Z)0#cA=et,ropo_M:d/,HY#!C^%EB`/sfn+M@i<h`3\42SkVr].=)0+BS)+d#^oYX'Qi^TILQZ>^6M"BR4M&C<.abPf.@VORX4HjX7b^,[12BkkI'2+=A%-s4)@Nn%G%ElCH?RerX'HWW.5,8)+RBK!GpZ]LNCoGueJpd)]JE\ikPY09Fk8.9mlLhDiTQgPF.8gdI4Q-kENks'6oM!+"e4ZXd0D`-PA\bJ:E%BmBFlR=kko:?S4'N*+A8AU9q5`JO7P%:e*ODsp!Z7;\]WjtpI3B@,lVb"$&co&O<TjsD#&0YggM)qd^_VjsWL(1nRO'"I+=;e]QP%RE)cj+,aRga_,UW\po@$qu8.@OCNOBE2oAU7n.6Ar&R=\C!M[eqY3d7/qX:LiQGmi;SW/J9h$V11OMYAcPINh7Ok;lMMtM0-f6Z*%W@fdn.>\@oIV<KR5t82=1^UQf/k.]-j/I"/*:#Of-\!V9VST/*#=jj_(M^4;-+ZQEiVN4OL0H3I.U5c]E[7W',3J03HK<pr;W6!'%co]]uLf?@i5F*thN[I#e.u).n_IoskYlKW0oBO3hfLEE,=d1klMj&1.[9-`?1+/CNA@l)-9^Il"5rTT40#`iNSh6J6ds7?0cW]n"%5AJn@qXU9iYK0l(q8-8ln*$gdh=r+2NE\q'&,JOrOL]E0Yl4L1I_@a]pU4'0-9qF,I9JYaqG?EODq$tQqNm[YCR:Y#V9Q2Jm13to%hP\&Hp%%Li`d23g?UJf+Wg9F.F-pP.3/)FY1:#3^O'RUS3)fCnWZRR&o\gN[G'eF[I&K-![6i])\^LA[<a(6KF*Wn5lulH%/Q>uT%SPgl^YiF>Mf@,o=IV';*]bkF:7WYi#juZ\D*P[[(io/g$8da5G9NJHg=\^Q5hoGKZ,q[$[S!a!2]mWOHG.Yo.\a:\)_li[s;ei")%#E=MNZpG_bp[N[E8?JqtF`b$^;J:2cZ>%(c:+PsH35\M`.\!ZXJG9<nI4<bEaa!9[nTZLglu*->-p"[^&eC;R""uqP<>2k8p+2NY%OS,((43eFY)qJE[S$YP9li,"*CR@4&,uCd'HUk#(SX8U8=T.KBV::k_``0/"e=9Zj9`+2hF#Ca-E_.esqJc$!]La`Z([c%EB+/q.%Fp]hm3TBo+?QtiS$TH!ME]r_YpV-=3Ca<rtHJ^TA]?tu]1D4+Fc)Zrdrj^`727bqgQ:q^2mJd7!,Z!lJfl[2f@0Y&TMl?%fQS.'&%UWB<*WZ(;^O"?bQab5rNAX(ki8JUMDo.a$!?'6jI?]djB9pZR)V>8,$PYIMAKTMn5l2"SG#L92>b,*;E[I,E3/pV)?eCeq8\TF7E%4Tf9E,q4S*YrtHcdj=,(AY6"W82ab:E`3g#2I-qgiUparflTfrFAYbHph[Mej](jDN[UALWW,eM)-Jk';D-c:41m#qF@i9KjB)&C%:"QGb7[$Q5PY3r?MtL$XZWh7%Cq?EZPh=7"g<:HdRk@)/>fBm)N@:8K.@1NFj:Q"QV8g<31n-,BH6$i\>uHRdJ+?.:l-e.Ld:UiR%2$Vr4(i;0:E[KD:Zg!WPd`?iaN?1%+p,2oY*EUc8idS.=C"53Wl,!X4\D7Oh4qaLeoU>,mj6PQln6IrI\??BE$JeaLk_C&@^:L-1%=m2Pj1T'<4#Ag;7,UC^Xm&=+J*!.S`d"\itHS^q8<F%(IWOL%s?UEL393N>%YjKs+p=Y7Ta^QaKs-YDnPs'd<gu_oj@M.:W_/#,,%UHG,.Ia-^<d85+k\\g4'HDooB?#pgm>qYrI]DegrE6V\*rKTMZl#HquAB-&F?$&"r?\Nm=l*nlIHE$bRjt=WJ(r#4:=6)ouC[Q5&%jIrcfbK,+T[s@VW5D!sZm+$/5gOYeXcXMB7+\Js88HHVTk45aV/^O.Z7?-[)n-eOXLcnEQT0/)cS5b_\=6<,NlS"tmENS$B%-#?X%D]]0(k.Mus7=jU'P9UC2O?S/h2f.mZS=#?!'CeFgF"DFHpVjR:?A;5AiqL.;YC"3?kDk:+UjC%Ajc5()`:?<<pD@BZ6M?B]o20@X%i-ZE,:.@u1;(7`Udcp@@f-Dh4-4`6A"ZI<elrp9*Nc;>2rY'(T\FG6jg9YC5jl<SmSI3GpNTMEp_(-=6rS9;mg6A58Rkj*>f;ohS%\[Y)S1\%apW"U`PZl&'tk@l30.FF??#LXk3WIqZB\n.Il:%mKja+:;)k5P1,(KH4p)UEdN?C_YZ[q-mAjP6jQf>%iF8q<]nltt:9%9)NEUZBB7)15$uFr^;J\41qok$.JBb?\o1/*dD\Fh'`oJNk7Fu,4\OIbbL'm]=3+5)t)^RO!C$HYoE+c\1+VBI%m^3nqNNd3YaOZ%7rhO7cPu9Z3V,Um]AYAkheW"I43Y\0WCl>8eXU8:%A-c"m8&n61YB75S6/!jNYom;MU&[q6RUIUeojQIq0:O:*BMM,=+\^oEYH`S%i,j\`;%ch@c)8''errjT/o588'C*]E/mB;L^HH9URd[sBbq-f1iR1D\Nl[X,F<Mu>WZ4Z,@nKP=R9olTIQ87sa8/>:ig&lh4&%Kb%e,!Wi-C6qE:D2.)9YOYtk7Xr^j^u(2d@X]i0jkVmfK[Ao:WuLBl:3SA+R;,:X3c?VCH4[8]HkHMrR@]l3Na=_oJeoF"mWaY?7YS@%B>EgS'D8WRd9ZKk8abX*q^h=!\6e;WROYKNF42#r]#RnmX@W"(3la*!L67VkgcNQAZ'9;tB\q-ijT.J/]H[pajRSQ#a"uRqQ9T4M%R2bIW]e>igNP2[CebQOIbH7E.?D5<ODkG,;^5Hp;4)9.RHrK<[_R6H?No=1j$1DR#<%g(m&(d6EI!H@q>t"*h>M?Tu9Z`'Z9i&WA%^\qCmP6tkQ-F:XL\[:-VDdq-ZSc,.GK_I&KoC(3>O0NZlhtG"?o@-+)GAkXuC%njV-DdRS9$k@$Y*KY98PSMEqbqTtTH2-pS=Nfr%H;;*7:>Rt.alICZ?9LIGc`$6G5=m<RRj^9eRm/-O;HDN5F[kfVp8"$]kk<&RY:50+G=5md8]tcchJ(P(K);1h$f0MtYD)jq;XB74%/;Wau''@s(E[?=*N+[&G3Ug./rL@(qbCM[geEUr!1<Jg/ksUe3goQ>`SKd(]@O&cdN0[Df9*eXp]!LAOTM9\ME:1N`X:)G%dhA3K%4='1e5?X[[W@Z#,R$q76kV'=mH/1QMl9ro>)`Y2Sim:C/X=E<#,]2ZQX\.tAYf0]FBDmLVAS'[D"BGu!Q.@0H1HLtl9[4cH*2h>:%rHKcDhm+)..3hHc;!Nt<T!t::ZP5ReBJW/K<c45M<KhB;#4N:aNK&apX`#_2@<&]?l=98Rc4i`p2oj=t4aaIu[RQOAFLa@HOYDE#%,NX##BCGEhfGaT3>&ds*nG]\p**^uScF*YV27."!lrbmP%Xeb-p/uBtI'I!Y9Dkm$>_i7@I[G*$8AZ-X]f+es#>ke+)ju[jY=0b]%i4Ii.i@[L@!jaNuDjf`f@>u#loCq:NP:[RDW]5K;!<c3Kp+W2sTt?qoQS6cG#Q%.>Mqr##n2U_tgNbTCo%[[*f/X(m/;a&]DEH$c%gf#.&Z'6**&,KDCWIRd.IALtASWU9Y^g:(\kO-+[rr*JI;XZKof)7dgot!R>8h)\?R1Y@Y.`8YrcWm(>Pt]rC*2pi&hP\h(M]Fe7%;M`<?Ki>BHOTR"UX9QoNbaS^eiuF4'=b+1cl'1E(^9R_p"nPLET0-3k@,;m=6>;f<^q;[X3H$WF:OC9M",K&-"(_MqblQ%TAWtgf%3HG2L:GpI^"dh4ROD.<SA-%Ee9$[P9TJD8]SNP%fq0Ll<2O[;7pdi-(GOc-EJM-$dYJNMO.:;Y*Cnn_/027Idp/4*A`.NR/;Ef4f%niqIM?fl3.,J00nj8R200'*JI'[98X+/:"Sl'30WYYcFQeSig@Tq_;X%@G8fkIl>t\,)*JCoG$ES.4$G?GAUB9#KQP[uu$;?QWoJ%A_ua>s(nWBme,$6?fp$<6f%'pS_,4Saq<FpQ`[J>7hG?CY@"rRqQ53\5,E_souldF_MIXQbH@9NaWn=I0Deebgc'cU\CWCG6F;UZ%GH[X)NgOshH2`Q_n)3Qr=jTOll_c[=r)Q%]_%(su?W-f]J[bIbS!B;c/Y(i(Wa,;pAXg87'_G5rqGD#U9t`j\iu:;0qgeG;,uVQ*%Dn,]>nntC:=Q4bbldt`UrfQ"%7tD[M_QA8rXW50jIW?@(h<Lo/6Sd0)Ib@qfdWur5?GGiWCRCAShs6UHE.'A1P(pa'07,5cnnSl+%p\JH>F=$%+%W\a[XA;3mq@.QhhcsK1\&WoE\aT47^=@-ip[RpD55DKEHJe%T]gWou[VZG%Y@!G>:Ug1S@sSBpf.[#%^O``>qMNT1%V2X>=^RcfLNT=E\ls'Gb]8s.NnB?;&h[$C(9XrVkd/3V794CLW]ceGtdGIrOd9HQ)4BMKQW0;5%?Y8G1+8>Vk-7c4M]meXL:2#Rq%EN``>YFET>\q?A&d<kfrb^8aK?G?muSYn-/^#-lDIb@\@hT%Qc1-D'<P*LgW?d;U0Xa^5>SXt;6+-r(7X'__/^5mX>;Ub\p'cY!&%Ib@FEUXP"5f2$1e"LC8U>e!)fp$:4J)/c]fEh5TJnjr3AbJ)N1cfi3pHi:5b_iPjrWePrWl^+^j-LE&gEj&jDXa]Lr,Q6HaQ[PoA%6*9K@hWpLK&"Jqkg[Dh)fsgh>fh9J/Y@$u-:+X"8AUa?af.VJj8BBd1k[)$2`M!>OCj:7#R^MO&I%GbBWH.Ai6r-brCF+V1]6:L_%miuP)U$W-=,2@s-fn.DN>2+VV#"?di)PPr\L+t0u%1h4b-tJ/UFP:T4o.\0"Q+]LuD#W^5d\pD5q%API;iOKmY3_I6RH@W5p?L25%gCJY=Q07VPa7Hj0`L#9Bofqc^cMc/E`1OM]DsU^,c=Ys_IOMbWG<8`Ya+$k?5>RVI^0>buX,"*@EhTjIDND=5gWn.<e#2ff]<aln%bJU6tOo+>59]OacQaKt/oCr$Xe,?2@kP#dp`p-7hcaEeNeGdheNlJdQX\M[G1YZ7#f@B<Wm+]FrQ.,T\=:uW)1-8R_5Fm47FXbZ:%pb6=9s7neWhOa^SeCOBGNS:Sj4_*693c2?U"uGXAouh5cieMa,EGr!T0GX*+r,QB=9A)K7``:aImn14`Xi2r_$RSDrKK[#Br6fdr%&$CPmgQ/Oc3Q3Kkq0eEE5L%X3g4t<oUrF%,_5c7\C:ETP0i?Cd.BT``1\L"Pai*AGT2m;.m7M6<Ephg3T's\eGUD[H8e)kg>Bk:N%GeDa=;rf3aXjoU`.N+G03sIc\78GgjNG)CpC*ss(dN&'e[AksdQIHBp?>8G:o4tIJ+g0-BPW$6oT3cb4)gC<a.c'iG+"EhnGI:i<%l"','#Q"aA[cYa+oB2$MCHLD*%AWOjO!6*Xc^Z`QT7!6QGkpC;]7[AsW7BTpl_(Sms5hGsr7:%hSO/0_B,*UU0(Ymp"_lPk\<h&@%3>n+M%$*lfmRg&UEQchrRlM^@a/i#5-N!&RM6(&2E->UAcfG?#PHA:qD/R+u)eJ\OX]!oZ%]bQTN\S;Z:jT1em-O//$e#X<MUDB*%rB\f4j+DXU_86%$52cDpmElHZJWD;WK@c*0Hsg\"[b(QKm"1um*HjVfUQCNP`.LA_*o/o%po#`]3&Gh+58\c>Qo'"&CGpZM1.fuA%13Zbpq9P*_m@3uuhQe4>,g,MM^BCi8`5;''[;OhR/t3i[_Xj("bhLZRhJ=9bm-Vi76'`n+^7X?N4jS2-`Nh=7bq;%^qu=#oKj(g`%+5ZNchXU"$dm@dI\U6WNG&mKG?upgAm#6ZEVIOLs%G)l+F5<;@WP'[b&YaTII@k%7*\8PhFgl]Qg"?<'[<fT2p,;`Vp%@aki:So!%O_fGqqse+TZ!K/Eb2j.<%CAoked.bG4q=&8MkVZ&c&Wfk2>g?L'As7nIIj#ede:W_`Rk%iHPS44h3Qs8CLDD7RgKH%S=_qJ5bTGk%J.M]RhiCtt>@5qlpXWuLgH=6IgKEDhb+IYp+F8P*ZlG!FCK5B*lE%#*8P=>"fE*ra#Kut_O,d(_)D>/5a%rT!al'"2(c1:!f'UqY%5YQM:djuJom&)WiHICUFp4<6KRV-.1pBmP?$_fS)?[Q@%Ho?YCZr7_I$BH>Z$^9<"r__f)o1gUN3O3/Q.%/N'#+MqT4H/lm\R77D%i]Q@IEet[=YYf]MQ<-6U$,fPkdm*23Xc0RS]CijYo<eKZhQ1^B?u58ED]&uFfL1rGZ?)gBYe<.Hl6kk;1b\],=85*3Lou9l8rFXJ%HDG*rRTh@u_u0)Yet$e^C2UK7bI:FHqC+%$I_Yo:Q?$d$du?^%O+?biF:T+;T;;gE6E0p,F7P*ge($CV^.`s_p,!db^rDZn?eA19%m;h=O4ESLB=,<Bi':j[.W^R1ImD@_n+qePI.q;l<CN9TX>u+\20C(gR_IhF#\Ms<YS-<$ncQ'`l`ohXI\N%t(6BUu3U9(a^m"'%l%rpXL%c3EW_NBJ[CMKoatlp)tW$SsP(SmPGj`u^$UV*WLsJ+n>>`#0TYO"S=_5Kls=>`?'?>>i(HY?tTb`Id>!2j:/sfNRNU8$5K#%d^%Y+/bV*B$QYE?lu]D-GWUna;_FGpL"tnWpPm^$:%5uj%p`N?;`"ODrLZi=)M.MOUa7^No)`GICj++.&\dL(n9/r59b9=+@f\-=%lpe3DI%6UU7]<L3a!7@)'0r7$HC';R!7("g2M/S26&bg9fmR[iSaY\1hrd#>JIDetm;DgA:O!M+ok*KKE-lu"2@eYuCWX&.s"SVI%7P]PYXl\%.BZrsj69q]`@03P)q][2(SJ,U'p3b42<4Q&>4[2UtoDogR&>#/T,fIZ,I9/doLRI:FV`[X1fF%CQTg9D2;E0gq8VG,q%hkP3]8/N>5K?Wa$I8m'T@!0R:To[BJGS$WJ[9/5QhVOXI7qEGH]_>@7TQ-CV)llV-9grHm'IA:)P1=-:5rI-CW0D?f8qP&o7T3nN%Gr."1S^"J[mG+:F(ituIT2GKmNndriO5f+8K67].Ft>bq1)ab*(L2TOYureHE/Y7S3O>]:.mcK?@keUbi#8O41dJQ72Mf_I9cG43%4NK5miF6\,WA>>&))TA0+JFdN_,fVW&fQDIppm14O`*Z(?Ll,)7Kr,k4KqEB]MmBD=F;(M40X9OfB?-nBba7_*^4p.([g`nKN/A>%*cClF\'aoMLnB(\G6Ye[DK$-.cE&ScfCU/6eFq0Mr*5]Lb1+]\fO?t,(.e?a?g9+.En;EiN1%Q=!#T#3BBatRK9bPDm6Q/@@p(qP%]t^kXW7c:Y?dDg(41c5R?r+MK?W.IZ-6>+1R<;"R^#\R?KgJ@XKOqJ[]4EUek1J2]2D:#)2TL9]Ym72(ph?q'O0P<)+,KVJ(saQe%@@6VjfN8B:O#t(Vg`ic(iH<pf8B2H/g_X&nIjWjpF$XtEG#%/[b,u_U4`T$Oe%Fi@\XP')>O1j1RcUFsj_'kQMt_@6ZVl9;[<1;r%5-MZWEdl'Qd-ZaPqJN1adR6/T?lV'`"N;X4]%347U,k81:n6@BILN72[1C`G:Ret?b@<6Y0/$#kk#f3uc^K9rSq,dB=a.+8Fa\Mj%*%q[!-J4bGk7nj-2]%3oF0IaL^0R/bTtL20XTZ6O^BL9N;n'_il&W_7PJR_J.XNi<@dSJBcG9;OSlk4='agFBCqQ"CGDVfEh`C[L%7Isc4@fX7qgoAf1_Tsb@\Q-rqQq^40J(/<2YUE8Bj)aVRr5ulhnCfcqI#o+[l<RgtB/g+^f8gI"^tXPbquM#[<YBeao@!T;XR>Q8%l"-&TqH<Uk/!O]O)Xbj6GAljfo.0h'SW07;CNoL;kLXi6LR)P_Z$.U>FBIj.:"a^Ek;-*bf'\U8\$l"F<XO;`l5$F<eLsruhjteS%j7_O3A$`[AGZUiFm@*0_o<))/2]A;,s6ad5DVnb=c#.O#=BR`?f\N[@RuQ1R?)&eX?Zgkp,`?)IJPSbmNX@d^U]YZ/=0VY11NC!2%hu%%jY%XsXYo:j?43M,lQ0D5]4gaePI]V$QpW"$jI\6/&2/1!$^JNp8Rpu$99l)`AlYg#!LBh01/m2Vr]$E<>Il>'m>WutIga.CR%kJPjHcQhc"huBpl^jb,marr5.,!nA@g5]2(#$6"`D"dgi_lN<qF1o]\1:^PiN%N8&pqWSMA+Le_O2g=#b=DKHlIb*bI5eTRGd0%_%pLg5FrA<'=eg)uJ$`/>t9bK[9OMa;o-Afj;/K+T4RNrqFU%&Yr8Rb+$)pnWGRNtpq6KoRuPB7K;T3INOm@f#I9bJrhhm/"pM)NI7%oY;5#MY(VDZSL^NkB$O6P[f(<@o^hQKg2c]ajV<m$;C?>PZSXLnor`>C)f1pjG(SEnsNV5KM8P^4nI1f76\?m6,Ht,Z;kP\l'8d1%O)L9Mb_SD9*`'VcM`Yu6`Qdq1[CLN>0D6B*@rY@^UPWhX*jos\/m)X+.Q,;L<K^k$Qon1IKEqOV#XC:H*FZ+WBf7cRUh9(YW5ae,%p#GItofd#VDbMd@4\=:k#]E2\C<2@6B=SJV34\p:gPN8H_m"#r+,lP[IbPt,`Ib&od\Q=u;eU>@A>8o\o+Kc^P!KR"KMN]6hB]<(%f_EJ?3;W83a0l/QcE+`3Yjf.;+Y^Yc\Z--FQhqRT_5/1*^DJ&"=l!-U(Tk6hr^CJ4<\'<-h.VbZPmDr!Mj$"iJ=BW`O#*Ks\F!oG%TtH/h^:daXVqt^I9TX'CnD,N2<@2+$+0-r$h`KGu:uBbf]C+r'2uPgc,L/FZ=HM8P&=9V;Ojgs>if<<m8UC]Dq"a&k3sV)[9l.(c%gu`m1C?^b1H*%[]g@gMLE]5nnm)IYh+0#Va2gQ-V/NVAaC*`,)0K5sg_Wo.5QG.DoZe=br#>#HWb'*CM*X@t[*Mc"N`uYk[=Yj53%MJ\u=Tp34s2*3l.#m2j!9-k_DIQ!&Y*&AdS50PVn9#F\>0aE7r.?d/FfP7?]]cjCajP?+QPgW*i_sD1p!Xm_D.[1.+h$\:PM$L<5%)'q#=KNVE5&:c#"qrj#n`Vt.="OSfcF7_rQ(@+:5Bjci7b?YQe^r]#8,V>B4/Wk6p/6Id[2aNY.1VUQ;&S\Mm*+;T#m<9rCc@Qi_%N(3sQeid\LYoq&$-!Dk:<+UUZ%21-[>.4Gc<_;Z8C]`!"1PW#$U<!o"7:)ZbYm09?`gAXMN476I;dYYC8OPYIrtX3Zf*h/oGcSl,%bug)sJ.ja*5'3T+1:Qso:%s<YJ!lGq2#.QhIOr/;/*XRk"DdelM9.L<HKT0s>G[8+)!&+IJ%H,thtad<7\*SWfu16gIMIEHdN+3r%B/7V/`d#$9(?Nm2S]1_Ej7_R2pHPJtq<Q'+$N8Hl%EFXr%lR#ss1,n;5<(T5oV^pOrNcFdIeaeoUW9i59KZa-0^B39>EAF'<b?2V%N8d\oZuu7gM0IuW72a]IL5ZVunIBe&*_@U3]_PDkg)oK(b0@!/8+O\h<&L'i^,!S:p\W%p^5Oi?2E77gL<tUugRVjE'?K$Z]e[E"%EESc$Q]DPb[:[)u%#b'`QDGG)P?#MH4tCJ%"LC<"V%<$Rc]a2tW&2n3q9!BkI]=Yj9VSEpQK^ugcmY?JM9c"oo65%ijkMk"o=s2-%5To@DZSCRd\[';=<@H8aZ=`"^ShR6f6'!t\=lsf*9,U&j^[=]i\$^L.m)$6pEso^q?2Y>k*,B>uIP#f0?9%LZ:J'kP3`MCuV'hMP%Lc$mhkL?^qHNb*Ac/p1DgR4akDY02fMhjuS[)h]jn=Iot:Q+@/]kisBU4!mU%^Tk:fZ5Ga."6NX>C!mFQ=Z`Oj206WO;@QN]</b;%3Y8+MfW1X*p=3IQI..C(@)#,mYJNN4Z95<mhM7b<2@[h9o<2%?WK>C-"1KEt_;:d=@h970Wd_9PXAMZ0l[Q#NhA&Y1MrAu_H)GR6%'M9YU3GW`o?9*Ua^#$8KC`_++DR9d`;>t44s7iK6'MYW3Zs8srE&mRKVD'66MrnjGJ-k)ub$)Ehq0:YBCc1PG^Pb`)FE)PE^:RNQ%.SAK3LAS,5_mhG())cgubP*ir)2HfIUU\>C^\CmhNVtkKs)/\^@"En/Aj?"AQet6,lk]V$1l^L'n`m_`]]1Z9(/3U6>AhifqISP9%^>NqI/lu>r/3XlO^b7d(i?Z>%Hd<9bn_]mhq#.CJA[uBmEUBL\RUsrUjBf^-^^L(7AN=>ZAmZP0.XO@+A6H!UT:mLj[_Q=+%^IXd%C^$u:'@J"t3;si5(fRkG6on(>FtNE<$<%N8Q=>]TODRE6>.<8')&j9:K%$`.^_<'Bge._8R:.$SgNLbp_\r**Z>UQqa!R0VG.iEc%.bcE,G/,9&5!EW#[`a]Wck4.I[TV?%L8SOLj_E`=KG4DYj)4t>%E_]*A5tuP$t?N6Up:!9?W%:UNoHJJ6u.N/`9=`aD[lD.1s8Mn%$sUe]j2uFG#I-&_Wl-6O>P9&V#DX.6^mMRDZL+r#BK9DP%/@V<&B;0=Q>OgDl<$g71L3YOKFfPm^P=MT*13gE1eMrE1)MNFGlYB,%BNu\rEfQBYottr^'J80\r/$f$0*s=K-S#0XN*3b"isoL8flC1JF,8n55m!BoA6"2!"lU-1LY<?+#;&3*&-Ct`pCP?Udkpiq6qS6\%=8#08%j8=bN@Vq6cB2#3IPg)bE`2ETCk@O)'SFelZe=hk"_"_E'2F)u2Isc`@;H'tI+rka9X;fqc,Z`6aI-OaI%h1<_$U8cJJ(;B%3;su9XKn?G8BBkN\9`,pOjb8:67g*bU(aLEbrFB&Q7H^.5HmjU[UaVlY577qOCO&R<S$ZP`sjr7>p4n'-4osN0WO4W&5icVN(jL4%/KofZM_-*LWtSA2.#ku1+BJ#I;'WuUWl9_r'a>6K)R?0CoVtGSZ-$L](jssBTgR@j_.\FgA_RkbJ?9/Y=O%W)@=@Es<QHS8Y#mcq%W95[raTcWJ^DYWMWsL:Ia/P@VP:n:S#9g*(q&[=R9:Ce>;.:*6#<>nTqTUCSiWsP&-AkR"DV.FKSh&d&'YY.b$#6p63.+j*0");,%4K''sZ>9'2me]h)<b9V?;cQ-Y=:b0V:t;ce`!A>X8;SHA[Lg7pW#8HQT_;?VK5F"]+Vo+$.)kIAJf7ZLnO-><"J?M;=Ds%&-J:a?%,r-<j[BZol'rT2T/&Mc%+1>uF<DuEYb!'2)2*qQlfg@HT)+[7('e5/1&$^diaL7fVXW+YX,:JcurWL`d(l[1i'afZ4(c=E@-;\*,%0uRV6.3tTop1uI<Pkq$q[pn]L<Q!FnR&]?X_2FO7LaZ#Y"b=.2V33tPPZYb%dF_PB5bsPC>ToDB*!o%`7r;e[<D#B)Gnu%sD$3al%$%*9'&],NbZ\n0pPU'^2[LHIL8Hce>)hB8$*(rjIUk94,9tgidMifiS)BlP0<F%(IrWF66ZD0+8@mqVG/\QG0C:GZD3<l8//-+Lr%NA;jZ/.btb@hPNYX2RIS.f"N97&NhXJ:MU$l_D,n801kI6jOr4*.JE+5+bPUOU*ZVa`7!j,X@62i(2fLdmtcg23QG&e-Gd_ATl""%]!<`Lo<>M+0N@SBT]M@Uk^t=W.uPJ$$\[V6PCa&hJ>OeG&F+I1#'E0^9[a]<,u%;@[P^c6>WL4HI5Ri@C"9pC^dqCG5]L1$VijJ0%9SsD9"r5(a6-M#O9e%V",*b*dc4H9j2'*r0!%!L6A:ae)1'Yf:.a1.L6nBJsZAk*CQ.(sdWVD8s+H'\_h12o5?l2ip^d]1,;r5]l%1g_[+Ca96`FnJK,$/2L+$jD@$WbRHcN^OE[77"Q>+Kbd4pHB10jEces_/F&%!]u3j/0g^!`H:tl,`f"\Y@/8B2*%*#"5AsZ#i`iD%b`BOL@#6Zc_!hdP!R`F5/3dLZ@I$8\CDW'u#a?VU-NJ5_Cm#8E+Cn-'8h1>nEde'_Lo%UN6BR_a1iks<k"f6(r.JLcR^!`-'c\-&%i$6HFAiUf]IK7BJ1u2<dRp\d]JT%jn1jg=%C&bX*7\k\KK+*,2A*P8*jba\'JEa5Z;\3%q"]pAR3%%>GqU)T\.3m@c"$[-fFtu>#%ioZu`*YE!5V9]-ANBt?.%7$Uc&3^,p;X5PQ+7qlF6kGP5=+hH!E<7.-Eks#$Kdhgo>fdUf&_fPu<]?I`a?;Nq@k_^D%g8KN.6p`Q%Qjm@UQS%?K!$X`hb1nK8/;kX0D$Dd9;b(;[a`_ef$=KPd%7)>N_2sO'*G&35WLR\@%c@o=MFssVfKP68XRStUKloTaU\8]gWi=aW%#Xd@16&ZqJrWm4dGrAS3Mn0A`YmKP1<?6ih0K3O[,"/bG$)VN7UkJFjPc!-<a:[B=9or,WDV.FKSogD)dQS$@BJ&g$E@t+*-.igL%/5_JO&&'_#JR#1S^0KIG5dh4H=(#+@@MB;VQ!@CgU&\"(/:jsgVi73H/R7D)nh%+?@8R$8/SP&)(@mEKU,A_A"^6t^4Gtj!0Nu\b%gRGT3lAZ&WPe*djk?J3`NDOoR'h!--'9[Ce'-W$.8T@.cYOjtHaAXQ3QKF=hLccgrnr8<s[0o"fV8T?rM_PR6<iUah`O,coM$W6o%3b.uYV6LN;_4rJ[3<2V+>3^Hjj%>;mW$m1U3Y?rp:h>Fi\1k:a/6%L_+2gL;O]&PuRVFF)@V\R4U!G;>_:Tr>3ZuHXN%G-d+Vl(7%6m73XVGNHsOI$:ueMeXM$-AK2QfnE7'dfiS">S*AQW$He@FZ,nU663Yc7R-K@:;;5SS6"7W?mgArWGW1%&P]H+GTi8^qRYU%PT6W%S\PmH-&?1$IcJ>5:DTFKbJbJi1ZJ1%1b1TiJ^WWEN\I?p</VY@<_3DKE0a55jm!<q.3-#JP"r)rqXQ6Y,#qasiJ6hVK.1Mro14MU%XZo<Yc:fCCgOkMAY8%1`@s!gb9F5,)!?hoHp(.gJ"`j'-dG^9TljdK5$?B>nQ3^-gNHCn;,K8"7CI54I'__QH'?ldnV=NA2+Stf*%BRVQgeXB5e(KP$H_5\sFN[r^siQD4($u7m+)-)d;&r0<uSoCL"!"Q0r#dRkb-7Te4el7lfCHD!<=NE9rMUm`@%lAl_U?macN*=:q%YUdAR?/\6>$>%<CG(jm`l?3??*lE.)6--2OR'HseLg>Rcl#qasZR`\e>nO3.hF;0GaF1<!KVk(Bdo>5!7i:Zq)_g/ho:9kIV1Q-E%cWsI1LbG])\0)rHclP?eE-GS";Z#obR'oMg35Rh)`AHu08#o,&GlZ8^X)nac?ei2b!/EDIHuL@k@`k7.G%eut&8cD7,ZqR5NWOIh%O%,3]?-,XUQ+gi[aAr4Qi^VlL_hq!l<q2HG5DcQ0$Dt#n@W.D;2Pp6]bZ-,#)oO)ib_&qp<?_ke+1;AQ_-IR2Cl.gN+9NX;32HEo%bQamI$!Bm(J\itdI?5V+6VITM=O!duWj35T'4nUB@IY,mf!6*++`9#=Yi-rI@cJ8PW01lf>Ak\%;0=6I)?`4*#kO=6'Ie=MM$g))%jCguB'Fo,bkeub`[uoGljA2#82%$*=k*&G3mc,OB)pgpNo9>;p=[]u#r&j'c!smP;%f$&(b>B<8Uu[Wh9Ek?ee',-eqmb]0'/Gj\%;io`8Ys_\X\\iqqW+OOAT(3_e\G$tqkt4d[$G$R*lSTN$4^4rb5i379bFrX;7=F?\0<pP)*Bq%+I2bQT:spIGL_-FAr.pM'Sp2ZE%Fq0?Z`'Vb3;RCna0S6u;&*+<$eGWiCNSo5f1a[f7&=:3UL'\eX13CDCPW.%0!"UtCXXXGY!>^mC5)952M'+^2Gj$h!R6d&gLu+fq%/<'*AXq[1.)bDJZ5Osj=;V!gB^[NNM7\cp)<&n$IoOt$M:d>)J8J_[6+mbKM^p"+HbDQPQ"0e/G2Sh2.eh04f,cVI=K;_7+*grZt%S4CF7RIWnA9>2.38Cd?X-MOf_9ajI!qW=g-W48bS_2&YQ<FI8l;um*<h<BgQ<iK=)5]3\2*=l"HBED$sLl_EN"S6"?!pR5!;*ed(%\=Gno+VlhmKVDJAbuO9&n0_+:N'QA417+uI%d6UmF-rQA%0_W7ANHaRl=$UuU;snj&k92O+bW+#TpSo>e+ANDn15X_T`A:,d+r2f%K1mMTB[q4n)!ha\*/hXHZ$/a%\O$o@KEiG`KEk%92HkAo+ZBuuD?<5o^4:;o/5o,JUh#XY``O=Id[h!>*@R`d&)p/W8dgH^D,<h,%Q:"Og.#$ua#;@R"N,)Q)VQXRZZ4!jI#_Nl5iARDGo>4QJBh='2121[lCRHkJoqb=_[$Al/ouIjlK1cmoVCc?"P.$GQgY+t0Y+0CZ%.h*CJHMjbS<k5N]HX(#'+CL*0='^'hW=PKUL+OCY*r#-W"HblGc[h't^gaul];A=0+egYN9*!sm&R6n#*H&,`7:<\V9gKnn<q&LZ%MJXUQWYeG^7SNrLf/Wu,G(Eq&DFZ/aN*mE':0\?d3*WZ*![:'&j!r-P$u-J2]7a`\>VAr@Ll"S<_$k$C&KsN1=B(`_bV3Kti?6a0%9!i?_3#8UUlj5YC_[ntq"/=7L1.O0go_pQNKXlBd+lmgCX.j]`%-<Q_F,4A,QoZLg6'N=N@#f@/+WVLAKN+=uDF@q?YoF)fP]WXB%djGh@FD5<I_FQ:\Q+7j,NefAI9r)CA_psIom$aUGM0K0.'UksFo"!$4DaJK@JPL:eTF->8HiQa?:/TutJjT"FU(g"AFj[5i=B\.D%:pat`N4kHbY+bc"lDNJmEq;tmpb+\PV1t,eE85<')FeVq.>Y(#gsRDu8+-3c+U)h`AI&DR68CGV%2<F?9`ls"e218BCmo>)oVQWG%FUeFcDFog2'Mttu(^=o1HE)bC9-mVsC#pN;QD$g_E]9=&$E,<X"gnsOJl.@9L<="G>!P5+V1m_u^/[FHUhV`m$m)JS>UThR'LjYg%@+_@aE']Qr;(6l+;+?UI+``9T91iEtMX`:,V]ntMb>lri8BI]q<YaLY0GgH]Llr...o`*unL_Zo@KdUt$A9UgUGh[CH[+U1NP]cD%/Y)l*=f;I%FsY`HKKI"O[O6\uVh7b\Wn>,JFX&FNg_W?b+_7;30KD4NP-R6M4L.e?/&]kN"-fPQe"sEVZ[>sf-O[iafd:mq\0P'9%n,tOUj.(%-"[\b=@<8!!cDk`K"Hi:&n:Z]m@I^HK(ZGQP@0dt[D8@_>hdBD,Q]`!=?kg6==It,cp6AkpQJrl5`TjAI3Nsn?gsq4s%F<+O[h9_a\"DM(L+96(J%&AQj.0cN"2T7r6BU`H2$#PQni5/2C'Q1E0L*BIK(.1BEgL<d@iiZC^B)4cEaVEMF$cDT@_L*iZ66cU(%`LJD;bTJ^"Vmh5p%.^k-!q(7?p5&gnU3n\gA5U(.-r78ak)64l%"rF7_lFLW&FbfQV@^qIF>4k@/R1Bn>pa'26pNd?RP7EZ#g)%=%gU\IG@A*)b0X1@(pVA.$LVJFk&/LI_Y[!Pd6qN$(k(k]!1d30q.]!]71J)^WV@X+Q=+m<Ue"&h0D2GY16hGae.K9K5T2'pHD5Hgf%j>+U&5Ip]ErtZbu_b)OQLrI>j=LO;(6<%qI`dG#>jK`W9R3-HX2mrPpb,;!c&sZ6?X&?oa\kpqUFj.,o6UmX?P:SI2=*TOX+l^AZ%c7Ct(56*o11F@[r!58&kU[!G5[T6[*aX/#n)-*U:809pUEPW/]Kt6EL-^G=ea4219l.+3,IUR$4-VH<(dj'<Q'G4P&V%lc;)iS\V%h_1^dGXdu.^)\)tU`e*P,9rZ`bE0P96q@>00]E[PK'>ut%'\$V-j+=2@L06#BquHGQknm96-qC`chPB&M1h4<OdQ2m,qP]A34rpm%FjVd1Mm:-n"^=hJLg>0KMn0);/>?X+_i%,Cd4IgM+VsXN-q3Eu0BlKDGa3guL$?<Oi?E:?Eo:?lT`f@h!dloarS\(eKH>a>#9_G`%$JllC1;U:aPRmo88^@[Z$t$M]OHLuTQaH;`+t#*aKih:j+;CfFmT]oL`>r[nI8\187QZhZ"Y^1U$[A"o*D=,FL^4.(/40u,$<#g0%>%6ZYE"(A>,ru=:0hR")(;q"#,tit8W5:)#Ud4i+$tL646n:aUb#D"H<]CME7q?@<1Vlo><=t=g&$%Z]?#*KgP_A.-RL\IA8V!Mt%3scItb_cfY_cW;'1*]GFV:[+edE:_L:52q`0bGW;dh?t;rZ)M?GEf$-QtO4#"#lN7*hR)^[KOol#jAbQ(RNg*Lr2UW9SbNfF:b0=%POAOR$C_Mrad(U^W\F2sQN5,<@UM&-O]]Tpb[!2q,=(!6#)btQnRqs"l^/ABN%+c<N*%A`#(dGf]!'#u5nr@3KF$S$Y(JF3*!ui.%k>qp8L'huneNoL+;M]j?Y8e#UU;F96+;kul2SUFIh$GYHn$mQJp+:BRghpLD;l9&(B#K^_AO<,`Jq,Z1J7q$$AHjo"&.*%N[;UU=%)g30VN!29U<1&C:(;php+koO:=ug=?'D;L<XeJR<M8Jn-?6t*[h@>)j'bHP3I**4X'J40;a&%Ut$B'$8VM%6FCCo#e"N*A?UkJV'%=Iut5K3TRcKc+9cT,=SuXt`<%L.<"J'W/p7#uuRM$ePkSL^AAJK30aMDL*(sINh6&U?e%qa;6DNe<0*<eV&H7+G::.1dm"9ocO8'%N?H,-8eim9=dFY1kFCUhYS>\W-sSQC*u01Ei2?rN@Cj\eRF3G%MA+331#A5=\@,BW\1*WID2K&e<8KOm(mN_`F:_nZXLJIe=E1-I%W*"$fc+mG$iWsP2RK/mlh=NFtd[FS=i6R').3I.qJlU@TK7QpO>+[KF.\KcM"/QP:US*\]6@;tU&E]rl$n6IBNM>Dp[>khp$4#6R%1==8/k.7O.XX[m7Kjh@8Rh/ZGF.YVBRfH>4ZUr/Lo**-g6j)>BhpOS;j1G\r$F/M[LEO=">mTuMUd-uDRQ+-09BI&]j-#N/4F:V[%l1NJg%&>1aO`_Rp-&0l!4$sOVQf`i?:+o<IMPjNfL)s/%3*J^5d*X'&Q'n>`Uii>#e4Tmq,3kGUTh!T7N`Hgd'<PJJ;R<Yc@PD(Q%bHk#ip4nD5,(sC3SNKo+lY%d%:7f.n+LeA8WfCZ..5""[K4'XiK(0ie'r2s$fi<p<PN=6LSCWiR_GZm;V.fgLpS"MUF)au5$DY*m%;^q#HqF`LWZHLQVF2@5fA&[)H!N#i#s,&LJ6Os`OX'ejS63s72?N`[9/l>JC]i5cdrXq^.MmrsXZ)U[4V'1@)k24V5ppkSY*>V$s%4Q8jO1[![N5jBm]7lr7m*EYg6E2FWf1@[a>4=\Fj1F_7X+=*`-!2@?oU`a+QZ!9>-![pJf(HVCfJC3s.!pGCDa>bBq_C\-,fs&rG%9h5kYj>sLaBXn\`U`e+]+JYD3bD$9NU4a'cpC%@?_H%aU11<,'atn%`OLRV.j;]U;l_f(BL$RAh&KU`:KM5YVJt]T:<sW6SZriC+%S0<1/UL7b/Ysg4d_?E75i05rjb*=aiig5d^V.,t",`<k?OWTM@V1E9T'WP1^7otCJ\LKn3!;`ZIR+I#-LC!KNb[;0;[$WlTEJ;-L%5k6B!crYKbLugoP','jirs<0G4j8G.TKsj`5[5Iuj^@Eu18Jjjb%q,7d@0;P%SYAMP:?e6s2>KDqHXF2$H(keMhq\G/eI.nX$DYW%f2\,h)YFH3cS*.eksL+<^aAB!5\Li3)+thW=I;P>"gWe`>#g)NZuY\1GfH/[ZA2knD(k9m>7C_)H+<6Q;5b=JHdU6L[-`Q[gZ#XX%So(Mon8)<GF%l#a)73BH)h',N.,hV-7GCQSGG_h7,b7KVF9>3S->Q-+`aI:_.OO&-;t1.O.FG.^qe]\WDQ*a="Tb6^8/!*sPtHRk%#i`]:(]k\bF+n.@[CM!Ffd*GW-&"d(.n\chl&IMtq;TmTMo#%M$onmpZ'Z"B<<BB)A1U[)jH0'E&AqbHZXIcE$#?,9+f5KQH#a*$%+U+g=YXX]b;ARB!^(eLf('(-G.N),D`3UX$X-nE=M-RO&.P1$#Lb=<j'5P<qKTQeuK?bZ*ZO:'=H_VVFGf$apE"F<!dCmp56Z9?+%UjUEh*;Q@l-cEj$+IQp)F>o9i6uW6+&Yh$`mk'J9`Z.\\_kA6Ee>.%s83&OU**R4TQiVn.9.YOtW!\<GPR(1+/K]T?YZlaE*$6q7%<H/"h!+TB<YEk+T<mf9UhAW@2bqVS"5#keSUTakcRB8uti'E22$AMk9/R/\o9#QfHoPPh45mJ\;*J4ho`/l_`#(^/Q$%p2jF]9Oh%PT`P#fGW6CkX=a&i$ZtTb+^TgKE\'Go=[`>:.:N\Q6hTb%0F*/.#h$]F;@7$7h_.Xom(!q6S+h5#PjHH#pC?.W<@8cYnRL).eaX8%F3mN*V@X+Q=+m<Ue'D-X7_>]A\J^+c+e5cjjO2Ti_E>7!;cS0ASp%8;5ek.]B,Q8\j/H<;Uk95FcJCmT"$8D3aB"ck:marr5KFDq%+Oc3AZt=Ua-fh":61[rU>[m#=^`K<h@a-$`%g.BJ#h;`%<cXM1Ce?Db8iELZ@N-Ia"n3]Z%.V<rZp8#0$F,\4$QD044'cB,1*I^3%'SYdD&c2OXfq\a,iCHfu2<<VK$-/&]4Tb=89K\eDS1J.783ZEX84!G6n8)!U\H/3MWX,j58t7u#K`M27R+g:+363pSM,d8ON,U!D%2oq^II2a*3/%/c1&:0?j*n_RT?!c_N-N.cn88lquGlf2'`mF_mMkBe+K@`pt+paD\2kg?8F6Aot,YEI1ZO64nW2^2\$thhZ(9imA%U_Kr'*mXg#Wt]XtL$92uE8I"k)m,Zg#1Gt%3=Vl!S?@Uq9fmn8_t3A^2N6Q!#]3$Eben[N+QQEkSL@1dMaiF4#FY:)eqRt;)mXF%%Rno5"$I_B3e0/Y$*>+rJKbup3;kHd8!.lo_jF)R"fF9g4+0cf.KKiA_+GL7"!JoBa$&TWA8>Xg.",QTC!)JEIfLA3$MWqj]5b/`4%:_[4QQ>gLBjng//o5sJh$r#d!ZS]%:+*HEE+k`!*+$?6LnpN>+`lNr,IJ!+s:cEEiq*'*nJ5EUfTp%QKEs-aKAdjDgjJk@mIblqQ%CP(4^A6fp5+O7V8esD7K:_7M(WCR01EWS?)=V=&OKu+`o-:h8`@n8mZAJn*B'13*3Gt'R:RZWRVK39cg/L_+TFmH'&a)f#Z0T>j?%bG?5>+6Q/O'LU:.-?l`u3Y(13J.43*K+KV\*+:>\)[TqX3#&7/N[$oIK1o2THFRS`dE!.PN[ZPW(g6W+6YD^iA&4iH#ijbI/iYti%l[/PY$WlbtLj1EE/[o44SdKJ%>sWQD!i=$5!%(U&j]3$kEb-Q%2#)K'co=?3j;R8NlUJKN1'GpuXk!bGO0-Id&abAk!+BD$Sr=(1%1nTdt7MhL`B-Uns4iY!>A3EAp:h2^1N\"IC8-mZrI6&<MMlat*OYO.JSW0]PlU+\$F_X#C)4c^`QlaKPToT4cYp^H]gbSoJ;[;u_%OJ:aWZ[>G?@WBn;575;*#6Gd-$Nn57!@=unXK$;:'Hm[soG$9RY>P^c@Y\p,)Fu5Z0jU?)gI9J2%7>79#7f<>opf?A6+>V6L`Z3)%>4NLPbl_a]UOG$a/K>"+;G&T/[$4mI.F4t;7(uZ(R-oH($kWt)D.#hO\7W;PMHqhMK@07$^aLK.&;$-JLTceK/>MAu,T9)K6i8Vj%"&^oTb?%UI.3XBB6Ng>Z*MfKY5?Jp$LQEm;K3ToVd@-1)N<dO(.A/I(,6cIkETpI1.5rY$9nm>#Q^1=B1E_XoXK#el"+ra1?R=/E%Q;;485RAT6%//%V1.VKrnWYgAaFWG%#e94&36DM9b-fqg:jKEsqM?Q5Cd4a"73Dn@Ae(8>qG%\@;7JjP.74JeYrjk`BWhfKBSR!%%dJat$@j^J4dXiYu2HX*]R#SNkZ%Q43WGXsM=ukEe^b&S=*[V;RT/,ZJ$.B/f$a/9Y^`sl1E@uDhnDHe?\^_1X,V1o@OpD(R'Qm&=%9QJ>3L0J78%A"de[P4p2"hE0DQm=5a"B#S,.t52XpIM@F8Y[tF:((F37K,^Y.An:I"b]Cu;N=,qa3ng@OaE5FS&2X.=9ePmM%W.r%]gsjH$5+ND32GQT]gtg?QK$Yq1PGG$l#KsF]NNsfg/46/fE-&@U^?9>]I4Eq"C[qLTdW7pU.btQ`1&M**"aW6&FH>gJ2qjQ-6<g*%QXDjrR%/>"-6>1&=(MHn%UPD<XrZ2r%\55,I\A0K<\rAAE*YTb"@4(K9B+rKLCZnA\@C;Pe#c-MgS(hk[?#m'#ia:77gO1o`ZcZR%#D-!FUCK7,Q5#?g)MgfI7@'<<#-^/?56Qe_]\;=4q^T+Hi.+]fM6Eps#K?<2WcX"ET'D)5.[lVN+iL-[6kSS0rLZ?sL#Y\.3#@W(%7@k2'ZAiChPmbRDd^ef\o,<5"c=$,C4LRq7p]\+c]J2P9J3h,9A9]@$!'n.2S*Ys+N`I8X$DP\+m0^'IS2Q+T4LbBU8lH;c^m?Sa%QDt3'MUY>/2'c:0FVG&D)$uBTXU\>TLcPp#kHg)2CHO8l2BaeZ4&q+Z].;==ku=KEAU*778dN73Pn9Z"6UEhY?4rR$SZ7?*&Jjqs%PeqRlpW1-bYEi/uY6IN[fbVp%cq_$g,<*[kjgq,fB=5W=2#!=%l96qu6RUXJaW5K//Y':98)(n;*89)SG]&:[\1M*&Vq^2;+Q9>7%2OJ;Z1r/<f4T<;PX7QMigS(i3#_$bnA/tlh\.jFJ_(RE0J3[4pU-oP3@QP-/;+(VM0ic^-(1pH\#I9"bMJJ,Zq5@JjHuDU#V?$08%9Ku>m,%J$Er"4Z2q7A,p<h7[b[E8LIO=G^:#M7+;?,X#lTGIn`!1i2SJ`$NW,_LmE@q"(grl>^]BiP1+dE7SPLi-13R(rV6S&S:&%Qu^:Z"rG+'0Tuof*\*A&dZcN:WMp6A\2DdhWe@4o?R8;Mn^-4B@F@gn8oOm+<h>3R(NG.2>&Adf[!m,KX?)Z45>cXL7U`l!Ngu5&%&9Y9%cOpMUO_C6S1D9Lp_r3Baq;Fm'1D1#R;)3CWN'sD8:-YQ&k_qphae<87a;Khs]'5CeDk6DH74\krpNFnTM]'2l\XtUO(VIH8%7Fmc#^ZFknG`<<U+nmeLBS5_cbij2jrClt+(_GDP.D;$C^ZFl6E26c\M#M&"1cnr$rA[&a2WFsq;4,)N$s="'I6]KO1r*U:<?"N1%b,VHm%E^l=I$LOZ=MDr"5Y;<Uqu_O:h>e-cW<H6@,p3atGX+8EY0J_^ekWskg]qJn$B#6YoS@4(^_`T2(uT[$E7A;r*Qb)E8@<hf%E"Cd#C3f)h+2ma6#U#f$dFi)UBVJ"0Qc\7tOV$<38u:KPWl1(;$1Qk.8L.1e4^8m9.8uE]#1Ln07k6p<EXlKe2&q]hJQL-jAYEBi%LR&+``dl<aP^KboZodHtg/*"=Tj`L,/SJ;F2KM-\"^X6FQ@q;i+C$uk@1:?cQ1>oG,WMJbGD%.Ke!IiVXkaTS]C\2GK[t#H"o#<G%74:L04$q%D/X)N_P'0Eqn'Z.1$a!bJ8ks#A7;02K\pFORJ3m=jL1.[X"l_)KI5$=oLU,RIi[nsK7rjY`R%X(UNWgk>$-*,k9QUt:%Pm0]^!.IbTIta+,OL;)FoihnL&ClSh2*j:N]'6-i_stGAl&8IV*NQ<&@H@+Ni)jiLnH3NX5l-NDfSm#fnq:h8JsQK*(KO$n+q>S6%8Q6B(MW-8ia:XP!gf(>Rn<h@un7J_q'Eig8!SBPcV0F=Zd@-1.g/Gi\L,r<r$qZ8DdQAKT6b`an9e"s'788o""/D_)$"KbF+bGf.%K4)hXJV7:@JcuK+rs!M>r#<^6qDY-K$Ume3lW-OuMS\pH_''lCa/q[[<FM5T02=9]/!(^$>f2Ys?@gf]'V7Ec6a9V'(fEYUO*cQ`%o3dUiks-kt<gJN1Ku=O3+k&t1=uG-sJFVVt^f2#FS#g#e<lkSW;ks\DD_,H\#N4MpQ$j[G'?C:q>bMuOaT=jETLp7J"-%`ugF+8;%o'BaM*r1;I)oT&(qZ);Dp!QiT3't5L7j^]6nUk)SN?/JR)T;"\coc7P#>\BsI3(G!<FO8eXbr9j[&_pFd1:Gd)`0qh2fZ&aD6!oP%67b1.(&*YRQ.+'P!\g/oW<)#K/tSh315*0[,ZDN*Su57;)1\H1ld7><UZ,C3%RM-ha9Z6*1CEAKA8572rRQU,#R>WE3oPDLCHRCk%LXrXW/0Q1la7Y?u<EOMp+hT;V-HZRsWqD:u_%dIBINo_`ppbnfb_(V)#f-^u<gnq>(pS`ra>QqR<\BUGDQ&Ot$7?5!@Y`Pkaeg8Z%&EH3O'-1FeKjZ;i^:oIJ;fmCM@QANe),P?e:IBh0&^6NF:.,A26FGfX%%8B;&?C\X(6VFgC:_@kq-eAF<Xb;PpRp9hFajFLB^dd%%.&+NmJ_-`^^Hu4mXuSN#\oc3=J_-_C9\j_aKPZh#:n"N0Bj_7PODUd-Xdh#AD0=2,3pWQFpgNmoNiD5Np3bBu+(iicmJkGf[j,+[%_qL+.bb8MO>p:`_PC!WX_+A!(0%ZT,2i73YW9l'):AhE0f0t<7O!G>\Yj`pE-\@HD<O,G@c]s4.T#8N;9O1aAAG3^?AG/EQf$>Zo%$^n^#XE/`Pg#lMA=M@[]&cQDO(SQ7'r3-!en@uDcnA!P>n38/^7eK@J00SPdogSXoPL>0MPOST0[sXm,"GQ9ja,9!V3s7(i1Vstj%4Ueof#^`ir`2j6:^9DrRN6?k[Th;=@bUQ=RgbZh"k,*L!#lPl.RX.HU,g+2CC0@I#0?$D.J#9C7<\,KaCXnL+oX\)jFhLiCD7rsr%P-7k;`=#U[&lRT<WdS*T<BnRr=qs<:<gAWfhUZIB&*@Y-PT-K6YLjX`4L_m[`[96(J$.T88KD#@S&d3M`,qnXf0WB=CLLsT9g.cN%Xg-[Ig'1Es7T7]MC0qhJRSJhq/3C%T4?kc3+UT`1i4*dR*usjfdW*)D+;3.o5(eR7n1(Mp^h+c$5fZUm%;7b>&p/(@,1m4"6'@DY%;Y6D]%`-/*S=<_LXk9*V03ph!9bI-G`G(4@Io`"I\pmbLU@+Y=VPsB)V((^/=\4L^Io\b<m[obeXS_2?ggo5*1J^m"cY6j6^IN^>%Dk@^4N\4q19UL2_AX(=b6e5to]MiEWb.L[9;#,;"*1Cp:e2\5'PVa[nlV,%E,KEe>Z<DS*\NQ[FiIRsZjb^XN1/n,-f^9bRotB(q%:u@c90@fe`k&>`%oGk$qec']Y/W]dqb'U[KSc0M=Q\p,W65EM?3itnD-GoW9]e\St@O7q;fl<"6`jZY&@?KiaCh1aF+n0Z==,Tru%"Pd52AAj/:`lR7W9q_CVE2!KD9pCdn<:cQK@uB#5$+qDLcLQT3[&WO3=Fh.I2XV<?QCGQh\RXn10-U"IQQdTB]J3jV%PN]c5/5"[%dU5Il;eLAKd;8&MkP"<p?es?0KmdZ'k6uB@[gt+-hkT9%`nkY`KtO[CS>FkK:5T<:JQraB^K]u9(MB5eoT&+,e/9oMAFo%qe8o5/%]$R96YLpJSlq$Ui=&)?h&6B>OXJ`ULE2l&W<t:8)Vn$i4WZ\Se+?d'm#SUJR2!q0`_0C=(bCNZV9!a)GFaiefZgGhU3DV25[)2Qc%gpG3k`WbU$03X^@(Ob[meU#Xg:KO[hg3(pQjDi]WN45T\`+r>3k,VONjJu<`mCUs4eFFag0"aD=0.[dHa%NI3O:`O?`gH/=#FrK3%Qfj[H,&A-c`QL2YAOu7rjDnH-+K+H\frI]'Rk[r)"N_i\am.>l&b=.d]sD%GNah/S]T.dG;0<[OkI3e``.OZu*=ra2KQKIAHpna)%5A;mYqt<N^o=YSi21/mj>gmmf2Go309?T)sF@,m=?!\DUpWqVcFoLErM9AT>%L04YgmTRK)lSc]:Y85areN9H9,1.QRY3M[R2N'`%+L@pPShc@.`F`__,XoVIBUN+CV2?%L4p8PQ-]OJ-]F<m?$*'BGE/J;Ep%U>fg!:IiInQrlNT+eHbpJqd#%3FD'X*Y'NDl#f&1+1C%2Q`+DOq\A'U31K:F*qKg@n5[+!cgOEB5kp0W$^*D;'$%4#>^j6kj!<teB%o4KCfF87sP4'""uOs'p#%d5C&Z,R4HfTP3=F@.S$3X%5p>obIpjtdX^K:gM4R?W=g\G?C2iU(G\_CQ/cP]1)7.-7.rqd3r4Xc1HiZh2>f+G*78;%^>A)@0h]LSt$(3>fY'"31[hXhKaNh19%3AcI$HHM+/rRj\!o>.OP2(QTLP-UhZh^q2O9$E8#MM.e<BOT%rVBVj!CUB<C/XoYm6eEtZlg/Y3lG](6WBBj1je=G83ANs!&/,G,%43lom83S#8N(bj6MW-$9B6"lcG2K2ae*d*4VC3?mC8!L>rQsRb8^UR1lI:53'J5Nl`F6:Ug-m1S_VU8T&g=/-nn>TB$E5r>/&d13%m\h<Y2I2H>0#hFNT*:?HdqVF]l+p'7Bp0egZ__B,>Y;p2P?EG-cQ$*tl7-rg1N8aH0aP#=*:*l(<c0((JP=6b(\kGo6;.YhL^?'=%=bW;^r^71G1OgTBlH[>'g!oYa=UqL4@2Sm#,iDCEP:m5rl&q,j1V+h?.[kHJ8@Ft/N>R%$<[,I`KZ;HZ*Y^IZC"2k>EBu!o,U8ML%B:[\M7jtFtFO.U/\IV>X,bt78qlg>nCQJbHk1nWRUr*'Rnf*Q^VN58e%;qCf,t(HsKN0p,Of#uB.iPV$'oT/VPUs"U`U]O+mKalj%ebDAaj&bT4nFCCl)Go^p)P=n%8Mr]!cVCM1=j<L:j3sJZW<.?e;T/l%F]-0`3d"?>#Puh>'d)Yh8N"6&WKHIUEf](r*>_2VCgOA*%LO^6V"d/T,p%fq(FA]e%'OCMfWRLJYC8)0U'T*c,cY@,;4eftQM5%,H<16H.=ss&u7_grF0.^Hgl[-Y4(LtZm)&KP:s(3irf^\c:%o#nO!55<`J@)h8o)JZ:ee4b<G`fq2g@Tn[[F7P5`P#V1r)Of7!jj%uE4EIEM@1Gj&<tfC94Qr&YD1Z'3;XG--WG<16;V!2I7XS`'%`fluOnMF>\.lP_4[RsFS>`+ih3?B4=r_?[G!ak4$',aOtfcu93Z2p)jYrcSp3?>^E$_@(/)FBU]&5Yh$Tj<KlTqnMaN<4t@-$73L%8]bR#l9$G[",NTqFgAjlb>]MR<B[BMBnRCC1\et>p+"j0n@LsHGG\B\f>CMa_H<"`C9CcLL"?ma<,bd0iJMM/A5a'^DHKUblcf:n%gi1unW^+o=H^"KmPI*"aJ?KY*mjR49r4L4rG*&9XmD^Zq:dcFsU^?;`.lB@4CTqoDQ:[7&g![6&0#^op%*&DKrUg4l>C="I`?)5K%9"J*:E3p#8CJW'J$WNZ3FFhRT5$sslA!X"W^&(LKf&Hg31?eiTHIfWT\NilGRi-KkF,1to!PrP"&e&b%MCKi*,`5F9;HmUb^>Q'u%g!kDNi?KA]L=S`[6]Yi67,&t9ROpshM<1!_(t6442GYmU(kN\#oID6Sns]W>h:li1jPdfN6LEk!Q-AYsQd?u<oII>=)AmD0DYdbR%/Y*TnHD:u!&F7"C<O(E*kM.hNjMdoU3N+Ho6U<aSW5e?!fa"T0LX/.lDWs@_Lu2e<km(+uO$D!uqtMCbQef\(o!7KOKBg;@duX90%%\J1mFo(_DMUpJB:lqu1`Pf/n3QqNMc@K!r20n-S1XLHrM3KB;f[3Zk(!^J"ZiY6?'n?@]<9#*9%$^ps1a`N3@<)^^VHN"!6W#D8%)>K)7Bm(O/\247DV<27lVHnTedGe,r=<LR^Ulc]">T*OlKV62'ju@WtBT8j!YnT>JQ/,@YDc-je`SPJ.`k<=JOG-[I+gWo[\7Ho(%nQGcO;GIdTQ408P8WT"nllTXTZZ[r+Z]Wp^1Z0htjNTu1;'j+pl?UW+f3X'A:^%_4j9tG$K,kP76\ufq$q95@<:<9I,H<u'q%:Gt%PkYhfLAKgu;unLi"uC\QNbSWZm$JsD<'4\^<)Kb7&tbA7-YR+P`"gH+&NXe%bUF"fT\j&-Zg4E*^9P#rBpRYGrP'a<mKFO"^qoUm%UmpR,@3Fd!VO\d@`nTmsb:6)[fcV'7c7ep8Njql/8&H./02j*EikD+<f^*[l4oNbdFB#0q.-T`?cfdZ$+)OBc7=)e!W$^4`gc!Y!%qgDYsU"7ep[:9%!k(9[rU".SsbfgGorrQdVci`dci$mK?I4o)PR7<-YVJR'Z<R^sfO++A*[<EmH=fN]<baO4;q(bFKadV-iGrRfk%[YZap]-KS_a5jlq]Go)D?Ep[cGuXj0>4SD..5ggTi[4?t@/3`9%h]MS+"rkShRb7e'"5&YM2K;!j42u9KYJ`5*p-Qo->tN3H;6#(%Z'&_M[=oL?Pl@r/M7_$".+aj]B3I3*#:B#M`Y:a225V6`P7a"f);CEf#t5tKo4T=dZUpCDeYI_"Vj>(^C6]s.`"gHp$f]6-)\uj@%:VXBB^MuTSGX\c6o]^.5aIMDdKcVD(:XR$S*Ia^Gi;"4B*Blj6+Ni>MW-QW=QcLCarlPYr:[H'Y2Y*+N0"Md@6P^6tdRLJ3`/u)A%^!g+LUgCB,GIS3Q\q>]/7MN9eIn,rN<E`e??!0FuM))GA>*bT<FC3SdU_8n>p:ce6Tms[`.UnJiL=1ih<t#6FbmtC=dk.r=pd1R>%8hZ>T#-?`#U7TVi(^Aa#,6j>i4(9nUkZN;Ym;XN2;;RETYp]5kUG[1Il7(M1i37uu<-LQZS#`^POA\q%<?2*MCT2J@/f6@>7SZdD%RQY)`e.PA#8LdF<Rb#UB==Yf>S)YP?p8V'9\XJ29@!Od;UEiN%C6YaO*RB9N.o<?>84qDH`["2+@N)+5F/l*2E]RhM9dRuqEbZ0B%WKrHAT@iJ.=A0VbLeQ,UQ;t4Vlg.Zs)6F"4V0E9Q-6_N1c<(X=8Q-cO[)OWYN0[J0nm%i$RG?i03$4K-q)H&s?f&+VG=+@u],XB.%;)J,1QXoLb4Phj93$fPJWaaFuW;MhO6!A<kQY_`N4)$)cO-`O<h193P>%a.-Z9Q0qa#LDT^,Zs,i`+J(*9g5_EYg0%kmCOh@-OC&%[:$J7$5JiJV,0$O@U_S_fU\tA=QsCK.qVPA7"_o+CWBs4,YfqT><*H/Um:&63GCcae%.pn2O[&(p+u\7UI4ji+>"kdhK4TXaIu=r%9bc=.ZACnP=/_TjZuPP+/cFbd.#/uZ5pt/GSA&VNM`*Do1\5gG?2=?!1\;'u$/uPU9^SC1Yq,G/SW'ME)E3_[Ai'.Kg,k@Jk_tU,%C-rQ_RY82eZSAn#[O-*7p2K<dCmugtZ__9)>g<sP&u$&:?<F@W;I;0pA-a+b`%7Z#"[m12(8VeC\A9'k1<QHuCEYOWQe5%b'FE`;%^HW5[W[OfZ`;4,?Kgm:"f@juE#,sEq-sC9Hb<jV\FE_eP@IL-XP@JX_I\bmA8DoFkgISh7H]"O"a>&%`0Gn^c6E38s_@"&Y;RH8S%MpXG4Tk0C_A@==sPC#,&R?((E\Q@Z%q\"C$LEg<q9]Tlb\ecM6RQ;E;C+:)i<n6/"8Et.>N3.q7+;`jl'^ShJ=:,>/5"nF5c"gpp%kj+ggXGjfq<pTR!^J`CcrCXbpm8rTGDSK)Q[J`]\fCg`fI(*I^,`e$2nOm8o`'GQ!&dJT!2@%3BB(,FDocu="J%gc%;km/UlL-/G%@eB^9RrIX,.T0bKRJ</<N4;gMK0^B_.SuonTS^<`N/9;^;Mij?[<I\24nt0>4PGHPJ@mf1q9$`"@>P.L5(l-"<.$<>hKXlqC-Eo^%B@i#oUqC\U3jhd]3nIcHFS_+oP*4X![*C9g2kmQO'hhCSkD]^ZGpCe&&Mcb6HgQj'9<^t3:Wp0cM5Y.XW*=!Af=EgG+kMqjE^X%@%H)*QkfqrSLUh$qk4m/,`Xl.gds,o&t!BCG(<f#J=#g"0ufKbQ?_o46dp*rhG@\h6,rf,e5fY:;<QE]f%#)_IsBXHi&a<X@)C+3=u%QD7uEq$@D8Y1P8",PQd4,bd]h:UnLKZRg,I#j,SuMYS/B;(_oAXWW:Rj%u2UlJO@dW=ibUASAKY/2MW0>DZjj4(9KYh_ZS>TdXj7%==#IsA+E"kEE%qqMTWU%i<Rm":(i7`)H%cTQs*,7L4!ngg2H&*@k@WYrNSAKOic%X:@)uZbhc`J0NRPr_O4\g"K;-X=s^46OW#^I%/k1h;QS$2%bgo18I>eT=rK,O-7?IdINJqD2V)/]sHHba']/e@eNn+rgh]=Y/##0r97\5dtrN3n7Ek/rmGY1a*[t`DkDV!0V\<h>;%kSbnG(Qk;K$mZa.1Jc-[<lpGdh9tqcgZ.>Caj&'[mhL0s9T?YD7Lk-CY0Fs2I5*,e.89Z1';d=u<%.&EEob"ZY`>+.DISY4$?gH>%0Pi.Y-m=M\lGT=Db.1E+4Jb`NN9$faUm^er"B<&gE<6f1ei9JNF'><l)SG\51hWeB".qFW1"DSp9hPRWS!F8RD/!utd\atiUGo="%@pXFpTWB:&ZQS^c)>WPj(pC#a2Q+p0Q<ICdb:b`aYS;Cl=:kR@I0nnuQ*faU94Recb8*ZA<`@C,[<K*=FSGIF^6Ul1eKpJC.7XOj%A1,f-:kj'Ad7'<mPXm)r:m+GBPj"9&SrfNf76=FM0\5YK(RZM9<:]+)U5t.Z/U=qAPWZX"J`;,,h(Tes]eD+.I!<g#W-lLA4"C^/%<m-ARU^LdC]O7TXg`:_mh(RM*b/e0E=XWpWpmN1mO)(pa^/Pa=9[`('4Hd&p*V'n9)fd:ur3ut#'MFq="Ks3$1J8Z@rnX\i2bb5\%gG;PC9\N4i#.*t*Xcn+]'=&gL+gDjWDO,:tG%20iU.=pR3&d!dZ?lb;\;?*m!_]d-L,C8FP``g8:d%_(EKUco_\!315E(bi%>U\0%lnV.(<9tU6S+*O^c3;'F@<4K_jjO@\aY'/EW_:$IAl(eG_:+=<\kb<4,\1s^=Mg.&7SSLq.h]f\*g,>%>@jcj)jQ^PkEhU#FL'?=%=6uL'0cFs$P#,8sh4Co"Nf*]uA6A>F:?Shi'/cj]aJM&9N5a>=1j/;GEA[[?q&GR>1Vjgb3k%UG8+8lmNF(9'80kng!TND)l,.mt%4@:C*)kCIi`M8GN#ncK1F3RgWJYbk92B".ZhT.$:d;17X9^HaCqLd?2X:\-Vf&b[llG4%+YoStAK7Bj4;OGkJ6VVG85s4oY\'4(L%($IY`TY^u/Yo8`h.k6>aEj2;5Tad`TNJ<nRbfi4iO]7"kh?A2^/<BcGgrtFO+,+Yef5q_Dj^$>D8;q)D_6'uM&1B^L&_abpA6q'`%KZno-Z]I2qfJjm0Db_@&c7GTAYd#"Br3"],NR'U;_N^KU\(TFbh5;db\BkE*R5"F48lN(bW[sKi+ZX-.f3Sb7g(T_5Ed6bt<147Q%Xn0_+,.,3ZBeCp%T-X&`I,k>0e*K--9PO`Sp7crq!hj+8aot+5bEND<jH0ls9^+ghU_V7$Bq8d7>#!72ks3Sjj`DWb,iD8XB6H;R%_N?ku#ubI]0ls;"OdJ/YgSgR/6bSK#bb<TW"B&kWP'*E@Ojr`8Ca<VQeCmI;*,9=9*Y,S9H;6*-C)]D58gdiJ04hbp_cj'b7Aa>T%`i3c8p$>B&:MfA(+]mp>9/^O,Q#K6lWU_L&W,7tmEcX+m,:V;>4mU&WZNH4G[o[ob3NFBB)UBY[L]_.cI5IRf=-b5.n[6SFbu=0/%]&DXI&f[uCX[J!*ou7h\[j"<$3L6H52FfMX=aJYUjeRpH:d1EXoYTHfXUbV?k(ei0eck7_Y]ZAF.;W;6:?P[RWhNl+dP:tf0N6Uj%OXY*$=sgM.8LC\OUWm6ER+I[pf(LDfFX9HjQWNitDiFS#=MZJ1EY+"+mIfHSP6C-jX@.kgHXkj,Xb[oVa7<h\F!Muo2`nh$M*3n3%bcc"<G$A$!]<)E@Z:<B3WjQcb3*"=R72YYooSlCU.LfI0<CBLfYGt(b1f:Pn9;*eS,G")nmn^6F1:EWt??:J?MmGEu:=C`ULT'cZ%T?%+fZ0Z!J?=D^k2rs,W7I@uNmm5qMLi"Wh&-S*)!sk`tJ#G(R!6.q0M@H;=CmLN4AmV0jT4F,j]Wh-B5Pc$5MD#%ch014Tl8r`Z%\GZKM>J4ROMd$R?k3<[JPsm(K;HT<\To.#pA<3NsZS\d?bL_KR)WUkm;Z;Nd5=C@lf,3at9i":e?W%`0k1;GFP2TK^HA%[J2e.sZ%AkaQ?j_-":[7-6M1P)-?D@b%2H'O8J&:S.&D:L4qj6h*P,,j`YeiV`aYIdmOH(3m_AF61g%bFsC/l*4K,.Tej1fW7PcubA`:?*?A%\W^$VP3(-!cHkIBM\VSFXq"g+fd&XS$RsuY(_c"##He`pfKA47D&uEAD0JsL?6iBf^p+LqcF,OK*'#NY*Z`:AY+<h"N(fP/F^k(.%>AT5CZs/W^'f7]g4uS7mK2<f#7R[Btd7hq"Bbj*u&N5h-/@?X0_jZ6XPB7'\-L$&Xbp4;HD_k+CXHF8,Q_J&3O5>8H\6O+$V^M27%]Q!mK?J&WHL&G.\f\beEI4[+:P0Nn"]=bAMjb71talS6S%Hj&-Nb`oKH^,E8n+&dZ`p[`\qaA/?l:F]p'*\t'Fm=MkRQC,_<DB$1%+I,"\5Z:#1XJYDKn1dk>*r)G.<KFfCe>igPWAP2CXn2G<X=#mb?*X,e:i;tl0VhnCdR?=8F>]7#LZnl\;S;(QVMs_r6Q!*\Xb[:O%*\O:+asa*'b&D!C5%jU:Q;$n!@INOG^*sd+5XFgqDLTV=T?+(NnY@WB7^pI)_EG4?&_R)_R_(rj4;(_kA*d7hEU-=EhaC\+2I"X?%>*"#D[bU8_KJnqLZ"Q0V0%TEuTb5ttI'AgjbDNo?2:>^)DHP9l9gUpGV+D72%Yn$T':7tKi\2+,qf;>GC+::,9_8^N,bp2eb<!'/%H:<j+T(IoRn&>PH4?c+MMiWX3Tdi5[^8n:1%/E@c;S;\.VM+FpA8K0(6^e47rVXHE4<jT=bYk`ORb%;r].rAsn0>:_ms%[g1bhHP%&d;[]=+VPhi\XLTa"lDlBk##N-H=+q@SPo6iFq@1Ysjgi/#UL)DN?iNE)"Slo"nYKJh#DM"3C?]@39">hI]`Tb]eN+cK<s.G2^V0%jC@q-iVR&_1HmNo"G!8,ImrRYHQ-ZJ-a%VL(6RJr>9kZD"H$Madh6Mr+<:E:#K@SRV,(c>2_47cE<s6>/ff_ohr@<6,4kjYj/+kf%MK)Qc@baZ57!0VM<tZO0e@QtHM:CKPNih$)b5$H\mRs2!dmp-kHm-5q1F0'n:Tn5`cDLaJ'AZHGMCL0p\dRg9ado%IA,+fJpPt:>%=m>hiRJ0H3RL%HF1OE)6`)^r#Fe6\OG!6)SN%rt]]5RqlE*o2gB"CpMN:'H;k;6$YK4Z^k_]m`umV3=FdsWj$AhDj7U2NN4(IiV*%F`."u*mG0g8FaRfe]&RQB1j1RU@UA*hQpl)\^2SFcu9O?ch7X'U#SV`N'Bt]=pR)l>0uCakFk>$cl+C19?SALa_#6jB9r!EcoXF2%R]MnNZ6LPCj6O-0639Q##G5S@n#0tgDSh3fD8cd$&Inr/Q,-9Y5*X2t!0T)SJ10r<HAZ_V3*Jlk%(+,SZ<NchF3>S9j,GN;NFBeH%LKWCthDlZ'Yjjk"AQ7GrIT@;0V^H@EM1hW<pS*u=\3%)F+ri8-#[t;/`XV7Q]2O_[,]5S\_^_WB)e`F<pLl@pD=op\(&O/=^ZB6!%@)^>189?LsmQdq$ak)>>RP2BF6t1T773[gFh^%4$rmk'n0'k64GMo(fb1n#IYePRPM!Ok@GDXZ!IEB7]m#\APAeBppp*c=t#T-L4%LJoqB!(Si':jaXNQ<AmP,"rGQg\J[J+p"ZI0qh=.>gTd563oq-KA-#q7OE&J&:2VP;[C@UfYJQm"j+:`W_6&h0u-\=0M\lJ&3e:0%B7_h__P_E`E*PSs'Vj+,PSKtQ<@%o<;+_B`Mgls`E]t.i]*hQ^W:u\3,:SBA4Xi\lM<.3'f8eq(cY#.lm"LFj39)5F67r]RH1rG.%Y-V?+J,dghp1Hb&PK]\B]4\,aobbMYiF2iB`b4l=@nj;7:Tk[r^OL`LO_&&\ot9FQ)aT0FI!A#*@6)CGHH)[@a9_/%/PoP+io[`S%Wi(=*3bJP7'SD?!FXn'PF-%!dcBGIH24p3#l/2$eJiV(A7[UhMaS;9-4u8pC@F(9*:[GjQ16f=i,?qEs6f&g+(T%a+45`.n+&-cs%.%bp0/]1W$efuGonqALo022f%A$crkQUR("e^CeLmEq2C>=83:k&%2p9XsmkA5$?lNe6;gYKW$4jHdMK/S^V(<)MLg77,G#8=2S0%:fR7Ud:h(f,2$KUfe#YYluJm6JMYaV^T]BUB2,F;CrbUWY#d/>c3WG[jh*<='fCDkU7t;./s;lbWEB\E[qW(@7C#LJg3lO':$^lS%Un9MG,d(8C5[NNS`^n34)Ho;G>sBCGMqiGO(-foH#LW(*gsq5&>r*7o@V[0)X2d$,X0%OaRLM*Uo?4\onB+GmqSI8`2R;#UAHR/^%N8:-7(q&Tom(@mI?oEbnWf`+]#"Q%RHDKJ%%tRBT"+j9e"].hq=,D\V&i\fYOJQKp'Wk<W-2$5_0eqhJ([SiCNSF25afl+lU<l/P%8RX=Tp7(&n"mnmEW=HI*:NZn1'eCU="Uig:DVkt0YF`_JoBp4Y1_](UkP!cgB$Ps6[jRJ_X^\DRlFAV1Okof50s1A[f(#Y\lM7pn%)h3<nSFM"!PgL73b!dP>;TM0ratgk".2P_0..LOX/+J"X=3e.`)>lI^o9,71g!QoI&u&\FEE(,p,jOXOq<XJ18]7kfGENL]c2f&e%P6CNR:(lcsQhj7g*m)K8l$:Q)*un/L+ij84]Yd.0s.dd]@@&d!+t,5cGkFS"Le&!i=c,KfCD(YKG:6n@q2qP,GsNA;E;#Bp3h0WS%fg+"I^Dndk\5]*a-h@:_9>AJ6o^7A)'?^c:4%aS/)'`YG#hbG(ZapU*E?f5d\%t1JPq5mZYpr1/9`8R^S8D.,<]:O9ju6L4)&Y"X%ldQtK'`&I@m>?=cS4q@fXAKeWU7B0`F5i_>%<Wkc'LN4!-DAKpPIdDFrTcnh,dC+aj`;W:j99\cS.(fR8#pFnkKMe:62P/GSsX"1%S_7gmQt5,?6Ghn>L8;<m3=@'M1K*C2AN#M6a;sVuOK)!kP9qG9EZ5GR84g%SL9q*pes+rtP9_H\V<K]jLHenndX:*F_K(N$&BsLO%WA-tXeC,6k22?MsK?NC22q:[?)bDoNieZ\'aDQ#J@?$dTda[(&(ur$ZeJM=YMM=&K21A4Oa']!E%?2$_n'%;*bN%[GjB@WlnIE&f%EA&Ii`fu%e9pX#&N*p<ZSI\EVV,O?Li(K4K0`c$f`"shK-tSmIkr#fkL535%PrFRr,i<\HokEsZR8E!8od#0)j+m@OcYE('\W`"Q%;OrcKdNkX`o.4_<LK0d$I![a+VXLj-U("/iQ=XYg3<fY[/<bA[?Te//S6`u=s5_jM5'(U%J;54BRA.'7BHaVU_("CD^k5!+mG`c9%Tnm5<hGU`6Rb!n'n+(P2l/t,ImjpRU-U]?<8:*EK:;]\a,Ed-</B'/%C!+N:Ig'B#=]]p0)s:Xh7O4nk8]l3p5(2V)]dXiEc"Fm.%b64?F?:/KV")R3YR'?I_CY$5i0$gYnB#4MBDq53h($$?cO%K\h6Q'95-`Ku+-OlC<6cgTHa_Y^<c7IlIW(RnE='o&nnF4[Jr<GPH%R*tC5NbQ#u_9q7AIrHN1rP=&^l44A37=B$W3)lYeCTt0*1<EF"*ul]Oe&j$Y&9i*%&)^*+G^U6dpI%TRo'e$sGhT#mH2*#:gfdr9%^(QKRRnDf$$h8JuVG_^769K-[lce5Prcud>QJX/,Sr7KcGVlWMD6ujca>`K]Qd%I%-`K`HJ@jr:"nT<?#,DW9C@N<"a%A;8Z:Im!%RYkEMb<*6M?&?u[p1E%H%3HVl4$PjX$-Du3'W3N5"aG*/ZT_1+J!ME)%8">:.R+_I;uB5'@)X3/R3X5L/PV:oAWCV<6T9L><\.Ur%,K>3Un\rS+FHrD5erpRWl\#(m98P;`Lp88UaIOnO7Lo"I$0fN3Od[9s/KS\/g5@PGPcU1FkKNMn`3jqRI!;i)R:oK/$VGFSesW&>%1NVP`!itOe%]?j<AmlZSKgh_j1_iqE.*].F;MI_<Q)<[X<cp6#U8tAYPUr/uFagkIpr<"dg>>uu^V87ufAGk5W8HS0V[I-Fl,'tg%O>-1@q/`")J"B`eTC"C@8q0TjGksi+G(C/Ln\/;%hpQp/[&!S2%/%,ML-=e@))eB3kNC([:9WCF7!A.>E_JZ[B*S5C!qH=D[f*k0%'8Xr,QSSls54irG+f(.>p9>eCk?jAs`p\Os5Gb-eBduU;DBLEU-tSmIkrGjcO5ChU;H<1CAXArnOZOGZfG-EfT>ueSh490@qXZ"6%GA#>pO8:)EGD=W+?I$o>\<jNPRi9"c62k[`3s_QDg+F:XgI*KY9h!BbjTJY8nA"eBWV*@Um"b-FN1J$?.'*gtPtX".TWim0aRAI#%O8:J#YnGTUKH/-20\2@h?qlFmVt"rl.+g"@a`;*!kNDgUXA/(oV0HF/'XE5UpgYEfhc#lr#c2b<jkV-7hURp9@mn&;.ka?HEu.FK%E2:R#$KsejSOsgQ_`\Qn#YO+Q<`5B?'WptIW0!;%mFM-HYkJX"l!/q!Kp@"!Anjd(1%Dep?a^[CDJL^Sob!g3EN)`1Yt>V==uDcE%>\+OZG*i#d(%sYqpZC=iBbXV79l+j</G[EU-4UXX[Y\ZCZ+GjP`);"pG;I+kBHt`72QI.jSkX"[gh?;J8;_#OVFpj-mUcrm$f@Q]%n0NkVd2<<olAVPZ1*1b'6fqdDEl`Ld_(C"KN2<V]FQd`)&]V_Q6`*cmElc[s7lb*@o=,A>cTKO1IE<Wonl=9Tqq=))e[u2e%Bf,=%:oBfNEE(2PmVtWj`HrRQ18%fW?gXKd2r3Me82ji8W0B6sj?P2#go)Xr3Oudn+Qk_g55LZb'B:i/'fotYAi/]V,A!)cbbML9.V\ln%Y0<GJG$L_F:I;QJ``SaI9e9]7BJ+>67?We`d^.4NP>JoLS6sp8a2_UC!%BOT5?*Muh'=+@>YKY>'Gl\j,)+"iktmXp/!`UE3@G)l%k=8?"m)_OJfUS[FBj+jr!$)hJJ6$5s?>ik,)69]8g7"Y(W+Oa5T,^loD8f9\A2ZY"d'NNs@E"G8%@'Q:KYsr^gJm]RM^0OJV.Z?g%M[Cu,'$!pX=FRlD#*V*p&TdEN"31gmQg6VhU^hK0c79O\j$7*#!-/0&6>@GE-13>)JTCcN>%9#+6Aj?>jX`G<o=4#TKk5JfQ%NHq%FcBUH&FM23#hPMtE5$?(c7_0`k:6er>&k2B<t9g6@e[EMbs?SK/I)cNDkN#k(!B7'F:Zj2)']ODE*r#pG=<MT2pK)L,<\:?.F'ju%WLuRH87HWR7Ns`>1/hCoIhJ*;c)I^PJ]6"+Ratto2I%Zkj`t6@dX4sm-XgcEUqE/>\*(0ppES'U1<SQII5I5dUDrokrM-6T?>+M*%iZD[r9;[b\;I5E%lCW.p_IS/WJAr8Gl/>/h5O#Q`\PgbN86<RZf;V22qsE69Q"f]MWD&;<*[)nX57'@6CJ.I$4-$SW4$Uh.aiNTh%ooMf;EbI=4JWA31k9oi^ikj!Q0tQ/S\=d'o35;#.?X--ZpCsO+'EYN)/uZB/!,?]/%:Cl:mP]o"2Og.APP]BCiRm`0F+f1hS4ILV%Oc$U6-45W@n']8k`.[Ws5J1QB@epHqe\".@#gZVKEEa*uC,q^hD/GDGdS-<HSXZAnNF^G<"C$u#a[_#ej?5]"l7F(5\gmFBK.XcO%g>^NSX(m\cCU!(u*_=Db4L!)bHmi_gGArR3"JNgSh+tE(LXhm'q8^_Mq&'5.e-'O*ZJWACo%pQ<hYWSZHbC&;cW;=ZnOhk*?AZ>8%/!9RR-1YBG7,Ig+aEtZ7H11c#,4@sPRaX3J/!e;.fKrh;!!r+k(gf>47Rpg<h6#)TrLg\Y3i&c[UI.t&CNO\`8/QXg2"sI0?\@1Z%dFJ1\<_:GT;&b50jDsK[B*F/b$!-EK"ff1mW3K+/9t"=Gr(TJd)4d2j45L`p>*BBl4'@W+?&=rg)Mp5GWI[\UK/KoNarX0rA1:Y/%Q4MF-WTH=S(RB.(d8oXVD3M3I[7t>BG.G$fXk#,V2ANZ(PLRTQCXOKhFENeOK1/A[e6UpanTlg+JlRtsjjLN]05&Nsj69+]MWMGj%1t8VP$5_9\d(Q\AB1"bpS,GF<>4u7cnO\k,>sPC.89Ms:@>19GW+TTr5)ls103e]Yb!o=WCMGju$K%H?YP!ddYMrKb/7W(FimkNT%@(IIV_(slA4'$O:Ik$%]#uS(rG"5OD78XZW?lmS?1>=''fe#YYm+rQLqdIdL'moW7*LDeINkD,sdY14%qOAS]Xk4ha8Gm&H1$rp@%*h'*+;b"3.5Mk>O8+eZB\1*,,NS_%Caen4kPV@H.F\8*)jp?q#W:joHqo%?fn[q1G^me,"U$H_5Q0RT8<RpH!;8p0>(r6re!T&3-%%<"`sP]'B8Nb"%AH_c<ZAsFn+6,MS"e/.gr=BsV_gmD8hZT2u%HZ->(/u].:q@$SaXba)M8Ep4.N'4tU7kMM6R%&W\,Y?*ol<3<D%DHC(@)t4Tc#=cD8WG/kK>a.n:rWJphipnHfFVgr>6)"n>#7$+rIr851+`'*8+$W%g<,q^A`57Ge+/"^XdF,<q/Y<s/]fAf5`SMQJ%4,5^Ae_gq<]fLphA'CK2\Og"?qn%"]'r'!I6IbI&HINU-USZ80mF=3rG"^;*DXX]VYOATB:IXgRm=0Q`_1*O7ok,sRro[';[ol:H%SPaILhj]#(cX):$reAD,qi=1lqtL-gBk;dQ`8B-,GO/ldA(:/#oD\\QJ,\4&pe:05aT;G):[9t.U"/YrJPH-neuo\@NB$%\=De#t%^%Y8Keq(g%\:b>sT1b4G&>L/DP<@Af&;E_#'p>dJHR'o,WFqb=T80Cbj4/@d0lN"hbib@QUGfUJ#;UMWG0H%6okrQF#V1/?D?iN>%Q5SY<rQ9F!ZLM9&_+'pd?n^)5g96]'P*+#;o:2.Jk<S'c%mDA1IVMUFbEN][)\N@hLN];oK(LmlNABL9U5`i1B1u)V*Ab,F+X1qt%)!E$BM=`VEbnN(Ea>1&)HIfW@AZ!0\G&3Q=MJ8(Hlsh$;`Y%*"(t`I*Jh2^#W#8Ah1*oJ#1S2j;Q'Pt5IbAIhLfPj2+J25_5Z!Y6%'9,^A8Q%<JRb#UVjgn^H2@GdN6jn*g=>:DE-O_!Qm8O3>BYk")#T0PZgGo=:V'Hqt[\QBKaLr5k$Ljhs1uW.*ObkHL,UKdnBq:b0%kju!9&f9^4/Vr:>nKdS.=!sfa%Qg8.<0\K/$b'@<cNj40JX'D2Q6P.k'K%bgR!Y`^(>EV&!`mZ)<96T?%$K-!dQD2h:<YAY#bQ=\%Qf"/pbh(aus1&*)NXlF`T8*&ZjWha,]c>aG7%-[3pb4mdOY1@I5pb01eg*X((_VQe%7q4Z3Mc2pnKD$].9S8tlhp[;5+(eed4p,\%IZ-h8kmR6=iM*tjPL-Z21;-t,af,[BG,]>VA-R>CIUtZ/F9S6i>a-U1\4kLf\o:F\;8uX8cYIE%UPk+AH__l;5i1A$cQW>a'FE7G%^6@8$4Wj@@:X&:_.n.MgWCe?hBbHT#,%:?&99YqXNL-62T(pVu8sZC<nMrfu7Jj-(a;aa&\iF%%a^PQDSl\"SF.l&Q=?DF>Td!cY%5hf:2P1bqt+t]8sTod!"#WZ3_$hD*]:s'PHp.22D&IOuXRJBceK2jlZ)e+M-=T2Rc=_t0O9%Y1R8E9T'Vg=CbV=B7$]77l!(N5(>%)W)\%&^jchPd!3LOHQ=N?X+%@=Nm!<P0DmG6`=.#QG;'l3p_hh$K%4OkSj*ep^Wr8-"/*78-T\u''#H:mMFS7an-)gj6JBC'qk,O%'M8,&8]\p:&7^@hFOZCSe#;(@BnIIf8:8>%:I%gbgmZgiq.k(G05TSA?8%+qN<d2oK9Zd>Og,RLrD%Cl%h_Z/hm(?9)(.EW'jI\I%^To10LRo`#4WXSR6Ci*7DV((_UEh/'WG%inc]-T6kPq4t\mkXWIEneg*h4r@2'F-A")-jTC-NmsA#:9*6eQp=KcS8Aj7%a`&kVan%C=9F8+is4M#RUTq*n1Omd8Wu)Cm(%LQDWj#r&%q_@FsoD)p9b-<X-(=8/Ub5L-9tGeaPV/-p7*L`B<Lm\Nrc6rYB@cZ4\=l5tDj\%)3Q3!7;+7.=!Vi4,Ens:SQK2@k!\2T>7b`L4FiFtoWA91YQM)K_5$@i%A'cL_#l?Q3!.+)fMX[h>7lFh=%ps^08?kk]K718kmasf%P*4?pZq`4ApW3*qqGtA8r2lQQKCK[HMI"*maG_'FZ*W8+#s,EU`n0iD[pgVseQ[dJ8%@FQSJ;HF9RBE7NT<&LW\]&U%9AU#QRnki%N0]cPCApnNfCL/@m#?"A`b4_N`\W($(c#OXEu[`T$_F#=S;fbVpmRcuL)d>:p3i)Q8?.3bd$fWDX"e$jFA/-JmGRNQ%@O;\PUr/u%FadSnTeX:RB4E4JNG4s+L6)<_*f>W%0]Vc$jhD<uNR,'8>Kf[mNI>;:Rq*#q<)t539GkbZn7>_L_+la(m1AlD9p1abQDW9pZq)-g%nE7g?iu@USEUkeOH85@0@g1`,>te':*lbm]TUpVR26'MG92ZQD,c&Q'-9joNi,kIFK/=$4\*7=74<hO)[`VLT>af!jo,2R9pnR0F%G[oU^3_s%@m6hSqa5MCg33DSq.V&[/E2MCC:h6*oEUo;mjloU1KJYU_86DFR5a%iS@@oA]@7u_nPb_hL's4h6k/OaSmPt.Qo@J=V%I*SPf`n7(p+JSCuM*GKk'obH+K>sc.;+"!I-LD=<6JR%JJ^(8;CLSLjO6:Zk[RsGC2PK@m5HiP\V#$'@*rbd:BkF;6@OG2(@9:Ze%gl=jhj*92=Xa+@,4<gD96lE]29$L9#^Lp8-:0RP1k+%S]\m$6Ei9DSg,aDsD:$_`L9e%\p3NbC,o[=ie\&V?T?#^Jnf&D:+SE+1P%*>](WoI[Qj'+("5bKr5sa.@0;67OX<'3=6)Z1X?k6V`7KhD?UD,UKdrB:YOj%i-,.<fupl]J(EM7lgo.C)FQ@`i/eYSd,DdNtUF1%'\jf)%[D%));J"='=oD"bCkKE_AJHF,)5JJRY1Jq8Q%<JRb#UV#g!Phk,<c>hU3l[da;A&d`+o7U(7B@>W$EQa&[aJXNKl(Yp%&`%6W0PY$#*o!A7X^@\ZrDIo+NWK4fTkm*.ZoggE[Z*D)LY?]UtJRfmdsOFf^D56Q9=!,?PKj!:I^D?jMhW!5IJP\t&"DN]5FnZ4+E"%lOac:KF%X"@8[2N6Ob=G`+4m=A?thiB'&("ad]S2p[sOA'A_UMJ*)E$5%,7:E+Oed4[-7oW@?eJ',dE9;FO]f^jW[=+X]5*KH5,X%:5V)MG<B-n2P5qkPROIaFa!aL1[oaaYM+m/+B4_[/u$+6JY-l!:#j6W*.FO#+VNYNo/A9?O;'@9$b*1b@moC)#m3P%dM*[M)N64s%aW="*A1Dk!bb(LnTnl'9A4\>.([!P<595,]*IdhIKEA$c%bLYA8G1Tri/^](`U+kF3k5-aW/JTd%_eSOI^ujc\F(E=b/(PUP*4?p%Zq`41/>>sbGIVt<^,R)Ko/.WB9X@D&`uV.Hal0atYF-@?9%gnNVMlXM11=hV=XHj5Ui3(!%VBN(X!B"7WTc:Tlu:H&DcFgSM<'ct%k?&h%=`cQ\*H2TS8CV10"3>R/7Wq,Q\rjLTD$T2(WJ1a6CD,(WC`(pE8$J]l2o<Hi3?'kK;DOc"f%G>&HE7@Tn/oF:lHCOPcN[&b%6VrJHE6hehBV#j^_oM\hTdpmaN14qlQC>2b%o#BJ>`=Vq@pi$@),0(-E\VBqUc]GA=sfT>4Oj*tdp=c4dEO0B<Uq&<&ahp$1IRZ!%9L@u[qAom\O]6Lt_cOo!n3X73Ls'QIL*BkQ@\KqpF#gEuZBV41:$^lQ867o-2]n^jgL'1I!@HF&,]'AsH+6^#r6LCRQA\kB0>)4M%Q=;oeCD,(^V'ZUWW\d_%W>\Q$/BKA5V:e,_3^8+ofc\4E/8m'Ed,I=ifjD"R-1$XdBHV<%+.I/afdn*C+umD52o/Cn/W_;((Uocb%ST>lFMAU@,E!J>/A/(kV3#'&<k9FJo^EMb0`q$0b>KU.T,%:*04Us7AL$R%C*R2LI*L?p,*Uc[,Rp+sic)UFJiFqcMJ6b.X85g&e%@Le-b^H].s&t4Q>X:t2@#&Q;Z6]^+7"r2dngsR<RkXI6m.M5cJ_h%nWoKc1\Ai+(R-n$k],7Vc_^/565q_C^pSh>"L&K2F\dF?_i%R3X5L9hhh53LJ,0im)CW5ofD+T5mkbN3OCk/R:K_*SE)OCs?6G1?7(3/oi4;FO^I^"I_)V"B?_U=:JFhVST91A8IF)A@==sPB4g?%o(#:MRr:uY['Shp(1a0XWCS5f&"N%m):QecgS;9<^HXXFXFIS#%R7gVKG7sl);1*>-9^H[U)Cu1n+!SpO(Dk.oK;<5eJ[(eTX\fD%&-mj'5+Qr,'8DF%i>Y4-$C'Ko#:r2DU(ncsQB6*S(ND-E&YeRqA#'3n*\rIs/G"bR+A:*q.pAi_?gM=3c/qjLMIh92Xe<KOR5"+o%cD8SX/HdljfKbQ9'\niBhORBD6_`V)CF);8kEmrb4si]@L=B<LO%e\,7OCdS3jJ%27D;ne2ZI*>T:[5.)*pkU)1mre2"-?`GcRb2%0RCWCBZ`gU@l.X(hJ5]J_2WkR4[P#g$tEL$##[8ad<e[,&]#4UO_&2^[4KetUJq0o7XXP/Ho^m?gp`lQLM[7IFi$-$Ss56Y-haZa%<hW2NbtKua%dkPJl`o1i76>234ke20/"&dSRnZV\alQG3S;DlT$u[\hU!`I&4>.!C5Ke<,O8FsXFE4mM;_EAIM<STAL!b`K;PSJP%^U#71,%*uEYd>ZE_;g\J,M,RDM))B*>1T\7b:nTt)W.YEij6sb,If2B'*`(<JY3)faMUN.5TKSo0g8JC_D/8oB?*;P&gH1N@iu#c%,4^M934"Ru-qhs,.9^BI_p:o@:Aq9O=H:nO_ru8a#t$)MJ])&X??%4.'$n;Gac/h`]HEHLGYoVA7b$HM@H[i\'VS`9)GNBVP"Ch"%g![6&mLcFj^-kc"r/1;k[):W]7G*_V:i-Udr8off3(Eg(<rF:Ra+tsq#;-lP['CSnim:45Lc2?u+PWnc42fc[P:S#dV.lK*N_%(e%U,7T@p*F/`gp[SLj!l6AVQRG38F`a=QPq<q,q0#7UaZJoqD21'j"_gX6#Wq`fZn8lA<N`dC^caR1WuIIg`CIP&)ci.jkNpGb#kL\%j/c;X74It2hNObr@7cXpkJ#X\A&bPI0P.Z7%njI:o"u_!Y=lF0lhhfQ==f7hXh:p/h\"'SW)#:$U=,H50nX[$4ImAFgRUr6,=b*0%c]BU^(0Zn5'T=@A7AWQd$;],a.Sibs8W%+Qd:6YBb1b_Q4#?0l.m%(DZ@4'$+bD+U8*"TaJ!MhgCn94V0@Y4,iZ`n4W3ItNm"S1Q%C]Ht+,GZc=BWNEEB12ut6'#%\5dX+GU=E/KbUiWtJ3+`(rQJSLoT)6F\HLj=F*K\CO#k/fpZ.\`=8.ap^/O[1Ygf=^k\!p@,VCne%J32)Q#5=j+0\r>K*f7sGWHl]:qc^8;Rd'uo*.tqbOsa[s/jS=np>dHGhI%18:L[u6,thO61=[5H-XdEIJ/$*ucu@*j#`Bs;PG.(q%00^jDDIf4pV`0q%4Q3C'ob"(oBlNr+q-Kt7Qkj?T-)UQQR0"2RHA$NoN-T03aKprDo((-MbK+@s=_F%Q4E8?3<p58!RS5E9UD)8^%M'D'Q5je6)*a^^=XmdYNjj#556S/FA;<oq:2e!RHH^#pW7me!-"#Vq:ZT4>7a\qc$<Y!%-G-m@Cjc+Nn-`qJ_d57`=arMoD:;.,L%l^XV>U2.qOUgmMfOHcD0bR'`4b\$,d7SE!6ZH+dFaHiE?DVi)H$hG2?>EG@TO6"7o#8<CJ=NlAU+BNce,i`:Eo-m&(1#l/HKVUjM%0upJra>#<-Q6Tfpa\jtMRb#UVlR_olQ%cuWGHe;#pFp$s(eh1pA/1sISoP>^k*(lNJPma]WIPL1/uk]Q3JD0(AKE1f,aIKn7I0<s%n\TH46A7"(*`b^kd.lEnM14hJ;B>k@g!P69*=RUpn,(`<'F5)GOZ:Lf=6MBEYnR!:S,M'CC%,Gg.'^f;K'</qANZ#MZVJ_Ok7&TN%nUL$b]Wa%*3N$XJKO$.*8>gTp>GO&<n$qr15G[Wd:m7#?G?js`#PgFF;CF"Id_ug!1=G8^aJA\\<+W.pqf7fdEg-aLC!ZS"T789q%!5)+F>3oSRL)MkbmNi(:J]7%'+genk*Wj1BjPO?nZ3h.1V/\mFQ)p[D/Z,9*UqCnWY,p_tkCn>dGX@3H+^cB`ohJmC8bGj<0hM%5%i]:Ln',2<LK\=mN+<O2::*:rVj\DO)8``^/9'&gpoUORcC+!od0.^0`UL'Y8&Hbl*#B*7bcf#eFrB4fa=qjY$C0UO]-D^Q>;V\%^%Vq$lahh.?!h^2JuAkUT_B">:Z_E6kikD;0me)#dd``Tu5dUAc%@!?l4JrRFF7j6MU]Qt?F)0$ge0pZcM&W44`QjUZG&S9["#kj]j%NXVrO9<$)bjucsNO<9t`'G<=7O$<D;Mggn`8(on:,Vnd-=P%F>PeL@a!>$1V)@8=(r3;Q:_$l;lAGdr]A1:\67I/HN9d/QGUfYbn%=@Mj5*IEb8ZndO)D`lB;i[K]7V.7gW=rqo'E:17Kp[bpc836Jj$jeuC`$:8^o>/IJ8LhshRb%<19e2r;5`2^nB!*7q<GdP<)(>hl%RI[@%TOhT6Wj%iBZQqqb/a4F_+m)5OF*rg8'm8"6Yq->Pj>Sf4=c+P1d;rJu#e7><g-,Nh9/''6=jSqc$ud/'CdhC7;`?Tc/)JS+%M'InSf_Wg\KO@;/^n'+m\6F;6n*)`%;DMIF*])9^1f>V7;*r"%01GBd-".)fau,NU+(/Z$@JV/42OCU?.[@M2;aSR^Ao&"32(QP1%,7W8Che&W/-,Z]qS_]W!q#7@GcdBRe2(Z47H@ua*ChD[c%/(fM/4e>P:0`Sd$%FD,U+Fj:ngI4#3$+)5JR-@9Of$N;G38+(4<hkI%=2W`$q=p>:1p-AmNn2La52=n"R%L).CSL:'Yeol"c?6-^Y/EA$J!V\;WVYp4g1"_F?9+ii-;7cFXOGEI0#o1LnKP&uUsa(Dbk[c9%%_Ui,8Ma_YY6>)grT&Q^LtUj@Jr&aRJc\DkE^9`%>YkDh/gt,o-P[=`a<jt&6s(g<'JT<G.gdDa.LMh_S_U!9J=JZ0rE1ke?Z:)>%B[6\4isdAS7gl/JgSXJ;h.CU%6oDI,S"G:aC/<X?#e>2$,NRp>$h^`TSk!jk4^)A6RS5Tb8S+f!]HMAS'C_i)q=Y..)]/%\Gf8%g%EI2lkqI'B=WENF[eatbo?P9o/R$32/-9OV:m3F-DWg-@Y-`L9P;OWJ"Xcn*r.rX2ASG%j9M@7[F#13f37ua(LdMt7qo=PZZSg,a2%DA"SXN/lDM\8RI.`Kc,,#WZu_C96GZe!^gc:#gBPN5?isaC_DSBBH6&cq02r_e[X9jqApp4U0(8_t_)D<'YW(N6K9UW.9lG&gD>R%Mt@ZU0gipKKH."g1tGM,Bh^bU,X#CF/Z!<YN6ITVF`R;R-m#aZ8&^GJi&pqmPiOAh8^<l%4Hl:ZqX@*t^)C:%b#Gt8;Bs+OcGl*;%g`-\eqXX'1JWcP8isLm2g![6&cC^fd.EuD:H"$19Cio1&QhP=WaDT)5m?&MqT't@p#clel8b!7q)BkFlX9h7IQ'r'NE'56S]k8*P%o739PB)+TJ]@(`]p[!aiPqSfR41*rmXHR1JXRG2*2gIqPYk%mO!ZKR*"uJ.7-d*U^,\5Nig/u6_eqtrf8i0^/=,BV6Pg"#U4]s.F%B7=>j`@aKD(ZnC>ZG2FjbDJtA@O%7_d3G,Le0C?'LXR$1%"R6W\e)j5Os+PAeI^\I6%YcL+u@?aMT4V#a+L$#,tJiY8X@e(UhQBi%1SLUAU`+0q+!b+BR_@5W8QSF]hYgi#r?/p8S(LpMIHL'-D]K.;PI]85KTNt!#\dABLX`CHblk2X8Q)iuR\"RnUmhCIE?tK>CJmZ!%i7'&B_Jo0%;Gn^OE8l1QUjkcDim]9o/0Pjm$4GC?AQTHD>q-].c%EFBh*`0<pD:pkb/e%+=m)('Os7IlrXUdJ?<DYoi[&`nU4dZ1%*M=A95sBr0*sHj?RS6d%EmZ#KY#a+!A2e:U0JjbAR\J+u)NK6(P"h1'fi#.O0(ZIpmrDLnj+Vc@a<UI?8huStf^Ki',idnADogA:%86\V1pA<d"Z5!*FXbd>(_^0cPc!*l%MKY(GHT34ShhP'pdU]:iSR(+?FbF?b`s^)94nR7=[3D51fOtQ7N:%XiR.Kb)7_ig_iM9t(%P1hmFBbH$f,$55SKTD6PI6R1Jcbfp:N:IoJFs/*:V.Q9'^>"/I*FWRYbTZjC;11>]<51Z%=gL;R31C@,LY8_Uj#%7-fQuSJB.70N%=AqO_NLm?i2=!h4`Q,pW<E?j^X!B"7V.lKm[sBpBg0+IT`kKej-C0M,_!$\cdR`@Q=ZhkYE)&faO@d*Id$%QVFl=lF";-J^1,pOI%,Y=;Y`$6-413lO%erP[Ln06"sMJI97/B9k:%qrWJp[G3_AaHaimYH5F%<qB8[imM?5:>&p,]:`iL-,3mqH1:(2F(t3K(1&Y+flCI%@mLcC.+3?*,5)&<,aDsD:$_`T/Lk9t5+U<;@WjnP>U3<fCW<k%NG6ZWWQG[.MM1oQo[gV/ZIBK\?WKS1S!kI;7TP0?b%#-]ZU'h<%bu1mnbcXIshi^_as3/GhnJnF[;e%?rrOgbP5c^o,*:qYJ.-$3:_D2:uNqEZtmAVh+N*6n<8i`>5:Ml5)A@;'2F3>k;kUP#BdJ<k6%;\Pe.C6Fa="guFmd[2,p9)=Z9juYeseKcH9A8m!&/TotRCeY3Z8Vo0"Mc^YW7m*A78o0cgA@XP!o1RC>SG9,<pG\D=^`l=Kk$Wqj%dVB&K,OuFGCnD/9d89DANGJX89Hhq'=-XgMlIM6)B^(crU$Gbu:;+JSP%85^[4KeLiC1"'oC[E<p/`,=3[;6]!Q`BMIU)B9,&^rq%)hKqIfcA!!"LkD,](oF$8Ot+3,QKhB<c]C%_h/uPm]]9KP1e:UR$g*;T%;6)_t4nkZ,QLV2g=jJ`\'C6Nco:UNLbC84n7<*Reumh%7q6F!QKm+mX@\6Fq&!T`*bhY@eYDZ748R#J9?D3g>3D6iMm6PFGP$/h3W1Q[3"i,9TM2=&Kcld]1Wi.XPaYHKOsr8`n0CqIU(l]T%W@:N*ROCs'PaX!rGu/7M4@PL'SdQAmQcWf*c%*o@rrg%MU2Hc;(K*r&Y*r.JXf'$4;6m+b;+R\%<18JVUgti.mab105)#SJ,CeX8%(S_T<9m*D#U>=DmS6Pt$h7PCO)/96Nj>;#^Eno1^"/`u0N5uBZW`NbZ`hD"b0T%*SNI?b]8Vfa;)2jl]1m%jUj6[>iasp&\fg+"I%59CLgA'pWMRMGF\W%1Z0ri2Um-Sn(aPL4H_Td(t.iI.Q/3XQiN!E`7M$,FndSa9!^<EQW=4oSP^]ttB3Dub?:BTXQJZ#qV(o&lpU%;IpLVfaI[tJi4L7Z,:-53^KN_-_6o1i0-p_OQ,M,ML;4#H&iKdY6-V]HdW4h!KVV]<Xk-cbf^TEAKols)-!0eo"r-7DZ#"9;%_V(%7uV7:Sbba'?DVnp;btK<)#r]I]QAQhefKk5"Ei(qm"POok$>n'Vi30pIKqX2,K`$pG<bOWJ`"d<lLD)_VN:JFA2Q\-<r=a]\7eEj%^lk-U"#BkH9Tg*lQD.r&HnGc:2!4fEGOga`ebL2[`fp.pe]eIiW,Q@)HOhAKO5N!KYdb\5Q'Mi1lq*1ubmQq@gmf/qQ-3*ed>7`"%fHa,+C+EJ"jorVk3<%8%%/p'TBn8I;6R7Fd"m$DP@/<-#,%Ra1[u]K`oC&oo*FhmLbSb,]emh+Anq<!QqWFW81kca=_&/G5p-?JA%;orfa?D,D/2t;n5_S<c<oPR1ek;Yg,bLg?9/Jff;`p]>A1Ih?@H)d"aWIKXc/N*O?]h=?6@O+&9'C(^ZPEbErDjlC^1=eku8P1=.%dq`DrR#r[.0HQ]2i2'j[rl?XJUlC&8aL2rGS8Gjg,8T-G\Rr"QOK`uQcks+7NSB>D<+]#RXF.[?O0`4_,si,V[)/o(A<Wg"[hPsN%oD0R43;sGK1iLU=[,Y+>.M$0:0LN0Q@Z318QuUjDpO5kJ\iN0plH`Q!bYfaWVPGXaF1>=V?oV"cduJH#O120odT0M.L.foL3Nj#5%'$PsZ%?JnoH&Xj[hS\NopY"2U0C-,-l$)29c]@P&7ji-T@In0@D35a9Kh72a6f2NdkQtlb4$L:uCY.b&#"_EV9@5dX0+k@(k5XC]%OV'7mM=dN.8(b%._FB19cT'rS*%ch6d`NF%/Gf0([EkM;-2,*M+d=rdkVn6QIfsSG<"uCt#[MEqrZ;)s``P^m9$]OI020DE:1j<O%?SF.YL#CZ>O,iCf(5B`n)!sF5s4'*tme9tjH-%Q^llHtZ8Z9t9ihV>0#)fB%TKPV$eq2q")G5eEA<<TtZkTW@o+E30D#PNj?7Y.a%\kP.\G"AZCBFEssJ]rMVJXh@-Di?p0LP1?:qc0p5pgoX5+ri49()X36V.`[CN8.?m7ca<a2H`XnOeQuA?DU4S47S?WoFoUZN>;LO%DB]ZV2)P20Hp3#R2Y\gIO?#\'A)s%O/`_,90Y&p$e2d:[9%%6<9dgViSLTes&p`t\3$=iCAtpb#]:il.RTF-TE@/oKGlV0?lCsX@%R53,Q-\j:n3!r:SB399.Ke-8X:5AO7FC:N!/oW#Q*.!Rn^E*=[5`(#(;R8gWWJ8:Yhk+G>A?*h"6I0^R>*OBO5-E!k!&"\#ohN,(%`onu0\>Yru&n=#7ELTTDN;Xa:Y9\a)iM8r!I4f#OQ)oeuPXi(+AWnAcZ__B,S<p-_$U<%NH:>J3HO?Xp092/l.6AUjjR:DmfesqA%L0^+dmi5bR`>1eN5Z/lgLifGGoLN,j)Dj<E@fcE(8JXli<_Lh]AmUtHYN<T&nf.2sTFRF(^]-Hi=`<p-I)%rf^<m7&_M]`RJ'mbn%/_/d?>>mlNE-N!&*nOQcQ8It@N_/9u/DWlu8W&6qd5!_c&T22%dp=c4d2B[c(at]6^gP=!lPq;mjRI.]%j]qD,%5INgQk1hpS:C%%rYP/?dNT$goRKdkN<\J<-eTaoROpshM0X6jBi$`ks1VlIS]b"TGf,3u`OOhKqrKi9&"VU]")bPY3a?[j&Y^(8Lu&O(dCY%9deb>;%,U8eTk;b3!c5Ap=a8<8R>b)B4pQcEeIi7Qla&6f:M9g[$cEH11GFHVA*$q+m9-)uX>7lFW[jN'I>%rJLRML6G)Q`J/-CG#'0pSa&%4ZP1Dosa*E07]CeO=Ot@#PGVi$(JE_A"<%P`uRa@J$'aI1m,"ebKq(^]Q,KJ+EP&;(4`gFVQ:&;9kcF15:)eL-+fl74Zfjnc0\cX%:N+IX<0;R*e-n]#US?&=DD;`a2e!og9:sAO(flF49l,b,?9'kh7+i1Z6V^(u<$VDpN<eP=-WqapWan1>=sh9IRel$6W@"Q^b\P^I%ms9SCo3]L@&BbMnVM5RkE6jNkl`$Lbn`L@qPJe4sW(DgW$l'-X%.'WYd2"UJ)@O<0J!)gTOic%X:<X)F\Z6soE(.E!/.<FOr8G`p%b8>,klF+T9*bY1nO6&E\J,de+_X4d*KkkQh682U@4#l`>NO#D`fA[d0^W4*`7@'Xtf!EZHldNA=Dd8n^iq6_lb]3G7PV@K>3dp*O%^+dGgGgnZ:6N[_*>=&dZ\b$`S=2E8*:WKUL!5:(tiro2_F[m)f-)7;MSXPmXVk^C!6uU:B`:b_%78G.:GIRogZrqH6)e,@d!jaSO%5Zh<9OLg2U>#6P'68"l-'6]+[O;&_o6_r*>H5amN8]bd_=srK%6>+I2Is18;/*98eS%dojJAVp:h:L&#GIkr;)52sCH8sDB_Wl*P%/_/gJ>Eb/$&Vl&4LeB!fBY]_LgDSs@<_81'9@5LTYL28<QnY/,#GBTrCi\SJ=i(a()T.6[bimZ_%8@*>+<(E9pMH<3*kM"M;:I((%Li"G4Ljs+q`Q432Pd/cgo9u.MkJFZVF>)!uH&W/U#`_GH9Y_^sM)!Mm`ub8*7PKRJ$Fq>*0sL'!N\#=t>B;;-d/J2N"7`umE$FNp%&\pp^'o"`34d<7seF]8sen-b@N[M)oeaJKCD(7[)"-lOdl/<co,Wt5l2+hBBn?3@&16"#c'/#sf]\cb#"JnNn62?YneF4[1=I$Ti%Z:Im!>)Jn-oD00@,53K"r:^BdqWqm==EI4N<,kSO2ql_r*Z=hGQrkhcCEgN7N:=V7<T']XPE<Y6>J`:gm]6`najYL(Net2:;D_X9%QH=E3W^H>\UD<A=F`)u/^J5V:X2eW#=DQ[o%L]Q?<aHOO/G<``<UA_n6U4o+K)-K(I+$G?#iMDfR'1@gV.d4NX]+g(Tu_#P-MHjD%js<(Hpi[s?,n-bY!soe?R-@tu*5=E3%]dJ^[g\)?P9(l>fm7&\3BU#Ml:Cp6BO(pR[`C4<-IB*Ec"i!8_=R]r;m^"?,;Q"c';&t>%(I-@r*9[m8T.tT#fj0P%@u,*D/[^AKDFF\[U;t"ZIU&_Eo)l(V\j+ZL7oHWqRNBrKg'e2]JKYr=!+$E2TCc&GR'@%e;n9-'NcP$U%@?m8G^n:.`N(mFf#PN!b&TZ#!1NpQXZD%j/MIUf)?oCM110JqSM0Wg.%pa4J^U5b<F%RL>0L7KQ3l\tsq[rAI3_?'SAgFIsjh%<`%?E6^t64ilbfH.lVU^>O@BfltQ-*&F?_l7=?SCcoC:7e?]_Rr?lM:9'Hcc4>jFs,`u%ha\D/fkm#VgjKHiH\(nTU=P]N9iSe)f%G(%=qfWJC,E?@9bp;i<`@=[DH`gVJAU1io#KUSf;QY83!rl0J/5NPgfl<&dZFtmcc3A#a!L:<a,#/s;B,=ICD,';Ji6YLo!P?He$6qD%3^_XO8^VK+=siDi6D;3m5F\7'-g!;?\M4j8_Bl9Qq:ZYo)sZW?f?_!FfQMh!eZh&+W*o@c*Wh$qBc3AbW3pH(]q'o3=9FluP#RkU%'Wk=*&g?(DAe*i4oYS7/*U[gK$3qG9($uhi*9Y-o3C>s)5JqTHM1j^DKNkIn;7@kq<<47Q.&9S+2?\@hhPQBrXceo"Q_nnS?Dj>U%HM-U4@U>rG9JKDIj51SUF$8G=GLYT1Tu4A-Wn&$iKElCo"u"f$KL>i8!`3B:2*9OJH8$Q'hpE]Bd:t,Qe+1rZ^VKXB49.#A9/h$V%DA_\Ib8=_s=.P!_IBM,RrVLdKJDF?`SNF@R&D>$SOg&gV/$\B5Ba:778))"n@>c\3R7PXb2m3_`h)[eSLt;klj<Hg82BM[\Yn:?3%j+PT<7_YcP9Sk&.(5Md(WCVE')ZIZGn`LGHLn^Z?U^-!I)@FRS:GPI=10L'sM0X(nD!I\*?2uS%+;-p.k@L#<@hBc!)q3II,,k0H%dT]S9[9gq5PL.G43@`/W"0KEEV83S%;ULLU-]^aXpW#0`8p3kTCNa$VRiD3YVa3P\2IHb2.lLZc!EWM8f22e(OU!nMO2m']d1Z8G%b%!N!<5#PJ99YM00+K^'Njp$'H?rg<VpROYR?L@.U=iN<S=%m'D:lYu;dZ%2k1+/s?1gj%/Dc+YmX*r3'X,^#]%CZE9/Z!Pp6(-<%fWM3-5Q+=`igV&2Hs&Rn?R_Hh.2a[*la4;ekk[2QHmA[eNHoem\@)45i4Q<&;=tG4%e?QO)1hP.n?qLnfGne;,RQYR.hQeO1iM_G%5i%;YK'jVZ.kkm_,U8MLB:YD+W+"<';dM13ciM11mnA4[?o)T/2Gg-l5L@*apu+aWq44:6]5=Mc*k<"'5X)Is>j`praRDrWM0_@R%,Uo-5:$^lQ8:-"dgYVHkkbjd0jIUS$EG*/.a750eZ$Y?TP&j`[r=<a,k9'"V2*#2jn'o]/jCBpgKH7DXAl<`p@Si&,TP8$oLD$n[%3nA"j;5!:*Xn%'gBi%C14#nHMfW@n\V^(T%[Z``<b"W`H,1Bgq-o=\f'#O%Y(ip%cM0T=Ice/W58l@KNMO)A0I84\:4.ZWSoZFD\%q4it*5[ukcD[f*.A(GY8RnSnB*L;G<D&JF!,s=S`%Y;VL%WBotEPUUJ<JNhD,T0`:4mUn910;iQc2Y\Bnqq.@Ar@e535!fF7Ashf%2Ks+t7Q@=%ggt[5I:bR6mEAHEpM4Nd#_P=\.Uk9dKF=2)?;](i<`)JD;pdWdYL1TXS.C=&H=\S84_:`B%-aX!#]HAG1E'fFg1=d3%)Z7b5M9gG+)VP[1]-=J+[j$Jf;_(-`C)TVLX2u8Oa^Q]&kG;0%O7W96o0]f+?CSqeKusEl(fIi`8Dsa@8FN^f7NM>e"?pW3O4mJN%]P_KtU;ZDO7IkV"K_4[hS<C[O;3I+$<4'rr.g5.8q1&1NXI*&q*3Qmljr17^$Wfh-=*VS6dcJL4n<Y)XlGa\1W[1['H!?Jo_E>:4%(>3ZXKY-/!hT!4>A<irQ(FWH6k;@#0^XKPkb\P-L&Ru[j:c6f8#TXj^m%b*,dX@24YUQ5+5&IPH9;Z^PQ6%2L!EEV5JP^.9&1lpV%Rf]Uu82@JSHIfWPNM*K?Z@,$O4t$<^!gh)$Kr6ck\-n=(iD&]5KI%6H_oJ(m%Q@XM#S_Mg!]KgF;DO^)9NOhR&c)C16'd\]de'&s%Qfd4$mNBg`oC@uti\M3>EK,s_7LAHIi#%e/ZQ5gYI4d(j*M\:K/YPou>`+>V\6)g?=-V*);2]a:%gLtd`th69'9ST'C0mVJ]D:*g%q#%4\QDfGdD7mD=+!rC2Fe`WTj!5Bf^Mt%'EF.]$E,qH.<!TCdHabgXK]b^4)if'heBmj+it31/N`J_DL/ZJ\3NpiL/\NR`r5-*9%KmR9kHXX"m/Jr:[-f21K*Cfh0i'!if0h>dIP(bN)jjYNJaL`"jKju5O>BgW!BVTc[CER,>U#\']YKkC@]m(W'0s;(V+cN:';:_;B%fk>X.L7d7q@!di=Rt$44n@'jQht5#XMgngZ=XU:=20RES7E)^Tg/umrm#d5XQC`5*>+]f&_*+><5;17HZdZ>T*bL@X:N(E>@t0pV%amo"B([K$M2l&A,jAJC]H^Gpn4]]Jfab+jPZUp=Cg![6&cAPZ4WV`.DKmAeA2T)dIi5SFBp`n%QWkhs[gM4Q9<c<Ju-$B0#YrtaW%EXS3T+ri36SZoW(P,<E]3X__Qp[=.pZ:p\noW3-*)DrQUp^p[@YKmfPmVm<G*.Eq^fXuSL2s6/*f6KY<mYO_UMnI&dgXn;T21"H6%6tD;mcN/P([kCW8I.V\MUVVcarn&JhE>DH:Vr_IrKV+k6dgL35_ei.mc<0ElUJu[<b)Mh5PJ,Ya_p%V\/[N>J\"87lh_N26ASYa-%1IlN#ZRq?!XHoH#DI/``qtMImr.TEUmb%MBf25c!!Pb:7gdP$6%fPHpHcj7i#Bs]M*S@d%8P#2'Og/j6X9iaPds/Je$sP#,cNT2l%aa&lmgZr>e*X_kqarKUI3j$H=d+F3H>edP!NW@0`o6'[G'b[t#c.GA1^,5'tE9LCPW8fuf/O=?@7d<)Ng)S2d@VU25bH#Xe/Q60R%Ntq3='_o.3-18cr<2P_=i$b@HI3<L,2t'g,SSh'mMgdZD$#-km/7B>R)JX"8?h\e>7IIV,;OS%P^#l4M3l&]hrsqlM0?i`M(0fCc%#\"[n8?3.pRAD6#Tg.prP[gK?9rX6d.F3BV1?*m"@?#sddaVB8U@F[F;Il&h@(6q'POf\-DW*-;=V.d_md43d[+bu.$8lbd=J<kh%?0bG%V/$h-Ps\@;-I;>sk%PQKl'QbXQEJbPhU3RRHNT%pF`(M-ORLKpK=KhIo,;b`\]fd`L7FSb)K)u6&tP%P&&'M6l=e!VQ_^WD%GUTT_i0b!"BL<,je20"Zn6eY5Ir(:E\p\g:=srK%!f.jJs7F_Zp<t6bhFKqaqrkcN&^ZI^plYFpT"FiD%U6hlQVaI?/k+%!Ht:A-%C$<>]2%;[Q*fJ,.O"IZe@7M>qShou<FGAa5\J6dAlN91,Sd>-rkIBPo"?atUa5K!<:P;5^1`]KMr\u_HiJGn]%rtRCZ^q@o-UO53%.F(8;o!H%d#<-WE$X]9fL<\bJCRC'coOub7ofGje%ef^ZgV;dpH.VH/17pdM_5RrkKXc]W(b:ZKM8`%+blpeL82@JSHIfWPNDAs*%HF$XGCNP``XYi+D`ca=6-X#C4f@b8CNZaABn$"kND9J#j:3qjU3F!F08'.2LS10J!j`&lsb2etDT%Dc17Q5P_*=mjQH=b%W-;Lk"%24Sj9`![A/i\Rj[n_AL;Nk(6484,m9!if#?$&Z'leJ'!Y4]p+*fd99?9dMX0-E!\#nUYsZHc<Wg/UE)0M/dSqf!-Zb](5`Y@r?,<%5oR'KM*L6@>F)'Sr=g<"BG.UdHT0N[/R&lL/Yqp:2L&FP.9S8tlhnCj"e0et2;!M*NPOc/e>:".m&eXs3:N'XI\E@/O)&LY0J%sn%/L_=[=d'E):.Q3?/0mr0^e;SM:IDFE1:14gQC3#<ih^;?3WJ`WFF(F*nlRX_kpN79^[VM>AuH,=SC>6j:u%@0VU?iYSqJeY`>C(X%X_IR>1IVJBnb;L5/[A'ZT+4$Mgq5DS,OkUl^G)k=#o8$YmK0aET1<k6H/fqK/17UJ\@n*k,Y>DkAND=C^s-0"\Ksn(G&<5'p3,,!%.8<-t*n0]60F)j<#_]lFYKc/oFrUpMn2tod^?LY6hg+u\S-Qt'd%raU\jGl4dhR+g@j(jnk,:Z14UmWNKeg\H1tdbXe+2K<fYT"C%3YlAI]K!BkgN[[THg^ZU?g3G0*f2CQK_*#?drkJC'pRma7o5e(a+DHNf3_d#4._>QDS)L2bAKD;DS,;_oU)&5kH]T_iq=1cjV\c@%=8j-9HXcNip`QnI7/F%p!a[K=^HU954Rr4CSC*lOI=2a&YE(Ac25nW((64`q5I*mZ[[`dmoCG"O.3@B=(%XJKdVZoJ+e>mZf==NE%P\3b;[E4n-hTpHpO8Hkf(1'#oA;#4m`X\g1=;1U)NRjBf@uDTWX/Y8>2m(KS[r'<i=3PH5C9i,L6O_ApNnE7M6bVNu*9"`].B4Vu%`u*h&(f<nkg;5MP+p(J)6pVRH5HBWojYU"L'[[+^7Q*oa3]!s9S@0VlkT=,p*W<+0kZ&9S\P^E9ff4'p.SCV/f9HK>_oU0jXs?r?%9<"0>[jY#c#%CQ4W?>"0=B-'92TScO=dmouGtI/SA96@d(%L:6apicfr0q4$([9irq$o$?`\k(H>bm[l'^=e^8I0PQ%$8cMC.NX.%_+]eqP9`StV'o-_bHc3hDVDO*R$WR+0XN_>1o5iMZ)6?pJPJkEe&b>m#Y/-GKQ(W.BLYmp8Rn^+0JZ-R10JoEZguOd3os)PN#1WQ%+bs:5`A,BUQ]#[!\tHTc0eQbk>\',+%%6:[7u/g<1)=2l2=Z!IU\P8;(.fjt"FAY0H&YRJ'=uUk?^TF.-AgI_qh$fDfEJ^=Mf`no%Pi#tuGgX!F,;)m;=UOM:<cj.6Su`NU%WFR5%2t>*_%)SsfHa)BChe8jcAQdas)qQB$hGPW]!P4e&uHYG_1I$oFGQLOL'sQ8Tg#6)%UMZt<cF>\;8_Hq[R)^IH9Qed&:5>!,Pjq_Oju#.Pd`i6Vktj%WMc=gBc);I&AImS8=7$Uh\r3cG)&BhC?aY[=Fo/1%1^Qa!#T8P>%Q8C&25i\\7"Bf:bcNT2la_?b&njl*g5JQoEq1%:u"eB,NLd\=MrFWcQf!al?L9,f3#$8Xb<?-;*k7sO]NIAO&q].4%\<%OJ*[\cn%&,l_UdH%6-<8Tr5pCG[t"QTI[,](i.Pc/YY-H<)K*Y:/klc`$1.9S8tlhoO@WMB49pcibnou;"S4=8V=!,-%^[$+R#O+0/bG%9I`%"H#H$YZ%YhaRn[B,o-:4GT'4WNAFd:;rV&K`[X+LaW/FL>,bY:jFq$'SA"Hmmu;U$DPu3p3N4_E=,t+/F7bn!ha%aHM?1.5SUL0'%(-5D=!'Q)E"PB2C&6k#a$[=8P:h%15#"e*'js(SB;p.l9OYqsOUeeds>EOZ,qO]#AD+c4^;Io0g[E53WC0NV0(:OBG"HY[87i7\R%W$=mNd'k976>r&ESiWMiX,7iP^iF19c-In^ZeeJdpG_5WiZH"IQ3dr6K5DWn7l_MW1t2aQgN&7H9Yum[q&i3SS>GoTXo-4m+\OTT%i=nGDnh$&"P*4AFoU;72gs2cW1CmcP7KU4`c.N8*94OoRR"TA=7O?2:##DD&mbdOn<ODg;7eC9,Z5t0hEHkm_Lmp5X?*>s$O"DYp%O^um6TP'gb=/R`Z6?@T"\NfYtmhc90E#TZ68^i<XBT.W)br1uJ#(Y1I#'Qcpk%$:_[7p,D#&9%A1#O!CfS*U'MV8rl737FZ1e:Xo%+f$q0Bj)nI"_q_gf5>2p^+h8R8tF!rfO*'/6!).&]*N?'K$=MEkLPWGh/W4o'X&RZ8][e.Or9ab?e3_Os/Y[Gr;P=u9;U<,dlK^s%e':[9UX/VQ]M>@Wl4HV4cjYD!:=jTA1WIH6X"`fU!P>_7G3n;@P7WC)'?4^h1bh8\nJk#p9pRf)JH.RN`4S:)pE2C9$N9UsUprUY%/7Wd]-6[,?Wc4Sb<S2WZA-EEUa[3_$J0*T;_!*QVcU_6t4*`+I=#NQ(RYA,MoCAn$f[6157GaE`kJdnre;T&(V..j]o0-QZ>tckX%hARLsA!gPGHoiIIqZggJU3)6F+fQZ"6K1EP:[&b=.S7a&Bj0]_Fh4fV4$DV`\H=Nhc$Ujig13QPPS=W0kXi9<htF\&kac'<'IQ]1%kmPHeOIH,fNhje<a`??n*Doe+1`]G<SAmWmSt)mVPROIaF`Lf`ff#b5b@pn>Pt;")5!`fgl,V][/D*knCn/!d8C*>L'_M=YfY7=^%#YE@'Yk2"P-9`:ebtjBPP)QK>T%DcQ*?"\`\\AO3ohk3bn\Tr"m"hcJ!5nqoICLb'`%^E%9?C)EEf_IHMVr%oc7W/8Zq1e*J713)%;J@W-ZqemS<4S^oM9o$Obmkii1BP%/@iZNZai6313Q@qE2OlLXKXKca>DdiLX@^L9XZ^1!+^7m_VX<oB[WYk$WAGQ->3G)!6!haY%aMQO-_K,Nn?;,%#%V=C)DEYF*c$nhVS(:,3$u%#mBhOMKZpkA>bbQ]4*oj(SJk_Eu4J6;S=Dg<_]pu4Fp!]s^EXSshpPlR/efR7e%05\%cIi*n<[\;]15d;V6AB18n,m5]5n-p+W=&Q=m/Un[PA&Wr'7T-NoMUm&u<B@U/]3[/7lZ9nM)\b4"/r]1:$dNiG0Kk2R+jekr%28"k=JDVrHmY!p*ktW:qG@@T4rNW)KD:t[!Go&A1;DMIFf#`3"fJeSrA,j8NmTpEEkV3i3G%6e!]<2;Up?_Cf?]3"o*!KCPOuhNm%>Eb/CS__r<%9],Xmb&Lso?Jth-tUT$kqt]/e&>QY4/ssXlVtA-MW6a+i2.Qj@8@&Toro#eiX?'O^Kg-MP.A)P;i_O<:)g5VVm`IK%ZX$([<^h%GM^0OJV<9]pY7[kn]L#E4lVm'8DL0up'tbiZmK?.p8=(q=$=C6hpGY3RaIKhlTGf&E?T)@Z20\u'U=#HV^.'$#aR>0a%Z4tQlVKHo_TW<$98+ju]G_$dggaWNtKRp[\+E3^amQJRE>:g?S0a=.d8[29U2$jjFpB-<_8=D$3L,E9P$b3=E<147QXn2-&iA3[s%&,5o:k&lPbZH"^4dbOQK=#Klp]f3&jjURh^13R['&X(]n@@.oijk7\!H&]ZfbBP()ZV8U/K,aO[J"k0HNHos)H`#YG.><aeFe42g%c@*.ZTR=#r%?[kT[VQ8DAWHE`i*c(/&;i7t[>=$F6P9.mYsF[J'7lm#C0i+V31GCY5!gd^-"9\gn8oigPd-&'>jPlTa=:hmk@1>.%,%5\?ig+'"*,A.PUHuoHYpF,LM"Gr)Y%Wp!P*@MaVKI>o-]1kLN4gsL':R7sjsQ#4c3N9ZpH7f!B*:>[6Gi$W`%BNuX]q!Nk%?,O%H3U%!Y,B=@I[Xf4Uc]GA=siDi3jH`gBs3oTk[jt1p.4UGa:V"S@jp]KBB8Fiqp+We^N0PEeWMr'T1b6,*Z;Enfcr"+l"Q9jX0ESL%H]pUWZ-Ce)bfd$hD4MDK/)lh&qjAo\q?JoW.E=F,6s"?n&*q*_Y%$<2=?,B-6Jib38cY#"%=pB$WM*Pa_*l&19VRcrVP_u+Zp6S@%&0B;,0eX19KT<=QZ'qo5B_H*:%SqDtE6fcQNBVJO_WpX5-$?J:%eTO?,OoKbC=&_&4Tue57k5ig9f>R8<_Ln&2m3g3f.(Z@T7BuJ%rF\<HnB<;ZiiI@5fN2i.#"P`O$XWuU(iQk#O\F^L/gWiA%ZJCcb[657K;KQHaS9sfOC`+1e1@rsZ;b`,7JAu!b_sBi1KB,!#m1Y7%(_$9kW8`S\fR61:5Hre7-%q:=ejD^hmY3t-D_5@R:IBt34rGUp)(e;Ce@\39TMll[G[XpQ"&A?19&Z!PX)OqRp95F\BnJkERM-">%__nn;46BY/O<V0XfEQQBRPqZ\*cI6PAud1'bGApDT@^&`;_L0C]eHY="XeQeeNerE=@Hp!Ai#o2h\gmW5oD67GE*<=\YXJZn(&b[%-qJ2kK7b=Aj[K5Rit31/N`K:TQ:o[f5HiPPNP1E>iJi,RfTKj*Kp3E_T@"jJjhA7<(1b&4d@c6/j0+AX=u$>lEp4aadGj$a]9(2[%9neeLB`.i+@uDn5R7PXb2m3hch=t$KT3Re4j3.AJLGpen2r>-([Ma.FGDPX)LkN2*b9b+s3n>S;ns^umjSM5;UCU;96QD0.muORp%Q7Rfgp\_ZbZ1N.^nkZG!2p'H)C+bKr,I4re&h\8d,85G5),DoJ0K%X*@e3AW?$9sT8H6m+"L(CfG>cm6(H`/XQnb1+P*F1FVIa@E%Pc69Ab0FPo2s03f':R5]i6iQ*_\M(<)S>8LcMA@p47>V)IZ/gU=]-44E9e*Vd*7#IdhbfKHFW9T]M=f"2G(p[J=:%Y?6=.7II+i2%TV#O*2P0aBCR!j+m#3FJ0goiUUUAUMZlN2dVFr0cSNF03cnEFc#TTq-2:SCYelmYU23$*_MOVh`N%C9\F^AC>)Z.rm`[g3E60kaU%6q3e&;!3ne_I"q3Y!7GUWXB^>LXG(+987k8X@A"*nIpXo.4G>1IMtp#r5g3Ua_YZp-g*o""8u``/*98egR0eGNYNj^6rM%=*H7</%s*EgEN7#P>-5'@7j)(b"kM2MZF=(9=Cld))UaZejBt,0$*m#bOct[8tB''8K,<Gj#a&A*40+L?DH$+dS;C=D!9g$#6jMbO\S@jO-%W23!T=r^t>Q8EU@(sGVtHRL&$V.?-a(C+m+r',SJ<m1rimP@9P*$3`@DiN/]?S:Qe0MDnY\u:8!^r#iS'\_\OOTC-;%,hLgC=&Fn%%AjUFaWsI"Ch['#k=(hhUj*g?Iq_3k#+)db6!p.D*j!6]$.jF/7P&Ufi&q+'YV=jK9<h-M1`>!Hi].\#Jp03=J[_1>X(3nZ2GqV?%;q!K\Y6Jpmb0HC#)tOE1o1W$YL($ds_S$ZOS!1R*N3']-,_ok4mD'mQh;"j+-R59)9Gi(.,Y_[(:ZJF"K5?\ZNM`.e@ToD0EV&$)%n9JMM+5Z[WB'Fun@+IMgl/(r&cZn'Gn%AT\rh`QbB:6U'Ktf)/,QqPUKV>S7dY+Qb7T4YcA<CD5[IgPAo,8A3if.j,)tP!8E,1A&%`Y+"oR=U$D>X0Ah`Xb#>Lh(>S*R;*ifJpp?KS]@Q@:0>HV@<rC*cD_<R'!ZY/=35VIU4C&qj-5a=u!2oC@HsiIa!cdSEpTpfo3\p%4T(J8DKOD8Z*6$EV(*I*CD*r;O=4pelCR0#BgV97%gQM?/(u6dRVaqJjLe%MW)GTjn-e4Z3`/(?PT$)H,W+u;=LTF5H.[;aTO:W'%oGA^.r[bI<_S@t.&Y_DL#8SqC1i:<Yp3<(tU1'3RdQF17SXEQWF#R/uoGdB/?1_pOopd^41lp&B+bRaZ0C40e`:Z6OL:8``G1*WB%+ei==(eC*Z-4i28nO3,AXHJf!Q_nnS?DmEIq=jfdeZ%c31&_faXu'0U'Y0:?mNdrE.%K'_$eoqU;,gj^/Vu&F;Wlu?kt.)#9a-Rg%Cq:81[%VHej)$9LZrN:3ZO'@0q0@+M.(e:DD7hU,dtM>7/Rh*P$E.#1&tB+/oIP>PrEVd<A$;Lhr)HpdlJP4;-6c[`W[%So.os!-%T#H>!,&skZQI7mkkqOtG:HbJ;PLE5j'eHFG0XrdF+`u3TdD'\d5g/O,n;;jTg2]^%$WVURVXT*\,t?B44(/@iK2P+hd\Ecr[g\E.%/Z+tZ<f2NhE;j,$0#.%<H#[$SNjE7*AXCF)=Yr.AC[P>/H:LusL`a+ZkOiHKjTqJ"ZQ,2bK)r+k/(*fYQ']KcPY>9*JZ;>'Ff=lZ%#"_E69@GpV0+_'<a8\Frre5WKGXhK++5ZE&]5]?"H.j*7bOa_jnk;@qm#I9fV0KSV-6\^.G`8?j@FB6O#>4"s]&KtpP*4qT[*I"`%UhW(V7Sgs<FLVgFGoR][m#0#m7V@HFjaj3hO/)9q@O[mbX=5=:j"R>e$>Et(L<"?VLTQ`(/=35VIU8fJDj\?[jsT(%@aS$0r=K[n%q%``gcKu)e^-dOEHRf07hCTmjVnCniMi_5:+_/_-Q_)>QN5hms$H\t+9GSHs7I/I93'D#$ir@4O57oOZ:Bt\Js"@kq><bT7Es>k'%cQ%pi)Bf_Oa-jnE4P*]!&@J<0=CYg21nhI.)R&G_b>q2,Q:o[f5HbZj'K)K^pBC.LU$pD,A+POM=CbghRluFmUet:\fU^/^:BW4"%Fg,G]1aRgs*6+@u@84tpn9E7@YZ6jLjjLN]cg*uBP4:Kl3j"e#WN#7<c]^(I"XDuF1pfhMb3-BASkmgJ\"D%qbC$bq"rm(h#t[pV%Yk/>hPF`GHk%DdO;8uX8cYIE)URSmnY-`m!ju$V_^@<NFhfYLEDB62$L7^a"Y\ss&5\'8N+m73Yfk:^00[R[2dG>&DNp7Ic,XYTN%jR"H-s2,aQ%ZlVE[Cj#j4Yn(@M]\'XDJ_i]pbZA!Tl_+jF2.Ig"tDLuI6g1h,E<Y+*sl*'jH:-R^uZjc9ADr^jcV\J=Xe#EC9+3Y%g=+<mGWG,oUdf@q@'+8n<oCm:g:VpaPa)0qAaTtco$LCAr\L-%Hl/-5bnZ:B[418hToI)9?>"['=\JO[Z'u&l4>(EtLQM\%PsUe7%[UO-EZ$,S=*IacnEH"HU_.)b(ob*QOA\)B0pN;,ZFZ^4HQ-fJ>o!RmD+=^kdL43F)YU:mkCHNn@Eh+rpI^G5/V'SmNL7#j/XT9/i%UI3#U1=L$ob]r@n"h+k8jstq\kC!MNWTSAg6L)ERq2h&LV/+2eY.nLQI^%(M,msO31@lKgT]Q-VY2C_sa*FYcN!$g]34)N#o[-^_%%?oG<cX\<oR[[q5.V2#.VNhIuQ2?EM)`g3#^tnJeA!U`#*KJ#OXibo]GYu>APS%&e<X*)9g<UWSQnId-4AEjA/&a)9a1Ag8Ap3;t%nuLBt67Y.5;-ESC-D\OT4QWbCHj4E%7>I@s=C:dIeS\Mj4AsOtUl7pIO'9ea\#7%nI$?Q<Z//@".b"ZogA8@N3$?><&u@W`m?DQR%T5Gn\qXq<YJCa\(Ef_=0+s%P6X+eIaGWu].G7@1BmAh>b+"Akt7>QaX$CPdlQ#b'Lm)$X\e7rlhJ`GULF4!:Cl4!4nAZ-j;<+hVC%bX3C`-dG0Lr3%!FW+o<D@2U0/eWZ8\e&+Hjl6LE>2!B0$'K9DP3lFE*KhXL3jkNDN+3pWgd]MY$)EI#([]d*-V42_X?Y1?t_=UEG%TU>,9c5_YhC>udUnDe:sqc[KiY5JbUL7gA9q`6',.;F-Cl_ZR4aB[R$P'(O[27HHBTQfB&i^)=cr^<e:[G@/SGIYqOLC/rq4/up_%bJEJfiOV,T"UfZC)t?t;Vf7SAar@jH(o!1Y,+#49IVu(R28[-oj!_EkZH'hnMfKXDD\[=OiH'/%@J1ONLV%6:?sH02(rL:^g,G-O%rUb3,]0g.`HUnaj8hnLd>;Nb5`6LO$6`oJdik/4D1rbWCcPRTH*qr_sNd^\aGUO]")E1.GZJtD+p7sJN2[qREXV`,#;`QFR+$ung%.[MYUALl;#T%a%OSM2=[P';CuRbMPm:Q]en;pY_bmS5kFYl&N'VeO/<&42?p@q+0]YX,m`En2RWC#s0db2B"h`0kh77ce[PODMn?%mA[4X)eipaIb$FI:3.Y"@r0lSZVenYp1u77ci\X'V%0g:okWY/krKNFc-5.Xr(pg9p"r&>fceaA>1%!5_JiZW%HES)WZ`a,`S<]d%Tn&iZX_(BPcgXRO[3)b:Vis"KT[0#"8N\_h8e&Cm`FX^D#OTP5VhQJ!K\aJ&&*7D#<%_5^86-4hNk27$M,k[2Ak#k"\V[gn5:J`V%BM<0d4:Eo"nN$3^_!L^Wid=NWPZ?-DL%Jopl-\(L*\C0%na29f'q?>IW,/<Ol)C_UEIhbs!M(IkBl5;iiYS%tdf#)))EF<g.h*J?%]9P,^(3D'D(r!VIUkDd3VRl#r_bgA:?>LoWAZJC`-6+n.EuPRlnTlFEo,tPcFGSg(R%h!jcC%?oo52Dkicr>b-q,.P.%>c)5^:]L%C6YI"Kd]CcRJf"!%Y>fla#!TS(D4hd>;*J0Lb:l:c)fCL5!$G3]SM/??Qbaa!U:\hH!Xm'&S7O`BIb,d-q>'J-Bb/@LsA!091C9P%qGj>QCmFt]Ju?%tDPX*-*I!/hh)(qhQB%h+=&K7HG_s"9^/YD3`*g)<C@4au?X&Z`CJRjRQod)1Gf,c48\hASha%<M20WXFYcPeA%Q)A-JH4FoFnV"U,F+D0770sJ.^q4o+"Qp5TQ4Ud9''=DuUaE7^UErWqK`(&=;/,"J6:A03;JX'gdo>TM'QA<$>4!1AE+U.bd,pe1%'$.[Xc#<u:hM$5/LA8oIQs]Z_OI;=G-1lubP%o#1-n6qT-3PTp:_>[%X7cr/34n?g[:b$*lg&ht>JmP-6FJ<CJP/MF+X2>Lm)gUS%JSc^_00NH(H'\d>/mG]Eo.Zq$YDGI*!COCc*\a]93#m(KHNj_fEi2^:4bEj.1bc8%8G<dF2j45dp@*S71P:'hA_8Y!778g7Ae>\]%LK!n'OqXeb7LdQ]Q)k#e(rX8!IOu2b8:dQ*$kbNr(P>c#*WpX'oM.g<0'^7]ns,2B^[`$Pp0lO^/(L4(qB2)ie:fn,fdLV2C$X=n%JO>uh8rj*Mft:3s1HD3s!\Zs(M@$q_="5W&X@*5X-Rm`i;JCup;0g%8DAU?A)^-Q^-u?G./(Z"sPP/kcg+u:X5i'_WSCsmr!Wn:k%/Kh9sgBI`&8uQ+ldC#t.&K2'Y[etrZXjR8n4.MuMWrOo0Vm^Khi.*t!h.[l>3-8ktfFni%bc])J@/"<R!R$@n?i,uF/hLhG/$^OG%="_gi)InqilN&q=`HiMC12+#CH8'<T<gTIeK1`o\@hVMN!c+ipZ+r-;lHS:C!d:/;^uc@.+B)_Za!:.bdG`/=+j89<>!3T[,u*HE%>#,=q1$CnJb#A4D*cQ!hYE(t.bL]cU\58cmBZEBbYcf0GJ[+ql:k?#A+]*`$V9%btX^=j-/i3:uFPA5b&Qndg"TIa3n+t=;MK-:W%8Fa)&8\adbKVCP!9).N,7sB_\o0)0%BVhrtkZG*E"e:b54U7\D!Jc;1XRS7bd<B`o$M_0j=;Fb]AL#X,r)iKo/Co'5MEULF'pduL%=WEQ?'K,i2F_c9<.H"Hl9$[SloB!oV9$8K?'#'hjR&!EPKl@>T@+bPPCG-Bb\YYN;i^W$@,a)+qN<Y_!*a'q(H"q-G_gl6f>HPpI%LTbB,r:UkU=5V'8oS0P__0g)Wp`LZ')LRL)R%2V"m;#Mq5'D5NMKVt);WRDuf!!*qQbTn0?tp\t3,(Ib-1#t+Ji@+J]J7)k]B9Xp%[FGrqm+'GC:7q.Of!+m3GXB9.MrPS!77<&:h)Tj>[Ha0qa[n4Xf$f31/[pDlnW=<_7k"7VT8!h,PN9RVJIWZlZD8!08-ekKPMO'!%FC8<)mbf$FE;u#2GNT%b[TZH3%Kd/U*$,C)X!*.H]j[QWXKSa^rj=+&*b\[9#f3)dLi@>PBK.?m-u?G./(`7$'/L@BV'cACCl2]K%C<jI/]F!?,:$PI,*,_@OXiUFJVk>a@hAQ\+p4T!oTfh]Q%oL`sOjd61^Rbk(S.sam4W-5lL90qD+V(^50pSORha?K#g1Ce8o(>/Q%H:4t2d-@e9]L1b:D]'7d[ufX$KgV`$Y$rsu\EJ=H*0hQQ>UBb\/9(FC4(<caM!BKoL2[H$@+kn].lULLNs.-hJ0Pi>I.//]^f2oe%$Z)lk_taKEm.+=2E6<JAF]sh1Ieo=tn6p19E50LFikYSR?8lN6LN'u9,4_(LFM/M(-uDGJLAc'JmaAC=4rfcf'X^'2FmH<Jjk`2W%[R(3%%MST"lBFBW]:+m!Si9?u$fYs&nMkOWCJW_ij,CVKE)PPhH/bD-aX/q[pMHaQ(i]'FW(uYe^raAIBpkVKZ$/!4A0UYX,Kko5%[1P[=p+pDsT"HgM`/N):,)Ju^-1f7nOKE+Jc,3C_[2oOB5V+u(4U1\\7ND\X?e[\NJ4l3V&Hb_g&hq,0,2h(EK$n(Xb>eKR"'h`"%Nu27SQ[f+FPp/H%(gr]^@Xp9'#[MWChiL/n8U4+Klmaqd0]%mW-"O3]M"S0Rm)=5[0s!+u8Y2.cV=HqWQ(kS7VNl?bC+@iQJ('.u%T18(]^M.K"^\QZ:J'0JV_8!Xs"RrU3#kbTt`QRi^ppVfZ*5TB9mjWj<H$p"W?eMq)CCC,Q=\%t";30XB.R!R9A6iXnbZ`!fQ70@V%]Aqb[LrE$K'#;8j!n:;3,U=sp8Xer8Q+]jniGr(bf"i=<XW02<F]Ib4^L^[ihh7QO@t.-t"?('u9A!o$aDTZ:ZZ!hpMO2I3J:D,V%W38<dRC$PCg/tggf[3e[A@T"/Rl26!D+80h="eF@HKstUR]"n8l+"K:]4$d$NinaTm337%2s`C9Yh)p/qV"_A\--Cqn=JT19PB\-%aO,f82@Nc,RYpe%hsr##k[/'fqH"W0XDn3&34mo),T:UR#t8C.N<&XZT2AhX:ruR=lKWbqHuRfZ"aLcG_i[smDE0[;<i_#T(B&@0%$9dgd/F!nG9l3'qQo;4\o9h<"YfnP`2A*X2,0#su-L[VjGI"WA#]0@Z9L`#r<%\4ECTEQE!DdRgHIQliPg.or4mKL-Yjt8I2I[@L%W9ucVUabpgPtOC@g56GKH]g-t4DO8BTqjiBCWGf$c5_s--JBka\S3SGF+.W,>HR)dc9<,g)NStQ<HlH^:E\]C3YtD)?<IisCF<#-%/sJ5bk%$tUZt*<'(!>LV7NorN>Hnt7]BcBLk.8V253X7<8kYPo&l?%gj6^-2Ye*je!V:(W!dsB,b+qT`CEmGtlj7VD(H6A4bV>*M%-7\AEeASe9#KH56:.lBdhfiD:BfB]/E"N)bAc6Je!P&Ts'(EVsN:*fC_Y'Wt]@LS1[C)K/2[>)C1,nTTJ7PL<iMj"_:\^KIHH3Bb%8,%FP.P`iWV.S_MUg"UI9<PF3]2U!1f2gu+g5hJd3OV5sL,m.M-Lb1"AS1Qa-J:(d\S3PEds]C@15UjieoQ;,dEe&aa_95YJ!QMo%8f/k&QV-36g'A*oqk5\^6:ttMK0V'l*Yjqs#XYP1BVU@g@pY5hl8cW&84)W>ko%6oek1RL2,46r(T`6-]=Vaae8S_u&`@G#;RClj%1ot^%:KRo4j_;Cb6mX?P/l-?_HH^='Ms8PXXi(&h$SsjqXn@&^,B_1ok5t!h*B[8WQsX&0i+l+d(7q(<d.RQbJgYBp%ctqtW@(([%/(XrbR`b<!hhCQ4?1s677IqAI<_P`FWOlVsK%SmZdhjG'g4o6+qk:</@NfEPIB]UQ',3!7d3OGkZAiTC5Af5&bjV8^Y'UUpF=N-'%^L%_7kZDJ:\>B;g4>@'o--lBOVt",Cl$PXlI(T7,eVg'W]R>&&lfZIOkPMmWLHeO`IZg:O_pb*92qMD30AjM$:@E,9hEO,ohVJ3T%pWL%pa3UB,I=-26;mG*"a8^?8J%GY`m=ooa^=A".s2*U8ZJ8CXHZaZ+cc:geGFqV`hn=A`\bpXJnc&'i6s'o=o!/%>O72KY+7F-K%l!L%]^Y2F9?_.2fn#HufY$SbhT7?k1m["I9J)!0anAEe7(]V#EFS!u!p#dte%p,C;?2sBUFFA@7MS&]\oU"%)LRW4CpCB3\Dnk0/%?Bh@;6Lu!HIf0*#Y5SrGiOHu~>%AI9_PrivateDataEnd