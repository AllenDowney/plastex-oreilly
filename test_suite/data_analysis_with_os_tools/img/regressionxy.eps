%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: regressionxy.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Manoj Bhatt
%%CreationDate: 10/4/10
%%BoundingBox: 0 0 266 194
%%HiResBoundingBox: 0 0 265.4463 193.6274
%%CropBox: 0 0 265.4463 193.6274
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 6658 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFA8A87DA8FD7CFF7D2E527DFFA87D7DA87D7D7D847D7D7D847D7D%7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D84%7D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D7D847D7D%7D847D7D7D847D7D7D847D7D7D847D7D7DA87D7D7D847D7D7D847D7D7D84%7D7D7D847D7D7D847D7D7D84FD047DFFFFFFA87D527DFF7D7DFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87DA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA884A8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8A8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF52FD04FFA8FFA8FF%7DFD17FFA8FD05FFA8FD1DFFA8FD3AFF7DA8FD07FFA8A8FFFFFFA8FFA8FF%A8FFA8FFA8FD05FF7D7DA87D525252FF52A8FD58FF7DFF7DFD08FF7DFFFF%FFFD0BA8FD04FFA827FF5252527D7D527DFD56FFA8A8FFFF7DA8FD07FF84%A8FD11FFA87DFD5DFFA8A8FFFFFF7DFD08FF7DA8FD04FFA8FFA8FFA8FFFF%FFA8FD04FFA87DFF7EA87DFD04A8FD53FFA8A8A8FD04FF7DA8FD07FFA8A8%FFFFFF7DFFA8A8A8FF7DFFA8FD05FF7D28A87D275252A8277DFD52FFA8A8%FD06FF7DFD08FF7DA8FD11FFA852A87D7D7DA8A852A8FD50FFA87DFD08FF%7EA8FD07FFA8A8FD19FF7DFD51FF7DFD09FF7DFFFFFF7D7DA87DFF7DFD69%FFA87DA8FD0AFF7DA8FFFF7D7D2752FFA87EFD67FFA8FFA8FD0BFF7DFFFF%FFA87D7D7DFF7DA8FD66FF7DA8FD0CFFA87DA8FD07FFA8A8FD64FFA8A8FD%0FFF7DFD08FF7DA8FD62FFA8A87DFD10FF7DA8FD07FFA8A8FD61FFA8A8A8%FD11FF7DFD08FF7DA8FD60FFA8A8FD13FF84A8FD07FFA8A8FD5FFF7DFD14%FFA852FD08FF7DA9FD5DFFA8A8FD12FFAF7DA8A87DA8FD07FFA8A8FD5CFF%A8A8FD11FFA8A87DFFFFFF7DFD08FF7DFD5BFF7DA8FD11FFA87DA8A8FD04%FF7DA8FFFFA8A87DA8FFA8A8FD59FFA8A8FD10FFA8A8A8FD07FF7DFFFFFF%7D527D52FF7D7DA8FD56FFA87DFD0FFFA8A87DA8A8FD07FFA87DA8FFFFA8%7D52A8FFA8A8FD56FFA8A8FD0FFF7EA8A8FD0BFF7DFD04FFAFA8A8FF7DAF%FD54FFA884A8FD0DFFA8A87DA8FD0DFF84A8FD07FFA8A8FD53FFA8FD0FFF%7DA8A8FD0FFF7DFD08FF7DA9FD52FF7DA8FD0CFFA8847DFD12FF7DA8FD07%FFA8A8FD50FFA8A8FD0CFFA97DA8A8FD13FF7DFD08FF7DFD46FFA87DFD07%FFA8AFA8FD0BFF847D7DFD16FF7DA8FD07FF84A8FD45FF5252FD04FFA8FF%A87EFD0BFFA87DA8FD18FF7DFD08FF7DA8FD46FFA8FD05FF7EFD0BFF7DA8%A8FD1AFF7DA8FD07FFA8A8FD4BFF7DFD09FFA8A87DFD1DFF7DFD04FFA8A8%A8FF7DFD47FFA8FFFFA8A8FD08FFA87DA8A8FD1EFFA8A8FFFF5352527DFF%847DFD48FFA87DFD07FF537DA8FD21FF7DFFFFFFA852527DFF7DA8FD46FF%7DA8FFFFA8FFFFFFA8A87D5252FD21FFA87DA8FD04FFA8FFFFA8A9FD45FF%A8A8FD06FFA8A8A8FD25FF7DFD08FF7DFD44FFA87DFFA8FFFFFFA8A87DA8%FD27FF7DA8FD07FF84A8FD41FFA8A8A8FD05FF7EA8A8FD29FF7DFD08FF7D%A8FD40FFA8A8A8FFFFFF7DA87DAFFFFFA8FD28FF7DA8FD07FFA8A8FD33FF%A8A8FD0AFF7DFD05FF7DA8A8FD2DFF7DFD08FF7DA8FD33FF7D27FFAFFFA8%FFA8FFFD04A8FFFFA8847DFD07FFA8FD28FF7EA8FD07FFA8A8FD33FFA8A8%FD07FFA87DFFFFA87DA8FD32FF7DFD08FF7DA9FD34FFA8FD05FFA8A8A8FF%7D522EFD0BFFA8FD28FF7DA8FD04FF7DA8FFA8A8FD39FFA884A8A87DFF7D%7DFD34FF7DFD04FFA82752FF7D7DA8FD33FFA8FFFFFFA85227A8A8FD0FFF%A8FD27FFA87DA8FD04FF277DFF7EA8FD37FF7D7D7DA8FD3AFF7DFD06FFA8%FF7DA8FD34FFA87D52A8A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF7D%52FD28FF7EA8FD07FFA8A8FD33FF7D7D7DFD05FFA8FD0FFF527DFD28FF7D%FD08FF7DA8FD21FFA852FD09FFA9FFFFFFA8A8527DA9FD40FF7EA8FD07FF%A8A8FD21FF7E52A8FFA8FFFFFFA8FFFFFFA8A8A87D7DFD43FF7DFD08FF7D%A9FD22FFA8FD09FFA87D277D7DFD44FF7DA8FD07FFA8A8FD2BFF7EA87D7D%FD46FF7DFD08FF7DFD23FFA8FD05FFA87D7DFFAFA8A8FD46FF7DA8FD07FF%84A8FD26FFA87DA8FFFF7DA9FD48FF7DFD05FFA8A8FF7DFD23FFA8FF7DA8%7DFFA8FFA8A8FD49FF84A8FD04FF2784FF7E7DFD21FFA8A87DAFFFFFFFA8%A8FD4BFF7DFD04FFA82759FF7DA8A8FD1BFFA8FFFFAF7DA8A8FFFFFFA8A8%A8FD4BFFA87DA8FD04FFA8FFFFA8A8FD1BFFA8277DA87DA8FD04FFA8A8A8%FD4DFF7DFD08FF7DA9FD1BFFA8527EA8FD04FFA87DA9FFFFA8FD4CFF7DA8%FD07FFA8A8FD19FFA8A8A8FD07FFA8FD51FF7DFD08FF7DFD17FFA9A87DA8%A8FD05FFA87DA8FD05FFA8FD4CFF7DA8FD07FF84A8FD15FFA87EA8FD07FF%A8FFA8FD05FFA87EFD4CFF7DFD08FF7DA8FD12FFA8A87DA8A8FD07FF7D7D%A8FFA8FFA8FFFF7DF8FD4CFF7DA8FD07FFA8A8FD11FF7DA8A8FD08FFAFA8%FD57FF7DFD08FF7DA8FD0EFFA87E7DFD05FF7DFD04FFA87DFD58FF7EA8FD%04FFA8A8FFA8A8FD0CFFA87DA8FD06FFA82784FFA8A8A8FD59FF7DFD05FF%2752FF7DA8A8FD09FF7D7D7EFD09FF7EFFA8A8A8FD59FFA87DA8FD04FF52%7DFFA8A8FD08FFA87DA8FD0CFF7DA8FD5CFF7DFD08FF7DFD07FF7DA8A8FD%0CFFA8A8FD5EFF7DA8FD07FF84A8FFFFFFA8A87DA8FD0DFFA884FD5FFF7D%FD08FF7DFFFFA87D7EA8FD0DFF7DA8A8FD60FF7DA8FD07FFA87DA8A8FD0F%FFA8A8FD62FF7DFD08FF7D7DA8FD0EFFA87DFD64FF7EA8FD07FFA8A8FD0E%FFA8A8FD65FF7DFD08FF7DA9FD0DFFA8A8FD66FF7DA8FD07FFA8A8FD0BFF%A8A8FD68FF7DFD04FFA87DA8FF7DFD0BFFA8A8FD69FF7EA8FD04FF527DFF%7D7DFD08FFA87DFD6BFF7DFD04FFA8527DFF7DA8A8FD05FFA8A8A8FD6BFF%A87DA8FD04FFA8FFFFA8A8FD06FFA8A8FD6DFF7DFD08FF7DA8FD04FF7DFD%70FF7EA8FD07FFA8A8FFFFFFA8A8FD70FF7DFD08FF7DFFFF847DFD72FF7D%A8FD07FFA8A8FFA8FD73FF7DFD08FF7D7DA8FD74FF7DA8FD07FF7EA8FD75%FF7DFD08FF7DA8FD75FF7DA8FD04FF52A8FF7EA8FD57FFA8FD1DFF7DFD04%FFA85252FF7D7DFD1CA87DFD1DA87DFD1CA87D7DFD1CA87DA8FD04FF52A8%FFFF7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA8A8A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7EA87EA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7EFD26FFA8FD3CFFA8FD1CFFA8FD07FF8452FD1CFF527DFD1BFF527D52A8%FD1AFF525252FD1AFFA8277D52FD06FF5252A8FD1BFF5252A9FD1AFF7D52%7D7DFD1AFF7D5252A8FD19FF7D525259FD06FFA87DFD1CFFA87DFD1BFFA8%A87DFD1BFFA8A87DFD1AFFA87DA87DFD40FFA8FD3EFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-10-04T13:55:10+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-10-04T14:26:55+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-10-04T14:26:55+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>188</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7L+Y2ifmDdaobny3d3TW&#xA;cmnmGazjmjijWUahZuxiVZbKUyyWi3C8jOtOivGWriqam683WHl/yjpwkgh1y/aGy1O4vEe9VJIt&#xA;PmuJW/dzW5dmktuPLn3rviqZCz89U31fS6/9sy4/7L8Vd9T88/8AV30z/uGXH/Zfirvqfnn/AKu+&#xA;mf8AcMuP+y/FXfU/PP8A1d9M/wC4Zcf9l+Ku+p+ef+rvpn/cMuP+y/FXfU/PP/V30z/uGXH/AGX4&#xA;q76n55/6u+mf9wy4/wCy/FUPYR/mBcWkc0+oabbytXlC2m3BK0Ygdb4dQK4qiPqfnn/q76Z/3DLj&#xA;/svxV31Pzz/1d9M/7hlx/wBl+Ku+p+ef+rvpn/cMuP8AsvxV31Pzz/1d9M/7hlx/2X4q76n55/6u&#xA;+mf9wy4/7L8Vd9T88/8AV30z/uGXH/Zfiqg8fn9b+G3Go6a0MkUsj3H6NuKI0bRhUP8Ap/VxIx6/&#xA;s4qr/U/PP/V30z/uGXH/AGX4q76n55/6u+mf9wy4/wCy/FXfU/PP/V30z/uGXH/Zfirvqfnn/q76&#xA;Z/3DLj/svxV31Pzz/wBXfTP+4Zcf9l+Ku+p+ef8Aq76Z/wBwy4/7L8VUNQj8/wBvYXNxBqOm3E0M&#xA;TyRW66bcAyMqkqgpfndiKdMVV/qfnn/q76Z/3DLj/svxV31Pzz/1d9M/7hlx/wBl+Ku+p+ef+rvp&#xA;n/cMuP8AsvxV31Pzz/1d9M/7hlx/2X4q76n55/6u+mf9wy4/7L8Vd9T88/8AV30z/uGXH/Zfirvq&#xA;fnn/AKu+mf8AcMuP+y/FVDy9q2uyeYtX0XVZ7a6On29lcR3FraTWYrdNcBkIlmuQ/EQKeStTcjqM&#xA;VZJiqReYv+Ox5X/7acn/AHTL3FU2vbX61B6XrSwbg+pC3B9u1aHFUB/h7/tZ3/8AyP8A+bcNq7/D&#xA;3/azv/8Akf8A8242qaQx+lEkfJn4KF5uasaClWPcnArANd0yxuPzh0O6nvYoEt7L1JLOWa3DXN0p&#xA;uEsFSAyeuxjSe8k5cOO2xJB4qsAf8sPy5+sXH1zzxpD3EiXun2P+86PFqEphpdGtyTJfxFR6jjiz&#xA;VXZabqvStD8t6Zb/AJk6x5hi1m0ubzUYpLd9KijjEsP1cWqyMGEjPzH7v1zx+LlDXjxHJVm2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVD3moWdmIjcyrGZ5FhhU7s8jdFRRUse+&#xA;3bfpiqBNle6rHNHq0YgsWcejZxSN6jovIEXDoQpV6j92u21CzAkYqhtOiii866pFEixxR6Vpaxxq&#xA;Aqqqz34AAGwAGKq9/wCcPLGn6jPpt5qUMF9a2Ump3ULNvFZwsqvNIRsi1cUrue1aHFUDf6lZapN5&#xA;M1Oxk9axvr36zazUZecU2k3jo3FgrCqsDQiuKsgvLGyvYfQvLeO5hJBMUyLItR0PFgRiqHbQdDYw&#xA;M2nWpNsALYmGOsYB5AJ8Pw0O+2KtjQ9EEk8o0+2Et0GW5f0Y+Uoc8nEhpVgx3NeuKouKKKGJIYUW&#xA;OKNQkcaAKqqooFUDYADFUi1DyZYX3m3TvNEl1cx6hpkTQW0UbRiD05A4lVlZGY+pzXl8VRwXjx+L&#xA;kqxlPyK8oD616l1fTfWbC50lebwfubO54fu4qQjeLh8Dtybc8i21FU80fyabPz9r/mmUp/uSit4L&#xA;ONXZioSJFnkdSqqjSmKJaAt8Mamu/FVWU4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYqlcurvdPd2ejlJr62okk0of6rHIWAZGdB8ciKS3pqa9mKcgcVV7PS4oZI7u4IutTEQhkvmUKx&#xA;WvIqgGyKW7D2rUiuKo3FUis/+U51f/tmaZ/1EX+KqfmXyJoHmS5WfVhPIq2ktl6MUzwKUlngueXK&#xA;IpIGWSzjIo9OtQcVS288tafpdn5I8vW8lwbHT7wWsMhnkWcpDpV4qkyxmNq/D+zQdgKbYqzJFCIq&#xA;CpCgAEksdvEmpP04q3irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqn&#xA;NcQQBTNIsfNuEYY0LMQSFUd2NOgxVKzBfa1bD62s+l2pev1aOVVnmioKCZkHKH4v2Y5K06kVK4qn&#xA;AAHTbFXYq7FWN6PZQ2nnbWUiaVg+m6a5M00s5qZ78bNKzkDboNsVZJiqReYv+Ox5X/7acn/dMvcV&#xA;T3FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUsudXaU3Nto4ivNQt2&#xA;WOZWfjFCzgkeq4DbgLui1bcVoDXFVS30eBb0ajc0uNR4KgmNeEfwhXFvGzP6SuRVqEk9yaCiqPxV&#xA;2KuxVLb7zBp1rcmzQvd6iBy+oWq+rMAehcD4YlNdmkZV98VSnQZ9Sm856zJf2qWbnTtN9KFZfWYR&#xA;+vf0MhCqofxVSwH8xxVC+bvzBudA1dtNTShMP0e+oR31xdRW1ufTu7a2dCQJpRwF3zb93yNAsaux&#xA;oFV2pay89v5J1a9sp7KW5u1nnsPTklnheXSbtjEyInqFkLUPwfMDFWXowdFcVAYAgEFTv4g0I+nF&#xA;W8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqncXEVvby3Ex4xQo0kjAFqKoqT&#xA;QAk7DtiqWodR1UW1wjzaZYhi8lvJGqXMwUjhUlm9KNhuylRJ0+wajFUytrW2tYVgtokghWpWKNQi&#xA;jkSxoq0G5NcVVMVdiqTyeZrWWRoNJifVrhCVf6tT0EYbESXDERKVPVQS/wDk4qs/ROsah8WrXpgg&#xA;Nf8AcfpzPEtOwe6+CdyPFPTHYg4qmdjp9hYW4trG3jtYASRFEoRanqaKBue5xVI9HvYbvztrLxLK&#xA;oTTdNQiaGWA1E9+dllVCRv1G2Kprqnl/QdXQpqum2uoIUMRW6gjmBjLpIUpIrfCXiRqeKg9hiqWa&#xA;xaWtnfeUbS0hS3tbfUXigt4lCRxoml3gVERQFVVAoAMVZFirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVS+91SRCYdPgF/eB/TeJZFRImKhqzv8RjHFgdlLHspxVuHRrcai2o3Ej3V&#xA;2CwtmlI4wI3VIUUBVr+032j0JpQBVH4qsnnggheaeRYoYwWkkchVUDqSTsBiqUHzBcXvw6HZm9U/&#xA;8f0zG3s/9jIVeSXboY42U/zDFWj5be+PLXbttQHeyQGCy2IO8AZmlG24mdx4AYqnMcccUaxxqEjQ&#xA;BURQAqqBQAAdAMVXYq7FUis/+U51f/tmaZ/1EX+Kp7iqReYv+Ox5X/7acn/dMvcVT3FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWM3Np5x/x9bXEOqwJ5ZbT5Vk0toOUhuUdKSeoGU/tjv0F&#xA;Kb8gqnV7dfUrWS6u7uC3togDJNKpVFHQ1JcdT0xVCW8us388E0bx2+kMpduUUsd3JUkKhSSnorTe&#xA;u7GvRMVR+n6dY6dapa2UKwQJUhF7k7szE7szHdmY1J3OKtahqWn6db/WL+5jtYKhBJKwUFm+yq16&#xA;sewG5xVLv0nrV+3HS7L6rbn/AI/9RV0/4C1BSZvf1DH7VxVdD5Ys2lS41OWTVrtGDpJdkGONlNVM&#xA;VuoWFCvZwnPxY4qnGKuxV2KuxV2KpFZ/8pzq/wD2zNM/6iL/ABVjnn3UvP1lrkS6RJONDls1a5ey&#xA;svrFxA41KyjmlVilyJZBZyztHEIv2SeL0ACqIN15jm0fyDc6hbp/iCWeJ7+3mYwKLhtIuzMG4pJw&#xA;IYn4QvXbFWboXKKXAV6DkAagHvQkCv3Yq3irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSjU&#xA;9R+ra1YwRQSXNzNDOFjjGyrzhq8jtRUVfnU9FBO2KtWOm6st3JeahOLuZ6LHCrvHbRJyDDhDxbk4&#xA;Kj43Jav2eIPHFVTUteg0301uzGJ5q+hbRtJLPIR/vuGONpH/AMohdsVSGPVfzF1HzObFdJj0Xy2b&#xA;USnVZnjnuzMWIMaRK7Ro1NwWDADc7niFWQaf5e06yn+tUe61ChVr+6Yyz0PUKzbRqf5Iwq+2Kpli&#xA;rsVdirsVdirsVdirG9He/fztrJvIYoZBpumhFhlaYFfXv6Elo4aH2p9OKskxVIvMX/HY8r/9tOT/&#xA;ALpl7iqe4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqtjkjljWSNg8bgMjqQVZSKggjqDiq7FVO4uLe&#xA;2gee4lSGCJS0ssjBUVR1LMaADFUvM+p385jt0FtpUkNRf8h68hlSqmCOhCcOVeUm9RThT4sVS1r7&#xA;RNH1OHT9Oie6ukjmMtlaVnn9SZ4mD3Ds3wGShPqTuK/zYVRn1bzFqO91ONJtT/x7WpElyR/l3Dgo&#xA;lQd1jSo7SYFVfLml2FnpsEtvCFnuYo5Lm4NXmlcrXlLKxZ3O/VicVTXFXYq7FXYq7FXYq7FXYq7F&#xA;Uis/+U51f/tmaZ/1EX+KprqGo6fptnLfajdQ2VlCAZrq4kWKJASACzuQo3NNziqTa1cW9zqHlK4t&#xA;5Umt5tReSGaNg6Oj6XeFWVhUEEGoIxVkOKuxV2KuxV2KuxV2KuxV2KuxV2KuxVQv7G2v7C5sbpS9&#xA;tdxPBOgYqTHIpVgGUhhseoOKpN5L8s6VoflTS9L08TJaW9vH6atNKxqw5sa8u7MTQbYqjLzUNMtb&#xA;yKyaSWS+mVpEtommkcIagyOI+fCOooGYUrsN9sVYnc+ZLa20+91K6gn8xzWQ9c2NjDLPZ2rW4Yjj&#xA;NKv7yVT9phV67iNcKEz8s3F75v0Cx1y9uJ7Ow1KFZ4tJgD2zIr78ZptppD7oUVh2IOBLJrKxsrG3&#xA;W2sreO2t0rxhhVUQV3PwqAN8VV8VQmkf8cmy/wCMEX/EBiqLxV2KuxV2KuxV2KuxV2KuxVIrP/lO&#xA;dX/7Zmmf9RF/irfnXy0/mXy9LpUd2bKVprW4iugJDxe0uY7lf7mS3lFTFSscqMOoYHFUml8tQaXp&#xA;fkPy608k0Wm3Edn9YjZ7Z3+r6RdoHrEysvLhWgb78VZoihEVBUhQACSWO3iTUn6cVbxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxVTubm3tbeS4uZUgt4lLyzSMERFG5ZmagAHvirDLbzNrOo2ENh5f0+dYRbRr+&#xA;nplMduGVVLegrRytN8PLi4QqWp1G+FCha/lpo767ba/rd7f6rf29sbQW0huDZGKVudGgk9V3+IVI&#xA;eRhXqNlopZvHNbxIsUcbJGg4oixOFUJtQALQDw/DArf1uL+WToD/AHUnf/Y4q761FWnGTuP7uTt/&#xA;scVQWueYLTR9GvdVnhuJobKBrmSKCCR5GVATRVp1279O9BiqzylqUWp+V9J1CKOWKO5tIZFjnQxy&#xA;KCg2ZW3H8e22KptirsVdirsVdirsVdirsVdirG9HsobTztrKRNKwfTdNcmaaWc1M9+NmlZyBt0G2&#xA;KskxVIvMX/HY8r/9tOT/ALpl7iqe4q7FXYq7FXYq7FXYq7FWNav5cnvPO+jaumrXtrHY2t0r6dC6&#xA;i2mLmNQ0iEGpHP8ABaUpuqn/AKEta/WJO+1I+/T9jtiqGv7u10+D173UDbxGiqz+kCzfyqOFWZv5&#xA;RuewxVhms+dPNv8Aiew0XRtIuGtb61ubldRuvQSQGGlAtnI0EnH9keq0e7DsDUqm2meSnuzHe+bZ&#xA;Bq+oJKJreCRi9tbkLRQsQEcDsOvP0h27jkVWWYFdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;qRWf/Kc6v/2zNM/6iL/FUR5p8y6b5Z0OfWdRJFrbtEhCtGhLzyrDGOczxRLV5BVndVUbsQBXFUn1&#xA;fXtMuY/JmttMtrYXl6LmOS4ZY+KT6Vdsgck8QfiA69cVZYjo6K6MGRgCrA1BB3BBGKt4q7FXYq7F&#xA;XYq7FXYqk+q6zp2n6taLcy/vnt5/Sto1aWd/ji+xDGGkbp2XFVpfzLqNBEq6LaH7UknCe9I/yUBa&#xA;CI+BYye6jFUr0W0W8tTcab6q6o0aJN5gvozOxLD98tt6jKRxIqAqiEE7Bt1wqyWz0+2tOTooa5lW&#xA;Nbm7YL60xiXgrSsoXkaf2YFROKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksb0fULC987&#xA;azJZ3MVzGmm6ajvC6yAMJ78lSVJod+mKpvrOjadrOnvYahG0ls7RyUSSSF1khkWWN0liZJEdJEVl&#xA;ZWBBGKpPqWn2enXHk7T7KIQWdnfmC2hWpCRx6VeKigmp2A74qyXFXYq7FXYq7FXYqk+qeYLNGn0+&#xA;yke51fgypb2iCeSJyPhaSpWKOlaj1XUHFUg8oeXPzCj0G1s/NPmEy3EYb6xLaJGs8oY1VXmK0Tip&#xA;4ngvKu4kxVO49P03Qreb6mJWuZV9R4oRHLd3LBgvqMzjnI1XCl5GotdyBviq+LS7rUooJtbBT05D&#xA;KmnRy8ouqmP1yqx+qyca8fsAn9qitiqO0j/jk2X/ABgi/wCIDFUXirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVSKz/AOU51f8A7Zmmf9RF/iqe4qkXmL/jseV/+2nJ/wB0y9xVPcVdirsV&#xA;diqTN5nt7h2h0aFtWmBKtLCaWqMNj6l0f3fwk/Eqc3H8uKoa603V7yW1XVr4rb3EpR9PsS8EfH0p&#xA;Ho84InkIKjdSikdUwqndlY2VjbrbWVvHbW6V4wwqqIK7n4VAG+BUum1W71GBh5deCUiT05L6cSGB&#xA;KCpaLioWf+X4XAB6moK4qr2mmJa3E93FbRG8uuJuLhpXaRiP2OTKxEa/sqPhHYDFVe5fVfq0v1aK&#xA;D6zwb0PVkf0+fH4OfFK05dadsVSzyPH5oj8q6fF5ojt4tbjj4XKWhLRfCaJuf2uFOVNq9MVT3FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkVn/wApzq//AGzNM/6iL/FVXzhd+YLTy3fT&#xA;+XbP6/rQj42VvWMfGzBS/wC9eJG9NSX4lxypSu+Ksbg1DzDPoH5fXup2kja9LNE+oW0wS3kNw2kX&#xA;frFlHwxnlU8aCnSgO2Ks7QsUUsvFiAWWtaHwriqy5uba1ge4uZUgt4hykmkYIijxZmoBiqUf4gvL&#xA;8U0Kya5Q1A1C5Jt7TbupIMsvipRODfzjFWz5aW9PLXbltUB62ZX0rIf9G4Lep/z2Z6dqYqnKIiIq&#xA;IoVFACqBQADYAAYqxbzdozS6xomvtq9/Zw6PJITpVkvqLePMnBUaMKxY/qFfs/aCqZ29jqN7JbXd&#xA;9PPbRRjn+jA0YPqcmoZ5YftgJx/dqeFa1L7UVTaONI0WONQkaAKiKKAAbAADFW8VdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVY1o013L511lrq2+rONO00KnNZKr69/8VV6fLFW&#xA;S4qxvzhfWdjfeWbq7lWGBNTk5O3idNvQqgdSzE0AG5OwxVEHUtf1EU0uzFjbk7X2pKwYgHqlopSQ&#xA;1/4teMjwOKq1v5bshOl3fySapexmsc92VYRnxihUJDGf8pUDeJOKptirsVSyXVbi5dI9Hjju09Vo&#xA;rm9MimCAxkCRSFJd5N6BQKVryZaYqrWOkWtncXFyrPNd3TVmuJmLuVBJSNeioicvhVQB36kkqo3F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUis/+U51f/tmaZ/1EX+Kp&#xA;7iqReYv+Ox5X/wC2nJ/3TL3FU9xV2KoXUdTstOt/rF3JwQsEjVQzvI5+ykcaBndzTZVBOKoYW9/q&#xA;Ege6P1fTJIeLaayKZZPVSji4ergBeVAsfcVLEHjiqYQQQW8McEEawwRKEiijAVFVRQKqjYAYqvxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpFZ/wDKc6v/ANszTP8A&#xA;qIv8VWeftDv9c8qXmmWEFpc3c5hMUOoNItqTHMkh9X01kLABK8GRkY7OpUkYqlU+iz2Gm+RNGWeS&#xA;0lsrlLb1YpEuHX0dIu0IEssKLJ9mnIwrX+VeyrNEUqiqWLkAAuaVNO5oAPuGKoC41SU3MNvYWxve&#xA;blbicOqQwKjcX5v8RLjcBFBNftcRviq/TdMNm00sl1Pd3NwQZZZnqAFrxWONeMcarX9lan9ok74q&#xA;jcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirG9Htprfztr&#xA;Ky3Ut2W03TWDzCIFR69/8I9JIhT5iuKskxVjfnC+tLG+8s3V3IIoE1RwWoSSW028VVVVBZmZiAqg&#xA;VJ2GKpgYdR1CZ/XZYNHkhAWBPUS6kMiipkf92YeFSOK1bvyH2cVR9raWtpbR21rCkFvCoWKGNQiK&#xA;o7Ko2GKquKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kp&#xA;FZ/8pzq//bM0z/qIv8VRfmHXbbQ9MN/PDLcVmgtobaDh6ss91MlvDGnqvElWklUVZgB1JpiqS3Ot&#xA;WOs/4F1eyLNaane/WbUsAG4TaReyLyFTQ8TuPHFWWYq7FXYq7FXYq7FXYqh9Pvor6zjuoQyxyV4h&#xA;6BvhYrvQnwxVEYq7FXYq7FXYq7FVB72JL+GxIb1Z4pZ0YU4hYWjVgd61rMKbeOKq+KuxV2KuxV2K&#xA;uxVQ1C9isbC5vpgzRWsTzyKlCxWNSxC1IFaDxxVXxV2KuxV2KuxV2KuxVIbJwfPmsJ3GlaWT9Nxq&#xA;H9MVTLWNH0/WNPewv0aS2kaNyEkkhdXhkWWN0kiZJEZJEVlZWBBGKsP/ADGvvLvlfyjp9pN5etdY&#xA;0y25x2um3XH0YodP0+4u2ZTJHcDmtvaOkYpuSAWAqQqny+Q/IpUEeXNMAI2BsoB+BTFW/wDAXkb/&#xA;AKl3TP8ApCt/+aMVd/gLyN/1Lumf9IVv/wA0Yq7/AAF5G/6l3TP+kK3/AOaMVd/gLyN/1Lumf9IV&#xA;v/zRirv8BeRv+pd0z/pCt/8AmjFXf4C8jf8AUu6Z/wBIVv8A80YqxXyHF5I80x3zSeUNKsJLSQBL&#xA;Y2tZTC5YRSus9paqBIEJUxtIp/m2xVlX+AvI3/Uu6Z/0hW//ADRirv8AAXkb/qXdM/6Qrf8A5oxV&#xA;3+AvI3/Uu6Z/0hW//NGKu/wF5G/6l3TP+kK3/wCaMVd/gLyN/wBS7pn/AEhW/wDzRirv8BeRv+pd&#xA;0z/pCt/+aMVYN5ovfJ+j6/caHb+RdMuL1UtGs5biO1t4Jvra3TsTIkNw0SItg4qy1Z9uIFGKrLNE&#xA;8r+QNX0Ww1WHy1p0cOoW0N1FHJZW4dVmjEihhw2IDb4qjf8AAXkb/qXdM/6Qrf8A5oxV3+AvI3/U&#xA;u6Z/0hW//NGKu/wF5G/6l3TP+kK3/wCaMVd/gLyN/wBS7pn/AEhW/wDzRirv8BeRv+pd0z/pCt/+&#xA;aMVSPzvo/kryz5V1LXk8nafqX6Oged7WO2s4iVQVYl5FACqNzQE+Ck7Yqg/J1v5J8xX+s2kvlHSb&#xA;I6ZcPFAhtayzQCeeCO4Ky2lvGEl+rFkMUko6gkEUxVlH+AvI3/Uu6Z/0hW//ADRirv8AAXkb/qXd&#xA;M/6Qrf8A5oxV3+AvI3/Uu6Z/0hW//NGKu/wF5G/6l3TP+kK3/wCaMVd/gLyN/wBS7pn/AEhW/wDz&#xA;Rirv8BeRv+pd0z/pCt/+aMVeej8xtP8AK2ratp+l+TbOxt7Rpprm5spY4klt7KRo5t4Lb03u0Vo3&#xA;W3DseMgDMjBlCr1/FUq8y/4V+oR/4m+o/UPWj9L9Jej6P1iv7rj6/wAPqV+zTfwxVNcVdirsVdir&#xA;sVdirsVSTyx/gql9/hf9G0+sN+kv0Z6H+9P7Xr+h/uzx5b4qneKuxV2KuxV2KuxVj/mX/AHp3f8A&#xA;ib9Fen6Vv9f/AEl9W4+j6r/VvW9f9j1ufp8tuXKm9cVT6L0/TT0uPpcR6fGnHjTalNqUxVdirsVd&#xA;irsVdiqF1X9Ffoy6/S3ofov0n+u/W+H1f0afH6vqfBw49eW2Kpf5e/wX9a1P/Dn6N+t+v/uZ/R3o&#xA;ep9Yq3+9Xo/F6leX29+uKp1irsVdirsVdirsVYV/yBb9Iz/8o3+kv0hH9a/3h9f9JcpPS9T9v6zz&#xA;9TjX468qd8Vf/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:87FBE94F51D1DF11AF4DB8170CF9340D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:B1E6D8BB55D1DF11AF4DB8170CF9340D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helve; Helvetica</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -193.627 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 193.627 li
265.446 193.627 li
265.446 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
260.583 182.724 mo
257.433 182.724 li
13.9326 182.724 mo
17.083 182.724 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/UniqueID 28352 def/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B854D00D> |-/zero <1C60D8A8C9B7EF326C968E306016D52B972317960D8F5FD9CF19407412ACDAB79CA610AF5680AA7B72207450A6242E2E0D68A5786F14263E889E5C8F2E3B1F3B57C131555AFBBA2F2574AAA6D70E3BCBA1C3BCCEEE066DF7> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DVPWGK+Helvetica /Helvetica findfont ct_VMDictPut/DVPWGK+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]DVPWGK+Helvetica nfDVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 185.06 mo( )sh5.83594 185.06 mo(0)sh260.583 160.324 mo
257.433 160.324 li
13.9326 160.324 mo
17.083 160.324 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGK+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/DVPWGK+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two 205{/.notdef}rp]DVPWGK+Helvetica nfDVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 162.662 mo( )sh5.83594 162.662 mo(2)sh260.583 137.974 mo
257.433 137.974 li
13.9326 137.974 mo
17.083 137.974 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B2611702A5DA745406DEB5C33C> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGK+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/DVPWGK+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four 203{/.notdef}rp]DVPWGK+Helvetica nfDVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 140.31 mo( )sh5.83594 140.31 mo(4)sh260.583 115.574 mo
257.433 115.574 li
13.9326 115.574 mo
17.083 115.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C70508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E2779764DBD296AF281D4117BA4D> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGK+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/DVPWGK+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]DVPWGK+Helvetica nfDVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 117.912 mo( )sh5.83594 117.912 mo(6)sh260.583 93.1738 mo
257.433 93.1738 li
13.9326 93.1738 mo
17.083 93.1738 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1CB4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDDAD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27315B3507F9DAF305> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGK+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/DVPWGK+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWGK+Helvetica nfDVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf3.89063 95.5054 mo( )sh5.83594 95.5054 mo(8)sh260.583 70.8237 mo
257.433 70.8237 li
13.9326 70.8237 mo
17.083 70.8237 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE02958A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGK+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/DVPWGK+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]DVPWGK+Helvetica nfDVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf0 73.1616 mo( 10)[1.9458 3.89209 0 ]xsh260.583 48.4238 mo
257.433 48.4238 li
13.9326 48.4238 mo
17.083 48.4238 li
@
DVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf0 50.7554 mo( 12)[1.9458 3.89209 0 ]xsh260.583 26.0737 mo
257.433 26.0737 li
13.9326 26.0737 mo
17.083 26.0737 li
@
DVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf0 28.4116 mo( 14)[1.9458 3.89209 0 ]xsh260.583 3.67383 mo
257.433 3.67383 li
13.9326 3.67383 mo
17.083 3.67383 li
@
DVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf0 6.01318 mo( 16)[1.9458 3.89209 0 ]xsh13.9326 3.67383 mo
13.9326 6.82373 li
13.9326 182.724 mo
13.9326 179.574 li
@
DVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf11.0156 192.052 mo( )sh12.9531 192.052 mo(0)sh75.583 3.67383 mo
75.583 6.82373 li
75.583 182.724 mo
75.583 179.574 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF322448D34FC69162D5B3FA33847725A6C54ED91995E45D690B7D0E476479D9EDB4F61F0B8E7F37F7415ECCEF12BD0BB3A993663B38C8EEAA49F314551016ECC1F8DE4119690672560B970B6156CCA876B5A96262978DF14B4FCFDE401A9555> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGK+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/DVPWGK+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]DVPWGK+Helvetica nfDVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf72.6563 192.052 mo( )sh74.6094 192.052 mo(5)sh137.283 3.67383 mo
137.283 6.82373 li
137.283 182.724 mo
137.283 179.574 li
@
DVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf132.422 192.052 mo( 10)[1.94629 3.8916 0 ]xsh198.933 3.67383 mo
198.933 6.82373 li
198.933 182.724 mo
198.933 179.574 li
@
DVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf194.063 192.052 mo( 15)[1.94629 3.8916 0 ]xsh260.583 3.67383 mo
260.583 6.82373 li
260.583 182.724 mo
260.583 179.574 li
@
DVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf255.711 192.052 mo( 20)[1.94629 3.8916 0 ]xsh13.9326 3.67383 mo
13.9326 182.724 li
260.583 182.724 li
260.583 3.67383 li
13.9326 3.67383 li
13.9326 3.67383 li
cp
@
138.848 92.7637 mo
138.848 91.894 138.143 91.1885 137.272 91.1885 cv
136.403 91.1885 135.698 91.894 135.698 92.7637 cv
135.698 93.6328 136.403 94.3389 137.272 94.3389 cv
138.143 94.3389 138.848 93.6328 138.848 92.7637 cv
f
114.128 104.884 mo
114.128 104.015 113.422 103.308 112.553 103.308 cv
111.684 103.308 110.978 104.015 110.978 104.884 cv
110.978 105.753 111.684 106.458 112.553 106.458 cv
113.422 106.458 114.128 105.753 114.128 104.884 cv
f
175.808 97.9238 mo
175.808 97.0542 175.103 96.3486 174.232 96.3486 cv
173.363 96.3486 172.658 97.0542 172.658 97.9238 cv
172.658 98.7925 173.363 99.4995 174.232 99.4995 cv
175.103 99.4995 175.808 98.7925 175.808 97.9238 cv
f
126.608 84.1235 mo
126.608 83.2544 125.902 82.5488 125.033 82.5488 cv
124.164 82.5488 123.458 83.2544 123.458 84.1235 cv
123.458 84.9932 124.164 85.6987 125.033 85.6987 cv
125.902 85.6987 126.608 84.9932 126.608 84.1235 cv
f
151.088 89.5234 mo
151.088 88.6543 150.382 87.9487 149.513 87.9487 cv
148.644 87.9487 147.938 88.6543 147.938 89.5234 cv
147.938 90.3931 148.644 91.0986 149.513 91.0986 cv
150.382 91.0986 151.088 90.3931 151.088 89.5234 cv
f
188.168 71.2837 mo
188.168 70.4141 187.462 69.7085 186.593 69.7085 cv
185.724 69.7085 185.018 70.4141 185.018 71.2837 cv
185.018 72.1528 185.724 72.8584 186.593 72.8584 cv
187.462 72.8584 188.168 72.1528 188.168 71.2837 cv
f
89.4077 101.763 mo
89.4077 100.894 88.7021 100.189 87.833 100.189 cv
86.9634 100.189 86.2578 100.894 86.2578 101.763 cv
86.2578 102.632 86.9634 103.339 87.833 103.339 cv
88.7021 103.339 89.4077 102.632 89.4077 101.763 cv
f
64.9277 135.125 mo
64.9277 134.253 64.2222 133.548 63.353 133.548 cv
62.4834 133.548 61.7778 134.253 61.7778 135.125 cv
61.7778 135.994 62.4834 136.699 63.353 136.699 cv
64.2222 136.699 64.9277 135.994 64.9277 135.125 cv
f
163.567 61.4434 mo
163.567 60.5742 162.862 59.8687 161.993 59.8687 cv
161.123 59.8687 160.418 60.5742 160.418 61.4434 cv
160.418 62.313 161.123 63.0186 161.993 63.0186 cv
162.862 63.0186 163.567 62.313 163.567 61.4434 cv
f
101.888 128.763 mo
101.888 127.894 101.182 127.189 100.313 127.189 cv
99.4434 127.189 98.7378 127.894 98.7378 128.763 cv
98.7378 129.632 99.4434 130.339 100.313 130.339 cv
101.182 130.339 101.888 129.632 101.888 128.763 cv
f
77.168 119.164 mo
77.168 118.294 76.4624 117.589 75.5928 117.589 cv
74.7236 117.589 74.0176 118.294 74.0176 119.164 cv
74.0176 120.033 74.7236 120.738 75.5928 120.738 cv
76.4624 120.738 77.168 120.033 77.168 119.164 cv
f
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginDVPWGK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA563254EC441C4BC3817B6ABCAA45C3FADDF2A0C1F1BCD1456474D7370B95E3791CB0774B8A788FAD31DAB8E43BE1DDCC8C2722C438CA874C21003F548D691EAB87ADC2BE2D98ABE47C6EE8D76> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/x <1C60D8A8C9B7A73DEE9439F61CF83FD6F0AADDB8373458EFEDE4BF6C46155F8370F02E9CE5FFD24DBE7D153354FABD4F844978ABB054761731A2B93E507FE62552012BB1EB5E1E3EE678332D9E> |-/y <1C60D8A8C9B7A73DB586573D0157E99900164D3426B7076627BC2EECA01286D768DC747555489A92E6150F2562090A782510749223A2D01B0EE6374EEA8FB8F18250484D2C6B565CDCA8D95B100B7B1E0289ED25E0E350438F56B28A332ADDF034CB8EDC264C3ABAA85278C66F3E4B6419> |-systemdict /gcheck known {setglobal} if end {end} ifendDVPWGK+Helvetica /Encoding getdup 110 /n putdup 111 /o putdup 120 /x putdup 121 /y putpop%ADOEndSubsetFont
/DVPWGK+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /five /six /.notdef /eight 53{/.notdef}rp /n /o 8{/.notdef}rp /x /y 134{/.notdef}rp]DVPWGK+Helvetica nfDVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf53.0078 12.6616 mo(y on )[3.5 1.9458 3.89209 3.89209 0 ]xsh68.1797 12.6616 mo(x)sh244.533 44.5234 mo
244.783 44.4238 li
245.033 44.3237 li
245.283 44.1738 li
245.533 44.0737 li
245.783 43.9736 li
246.033 43.8735 li
246.283 43.7236 li
246.533 43.6235 li
246.732 43.5234 li
246.982 43.4238 li
247.232 43.2734 li
247.482 43.1738 li
247.732 43.0737 li
247.982 42.9736 li
248.232 42.8237 li
248.482 42.7236 li
248.732 42.6235 li
248.982 42.5234 li
249.232 42.3735 li
249.482 42.2734 li
249.732 42.1733 li
249.982 42.0737 li
250.232 41.9736 li
250.482 41.8237 li
250.683 41.7236 li
250.933 41.6235 li
251.183 41.5234 li
251.433 41.3735 li
251.683 41.2734 li
251.933 41.1733 li
252.183 41.0732 li
252.433 40.9233 li
252.683 40.8232 li
252.933 40.7236 li
253.183 40.6235 li
253.433 40.4736 li
253.683 40.3735 li
253.933 40.2734 li
254.183 40.1733 li
254.433 40.0234 li
254.633 39.9233 li
254.883 39.8232 li
255.133 39.7236 li
255.383 39.5732 li
255.633 39.4736 li
255.883 39.3735 li
256.133 39.2734 li
256.383 39.1733 li
256.633 39.0234 li
256.883 38.9233 li
257.133 38.8232 li
257.383 38.7236 li
257.633 38.5732 li
257.883 38.4736 li
258.133 38.3735 li
258.383 38.2734 li
258.583 38.1235 li
258.833 38.0234 li
259.083 37.9233 li
259.333 37.8232 li
259.583 37.6733 li
259.833 37.5732 li
260.083 37.4736 li
260.333 37.3735 li
260.583 37.2236 li
218.833 56.1738 mo
219.083 56.0737 li
219.333 55.9736 li
219.583 55.8237 li
219.833 55.7236 li
220.083 55.6235 li
220.333 55.5234 li
220.583 55.3735 li
220.833 55.2734 li
221.083 55.1738 li
221.333 55.0737 li
221.583 54.9238 li
221.833 54.8237 li
222.083 54.7236 li
222.333 54.6235 li
222.583 54.4736 li
222.783 54.3735 li
223.033 54.2734 li
223.283 54.1733 li
223.533 54.0234 li
223.783 53.9233 li
224.033 53.8237 li
224.283 53.7236 li
224.533 53.6235 li
224.783 53.4736 li
225.033 53.3735 li
225.283 53.2734 li
225.533 53.1733 li
225.783 53.0234 li
226.033 52.9233 li
226.283 52.8232 li
226.533 52.7236 li
226.783 52.5732 li
226.982 52.4736 li
227.232 52.3735 li
227.482 52.2734 li
227.732 52.1235 li
227.982 52.0234 li
228.232 51.9233 li
228.482 51.8232 li
228.732 51.6733 li
228.982 51.5732 li
229.232 51.4736 li
229.482 51.3735 li
229.732 51.2236 li
229.982 51.1235 li
230.232 51.0234 li
230.482 50.9233 li
230.732 50.8232 li
230.933 50.6733 li
231.183 50.5732 li
231.433 50.4736 li
231.683 50.3735 li
231.933 50.2236 li
232.183 50.1235 li
232.433 50.0234 li
232.683 49.9233 li
232.933 49.7734 li
233.183 49.6733 li
233.433 49.5732 li
233.683 49.4736 li
233.933 49.3232 li
234.183 49.2236 li
234.433 49.1235 li
234.683 49.0234 li
234.883 48.8735 li
235.133 48.7734 li
235.383 48.6733 li
235.633 48.5732 li
235.883 48.4233 li
236.133 48.3232 li
236.383 48.2231 li
236.633 48.1235 li
236.883 48.0234 li
237.133 47.8735 li
237.383 47.7734 li
237.633 47.6733 li
237.883 47.5732 li
238.133 47.4233 li
238.383 47.3232 li
238.633 47.2231 li
238.833 47.123 li
239.083 46.9731 li
239.333 46.873 li
239.583 46.7734 li
239.833 46.6733 li
240.083 46.5234 li
240.333 46.4233 li
240.583 46.3232 li
240.833 46.2231 li
241.083 46.0732 li
241.333 45.9731 li
241.583 45.873 li
241.833 45.7734 li
242.083 45.623 li
242.333 45.5234 li
242.583 45.4233 li
242.783 45.3232 li
243.033 45.2231 li
243.283 45.0732 li
243.533 44.9731 li
243.783 44.873 li
244.033 44.7734 li
244.283 44.623 li
244.533 44.5234 li
193.183 67.8237 mo
193.433 67.7236 li
193.683 67.6235 li
193.933 67.4736 li
194.183 67.3735 li
194.433 67.2734 li
194.683 67.1738 li
194.933 67.0234 li
195.133 66.9238 li
195.383 66.8237 li
195.633 66.7236 li
195.883 66.5737 li
196.133 66.4736 li
196.383 66.3735 li
196.633 66.2734 li
196.883 66.1235 li
197.133 66.0234 li
197.383 65.9233 li
197.633 65.8237 li
197.883 65.6733 li
198.133 65.5737 li
198.383 65.4736 li
198.633 65.3735 li
198.883 65.2734 li
199.083 65.1235 li
199.333 65.0234 li
199.583 64.9233 li
199.833 64.8232 li
200.083 64.6733 li
200.333 64.5732 li
200.583 64.4736 li
200.833 64.3735 li
201.083 64.2236 li
201.333 64.1235 li
201.583 64.0234 li
201.833 63.9233 li
202.083 63.7734 li
202.333 63.6733 li
202.583 63.5732 li
202.833 63.4736 li
203.033 63.3232 li
203.283 63.2236 li
203.533 63.1235 li
203.783 63.0234 li
204.033 62.8735 li
204.283 62.7734 li
204.533 62.6733 li
204.783 62.5732 li
205.033 62.4736 li
205.283 62.3232 li
205.533 62.2236 li
205.783 62.1235 li
206.033 62.0234 li
206.283 61.8735 li
206.533 61.7734 li
206.783 61.6733 li
206.982 61.5732 li
207.232 61.4233 li
207.482 61.3232 li
207.732 61.2236 li
207.982 61.1235 li
208.232 60.9736 li
208.482 60.8735 li
208.732 60.7734 li
208.982 60.6733 li
209.232 60.5234 li
209.482 60.4233 li
209.732 60.3232 li
209.982 60.2231 li
210.232 60.0732 li
210.482 59.9731 li
210.732 59.8735 li
210.933 59.7734 li
211.183 59.6733 li
211.433 59.5234 li
211.683 59.4233 li
211.933 59.3232 li
212.183 59.2231 li
212.433 59.0732 li
212.683 58.9731 li
212.933 58.873 li
213.183 58.7734 li
213.433 58.623 li
213.683 58.5234 li
213.933 58.4233 li
214.183 58.3232 li
214.433 58.1733 li
214.683 58.0732 li
214.883 57.9731 li
215.133 57.873 li
215.383 57.7231 li
215.633 57.623 li
215.883 57.5234 li
216.133 57.4233 li
216.383 57.2734 li
216.633 57.1733 li
216.883 57.0732 li
217.133 56.9731 li
217.383 56.873 li
217.633 56.7231 li
217.883 56.623 li
218.133 56.5234 li
218.383 56.4233 li
218.633 56.2734 li
218.833 56.1733 li
167.482 79.4736 mo
167.732 79.3735 li
167.982 79.2734 li
168.232 79.1235 li
168.482 79.0234 li
168.732 78.9238 li
168.982 78.8237 li
169.232 78.6738 li
169.482 78.5737 li
169.732 78.4736 li
169.982 78.3735 li
170.232 78.2236 li
170.482 78.1235 li
170.732 78.0234 li
170.982 77.9233 li
171.183 77.7734 li
171.433 77.6733 li
171.683 77.5737 li
171.933 77.4736 li
172.183 77.3237 li
172.433 77.2236 li
172.683 77.1235 li
172.933 77.0234 li
173.183 76.9233 li
173.433 76.7734 li
173.683 76.6733 li
173.933 76.5737 li
174.183 76.4736 li
174.433 76.3232 li
174.683 76.2236 li
174.933 76.1235 li
175.133 76.0234 li
175.383 75.8735 li
175.633 75.7734 li
175.883 75.6733 li
176.133 75.5732 li
176.383 75.4233 li
176.633 75.3232 li
176.883 75.2236 li
177.133 75.1235 li
177.383 74.9736 li
177.633 74.8735 li
177.883 74.7734 li
178.133 74.6733 li
178.383 74.5234 li
178.633 74.4233 li
178.883 74.3232 li
179.083 74.2236 li
179.333 74.1235 li
179.583 73.9736 li
179.833 73.8735 li
180.083 73.7734 li
180.333 73.6733 li
180.583 73.5234 li
180.833 73.4233 li
181.083 73.3232 li
181.333 73.2236 li
181.583 73.0732 li
181.833 72.9736 li
182.083 72.8735 li
182.333 72.7734 li
182.583 72.6235 li
182.833 72.5234 li
183.033 72.4233 li
183.283 72.3232 li
183.533 72.1733 li
183.783 72.0732 li
184.033 71.9731 li
184.283 71.8735 li
184.533 71.7231 li
184.783 71.6235 li
185.033 71.5234 li
185.283 71.4233 li
185.533 71.3232 li
185.783 71.1733 li
186.033 71.0732 li
186.283 70.9731 li
186.533 70.8735 li
186.783 70.7231 li
186.982 70.6235 li
187.232 70.5234 li
187.482 70.4233 li
187.732 70.2734 li
187.982 70.1733 li
188.232 70.0732 li
188.482 69.9731 li
188.732 69.8232 li
188.982 69.7231 li
189.232 69.623 li
189.482 69.5234 li
189.732 69.373 li
189.982 69.2734 li
190.232 69.1733 li
190.482 69.0732 li
190.732 68.9233 li
190.982 68.8232 li
191.183 68.7231 li
191.433 68.623 li
191.683 68.4731 li
191.933 68.373 li
192.183 68.2734 li
192.433 68.1733 li
192.683 68.0732 li
192.933 67.9233 li
193.183 67.8232 li
141.833 91.1235 mo
142.083 91.0234 li
142.333 90.9238 li
142.583 90.7734 li
142.833 90.6738 li
143.083 90.5737 li
143.283 90.4736 li
143.533 90.3237 li
143.783 90.2236 li
144.033 90.1235 li
144.283 90.0234 li
144.533 89.8735 li
144.783 89.7734 li
145.033 89.6733 li
145.283 89.5737 li
145.533 89.4233 li
145.783 89.3237 li
146.033 89.2236 li
146.283 89.1235 li
146.533 88.9736 li
146.783 88.8735 li
147.033 88.7734 li
147.232 88.6733 li
147.482 88.5737 li
147.732 88.4233 li
147.982 88.3232 li
148.232 88.2236 li
148.482 88.1235 li
148.732 87.9736 li
148.982 87.8735 li
149.232 87.7734 li
149.482 87.6733 li
149.732 87.5234 li
149.982 87.4233 li
150.232 87.3232 li
150.482 87.2236 li
150.732 87.0732 li
150.982 86.9736 li
151.183 86.8735 li
151.433 86.7734 li
151.683 86.6235 li
151.933 86.5234 li
152.183 86.4233 li
152.433 86.3232 li
152.683 86.1733 li
152.933 86.0732 li
153.183 85.9736 li
153.433 85.8735 li
153.683 85.7734 li
153.933 85.6235 li
154.183 85.5234 li
154.433 85.4233 li
154.683 85.3232 li
154.933 85.1733 li
155.183 85.0732 li
155.383 84.9736 li
155.633 84.8735 li
155.883 84.7236 li
156.133 84.6235 li
156.383 84.5234 li
156.633 84.4233 li
156.883 84.2734 li
157.133 84.1733 li
157.383 84.0732 li
157.633 83.9731 li
157.883 83.8232 li
158.133 83.7231 li
158.383 83.6235 li
158.633 83.5234 li
158.883 83.3735 li
159.133 83.2734 li
159.333 83.1733 li
159.583 83.0732 li
159.833 82.9731 li
160.083 82.8232 li
160.333 82.7231 li
160.583 82.6235 li
160.833 82.5234 li
161.083 82.373 li
161.333 82.2734 li
161.583 82.1733 li
161.833 82.0732 li
162.083 81.9233 li
162.333 81.8232 li
162.583 81.7231 li
162.833 81.623 li
163.083 81.4731 li
163.282 81.373 li
163.532 81.2734 li
163.782 81.1733 li
164.032 81.0234 li
164.282 80.9233 li
164.532 80.8232 li
164.782 80.7231 li
165.032 80.5732 li
165.282 80.4731 li
165.532 80.373 li
165.782 80.2734 li
166.032 80.123 li
166.282 80.0234 li
166.532 79.9233 li
166.782 79.8232 li
167.032 79.7231 li
167.232 79.5732 li
167.482 79.4731 li
116.133 102.773 mo
116.383 102.673 li
116.633 102.574 li
116.883 102.423 li
117.133 102.324 li
117.383 102.224 li
117.633 102.125 li
117.883 101.974 li
118.133 101.875 li
118.383 101.773 li
118.633 101.673 li
118.883 101.523 li
119.133 101.423 li
119.333 101.324 li
119.583 101.224 li
119.833 101.074 li
120.083 100.974 li
120.333 100.875 li
120.583 100.773 li
120.833 100.625 li
121.083 100.523 li
121.333 100.423 li
121.583 100.324 li
121.833 100.224 li
122.083 100.074 li
122.333 99.9741 li
122.583 99.8745 li
122.833 99.7729 li
123.083 99.6245 li
123.333 99.5229 li
123.533 99.4233 li
123.783 99.3237 li
124.033 99.1733 li
124.283 99.0737 li
124.533 98.9741 li
124.783 98.8745 li
125.033 98.7241 li
125.283 98.6245 li
125.533 98.5229 li
125.783 98.4233 li
126.033 98.2729 li
126.283 98.1733 li
126.533 98.0737 li
126.783 97.9736 li
127.033 97.8242 li
127.283 97.7236 li
127.483 97.624 li
127.733 97.5244 li
127.983 97.4238 li
128.233 97.2744 li
128.483 97.1738 li
128.733 97.0742 li
128.983 96.9741 li
129.233 96.8242 li
129.483 96.7241 li
129.733 96.624 li
129.983 96.5239 li
130.233 96.374 li
130.483 96.2739 li
130.733 96.1738 li
130.983 96.0742 li
131.233 95.9238 li
131.433 95.8242 li
131.683 95.7241 li
131.933 95.624 li
132.183 95.4741 li
132.433 95.374 li
132.683 95.2739 li
132.933 95.1738 li
133.183 95.0239 li
133.433 94.9238 li
133.683 94.8242 li
133.933 94.7241 li
134.183 94.624 li
134.433 94.4741 li
134.683 94.374 li
134.933 94.2739 li
135.183 94.1738 li
135.383 94.0239 li
135.633 93.9238 li
135.883 93.8237 li
136.133 93.7241 li
136.383 93.5737 li
136.633 93.4741 li
136.883 93.374 li
137.133 93.2739 li
137.383 93.124 li
137.633 93.0239 li
137.883 92.9238 li
138.133 92.8237 li
138.383 92.6738 li
138.633 92.5737 li
138.883 92.4736 li
139.133 92.374 li
139.333 92.2236 li
139.583 92.124 li
139.833 92.0239 li
140.083 91.9238 li
140.333 91.7739 li
140.583 91.6738 li
140.833 91.5737 li
141.083 91.4736 li
141.333 91.374 li
141.583 91.2236 li
141.833 91.124 li
90.4829 114.423 mo
90.7329 114.324 li
90.9829 114.224 li
91.2329 114.074 li
91.4829 113.974 li
91.6826 113.875 li
91.9326 113.773 li
92.1826 113.625 li
92.4326 113.523 li
92.6826 113.423 li
92.9326 113.324 li
93.1826 113.173 li
93.4326 113.074 li
93.6826 112.974 li
93.9326 112.875 li
94.1826 112.724 li
94.4326 112.625 li
94.6831 112.523 li
94.9331 112.423 li
95.1831 112.273 li
95.4331 112.173 li
95.6328 112.074 li
95.8828 111.974 li
96.1328 111.875 li
96.3828 111.724 li
96.6328 111.625 li
96.8828 111.523 li
97.1328 111.423 li
97.3828 111.273 li
97.6328 111.173 li
97.8828 111.074 li
98.1328 110.974 li
98.3828 110.824 li
98.6328 110.724 li
98.8828 110.625 li
99.1328 110.523 li
99.3828 110.375 li
99.583 110.273 li
99.833 110.173 li
100.083 110.074 li
100.333 109.923 li
100.583 109.824 li
100.833 109.724 li
101.083 109.625 li
101.333 109.474 li
101.583 109.375 li
101.833 109.275 li
102.083 109.173 li
102.333 109.074 li
102.583 108.923 li
102.833 108.824 li
103.083 108.724 li
103.333 108.625 li
103.533 108.474 li
103.783 108.375 li
104.033 108.275 li
104.283 108.173 li
104.533 108.025 li
104.783 107.923 li
105.033 107.824 li
105.283 107.724 li
105.533 107.574 li
105.783 107.474 li
106.033 107.375 li
106.283 107.275 li
106.533 107.125 li
106.783 107.025 li
107.033 106.923 li
107.283 106.824 li
107.483 106.673 li
107.733 106.574 li
107.983 106.474 li
108.233 106.375 li
108.483 106.275 li
108.733 106.125 li
108.983 106.025 li
109.233 105.923 li
109.483 105.824 li
109.733 105.673 li
109.983 105.574 li
110.233 105.474 li
110.483 105.375 li
110.733 105.224 li
110.983 105.125 li
111.233 105.025 li
111.433 104.923 li
111.683 104.775 li
111.933 104.673 li
112.183 104.574 li
112.433 104.474 li
112.683 104.324 li
112.933 104.224 li
113.183 104.125 li
113.433 104.025 li
113.683 103.875 li
113.933 103.775 li
114.183 103.675 li
114.433 103.574 li
114.683 103.425 li
114.933 103.324 li
115.183 103.224 li
115.383 103.125 li
115.633 103.025 li
115.883 102.875 li
116.133 102.775 li
64.7827 126.074 mo
65.0327 125.974 li
65.2827 125.875 li
65.5327 125.724 li
65.7827 125.625 li
66.0327 125.523 li
66.2827 125.423 li
66.5327 125.273 li
66.7827 125.173 li
67.0327 125.074 li
67.2827 124.974 li
67.5327 124.824 li
67.7329 124.724 li
67.9829 124.625 li
68.2329 124.523 li
68.4829 124.375 li
68.7329 124.273 li
68.9829 124.173 li
69.2329 124.074 li
69.4829 123.923 li
69.7329 123.824 li
69.9829 123.724 li
70.2329 123.625 li
70.4829 123.523 li
70.7329 123.375 li
70.9829 123.273 li
71.2329 123.173 li
71.4829 123.074 li
71.6831 122.923 li
71.9331 122.824 li
72.1831 122.724 li
72.4331 122.625 li
72.6831 122.474 li
72.9331 122.375 li
73.1831 122.273 li
73.4331 122.173 li
73.6831 122.023 li
73.9331 121.923 li
74.1831 121.824 li
74.4331 121.724 li
74.6831 121.574 li
74.9331 121.474 li
75.1831 121.375 li
75.4331 121.275 li
75.6328 121.125 li
75.8828 121.025 li
76.1328 120.923 li
76.3828 120.824 li
76.6328 120.724 li
76.8828 120.574 li
77.1328 120.474 li
77.3828 120.375 li
77.6328 120.275 li
77.8828 120.125 li
78.1328 120.025 li
78.3828 119.923 li
78.6328 119.824 li
78.8833 119.673 li
79.1333 119.574 li
79.3833 119.474 li
79.583 119.375 li
79.833 119.224 li
80.083 119.125 li
80.333 119.025 li
80.583 118.923 li
80.833 118.775 li
81.083 118.673 li
81.333 118.574 li
81.583 118.474 li
81.833 118.324 li
82.083 118.224 li
82.333 118.125 li
82.583 118.025 li
82.833 117.923 li
83.083 117.775 li
83.333 117.673 li
83.5332 117.574 li
83.7832 117.474 li
84.0332 117.324 li
84.2832 117.224 li
84.5332 117.125 li
84.7832 117.025 li
85.0332 116.875 li
85.2832 116.775 li
85.5332 116.673 li
85.7832 116.574 li
86.0332 116.423 li
86.2832 116.324 li
86.5332 116.224 li
86.7832 116.125 li
87.0332 115.974 li
87.2832 115.875 li
87.5332 115.775 li
87.7334 115.673 li
87.9834 115.525 li
88.2334 115.425 li
88.4834 115.324 li
88.7334 115.224 li
88.9834 115.074 li
89.2334 114.974 li
89.4834 114.875 li
89.7334 114.775 li
89.9834 114.675 li
90.2334 114.525 li
90.4834 114.425 li
39.1328 137.724 mo
39.3828 137.625 li
39.6328 137.523 li
39.833 137.375 li
40.083 137.273 li
40.333 137.173 li
40.583 137.074 li
40.833 136.923 li
41.083 136.824 li
41.333 136.724 li
41.583 136.625 li
41.833 136.474 li
42.083 136.375 li
42.333 136.273 li
42.583 136.173 li
42.833 136.023 li
43.083 135.923 li
43.333 135.824 li
43.583 135.724 li
43.7827 135.574 li
44.0327 135.474 li
44.2827 135.375 li
44.5327 135.273 li
44.7827 135.173 li
45.0327 135.023 li
45.2827 134.923 li
45.5327 134.824 li
45.7827 134.724 li
46.0327 134.574 li
46.2827 134.474 li
46.5327 134.375 li
46.7827 134.273 li
47.0327 134.125 li
47.2832 134.023 li
47.5332 133.923 li
47.7329 133.824 li
47.9829 133.673 li
48.2329 133.574 li
48.4829 133.474 li
48.7329 133.375 li
48.9829 133.224 li
49.2329 133.125 li
49.4829 133.023 li
49.7329 132.923 li
49.9829 132.775 li
50.2329 132.673 li
50.4829 132.574 li
50.7329 132.474 li
50.9829 132.375 li
51.2329 132.224 li
51.4829 132.125 li
51.7329 132.025 li
51.9331 131.923 li
52.1831 131.775 li
52.4331 131.673 li
52.6831 131.574 li
52.9331 131.474 li
53.1831 131.324 li
53.4331 131.224 li
53.6831 131.125 li
53.9331 131.025 li
54.1831 130.875 li
54.4331 130.775 li
54.6831 130.673 li
54.9331 130.574 li
55.1831 130.423 li
55.4331 130.324 li
55.6831 130.224 li
55.8833 130.125 li
56.1333 129.974 li
56.3833 129.875 li
56.6333 129.775 li
56.8833 129.673 li
57.1333 129.525 li
57.3833 129.423 li
57.6333 129.324 li
57.8833 129.224 li
58.1333 129.125 li
58.3833 128.974 li
58.6333 128.875 li
58.8833 128.775 li
59.1333 128.673 li
59.3833 128.525 li
59.6333 128.423 li
59.833 128.324 li
60.083 128.224 li
60.333 128.074 li
60.583 127.974 li
60.833 127.875 li
61.083 127.775 li
61.333 127.625 li
61.583 127.525 li
61.833 127.423 li
62.083 127.324 li
62.333 127.173 li
62.583 127.074 li
62.833 126.974 li
63.083 126.875 li
63.333 126.724 li
63.583 126.625 li
63.7832 126.525 li
64.0332 126.425 li
64.2832 126.324 li
64.5332 126.175 li
64.7832 126.074 li
13.9326 149.173 mo
14.1826 149.023 li
14.4326 148.923 li
14.6826 148.824 li
14.9326 148.724 li
15.1826 148.574 li
15.4326 148.474 li
15.6826 148.375 li
15.9326 148.273 li
16.1328 148.125 li
16.3828 148.023 li
16.6328 147.923 li
16.8828 147.824 li
17.1328 147.673 li
17.3828 147.574 li
17.6328 147.474 li
17.8828 147.375 li
18.1328 147.224 li
18.3828 147.125 li
18.6328 147.023 li
18.8828 146.923 li
19.1328 146.824 li
19.3828 146.673 li
19.6328 146.574 li
19.8828 146.474 li
20.083 146.375 li
20.333 146.224 li
20.583 146.125 li
20.833 146.023 li
21.083 145.923 li
21.333 145.773 li
21.583 145.673 li
21.833 145.574 li
22.083 145.474 li
22.333 145.324 li
22.583 145.224 li
22.833 145.125 li
23.083 145.023 li
23.333 144.875 li
23.583 144.773 li
23.833 144.673 li
24.0332 144.574 li
24.2832 144.423 li
24.5332 144.324 li
24.7832 144.224 li
25.0332 144.125 li
25.2832 144.025 li
25.5332 143.875 li
25.7832 143.775 li
26.0332 143.673 li
26.2832 143.574 li
26.5332 143.423 li
26.7832 143.324 li
27.0332 143.224 li
27.2832 143.125 li
27.5332 142.974 li
27.7832 142.875 li
27.9829 142.775 li
28.2329 142.673 li
28.4829 142.525 li
28.7329 142.423 li
28.9829 142.324 li
29.2329 142.224 li
29.4829 142.074 li
29.7329 141.974 li
29.9829 141.875 li
30.2329 141.775 li
30.4829 141.625 li
30.7329 141.525 li
30.9829 141.423 li
31.2329 141.324 li
31.4829 141.173 li
31.7329 141.074 li
31.9331 140.974 li
32.1831 140.875 li
32.4331 140.775 li
32.6831 140.625 li
32.9331 140.525 li
33.1831 140.423 li
33.4331 140.324 li
33.6831 140.173 li
33.9331 140.074 li
34.1831 139.974 li
34.4331 139.875 li
34.6831 139.724 li
34.9331 139.625 li
35.1831 139.525 li
35.4331 139.423 li
35.6831 139.275 li
35.8833 139.173 li
36.1333 139.074 li
36.3833 138.974 li
36.6333 138.824 li
36.8833 138.724 li
37.1333 138.625 li
37.3833 138.525 li
37.6333 138.375 li
37.8833 138.275 li
38.1333 138.175 li
38.3833 138.074 li
38.6333 137.974 li
38.8833 137.824 li
39.1333 137.724 li
22.333 10.3237 mo
42.2827 10.3237 li
@
DVPWGK+Helvetica*1 [7 0 0 -7 0 0 ]msf53.0078 19.6616 mo(x on )[3.5 1.9458 3.89209 3.89209 0 ]xsh68.1797 19.6616 mo(y)sh[4 2 ] 0 dsh
244.533 17.3735 mo
244.783 17.2236 li
245.033 17.0737 li
245.283 16.8735 li
245.533 16.7236 li
245.783 16.5737 li
246.033 16.3735 li
246.283 16.2236 li
246.533 16.0737 li
246.732 15.8735 li
246.982 15.7236 li
247.232 15.5234 li
247.482 15.3735 li
247.732 15.2236 li
247.982 15.0234 li
248.232 14.8735 li
248.482 14.7236 li
248.732 14.5234 li
248.982 14.3735 li
249.232 14.2236 li
249.482 14.0234 li
249.732 13.8735 li
249.982 13.6738 li
250.232 13.5234 li
250.482 13.3735 li
250.683 13.1738 li
250.933 13.0234 li
251.183 12.8735 li
251.433 12.6738 li
251.683 12.5234 li
251.933 12.3735 li
252.183 12.1738 li
252.433 12.0234 li
252.683 11.8237 li
252.933 11.6738 li
253.183 11.5234 li
253.433 11.3237 li
253.683 11.1738 li
253.933 11.0234 li
254.183 10.8237 li
254.433 10.6738 li
254.633 10.5234 li
254.883 10.3237 li
255.133 10.1738 li
255.383 10.0234 li
255.633 9.82373 li
255.883 9.67383 li
256.133 9.47363 li
256.383 9.32373 li
256.633 9.17383 li
256.883 8.97363 li
257.133 8.82373 li
257.383 8.67383 li
257.633 8.47363 li
257.883 8.32373 li
258.133 8.17383 li
258.383 7.97363 li
258.583 7.82373 li
258.833 7.62354 li
259.083 7.47363 li
259.333 7.32373 li
259.583 7.12354 li
259.833 6.97363 li
260.083 6.82373 li
260.333 6.62354 li
260.583 6.47363 li
218.833 34.8735 mo
219.083 34.7236 li
219.333 34.5234 li
219.583 34.3735 li
219.833 34.1738 li
220.083 34.0234 li
220.333 33.8735 li
220.583 33.6738 li
220.833 33.5234 li
221.083 33.3735 li
221.333 33.1738 li
221.583 33.0234 li
221.833 32.8735 li
222.083 32.6738 li
222.333 32.5234 li
222.583 32.3237 li
222.783 32.1738 li
223.033 32.0234 li
223.283 31.8237 li
223.533 31.6738 li
223.783 31.5234 li
224.033 31.3237 li
224.283 31.1738 li
224.533 31.0234 li
224.783 30.8237 li
225.033 30.6738 li
225.283 30.5234 li
225.533 30.3237 li
225.783 30.1738 li
226.033 29.9736 li
226.283 29.8237 li
226.533 29.6738 li
226.783 29.4736 li
226.982 29.3237 li
227.232 29.1738 li
227.482 28.9736 li
227.732 28.8237 li
227.982 28.6738 li
228.232 28.4736 li
228.482 28.3237 li
228.732 28.1235 li
228.982 27.9736 li
229.232 27.8237 li
229.482 27.6235 li
229.732 27.4736 li
229.982 27.3237 li
230.232 27.1235 li
230.482 26.9736 li
230.732 26.8237 li
230.933 26.6235 li
231.183 26.4736 li
231.433 26.2734 li
231.683 26.1235 li
231.933 25.9736 li
232.183 25.7734 li
232.433 25.6235 li
232.683 25.4736 li
232.933 25.2734 li
233.183 25.1235 li
233.433 24.9736 li
233.683 24.7739 li
233.933 24.6235 li
234.183 24.4736 li
234.433 24.2739 li
234.683 24.1235 li
234.883 23.9238 li
235.133 23.7739 li
235.383 23.6235 li
235.633 23.4238 li
235.883 23.2739 li
236.133 23.1235 li
236.383 22.9238 li
236.633 22.7739 li
236.883 22.6235 li
237.133 22.4238 li
237.383 22.2739 li
237.633 22.0737 li
237.883 21.9238 li
238.133 21.7739 li
238.383 21.5737 li
238.633 21.4238 li
238.833 21.2739 li
239.083 21.0737 li
239.333 20.9238 li
239.583 20.7739 li
239.833 20.5737 li
240.083 20.4238 li
240.333 20.2739 li
240.583 20.0737 li
240.833 19.9238 li
241.083 19.7236 li
241.333 19.5737 li
241.583 19.4238 li
241.833 19.2236 li
242.083 19.0737 li
242.333 18.9238 li
242.583 18.7236 li
242.783 18.5737 li
243.033 18.4238 li
243.283 18.2236 li
243.533 18.0737 li
243.783 17.874 li
244.033 17.7236 li
244.283 17.5737 li
244.533 17.374 li
193.183 52.3237 mo
193.433 52.1738 li
193.683 52.0234 li
193.933 51.8237 li
194.183 51.6738 li
194.433 51.5234 li
194.683 51.3237 li
194.933 51.1738 li
195.133 50.9736 li
195.383 50.8237 li
195.633 50.6738 li
195.883 50.4736 li
196.133 50.3237 li
196.383 50.1738 li
196.633 49.9736 li
196.883 49.8237 li
197.133 49.6738 li
197.383 49.4736 li
197.633 49.3237 li
197.883 49.1738 li
198.133 48.9736 li
198.383 48.8237 li
198.633 48.6235 li
198.883 48.4736 li
199.083 48.3237 li
199.333 48.1235 li
199.583 47.9736 li
199.833 47.8237 li
200.083 47.6235 li
200.333 47.4736 li
200.583 47.3237 li
200.833 47.1235 li
201.083 46.9736 li
201.333 46.7734 li
201.583 46.6235 li
201.833 46.4736 li
202.083 46.2734 li
202.333 46.1235 li
202.583 45.9736 li
202.833 45.7734 li
203.033 45.6235 li
203.283 45.4736 li
203.533 45.2734 li
203.783 45.1235 li
204.033 44.9736 li
204.283 44.7734 li
204.533 44.6235 li
204.783 44.4238 li
205.033 44.2734 li
205.283 44.1235 li
205.533 43.9238 li
205.783 43.7734 li
206.033 43.6235 li
206.283 43.4238 li
206.533 43.2734 li
206.783 43.1235 li
206.982 42.9238 li
207.232 42.7739 li
207.482 42.5737 li
207.732 42.4238 li
207.982 42.2739 li
208.232 42.0737 li
208.482 41.9238 li
208.732 41.7739 li
208.982 41.5737 li
209.232 41.4238 li
209.482 41.2739 li
209.732 41.0737 li
209.982 40.9238 li
210.232 40.7739 li
210.482 40.5737 li
210.732 40.4238 li
210.933 40.2236 li
211.183 40.0737 li
211.433 39.9238 li
211.683 39.7236 li
211.933 39.5737 li
212.183 39.4238 li
212.433 39.2236 li
212.683 39.0737 li
212.933 38.9238 li
213.183 38.7236 li
213.433 38.5737 li
213.683 38.3735 li
213.933 38.2236 li
214.183 38.0737 li
214.433 37.874 li
214.683 37.7236 li
214.883 37.5737 li
215.133 37.374 li
215.383 37.2236 li
215.633 37.0737 li
215.883 36.874 li
216.133 36.7236 li
216.383 36.5239 li
216.633 36.374 li
216.883 36.2236 li
217.133 36.0239 li
217.383 35.874 li
217.633 35.7236 li
217.883 35.5239 li
218.133 35.374 li
218.383 35.2236 li
218.633 35.0239 li
218.833 34.874 li
167.482 69.8237 mo
167.732 69.6738 li
167.982 69.4736 li
168.232 69.3237 li
168.482 69.1235 li
168.732 68.9736 li
168.982 68.8237 li
169.232 68.6235 li
169.482 68.4736 li
169.732 68.3237 li
169.982 68.1235 li
170.232 67.9736 li
170.482 67.8237 li
170.732 67.6235 li
170.982 67.4736 li
171.183 67.2734 li
171.433 67.1235 li
171.683 66.9736 li
171.933 66.7734 li
172.183 66.6235 li
172.433 66.4736 li
172.683 66.2734 li
172.933 66.1235 li
173.183 65.9736 li
173.433 65.7734 li
173.683 65.6235 li
173.933 65.4736 li
174.183 65.2734 li
174.433 65.1235 li
174.683 64.9238 li
174.933 64.7734 li
175.133 64.6235 li
175.383 64.4238 li
175.633 64.2734 li
175.883 64.1235 li
176.133 63.9238 li
176.383 63.7734 li
176.633 63.6235 li
176.883 63.4238 li
177.133 63.2734 li
177.383 63.0737 li
177.633 62.9238 li
177.883 62.7734 li
178.133 62.5737 li
178.383 62.4238 li
178.633 62.2734 li
178.883 62.0737 li
179.083 61.9238 li
179.333 61.7734 li
179.583 61.5737 li
179.833 61.4238 li
180.083 61.2236 li
180.333 61.0737 li
180.583 60.9238 li
180.833 60.7236 li
181.083 60.5737 li
181.333 60.4238 li
181.583 60.2236 li
181.833 60.0737 li
182.083 59.9238 li
182.333 59.7236 li
182.583 59.5737 li
182.833 59.4238 li
183.033 59.2236 li
183.283 59.0737 li
183.533 58.8735 li
183.783 58.7236 li
184.033 58.5737 li
184.283 58.3735 li
184.533 58.2236 li
184.783 58.0737 li
185.033 57.8735 li
185.283 57.7236 li
185.533 57.5737 li
185.783 57.3735 li
186.033 57.2236 li
186.283 57.0239 li
186.533 56.8735 li
186.783 56.7236 li
186.982 56.5239 li
187.232 56.3735 li
187.482 56.2236 li
187.732 56.0239 li
187.982 55.8735 li
188.232 55.7236 li
188.482 55.5239 li
188.732 55.3735 li
188.982 55.2236 li
189.232 55.0239 li
189.482 54.874 li
189.732 54.6738 li
189.982 54.5239 li
190.232 54.374 li
190.482 54.1738 li
190.732 54.0239 li
190.982 53.874 li
191.183 53.6738 li
191.433 53.5239 li
191.683 53.374 li
191.933 53.1738 li
192.183 53.0239 li
192.433 52.8237 li
192.683 52.6738 li
192.933 52.5239 li
193.183 52.3237 li
141.833 87.2734 mo
142.083 87.1235 li
142.333 86.9736 li
142.583 86.7734 li
142.833 86.6235 li
143.083 86.4736 li
143.283 86.2734 li
143.533 86.1235 li
143.783 85.9238 li
144.033 85.7734 li
144.283 85.6235 li
144.533 85.4238 li
144.783 85.2734 li
145.033 85.1235 li
145.283 84.9238 li
145.533 84.7734 li
145.783 84.6235 li
146.033 84.4238 li
146.283 84.2734 li
146.533 84.1235 li
146.783 83.9238 li
147.033 83.7734 li
147.232 83.5737 li
147.482 83.4238 li
147.732 83.2734 li
147.982 83.0737 li
148.232 82.9238 li
148.482 82.7734 li
148.732 82.5737 li
148.982 82.4238 li
149.232 82.2734 li
149.482 82.0737 li
149.732 81.9238 li
149.982 81.7236 li
150.232 81.5737 li
150.482 81.4238 li
150.732 81.2236 li
150.982 81.0737 li
151.183 80.9238 li
151.433 80.7236 li
151.683 80.5737 li
151.933 80.4238 li
152.183 80.2236 li
152.433 80.0737 li
152.683 79.9238 li
152.933 79.7236 li
153.183 79.5737 li
153.433 79.3735 li
153.683 79.2236 li
153.933 79.0737 li
154.183 78.8735 li
154.433 78.7236 li
154.683 78.5737 li
154.933 78.3735 li
155.183 78.2236 li
155.383 78.0737 li
155.633 77.8735 li
155.883 77.7236 li
156.133 77.5239 li
156.383 77.3735 li
156.633 77.2236 li
156.883 77.0239 li
157.133 76.8735 li
157.383 76.7236 li
157.633 76.5239 li
157.883 76.3735 li
158.133 76.2236 li
158.383 76.0239 li
158.633 75.8735 li
158.883 75.6738 li
159.133 75.5239 li
159.333 75.3735 li
159.583 75.1738 li
159.833 75.0239 li
160.083 74.8735 li
160.333 74.6738 li
160.583 74.5239 li
160.833 74.3735 li
161.083 74.1738 li
161.333 74.0239 li
161.583 73.8735 li
161.833 73.6738 li
162.083 73.5239 li
162.333 73.3237 li
162.583 73.1738 li
162.833 73.0239 li
163.083 72.8237 li
163.282 72.6738 li
163.532 72.5239 li
163.782 72.3237 li
164.032 72.1738 li
164.282 72.0239 li
164.532 71.8237 li
164.782 71.6738 li
165.032 71.4736 li
165.282 71.3237 li
165.532 71.1738 li
165.782 70.9736 li
166.032 70.8237 li
166.282 70.6738 li
166.532 70.4736 li
166.782 70.3237 li
167.032 70.1738 li
167.232 69.9736 li
167.482 69.8237 li
116.133 104.773 mo
116.383 104.625 li
116.633 104.423 li
116.883 104.273 li
117.133 104.074 li
117.383 103.923 li
117.633 103.773 li
117.883 103.574 li
118.133 103.423 li
118.383 103.273 li
118.633 103.074 li
118.883 102.923 li
119.133 102.773 li
119.333 102.574 li
119.583 102.423 li
119.833 102.224 li
120.083 102.074 li
120.333 101.923 li
120.583 101.724 li
120.833 101.574 li
121.083 101.423 li
121.333 101.224 li
121.583 101.074 li
121.833 100.923 li
122.083 100.724 li
122.333 100.574 li
122.583 100.373 li
122.833 100.224 li
123.083 100.074 li
123.333 99.8726 li
123.533 99.7241 li
123.783 99.5737 li
124.033 99.3726 li
124.283 99.2241 li
124.533 99.0737 li
124.783 98.8726 li
125.033 98.7241 li
125.283 98.5737 li
125.533 98.3726 li
125.783 98.2241 li
126.033 98.0229 li
126.283 97.873 li
126.533 97.7236 li
126.783 97.5234 li
127.033 97.373 li
127.283 97.2236 li
127.483 97.0234 li
127.733 96.8735 li
127.983 96.7236 li
128.233 96.5234 li
128.483 96.3735 li
128.733 96.1733 li
128.983 96.0234 li
129.233 95.8735 li
129.483 95.6733 li
129.733 95.5234 li
129.983 95.3735 li
130.233 95.1733 li
130.483 95.0234 li
130.733 94.8735 li
130.983 94.6733 li
131.233 94.5234 li
131.433 94.3735 li
131.683 94.1733 li
131.933 94.0234 li
132.183 93.8232 li
132.433 93.6733 li
132.683 93.5234 li
132.933 93.3232 li
133.183 93.1733 li
133.433 93.0234 li
133.683 92.8232 li
133.933 92.6733 li
134.183 92.5234 li
134.433 92.3232 li
134.683 92.1733 li
134.933 91.9736 li
135.183 91.8232 li
135.383 91.6733 li
135.633 91.4736 li
135.883 91.3232 li
136.133 91.1733 li
136.383 90.9736 li
136.633 90.8232 li
136.883 90.6733 li
137.133 90.4736 li
137.383 90.3232 li
137.633 90.1733 li
137.883 89.9736 li
138.133 89.8232 li
138.383 89.6235 li
138.633 89.4736 li
138.883 89.3232 li
139.133 89.1235 li
139.333 88.9736 li
139.583 88.8232 li
139.833 88.6235 li
140.083 88.4736 li
140.333 88.3232 li
140.583 88.1235 li
140.833 87.9736 li
141.083 87.7734 li
141.333 87.6235 li
141.583 87.4736 li
141.833 87.2734 li
90.4829 122.224 mo
90.7329 122.074 li
90.9829 121.923 li
91.2329 121.724 li
91.4829 121.574 li
91.6826 121.423 li
91.9326 121.224 li
92.1826 121.074 li
92.4326 120.875 li
92.6826 120.724 li
92.9326 120.574 li
93.1826 120.375 li
93.4326 120.224 li
93.6826 120.074 li
93.9326 119.875 li
94.1826 119.724 li
94.4326 119.574 li
94.6831 119.375 li
94.9331 119.224 li
95.1831 119.074 li
95.4331 118.875 li
95.6328 118.724 li
95.8828 118.523 li
96.1328 118.375 li
96.3828 118.224 li
96.6328 118.023 li
96.8828 117.875 li
97.1328 117.724 li
97.3828 117.523 li
97.6328 117.373 li
97.8828 117.224 li
98.1328 117.023 li
98.3828 116.873 li
98.6328 116.673 li
98.8828 116.523 li
99.1328 116.373 li
99.3828 116.173 li
99.583 116.023 li
99.833 115.873 li
100.083 115.673 li
100.333 115.523 li
100.583 115.373 li
100.833 115.173 li
101.083 115.023 li
101.333 114.873 li
101.583 114.673 li
101.833 114.523 li
102.083 114.324 li
102.333 114.173 li
102.583 114.023 li
102.833 113.824 li
103.083 113.673 li
103.333 113.523 li
103.533 113.324 li
103.783 113.173 li
104.033 113.023 li
104.283 112.824 li
104.533 112.673 li
104.783 112.474 li
105.033 112.324 li
105.283 112.173 li
105.533 111.974 li
105.783 111.824 li
106.033 111.673 li
106.283 111.474 li
106.533 111.324 li
106.783 111.173 li
107.033 110.974 li
107.283 110.824 li
107.483 110.623 li
107.733 110.474 li
107.983 110.324 li
108.233 110.123 li
108.483 109.974 li
108.733 109.824 li
108.983 109.623 li
109.233 109.474 li
109.483 109.324 li
109.733 109.123 li
109.983 108.974 li
110.233 108.824 li
110.483 108.623 li
110.733 108.474 li
110.983 108.273 li
111.233 108.123 li
111.433 107.974 li
111.683 107.773 li
111.933 107.623 li
112.183 107.474 li
112.433 107.273 li
112.683 107.123 li
112.933 106.974 li
113.183 106.773 li
113.433 106.623 li
113.683 106.423 li
113.933 106.273 li
114.183 106.123 li
114.433 105.923 li
114.683 105.773 li
114.933 105.623 li
115.183 105.423 li
115.383 105.273 li
115.633 105.123 li
115.883 104.923 li
116.133 104.773 li
64.7827 139.724 mo
65.0327 139.574 li
65.2827 139.375 li
65.5327 139.224 li
65.7827 139.023 li
66.0327 138.875 li
66.2827 138.724 li
66.5327 138.523 li
66.7827 138.375 li
67.0327 138.224 li
67.2827 138.023 li
67.5327 137.875 li
67.7329 137.724 li
67.9829 137.523 li
68.2329 137.375 li
68.4829 137.173 li
68.7329 137.023 li
68.9829 136.875 li
69.2329 136.673 li
69.4829 136.523 li
69.7329 136.375 li
69.9829 136.173 li
70.2329 136.023 li
70.4829 135.875 li
70.7329 135.673 li
70.9829 135.523 li
71.2329 135.324 li
71.4829 135.173 li
71.6831 135.023 li
71.9331 134.824 li
72.1831 134.673 li
72.4331 134.523 li
72.6831 134.324 li
72.9331 134.173 li
73.1831 134.023 li
73.4331 133.824 li
73.6831 133.673 li
73.9331 133.523 li
74.1831 133.324 li
74.4331 133.173 li
74.6831 132.974 li
74.9331 132.824 li
75.1831 132.673 li
75.4331 132.474 li
75.6328 132.324 li
75.8828 132.173 li
76.1328 131.974 li
76.3828 131.824 li
76.6328 131.673 li
76.8828 131.474 li
77.1328 131.324 li
77.3828 131.123 li
77.6328 130.974 li
77.8828 130.824 li
78.1328 130.623 li
78.3828 130.474 li
78.6328 130.324 li
78.8833 130.123 li
79.1333 129.974 li
79.3833 129.824 li
79.583 129.623 li
79.833 129.474 li
80.083 129.324 li
80.333 129.123 li
80.583 128.974 li
80.833 128.773 li
81.083 128.623 li
81.333 128.474 li
81.583 128.273 li
81.833 128.123 li
82.083 127.974 li
82.333 127.773 li
82.583 127.623 li
82.833 127.474 li
83.083 127.273 li
83.333 127.123 li
83.5332 126.923 li
83.7832 126.773 li
84.0332 126.623 li
84.2832 126.423 li
84.5332 126.273 li
84.7832 126.123 li
85.0332 125.923 li
85.2832 125.773 li
85.5332 125.623 li
85.7832 125.423 li
86.0332 125.273 li
86.2832 125.123 li
86.5332 124.923 li
86.7832 124.773 li
87.0332 124.574 li
87.2832 124.423 li
87.5332 124.273 li
87.7334 124.074 li
87.9834 123.923 li
88.2334 123.773 li
88.4834 123.574 li
88.7334 123.423 li
88.9834 123.273 li
89.2334 123.074 li
89.4834 122.923 li
89.7334 122.724 li
89.9834 122.574 li
90.2334 122.423 li
90.4834 122.224 li
39.1328 157.173 mo
39.3828 157.023 li
39.6328 156.875 li
39.833 156.673 li
40.083 156.523 li
40.333 156.375 li
40.583 156.173 li
40.833 156.023 li
41.083 155.824 li
41.333 155.673 li
41.583 155.523 li
41.833 155.324 li
42.083 155.173 li
42.333 155.023 li
42.583 154.824 li
42.833 154.673 li
43.083 154.523 li
43.333 154.324 li
43.583 154.173 li
43.7827 154.023 li
44.0327 153.824 li
44.2827 153.673 li
44.5327 153.474 li
44.7827 153.324 li
45.0327 153.173 li
45.2827 152.974 li
45.5327 152.824 li
45.7827 152.673 li
46.0327 152.474 li
46.2827 152.324 li
46.5327 152.173 li
46.7827 151.974 li
47.0327 151.824 li
47.2832 151.623 li
47.5332 151.474 li
47.7329 151.324 li
47.9829 151.123 li
48.2329 150.974 li
48.4829 150.824 li
48.7329 150.623 li
48.9829 150.474 li
49.2329 150.324 li
49.4829 150.123 li
49.7329 149.974 li
49.9829 149.824 li
50.2329 149.623 li
50.4829 149.474 li
50.7329 149.273 li
50.9829 149.123 li
51.2329 148.974 li
51.4829 148.773 li
51.7329 148.623 li
51.9331 148.474 li
52.1831 148.273 li
52.4331 148.123 li
52.6831 147.974 li
52.9331 147.773 li
53.1831 147.623 li
53.4331 147.423 li
53.6831 147.273 li
53.9331 147.123 li
54.1831 146.923 li
54.4331 146.773 li
54.6831 146.623 li
54.9331 146.423 li
55.1831 146.273 li
55.4331 146.123 li
55.6831 145.923 li
55.8833 145.773 li
56.1333 145.574 li
56.3833 145.423 li
56.6333 145.273 li
56.8833 145.074 li
57.1333 144.923 li
57.3833 144.773 li
57.6333 144.574 li
57.8833 144.423 li
58.1333 144.273 li
58.3833 144.074 li
58.6333 143.923 li
58.8833 143.773 li
59.1333 143.574 li
59.3833 143.423 li
59.6333 143.224 li
59.833 143.074 li
60.083 142.923 li
60.333 142.724 li
60.583 142.574 li
60.833 142.423 li
61.083 142.224 li
61.333 142.074 li
61.583 141.923 li
61.833 141.724 li
62.083 141.574 li
62.333 141.373 li
62.583 141.224 li
62.833 141.074 li
63.083 140.873 li
63.333 140.724 li
63.583 140.574 li
63.7832 140.373 li
64.0332 140.224 li
64.2832 140.074 li
64.5332 139.873 li
64.7832 139.724 li
13.9326 174.324 mo
14.1826 174.173 li
14.4326 173.974 li
14.6826 173.824 li
14.9326 173.673 li
15.1826 173.474 li
15.4326 173.324 li
15.6826 173.173 li
15.9326 172.974 li
16.1328 172.824 li
16.3828 172.673 li
16.6328 172.474 li
16.8828 172.324 li
17.1328 172.125 li
17.3828 171.974 li
17.6328 171.824 li
17.8828 171.625 li
18.1328 171.474 li
18.3828 171.324 li
18.6328 171.125 li
18.8828 170.974 li
19.1328 170.824 li
19.3828 170.623 li
19.6328 170.474 li
19.8828 170.273 li
20.083 170.123 li
20.333 169.974 li
20.583 169.773 li
20.833 169.623 li
21.083 169.474 li
21.333 169.273 li
21.583 169.123 li
21.833 168.974 li
22.083 168.773 li
22.333 168.623 li
22.583 168.474 li
22.833 168.273 li
23.083 168.123 li
23.333 167.923 li
23.583 167.773 li
23.833 167.623 li
24.0332 167.423 li
24.2832 167.273 li
24.5332 167.123 li
24.7832 166.923 li
25.0332 166.773 li
25.2832 166.623 li
25.5332 166.423 li
25.7832 166.273 li
26.0332 166.074 li
26.2832 165.923 li
26.5332 165.773 li
26.7832 165.574 li
27.0332 165.423 li
27.2832 165.273 li
27.5332 165.074 li
27.7832 164.923 li
27.9829 164.773 li
28.2329 164.574 li
28.4829 164.423 li
28.7329 164.273 li
28.9829 164.074 li
29.2329 163.923 li
29.4829 163.724 li
29.7329 163.574 li
29.9829 163.423 li
30.2329 163.224 li
30.4829 163.074 li
30.7329 162.923 li
30.9829 162.724 li
31.2329 162.574 li
31.4829 162.423 li
31.7329 162.224 li
31.9331 162.074 li
32.1831 161.873 li
32.4331 161.724 li
32.6831 161.574 li
32.9331 161.373 li
33.1831 161.224 li
33.4331 161.074 li
33.6831 160.873 li
33.9331 160.724 li
34.1831 160.574 li
34.4331 160.373 li
34.6831 160.224 li
34.9331 160.023 li
35.1831 159.873 li
35.4331 159.724 li
35.6831 159.523 li
35.8833 159.373 li
36.1333 159.224 li
36.3833 159.023 li
36.6333 158.873 li
36.8833 158.724 li
37.1333 158.523 li
37.3833 158.373 li
37.6333 158.224 li
37.8833 158.023 li
38.1333 157.873 li
38.3833 157.673 li
38.6333 157.523 li
38.8833 157.373 li
39.1333 157.173 li
22.333 17.3237 mo
42.2827 17.3237 li
@
0.125 lw
[] 0 dsh
75.583 119.173 mo
75.583 119.173 li
75.583 119.173 mo
75.583 119.173 li
100.283 128.773 mo
100.283 128.773 li
100.283 128.773 mo
100.283 128.773 li
161.933 61.4238 mo
161.933 61.4238 li
161.933 61.4238 mo
161.933 61.4238 li
63.2827 135.074 mo
63.2827 135.074 li
63.2827 135.074 mo
63.2827 135.074 li
87.9326 101.724 mo
87.9326 101.724 li
87.9326 101.724 mo
87.9326 101.724 li
186.583 71.2734 mo
186.583 71.2734 li
186.583 71.2734 mo
186.583 71.2734 li
149.583 89.5234 mo
149.583 89.5234 li
149.583 89.5234 mo
149.583 89.5234 li
124.933 84.1235 mo
124.933 84.1235 li
124.933 84.1235 mo
124.933 84.1235 li
174.232 97.9238 mo
174.232 97.9238 li
174.232 97.9238 mo
174.232 97.9238 li
112.583 104.974 mo
112.583 104.974 li
112.583 104.974 mo
112.583 104.974 li
137.283 92.7734 mo
137.283 92.7734 li
137.283 92.7734 mo
137.283 92.7734 li
75.583 119.173 mo
75.583 121.173 li
100.283 128.773 mo
100.283 109.974 li
161.933 61.4238 mo
161.933 82.0234 li
63.2827 135.074 mo
63.2827 126.773 li
87.9326 101.724 mo
87.9326 115.574 li
186.583 71.2734 mo
186.583 70.8237 li
149.583 89.5234 mo
149.583 87.6235 li
124.933 84.1235 mo
124.933 98.7729 li
174.232 97.9238 mo
174.232 76.4238 li
112.583 104.974 mo
112.583 104.375 li
137.283 92.7734 mo
137.283 93.1738 li
@
[0.5 1 ] 0 dsh
75.583 119.173 mo
94.9829 119.173 li
100.283 128.773 mo
80.833 128.773 li
161.933 61.4238 mo
179.833 61.4238 li
63.2827 135.074 mo
71.6328 135.074 li
87.9326 101.724 mo
120.633 101.724 li
186.583 71.2734 mo
165.383 71.2734 li
149.583 89.5234 mo
138.583 89.5234 li
124.933 84.1235 mo
146.482 84.1235 li
174.232 97.9238 mo
126.233 97.9238 li
112.583 104.974 mo
115.883 104.974 li
137.283 92.7734 mo
133.783 92.7734 li
@
[] 0 dsh
75.583 119.173 mo
75.583 119.173 li
75.583 119.173 mo
75.583 119.173 li
75.583 119.173 mo
75.583 119.173 li
75.583 119.173 mo
75.583 119.173 li
100.283 128.773 mo
100.283 128.773 li
100.283 128.773 mo
100.283 128.773 li
100.283 128.773 mo
100.283 128.773 li
100.283 128.773 mo
100.283 128.773 li
161.933 61.4238 mo
161.933 61.4238 li
161.933 61.4238 mo
161.933 61.4238 li
161.933 61.4238 mo
161.933 61.4238 li
161.933 61.4238 mo
161.933 61.4238 li
63.2827 135.074 mo
63.2827 135.074 li
63.2827 135.074 mo
63.2827 135.074 li
63.2827 135.074 mo
63.2827 135.074 li
63.2827 135.074 mo
63.2827 135.074 li
87.9326 101.724 mo
87.9326 101.724 li
87.9326 101.724 mo
87.9326 101.724 li
87.9326 101.724 mo
87.9326 101.724 li
87.9326 101.724 mo
87.9326 101.724 li
186.583 71.2734 mo
186.583 71.2734 li
186.583 71.2734 mo
186.583 71.2734 li
186.583 71.2734 mo
186.583 71.2734 li
186.583 71.2734 mo
186.583 71.2734 li
149.583 89.5234 mo
149.583 89.5234 li
149.583 89.5234 mo
149.583 89.5234 li
149.583 89.5234 mo
149.583 89.5234 li
149.583 89.5234 mo
149.583 89.5234 li
124.933 84.1235 mo
124.933 84.1235 li
124.933 84.1235 mo
124.933 84.1235 li
124.933 84.1235 mo
124.933 84.1235 li
124.933 84.1235 mo
124.933 84.1235 li
174.232 97.9238 mo
174.232 97.9238 li
174.232 97.9238 mo
174.232 97.9238 li
174.232 97.9238 mo
174.232 97.9238 li
174.232 97.9238 mo
174.232 97.9238 li
112.583 104.974 mo
112.583 104.974 li
112.583 104.974 mo
112.583 104.974 li
112.583 104.974 mo
112.583 104.974 li
112.583 104.974 mo
112.583 104.974 li
137.283 92.7734 mo
137.283 92.7734 li
137.283 92.7734 mo
137.283 92.7734 li
137.283 92.7734 mo
137.283 92.7734 li
137.283 92.7734 mo
137.283 92.7734 li
@
0.5 lw
13.9326 3.67383 mo
13.9326 182.724 li
260.583 182.724 li
260.583 3.67383 li
13.9326 3.67383 li
13.9326 3.67383 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DVPWGK+Helvetica*1 uf/DVPWGK+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Manoj Bhatt) ()%%Title: (regressionxy.eps)%%CreationDate: 10/4/10 2:26 PM%AI9_DataStream%Gb"-6ja&/`dP,ub_"V4aEFO*D3T(albT&ttn\c-Zg2#OekLr^se=bq^bW#D^cSt/mNic=i9#[fnK#."cg2D33TB3o("[AUorB`^:%:PnRj?M"DRqjgAoCfMi+Ad'5*jq=Xm7YKJ^,+m2ZiK`]$2=4!6an]VsP/cP)TK=!M$iY1UdJ@Grf*D6\'^n]NJ##Z6eR0G(9o$W(%7r"NoPRc,[ohJSg%n=7P`1KhE=N1_ej_:XI5+VD9d\u)"E>^;ChalW`j2Rurn<<=Jpn6O0:>=2WN(@\*o\f6V+(X9MpFBr5J]U7!%4H-7[no2OmUu:DKfi4OVi,9s398Pe,_PM<6plah8I"qBNSh?kcc?M*Z9KIh*9:0mL/bOkS`^D"Y'Y-m]m2,A.r7&I(2.;@VfK#=X%5FkUGZe6%@VL_hFV^)/<i'1q_3rR0.r'dN1hJ#hHPt$t<cMt](1VDYljonq73UKG6RskSC98`<4[?Em\lH2QVh0QP]0]:$%]_]b!%$J19bV_eG0(j)Z8a+?OrEV'jE_K"VF1njug%aKf,s*AWW7N3-D51s`f)WQ)t#@@M&18O_&kKg$eNd.ugHlq6HRa&^\SARsiNB3]&%IKA;ubI9Fq['eH-$N;%D+JV`nR/cd#s)`cFf?$GGb6%rjWgmbiE*VD`MKWt;"W5g/F9#.MORqWkrYu?C$u=\&2C8k5FXEX]I/VZ(%r]NQCio$FWib'TjTD:Tu<[p_@.,nT2`2B>c:IUC0Xk3)[qGnqq[5&WtQ-!F99Eo9D1A/6,Aj28unp.;=KUBfho6IF&cXSR)L7_SK%;ScP%$GKZBi0-b:ldY7qZsM'hnEkNBT@`E$*BIXj?90.],CPGf.aLQA)u,8tE)-1b[;\m`9^+@'&Un10S.U50]G3uaGB$CQM8+"!%pk^S"374%37ehi3`kPW5F2C*i1hltl$g359=JoKG11blQj:oTJMA/\X8`-="Vk^/"VdlL8j2dKC;JOR.=:=;IT@ac^5rrfXN34#s%`EG5cAVDR4kdrf=r5;r%41bFd8OndepkcCtIeZK9O^\WN/+"F*<,_h-Y2GAHAorD7l<&t]9n<\C3?:8CS;rO$93YHJMq1`(@3(l/%JseS[I%/EM5/m?V-e>$eNUro!U$ptgf"p&8JdQ*?ZpQ!,H_B#ni37e`$F\p7.AfpH;!:5K;[R_03XU#`081@*>ZhYMDKP5I9Bi"U%:>_tqks%4L8spB_l'bQ'ckbp-+2qTHg?C]5TL,b!ALVTHE1^UKK(g2_iS,7\.?q!;Z3"TS*H4CR,k5^\)Tl0InLFLcG3PJYc]N_P%QZ>N$r[/!DM>!;89;Uijm4\G$$`;C[7/KXWA[D$<p6Yd%jll/<:?ahfs!sAu'C@IO="_tZg0a^&(T^YOM>!;8X4?EPm4\FYWW+A2%a0if\\ut\7nr*L$q$F#m.UB6EEi!$L>0>Br=b(=s.b)m5[Yj2".[K+-[[KjoIsjUmaXhr3mJ5W2g:-aRSboQk\J3=.s5Ehh$MY$Z%e,M]rkHnUartDofrH9eNs4c2tr,8J:KEh<35bZ>5afd1\VLNjuRAsA`rP=[K`?thH(4DCUPr2/Ap`K3b:XWe/jSp\WJ&f%WUWSkD%]4=T%(>lq-YT:#EeT=:H=W7aO2]4&?<s._ffb%s^Bru1Ne%W4;A8F-W%[S@a(27PV*Bb+XaD!;"/c!!["bG$lON"cg]Z:?^p$F5q%0ohCA"D]NT:4L*,S2*TpY#nE-,#pg&gIh'XRs>1Sg3V*nR67%L4<%jSja&mio!ATYZcp"HfbIH*Vi3^$;5$osg/^_18L`PIJ!j=a%,:IpHk/!IiXd\2`#U@iDhXj"06:"#@d(c-;qr:Usj95AE]6OTjW]Z;.VC^a5dM7Z&g)<h5lELc_Q1ZXVdj\Z8p8u,5m6PGLYE"0D%0J9E.+AsUc!j2u<9naobmnB5)\@(2WgJ!)(23Bg0PF*)^e5069\V09S9rCsN<TU6^<5DogLl4%6a<P?oWp3tFkck?&2-gFjrcH+9%r)`4HPu_nDfbI%l:f6(MnWuiMGULDg(`bc^9#@]05(W$Z<.Jm:ZfQ6tgnXhi'OOe3LbL4Lc+LBO;W+'XYeJ8q4t"*>kEAoUPs"p`%McY:#j*,4"nk:#`Kk)[2_#g7XOU/US=%EdX,ZJAC=%qTB)ST,5#eU?N"]D-cT#+<t&h]qfZB-uGOihV84](tjZ50LYCTUH)b:Vo1%Q7:$V)@b43H%C2kcNq%dGtk6n-+@6EgJ"Yg[OP79lRig__m,M<)O"f$AOg%DB.hC">;Q#S8qX2H'b/$S@&+Yp`Cai*91n)nMQ=<K%.WS2H0s=EZ+q^dG(K2jh;CS8X)ELJ"@t^pQd1k_0<f[t`f#b65Za;$h/Hr^'"_r(gN"a:1=:N1I092Q1U^^R?$)QoC3*N=V#Vrim%lRD>'Cd89f28$kO#^19*574h1C8r`<eMp;2AV0NJ!E5[\6'+U&VfPA,.J.&e:nat(-ZnDuSaHL(72@Oe]iO)O3duk>J[CeQV1^tO%S;-p@7\d=Bo/06P->hpGr_M*.LL[NM[o>@ZBofF+NWUc@QIdOE0<73(eT)C,C2[<s+SBT)UV;ILA#ZJjT'.,t`\jkVGp7<f<(34a%;;5RA1m(VIIRT&VSQGS)]/JAeXaQMin[+ktf6"&t;r6!fNiEl6l45XO<:i."K2);ZRZ7/eNoCS3r`PF;?)-H,p`uV';b`mC*je(!%o4+W+!eUneX^"JNAid,(TJ*85+o0s,9[u#rHVOM]]B3fn_,S+tUa(sYW/?&C\?+6tN4bnM*];Cbl(jW>';:\ZY3U@k_Th2mXD0n/%%%=>r-YZa[7`YOOYcgs,g;s*")Y8.+M!^]>O\Ed-r[9oD^6Zn*=&n2_<5O_8H+!C2bZX8]rmp!:[</dYko'aD7d:SFbEB"g<Fa:@%,V^Z>0'Jc\_5"0@6([@X:F`!CJu1VCmu]Os1\A"7hFr:>VPtPF8!QfTj.l0rekXEd6IY`E]0qdln>rAJL%=,Y,"LiU[U!X'.NEBX%s/EH9f\6`Rbjfk9o!s&'<hpR'r/(n_q(JRDPil.8jZ`6]C.671A4c;Jd-jqS&02l\T-uIKI*X>>4QS/j7JXDt1U$^Kk7sM`CSlP2%.oK4@-%@QsF@J(e:7bIF>(=@l^Q!S-oNPnR_nE[eZ>4PG)KZ4VoU5QH4LpV%e"Q6P-g$UWe%nEjGP[q;ae-m)5=^]_,i!lAQJ*?n%"Ad%ZdKgmA.kRaVl#n#f>,*sG8BK=PVq[N#B1b$gnj\&&6)uh5CWT&H1MTX2+'n-gA4*Cbhf"Ur>>!ogH./+Ekc5?fWhdA_U!7dp%SISSrUXn[nk'b>PXZN1u#>Es)>'E5e18S!K[-CVkl:Xn&]'[N#V_h#S@=XN*C]V24j,#VXi[i)I$b%XMc"XX;9p3E6#U(o"9#;O\%7_ddG!gH/bo+kMF-X25^mnr9>CQb3H)JuJ*(k!dr(t@sdrP>9]I3_InjOq&t(k;A2U1&7,mWJA)Xci8L\("4IVT*);WLi[)0PZ).%cr?nriV-YggmWEVLJjfHj`9fS;e_2SC_-No:J1Yq\r@d,$J<mC27i:/qUS/\!/kV6`oe&%>3ZPD?0PjnrM#C8]%tXCB0I@p>#MXo%(S`6#S,B1M*$C:6gG#G!e0BGK+p3WmUWO,$-MaL'e&$:kT+3'$$8`L[&*gWb;1l#bD)rSsOV18`a%_#Fk'Y:3%STto&*Q#6KRO,B%6kHZT)P&`)@n@[`q#OJC?\@S[:rJ\O0dp48^6^6[eC;=b-tj*(q#QDV#AU(;>3UuH3b-lBk']^7gs?ruCbn$B;&`SO4ROJ_\*66O%)QaV2qadI3)D+8ePb]`sqiY=8rb#^tm<'As$..Y(07>3P%=$3C>pESCl,1!rn['YYr29%G"sOU:<U7*u(`H<A^StW[9YeYH;CbLW%($H_=ocn;ZGb<EC^XO;]V<d#+anN_dGaX:@js18;OFF'd0)Wd948f\_Kun7f_JoLM!\d0EJLcUBI!grE63BQHF;itYkMmcn'BtXp%N9"q7BMVjJ#!1,j";r+7T?AV.HI?HDn)O$(,Z$W:NM"O0PDp`un?4s3HnJQe\s%kUi);D.!epT6eGkd26Ai\'?,5:*X5CVQT_k%N%J)tn^3qY=`i>]T)*#8\;%=G'@I$/h<mnVihhInS`*qVZ$^(>jSs1C)^ns?sR=6$Ml/u(Z0oF333mee<WZ:(HD$p1nA4i6EF:]FSh%(N;ig=YA(8>tmBoah=CK(5>YEr8l=Jr8k[7%(ba!oT.L1b/L.jli22$EDBj(TCjY/brs/`N'3FqPQ/4#TXK7ZnF43'oh#=^$k^aT%Q;n/*cdeWNZPbg)G8hbuH_:48rd$h&6J7oL:W#Z!j;^0UX".KS#*kqGhHEqU(lWbLfLT_Ys,YYM%%0D],p8BKGE("sWG,Tai0\AS%&44\](^I_t7ec_^^)B@q%!V8B-T/(iTQ.HgDiFUi>\t,,&)],11HeC*ASRuSjSLLoMoVB6ilj(:knB#.S,<K\i(G-a5n>/(qurHT%IfNtOSi1nX5NYUFFaCj.Q)C/P%0$;!.C!f]s8FtT3.rs"T]eW>PlJ]%oYUFY:jRU_lJ7)15UX;1o7M/[JA2kJqGZD2kr/3Y\kW3q%DDQd?g[*h^2YU:a9lkf^gV8B_l+_kml+_kml+_kml+_nnq7k?pk3ijXLAs?k$@eu.^E[YQItp[.rXP:;r#IDTq*30$StNGFm7ptm%3i;q*_`)8_4_Niso/M#bE>"NQFC\,)Fk)r,)dNaY9etGoVO(^0;d44JA"P4/jh0\:0<>%%h9;Ur+%(*#YYERk($;b/G`Ft^<Z3mf%s2`1+OJ1$uEI"WX/e3$n^Eo0&J-5SI6TgQld;SmYroEird$?4)DYca#p:>Zs*!aZ:e7hZ*dPqZ6"]\3j;<.[M'2*#2WR^k1FPA%>%:[8;cj8hM8I>T,1he7)je'NDjr:Wor1u8A8\sf:=;IB*h7X(l^`U^9.]fo7<XX9*>XS_\*'KX%o,S,Fi%U.afgC%PVR^'UhY@`P8%(@iO/#0:d19hreUgul`/?IJBt#RT?"&t\7CBf*Gb(W:N'ec/?s?MMPsWFOJnN6sVueoX"lo_pHjqf@!a(cP:E6(%s'jqSp:3*j=%%relO%rs("oJ,JKE=;q3N1)P3sXoIe$=NI:Pp3uR1C38k+qO^N0o&XG:jbePS"nR!oOV+lJ[on,N(_tt?>"[&S4KkjP6N-5,%0-#h%eC,XIB(Od#CjuEOft]GeK7UosRY(o["38j1KUu9'AQIr;rX0u9@<kq,l)5nj'1)W/kQ_.][ti=o-B0os6ApjK^Yh(PgTp.]$[+7i%aidI-;S+aPq6f6Fd'n/Hn$M"IV7"_Pchg]I#742ubNEJ.,QIR1)G:aYAoM_s=ciBB%fIF3TeV]-9oMjkE@,32d[\/_8dBYAM)>5&%?T'S@YOausUVmScZ2*iPfX6@r`;`E<Up6r@ko)dU:52T]\bSo[/Z.VU_3Z(88TW5q[J_[>/&fiPp_D-`9XW!@d2rl<Yc=h_0SE3U%5OSH1jKV:8FHX73$Rm63?WUXHGHEo!ZQmF8i&XuJ-EgVZJd/!",lb:En&/RKG:&;]Vq[X;<``"5dYpi>NW/+JnL=:[#=E(eN/V#c%-n@;o[+bdYkV^B;L,"[CK8H:&UYCo6Al`'Fp99aB!@4#I/4V1tPRdVfl"$GrN#BJ'raB:B6nn'$VVQu]7D(2Tjl[Tc&C1<L;U^GD%(&pd=9`Wnl7^pc`=jRo\$6VLOKDHqqG],I[PL8;mOWV51j]8iHKH[,,pTG\!@L%=J2hhYH%/uAY6hHhI3^9]OCG9KrD=cc`PGa%i%mP3&)[m/6.o6:%A7"[3#A9$O8%-nQ(Y`'(YMOb3U>JZ.tjG@6L'@1EH6*!o%8D_eF.^Q1P@r/OG*_$hfg1/nJj`C^hj$"F=?TZ#C%RZ<Ekd=.-rbqUaWq^(<;lrR!*fRl<ub]V6B[(9_oMM2eIjr%:.\i[:k;l+ECcd`3pFIPAs6($/DY9X[#QU[5*:l.l6XZ)hn'5cGI%_-opt!$UOfnMRkk-G[=-1MlgDEOYC^:rBa)`i4/TI=oipi+FPMLSI6B:K'no,dt1NPC^sOn[pZuRNp&ubGGI+\l=qq=e`HA$g[e)%nF86!->qAJ%+S$*rAA6i9ZN^MIRC$7=B6\?gQY]Pf8>3A:07!_Y;'p<-G@FG\LO^;194EPg9'ckd2MY.rD$1\3Xca=Wbf8'kP[Ej%*OQQ5&X'R1TWmD\n=d&%k^W5&g/s8("L]n?7DrM@K\aX%n`@%45PAS+IeLJhTNd%,l]$A7$^?1Keb&DB/D6gT;:e#UUb/hmWrbj;%,A)<X[R2,<JTU`1".*aIAoH:t.a`.&NR?AZ\>1=!9POYe1&SjTAX,]/W66k$&%,OuOg2$Kq*/BfW'+*\8+!!&1MRH.%F!)(-6N1X%U>6iM4pHE__B"XMW)8O.Ku@tf`sL[QW9a,M.O0F;2?+[D7RlN,jL\F::G6MilH*:%;fSq8RT>J!\FqM7g7tpEH?h#sPA5u(4!*/N%h!-1"jgWe;mDSn/MM'$;U'oU1M1T!p'/tcKK`=e^Jk?5*FPHg8]"0sbIh)AU&R<g"m#[>OJot.nBQX(\dLAVfj^.XJ`]CD++epc1%/"mh%Q-J(7@bn42d*$sM[JeA-rp$HR%g((>H,BH,egY#Ts)m,F:ARUEQ=:%A<['^-:Q-=5Y\n9C!``HSHV$*kFI-T9k9%_1[&u9(%27et!Q>8Vga[dok]<0s#aA(s,qI:n76Cg]GX*TY>"j\#QJm@RPB(%(^7LHK1)D^EP\g=V_1S-Li=c(^WZn))"FWEJZZ\-hcA!Oe#%#t"G0Vg0M"#MlZR>c5ais)0;Q[U+4>ra1XCVCaj5b9:G_)QV(cl"e)2F`%XM:(E/RUIZ41>7T?pWA&L_3iUJtcJf'd]^AJ/<-Ct4%/Pce+e8FpUMUP2(q+\8!0"e/Ehp=G_;JQ'U`&5/Yo[`lH8X=*k%/q30Mo=''G;62$VaP>;cp`M.IQASS<Z?O4L1"3W*Q0I/_fXMX%=Mg(gc8F"&DbME,:`^+8R-eDd80&*iiCIaOh-`^FBVCplJ3k4_%5c#cQ"RfVQEqkCkgEJmi#nAh8r-a)C31j%SrFM(Rn54M4c)Rb%?P=$d$)t%bJuClC:qr+tRpto6;QbK0pV-B'0=MnN&+3jrI4@Xo0/Hsdcr4I,&3IFPn-&pA<oQ4Q'C(iJFE]7N-+=s_UoSU1'#$nr%L%,HXV#$W3T"XTKjd_^]4D&o#>OhIa+F>JVD=&d]s!C`8URal(YC$/I=aiTG.$\7irl#]//Fp9\l=tZLX&eqd?hd/@gQsu5fB/L;%`pigP&Gu=3O5g`T@W1W]QjZUJ.M1;Ua0=JF+WfeKd@KZ5;!nL![5/50%:R>54aG,.bHh'5rNJiTP":V^5Oe&TBW;.*o**1FHN..S%jWE'`p,Z!HEMe_3oK<,s6-m)UFD!82XoT*&c0^@3S#[Y#F0>u?5#df(+-/pec10iXAb5hY9;\jYYkg=_X]p%:InngL*QK]mIJGG_%gNK"tIO,(sSbdrjD0,?<N8B\79q@lA_lG`6m]fcij42aTfrig&SVq=aQ?;C"Rc^%Gha]V0B.'"9Y1-fW[[hI3o$OU?VnO9qRos%_%O2BZ&!)>\iEqPLB/*ft)!aG!giS1bOVgJ<X2<bgSdL9OBETd1hF:*i[XQ`gZDY-'I3Q=h3ju!T2Leh;?%%X7">,T^T?.EF[!V#p)%L8!(<](\+ilh#&do$tL`l#aCsak#'gZ7]t&[+!Xdqk[SrqeKYSo@^_(Xh`,)oh2kQF:,_.DD*KuSY*=HYuR^Lc#-t1VUNcSlHf)W%CY`^iiJFTWD4O$I<c_QGp[Z/MC%]?C;m&=J*85SIIW?e&)*5`CjDH8]mpbt;)Si7p>jsh#HNfsPLIS#kfR":n:*8I=6`91@n#K*u%q4ZQso64J!f>ep"p`M5!V\.BOpV23`WH'_)eL>^tqiD5WP$[3eF!nBIVHp+'gfaC<b.?&sNQ7ds==0?)?CcmTTLui,*q,qc;Dt(0%V7>iDX0><re&g/1hG[J@e/)Z,^#^R]gJ4rKe)Zj$V[)#Elc+s-VoSTB?gorf3%\=Zoe(^*DVOD].C?X#f4g"eN,?=ES\eX!DGLe=%?\)6'AD-3?F61?Ke*fVIj3X[Pk9==)lY@q\4kI%(atNlRC"_a_GTX6YFQMI=P12N].E4-!^h?\3s2Ig/-DEL6G,$RuXVQ"^pbD?8%.Gqn*48mGp%%[6H5B#63Lib.`m"G**P3+l1(ee\sC!98Mf?)rRkN!7:h&RGI>!!aFEi5+1'\5_!$A7-f)^QE]APtM;F/98I<kG>@%V[5_gUZm+ZYT\_+&(#$=C?Q?lIklIC].NSDEC6WSf8%tEUf4OCF*u2T.ST[>Te^=jVjqIu\)R"_qs%2b3^!oHJjoa$7^]0=<R6#H%VZ@rjn6u>rC`UHrT#sq>'X0mTp2+3NlQb/^>]$M^;k@<``:EHdrfbK5p23S5rqQ'\c/EC6]k.69,gcM>SsgeASYXgLp2?Qt^OOp$%]t2/_3qH8f@bfL8X_e%2p#Y,Up??6'',7.KpL'`PgRIPj#-hecTlIQ6Q)X`2]=%5fLSpR'OS704Z+Kt<Wr:\5l)1KYe!KOMRFP4>%@]uKT^&?]hT<FFF;\8CZ48)HK\+,1T`;&`<a,U&HE^#boIsS[N%NHV2TD]H^D;QtI%gR$]:BTq18m6N:2DRQLY]d>DXZUM?H!`hp%W]f+7d4O=elL8oeZE?KP4s.'WAL^06`(SYI>M#9T-[eM6Ck)>nqTW*aahp2IYdu;)?<)p2X6X"QYWdbZHfr#_a[W+Us'0Jp1g$`?%(SQ]9%1AAF2;-Z#L&hHYC*3tCQTDi@=qN[$cf6e!`iHQZkKI1T<lGMW85aN,:jIB6R!%sFfA?R4qL2%q*<=+"Q;sh*%19a6m`XG/%3[tq+Z0;s]Sa9q_`MV+>B<+dU5s!V_qG=PfX).4*52Oq8\oH(jHn(]TFkKO!!b'NV.eckCCFk"^dfS!4H[U<BlZBe%?.[G&e9.5Z%$AXL7>skNgNQV<N@HXZZFJ[hbfQKl'#FeIEX(XN+CN<cHf@7^-6`59H)>d1VE\MT-ZuHtK:a9],Fa@cZC$tWWf"P)47s#^T\m<5:%1%eaU<jj4,8Pf#t$>3?LkG#$!]giDU%kSD_:#d#QMFu8Tb_3SO>=gpPrO#u8qfhUXpD%,3a;lC27&,r^-WZ-[+-h)HU71qa(CJ;;%2/32cVL`'Jjh^_VNWQppdJU21Sdhb-]"^7\TBg1Z:*W@9<.Qs;\Lp_E)(JXhG%FlO@sd!>3Z-@1G(u^a[B+9sN\%:f%!;6!<mg`j%aFMIU0<#l.&($M?kX;L7Hn^2N.c4@_fN/*p6@NRF(6h$m-Ni*HTtO5,<?F:4C6ak9n1jic@f81T\BYqQ(IPST"3>&0Ys9ZYNVf_f%P?Z:->h_A%G+0S&i8P:YM<tXfXCs+t]7*;CGH;ZoSfdJOSbG7JTSN4#UgMQP'n6"2G//-5D#A]?'=(OH@tj=Q^@j>=>6M8H]\6'S%K$/^-;2oDNmL.;Eq2\/-Bm.e[$X,<Xg@J'-c['=qet^OI"7+>cEJ4'RCnq0+3b1D>Oj4X+<%0W@Y(i8;JRLB]WdL:R!,k)YWN`_a%=+JGs2;r+M5-eeT2H38]H"KHkLp&?n[:8+S7$]J9TRIET',n.o88P5&R/O)lm2rIRX)ERW[HD:Pi<bWQ*el5CX(80h0^JLRBtI'o%#J]h;$Pm*r.q"mCF?(Tkc1X_,R5f<p=_%#!-pQi)kA8@5FcD[".%r]@UBocCMpNJ+R\hbrXJDlf.r1R>X;5:+6fru2YJC8l)Co_V%m`S0c<.?ZGA"0]tDW67aA%S6f\Oi70eJ,nZEkel",1n)UnnSfm2JZ_291&;>Pn?oBCsPf`o?;O7H[MXeX)8JA`6[mHB4TTf4#_-p%9*QfEHV*AmKu(N!Q_HY1@4uq%D$F$o'tj6-P#gq("Irg>O-`.8WH?:Ec7W+c26NRO?0G>99r7HoIX+DsGZmB\@,8hnOhitT@u6U-%95@/7O"<5US?jr.VRU2(N*dpMKOmJD>QeNA=I'ON-?FX,iVL+2[5T#3KsbEaI,AQ2#3B@gVM$fI9SrkslEqX4IdZN5r;9MS.B^5?%R)r/O]=F6SR09)*/>!12XNq"i/(hXBUrM/K7q9A50nd*M\^7V-b>;e*nLOq)$fXuf8Cu$M%(`9a+KB>D"qqeF2-P`oQ-#UETGXeL%T=D%:Z,raF(H3T0MP9;@#lL[=C.c@dpiA2`#Bik%?O'W/[Aq,HYn&ntGo?Y7b';)QakY<Z:eP6tTIC",g&#(m^rn"15+B6(%s5($%H[XnE@k0o%bEnRcQO>)YZ.;C.59LnsMJfsQ;K3ct5PNHn_5B5>Ci".-rlL+:7G[gF<Y>Ha[5;9r"R[Te9u&NG3.Ep=8=YW.>g!YU%#.ocO0XLQIHA?eZ\+,P.SciEI$N%fM6>4WkB_6%=*"r5+K87Bt9=B&CfADQdo,/og1UU1q&bcM"NqNsB@X3.3&)b9'Dc/>(ncc-r%bBcMN+48YuG4tee3-Ij$L)9LZ!*DDlTgqU[T@!n<Zfq)/EU_SI=TS5jo/5`sl(iS8BR$=SV-Q,)WjE5K'Q9_H$c6e+UkqCK0';\K%'nh:!%1a<7o-+HKC5'XkAU(#;JM(3LAfsCrG#l>M1T%3?511_6lk@f$)0!V=o]BN]Ko:Ifg51"LQlBEg*gYQRb;/p]*]eUQef$T@%FBRD!U=$E9luGJXluZktEFcm_K>fd)cas8%P]Go6<8(3qQ*\-@`X3ae8H#YkC'VY?Z*E]<Jpc\ZMJQ2#o42K@4KdD^,#@<dL3E3D%j;_ANfSW:NMUj_)4&.jP=t@=[><?H=2nRk/GBf*/KJPK_GDkK>DoeSiU0$<?P]14Q?<q6s'PGs\Cq\,)G@=tnLJ8k[4['f2![Buo%JWa"t/NK7dPpec=*"C&V_U3=.`nq0mi`/Yq'fs&PH`fJGnCZBud5^[3d4FAe2Kg-DPb[&J*,Q;ALK3red@=nmgKC&A@H?q;3X$DG%1A5$G4*lpagNpEWG&aU*!B(.R/t%oe9Xf.Xm;X)NV",Re>5?2,DjRj4]D"#/b\0(Tgf6/Jjg=*-<_V'\FCDN&R/M3-=!k!;A8#dc%UQH_^g@MYIfgGL?]oquh.B(?-;_[4`m38RDXq`hpJnhO][H$)9[e5ZDFrWi0gf/<";ae6"R]dXmB9n5gS\?BJ*r&iXEJq"%N9&hu%JD&+4>o]s$R.kh48%0[#eQgZ%@-9h_4"L8YFt!W2\Ze_"?Mu0@6PtfX/G(F2YT7ZY]i?S_,u30^?Q'h!bh8UN]/5J9SQkj_#$K%8%MU![\haS)NAN"W[`^C<kcMnq+Fo+'i_LbZ18Gh5P$?Y$EegN[s]$SsYWY`tLKt<t_DeC0'.G!2R@U;U\agfhSq/,2LcCK,SOVAF/%Y%oU-au,\aO'YRLC*G:A/rkO_3Aq8Bk'/5XKX0$,0NAbZY"14.CO1?B3OWr1>*5.5W]Vgeg(kS_6shqmcYR4,F^t?snT$`;c*8XG%ZDM)uUCbt@9NhVWg?jaOW#-@I@'Ah\0S1=.okjgKPXg[OMH,puK'LIu=_l2IQS4^(Gl#K^+7$C;]?*Y?\2JZhIa`?$S29AjO"DT3%c8gN;SDCH'*'1,q[1#+HgTt8tST>"+P**=h%\5(V/2QKH&'89@FNtbG>.3?u3HWOaF>hg(1[!+R*AcodCr+)2kk&Y*b[XRHDHSfO%c8gN;afnttLX&6&X>oWLcBUc[S3]YeI`HtLqb3[MTtA^QO+Fdd"F>mmg"6>^LIC@&ib[2Ll570^HJmF6b!h<Uo9_%9o^k2\ai2_5%2+mbVQgSV-,u2Q4S-F:*D\6W*1@TQ_#.s0H"t+gtN;ZX33N_G9T-:^?TDtY0d+eJiS^Tup+ZX1!Xq+ciq`G>0Ms&4`:**?r*938G%,&HZB^c"W9N?!+5TQ8chEt&:M2;!\/?t$OL1:7@^lcV%Uc"1XrLOtm;+YhY%\qJ!i*U1i5l,@2B)7FDKnm3DI6O01>gP,f^`L(;s%aUk^mbf.`t"e?U]LL<Qp8joHBAs7T&a`T,?G:'(dZ]Q4"R?C5a;G<RsO+E>a4F&j>*e<@VQd**5fLQ`)a'm-W^]2T=Ct4@[GH>1Q%p\%g??F.Gs4?b^3bBk;&7>.r&hY3THk*#arL`=csA@p%6hUBM+lGVb"WJ1.JLDY8Qn\!sQkrkCL1%:cu$]Q3$O6^GLa6/a%1BTCo%;\4%kJ"alP;IjGL]_BENU?ZBDQt+FcN8lC@*g['ca.j4$+_G]k:3M'pTh[rMrmaGS7*h,'"adO2oh+RoIS8:?3Th`n!LK!<:fa1F%oAmfC]$'h4p=/KBeR@5Jh=kgR=fZ$/<p[Zd[<??&ok5&a5[^rH?-\7QWgrA^m>N(W`:Z$L2-F=ERiCa!!lL+bk1PQ[/Oth\ldH5$%43[pVjF$$F_728q`q=YR`GXkB"1P@6]pWSmaTjW5GJ'cm=_8*,buNMWW7pOboWa`Scm>[A_r`;r`su^'n(=Pk75q<&`'b/^KN!$Q%_7a>D!DCbh_5n[qVdq^XaQVt_O*G@[OrH+pUmT&mB(O*r7].3Sib!h,hBO8JjhI#!ZTAZQUA;HIAAkmmMIj`O9MoQ<_`9k8jqr?9%SFtugA700M`ki<U]gJtE)/<=,VP1Q=3kBZK%co\&-)@6FH=VDpo(*XiaS:>mR.Tb03B#6h:<kS'ZF<g)_YM-;LK_=sg;hX?-Q]cJ%bFm+^cA;r<LH/PjWM<E6*Z83D(;=dL:*#^*aQq=ePO6fF49k15ViNQP(Q7A)GmOZJ\`_KpHu@U+#\2fUO4Vh\j34UTlrmI<-pf:C%-hUBndL`DpZIha^>"$a%:'OWQig-,GBCteBNiAKs+3s!GYpJML+mgpTI.$fL?6`DcbD4R+qUgb:Kk=m^Irf0/cC>DX[kk>FHoRSl%B$?'8G!;G4#<TDLkF<'\5:(iB>t`FtdsJ3VTpG<3_jP^sD=b_i(Hn#`PE-D@_Cf3>HVEL[LR:W)!JIm9OZ/k@,$ep_G-Gq34Yi_0%a%/bQG&35In@le5gR7.O'Dp1U9)SUT>hG'hh5h"+oXU//-J-p4`8&fJJ-bfq["IdX-:92NR1([\4V\K)%A#>LCt*b'`+e[NGWSi;%1*Ju^*307a:kLYL_Srm%Pi4>I1,QAtFrE&KB6H$e=g,3'KuoF`@V8>\5O4'2j!d(FXOs"&$u*q7gXS0?>jms7+@cJPDZRX!Y@Ep:%,s:QYm61J#,pS[^Z&e.:3?sernWZH,/L-Nf8M+bi!44&qUmp$m;X]p9Oa=L$N7>HcAYe07.3nN2q_?H80!1!aBKcW((U2g=Z"+tE%__KMY02QuT/AOB2TgL:LM2%HN>A&sq3!(gM?nO/KN^2sS_jOO5V8@NM>:u9MB5:R$2&4D3mOpL6N]fP[>E8D>WGk&)EOch%0u=F%%^jI?=Kg`'h(-<+75=m2+E8E!HVD6,Y5b/DF&f$5UCQ8W;cD&3U'(`[^bq&UUn8t+b;s4;F+$,3?"s\M%#NZOBXG);dJ_0*%DiM(k%B6as-"e"Ds5eMU:(5Ue\ecPB)p_nr1k%auO?n1s=!Ug]:`fFE<<;[<r'<b_Cn,k?)bcduR\o&@jr(WN%2B)2'&PKIA%&MI2:rosT%Wk&nKQ$'!8[mZb*(L<rd/`H<<W`/_:CqNgGaY)96d4*c9QW&Xpa6Ak,QUdYLL=^1LloJuFj^OLYQql1:/G23@01fZ2`Y:,>C0I1-%1"ks1[Sm1p[Sqo$=3krc2P"G\f.MEeX'N$#98;7^AMmOLfe)oHCYL;p-2V8?9:0\BYcAjafQK:ohs:J^3t:Pj`34<!.ck5+5P_H6%7(Dg?mMTbCepEt]qQBM4D839^q_Qimkq<qCAC66*8'`K6,-#m%69Tr\`OXKrp9u;m#eAK$YSK;g:K?GC.eDfMTESB*EBCFP(7m/W%EkA6mAk9q/X/]#'Si]rRmWM4o69!"hH'`p%\4Ou@(U!$E6gYI\Rh70'b<E(IN_AI"]PnHe]@-Wj3UcQt]:B&mH%)o?%<rtZkK$Q=%O:5G!p\X!`%uKf[=l1cE)=HcES'K"%];07(%t9llACF]Cdck9"Q]Y!T2)S`[g"CK0JQ/E$p+'dtVOK[=ET(bNEcT?$Zg"R,Job(4%2P&S/+j8!)o-0;5c_f0GUtO"Q?L,/-l)ae61_+\sflU9*FB5Y0Me1@?.>GFhKV`5.=ln(7Su](l2OtRueMtdYZK\HF7-)NhZfrGd%V'Ta&=Xg8e&$sc%3ihpp^L:m.Cc\VoB&DQibGMU\as"N?c>5N\Lb1WVDJ9Z'<=GEA[Z##`X)/Q/F5RkYVR+FAZa_6&_/)05>WV1,%],&Mce'g5"V/sb^S0ONKWWE"ljE\)rF:`^j)Z7_#b,2LCBl%L5mVFp)0]\3l0;m1@HfLV#%#Yc/(X/b_Npa\KV<8sg]`BOoN11-e%!I17TJ1=RERn2-AGX+WgCY4*7k">!AG%'X[+Zt%LpXQhM@?ttASQ.;.c)rH'C1C[3d>Uau.m3AW(DQZ8E8R_:6$[&GjrkU\Qh*nr%DF;id!:HbT3P``m0fu#XM1[ia4jV>-p%Hc+`-hFm-<7Uq+*mD#Z.IdU*=XmT20Uf&gSs7hZc=<EEYu9DmM<P!Nk)pQ/Wjq%1Vo?t%@E4;o(;AqVbUqX+%-P1`cJVR,^?EiFQs$W'F2VTbiD3d_\XW=u\0GL$r&j.IJS+3,C@l7;MoD1PL6l.B%ncSYEr`GR>TT89GS)SY%h;pYc1\T1W88"DkUtV(T0;t?np6V&0Qp^$_"4f?EckLTcE_!.#!f`Q@c&b_3^0sX;s!!NZ0]`s*hHZ/Y+R&1P/[&c\451aT,t:6f%A'9db3q(<Bm>RHo/qM:(1*=ERjBe$O_.,QhR7:\WrPXhfNg;E#R&A"XpNF4):$*n1$QF.Y\9!U6)sUqlhSWd.jL`05ii.ITfMXOg%H!ECBk3]#P>>Vc["oEXem-]4C9P#n"`f-=1"m>89UEsds6[_$u32;/`1?1-*mhqVTDbK4Ih[P>#Dbp+L\^8'6o'ld\"#lZ(Z-XLY%2dR.8S9M#*3t%YnE)4+RMr.Q07UpqUeh5t7%&jXP:Vk`<hfJ/RDHK;-?m]4!)1Z$Vn@C^L(.de$k%l%MiL(*;hJhZBhWff5\C32T%Xm`ch1%Wd^Vk<pb]Qs()XDZ0bS.(B9gb!PFT(a2lS:0FnYpJ1EVqq)^IE10\M7$O\e"qi[0jGC(SCF'sc5jmijQ9?]XNhj*`YM@O%IK%W'S/07pN-e*sFZ\cD['QtqMmNPd^Gu84d5V=kq)l.H28@tiV5<o8OmDQRb\q,QU+n5,M9sTWPV.Xu@9-/;HTpST`af-^+ljrr%90#)i4X4d*i'e<tQ?BPp1o6W-oCsp1&BcWJY(X3qojX`N-8?,4(qDfW;]:k?+W3"dod\1Jj''0HL`7$q;eUp9WD25i>ao6,f0+GB%a:AYcpW2W00[4NKZcN#dO2dOr4--,6*7sc[`.K_sP7I2gn9'e,*%[t5/tV*\pX.ZN4CcsKH]BTbBpS'+$)fE8PVeXG_eY=R(B)@T%+/UIj,"J+b8^YG_^8jNcXaM4G>aI5@m@<82q1=1md9E&4hLB0LdBc"2Ar!:/Qh7ge+o?Ysgj,&miV>B8+VCa>4`"nd+Y2i"pTT@?%CR<q%fA&CC3;4?Cqo9+ZGid/;9rFE0[D'0HAs\2FC?UoQAG%"P5h`s$]tMgGg8Qe5DtPJ6IC;dCHgq7[ErRb8fm<kpWG0c)mYtKb%?MZ1XHP[Q7S\eWRF1'?m!s!gk[[hI3Q[QJf6d/.1IOB''G.E)3LJITRJo.E\n`Sl2eg\<,ND7<;?Hq9X!BB3udt;e\RNcIc8bY%\%4g$&=:><37fm7;3P*^JFBA3I#TAQO.B_qECAAfb=fq`^>KF@7g63bh/bU;/WT?]&@:3:HdK]%6kB@m[AI&Dn[@Q&<<nZ_MEf]W;$%HG8LaC.RX3@-?jY;=<;HXfO(8q/0e)?Zuf027R^Ip$EB7,,K?6+_\#O\$<6GX>ItRmFeenU,0VWCW_#P(Gln3deqTC/W\;3%eE><%(_Ulp\'q#:07`dR,^D>bfhX^TSBOi6g5a_:NV-!Z#'TYNlPnNB]8tY*SLG((qo!0o51nT;ZB8I/<p$U)$&9Q1i.q*M9N/:Qjf'ij%,he%+;"JJIm2s7D1bX$YbIQ33AU'Lq#7q:Ha4hHE!QK2pR&ebhNTlU`Aio'DodHhCZZoZD?4X"gI,BLl@2^Zj[YOFtA0]^.SAA7(%!INJl`e6GNQoU?T5WK5+`iE"H4Ug5Kb>+m+Go<C>!.sp9l_t8`oF[V:GL$2ZhH:N6SgIM7#^^3ApJaDeUDIO`Z'sod&VhN(MMJW[%j6kX2IRlMKDbL<+c(Ip_kL\iijYU[D0_iBR76EB-T4re)TuL@*2-sk>+*2AEm1p_sVMt>lHR>_tcm7FgH"La6A`n(lLq2?>1D@\P%9.jY@/o7^3l>cl9q(cRuT[t/KlZ5U5R[EtA4]Ug;.gs^>%cG#!jOnG#Zd^QiB*!>'!HblkbU!YDlO$eWML*PLZk3G<*'hOq)qQW+%GI4h>eU45F5d*1u*c5GWh)FL:5^>2$>i2ADIo7GpUeCOMDIcu>V0lU_E/S#Ek6lU`jqbXp:Nn&<+1mc`GpdT7Qh$7pmVHgW>LoWu%`jgpkF"*a3D->&sPgA@gaosEZ1CVBEEf47NVW2Yf%6!#-Vds0ej_Q@"Hi7R#jBC!b;#4Dp(-<I-]@Ut`BNss"qDi0DH+_>?rEd6m%c\D"4YFk.6:eS@NchUU++1'CRh!=,CZD^7J/U4IkZbil'+Bm]05IE`!>Q'M)4jSJYT6!+.aa[I1]me89qCUp?<:BL$SsA%>+C=O0%F.Ns-AI8,-3T',b3PX#(?9dV/1Lj2>+pVc8hs/6m$nZS)+.H,:^=@/IX>JD>Ia7orq\,o?]@YA+O/e;l?c'L*c?h"HgrHmKcMO@1%qD#*SLqNQOj.#^J9rjeHH1(?H(_W4?mbH7F]me89qDi(MHI!6$-+VfMm$f.kbirFuk?Inden(G"rL<qlnJ5_XhSVJMqH6\.(4*9"%<gpLW@:k"=TmQa.2nBjO^X0ZC)RQX=pNc2eo:#F3i45<J?9cV6Q>hnMUq>7)\J;#Y%V^ZErB*L&0&^,$*>t;`ooo'R-'=nWl,kep%V9KaI@@8i,a1Zrqj"d1$2\-eKp\HJ=NI/@jcSb$6.JN[!hs*/\I=-+idQ.igI';FD=7I/t17Y;Lpq;-r/6r.UI[6C_F56(?59HBV%?9`'[LRrCppq;.A\1DRkS*e]Pqg89RbBofS?9dUWr>)r)cb!oYHlq8*ameq'5G.=L`,%G0cF<Xq3]l08]me89qH8+%kIK3jq,T^Q%.5o5[Ia5G!\X[a&4m0rW<^5_O\:sADoB<Ygn6S?6Pr,*q3ChAYEj+@uU'FumolF.BOcM*S?9`)AOP/Yuk[$Ie.!<#qR<D'^][tJT%a2X3H486F;cLJ])m+T#=os90NecB6$hWs>Uc$f:7Yrf;IlfUAU/W4\THi8o?6%9$Bd`]i/e(1Y29*s5;&CW=G%W&Y),*#t+N$7B"%H[XUWh;H_]YWf/_@+TAD4">)^$o)>;1(_;2@!9u]!tCh+9,)I)p2fc>qQtEI^'d3ZePOGoOt*6S[SYhkH$KZ!K)KL8YYj?DJ]Qd7%+s7T&:8466692W`4kbnP*.;[C[F:hjeap1SY5\!tcgA]KQeZShr59U?4gqkaa>h"AD/Q/[X1';<Q8cRID=2SBs2Ee8o0;$tn8OB!%.lOH`bLuV%pG,=qF)M<R55-,/%!(f@YMmmm1qk[_QX2GBnR2<'1bDCm`iI#J7m]>`:$'UEcb]EPAg;88;[s.;?SL!^ONppG+0Tn>%qP.SL>tDZ"DS0<kE\#asXa'KLI_N(.YpEtUC+A/]^@YZgB91Yo_3.4PR._:+N&iW6i*#7(P,S8DSmF=i1u.?X"4;#O6?`SYhC"]u%5=DuhiWVt_&R`Crf=CX>d"Po*^7\o;dEP]!hWB\W>lFN%cL%_Dc:?pM?(5AfWl^sddHtJ7gdSb?EtW8r?cg^jH*E-:X/;)?.@"T#%e^!lMd@I6t+o>K)oB`'-?;IAtnPZ"=h3ds/qTRU6h0gC[Dli_cQt1Q"+.IMSk'8)@>^o2HmGMiNcZk^e*f$Y5eIAP'8<_jL=fYG=%E',`nh;,b6X0LTi*nih<!;j+s>^m,G*<ASnUo=j1L)^C+me>6k2*Q64cXZm@PaQK:Ima/M_AiEakR57#FnR%:lPJW)%"H:XT9VeG%IjS-A5J<\Jeo'sNEBMQVnTJ$;F;d`B9CATBl9J^dFsp<d*Y]gP"2=J4fMWdW`j>snhMug$"2qI8H@gG714@tYhDs`*#Aj-]KeUe/%bkA]Y)qA?:p:OIfqh!NHU/=;BEKWqKjPCc0Vnkg@[<ulo5Ap[@3s'e@P*_XtY=,Wf$pLtFpj!EPGfc2I/j\01K#IAYA)nOI.(J?"%BCkW?`h3"4=g<5-:XJbBY9h'(.--O%#@o-SQO:JVGPZ9E+METmS=&&q?GdkMY=osYQuY-pRU]/l9uj&hl)e$>eHsK,-EW^o1eP%W%B57-pe!eP:C_nRtS+Y&#b#e:M=Lp-Xmg*2*jep0M`T2"(^>fUhDB9$PJ8!Q/MJ2JF8iMegZtTN&-@/L3R6Y0!0VKjf^GT&0j5_-Z%s!g@MPomtn,l.bm?sfd8#=]T0(OGQ\XKo\C$F;MgT`+BE@gFK3!uSh\5k==:"0lh8g4B>Bn'@8=EVgnIE!)t<$5%Y_8GHqum(Xeb%58]:Q!(ObL.`<V\+f*i$8\HI@jCGR:QtGTLKF&at@ChUD)aEC2HoqfC!5[UK%D7eQ5h_82qicO;25U1AJst2[=<U;(-`DL%6S%=*%/D02!`=hhG+5B+7=eN0nCm\W<P_O@iUV<BVj<MfucoStQ*$lHY(]2u_<Y)YD*8q--\p8rareP3em$3&UYW/7fnDH-tc7_k/3RrHk%CfCs?BgHtZ<#+]JkZ]PElY4(YI'tQ<T:TZ6Fg6+Ploa'UVBhJaIPmj7Ai<almAc:hn7V=Qq'R]B,/mL)?OmP5@en7%87VS_]gnb3%i,FbGYZ]k7;8dKa.?Zn,,(ZLO!OY&0m>!2p)X'>J40-=XINM6Mj?HN#]lnfjI(g@c!uhPla;osQ76Yl63!&$n'81<d?K:bn>\;qi%NI-&)Y1(]0*t'*-it[0F761V+GFY`$9_lA1HWs`>IA-G1>aTlj6gaZ#Fje$[f1A0s#YCjjj$$dn'?SPqlTW'j]R72o2OGVHog%XF%N/D;"SE@l4.d\F(<#D4J0'DVW'TOjn7hOs5(W>(9_FM@bGD3O"<\AZ\S*UL@h+Z,BbNOJp@PuilHTG,%DUEU=`(l#$]Wo`M*C#+V%1j&Ub3^qa]bV`9[!-hRg'i36jaOMb$>p`[->f1i#0j5h\jIDG:&G(Rn2k0Ar2haAQ4**4lja[j$O\=>Mb-s.>$7tarfp6[NOXbEN%:/--g&!/s/j?@H+a',B/K=*&YATc]XA<=^!I[nM!14P+#13c^_Gnue,:I"p&ffoS<F/*(;[OdhVa;G"(ILg7Z#q&31P6^q)f78TD%E=qn_H#EbB:EQ:"/ai,%^'f6m1G,ceQ&fnD2%Q3Z>?K\BR;$@[ia/q>qurPRj(/8fj(\j5jVAW$L%R%/[,F-[G$GhV>K)Qg_P1VH%<-@2'#k&;IHp!e,ck[CBnq'O#]Wf0cg-o,1,C[9q,l=*)lX=4EOc\mk3(TK?]o)=AKX^ng7<fVTh\W.0_[5]=J=lVhYZKpj]3?'Z%GD[B[e#GS4jj^cDQVC6O52P@)_2UgcO@>^iG((:e%[3HSK;uH<=Y"g^FCrfOHPEa^j0TDtPb1WgWkA2H!uTk.WjTB\Y[8E1[TiSq%T$ReRF[Y&qUp<h-DPjd4Oto/+lU5IF4_SNE(E?/=k<FolDZ*ElAE]PJ"h#MgAkcQ+7O)>hUH;_>36iSjf`olW\tK///&d,gXbeR^%KOUpXWT?O-WqtJ)&FPgi>k1PqnU%I3*$4_fQHL12&\77T-&TEnZtaZkWBXO.NT$"=3:#gUJWK(k'5J0J+Zr<6M%>n7#`":5?(Ec'%(8AOUXj,_!lE[1_SB:akEc;m+FG4rMor"sHZurni%$EJo$J)0RJ1B;F?TgI<)'hUb%n6YEUL&g("q&;G!UMX.!Lt&mXWs>;f]bQl%'Uk(['C[L6JHCF/OT@ae/+?;!J?/^A8npUF*+_WaF"%[#j"&rZFt*cp:M2-_me%]Y7;7.T1D%L\MblqK6DJe&is^XH$j*ug!4sL;%&A[R8!MRRVNb.Q1LQ>CWm(XfHIbf7a!tYqUNl#)GSp_9q!eDIfGnp[fZP,D_fH>VMH/-:"Kn`4.%HpU9_^64:o[\\h!I@h#^&_@7%R@58]gfmU.1HdG(DfUrb!n1Nh;V-Gj.NP!$Vm=T1%;%ObhT&f-)DpDJ74JC3WL3&)KH;dZ`l\kO0IgDS6ern$.r?2T\MuL`ioOET%+BYU.9\4sLeHiE^kqiTLI@F)IG\Oo2`PQh+Bcn$F2P=M*b[iE&$I+6hPkL)2BR&bA8gfb!@3rBi]kXS&1A0#Gf*lH9a47B:l=_8G%N:g-iPNAAEfmk-a)upXa):pu1(+'<]in-AO'=MIWL'AJ71H!!&Y.:F'+UI@Co.Z0.*J.CRJ`<&*'Tkhp:;jq'1`W!Y#mMX:PK4>q%C!9*;&M&h0-BX/R?hu&pAS44H?c6jOXAuU)qL'9?4`OM^YBJDOPso91k--4OldXh/FBbZJE_*,fW`1tfP?)@q`8:#V!\El>..r\[%_%f`j`qlB5g9O-M:EQ==W;c-bM`?M7\p8s5@YR#nYUeW)gG-"-7#!')DcZ)IOM'&>gO`B`p%l:ih!H"oQDfH#DR7#_IB5Y<8+W]b%J3/"9::)`(Z;TjE\MW`r.''$Pn^uaGessO>DA]@h-2Pi3doKe/=P2=9$LPmn"5qJd&'k!2[`sNXEZBS5Z&(2X+Ua&IqMP^rEBS]8%_ip+p`'&*gX*.6#oQ28?L9J<[iI.q#[NM!_f(.qi$/(7n4NQtU9JN-GPXp7OXQ4=Rl"cY1!IA-Y?e3cNb"0J0$DPTW*tO63`FZ8Z%(;ak%33q;<g2WT1:bM#3^1LGD5f6\=h3-(`1;63OH:c?2Be5P0Ue(Y!KK2ZqXl=ms#/VD[lJIeZa!ej2*:5rs4]q'/*MF^YN"A(2%VUZ]X1>,nEf->'B:AV,0P@Ys8LB^QWTE?KR-XT@kTIA<ub#M2OSlLT]$KbSY+3-Z@cEZB_U!!\PPpq^-2]*)Pe(KN],&O*9iYXPJ%F^[r0"3Z*IC8j_HY>u'@@J2tN`J$T/bT>h=/nYBn0RJn`<uloa9nh38pU\?e(1n)A-bD&<h>,\[e7U]5J0&sJn^M+PDaF(>a'CY\%LkXLa`FKbhiJB][gi6ffjAe%CLO4'Ql1V>R!gCi4@^-ofa56tohm>Co@_N=N.oc9\f,)dY]ZW5u?[&I?SI6_b%Jtnr*/8CuLnu]n%;"cI+3"1]B?ENo!P6ZPu$F;N2d850[;;kg)n(D^c?dS5'feH)$%$RMqlEkj\D!\6&]h3"XCY`;m,(ZhM'J=@QQW_:q'VW?18t8PA%[R4,5D`bg'-TgT;`cS"A"+-<Di:EIEU][A";(dVf6&h^;ROs6ukbYlhTh]E+VBd$!69@k#b]SNVU?(Ta.seN^.X^qKDX(H6e:@,<%NT&,C7akV;g,0>@[rOuTGSBU:lJdo4>nu1%Oqu3DH:Kh@UXC$D*M3#\Wle4-,7%7,9".#q%R[5hI,tD)Ga-EU=jZnJF=/:5UJ*%k%Y:/J=eQt@0G1*u;ohZfd4m40^!r@O*HN:0d.JeZQHQY7?/ttQEpAdtC76DqGX72+<'(V$@=Gd6=(`2g2E9qF.R7js$<YE::ULR1.%22!QqF`F_o]#V%t*M-o%A33YE"S.(8P:(\-Ta/O;+L\66^a]iKVsjZ;ZC&P8!6$+GIouT;Q3Bu1REMml3\([g`GPbmFn89:6ae+\%j8u6*,/#*16TS$,*urB'J#c'_+Frhd]pAs+rGJAq.cj$Chi-\OO!6(N8B[]V%*]^ch#g9tm?iJ@dCtQ"0NM>6OjRcjD=$^nkp@hV%&+H<D&.W5XNd&)7`nN)[V?Y>=PP[+J!%WoqL:>31>@ORQZ#AP0$tmqd*BMK=di#5HK.m"TN=$ucf$Wff*6t3h4oZt+K%YMLK16%'%%)BpU]Rb![cW?HH<"R=t7hBr".VL0U>auragL@Tt#=DJKS3@1NrBG's&?^X_C'tsqXuZ[-8kZ90Et!+]'s2inW#/TilMe$Si,^=E%.K`U_=,>0'+K"`kU]:\64jE;s*1qk;ARVW#S38dnA.KUGc`K6Q?k8''$`X[XfE3X2]W)HhrI/Zr-MF*98b8tm)@4+c%..9(#@GiK%6,_T,%^,.a[9rot;*f.CFI5:.<"SbRQu)56Ge/(j3JaUUe?"'.Q-Wa7S?ENs"%(5[l_*Dp3rQn1@6F<)87\'>f3p['#JGL>PMpP0%%ZFK*dd++WT*+fHjE6jGkCCr]'9iC3L<1;CcEWoYR/[MPH-B37k`XK*#[_'n^6lRS(j)aPP-`Ad['h1]5t@Bsdme=]cE2*/@DJt]%*K992J([f2Q_g6l@FjmcF!s01jp+leAm1#Ud5aZl#=9eA0hllB-l+7tLOqVHF]R<WW%X_+5'!#Ql\E;]/;&+C\$K6na\J&b&$e,)%a\^V<7eTB9&&S+`&l(rjZ]af!3@YTk8kq7)(4_RW1OP.rg#?MF]mU-f+`t%Be0=eQKNeuq"?=:H`bC?RW4-&s1[rk@857MVr\4U<%k;8`(L5r?/H=-o"_8W>R#if,r0X+G(XYBL_HD!@r+Eb(Xon,da8)gbi$>2=?aIM5g4%cLQkI8aQ3j2@P-/YfCl0XOK)Rm`@`dsJ9%.^<<ZR*;h<_=];&rDV-Ph^7p`!8]Q5ZM#i7(&SL_jt?58]mAq;nl.b5#[BZjg\[bnc??NtN*]feK%4>/r?rB/O%gYP%!H4#<o]nH%!P,XB&^'U-(08LH.Sl,TY'easQ=_6R`_)gH#1,+>GlGKl:HCP>am)Hr3b!;Y/-MZ^8&#RL1a&3hM^>VQ(U1+uCp],A;$h<$_`CM:%4!s7pR6o\4h3XnZ=dh53-ni9C6X5%.XAL@KBsd-7%I8;"MsI/4JmKn:8(^g5jK-?=0KNL+I&>p5HA02(1[$YOQ8<%OjHmK+lt7P3%Z_-T0_f@_hq5+H=DqJ>*B:rQjHettHc="f"1@U%[E!B[rR5ZOaiNBEkB40#rZ/c@sS7-d(JMStlh)aDC0ti;e+4bM9cW"u9))UgG%$sLP=kc@BN!09/CHJmu<)SG>DMDjlsCZ*2)>,ELn`:>Wm-1%gpGt]tU9QhI`p\@je_E&kQct"aCe2d/,P`W(ZOE6rOTJFB2p`A).%lZcK95J97GP9X^O%h+KCWB/g]?k7'A`13i[#PMP@M0i;E4Ko'9052$K6"(;Un$_RKn\ZoN3k2JNh'q1AR7h\<Wtd`DZ7:'o0&*>O%ZNig^J't8<lp3i"aFZ_=J<GCb)AVH<TGPb6P7\5?TDQ,-Pkis9A5@H<KJI)1![G>@:.6!eR-GFE#^MT&qeVDi0'YG*UHb,+b^N)E%W.ga/P)QY`RuO&-l79u'jUBiq]@HFD!3po$3oXnDk5s[5n3W%4NUq8UKlZ$0*r1ETSD`C<JTPrq^*D(6UhBM%+TRIajEQoEb3qmf%.!:kG=hZ)DDF/j0Ncr35Lg'!#ipN\$9',^+Hqi=AH#3JCcW%IT?:BV&!*_#Jf"Qm"emi+$nX6Y&4a;$1d%fVP*=juVho58]jOVNo%-RhQbXW&H)@'(&',Qef9FR'&tlg)8bUr/Ah/FqT:9d0=Fp+.CD3@1H>c1NnDLUGs^m6ONm)1SL-d88A&@u"ZA!^FJ;ab(5`>3fmo%aVs#bT&i/9CGd7Ts&IYi)JgVo8#<IBQ;23#K_E`;iN3pKisrh2O%A#7.Df)M>u?nfbfM8LZjSrr5o9d?rmOQc`$dI#chmMtZSMsU%hJ,if@STBY<o6!>cngQd=%8mTWT&n;G\.ZdLe2di`<30V/<gSk7Y/jlSbe@i:Ff9TLd[iT*F\2kfK9'Y=udg<q(fQDJoO6kET?8A%0_kM@U@:(S[,0XBMW`&PA3.=iGJ;)rmRA3Vhlf2;(#\j!PaMs%hZjnWCCo8V=WT,t&ICZum#M!-nEHFJn9u0%!lR8qSCBYRgY*YR%Ys7KYg^U?_%f$&n^Ld%eM;RmfAT$r>3Iu9<^L]A[s,KQ.&iH<<i,I&d6=Ebc'XU&#C3PTsC+Uf,$M?,#:l6?0JPmQ+Uju?!FupUN%O>#e+I8`OeNk*1(JKGRur8(-r`?"JE>MN(u@inF./D)U@p=2f5Dh5.*#2%>hNpn+Cg65=+Tf,I-TXK\i5Lbmfo;ClZ4d[S`_N@iS%F#")KVYr:K'NU/ZQ=<MZ;cka]]^KtQ5K3Wn9T2;"e_Ch=E+]k^.n2h4E=].f.\b@930SMBe";K)G-O:JMRE.oJLIeSDDoSFi+.D?%UGqad:C-\I[YtuXeD/<2PJK0BoUIEh2M1$JJ`8CE_hFZc,KE:7O!l55I)m(VC7@;(NfB^0c?dUR=<odkh%t,A;-G5'!]c4KN/U27%,NQC[aN01_PE1i1$*;0.2-k=8@n+H^q&%+u7[/jj^#u#5*Lcc++\I?V5kV_5mq:\$E]PCk%+UM-Y:1eg%>&QPU"@3n_ZjIpcmd>j%5gH9g=YP`9cCpZ`",;+u7a$BO3Xj%tOSehUFAE87iG]q;85?$!Cp/D]n_-aDl@^5*_<De=8tfN:l3%O[(!Me`&OSMO0/2f<S_ZV4%j^C/u$EFE_B6FkO`=dTe6m=;%7A1qJUP$E0B4OTJ9OH/k7<.35bjW_3Au3c6U9G*21cQoU=jMt`!_G2JG>VoG4oSh.[lpJ*A,4p?%--Y(s#8bA'nIiG38nSsZ!q?nDp6-CL;'@*uXET87(P-2eMj>Xf[f;6i9*1m0m.&?Pf+Pc=7St<WT]sS<"OmYVlH9Ol>0CNfUI#(6%i*e^.?;2"GMphd,G?gXoWDiK_/N:JnTL,#dX8b^gVjtl:li9\2$:3][(KM^]Jb<aM`)_T]"dc/UfVfA+nbg"noI_>+LQjRnjJD$X%Bds7FM"ie%>ASEX&sS3.Lo*SE^pi=X=hP.cnp@"423MTlH>KcQ(dQ>dR'8!O*NU7geYbN0,&C88s&6P(_J2<"rGrpPl7E!/;^-$X%#[d'3Dho#@K'\@m,pKh&&n.h-pjuh:LmL]lE6\ni4<Q,V].FDQ'27]bJPb`",;Uh^[OQr:]D,;jQbMAjPmBb(-->6l.Kk`/6P@/k%(<c$790fLKej/61'Y#CGY]g7,M:2oo-c/E-pT;n#H9TP]H@&-f+%/NP&uhR9Z$3sD4.nU/*qHf<QLY"@\"(c_\N2^XO0ACEij[ta%nlp,]^L[P/1-'9CE(?U0g2QWXs1U95QL;6[9'cGA:L`Q&:Y?UKSskI@j=2jWh(";T/0T/O0pC!n4ER,K3VZ_?&t-qH$LX&;]UBgi%dVm7@here=mU0P_s.&[Y[DZ@@QhndT=mZ\W=7hP60*@kQi1\rt3\PW<AG10O';9/LH#s/[gE#+#mZ[]lMLOoh\'$^[2NH1k?<FZ-%P4C>Sb@<PULDJ4Nlj_?tJTc8@\c3tA!A3Z8.$d?YU5@N0a.PRq?AheMckF#2BdFN*n\C!]:tt@(kj=]N`l;J"8hG"nl"kf"CjbI;%`#U&('&uF9Qtj:q+,I;P/.fLd]\H%.blV>IpUs"!h)@Gd=rF`+j[<:+CdTtkjG?CN+dkn6.>M/G,'pIYL_O&Id`UAI;9t!n"-HW=%ZYga-X_nKY_3[_G-t08+@EjmE8dKkE.cZe%gD[&$";,F*]Dsn$hnnD%%SaOVf%)RC+nZHiWru?WR3=so??W-pUl#fUM;g_Q,1PKL%KAfkL(*QZA`>XRdP3YF&8[Pcm6HmE"bUoN$;IA#@m_?_O-hSJME5/DrWWk'n\O0B/AWcmAKTNk?j7:OVPcW:5nkBf]npn:4PeD3=%\MhhOPV5e]mKVM#N\WOC2V'A4b(E<V\P'@.GZ.Q_*$gra<7a#m9?MlCT'>?:k-1NT0t4,;4muB[bQFa*]n6GWH:@mNcV]9!TXt/l%_LkLQ;_M,C"_YDEFj:@pEV3V@<:tQZL_rf]2E6Vi6^[cG[)57]j'<XCRfuUUZZJ'1ldR!1k@aj%o@eVjm$5$jYG/l;Y#>I%I6iIc%6FE1t.CZ/1;1'"V(DXT5j=[E>kT.%dHpM?>N`T'KNY(d^^PVTP1$W[TN%UWa)"SC5B8YkRN8dsXC_YXZg%:&Chs:DtQa$>kFq0!U%KB)<!^lZ5b2H<#gPu2_t=pW>,B`Hb[g"Xf(9g7j$j:ot1RZ<<CqoNf4PF=F!m&rh6-$K`kY&"%qhUNItXbrt?IGXJ%f6oXU1K8!E%MKeYlgO2%[VXP\\LSOG%%j#gZXC:r&1"SM'^BHGb3J@j&X+BeEC#s);`U/uD:qidi,nckOljcR>C4Ym@%9^M@n&FV<Qa&s2k_?UU%[Il00(&YZ?WGnRV<h.1>rk&"L_EOn$S(_/o7ks_b%Gt2.)".A$:`jZ#KD=0:Qh'(!MHr??W^4c5`(m)ojhS&+Q#E86fa#CrEoL"t%StC&ADW^[La(RYBYVTsA7M1k$0q")rq']S`]G!@Ed%dmMnSPojlQSpTBb_/?O'hBuN3/!W]L_;h5$#-nM/5N==h`*C*)@_J]4ONg%H[N/tMjurTY`0hHk;Alpc3Ltn+^J.[g=lWGSKI9F<A4a5(klr'D,mJ3LIR03X.)ssRV-W/0;_;;k"Sand,mIrf(hTK^-2!AE].9Y%Sc"$mJ8YmZI.Ooi%-upOPi(Z_S8K3b7ecN$\03Ct??\]a(JjR+arFLq2nSY2X)fT/>33LMQ:5_W,cdNmYuhci0%noq7P.#.PIPMP%>\*$"iF53gOJtO(d@u#VTMEQV!_Rt"?unEQ2mL%el!-JXm.7V7K_OfC3CT1Apb@gR.[n\"4cqmcs14E0GK9QIX!Iq/=GnZ)b,#Cp%>>YQOCjEn?<`CeOCiNlp/#oN^>EZ4r'ih&rAI0kk;<80<;-;M/.UR.O_TGnYiEjs6_MW+.Zc"IFVeWHQl>?M#BR&,SWkJuN(s``@%$$H69m?.#KD`4>L]X1(DMp96YUQ'U_>kU>'I2n;D^jHJ9NB<.h@0]O*c"sa(cE20ao3]j_$%Psi(>1(u:t*W<.f:qYp8ROO-_PdK%oWnaDbBH76(\k\9a;I!=#4J[+hd4_cZPKeQG/qhHqra<h3JH2]B9&B;*&?i'^*REAbj>&@X29]hqC4^SdsNt!,!Y1aoV<_"%t(QW%G8&*HAToRBD^"r2pcBZM(<#OZYJas?NVok'O?;nY<8V,IND]jIB382^F/]`2)Jk0q"m&#n_YF-J2s/D'N:Hpb'T[I&#PEcD!+i"h%F4rWd*0>"2H\F.R/=<%'G,(#rO6LqnY'D'qJV2a:8<hhJ;V<W_j,iW&'Ptn_?#9da`-@$B3YC6],q,ScNG<#7;'6,-F#JV"B1_A%%/DpK/_9X'l=r%^HfdAM"EqPEtlT3200)>"p@r71no46JD0@r_Nci/MNE)p2oR@ThsBdrr-%`od0a/]1P9>kcE,\U];'H&&VD1AVc%5=R6@@k&(_mLlg$nF;%,;S(RC9?Z5(2hLsEqXdB;fSWK52r4t:1<V]F(ur:gAWNR/M2LIH<8d-\V`TOP?o7A_Tt<tQJZ8o9s7(da%gjs-q06hl<LH%=5fju$mVs_4`Kba%"1)D6i"YnZdW!bKQESE$T/iU>Yn#$86Dh<t)175;"V\6(#]<&q+2TTHG.1ZJP3=C/lM\=[#%jHZ4RGP:IGQ8G25iOYEj2k2:V!C]DoU\)DC0J6^+:Q?@VqjQ>,G2F8jO6,"7GQWbcjfof;6aL-cj!6^_]5)fc25o4c(K'uD1GI(!%UrnV*b!X`nU(3D6A@j'b+nc:6:+bR3qe+ufghc9g'Q#=C+6l^gZR]?AUe2@U]'pi9HPNX$o&3Y]Db&j?Tq7BVCEGUoS^`!WQI)A>%2"1[NjMA-uJM1[_%ntD:36iGl-1=,C5\<D+,A)?RUm^o@ju/SPPFWffaH2t@0Ymj7j-8s<,FRp'?=[fN,[rS5l".GKOR1au&p,bl%a\JoK-#ABRJC%/l+7oTFN[P[B+(V"$UISuJqlK?@.l$pE[\IBKA1gBX+UqtLYb8dBol+]^&Nu"E2igdO*UtZi=[q>PL+->:,?+pJ%muB&jbGG0JF=ulT?;A,\k\ScEm.C62hki&03oKh'IX=m58^b$=n"`!X9m]cfi\1(jV5qbT5qZH.>(a9EVcsDp=[mX73@V#uU7H0t%c1gKnId_W5ol@ZArSS`?N#"`^gtrU[P8dn!"JS!8>CiHc+(<OP(&k;0nIT(PJ5"?_7,UL7X4!q/X[Q$Gmtf+tLh02&S$emR@i^a_%9)IiSBOK5kVt0_aE0WT?/]Q^].o'pj2/[s#J?]VrT]$FIJah6)$E%m%UTVI=euH8k+;Whi`R;XhoO?o=&8`^gnNel@08]']m,WU[%&G]HLRH"YX3Qcp+E3?sh.9(UWck,JW#^GsO'@h[T]iZ#aUe'!FU]DBrF2]'A'PRR511.-!9T]O"@)=J"#%<VYJa#it#-+_!B#ZTb%N(8D#2;-Vc=(>9\Buq_La-ZLnF+M.5q\?5%X7g41Yicebh#C4Q',G_j3P3f1J76,iNVN*B'A#o3Du6]gA<4+27JYRZIM=6ua*rbU%emtuT'q+DO46QuHY"uYt"%DkAA.A16er\GF`Z&n,KW%QID*"Qg,:&,(KGZ&94H1#`/sK?KYh3U_oI>T<r!:dK;j6Hl;Vne.T`F$V%$A*r_jU^oi-\_(d%gdm;J]nfbD+r_.6`+LhK#!;f,4[TAW<t(&NS3(bb56C^N<^qUbMAG4h5HcG\:BC%JV9=-&%!:u3,Q7lqpH1J%@YbLmPr*n9%XObFb4TQ9ks:jHQ6Trt8LJX@+kJ1,m\-OQKLlht"0kVGcp4tD<ie`(BIsg3G_r,mm2;%lQ'Ip"*nLnqX/")9+MnIZ%N+uRrfBMh4oTTDk-(QkLE.<@DU(-$XVV@Z'c@uT&NFF<=;!iNa0!9+Vn\@\q1"?+uZT:[@10F/&">+s<^EJ5V*\3&$!KL?F"l8nr%1Y`U,00hJ/T8lC?n-]U'(&D=EF`r@YY_!B,FKgt>'+Y!lZ?mC%!'RF57aq*KJ^=sRi!Y9,`@$a./#b[V"NhO]8OWHu\kE3*iui-!%)F(@!i!j(lp\8,r*_lCkPZaNILKIo;=?1as1^O6-Qc.%M)h:ko%\4s+7!=dai+T\?jO&N#PsJ4e?`>/mAjJ,!3[5ai8'I.d0L1FL%5^43(9a(e+?3<O(o%8Ck5`gff5_.Rh%Km+cZTs>J0gI-fIKjUN.,GY(n4rD9Jj<WT3tMs+.0G-kPX[_LZY//N&;2M$&J($C@c%Cp%aVk?!W;Q/G$Yhp42:jIQD=AYf@\=Rn$G9T:P&1:(PJc?JRc*7JlPph9[-ud<e,r-!d6fnU$SFK"\;(996,t;bMbYM=E6C8>_:^#t%T`Gc[@bCnQ[0`<,@LPm)Joae5/2@lc!"NLV@SmUKM]!EUC%O3`7P$b#(^u2l`"F+l6eo?\L#aR!`A;oE8Lq_+&G&!nDGK3>!YT"U%%4&U77SHVsaK0-p2."rtWYckEN+b*#qVpYJ>dN9#o^t$DOl`/C=X"DOZQ]r:$n=9XqW]"j(a(n%N[6:/f=:o,`4/76@EC9\G2\^#%,_\8!T])9B.)cSfbK3@ea!Q`Q3kIcqm.CEu'JHtXX+Ng+2`9Y=WA:gW5]g=TpVFc(KBXTPflnN#loiGDpn*IjdXmY]ACM8VM!MKk%k1b=RYkOf,:b8jJi*l'T2d7'QIIOK8TPb^o^\cqtmfBm,s1hsJ@IJbni>1-qLq<%<?ms'I]+5tV*din75"+6$*dkeXG9=3*LJ;+e%[i!t:rAM:$i!Ta_j@Yk7LKG_u<gGp2rStn9C#n=QoKNib_p</UcO2bJOA<]S1mT1AI3DM?c\MJ>^j+b"V9u*mBh^X@IUi$)?biE5%PN/-bWk[JiFl/k[VEY3YiSL4c4::,?`Z'm+c,]WQnGiH:HrFB_$K!Jps#hGONrkpNL*)3?jd2T4V#C>`o:5j!s7F2(g\BX%O3_AM%Gu;ZX7@m-XflYBooC7)Y_<"(eW9_(dV*m&#Ad`r^`$J<mGHi?a',"GFaKmb-I$#AZB7n!QBla1umbH_1%SVWTC@n<SITuZ8rk=g0%7_b5GRm$i?J,CbqM2t?1mE>8l@K6;^$uPRt2@XN.!*!CG9S^e<ngU/*7g#5/,Vn%pNWknMU][)e:BMP?;<p`Q3@!1056*T]@BdRa%`>"q#J1[<eE.T.cPTh.#[!EYCfSWis>0Rr$QML\k9.p^^1giW+KPfCY+slHX9e"MA9rk1CNNK/PUXbkHCmdKf[d:k=b5rI?:"YcX%-ZVO7bCWG;dXb,nVh'i0W:cq9S.TSJ56/.i_I1Oh(?E$-*c*8k8FUr^VA?FEA*U%$doBBE@;='n2Vu&>E1(L!LS[X`"r'Y*;MfKr%LE^JqDQ[/+D6@\DXWO\-XE1e2<HHGC,p\/.BjEOa7F+EP,2HM3HJ2WWMHW5Jbus5p?"gdn2$<?nS(9H`:Pa>F=,V0Ae`pjiALhNo%BJjFnX+`6uF07Jc'>:\$S5puB>i,T4>$6TV=QOs+S5Y:)s+FY=k813bokC'MOlJ8U:.XK*9!).4!)=tRi2.5D?rLF(+)69lXRbu*%<?]U7d[U>O"B[Z]@%kT)0jmpQ)7VD4%,eMekD,ROa_EtAO\[A"<$lILD3d+X(K8?!<[hTmX-Krr<SsEu[MCWJ[b57KM/5A>f?`$r%aqN#&@ECDr1I7rmcTP-6;8Jk;F,<jG,O-Z!qlA$/OKiLo5j=a#hmI.B\nm>skFd1IIg5q&Wj<:_*YafSet7PF$6kV09GsJ\\MPEV%Pjg,<&k[2cd)`/=Zs(iIM-N6,i^?YE_r\\&a9bNr>)D#P^*]2?Ft7/[=hi[PR"n0L/u/*:QF)&)OI05BYdKcjPAC!Z4s?7en3RnP%0UGH%Hs/eTb*M.1WK^`i."^TKJs&5RMM,4qO\Q9eXeZ-hV%T2dQsjceM0q5%2P_(LhXE+n-juJALA*LKA.n,@ch9d8n0N3B8f`&u%C,<ktiI"(U%ll8#O9.Lt.YkU@Hn#T@L(^(&0[:q!Bau%Q6*hbYW0@;3;],Qe=W=bL)SV=+;d3^'8:UE+>*_bdTL1CB!E-7PiQmgN%)%M(tN`UM`3%;/?YjrYA!!'$B+pUnjCf*BY9r.k_J1u7D!(7!t8u849/E'!I[TWaj#4$rg^lgCZ?i^7_R"gh,g)7W#Q#I_)^X`aY%9`Qif0mtJspmNr^XVN])\L#/CaO1DEcn7m5nB!5S5`[Ki,lm?5F$WKU3?EqZYY%:S,+(c4Sd[q<!Jh,2,*O3<<GMX(!ooS`8M-)%%_tVY9!CiH-2:Pe2Oi&?*B`6%!pmsMr[?`jo[3al2aK.0_qAFMiqT8;mAZ8,F;%C+4R"88\n7_cO&BFr49'8K=(NO6kN$+ZaA-EsN%=pKT&B/<4;>)D#NI8)?SJA!(td2M"p.Ik"+j:Z]5)j4)l*OX=WEFo?Q1BR&5_Uj#T'#92B>:*2'._r)f:>e]8%Z6n^=sXk0(BC2G%YjrYd`DhF%&.pq"+g"0#NkQm-EBps8_6:8"N%`'T>'ER>]V^]\X/(b[Bui+m11r<L[N1[2Z[hFWS?c/ucmJ)h8d+oZTFD#1NJYGN%O9I':0Es8&8EFf`>,>1BS&NK_%B1Y\2ggT6ija*ecSUlKM,`joUJeBU,de7@'=f:(g^$YB>Nng>j\L`+rMDA!PaF3,[30STVA$KK%1($h]GS+Wo`gP/JAuh-rU-T[#Y6<@-Pbtj`'Zcj(91fd$U'MK3V%j#33la$>aT_I"1*!]^3b#K3j1NJ(AlFOk%RC*gZ\$V/=^&g5%-irXt-RBI2ZbSB4U/_R$i`VXI$C=2^"B[&2dV0/i,q0S*[5(V!7'.b$``BK/5t,L)9PPkrghK3rfo\:m3C;IE1n"MW`$q`UJ8?2t%PSE%h#/sscOH%<3dC;P5U6`S35ZeYB_plh,QGg/+QH7n0pZ+(1L_i*a=qVH5X]`(s\HLeg8#=^5#HfmoS/fi,b-js:U-j$$B#A$]%`SA(lC5,20gd-\7S>Ut.%C-KMbQ/bA&eXeED2JBsGsW#&?V\*-U8\#>J=8`:SjsMJ-^Wr$R1)sVZa*dP\ceQoONTC>\P0GZYUm!-%PALLF2*n(1Ce8''g0RrZl`'8_5jtF9C3*ND*_IJU$DIci+n)-o@SSOR7h#<e<_I3Qc3%(fA]ffp$LgYN;5!SY1+;g[&OVu?Shab'%;qmL+$mJ)V/h7#(b1,S7&OV]7RPJ>#P?Z5/,=[eDb%9jo"f8bg2I\sd0;FM/d+VDg/CJA8-rL7#&lc[[FhG$9#=ZdS74ME56lg,:%DCMUq2C1;9&kK-iQ><He:&TRlSR&EG7s0N8JcEWuYlmpSmeX*IaqdB36;#0>='QjU-H;4hK>p7is#t@Dn$SbXGW]I\7D_UNPe1#!%pWPY2G1WmChU(OIXk'f*C9?'8Q*fnb>"_V[V<kRCeDp9Wl(VBr@'kX9_!'gBjg@#<(ph[4lS[uOeU:`RFnY\$W9\8CTI72N\bRWV%@P$T;r=5eiMP(ZM9rUi,:WZ<N:ZUkeU)/j=j8IJRiHU>bmrl?uDRmgJ2S,#dm$:k:i2"O;Dq+@s$HMC5eQ%Q^j#'kZ?0T)+lah&J%`iNgn#sC@Fkf%lH)@O4lb=R#X/SE1r=O*(Vr!@RQAi2ZqW7c/VcAi9Q,PaCdg%")WQLfBE6ga[=a;Qc[a,d-^0!jTL?K:K/3Nf=6%EC8!2)fg,WOL*u%SfN%>AK5pYANT=CbDM'42KbE-&(KrjTOu4H\Xn3)\GhY,`pnqF(pi7f):r!,n]He-41h[8\k\R;6[D1ecN?11%4qH`BVsPD.RN/MB,[E<+8MOg;3Bg6\GpC*C$U#k@3g94$[QWa:QgnE`,3ZeS]Z0@rH&V!o-qk[LjaN#g1!QJSP.c>gU3R2^@f>Ld%2Dk2M7$pro>WO*'C?&5\Qop-$@ui<H0/hdr=K:X6;Cs2ieOh`'X^n3W;H'2JZD;Z&7[?/kCc'#i0k@&?R9$Gt`els&^DC2,R(`4*%-<jt8]>>hJm'\-O])t(j*Kh?Y*mtue*mu!0T$eQ[T'4ku6r0*rEjD2Fj<?UI_P@Z':/7!ea,dKM+AP!nNY@1R8raR?h&7fT:6*e[%?8t\-E_;@VOH\^XRN3nPg4<af8L*Sbd\IIu8SPJr@H9DCB?(lQ3A/D+EC!?[$YiO7XKhZug.iV<9H%'#PU;GG4'%e4`pC40B?(HE%77V+VflBGUQ5akQX>FY:\th#oA6i*%4N?_iC!mWS#BG]^1siShJY!l4:**ncX>FX%>uI+JB3eE&4GN3)@Bs4h_f7l%;f^q$3B>@i%H?,Mdo]/!(k_8&u1hgK+<gpB>a&uiV((J-#<gZ"hlo6/$`sFafNm)_Vfl2U6/,5+NBI',e:Q;$j&K5FN-/:t%4@X-F18?kPEj:du%(+\'O[?QYO9BhS.X0lb#6DHDs7VFo=A2H':O^pI-UH-G:M]2FHA>a_SH&U:&(C""q+HJ7(eI+o`/g,1)cPosRdIgURj%@HdP1KF?%8s7d(.24%eSBD8&a-]'26qt'VSuDHT5*8cWjGBCUkiG'*5P9%fDqK%iUdr]F,tT?EMN[$T(7'l1j=qq'77#?AF6,eaNm!9J*@Kq7%=@pr^\`+kXkDGI6in-gXm5Q>'`u-ltcD]E96-YDtEct^I=kLj,U*P#Cfs-^9+#m;a4N?Hl,,`d9'fe9lW7c/Xc&N``9'2ijl/Z)H%O?CPL=@r'#ZXY:Q-g+)lc^"f^Z944I7DBT>Xoc0rk12WoL`s`Bd7RG837^u.:H6p'elr!9@kD87EipJIa`0Jj$chp*:6+Xk>WAl6%C3!ReP1?lZ="RuH`oOWZ8NJk5PpANQ=@r'#Zf;aHH*[rMNc[Uj7ZMS'>`BTb)7S<7>VI*OdRgqe3RS5D)EH4R:5cMrZrfssi``Hq%Vq"sk=tO<`OX%R!1ifB*D`*-B=.H^Do_45C77j\-<KqSLXt!%i`GJ+@Fusa<X/2ocPcJ!1H48K2QEkhSZ.?4,_sp,i!Dt4jG!+0Y%j,%)%DHb3J,[/[O7sC[b]mTHia/ckuWr^\_@(F;>LbV?iWge.%U3Y;1\k\8emAoR6GSRg$:64.0e_\miBrch+0db(8EWaKVEbjnp%XCUC.3?o?+T4@NI5opE&0<_Y5<Bg1#b*"s`+NfjBdPYT-T6u`6;lh^%OJ8<E;bO?/Q$0_i@Uk[?\kGE!MDSV9?^=]TkrLnDa=0&K%EM`!f\:rdI7C/sF1;'@7e.ii(>uOg839ZfoA/mR0Opi*_S!%<DFA5Uf8@kZH)(]GZA]\=GZRJP%(GqVUA.WiW;)5eWfd:HSg^hoq%\0&f6EBfPKj*mXKa'Dh'=O?EWP!RN=A]Z(Z]%S@G/"/UEB?LUlaGh64ZF18k?ZkfK?obP`PRLSKHXt5@ja(IZ+QRiZa^?^,8!XQ:%AbKR^4c=ZlP`-A..?JnaP)WL8fk<dq+Q7W7a^>F]8!FE_0RH40n,d3'Ophu+.nPI30Y;pIY^kCA,bnbU,H'&T8s2KaFX>.;!OF:K%7`DU+A.Wj2TP)F]4^"Atg%%N`;PR%;jEN(E#&BJk8]$5.20M4W#!k3?p+ZiaTsp*!K&tAFa7+uJ30BEbE?Z3Za,-6*.nBl&Q:!qn%=LB,@P!RG(--9QJEb+h/327kA)*,[RqE<A?Ea2GIj.`FmX-Q+k++p(&HM\N]a*RV"XBLXASfLo)PRjO`B?L`I=`2=6Z<fbM")[8h%@n[m.mGln(HRJF3gW*^PEcgAA9T5"'*=qf/GXM]u]PP,B@u_]oehYfuTFEJ_9s7_aa(QAGg91C4DQcje1>Q9/XC\uV505gof-cP>%\(<!cR;T3(04qf-5)D;/f;E-(h=\1&.j";"Y><_)h-Q`7SD3@nS6PCRlc6k?k):FNXCTT^P"E`o[m%nn2:nbX1"BL#$+&<SjPj=D%hYJMSe6AOr@B-e#=i"'UIBnC&hYJMSe6AQH?`LS!]mQg1qTKe9*19P\[FT!1BT%S3ajT9M5@h'A3RnY.,hu?`A.il\%?\cdjjZ':%o\-/8ZsL@cp!L1)24\c/TOu4H2*7DNWHOXB3BNhrfs-jJk-]Rs+(P,n1=j*I0#q)BFUu[,mXF`QCC.>e=I`DsMjX0rZ)R'K$sn+,%IBK)ulV@*33+mDaI9m;L3Q=D3/",)hp"Ai9KrjOXbj>?*Cj8_=4Zp2h/>Lfp>aNibGh.#gZfd:=4mVcNr@7&E:iq)mj&rQ-Zf>3W%+1(!1miU"UQ]I#q4]h:B\Y<`_%DAa5JR1Ummq_Z?Tf;K-,J4-)H39Q;cQ,/qmc`>F8'db3HM0Jn0HGDh/'.R^ke8YjVI$pZLSJA=%g!ScgbK!#sSgSjTHlhLno6Huf]!&H34J.`Vle$nRT91.09V0Q9O#7[X<Uq$dZ,Yl#4OL5"2m$uo)RJTg4P!?t^?dm9Eu[0R_da//%n/WQc-bB9=cs"!BX(kmN[lLfjbSG!ICU'2-(2MT<YuXtTIVZ/nLNBKgkLpOJjY_/G-g]I3^QM>nNO[.)>A,>L[l>g\,lG^;agEe:%qmrrrr!DBUA;r1MpQ4KQ[nCW#SLt;XN8Gd904X-c81rqI+;Y?Ic[hZ.:\=!uU*mu[ElA'":<=52:5@>V*Npge3lH'0QO(Xrb*76H%Npe=l4XS3nPPlP<]j8sX]?,M_amn1t^W44]h.&,4_2[O!6E]$^P$5hEP$5hE6EYE;B/r'!kh0rFc]0f-1\nW/CKN4`'60#REWjN'%Z=Rmb4]^M*ZDl%6\>!TU'fe@YaGo9HXCoRJH6(%#HJOUNj>r<D*cIV;$-+&D479'#EC\<74*#L,d'Mc+VsD.gd*m-in^,0r\.D82%&(b71'/_kCW7g]/Y/_%q+3;QD51#MRHq80-?a^SWTsq<[Y&fo1XGcD7,u^-$M4?-['=i;d!-1ENNg1k'_b-)Khaiq%^htF>MGLdB%,e4C>qPkH8a_S>LXVOPmSCSO?ParR_fkI^WSOR:_m`sqXZ*,<4NR0X\S471nW:")g=f^gdYL#i))RJ&]<TG4-g$;Z!*jaVe<TG3"%6<ns4CFnGR9.s_`9/#7K88j2c>W:$9kCK3f&+o46U,V]hR-<5pP[;B$P[:f]];L+=a`C<u>fWC`h>Ja-A]O36q<cSq'M0p7P;DNK%\gU:uljluh-Age3-YiJt7;9%7RA_HidcC&3AhJt)<S^&+;%tB*@94(f.O[nU:Q@5O8rf'sPN.Uj*@jfYYA@OC,-D118_=cSa[t.\%&B@pnX>i3jN[oE*-qZqSQ7I9e>`l@(V9.DpX>DpD]:q8F)jV3dB>\a[c^$Y=b)XotZfR4=/<>$$Sdil#PLEs<:AYs8A&ZRCEND,[%429Vc3G!tLm;'q+-[Kg7<r3dCa6L$uPH[udI>rqjFkYH/*37W(`oL7(p,/`1Z!-O19TJFqSfFqNj4EmB?o[0,*;1=cE_bsN9r?_r%9I=?d-53T9;RW#GAZ*LN2Hm1nUW$DoNbGf'1TGU:BsQ$hL=6ElFPo!m,WXnZcb;kbZpb_#%\2en,TU";)b;18e7i9"2QJcuF?5T8%BjYAUX#H,.d](^0`aj=eB#b!24!)JrnNbB[-[Ks;2is8CXB1KPXpW3q"%acog),0"pJR17VBAIPNgh4;H1ga^aK"Qj&+)VWNn]D^%*&iR@b')PS)Mt,&$B7I#220%2r#K5"&pj8Acr2p5KUt>>o^"T5B?uHpjBc,0MN.;g+jZ%*[H1J]'cX.1=g=*H$OV%,f9e^&o^',_%B?q;UHWG#0@SL_42&;dUh]@aZnOf"`qPK_KCJ;JsNCag(C::=N88%VLf8r3e7nkL9XWsb%BF9sQ>Ym828TGb'X4b5,lr[tba>u35%f9e-coON4kB?Lt!GS$q/^4t]Nc1[=U`li,*Y;&%<Z[IhtBrkqD)O"YggXhf4X4b5,_QeFSCIjJ4KLp44ouN<GnJbo"#'M4ber*u7%DF^aU%G>QnakDfHI$M'T2-W^KMkuXXd;!#U10UbiUWSaV;.U%Of+fWC>Z[:dN)j`IW7-E]lV8*kXuf@TbrSNFDA=MO3N$Kd)R<Y&%8NuXE0NhL:)'6lPnNbE\#C:PUd$*LHS/j+RZD11.p,-C$$Boks=CI@g4!%"X9\'ZL8LEbXdNl/f3=b\unPGV6jAKG89X:F2-qc=2%QU=o=IG!K3V5!:?)^?M=`sFmj:?_@qcB!pUT#!csP0(;//BM54>g<!.Z'SV-*/]p'o&W]4A>3ri8i"SVUS)8C'g5d(kh389A??q!%?Pe%?qW/Gd6_TWF^`3]@9[o&VSio%)m(&m(cQ,/;SIVg+0mi?YjBLpanuUKb(!hbs>TM-XZ&pQ.#C?)+dBi"mSt<IWXfjI+T'4;&%HL#.ELP0=5f%69OX1,g_jB9b#2($XaY-0R*<d/tOag8SECJ:=$GC;U^Ze$n'h\s/,:G^EEqcH1FL3q#nCIZ3i%4UP9iP($\c-^K;%6W$KE^O;+:"(Y%nF@<llNS&ZaP3Rj:\<ku*)KCr)h*o50%G>F58S0\U3/6e-bilO>&NtqOfCjY=3om0d,dWXoPpVoabc*G@"Pm%I%A<Lgk:?^D+kK1ZGo>E/IZQj,'"$&@_W7g]+c&N$LG-!YP#EBNHL"/kfBO>7mX?7r-h,Ks[Vqk'UMm;#W3><j[9:Fs=S.pZ_3=aQU%EB+^\`J^2H:n/6'C6h54;Ohpl:nAB!>r`ODG+?pCj+LZj>r`O<Eh$"5A#2ag3*)K4KO_tm8N9b@P_<Pc8P(mBS<RR)"Z\ZIaN8Ej%c&NMc-0&*9;B0jKh=`^<`sS#nESSpIj+^mh:S=Iqb8i`Km`=(eZD=F#G;VI&%,%n[U_Fe!8hO.:3#Te;r<+HnG!+01GV89hQW!0p%+t(EG[?mUo>u@MJ%EYk9m0-N_EMrbEV;+i$BeKt-i_Fi?YHGCaI_ep"a(Jr&`Cd[]kur\R(t=SVU-<pDaqaU&9>b[Y#,%3T5'q:f%(%p6Q_eccI]k2'5C9c@>-]cbZ<0ZIEDQSrL8<)'&)Q?TFijbqb?92,f[;8jJ;*&$K)]'tMCa_57a/sBW%.#H&/mM".;/VVL@HBrr%3:?!ajl^iH^:_HJ9C-"8m^C#1.IOV\mnkP%[ML#I..4M[Y@\PogWT4B[H#26=57XG$G1(6npVcXIe6C!BufYM(T1PY\%NWO?efKO%5'BcXD6I9r/FKrJmnbJ$[TBA4EP&o!A[Ao$?G3^Kghs;*4*TF0@HVNTou^ld[iLK$EOYo/W6?(d]bAFH*f9R.Z1=]^G-![&-]Soh%eR@WQHTc@R:p]2>S:86/D6Kb+]BtljF18h0*%Og"ZK$\0U;Pg\lEG?9]d=_CeEj[iV[)`qMRf=7Q*a2APF?Km4Lma-1WH`'e!&G?%p.F&Lh-RE>:ZQ>;,%o(43EoOU<%i&'\(dr"2N->W2b7N"=OVDulum_u\$!6s?Ic/.m^?3#CL2o%lg\'tFue!HP'&e5UfQhORad5L%8<ZZoWRkG_3q_3B`G2iIS7YD_+n7*!o'ab#HFghU#aUrTkl!ath026[rOk`$.%K]G7/IM3l(6c-dIOn(FaR^RFW=A.Mcu[tiNF:X%Wp]N&&?*1h-dY-/SUU)0<C\8A<8Hf@M4j-/n&,H2G>@98X"GF:X"BIu?s[],9F(0(94U)N='Hl4GKp;k9A1[&X"J[a4KQ-TV_Y?b%Um#/ilB4q&_l??WZ_#7SY7%bVXP-@oGG)aO],F*9Bh-^M`2j8*EW3>9IeA<PcIbj`13:HYqW(rIB%:2cSbp.R:7j9T(/+>0:j&h"%j83_j_L/VX4r*4<h=OceVE\pj\cgba]BKtK6g^aX4d``4G14oW0rZeUDis=f%a'3lc=A5fgOSQeAO`64>3us[H67H*)fnhGZ;P11%*Q^puZg'qZC<S`#o;iV9$'[('2L;$VA>K_WW&%S`1'#iNBG(O"-"mo<eKp7/RT)eL!`WG\%1lKEi`qVTd\jpog.IuF6?k#/i`*"g%daN@><L7)VGUn4%FHEu[-dK>M.t-,ZI2P2oX0)"3MM&CdB+D4n.t-P:O(!0V_seE53qqJYQ1B[be%)Q\$d`DI55:@&NG;R$#.n8H%h-/Wq>8q=K[3=^9FY)i^ak*Yg`dq$ol8%Q+Zg-*KIGEORleH58E@20q],'FR%#*Di\J&3rF&p;^]!]U#\*?pn#'OBR?-^YD]$RjV%Y$49\*Mg9jGo*7@eh[&LX%@FOE.Ll/fhb[FFk;LqO.fC&8mkP&h>hR_6KIE7'5Ci1##_AH*E&4S?Bc\f$j&`[18cfpWOnM(>7BW'%$C"hUM`,IDUc`)(8D`!;&L3]2P_.Crpc"qsA[h`7eE)\R<itI$,=qCFDMoXZ*.em%/q^>>VClrF;4'D1NPX+ULht)\Ys]"t/jiu%%V_1>?1T)jHB$m,0(4Y;m'i*PR;cdAMQr@'GGA'`W!@2/M?/^a93H^%^oENh\%MTg\=!5GK<4A0/YHS+.=#T91c=N7MHDWC,Q=95d%PpM-*J`bGscG#cH=-@2rPSAX#k1#Y*>aCK#X@eY]6->E;KgY4he<TB''dSJhlc.Eh(JJ6%9(o@/OhtNiA*Sqe-9-.EGZMch6te8s%i1Ij8Q/Yp],6_D@.<VIBX)b"8c`.gjV%Q=)JS]$m?)aDq0`nKq8mQ/TWZ3J4ZRSFHEWf9A^f24MGEJ8>%##V_]?R8V]F:SGbVG8@%Q4K\='e1S0l3`f?.<U?eacnhGb#%AR-:=a7RLH$q:cTCla2/mb\jGLh:0dlA@SRs-@lSV(O5\T*Qt(.$=Ih7GY#738;cbE;r,&Q8%:#aZ>lsbP22GCA@FW7/ZUq-oH8u0$j`?\>eV-jq8Y.@pPW30#N#unB"L'=TX/sZX?X40`CeQ#3fPNo/@-%kJ4V34,e)^X.0]'<28%S2uJA4/]7Xqm551<VTGRe5`h3bc.W^&of$QJ^T5lr'U'N.A4naWt\CmeA:f8VQNf^),jTcTT#kNjqsOb#Hek8h+$<[V@Ea4.<QSK%f9j-AWFS\.FfAnD?):RWV63]IR8O8cf9!S'SngmQL<h`RXr=i]86r'"18V-O0ptp@.@El/gF0S/e85n);sH:#XXSCXZH8?B\mbV4%c_bY:VQOfq^P:UbT*r>lk@]0#Q'44NFbBE+T2"EX:0l[HI3tO`3LNgt2Cb>UVc6CqeSV*bKBaA?P=]n6j6^P$X&1mF<7a%:T%:/)%L9*sh)_]d<\r@MA;I+A.A5Z^.F>Bhu;*#Rpf3CA)<7a#DhMGLterB-EheM4$V3=2fD1gUI'r&6Z&u_sM1ck_6+WlM>f3C3?<4Cgh%"fc>P9`ij&f1b2R[;S=p,h9G$;OS-QWTSnXlM9A/B&@6CWpXYgnpJ\[RSRan7]B?Gi2LAEJ>\iVj..(t\+*3T[ouP5C)s?P.[a2d%.$[K*]-sPf[Hk+-87ss/3g%mm>/k:k8nQR1$7/())MO=tFcA`0Pe%;cC.d<:(cA.-6]@I3f/Cd?.!:M9acsBF+k9?[4E!Q),M**"%N`$0Wh8W&CVN,*l9\fnBbNO'b"CUM(oGa1/%?4sn*G#qP\rD>S9HAg$Qo\V/E9aBui7(Ut!NIs?"\p*"'V%5L.6)GSQ[u-2Shd1G%;bn90f8XW%VQR8tA5(fKhDD,?bbd+;)e[We\djkAR(D_.acsA3j^^thVfFPhY.J^0V/BdTRSqb:S;aH5Y+/1blPh4q]Mg:-;sLr\%Sd_UQfU%?BFXeb+l7UFpO.fCFE\aDm;`P^n[fD_6CI6:=1uV1YS-5h':mLd7_OXR_M,Dm(R`)./r(5cn--oXDjnXQk*M-'6;p$C@%l8mIY(j-cE;N/1^XX$AAVc4;(Y#?d+;:d7]`2MGCO+u/$S4>s32U8'HFWGKePWJ(T.!=$2;!P!CT[Zgd6)gVSJl5+0"Jq,>#tc4\%&st`F,VXAj8T<s&0#FT_:kDV9T`h:=KbBb6$7.BK'M;cu>UY0&UJM"j8"g'`cBT$03_C\PFjs#kl<Gl+WM<XK;?uk+8tG8o.!64t%;!P!H^soo*Jl5+`"Jq-Q#tgbh-6RGq9gJ!BRt0#!E.Upl?lhcXKbKP/(JZ[L.%Gh;;)eTUF5[7sDIWs@;+KRJUX"Q,LcPkj&9S[^%0^;n&),[ka!4@\A>WD,03fWQd\m_bRS*GW@b"_Op2<C_3TUKn&I8EYKX$3JZgf<6NIVu1sW[YF-#M#'nl@WgY80-4pOLg'i"f\8a%18Jf?mg2n$EV9O7ULl9WNfqMK3[uITl6r$YWS??V`EJk<=DMrP0Qis!9V#f1VN+j%QoZl`),n!Vn!^(8+e6,7\/eM7\C$[)ca[EK%2!%3+o:-i3NEiqilL%k@5cO@V)lBe6<i^MsNDc[AK2Ul".iY>1-S`A%WRG",SPlBWUH>;I-`_D_h;hm@gYtm>O?/D#!ib4=$'71i%SV0iF'5(t-Guc`dN!',Xa,rn(FW:ej;<O,d&F/3-5cE_M,D8*"lN^8,fgYsa*8q-!k>NGkkr@&kT8jR*nEJlX^o-4g,()G3j27eT%>U"PVc=Oehj'7=_bTE@kn;d<s'8PF!IrN!U46@&K(OF:&_+FL@6m;"N24ncGH!V/<3&g%ao,I/BHfbja#^Xhp_0L:oR6NYBkWSMB%Qks\05</W):%LHElp+A<HIr)2WHS&Y)8ql06C_G=:R?2:#<Z:(g(QJBRue:c9MD.>.jh,)-dYSc/"TXX3qt.YdrEm_E&salbbg""%Ai:Z+'XR%O,i!&o:5#*'k@8PYh]CS+FG?D)9aBk)BK@gp7ai7>AMP9=]HPaDn-q.D%s.oN"&'#g%T!IB3Zh`39\7P^KM9F;299l'%Pms+@j(X&.J;jQ+o4^%kFG!^DEh7Ct#HKK,J3sC8j$Yb43^AdWl+EjA"4M7?$o"4[-,=UMJ4FOC5<0YLXn!hn8+2^-&*?UMH/=4G%k;>m<:notmTAK&IRdPjPkfr[V>GZ[&H5j$4HCi_F+UF"_/Uo,02,+@LU:8=L5BbjedIY!c4jRo4:hF%oKJN-;-Nk44qrOM<H+Wt\%!R^f+ccibn$%Y/p9W0YG@6tpecnHW,S]mtcaA1SDIhlWR9aG:'@7!41]NbB:L>.$`r+TVo2p6,Y-?#3b85/c[hCO/fEq3Q4PKM!o%j\LuLhCF)eEq39,NN_EVneY!!l8k,h:>`X6PO<p9UZiOR8[jR'jMFL#j\O1JRS3taempgC9a9&U-59*d0V;H6/t!-FK3W1G*T5W[%9'GnqU(V`8ETnhAM+d##-Fe/]$*1Hr@=q1J)o\XH!+sKP].cXe[HfkL.PBP2*/]))HCe/B3jsCQV+[Ijc)"&I9'4R,h]"3("V1+:%Tgtee/fbnFiR0"hYNF7Z$70cX&jTN>kq;m0nD&s9U/3Ur/pWH@q&Q4lQYpXE8'qkiK??r$Z'u1X"KW)f&%?EbT=EF1+dZ$fd\Uk9%kUb>qeT(ZQ6B*bC>e3n&eV#(^;WcDEC`RT]2NWs0F9uQLq*NS*`mU]C%qiV<.jn9[2E[#!F;kV.=?9PDVU?bu!2e2@NU^V@O@prg%kr-J>Tl_7"`_\^H2J1A`8gcFZ&uCecFNLACR<4;6a\]Q:l!u1_F;ct"&uCe[F;p1Y9Y0<6pdW[X.OQJ*&s\ZKFR0<h8XHEH%&M^O%15=5^-QFO?VK+GV/lObJ9#mNB6g6@[PG!":(e.IcG(c>WQ`6F,V;#Z:_U>\2gfV-]aWrECVIC1(NnrX5dUh\i@HfQ/P-B%rC.VO=%9X,iq?)CX8QS)2d#u#OT=Q2ff+"3B_VTY2r#1I.M9'4Q58gSQC18U/EFP3LR\TF6;a]uDNWFR\gG,]")?)CRVQS&BL1m]i,<&0al%;^rYXQRS2YV9:KVN2=^^9#f:j8gSQC141^,KIE+EV9>)q`mSFb8uC$R3"f0S18U/5FPoXtV9@dB%Ah6I98:mVlg*F2TF3ae-:@#Q%'pG>5RBHTEPV,lk)+p6pRLH%9PBfk8U2VlP/lObJ8sdBh)bQHrSID@<'MjJ3Ylbso?(lR"PcdhG)*c.OnE5"SmSLJ]9k>^nBFh%`%ljJS@=/`*WV(2NaNMU,p3*<aY9k>k]Tr'T2Nh,-:kmB;5Z#kLT^s]JF*%YBhVD=L@:fEcTa51dNFG9#%?omcpJE[EkPJM?VF1CWq%(4u,!@(J]#A2%;/q.)0bTmRK?Y#%9<9P<(5_/tCb8RT+rkp.rgETJGu?(l3MQ`e-]'pl)5D!E\t4J.uP'MSYX("Z.=dM5A$ETmfF%PIP]<GT]D1KDXN"97Wih/slFSK@oC1e_CFJ2.&[kDE%nt]&=dGKr$:PQhn2%%oDKtj\k!H%rnYT&!T_8_`hmM3Fa-fl\9iWX;gl,%F0"D1gjs0q>7IE5>J]?h3=M`o0/ue>9!pK6m"<%%A8Km'jf>A&Q#auK]#ls`(e_o0E3OGLMTJu3$_n:--M/YZL)rdIZ#jbk\F)6L%J[3C"\k:dh/mY;m17+$'iGe$2V3AH35Ru`#YmVO(?);j&Q`a4LR7gV\T$4%3Yf=qaK2_i;Y#7HO94o^T=Lq-#A1V#_Hnq#Uh?R@s%/EEb%N2<T):WCi=)o9:GV#rIQQEF9N2>a(%YMg!k:r^p`.O\fk.c9,o/7#**17#(@65`F?mfi_<QEG*r2o?`9To>hKHj>k?FHn&m%=Lq*:,m%@p%JBYM@,%Z&F^qk:#sn#T<4WF0/Qp3N\88,NK'nrq3g?:ZQ#]Jr\k:FH<4WECX]T;te4FCqh^-e]%2G)0;+?DUctLu:%9#kO_TQH06a],i@\R[01S&(fH29I4Dko/ZHWH;q\LJ$/HQV=5kHqf6uFR02:9@kSYbb]*:3mFL24#gKV7_*%^?)(X[Q]D%&E9S;&%P.>[oElhQIp4U>[CG(qRdl!IbJE`NG--12Q?\8?HXoVBSRB@:e4jaob9Sq1Idje3uAQgBP;pb`8Y/*I[R''G$c,]pd$an!Ub*1DD%<I*#]B2tJ/`iP&]k2H\"?#-$3C!o&K.SUh'/q`ClpT+^cesWoik?/aERT3M=#.#dPXtAX5f1fPK=d::M0Pa1]ldh(9Uq6HNg0?jn%V7SXAa/t5^Afd7"lj`ZR47$f>lU26:go]-<AlXrbK38p7h+0'jf=T3RW-$kW'3%$dJO?:"/t\fbFdGm#l.?4NQ*-b')j/NDVN&f-%(V$Gd4Y^Y]7Sh5GTtqdh;sAU;`b[6QR&r6Vn^bk,(obn+6`IuKrbka"H=k0+/HHC49kX40WH>g-A)p)alsqSO02/A#=DpF8<OpKb%P:AM;@92JZGJ+-EY#jacDY2)ab)Ph8l1s_op'iEUYF$2$ZGG[4'!4L:V!AICb*(WNU+GP4Kn;nJ)m`<#-F_i-_qokQcL-.iG#qKo%krRH^2qklETg7%K(Jl7=]!j_OV!DdL6)<h!=d:4[0WTf$O.V&sZ^PN$aA'`u+_PnhS*\rg'1BDAVpA*25!>rsFF?OI.7a5F<X$T)%4KEL5*6bE&)&m<d5r(^m<Ra-H7F&4h8B-D2;ils%Bb_n'j5h^]fH1TcDOer*d+_B<TpM-J;)/dU$;!/ho.!Dc+:aQP,j&*mN"'d)%0O]_r8@jqO=(*jBFIgj5/`JJK#,RO<m"<a.D0GW/_k\69:@>HLNB_W[Vg7*3^V9A)mT#bcC*u=3pk!ikl%U]960ZAnP)D"3e4j\a%&!p#UZ4Er^FkQS:H8Ff?CF42WLJ+M&8bXlf]s)VQGD,uJ^i=.r>&4A"ma+VHm`gC9VglGSX'baFa1/UZ^\l*uIH'GclE+?A\(>su%^VShH],puXK%'Su7st34LTWeIg(SqO`3.p"=c?44oM^4Q)[KN#rq)4*%jd[df4hgCP1'Z_4k>TlGeT3Ua!pJ--+r$Q38=4UD*Ec0%n>IjDDI]Rd#g_,-S[cFZK=f/`D"2lnf"DUGA@$;=jB[eln,Fd-fFPUb"97"ur1;NRpUA"L5O?PerVj$XmJC8bhHr'gTu%>MmX;j2%kI/k0HX?IGhck9qs.Cn"q\rk$#l,WF^Ai,&7dgkuo)4%qD0oC_J1KOOpQbROqS(S;O4`>C9]l0Ch%/,T)b<3cpGP"Vo%lU,lWA\O%o_j2f*c",UCs%/*YPi`q^L-0j%2'cZ4^BEdmW1!&qX%K-TBjW1r_@lgn%a/Fo7-YMrO`)0=!-lp3;i/nedn\?5PV2U0g*1"$utcH%LmW\gaSI9F^`Q"@r^^Mp`tJ>8RW@CX:nmkPPWT`s*.W5NZ%DRfLO,F(U3G(1%/J1%hkBc3Z*-CgmuK[3__43!rT9GRr:/#JYJ0l"%p"uD@m4hT*naqas^A.'<Vk8A-lhU2=Q[a;RqT[KeYQ"CKT>#dNm2)Dpq9;^-rcMMUg0!6\jmQOSjhC/1I,=>)l8LBq-ff_sr;=)(%pX9:GJ,R>fT0N;8dn`4(iue<to!bgZI't$O(LC`[^K^6W=)Zs.H?ilomuRKu1]t_rRnl9Fplf(:5Q'fI5Q0`N^V>$lZ_)[<n]1\&%g#k#;p\M3L^3oJIUX-^Sm!iA)IJ22mCUt=3H2O#,cX4H^qTZ(m0:ooWo;fX.OiK&br8Wifoq29SdJj6=P4&k~>%AI9_PrivateDataEnd